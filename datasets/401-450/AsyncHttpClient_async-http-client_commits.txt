File: client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
Patch:
@@ -235,7 +235,7 @@ public <T> ListenableFuture<T> executeRequest(Request request, AsyncHandler<T> h
                 if (!cookies.isEmpty()) {
                     RequestBuilder requestBuilder = request.toBuilder();
                     for (Cookie cookie : cookies) {
-                        requestBuilder.addOrReplaceCookie(cookie);
+                        requestBuilder.addCookieIfUnset(cookie);
                     }
                     request = requestBuilder.build();
                 }

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
Patch:
@@ -32,6 +32,7 @@
 import org.asynchttpclient.netty.request.body.NettyBody;
 import org.asynchttpclient.netty.request.body.NettyBodyBody;
 import org.asynchttpclient.netty.request.body.NettyByteArrayBody;
+import org.asynchttpclient.netty.request.body.NettyByteBufBody;
 import org.asynchttpclient.netty.request.body.NettyByteBufferBody;
 import org.asynchttpclient.netty.request.body.NettyCompositeByteArrayBody;
 import org.asynchttpclient.netty.request.body.NettyDirectBody;
@@ -96,6 +97,8 @@ private NettyBody body(Request request) {
             nettyBody = new NettyByteBufferBody(StringUtils.charSequence2ByteBuffer(request.getStringData(), bodyCharset));
         } else if (request.getByteBufferData() != null) {
             nettyBody = new NettyByteBufferBody(request.getByteBufferData());
+        } else if (request.getByteBufData() != null) {
+            nettyBody = new NettyByteBufBody(request.getByteBufData());
         } else if (request.getStreamData() != null) {
             nettyBody = new NettyInputStreamBody(request.getStreamData());
         } else if (isNonEmpty(request.getFormParams())) {

File: client/src/main/java/org/asynchttpclient/netty/LazyResponseBodyPart.java
Patch:
@@ -33,7 +33,8 @@ public LazyResponseBodyPart(ByteBuf buf, boolean last) {
         this.buf = buf;
     }
 
-    public ByteBuf getBuf() {
+    @Override
+    public ByteBuf getBodyByteBuf() {
         return buf;
     }
 

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/ProxyUnauthorized407Interceptor.java
Patch:
@@ -205,7 +205,7 @@ private static void ntlmProxyChallenge(String authenticateHeader, HttpHeaders re
             future.setInProxyAuth(false);
         } else {
             String serverChallenge = authenticateHeader.substring("NTLM ".length()).trim();
-            String challengeHeader = NtlmEngine.INSTANCE.generateType3Msg(proxyRealm.getPrincipal(), proxyRealm.getPassword(), proxyRealm.getNtlmDomain(),
+            String challengeHeader = NtlmEngine.generateType3Msg(proxyRealm.getPrincipal(), proxyRealm.getPassword(), proxyRealm.getNtlmDomain(),
                     proxyRealm.getNtlmHost(), serverChallenge);
             // FIXME we might want to filter current NTLM and add (leave other
             // Authorization headers untouched)

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/Unauthorized401Interceptor.java
Patch:
@@ -188,7 +188,7 @@ private static void ntlmChallenge(String authenticateHeader,
 
         } else {
             String serverChallenge = authenticateHeader.substring("NTLM ".length()).trim();
-            String challengeHeader = NtlmEngine.INSTANCE.generateType3Msg(realm.getPrincipal(), realm.getPassword(),
+            String challengeHeader = NtlmEngine.generateType3Msg(realm.getPrincipal(), realm.getPassword(),
                     realm.getNtlmDomain(), realm.getNtlmHost(), serverChallenge);
             // FIXME we might want to filter current NTLM and add (leave other
             // Authorization headers untouched)

File: client/src/main/java/org/asynchttpclient/proxy/ProxyServer.java
Patch:
@@ -147,7 +147,7 @@ public Builder setSecuredPort(int securedPort) {
             return this;
         }
 
-        public Builder setRealm(Realm realm) {
+        public Builder setRealm(@Nullable Realm realm) {
             this.realm = realm;
             return this;
         }

File: client/src/main/java/org/asynchttpclient/util/ProxyUtils.java
Patch:
@@ -17,6 +17,7 @@
 import org.asynchttpclient.Request;
 import org.asynchttpclient.proxy.ProxyServer;
 import org.asynchttpclient.proxy.ProxyServerSelector;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -80,7 +81,7 @@ private ProxyUtils() {
      * @param request the request
      * @return the proxy server to be used for this request (can be null)
      */
-    public static ProxyServer getProxyServer(AsyncHttpClientConfig config, Request request) {
+    public static @Nullable ProxyServer getProxyServer(AsyncHttpClientConfig config, Request request) {
         ProxyServer proxyServer = request.getProxyServer();
         if (proxyServer == null) {
             ProxyServerSelector selector = config.getProxyServerSelector();

File: client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorInstance.java
Patch:
@@ -143,7 +143,8 @@ private String encodedParams(ConsumerKey consumerAuth, RequestToken userAuth, lo
         if (formParams != null) {
             for (Param param : formParams) {
                 // formParams are not already encoded
-                parameters.add(Utf8UrlEncoder.percentEncodeQueryElement(param.getName()), Utf8UrlEncoder.percentEncodeQueryElement(param.getValue()));
+                String value = param.getValue() != null ? Utf8UrlEncoder.percentEncodeQueryElement(param.getValue()) : "";
+                parameters.add(Utf8UrlEncoder.percentEncodeQueryElement(param.getName()), value);
             }
         }
         if (queryParams != null) {

File: client/src/main/java/org/asynchttpclient/util/MiscUtils.java
Patch:
@@ -32,6 +32,7 @@ public static boolean isNonEmpty(@Nullable String string) {
         return !isEmpty(string);
     }
 
+    @Contract(value = "null -> true", pure = true)
     public static boolean isEmpty(@Nullable String string) {
         return string == null || string.isEmpty();
     }

File: client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorInstance.java
Patch:
@@ -156,6 +156,9 @@ private String encodedParams(ConsumerKey consumerAuth, RequestToken userAuth, lo
     }
 
     private static String percentEncodeAlreadyFormUrlEncoded(String s) {
+        if (s == null) {
+            return "";
+        }
         s = STAR_CHAR_PATTERN.matcher(s).replaceAll("%2A");
         s = PLUS_CHAR_PATTERN.matcher(s).replaceAll("%20");
         s = ENCODED_TILDE_PATTERN.matcher(s).replaceAll("~");

File: client/src/main/java/org/asynchttpclient/util/AuthenticatorUtils.java
Patch:
@@ -21,6 +21,7 @@
 import org.asynchttpclient.uri.Uri;
 
 import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.Base64;
 import java.util.List;
 
@@ -95,7 +96,7 @@ private static String computeDigestAuthentication(Realm realm) {
         builder.setLength(builder.length() - 2); // remove tailing ", "
 
         // FIXME isn't there a more efficient way?
-        return new String(StringUtils.charSequence2Bytes(builder, ISO_8859_1));
+        return new String(StringUtils.charSequence2Bytes(builder, ISO_8859_1), StandardCharsets.UTF_8);
     }
 
     private static void append(StringBuilder builder, String name, String value, boolean quoted) {

File: client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -86,11 +86,11 @@ public interface AsyncHttpClientConfig {
     Duration getConnectTimeout();
 
     /**
-     * Return the maximum time in millisecond an {@link AsyncHttpClient} can stay idle.
+     * Return the maximum time an {@link AsyncHttpClient} can stay idle.
      *
-     * @return the maximum time in millisecond an {@link AsyncHttpClient} can stay idle.
+     * @return the maximum time an {@link AsyncHttpClient} can stay idle.
      */
-    int getReadTimeout();
+    Duration getReadTimeout();
 
     /**
      * Return the maximum time in millisecond an {@link AsyncHttpClient} will keep connection in pool.

File: client/src/main/java/org/asynchttpclient/Request.java
Patch:
@@ -160,7 +160,7 @@ public interface Request {
     /**
      * @return the read timeout. Non zero values means "override config value".
      */
-    int getReadTimeout();
+    Duration getReadTimeout();
 
     /**
      * @return the range header value, or 0 is not set.

File: client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -84,7 +84,7 @@ public abstract class RequestBuilderBase<T extends RequestBuilderBase<T>> {
     protected File file;
     protected Boolean followRedirect;
     protected Duration requestTimeout;
-    protected int readTimeout;
+    protected Duration readTimeout;
     protected long rangeOffset;
     protected Charset charset;
     protected ChannelPoolPartitioning channelPoolPartitioning = ChannelPoolPartitioning.PerHostChannelPoolPartitioning.INSTANCE;
@@ -509,7 +509,7 @@ public T setRequestTimeout(Duration requestTimeout) {
         return asDerivedType();
     }
 
-    public T setReadTimeout(int readTimeout) {
+    public T setReadTimeout(Duration readTimeout) {
         this.readTimeout = readTimeout;
         return asDerivedType();
     }

File: client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
Patch:
@@ -123,8 +123,8 @@ public static int defaultConnectionPoolCleanerPeriod() {
         return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + CONNECTION_POOL_CLEANER_PERIOD_CONFIG);
     }
 
-    public static int defaultReadTimeout() {
-        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + READ_TIMEOUT_CONFIG);
+    public static Duration defaultReadTimeout() {
+        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getDuration(ASYNC_CLIENT_CONFIG_ROOT + READ_TIMEOUT_CONFIG);
     }
 
     public static Duration defaultRequestTimeout() {

File: client/src/main/java/org/asynchttpclient/netty/timeout/ReadTimeoutTimerTask.java
Patch:
@@ -26,7 +26,7 @@ public class ReadTimeoutTimerTask extends TimeoutTimerTask {
 
     private final long readTimeout;
 
-    ReadTimeoutTimerTask(NettyResponseFuture<?> nettyResponseFuture, NettyRequestSender requestSender, TimeoutsHolder timeoutsHolder, int readTimeout) {
+    ReadTimeoutTimerTask(NettyResponseFuture<?> nettyResponseFuture, NettyRequestSender requestSender, TimeoutsHolder timeoutsHolder, long readTimeout) {
         super(nettyResponseFuture, requestSender, timeoutsHolder);
         this.readTimeout = readTimeout;
     }

File: client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutsHolder.java
Patch:
@@ -36,7 +36,7 @@ public class TimeoutsHolder {
     private final Timer nettyTimer;
     private final NettyRequestSender requestSender;
     private final long requestTimeoutMillisTime;
-    private final int readTimeoutValue;
+    private final long readTimeoutValue;
     private volatile Timeout readTimeout;
     private final NettyResponseFuture<?> nettyResponseFuture;
     private volatile InetSocketAddress remoteAddress;
@@ -50,8 +50,8 @@ public TimeoutsHolder(Timer nettyTimer, NettyResponseFuture<?> nettyResponseFutu
 
         final Request targetRequest = nettyResponseFuture.getTargetRequest();
 
-        final int readTimeoutInMs = targetRequest.getReadTimeout();
-        readTimeoutValue = readTimeoutInMs == 0 ? config.getReadTimeout() : readTimeoutInMs;
+        final long readTimeoutInMs = targetRequest.getReadTimeout().toMillis();
+        readTimeoutValue = readTimeoutInMs == 0 ? config.getReadTimeout().toMillis() : readTimeoutInMs;
 
         long requestTimeoutInMs = targetRequest.getRequestTimeout().toMillis();
         if (requestTimeoutInMs == 0) {

File: client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
Patch:
@@ -62,8 +62,8 @@ public void testDefaultPooledConnectionIdleTimeout() {
 
     @RepeatedIfExceptionsTest(repeats = 5)
     public void testDefaultReadTimeout() {
-        assertEquals(AsyncHttpClientConfigDefaults.defaultReadTimeout(), 60 * 1000);
-        testIntegerSystemProperty("readTimeout", "defaultReadTimeout", "100");
+        assertEquals(AsyncHttpClientConfigDefaults.defaultReadTimeout(), Duration.ofSeconds(60));
+        testDurationSystemProperty("readTimeout", "defaultReadTimeout", "PT0.1S");
     }
 
     @RepeatedIfExceptionsTest(repeats = 5)

File: client/src/test/java/org/asynchttpclient/PerRequestTimeoutTest.java
Patch:
@@ -82,7 +82,7 @@ public void testRequestTimeout() throws IOException {
 
     @RepeatedIfExceptionsTest(repeats = 5)
     public void testReadTimeout() throws IOException {
-        try (AsyncHttpClient client = asyncHttpClient(config().setReadTimeout(100))) {
+        try (AsyncHttpClient client = asyncHttpClient(config().setReadTimeout(Duration.ofMillis(100)))) {
             Future<Response> responseFuture = client.prepareGet(getTargetUrl()).execute();
             Response response = responseFuture.get(2000, TimeUnit.MILLISECONDS);
             assertNull(response);

File: client/src/main/java/org/asynchttpclient/AsyncHttpClient.java
Patch:
@@ -120,7 +120,7 @@
  * Finally, you can configure the AsyncHttpClient using an {@link DefaultAsyncHttpClientConfig} instance.
  * <br>
  * <blockquote><pre>
- *      AsyncHttpClient c = new AsyncHttpClient(new AsyncHttpClientConfig.Builder().setRequestTimeoutInMs(...).build());
+ *      AsyncHttpClient c = new AsyncHttpClient(new DefaultAsyncHttpClientConfig.Builder().setRequestTimeout(...).build());
  *      Future&lt;Response&gt; f = c.prepareGet(TARGET_URL).execute();
  *      Response r = f.get();
  * </pre></blockquote>

File: client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -105,11 +105,11 @@ public interface AsyncHttpClientConfig {
     int getConnectionPoolCleanerPeriod();
 
     /**
-     * Return the maximum time in millisecond an {@link AsyncHttpClient} waits until the response is completed.
+     * Return the maximum time an {@link AsyncHttpClient} waits until the response is completed.
      *
-     * @return the maximum time in millisecond an {@link AsyncHttpClient} waits until the response is completed.
+     * @return the maximum time an {@link AsyncHttpClient} waits until the response is completed.
      */
-    int getRequestTimeout();
+    Duration getRequestTimeout();
 
     /**
      * Is HTTP redirect enabled

File: client/src/main/java/org/asynchttpclient/Request.java
Patch:
@@ -30,6 +30,7 @@
 import java.net.InetAddress;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
+import java.time.Duration;
 import java.util.List;
 
 /**
@@ -154,7 +155,7 @@ public interface Request {
     /**
      * @return the request timeout. Non zero values means "override config value".
      */
-    int getRequestTimeout();
+    Duration getRequestTimeout();
 
     /**
      * @return the read timeout. Non zero values means "override config value".

File: client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -35,6 +35,7 @@
 import java.net.InetAddress;
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -82,7 +83,7 @@ public abstract class RequestBuilderBase<T extends RequestBuilderBase<T>> {
     protected Realm realm;
     protected File file;
     protected Boolean followRedirect;
-    protected int requestTimeout;
+    protected Duration requestTimeout;
     protected int readTimeout;
     protected long rangeOffset;
     protected Charset charset;
@@ -503,7 +504,7 @@ public T setFollowRedirect(boolean followRedirect) {
         return asDerivedType();
     }
 
-    public T setRequestTimeout(int requestTimeout) {
+    public T setRequestTimeout(Duration requestTimeout) {
         this.requestTimeout = requestTimeout;
         return asDerivedType();
     }

File: client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
Patch:
@@ -127,8 +127,8 @@ public static int defaultReadTimeout() {
         return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + READ_TIMEOUT_CONFIG);
     }
 
-    public static int defaultRequestTimeout() {
-        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + REQUEST_TIMEOUT_CONFIG);
+    public static Duration defaultRequestTimeout() {
+        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getDuration(ASYNC_CLIENT_CONFIG_ROOT + REQUEST_TIMEOUT_CONFIG);
     }
 
     public static int defaultConnectionTtl() {

File: client/src/main/java/org/asynchttpclient/netty/timeout/RequestTimeoutTimerTask.java
Patch:
@@ -29,7 +29,7 @@ public class RequestTimeoutTimerTask extends TimeoutTimerTask {
     RequestTimeoutTimerTask(NettyResponseFuture<?> nettyResponseFuture,
                             NettyRequestSender requestSender,
                             TimeoutsHolder timeoutsHolder,
-                            int requestTimeout) {
+                            long requestTimeout) {
         super(nettyResponseFuture, requestSender, timeoutsHolder);
         this.requestTimeout = requestTimeout;
     }

File: client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutsHolder.java
Patch:
@@ -53,12 +53,12 @@ public TimeoutsHolder(Timer nettyTimer, NettyResponseFuture<?> nettyResponseFutu
         final int readTimeoutInMs = targetRequest.getReadTimeout();
         readTimeoutValue = readTimeoutInMs == 0 ? config.getReadTimeout() : readTimeoutInMs;
 
-        int requestTimeoutInMs = targetRequest.getRequestTimeout();
+        long requestTimeoutInMs = targetRequest.getRequestTimeout().toMillis();
         if (requestTimeoutInMs == 0) {
-            requestTimeoutInMs = config.getRequestTimeout();
+            requestTimeoutInMs = config.getRequestTimeout().toMillis();
         }
 
-        if (requestTimeoutInMs != -1) {
+        if (requestTimeoutInMs > -1) {
             requestTimeoutMillisTime = unpreciseMillisTime() + requestTimeoutInMs;
             requestTimeout = newTimeout(new RequestTimeoutTimerTask(nettyResponseFuture, requestSender, this, requestTimeoutInMs), requestTimeoutInMs);
         } else {

File: client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
Patch:
@@ -68,8 +68,8 @@ public void testDefaultReadTimeout() {
 
     @RepeatedIfExceptionsTest(repeats = 5)
     public void testDefaultRequestTimeout() {
-        assertEquals(AsyncHttpClientConfigDefaults.defaultRequestTimeout(), 60 * 1000);
-        testIntegerSystemProperty("requestTimeout", "defaultRequestTimeout", "100");
+        assertEquals(AsyncHttpClientConfigDefaults.defaultRequestTimeout(), Duration.ofSeconds(60));
+        testDurationSystemProperty("requestTimeout", "defaultRequestTimeout", "PT0.1S");
     }
 
     @RepeatedIfExceptionsTest(repeats = 5)

File: client/src/test/java/org/asynchttpclient/AuthTimeoutTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.io.IOException;
 import java.io.OutputStream;
+import java.time.Duration;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
@@ -45,7 +46,7 @@
 
 public class AuthTimeoutTest extends AbstractBasicTest {
 
-    private static final int REQUEST_TIMEOUT = 1000;
+    private static final Duration REQUEST_TIMEOUT = Duration.ofSeconds(1);
     private static final int SHORT_FUTURE_TIMEOUT = 500; // shorter than REQUEST_TIMEOUT
     private static final int LONG_FUTURE_TIMEOUT = 1500; // longer than REQUEST_TIMEOUT
 

File: client/src/test/java/org/asynchttpclient/BasicHttpTest.java
Patch:
@@ -43,6 +43,7 @@
 import java.net.URLDecoder;
 import java.net.UnknownHostException;
 import java.nio.charset.StandardCharsets;
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
@@ -679,7 +680,7 @@ public void onThrowable(Throwable t) {
     @RepeatedIfExceptionsTest(repeats = 5)
     public void configTimeoutNotifiesOnThrowableAndFuture() throws Throwable {
         assertThrows(TimeoutException.class, () -> {
-            withClient(config().setRequestTimeout(1_000)).run(client ->
+            withClient(config().setRequestTimeout(Duration.ofSeconds(1))).run(client ->
                     withServer(server).run(server -> {
                         HttpHeaders headers = new DefaultHttpHeaders();
                         headers.add("X-Delay", 5_000); // delay greater than timeout
@@ -724,7 +725,7 @@ public void onThrowable(Throwable t) {
     @RepeatedIfExceptionsTest(repeats = 5)
     public void configRequestTimeoutHappensInDueTime() throws Throwable {
         assertThrows(TimeoutException.class, () -> {
-            withClient(config().setRequestTimeout(1_000)).run(client ->
+            withClient(config().setRequestTimeout(Duration.ofSeconds(1))).run(client ->
                     withServer(server).run(server -> {
                         HttpHeaders h = new DefaultHttpHeaders();
                         h.add(CONTENT_TYPE, HttpHeaderValues.APPLICATION_X_WWW_FORM_URLENCODED);

File: client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.jupiter.api.Timeout;
 
 import javax.net.ssl.SSLHandshakeException;
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
@@ -172,7 +173,7 @@ public void failInstantlyIfNotAllowedSelfSignedCertificate() throws Throwable {
         logger.debug(">>> failInstantlyIfNotAllowedSelfSignedCertificate");
 
         assertThrows(SSLHandshakeException.class, () -> {
-            withClient(config().setMaxRequestRetry(0).setRequestTimeout(2000)).run(client ->
+            withClient(config().setMaxRequestRetry(0).setRequestTimeout(Duration.ofSeconds(2))).run(client ->
                     withServer(server).run(server -> {
                         try {
                             client.prepareGet(getTargetUrl()).execute().get(TIMEOUT, SECONDS);

File: client/src/test/java/org/asynchttpclient/NoNullResponseTest.java
Patch:
@@ -34,7 +34,7 @@ public void multipleSslRequestsWithDelayAndKeepAlive() throws Exception {
                 .setKeepAlive(true)
                 .setConnectTimeout(Duration.ofSeconds(10))
                 .setPooledConnectionIdleTimeout(60000)
-                .setRequestTimeout(10000)
+                .setRequestTimeout(Duration.ofSeconds(10))
                 .setMaxConnectionsPerHost(-1)
                 .setMaxConnections(-1)
                 .build();

File: client/src/test/java/org/asynchttpclient/RedirectConnectionUsageTest.java
Patch:
@@ -76,7 +76,7 @@ public void testGetRedirectFinalUrl() throws Exception {
                 .setMaxConnectionsPerHost(1)
                 .setMaxConnections(1)
                 .setConnectTimeout(Duration.ofSeconds(1))
-                .setRequestTimeout(1000)
+                .setRequestTimeout(Duration.ofSeconds(1))
                 .setFollowRedirect(true)
                 .build();
 

File: client/src/test/java/org/asynchttpclient/channel/MaxConnectionsInThreadsTest.java
Patch:
@@ -69,7 +69,7 @@ public void testMaxConnectionsWithinThreads() throws Exception {
 
         AsyncHttpClientConfig config = config()
                 .setConnectTimeout(Duration.ofSeconds(1))
-                .setRequestTimeout(5000)
+                .setRequestTimeout(Duration.ofSeconds(5))
                 .setKeepAlive(true)
                 .setMaxConnections(1)
                 .setMaxConnectionsPerHost(1)

File: client/src/test/java/org/asynchttpclient/channel/MaxTotalConnectionTest.java
Patch:
@@ -44,7 +44,7 @@ public void testMaxTotalConnectionsExceedingException() throws IOException {
 
         AsyncHttpClientConfig config = config()
                 .setConnectTimeout(Duration.ofSeconds(1))
-                .setRequestTimeout(5000)
+                .setRequestTimeout(Duration.ofSeconds(5))
                 .setKeepAlive(false)
                 .setMaxConnections(1)
                 .setMaxConnectionsPerHost(1)
@@ -84,7 +84,7 @@ public void testMaxTotalConnections() throws Exception {
 
         AsyncHttpClientConfig config = config()
                 .setConnectTimeout(Duration.ofSeconds(1))
-                .setRequestTimeout(5000)
+                .setRequestTimeout(Duration.ofSeconds(5))
                 .setKeepAlive(false)
                 .setMaxConnections(2)
                 .setMaxConnectionsPerHost(1)

File: client/src/test/java/org/asynchttpclient/handler/BodyDeferringAsyncHandlerTest.java
Patch:
@@ -33,6 +33,7 @@
 import java.io.PipedInputStream;
 import java.io.PipedOutputStream;
 import java.nio.charset.StandardCharsets;
+import java.time.Duration;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
@@ -61,7 +62,7 @@ public AbstractHandler configureHandler() throws Exception {
 
     private static AsyncHttpClientConfig getAsyncHttpClientConfig() {
         // for this test brevity's sake, we are limiting to 1 retries
-        return config().setMaxRequestRetry(0).setRequestTimeout(10000).build();
+        return config().setMaxRequestRetry(0).setRequestTimeout(Duration.ofSeconds(10)).build();
     }
 
     @RepeatedIfExceptionsTest(repeats = 5)
@@ -179,7 +180,7 @@ public void deferredInputStreamTrickWithFailure() throws Throwable {
 
     @RepeatedIfExceptionsTest(repeats = 5)
     public void deferredInputStreamTrickWithCloseConnectionAndRetry() throws Throwable {
-        try (AsyncHttpClient client = asyncHttpClient(config().setMaxRequestRetry(1).setRequestTimeout(10000).build())) {
+        try (AsyncHttpClient client = asyncHttpClient(config().setMaxRequestRetry(1).setRequestTimeout(Duration.ofSeconds(10)).build())) {
             BoundRequestBuilder r = client.prepareGet(getTargetUrl()).addHeader("X-CLOSE-CONNECTION", Boolean.TRUE.toString());
             PipedOutputStream pos = new PipedOutputStream();
             PipedInputStream pis = new PipedInputStream(pos);

File: client/src/test/java/org/asynchttpclient/netty/NettyConnectionResetByPeerTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.OutputStream;
 import java.net.ServerSocket;
 import java.net.Socket;
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.concurrent.Exchanger;
 import java.util.function.Consumer;
@@ -45,7 +46,7 @@ public void setUp() {
     @RepeatedIfExceptionsTest(repeats = 5)
     public void testAsyncHttpClientConnectionResetByPeer() throws InterruptedException {
         DefaultAsyncHttpClientConfig config = new DefaultAsyncHttpClientConfig.Builder()
-                .setRequestTimeout(1500)
+                .setRequestTimeout(Duration.ofMillis(1500))
                 .build();
         try (AsyncHttpClient asyncHttpClient = new DefaultAsyncHttpClient(config)) {
             asyncHttpClient.executeRequest(new RequestBuilder("GET").setUrl(resettingServerAddress)).get();

File: client/src/test/java/org/asynchttpclient/netty/NettyRequestThrottleTimeoutTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.eclipse.jetty.server.handler.AbstractHandler;
 
 import java.io.IOException;
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -62,7 +63,7 @@ public void testRequestTimeout() throws IOException {
                         requestThrottle.acquire();
                         Future<Response> responseFuture = null;
                         try {
-                            responseFuture = client.prepareGet(getTargetUrl()).setRequestTimeout(SLEEPTIME_MS / 2)
+                            responseFuture = client.prepareGet(getTargetUrl()).setRequestTimeout(Duration.ofMillis(SLEEPTIME_MS / 2))
                                     .execute(new AsyncCompletionHandler<Response>() {
 
                                         @Override

File: client/src/test/java/org/asynchttpclient/netty/RetryNonBlockingIssueTest.java
Patch:
@@ -81,7 +81,7 @@ public void testRetryNonBlocking() throws Exception {
                 .setKeepAlive(true)
                 .setMaxConnections(100)
                 .setConnectTimeout(Duration.ofMinutes(1))
-                .setRequestTimeout(30000)
+                .setRequestTimeout(Duration.ofSeconds(30))
                 .build();
 
         try (AsyncHttpClient client = asyncHttpClient(config)) {
@@ -109,7 +109,7 @@ public void testRetryNonBlockingAsyncConnect() throws Exception {
                 .setKeepAlive(true)
                 .setMaxConnections(100)
                 .setConnectTimeout(Duration.ofMinutes(1))
-                .setRequestTimeout(30000)
+                .setRequestTimeout(Duration.ofSeconds(30))
                 .build();
 
         try (AsyncHttpClient client = asyncHttpClient(config)) {

File: client/src/test/java/org/asynchttpclient/request/body/BodyChunkTest.java
Patch:
@@ -42,7 +42,7 @@ public void negativeContentTypeTest() throws Exception {
         AsyncHttpClientConfig config = config()
                 .setConnectTimeout(Duration.ofMillis(100))
                 .setMaxConnections(50)
-                .setRequestTimeout(5 * 60 * 1000) // 5 minutes
+                .setRequestTimeout(Duration.ofMinutes(5))
                 .build();
 
         try (AsyncHttpClient client = asyncHttpClient(config)) {

File: client/src/test/java/org/asynchttpclient/request/body/ChunkingTest.java
Patch:
@@ -107,7 +107,7 @@ private static DefaultAsyncHttpClientConfig.Builder httpClientBuilder() {
                 .setMaxConnectionsPerHost(1)
                 .setMaxConnections(1)
                 .setConnectTimeout(Duration.ofSeconds(1))
-                .setRequestTimeout(1000)
+                .setRequestTimeout(Duration.ofSeconds(1))
                 .setFollowRedirect(true);
     }
 

File: client/src/test/java/org/asynchttpclient/request/body/FilePartLargeFileTest.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.time.Duration;
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.asynchttpclient.Dsl.asyncHttpClient;
@@ -63,7 +64,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest req, H
 
     @RepeatedIfExceptionsTest(repeats = 5)
     public void testPutImageFile() throws Exception {
-        try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {
+        try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(Duration.ofMinutes(10)))) {
             Response response = client.preparePut(getTargetUrl())
                     .addBodyPart(new FilePart("test", LARGE_IMAGE_FILE, "application/octet-stream", UTF_8))
                     .execute()
@@ -76,7 +77,7 @@ public void testPutImageFile() throws Exception {
     public void testPutLargeTextFile() throws Exception {
         File file = createTempFile(1024 * 1024);
 
-        try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {
+        try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(Duration.ofMinutes(10)))) {
             Response response = client.preparePut(getTargetUrl())
                     .addBodyPart(new FilePart("test", file, "application/octet-stream", UTF_8))
                     .execute()

File: client/src/test/java/org/asynchttpclient/request/body/PutFileTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.time.Duration;
 
 import static org.asynchttpclient.Dsl.asyncHttpClient;
 import static org.asynchttpclient.Dsl.config;
@@ -34,7 +35,7 @@ public class PutFileTest extends AbstractBasicTest {
 
     private void put(int fileSize) throws Exception {
         File file = createTempFile(fileSize);
-        try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(2000))) {
+        try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(Duration.ofSeconds(2)))) {
             Response response = client.preparePut(getTargetUrl()).setBody(file).execute().get();
             assertEquals(response.getStatusCode(), 200);
         }

File: client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.time.Duration;
 import java.util.Properties;
 
 public final class AsyncHttpClientConfigDefaults {
@@ -110,8 +111,8 @@ public static int defaultAcquireFreeChannelTimeout() {
         return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + ACQUIRE_FREE_CHANNEL_TIMEOUT);
     }
 
-    public static int defaultConnectTimeout() {
-        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + CONNECTION_TIMEOUT_CONFIG);
+    public static Duration defaultConnectTimeout() {
+        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getDuration(ASYNC_CLIENT_CONFIG_ROOT + CONNECTION_TIMEOUT_CONFIG);
     }
 
     public static int defaultPooledConnectionIdleTimeout() {

File: client/src/test/java/org/asynchttpclient/NoNullResponseTest.java
Patch:
@@ -18,6 +18,8 @@
 
 import org.junit.jupiter.api.RepeatedTest;
 
+import java.time.Duration;
+
 import static org.asynchttpclient.Dsl.asyncHttpClient;
 import static org.asynchttpclient.Dsl.config;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
@@ -30,7 +32,7 @@ public void multipleSslRequestsWithDelayAndKeepAlive() throws Exception {
         AsyncHttpClientConfig config = config()
                 .setFollowRedirect(true)
                 .setKeepAlive(true)
-                .setConnectTimeout(10000)
+                .setConnectTimeout(Duration.ofSeconds(10))
                 .setPooledConnectionIdleTimeout(60000)
                 .setRequestTimeout(10000)
                 .setMaxConnectionsPerHost(-1)

File: client/src/test/java/org/asynchttpclient/RedirectConnectionUsageTest.java
Patch:
@@ -27,6 +27,7 @@
 
 import java.io.IOException;
 import java.io.OutputStream;
+import java.time.Duration;
 import java.util.Date;
 
 import static org.asynchttpclient.Dsl.asyncHttpClient;
@@ -74,7 +75,7 @@ public void testGetRedirectFinalUrl() throws Exception {
                 .setKeepAlive(true)
                 .setMaxConnectionsPerHost(1)
                 .setMaxConnections(1)
-                .setConnectTimeout(1000)
+                .setConnectTimeout(Duration.ofSeconds(1))
                 .setRequestTimeout(1000)
                 .setFollowRedirect(true)
                 .build();

File: client/src/test/java/org/asynchttpclient/channel/ConnectionPoolTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.eclipse.jetty.server.ServerConnector;
 import org.junit.jupiter.api.function.ThrowingSupplier;
 
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -163,7 +164,7 @@ public void onThrowable(Throwable t) {
 
     @RepeatedIfExceptionsTest(repeats = 5)
     public void multipleMaxConnectionOpenTest() throws Exception {
-        try (AsyncHttpClient client = asyncHttpClient(config().setKeepAlive(true).setConnectTimeout(5000).setMaxConnections(1))) {
+        try (AsyncHttpClient client = asyncHttpClient(config().setKeepAlive(true).setConnectTimeout(Duration.ofSeconds(5)).setMaxConnections(1))) {
             String body = "hello there";
 
             // once
@@ -180,7 +181,7 @@ public void multipleMaxConnectionOpenTest() throws Exception {
 
     @RepeatedIfExceptionsTest(repeats = 5)
     public void multipleMaxConnectionOpenTestWithQuery() throws Exception {
-        try (AsyncHttpClient c = asyncHttpClient(config().setKeepAlive(true).setConnectTimeout(5000).setMaxConnections(1))) {
+        try (AsyncHttpClient c = asyncHttpClient(config().setKeepAlive(true).setConnectTimeout(Duration.ofSeconds(5)).setMaxConnections(1))) {
             String body = "hello there";
 
             // once

File: client/src/test/java/org/asynchttpclient/channel/MaxConnectionsInThreadsTest.java
Patch:
@@ -36,6 +36,7 @@
 
 import java.io.IOException;
 import java.io.OutputStream;
+import java.time.Duration;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 
@@ -67,7 +68,7 @@ public void testMaxConnectionsWithinThreads() throws Exception {
         String[] urls = {getTargetUrl(), getTargetUrl()};
 
         AsyncHttpClientConfig config = config()
-                .setConnectTimeout(1000)
+                .setConnectTimeout(Duration.ofSeconds(1))
                 .setRequestTimeout(5000)
                 .setKeepAlive(true)
                 .setMaxConnections(1)

File: client/src/test/java/org/asynchttpclient/channel/MaxTotalConnectionTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.asynchttpclient.Response;
 
 import java.io.IOException;
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CountDownLatch;
@@ -42,7 +43,7 @@ public void testMaxTotalConnectionsExceedingException() throws IOException {
         String[] urls = {"https://google.com", "https://github.com"};
 
         AsyncHttpClientConfig config = config()
-                .setConnectTimeout(1000)
+                .setConnectTimeout(Duration.ofSeconds(1))
                 .setRequestTimeout(5000)
                 .setKeepAlive(false)
                 .setMaxConnections(1)
@@ -82,7 +83,7 @@ public void testMaxTotalConnections() throws Exception {
         final AtomicReference<String> failedUrl = new AtomicReference<>();
 
         AsyncHttpClientConfig config = config()
-                .setConnectTimeout(1000)
+                .setConnectTimeout(Duration.ofSeconds(1))
                 .setRequestTimeout(5000)
                 .setKeepAlive(false)
                 .setMaxConnections(2)

File: client/src/test/java/org/asynchttpclient/netty/RetryNonBlockingIssueTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.junit.jupiter.api.BeforeEach;
 
 import java.io.IOException;
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
@@ -79,7 +80,7 @@ public void testRetryNonBlocking() throws Exception {
         AsyncHttpClientConfig config = config()
                 .setKeepAlive(true)
                 .setMaxConnections(100)
-                .setConnectTimeout(60000)
+                .setConnectTimeout(Duration.ofMinutes(1))
                 .setRequestTimeout(30000)
                 .build();
 
@@ -107,7 +108,7 @@ public void testRetryNonBlockingAsyncConnect() throws Exception {
         AsyncHttpClientConfig config = config()
                 .setKeepAlive(true)
                 .setMaxConnections(100)
-                .setConnectTimeout(60000)
+                .setConnectTimeout(Duration.ofMinutes(1))
                 .setRequestTimeout(30000)
                 .build();
 

File: client/src/test/java/org/asynchttpclient/request/body/BodyChunkTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.asynchttpclient.request.body.generator.InputStreamBodyGenerator;
 
 import java.io.ByteArrayInputStream;
+import java.time.Duration;
 import java.util.concurrent.Future;
 
 import static org.asynchttpclient.Dsl.asyncHttpClient;
@@ -39,7 +40,7 @@ public class BodyChunkTest extends AbstractBasicTest {
     public void negativeContentTypeTest() throws Exception {
 
         AsyncHttpClientConfig config = config()
-                .setConnectTimeout(100)
+                .setConnectTimeout(Duration.ofMillis(100))
                 .setMaxConnections(50)
                 .setRequestTimeout(5 * 60 * 1000) // 5 minutes
                 .build();

File: client/src/test/java/org/asynchttpclient/request/body/ChunkingTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.BufferedInputStream;
 import java.io.InputStream;
 import java.nio.file.Files;
+import java.time.Duration;
 import java.util.concurrent.ExecutionException;
 
 import static org.asynchttpclient.Dsl.asyncHttpClient;
@@ -105,7 +106,7 @@ private static DefaultAsyncHttpClientConfig.Builder httpClientBuilder() {
                 .setKeepAlive(true)
                 .setMaxConnectionsPerHost(1)
                 .setMaxConnections(1)
-                .setConnectTimeout(1000)
+                .setConnectTimeout(Duration.ofSeconds(1))
                 .setRequestTimeout(1000)
                 .setFollowRedirect(true);
     }

File: client/src/test/java/org/asynchttpclient/request/body/TransferListenerTest.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.time.Duration;
 import java.util.Enumeration;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -115,9 +116,9 @@ public void basicPutFileTest() throws Exception {
 
         File file = createTempFile(1024 * 100 * 10);
 
-        int timeout = (int) (file.length() / 1000);
+        long timeout = file.length() / 1000;
 
-        try (AsyncHttpClient client = asyncHttpClient(config().setConnectTimeout(timeout))) {
+        try (AsyncHttpClient client = asyncHttpClient(config().setConnectTimeout(Duration.ofMillis(timeout)))) {
             TransferCompletionHandler tl = new TransferCompletionHandler();
             tl.addTransferListener(new TransferListener() {
 

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -464,7 +464,7 @@ private void scheduleReadTimeout(NettyResponseFuture<?> nettyResponseFuture) {
   public void abort(Channel channel, NettyResponseFuture<?> future, Throwable t) {
 
     if (channel != null) {
-      Object attribute = Channels.getAttribute(future.channel());
+      Object attribute = Channels.getAttribute(channel);
       if (attribute instanceof StreamedResponsePublisher) {
         ((StreamedResponsePublisher) attribute).setError(t);
       }

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/Redirect30xInterceptor.java
Patch:
@@ -38,6 +38,8 @@
 
 import static io.netty.handler.codec.http.HttpHeaderNames.*;
 import static org.asynchttpclient.util.HttpConstants.Methods.GET;
+import static org.asynchttpclient.util.HttpConstants.Methods.HEAD;
+import static org.asynchttpclient.util.HttpConstants.Methods.OPTIONS;
 import static org.asynchttpclient.util.HttpConstants.ResponseStatusCodes.*;
 import static org.asynchttpclient.util.HttpUtils.followRedirect;
 import static org.asynchttpclient.util.MiscUtils.isNonEmpty;
@@ -87,7 +89,7 @@ public boolean exitAfterHandlingRedirect(Channel channel,
 
         String originalMethod = request.getMethod();
         boolean switchToGet = !originalMethod.equals(GET)
-                && (statusCode == MOVED_PERMANENTLY_301 || statusCode == SEE_OTHER_303 || (statusCode == FOUND_302 && !config.isStrict302Handling()));
+                && !originalMethod.equals(OPTIONS) && !originalMethod.equals(HEAD) && (statusCode == MOVED_PERMANENTLY_301 || statusCode == SEE_OTHER_303 || (statusCode == FOUND_302 && !config.isStrict302Handling()));
         boolean keepBody = statusCode == TEMPORARY_REDIRECT_307 || statusCode == PERMANENT_REDIRECT_308 || (statusCode == FOUND_302 && config.isStrict302Handling());
 
         final RequestBuilder requestBuilder = new RequestBuilder(switchToGet ? GET : originalMethod)
@@ -126,7 +128,6 @@ else if (isNonEmpty(request.getBodyParts())) {
         HttpHeaders responseHeaders = response.headers();
         String location = responseHeaders.get(LOCATION);
         Uri newUri = Uri.create(future.getUri(), location);
-
         LOGGER.debug("Redirecting to {}", newUri);
 
         CookieStore cookieStore = config.getCookieStore();

File: client/src/test/java/org/asynchttpclient/AsyncStreamHandlerTest.java
Patch:
@@ -428,6 +428,8 @@ public Integer onCompleted() {
       }));
   }
 
+  // This test is flaky - see https://github.com/AsyncHttpClient/async-http-client/issues/1728#issuecomment-699962325
+  // For now, just run again if fails
   @Test(groups = "online")
   public void asyncOptionsTest() throws Throwable {
 

File: client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -255,7 +255,7 @@ public interface AsyncHttpClientConfig {
   String[] getEnabledCipherSuites();
 
   /**
-   * @return if insecured cipher suites must be filtered out (only used when not explicitly passing enabled cipher suites)
+   * @return if insecure cipher suites must be filtered out (only used when not explicitly passing enabled cipher suites)
    */
   boolean isFilterInsecureCipherSuites();
 

File: client/src/main/java/org/asynchttpclient/handler/resumable/ResumableListener.java
Patch:
@@ -29,7 +29,7 @@ public interface ResumableListener {
   void onBytesReceived(ByteBuffer byteBuffer) throws IOException;
 
   /**
-   * Invoked when all the bytes has been sucessfully transferred.
+   * Invoked when all the bytes has been successfully transferred.
    */
   void onAllBytesReceived();
 

File: client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
Patch:
@@ -342,15 +342,15 @@ private SslHandler createSslHandler(String peerHost, int peerPort) {
 
   public Future<Channel> updatePipelineForHttpTunneling(ChannelPipeline pipeline, Uri requestUri) {
 
-    Future<Channel> whenHanshaked = null;
+    Future<Channel> whenHandshaked = null;
 
     if (pipeline.get(HTTP_CLIENT_CODEC) != null)
       pipeline.remove(HTTP_CLIENT_CODEC);
 
     if (requestUri.isSecured()) {
       if (!isSslHandlerConfigured(pipeline)) {
         SslHandler sslHandler = createSslHandler(requestUri.getHost(), requestUri.getExplicitPort());
-        whenHanshaked = sslHandler.handshakeFuture();
+        whenHandshaked = sslHandler.handshakeFuture();
         pipeline.addBefore(INFLATER_HANDLER, SSL_HANDLER, sslHandler);
       }
       pipeline.addAfter(SSL_HANDLER, HTTP_CLIENT_CODEC, newHttpClientCodec());
@@ -368,7 +368,7 @@ public Future<Channel> updatePipelineForHttpTunneling(ChannelPipeline pipeline,
 
       pipeline.remove(AHC_HTTP_HANDLER);
     }
-    return whenHanshaked;
+    return whenHandshaked;
   }
 
   public SslHandler addSslHandler(ChannelPipeline pipeline, Uri uri, String virtualHost, boolean hasSocksProxyHandler) {

File: client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java
Patch:
@@ -47,14 +47,14 @@ public abstract class FileLikePart extends PartBase {
    * @param charset           the charset encoding for this part
    * @param fileName          the fileName
    * @param contentId         the content id
-   * @param transfertEncoding the transfer encoding
+   * @param transferEncoding the transfer encoding
    */
-  public FileLikePart(String name, String contentType, Charset charset, String fileName, String contentId, String transfertEncoding) {
+  public FileLikePart(String name, String contentType, Charset charset, String fileName, String contentId, String transferEncoding) {
     super(name,
             computeContentType(contentType, fileName),
             charset,
             contentId,
-            transfertEncoding);
+            transferEncoding);
     this.fileName = fileName;
   }
 

File: client/src/main/java/org/asynchttpclient/request/body/multipart/PartBase.java
Patch:
@@ -127,7 +127,7 @@ public String toString() {
             " name=" + getName() +
             " contentType=" + getContentType() +
             " charset=" + getCharset() +
-            " tranferEncoding=" + getTransferEncoding() +
+            " transferEncoding=" + getTransferEncoding() +
             " contentId=" + getContentId() +
             " dispositionType=" + getDispositionType();
   }

File: client/src/main/java/org/asynchttpclient/spnego/NamePasswordCallbackHandler.java
Patch:
@@ -57,7 +57,7 @@ protected boolean handleCallback(Callback callback) {
   /*
    * This method is called from the handle(Callback[]) method when the specified callback
    * did not match any of the known callback classes. It looks for the callback method
-   * having the specified method name with one of the suppported parameter types.
+   * having the specified method name with one of the supported parameter types.
    * If found, it invokes the callback method on the object and returns true.
    * If not, it returns false.
    */

File: client/src/main/java/org/asynchttpclient/util/StringBuilderPool.java
Patch:
@@ -19,7 +19,7 @@ public class StringBuilderPool {
   private final ThreadLocal<StringBuilder> pool = ThreadLocal.withInitial(() -> new StringBuilder(512));
 
   /**
-   * BEWARE: MUSN'T APPEND TO ITSELF!
+   * BEWARE: MUSTN'T APPEND TO ITSELF!
    *
    * @return a pooled StringBuilder
    */

File: client/src/test/java/org/asynchttpclient/BasicAuthTest.java
Patch:
@@ -65,7 +65,7 @@ public void setUpGlobal() throws Exception {
     server2.start();
     port2 = connector2.getLocalPort();
 
-    // need noAuth server to verify the preemptive auth mode (see basicAuthTestPreemtiveTest)
+    // need noAuth server to verify the preemptive auth mode (see basicAuthTestPreemptiveTest)
     serverNoAuth = new Server();
     ServerConnector connectorNoAuth = addHttpConnector(serverNoAuth);
     serverNoAuth.setHandler(new SimpleHandler());
@@ -170,7 +170,7 @@ public Integer onCompleted() {
   }
 
   @Test
-  public void basicAuthTestPreemtiveTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
+  public void basicAuthTestPreemptiveTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
     try (AsyncHttpClient client = asyncHttpClient()) {
       // send the request to the no-auth endpoint to be able to verify the
       // auth header is really sent preemptively for the initial call.

File: client/src/test/java/org/asynchttpclient/BasicHttpTest.java
Patch:
@@ -788,7 +788,7 @@ public void onThrowable(Throwable t) {
   }
 
   @Test
-  public void nonBlockingNestedRequetsFromIoThreadAreFine() throws Throwable {
+  public void nonBlockingNestedRequestsFromIoThreadAreFine() throws Throwable {
     withClient().run(client ->
       withServer(server).run(server -> {
 

File: client/src/test/java/org/asynchttpclient/handler/resumable/PropertiesBasedResumableProcessorTest.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author Benjamin Hanzelmann
  */
-public class PropertiesBasedResumableProcesserTest {
+public class PropertiesBasedResumableProcessorTest {
 
   @Test
   public void testSaveLoad() {

File: client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsDownloadTest.java
Patch:
@@ -93,7 +93,7 @@ static protected class SimpleStreamedAsyncHandler implements StreamedAsyncHandle
 
     @Override
     public State onStream(Publisher<HttpResponseBodyPart> publisher) {
-      LOGGER.debug("SimpleStreamedAsyncHandleronCompleted onStream");
+      LOGGER.debug("SimpleStreamedAsyncHandlerOnCompleted onStream");
       publisher.subscribe(subscriber);
       return State.CONTINUE;
     }
@@ -105,7 +105,7 @@ public void onThrowable(Throwable t) {
 
     @Override
     public State onBodyPartReceived(HttpResponseBodyPart bodyPart) {
-      LOGGER.debug("SimpleStreamedAsyncHandleronCompleted onBodyPartReceived");
+      LOGGER.debug("SimpleStreamedAsyncHandlerOnCompleted onBodyPartReceived");
       throw new AssertionError("Should not have received body part");
     }
 
@@ -121,7 +121,7 @@ public State onHeadersReceived(HttpHeaders headers) {
 
     @Override
     public SimpleStreamedAsyncHandler onCompleted() {
-      LOGGER.debug("SimpleStreamedAsyncHandleronCompleted onSubscribe");
+      LOGGER.debug("SimpleStreamedAsyncHandlerOnCompleted onSubscribe");
       return this;
     }
 

File: client/src/test/java/org/asynchttpclient/request/body/ChunkingTest.java
Patch:
@@ -33,7 +33,7 @@
 public class ChunkingTest extends AbstractBasicTest {
 
   // So we can just test the returned data is the image,
-  // and doesn't contain the chunked delimeters.
+  // and doesn't contain the chunked delimiters.
   @Test
   public void testBufferLargerThanFileWithStreamBodyGenerator() throws Throwable {
     doTestWithInputStreamBodyGenerator(new BufferedInputStream(Files.newInputStream(LARGE_IMAGE_FILE.toPath()), 400000));

File: client/src/test/java/org/asynchttpclient/request/body/FilePartLargeFileTest.java
Patch:
@@ -51,7 +51,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest req, H
           total += count;
         }
         resp.setStatus(200);
-        resp.addHeader("X-TRANFERED", String.valueOf(total));
+        resp.addHeader("X-TRANSFERRED", String.valueOf(total));
         resp.getOutputStream().flush();
         resp.getOutputStream().close();
 

File: extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientFactory.java
Patch:
@@ -33,7 +33,7 @@
  * an instance of that class. If there is an exception while reading the
  * properties file or system property it throws a RuntimeException
  * AsyncHttpClientImplException. If any of the constructors of the instance
- * throws an exception it thows a AsyncHttpClientImplException. By default if
+ * throws an exception it throws a AsyncHttpClientImplException. By default if
  * neither the system property or the property file exists then it will return
  * the default instance of {@link DefaultAsyncHttpClient}
  */

File: extras/rxjava2/src/main/java/org/asynchttpclient/extras/rxjava2/RxHttpClient.java
Patch:
@@ -57,7 +57,7 @@ default Maybe<Response> prepare(Request request) {
    * @param request         the request that is to be executed
    * @param handlerSupplier supplies the desired {@code AsyncHandler} instances that are used to produce results
    * @return a {@code Maybe} that executes {@code request} upon subscription and that emits the results produced by
-   * the supplied handers
+   * the supplied handlers
    * @throws NullPointerException if at least one of the parameters is {@code null}
    */
   <T> Maybe<T> prepare(Request request, Supplier<? extends AsyncHandler<T>> handlerSupplier);

File: extras/rxjava2/src/main/java/org/asynchttpclient/extras/rxjava2/maybe/AbstractMaybeAsyncHandlerBridge.java
Patch:
@@ -94,7 +94,7 @@ public State onTrailingHeadersReceived(HttpHeaders headers) throws Exception {
    * {@inheritDoc}
    * <p>
    * <p>
-   * The value returned by the wrapped {@code AsyncHandler} won't be returned by this method, but emtited via RxJava.
+   * The value returned by the wrapped {@code AsyncHandler} won't be returned by this method, but emitted via RxJava.
    * </p>
    *
    * @return always {@code null}

File: extras/rxjava2/src/test/java/org/asynchttpclient/extras/rxjava2/DefaultRxHttpClientTest.java
Patch:
@@ -61,7 +61,7 @@ public class DefaultRxHttpClientTest {
   private ArgumentCaptor<AsyncHandler<Object>> handlerCaptor;
 
   @Mock
-  private ListenableFuture<Object> resposeFuture;
+  private ListenableFuture<Object> responseFuture;
 
   @InjectMocks
   private DefaultRxHttpClient underTest;
@@ -148,15 +148,15 @@ public void callsSupplierForEachSubscription() {
   @Test
   public void cancelsResponseFutureOnDispose() throws Exception {
     given(handlerSupplier.get()).willReturn(handler);
-    given(asyncHttpClient.executeRequest(eq(request), any())).willReturn(resposeFuture);
+    given(asyncHttpClient.executeRequest(eq(request), any())).willReturn(responseFuture);
 
     /* when */
     underTest.prepare(request, handlerSupplier).subscribe().dispose();
 
     // then
     then(asyncHttpClient).should().executeRequest(eq(request), handlerCaptor.capture());
     final AsyncHandler<Object> bridge = handlerCaptor.getValue();
-    then(resposeFuture).should().cancel(true);
+    then(responseFuture).should().cancel(true);
     verifyZeroInteractions(handler);
     assertThat(bridge.onStatusReceived(null), is(AsyncHandler.State.ABORT));
     verify(handler).onThrowable(isA(DisposedException.class));

File: extras/simple/src/main/java/org/asynchttpclient/extras/simple/ResumableBodyConsumer.java
Patch:
@@ -30,7 +30,7 @@ public interface ResumableBodyConsumer extends BodyConsumer {
   /**
    * Get the previously transferred bytes, for example the current file size.
    *
-   * @return the number of tranferred bytes
+   * @return the number of transferred bytes
    * @throws IOException IO exception
    */
   long getTransferredBytes() throws IOException;

File: extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java
Patch:
@@ -505,8 +505,8 @@ public Builder setMaxConnectionsPerHost(int defaultMaxConnectionsPerHost) {
       return this;
     }
 
-    public Builder setConnectTimeout(int connectTimeuot) {
-      configBuilder.setConnectTimeout(connectTimeuot);
+    public Builder setConnectTimeout(int connectTimeout) {
+      configBuilder.setConnectTimeout(connectTimeout);
       return this;
     }
 

File: client/src/test/java/org/asynchttpclient/channel/MaxTotalConnectionTest.java
Patch:
@@ -69,7 +69,7 @@ public void testMaxTotalConnectionsExceedingException() throws IOException {
 
   @Test(groups = "online")
   public void testMaxTotalConnections() throws Exception {
-    String[] urls = new String[]{"https://google.com", "https://github.com"};
+    String[] urls = new String[]{"https://www.google.com", "https://www.youtube.com"};
 
     final CountDownLatch latch = new CountDownLatch(2);
     final AtomicReference<Throwable> ex = new AtomicReference<>();

File: client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
Patch:
@@ -39,8 +39,7 @@ public HttpHandler(AsyncHttpClientConfig config, ChannelManager channelManager,
     super(config, channelManager, requestSender);
   }
 
-  private boolean abortAfterHandlingStatus(//
-                                           AsyncHandler<?> handler,
+  private boolean abortAfterHandlingStatus(AsyncHandler<?> handler,
                                            NettyResponseStatus status) throws Exception {
     return handler.onStatusReceived(status) == State.ABORT;
   }

File: client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsRetryTest.java
Patch:
@@ -32,7 +32,7 @@
 import static org.asynchttpclient.test.TestUtils.LARGE_IMAGE_BYTES;
 import static org.testng.Assert.assertTrue;
 
-public class FailingReactiveStreamsTest extends AbstractBasicTest {
+public class ReactiveStreamsRetryTest extends AbstractBasicTest {
 
   @Test
   public void testRetryingOnFailingStream() throws Exception {

File: client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
Patch:
@@ -61,6 +61,7 @@
 import java.net.InetSocketAddress;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.Objects;
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.TimeUnit;
 import java.util.function.Function;
@@ -490,7 +491,7 @@ public EventLoopGroup getEventLoopGroup() {
   }
 
   public ClientStats getClientStats() {
-    Map<String, Long> totalConnectionsPerHost = openChannels.stream().map(Channel::remoteAddress).filter(a -> a.getClass() == InetSocketAddress.class)
+    Map<String, Long> totalConnectionsPerHost = openChannels.stream().map(Channel::remoteAddress).filter(a -> a instanceof InetSocketAddress)
             .map(a -> (InetSocketAddress) a).map(InetSocketAddress::getHostString).collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
     Map<String, Long> idleConnectionsPerHost = channelPool.getIdleChannelCountPerHost();
     Map<String, HostStats> statsPerHost = totalConnectionsPerHost.entrySet().stream().collect(Collectors.toMap(Entry::getKey, entry -> {

File: client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -318,6 +318,8 @@ public interface AsyncHttpClientConfig {
 
   boolean isSoReuseAddress();
 
+  boolean isSoKeepAlive();
+
   int getSoLinger();
 
   int getSoSndBuf();

File: client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
Patch:
@@ -162,6 +162,7 @@ private Bootstrap newBootstrap(ChannelFactory<? extends Channel> channelFactory,
             .option(ChannelOption.ALLOCATOR, config.getAllocator() != null ? config.getAllocator() : ByteBufAllocator.DEFAULT)
             .option(ChannelOption.TCP_NODELAY, config.isTcpNoDelay())
             .option(ChannelOption.SO_REUSEADDR, config.isSoReuseAddress())
+            .option(ChannelOption.SO_KEEPALIVE, config.isSoKeepAlive())
             .option(ChannelOption.AUTO_CLOSE, false);
 
     if (config.getConnectTimeout() > 0) {

File: client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
Patch:
@@ -194,7 +194,7 @@ public <T> ListenableFuture<T> executeRequest(Request request, AsyncHandler<T> h
       try {
         List<Cookie> cookies = config.getCookieStore().get(request.getUri());
         if (!cookies.isEmpty()) {
-          RequestBuilder requestBuilder = new RequestBuilder(request);
+          RequestBuilder requestBuilder = request.toBuilder();
           for (Cookie cookie : cookies) {
             requestBuilder.addOrReplaceCookie(cookie);
           }
@@ -264,7 +264,7 @@ private <T> FilterContext<T> preProcessRequest(FilterContext<T> fc) throws Filte
     }
 
     if (request.getRangeOffset() != 0) {
-      RequestBuilder builder = new RequestBuilder(request);
+      RequestBuilder builder = request.toBuilder();
       builder.setHeader("Range", "bytes=" + request.getRangeOffset() + "-");
       request = builder.build();
     }

File: client/src/main/java/org/asynchttpclient/handler/resumable/ResumableAsyncHandler.java
Patch:
@@ -198,7 +198,7 @@ public Request adjustRequestRange(Request request) {
       byteTransferred.set(resumableListener.length());
     }
 
-    RequestBuilder builder = new RequestBuilder(request);
+    RequestBuilder builder = request.toBuilder();
     if (request.getHeaders().get(RANGE) == null && byteTransferred.get() != 0) {
       builder.setHeader(RANGE, "bytes=" + byteTransferred.get() + "-");
     }

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/ConnectSuccessInterceptor.java
Patch:
@@ -52,7 +52,7 @@ public boolean exitAfterHandlingConnect(Channel channel,
 
     future.setReuseChannel(true);
     future.setConnectAllowed(false);
-    Request targetRequest = new RequestBuilder(future.getTargetRequest()).build();
+    Request targetRequest = future.getTargetRequest().toBuilder().build();
     if (whenHandshaked == null) {
       requestSender.drainChannelAndExecuteNextRequest(channel, future, targetRequest);
     } else {

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/ProxyUnauthorized407Interceptor.java
Patch:
@@ -163,7 +163,7 @@ public boolean exitAfterHandling407(Channel channel,
         throw new IllegalStateException("Invalid Authentication scheme " + proxyRealm.getScheme());
     }
 
-    RequestBuilder nextRequestBuilder = new RequestBuilder(future.getCurrentRequest()).setHeaders(requestHeaders);
+    RequestBuilder nextRequestBuilder = future.getCurrentRequest().toBuilder().setHeaders(requestHeaders);
     if (future.getCurrentRequest().getUri().isSecured()) {
       nextRequestBuilder.setMethod(CONNECT);
     }

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/Unauthorized401Interceptor.java
Patch:
@@ -162,7 +162,7 @@ public boolean exitAfterHandling401(final Channel channel,
         throw new IllegalStateException("Invalid Authentication scheme " + realm.getScheme());
     }
 
-    final Request nextRequest = new RequestBuilder(future.getCurrentRequest()).setHeaders(requestHeaders).build();
+    final Request nextRequest = future.getCurrentRequest().toBuilder().setHeaders(requestHeaders).build();
 
     LOGGER.debug("Sending authentication to {}", request.getUri());
     if (future.isKeepAlive()

File: client/src/test/java/org/asynchttpclient/RequestBuilderTest.java
Patch:
@@ -72,7 +72,7 @@ public void testEncodesQueryParameters() {
   public void testChaining() {
     Request request = get("http://foo.com").addQueryParam("x", "value").build();
 
-    Request request2 = new RequestBuilder(request).build();
+    Request request2 = request.toBuilder().build();
 
     assertEquals(request2.getUri(), request.getUri());
   }

File: client/src/test/java/org/asynchttpclient/filter/FilterTest.java
Patch:
@@ -101,7 +101,7 @@ public void replayResponseFilterTest() throws Exception {
     ResponseFilter responseFilter = new ResponseFilter() {
       public <T> FilterContext<T> filter(FilterContext<T> ctx) {
         if (replay.getAndSet(false)) {
-          Request request = new RequestBuilder(ctx.getRequest()).addHeader("X-Replay", "true").build();
+          Request request = ctx.getRequest().toBuilder().addHeader("X-Replay", "true").build();
           return new FilterContext.FilterContextBuilder<T>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
         }
         return ctx;
@@ -123,7 +123,7 @@ public void replayStatusCodeResponseFilterTest() throws Exception {
     ResponseFilter responseFilter = new ResponseFilter() {
       public <T> FilterContext<T> filter(FilterContext<T> ctx) {
         if (ctx.getResponseStatus() != null && ctx.getResponseStatus().getStatusCode() == 200 && replay.getAndSet(false)) {
-          Request request = new RequestBuilder(ctx.getRequest()).addHeader("X-Replay", "true").build();
+          Request request = ctx.getRequest().toBuilder().addHeader("X-Replay", "true").build();
           return new FilterContext.FilterContextBuilder<T>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
         }
         return ctx;
@@ -145,7 +145,7 @@ public void replayHeaderResponseFilterTest() throws Exception {
     ResponseFilter responseFilter = new ResponseFilter() {
       public <T> FilterContext<T> filter(FilterContext<T> ctx) {
         if (ctx.getResponseHeaders() != null && ctx.getResponseHeaders().get("Ping").equals("Pong") && replay.getAndSet(false)) {
-          Request request = new RequestBuilder(ctx.getRequest()).addHeader("Ping", "Pong").build();
+          Request request = ctx.getRequest().toBuilder().addHeader("Ping", "Pong").build();
           return new FilterContext.FilterContextBuilder<T>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
         }
         return ctx;

File: extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java
Patch:
@@ -275,7 +275,7 @@ public Future<Response> options(BodyConsumer bodyConsumer, ThrowableHandler thro
   }
 
   private RequestBuilder rebuildRequest(Request rb) {
-    return new RequestBuilder(rb);
+    return rb.toBuilder();
   }
 
   private Future<Response> execute(RequestBuilder rb, BodyConsumer bodyConsumer, ThrowableHandler throwableHandler) throws IOException {
@@ -422,7 +422,7 @@ public Builder() {
     }
 
     private Builder(SimpleAsyncHttpClient client) {
-      this.requestBuilder = new RequestBuilder(client.requestBuilder.build());
+      this.requestBuilder = client.requestBuilder.build().toBuilder();
       this.defaultThrowableHandler = client.defaultThrowableHandler;
       this.errorDocumentBehaviour = client.errorDocumentBehaviour;
       this.enableResumableDownload = client.resumeEnabled;

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/ProxyUnauthorized407Interceptor.java
Patch:
@@ -79,7 +79,7 @@ public boolean exitAfterHandling407(Channel channel,
 
     // FIXME what's this???
     future.setChannelState(ChannelState.NEW);
-    HttpHeaders requestHeaders = new DefaultHttpHeaders(false).add(request.getHeaders());
+    HttpHeaders requestHeaders = new DefaultHttpHeaders().add(request.getHeaders());
 
     switch (proxyRealm.getScheme()) {
       case BASIC:

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/Unauthorized401Interceptor.java
Patch:
@@ -77,7 +77,7 @@ public boolean exitAfterHandling401(final Channel channel,
 
     // FIXME what's this???
     future.setChannelState(ChannelState.NEW);
-    HttpHeaders requestHeaders = new DefaultHttpHeaders(false).add(request.getHeaders());
+    HttpHeaders requestHeaders = new DefaultHttpHeaders().add(request.getHeaders());
 
     switch (realm.getScheme()) {
       case BASIC:

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -437,7 +437,7 @@ public <T> void writeRequest(NettyResponseFuture<T> future, Channel channel) {
   }
 
   private void configureTransferAdapter(AsyncHandler<?> handler, HttpRequest httpRequest) {
-    HttpHeaders h = new DefaultHttpHeaders(false).set(httpRequest.headers());
+    HttpHeaders h = new DefaultHttpHeaders().set(httpRequest.headers());
     TransferCompletionHandler.class.cast(handler).headers(h);
   }
 

File: client/src/test/java/org/asynchttpclient/channel/MaxTotalConnectionTest.java
Patch:
@@ -69,7 +69,7 @@ public void testMaxTotalConnectionsExceedingException() throws IOException {
 
   @Test(groups = "online")
   public void testMaxTotalConnections() throws Exception {
-    String[] urls = new String[]{"https://google.com", "https://gatling.io"};
+    String[] urls = new String[]{"https://google.com", "https://github.com"};
 
     final CountDownLatch latch = new CountDownLatch(2);
     final AtomicReference<Throwable> ex = new AtomicReference<>();

File: extras/retrofit2/src/main/java/org/asynchttpclient/extras/retrofit/AsyncHttpClientCall.java
Patch:
@@ -149,7 +149,7 @@ public void enqueue(Callback responseCallback) {
   @Override
   public void cancel() {
     val future = futureRef.get();
-    if (future != null) {
+    if (future != null && !future.isDone()) {
       if (!future.cancel(true)) {
         log.warn("Cannot cancel future: {}", future);
       }

File: client/src/main/java/org/asynchttpclient/AsyncCompletionHandler.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * An {@link AsyncHandler} augmented with an {@link #onCompleted(Response)}
  * convenience method which gets called when the {@link Response} processing is
- * finished. This class also implement the {@link ProgressAsyncHandler}
+ * finished. This class also implements the {@link ProgressAsyncHandler}
  * callback, all doing nothing except returning
  * {@link org.asynchttpclient.AsyncHandler.State#CONTINUE}
  *

File: client/src/main/java/org/asynchttpclient/RequestBuilder.java
Patch:
@@ -18,7 +18,7 @@
 import static org.asynchttpclient.util.HttpConstants.Methods.GET;
 
 /**
- * Builder for a {@link Request}. Warning: mutable and not thread-safe! Beware that it holds a reference on the Request instance it builds, so modifying the builder will modify the
+ * Builder for a {@link Request}. Warning: mutable and not thread-safe! Beware that it holds a reference to the Request instance it builds, so modifying the builder will modify the
  * request even after it has been built.
  */
 public class RequestBuilder extends RequestBuilderBase<RequestBuilder> {

File: client/src/main/java/org/asynchttpclient/SslEngineFactory.java
Patch:
@@ -19,7 +19,7 @@
 public interface SslEngineFactory {
 
   /**
-   * Creates new {@link SSLEngine}.
+   * Creates a new {@link SSLEngine}.
    *
    * @param config   the client config
    * @param peerHost the peer hostname

File: client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -267,7 +267,7 @@ public T setHeaders(HttpHeaders headers) {
    * @param headers map of header names as the map keys and header values {@link Iterable} as the map values
    * @return {@code this}
    */
-  public T setHeaders(Map<CharSequence, ? extends Iterable<?>> headers) {
+  public T setHeaders(Map<? extends CharSequence, ? extends Iterable<?>> headers) {
     clearHeaders();
     if (headers != null) {
       headers.forEach((name, values) -> this.headers.add(name, values));
@@ -282,7 +282,7 @@ public T setHeaders(Map<CharSequence, ? extends Iterable<?>> headers) {
    * @param headers map of header names as the map keys and header values as the map values
    * @return {@code this}
    */
-  public T setSingleHeaders(Map<CharSequence, ?> headers) {
+  public T setSingleHeaders(Map<? extends CharSequence, ?> headers) {
     clearHeaders();
     if (headers != null) {
       headers.forEach((name, value) -> this.headers.add(name, value));

File: extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java
Patch:
@@ -380,7 +380,7 @@ public interface DerivedBuilder {
 
     DerivedBuilder setFormParams(Map<String, List<String>> params);
 
-    DerivedBuilder setHeaders(Map<CharSequence, Collection<?>> headers);
+    DerivedBuilder setHeaders(Map<? extends CharSequence, Collection<?>> headers);
 
     DerivedBuilder setHeaders(HttpHeaders headers);
 
@@ -465,7 +465,7 @@ public Builder setHeaders(HttpHeaders headers) {
       return this;
     }
 
-    public Builder setHeaders(Map<CharSequence, Collection<?>> headers) {
+    public Builder setHeaders(Map<? extends CharSequence, Collection<?>> headers) {
       requestBuilder.setHeaders(headers);
       return this;
     }

File: client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
Patch:
@@ -754,6 +754,7 @@ public Builder(AsyncHttpClientConfig config) {
       realm = config.getRealm();
       maxRequestRetry = config.getMaxRequestRetry();
       disableUrlEncodingForBoundRequests = config.isDisableUrlEncodingForBoundRequests();
+      useLaxCookieEncoder = config.isUseLaxCookieEncoder();
       disableZeroCopy = config.isDisableZeroCopy();
       keepEncodingHeader = config.isKeepEncodingHeader();
       proxyServerSelector = config.getProxyServerSelector();

File: client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorInstance.java
Patch:
@@ -110,8 +110,8 @@ String computeSignature(ConsumerKey consumerAuth,
       userAuth,
       uri,
       method,
-      queryParams,
       formParams,
+      queryParams,
       oauthTimestamp,
       percentEncodedNonce);
 

File: client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -164,7 +164,7 @@ public interface AsyncHttpClientConfig {
   /**
    * Return the list of {@link RequestFilter}
    *
-   * @return Unmodifiable list of {@link ResponseFilter}
+   * @return Unmodifiable list of {@link RequestFilter}
    */
   List<RequestFilter> getRequestFilters();
 

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -344,14 +344,14 @@ private <T> Future<List<InetSocketAddress>> resolveAddresses(Request request,
     } else {
       int port = uri.getExplicitPort();
 
+      InetSocketAddress unresolvedRemoteAddress = InetSocketAddress.createUnresolved(uri.getHost(), port);
+      scheduleRequestTimeout(future, unresolvedRemoteAddress);
+
       if (request.getAddress() != null) {
         // bypass resolution
         InetSocketAddress inetSocketAddress = new InetSocketAddress(request.getAddress(), port);
         return promise.setSuccess(singletonList(inetSocketAddress));
-
       } else {
-        InetSocketAddress unresolvedRemoteAddress = InetSocketAddress.createUnresolved(uri.getHost(), port);
-        scheduleRequestTimeout(future, unresolvedRemoteAddress);
         return RequestHostnameResolver.INSTANCE.resolve(request.getNameResolver(), unresolvedRemoteAddress, asyncHandler);
       }
     }

File: client/src/main/java/org/asynchttpclient/request/body/generator/ByteArrayBodyGenerator.java
Patch:
@@ -22,7 +22,7 @@ public final class ByteArrayBodyGenerator implements BodyGenerator {
 
   private final byte[] bytes;
 
-  ByteArrayBodyGenerator(byte[] bytes) {
+  public ByteArrayBodyGenerator(byte[] bytes) {
     this.bytes = bytes;
   }
 

File: client/src/main/java/org/asynchttpclient/uri/Uri.java
Patch:
@@ -142,7 +142,7 @@ public String toUrl() {
   }
 
   /**
-   * @return [scheme]://[hostname](:[port]). Port is omitted if it matches the scheme's default one.
+   * @return [scheme]://[hostname](:[port])/path. Port is omitted if it matches the scheme's default one.
    */
   public String toBaseUrl() {
     StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();

File: client/src/main/java/org/asynchttpclient/netty/ssl/DefaultSslEngineFactory.java
Patch:
@@ -14,6 +14,7 @@
 package org.asynchttpclient.netty.ssl;
 
 import io.netty.buffer.ByteBufAllocator;
+import io.netty.handler.ssl.IdentityCipherSuiteFilter;
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.handler.ssl.SslProvider;
@@ -47,7 +48,7 @@ private SslContext buildSslContext(AsyncHttpClientConfig config) throws SSLExcep
     if (isNonEmpty(config.getEnabledCipherSuites())) {
       sslContextBuilder.ciphers(Arrays.asList(config.getEnabledCipherSuites()));
     } else if (!config.isFilterInsecureCipherSuites()) {
-      sslContextBuilder.ciphers(null, IdentityCipherSuiteFilterWorkaround.INSTANCE);
+      sslContextBuilder.ciphers(null, IdentityCipherSuiteFilter.INSTANCE_DEFAULTING_TO_SUPPORTED_CIPHERS);
     }
 
     if (config.isUseInsecureTrustManager()) {

File: client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -132,6 +132,7 @@ protected RequestBuilderBase(Request prototype, boolean disableUrlEncoding, bool
     this.file = prototype.getFile();
     this.followRedirect = prototype.getFollowRedirect();
     this.requestTimeout = prototype.getRequestTimeout();
+    this.readTimeout = prototype.getReadTimeout();
     this.rangeOffset = prototype.getRangeOffset();
     this.charset = prototype.getCharset();
     this.channelPoolPartitioning = prototype.getChannelPoolPartitioning();

File: client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
Patch:
@@ -112,7 +112,7 @@ public void onSuccess(Channel channel, InetSocketAddress remoteAddress) {
     if ((proxyServer == null || proxyServer.getProxyType().isSocks()) && uri.isSecured()) {
       SslHandler sslHandler;
       try {
-        sslHandler = channelManager.addSslHandler(channel.pipeline(), uri, request.getVirtualHost());
+        sslHandler = channelManager.addSslHandler(channel.pipeline(), uri, request.getVirtualHost(), proxyServer != null);
       } catch (Exception sslError) {
         onFailure(channel, sslError);
         return;

File: extras/typesafeconfig/src/main/java/org/asynchttpclient/extras/typesafeconfig/AsyncHttpClientTypesafeConfig.java
Patch:
@@ -260,12 +260,12 @@ public int getChunkedFileChunkSize() {
 
   @Override
   public int getWebSocketMaxBufferSize() {
-    return getIntegerOpt(WEB_SOCKET_MAX_BUFFER_SIZE_CONFIG).orElse(defaultWebSocketMaxBufferSize());
+    return getIntegerOpt(WEBSOCKET_MAX_BUFFER_SIZE_CONFIG).orElse(defaultWebSocketMaxBufferSize());
   }
 
   @Override
   public int getWebSocketMaxFrameSize() {
-    return getIntegerOpt(WEB_SOCKET_MAX_FRAME_SIZE_CONFIG).orElse(defaultWebSocketMaxFrameSize());
+    return getIntegerOpt(WEBSOCKET_MAX_FRAME_SIZE_CONFIG).orElse(defaultWebSocketMaxFrameSize());
   }
 
   @Override
@@ -335,7 +335,7 @@ public boolean isValidateResponseHeaders() {
 
   @Override
   public boolean isAggregateWebSocketFrameFragments() {
-    return getBooleanOpt(AGGREGATE_WEB_SOCKET_FRAME_FRAGMENTS_CONFIG).orElse(defaultAggregateWebSocketFrameFragments());
+    return getBooleanOpt(AGGREGATE_WEBSOCKET_FRAME_FRAGMENTS_CONFIG).orElse(defaultAggregateWebSocketFrameFragments());
   }
 
   @Override

File: client/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java
Patch:
@@ -26,7 +26,7 @@ public class ConsumerKey {
   private final String secret;
   private final String percentEncodedKey;
 
-  ConsumerKey(String key, String secret) {
+  public ConsumerKey(String key, String secret) {
     this.key = key;
     this.secret = secret;
     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);
@@ -40,7 +40,7 @@ public String getSecret() {
     return secret;
   }
 
-  String getPercentEncodedKey() {
+  public String getPercentEncodedKey() {
     return percentEncodedKey;
   }
 

File: client/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java
Patch:
@@ -41,7 +41,7 @@ public class OAuthSignatureCalculator implements SignatureCalculator {
    * @param consumerAuth Consumer key to use for signature calculation
    * @param userAuth     Request/access token to use for signature calculation
    */
-  OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth) {
+  public OAuthSignatureCalculator(ConsumerKey consumerAuth, RequestToken userAuth) {
     this.consumerAuth = consumerAuth;
     this.userAuth = userAuth;
   }

File: client/src/main/java/org/asynchttpclient/oauth/Parameter.java
Patch:
@@ -20,7 +20,7 @@ final class Parameter implements Comparable<Parameter> {
 
   final String key, value;
 
-  Parameter(String key, String value) {
+  public Parameter(String key, String value) {
     this.key = key;
     this.value = value;
   }

File: client/src/main/java/org/asynchttpclient/oauth/Parameters.java
Patch:
@@ -19,16 +19,16 @@
 import java.util.Collections;
 import java.util.List;
 
-class Parameters {
+final class Parameters {
 
   private List<Parameter> parameters = new ArrayList<>();
 
-  Parameters add(String key, String value) {
+  public Parameters add(String key, String value) {
     parameters.add(new Parameter(key, value));
     return this;
   }
 
-  void reset() {
+  public void reset() {
     parameters.clear();
   }
 

File: client/src/main/java/org/asynchttpclient/oauth/RequestToken.java
Patch:
@@ -28,7 +28,7 @@ public class RequestToken {
   private final String secret;
   private final String percentEncodedKey;
 
-  RequestToken(String key, String token) {
+  public RequestToken(String key, String token) {
     this.key = key;
     this.secret = token;
     this.percentEncodedKey = Utf8UrlEncoder.percentEncodeQueryElement(key);
@@ -42,7 +42,7 @@ public String getSecret() {
     return secret;
   }
 
-  String getPercentEncodedKey() {
+  public String getPercentEncodedKey() {
     return percentEncodedKey;
   }
 

File: client/src/main/java/org/asynchttpclient/cookie/CookieStore.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * This interface represents an abstract store for {@link Cookie} objects.
- * <p>
+ *
  * <p>{@link CookieManager} will call {@code CookieStore.add} to save cookies
  * for every incoming HTTP response, and call {@code CookieStore.get} to
  * retrieve cookie for every outgoing HTTP request. A CookieStore
@@ -35,13 +35,13 @@ public interface CookieStore {
   /**
    * Adds one {@link Cookie} to the store. This is called for every incoming HTTP response.
    * If the given cookie has already expired it will not be added, but existing values will still be removed.
-   * <p>
+   *
    * <p>A cookie to store may or may not be associated with an URI. If it
    * is not associated with an URI, the cookie's domain and path attribute
    * will indicate where it comes from. If it is associated with an URI and
    * its domain and path attribute are not specified, given URI will indicate
    * where this cookie comes from.
-   * <p>
+   *
    * <p>If a cookie corresponding to the given URI already exists,
    * then it is replaced with the new one.
    *

File: client/src/main/java/org/asynchttpclient/handler/TransferCompletionHandler.java
Patch:
@@ -25,7 +25,6 @@
  * A {@link org.asynchttpclient.AsyncHandler} that can be used to notify a set of {@link TransferListener}
  * <br>
  * <blockquote>
- * <p>
  * <pre>
  * AsyncHttpClient client = new AsyncHttpClient();
  * TransferCompletionHandler tl = new TransferCompletionHandler();
@@ -52,7 +51,6 @@
  *
  * Response response = httpClient.prepareGet("http://...").execute(tl).get();
  * </pre>
- * <p>
  * </blockquote>
  */
 public class TransferCompletionHandler extends AsyncCompletionHandlerBase {

File: extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java
Patch:
@@ -52,18 +52,18 @@
  * .setRequestTimeout(5 * 60 * 1000)
  * .setUrl(getTargetUrl())
  * .setHeader("Content-Type", "text/html").build();
- * <p>
+ *
  * StringBuilder s = new StringBuilder();
  * Future&lt;Response&gt; future = client.post(new InputStreamBodyGenerator(new ByteArrayInputStream(MY_MESSAGE.getBytes())), new AppendableBodyConsumer(s));
  * </pre></blockquote>
  * or
  * <blockquote><pre>
  * public void ByteArrayOutputStreamBodyConsumerTest() throws Throwable {
- * <p>
+ *
  * SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder()
  * .setUrl(getTargetUrl())
  * .build();
- * <p>
+ *
  * ByteArrayOutputStream o = new ByteArrayOutputStream(10);
  * Future&lt;Response&gt; future = client.post(new FileBodyGenerator(myFile), new OutputStreamBodyConsumer(o));
  * </pre></blockquote>

File: client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
Patch:
@@ -186,9 +186,9 @@ public <T> ListenableFuture<T> executeRequest(Request request, AsyncHandler<T> h
         List<Cookie> cookies = config.getCookieStore().get(request.getUri());
         if (!cookies.isEmpty()) {
           RequestBuilder requestBuilder = new RequestBuilder(request);
-          for (Cookie cookie : cookies)
+          for (Cookie cookie : cookies) {
             requestBuilder.addOrReplaceCookie(cookie);
-
+          }
           request = requestBuilder.build();
         }
       } catch (Exception e) {

File: client/src/test/java/org/asynchttpclient/RequestBuilderTest.java
Patch:
@@ -132,7 +132,7 @@ public void testSetHeaders() {
     assertEquals(requestBuilder.headers.get("Content-Type"), "application/json", "header value incorrect");
   }
 
-  @Test(enabled = false)
+  @Test
   public void testAddOrReplaceCookies() {
     RequestBuilder requestBuilder = new RequestBuilder();
     Cookie cookie = new DefaultCookie("name", "value");
@@ -156,7 +156,7 @@ public void testAddOrReplaceCookies() {
     assertEquals(requestBuilder.cookies.size(), 1, "cookies size should remain 1 as we just replaced a cookie with same name");
     assertEquals(requestBuilder.cookies.get(0), cookie2, "cookie does not match");
 
-    Cookie cookie3 = new DefaultCookie("name", "value");
+    Cookie cookie3 = new DefaultCookie("name2", "value");
     cookie3.setDomain("google.com");
     cookie3.setPath("/");
     cookie3.setMaxAge(1000);

File: client/src/test/java/org/asynchttpclient/ws/AbstractBasicWebSocketTest.java
Patch:
@@ -43,7 +43,7 @@ public WebSocketHandler configureHandler() {
     return new WebSocketHandler() {
       @Override
       public void configure(WebSocketServletFactory factory) {
-        factory.register(EchoSocket.class);
+        factory.register(EchoWebSocket.class);
       }
     };
   }

File: client/src/test/java/org/asynchttpclient/ws/EchoWebSocket.java
Patch:
@@ -19,7 +19,7 @@
 import java.io.IOException;
 import java.nio.ByteBuffer;
 
-public class EchoSocket extends WebSocketAdapter {
+public class EchoWebSocket extends WebSocketAdapter {
 
   @Override
   public void onWebSocketConnect(Session sess) {

File: client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java
Patch:
@@ -99,7 +99,7 @@ public Future<Void> sendBinaryFrame(byte[] payload, boolean finalFragment, int r
 
   @Override
   public Future<Void> sendBinaryFrame(ByteBuf payload, boolean finalFragment, int rsv) {
-    return channel.writeAndFlush(new BinaryWebSocketFrame(payload));
+    return channel.writeAndFlush(new BinaryWebSocketFrame(finalFragment, rsv, payload));
   }
 
   @Override

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
Patch:
@@ -237,7 +237,7 @@ private String requestUri(Uri uri, ProxyServer proxyServer, boolean connect) {
             // proxy tunnelling, connect need host and explicit port
             return getAuthority(uri);
 
-        } else if (proxyServer != null && !uri.isSecured()) {
+        } else if (proxyServer != null && !uri.isSecured() && proxyServer.getProxyType().isHttp()) {
             // proxy over HTTP, need full url
             return uri.toUrl();
 

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
Patch:
@@ -66,7 +66,7 @@ public NettyRequestFactory(AsyncHttpClientConfig config) {
 
     private NettyBody body(Request request) {
         NettyBody nettyBody = null;
-        Charset bodyCharset = withDefault(request.getCharset(), DEFAULT_CHARSET);
+        Charset bodyCharset = request.getCharset();
 
         if (request.getByteData() != null) {
             nettyBody = new NettyByteArrayBody(request.getByteData());

File: client/src/test/java/org/asynchttpclient/BasicHttpTest.java
Patch:
@@ -14,7 +14,7 @@
 package org.asynchttpclient;
 
 import static io.netty.handler.codec.http.HttpHeaderNames.*;
-import static java.nio.charset.StandardCharsets.ISO_8859_1;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.asynchttpclient.Dsl.*;
 import static org.asynchttpclient.test.TestUtils.*;
@@ -289,14 +289,14 @@ public Response onCompleted(Response response) throws Exception {
     }
 
     @Test
-    public void defaultRequestBodyEncodingIsIso() throws Throwable {
+    public void defaultRequestBodyEncodingIsUtf8() throws Throwable {
         withClient().run(client -> {
             withServer(server).run(server -> {
                 server.enqueueEcho();
                 Response response = client.preparePost(getTargetUrl())//
                         .setBody("\u017D\u017D\u017D\u017D\u017D\u017D")//
                         .execute().get();
-                assertEquals(response.getResponseBodyAsBytes(), "\u017D\u017D\u017D\u017D\u017D\u017D".getBytes(ISO_8859_1));
+                assertEquals(response.getResponseBodyAsBytes(), "\u017D\u017D\u017D\u017D\u017D\u017D".getBytes(UTF_8));
             });
         });
     }

File: client/src/main/java/org/asynchttpclient/request/body/Body.java
Patch:
@@ -52,7 +52,7 @@ enum BodyState {
      * Reads the next chunk of bytes from the body.
      *
      * @param target The buffer to store the chunk in, must not be {@code null}.
-     * @return The non-negative number of bytes actually read or {@code -1} if the body has been read completely.
+     * @return The state.
      * @throws IOException If the chunk could not be read.
      */
     BodyState transferTo(ByteBuf target) throws IOException;

File: extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -21,7 +21,6 @@
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.DefaultAsyncHttpClient;
-import org.asynchttpclient.DefaultAsyncHttpClientConfig;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientImplException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientRegistryImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncImplHelper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: extras/registry/src/test/java/org/asynchttpclient/extras/registry/AbstractAsyncHttpClientFactoryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: extras/registry/src/test/java/org/asynchttpclient/extras/registry/AsyncHttpClientRegistryTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: extras/registry/src/test/java/org/asynchttpclient/extras/registry/BadAsyncHttpClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: extras/registry/src/test/java/org/asynchttpclient/extras/registry/BadAsyncHttpClientException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: extras/registry/src/test/java/org/asynchttpclient/extras/registry/BadAsyncHttpClientRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: extras/registry/src/test/java/org/asynchttpclient/extras/registry/TestAsyncHttpClient.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: extras/registry/src/test/java/org/asynchttpclient/extras/registry/TestAsyncHttpClientRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2014 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: client/src/test/java/org/asynchttpclient/test/EventCollectingHandler.java
Patch:
@@ -25,11 +25,10 @@
 import org.asynchttpclient.AsyncCompletionHandlerBase;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.Response;
-import org.asynchttpclient.handler.AsyncHandlerExtensions;
 import org.asynchttpclient.netty.request.NettyRequest;
 import org.testng.Assert;
 
-public class EventCollectingHandler extends AsyncCompletionHandlerBase implements AsyncHandlerExtensions {
+public class EventCollectingHandler extends AsyncCompletionHandlerBase {
 
     public static final String COMPLETED_EVENT = "Completed";
     public static final String STATUS_RECEIVED_EVENT = "StatusReceived";

File: client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
Patch:
@@ -89,7 +89,7 @@ private void writeRequest(Channel channel) {
 
     public void onSuccess(Channel channel, InetSocketAddress remoteAddress) {
 
-        {
+        if (connectionSemaphore != null) {
             // transfer lock from future to channel
             Object partitionKeyLock = future.takePartitionKeyLock();
 

File: client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
Patch:
@@ -312,7 +312,7 @@ else if (isRemotelyClosed(idleChannel.channel)) {
      */
     public boolean removeAll(Channel channel) {
         ChannelCreation creation = connectionTtlEnabled ? channelId2Creation.remove(channel.id()) : null;
-        return !isClosed.get() && creation != null && partitions.get(creation.partitionKey).remove(channel);
+        return !isClosed.get() && creation != null && partitions.get(creation.partitionKey).remove(new IdleChannel(channel, Long.MIN_VALUE));
     }
 
     /**

File: client/src/test/java/org/asynchttpclient/request/body/multipart/part/MultipartPartTest.java
Patch:
@@ -193,7 +193,7 @@ public void testVisitPostContents() {
 
     @Test
     public void transferToShouldWriteStringPart() throws IOException, URISyntaxException {
-        String text = FileUtils.readFileToString(TestUtils.resourceAsFile("test_sample_message.eml"));
+        String text = FileUtils.readFileToString(TestUtils.resourceAsFile("test_sample_message.eml"), UTF_8);
 
         List<Part> parts = new ArrayList<>();
         parts.add(new StringPart("test_sample_message.eml", text));

File: client/src/main/java/org/asynchttpclient/handler/BodyDeferringAsyncHandler.java
Patch:
@@ -65,7 +65,7 @@
  *     PipedOutputStream pout = new PipedOutputStream();
  *     try (PipedInputStream pin = new PipedInputStream(pout)) {
  *         BodyDeferringAsyncHandler handler = new BodyDeferringAsyncHandler(pout);
- *         ListenableFuture<&lt;Response&gt; respFut = client.prepareGet(getTargetUrl()).execute(handler);
+ *         ListenableFuture&lt;Response&gt; respFut = client.prepareGet(getTargetUrl()).execute(handler);
  *         Response resp = handler.getResponse();
  *         // main thread will block here until headers are available
  *         if (resp.getStatusCode() == 200) {

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
Patch:
@@ -198,9 +198,7 @@ public NettyRequest newNettyRequest(Request request, boolean forceConnect, Proxy
                     .set(SEC_WEBSOCKET_VERSION, "13");
 
             if (!headers.contains(ORIGIN)) {
-                String scheme = uri.isSecured() ? "https://" : "http://";
-                String origin = scheme+ uri.getHost() + ":" + uri.getExplicitPort();
-                headers.set(ORIGIN, origin);
+                headers.set(ORIGIN, computeOriginHeader(uri));
             }
 
         } else if (!headers.contains(CONNECTION)) {

File: client/src/test/java/org/asynchttpclient/BasicHttpTest.java
Patch:
@@ -240,7 +240,7 @@ public Response onCompleted(Response response) throws Exception {
         });
     }
 
-    @Test(expectedExceptions = NullPointerException.class)
+    @Test(expectedExceptions = IllegalArgumentException.class)
     public void nullSchemeThrowsNPE() throws Throwable {
         withClient().run(client -> client.prepareGet("gatling.io").execute());
     }
@@ -859,7 +859,7 @@ public void getShouldAllowBody() throws Throwable {
         });
     }
 
-    @Test(expectedExceptions = NullPointerException.class)
+    @Test(expectedExceptions = IllegalArgumentException.class)
     public void malformedUriThrowsException() throws Throwable {
         withClient().run(client -> {
             withServer(server).run(server -> {

File: client/src/main/java/org/asynchttpclient/netty/request/body/NettyBody.java
Patch:
@@ -23,7 +23,9 @@ public interface NettyBody {
 
     long getContentLength();
 
-    CharSequence getContentType();
+    default CharSequence getContentTypeOverride() {
+        return null;
+    }
 
     void write(Channel channel, NettyResponseFuture<?> future) throws IOException;
 }

File: extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientFactory.java
Patch:
@@ -63,7 +63,7 @@ public static AsyncHttpClient getAsyncHttpClient() {
     public static AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         if (attemptInstantiation()) {
             try {
-                Constructor<AsyncHttpClient> constructor = asyncHttpClientImplClass.getConstructor(DefaultAsyncHttpClientConfig.class);
+                Constructor<AsyncHttpClient> constructor = asyncHttpClientImplClass.getConstructor(AsyncHttpClientConfig.class);
                 return constructor.newInstance(config);
             } catch (Exception e) {
                 throw new AsyncHttpClientImplException("Unable to find the instantiate the class specified by system property : "

File: extras/retrofit2/src/main/java/org/asynchttpclient/extras/retrofit/AsyncHttpClientCall.java
Patch:
@@ -161,7 +161,7 @@ public Call clone() {
 
     protected <T> T handleException(Throwable throwable, Callback responseCallback) {
         try {
-            if (responseCallback == null) {
+            if (responseCallback != null) {
                 responseCallback.onFailure(this, toIOException(throwable));
             }
         } catch (Exception e) {

File: extras/retrofit2/src/test/java/org/asynchttpclient/extras/retrofit/TestServices.java
Patch:
@@ -35,7 +35,6 @@ public static class Contributor implements Serializable {
         @NonNull
         String login;
 
-        @NonNull
         int contributions;
     }
 

File: client/src/test/java/org/asynchttpclient/testserver/HttpServer.java
Patch:
@@ -254,9 +254,9 @@ protected void handle0(String target, Request baseRequest, HttpServletRequest re
                 size = request.getContentLength();
             }
             if (size > 0) {
-                byte[] bytes = new byte[size];
                 int read = 0;
                 while (read > -1) {
+                    byte[] bytes = new byte[size];
                     read = request.getInputStream().read(bytes);
                     if (read > 0) {
                         response.getOutputStream().write(bytes, 0, read);

File: client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -213,7 +213,7 @@ public interface AsyncHttpClientConfig {
     /**
      * @return true to disable all HTTPS behaviors AT ONCE, such as hostname verification and SNI
      */
-    boolean isDisableHttpsAlgorithm();
+    boolean isDisableHttpsEndpointIdentificationAlgorithm();
 
     /**
      * @return the array of enabled protocols

File: client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
Patch:
@@ -119,8 +119,8 @@ public static boolean defaultUseInsecureTrustManager() {
         return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getBoolean(ASYNC_CLIENT_CONFIG_ROOT + "useInsecureTrustManager");
     }
 
-    public static boolean defaultDisableHttpsAlgorithm() {
-        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getBoolean(ASYNC_CLIENT_CONFIG_ROOT + "disableHttpsAlgorithm");
+    public static boolean defaultDisableHttpsEndpointIdentificationAlgorithm() {
+        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getBoolean(ASYNC_CLIENT_CONFIG_ROOT + "disableHttpsEndpointIdentificationAlgorithm");
     }
 
     public static int defaultSslSessionCacheSize() {

File: client/src/main/java/org/asynchttpclient/netty/ssl/SslEngineFactoryBase.java
Patch:
@@ -23,7 +23,7 @@ public abstract class SslEngineFactoryBase implements SslEngineFactory {
 
     protected void configureSslEngine(SSLEngine sslEngine, AsyncHttpClientConfig config) {
         sslEngine.setUseClientMode(true);
-        if (!config.isDisableHttpsAlgorithm()) {
+        if (!config.isDisableHttpsEndpointIdentificationAlgorithm()) {
             SSLParameters params = sslEngine.getSSLParameters();
             params.setEndpointIdentificationAlgorithm("HTTPS");
             sslEngine.setSSLParameters(params);

File: client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
Patch:
@@ -103,7 +103,7 @@ public void operationComplete(Future<? super Void> future) throws Exception {
             }
         }
 
-        Channels.setInactiveToken(channel);
+        Channels.setActiveToken(channel);
 
         TimeoutsHolder timeoutsHolder = future.getTimeoutsHolder();
 

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -465,7 +465,7 @@ public void abort(Channel channel, NettyResponseFuture<?> future, Throwable t) {
     }
 
     public void handleUnexpectedClosedChannel(Channel channel, NettyResponseFuture<?> future) {
-        if (Channels.getInactiveToken(channel)) {
+        if (Channels.isActiveTokenSet(channel)) {
             if (future.isDone()) {
                 channelManager.closeChannel(channel);
             } else if (future.incrementRetryAndCheck() && retry(future)) {

File: client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -241,7 +241,7 @@ public interface AsyncHttpClientConfig {
 
     int getHttpClientCodecMaxChunkSize();
 
-    int getHttpClientInitialBufferSize();
+    int getHttpClientCodecInitialBufferSize();
 
     boolean isDisableZeroCopy();
 

File: client/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigDefaults.java
Patch:
@@ -163,8 +163,8 @@ public static int defaultHttpClientCodecMaxChunkSize() {
         return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + "httpClientCodecMaxChunkSize");
     }
 
-    public static int defaultHttpClientInitialBufferSize() {
-        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + "httpClientInitialBufferSize");
+    public static int defaultHttpClientCodecInitialBufferSize() {
+        return AsyncHttpClientConfigHelper.getAsyncHttpClientConfig().getInt(ASYNC_CLIENT_CONFIG_ROOT + "httpClientCodecInitialBufferSize");
     }
 
     public static boolean defaultDisableZeroCopy() {

File: client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
Patch:
@@ -330,7 +330,7 @@ private HttpClientCodec newHttpClientCodec() {
                 config.getHttpClientCodecMaxChunkSize(),//
                 false,//
                 config.isValidateResponseHeaders(),//
-                config.getHttpClientInitialBufferSize());
+                config.getHttpClientCodecInitialBufferSize());
     }
 
     private SslHandler createSslHandler(String peerHost, int peerPort) {

File: client/src/main/java/org/asynchttpclient/netty/ssl/DefaultSslEngineFactory.java
Patch:
@@ -13,12 +13,12 @@
  */
 package org.asynchttpclient.netty.ssl;
 
-import static org.asynchttpclient.util.MiscUtils.*;
-
+import static org.asynchttpclient.util.MiscUtils.isNonEmpty;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.handler.ssl.SslContext;
 import io.netty.handler.ssl.SslContextBuilder;
 import io.netty.handler.ssl.SslProvider;
+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;
 
 import java.util.Arrays;
 

File: client/src/main/java/org/asynchttpclient/Response.java
Patch:
@@ -141,15 +141,15 @@ public interface Response {
 
     /**
      * Return true if the response's headers has been computed by an {@link AsyncHandler} It will return false if the either
-     * {@link AsyncHandler#onStatusReceived(HttpResponseStatus)} or {@link AsyncHandler#onHeadersReceived(HttpResponseHeaders)} returned {@link AsyncHandler.State#ABORT}
+     * {@link AsyncHandler#onStatusReceived(HttpResponseStatus)} or {@link AsyncHandler#onHeadersReceived(HttpHeaders)} returned {@link AsyncHandler.State#ABORT}
      * 
      * @return true if the response's headers has been computed by an {@link AsyncHandler}
      */
     boolean hasResponseHeaders();
 
     /**
      * Return true if the response's body has been computed by an {@link AsyncHandler}. It will return false if the either {@link AsyncHandler#onStatusReceived(HttpResponseStatus)}
-     * or {@link AsyncHandler#onHeadersReceived(HttpResponseHeaders)} returned {@link AsyncHandler.State#ABORT}
+     * or {@link AsyncHandler#onHeadersReceived(HttpHeaders)} returned {@link AsyncHandler.State#ABORT}
      * 
      * @return true if the response's body has been computed by an {@link AsyncHandler}
      */

File: client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
Patch:
@@ -76,7 +76,7 @@ public void testDefaultCompressionEnforced() {
     }
 
     public void testDefaultUserAgent() {
-        Assert.assertEquals(AsyncHttpClientConfigDefaults.defaultUserAgent(), "AHC/2.0");
+        Assert.assertEquals(AsyncHttpClientConfigDefaults.defaultUserAgent(), "AHC/2.1");
         testStringSystemProperty("userAgent", "defaultUserAgent", "MyAHC");
     }
 

File: client/src/main/java/org/asynchttpclient/Response.java
Patch:
@@ -172,15 +172,15 @@ public interface Response {
     class ResponseBuilder {
         private final List<HttpResponseBodyPart> bodyParts = new ArrayList<>(1);
         private HttpResponseStatus status;
-        private HttpResponseHeaders headers;
+        private HttpHeaders headers;
 
         public ResponseBuilder accumulate(HttpResponseStatus status) {
             this.status = status;
             return this;
         }
 
-        public ResponseBuilder accumulate(HttpResponseHeaders headers) {
-            this.headers = this.headers == null ? headers : new HttpResponseHeaders(this.headers.getHeaders().add(headers.getHeaders()), true);
+        public ResponseBuilder accumulate(HttpHeaders headers) {
+            this.headers = this.headers == null ? headers : this.headers.add(headers);
             return this;
         }
 

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/Interceptors.java
Patch:
@@ -15,13 +15,13 @@
 
 import static org.asynchttpclient.util.HttpConstants.ResponseStatusCodes.*;
 import io.netty.channel.Channel;
+import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.HttpMethod;
 import io.netty.handler.codec.http.HttpRequest;
 import io.netty.handler.codec.http.HttpResponse;
 
 import org.asynchttpclient.AsyncHandler;
 import org.asynchttpclient.AsyncHttpClientConfig;
-import org.asynchttpclient.HttpResponseHeaders;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.Realm;
 import org.asynchttpclient.Request;
@@ -61,7 +61,7 @@ public boolean exitAfterIntercept(//
             AsyncHandler<?> handler,//
             HttpResponse response,//
             HttpResponseStatus status,//
-            HttpResponseHeaders responseHeaders) throws Exception {
+            HttpHeaders responseHeaders) throws Exception {
 
         HttpRequest httpRequest = future.getNettyRequest().getHttpRequest();
         ProxyServer proxyServer = future.getProxyServer();

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/ResponseFiltersInterceptor.java
Patch:
@@ -15,10 +15,10 @@
 
 import static org.asynchttpclient.util.Assertions.assertNotNull;
 import io.netty.channel.Channel;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import org.asynchttpclient.AsyncHandler;
 import org.asynchttpclient.AsyncHttpClientConfig;
-import org.asynchttpclient.HttpResponseHeaders;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.filter.FilterContext;
 import org.asynchttpclient.filter.FilterException;
@@ -42,7 +42,7 @@ public boolean exitAfterProcessingFilters(//
             NettyResponseFuture<?> future,//
             AsyncHandler<?> handler, //
             HttpResponseStatus status,//
-            HttpResponseHeaders responseHeaders) {
+            HttpHeaders responseHeaders) {
 
         FilterContext fc = new FilterContext.FilterContextBuilder().asyncHandler(handler).request(future.getCurrentRequest()).responseStatus(status)
                 .responseHeaders(responseHeaders).build();

File: client/src/main/java/org/asynchttpclient/ws/WebSocketUpgradeHandler.java
Patch:
@@ -13,12 +13,13 @@
  */
 package org.asynchttpclient.ws;
 
+import io.netty.handler.codec.http.HttpHeaders;
+
 import java.util.ArrayList;
 import java.util.List;
 
 import org.asynchttpclient.AsyncHandler;
 import org.asynchttpclient.HttpResponseBodyPart;
-import org.asynchttpclient.HttpResponseHeaders;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.netty.ws.NettyWebSocket;
 
@@ -42,7 +43,7 @@ public final State onStatusReceived(HttpResponseStatus responseStatus) throws Ex
     }
 
     @Override
-    public final State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
+    public final State onHeadersReceived(HttpHeaders headers) throws Exception {
         return State.CONTINUE;
     }
 

File: client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
Patch:
@@ -15,8 +15,9 @@
  */
 package org.asynchttpclient;
 
-import static org.asynchttpclient.Dsl.*;
+import static org.asynchttpclient.Dsl.asyncHttpClient;
 import static org.testng.Assert.*;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.IOException;
 import java.io.PrintWriter;
@@ -121,7 +122,7 @@ public State onStatusReceived(HttpResponseStatus e) throws Exception {
                     return State.CONTINUE;
                 }
 
-                public State onHeadersReceived(HttpResponseHeaders e) throws Exception {
+                public State onHeadersReceived(HttpHeaders e) throws Exception {
                     if (headers.incrementAndGet() == 2) {
                         throw new Exception("Analyze this.");
                     }

File: client/src/test/java/org/asynchttpclient/BasicAuthTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.asynchttpclient.Dsl.*;
 import static org.asynchttpclient.test.TestUtils.*;
 import static org.testng.Assert.*;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -217,7 +218,7 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
                     return State.CONTINUE;
                 }
 
-                public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
+                public State onHeadersReceived(HttpHeaders headers) throws Exception {
                     return State.CONTINUE;
                 }
 

File: client/src/test/java/org/asynchttpclient/FollowingThreadTest.java
Patch:
@@ -16,6 +16,7 @@
 package org.asynchttpclient;
 
 import static org.asynchttpclient.Dsl.*;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.IOException;
 import java.util.concurrent.CountDownLatch;
@@ -64,7 +65,7 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
                                     return State.CONTINUE;
                                 }
 
-                                public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
+                                public State onHeadersReceived(HttpHeaders headers) throws Exception {
                                     return State.CONTINUE;
                                 }
 

File: client/src/test/java/org/asynchttpclient/PostRedirectGetTest.java
Patch:
@@ -74,7 +74,7 @@ private void doTestNegative(final int status, boolean strict) throws Exception {
             public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
                 // pass on the x-expect-get and remove the x-redirect
                 // headers if found in the response
-                ctx.getResponseHeaders().getHeaders().get("x-expect-post");
+                ctx.getResponseHeaders().get("x-expect-post");
                 ctx.getRequest().getHeaders().add("x-expect-post", "true");
                 ctx.getRequest().getHeaders().remove("x-redirect");
                 return ctx;
@@ -109,7 +109,7 @@ private void doTestPositive(final int status) throws Exception {
             public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
                 // pass on the x-expect-get and remove the x-redirect
                 // headers if found in the response
-                ctx.getResponseHeaders().getHeaders().get("x-expect-get");
+                ctx.getResponseHeaders().get("x-expect-get");
                 ctx.getRequest().getHeaders().add("x-expect-get", "true");
                 ctx.getRequest().getHeaders().remove("x-redirect");
                 return ctx;

File: client/src/test/java/org/asynchttpclient/RemoteSiteTest.java
Patch:
@@ -19,6 +19,7 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.asynchttpclient.Dsl.*;
 import static org.testng.Assert.*;
+import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.cookie.Cookie;
 import io.netty.handler.codec.http.cookie.DefaultCookie;
 
@@ -208,7 +209,7 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
                     return State.CONTINUE;
                 }
 
-                public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
+                public State onHeadersReceived(HttpHeaders headers) throws Exception {
                     builder.accumulate(headers);
                     return State.CONTINUE;
                 }

File: client/src/test/java/org/asynchttpclient/filter/FilterTest.java
Patch:
@@ -165,7 +165,7 @@ public void replayHeaderResponseFilterTest() throws Exception {
         final AtomicBoolean replay = new AtomicBoolean(true);
         ResponseFilter responseFilter = new ResponseFilter() {
             public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
-                if (ctx.getResponseHeaders() != null && ctx.getResponseHeaders().getHeaders().get("Ping").equals("Pong") && replay.getAndSet(false)) {
+                if (ctx.getResponseHeaders() != null && ctx.getResponseHeaders().get("Ping").equals("Pong") && replay.getAndSet(false)) {
                     Request request = new RequestBuilder(ctx.getRequest()).addHeader("Ping", "Pong").build();
                     return new FilterContext.FilterContextBuilder<T>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
                 }

File: client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
Patch:
@@ -15,6 +15,7 @@
 import static org.asynchttpclient.Dsl.*;
 import static org.asynchttpclient.test.TestUtils.*;
 import static org.testng.Assert.assertEquals;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.ByteArrayOutputStream;
 import java.nio.ByteBuffer;
@@ -28,7 +29,6 @@
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.BoundRequestBuilder;
 import org.asynchttpclient.HttpResponseBodyPart;
-import org.asynchttpclient.HttpResponseHeaders;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.ListenableFuture;
 import org.asynchttpclient.Response;
@@ -153,7 +153,7 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
         }
 
         @Override
-        public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
+        public State onHeadersReceived(HttpHeaders headers) throws Exception {
             return State.CONTINUE;
         }
 
@@ -243,7 +243,7 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
         }
 
         @Override
-        public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
+        public State onHeadersReceived(HttpHeaders headers) throws Exception {
             return State.CONTINUE;
         }
 

File: client/src/test/java/org/asynchttpclient/request/body/EmptyBodyTest.java
Patch:
@@ -15,8 +15,9 @@
  */
 package org.asynchttpclient.request.body;
 
-import static org.asynchttpclient.Dsl.*;
+import static org.asynchttpclient.Dsl.asyncHttpClient;
 import static org.testng.Assert.*;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -34,7 +35,6 @@
 import org.asynchttpclient.AsyncHandler;
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.HttpResponseBodyPart;
-import org.asynchttpclient.HttpResponseHeaders;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.Response;
 import org.eclipse.jetty.server.Request;
@@ -95,7 +95,7 @@ public State onStatusReceived(HttpResponseStatus e) throws Exception {
                     return AsyncHandler.State.CONTINUE;
                 }
 
-                public State onHeadersReceived(HttpResponseHeaders e) throws Exception {
+                public State onHeadersReceived(HttpHeaders e) throws Exception {
                     if (headers.incrementAndGet() == 2) {
                         throw new Exception("Analyze this.");
                     }

File: client/src/test/java/org/asynchttpclient/request/body/ZeroCopyFileTest.java
Patch:
@@ -15,6 +15,7 @@
 import static org.asynchttpclient.Dsl.asyncHttpClient;
 import static org.asynchttpclient.test.TestUtils.*;
 import static org.testng.Assert.*;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.File;
 import java.io.IOException;
@@ -36,7 +37,6 @@
 import org.asynchttpclient.AsyncHttpClient;
 import org.asynchttpclient.BasicHttpsTest;
 import org.asynchttpclient.HttpResponseBodyPart;
-import org.asynchttpclient.HttpResponseHeaders;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.Response;
 import org.eclipse.jetty.server.Request;
@@ -132,7 +132,7 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
                         return State.CONTINUE;
                     }
 
-                    public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
+                    public State onHeadersReceived(HttpHeaders headers) throws Exception {
                         return State.CONTINUE;
                     }
 
@@ -170,7 +170,7 @@ public State onStatusReceived(HttpResponseStatus responseStatus) throws Exceptio
                         return State.CONTINUE;
                     }
 
-                    public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
+                    public State onHeadersReceived(HttpHeaders headers) throws Exception {
                         return State.CONTINUE;
                     }
 

File: client/src/test/java/org/asynchttpclient/test/EventCollectingHandler.java
Patch:
@@ -13,6 +13,7 @@
 package org.asynchttpclient.test;
 
 import io.netty.channel.Channel;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.net.InetSocketAddress;
 import java.util.List;
@@ -22,7 +23,6 @@
 import java.util.concurrent.TimeUnit;
 
 import org.asynchttpclient.AsyncCompletionHandlerBase;
-import org.asynchttpclient.HttpResponseHeaders;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.Response;
 import org.asynchttpclient.handler.AsyncHandlerExtensions;
@@ -77,7 +77,7 @@ public State onStatusReceived(HttpResponseStatus status) throws Exception {
     }
 
     @Override
-    public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
+    public State onHeadersReceived(HttpHeaders headers) throws Exception {
         firedEvents.add(HEADERS_RECEIVED_EVENT);
         return super.onHeadersReceived(headers);
     }

File: client/src/test/java/org/asynchttpclient/test/TestUtils.java
Patch:
@@ -15,6 +15,7 @@
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.testng.Assert.*;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -57,7 +58,6 @@
 import org.asynchttpclient.AsyncCompletionHandler;
 import org.asynchttpclient.AsyncHandler;
 import org.asynchttpclient.HttpResponseBodyPart;
-import org.asynchttpclient.HttpResponseHeaders;
 import org.asynchttpclient.HttpResponseStatus;
 import org.asynchttpclient.Response;
 import org.asynchttpclient.SslEngineFactory;
@@ -395,7 +395,7 @@ public State onStatusReceived(final HttpResponseStatus responseStatus) throws Ex
         }
 
         @Override
-        public State onHeadersReceived(final HttpResponseHeaders headers) throws Exception {
+        public State onHeadersReceived(final HttpHeaders headers) throws Exception {
             return State.CONTINUE;
         }
 

File: extras/rxjava2/src/main/java/org/asynchttpclient/extras/rxjava2/DefaultRxHttpClient.java
Patch:
@@ -42,8 +42,6 @@ public class DefaultRxHttpClient implements RxHttpClient {
      * @param asyncHttpClient
      *            the Async HTTP Client instance to be used
      *
-     * @return a new {@code RxHttpClient} instance
-     *
      * @throws NullPointerException
      *             if {@code asyncHttpClient} is {@code null}
      */

File: extras/rxjava2/src/main/java/org/asynchttpclient/extras/rxjava2/maybe/AbstractMaybeAsyncHandlerBridge.java
Patch:
@@ -39,7 +39,7 @@
  *
  * When the request is {@link AsyncHandler#onCompleted() completed}, the result produced by the wrapped instance is
  * forwarded to the {@code Maybe}: If the result is {@code null}, {@link MaybeEmitter#onComplete()} is invoked,
- * {@link MaybeEmitter#onSuccess(T)} otherwise.
+ * {@link MaybeEmitter#onSuccess(Object)} otherwise.
  *
  * Any errors during request processing are forwarded via {@link MaybeEmitter#onError(Throwable)}.
  *

File: client/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -279,6 +279,8 @@ public interface AsyncHttpClientConfig {
 
     boolean isValidateResponseHeaders();
 
+    boolean isAggregateWebSocketFrameFragments();
+
     boolean isTcpNoDelay();
 
     boolean isSoReuseAddress();

File: client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
Patch:
@@ -396,7 +396,9 @@ public Bootstrap getBootstrap(Uri uri, ProxyServer proxy) {
     public void upgradePipelineForWebSockets(ChannelPipeline pipeline) {
         pipeline.addAfter(HTTP_CLIENT_CODEC, WS_ENCODER_HANDLER, new WebSocket08FrameEncoder(true));
         pipeline.addBefore(AHC_WS_HANDLER, WS_DECODER_HANDLER, new WebSocket08FrameDecoder(false, false, config.getWebSocketMaxFrameSize()));
-        pipeline.addAfter(WS_DECODER_HANDLER, WS_FRAME_AGGREGATOR, new WebSocketFrameAggregator(config.getWebSocketMaxBufferSize()));
+        if (config.isAggregateWebSocketFrameFragments()) {
+            pipeline.addAfter(WS_DECODER_HANDLER, WS_FRAME_AGGREGATOR, new WebSocketFrameAggregator(config.getWebSocketMaxBufferSize()));
+        }
         pipeline.remove(HTTP_CLIENT_CODEC);
     }
 

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -339,8 +339,7 @@ public <T> void writeRequest(NettyResponseFuture<T> future, Channel channel) {
         HttpRequest httpRequest = nettyRequest.getHttpRequest();
         AsyncHandler<T> handler = future.getAsyncHandler();
 
-        // if the channel is dead because it was pooled and the remote
-        // server decided to close it,
+        // if the channel is dead because it was pooled and the remote server decided to close it,
         // we just let it go and the channelInactive do its work
         if (!Channels.isChannelValid(channel))
             return;
@@ -366,6 +365,7 @@ public <T> void writeRequest(NettyResponseFuture<T> future, Channel channel) {
 
                 // if the request has a body, we want to track progress
                 if (writeBody) {
+                    // FIXME does this really work??? the promise is for the request without body!!!
                     ChannelProgressivePromise promise = channel.newProgressivePromise();
                     ChannelFuture f = channel.write(httpRequest, promise);
                     f.addListener(new WriteProgressListener(future, true, 0L));

File: client/src/test/java/org/asynchttpclient/ws/RedirectTest.java
Patch:
@@ -90,7 +90,7 @@ public void onOpen(WebSocket websocket) {
                 }
 
                 @Override
-                public void onClose(WebSocket websocket) {
+                public void onClose(WebSocket websocket, int code, String reason) {
                 }
 
                 @Override
@@ -102,7 +102,7 @@ public void onError(Throwable t) {
 
             latch.await();
             assertEquals(text.get(), "OnOpen");
-            websocket.close();
+            websocket.sendCloseFrame();
         }
     }
 

File: client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java
Patch:
@@ -150,12 +150,12 @@ private static String stripDotSuffix(final String value) {
 
     /** Convert host to standard form */
     private static String convertHost(final String host) {
-        return stripDotSuffix(host).toUpperCase();
+        return host != null ? stripDotSuffix(host).toUpperCase() : null;
     }
 
     /** Convert domain to standard form */
     private static String convertDomain(final String domain) {
-        return stripDotSuffix(domain).toUpperCase();
+        return domain != null ? stripDotSuffix(domain).toUpperCase() : null;
     }
 
     private static int readULong(final byte[] src, final int index) throws NtlmEngineException {

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
Patch:
@@ -210,10 +210,10 @@ public NettyRequest newNettyRequest(Request request, boolean forceConnect, Proxy
             headers.set(HOST, hostHeader(request, uri));
 
         // don't override authorization but append
-        addAuthorizationHeader(headers, perRequestAuthorizationHeader(realm));
+        addAuthorizationHeader(headers, perRequestAuthorizationHeader(request, realm));
         // only set proxy auth on request over plain HTTP, or when performing CONNECT
         if (!uri.isSecured() || connect) {
-            setProxyAuthorizationHeader(headers, perRequestProxyAuthorizationHeader(proxyRealm));
+            setProxyAuthorizationHeader(headers, perRequestProxyAuthorizationHeader(request, proxyRealm));
         }
 
         // Add default accept headers

File: client/src/test/java/org/asynchttpclient/AuthTimeoutTest.java
Patch:
@@ -165,6 +165,9 @@ protected Future<Response> execute(AsyncHttpClient client, boolean basic, boolea
             realm = digestAuthRealm(USER, ADMIN);
             url = getTargetUrl2();
             if (preemptive) {
+                realm.setRealmName("MyRealm");
+                realm.setAlgorithm("MD5");
+                realm.setQop("auth");
                 realm.setNonce("fFDVc60re9zt8fFDvht0tNrYuvqrcchN");
             }
         }

File: client/src/test/java/org/asynchttpclient/DigestAuthTest.java
Patch:
@@ -48,7 +48,6 @@ public void setUpGlobal() throws Exception {
 
     private static class SimpleHandler extends AbstractHandler {
         public void handle(String s, Request r, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
-
             response.addHeader("X-Auth", request.getHeader("Authorization"));
             response.setStatus(200);
             response.getOutputStream().flush();

File: client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
Patch:
@@ -58,7 +58,7 @@ public NettyConnectListener(NettyResponseFuture<T> future,//
         this.partitionKey = partitionKey;
     }
 
-    public void abortChannelPreemption(Channel channel) {
+    private void abortChannelPreemption(Channel channel) {
         if (channelPreempted) {
             channelManager.releaseChannelLock(partitionKey);
         }

File: client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
Patch:
@@ -87,7 +87,7 @@ private boolean exitAfterHandlingStatus(//
             HttpResponse response, AsyncHandler<?> handler,//
             NettyResponseStatus status,//
             HttpRequest httpRequest) throws IOException, Exception {
-        return !future.isAndSetStatusReceived(true) && handler.onStatusReceived(status) != State.CONTINUE;
+        return handler.onStatusReceived(status) != State.CONTINUE;
     }
 
     private boolean exitAfterHandlingHeaders(//

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -426,7 +426,6 @@ public boolean retry(NettyResponseFuture<?> future) {
 
         if (future.isReplayPossible()) {
             future.setChannelState(ChannelState.RECONNECTED);
-            future.isAndSetStatusReceived(false);
 
             LOGGER.debug("Trying to recover request {}\n", future.getNettyRequest().getHttpRequest());
             if (future.getAsyncHandler() instanceof AsyncHandlerExtensions) {

File: client/src/main/java/org/asynchttpclient/filter/ReleasePermitOnComplete.java
Patch:
@@ -20,6 +20,7 @@ public class ReleasePermitOnComplete {
      * 
      * @param handler the handler to be wrapped
      * @param available the Semaphore to be released when the wrapped handler is completed
+     * @param <T> the handler result type
      * @return the wrapped handler
      */
     @SuppressWarnings("unchecked")

File: client/src/main/java/org/asynchttpclient/uri/Uri.java
Patch:
@@ -135,7 +135,7 @@ public String toUrl() {
     }
 
     /**
-     * @return <scheme>://<hostname>(:<port>). Port is ommitted if it matches the scheme's default one.
+     * @return [scheme]://[hostname](:[port]). Port is omitted if it matches the scheme's default one.
      */
     public String toBaseUrl() {
         StringBuilder sb = StringBuilderPool.DEFAULT.stringBuilder();

File: client/src/main/java/org/asynchttpclient/ClientStats.java
Patch:
@@ -30,7 +30,7 @@ public ClientStats(Map<String, HostStats> statsPerHost) {
 
     /**
      * @return A map from hostname to statistics on that host's connections.
-     * The returned map is an {@link java.util.Collections.UnmodifiableMap}.
+     * The returned map is unmodifiable.
      */
     public Map<String, HostStats> getStatsPerHost() {
         return statsPerHost;

File: client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpTest.java
Patch:
@@ -115,7 +115,7 @@ public void tearDownGlobal() throws Exception {
     }
 
     @Test
-    public void nonPreemptyProxyAuthWithPlainHttpTarget() throws IOException, InterruptedException, ExecutionException {
+    public void nonPreemptiveProxyAuthWithPlainHttpTarget() throws IOException, InterruptedException, ExecutionException {
         try (AsyncHttpClient client = asyncHttpClient()) {
             String targetUrl = "http://localhost:" + httpPort + "/foo/bar";
             Request request = get(targetUrl)//

File: client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpsTest.java
Patch:
@@ -92,7 +92,7 @@ public void tearDownGlobal() throws Exception {
     }
 
     @Test
-    public void nonPreemptyProxyAuthWithHttpsTarget() throws IOException, InterruptedException, ExecutionException {
+    public void nonPreemptiveProxyAuthWithHttpsTarget() throws IOException, InterruptedException, ExecutionException {
         try (AsyncHttpClient client = asyncHttpClient(config().setUseInsecureTrustManager(true))) {
             String targetUrl = "https://localhost:" + httpPort + "/foo/bar";
             Request request = get(targetUrl)//

File: client/src/test/java/org/asynchttpclient/test/EchoHandler.java
Patch:
@@ -55,8 +55,9 @@ public void handle(String pathInContext, Request request, HttpServletRequest htt
             param = e.nextElement().toString();
 
             if (param.startsWith("LockThread")) {
+                final int sleepTime = httpRequest.getIntHeader(param);
                 try {
-                    Thread.sleep(40 * 1000);
+                    Thread.sleep(sleepTime == -1 ? 40 : sleepTime * 1000);
                 } catch (InterruptedException ex) {
                 }
             }

File: client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.asynchttpclient;
 
+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;
 import static org.asynchttpclient.util.HttpUtils.*;
 import static org.asynchttpclient.util.MiscUtils.isNonEmpty;
 import io.netty.handler.codec.http.DefaultHttpHeaders;
-import io.netty.handler.codec.http.HttpHeaderNames;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.resolver.DefaultNameResolver;
 import io.netty.resolver.NameResolver;
@@ -560,7 +560,7 @@ private RequestBuilderBase<?> executeSignatureCalculator() {
     private Charset computeCharset() {
         if (this.charset == null) {
             try {
-                final String contentType = this.headers.get(HttpHeaderNames.CONTENT_TYPE);
+                final String contentType = this.headers.get(CONTENT_TYPE);
                 if (contentType != null) {
                     final Charset charset = parseCharset(contentType);
                     if (charset != null) {

File: client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
Patch:
@@ -15,9 +15,9 @@
 
 import static org.asynchttpclient.util.MiscUtils.trimStackTrace;
 import io.netty.bootstrap.Bootstrap;
-import io.netty.bootstrap.ChannelFactory;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.channel.Channel;
+import io.netty.channel.ChannelFactory;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.ChannelPipeline;

File: client/src/main/java/org/asynchttpclient/netty/channel/EpollSocketChannelFactory.java
Patch:
@@ -13,7 +13,7 @@
  */
 package org.asynchttpclient.netty.channel;
 
-import io.netty.bootstrap.ChannelFactory;
+import io.netty.channel.ChannelFactory;
 import io.netty.channel.epoll.EpollSocketChannel;
 
 class EpollSocketChannelFactory implements ChannelFactory<EpollSocketChannel> {

File: client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
Patch:
@@ -83,7 +83,7 @@ private void writeRequest(Channel channel) {
 
         if (LOGGER.isDebugEnabled()) {
             HttpRequest httpRequest = future.getNettyRequest().getHttpRequest();
-            LOGGER.debug("Using new Channel '{}' for '{}' to '{}'", channel, httpRequest.getMethod(), httpRequest.getUri());
+            LOGGER.debug("Using new Channel '{}' for '{}' to '{}'", channel, httpRequest.method(), httpRequest.uri());
         }
 
         Channels.setAttribute(channel, future);

File: client/src/main/java/org/asynchttpclient/netty/channel/NioSocketChannelFactory.java
Patch:
@@ -13,7 +13,7 @@
  */
 package org.asynchttpclient.netty.channel;
 
-import io.netty.bootstrap.ChannelFactory;
+import io.netty.channel.ChannelFactory;
 import io.netty.channel.socket.nio.NioSocketChannel;
 
 enum NioSocketChannelFactory implements ChannelFactory<NioSocketChannel> {

File: client/src/main/java/org/asynchttpclient/netty/handler/HttpHandler.java
Patch:
@@ -21,6 +21,7 @@
 import io.netty.handler.codec.http.HttpObject;
 import io.netty.handler.codec.http.HttpRequest;
 import io.netty.handler.codec.http.HttpResponse;
+import io.netty.handler.codec.http.HttpUtil;
 import io.netty.handler.codec.http.LastHttpContent;
 
 import java.io.IOException;
@@ -77,7 +78,7 @@ private void notifyHandler(Channel channel, NettyResponseFuture<?> future, HttpR
                 exitAfterHandlingReactiveStreams(channel, future, response, handler, httpRequest);
 
         if (exit)
-            finishUpdate(future, channel, HttpHeaders.isTransferEncodingChunked(httpRequest) || HttpHeaders.isTransferEncodingChunked(response));
+            finishUpdate(future, channel, HttpUtil.isTransferEncodingChunked(httpRequest) || HttpUtil.isTransferEncodingChunked(response));
     }
 
     private boolean exitAfterHandlingStatus(//
@@ -173,7 +174,7 @@ public void handleRead(final Channel channel, final NettyResponseFuture<?> futur
         try {
             if (e instanceof HttpObject) {
                 HttpObject object = (HttpObject) e;
-                Throwable t = object.getDecoderResult().cause();
+                Throwable t = object.decoderResult().cause();
                 if (t != null) {
                     readFailed(channel, future, t);
                     return;

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/Interceptors.java
Patch:
@@ -65,7 +65,7 @@ public boolean exitAfterIntercept(//
 
         HttpRequest httpRequest = future.getNettyRequest().getHttpRequest();
         ProxyServer proxyServer = future.getProxyServer();
-        int statusCode = response.getStatus().code();
+        int statusCode = response.status().code();
         Request request = future.getCurrentRequest();
         Realm realm = request.getRealm() != null ? request.getRealm() : config.getRealm();
 
@@ -85,7 +85,7 @@ public boolean exitAfterIntercept(//
         } else if (Redirect30xInterceptor.REDIRECT_STATUSES.contains(statusCode)) {
             return redirect30xInterceptor.exitAfterHandlingRedirect(channel, future, response, request, statusCode, realm);
 
-        } else if (httpRequest.getMethod() == HttpMethod.CONNECT && statusCode == OK_200) {
+        } else if (httpRequest.method() == HttpMethod.CONNECT && statusCode == OK_200) {
             return connectSuccessInterceptor.exitAfterHandlingConnect(channel, future, request, proxyServer, statusCode, httpRequest);
 
         }

File: client/src/main/java/org/asynchttpclient/netty/request/body/NettyBody.java
Patch:
@@ -23,7 +23,7 @@ public interface NettyBody {
 
     long getContentLength();
 
-    String getContentType();
+    CharSequence getContentType();
 
     void write(Channel channel, NettyResponseFuture<?> future) throws IOException;
 }

File: client/src/main/java/org/asynchttpclient/netty/request/body/NettyByteBufferBody.java
Patch:
@@ -21,14 +21,14 @@
 public class NettyByteBufferBody extends NettyDirectBody {
 
     private final ByteBuffer bb;
-    private final String contentType;
+    private final CharSequence contentType;
     private final long length;
 
     public NettyByteBufferBody(ByteBuffer bb) {
         this(bb, null);
     }
 
-    public NettyByteBufferBody(ByteBuffer bb, String contentType) {
+    public NettyByteBufferBody(ByteBuffer bb, CharSequence contentType) {
         this.bb = bb;
         length = bb.remaining();
         bb.mark();
@@ -41,7 +41,7 @@ public long getContentLength() {
     }
 
     @Override
-    public String getContentType() {
+    public CharSequence getContentType() {
         return contentType;
     }
 

File: client/src/main/java/org/asynchttpclient/util/AuthenticatorUtils.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.asynchttpclient.util;
 
-import static io.netty.handler.codec.http.HttpHeaders.Names.PROXY_AUTHORIZATION;
+import static io.netty.handler.codec.http.HttpHeaderNames.PROXY_AUTHORIZATION;
 import static java.nio.charset.StandardCharsets.ISO_8859_1;
 import static org.asynchttpclient.util.HttpUtils.getNonEmptyPath;
 import static org.asynchttpclient.util.MiscUtils.isNonEmpty;

File: client/src/test/java/org/asynchttpclient/AuthTimeoutTest.java
Patch:
@@ -12,11 +12,11 @@
  */
 package org.asynchttpclient;
 
+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.asynchttpclient.Dsl.*;
 import static org.asynchttpclient.test.TestUtils.*;
 import static org.testng.Assert.*;
-import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -73,7 +73,7 @@ public void handle(String s, Request r, HttpServletRequest request, HttpServletR
             OutputStream out = response.getOutputStream();
             if (request.getHeader("X-Content") != null) {
                 String content = request.getHeader("X-Content");
-                response.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(content.getBytes(UTF_8).length));
+                response.setHeader(CONTENT_LENGTH.toString(), String.valueOf(content.getBytes(UTF_8).length));
                 out.write(content.substring(1).getBytes(UTF_8));
             } else {
                 response.setStatus(200);

File: client/src/test/java/org/asynchttpclient/BasicAuthTest.java
Patch:
@@ -15,11 +15,11 @@
  */
 package org.asynchttpclient;
 
+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.asynchttpclient.Dsl.*;
 import static org.asynchttpclient.test.TestUtils.*;
 import static org.testng.Assert.*;
-import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -120,7 +120,7 @@ public void handle(String s, Request r, HttpServletRequest request, HttpServletR
                 LOGGER.info("got redirected" + request.getRequestURI());
                 response.setStatus(200);
                 response.addHeader("X-Auth", request.getHeader("Authorization"));
-                response.addHeader("X-" + HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getContentLength()));
+                response.addHeader("X-" + CONTENT_LENGTH, String.valueOf(request.getContentLength()));
                 byte[] b = "content".getBytes(UTF_8);
                 response.setContentLength(b.length);
                 response.getOutputStream().write(b);
@@ -140,7 +140,7 @@ public void handle(String s, Request r, HttpServletRequest request, HttpServletR
 
             } else {
                 response.addHeader("X-Auth", request.getHeader("Authorization"));
-                response.addHeader("X-" + HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getContentLength()));
+                response.addHeader("X-" + CONTENT_LENGTH, String.valueOf(request.getContentLength()));
                 response.setStatus(200);
 
                 int size = 10 * 1024;

File: client/src/test/java/org/asynchttpclient/BasicHttpProxyToHttpsTest.java
Patch:
@@ -13,7 +13,7 @@
  */
 package org.asynchttpclient;
 
-import static io.netty.handler.codec.http.HttpHeaders.Names.*;
+import static io.netty.handler.codec.http.HttpHeaderNames.*;
 import static org.asynchttpclient.Dsl.*;
 import static org.asynchttpclient.test.TestUtils.*;
 
@@ -66,10 +66,10 @@ public void setUpGlobal() throws Exception {
 
             @Override
             protected boolean handleAuthentication(HttpServletRequest request, HttpServletResponse response, String address) {
-                String authorization = request.getHeader(PROXY_AUTHORIZATION);
+                String authorization = request.getHeader(PROXY_AUTHORIZATION.toString());
                 if (authorization == null) {
                     response.setStatus(HttpServletResponse.SC_PROXY_AUTHENTICATION_REQUIRED);
-                    response.setHeader(PROXY_AUTHENTICATE, "Basic realm=\"Fake Realm\"");
+                    response.setHeader(PROXY_AUTHENTICATE.toString(), "Basic realm=\"Fake Realm\"");
                     return false;
                 } else if (authorization.equals("Basic am9obmRvZTpwYXNz")) {
                     return true;

File: client/src/test/java/org/asynchttpclient/BasicHttpsTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.asynchttpclient;
 
-import static io.netty.handler.codec.http.HttpHeaders.Names.CONTENT_TYPE;
+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.asynchttpclient.Dsl.config;
 import static org.asynchttpclient.test.TestUtils.*;

File: client/src/test/java/org/asynchttpclient/MultipleHeaderTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package org.asynchttpclient;
 
+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;
 import static org.asynchttpclient.Dsl.*;
 import static org.testng.Assert.*;
-import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -160,7 +160,7 @@ public State onStatusReceived(HttpResponseStatus objectHttpResponseStatus) throw
                 public State onHeadersReceived(HttpResponseHeaders response) throws Exception {
                     try {
                         int i = 0;
-                        for (String header : response.getHeaders().getAll(HttpHeaders.Names.CONTENT_LENGTH)) {
+                        for (String header : response.getHeaders().getAll(CONTENT_LENGTH)) {
                             clHeaders[i++] = header;
                         }
                     } finally {

File: client/src/test/java/org/asynchttpclient/RemoteSiteTest.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.asynchttpclient;
 
+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.asynchttpclient.Dsl.*;
 import static org.testng.Assert.*;
-import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.InputStream;
 import java.net.URLEncoder;
@@ -137,7 +137,7 @@ public void asyncFullBodyProperlyRead() throws Exception {
             Response r = client.prepareGet("http://www.typesafe.com/").execute().get();
 
             InputStream stream = r.getResponseBodyAsStream();
-            int contentLength = Integer.valueOf(r.getHeader(HttpHeaders.Names.CONTENT_LENGTH));
+            int contentLength = Integer.valueOf(r.getHeader(CONTENT_LENGTH));
 
             assertEquals(contentLength, IOUtils.toByteArray(stream).length);
         }

File: client/src/test/java/org/asynchttpclient/oauth/OAuthSignatureCalculatorTest.java
Patch:
@@ -13,7 +13,7 @@
  */
 package org.asynchttpclient.oauth;
 
-import static io.netty.handler.codec.http.HttpHeaders.Names.AUTHORIZATION;
+import static io.netty.handler.codec.http.HttpHeaderNames.AUTHORIZATION;
 import static org.asynchttpclient.Dsl.*;
 import static org.testng.Assert.*;
 

File: client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBodyTest.java
Patch:
@@ -17,7 +17,7 @@
 import static org.testng.Assert.*;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
-import io.netty.handler.codec.http.HttpHeaders;
+import io.netty.handler.codec.http.EmptyHttpHeaders;
 
 import java.io.File;
 import java.io.IOException;
@@ -65,7 +65,7 @@ private static File getTestfile() throws URISyntaxException {
     }
 
     private static MultipartBody buildMultipart() {
-        return MultipartUtils.newMultipartBody(PARTS, HttpHeaders.EMPTY_HEADERS);
+        return MultipartUtils.newMultipartBody(PARTS, EmptyHttpHeaders.INSTANCE);
     }
 
     @Test

File: client/src/test/java/org/asynchttpclient/testserver/HttpServer.java
Patch:
@@ -13,8 +13,8 @@
  */
 package org.asynchttpclient.testserver;
 
+import static io.netty.handler.codec.http.HttpHeaderNames.LOCATION;
 import static org.asynchttpclient.test.TestUtils.*;
-import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.Closeable;
 import java.io.IOException;
@@ -93,7 +93,7 @@ public void enqueueEcho() {
     public void enqueueRedirect(int status, String location) {
         enqueueResponse(response -> {
             response.setStatus(status);
-            response.setHeader(HttpHeaders.Names.LOCATION, location);
+            response.setHeader(LOCATION.toString(), location);
         });
     }
 

File: extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java
Patch:
@@ -12,6 +12,7 @@
  */
 package org.asynchttpclient.extras.simple;
 
+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;
 import static org.asynchttpclient.Dsl.*;
 import static org.asynchttpclient.util.MiscUtils.*;
 import io.netty.handler.codec.http.HttpHeaders;
@@ -798,7 +799,7 @@ public State onHeadersReceived(HttpResponseHeaders headers) throws Exception {
         }
 
         private void calculateTotal(HttpResponseHeaders headers) {
-            String length = headers.getHeaders().get(HttpHeaders.Names.CONTENT_LENGTH);
+            String length = headers.getHeaders().get(CONTENT_LENGTH);
 
             try {
                 total = Integer.valueOf(length);

File: client/src/test/java/org/asynchttpclient/test/EchoHandler.java
Patch:
@@ -55,8 +55,9 @@ public void handle(String pathInContext, Request request, HttpServletRequest htt
             param = e.nextElement().toString();
 
             if (param.startsWith("LockThread")) {
+                final int sleepTime = httpRequest.getIntHeader(param);
                 try {
-                    Thread.sleep(40 * 1000);
+                    Thread.sleep(sleepTime == -1 ? 40 : sleepTime * 1000);
                 } catch (InterruptedException ex) {
                 }
             }

File: client/src/test/java/org/asynchttpclient/RealmTest.java
Patch:
@@ -71,7 +71,7 @@ private void testOldDigest(String qop) {
         String ha2 = getMd5(method + ":" + uri.getPath());
         String expectedResponse = getMd5(ha1 + ":" + nonce + ":" + ha2);
 
-        assertEquals(expectedResponse, orig.getResponse());
+        assertEquals(orig.getResponse(), expectedResponse);
     }
 
     @Test(groups = "standalone")
@@ -96,7 +96,7 @@ public void testStrongDigest() {
         String ha2 = getMd5(method + ":" + uri.getPath());
         String expectedResponse = getMd5(ha1 + ":" + nonce + ":" + nc + ":" + cnonce + ":" + qop + ":" + ha2);
 
-        assertEquals(expectedResponse, orig.getResponse());
+        assertEquals(orig.getResponse(), expectedResponse);
     }
 
     private String getMd5(String what) {

File: client/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java
Patch:
@@ -91,12 +91,12 @@ public void runAllSequentiallyBecauseNotThreadSafe() throws Exception {
     public void redirected302Test() throws Exception {
         isSet.getAndSet(false);
         try (AsyncHttpClient c = asyncHttpClient()) {
-            Response response = c.prepareGet(getTargetUrl()).setFollowRedirect(true).setHeader("X-redirect", "http://www.microsoft.com/").execute().get();
+            Response response = c.prepareGet(getTargetUrl()).setFollowRedirect(true).setHeader("X-redirect", "https://www.microsoft.com/").execute().get();
 
             assertNotNull(response);
             assertEquals(response.getStatusCode(), 200);
 
-            String anyMicrosoftPage = "http://www.microsoft.com[^:]*:80";
+            String anyMicrosoftPage = "https://www.microsoft.com[^:]*:443";
             String baseUrl = getBaseUrl(response.getUri());
 
             assertTrue(baseUrl.matches(anyMicrosoftPage), "response does not show redirection to " + anyMicrosoftPage);

File: client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
Patch:
@@ -623,7 +623,7 @@ public static class Builder {
         private boolean acceptAnyCertificate = defaultAcceptAnyCertificate();
         private int handshakeTimeout = defaultHandshakeTimeout();
         private String[] enabledProtocols = defaultEnabledProtocols();
-        private String[] enabledCipherSuites;
+        private String[] enabledCipherSuites = defaultEnabledCipherSuites();
         private int sslSessionCacheSize = defaultSslSessionCacheSize();
         private int sslSessionTimeout = defaultSslSessionTimeout();
         private SslContext sslContext;

File: client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
Patch:
@@ -33,6 +33,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+/**
+ * Default and threadsafe implementation of {@link AsyncHttpClient}.
+ */
 public class DefaultAsyncHttpClient implements AsyncHttpClient {
 
     private final static Logger LOGGER = LoggerFactory.getLogger(DefaultAsyncHttpClient.class);

File: client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
Patch:
@@ -33,6 +33,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+/**
+ * Default and threadsafe implementation of {@link AsyncHttpClient}.
+ */
 public class DefaultAsyncHttpClient implements AsyncHttpClient {
 
     private final static Logger LOGGER = LoggerFactory.getLogger(DefaultAsyncHttpClient.class);

File: client/src/test/java/org/asynchttpclient/AsyncStreamHandlerTest.java
Patch:
@@ -421,7 +421,7 @@ public void asyncOptionsTest() throws Throwable {
 
                 final AtomicReference<HttpHeaders> responseHeaders = new AtomicReference<>();
 
-                final String[] expected = { "GET", "HEAD", "OPTIONS", "POST", "TRACE" };
+                final String[] expected = { "GET", "HEAD", "OPTIONS", "POST" };
                 Future<String> f = client.prepareOptions("http://www.apache.org/").execute(new AsyncHandlerAdapter() {
 
                     @Override

File: client/src/main/java/org/asynchttpclient/netty/channel/DefaultChannelPool.java
Patch:
@@ -224,7 +224,7 @@ public void run(Timeout timeout) throws Exception {
 
             if (LOGGER.isDebugEnabled()) {
                 long duration = unpreciseMillisTime() - start;
-                LOGGER.debug("Closed {} connections out of {} in {}ms", closedCount, totalCount, duration);
+                LOGGER.debug("Closed {} connections out of {} in {} ms", closedCount, totalCount, duration);
             }
 
             scheduleNewIdleChannelDetector(timeout.task());

File: client/src/main/java/org/asynchttpclient/netty/timeout/RequestTimeoutTimerTask.java
Patch:
@@ -43,7 +43,7 @@ public void run(Timeout timeout) throws Exception {
         if (nettyResponseFuture.isDone())
             return;
 
-        String message = "Request timeout to " + timeoutsHolder.remoteAddress() + " after " + requestTimeout + "ms";
+        String message = "Request timeout to " + timeoutsHolder.remoteAddress() + " after " + requestTimeout + " ms";
         long age = unpreciseMillisTime() - nettyResponseFuture.getStart();
         expire(message, age);
     }

File: client/src/main/java/org/asynchttpclient/netty/timeout/TimeoutsHolder.java
Patch:
@@ -71,7 +71,7 @@ public void startReadTimeout() {
     }
 
     void startReadTimeout(ReadTimeoutTimerTask task) {
-        if (requestTimeout == null || (!requestTimeout.isExpired() && readTimeoutValue > (requestTimeoutMillisTime - unpreciseMillisTime()))) {
+        if (requestTimeout == null || (!requestTimeout.isExpired() && readTimeoutValue < (requestTimeoutMillisTime - unpreciseMillisTime()))) {
             // only schedule a new readTimeout if the requestTimeout doesn't happen first
             if (task == null) {
                 // first call triggered from outside (else is read timeout is re-scheduling itself)

File: netty-bp/resolver-dns/src/main/java/io/netty/resolver/dns/DefaultDnsCache.java
Patch:
@@ -16,7 +16,6 @@
 package io.netty.resolver.dns;
 
 import io.netty.channel.EventLoop;
-import io.netty.util.internal.OneTimeTask;
 import io.netty.util.internal.PlatformDependent;
 
 import java.net.InetAddress;
@@ -196,7 +195,7 @@ private void scheduleCacheExpiration(final List<DnsCacheEntry> entries,
                                          final DnsCacheEntry e,
                                          int ttl,
                                          EventLoop loop) {
-        e.scheduleExpiration(loop, new OneTimeTask() {
+        e.scheduleExpiration(loop, new Runnable() {
                     @Override
                     public void run() {
                         synchronized (entries) {

File: client/src/main/java/org/asynchttpclient/netty/handler/WebSocketHandler.java
Patch:
@@ -182,6 +182,7 @@ private void handleFrame(Channel channel, WebSocketFrame frame, WebSocketUpgrade
             Channels.setDiscard(channel);
             CloseWebSocketFrame closeFrame = (CloseWebSocketFrame) frame;
             webSocket.onClose(closeFrame.statusCode(), closeFrame.reasonText());
+            Channels.silentlyCloseChannel(channel);
         } else {
             ByteBuf buf = frame.content();
             if (buf != null && buf.readableBytes() > 0) {
@@ -226,9 +227,9 @@ public void handleChannelInactive(NettyResponseFuture<?> future) {
             WebSocketUpgradeHandler h = (WebSocketUpgradeHandler) future.getAsyncHandler();
             NettyWebSocket webSocket = NettyWebSocket.class.cast(h.onCompleted());
 
-            logger.trace("Connection was closed abnormally (that is, with no close frame being sent).");
+            logger.trace("Connection was closed abnormally (that is, with no close frame being received).");
             if (webSocket != null)
-                webSocket.close(1006, "Connection was closed abnormally (that is, with no close frame being sent).");
+                webSocket.close(1006, "Connection was closed abnormally (that is, with no close frame being received).");
         } catch (Throwable t) {
             logger.error("onError", t);
         }

File: client/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java
Patch:
@@ -16,7 +16,6 @@
 import static io.netty.buffer.Unpooled.wrappedBuffer;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import io.netty.channel.Channel;
-import io.netty.channel.ChannelFutureListener;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;
 import io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;
@@ -135,7 +134,7 @@ public boolean isOpen() {
     @Override
     public void close() {
         if (channel.isOpen()) {
-            channel.writeAndFlush(new CloseWebSocketFrame()).addListener(ChannelFutureListener.CLOSE);
+            channel.writeAndFlush(new CloseWebSocketFrame(1000, "normal closure"));
         }
     }
 

File: client/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
Patch:
@@ -47,7 +47,7 @@ public void onCloseWithCode() throws Exception {
             websocket.close();
 
             latch.await();
-            assertTrue(text.get().startsWith("1000"));
+            assertTrue(text.get().startsWith("1000"), "Expected a 1000 code but got " + text.get());
         }
     }
 

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -491,7 +491,7 @@ private Channel pollPooledChannel(Request request, ProxyServer proxy, AsyncHandl
         final Channel channel = channelManager.poll(uri, virtualHost, proxy, request.getChannelPoolPartitioning());
 
         if (channel != null) {
-            LOGGER.debug("Using polled Channel {}\n for uri {}\n", channel, uri);
+            LOGGER.debug("Using pooled Channel '{}' for '{}' to '{}'", channel, request.getMethod(), uri);
         }
         return channel;
     }

File: client/src/main/java/org/asynchttpclient/request/body/multipart/part/FileLikeMultipartPart.java
Patch:
@@ -1,6 +1,6 @@
 package org.asynchttpclient.request.body.multipart.part;
 
-import static java.nio.charset.StandardCharsets.US_ASCII;
+import static java.nio.charset.StandardCharsets.*;
 
 import org.asynchttpclient.request.body.multipart.FileLikePart;
 
@@ -20,7 +20,7 @@ protected void visitDispositionHeader(PartVisitor visitor) {
         if (part.getFileName() != null) {
             visitor.withBytes(FILE_NAME_BYTES);
             visitor.withByte(QUOTE_BYTE);
-            visitor.withBytes(part.getFileName().getBytes(part.getCharset() != null ? part.getCharset() : US_ASCII));
+            visitor.withBytes(part.getFileName().getBytes(part.getCharset() != null ? part.getCharset() : UTF_8));
             visitor.withByte(QUOTE_BYTE);
         }
     }

File: client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
Patch:
@@ -111,10 +111,11 @@ public class ChannelManager {
     public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {
 
         this.config = config;
+        this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
         try {
-            this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory(config);
+            this.sslEngineFactory.init(config);
         } catch (SSLException e) {
-            throw new ExceptionInInitializerError(e);
+            throw new RuntimeException("Could not initialize sslEngineFactory", e);
         }
 
         ChannelPool channelPool = config.getChannelPool();

File: client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
Patch:
@@ -111,10 +111,11 @@ public class ChannelManager {
     public ChannelManager(final AsyncHttpClientConfig config, Timer nettyTimer) {
 
         this.config = config;
+        this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory();
         try {
-            this.sslEngineFactory = config.getSslEngineFactory() != null ? config.getSslEngineFactory() : new DefaultSslEngineFactory(config);
+            this.sslEngineFactory.init(config);
         } catch (SSLException e) {
-            throw new ExceptionInInitializerError(e);
+            throw new RuntimeException("Could not initialize sslEngineFactory", e);
         }
 
         ChannelPool channelPool = config.getChannelPool();

File: client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
Patch:
@@ -52,7 +52,7 @@ public void testStreamingPutImage() throws Exception {
         }
     }
 
-    @Test(groups = "standalone")
+    @Test(groups = "standalone", enabled = false)
     public void testConnectionDoesNotGetClosed() throws Exception {
         // test that we can stream the same request multiple times
         try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {

File: client/src/test/java/org/asynchttpclient/ListenableFutureTest.java
Patch:
@@ -60,7 +60,7 @@ public void testListenableFutureAfterCompletion() throws Exception {
             future.get();
             future.addListener(() -> counter.decrementAndGet(), Runnable::run);
         }
-        assertEquals(0, counter.get());
+        assertEquals(counter.get(), 0);
     }
 
     @Test(groups = "standalone")
@@ -76,6 +76,6 @@ public void testListenableFutureBeforeAndAfterCompletion() throws Exception {
             future.get();
             future.addListener(() -> counter.decrementAndGet(), Runnable::run);
         }
-        assertEquals(0, counter.get());
+        assertEquals(counter.get(), 0);
     }
 }

File: client/src/main/java/org/asynchttpclient/future/AbstractListenableFuture.java
Patch:
@@ -78,7 +78,7 @@ public ListenableFuture<V> addListener(Runnable listener, Executor exec) {
     protected void runListeners() {
         hasRun = true;
         if (executionListInitialized) {
-            executionList().run();
+            executionList().execute();
         }
     }
 }

File: netty-bp/resolver/src/test/java/io/netty/resolver/HostsFileParserTest.java
Patch:
@@ -44,7 +44,7 @@ public void testParse() throws IOException {
 
         Map<String, InetAddress> entries = HostsFileParser.parse(new BufferedReader(new StringReader(hostsString)));
 
-        assertEquals("Expected 6 entries", 6, entries.size());
+        assertEquals("Expected 7 entries", 7, entries.size());
         assertEquals("127.0.0.1", entries.get("host1").getHostAddress());
         assertEquals("192.168.0.1", entries.get("host2").getHostAddress());
         assertEquals("192.168.0.2", entries.get("host3").getHostAddress());

File: client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
Patch:
@@ -425,7 +425,7 @@ public boolean reuseChannel() {
         return reuseChannel;
     }
 
-    public boolean canRetry() {
+    public boolean incRetryAndCheck() {
         return maxRetry > 0 && CURRENT_RETRY_UPDATER.incrementAndGet(this) <= maxRetry;
     }
 
@@ -444,7 +444,7 @@ public void setCurrentRequest(Request currentRequest) {
      * @return true if that {@link Future} cannot be recovered.
      */
     public boolean canBeReplayed() {
-        return !isDone() && canRetry() && !(Channels.isChannelValid(channel) && !getUri().getScheme().equalsIgnoreCase("https")) && !inAuth.get() && !inProxyAuth.get();
+        return !isDone() && !(Channels.isChannelValid(channel) && !getUri().getScheme().equalsIgnoreCase("https")) && !inAuth.get() && !inProxyAuth.get();
     }
 
     public long getStart() {

File: client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
Patch:
@@ -120,7 +120,7 @@ public void onFailure(Channel channel, Throwable cause) {
         //beware, channel can be null
         abortChannelPreemption();
 
-        boolean canRetry = future.canRetry();
+        boolean canRetry = future.incRetryAndCheck();
         LOGGER.debug("Trying to recover from failing to connect channel {} with a retry value of {} ", channel, canRetry);
         if (canRetry//
                 && cause != null // FIXME when can we have a null cause?

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -396,7 +396,7 @@ public void abort(Channel channel, NettyResponseFuture<?> future, Throwable t) {
     public void handleUnexpectedClosedChannel(Channel channel, NettyResponseFuture<?> future) {
         if (future.isDone()) {
             channelManager.closeChannel(channel);
-        } else if (retry(future)) {
+        } else if (future.incRetryAndCheck() && retry(future)) {
             future.pendingException = null;
         } else {
             abort(channel, future, future.pendingException != null ? future.pendingException : RemotelyClosedException.INSTANCE);
@@ -447,7 +447,7 @@ public boolean applyIoExceptionFiltersAndReplayRequest(NettyResponseFuture<?> fu
             }
         }
 
-        if (fc.replayRequest() && future.canBeReplayed()) {
+        if (fc.replayRequest() && future.canBeReplayed() && future.incRetryAndCheck()) {
             replayRequest(future, fc, channel);
             replayed = true;
         }

File: client/src/main/java/org/asynchttpclient/netty/NettyResponseFuture.java
Patch:
@@ -425,7 +425,7 @@ public boolean reuseChannel() {
         return reuseChannel;
     }
 
-    public boolean canRetry() {
+    public boolean incRetryAndCheck() {
         return maxRetry > 0 && CURRENT_RETRY_UPDATER.incrementAndGet(this) <= maxRetry;
     }
 
@@ -444,7 +444,7 @@ public void setCurrentRequest(Request currentRequest) {
      * @return true if that {@link Future} cannot be recovered.
      */
     public boolean canBeReplayed() {
-        return !isDone() && canRetry() && !(Channels.isChannelValid(channel) && !getUri().getScheme().equalsIgnoreCase("https")) && !inAuth.get() && !inProxyAuth.get();
+        return !isDone() && !(Channels.isChannelValid(channel) && !getUri().getScheme().equalsIgnoreCase("https")) && !inAuth.get() && !inProxyAuth.get();
     }
 
     public long getStart() {

File: client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
Patch:
@@ -120,7 +120,7 @@ public void onFailure(Channel channel, Throwable cause) {
         //beware, channel can be null
         abortChannelPreemption();
 
-        boolean canRetry = future.canRetry();
+        boolean canRetry = future.incRetryAndCheck();
         LOGGER.debug("Trying to recover from failing to connect channel {} with a retry value of {} ", channel, canRetry);
         if (canRetry//
                 && cause != null // FIXME when can we have a null cause?

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -396,7 +396,7 @@ public void abort(Channel channel, NettyResponseFuture<?> future, Throwable t) {
     public void handleUnexpectedClosedChannel(Channel channel, NettyResponseFuture<?> future) {
         if (future.isDone()) {
             channelManager.closeChannel(channel);
-        } else if (retry(future)) {
+        } else if (future.incRetryAndCheck() && retry(future)) {
             future.pendingException = null;
         } else {
             abort(channel, future, future.pendingException != null ? future.pendingException : RemotelyClosedException.INSTANCE);
@@ -447,7 +447,7 @@ public boolean applyIoExceptionFiltersAndReplayRequest(NettyResponseFuture<?> fu
             }
         }
 
-        if (fc.replayRequest() && future.canBeReplayed()) {
+        if (fc.replayRequest() && future.canBeReplayed() && future.incRetryAndCheck()) {
             replayRequest(future, fc, channel);
             replayed = true;
         }

File: client/src/main/java/org/asynchttpclient/request/body/multipart/part/MultipartPart.java
Patch:
@@ -191,7 +191,7 @@ protected long transfer(ByteBuf source, ByteBuf target, MultipartState sourceFul
             state = sourceFullyWrittenState;
             return sourceRemaining;
         } else {
-            target.writeBytes(source, targetRemaining - sourceRemaining);
+            target.writeBytes(source, targetRemaining);
             return targetRemaining;
         }
     }

File: client/src/test/java/org/asynchttpclient/test/TestUtils.java
Patch:
@@ -105,7 +105,7 @@ public static synchronized int findFreePort() throws IOException {
         }
     }
 
-    private static File resourceAsFile(String path) throws URISyntaxException, IOException {
+    public static File resourceAsFile(String path) throws URISyntaxException, IOException {
         ClassLoader cl = TestUtils.class.getClassLoader();
         URI uri = cl.getResource(path).toURI();
         if (uri.isAbsolute() && !uri.isOpaque()) {

File: client/src/main/java/org/asynchttpclient/request/body/multipart/part/FileMultipartPart.java
Patch:
@@ -59,7 +59,9 @@ protected long transferContentTo(ByteBuf target) throws IOException {
 
     @Override
     protected long transferContentTo(WritableByteChannel target) throws IOException {
-        long transferred = channel.transferTo(channel.position(), BodyChunkedInput.DEFAULT_CHUNK_SIZE, target);
+        // WARN: don't use channel.position(), it's always 0 here
+        // from FileChannel javadoc: "This method does not modify this channel's position."
+        long transferred = channel.transferTo(position, BodyChunkedInput.DEFAULT_CHUNK_SIZE, target);
         position += transferred;
         if (position == length) {
             state = MultipartState.POST_CONTENT;

File: client/src/main/java/org/asynchttpclient/request/body/multipart/ByteArrayPart.java
Patch:
@@ -41,9 +41,8 @@ public ByteArrayPart(String name, byte[] bytes, String contentType, Charset char
     }
 
     public ByteArrayPart(String name, byte[] bytes, String contentType, Charset charset, String fileName, String contentId, String transferEncoding) {
-        super(name, contentType, charset, contentId, transferEncoding);
+        super(name, contentType, charset, fileName, contentId, transferEncoding);
         this.bytes = assertNotNull(bytes, "bytes");
-        setFileName(fileName);
     }
 
     public byte[] getBytes() {

File: client/src/main/java/org/asynchttpclient/request/body/multipart/part/FileMultipartPart.java
Patch:
@@ -25,7 +25,7 @@
 import org.asynchttpclient.netty.request.body.BodyChunkedInput;
 import org.asynchttpclient.request.body.multipart.FilePart;
 
-public class FileMultipartPart extends MultipartPart<FilePart> {
+public class FileMultipartPart extends FileLikeMultipartPart<FilePart> {
 
     private final FileChannel channel;
     private final long length;

File: client/src/test/java/org/asynchttpclient/request/body/multipart/part/MultipartPartTest.java
Patch:
@@ -202,16 +202,15 @@ public TestFileLikePart(String name, String contentType, Charset charset, String
 
         public TestFileLikePart(String name, String contentType, Charset charset, String contentId, String transfertEncoding,
                 String fileName) {
-            super(name, contentType, charset, contentId, transfertEncoding);
-            setFileName(fileName);
+            super(name, contentType, charset, fileName, contentId, transfertEncoding);
         }
     }
 
     /**
      * Concrete implementation of MultipartPart for use in unit tests.
      *
      */
-    private class TestMultipartPart extends MultipartPart<TestFileLikePart> {
+    private class TestMultipartPart extends FileLikeMultipartPart<TestFileLikePart> {
 
         public TestMultipartPart(TestFileLikePart part, byte[] boundary) {
             super(part, boundary);

File: client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -252,7 +252,8 @@ public void resetCookies() {
 
     public void resetQuery() {
         queryParams = null;
-        this.uri = this.uri.withNewQuery(null);
+        if (this.uri != null)
+            this.uri = this.uri.withNewQuery(null);
     }
 
     public void resetFormParams() {
@@ -344,7 +345,7 @@ public T setQueryParams(Map<String, List<String>> map) {
 
     public T setQueryParams(List<Param> params) {
         // reset existing query
-        if (isNonEmpty(this.uri.getQuery()))
+        if (this.uri != null && isNonEmpty(this.uri.getQuery()))
             this.uri = this.uri.withNewQuery(null);
         queryParams = params;
         return asDerivedType();

File: client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -252,7 +252,8 @@ public void resetCookies() {
 
     public void resetQuery() {
         queryParams = null;
-        this.uri = this.uri.withNewQuery(null);
+        if (this.uri != null)
+            this.uri = this.uri.withNewQuery(null);
     }
 
     public void resetFormParams() {
@@ -344,7 +345,7 @@ public T setQueryParams(Map<String, List<String>> map) {
 
     public T setQueryParams(List<Param> params) {
         // reset existing query
-        if (isNonEmpty(this.uri.getQuery()))
+        if (this.uri != null && isNonEmpty(this.uri.getQuery()))
             this.uri = this.uri.withNewQuery(null);
         queryParams = params;
         return asDerivedType();

File: client/src/main/java/org/asynchttpclient/request/body/multipart/StringPart.java
Patch:
@@ -12,7 +12,7 @@
  */
 package org.asynchttpclient.request.body.multipart;
 
-import static java.nio.charset.StandardCharsets.US_ASCII;
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.asynchttpclient.util.Assertions.assertNotNull;
 import static org.asynchttpclient.util.MiscUtils.withDefault;
 
@@ -28,7 +28,7 @@ public class StringPart extends PartBase {
     /**
      * Default charset of string parameters
      */
-    public static final Charset DEFAULT_CHARSET = US_ASCII;
+    public static final Charset DEFAULT_CHARSET = UTF_8;
 
     /**
      * Default transfer encoding of string parameters

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/Unauthorized401Interceptor.java
Patch:
@@ -15,6 +15,7 @@
 
 import static org.asynchttpclient.Dsl.realm;
 import static org.asynchttpclient.util.AuthenticatorUtils.*;
+import static org.asynchttpclient.util.MiscUtils.withDefault;
 import io.netty.channel.Channel;
 import io.netty.handler.codec.http.DefaultHttpHeaders;
 import io.netty.handler.codec.http.HttpHeaders;
@@ -212,7 +213,7 @@ private void kerberosChallenge(Channel channel,//
             NettyResponseFuture<?> future) throws SpnegoEngineException {
 
         Uri uri = request.getUri();
-        String host = request.getVirtualHost() == null ? uri.getHost() : request.getVirtualHost();
+        String host = withDefault(request.getVirtualHost(), uri.getHost());
         String challengeHeader = SpnegoEngine.instance().generateToken(host);
         headers.set(HttpHeaders.Names.AUTHORIZATION, NEGOTIATE + " " + challengeHeader);
     }

File: client/src/main/java/org/asynchttpclient/util/MiscUtils.java
Patch:
@@ -47,8 +47,8 @@ public static boolean getBoolean(String systemPropName, boolean defaultValue) {
         return systemPropValue != null ? systemPropValue.equalsIgnoreCase("true") : defaultValue;
     }
 
-    public static <T> T withDefault(T value, T defaults) {
-        return value != null ? value : value;
+    public static <T> T withDefault(T value, T def) {
+        return value == null ? def : value;
     }
 
     public static void closeSilently(Closeable closeable) {

File: extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java
Patch:
@@ -13,7 +13,7 @@
 package org.asynchttpclient.extras.simple;
 
 import static org.asynchttpclient.Dsl.*;
-import static org.asynchttpclient.util.MiscUtils.closeSilently;
+import static org.asynchttpclient.util.MiscUtils.*;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.ssl.SslContext;
 
@@ -660,7 +660,7 @@ public SimpleAsyncHttpClient build() {
             if (proxyHost != null) {
                 Realm realm = null;
                 if (proxyPrincipal != null) {
-                    AuthScheme proxyAuthScheme = this.proxyAuthScheme == null ? AuthScheme.BASIC : this.proxyAuthScheme;
+                    AuthScheme proxyAuthScheme = withDefault(this.proxyAuthScheme, AuthScheme.BASIC);
                     realm = realm(proxyAuthScheme, proxyPrincipal, proxyPassword).build();
                 }
 

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/ProxyUnauthorized407Interceptor.java
Patch:
@@ -14,7 +14,7 @@
 package org.asynchttpclient.netty.handler.intercept;
 
 import static org.asynchttpclient.Dsl.realm;
-import static org.asynchttpclient.util.AuthenticatorUtils.getHeaderWithPrefix;
+import static org.asynchttpclient.util.AuthenticatorUtils.*;
 import static org.asynchttpclient.util.HttpConstants.Methods.CONNECT;
 import io.netty.channel.Channel;
 import io.netty.handler.codec.http.DefaultHttpHeaders;
@@ -137,7 +137,7 @@ public boolean exitAfterHandling407(//
 
         case KERBEROS:
         case SPNEGO:
-            if (getHeaderWithPrefix(proxyAuthHeaders, "Negociate") == null) {
+            if (getHeaderWithPrefix(proxyAuthHeaders, NEGOTIATE) == null) {
                 LOGGER.info("Can't handle 407 with Kerberos or Spnego realm as Proxy-Authenticate headers don't match");
                 return false;
             }
@@ -195,7 +195,7 @@ private void kerberosProxyChallenge(Channel channel,//
             NettyResponseFuture<?> future) throws SpnegoEngineException {
 
         String challengeHeader = SpnegoEngine.instance().generateToken(proxyServer.getHost());
-        headers.set(HttpHeaders.Names.PROXY_AUTHORIZATION, "Negotiate " + challengeHeader);
+        headers.set(HttpHeaders.Names.PROXY_AUTHORIZATION, NEGOTIATE + " " + challengeHeader);
     }
 
     private void ntlmProxyChallenge(String authenticateHeader,//

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/Unauthorized401Interceptor.java
Patch:
@@ -14,7 +14,7 @@
 package org.asynchttpclient.netty.handler.intercept;
 
 import static org.asynchttpclient.Dsl.realm;
-import static org.asynchttpclient.util.AuthenticatorUtils.getHeaderWithPrefix;
+import static org.asynchttpclient.util.AuthenticatorUtils.*;
 import io.netty.channel.Channel;
 import io.netty.handler.codec.http.DefaultHttpHeaders;
 import io.netty.handler.codec.http.HttpHeaders;
@@ -137,7 +137,7 @@ public boolean exitAfterHandling401(//
 
         case KERBEROS:
         case SPNEGO:
-            if (getHeaderWithPrefix(wwwAuthHeaders, "Negociate") == null) {
+            if (getHeaderWithPrefix(wwwAuthHeaders, NEGOTIATE) == null) {
                 LOGGER.info("Can't handle 401 with Kerberos or Spnego realm as WWW-Authenticate headers don't match");
                 return false;
             }
@@ -214,6 +214,6 @@ private void kerberosChallenge(Channel channel,//
         Uri uri = request.getUri();
         String host = request.getVirtualHost() == null ? uri.getHost() : request.getVirtualHost();
         String challengeHeader = SpnegoEngine.instance().generateToken(host);
-        headers.set(HttpHeaders.Names.AUTHORIZATION, "Negotiate " + challengeHeader);
+        headers.set(HttpHeaders.Names.AUTHORIZATION, NEGOTIATE + " " + challengeHeader);
     }
 }

File: client/src/main/java/org/asynchttpclient/util/AuthenticatorUtils.java
Patch:
@@ -28,6 +28,8 @@
 import org.asynchttpclient.uri.Uri;
 
 public final class AuthenticatorUtils {
+    
+    public static final String NEGOTIATE = "Negotiate";
 
     private static final String PROXY_AUTHORIZATION_HEADER = "Proxy-Authorization";
 
@@ -173,7 +175,7 @@ else if (request.getVirtualHost() != null)
                     host = request.getUri().getHost();
 
                 try {
-                    authorizationHeader = "Negotiate " + SpnegoEngine.instance().generateToken(host);
+                    authorizationHeader = NEGOTIATE + " " + SpnegoEngine.instance().generateToken(host);
                 } catch (SpnegoEngineException e) {
                     throw new RuntimeException(e);
                 }

File: client/src/main/java/org/asynchttpclient/DefaultAsyncHttpClientConfig.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.concurrent.ThreadFactory;
 
 import org.asynchttpclient.channel.ChannelPool;
+import org.asynchttpclient.channel.DefaultKeepAliveStrategy;
 import org.asynchttpclient.channel.KeepAliveStrategy;
 import org.asynchttpclient.filter.IOExceptionFilter;
 import org.asynchttpclient.filter.RequestFilter;
@@ -561,7 +562,7 @@ public static class Builder {
         private int maxConnections = defaultMaxConnections();
         private int maxConnectionsPerHost = defaultMaxConnectionsPerHost();
         private ChannelPool channelPool;
-        private KeepAliveStrategy keepAliveStrategy = KeepAliveStrategy.DefaultKeepAliveStrategy.INSTANCE;
+        private KeepAliveStrategy keepAliveStrategy = new DefaultKeepAliveStrategy();
 
         // ssl
         private boolean useOpenSsl = defaultUseOpenSsl();

File: client/src/main/java/org/asynchttpclient/netty/handler/intercept/Unauthorized401Interceptor.java
Patch:
@@ -169,8 +169,6 @@ public boolean exitAfterHandling401(//
 
         LOGGER.debug("Sending authentication to {}", request.getUri());
         if (future.isKeepAlive()//
-                && HttpHeaders.isKeepAlive(httpRequest)//
-                && HttpHeaders.isKeepAlive(response)//
                 && !HttpHeaders.isTransferEncodingChunked(httpRequest)//
                 && !HttpHeaders.isTransferEncodingChunked(response)) {
             future.setReuseChannel(true);

File: client/src/test/java/org/asynchttpclient/PerRequestTimeoutTest.java
Patch:
@@ -44,9 +44,9 @@ public class PerRequestTimeoutTest extends AbstractBasicTest {
     private static final String MSG = "Enough is enough.";
 
     private void checkTimeoutMessage(String message) {
-        assertTrue(message.startsWith("Request timed out"), "error message indicates reason of error");
-        assertTrue(message.contains("localhost"), "error message contains remote ip address");
-        assertTrue(message.contains("of 100 ms"), "error message contains timeout configuration value");
+        assertTrue(message.startsWith("Request timeout"), "error message indicates reason of error but got: " + message);
+        assertTrue(message.contains("localhost"), "error message contains remote host address but got: " + message);
+        assertTrue(message.contains("after 100ms"), "error message contains timeout configuration value but got: " + message);
     }
 
     @Override

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -395,7 +395,6 @@ public void abort(Channel channel, NettyResponseFuture<?> future, Throwable t) {
     public void handleUnexpectedClosedChannel(Channel channel, NettyResponseFuture<?> future) {
         if (future.isDone())
             channelManager.closeChannel(channel);
-
         else if (!retry(future))
             abort(channel, future, RemotelyClosedException.INSTANCE);
     }
@@ -406,6 +405,7 @@ public boolean retry(NettyResponseFuture<?> future) {
             return false;
 
         if (future.canBeReplayed()) {
+            // FIXME should we set future.setReuseChannel(false); ?
             future.setChannelState(ChannelState.RECONNECTED);
             future.getAndSetStatusReceived(false);
 
@@ -451,6 +451,8 @@ public boolean applyIoExceptionFiltersAndReplayRequest(NettyResponseFuture<?> fu
     }
 
     public <T> void sendNextRequest(final Request request, final NettyResponseFuture<T> future) {
+        // remove attribute in case the channel gets closed so it doesn't try to recover the previous future
+        Channels.setAttribute(future.channel(), null);
         sendRequest(request, future.getAsyncHandler(), future, true);
     }
 

File: client/src/main/java/org/asynchttpclient/netty/timeout/ReadTimeoutTimerTask.java
Patch:
@@ -52,7 +52,7 @@ public void run(Timeout timeout) throws Exception {
 
         if (durationBeforeCurrentReadTimeout <= 0L) {
             // idleConnectTimeout reached
-            String message = "Read timeout to " + remoteAddress + " of " + readTimeout + " ms";
+            String message = "Read timeout to " + remoteAddress + " after " + readTimeout + " ms";
             long durationSinceLastTouch = now - nettyResponseFuture.getLastTouch();
             expire(message, durationSinceLastTouch);
             // cancel request timeout sibling

File: client/src/main/java/org/asynchttpclient/netty/timeout/RequestTimeoutTimerTask.java
Patch:
@@ -43,7 +43,7 @@ public void run(Timeout timeout) throws Exception {
         if (nettyResponseFuture.isDone())
             return;
 
-        String message = "Request timed out to " + remoteAddress + " of " + requestTimeout + " ms";
+        String message = "Request timeout to " + remoteAddress + " after " + requestTimeout + "ms";
         long age = millisTime() - nettyResponseFuture.getStart();
         expire(message, age);
     }

File: client/src/main/java/org/asynchttpclient/request/body/generator/BlockingFeedableBodyGenerator.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.concurrent.BlockingQueue;
 
 public final class BlockingFeedableBodyGenerator extends QueueBasedFeedableBodyGenerator<BlockingQueue<BodyChunk>> {
-    private final BlockingQueue<BodyChunk> queue;
+    private final ArrayBlockingQueue<BodyChunk> queue;
 
     public BlockingFeedableBodyGenerator(int capacity) {
         queue = new ArrayBlockingQueue<>(capacity);

File: client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java
Patch:
@@ -48,7 +48,6 @@ public ByteBuf readChunk(ChannelHandlerContext ctx) throws Exception {
             return null;
 
         ByteBuf buffer = ctx.alloc().buffer(chunkSize);
-
         Body.BodyState state = body.transferTo(buffer);
         switch (state) {
         case STOP:

File: client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
Patch:
@@ -29,8 +29,8 @@
 import org.asynchttpclient.request.body.Body;
 import org.asynchttpclient.request.body.RandomAccessBody;
 import org.asynchttpclient.request.body.generator.BodyGenerator;
+import org.asynchttpclient.request.body.generator.FeedListener;
 import org.asynchttpclient.request.body.generator.FeedableBodyGenerator;
-import org.asynchttpclient.request.body.generator.FeedableBodyGenerator.FeedListener;
 import org.asynchttpclient.request.body.generator.ReactiveStreamsBodyGenerator;
 
 public class NettyBodyBody implements NettyBody {

File: client/src/main/java/org/asynchttpclient/request/body/generator/BlockingFeedableBodyGenerator.java
Patch:
@@ -17,8 +17,6 @@
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.BlockingQueue;
 
-import org.asynchttpclient.request.body.generator.QueueBasedFeedableBodyGenerator.BodyChunk;
-
 public final class BlockingFeedableBodyGenerator extends QueueBasedFeedableBodyGenerator<BlockingQueue<BodyChunk>> {
     private final BlockingQueue<BodyChunk> queue;
 
@@ -33,7 +31,7 @@ protected boolean offer(BodyChunk chunk) throws InterruptedException {
     }
 
     @Override
-    protected Queue<org.asynchttpclient.request.body.generator.QueueBasedFeedableBodyGenerator.BodyChunk> queue() {
+    protected Queue<org.asynchttpclient.request.body.generator.BodyChunk> queue() {
         return queue;
     }
 }

File: client/src/main/java/org/asynchttpclient/request/body/generator/UnboundedFeedableBodyGenerator.java
Patch:
@@ -16,8 +16,6 @@
 import java.util.Queue;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
-import org.asynchttpclient.request.body.generator.QueueBasedFeedableBodyGenerator.BodyChunk;
-
 public final class UnboundedFeedableBodyGenerator extends QueueBasedFeedableBodyGenerator<ConcurrentLinkedQueue<BodyChunk>> {
     private final Queue<BodyChunk> queue = new ConcurrentLinkedQueue<>();
 
@@ -27,7 +25,7 @@ protected boolean offer(BodyChunk chunk) throws Exception {
     }
 
     @Override
-    protected Queue<org.asynchttpclient.request.body.generator.QueueBasedFeedableBodyGenerator.BodyChunk> queue() {
+    protected Queue<org.asynchttpclient.request.body.generator.BodyChunk> queue() {
         return queue;
     }
 }

File: client/src/test/java/org/asynchttpclient/request/body/generator/FeedableBodyGeneratorTest.java
Patch:
@@ -73,7 +73,7 @@ private byte[] readFromBody(Body body) throws IOException {
         return readBytes;
     }
 
-    private static class TestFeedListener implements UnboundedFeedableBodyGenerator.FeedListener {
+    private static class TestFeedListener implements FeedListener {
 
         private int calls;
 

File: client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java
Patch:
@@ -15,6 +15,7 @@
 
 import static org.asynchttpclient.util.Assertions.assertNotNull;
 import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufAllocator;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.stream.ChunkedInput;
 
@@ -47,7 +48,7 @@ public ByteBuf readChunk(ChannelHandlerContext ctx) throws Exception {
         if (endOfInput)
             return null;
 
-        ByteBuf buffer = ctx.alloc().buffer(chunkSize);
+        ByteBuf buffer = ByteBufAllocator.DEFAULT.buffer(chunkSize);
         Body.BodyState state = body.transferTo(buffer);
         switch (state) {
             case STOP:

File: client/src/main/java/org/asynchttpclient/Realm.java
Patch:
@@ -101,7 +101,6 @@ public String getPassword() {
     }
 
     public AuthScheme getScheme() {
-
         return scheme;
     }
 

File: client/src/main/java/org/asynchttpclient/handler/AsyncHandlerExtensions.java
Patch:
@@ -60,7 +60,7 @@ public interface AsyncHandlerExtensions {
      * 
      * @param remoteAddress the address we try to connect to
      */
-    void onTcpConnect(InetSocketAddress remoteAddress);
+    void onTcpConnectAttempt(InetSocketAddress remoteAddress);
 
     /**
      * Notify the callback after a successful connect
@@ -85,7 +85,7 @@ public interface AsyncHandlerExtensions {
     /**
      * Notify the callback before TLS handshake
      */
-    void onTlsHandshake();
+    void onTlsHandshakeAttempt();
 
     /**
      * Notify the callback after the TLS was successful
@@ -104,7 +104,7 @@ public interface AsyncHandlerExtensions {
     /**
      * Notify the callback when trying to fetch a connection from the pool.
      */
-    void onConnectionPool();
+    void onConnectionPoolAttempt();
 
     /**
      * Notify the callback when a new connection was successfully fetched from the pool.

File: client/src/main/java/org/asynchttpclient/handler/ExtendedAsyncHandler.java
Patch:
@@ -36,7 +36,7 @@ public void onHostnameResolutionFailure(String name, Throwable cause) {
     }
 
     @Override
-    public void onTcpConnect(InetSocketAddress address) {
+    public void onTcpConnectAttempt(InetSocketAddress address) {
     }
 
     @Override
@@ -48,7 +48,7 @@ public void onTcpConnectFailure(InetSocketAddress remoteAddress, Throwable cause
     }
 
     @Override
-    public void onTlsHandshake() {
+    public void onTlsHandshakeAttempt() {
     }
 
     @Override
@@ -60,7 +60,7 @@ public void onTlsHandshakeFailure(Throwable cause) {
     }
 
     @Override
-    public void onConnectionPool() {
+    public void onConnectionPoolAttempt() {
     }
 
     @Override

File: client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
Patch:
@@ -90,7 +90,7 @@ public void onSuccess(Channel channel) throws Exception {
             final AsyncHandlerExtensions asyncHandlerExtensions = toAsyncHandlerExtensions(future.getAsyncHandler());
 
             if (asyncHandlerExtensions != null)
-                asyncHandlerExtensions.onTlsHandshake();
+                asyncHandlerExtensions.onTlsHandshakeAttempt();
 
             sslHandler.handshakeFuture().addListener(new SimpleGenericFutureListener<Channel>() {
 

File: client/src/main/java/org/asynchttpclient/netty/request/NettyChannelConnector.java
Patch:
@@ -48,7 +48,7 @@ public void connect(final Bootstrap bootstrap, final NettyConnectListener<?> con
         final InetSocketAddress remoteAddress = remoteAddresses.get(i);
         
         if (asyncHandlerExtensions != null)
-            asyncHandlerExtensions.onTcpConnect(remoteAddress);
+            asyncHandlerExtensions.onTcpConnectAttempt(remoteAddress);
 
         final ChannelFuture future = localAddress != null ? bootstrap.connect(remoteAddress, localAddress) : bootstrap.connect(remoteAddress);
 

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -470,7 +470,7 @@ else if (!request.getMethod().equals(GET))
     private Channel pollPooledChannel(Request request, ProxyServer proxy, AsyncHandler<?> asyncHandler) {
 
         if (asyncHandler instanceof AsyncHandlerExtensions)
-            AsyncHandlerExtensions.class.cast(asyncHandler).onConnectionPool();
+            AsyncHandlerExtensions.class.cast(asyncHandler).onConnectionPoolAttempt();
 
         Uri uri = request.getUri();
         String virtualHost = request.getVirtualHost();

File: client/src/main/java/org/asynchttpclient/netty/ssl/JsseSslEngineFactory.java
Patch:
@@ -32,5 +32,4 @@ public SSLEngine newSslEngine(AsyncHttpClientConfig config, String peerHost, int
         configureSslEngine(sslEngine, config);
         return sslEngine;
     }
-
 }

File: client/src/test/java/org/asynchttpclient/netty/handler/NettyReactiveStreamsTest.java
Patch:
@@ -133,19 +133,19 @@ public void onHostnameResolutionSuccess(String name, List<InetSocketAddress> add
         @Override
         public void onHostnameResolutionFailure(String name, Throwable cause) {}
         @Override
-        public void onTcpConnect(InetSocketAddress address) {}
+        public void onTcpConnectAttempt(InetSocketAddress address) {}
         @Override
         public void onTcpConnectSuccess(InetSocketAddress address, Channel connection) {}
         @Override
         public void onTcpConnectFailure(InetSocketAddress address, Throwable cause) {}
         @Override
-        public void onTlsHandshake() {}
+        public void onTlsHandshakeAttempt() {}
         @Override
         public void onTlsHandshakeSuccess() {}
         @Override
         public void onTlsHandshakeFailure(Throwable cause) {}
         @Override
-        public void onConnectionPool() {}
+        public void onConnectionPoolAttempt() {}
         @Override
         public void onConnectionPooled(Channel connection) {}
         @Override

File: client/src/test/java/org/asynchttpclient/test/EventCollectingHandler.java
Patch:
@@ -95,7 +95,7 @@ public State onContentWritten() {
     }
 
     @Override
-    public void onTcpConnect(InetSocketAddress address) {
+    public void onTcpConnectAttempt(InetSocketAddress address) {
         firedEvents.add(CONNECTION_OPEN_EVENT);
     }
 
@@ -125,7 +125,7 @@ public void onHostnameResolutionFailure(String name, Throwable cause) {
     }
 
     @Override
-    public void onTlsHandshake() {
+    public void onTlsHandshakeAttempt() {
         firedEvents.add(TLS_HANDSHAKE_EVENT);
     }
 
@@ -140,7 +140,7 @@ public void onTlsHandshakeFailure(Throwable cause) {
     }
 
     @Override
-    public void onConnectionPool() {
+    public void onConnectionPoolAttempt() {
         firedEvents.add(CONNECTION_POOL_EVENT);
     }
 

File: client/src/test/java/org/asynchttpclient/AuthTimeoutTest.java
Patch:
@@ -16,6 +16,7 @@
 import static org.asynchttpclient.Dsl.*;
 import static org.asynchttpclient.test.TestUtils.*;
 import static org.testng.Assert.*;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -69,7 +70,7 @@ public void handle(String s, Request r, HttpServletRequest request, HttpServletR
             OutputStream out = response.getOutputStream();
             if (request.getHeader("X-Content") != null) {
                 String content = request.getHeader("X-Content");
-                response.setHeader("Content-Length", String.valueOf(content.getBytes(UTF_8).length));
+                response.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(content.getBytes(UTF_8).length));
                 out.write(content.substring(1).getBytes(UTF_8));
             } else {
                 response.setStatus(200);

File: client/src/test/java/org/asynchttpclient/BasicAuthTest.java
Patch:
@@ -19,6 +19,7 @@
 import static org.asynchttpclient.Dsl.*;
 import static org.asynchttpclient.test.TestUtils.*;
 import static org.testng.Assert.*;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -116,7 +117,7 @@ public void handle(String s, Request r, HttpServletRequest request, HttpServletR
                 LOGGER.info("got redirected" + request.getRequestURI());
                 response.setStatus(200);
                 response.addHeader("X-Auth", request.getHeader("Authorization"));
-                response.addHeader("X-Content-Length", String.valueOf(request.getContentLength()));
+                response.addHeader("X-" + HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getContentLength()));
                 byte[] b = "content".getBytes(UTF_8);
                 response.setContentLength(b.length);
                 response.getOutputStream().write(b);
@@ -136,7 +137,7 @@ public void handle(String s, Request r, HttpServletRequest request, HttpServletR
 
             } else {
                 response.addHeader("X-Auth", request.getHeader("Authorization"));
-                response.addHeader("X-Content-Length", String.valueOf(request.getContentLength()));
+                response.addHeader("X-" + HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getContentLength()));
                 response.setStatus(200);
 
                 int size = 10 * 1024;

File: client/src/test/java/org/asynchttpclient/RemoteSiteTest.java
Patch:
@@ -18,6 +18,7 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.asynchttpclient.Dsl.*;
 import static org.testng.Assert.*;
+import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.InputStream;
 import java.net.URLEncoder;
@@ -142,10 +143,10 @@ public void invalidStreamTest2() throws Exception {
     @Test(groups = "online")
     public void asyncFullBodyProperlyRead() throws Exception {
         try (AsyncHttpClient client = asyncHttpClient()) {
-            Response r = client.prepareGet("http://www.cyberpresse.ca/").execute().get();
+            Response r = client.prepareGet("http://www.typesafe.com/").execute().get();
 
             InputStream stream = r.getResponseBodyAsStream();
-            int contentLength = Integer.valueOf(r.getHeader("Content-Length"));
+            int contentLength = Integer.valueOf(r.getHeader(HttpHeaders.Names.CONTENT_LENGTH));
 
             assertEquals(contentLength, IOUtils.toByteArray(stream).length);
         }

File: client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -99,15 +99,16 @@ protected RequestBuilderBase(String method, boolean disableUrlEncoding, boolean
     }
 
     protected RequestBuilderBase(Request prototype) {
-        this(prototype, false);
+        this(prototype, false, false);
     }
 
-    protected RequestBuilderBase(Request prototype, boolean disableUrlEncoding) {
+    protected RequestBuilderBase(Request prototype, boolean disableUrlEncoding, boolean validateHeaders) {
         this.method = prototype.getMethod();
         this.uriEncoder = UriEncoder.uriEncoder(disableUrlEncoding);
         this.uri = prototype.getUri();
         this.address = prototype.getAddress();
         this.localAddress = prototype.getLocalAddress();
+        this.headers = new DefaultHttpHeaders(validateHeaders);
         this.headers.add(prototype.getHeaders());
         if (isNonEmpty(prototype.getCookies())) {
             this.cookies = new ArrayList<>(prototype.getCookies());

File: client/src/main/java/org/asynchttpclient/netty/channel/exception/TooManyConnectionsException.java
Patch:
@@ -18,6 +18,6 @@
 public class TooManyConnectionsException extends IOException {
 
     public TooManyConnectionsException(int max) {
-        super("Too many connections per host " + max);
+        super("Too many connections: " + max);
     }
 }

File: client/src/main/java/org/asynchttpclient/netty/channel/exception/TooManyConnectionsPerHostException.java
Patch:
@@ -18,6 +18,6 @@
 public class TooManyConnectionsPerHostException extends IOException {
 
     public TooManyConnectionsPerHostException(int max) {
-        super("Too many connections " + max);
+        super("Too many connections: " + max);
     }
 }

File: client/src/main/java/org/asynchttpclient/netty/handler/AsyncHttpClientHandler.java
Patch:
@@ -13,7 +13,6 @@
  */
 package org.asynchttpclient.netty.handler;
 
-import static org.asynchttpclient.util.HttpUtils.CHANNEL_CLOSED_EXCEPTION;
 import static org.asynchttpclient.util.MiscUtils.getCause;
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.Channel;
@@ -35,6 +34,7 @@
 import org.asynchttpclient.netty.NettyResponseFuture;
 import org.asynchttpclient.netty.channel.ChannelManager;
 import org.asynchttpclient.netty.channel.Channels;
+import org.asynchttpclient.netty.channel.exception.ChannelClosedException;
 import org.asynchttpclient.netty.future.StackTraceInspector;
 import org.asynchttpclient.netty.request.NettyRequestSender;
 import org.slf4j.Logger;
@@ -148,7 +148,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
             NettyResponseFuture<?> future = NettyResponseFuture.class.cast(attribute);
             future.touch();
 
-            if (!config.getIoExceptionFilters().isEmpty() && requestSender.applyIoExceptionFiltersAndReplayRequest(future, CHANNEL_CLOSED_EXCEPTION, channel))
+            if (!config.getIoExceptionFilters().isEmpty() && requestSender.applyIoExceptionFiltersAndReplayRequest(future, ChannelClosedException.INSTANCE, channel))
                 return;
 
             protocol.onClose(future);
@@ -186,7 +186,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable e) throws Excep
                     // FIXME why drop the original exception and throw a new
                     // one?
                     if (!config.getIoExceptionFilters().isEmpty()) {
-                        if (!requestSender.applyIoExceptionFiltersAndReplayRequest(future, CHANNEL_CLOSED_EXCEPTION, channel))
+                        if (!requestSender.applyIoExceptionFiltersAndReplayRequest(future, ChannelClosedException.INSTANCE, channel))
                             // Close the channel so the recovering can occurs.
                             Channels.silentlyCloseChannel(channel);
                         return;

File: client/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -15,7 +15,7 @@
 
 import static org.asynchttpclient.util.Assertions.assertNotNull;
 import static org.asynchttpclient.util.AuthenticatorUtils.*;
-import static org.asynchttpclient.util.HttpUtils.*;
+import static org.asynchttpclient.util.HttpUtils.requestTimeout;
 import static org.asynchttpclient.util.MiscUtils.getCause;
 import static org.asynchttpclient.util.ProxyUtils.getProxyServer;
 import io.netty.bootstrap.Bootstrap;
@@ -52,6 +52,7 @@
 import org.asynchttpclient.netty.channel.ChannelState;
 import org.asynchttpclient.netty.channel.Channels;
 import org.asynchttpclient.netty.channel.NettyConnectListener;
+import org.asynchttpclient.netty.channel.exception.RemotelyClosedException;
 import org.asynchttpclient.netty.timeout.ReadTimeoutTimerTask;
 import org.asynchttpclient.netty.timeout.RequestTimeoutTimerTask;
 import org.asynchttpclient.netty.timeout.TimeoutsHolder;
@@ -389,7 +390,7 @@ public void handleUnexpectedClosedChannel(Channel channel, NettyResponseFuture<?
             channelManager.closeChannel(channel);
 
         else if (!retry(future))
-            abort(channel, future, REMOTELY_CLOSED_EXCEPTION);
+            abort(channel, future, RemotelyClosedException.INSTANCE);
     }
 
     public boolean retry(NettyResponseFuture<?> future) {

File: client/src/main/java/org/asynchttpclient/ResponseBase.java
Patch:
@@ -28,7 +28,7 @@ protected ResponseBase(HttpResponseStatus status, HttpResponseHeaders headers, L
 
     protected abstract List<Cookie> buildCookies();
 
-    protected Charset calculateCharset(Charset charset) {
+    protected Charset computeCharset(Charset charset) {
 
         if (charset == null) {
             String contentType = getContentType();

File: client/src/main/java/org/asynchttpclient/netty/NettyResponse.java
Patch:
@@ -89,7 +89,7 @@ public String getResponseBody() {
 
     @Override
     public String getResponseBody(Charset charset) {
-        return new String(getResponseBodyAsBytes(), calculateCharset(charset));
+        return new String(getResponseBodyAsBytes(), computeCharset(charset));
     }
 
     @Override

File: client/src/test/java/org/asynchttpclient/BasicHttpTest.java
Patch:
@@ -664,7 +664,7 @@ public void onThrowable(Throwable t) {
             }).get();
 
             assertEquals(response.getStatusCode(), 200);
-            assertEquals(response.getHeader("X-Connection"), "keep-alive");
+            assertEquals(response.getHeader("X-" + HttpHeaders.Names.CONTENT_TYPE), HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED);
         }
     }
 

File: extras/simple/src/test/java/org/asynchttpclient/extras/simple/HttpsProxyTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.asynchttpclient.test.TestUtils.*;
 import static org.testng.Assert.assertEquals;
-import io.netty.handler.codec.http.HttpHeaders;
 
 import java.io.IOException;
 import java.util.concurrent.ExecutionException;
@@ -62,7 +61,6 @@ public void testSimpleAHCConfigProxy() throws IOException, InterruptedException,
             Response r = client.get().get();
 
             assertEquals(r.getStatusCode(), 200);
-            assertEquals(r.getHeader("X-Connection"), HttpHeaders.Values.KEEP_ALIVE);
         }
     }
 }

File: client/src/main/java/org/asynchttpclient/netty/handler/WebSocketProtocol.java
Patch:
@@ -90,7 +90,7 @@ public void call() throws Exception {
                 return;
             }
 
-            if (exitAfterHandlingRedirect(channel, future, response, request, response.getStatus().code(), realm))
+            if (REDIRECT_STATUSES.contains(status.getStatusCode()) && exitAfterHandlingRedirect(channel, future, response, request, response.getStatus().code(), realm))
                 return;
 
             boolean validStatus = response.getStatus().equals(SWITCHING_PROTOCOLS);

File: client/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
Patch:
@@ -63,7 +63,7 @@ public void testDefaultCompressionEnforced() {
     }
 
     public void testDefaultUserAgent() {
-        Assert.assertEquals(AsyncHttpClientConfigDefaults.defaultUserAgent(), "NING/1.0");
+        Assert.assertEquals(AsyncHttpClientConfigDefaults.defaultUserAgent(), "AHC/2.0");
         testStringSystemProperty("userAgent", "defaultUserAgent", "MyAHC");
     }
 

File: client/src/test/java/org/asynchttpclient/BasicAuthTest.java
Patch:
@@ -173,7 +173,7 @@ public void basicAuthTest() throws IOException, ExecutionException, TimeoutExcep
     }
 
     @Test(groups = "standalone")
-    public void redirectAndDigestAuthTest() throws Exception, ExecutionException, TimeoutException, InterruptedException {
+    public void redirectAndBasicAuthTest() throws Exception, ExecutionException, TimeoutException, InterruptedException {
         try (AsyncHttpClient client = asyncHttpClient(config().setFollowRedirect(true).setMaxRedirects(10))) {
             Future<Response> f = client.prepareGet(getTargetUrl2())//
                     .setRealm(basicAuthRealm(USER, ADMIN).build())//

File: client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java
Patch:
@@ -48,7 +48,7 @@ public FileLikePart(String name, String contentType, Charset charset, String con
                 transfertEncoding == null ? DEFAULT_TRANSFER_ENCODING : transfertEncoding);
     }
 
-    public void setFileName(String fileName) {
+    public final void setFileName(String fileName) {
         this.fileName = fileName;
     }
 

File: client/src/main/java/org/asynchttpclient/request/body/multipart/FileLikePart.java
Patch:
@@ -48,7 +48,7 @@ public FileLikePart(String name, String contentType, Charset charset, String con
                 transfertEncoding == null ? DEFAULT_TRANSFER_ENCODING : transfertEncoding);
     }
 
-    public void setFileName(String fileName) {
+    public final void setFileName(String fileName) {
         this.fileName = fileName;
     }
 

File: client/src/test/java/org/asynchttpclient/reactivestreams/HttpStaticFileServerHandler.java
Patch:
@@ -36,7 +36,6 @@
 import io.netty.handler.ssl.SslHandler;
 import io.netty.handler.stream.ChunkedFile;
 import io.netty.util.CharsetUtil;
-import io.netty.util.internal.SystemPropertyUtil;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.RandomAccessFile;

File: client/src/test/java/org/asynchttpclient/test/TestUtils.java
Patch:
@@ -66,7 +66,7 @@ public class TestUtils {
     public static final String ADMIN = "admin";
     public static final String TEXT_HTML_CONTENT_TYPE_WITH_UTF_8_CHARSET = "text/html; charset=UTF-8";
     public static final String TEXT_HTML_CONTENT_TYPE_WITH_ISO_8859_1_CHARSET = "text/html; charset=ISO-8859-1";
-    private static final File TMP_DIR = new File(System.getProperty("java.io.tmpdir"), "ahc-tests-" + UUID.randomUUID().toString().substring(0, 8));
+    public static final File TMP_DIR = new File(System.getProperty("java.io.tmpdir"), "ahc-tests-" + UUID.randomUUID().toString().substring(0, 8));
     public static final byte[] PATTERN_BYTES = "FooBarBazQixFooBarBazQixFooBarBazQixFooBarBazQixFooBarBazQixFooBarBazQix".getBytes(Charset.forName("UTF-16"));
     public static final File LARGE_IMAGE_FILE;
     public static final byte[] LARGE_IMAGE_BYTES;

File: client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsDownLoadTest.java
Patch:
@@ -110,7 +110,7 @@ public byte[] getBytes() throws Throwable {
       List<HttpResponseBodyPart> bodyParts = subscriber.getElements();
       ByteArrayOutputStream bytes = new ByteArrayOutputStream();
       for (HttpResponseBodyPart part : bodyParts) {
-        part.writeTo(bytes);
+        bytes.write(part.getBodyPartBytes());
       }
       return bytes.toByteArray();
     }

File: client/src/main/java/org/asynchttpclient/AsyncHttpClient.java
Patch:
@@ -262,7 +262,7 @@ public interface AsyncHttpClient extends Closeable {
     /**
      * Execute an HTTP request.
      *
-     * @param request {@link RequestBuilder}
+     * @param requestBuilder {@link RequestBuilder}
      * @return a {@link Future} of type Response
      */
     ListenableFuture<Response> executeRequest(RequestBuilder requestBuilder);

File: client/src/main/java/org/asynchttpclient/request/body/multipart/MultipartBody.java
Patch:
@@ -1,9 +1,10 @@
 /*
- * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2015 AsyncHttpClient Project. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
- * You may obtain a copy of the Apache License Version 2.0 at http://www.apache.org/licenses/LICENSE-2.0.
+ * You may obtain a copy of the Apache License Version 2.0 at
+ *     http://www.apache.org/licenses/LICENSE-2.0.
  *
  * Unless required by applicable law or agreed to in writing,
  * software distributed under the Apache License Version 2.0 is distributed on an

File: client/src/main/java/org/asynchttpclient/netty/request/body/BodyChunkedInput.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class BodyChunkedInput implements ChunkedInput<ByteBuf> {
 
-    private static final int DEFAULT_CHUNK_SIZE = 8 * 1024;
+    public static final int DEFAULT_CHUNK_SIZE = 8 * 1024;
 
     private final Body body;
     private final int contentLength;
@@ -54,7 +54,7 @@ public ByteBuf readChunk(ChannelHandlerContext ctx) throws Exception {
 
         // FIXME pass a visitor so we can directly pass a pooled ByteBuf
         ByteBuffer buffer = ByteBuffer.allocate(chunkSize);
-        Body.BodyState state = body.read(buffer);
+        Body.BodyState state = body.transferTo(buffer);
         switch (state) {
             case STOP:
                 endOfInput = true;

File: client/src/main/java/org/asynchttpclient/request/body/Body.java
Patch:
@@ -55,5 +55,5 @@ enum BodyState {
      * @throws IOException If the chunk could not be read.
      */
     // FIXME introduce a visitor pattern so that Netty can pass a pooled buffer
-    BodyState read(ByteBuffer buffer) throws IOException;
+    BodyState transferTo(ByteBuffer buffer) throws IOException;
 }

File: client/src/main/java/org/asynchttpclient/request/body/generator/ByteArrayBodyGenerator.java
Patch:
@@ -36,7 +36,7 @@ public long getContentLength() {
             return bytes.length;
         }
 
-        public BodyState read(ByteBuffer byteBuffer) throws IOException {
+        public BodyState transferTo(ByteBuffer byteBuffer) throws IOException {
 
             if (eof) {
                 return BodyState.STOP;

File: client/src/main/java/org/asynchttpclient/request/body/generator/InputStreamBodyGenerator.java
Patch:
@@ -61,7 +61,7 @@ public long getContentLength() {
             return -1L;
         }
 
-        public BodyState read(ByteBuffer buffer) throws IOException {
+        public BodyState transferTo(ByteBuffer buffer) throws IOException {
 
             // To be safe.
             chunk = new byte[buffer.remaining() - 10];

File: client/src/main/java/org/asynchttpclient/request/body/generator/ReactiveStreamsBodyGenerator.java
Patch:
@@ -78,11 +78,11 @@ public long getContentLength() {
         }
 
         @Override
-        public BodyState read(ByteBuffer buffer) throws IOException {
+        public BodyState transferTo(ByteBuffer buffer) throws IOException {
             if(initialized.compareAndSet(false, true))
                 publisher.subscribe(subscriber);
 
-            return body.read(buffer);
+            return body.transferTo(buffer);
         }
     }
 

File: client/src/main/java/org/asynchttpclient/request/body/generator/SimpleFeedableBodyGenerator.java
Patch:
@@ -52,7 +52,7 @@ public long getContentLength() {
         }
 
         @Override
-        public BodyState read(final ByteBuffer buffer) throws IOException {
+        public BodyState transferTo(final ByteBuffer buffer) throws IOException {
             switch (state) {
                 case CONTINUE:
                     return readNextPart(buffer);

File: client/src/main/java/org/asynchttpclient/request/body/multipart/FilePartStallHandler.java
Patch:
@@ -25,7 +25,7 @@ public class FilePartStallHandler extends TimerTask {
     private volatile boolean failed;
     private volatile boolean written;
 
-    public FilePartStallHandler(long waitTime, AbstractFilePart filePart) {
+    public FilePartStallHandler(long waitTime, FileLikePart filePart) {
         this.waitTime = waitTime;
         failed = false;
         written = false;

File: client/src/test/java/org/asynchttpclient/request/body/generator/FeedableBodyGeneratorTest.java
Patch:
@@ -49,7 +49,7 @@ public void readingBytesReturnsFedContentWithoutChunkBoundaries() throws Excepti
         feedableBodyGenerator.feed(ByteBuffer.wrap(content), true);
         Body body = feedableBodyGenerator.createBody();
         assertEquals(readFromBody(body), "Test123".getBytes(StandardCharsets.US_ASCII));
-        assertEquals(body.read(ByteBuffer.allocate(1)), BodyState.STOP);
+        assertEquals(body.transferTo(ByteBuffer.allocate(1)), BodyState.STOP);
     }
 
 
@@ -60,12 +60,12 @@ public void returnZeroToSuspendStreamWhenNothingIsInQueue() throws Exception {
 
         Body body = feedableBodyGenerator.createBody();
         assertEquals(readFromBody(body), "Test123".getBytes(StandardCharsets.US_ASCII));
-        assertEquals(body.read(ByteBuffer.allocate(1)), BodyState.SUSPEND);
+        assertEquals(body.transferTo(ByteBuffer.allocate(1)), BodyState.SUSPEND);
     }
 
     private byte[] readFromBody(Body body) throws IOException {
         ByteBuffer byteBuffer = ByteBuffer.allocate(512);
-        body.read(byteBuffer);
+        body.transferTo(byteBuffer);
         byteBuffer.flip();
         byte[] readBytes = new byte[byteBuffer.remaining()];
         byteBuffer.get(readBytes);

File: client/src/test/java/org/asynchttpclient/request/body/generators/ByteArrayBodyGeneratorTest.java
Patch:
@@ -45,11 +45,11 @@ public void testSingleRead() throws IOException {
         final ByteBuffer chunkBuffer = ByteBuffer.allocate(chunkSize);
 
         // should take 1 read to get through the srcArray
-        body.read(chunkBuffer);
+        body.transferTo(chunkBuffer);
         assertEquals(chunkBuffer.position(), srcArraySize, "bytes read");
         chunkBuffer.clear();
 
-        assertEquals(body.read(chunkBuffer), BodyState.STOP, "body at EOF");
+        assertEquals(body.transferTo(chunkBuffer), BodyState.STOP, "body at EOF");
     }
 
     @Test(groups = "standalone")
@@ -66,7 +66,7 @@ public void testMultipleReads() throws IOException {
 
         int reads = 0;
         int bytesRead = 0;
-        while (body.read(chunkBuffer) != BodyState.STOP) {
+        while (body.transferTo(chunkBuffer) != BodyState.STOP) {
           reads += 1;
           bytesRead += chunkBuffer.position();
           chunkBuffer.clear();

File: client/src/test/java/org/asynchttpclient/request/body/multipart/MultipartBodyTest.java
Patch:
@@ -69,7 +69,7 @@ private static void compareContentLength(final List<Part> parts) throws IOExcept
             final ByteBuffer buffer = ByteBuffer.allocate(8192);
             boolean last = false;
             while (!last) {
-                if (multipartBody.read(buffer) == BodyState.STOP) {
+                if (multipartBody.transferTo(buffer) == BodyState.STOP) {
                     last = true;
                 }
             }

File: client/src/test/java/org/asynchttpclient/AsyncStreamLifecycleTest.java
Patch:
@@ -95,7 +95,7 @@ public void run() {
 
     // TODO Netty only.
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testStream() throws IOException {
         try (AsyncHttpClient ahc = asyncHttpClient()) {
             final AtomicBoolean err = new AtomicBoolean(false);

File: client/src/test/java/org/asynchttpclient/ByteBufferCapacityTest.java
Patch:
@@ -69,7 +69,7 @@ public AbstractHandler configureHandler() throws Exception {
         return new BasicHandler();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void basicByteBufferTest() throws Exception {
         try (AsyncHttpClient c = asyncHttpClient()) {
             File largeFile = createTempFile(1024 * 100 * 10);

File: client/src/test/java/org/asynchttpclient/ComplexClientTest.java
Patch:
@@ -24,7 +24,7 @@
 
 public class ComplexClientTest extends AbstractBasicTest {
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void multipleRequestsTest() throws Exception {
         try (AsyncHttpClient c = asyncHttpClient()) {
             String body = "hello there";
@@ -41,7 +41,7 @@ public void multipleRequestsTest() throws Exception {
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void urlWithoutSlashTest() throws Exception {
         try (AsyncHttpClient c = asyncHttpClient()) {
             String body = "hello there";

File: client/src/test/java/org/asynchttpclient/DigestAuthTest.java
Patch:
@@ -59,7 +59,7 @@ public AbstractHandler configureHandler() throws Exception {
         return new SimpleHandler();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void digestAuthTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
         try (AsyncHttpClient client = asyncHttpClient()) {
             Future<Response> f = client.prepareGet("http://127.0.0.1:" + port1 + "/")//
@@ -72,7 +72,7 @@ public void digestAuthTest() throws IOException, ExecutionException, TimeoutExce
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void digestAuthTestWithoutScheme() throws IOException, ExecutionException, TimeoutException, InterruptedException {
         try (AsyncHttpClient client = asyncHttpClient()) {
             Future<Response> f = client.prepareGet("http://127.0.0.1:" + port1 + "/")//
@@ -85,7 +85,7 @@ public void digestAuthTestWithoutScheme() throws IOException, ExecutionException
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void digestAuthNegativeTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
         try (AsyncHttpClient client = asyncHttpClient()) {
             Future<Response> f = client.prepareGet("http://127.0.0.1:" + port1 + "/")//

File: client/src/test/java/org/asynchttpclient/ErrorResponseTest.java
Patch:
@@ -60,7 +60,7 @@ public AbstractHandler configureHandler() throws Exception {
         return new ErrorHandler();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testQueryParameters() throws Exception {
         try (AsyncHttpClient client = asyncHttpClient()) {
             Future<Response> f = client.prepareGet("http://127.0.0.1:" + port1 + "/foo").addHeader("Accepts", "*/*").execute();

File: client/src/test/java/org/asynchttpclient/Expect100ContinueTest.java
Patch:
@@ -58,7 +58,7 @@ public AbstractHandler configureHandler() throws Exception {
         return new ZeroCopyHandler();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void Expect100Continue() throws Exception {
         try (AsyncHttpClient client = asyncHttpClient()) {
             Future<Response> f = client.preparePut("http://127.0.0.1:" + port1 + "/").setHeader("Expect", "100-continue").setBody(SIMPLE_TEXT_FILE).execute();

File: client/src/test/java/org/asynchttpclient/FollowingThreadTest.java
Patch:
@@ -33,7 +33,7 @@ public class FollowingThreadTest extends AbstractBasicTest {
 
     private static final int COUNT = 10;
 
-    @Test(timeOut = 30 * 1000, groups = { "online", "default_provider", "scalability" })
+    @Test(timeOut = 30 * 1000, groups = { "online", "scalability" })
     public void testFollowRedirect() throws IOException, ExecutionException, TimeoutException, InterruptedException {
 
         final CountDownLatch countDown = new CountDownLatch(COUNT);

File: client/src/test/java/org/asynchttpclient/Head302Test.java
Patch:
@@ -62,7 +62,7 @@ public AbstractHandler configureHandler() throws Exception {
         return new Head302handler();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testHEAD302() throws IOException, BrokenBarrierException, InterruptedException, ExecutionException, TimeoutException {
         try (AsyncHttpClient client = asyncHttpClient()) {
             final CountDownLatch l = new CountDownLatch(1);

File: client/src/test/java/org/asynchttpclient/IdleStateHandlerTest.java
Patch:
@@ -57,7 +57,7 @@ public void setUpGlobal() throws Exception {
         logger.info("Local HTTP server started successfully");
     }
 
-    @Test(groups = { "online", "default_provider" })
+    @Test(groups = "online")
     public void idleStateTest() throws Exception {
         try (AsyncHttpClient c = asyncHttpClient(config().setPooledConnectionIdleTimeout(10 * 1000))) {
             c.prepareGet(getTargetUrl()).execute().get();

File: client/src/test/java/org/asynchttpclient/ListenableFutureTest.java
Patch:
@@ -25,7 +25,7 @@
 
 public class ListenableFutureTest extends AbstractBasicTest {
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testListenableFuture() throws Exception {
         final AtomicInteger statusCode = new AtomicInteger(500);
         try (AsyncHttpClient ahc = asyncHttpClient()) {

File: client/src/test/java/org/asynchttpclient/MultipleHeaderTest.java
Patch:
@@ -88,7 +88,7 @@ public void tearDownGlobal() throws Exception {
         serverSocket.close();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testMultipleOtherHeaders() throws IOException, ExecutionException, TimeoutException, InterruptedException {
         final String[] xffHeaders = new String[] { null, null };
 
@@ -137,7 +137,7 @@ public Void onCompleted() throws Exception {
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testMultipleEntityHeaders() throws IOException, ExecutionException, TimeoutException, InterruptedException {
         final String[] clHeaders = new String[] { null, null };
 

File: client/src/test/java/org/asynchttpclient/NoNullResponseTest.java
Patch:
@@ -32,7 +32,7 @@
 public class NoNullResponseTest extends AbstractBasicTest {
     private static final String GOOGLE_HTTPS_URL = "https://www.google.com";
 
-    @Test(invocationCount = 4, groups = { "online", "default_provider" })
+    @Test(invocationCount = 4, groups = "online")
     public void multipleSslRequestsWithDelayAndKeepAlive() throws Exception {
 
         AsyncHttpClientConfig config = config()//

File: client/src/test/java/org/asynchttpclient/NonAsciiContentLengthTest.java
Patch:
@@ -62,7 +62,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques
         server.start();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testNonAsciiContentLength() throws Exception {
         execute("test");
         execute("\u4E00"); // Unicode CJK ideograph for one

File: client/src/test/java/org/asynchttpclient/ParamEncodingTest.java
Patch:
@@ -53,7 +53,7 @@ public void handle(String s, Request r, HttpServletRequest request, HttpServletR
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testParameters() throws IOException, ExecutionException, TimeoutException, InterruptedException {
 
         String value = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKQLMNOPQRSTUVWXYZ1234567809`~!@#$%^&*()_+-=,.<>/?;:'\"[]{}\\| ";

File: client/src/test/java/org/asynchttpclient/QueryParametersTest.java
Patch:
@@ -68,7 +68,7 @@ public AbstractHandler configureHandler() throws Exception {
         return new QueryStringHandler();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testQueryParameters() throws IOException, ExecutionException, TimeoutException, InterruptedException {
         try (AsyncHttpClient client = asyncHttpClient()) {
             Future<Response> f = client.prepareGet("http://127.0.0.1:" + port1).addQueryParam("a", "1").addQueryParam("b", "2").execute();
@@ -80,7 +80,7 @@ public void testQueryParameters() throws IOException, ExecutionException, Timeou
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testUrlRequestParametersEncoding() throws IOException, ExecutionException, InterruptedException {
         String URL = getTargetUrl() + "?q=";
         String REQUEST_PARAM = "github github \ngithub";
@@ -94,7 +94,7 @@ public void testUrlRequestParametersEncoding() throws IOException, ExecutionExce
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void urlWithColonTest() throws Exception {
         try (AsyncHttpClient c = asyncHttpClient()) {
             String query = "test:colon:";

File: client/src/test/java/org/asynchttpclient/RetryRequestTest.java
Patch:
@@ -68,7 +68,7 @@ public AbstractHandler configureHandler() throws Exception {
         return new SlowAndBigHandler();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testMaxRetry() throws Exception {
         try (AsyncHttpClient ahc = asyncHttpClient(config().setMaxRequestRetry(0))) {
             ahc.executeRequest(ahc.prepareGet(getTargetUrl()).build()).get();

File: client/src/test/java/org/asynchttpclient/ThreadNameTest.java
Patch:
@@ -43,7 +43,7 @@ private static Thread[] getThreads() {
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testThreadName() throws Exception {
         String threadPoolName = "ahc-" + (new Random().nextLong() & 0x7fffffffffffffffL);
         try (AsyncHttpClient client = asyncHttpClient(config().setThreadPoolName(threadPoolName))) {

File: client/src/test/java/org/asynchttpclient/channel/MaxConnectionsInThreads.java
Patch:
@@ -49,7 +49,7 @@ public class MaxConnectionsInThreads extends AbstractBasicTest {
     // FIXME weird
     private static URI servletEndpointUri;
 
-    @Test(groups = { "online", "default_provider" })
+    @Test(groups = "online")
     public void testMaxConnectionsWithinThreads() throws Exception {
 
         String[] urls = new String[] { servletEndpointUri.toString(), servletEndpointUri.toString() };

File: client/src/test/java/org/asynchttpclient/channel/MaxTotalConnectionTest.java
Patch:
@@ -38,7 +38,7 @@
 public class MaxTotalConnectionTest extends AbstractBasicTest {
     protected final Logger log = LoggerFactory.getLogger(AbstractBasicTest.class);
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testMaxTotalConnectionsExceedingException() throws IOException {
         String[] urls = new String[] { "http://google.com", "http://github.com/" };
 

File: client/src/test/java/org/asynchttpclient/netty/reactivestreams/NettyReactiveStreamsTest.java
Patch:
@@ -38,7 +38,7 @@
 
 public class NettyReactiveStreamsTest extends ReactiveStreamsTest {
 
-    @Test(groups = { "standalone", "default_provider" }, enabled = true)
+    @Test(groups = "standalone", enabled = true)
     public void testRetryingOnFailingStream() throws Exception {
         try (AsyncHttpClient client = asyncHttpClient()) {
             final CountDownLatch streamStarted = new CountDownLatch(1); // allows us to wait until subscriber has received the first body chunk

File: client/src/test/java/org/asynchttpclient/proxy/HttpsProxyTest.java
Patch:
@@ -69,7 +69,7 @@ public void tearDownGlobal() throws Exception {
         server2.stop();
     }
 
-    @Test(groups = { "online", "default_provider" })
+    @Test(groups = "online")
     public void testRequestProxy() throws IOException, InterruptedException, ExecutionException, TimeoutException {
 
         try (AsyncHttpClient asyncHttpClient = asyncHttpClient(config().setFollowRedirect(true).setAcceptAnyCertificate(true))) {
@@ -92,7 +92,7 @@ public Response onCompleted(Response response) throws Exception {
         }
     }
 
-    @Test(groups = { "online", "default_provider" })
+    @Test(groups = "online")
     public void testConfigProxy() throws IOException, InterruptedException, ExecutionException, TimeoutException {
         AsyncHttpClientConfig config = config()//
                 .setFollowRedirect(true)//

File: client/src/test/java/org/asynchttpclient/request/body/BodyChunkTest.java
Patch:
@@ -33,7 +33,7 @@ public class BodyChunkTest extends AbstractBasicTest {
 
     private static final String MY_MESSAGE = "my message";
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void negativeContentTypeTest() throws Exception {
 
         AsyncHttpClientConfig config = config()//

File: client/src/test/java/org/asynchttpclient/request/body/EmptyBodyTest.java
Patch:
@@ -64,7 +64,7 @@ public AbstractHandler configureHandler() throws Exception {
         return new NoBodyResponseHandler();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testEmptyBody() throws IOException {
         try (AsyncHttpClient ahc = asyncHttpClient()) {
             final AtomicBoolean err = new AtomicBoolean(false);
@@ -119,7 +119,7 @@ public Object onCompleted() throws Exception {
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testPutEmptyBody() throws Exception {
         try (AsyncHttpClient ahc = asyncHttpClient()) {
             Response response = ahc.preparePut(getTargetUrl()).setBody("String").execute().get();

File: client/src/test/java/org/asynchttpclient/request/body/FastUnauthorizedUploadTest.java
Patch:
@@ -49,7 +49,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest req, H
         };
     }
 
-    @Test(groups = { "standalone", "default_provider" }, enabled = true)
+    @Test(groups = "standalone", enabled = true)
     public void testUnauthorizedWhileUploading() throws Exception {
         File file = createTempFile(1024 * 1024);
 

File: client/src/test/java/org/asynchttpclient/request/body/FilePartLargeFileTest.java
Patch:
@@ -60,15 +60,15 @@ public void handle(String target, Request baseRequest, HttpServletRequest req, H
         };
     }
 
-    @Test(groups = { "standalone", "default_provider" }, enabled = true)
+    @Test(groups = "standalone", enabled = true)
     public void testPutImageFile() throws Exception {
         try (AsyncHttpClient client = asyncHttpClient(config().setRequestTimeout(100 * 6000))) {
             Response response = client.preparePut(getTargetUrl()).addBodyPart(new FilePart("test", LARGE_IMAGE_FILE, "application/octet-stream", UTF_8)).execute().get();
             assertEquals(response.getStatusCode(), 200);
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" }, enabled = true)
+    @Test(groups = "standalone", enabled = true)
     public void testPutLargeTextFile() throws Exception {
         File file = createTempFile(1024 * 1024);
 

File: client/src/test/java/org/asynchttpclient/request/body/InputStreamTest.java
Patch:
@@ -67,7 +67,7 @@ public AbstractHandler configureHandler() throws Exception {
         return new InputStreamHandler();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testInvalidInputStream() throws IOException, ExecutionException, TimeoutException, InterruptedException {
 
         try (AsyncHttpClient c = asyncHttpClient()) {

File: client/src/test/java/org/asynchttpclient/request/body/PutLargeFileTest.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class PutLargeFileTest extends AbstractBasicTest {
 
-    @Test(groups = { "standalone", "default_provider" }, enabled = true)
+    @Test(groups = "standalone", enabled = true)
     public void testPutLargeFile() throws Exception {
 
         File file = createTempFile(1024 * 1024);
@@ -48,7 +48,7 @@ public void testPutLargeFile() throws Exception {
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testPutSmallFile() throws Exception {
 
         File file = createTempFile(1024);

File: client/src/test/java/org/asynchttpclient/request/body/TransferListenerTest.java
Patch:
@@ -77,7 +77,7 @@ public AbstractHandler configureHandler() throws Exception {
         return new BasicHandler();
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void basicGetTest() throws Exception {
         try (AsyncHttpClient c = asyncHttpClient()) {
             final AtomicReference<Throwable> throwable = new AtomicReference<>();
@@ -125,7 +125,7 @@ public void onThrowable(Throwable t) {
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void basicPutFileTest() throws Exception {
         final AtomicReference<Throwable> throwable = new AtomicReference<>();
         final AtomicReference<HttpHeaders> hSent = new AtomicReference<>();
@@ -179,7 +179,7 @@ public void onThrowable(Throwable t) {
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void basicPutFileBodyGeneratorTest() throws Exception {
         try (AsyncHttpClient client = asyncHttpClient()) {
             final AtomicReference<Throwable> throwable = new AtomicReference<>();

File: extras/simple/src/test/java/org/asynchttpclient/extras/simple/HttpsProxyTest.java
Patch:
@@ -48,7 +48,7 @@ public void tearDownGlobal() throws Exception {
         server2.stop();
     }
 
-    @Test(groups = { "online", "default_provider" })
+    @Test(groups = "online")
     public void testSimpleAHCConfigProxy() throws IOException, InterruptedException, ExecutionException, TimeoutException {
 
         try (SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder()//

File: extras/simple/src/test/java/org/asynchttpclient/extras/simple/SimpleAsyncClientErrorBehaviourTest.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class SimpleAsyncClientErrorBehaviourTest extends AbstractBasicTest {
     
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testAccumulateErrorBody() throws Exception {
         try (SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder()//
                 .setUrl(getTargetUrl() + "/nonexistent")//
@@ -50,7 +50,7 @@ public void testAccumulateErrorBody() throws Exception {
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = "standalone")
     public void testOmitErrorBody() throws Exception {
         try (SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder()//
                 .setUrl(getTargetUrl() + "/nonexistent")//

File: client/src/main/java/org/asynchttpclient/handler/BodyDeferringAsyncHandler.java
Patch:
@@ -140,7 +140,7 @@ public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception
             headersArrived.countDown();
         }
 
-        bodyPart.writeTo(output);
+        output.write(bodyPart.getBodyPartBytes());
         return State.CONTINUE;
     }
 

File: client/src/test/java/org/asynchttpclient/reactivestreams/ReactiveStreamsTest.java
Patch:
@@ -133,7 +133,7 @@ public byte[] getBytes() throws Throwable {
             List<HttpResponseBodyPart> bodyParts = subscriber.getElements();
             ByteArrayOutputStream bytes = new ByteArrayOutputStream();
             for (HttpResponseBodyPart part : bodyParts) {
-                part.writeTo(bytes);
+                bytes.write(part.getBodyPartBytes());
             }
             return bytes.toByteArray();
         }

File: client/src/test/java/org/asynchttpclient/request/body/ZeroCopyFileTest.java
Patch:
@@ -123,7 +123,7 @@ public void onThrowable(Throwable t) {
                     }
 
                     public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
-                        bodyPart.writeTo(stream);
+                        stream.write(bodyPart.getBodyPartBytes());
                         return State.CONTINUE;
                     }
 
@@ -156,7 +156,7 @@ public void onThrowable(Throwable t) {
                     }
 
                     public State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {
-                        bodyPart.writeTo(stream);
+                        stream.write(bodyPart.getBodyPartBytes());
 
                         if (bodyPart.getBodyPartBytes().length == 0) {
                             return State.ABORT;

File: extras/simple/src/main/java/org/asynchttpclient/extras/simple/SimpleAsyncHttpClient.java
Patch:
@@ -305,7 +305,7 @@ private Future<Response> execute(RequestBuilder rb, BodyConsumer bodyConsumer, T
             handler = new ResumableBodyConsumerAsyncHandler(length, handler);
         }
 
-        return asyncHttpClient().executeRequest(request, handler);
+        return getAsyncHttpClient().executeRequest(request, handler);
     }
 
     private AsyncHttpClient getAsyncHttpClient() {

File: client/src/main/java/org/asynchttpclient/request/body/multipart/MultipartBody.java
Patch:
@@ -78,7 +78,7 @@ public long transferTo(long position, WritableByteChannel target) throws IOExcep
         long overallLength = 0;
 
         if (transfertDone) {
-            return contentLength;
+            return -1;
         }
 
         for (Part part : parts) {
@@ -173,7 +173,7 @@ public State read(ByteBuffer buffer) throws IOException {
                     }
                 }
             }
-            return transfertDone ? State.Continue : State.Stop;
+            return transfertDone ? State.Stop : State.Continue;
 
         } catch (Exception e) {
             LOGGER.error("Read exception", e);

File: extras/guava/src/main/java/org/asynchttpclient/extras/guava/ListenableFutureAdapter.java
Patch:
@@ -23,6 +23,7 @@ public final class ListenableFutureAdapter {
 
     /**
      * @param future an AHC ListenableFuture
+     * @param <V> the Future's value type
      * @return a Guava ListenableFuture
      */
     public static <V> com.google.common.util.concurrent.ListenableFuture<V> asGuavaFuture(final ListenableFuture<V> future) {

File: extras/registry/src/main/java/org/asynchttpclient/extras/registry/AsyncHttpClientRegistryImpl.java
Patch:
@@ -94,7 +94,7 @@ public boolean registerIfNew(String name, AsyncHttpClient ahc) {
      * org.asynchttpclient.IAsyncHttpClientRegistry#unRegister(java.lang.String)
      */
     @Override
-    public boolean unRegister(String name) {
+    public boolean unregister(String name) {
         return asyncHttpClientMap.remove(name) != null;
     }
 

File: extras/registry/src/test/java/org/asynchttpclient/extras/registry/AsyncHttpClientRegistryTest.java
Patch:
@@ -59,9 +59,9 @@ public void testGetAndRegister() {
     @Test(groups = "fast")
     public void testDeRegister() {
         AsyncHttpClient ahc = AsyncHttpClientFactory.getAsyncHttpClient();
-        Assert.assertFalse(AsyncHttpClientRegistryImpl.getInstance().unRegister(TEST_AHC));
+        Assert.assertFalse(AsyncHttpClientRegistryImpl.getInstance().unregister(TEST_AHC));
         Assert.assertNull(AsyncHttpClientRegistryImpl.getInstance().addOrReplace(TEST_AHC, ahc));
-        Assert.assertTrue(AsyncHttpClientRegistryImpl.getInstance().unRegister(TEST_AHC));
+        Assert.assertTrue(AsyncHttpClientRegistryImpl.getInstance().unregister(TEST_AHC));
         Assert.assertNull(AsyncHttpClientRegistryImpl.getInstance().get(TEST_AHC));
     }
 

File: client/src/main/java/org/asynchttpclient/channel/pool/ConnectionStrategy.java
Patch:
@@ -25,8 +25,9 @@ public interface ConnectionStrategy {
 
     /**
      * Determines whether the connection should be kept alive after this HTTP message exchange.
-     * @param request the HTTP request
-     * @param response the HTTP response
+     * @param ahcRequest the Request, as built by AHC
+     * @param nettyRequest the HTTP request sent to Netty
+     * @param nettyResponse the HTTP response received from Netty
      * @return true if the connection should be kept alive, false if it should be closed.
      */
     boolean keepAlive(Request ahcRequest, HttpRequest nettyRequest, HttpResponse nettyResponse);

File: client/src/main/java/org/asynchttpclient/proxy/ProxyServer.java
Patch:
@@ -74,7 +74,6 @@ public Realm getRealm() {
      * target host. If <code>null</code> proxy is passed in, this method returns true -- since there is NO proxy, we
      * should avoid to use it. Simple hostname pattern matching using "*" are supported, but only as prefixes.
      * 
-     * @param proxyServer the proxy
      * @param hostname the hostname
      * @return true if we have to ignore proxy use (obeying non-proxy hosts settings), false otherwise.
      * @see <a href="https://docs.oracle.com/javase/8/docs/api/java/net/doc-files/net-properties.html">Networking Properties</a>

File: client/src/main/java/org/asynchttpclient/netty/channel/ChannelManager.java
Patch:
@@ -465,8 +465,8 @@ public void verifyChannelPipeline(ChannelPipeline pipeline, Uri uri, String virt
             pipeline.remove(SSL_HANDLER);
     }
 
-    public Bootstrap getBootstrap(Uri uri, boolean useProxy) {
-        return uri.isWebSocket() && !useProxy ? wsBootstrap : httpBootstrap;
+    public Bootstrap getBootstrap(Uri uri, ProxyServer proxy) {
+        return uri.isWebSocket() && proxy == null ? wsBootstrap : httpBootstrap;
     }
 
     public void upgradePipelineForWebSockets(ChannelPipeline pipeline) {

File: client/src/main/java/org/asynchttpclient/netty/channel/NettyConnectListener.java
Patch:
@@ -84,7 +84,7 @@ private void writeRequest(Channel channel) {
 
     private void onFutureSuccess(final Channel channel) throws Exception {
         
-        Request request = future.getRequest();
+        Request request = future.getTargetRequest();
         Uri uri = request.getUri();
 
         // in case of proxy tunneling, we'll add the SslHandler later, after the CONNECT request

File: client/src/main/java/org/asynchttpclient/netty/handler/WebSocketProtocol.java
Patch:
@@ -83,7 +83,7 @@ public UpgradeCallback(NettyResponseFuture<?> future, Channel channel, HttpRespo
         public void call() throws Exception {
             
             WebSocketUpgradeHandler handler = WebSocketUpgradeHandler.class.cast(future.getAsyncHandler());
-            Request request = future.getRequest();
+            Request request = future.getCurrentRequest();
             
             HttpResponseStatus status = new NettyResponseStatus(future.getUri(), config, response, channel);
             HttpResponseHeaders responseHeaders = new NettyResponseHeaders(response.headers());

File: client/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
Patch:
@@ -66,7 +66,7 @@ public void write(final Channel channel, NettyResponseFuture<?> future) throws I
         } else {
             msg = new BodyChunkedInput(body);
 
-            BodyGenerator bg = future.getRequest().getBodyGenerator();
+            BodyGenerator bg = future.getTargetRequest().getBodyGenerator();
             if (bg instanceof SimpleFeedableBodyGenerator) {
                 SimpleFeedableBodyGenerator.class.cast(bg).setListener(new FeedListener() {
                     @Override
@@ -80,7 +80,7 @@ public void onError(Throwable t) {}
         }
         ChannelFuture writeFuture = channel.write(msg, channel.newProgressivePromise());
 
-        writeFuture.addListener(new ProgressListener(config, future.getAsyncHandler(), future, false, getContentLength()) {
+        writeFuture.addListener(new ProgressListener(future.getAsyncHandler(), future, false, getContentLength()) {
             public void operationComplete(ChannelProgressiveFuture cf) {
                 closeSilently(body);
                 super.operationComplete(cf);

File: client/src/main/java/org/asynchttpclient/netty/request/body/NettyFileBody.java
Patch:
@@ -82,7 +82,7 @@ public void write(Channel channel, NettyResponseFuture<?> future) throws IOExcep
                 FileRegion region = new DefaultFileRegion(raf.getChannel(), offset, length);
                 writeFuture = channel.write(region, channel.newProgressivePromise());
             }
-            writeFuture.addListener(new ProgressListener(config, future.getAsyncHandler(), future, false, getContentLength()) {
+            writeFuture.addListener(new ProgressListener(future.getAsyncHandler(), future, false, getContentLength()) {
                 public void operationComplete(ChannelProgressiveFuture cf) {
                     closeSilently(raf);
                     super.operationComplete(cf);

File: client/src/main/java/org/asynchttpclient/ntlm/NtlmEngine.java
Patch:
@@ -48,6 +48,7 @@
  *
  * @since 4.1
  */
+@SuppressWarnings("unused")
 public final class NtlmEngine {
 
     public static final NtlmEngine INSTANCE = new NtlmEngine();

File: client/src/main/java/org/asynchttpclient/simple/SimpleAsyncHttpClient.java
Patch:
@@ -419,7 +419,7 @@ public final static class Builder implements DerivedBuilder {
         private final RequestBuilder requestBuilder;
         private final AsyncHttpClientConfig.Builder configBuilder = new AsyncHttpClientConfig.Builder();
         private Realm.RealmBuilder realmBuilder = null;
-        private Realm.AuthScheme proxyAuthScheme = Realm.AuthScheme.NONE;
+        private Realm.AuthScheme proxyAuthScheme;
         private String proxyHost = null;
         private String proxyPrincipal = null;
         private String proxyPassword = null;
@@ -653,7 +653,7 @@ public Builder setResumableDownload(boolean enableResumableDownload) {
 
         private Realm.RealmBuilder realm() {
             if (realmBuilder == null) {
-                realmBuilder = new Realm.RealmBuilder();
+                realmBuilder = new Realm.RealmBuilder().scheme(AuthScheme.BASIC);
             }
             return realmBuilder;
         }
@@ -694,7 +694,7 @@ public SimpleAsyncHttpClient build() {
             if (proxyHost != null) {
                 Realm realm = null;
                 if (proxyPrincipal != null) {
-                    AuthScheme proxyAuthScheme = this.proxyAuthScheme == AuthScheme.NONE ? AuthScheme.BASIC : this.proxyAuthScheme;
+                    AuthScheme proxyAuthScheme = this.proxyAuthScheme == null ? AuthScheme.BASIC : this.proxyAuthScheme;
                     realm = Realm.newRealm(proxyAuthScheme, proxyPrincipal, proxyPassword).build();
                 }
 

File: client/src/main/java/org/asynchttpclient/spnego/SpnegoEngineException.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * Signals SPNEGO protocol failure.
  */
-public class SpnegoEngineException extends RuntimeException {
+public class SpnegoEngineException extends Exception {
 
     private static final long serialVersionUID = -3123799505052881438L;
 

File: client/src/test/java/org/asynchttpclient/RealmTest.java
Patch:
@@ -35,7 +35,7 @@ public void testClone() {
         assertEquals(clone.getPrincipal(), orig.getPrincipal());
         assertEquals(clone.getPassword(), orig.getPassword());
         assertEquals(clone.getCharset(), orig.getCharset());
-        assertEquals(clone.getUsePreemptiveAuth(), orig.getUsePreemptiveAuth());
+        assertEquals(clone.isUsePreemptiveAuth(), orig.isUsePreemptiveAuth());
         assertEquals(clone.getRealmName(), orig.getRealmName());
         assertEquals(clone.getAlgorithm(), orig.getAlgorithm());
         assertEquals(clone.getScheme(), orig.getScheme());

File: client/src/main/java/org/asynchttpclient/channel/SSLEngineFactory.java
Patch:
@@ -52,12 +52,12 @@ public SSLEngine newSSLEngine(String peerHost, int peerPort) throws GeneralSecur
             SSLContext sslContext = SslUtils.getInstance().getSSLContext(config);
 
             SSLEngine sslEngine = sslContext.createSSLEngine(peerHost, peerPort);
+            sslEngine.setUseClientMode(true);
             if (!config.isAcceptAnyCertificate()) {
                 SSLParameters params = sslEngine.getSSLParameters();
                 params.setEndpointIdentificationAlgorithm("HTTPS");
                 sslEngine.setSSLParameters(params);
             }
-            sslEngine.setUseClientMode(true);
 
             if (isNonEmpty(config.getEnabledProtocols()))
                 sslEngine.setEnabledProtocols(config.getEnabledProtocols());

File: client/src/main/java/org/asynchttpclient/channel/SSLEngineFactory.java
Patch:
@@ -52,12 +52,12 @@ public SSLEngine newSSLEngine(String peerHost, int peerPort) throws GeneralSecur
             SSLContext sslContext = SslUtils.getInstance().getSSLContext(config);
 
             SSLEngine sslEngine = sslContext.createSSLEngine(peerHost, peerPort);
+            sslEngine.setUseClientMode(true);
             if (!config.isAcceptAnyCertificate()) {
                 SSLParameters params = sslEngine.getSSLParameters();
                 params.setEndpointIdentificationAlgorithm("HTTPS");
                 sslEngine.setSSLParameters(params);
             }
-            sslEngine.setUseClientMode(true);
 
             if (isNonEmpty(config.getEnabledProtocols()))
                 sslEngine.setEnabledProtocols(config.getEnabledProtocols());

File: client/src/main/java/org/asynchttpclient/AdvancedConfig.java
Patch:
@@ -47,6 +47,7 @@ public class AdvancedConfig {
     /**
      * @param name the name of the ChannelOption
      * @param value the value of the ChannelOption
+     * @param <T> the type of value
      * @return this instance of AdvancedConfig
      */
     @SuppressWarnings("unchecked")

File: client/src/main/java/org/asynchttpclient/FluentCaseInsensitiveStringsMap.java
Patch:
@@ -420,6 +420,7 @@ public String getFirstValue(String key) {
      * Returns the values for the given key joined into a single string using the given delimiter.
      *
      * @param key The key
+     * @param delimiter The delimiter for joining the values
      * @return The value as a single string
      */
     public String getJoinedValue(String key, String delimiter) {

File: client/src/main/java/org/asynchttpclient/FluentStringsMap.java
Patch:
@@ -358,6 +358,7 @@ public String getFirstValue(String key) {
      * Returns the values for the given key joined into a single string using the given delimiter.
      *
      * @param key The key
+     * @param delimiter the delimiter to join the values
      * @return The value as a single string
      */
     public String getJoinedValue(String key, String delimiter) {

File: client/src/main/java/org/asynchttpclient/HttpResponseStatus.java
Patch:
@@ -48,7 +48,6 @@ public final Uri getUri() {
      * 
      * @param headers {@link HttpResponseHeaders}
      * @param bodyParts list of {@link HttpResponseBodyPart}
-     * @param config the client config
      * @return a {@link Response}
      */
     public abstract Response prepareResponse(HttpResponseHeaders headers, List<HttpResponseBodyPart> bodyParts);

File: client/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -46,7 +46,7 @@
 /**
  * Builder for {@link Request}
  * 
- * @param <T>
+ * @param <T> the builder type
  */
 public abstract class RequestBuilderBase<T extends RequestBuilderBase<T>> {
     private final static Logger logger = LoggerFactory.getLogger(RequestBuilderBase.class);

File: client/src/main/java/org/asynchttpclient/channel/SSLEngineFactory.java
Patch:
@@ -32,6 +32,8 @@ public interface SSLEngineFactory {
     /**
      * Creates new {@link SSLEngine}.
      *
+     * @param peerHost the peer hostname
+     * @param peerPort the peer port
      * @return new engine
      * @throws GeneralSecurityException if the SSLEngine cannot be created
      */

File: client/src/main/java/org/asynchttpclient/cookie/CookieDecoder.java
Patch:
@@ -26,6 +26,7 @@ public class CookieDecoder {
     /**
      * Decodes the specified HTTP header value into {@link Cookie}.
      * 
+     * @param header the Set-Cookie header
      * @return the decoded {@link Cookie}
      */
     public static Cookie decode(String header) {

File: client/src/main/java/org/asynchttpclient/extra/ResumableRandomAccessFileListener.java
Patch:
@@ -35,7 +35,7 @@ public ResumableRandomAccessFileListener(RandomAccessFile file) {
      * resumable file download.
      *
      * @param buffer a {@link ByteBuffer}
-     * @throws IOException
+     * @throws IOException exception while writing into the file
      */
     public void onBytesReceived(ByteBuffer buffer) throws IOException {
         file.seek(file.length());

File: client/src/main/java/org/asynchttpclient/filter/IOExceptionFilter.java
Patch:
@@ -22,6 +22,7 @@ public interface IOExceptionFilter {
      * use the returned {@link FilterContext} to replay the {@link org.asynchttpclient.Request} or abort the processing.
      *
      * @param ctx a {@link FilterContext}
+     * @param <T> the handler result type
      * @return {@link FilterContext}. The {@link FilterContext} instance may not the same as the original one.
      * @throws FilterException to interrupt the filter processing.
      */

File: client/src/main/java/org/asynchttpclient/filter/RequestFilter.java
Patch:
@@ -23,6 +23,7 @@ public interface RequestFilter {
      * processing.
      *
      * @param ctx a {@link FilterContext}
+     * @param <T>  the handler result type
      * @return {@link FilterContext}. The {@link FilterContext} instance may not the same as the original one.
      * @throws FilterException to interrupt the filter processing.
      */

File: client/src/main/java/org/asynchttpclient/filter/ResponseFilter.java
Patch:
@@ -26,6 +26,7 @@ public interface ResponseFilter {
      * using {@link FilterContext#getRequest()} and the current response processing will be ignored.
      *
      * @param ctx a {@link FilterContext}
+     * @param <T> the handler result type
      * @return {@link FilterContext}. The {@link FilterContext} instance may not the same as the original one.
      * @throws FilterException to interrupt the filter processing.
      */

File: client/src/main/java/org/asynchttpclient/future/AbstractListenableFuture.java
Patch:
@@ -33,7 +33,7 @@
 import org.asynchttpclient.ListenableFuture;
 
 /**
- * <p>An abstract base implementation of the listener support provided by
+ * An abstract base implementation of the listener support provided by
  * {@link ListenableFuture}. This class uses an {@link ExecutionList} to
  * guarantee that all registered listeners will be executed. Listener/Executor
  * pairs are stored in the execution list and executed in the order in which

File: client/src/main/java/org/asynchttpclient/handler/resumable/ResumableAsyncHandler.java
Patch:
@@ -36,7 +36,7 @@
  * this handler can resume the download operation at the point it was before the interruption occurred. This prevent having to
  * download the entire file again. It's the responsibility of the {@link org.asynchttpclient.handler.resumable.ResumableAsyncHandler}
  * to track how many bytes has been transferred and to properly adjust the file's write position.
- * <p/>
+ * <br>
  * In case of a JVM crash/shutdown, you can create an instance of this class and pass the last valid bytes position.
  */
 public class ResumableAsyncHandler implements AsyncHandler<Response> {
@@ -268,14 +268,14 @@ public interface ResumableProcessor {
          * Save the current {@link Map} instance which contains information about the current transfer state.
          * This method *only* invoked when the JVM is shutting down.
          *
-         * @param map
+         * @param map the current transfer state
          */
         void save(Map<String, Long> map);
 
         /**
          * Load the {@link Map} in memory, contains information about the transferred bytes.
          *
-         * @return {@link Map}
+         * @return {@link Map} current transfer state
          */
         Map<String, Long> load();
 

File: client/src/main/java/org/asynchttpclient/handler/resumable/ResumableListener.java
Patch:
@@ -24,7 +24,7 @@ public interface ResumableListener {
      * Invoked when some bytes are available to digest.
      *
      * @param byteBuffer the current bytes
-     * @throws IOException
+     * @throws IOException exception while writing the byteBuffer
      */
     void onBytesReceived(ByteBuffer byteBuffer) throws IOException;
 

File: client/src/main/java/org/asynchttpclient/request/body/multipart/MultipartUtils.java
Patch:
@@ -57,8 +57,9 @@ private MultipartUtils() {
     /**
      * Creates a new multipart entity containing the given parts.
      * 
-     * @param parts
-     *            The parts to include.
+     * @param parts the parts to include.
+     * @param requestHeaders the request headers
+     * @return a MultipartBody
      */
     public static MultipartBody newMultipartBody(List<Part> parts, FluentCaseInsensitiveStringsMap requestHeaders) {
         if (parts == null) {

File: client/src/main/java/org/asynchttpclient/request/body/multipart/Part.java
Patch:
@@ -128,6 +128,7 @@ public interface Part {
     /**
      * Return the full length of all the data. If you override this method make sure to override #send(OutputStream) as well
      * 
+     * @param boundary the multipart boundary
      * @return long The length.
      */
     long length(byte[] boundary);

File: client/src/main/java/org/asynchttpclient/simple/SimpleAHCTransferListener.java
Patch:
@@ -17,10 +17,10 @@
 
 /**
  * A simple transfer listener for use with the {@link SimpleAsyncHttpClient}.
- * <p/>
+ * <br>
  * Note: This listener does not cover requests failing before a connection is
  * established. For error handling, see
- * {@link org.asynchttpclient.simple.SimpleAsyncHttpClient.Builder#setDefaultThrowableHandler(org.asynchttpclient.ThrowableHandler)}
+ * {@link SimpleAsyncHttpClient.Builder#setDefaultThrowableHandler(ThrowableHandler)}
  *
  * @author Benjamin Hanzelmann
  */

File: client/src/main/java/org/asynchttpclient/simple/consumer/BodyConsumer.java
Patch:
@@ -28,7 +28,7 @@ public interface BodyConsumer extends Closeable {
      * Consume the received bytes.
      *
      * @param byteBuffer a {@link ByteBuffer} representation of the response's chunk.
-     * @throws IOException
+     * @throws IOException IO exception
      */
     void consume(ByteBuffer byteBuffer) throws IOException;
 }

File: client/src/main/java/org/asynchttpclient/simple/consumer/ResumableBodyConsumer.java
Patch:
@@ -23,14 +23,15 @@ public interface ResumableBodyConsumer extends BodyConsumer {
     /**
      * Prepare this consumer to resume a download, for example by seeking to the end of the underlying file.
      *
-     * @throws IOException
+     * @throws IOException IO exception
      */
     void resume() throws IOException;
 
     /**
      * Get the previously transferred bytes, for example the current file size.
      *
-     * @throws IOException
+     *@return the number of tranferred bytes
+     * @throws IOException IO exception
      */
     long getTransferredBytes() throws IOException;
 }

File: client/src/main/java/org/asynchttpclient/spnego/SpnegoTokenGenerator.java
Patch:
@@ -43,7 +43,7 @@
 /**
  * Abstract SPNEGO token generator. Implementations should take an Kerberos ticket and transform
  * into a SPNEGO token.
- * <p/>
+ * <br>
  * Implementations of this interface are expected to be thread-safe.
  *
  * @since 4.1

File: client/src/main/java/org/asynchttpclient/util/Base64.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * Implements the "base64" binary encoding scheme as defined by
  * <a href="http://tools.ietf.org/html/rfc2045">RFC 2045</a>.
- * <p/>
+ * <br>
  * Portions of code here are taken from Apache Pivot
  */
 public final class Base64 {
@@ -73,6 +73,7 @@ private Base64() {
      * Encodes the specified data into a base64 string.
      *
      * @param bytes The unencoded raw data.
+     * @return the encoded data
      */
     public static String encode(byte[] bytes) {
         // always sequence of 4 characters for each 3 bytes; padded with '='s as necessary:
@@ -110,6 +111,7 @@ public static String encode(byte[] bytes) {
      * Decodes the specified base64 string back into its raw data.
      *
      * @param encoded The base64 encoded string.
+     * @return the decoded data
      */
     public static byte[] decode(String encoded) {
         int padding = 0;

File: client/src/main/java/org/asynchttpclient/util/HttpUtils.java
Patch:
@@ -56,8 +56,7 @@ public final static boolean isSameBase(Uri uri1, Uri uri2) {
     }
 
     /**
-     * Convenient for HTTP layer when targeting server root
-     * 
+     * @param uri the uri
      * @return the raw path or "/" if it's null
      */
     public final static String getNonEmptyPath(Uri uri) {

File: client/src/main/java/org/asynchttpclient/ws/WebSocketByteFragmentListener.java
Patch:
@@ -17,10 +17,11 @@
 
 /**
  * Invoked when WebSocket binary fragments are received.
- * 
- * @param fragment text fragment
  */
 public interface WebSocketByteFragmentListener extends WebSocketListener {
 
+    /**
+     * @param fragment a fragment
+     */
     void onFragment(HttpResponseBodyPart fragment);
 }

File: client/src/main/java/org/asynchttpclient/ws/WebSocketCloseCodeReasonListener.java
Patch:
@@ -21,7 +21,9 @@ public interface WebSocketCloseCodeReasonListener {
     /**
      * Invoked when the {@link WebSocket} is close.
      *
-     * @param websocket
+     * @param websocket the WebSocket
+     * @param code the status code
+     * @param reason the reason message
      */
     void onClose(WebSocket websocket, int code, String reason);
 }

File: client/src/main/java/org/asynchttpclient/ws/WebSocketListener.java
Patch:
@@ -20,14 +20,14 @@ public interface WebSocketListener {
     /**
      * Invoked when the {@link WebSocket} is open.
      *
-     * @param websocket
+     * @param websocket the WebSocket
      */
     void onOpen(WebSocket websocket);
 
     /**
      * Invoked when the {@link WebSocket} is close.
      *
-     * @param websocket
+     * @param websocket the WebSocket
      */
     void onClose(WebSocket websocket);
 

File: client/src/main/java/org/asynchttpclient/ws/WebSocketTextFragmentListener.java
Patch:
@@ -17,10 +17,11 @@
 
 /**
  * Invoked when WebSocket text fragments are received.
- * 
- * @param fragment text fragment
  */
 public interface WebSocketTextFragmentListener extends WebSocketListener {
 
+    /**
+     * @param fragment a text fragment
+     */
     void onFragment(HttpResponseBodyPart fragment);
 }

File: client/src/test/java/org/asynchttpclient/RemoteSiteTest.java
Patch:
@@ -33,7 +33,7 @@
 
 /**
  * Unit tests for remote site.
- * <p/>
+ * <br>
  * see http://github.com/MSch/ning-async-http-client-bug/tree/master
  * 
  * @author Martin Schurrer

File: client/src/main/java/org/asynchttpclient/netty/handler/DefaultConnectionStrategy.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Connection strategy implementing standard HTTP 1.0/1.1 behaviour.
  */
-public class DefaultConnectionStrategy implements ConnectionStrategy<HttpRequest, HttpResponse> {
+public class DefaultConnectionStrategy implements ConnectionStrategy {
 
     /**
      * Implemented in accordance with RFC 7230 section 6.1

File: client/src/main/java/org/asynchttpclient/netty/handler/HttpProtocol.java
Patch:
@@ -55,7 +55,7 @@
 
 public final class HttpProtocol extends Protocol {
 
-    private final ConnectionStrategy<HttpRequest, HttpResponse> connectionStrategy;
+    private final ConnectionStrategy connectionStrategy;
 
     public HttpProtocol(ChannelManager channelManager, AsyncHttpClientConfig config, AdvancedConfig advancedConfig, NettyRequestSender requestSender) {
         super(channelManager, config, advancedConfig, requestSender);

File: api/src/main/java/org/asynchttpclient/util/AuthenticatorUtils.java
Patch:
@@ -124,7 +124,7 @@ public static String perRequestProxyAuthorizationHeader(Request request, ProxySe
 
         String proxyAuthorization = null;
 
-        if (!connect && proxyServer != null && proxyServer.getPrincipal() != null && proxyServer.getScheme() == AuthScheme.BASIC) {
+        if (!connect && proxyServer != null && proxyServer.getScheme() == AuthScheme.BASIC) {
             proxyAuthorization = computeBasicAuthentication(proxyServer);
         } else if (realm != null && realm.getUsePreemptiveAuth() && realm.isTargetProxy()) {
 

File: providers/netty3/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java
Patch:
@@ -150,7 +150,7 @@ public void onError(Throwable t) {
             try {
                 listener.onError(t);
             } catch (Throwable t2) {
-                LOGGER.error("", t2);
+                LOGGER.error("WebSocketListener.onError crash", t2);
             }
         }
     }

File: providers/netty4/src/main/java/org/asynchttpclient/netty/ws/NettyWebSocket.java
Patch:
@@ -144,7 +144,7 @@ public void onError(Throwable t) {
             try {
                 listener.onError(t);
             } catch (Throwable t2) {
-                LOGGER.error("", t2);
+                LOGGER.error("WebSocketListener.onError crash", t2);
             }
         }
     }

File: api/src/test/java/org/asynchttpclient/BasicHttpsTest.java
Patch:
@@ -129,8 +129,8 @@ public void testNormalEventsFired() throws InterruptedException, TimeoutExceptio
                     CONNECTION_POOL_EVENT,
                     CONNECTION_OPEN_EVENT,
                     DNS_RESOLVED_EVENT,
-                    SSL_HANDSHAKE_COMPLETED_EVENT,
                     CONNECTION_SUCCESS_EVENT,
+                    SSL_HANDSHAKE_COMPLETED_EVENT,
                     REQUEST_SEND_EVENT,
                     HEADERS_WRITTEN_EVENT,
                     STATUS_RECEIVED_EVENT,

File: providers/netty3/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -326,7 +326,7 @@ private void scheduleTimeouts(NettyResponseFuture<?> nettyResponseFuture) {
 
         int readTimeoutValue = config.getReadTimeout();
         if (readTimeoutValue != -1 && readTimeoutValue < requestTimeoutInMs) {
-            // no need for a readTimeout that's less than the requestTimeout
+            // no need to schedule a readTimeout if the requestTimeout happens first
             Timeout readTimeout = newTimeout(new ReadTimeoutTimerTask(nettyResponseFuture, this, timeoutsHolder, requestTimeoutInMs, readTimeoutValue), readTimeoutValue);
             timeoutsHolder.readTimeout = readTimeout;
         }

File: providers/netty4/src/main/java/org/asynchttpclient/netty/request/NettyRequestSender.java
Patch:
@@ -327,7 +327,7 @@ private void scheduleTimeouts(NettyResponseFuture<?> nettyResponseFuture) {
 
         int readTimeoutValue = config.getReadTimeout();
         if (readTimeoutValue != -1 && readTimeoutValue < requestTimeoutInMs) {
-            // no need for a readTimeout that's less than the requestTimeoutInMs
+            // no need to schedule a readTimeout if the requestTimeout happens first
             Timeout readTimeout = newTimeout(new ReadTimeoutTimerTask(nettyResponseFuture, this, timeoutsHolder, requestTimeoutInMs, readTimeoutValue), readTimeoutValue);
             timeoutsHolder.readTimeout = readTimeout;
         }

File: api/src/main/java/org/asynchttpclient/oauth/ThreadSafeHMAC.java
Patch:
@@ -44,7 +44,9 @@ public ThreadSafeHMAC(ConsumerKey consumerAuth, RequestToken userAuth) {
         StringBuilder sb = StringUtils.stringBuilder();
         Utf8UrlEncoder.encodeAndAppendQueryElement(sb, consumerAuth.getSecret());
         sb.append('&');
-        Utf8UrlEncoder.encodeAndAppendQueryElement(sb, userAuth.getSecret());
+        if(userAuth != null && userAuth.getSecret() != null) {
+            Utf8UrlEncoder.encodeAndAppendQueryElement(sb, userAuth.getSecret());
+        }
         byte[] keyBytes = StringUtils.charSequence2Bytes(sb, UTF_8);
         SecretKeySpec signingKey = new SecretKeySpec(keyBytes, HMAC_SHA1_ALGORITHM);
 

File: api/src/main/java/org/asynchttpclient/oauth/ThreadSafeHMAC.java
Patch:
@@ -44,7 +44,9 @@ public ThreadSafeHMAC(ConsumerKey consumerAuth, RequestToken userAuth) {
         StringBuilder sb = StringUtils.stringBuilder();
         Utf8UrlEncoder.encodeAndAppendQueryElement(sb, consumerAuth.getSecret());
         sb.append('&');
-        Utf8UrlEncoder.encodeAndAppendQueryElement(sb, userAuth.getSecret());
+        if(userAuth != null && userAuth.getSecret() != null) {
+            Utf8UrlEncoder.encodeAndAppendQueryElement(sb, userAuth.getSecret());
+        }
         byte[] keyBytes = StringUtils.charSequence2Bytes(sb, UTF_8);
         SecretKeySpec signingKey = new SecretKeySpec(keyBytes, HMAC_SHA1_ALGORITHM);
 

File: api/src/test/java/org/asynchttpclient/request/body/ChunkingTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.asynchttpclient.Response;
 import org.asynchttpclient.request.body.generator.FeedableBodyGenerator;
 import org.asynchttpclient.request.body.generator.InputStreamBodyGenerator;
+import org.asynchttpclient.request.body.generator.SimpleFeedableBodyGenerator;
 import org.testng.annotations.Test;
 
 /**
@@ -86,7 +87,7 @@ public void doTestWithFeedableBodyGenerator(InputStream is) throws Throwable {
 
             RequestBuilder builder = new RequestBuilder("POST");
             builder.setUrl(getTargetUrl());
-            final FeedableBodyGenerator feedableBodyGenerator = new FeedableBodyGenerator();
+            final FeedableBodyGenerator feedableBodyGenerator = new SimpleFeedableBodyGenerator();
             builder.setBody(feedableBodyGenerator);
 
             Request r = builder.build();

File: api/src/test/java/org/asynchttpclient/request/body/ChunkingTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.asynchttpclient.Response;
 import org.asynchttpclient.request.body.generator.FeedableBodyGenerator;
 import org.asynchttpclient.request.body.generator.InputStreamBodyGenerator;
+import org.asynchttpclient.request.body.generator.SimpleFeedableBodyGenerator;
 import org.testng.annotations.Test;
 
 /**
@@ -86,7 +87,7 @@ public void doTestWithFeedableBodyGenerator(InputStream is) throws Throwable {
 
             RequestBuilder builder = new RequestBuilder("POST");
             builder.setUrl(getTargetUrl());
-            final FeedableBodyGenerator feedableBodyGenerator = new FeedableBodyGenerator();
+            final FeedableBodyGenerator feedableBodyGenerator = new SimpleFeedableBodyGenerator();
             builder.setBody(feedableBodyGenerator);
 
             Request r = builder.build();

File: api/src/main/java/org/asynchttpclient/Response.java
Patch:
@@ -125,7 +125,7 @@ public interface Response {
     boolean isRedirected();
 
     /**
-     * Subclasses SHOULD implement toString() in a way that identifies the request for logging.
+     * Subclasses SHOULD implement toString() in a way that identifies the response for logging.
      * 
      * @return The textual representation
      */

File: providers/netty3/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
Patch:
@@ -66,7 +66,9 @@ public void write(final Channel channel, NettyResponseFuture<?> future) throws I
             
             BodyGenerator bg = future.getRequest().getBodyGenerator();
             if (bg instanceof FeedableBodyGenerator) {
-                FeedableBodyGenerator.class.cast(bg).setListener(new FeedListener() {
+                final FeedableBodyGenerator feedableBodyGenerator = (FeedableBodyGenerator) bg;
+                feedableBodyGenerator.writeChunkBoundaries();
+                feedableBodyGenerator.setListener(new FeedListener() {
                     @Override
                     public void onContentAdded() {
                         channel.getPipeline().get(ChunkedWriteHandler.class).resumeTransfer();

File: providers/netty4/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
Patch:
@@ -68,9 +68,7 @@ public void write(final Channel channel, NettyResponseFuture<?> future) throws I
 
             BodyGenerator bg = future.getRequest().getBodyGenerator();
             if (bg instanceof FeedableBodyGenerator) {
-                final FeedableBodyGenerator feedableBodyGenerator = (FeedableBodyGenerator) bg;
-                feedableBodyGenerator.setWriteChunkBoundaries(false);
-                feedableBodyGenerator.setListener(new FeedListener() {
+                FeedableBodyGenerator.class.cast(bg).setListener(new FeedListener() {
                     @Override
                     public void onContentAdded() {
                         channel.pipeline().get(ChunkedWriteHandler.class).resumeTransfer();

File: providers/netty4/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
Patch:
@@ -68,7 +68,9 @@ public void write(final Channel channel, NettyResponseFuture<?> future) throws I
 
             BodyGenerator bg = future.getRequest().getBodyGenerator();
             if (bg instanceof FeedableBodyGenerator) {
-                FeedableBodyGenerator.class.cast(bg).setListener(new FeedListener() {
+                final FeedableBodyGenerator feedableBodyGenerator = FeedableBodyGenerator.class.cast(bg);
+                feedableBodyGenerator.setWriteChunkBoundaries(false);
+                feedableBodyGenerator.setListener(new FeedListener() {
                     @Override
                     public void onContentAdded() {
                         channel.pipeline().get(ChunkedWriteHandler.class).resumeTransfer();

File: providers/netty4/src/main/java/org/asynchttpclient/netty/request/body/NettyBodyBody.java
Patch:
@@ -68,7 +68,9 @@ public void write(final Channel channel, NettyResponseFuture<?> future) throws I
 
             BodyGenerator bg = future.getRequest().getBodyGenerator();
             if (bg instanceof FeedableBodyGenerator) {
-                FeedableBodyGenerator.class.cast(bg).setListener(new FeedListener() {
+                final FeedableBodyGenerator feedableBodyGenerator = FeedableBodyGenerator.class.cast(bg);
+                feedableBodyGenerator.setWriteChunkBoundaries(false);
+                feedableBodyGenerator.setListener(new FeedListener() {
                     @Override
                     public void onContentAdded() {
                         channel.pipeline().get(ChunkedWriteHandler.class).resumeTransfer();

File: providers/netty3/src/main/java/org/asynchttpclient/netty/handler/HttpProtocol.java
Patch:
@@ -393,9 +393,10 @@ private boolean exitAfterHandlingBody(Channel channel, NettyResponseFuture<?> fu
             AsyncHandler<?> handler) throws Exception {
         if (!response.isChunked()) {
             // no chunks expected, exiting
-            if (response.getContent().readableBytes() > 0)
-                // FIXME no need to notify an empty bodypart?
+            if (response.getContent().readableBytes() > 0) {
+                // no need to notify an empty bodypart
                 updateBodyAndInterrupt(future, handler, new NettyResponseBodyPart(response, null, true));
+            }
             finishUpdate(future, channel, false);
             return true;
         }

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -605,7 +605,7 @@ public static class Builder {
         private int maxRequestRetry = defaultMaxRequestRetry();
         private boolean disableUrlEncodingForBoundRequests = defaultDisableUrlEncodingForBoundRequests();
         private int ioThreadMultiplier = defaultIoThreadMultiplier();
-        private String[] enabledProtocols;
+        private String[] enabledProtocols = defaultEnabledProtocols();
         private String[] enabledCipherSuites;
         private Integer sslSessionCacheSize = defaultSslSessionCacheSize();
         private Integer sslSessionTimeout = defaultSslSessionTimeout();

File: api/src/test/java/org/asynchttpclient/HttpToHttpsRedirectTest.java
Patch:
@@ -38,6 +38,7 @@
 
 public abstract class HttpToHttpsRedirectTest extends AbstractBasicTest {
 
+    // FIXME super NOT threadsafe!!!
     private final AtomicBoolean redirectDone = new AtomicBoolean(false);
 
     private class Relative302Handler extends AbstractHandler {
@@ -142,7 +143,7 @@ public void relativeLocationUrl() throws Exception {
         try (AsyncHttpClient c = getAsyncHttpClient(cg)) {
             Response response = c.prepareGet(getTargetUrl()).setHeader("X-redirect", "/foo/test").execute().get();
             assertNotNull(response);
-            assertEquals(response.getStatusCode(), 302);
+            assertEquals(response.getStatusCode(), 200);
             assertEquals(response.getUri().toString(), getTargetUrl());
         }
     }

File: api/src/test/java/org/asynchttpclient/PerRequestRelative302Test.java
Patch:
@@ -41,6 +41,7 @@
 
 public abstract class PerRequestRelative302Test extends AbstractBasicTest {
 
+ // FIXME super NOT threadsafe!!!
     private final AtomicBoolean isSet = new AtomicBoolean(false);
 
     private class Relative302Handler extends AbstractHandler {
@@ -152,7 +153,7 @@ public void relativeLocationUrl() throws Exception {
         try (AsyncHttpClient c = getAsyncHttpClient(null)) {
             Response response = c.preparePost(getTargetUrl()).setFollowRedirect(true).setHeader("X-redirect", "/foo/test").execute().get();
             assertNotNull(response);
-            assertEquals(response.getStatusCode(), 302);
+            assertEquals(response.getStatusCode(), 200);
             assertEquals(response.getUri().toString(), getTargetUrl());
         }
     }

File: providers/netty4/src/main/java/org/asynchttpclient/netty/handler/WebSocketProtocol.java
Patch:
@@ -206,7 +206,7 @@ public void onClose(NettyResponseFuture<?> future) {
         logger.trace("onClose {}");
 
         try {
-            WebSocketUpgradeHandler h = WebSocketUpgradeHandler.class.cast(future);
+            WebSocketUpgradeHandler h = WebSocketUpgradeHandler.class.cast(future.getAsyncHandler());
             NettyWebSocket webSocket = NettyWebSocket.class.cast(h.onCompleted());
 
             logger.trace("Connection was closed abnormally (that is, with no close frame being sent).");

File: providers/netty3/src/main/java/org/asynchttpclient/netty/NettyAsyncHttpProviderConfig.java
Patch:
@@ -22,7 +22,7 @@
 import org.asynchttpclient.AsyncHttpProviderConfig;
 import org.asynchttpclient.channel.pool.ConnectionStrategy;
 import org.asynchttpclient.netty.channel.pool.ChannelPool;
-import org.asynchttpclient.netty.handler.Http1Point1ConnectionStrategy;
+import org.asynchttpclient.netty.handler.DefaultConnectionStrategy;
 import org.asynchttpclient.netty.ws.NettyWebSocket;
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelPipeline;
@@ -121,7 +121,7 @@ public Set<Map.Entry<String, Object>> propertiesSet() {
 
     private NettyWebSocketFactory nettyWebSocketFactory = new DefaultNettyWebSocketFactory();
 
-    private ConnectionStrategy<HttpRequest, HttpResponse> connectionStrategy = new Http1Point1ConnectionStrategy();
+    private ConnectionStrategy<HttpRequest, HttpResponse> connectionStrategy = new DefaultConnectionStrategy();
 
     public boolean isUseDeadLockChecker() {
         return useDeadLockChecker;

File: providers/netty4/src/main/java/org/asynchttpclient/netty/NettyAsyncHttpProviderConfig.java
Patch:
@@ -30,7 +30,7 @@
 import org.asynchttpclient.AsyncHttpProviderConfig;
 import org.asynchttpclient.channel.pool.ConnectionStrategy;
 import org.asynchttpclient.netty.channel.pool.ChannelPool;
-import org.asynchttpclient.netty.handler.Http1Point1ConnectionStrategy;
+import org.asynchttpclient.netty.handler.DefaultConnectionStrategy;
 import org.asynchttpclient.netty.ws.NettyWebSocket;
 
 /**
@@ -147,7 +147,7 @@ public NettyWebSocket newNettyWebSocket(Channel channel, AsyncHttpClientConfig c
 
     private NettyWebSocketFactory nettyWebSocketFactory = new DefaultNettyWebSocketFactory();
 
-    private ConnectionStrategy<HttpRequest, HttpResponse> connectionStrategy = new Http1Point1ConnectionStrategy();
+    private ConnectionStrategy<HttpRequest, HttpResponse> connectionStrategy = new DefaultConnectionStrategy();
 
     public EventLoopGroup getEventLoopGroup() {
         return eventLoopGroup;

File: providers/netty3/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
Patch:
@@ -85,7 +85,7 @@ else if (proxyServer != null && !useProxyConnect(uri))
     private String hostHeader(Request request, Uri uri) {
         String host = request.getVirtualHost() != null ? request.getVirtualHost() : uri.getHost();
         int port = uri.getPort();
-        return port == -1 || port == getDefaultPort(uri) ? host : host + ":" + port;
+        return port == -1 || port == getSchemeDefaultPort(uri.getScheme()) ? host : host + ":" + port;
     }
 
     public String firstRequestOnlyAuthorizationHeader(Request request, Uri uri, ProxyServer proxyServer, Realm realm) throws IOException {

File: providers/netty4/src/main/java/org/asynchttpclient/netty/request/NettyRequestFactory.java
Patch:
@@ -86,7 +86,7 @@ else if (proxyServer != null && !useProxyConnect(uri))
     private String hostHeader(Request request, Uri uri) {
         String host = request.getVirtualHost() != null ? request.getVirtualHost() : uri.getHost();
         int port = uri.getPort();
-        return port == -1 || port == getDefaultPort(uri) ? host : host + ":" + port;
+        return port == -1 || port == getSchemeDefaultPort(uri.getScheme()) ? host : host + ":" + port;
     }
 
     public String firstRequestOnlyAuthorizationHeader(Request request, Uri uri, ProxyServer proxyServer, Realm realm) throws IOException {

File: api/src/main/java/org/asynchttpclient/config/AsyncHttpClientConfigHelper.java
Patch:
@@ -81,7 +81,7 @@ public long getLong(String key) {
             return Long.parseLong(getString(key));
         }
         
-        public int getInteger(String key) {
+        public Integer getInteger(String key) {
             String s = getString(key);
             return s != null ? Integer.valueOf(s) : null;
         }

File: api/src/main/java/org/asynchttpclient/chmv8/ConcurrentHashMapV8.java
Patch:
@@ -20,7 +20,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
-package org.asynchttpclient.providers.netty.chmv8;
+package org.asynchttpclient.chmv8;
 
 import java.io.ObjectStreamField;
 import java.io.Serializable;

File: api/src/main/java/org/asynchttpclient/chmv8/CountedCompleter.java
Patch:
@@ -20,7 +20,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
-package org.asynchttpclient.providers.netty.chmv8;
+package org.asynchttpclient.chmv8;
 
 import java.util.concurrent.RecursiveAction;
 

File: api/src/main/java/org/asynchttpclient/chmv8/ForkJoinPool.java
Patch:
@@ -20,7 +20,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
-package org.asynchttpclient.providers.netty.chmv8;
+package org.asynchttpclient.chmv8;
 
 import java.lang.Thread.UncaughtExceptionHandler;
 import java.util.ArrayList;

File: api/src/main/java/org/asynchttpclient/chmv8/ForkJoinTask.java
Patch:
@@ -20,7 +20,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
-package org.asynchttpclient.providers.netty.chmv8;
+package org.asynchttpclient.chmv8;
 
 import java.io.Serializable;
 import java.lang.ref.ReferenceQueue;

File: api/src/main/java/org/asynchttpclient/chmv8/ForkJoinWorkerThread.java
Patch:
@@ -20,7 +20,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
-package org.asynchttpclient.providers.netty.chmv8;
+package org.asynchttpclient.chmv8;
 
 
 /**

File: api/src/main/java/org/asynchttpclient/chmv8/LongAdder.java
Patch:
@@ -20,7 +20,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
-package org.asynchttpclient.providers.netty.chmv8;
+package org.asynchttpclient.chmv8;
 
 import java.io.Serializable;
 import java.util.concurrent.atomic.AtomicLong;

File: api/src/main/java/org/asynchttpclient/chmv8/Striped64.java
Patch:
@@ -20,7 +20,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */
 
-package org.asynchttpclient.providers.netty.chmv8;
+package org.asynchttpclient.chmv8;
 
 import java.util.Random;
 

File: providers/netty3/src/main/java/org/asynchttpclient/providers/netty/channel/ChannelManager.java
Patch:
@@ -34,12 +34,12 @@
 import org.asynchttpclient.ConnectionPoolPartitioning;
 import org.asynchttpclient.ProxyServer;
 import org.asynchttpclient.SSLEngineFactory;
+import org.asynchttpclient.chmv8.ConcurrentHashMapV8;
 import org.asynchttpclient.providers.netty.Callback;
 import org.asynchttpclient.providers.netty.NettyAsyncHttpProviderConfig;
 import org.asynchttpclient.providers.netty.channel.pool.ChannelPool;
 import org.asynchttpclient.providers.netty.channel.pool.DefaultChannelPool;
 import org.asynchttpclient.providers.netty.channel.pool.NoopChannelPool;
-import org.asynchttpclient.providers.netty.chmv8.ConcurrentHashMapV8;
 import org.asynchttpclient.providers.netty.commons.channel.pool.ChannelPoolPartitionSelector;
 import org.asynchttpclient.providers.netty.future.NettyResponseFuture;
 import org.asynchttpclient.providers.netty.handler.HttpProtocol;

File: providers/netty3/src/main/java/org/asynchttpclient/providers/netty/channel/pool/DefaultChannelPool.java
Patch:
@@ -24,8 +24,8 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.chmv8.ConcurrentHashMapV8;
 import org.asynchttpclient.providers.netty.channel.Channels;
-import org.asynchttpclient.providers.netty.chmv8.ConcurrentHashMapV8;
 import org.asynchttpclient.providers.netty.commons.channel.pool.ChannelPoolPartitionSelector;
 import org.asynchttpclient.providers.netty.future.NettyResponseFuture;
 import org.jboss.netty.channel.Channel;

File: api/src/main/java/org/asynchttpclient/oauth/OAuthSignatureCalculator.java
Patch:
@@ -230,7 +230,7 @@ public OAuthParameterSet(int size) {
         }
 
         public OAuthParameterSet add(String key, String value) {
-            Parameter p = new Parameter(UTF8UrlEncoder.encode(key), UTF8UrlEncoder.encode(value));
+            Parameter p = new Parameter(UTF8UrlEncoder.encodeQueryElement(key), UTF8UrlEncoder.encodeQueryElement(value));
             allParameters.add(p);
             return this;
         }

File: api/src/test/java/org/asynchttpclient/util/TestUTF8UrlCodec.java
Patch:
@@ -22,8 +22,8 @@
 public class TestUTF8UrlCodec {
     @Test(groups = "fast")
     public void testBasics() {
-        assertEquals(UTF8UrlEncoder.encode("foobar"), "foobar");
-        assertEquals(UTF8UrlEncoder.encode("a&b"), "a%26b");
-        assertEquals(UTF8UrlEncoder.encode("a+b"), "a%2Bb");
+        assertEquals(UTF8UrlEncoder.encodeQueryElement("foobar"), "foobar");
+        assertEquals(UTF8UrlEncoder.encodeQueryElement("a&b"), "a%26b");
+        assertEquals(UTF8UrlEncoder.encodeQueryElement("a+b"), "a%2Bb");
     }
 }

File: api/src/test/java/org/asynchttpclient/ws/CloseCodeReasonMessageTest.java
Patch:
@@ -162,7 +162,7 @@ public void onError(Throwable t) {
         }
     }
 
-    @Test(timeOut = 60000, expectedExceptions = { IllegalArgumentException.class } )
+    @Test(timeOut = 60000, expectedExceptions = { IllegalStateException.class } )
     public void wrongProtocolCode() throws Throwable {
         try (AsyncHttpClient c = getAsyncHttpClient(null)) {
             final CountDownLatch latch = new CountDownLatch(1);

File: providers/netty3/src/test/java/org/asynchttpclient/providers/netty3/NettyAsyncResponseTest.java
Patch:
@@ -87,7 +87,7 @@ public FluentCaseInsensitiveStringsMap getHeaders() {
         assertEquals(cookies.size(), 1);
 
         Cookie cookie = cookies.get(0);
-        assertEquals(cookie.getMaxAge(), -1);
+        assertEquals(cookie.getMaxAge(), Integer.MIN_VALUE);
     }
 
 }

File: providers/netty4/src/test/java/org/asynchttpclient/providers/netty4/NettyAsyncResponseTest.java
Patch:
@@ -87,7 +87,7 @@ public FluentCaseInsensitiveStringsMap getHeaders() {
         assertEquals(cookies.size(), 1);
 
         Cookie cookie = cookies.get(0);
-        assertEquals(cookie.getMaxAge(), -1);
+        assertEquals(cookie.getMaxAge(), Integer.MIN_VALUE);
     }
 
 }

File: api/src/test/java/org/asynchttpclient/ws/TextMessageTest.java
Patch:
@@ -17,6 +17,7 @@
 import static org.testng.Assert.fail;
 
 import java.net.ConnectException;
+import java.net.UnknownHostException;
 import java.nio.channels.UnresolvedAddressException;
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutionException;
@@ -82,7 +83,7 @@ public void onEmptyListenerTest() throws Exception {
         }
     }
 
-    @Test(timeOut = 60000, expectedExceptions = { ConnectException.class, UnresolvedAddressException.class })
+    @Test(timeOut = 60000, expectedExceptions = { ConnectException.class, UnresolvedAddressException.class, UnknownHostException.class })
     public void onFailureTest() throws Throwable {
         try (AsyncHttpClient c = getAsyncHttpClient(null)) {
             c.prepareGet("ws://abcdefg").execute(new WebSocketUpgradeHandler.Builder().build()).get();

File: providers/netty3/src/main/java/org/asynchttpclient/providers/netty3/channel/pool/DefaultChannelPool.java
Patch:
@@ -190,7 +190,7 @@ public void run(Timeout timeout) throws Exception {
 
             try {
                 if (LOGGER.isDebugEnabled())
-                    for (String key : partitions.keySet()) {
+                    for (String key : ((Map<String, ConcurrentLinkedQueue<IdleChannel>>) partitions).keySet()) {
                         LOGGER.debug("Entry count for : {} : {}", key, partitions.get(key).size());
                     }
 

File: providers/netty4/src/main/java/org/asynchttpclient/providers/netty4/channel/pool/DefaultChannelPool.java
Patch:
@@ -199,7 +199,7 @@ public void run(Timeout timeout) throws Exception {
 
             try {
                 if (LOGGER.isDebugEnabled())
-                    for (String key : partitions.keySet()) {
+                    for (String key : ((Map<String, ConcurrentLinkedQueue<IdleChannel>>) partitions).keySet()) {
                         LOGGER.debug("Entry count for : {} : {}", key, partitions.get(key).size());
                     }
 

File: api/src/test/java/org/asynchttpclient/async/BasicHttpsTest.java
Patch:
@@ -94,7 +94,7 @@ public void reconnectsAfterFailedCertificationPath() throws Exception {
             } catch (final ExecutionException e) {
                 cause = e.getCause();
             }
-            assertTrue(cause instanceof SSLHandshakeException, "Expected an SSLHandshakeException, got a " + cause);
+            assertNotNull(cause);
 
             // second request should succeed
             trust.set(true);
@@ -104,7 +104,7 @@ public void reconnectsAfterFailedCertificationPath() throws Exception {
         }
     }
 
-    @Test(timeOut = 2000, expectedExceptions = { SSLHandshakeException.class } )
+    @Test(timeOut = 2000, expectedExceptions = { Exception.class } )
     public void failInstantlyIfNotAllowedSelfSignedCertificate() throws Throwable {
 
         try (AsyncHttpClient client = getAsyncHttpClient(new Builder().setRequestTimeout(2000).build())) {

File: api/src/main/java/org/asynchttpclient/AsyncCompletionHandler.java
Patch:
@@ -72,9 +72,6 @@ public void onThrowable(Throwable t) {
 
     /**
      * Invoked once the HTTP response processing is finished.
-     * <p/>
-     * <p/>
-     * Gets always invoked as last callback method.
      *
      * @param response The {@link Response}
      * @return T Value that will be returned by the associated {@link java.util.concurrent.Future}

File: providers/netty3/src/main/java/org/asynchttpclient/providers/netty3/channel/ChannelManager.java
Patch:
@@ -284,10 +284,10 @@ protected String getTargetContentEncoding(String contentEncoding) throws Excepti
     public final void tryToOfferChannelToPool(Channel channel, boolean keepAlive, String partition) {
         if (channel.isConnected() && keepAlive && channel.isReadable()) {
             LOGGER.debug("Adding key: {} for channel {}", partition, channel);
+            Channels.setDiscard(channel);
             channelPool.offer(channel, partition);
             if (maxConnectionsPerHostEnabled)
                 channelId2KeyPool.putIfAbsent(channel.getId(), partition);
-            Channels.setDiscard(channel);
         } else {
             // not offered
             closeChannel(channel);

File: providers/netty3/src/main/java/org/asynchttpclient/providers/netty3/request/NettyConnectListener.java
Patch:
@@ -74,7 +74,7 @@ private void writeRequest(Channel channel, String poolKey) {
         if (future.getAsyncHandler() instanceof AsyncHandlerExtensions)
             AsyncHandlerExtensions.class.cast(future.getAsyncHandler()).onConnectionOpen();
 
-        channelManager.registerOpenChannel(channel);
+        channelManager.registerOpenChannel(channel, poolKey);
         requestSender.writeRequest(future, channel);
     }
 

File: providers/netty4/src/main/java/org/asynchttpclient/providers/netty4/request/NettyConnectListener.java
Patch:
@@ -70,7 +70,7 @@ private void writeRequest(Channel channel) {
         if (future.getAsyncHandler() instanceof AsyncHandlerExtensions)
             AsyncHandlerExtensions.class.cast(future.getAsyncHandler()).onConnectionOpen();
 
-        channelManager.registerOpenChannel(channel);
+        channelManager.registerOpenChannel(channel, poolKey);
         future.attachChannel(channel, false);
         requestSender.writeRequest(future, channel);
     }

File: api/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
Patch:
@@ -232,7 +232,7 @@ public <T> ListenableFuture<T> executeRequest(Request request, AsyncHandler<T> h
             return httpProvider.execute(request, handler);
 
         } else {
-            FilterContext<T> fc = new FilterContext.FilterContextBuilder<>().asyncHandler(handler).request(request).build();
+            FilterContext<T> fc = new FilterContext.FilterContextBuilder<T>().asyncHandler(handler).request(request).build();
             try {
                 fc = preProcessRequest(fc);
             } catch (Exception e) {

File: api/src/test/java/org/asynchttpclient/async/FilterTest.java
Patch:
@@ -140,7 +140,7 @@ public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException
 
                 if (replay.getAndSet(false)) {
                     Request request = new RequestBuilder(ctx.getRequest()).addHeader("X-Replay", "true").build();
-                    return new FilterContext.FilterContextBuilder<>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
+                    return new FilterContext.FilterContextBuilder<T>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
                 }
                 return ctx;
             }
@@ -166,7 +166,7 @@ public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException
 
                 if (ctx.getResponseStatus() != null && ctx.getResponseStatus().getStatusCode() == 200 && replay.getAndSet(false)) {
                     Request request = new RequestBuilder(ctx.getRequest()).addHeader("X-Replay", "true").build();
-                    return new FilterContext.FilterContextBuilder<>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
+                    return new FilterContext.FilterContextBuilder<T>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
                 }
                 return ctx;
             }
@@ -193,7 +193,7 @@ public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException
                 if (ctx.getResponseHeaders() != null && ctx.getResponseHeaders().getHeaders().getFirstValue("Ping").equals("Pong") && replay.getAndSet(false)) {
 
                     Request request = new RequestBuilder(ctx.getRequest()).addHeader("Ping", "Pong").build();
-                    return new FilterContext.FilterContextBuilder<>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
+                    return new FilterContext.FilterContextBuilder<T>().asyncHandler(ctx.getAsyncHandler()).request(request).replayRequest(true).build();
                 }
                 return ctx;
             }

File: providers/netty3/src/test/java/org/asynchttpclient/providers/netty3/NettyRequestThrottleTimeoutTest.java
Patch:
@@ -85,7 +85,7 @@ public void testRequestTimeout() throws IOException {
 
         try (AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setMaxConnections(1).build())) {
             final CountDownLatch latch = new CountDownLatch(samples);
-            final List<Exception> tooManyConnections = Collections.synchronizedList(new ArrayList<>(2));
+            final List<Exception> tooManyConnections = Collections.synchronizedList(new ArrayList<Exception>(2));
 
             for (int i = 0; i < samples; i++) {
                 new Thread(new Runnable() {

File: api/src/main/java/org/asynchttpclient/Request.java
Patch:
@@ -115,7 +115,7 @@ public interface Request {
     /**
      * Return the current form parameters.
      *
-     * @return a {@link FluentStringsMap} of parameters.
+     * @return a {@link List<Param>} of parameters.
      */
     List<Param> getFormParams();
 
@@ -136,7 +136,7 @@ public interface Request {
     /**
      * Return the query params.
      *
-     * @return {@link FluentStringsMap} of query string
+     * @return {@link List<Param>} of query string
      */
     List<Param> getQueryParams();
 

File: providers/netty3/src/main/java/org/asynchttpclient/providers/netty3/handler/Protocol.java
Patch:
@@ -138,12 +138,12 @@ protected boolean exitAfterHandlingRedirect(//
                 String location = responseHeaders.get(HttpHeaders.Names.LOCATION);
                 Uri uri = Uri.create(future.getUri(), location);
 
+                if (config.isRemoveQueryParamOnRedirect())
+                    uri = uri.withNewQuery(null);
+
                 if (!uri.equals(future.getUri())) {
                     final RequestBuilder requestBuilder = new RequestBuilder(future.getRequest());
 
-                    if (!config.isRemoveQueryParamOnRedirect())
-                        requestBuilder.addQueryParams(future.getRequest().getQueryParams());
-
                     // if we are to strictly handle 302, we should keep the original method (which browsers don't)
                     // 303 must force GET
                     if ((statusCode == FOUND.getCode() && !config.isStrict302Handling()) || statusCode == SEE_OTHER.getCode())

File: api/src/test/java/org/asynchttpclient/async/AsyncProvidersBasicTest.java
Patch:
@@ -73,7 +73,7 @@ public void asyncProviderEncodingTest() throws Exception {
         AsyncHttpClient client = getAsyncHttpClient(null);
         try {
             Request request = new RequestBuilder("GET").setUrl(getTargetUrl() + "?q=+%20x").build();
-            assertEquals(request.getUrl(), getTargetUrl() + "?q=%20%20x");
+            assertEquals(request.getUrl(), getTargetUrl() + "?q=+%20x");
 
             String url = client.executeRequest(request, new AsyncCompletionHandler<String>() {
                 @Override
@@ -88,7 +88,7 @@ public void onThrowable(Throwable t) {
                 }
 
             }).get();
-            assertEquals(url, getTargetUrl() + "?q=%20%20x");
+            assertEquals(url, getTargetUrl() + "?q=+%20x");
         } finally {
             client.close();
         }

File: api/src/test/java/org/asynchttpclient/async/QueryParametersTest.java
Patch:
@@ -109,7 +109,7 @@ public void urlWithColonTest() throws Exception {
             String query = "test:colon:";
             Response response = c.prepareGet(String.format("http://127.0.0.1:%d/foo/test/colon?q=%s", port1, query)).setHeader("Content-Type", "text/html").execute().get(TIMEOUT, TimeUnit.SECONDS);
 
-            assertEquals(response.getHeader("q"), URLEncoder.encode(query, UTF_8.name()));
+            assertEquals(response.getHeader("q"), query);
         } finally {
             c.close();
         }

File: providers/netty3/src/main/java/org/asynchttpclient/providers/netty3/request/NettyRequestFactory.java
Patch:
@@ -22,7 +22,7 @@
 import static org.asynchttpclient.util.AsyncHttpProviderUtils.getAuthority;
 import static org.asynchttpclient.util.AsyncHttpProviderUtils.getNonEmptyPath;
 import static org.asynchttpclient.util.AsyncHttpProviderUtils.keepAliveHeaderValue;
-import static org.asynchttpclient.util.AsyncHttpProviderUtils.formParams2UTF8String;
+import static org.asynchttpclient.util.AsyncHttpProviderUtils.urlEncodeFormParams;
 import static org.asynchttpclient.util.AuthenticatorUtils.computeBasicAuthentication;
 import static org.asynchttpclient.util.AuthenticatorUtils.computeDigestAuthentication;
 import static org.asynchttpclient.util.MiscUtils.isNonEmpty;
@@ -229,7 +229,7 @@ else if (isNonEmpty(request.getFormParams())) {
                 if (!request.getHeaders().containsKey(HttpHeaders.Names.CONTENT_TYPE))
                     contentType = HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED;
 
-                nettyBody = new NettyByteArrayBody(formParams2UTF8String(request.getFormParams()).getBytes(bodyCharset), contentType);
+                nettyBody = new NettyByteArrayBody(urlEncodeFormParams(request.getFormParams()).getBytes(bodyCharset), contentType);
 
             } else if (isNonEmpty(request.getParts()))
                 nettyBody = new NettyMultipartBody(request.getParts(), request.getHeaders(), nettyConfig);

File: providers/netty4/src/main/java/org/asynchttpclient/providers/netty4/request/NettyRequestFactory.java
Patch:
@@ -22,7 +22,7 @@
 import static org.asynchttpclient.util.AsyncHttpProviderUtils.getAuthority;
 import static org.asynchttpclient.util.AsyncHttpProviderUtils.getNonEmptyPath;
 import static org.asynchttpclient.util.AsyncHttpProviderUtils.keepAliveHeaderValue;
-import static org.asynchttpclient.util.AsyncHttpProviderUtils.formParams2UTF8String;
+import static org.asynchttpclient.util.AsyncHttpProviderUtils.urlEncodeFormParams;
 import static org.asynchttpclient.util.AuthenticatorUtils.computeBasicAuthentication;
 import static org.asynchttpclient.util.AuthenticatorUtils.computeDigestAuthentication;
 import static org.asynchttpclient.util.MiscUtils.isNonEmpty;
@@ -230,7 +230,7 @@ else if (isNonEmpty(request.getFormParams())) {
                     contentType = HttpHeaders.Values.APPLICATION_X_WWW_FORM_URLENCODED;
 
                 // FIXME could this be done with Netty's ByteBuf?
-                nettyBody = new NettyByteArrayBody(formParams2UTF8String(request.getFormParams()).getBytes(bodyCharset), contentType);
+                nettyBody = new NettyByteArrayBody(urlEncodeFormParams(request.getFormParams()).getBytes(bodyCharset), contentType);
 
             } else if (isNonEmpty(request.getParts()))
                 nettyBody = new NettyMultipartBody(request.getParts(), request.getHeaders(), nettyConfig);

File: providers/netty3/src/test/java/org/asynchttpclient/providers/netty3/NettyConnectionPoolTest.java
Patch:
@@ -68,7 +68,7 @@ public boolean isOpen() {
             }
             assertNotNull(exception);
             assertNotNull(exception.getCause());
-            assertEquals(exception.getCause().getMessage(), "Too many connections -1");
+            assertEquals(exception.getCause().getMessage(), "Pool is already closed");
         } finally {
             client.close();
         }

File: providers/netty4/src/test/java/org/asynchttpclient/providers/netty4/NettyConnectionPoolTest.java
Patch:
@@ -70,7 +70,7 @@ public boolean isOpen() {
             }
             assertNotNull(exception);
             assertNotNull(exception.getCause());
-            assertEquals(exception.getCause().getMessage(), "Too many connections -1");
+            assertEquals(exception.getCause().getMessage(), "Pool is already closed");
         } finally {
             client.close();
         }

File: api/src/main/java/org/asynchttpclient/Realm.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class Realm {
 
-    private static final String NC = "00000001";
+    private static final String DEFAULT_NC = "00000001";
 
     private final String principal;
     private final String password;
@@ -263,7 +263,7 @@ public static class RealmBuilder {
         private String response = "";
         private String opaque = "";
         private String qop = "auth";
-        private String nc = "00000001";
+        private String nc = DEFAULT_NC;
         private String cnonce = "";
         private Uri uri;
         private String methodName = "GET";
@@ -565,7 +565,7 @@ private void newResponse() {
             
             if (isNonEmpty(qop)) {
                 //qop ="auth" or "auth-int"
-                sb.append(NC)//
+                sb.append(nc)//
                         .append(':')//
                         .append(cnonce)//
                         .append(':')//

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -604,9 +604,9 @@ public Builder setMaxConnections(int maxConnections) {
         }
 
         /**
-         * Set the maximum number of connections per hosts an {@link AsyncHttpClient} can handle.
+         * Set the maximum number of connections per (scheme, host, port) an {@link AsyncHttpClient} can handle.
          *
-         * @param maxConnectionsPerHost the maximum number of connections per host an {@link AsyncHttpClient} can handle.
+         * @param maxConnectionsPerHost the maximum number of connections per (scheme, host, port) an {@link AsyncHttpClient} can handle.
          * @return a {@link Builder}
          */
         public Builder setMaxConnectionsPerHost(int maxConnectionsPerHost) {

File: providers/netty3/src/main/java/org/asynchttpclient/providers/netty3/request/timeout/ReadTimeoutTimerTask.java
Patch:
@@ -66,8 +66,5 @@ public void run(Timeout timeout) throws Exception {
             // otherwise, no need to reschedule: requestTimeout will happen sooner
             timeoutsHolder.readTimeout = null;
         }
-
-        // this task should be evacuated from the timer but who knows
-        nettyResponseFuture = null;
     }
 }

File: providers/netty3/src/main/java/org/asynchttpclient/providers/netty3/request/timeout/RequestTimeoutTimerTask.java
Patch:
@@ -45,8 +45,5 @@ public void run(Timeout timeout) throws Exception {
         String message = "Request timed out to " + remoteAddress + " of " + requestTimeout + " ms";
         long age = millisTime() - nettyResponseFuture.getStart();
         expire(message, age);
-        
-        // this task should be evacuated from the timer but who knows
-        nettyResponseFuture = null;
     }
 }

File: providers/netty4/src/main/java/org/asynchttpclient/providers/netty4/request/timeout/ReadTimeoutTimerTask.java
Patch:
@@ -67,8 +67,5 @@ public void run(Timeout timeout) throws Exception {
             // otherwise, no need to reschedule: requestTimeout will happen sooner
             timeoutsHolder.readTimeout = null;
         }
-
-        // this task should be evacuated from the timer but who knows
-        nettyResponseFuture = null;
     }
 }

File: providers/netty4/src/main/java/org/asynchttpclient/providers/netty4/request/timeout/RequestTimeoutTimerTask.java
Patch:
@@ -46,8 +46,5 @@ public void run(Timeout timeout) throws Exception {
         String message = "Request timed out to " + remoteAddress + " of " + requestTimeout + " ms";
         long age = millisTime() - nettyResponseFuture.getStart();
         expire(message, age);
-        
-        // this task should be evacuated from the timer but who knows
-        nettyResponseFuture = null;
     }
 }

File: providers/netty3/src/main/java/org/asynchttpclient/providers/netty3/request/NettyConnectListener.java
Patch:
@@ -133,7 +133,7 @@ private void onFutureFailure(Channel channel, Throwable cause) {
         LOGGER.debug("Trying to recover from failing to connect channel {} with a retry value of {} ", channel, canRetry);
         if (canRetry
                 && cause != null
-                && (cause instanceof ClosedChannelException || future.getState() != NettyResponseFuture.STATE.NEW || StackTraceInspector.abortOnDisconnectException(cause))) {
+                && (cause instanceof ClosedChannelException || future.getState() != NettyResponseFuture.STATE.NEW || StackTraceInspector.abortOnNetty3DisconnectException(cause))) {
 
             if (!requestSender.retry(future))
                 return;

File: providers/netty4/src/main/java/org/asynchttpclient/providers/netty4/request/NettyConnectListener.java
Patch:
@@ -131,7 +131,7 @@ private void onFutureFailure(Channel channel, Throwable cause) {
         LOGGER.debug("Trying to recover from failing to connect channel {} with a retry value of {} ", channel, canRetry);
         if (canRetry//
                 && cause != null//
-                && (cause instanceof ClosedChannelException || future.getState() != NettyResponseFuture.STATE.NEW || StackTraceInspector.abortOnDisconnectException(cause))) {
+                && (cause instanceof ClosedChannelException || future.getState() != NettyResponseFuture.STATE.NEW || StackTraceInspector.abortOnNetty4DisconnectException(cause))) {
 
             if (requestSender.retry(future)) {
                 return;

File: api/src/main/java/org/asynchttpclient/resumable/ResumableAsyncHandler.java
Patch:
@@ -208,7 +208,7 @@ public Request adjustRequestRange(Request request) {
         }
 
         RequestBuilder builder = new RequestBuilder(request);
-        if (request.getHeaders().get("Range") == null && byteTransferred.get() != 0) {
+        if (request.getHeaders().get("Range").isEmpty() && byteTransferred.get() != 0) {
             builder.setHeader("Range", "bytes=" + byteTransferred.get() + "-");
         }
         return builder.build();

File: api/src/test/java/org/asynchttpclient/async/AsyncProvidersBasicTest.java
Patch:
@@ -687,7 +687,8 @@ public Response onCompleted(Response response) throws Exception {
     
     @Test(groups = { "standalone", "default_provider", "async" })
     public void asyncDoPostBasicGZIPTest() throws Exception {
-        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().build());
+        AsyncHttpClientConfig cf = new AsyncHttpClientConfig.Builder().setCompressionEnforced(true).build();
+        AsyncHttpClient client = getAsyncHttpClient(cf);
         try {
             final CountDownLatch l = new CountDownLatch(1);
             FluentCaseInsensitiveStringsMap h = new FluentCaseInsensitiveStringsMap();

File: api/src/test/java/org/asynchttpclient/async/MaxTotalConnectionTest.java
Patch:
@@ -77,6 +77,7 @@ public void testMaxTotalConnections() throws InterruptedException {
                 .setAllowPoolingConnections(false).setMaxConnections(2).setMaxConnectionsPerHost(1).build());
 
         final CountDownLatch latch = new CountDownLatch(2);
+        final AtomicReference<Throwable> ex = new AtomicReference<Throwable>();
         final AtomicReference<String> failedUrl = new AtomicReference<String>();
 
         try {
@@ -93,13 +94,15 @@ public Response onCompleted(Response response) throws Exception {
                     @Override
                     public void onThrowable(Throwable t) {
                         super.onThrowable(t);
+                        ex.set(t);
                         failedUrl.set(thisUrl);
                         latch.countDown();
                     }
                 });
             }
 
             latch.await();
+            assertNull(ex.get());
             assertNull(failedUrl.get());
 
         } finally {

File: api/src/test/java/org/asynchttpclient/async/RemoteSiteTest.java
Patch:
@@ -187,7 +187,8 @@ public void asyncFullBodyProperlyRead() throws Exception {
         }
     }
 
-    @Test(groups = { "online", "default_provider" })
+    // FIXME Get a 302 in France...
+    @Test(groups = { "online", "default_provider" }, enabled = false)
     public void testUrlRequestParametersEncoding() throws Exception {
         AsyncHttpClient client = getAsyncHttpClient(null);
         try {

File: extras/registry/src/test/java/org/asynchttpclient/extras/registry/Netty3AsyncHttpClientFactoryTest.java
Patch:
@@ -15,11 +15,11 @@
 import org.asynchttpclient.AsyncHttpClientConfig;
 import org.asynchttpclient.AsyncHttpProvider;
 import org.asynchttpclient.extras.registry.AbstractAsyncHttpClientFactoryTest;
-import org.asynchttpclient.providers.netty.NettyAsyncHttpProvider;
+import org.asynchttpclient.providers.netty3.NettyAsyncHttpProvider;
 import org.testng.annotations.Test;
 
 @Test
-public class NettyAsyncHttpClientFactoryTest extends AbstractAsyncHttpClientFactoryTest {
+public class Netty3AsyncHttpClientFactoryTest extends AbstractAsyncHttpClientFactoryTest {
 
     @Override
     public AsyncHttpProvider getAsyncHttpProvider(AsyncHttpClientConfig config) {

File: api/src/main/java/org/asynchttpclient/uri/UriParser.java
Patch:
@@ -212,6 +212,8 @@ private void removeEmbedded2Dots() {
                 if (end >= 0 && path.indexOf("/../", end) != 0) {
                     path = path.substring(0, end) + path.substring(i + 3);
                     i = 0;
+                } else if (end == 0) {
+                    break;
                 }
             } else
                 i = i + 3;

File: api/src/main/java/org/asynchttpclient/uri/UriParser.java
Patch:
@@ -212,6 +212,8 @@ private void removeEmbedded2Dots() {
                 if (end >= 0 && path.indexOf("/../", end) != 0) {
                     path = path.substring(0, end) + path.substring(i + 3);
                     i = 0;
+                } else if (end == 0) {
+                    break;
                 }
             } else
                 i = i + 3;

File: api/src/main/java/org/asynchttpclient/AsyncCompletionHandler.java
Patch:
@@ -28,7 +28,7 @@
  */
 public abstract class AsyncCompletionHandler<T> implements AsyncHandler<T>, ProgressAsyncHandler<T> {
 
-    private static final Logger log = LoggerFactory.getLogger(AsyncCompletionHandler.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncCompletionHandler.class);
     private final Response.ResponseBuilder builder = new Response.ResponseBuilder();
 
     /**
@@ -67,7 +67,7 @@ public final T onCompleted() throws Exception {
      * {@inheritDoc}
      */
     public void onThrowable(Throwable t) {
-        log.debug(t.getMessage(), t);
+        LOGGER.debug(t.getMessage(), t);
     }
 
     /**

File: api/src/main/java/org/asynchttpclient/AsyncCompletionHandler.java
Patch:
@@ -28,7 +28,7 @@
  */
 public abstract class AsyncCompletionHandler<T> implements AsyncHandler<T>, ProgressAsyncHandler<T> {
 
-    private final Logger log = LoggerFactory.getLogger(AsyncCompletionHandlerBase.class);
+    private static final Logger log = LoggerFactory.getLogger(AsyncCompletionHandler.class);
     private final Response.ResponseBuilder builder = new Response.ResponseBuilder();
 
     /**

File: api/src/test/java/org/asynchttpclient/AsyncHttpClientDefaultsTest.java
Patch:
@@ -21,7 +21,7 @@ public void testDefaultMaxConnectionPerHost() {
     }
 
     public void testDefaultConnectTimeOut() {
-        Assert.assertEquals(AsyncHttpClientConfigDefaults.defaultConnectTimeout(), 60 * 1000);
+        Assert.assertEquals(AsyncHttpClientConfigDefaults.defaultConnectTimeout(), 5 * 1000);
         testIntegerSystemProperty("connectTimeout", "defaultConnectTimeout", "100");
     }
 

File: api/src/main/java/org/asynchttpclient/AsyncCompletionHandler.java
Patch:
@@ -28,7 +28,7 @@
  */
 public abstract class AsyncCompletionHandler<T> implements AsyncHandler<T>, ProgressAsyncHandler<T> {
 
-    private final Logger log = LoggerFactory.getLogger(AsyncCompletionHandlerBase.class);
+    private static final Logger log = LoggerFactory.getLogger(AsyncCompletionHandler.class);
     private final Response.ResponseBuilder builder = new Response.ResponseBuilder();
 
     /**

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/AsyncHttpClientFilter.java
Patch:
@@ -457,7 +457,7 @@ private String generateAuthHeader(final Realm realm) {
             case DIGEST:
                 return computeDigestAuthentication(realm);
             case NTLM:
-                return NTLM_ENGINE.generateType1Msg("NTLM " + realm.getNtlmDomain(), realm.getNtlmHost());
+                return NTLM_ENGINE.generateType1Msg();
             default:
                 return null;
             }

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/ProxyFilter.java
Patch:
@@ -102,7 +102,7 @@ private String generateAuthHeader(final Realm realm) {
             case DIGEST:
                 return computeDigestAuthentication(realm);
             case NTLM:
-                return NTLM_ENGINE.generateType1Msg("NTLM " + realm.getNtlmDomain(), realm.getNtlmHost());
+                return NTLM_ENGINE.generateType1Msg();
             default:
                 return null;
             }

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/statushandler/ProxyAuthorizationHandler.java
Patch:
@@ -78,7 +78,7 @@ public boolean handleStatus(final HttpResponsePacket responsePacket, final HttpT
             String msg;
             try {
                 if (isNTLMFirstHandShake(proxyAuth)) {
-                    msg = GrizzlyAsyncHttpProvider.NTLM_ENGINE.generateType1Msg(proxyServer.getNtlmDomain(), "");
+                    msg = GrizzlyAsyncHttpProvider.NTLM_ENGINE.generateType1Msg();
                 } else {
                     String serverChallenge = proxyAuth.trim().substring("NTLM ".length());
                     msg = GrizzlyAsyncHttpProvider.NTLM_ENGINE.generateType3Msg(principal, password, proxyServer.getNtlmDomain(),

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/handler/HttpProtocol.java
Patch:
@@ -110,7 +110,7 @@ private Realm ntlmChallenge(String authenticateHeader, Request request, ProxySer
 
         if (authenticateHeader.equals("NTLM")) {
             // server replied bare NTLM => we didn't preemptively sent Type1Msg
-            String challengeHeader = NTLMEngine.INSTANCE.generateType1Msg(ntlmDomain, ntlmHost);
+            String challengeHeader = NTLMEngine.INSTANCE.generateType1Msg();
 
             addNTLMAuthorizationHeader(headers, challengeHeader, proxyInd);
             future.getAndSetAuth(false);

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyRequestFactory.java
Patch:
@@ -105,7 +105,7 @@ public String firstRequestOnlyAuthorizationHeader(Request request, Uri uri, Prox
                     domain = realm.getNtlmDomain();
                 }
                 try {
-                    String msg = NTLMEngine.INSTANCE.generateType1Msg("NTLM " + domain, realm.getNtlmHost());
+                    String msg = NTLMEngine.INSTANCE.generateType1Msg(domain, realm.getNtlmHost());
                     authorizationHeader = "NTLM " + msg;
                 } catch (NTLMEngineException e) {
                     throw new IOException(e);

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyRequestSender.java
Patch:
@@ -204,7 +204,7 @@ private <T> ListenableFuture<T> sendRequestWithCachedChannel(Request request, Ur
         future.setState(NettyResponseFuture.STATE.POOLED);
         future.attachChannel(channel, false);
 
-        LOGGER.debug("\nUsing cached Channel {}\n for request \n{}\n", channel, future.getNettyRequest().getHttpRequest());
+        LOGGER.debug("Using cached Channel {}\n for request \n{}\n", channel, future.getNettyRequest().getHttpRequest());
         Channels.setAttribute(channel, future);
 
         try {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/channel/pool/DefaultChannelPool.java
Patch:
@@ -121,7 +121,7 @@ private boolean isTTLExpired(Channel channel, long now) {
             return false;
 
         ChannelCreation creation = channel2Creation.get(channel);
-        return creation == null || now - creation.creationTime >= maxConnectionTTL;
+        return creation != null && now - creation.creationTime >= maxConnectionTTL;
     }
 
     private boolean isRemotelyClosed(Channel channel) {

File: api/src/test/java/org/asynchttpclient/async/AsyncProvidersBasicTest.java
Patch:
@@ -659,7 +659,7 @@ public void asyncDoPostMultiPartTest() throws Exception {
         try {
             final CountDownLatch l = new CountDownLatch(1);
 
-            Part p = new StringPart("foo", "bar", UTF_8);
+            Part p = new StringPart("foo", "bar");
 
             client.preparePost(getTargetUrl()).addBodyPart(p).execute(new AsyncCompletionHandlerAdapter() {
 

File: api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java
Patch:
@@ -41,7 +41,7 @@ public void testBasics() {
         parts.add(new ByteArrayPart("baPart", "testMultiPart".getBytes(UTF_8), "application/test", UTF_8, "fileName"));
 
         // add a string
-        parts.add(new StringPart("stringPart", "testString", UTF_8));
+        parts.add(new StringPart("stringPart", "testString"));
 
         compareContentLength(parts);
     }

File: providers/netty/src/test/java/org/asynchttpclient/providers/netty/NettyConnectionPoolTest.java
Patch:
@@ -62,7 +62,8 @@ public boolean isOpen() {
                 exception = ex;
             }
             assertNotNull(exception);
-            assertEquals(exception.getMessage(), "Too many connections -1");
+            assertNotNull(exception.getCause());
+            assertEquals(exception.getCause().getMessage(), "Too many connections -1");
         } finally {
             client.close();
         }

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyConnectListener.java
Patch:
@@ -124,7 +124,7 @@ public void onFutureFailure(Channel channel, Throwable cause) {
         abortChannelPreemption(poolKey);
 
         boolean canRetry = future.canRetry();
-        LOGGER.debug("Trying to recover a dead cached channel {} with a retry value of {} ", channel, canRetry);
+        LOGGER.debug("Trying to recover from failing to connect channel {} with a retry value of {} ", channel, canRetry);
         if (canRetry//
                 && cause != null//
                 && (cause instanceof ClosedChannelException || future.getState() != NettyResponseFuture.STATE.NEW || StackTraceInspector.abortOnDisconnectException(cause))) {
@@ -134,7 +134,7 @@ public void onFutureFailure(Channel channel, Throwable cause) {
             }
         }
 
-        LOGGER.debug("Failed to recover from exception: {} with channel {}", cause, channel);
+        LOGGER.debug("Failed to recover from connect exception: {} with channel {}", cause, channel);
 
         boolean printCause = cause != null && cause.getMessage() != null;
         String url = future.getUri().toUrl();

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/future/NettyResponseFuture.java
Patch:
@@ -427,7 +427,7 @@ public boolean canRetry() {
     }
 
     public SocketAddress getChannelRemoteAddress() {
-        return channel() != null ? channel().remoteAddress() : null;
+        return channel != null ? channel.remoteAddress() : null;
     }
 
     public void setRequest(Request request) {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/timeout/TimeoutTimerTask.java
Patch:
@@ -15,6 +15,7 @@
 
 import io.netty.util.TimerTask;
 
+import java.net.SocketAddress;
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -38,7 +39,8 @@ public TimeoutTimerTask(NettyResponseFuture<?> nettyResponseFuture, NettyRequest
         this.requestSender = requestSender;
         this.timeoutsHolder = timeoutsHolder;
         // saving remote address as the channel might be removed from the future when an exception occurs
-        remoteAddress = nettyResponseFuture.getChannelRemoteAddress().toString();
+        SocketAddress sa = nettyResponseFuture.getChannelRemoteAddress();
+        remoteAddress = sa != null ? sa.toString() : "not-connected";
     }
 
     protected void expire(String message, long time) {

File: api/src/main/java/org/asynchttpclient/PerHostConnectionPoolPartitioning.java
Patch:
@@ -18,7 +18,7 @@
 import org.asynchttpclient.uri.Uri;
 import org.asynchttpclient.util.AsyncHttpProviderUtils;
 
-public enum PerHostConnectionPoolPartioning implements ConnectionPoolPartitioning {
+public enum PerHostConnectionPoolPartitioning implements ConnectionPoolPartitioning {
 
     INSTANCE;
 

File: api/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -66,7 +66,7 @@ private static final class RequestImpl implements Request {
         private int requestTimeoutInMs;
         private long rangeOffset;
         public String charset;
-        private ConnectionPoolPartitioning connectionPoolPartitioning = PerHostConnectionPoolPartioning.INSTANCE;
+        private ConnectionPoolPartitioning connectionPoolPartitioning = PerHostConnectionPoolPartitioning.INSTANCE;
         private List<Param> queryParams;
 
         public RequestImpl() {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyConnectListener.java
Patch:
@@ -137,7 +137,7 @@ public void onFutureFailure(Channel channel, Throwable cause) {
         LOGGER.debug("Failed to recover from exception: {} with channel {}", cause, channel);
 
         boolean printCause = cause != null && cause.getMessage() != null;
-        String url = future.getUrl();
+        String url = future.getUri().toUrl();
         String printedCause = printCause ? cause.getMessage() + " to " + url : url;
         ConnectException e = new ConnectException(printedCause);
         if (cause != null)

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/channel/ChannelManager.java
Patch:
@@ -307,14 +307,14 @@ public void close() {
     }
 
     public void closeChannel(Channel channel) {
-        removeAll(channel);
-        Channels.setDiscard(channel);
 
         // The channel may have already been removed if a timeout occurred, and
         // this method may be called just after.
         if (channel != null) {
             LOGGER.debug("Closing Channel {} ", channel);
             try {
+                removeAll(channel);
+                Channels.setDiscard(channel);
                 channel.close();
             } catch (Throwable t) {
                 LOGGER.debug("Error closing a connection", t);

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/body/BodyFileRegion.java
Patch:
@@ -52,7 +52,7 @@ public long transfered() {
 
     @Override
     public long transferTo(WritableByteChannel target, long position) throws IOException {
-        long written = body.transferTo(position, Long.MAX_VALUE, target);
+        long written = body.transferTo(position, target);
         if (written > 0) {
             transfered += written;
         }

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyConnectListener.java
Patch:
@@ -126,7 +126,6 @@ public void onFutureFailure(Channel channel, Throwable cause) {
                 && cause != null//
                 && (cause instanceof ClosedChannelException || future.getState() != NettyResponseFuture.STATE.NEW || StackTraceInspector.abortOnDisconnectException(cause))) {
 
-            LOGGER.debug("Retrying {} ", future.getNettyRequest());
             if (requestSender.retry(future, channel)) {
                 return;
             }

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyRequestSender.java
Patch:
@@ -418,7 +418,7 @@ public boolean retry(NettyResponseFuture<?> future, Channel channel) {
             future.setState(NettyResponseFuture.STATE.RECONNECTED);
             future.getAndSetStatusReceived(false);
 
-            LOGGER.debug("Trying to recover request {}\n", future.getNettyRequest());
+            LOGGER.debug("Trying to recover request {}\n", future.getNettyRequest().getHttpRequest());
             if (future.getAsyncHandler() instanceof AsyncHandlerExtensions) {
                 AsyncHandlerExtensions.class.cast(future.getAsyncHandler()).onRetry();
             }

File: api/src/test/java/org/asynchttpclient/async/RemoteSiteTest.java
Patch:
@@ -119,7 +119,7 @@ public void testGoogleComWithTimeout() throws Exception {
         try {
             Response response = c.prepareGet("http://google.com/").execute().get(10, TimeUnit.SECONDS);
             assertNotNull(response);
-            assertEquals(response.getStatusCode(), 302);
+            assertTrue(response.getStatusCode() == 301 || response.getStatusCode() == 302);
         } finally {
             c.close();
         }

File: api/src/main/java/org/asynchttpclient/multipart/PartBase.java
Patch:
@@ -55,15 +55,15 @@ public abstract class PartBase implements Part {
      * @param name The name of the part, or <code>null</code>
      * @param contentType The content type, or <code>null</code>
      * @param charSet The character encoding, or <code>null</code>
-     * @param transferEncoding The transfer encoding, or <code>null</code>
      * @param contentId The content id, or <code>null</code>
+     * @param transferEncoding The transfer encoding, or <code>null</code>
      */
-    public PartBase(String name, String contentType, String charSet, String transferEncoding, String contentId) {
+    public PartBase(String name, String contentType, String charSet, String contentId, String transferEncoding) {
         this.name = name;
         this.contentType = contentType;
         this.charSet = charSet;
-        this.transferEncoding = transferEncoding;
         this.contentId = contentId;
+        this.transferEncoding = transferEncoding;
     }
 
     protected void visitStart(PartVisitor visitor, byte[] boundary) throws IOException {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/channel/pool/DefaultChannelPool.java
Patch:
@@ -150,9 +150,9 @@ private List<IdleChannel> expiredChannels(ConcurrentLinkedQueue<IdleChannel> poo
         }
 
         private boolean isChannelCloseable(Channel channel) {
-            Object attachment = Channels.getDefaultAttribute(channel);
-            if (attachment instanceof NettyResponseFuture) {
-                NettyResponseFuture<?> future = (NettyResponseFuture<?>) attachment;
+            Object attribute = Channels.getAttribute(channel);
+            if (attribute instanceof NettyResponseFuture) {
+                NettyResponseFuture<?> future = (NettyResponseFuture<?>) attribute;
                 if (!future.isDone())
                     LOGGER.error("Future not in appropriate state %s, not closing", future);
             }

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/handler/HttpProtocol.java
Patch:
@@ -239,7 +239,7 @@ public void call() throws Exception {
                 if (future.isKeepAlive() && HttpHeaders.isTransferEncodingChunked(response))
                     // We must make sure there is no bytes left
                     // before executing the next request.
-                    Channels.setDefaultAttribute(channel, callback);
+                    Channels.setAttribute(channel, callback);
                 else
                     callback.call();
 

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/handler/Protocol.java
Patch:
@@ -144,7 +144,7 @@ protected boolean exitAfterHandlingRedirect(//
                         // We must make sure there is no bytes left before
                         // executing the next request.
                         // FIXME investigate this
-                        Channels.setDefaultAttribute(channel, callback);
+                        Channels.setAttribute(channel, callback);
                     } else {
                         // FIXME don't understand: this offers the connection to the pool, or even closes it, while the
                         // request has not been sent, right?

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/handler/WebSocketProtocol.java
Patch:
@@ -164,7 +164,7 @@ public void handle(Channel channel, NettyResponseFuture<?> future, Object e) thr
     @Override
     public void onError(Channel channel, Throwable e) {
         try {
-            Object attribute = Channels.getDefaultAttribute(channel);
+            Object attribute = Channels.getAttribute(channel);
             logger.warn("onError {}", e);
             if (!(attribute instanceof NettyResponseFuture)) {
                 return;
@@ -186,7 +186,7 @@ public void onError(Channel channel, Throwable e) {
     @Override
     public void onClose(Channel channel) {
         logger.trace("onClose {}");
-        Object attribute = Channels.getDefaultAttribute(channel);
+        Object attribute = Channels.getAttribute(channel);
         if (!(attribute instanceof NettyResponseFuture))
             return;
 

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyConnectListener.java
Patch:
@@ -85,9 +85,9 @@ private void writeRequest(Channel channel) {
     }
 
     public void onFutureSuccess(final Channel channel) throws ConnectException {
-        Channels.setDefaultAttribute(channel, future);
+        Channels.setAttribute(channel, future);
         final HostnameVerifier hostnameVerifier = config.getHostnameVerifier();
-        final SslHandler sslHandler = Channels.getSslHandler(channel);
+        final SslHandler sslHandler = channelManager.getSslHandler(channel.pipeline());
         if (hostnameVerifier != null && sslHandler != null) {
             final String host = future.getURI().getHost();
             sslHandler.handshakeFuture().addListener(new GenericFutureListener<Future<? super Channel>>() {

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/EventHandler.java
Patch:
@@ -185,7 +185,7 @@ public void onInitialLineParsed(HttpHeader httpHeader, FilterChainContext ctx) {
                         try {
                             context.result(handler.onCompleted());
                             context.done();
-                        } catch (Exception e) {
+                        } catch (Throwable e) {
                             context.abort(e);
                         }
                     }
@@ -289,7 +289,7 @@ public void onHttpHeadersParsed(HttpHeader httpHeader, FilterChainContext ctx) {
                             "WebSocket protocol error: unexpected HTTP response status during handshake.");
                     context.result(null);
                 }
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 httpHeader.setSkipRemainder(true);
                 context.abort(e);
             }
@@ -341,7 +341,7 @@ public boolean onHttpPacketParsed(HttpHeader httpHeader, FilterChainContext ctx)
         if (handler != null) {
             try {
                 context.result(handler.onCompleted());
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 context.abort(e);
             }
         } else {

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/ProxyFilter.java
Patch:
@@ -100,7 +100,7 @@ private String generateAuthHeader(final Realm realm) {
             case BASIC:
                 return computeBasicAuthentication(realm);
             case DIGEST:
-                return computeDigestAuthentication(proxyServer);
+                return computeDigestAuthentication(realm);
             case NTLM:
                 return NTLM_ENGINE.generateType1Msg("NTLM " + realm.getNtlmDomain(), realm.getNtlmHost());
             default:

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/TunnelFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2013-2014 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -94,7 +94,7 @@ public NextAction handleEvent(FilterChainContext ctx, FilterChainEvent event) th
             suspendedContext.resume(ctx.getInvokeAction());
 
             // Stop further event processing.
-            ctx.getStopAction();
+            return ctx.getStopAction();
         }
         return ctx.getInvokeAction();
     }

File: extras/registry/src/test/java/org/asynchttpclient/extras/registry/AsyncHttpClientRegistryTest.java
Patch:
@@ -38,7 +38,7 @@ public void setUp() {
 
     @BeforeClass
     public void setUpBeforeTest() {
-        System.setProperty(AsyncImplHelper.ASYNC_HTTP_CLIENT_IMPL_SYSTEM_PROPERTY, "org.asynchttpclient.TestAsyncHttpClient");
+        System.setProperty(AsyncImplHelper.ASYNC_HTTP_CLIENT_IMPL_SYSTEM_PROPERTY, AbstractAsyncHttpClientFactoryTest.TEST_CLIENT_CLASS_NAME);
     }
 
     @AfterClass
@@ -100,14 +100,14 @@ public void testCustomAsyncHttpClientRegistry() {
 
     @Test(groups = "fast", expectedExceptions = AsyncHttpClientImplException.class)
     public void testNonExistentAsyncHttpClientRegistry() {
-        System.setProperty(AsyncImplHelper.ASYNC_HTTP_CLIENT_REGISTRY_SYSTEM_PROPERTY, "org.asynchttpclient.NonExistentAsyncRegistry");
+        System.setProperty(AsyncImplHelper.ASYNC_HTTP_CLIENT_REGISTRY_SYSTEM_PROPERTY, AbstractAsyncHttpClientFactoryTest.NON_EXISTENT_CLIENT_CLASS_NAME);
         AsyncHttpClientRegistryImpl.getInstance();
         Assert.fail("Should never have reached here");
     }
 
     @Test(groups = "fast", expectedExceptions = AsyncHttpClientImplException.class)
     public void testBadAsyncHttpClientRegistry() {
-        System.setProperty(AsyncImplHelper.ASYNC_HTTP_CLIENT_REGISTRY_SYSTEM_PROPERTY, "org.asynchttpclient.BadAsyncHttpClientRegistry");
+        System.setProperty(AsyncImplHelper.ASYNC_HTTP_CLIENT_REGISTRY_SYSTEM_PROPERTY, AbstractAsyncHttpClientFactoryTest.BAD_CLIENT_CLASS_NAME);
         AsyncHttpClientRegistryImpl.getInstance();
         Assert.fail("Should never have reached here");
     }

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigDefaults.java
Patch:
@@ -135,6 +135,6 @@ public static int defaultSpdyMaxConcurrentStreams() {
     }
     
     public static boolean defaultAcceptAnyCertificate() {
-        return getBooleanValue(ASYNC_CLIENT + "acceptAnyCertificate", false);
+        return getBoolean(ASYNC_CLIENT + "acceptAnyCertificate", false);
     }
 }

File: api/src/main/java/org/asynchttpclient/util/AsyncImplHelper.java
Patch:
@@ -59,7 +59,7 @@ public static Class<AsyncHttpClient> getAsyncImplClass(String propertyName) {
         return asyncHttpClientImplClass;
     }
 
-    public static Properties getAsyncImplProperties() {
+    private static Properties getAsyncImplProperties() {
         try {
             return AccessController.doPrivileged(new PrivilegedExceptionAction<Properties>() {
                 public Properties run() throws IOException {

File: api/src/main/java/org/asynchttpclient/util/AsyncImplHelper.java
Patch:
@@ -59,7 +59,7 @@ public static Class<AsyncHttpClient> getAsyncImplClass(String propertyName) {
         return asyncHttpClientImplClass;
     }
 
-    public static Properties getAsyncImplProperties() {
+    private static Properties getAsyncImplProperties() {
         try {
             return AccessController.doPrivileged(new PrivilegedExceptionAction<Properties>() {
                 public Properties run() throws IOException {

File: api/src/main/java/org/asynchttpclient/util/AsyncImplHelper.java
Patch:
@@ -59,7 +59,7 @@ public static Class<AsyncHttpClient> getAsyncImplClass(String propertyName) {
         return asyncHttpClientImplClass;
     }
 
-    private static Properties getAsyncImplProperties() {
+    public static Properties getAsyncImplProperties() {
         try {
             return AccessController.doPrivileged(new PrivilegedExceptionAction<Properties>() {
                 public Properties run() throws IOException {

File: api/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -650,7 +650,7 @@ private void executeSignatureCalculator() {
     }
 
     private void computeRequestCharset() {
-        if (request.charset != null) {
+        if (request.charset == null) {
             try {
                 final String contentType = request.headers.getFirstValue("Content-Type");
                 if (contentType != null) {

File: api/src/main/java/org/asynchttpclient/FluentCaseInsensitiveStringsMap.java
Patch:
@@ -64,8 +64,7 @@ public FluentCaseInsensitiveStringsMap(Map<String, Collection<String>> src) {
      * Adds the specified values and returns this object.
      *
      * @param key    The key
-     * @param values The value(s); if null then this method has no effect. Use the empty string to
-     *               generate an empty value
+     * @param values The value(s); if the array is null then this method has no effect. Individual null values are turned into empty strings
      * @return This object
      */
     public FluentCaseInsensitiveStringsMap add(String key, String... values) {

File: api/src/main/java/org/asynchttpclient/multipart/StringPart.java
Patch:
@@ -60,7 +60,7 @@ public StringPart(String name, String value, String charset, String contentId) {
 
         super(name, DEFAULT_CONTENT_TYPE, charset == null ? DEFAULT_CHARSET : charset, DEFAULT_TRANSFER_ENCODING, contentId);
         if (value == null) {
-            throw new IllegalArgumentException("Value may not be null");
+            throw new NullPointerException("value");
         }
         if (value.indexOf(0) != -1) {
             // See RFC 2048, 2.8. "8bit Data"

File: api/src/test/java/org/asynchttpclient/websocket/ProxyTunnellingTest.java
Patch:
@@ -78,7 +78,7 @@ protected String getTargetUrl() {
     public void echoText() throws Exception {
 
         ProxyServer ps = new ProxyServer(ProxyServer.Protocol.HTTPS, "127.0.0.1", port1);
-        AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder().setProxyServer(ps).build();
+        AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder().setProxyServer(ps).setAcceptAnyCertificate(true).build();
         AsyncHttpClient asyncHttpClient = getAsyncHttpClient(config);
         try {
             final CountDownLatch latch = new CountDownLatch(1);

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/FeedableBodyGenerator.java
Patch:
@@ -309,7 +309,7 @@ protected BaseFeeder(FeedableBodyGenerator feedableBodyGenerator) {
         @SuppressWarnings("UnusedDeclaration")
         public final synchronized void feed(final Buffer buffer, final boolean last) throws IOException {
             if (buffer == null) {
-                throw new IllegalArgumentException("Buffer argument cannot be null.");
+                throw new NullPointerException("buffer");
             }
             if (!feedableBodyGenerator.asyncTransferInitiated) {
                 throw new IllegalStateException("Asynchronous transfer has not been initiated.");

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -253,7 +253,7 @@ public void onTimeout(Connection connection) {
         SSLContext context = clientConfig.getSSLContext();
         if (context == null) {
             try {
-                context = SslUtils.getSSLContext();
+                context = SslUtils.getInstance().getSSLContext(clientConfig.isAcceptAnyCertificate());
             } catch (Exception e) {
                 throw new IllegalStateException(e);
             }

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/statushandler/RedirectHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2013-2014 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -94,7 +94,8 @@ public boolean handleStatus(final HttpResponsePacket responsePacket, final HttpT
 
     private boolean sendAsGet(final HttpResponsePacket response, final HttpTxContext ctx) {
         final int statusCode = response.getStatus();
-        return !(statusCode < 302 || statusCode > 303) && !(statusCode == 302 && ctx.getProvider().getClientConfig().isStrict302Handling());
+        return !(statusCode < 302 || statusCode > 303) &&
+                !(statusCode == 302 && ctx.getProvider().getClientConfig().isStrict302Handling());
     }
 
 } // END RedirectHandler

File: providers/grizzly/src/test/java/org/asynchttpclient/providers/grizzly/GrizzlyFeedableBodyGeneratorTest.java
Patch:
@@ -138,6 +138,7 @@ private void doSimpleFeeder(final boolean secure) {
         AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder()
                 .setMaxConnectionsPerHost(60)
                 .setMaxConnectionsTotal(60)
+                .setAcceptAnyCertificate(true)
                 .build();
         final AsyncHttpClient client =
                 new DefaultAsyncHttpClient(new GrizzlyAsyncHttpProvider(config), config);
@@ -240,6 +241,7 @@ private void doNonBlockingFeeder(final boolean secure) {
         AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder()
                 .setMaxConnectionsPerHost(60)
                 .setMaxConnectionsTotal(60)
+                .setAcceptAnyCertificate(true)
                 .build();
         final AsyncHttpClient client =
                 new DefaultAsyncHttpClient(new GrizzlyAsyncHttpProvider(config), config);

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyConnectListener.java
Patch:
@@ -33,7 +33,6 @@
 
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLEngine;
-import javax.net.ssl.SSLEngineResult;
 import javax.net.ssl.SSLSession;
 import java.net.ConnectException;
 import java.nio.channels.ClosedChannelException;

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/body/BodyChunkedInput.java
Patch:
@@ -35,9 +35,8 @@ public class BodyChunkedInput implements ChunkedInput<ByteBuf> {
     private boolean endOfInput;
 
     public BodyChunkedInput(Body body) {
-        if (body == null) {
-            throw new IllegalArgumentException("no body specified");
-        }
+        if (body == null)
+            throw new NullPointerException("body");
         this.body = body;
         contentLength = (int) body.getContentLength();
         if (contentLength <= 0)

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/body/BodyFileRegion.java
Patch:
@@ -29,9 +29,8 @@ public class BodyFileRegion extends AbstractReferenceCounted implements FileRegi
     private long transfered;
 
     public BodyFileRegion(RandomAccessBody body) {
-        if (body == null) {
-            throw new IllegalArgumentException("no body specified");
-        }
+        if (body == null)
+            throw new NullPointerException("body");
         this.body = body;
     }
 

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/handler/HttpProtocol.java
Patch:
@@ -220,7 +220,7 @@ private final String computeRealmURI(Realm realm, URI requestURI) throws URISynt
                 return requestURI.toString();
             }
         } else {
-            if (realm.isOmitQuery() && isNonEmpty(requestURI.getQuery())) {
+            if (realm.isOmitQuery() || !isNonEmpty(requestURI.getQuery())) {
                 return requestURI.getPath();
             } else {
                 return requestURI.getPath() + "?" + requestURI.getQuery();

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/handler/HttpProtocol.java
Patch:
@@ -220,7 +220,7 @@ private final String computeRealmURI(Realm realm, URI requestURI) throws URISynt
                 return requestURI.toString();
             }
         } else {
-            if (realm.isOmitQuery() && isNonEmpty(requestURI.getQuery())) {
+            if (realm.isOmitQuery() || !isNonEmpty(requestURI.getQuery())) {
                 return requestURI.getPath();
             } else {
                 return requestURI.getPath() + "?" + requestURI.getQuery();

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/statushandler/RedirectHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2013-2014 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -94,7 +94,8 @@ public boolean handleStatus(final HttpResponsePacket responsePacket, final HttpT
 
     private boolean sendAsGet(final HttpResponsePacket response, final HttpTxContext ctx) {
         final int statusCode = response.getStatus();
-        return !(statusCode < 302 || statusCode > 303) && !(statusCode == 302 && ctx.getProvider().getClientConfig().isStrict302Handling());
+        return !(statusCode < 302 || statusCode > 303) &&
+                !(statusCode == 302 && ctx.getProvider().getClientConfig().isStrict302Handling());
     }
 
 } // END RedirectHandler

File: api/src/test/java/org/asynchttpclient/websocket/ProxyTunnellingTest.java
Patch:
@@ -78,7 +78,7 @@ protected String getTargetUrl() {
     public void echoText() throws Exception {
 
         ProxyServer ps = new ProxyServer(ProxyServer.Protocol.HTTPS, "127.0.0.1", port1);
-        AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder().setProxyServer(ps).build();
+        AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder().setProxyServer(ps).setAcceptAnyCertificate(true).build();
         AsyncHttpClient asyncHttpClient = getAsyncHttpClient(config);
         try {
             final CountDownLatch latch = new CountDownLatch(1);

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -253,7 +253,7 @@ public void onTimeout(Connection connection) {
         SSLContext context = clientConfig.getSSLContext();
         if (context == null) {
             try {
-                context = SslUtils.getInstance().getSSLContext();
+                context = SslUtils.getInstance().getSSLContext(clientConfig.isAcceptAnyCertificate());
             } catch (Exception e) {
                 throw new IllegalStateException(e);
             }

File: providers/grizzly/src/test/java/org/asynchttpclient/providers/grizzly/GrizzlyFeedableBodyGeneratorTest.java
Patch:
@@ -138,6 +138,7 @@ private void doSimpleFeeder(final boolean secure) {
         AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder()
                 .setMaxConnectionsPerHost(60)
                 .setMaxConnectionsTotal(60)
+                .setAcceptAnyCertificate(true)
                 .build();
         final AsyncHttpClient client =
                 new DefaultAsyncHttpClient(new GrizzlyAsyncHttpProvider(config), config);
@@ -240,6 +241,7 @@ private void doNonBlockingFeeder(final boolean secure) {
         AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder()
                 .setMaxConnectionsPerHost(60)
                 .setMaxConnectionsTotal(60)
+                .setAcceptAnyCertificate(true)
                 .build();
         final AsyncHttpClient client =
                 new DefaultAsyncHttpClient(new GrizzlyAsyncHttpProvider(config), config);

File: api/src/main/java/org/asynchttpclient/util/AsyncImplHelper.java
Patch:
@@ -59,7 +59,7 @@ public static Class<AsyncHttpClient> getAsyncImplClass(String propertyName) {
         return asyncHttpClientImplClass;
     }
 
-    private static Properties getAsyncImplProperties() {
+    public static Properties getAsyncImplProperties() {
         try {
             return AccessController.doPrivileged(new PrivilegedExceptionAction<Properties>() {
                 public Properties run() throws IOException {

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/BodyGeneratorBodyHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2013-2014 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -26,7 +26,7 @@
 
 import java.io.IOException;
 
-public final class BodyGeneratorBodyHandler implements BodyHandler {
+public final class BodyGeneratorBodyHandler extends BodyHandler {
 
     // -------------------------------------------- Methods from BodyHandler
 

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/NoBodyHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2013-2014 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -21,7 +21,7 @@
 
 import java.io.IOException;
 
-public final class NoBodyHandler implements BodyHandler {
+public final class NoBodyHandler extends BodyHandler {
 
     // -------------------------------------------- Methods from BodyHandler
 

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/ParamsBodyHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2013-2014 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -31,7 +31,7 @@
 import java.util.List;
 import java.util.Map;
 
-public final class ParamsBodyHandler implements BodyHandler {
+public final class ParamsBodyHandler extends BodyHandler {
 
     private final boolean compressionEnabled;
 

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/PartsBodyHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2013-2014 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -31,7 +31,7 @@
 import java.io.IOException;
 import java.util.List;
 
-public final class PartsBodyHandler implements BodyHandler {
+public final class PartsBodyHandler extends BodyHandler {
 
     // -------------------------------------------- Methods from BodyHandler
 

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/StreamDataBodyHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2013-2014 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -25,7 +25,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 
-public final class StreamDataBodyHandler implements BodyHandler {
+public final class StreamDataBodyHandler extends BodyHandler {
 
     // -------------------------------------------- Methods from BodyHandler
 

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/StringBodyHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2013-2014 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -25,7 +25,7 @@
 
 import java.io.IOException;
 
-public final class StringBodyHandler implements BodyHandler {
+public final class StringBodyHandler extends BodyHandler {
     private final GrizzlyAsyncHttpProvider grizzlyAsyncHttpProvider;
 
     public StringBodyHandler(GrizzlyAsyncHttpProvider grizzlyAsyncHttpProvider) {

File: api/src/test/java/org/asynchttpclient/async/AsyncProvidersBasicTest.java
Patch:
@@ -1343,7 +1343,7 @@ public Response onCompleted(Response response) throws Exception {
 
     @Test(groups = { "online", "default_provider", "async" })
     public void asyncDoGetMaxRedirectTest() throws Exception {
-        AsyncHttpClient client = getAsyncHttpClient(new Builder().setMaximumNumberOfRedirects(0).setFollowRedirects(true).build());
+        AsyncHttpClient client = getAsyncHttpClient(new Builder().setMaxRedirects(0).setFollowRedirects(true).build());
         try {
             // Use a l in case the assert fail
             final CountDownLatch l = new CountDownLatch(1);

File: api/src/test/java/org/asynchttpclient/async/BasicAuthTest.java
Patch:
@@ -197,7 +197,7 @@ public void basicAuthTest() throws IOException, ExecutionException, TimeoutExcep
 
     @Test(groups = { "standalone", "default_provider" })
     public void redirectAndBasicAuthTest() throws Exception, ExecutionException, TimeoutException, InterruptedException {
-        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setFollowRedirects(true).setMaximumNumberOfRedirects(10).build());
+        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setFollowRedirects(true).setMaxRedirects(10).build());
         try {
             Future<Response> f = client.prepareGet(getTargetUrl2())//
                     .setRealm((new Realm.RealmBuilder()).setPrincipal(USER).setPassword(ADMIN).build())//

File: api/src/test/java/org/asynchttpclient/async/BodyChunkTest.java
Patch:
@@ -36,7 +36,7 @@ public void negativeContentTypeTest() throws Exception {
 
         AsyncHttpClientConfig.Builder confbuilder = new AsyncHttpClientConfig.Builder();
         confbuilder = confbuilder.setConnectionTimeoutInMs(100);
-        confbuilder = confbuilder.setMaximumConnectionsTotal(50);
+        confbuilder = confbuilder.setMaxConnectionsTotal(50);
         confbuilder = confbuilder.setRequestTimeoutInMs(5 * 60 * 1000); // 5 minutes
 
         // Create client

File: api/src/test/java/org/asynchttpclient/async/ChunkingTest.java
Patch:
@@ -46,8 +46,8 @@ public void testCustomChunking() throws Exception {
         AsyncHttpClientConfig.Builder bc = new AsyncHttpClientConfig.Builder();
 
         bc.setAllowPoolingConnection(true);
-        bc.setMaximumConnectionsPerHost(1);
-        bc.setMaximumConnectionsTotal(1);
+        bc.setMaxConnectionsPerHost(1);
+        bc.setMaxConnectionsTotal(1);
         bc.setConnectionTimeoutInMs(1000);
         bc.setRequestTimeoutInMs(1000);
         bc.setFollowRedirects(true);

File: api/src/test/java/org/asynchttpclient/async/HttpToHttpsRedirectTest.java
Patch:
@@ -96,7 +96,7 @@ public void runAllSequentiallyBecauseNotThreadSafe() throws Exception {
     public void httpToHttpsRedirect() throws Exception {
         redirectDone.getAndSet(false);
 
-        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setMaximumNumberOfRedirects(5).setFollowRedirects(true).build();
+        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setMaxRedirects(5).setFollowRedirects(true).build();
         AsyncHttpClient c = getAsyncHttpClient(cg);
         try {
             Response response = c.prepareGet(getTargetUrl()).setHeader("X-redirect", getTargetUrl2()).execute().get();
@@ -112,7 +112,7 @@ public void httpToHttpsRedirect() throws Exception {
     public void httpToHttpsProperConfig() throws Exception {
         redirectDone.getAndSet(false);
 
-        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setMaximumNumberOfRedirects(5).setFollowRedirects(true).build();
+        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setMaxRedirects(5).setFollowRedirects(true).build();
         AsyncHttpClient c = getAsyncHttpClient(cg);
         try {
             Response response = c.prepareGet(getTargetUrl()).setHeader("X-redirect", getTargetUrl2() + "/test2").execute().get();
@@ -134,7 +134,7 @@ public void httpToHttpsProperConfig() throws Exception {
     public void relativeLocationUrl() throws Exception {
         redirectDone.getAndSet(false);
 
-        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setMaximumNumberOfRedirects(5).setFollowRedirects(true).build();
+        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setMaxRedirects(5).setFollowRedirects(true).build();
         AsyncHttpClient c = getAsyncHttpClient(cg);
         try {
             Response response = c.prepareGet(getTargetUrl()).setHeader("X-redirect", "/foo/test").execute().get();

File: api/src/test/java/org/asynchttpclient/async/MaxConnectionsInThreads.java
Patch:
@@ -52,7 +52,7 @@ public void testMaxConnectionsWithinThreads() {
         String[] urls = new String[] { servletEndpointUri.toString(), servletEndpointUri.toString() };
 
         final AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setConnectionTimeoutInMs(1000).setRequestTimeoutInMs(5000)
-                .setAllowPoolingConnection(true).setMaximumConnectionsTotal(1).setMaximumConnectionsPerHost(1).build());
+                .setAllowPoolingConnection(true).setMaxConnectionsTotal(1).setMaxConnectionsPerHost(1).build());
 
         try {
             final Boolean[] caughtError = new Boolean[] { Boolean.FALSE };

File: api/src/test/java/org/asynchttpclient/async/MaxTotalConnectionTest.java
Patch:
@@ -39,7 +39,7 @@ public abstract class MaxTotalConnectionTest extends AbstractBasicTest {
     public void testMaxTotalConnectionsExceedingException() {
         String[] urls = new String[] { "http://google.com", "http://github.com/" };
 
-        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setConnectionTimeoutInMs(1000).setRequestTimeoutInMs(5000).setAllowPoolingConnection(false).setMaximumConnectionsTotal(1).setMaximumConnectionsPerHost(1).build());
+        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setConnectionTimeoutInMs(1000).setRequestTimeoutInMs(5000).setAllowPoolingConnection(false).setMaxConnectionsTotal(1).setMaxConnectionsPerHost(1).build());
         try {
             boolean caughtError = false;
             for (int i = 0; i < urls.length; i++) {
@@ -61,7 +61,7 @@ public void testMaxTotalConnectionsExceedingException() {
     public void testMaxTotalConnections() {
         String[] urls = new String[] { "http://google.com", "http://lenta.ru" };
 
-        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setConnectionTimeoutInMs(1000).setRequestTimeoutInMs(5000).setAllowPoolingConnection(false).setMaximumConnectionsTotal(2).setMaximumConnectionsPerHost(1).build());
+        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setConnectionTimeoutInMs(1000).setRequestTimeoutInMs(5000).setAllowPoolingConnection(false).setMaxConnectionsTotal(2).setMaxConnectionsPerHost(1).build());
         try {
             for (String url : urls) {
                 try {
@@ -82,7 +82,7 @@ public void testMaxTotalConnections() {
     public void testMaxTotalConnectionsCorrectExceptionHandling() {
         String[] urls = new String[] { "http://google.com", "http://github.com/" };
 
-        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setConnectionTimeoutInMs(1000).setRequestTimeoutInMs(5000).setAllowPoolingConnection(false).setMaximumConnectionsTotal(1).setMaximumConnectionsPerHost(1).build());
+        AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setConnectionTimeoutInMs(1000).setRequestTimeoutInMs(5000).setAllowPoolingConnection(false).setMaxConnectionsTotal(1).setMaxConnectionsPerHost(1).build());
         try {
             List<Future<Response>> futures = new ArrayList<Future<Response>>();
             boolean caughtError = false;

File: api/src/test/java/org/asynchttpclient/async/NoNullResponseTest.java
Patch:
@@ -57,7 +57,7 @@ public void multipleSslRequestsWithDelayAndKeepAlive() throws Exception {
 
     private AsyncHttpClient create() throws GeneralSecurityException {
         final AsyncHttpClientConfig.Builder configBuilder = new AsyncHttpClientConfig.Builder().setCompressionEnabled(true).setFollowRedirects(true).setSSLContext(getSSLContext()).setAllowPoolingConnection(true).setConnectionTimeoutInMs(10000)
-                .setIdleConnectionInPoolTimeoutInMs(60000).setRequestTimeoutInMs(10000).setMaximumConnectionsPerHost(-1).setMaximumConnectionsTotal(-1);
+                .setIdleConnectionInPoolTimeoutInMs(60000).setRequestTimeoutInMs(10000).setMaxConnectionsPerHost(-1).setMaxConnectionsTotal(-1);
         return getAsyncHttpClient(configBuilder.build());
     }
 

File: api/src/test/java/org/asynchttpclient/async/RC10KTest.java
Patch:
@@ -99,7 +99,7 @@ public void handle(String s, Request r, HttpServletRequest req, HttpServletRespo
 
     @Test(timeOut = 10 * 60 * 1000, groups = "scalability")
     public void rc10kProblem() throws IOException, ExecutionException, TimeoutException, InterruptedException {
-        AsyncHttpClient ahc = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setMaximumConnectionsPerHost(C10K).setAllowPoolingConnection(true).build());
+        AsyncHttpClient ahc = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setMaxConnectionsPerHost(C10K).setAllowPoolingConnection(true).build());
         try {
             List<Future<Integer>> resps = new ArrayList<Future<Integer>>(C10K);
             int i = 0;

File: api/src/test/java/org/asynchttpclient/async/RedirectConnectionUsageTest.java
Patch:
@@ -75,8 +75,8 @@ public void testGetRedirectFinalUrl() throws Exception {
 
         AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder()//
                 .setAllowPoolingConnection(true)//
-                .setMaximumConnectionsPerHost(1)//
-                .setMaximumConnectionsTotal(1)//
+                .setMaxConnectionsPerHost(1)//
+                .setMaxConnectionsTotal(1)//
                 .setConnectionTimeoutInMs(1000)//
                 .setRequestTimeoutInMs(1000)//
                 .setFollowRedirects(true)//

File: api/src/test/java/org/asynchttpclient/async/RemoteSiteTest.java
Patch:
@@ -155,7 +155,7 @@ public Response onCompleted(Response response) throws Exception {
     @Test(groups = { "online", "default_provider" }, enabled = false)
     public void invalidStreamTest2() throws Exception {
         AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder().setRequestTimeoutInMs(10000).setFollowRedirects(true)
-                .setAllowPoolingConnection(false).setMaximumNumberOfRedirects(6).build();
+                .setAllowPoolingConnection(false).setMaxRedirects(6).build();
 
         AsyncHttpClient c = getAsyncHttpClient(config);
         try {

File: providers/grizzly/src/test/java/org/asynchttpclient/providers/grizzly/GrizzlyConnectionPoolTest.java
Patch:
@@ -41,7 +41,7 @@ public void testMaxTotalConnectionsException() {
     @Test
     public void multipleMaxConnectionOpenTest() throws Exception {
         AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setAllowPoolingConnection(true).setConnectionTimeoutInMs(5000)
-                .setMaximumConnectionsTotal(1).build();
+                .setMaxConnectionsTotal(1).build();
         AsyncHttpClient c = getAsyncHttpClient(cg);
         try {
             String body = "hello there";

File: providers/netty/src/test/java/org/asynchttpclient/providers/netty/NettyRequestThrottleTimeoutTest.java
Patch:
@@ -82,7 +82,7 @@ public void testRequestTimeout() throws IOException {
         final Semaphore requestThrottle = new Semaphore(1);
 
         final AsyncHttpClient client = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setCompressionEnabled(true)
-                .setAllowPoolingConnection(true).setMaximumConnectionsTotal(1).build());
+                .setAllowPoolingConnection(true).setMaxConnectionsTotal(1).build());
 
         int samples = 10;
 

File: providers/netty/src/test/java/org/asynchttpclient/providers/netty/RetryNonBlockingIssue.java
Patch:
@@ -89,7 +89,7 @@ public void testRetryNonBlocking() throws IOException, InterruptedException, Exe
 
         AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder()//
                 .setAllowPoolingConnection(true)//
-                .setMaximumConnectionsTotal(100)//
+                .setMaxConnectionsTotal(100)//
                 .setConnectionTimeoutInMs(60000)//
                 .setRequestTimeoutInMs(30000)//
                 .build();
@@ -125,10 +125,9 @@ public void testRetryNonBlockingAsyncConnect() throws IOException, InterruptedEx
 
         AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder()//
                 .setAllowPoolingConnection(true)//
-                .setMaximumConnectionsTotal(100)//
+                .setMaxConnectionsTotal(100)//
                 .setConnectionTimeoutInMs(60000)//
                 .setRequestTimeoutInMs(30000)//
-                .setAsyncConnectMode(true) //
                 .build();
 
         AsyncHttpClient client = getAsyncHttpClient(config);

File: api/src/test/java/org/asynchttpclient/async/AsyncStreamHandlerTest.java
Patch:
@@ -347,7 +347,7 @@ public void asyncStream301WithBody() throws Exception {
             c.prepareGet("http://google.com/").execute(new AsyncHandlerAdapter() {
 
                 public STATE onStatusReceived(HttpResponseStatus status) throws Exception {
-                    assertEquals(301, status.getStatusCode());
+                    assertEquals(302, status.getStatusCode());
                     return STATE.CONTINUE;
                 }
 

File: api/src/test/java/org/asynchttpclient/async/RemoteSiteTest.java
Patch:
@@ -119,7 +119,7 @@ public void testGoogleComWithTimeout() throws Exception {
         try {
             Response response = c.prepareGet("http://google.com/").execute().get(10, TimeUnit.SECONDS);
             assertNotNull(response);
-            assertEquals(response.getStatusCode(), 301);
+            assertEquals(response.getStatusCode(), 302);
         } finally {
             c.close();
         }

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/AsyncHttpClientFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2013-2014 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -299,6 +299,7 @@ private boolean sendAsGrizzlyRequest(final RequestInfoHolder requestInfoHolder,
         httpCtx.attach(ctx);
         HttpTxContext.set(ctx, httpTxContext);
         requestPacketLocal.getProcessingState().setHttpContext(httpCtx);
+        requestPacketLocal.setConnection(c);
         
         return sendRequest(sendingCtx, request, requestPacketLocal);
     }

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -334,7 +334,7 @@ public void onTimeout(Connection connection) {
         } else {
             pool = null;
         }
-        connectionManager = new ConnectionManager(this, pool, secure, nonSecure);
+        connectionManager = new ConnectionManager(this, pool, secure, nonSecure, filter);
 
     }
 

File: api/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -170,7 +170,7 @@ private URI toURI(boolean encode) {
             AsyncHttpProviderUtils.validateSupportedScheme(originalUri);
 
             StringBuilder builder = new StringBuilder();
-            builder.append(originalUri.getScheme()).append("://").append(originalUri.getAuthority());
+            builder.append(originalUri.getScheme()).append("://").append(originalUri.getRawAuthority());
             if (isNonEmpty(originalUri.getRawPath())) {
                 builder.append(originalUri.getRawPath());
             } else {

File: api/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
Patch:
@@ -105,7 +105,7 @@ public DefaultAsyncHttpClient(AsyncHttpClientConfig config) {
      * @param providerClass a {@link AsyncHttpProvider}
      */
     public DefaultAsyncHttpClient(String providerClass, AsyncHttpClientConfig config) {
-        this(loadProvider(providerClass, config), new AsyncHttpClientConfig.Builder().build());
+        this(loadProvider(providerClass, config), config);
     }
 
     /**

File: api/src/main/java/org/asynchttpclient/DefaultAsyncHttpClient.java
Patch:
@@ -105,7 +105,7 @@ public DefaultAsyncHttpClient(AsyncHttpClientConfig config) {
      * @param providerClass a {@link AsyncHttpProvider}
      */
     public DefaultAsyncHttpClient(String providerClass, AsyncHttpClientConfig config) {
-        this(loadProvider(providerClass, config), new AsyncHttpClientConfig.Builder().build());
+        this(loadProvider(providerClass, config), config);
     }
 
     /**

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -21,7 +21,7 @@
 import org.asynchttpclient.filter.IOExceptionFilter;
 import org.asynchttpclient.filter.RequestFilter;
 import org.asynchttpclient.filter.ResponseFilter;
-import org.asynchttpclient.util.AllowAllHostnameVerifier;
+import org.asynchttpclient.util.DefaultHostnameVerifier;
 import org.asynchttpclient.util.ProxyUtils;
 
 import javax.net.ssl.HostnameVerifier;
@@ -596,7 +596,7 @@ public static class Builder {
         private boolean allowSslConnectionPool = true;
         private boolean useRawUrl = false;
         private boolean removeQueryParamOnRedirect = true;
-        private HostnameVerifier hostnameVerifier = new AllowAllHostnameVerifier();
+        private HostnameVerifier hostnameVerifier = new DefaultHostnameVerifier();
         private int ioThreadMultiplier = 2;
         private boolean strict302Handling;
         private boolean spdyEnabled;

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -21,7 +21,7 @@
 import org.asynchttpclient.filter.IOExceptionFilter;
 import org.asynchttpclient.filter.RequestFilter;
 import org.asynchttpclient.filter.ResponseFilter;
-import org.asynchttpclient.util.AllowAllHostnameVerifier;
+import org.asynchttpclient.util.DefaultHostnameVerifier;
 import org.asynchttpclient.util.ProxyUtils;
 
 import javax.net.ssl.HostnameVerifier;
@@ -596,7 +596,7 @@ public static class Builder {
         private boolean allowSslConnectionPool = true;
         private boolean useRawUrl = false;
         private boolean removeQueryParamOnRedirect = true;
-        private HostnameVerifier hostnameVerifier = new AllowAllHostnameVerifier();
+        private HostnameVerifier hostnameVerifier = new DefaultHostnameVerifier();
         private int ioThreadMultiplier = 2;
         private boolean strict302Handling;
         private boolean spdyEnabled;

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -15,6 +15,8 @@
  */
 package org.asynchttpclient;
 
+import static org.asynchttpclient.util.MiscUtil.getBoolean;
+
 import org.asynchttpclient.date.TimeConverter;
 import org.asynchttpclient.filter.IOExceptionFilter;
 import org.asynchttpclient.filter.RequestFilter;
@@ -578,7 +580,7 @@ public static class Builder {
         private boolean useProxyProperties = Boolean.getBoolean(ASYNC_CLIENT + "useProxyProperties");
         private boolean useProxySelector = Boolean.getBoolean(ASYNC_CLIENT + "useProxySelector");
         private boolean allowPoolingConnection = true;
-        private boolean useRelativeURIsWithSSLProxies = Boolean.getBoolean(ASYNC_CLIENT + "useRelativeURIsWithSSLProxies");
+        private boolean useRelativeURIsWithSSLProxies = getBoolean(ASYNC_CLIENT + "useRelativeURIsWithSSLProxies", true);
         private ScheduledExecutorService reaper;
         private ExecutorService applicationThreadPool;
         private ProxyServerSelector proxyServerSelector = null;

File: api/src/main/java/org/asynchttpclient/date/RFC2616DateParser.java
Patch:
@@ -83,7 +83,7 @@ private Tokens tokenize() {
         }
 
         // finish lastToken
-        if (inToken = true)
+        if (inToken == true)
             ends[tokenCount++] = end;
 
         return new Tokens(starts, ends, tokenCount);

File: api/src/main/java/org/asynchttpclient/extra/ThrottleRequestFilter.java
Patch:
@@ -35,7 +35,7 @@ public ThrottleRequestFilter(int maxConnections) {
     }
 
     public ThrottleRequestFilter(int maxConnections, int maxWait) {
-      this(maxConnections, maxWait, true);
+      this(maxConnections, maxWait, false);
     }
 
     public ThrottleRequestFilter(int maxConnections, int maxWait, boolean fair) {

File: api/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -618,7 +618,7 @@ public Request build() {
                 try {
                     request.length = Long.parseLong(contentLength);
                 } catch (NumberFormatException e) {
-                    // NoOp -- we wdn't specify length so it will be chunked?
+                    // NoOp -- we won't specify length so it will be chunked?
                 }
             }
         }

File: api/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -618,7 +618,7 @@ public Request build() {
                 try {
                     request.length = Long.parseLong(contentLength);
                 } catch (NumberFormatException e) {
-                    // NoOp -- we wdn't specify length so it will be chunked?
+                    // NoOp -- we won't specify length so it will be chunked?
                 }
             }
         }

File: api/src/main/java/org/asynchttpclient/AsyncHttpClient.java
Patch:
@@ -122,8 +122,8 @@
  * <p/>
  *      String bodyResponse = f.get();
  * </pre></blockquote
- * From any {@link HttpContent} sub classes, you can asynchronously process the response status,headers and body and decide when to
- * stop the processing the response by throwing a new {link ResponseComplete} at any moment.
+ * You can asynchronously process the response status,headers and body and decide when to
+ * stop the processing the response by returning STATE.ABORT at any moment.
  * <p/>
  * This class can also be used without the need of {@link AsyncHandler}</p>
  * <blockquote><pre>

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyRequestSender.java
Patch:
@@ -230,6 +230,8 @@ private <T> ListenableFuture<T> sendRequestWithNewChannel(Request request, URI u
         if (!connectListener.future().isCancelled() || !connectListener.future().isDone()) {
             channels.registerChannel(channelFuture.channel());
             connectListener.future().attachChannel(channelFuture.channel(), false);
+        } else if (acquiredConnection) {
+            channels.releaseFreeConnections();
         }
         return connectListener.future();
     }

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -112,7 +112,6 @@ public class AsyncHttpClientConfig {
     protected boolean spdyEnabled;
     protected int spdyInitialWindowSize;
     protected int spdyMaxConcurrentStreams;
-    protected boolean asyncConnectMode;
     protected TimeConverter timeConverter;
 
     protected AsyncHttpClientConfig() {
@@ -191,7 +190,6 @@ private AsyncHttpClientConfig(int maxTotalConnections, //
         this.spdyEnabled = spdyEnabled;
         this.spdyInitialWindowSize = spdyInitialWindowSize;
         this.spdyMaxConcurrentStreams = spdyMaxConcurrentStreams;
-        this.asyncConnectMode = asyncConnectMode;
         this.timeConverter = timeConverter;
     }
 

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/ConnectionManager.java
Patch:
@@ -90,7 +90,7 @@ public class ConnectionManager {
         this.secureBuilder = secureBuilder;
         this.nonSecureBuilder = nonSecureBuilder;
         AsyncHttpProviderConfig<?,  ?> providerConfig = config.getAsyncHttpProviderConfig();
-        asyncConnect = providerConfig instanceof GrizzlyAsyncHttpProviderConfig? GrizzlyAsyncHttpProviderConfig.class.cast(providerConfig).isAsyncConnectMode() : true;
+        asyncConnect = providerConfig instanceof GrizzlyAsyncHttpProviderConfig? GrizzlyAsyncHttpProviderConfig.class.cast(providerConfig).isAsyncConnectMode() : false;
     }
 
 

File: api/src/test/java/org/asynchttpclient/async/AsyncProvidersBasicTest.java
Patch:
@@ -469,7 +469,7 @@ public void asyncDoGetCookieTest() throws Exception {
             h.add("Test4", "Test4");
             h.add("Test5", "Test5");
 
-            final Cookie coo = Cookie.newValidCookie("/", "foo", "value", "value", "/", -1L, -1, false, false);
+            final Cookie coo = Cookie.newValidCookie("foo", "value", "value", "/", "/", -1L, -1, false, false);
             client.prepareGet(getTargetUrl()).setHeaders(h).addCookie(coo).execute(new AsyncCompletionHandlerAdapter() {
 
                 @Override

File: providers/netty/src/test/java/org/asynchttpclient/providers/netty/NettyPerRequestTimeoutTest.java
Patch:
@@ -22,7 +22,7 @@ public class NettyPerRequestTimeoutTest extends PerRequestTimeoutTest {
 
     @Override
     protected void checkTimeoutMessage(String message) {
-        assertTrue(message.startsWith("Request reached timeout of 100 ms after "));
+        assertTrue(message.equals("Request timeout of 100 ms"));
     }
 
     @Override

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyRequests.java
Patch:
@@ -299,7 +299,8 @@ public static NettyRequest newNettyRequest(AsyncHttpClientConfig config, NettyAs
         }
 
         // connection header and friends
-        if (isWebSocket(uri)) {
+        boolean webSocket = isWebSocket(uri.getScheme());
+        if (method != HttpMethod.CONNECT && webSocket) {
             httpRequest.headers().set(HttpHeaders.Names.UPGRADE, HttpHeaders.Values.WEBSOCKET);
             httpRequest.headers().set(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.UPGRADE);
             httpRequest.headers().set(HttpHeaders.Names.ORIGIN, "http://" + uri.getHost() + ":" + (uri.getPort() == -1 ? isSecure(uri.getScheme()) ? 443 : 80 : uri.getPort()));

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/util/HttpUtil.java
Patch:
@@ -19,8 +19,8 @@ public static boolean isNTLM(List<String> auth) {
         return isNonEmpty(auth) && auth.get(0).startsWith("NTLM");
     }
 
-    public static boolean isWebSocket(URI uri) {
-        return WEBSOCKET.equalsIgnoreCase(uri.getScheme()) || WEBSOCKET_SSL.equalsIgnoreCase(uri.getScheme());
+    public static boolean isWebSocket(String scheme) {
+        return WEBSOCKET.equalsIgnoreCase(scheme) || WEBSOCKET_SSL.equalsIgnoreCase(scheme);
     }
 
     public static boolean isSecure(String scheme) {

File: api/src/main/java/org/asynchttpclient/Realm.java
Patch:
@@ -16,13 +16,13 @@
  */
 package org.asynchttpclient;
 
-import static org.asynchttpclient.util.MiscUtil.isNonEmpty;
+import org.asynchttpclient.util.StandardCharsets;
 
 import java.nio.charset.Charset;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 
-import org.asynchttpclient.util.StandardCharsets;
+import static org.asynchttpclient.util.MiscUtil.isNonEmpty;
 
 /**
  * This class is required when authentication is needed. The class support DIGEST and BASIC.
@@ -214,7 +214,7 @@ public boolean equals(Object o) {
 
     @Override
     public String toString() {
-        return "Realm{" + "principal='" + principal + '\'' + ", password='" + password + '\'' + ", scheme=" + scheme
+        return "Realm{" + "principal='" + principal + '\'' + ", scheme=" + scheme
                 + ", realmName='" + realmName + '\'' + ", nonce='" + nonce + '\'' + ", algorithm='" + algorithm + '\''
                 + ", response='" + response + '\'' + ", qop='" + qop + '\'' + ", nc='" + nc + '\'' + ", cnonce='"
                 + cnonce + '\'' + ", uri='" + uri + '\'' + ", methodName='" + methodName + '\'' + '}';

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/ConnectionManager.java
Patch:
@@ -352,8 +352,7 @@ public void updated(Connection result) {
 
     private static String getPoolKey(final Request request, ProxyServer proxyServer) {
         final ConnectionPoolKeyStrategy keyStrategy = request.getConnectionPoolKeyStrategy();
-        URI uri = proxyServer != null ? proxyServer.getURI() : request.getURI();
-        return keyStrategy.getKey(uri);
+        return keyStrategy.getKey(request.getURI(), proxyServer);
     }
 
 }

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/handler/HttpProtocol.java
Patch:
@@ -271,9 +271,8 @@ private boolean handleProxyAuthenticationRequiredAndExit(int statusCode, Realm r
                     // SPNEGO KERBEROS
                 } else if (negociate) {
                     newRealm = kerberosChallenge(proxyAuthenticateHeaders, request, proxyServer, request.getHeaders(), realm, future);
-                    if (newRealm == null) {
+                    if (newRealm == null)
                         return true;
-                    }
                 } else {
                     newRealm = future.getRequest().getRealm();
                 }
@@ -283,7 +282,6 @@ private boolean handleProxyAuthenticationRequiredAndExit(int statusCode, Realm r
                 requestSender.sendNextRequest(new RequestBuilder(future.getRequest()).setHeaders(request.getHeaders()).setRealm(newRealm).build(), future);
                 return true;
             }
-
         }
         return false;
     }

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/timeout/IdleConnectionTimeoutTimerTask.java
Patch:
@@ -46,7 +46,7 @@ public void run(Timeout timeout) throws Exception {
 
             long now = millisTime();
 
-            long currentIdleConnectionTimeoutInstant = idleConnectionTimeout - nettyResponseFuture.getLastTouch();
+            long currentIdleConnectionTimeoutInstant = idleConnectionTimeout + nettyResponseFuture.getLastTouch();
             long durationBeforeCurrentIdleConnectionTimeout = currentIdleConnectionTimeoutInstant - now;
 
             if (durationBeforeCurrentIdleConnectionTimeout <= 0L) {

File: api/src/test/java/org/asynchttpclient/async/AsyncProvidersBasicTest.java
Patch:
@@ -478,7 +478,7 @@ public Response onCompleted(Response response) throws Exception {
                         assertEquals(response.getStatusCode(), 200);
                         List<Cookie> cookies = response.getCookies();
                         assertEquals(cookies.size(), 1);
-                        assertEquals(cookies.get(0).toString(), coo.toString());
+                        assertEquals(cookies.get(0).toString(), "foo=value");
                     } finally {
                         l.countDown();
                     }

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -632,7 +632,7 @@ public static class Builder {
         private boolean spdyEnabled;
         private int spdyInitialWindowSize = 10 * 1024 * 1024;
         private int spdyMaxConcurrentStreams = 100;
-        private boolean rfc6265CookieEncoding;
+        private boolean rfc6265CookieEncoding = true;
         private boolean asyncConnectMode;
 
         public Builder() {

File: api/src/main/java/org/asynchttpclient/multipart/MultipartBody.java
Patch:
@@ -28,7 +28,6 @@
 import java.util.Set;
 
 import org.asynchttpclient.RandomAccessBody;
-import org.asynchttpclient.util.StandardCharsets;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -55,8 +54,8 @@ enum FileLocation {
         NONE, START, MIDDLE, END
     }
 
-    public MultipartBody(List<Part> parts, String contentType, long contentLength) {
-        this.boundary = contentType.substring(contentType.indexOf("boundary=") + "boundary=".length()).getBytes(StandardCharsets.US_ASCII);
+    public MultipartBody(List<Part> parts, String contentType, long contentLength, byte[] boundary) {
+        this.boundary = boundary;
         this.contentLength = contentLength;
         this.parts = parts;
     }

File: api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java
Patch:
@@ -68,7 +68,7 @@ private static void compareContentLength(final List<Part> parts) {
         final long expectedContentLength = mre.getContentLength();
 
         // get real bytes
-        final Body multipartBody = new MultipartBody(parts, mre.getContentType(), expectedContentLength);
+        final Body multipartBody = new MultipartBody(parts, mre.getContentType(), expectedContentLength, mre.getMultipartBoundary());
         try {
             final ByteBuffer buffer = ByteBuffer.allocate(8192);
             boolean last = false;

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/PartsBodyHandler.java
Patch:
@@ -49,6 +49,7 @@ public boolean doHandle(final FilterChainContext ctx,
         final MultipartRequestEntity mre = new MultipartRequestEntity(parts, request.getHeaders());
         final long contentLength = mre.getContentLength();
         final String contentType = mre.getContentType();
+        final byte[] multipartBoundary = mre.getMultipartBoundary();
         requestPacket.setContentLengthLong(contentLength);
         requestPacket.setContentType(contentType);
         if (GrizzlyAsyncHttpProvider.LOGGER.isDebugEnabled()) {
@@ -63,7 +64,7 @@ public boolean doHandle(final FilterChainContext ctx,
         final FeedableBodyGenerator generator = new FeedableBodyGenerator() {
             @Override
             public Body createBody() throws IOException {
-                return new MultipartBody(parts, contentType, contentLength);
+                return new MultipartBody(parts, contentType, contentLength, multipartBoundary);
             }
         };
         generator.setFeeder(new FeedableBodyGenerator.BaseFeeder(generator) {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/body/NettyMultipartBody.java
Patch:
@@ -32,7 +32,7 @@ public NettyMultipartBody(List<Part> parts, FluentCaseInsensitiveStringsMap head
         MultipartRequestEntity mre = new MultipartRequestEntity(parts, headers);
         contentType = mre.getContentType();
         contentLength = mre.getContentLength();
-        multipartBody = new MultipartBody(parts, contentType, contentLength);
+        multipartBody = new MultipartBody(parts, contentType, contentLength, mre.getMultipartBoundary());
     }
 
     public MultipartBody getMultipartBody() {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyAsyncHttpProviderConfig.java
Patch:
@@ -236,7 +236,9 @@ public static class DefaultResponseBodyPartFactory implements ResponseBodyPartFa
 
         @Override
         public ResponseBodyPart newResponseBodyPart(ByteBuf buf, boolean last) {
-            return new DefaultResponseBodyPart(ByteBufUtil.byteBuf2Bytes(buf), last);
+            byte[] bytes = ByteBufUtil.byteBuf2Bytes(buf);
+            buf.release();
+            return new DefaultResponseBodyPart(bytes, last);
         }
     }
 

File: api/src/test/java/org/asynchttpclient/async/AsyncProvidersBasicTest.java
Patch:
@@ -698,7 +698,7 @@ public void asyncDoPostBasicGZIPTest() throws Exception {
                 public Response onCompleted(Response response) throws Exception {
                     try {
                         assertEquals(response.getStatusCode(), 200);
-                        assertEquals(response.getHeader("X-Accept-Encoding"), "gzip");
+                        assertEquals(response.getHeader("X-Accept-Encoding"), "gzip,deflate");
                     } finally {
                         l.countDown();
                     }

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/AsyncHttpClientFilter.java
Patch:
@@ -228,7 +228,8 @@ private boolean sendAsGrizzlyRequest(final RequestInfoHolder requestInfoHolder,
             return true;
         }
 
-        final URI uri = httpTxContext.getRequest().getURI();
+        final Request request = httpTxContext.getRequest();
+        final URI uri = request.isUseRawUrl() ? request.getRawURI() : request.getURI();
         boolean secure = Utils.isSecure(uri);
 
         // If the request is secure, check to see if an error occurred during
@@ -244,7 +245,6 @@ private boolean sendAsGrizzlyRequest(final RequestInfoHolder requestInfoHolder,
             convertToUpgradeRequest(httpTxContext);
         }
 
-        final Request request = httpTxContext.getRequest();
         HttpRequestPacket requestPacket = requestCache.poll();
         if (requestPacket == null) {
             requestPacket = new HttpRequestPacketImpl();

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/request/NettyConnectListener.java
Patch:
@@ -74,8 +74,9 @@ public void onFutureSuccess(final Channel channel) throws ConnectException {
 
     public void onFutureFailure(Channel channel, Throwable cause) {
 
-        logger.debug("Trying to recover a dead cached channel {} with a retry value of {} ", channel, future.canRetry());
-        if (future.canRetry() && cause != null
+        boolean canRetry = future.canRetry();
+        logger.debug("Trying to recover a dead cached channel {} with a retry value of {} ", channel, canRetry);
+        if (canRetry && cause != null
                 && (NettyResponseFutures.abortOnDisconnectException(cause) || cause instanceof ClosedChannelException || future.getState() != NettyResponseFuture.STATE.NEW)) {
 
             logger.debug("Retrying {} ", future.getNettyRequest());

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/channel/Channels.java
Patch:
@@ -77,7 +77,7 @@ public class Channels {
     public static final String WS_DECODER_HANDLER = "ws-decoder";
     public static final String WS_ENCODER_HANDLER = "ws-encoder";
 
-    private static final AttributeKey<Object> DEFAULT_ATTRIBUTE = new AttributeKey<Object>("default");
+    private static final AttributeKey<Object> DEFAULT_ATTRIBUTE = AttributeKey.valueOf("default");
 
     private final AsyncHttpClientConfig config;
     private final NettyAsyncHttpProviderConfig asyncHttpProviderConfig;

File: api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java
Patch:
@@ -79,7 +79,7 @@ private static void compareContentLength(final List<Part> parts) {
         final long expectedContentLength = mre.getContentLength();
 
         // get real bytes
-        final Body multipartBody = new MultipartBody(parts, mre.getContentType(), String.valueOf(expectedContentLength));
+        final Body multipartBody = new MultipartBody(parts, mre.getContentType(), expectedContentLength);
         try {
             final ByteBuffer buffer = ByteBuffer.allocate(8192);
             boolean last = false;

File: api/src/main/java/org/asynchttpclient/multipart/MultipartBody.java
Patch:
@@ -81,7 +81,7 @@ public long read(ByteBuffer buffer) throws IOException {
             int maxLength = buffer.remaining();
 
             if (startPart == parts.size() && endWritten) {
-                return overallLength;
+                return -1;
             }
 
             boolean full = false;

File: api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java
Patch:
@@ -91,7 +91,7 @@ private static void compareContentLength(final List<Part> parts) {
                 } catch (IOException ie) {
                     Assert.fail("read failure");
                 }
-                if (readBytes >= 0) {
+                if (readBytes > 0) {
                     totalBytes += readBytes;
                 } else {
                     last = true;

File: api/src/main/java/org/asynchttpclient/multipart/MultipartBody.java
Patch:
@@ -81,7 +81,7 @@ public long read(ByteBuffer buffer) throws IOException {
             int maxLength = buffer.remaining();
 
             if (startPart == parts.size() && endWritten) {
-                return overallLength;
+                return -1;
             }
 
             boolean full = false;

File: api/src/test/java/org/asynchttpclient/multipart/MultipartBodyTest.java
Patch:
@@ -91,7 +91,7 @@ private static void compareContentLength(final List<Part> parts) {
                 } catch (IOException ie) {
                     Assert.fail("read failure");
                 }
-                if (readBytes >= 0) {
+                if (readBytes > 0) {
                     totalBytes += readBytes;
                 } else {
                     last = true;

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/BodyGeneratorBodyHandler.java
Patch:
@@ -44,7 +44,7 @@ public boolean doHandle(final FilterChainContext ctx,
         final BodyGenerator generator = request.getBodyGenerator();
         final Body bodyLocal = generator.createBody();
         final long len = bodyLocal.getContentLength();
-        if (len > 0) {
+        if (len >= 0) {
             requestPacket.setContentLengthLong(len);
         } else {
             requestPacket.setChunked(true);

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/AsyncHttpClientFilter.java
Patch:
@@ -262,7 +262,7 @@ private boolean sendAsGrizzlyRequest(final RequestInfoHolder requestInfoHolder,
 
         if (Utils.requestHasEntityBody(request)) {
             final long contentLength = request.getContentLength();
-            if (contentLength > 0) {
+            if (contentLength >= 0) {
                 requestPacket.setContentLengthLong(contentLength);
                 requestPacket.setChunked(false);
             } else {

File: api/src/main/java/org/asynchttpclient/util/AsyncHttpProviderUtils.java
Patch:
@@ -516,7 +516,7 @@ public static String parseCharset(String contentType) {
     }
 
     public static int convertExpireField(String timestring) {
-        String trimmedTimeString = removeQuote(timestring.trim());
+        String trimmedTimeString = removeQuotes(timestring.trim());
 
         for (SimpleDateFormat sdf : simpleDateFormat.get()) {
             Date date = sdf.parse(trimmedTimeString, new ParsePosition(0));

File: api/src/main/java/org/asynchttpclient/RequestBuilderBase.java
Patch:
@@ -373,6 +373,8 @@ public T setUrl(String url) {
     }
 
     public T setURI(URI uri) {
+        if (uri.getPath() == null)
+            throw new IllegalArgumentException("Unsupported uri format: " + uri);
         request.originalUri = uri;
         addQueryParameters(request.originalUri);
         request.uri = null;

File: api/src/test/java/org/asynchttpclient/async/AsyncProvidersBasicTest.java
Patch:
@@ -1556,12 +1556,11 @@ public void headShouldNotAllowBody() throws IllegalArgumentException, IOExceptio
         }
     }
 
-    @Test(groups = { "standalone", "default_provider" })
+    @Test(groups = { "standalone", "default_provider" }, expectedExceptions = { IllegalArgumentException.class })
     public void invalidUri() throws Exception {
         AsyncHttpClient client = getAsyncHttpClient(null);
         try {
-            Response response = client.executeRequest(client.prepareGet(String.format("http:127.0.0.1:%d/foo/test", port1)).build()).get();
-            assertEquals(200, response.getStatusCode());
+            client.prepareGet(String.format("http:127.0.0.1:%d/foo/test", port1)).build();
         } finally {
             client.close();
         }

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/statushandler/AuthorizationHandler.java
Patch:
@@ -135,12 +135,13 @@ private Connection getConnectionForNextRequest(final FilterChainContext ctx,
                                                    final HttpResponsePacket response,
                                                    final HttpTxContext httpCtx)
     throws Exception {
+        /*
         if (response.getProcessingState().isKeepAlive()) {
             return ctx.getConnection();
-        } else {
+        } else { */
             final ConnectionManager m = httpCtx.getProvider().getConnectionManager();
             return m.obtainConnection(request, httpCtx.getFuture());
-        }
+        /* } */
     }
 
 } // END AuthorizationHandler

File: api/src/test/java/org/asynchttpclient/async/AsyncProvidersBasicTest.java
Patch:
@@ -1358,7 +1358,7 @@ public void onThrowable(Throwable t) {
                 }
             };
 
-            client.prepareGet("http://www.google.com").execute(handler);
+            client.prepareGet("http://google.com").execute(handler);
 
             if (!l.await(TIMEOUT, TimeUnit.SECONDS)) {
                 fail("Timed out");

File: api/src/test/java/org/asynchttpclient/async/AsyncProvidersBasicTest.java
Patch:
@@ -1405,7 +1405,7 @@ public void onThrowable(Throwable t) {
                 }
             };
 
-            client.prepareGet("http://www.lemonde.fr").execute(handler);
+            client.prepareGet("http://www.google.com").execute(handler);
 
             if (!l.await(TIMEOUT, TimeUnit.SECONDS)) {
                 Assert.fail("Timed out");
@@ -1419,6 +1419,7 @@ public void onThrowable(Throwable t) {
     public void asyncDoGetNestedTest() throws Throwable {
         final AsyncHttpClient client = getAsyncHttpClient(null);
         try {
+            // FIXME find a proper website that redirects the same number of times whatever the language
             // Use a l in case the assert fail
             final CountDownLatch l = new CountDownLatch(2);
 

File: api/src/test/java/org/asynchttpclient/async/TransferListenerTest.java
Patch:
@@ -140,7 +140,7 @@ public void onThrowable(Throwable t) {
     }
 
     @Test(groups = { "standalone", "default_provider" })
-    public void basicPutTest() throws Throwable {
+    public void basicPutFileTest() throws Throwable {
         final AtomicReference<Throwable> throwable = new AtomicReference<Throwable>();
         final AtomicReference<FluentCaseInsensitiveStringsMap> hSent = new AtomicReference<FluentCaseInsensitiveStringsMap>();
         final AtomicReference<FluentCaseInsensitiveStringsMap> hRead = new AtomicReference<FluentCaseInsensitiveStringsMap>();
@@ -204,7 +204,7 @@ public void onThrowable(Throwable t) {
     }
 
     @Test(groups = { "standalone", "default_provider" })
-    public void basicPutBodyTest() throws Throwable {
+    public void basicPutFileBodyGeneratorTest() throws Throwable {
         AsyncHttpClient client = getAsyncHttpClient(null);
         try {
             final AtomicReference<Throwable> throwable = new AtomicReference<Throwable>();

File: providers/netty4/src/main/java/org/asynchttpclient/providers/netty4/NettyAsyncHttpProvider.java
Patch:
@@ -75,7 +75,7 @@ public void close() {
         isClose.set(true);
         try {
             channels.close();
-            config.executorService().shutdown();
+//            config.executorService().shutdown();
             config.reaper().shutdown();
         } catch (Throwable t) {
             LOGGER.warn("Unexpected error on close", t);

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -1274,9 +1274,8 @@ public Thread newThread(Runnable r) {
 
             if (applicationThreadPool == null) {
                 managedApplicationThreadPool = true;
-                int count = Runtime.getRuntime().availableProcessors();
                 applicationThreadPool =
-                        Executors.newFixedThreadPool(count, new ThreadFactory() {
+                        Executors.newCachedThreadPool(new ThreadFactory() {
                             final AtomicInteger counter = new AtomicInteger();
                             public Thread newThread(Runnable r) {
                                 Thread t = new Thread(r,

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -443,7 +443,7 @@ public List<RequestFilter> getRequestFilters() {
      * @since 2.0.0
      */
     public boolean hasResponseFilters() {
-        return !requestFilters.isEmpty();
+        return !responseFilters.isEmpty();
     }
 
     /**

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/statushandler/ProxyAuthorizationHandler.java
Patch:
@@ -65,7 +65,8 @@ public boolean handleStatus(final HttpResponsePacket responsePacket,
         final Request req = httpTransactionContext.getRequest();
         ProxyServer proxyServer = httpTransactionContext.getProvider()
                 .getClientConfig()
-                .getProxyServer();
+                .getProxyServerSelector()
+                .select(req.getOriginalURI());
         String principal = proxyServer.getPrincipal();
         String password = proxyServer.getPassword();
         Realm realm = new Realm.RealmBuilder().setPrincipal(principal)

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/statushandler/ProxyAuthorizationHandler.java
Patch:
@@ -65,7 +65,8 @@ public boolean handleStatus(final HttpResponsePacket responsePacket,
         final Request req = httpTransactionContext.getRequest();
         ProxyServer proxyServer = httpTransactionContext.getProvider()
                 .getClientConfig()
-                .getProxyServer();
+                .getProxyServerSelector()
+                .select(req.getOriginalURI());
         String principal = proxyServer.getPrincipal();
         String password = proxyServer.getPassword();
         Realm realm = new Realm.RealmBuilder().setPrincipal(principal)

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/Utils.java
Patch:
@@ -85,6 +85,7 @@ public static void setSpdyConnection(final Connection c) {
     }
 
     public static boolean isSpdyConnection(final Connection c) {
-        return SPDY.get(c);
+        Boolean result = SPDY.get(c);
+        return (result != null ? result : false);
     }
 }

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -828,7 +828,9 @@ public void close() {
                 }
             }
 
-            config.executorService().shutdown();
+            if (config.isManagedExecutorService()) {
+                config.executorService().shutdown();
+            }
             config.reaper().shutdown();
             if (this.allowReleaseSocketChannelFactory) {
                 socketChannelFactory.releaseExternalResources();

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -587,7 +587,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config, Request reque
         if (request.getVirtualHost() != null) {
             host = request.getVirtualHost();
         } else {
-            AsyncHttpProviderUtils.getHost(uri);
+            host = AsyncHttpProviderUtils.getHost(uri);
     	}
 
         HttpRequest nettyRequest;

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -220,10 +220,10 @@ public NettyAsyncHttpProvider(AsyncHttpClientConfig config) {
         secureBootstrap = new ClientBootstrap(socketChannelFactory);
         webSocketBootstrap = new ClientBootstrap(socketChannelFactory);
         secureWebSocketBootstrap = new ClientBootstrap(socketChannelFactory);
-        configureNetty();
-
         this.config = config;
 
+        configureNetty();
+
         // This is dangerous as we can't catch a wrong typed ConnectionsPool
         ConnectionsPool<String, Channel> cp = (ConnectionsPool<String, Channel>) config.getConnectionsPool();
         if (cp == null && config.getAllowPoolingConnection()) {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyConnectionsPool.java
Patch:
@@ -54,8 +54,8 @@ public NettyConnectionsPool(int maxTotalConnections, int maxConnectionPerHost, l
         this.sslConnectionPoolEnabled = sslConnectionPoolEnabled;
         this.maxIdleTime = maxIdleTime;
         this.maxConnectionLifeTimeInMs = maxConnectionLifeTimeInMs;
-        this.idleConnectionDetector.schedule(new IdleChannelDetector(), maxIdleTime, maxIdleTime);
         this.idleConnectionDetector = idleConnectionDetector;
+        this.idleConnectionDetector.schedule(new IdleChannelDetector(), maxIdleTime, maxIdleTime);
     }
 
     private static class IdleChannel {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyConnectionsPool.java
Patch:
@@ -54,8 +54,8 @@ public NettyConnectionsPool(int maxTotalConnections, int maxConnectionPerHost, l
         this.sslConnectionPoolEnabled = sslConnectionPoolEnabled;
         this.maxIdleTime = maxIdleTime;
         this.maxConnectionLifeTimeInMs = maxConnectionLifeTimeInMs;
-        this.idleConnectionDetector.schedule(new IdleChannelDetector(), maxIdleTime, maxIdleTime);
         this.idleConnectionDetector = idleConnectionDetector;
+        this.idleConnectionDetector.schedule(new IdleChannelDetector(), maxIdleTime, maxIdleTime);
     }
 
     private static class IdleChannel {

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/ConnectionManager.java
Patch:
@@ -429,7 +429,7 @@ public void onClosed(Connection connection, CloseType closeType) throws IOExcept
          */
         public boolean offer(String uri, Connection connection) {
 
-            if (cacheSSLConnections && Utils.isSecure(uri)) {
+            if (Utils.isSecure(uri) && !cacheSSLConnections) {
                 return false;
             }
 

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -165,7 +165,7 @@ public void updated(final Connection c) {
             }
         };
 
-        connectionManager.doAsyncTrackedConnection(request, future, connectHandler);
+        connectionManager.doTrackedConnection(request, future, connectHandler);
 
         return future;
     }

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -260,7 +260,7 @@ void configureNetty() {
         DefaultChannelFuture.setUseDeadLockChecker(false);
 
         if (asyncHttpProviderConfig != null) {
-            executeConnectAsync = asyncHttpProviderConfig.isAsyncConnect();
+            executeConnectAsync = config.isAsyncConnectMode();
             if (!executeConnectAsync) {
                 DefaultChannelFuture.setUseDeadLockChecker(true);
             }

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2207,11 +2207,10 @@ private final class WebSocketProtocol implements Protocol {
         private static final byte OPCODE_BINARY = 0x2;
         private static final byte OPCODE_UNKNOWN = -1;
         protected byte pendingOpcode = OPCODE_UNKNOWN;
-        private final AtomicBoolean onSuccesInvoked = new AtomicBoolean();
 
         // We don't need to synchronize as replacing the "ws-decoder" will process using the same thread.
         private void invokeOnSucces(ChannelHandlerContext ctx, WebSocketUpgradeHandler h) {
-            if (!onSuccesInvoked.getAndSet(true)) {
+            if (!h.touchSuccess()) {
                 try {
                     h.onSuccess(new NettyWebSocket(ctx.getChannel()));
                 } catch (Exception ex) {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2277,10 +2277,10 @@ public void handle(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
                     throw new IOException(String.format("Invalid challenge. Actual: %s. Expected: %s", accept, key));
                 }
 
+                ctx.getPipeline().get(HttpResponseDecoder.class).replace("ws-decoder", new WebSocket08FrameDecoder(false, false));
                 if (h.onHeadersReceived(responseHeaders) == STATE.CONTINUE) {
                     h.onSuccess(new NettyWebSocket(ctx.getChannel()));
                 }
-                ctx.getPipeline().get(HttpResponseDecoder.class).replace("ws-decoder", new WebSocket08FrameDecoder(false, false));
                 ctx.getPipeline().replace("http-encoder", "ws-encoder", new WebSocket08FrameEncoder(true));
                 future.done(null);
             } else if (e.getMessage() instanceof WebSocketFrame) {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2277,11 +2277,11 @@ public void handle(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
                     throw new IOException(String.format("Invalid challenge. Actual: %s. Expected: %s", accept, key));
                 }
 
-                ctx.getPipeline().get(HttpResponseDecoder.class).replace("ws-decoder", new WebSocket08FrameDecoder(false, false));
-                ctx.getPipeline().replace("http-encoder", "ws-encoder", new WebSocket08FrameEncoder(true));
                 if (h.onHeadersReceived(responseHeaders) == STATE.CONTINUE) {
                     h.onSuccess(new NettyWebSocket(ctx.getChannel()));
                 }
+                ctx.getPipeline().get(HttpResponseDecoder.class).replace("ws-decoder", new WebSocket08FrameDecoder(false, false));
+                ctx.getPipeline().replace("http-encoder", "ws-encoder", new WebSocket08FrameEncoder(true));
                 future.done(null);
             } else if (e.getMessage() instanceof WebSocketFrame) {
                 final WebSocketFrame frame = (WebSocketFrame) e.getMessage();

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/EventHandler.java
Patch:
@@ -104,7 +104,7 @@ public void onHttpContentParsed(HttpContent content,
             try {
                 context.setCurrentState(handler.onBodyPartReceived(
                         new GrizzlyResponseBodyPart(content,
-                                                    null,
+                                                    context.getRequest().getURI(),
                                                     ctx.getConnection(),
                                                     provider)));
             } catch (Exception e) {
@@ -223,7 +223,7 @@ public void onInitialLineParsed(HttpHeader httpHeader,
 
     public void onHttpHeaderError(final HttpHeader httpHeader,
                                      final FilterChainContext ctx,
-                                     final Throwable t) throws IOException {
+                                     final Throwable t) {
 
         t.printStackTrace();
         httpHeader.setSkipRemainder(true);
@@ -256,7 +256,7 @@ public void onHttpHeadersParsed(HttpHeader httpHeader,
                 .getClientConfig().getResponseFilters();
         final GrizzlyResponseHeaders responseHeaders =
                 new GrizzlyResponseHeaders((HttpResponsePacket) httpHeader,
-                                           null,
+                                           context.getRequest().getURI(),
                                            provider);
         if (!filters.isEmpty()) {
             FilterContext fc = new FilterContext.FilterContextBuilder()

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/FeedableBodyGenerator.java
Patch:
@@ -56,14 +56,14 @@ public void feed(final Buffer buffer, final boolean isLast)
     }
     
     public void initializeAsynchronousTransfer(final FilterChainContext context,
-            final HttpRequestPacket requestPacket) throws IOException {
+            final HttpRequestPacket requestPacket) {
         this.context = context;
         this.requestPacket = requestPacket;
         flushQueue();
     }
 
     @SuppressWarnings("unchecked")
-    private void flushQueue() throws IOException {
+    private void flushQueue() {
         if (queueSize.get() > 0) {
             synchronized(this) {
                 while(queueSize.get() > 0) {

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -259,10 +259,10 @@ public <T> ListenableFuture<T> execute(final Connection c,
     }
 
 
-    protected void initializeTransport(final AsyncHttpClientConfig clientConfig) {
+    void initializeTransport(final AsyncHttpClientConfig clientConfig) {
 
         final FilterChainBuilder secure = FilterChainBuilder.stateless();
-        secure.add(new AsyncHttpClientTransportFilter(this));
+        secure.add(new AsyncHttpClientTransportFilter());
 
         final int timeout = clientConfig.getRequestTimeoutInMs();
         if (timeout > 0) {
@@ -317,7 +317,7 @@ public void onTimeout(Connection connection) {
                         true,
                         false,
                         false);
-        final SwitchingSSLFilter filter = new SwitchingSSLFilter(configurator, true);
+        final SwitchingSSLFilter filter = new SwitchingSSLFilter(configurator);
         secure.add(filter);
         GrizzlyAsyncHttpProviderConfig providerConfig =
                         (GrizzlyAsyncHttpProviderConfig) clientConfig.getAsyncHttpProviderConfig();

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/GrizzlyResponseBodyPart.java
Patch:
@@ -35,7 +35,7 @@
  * @author The Grizzly Team
  * @since 1.7.0
  */
-public class GrizzlyResponseBodyPart extends HttpResponseBodyPart {
+class GrizzlyResponseBodyPart extends HttpResponseBodyPart {
 
     private final HttpContent content;
     private final Connection<?> connection;

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/GrizzlyResponseHeaders.java
Patch:
@@ -30,7 +30,7 @@
  * @author The Grizzly Team
  * @since 1.7.0
  */
-public class GrizzlyResponseHeaders extends HttpResponseHeaders {
+class GrizzlyResponseHeaders extends HttpResponseHeaders {
 
     private final FluentCaseInsensitiveStringsMap headers =
             new FluentCaseInsensitiveStringsMap();

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/HttpTransactionContext.java
Patch:
@@ -44,14 +44,14 @@ public final class HttpTransactionContext {
 
     private Request request;
     private String requestUrl;
-    private AsyncHandler handler;
+    private final AsyncHandler handler;
     private BodyHandler bodyHandler;
     private StatusHandler statusHandler;
     private InvocationStatus invocationStatus = InvocationStatus.CONTINUE;
     private GrizzlyResponseStatus responseStatus;
     private GrizzlyResponseFuture future;
     private String lastRedirectURI;
-    private AtomicLong totalBodyWritten = new AtomicLong();
+    private final AtomicLong totalBodyWritten = new AtomicLong();
     private AsyncHandler.STATE currentState;
 
     private String wsRequestURI;

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/bodyhandler/StringBodyHandler.java
Patch:
@@ -26,7 +26,7 @@
 import java.io.IOException;
 
 public final class StringBodyHandler implements BodyHandler {
-    private GrizzlyAsyncHttpProvider grizzlyAsyncHttpProvider;
+    private final GrizzlyAsyncHttpProvider grizzlyAsyncHttpProvider;
 
     public StringBodyHandler(GrizzlyAsyncHttpProvider grizzlyAsyncHttpProvider) {
         this.grizzlyAsyncHttpProvider = grizzlyAsyncHttpProvider;

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/filters/TunnelFilter.java
Patch:
@@ -90,7 +90,7 @@ public NextAction handleEvent(FilterChainContext ctx, FilterChainEvent event)
     // ---------------------------------------------------------- Public Methods
 
 
-    public static boolean tunnelInProgress(final Connection connection) {
+    private static boolean tunnelInProgress(final Connection connection) {
         return (TUNNEL_IN_PROGRESS.get(connection) != null);
     }
 

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/statushandler/ProxyAuthorizationHandler.java
Patch:
@@ -219,7 +219,7 @@ public static boolean isNTLMSecondHandShake(final String proxyAuth) {
                 .startsWith("ntlm") && !proxyAuth.equalsIgnoreCase("ntlm"));
     }
 
-    public static boolean isNTLMFirstHandShake(final String proxy_auth) {
+    private static boolean isNTLMFirstHandShake(final String proxy_auth) {
         return (proxy_auth.equalsIgnoreCase("ntlm"));
     }
 

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/websocket/AHCWebSocketListenerAdapter.java
Patch:
@@ -24,7 +24,7 @@
 
 import java.io.ByteArrayOutputStream;
 
-public final class AHCWebSocketListenerAdapter implements org.glassfish.grizzly.websockets.WebSocketListener {
+final class AHCWebSocketListenerAdapter implements org.glassfish.grizzly.websockets.WebSocketListener {
 
     private final WebSocketListener ahcListener;
     private final GrizzlyWebSocketAdapter webSocket;

File: providers/grizzly/src/main/java/org/asynchttpclient/providers/grizzly/websocket/GrizzlyWebSocketAdapter.java
Patch:
@@ -28,9 +28,9 @@ public final class GrizzlyWebSocketAdapter implements WebSocket {
 
 
     public GrizzlyWebSocketAdapter(final SimpleWebSocket gWebSocket,
-                                   final boolean bufferFragements) {
+                                   final boolean bufferFragments) {
         this.gWebSocket = gWebSocket;
-        this.bufferFragments = bufferFragements;
+        this.bufferFragments = bufferFragments;
     }
 
 

File: api/src/main/java/org/asynchttpclient/AsyncHttpClientConfig.java
Patch:
@@ -1155,7 +1155,7 @@ public Thread newThread(Runnable r) {
                         t.setDaemon(true);
                         return t;
                     }
-                })
+                });
             }
         	
         	if (applicationThreadPool == null) {
@@ -1165,7 +1165,7 @@ public Thread newThread(Runnable r) {
         	                t.setDaemon(true);
         	                return t;
         	            }
-        	        })
+        	        });
         	}
 
             if (applicationThreadPool.isShutdown()) {

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1767,10 +1767,10 @@ public synchronized void run() {
             if (nettyResponseFuture != null && !futureDone && !futureCanceled) {
                 long now = millisTime();
                 if (nettyResponseFuture.hasRequestTimedOut(now)) {
-                    long age = (now - nettyResponseFuture.getStart()) / 1000000;
+                    long age = now - nettyResponseFuture.getStart();
                     expire("Request reached time out of " + nettyResponseFuture.getRequestTimeoutInMs() + " ms after " + age + " ms");
                 } else if (nettyResponseFuture.hasConnectionIdleTimedOut(now)) {
-                    long age = (now - nettyResponseFuture.getStart()) / 1000000;
+                    long age = now - nettyResponseFuture.getStart();
                     expire("Request reached idle time out of " + nettyResponseFuture.getIdleConnectionTimeoutInMs() + " ms after " + age + " ms");
                 }
 

File: providers/netty-4/src/main/java/org/asynchttpclient/providers/netty_4/NettyResponseFuture.java
Patch:
@@ -49,7 +49,7 @@
 public final class NettyResponseFuture<V> extends AbstractListenableFuture<V> {
 
     private final static Logger logger = LoggerFactory.getLogger(NettyResponseFuture.class);
-    public final static String MAX_RETRY = "com.ning.http.client.providers.netty.maxRetry";
+    public final static String MAX_RETRY = "org.asynchttpclient.providers.netty.maxRetry";
 
     enum STATE {
         NEW,

File: providers/netty/src/main/java/org/asynchttpclient/providers/netty/NettyResponseFuture.java
Patch:
@@ -49,7 +49,7 @@
 public final class NettyResponseFuture<V> extends AbstractListenableFuture<V> {
 
     private final static Logger logger = LoggerFactory.getLogger(NettyResponseFuture.class);
-    public final static String MAX_RETRY = "com.ning.http.client.providers.netty.maxRetry";
+    public final static String MAX_RETRY = "org.asynchttpclient.providers.netty.maxRetry";
 
     enum STATE {
         NEW, POOLED, RECONNECTED, CLOSED,

File: api/src/main/java/org/asynchttpclient/AsyncCompletionHandlerBase.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: api/src/main/java/org/asynchttpclient/AsyncHandler.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 /**
  * An asynchronous handler or callback which gets invoked as soon as some data is available when

File: api/src/main/java/org/asynchttpclient/AsyncHttpProvider.java
Patch:
@@ -13,15 +13,16 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.io.Closeable;
 import java.io.IOException;
 import java.util.List;
 
 /**
  * Interface to be used when implementing custom asynchronous I/O HTTP client.
- * By default, the {@link com.ning.http.client.providers.netty.NettyAsyncHttpProvider} is used.
+ * By default, the {@link org.asynchttpclient.providers.jdk.JDKAsyncHttpProvider} is used if
+ * none of the other provider modules are found on the classpath.
  */
 public interface AsyncHttpProvider extends Closeable {
 

File: api/src/main/java/org/asynchttpclient/AsyncHttpProviderConfig.java
Patch:
@@ -10,20 +10,20 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.util.Map;
 import java.util.Set;
 
 /**
- * {@link com.ning.http.client.AsyncHttpProvider} proprietary configurable properties. Note that properties are
+ * {@link AsyncHttpProvider} proprietary configurable properties. Note that properties are
  * <strong>AsyncHttpProvider</strong> dependent, so make sure you consult the AsyncHttpProvider's documentation
  * about what is supported and what's not.
  */
 public interface AsyncHttpProviderConfig<U, V> {
 
     /**
-     * Add a property that will be used when the AsyncHttpClient initialize its {@link com.ning.http.client.AsyncHttpProvider}
+     * Add a property that will be used when the AsyncHttpClient initialize its {@link AsyncHttpProvider}
      *
      * @param name  the name of the property
      * @param value the value of the property

File: api/src/main/java/org/asynchttpclient/Body.java
Patch:
@@ -11,7 +11,7 @@
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
 
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.io.Closeable;
 import java.io.IOException;

File: api/src/main/java/org/asynchttpclient/BodyConsumer.java
Patch:
@@ -11,7 +11,7 @@
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
 
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.io.Closeable;
 import java.io.IOException;

File: api/src/main/java/org/asynchttpclient/BodyGenerator.java
Patch:
@@ -11,7 +11,7 @@
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
 
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.io.IOException;
 

File: api/src/main/java/org/asynchttpclient/ByteArrayPart.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 public class ByteArrayPart implements Part {
     private String name;

File: api/src/main/java/org/asynchttpclient/ConnectionPoolKeyStrategy.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.net.URI;
 

File: api/src/main/java/org/asynchttpclient/ConnectionsPool.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 /**
  * An interface used by an {@link AsyncHttpProvider} for caching http connections.

File: api/src/main/java/org/asynchttpclient/Cookie.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.util.Collections;
 import java.util.Set;

File: api/src/main/java/org/asynchttpclient/DefaultConnectionPoolStrategy.java
Patch:
@@ -13,11 +13,11 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.net.URI;
 
-import com.ning.http.util.AsyncHttpProviderUtils;
+import org.asynchttpclient.util.AsyncHttpProviderUtils;
 
 public enum DefaultConnectionPoolStrategy implements ConnectionPoolKeyStrategy {
 

File: api/src/main/java/org/asynchttpclient/FilePart.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.io.File;
 

File: api/src/main/java/org/asynchttpclient/FluentCaseInsensitiveStringsMap.java
Patch:
@@ -14,9 +14,9 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
-import static com.ning.http.util.MiscUtil.isNonEmpty;
+import static org.asynchttpclient.util.MiscUtil.isNonEmpty;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: api/src/main/java/org/asynchttpclient/FluentStringsMap.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: api/src/main/java/org/asynchttpclient/HttpContent.java
Patch:
@@ -13,12 +13,12 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.net.URI;
 
 /**
- * Base class for callback class used by {@link com.ning.http.client.AsyncHandler}
+ * Base class for callback class used by {@link AsyncHandler}
  */
 public class HttpContent {
     protected final AsyncHttpProvider provider;

File: api/src/main/java/org/asynchttpclient/HttpResponseBodyPart.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.io.IOException;
 import java.io.InputStream;

File: api/src/main/java/org/asynchttpclient/HttpResponseHeaders.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.net.URI;
 

File: api/src/main/java/org/asynchttpclient/HttpResponseStatus.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.net.URI;
 

File: api/src/main/java/org/asynchttpclient/ListenableFuture.java
Patch:
@@ -28,7 +28,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.Executor;

File: api/src/main/java/org/asynchttpclient/MaxRedirectException.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 /**
  * Thrown when the {@link AsyncHttpClientConfig#getMaxRedirects()} has been reached.

File: api/src/main/java/org/asynchttpclient/Part.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 /**
  * Interface for the parts in a multipart request.

File: api/src/main/java/org/asynchttpclient/ProxyServer.java
Patch:
@@ -14,14 +14,14 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
-import com.ning.http.util.AsyncHttpProviderUtils;
+import org.asynchttpclient.util.AsyncHttpProviderUtils;
 
 /**
  * Represents a proxy server.

File: api/src/main/java/org/asynchttpclient/RandomAccessBody.java
Patch:
@@ -11,7 +11,7 @@
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
 
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.io.IOException;
 import java.nio.channels.WritableByteChannel;

File: api/src/main/java/org/asynchttpclient/Realm.java
Patch:
@@ -14,9 +14,9 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
-import static com.ning.http.util.MiscUtil.isNonEmpty;
+import static org.asynchttpclient.util.MiscUtil.isNonEmpty;
 
 import java.io.UnsupportedEncodingException;
 import java.security.MessageDigest;

File: api/src/main/java/org/asynchttpclient/Request.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.io.File;
 import java.io.IOException;

File: api/src/main/java/org/asynchttpclient/RequestBuilder.java
Patch:
@@ -13,9 +13,9 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
-import com.ning.http.client.Request.EntityWriter;
+import org.asynchttpclient.Request.EntityWriter;
 
 import java.io.InputStream;
 import java.util.Collection;
@@ -105,7 +105,7 @@ public RequestBuilder setBody(EntityWriter dataWriter) {
      * @return a {@link RequestBuilder}
      * @throws IllegalArgumentException
      * @see #setBody(BodyGenerator) InputStreamBodyGenerator(inputStream)
-     * @see com.ning.http.client.generators.InputStreamBodyGenerator
+     * @see org.asynchttpclient.generators.InputStreamBodyGenerator
      * @deprecated {@link #setBody(BodyGenerator)} setBody(new InputStreamBodyGenerator(inputStream))
      */
     @Override

File: api/src/main/java/org/asynchttpclient/ResumableBodyConsumer.java
Patch:
@@ -11,7 +11,7 @@
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
 
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import java.io.IOException;
 

File: api/src/main/java/org/asynchttpclient/SSLEngineFactory.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 import javax.net.ssl.SSLEngine;
 import java.security.GeneralSecurityException;

File: api/src/main/java/org/asynchttpclient/SignatureCalculator.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 /**
  * Interface that allows injecting signature calculator into

File: api/src/main/java/org/asynchttpclient/StringPart.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 /**
  * A string multipart part.

File: api/src/main/java/org/asynchttpclient/ThrowableHandler.java
Patch:
@@ -11,7 +11,7 @@
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
 
-package com.ning.http.client;
+package org.asynchttpclient;
 
 /**
  * Simple {@link Throwable} handler to be used with {@link SimpleAsyncHttpClient}

File: api/src/main/java/org/asynchttpclient/UpgradeHandler.java
Patch:
@@ -10,10 +10,10 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client;
+package org.asynchttpclient;
 
 /**
- * Invoked when an {@link AsyncHandler.STATE#UPGRADE} is returned. Currently the library only support {@link com.ning.http.client.websocket.WebSocket}
+ * Invoked when an {@link AsyncHandler.STATE#UPGRADE} is returned. Currently the library only support {@link org.asynchttpclient.websocket.WebSocket}
  * as type.
  *
  * @param <T>

File: api/src/main/java/org/asynchttpclient/consumers/AppendableBodyConsumer.java
Patch:
@@ -10,9 +10,9 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.consumers;
+package org.asynchttpclient.consumers;
 
-import com.ning.http.client.BodyConsumer;
+import org.asynchttpclient.BodyConsumer;
 
 import java.io.Closeable;
 import java.io.IOException;

File: api/src/main/java/org/asynchttpclient/consumers/ByteBufferBodyConsumer.java
Patch:
@@ -10,9 +10,9 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.consumers;
+package org.asynchttpclient.consumers;
 
-import com.ning.http.client.BodyConsumer;
+import org.asynchttpclient.BodyConsumer;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;

File: api/src/main/java/org/asynchttpclient/consumers/FileBodyConsumer.java
Patch:
@@ -10,9 +10,9 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.consumers;
+package org.asynchttpclient.consumers;
 
-import com.ning.http.client.ResumableBodyConsumer;
+import org.asynchttpclient.ResumableBodyConsumer;
 
 import java.io.IOException;
 import java.io.RandomAccessFile;

File: api/src/main/java/org/asynchttpclient/consumers/OutputStreamBodyConsumer.java
Patch:
@@ -10,9 +10,9 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.consumers;
+package org.asynchttpclient.consumers;
 
-import com.ning.http.client.BodyConsumer;
+import org.asynchttpclient.BodyConsumer;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: api/src/main/java/org/asynchttpclient/filter/FilterException.java
Patch:
@@ -10,10 +10,10 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.filter;
+package org.asynchttpclient.filter;
 
 /**
- * An exception that can be thrown by an {@link com.ning.http.client.AsyncHandler} to interrupt invocation of
+ * An exception that can be thrown by an {@link org.asynchttpclient.AsyncHandler} to interrupt invocation of
  * the {@link RequestFilter} and {@link ResponseFilter}. It also interrupt the request and response processing.
  */
 @SuppressWarnings("serial")

File: api/src/main/java/org/asynchttpclient/filter/IOExceptionFilter.java
Patch:
@@ -10,16 +10,16 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.filter;
+package org.asynchttpclient.filter;
 
 /**
  * This filter is invoked when an {@link java.io.IOException} occurs during an http transaction.
  */
 public interface IOExceptionFilter {
 
     /**
-     * An {@link com.ning.http.client.AsyncHttpProvider} will invoke {@link IOExceptionFilter#filter} and will
-     * use the returned {@link FilterContext} to replay the {@link com.ning.http.client.Request} or abort the processing.
+     * An {@link org.asynchttpclient.AsyncHttpProvider} will invoke {@link IOExceptionFilter#filter} and will
+     * use the returned {@link FilterContext} to replay the {@link org.asynchttpclient.Request} or abort the processing.
      *
      * @param ctx a {@link FilterContext}
      * @return {@link FilterContext}. The {@link FilterContext} instance may not the same as the original one.

File: api/src/main/java/org/asynchttpclient/filter/RequestFilter.java
Patch:
@@ -10,15 +10,15 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.filter;
+package org.asynchttpclient.filter;
 
 /**
  * A Filter interface that gets invoked before making an actual request.
  */
 public interface RequestFilter {
 
     /**
-     * An {@link com.ning.http.client.AsyncHttpProvider} will invoke {@link RequestFilter#filter} and will use the
+     * An {@link org.asynchttpclient.AsyncHttpProvider} will invoke {@link RequestFilter#filter} and will use the
      * returned {@link FilterContext#getRequest()} and {@link FilterContext#getAsyncHandler()} to continue the request
      * processing.
      *

File: api/src/main/java/org/asynchttpclient/filter/ResponseFilter.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.filter;
+package org.asynchttpclient.filter;
 
 /**
  * A Filter interface that gets invoked before making the processing of the response bytes. {@link ResponseFilter} are invoked
@@ -20,7 +20,7 @@
 public interface ResponseFilter {
 
     /**
-     * An {@link com.ning.http.client.AsyncHttpProvider} will invoke {@link ResponseFilter#filter} and will use the
+     * An {@link org.asynchttpclient.AsyncHttpProvider} will invoke {@link ResponseFilter#filter} and will use the
      * returned {@link FilterContext#replayRequest()} and {@link FilterContext#getAsyncHandler()} to decide if the response
      * processing can continue. If {@link FilterContext#replayRequest()} return true, a new request will be made
      * using {@link FilterContext#getRequest()} and the current response processing will be ignored.

File: api/src/main/java/org/asynchttpclient/generators/ByteArrayBodyGenerator.java
Patch:
@@ -10,10 +10,10 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.generators;
+package org.asynchttpclient.generators;
 
-import com.ning.http.client.Body;
-import com.ning.http.client.BodyGenerator;
+import org.asynchttpclient.Body;
+import org.asynchttpclient.BodyGenerator;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;

File: api/src/main/java/org/asynchttpclient/generators/FileBodyGenerator.java
Patch:
@@ -10,10 +10,10 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.generators;
+package org.asynchttpclient.generators;
 
-import com.ning.http.client.BodyGenerator;
-import com.ning.http.client.RandomAccessBody;
+import org.asynchttpclient.BodyGenerator;
+import org.asynchttpclient.RandomAccessBody;
 
 import java.io.File;
 import java.io.IOException;

File: api/src/main/java/org/asynchttpclient/generators/InputStreamBodyGenerator.java
Patch:
@@ -11,10 +11,10 @@
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
 
-package com.ning.http.client.generators;
+package org.asynchttpclient.generators;
 
-import com.ning.http.client.Body;
-import com.ning.http.client.BodyGenerator;
+import org.asynchttpclient.Body;
+import org.asynchttpclient.BodyGenerator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: api/src/main/java/org/asynchttpclient/listenable/AbstractListenableFuture.java
Patch:
@@ -26,9 +26,9 @@
  * limitations under the License.
  */
 
-package com.ning.http.client.listenable;
+package org.asynchttpclient.listenable;
 
-import com.ning.http.client.ListenableFuture;
+import org.asynchttpclient.ListenableFuture;
 
 import java.util.concurrent.Executor;
 

File: api/src/main/java/org/asynchttpclient/listenable/ExecutionList.java
Patch:
@@ -26,7 +26,7 @@
  * limitations under the License.
  */
 
-package com.ning.http.client.listenable;
+package org.asynchttpclient.listenable;
 
 import java.util.Queue;
 import java.util.concurrent.Executor;

File: api/src/main/java/org/asynchttpclient/listener/TransferListener.java
Patch:
@@ -10,9 +10,9 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.listener;
+package org.asynchttpclient.listener;
 
-import com.ning.http.client.FluentCaseInsensitiveStringsMap;
+import org.asynchttpclient.FluentCaseInsensitiveStringsMap;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;

File: api/src/main/java/org/asynchttpclient/multipart/ByteArrayPartSource.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: api/src/main/java/org/asynchttpclient/multipart/FilePart.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 import java.io.File;
 import java.io.FileNotFoundException;

File: api/src/main/java/org/asynchttpclient/multipart/FilePartSource.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;

File: api/src/main/java/org/asynchttpclient/multipart/FilePartStallHandler.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 import java.util.Timer;
 import java.util.TimerTask;

File: api/src/main/java/org/asynchttpclient/multipart/FileUploadStalledException.java
Patch:
@@ -10,7 +10,7 @@
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
 */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 import java.io.IOException;
 

File: api/src/main/java/org/asynchttpclient/multipart/MultipartEncodingUtil.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 import java.io.UnsupportedEncodingException;
 

File: api/src/main/java/org/asynchttpclient/multipart/Part.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -24,7 +24,7 @@
  * 
  * @link http://hc.apache.org/httpclient-3.x/
  */
-public abstract class Part implements com.ning.http.client.Part {
+public abstract class Part implements org.asynchttpclient.Part {
 
     /**
      * The boundary

File: api/src/main/java/org/asynchttpclient/multipart/PartBase.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 /**
  * This class is an adaptation of the Apache HttpClient implementation

File: api/src/main/java/org/asynchttpclient/multipart/PartSource.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 import java.io.IOException;
 import java.io.InputStream;

File: api/src/main/java/org/asynchttpclient/multipart/RequestEntity.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: api/src/main/java/org/asynchttpclient/multipart/StringPart.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.multipart;
+package org.asynchttpclient.multipart;
 
 import java.io.IOException;
 import java.io.OutputStream;

File: api/src/main/java/org/asynchttpclient/ntlm/NTLMEngine.java
Patch:
@@ -36,9 +36,9 @@
  *
  */
 
-package com.ning.http.client.ntlm;
+package org.asynchttpclient.ntlm;
 
-import com.ning.http.util.Base64;
+import org.asynchttpclient.util.Base64;
 
 import javax.crypto.Cipher;
 import javax.crypto.spec.SecretKeySpec;

File: api/src/main/java/org/asynchttpclient/ntlm/NTLMEngineException.java
Patch:
@@ -36,7 +36,7 @@
  *
  */
 
-package com.ning.http.client.ntlm;
+package org.asynchttpclient.ntlm;
 
 /**
  * Signals NTLM protocol failure.

File: api/src/main/java/org/asynchttpclient/oauth/ConsumerKey.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client.oauth;
+package org.asynchttpclient.oauth;
 
 /**
  * Value class for OAuth consumer keys.

File: api/src/main/java/org/asynchttpclient/oauth/RequestToken.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client.oauth;
+package org.asynchttpclient.oauth;
 
 /**
  * Value class used for OAuth tokens (request secret, access secret);

File: api/src/main/java/org/asynchttpclient/oauth/ThreadSafeHMAC.java
Patch:
@@ -14,10 +14,10 @@
  * under the License.
  *
  */
-package com.ning.http.client.oauth;
+package org.asynchttpclient.oauth;
 
-import com.ning.http.util.UTF8UrlEncoder;
-import com.ning.http.util.UTF8Codec;
+import org.asynchttpclient.util.UTF8UrlEncoder;
+import org.asynchttpclient.util.UTF8Codec;
 
 import javax.crypto.Mac;
 import javax.crypto.spec.SecretKeySpec;

File: api/src/main/java/org/asynchttpclient/org/jboss/netty/handler/codec/http/CookieHeaderNames.java
Patch:
@@ -25,7 +25,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.org.jboss.netty.handler.codec.http;
+package org.asynchttpclient.org.jboss.netty.handler.codec.http;
 
 final class CookieHeaderNames {
     static final String PATH = "Path";

File: api/src/main/java/org/asynchttpclient/org/jboss/netty/util/internal/StringUtil.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.org.jboss.netty.util.internal;
+package org.asynchttpclient.org.jboss.netty.util.internal;
 
 import java.util.ArrayList;
 import java.util.List;

File: api/src/main/java/org/asynchttpclient/providers/jdk/JDKAsyncHttpProviderConfig.java
Patch:
@@ -10,9 +10,9 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.providers.jdk;
+package org.asynchttpclient.providers.jdk;
 
-import com.ning.http.client.AsyncHttpProviderConfig;
+import org.asynchttpclient.AsyncHttpProviderConfig;
 
 import java.util.Map;
 import java.util.Set;

File: api/src/main/java/org/asynchttpclient/providers/jdk/ResponseBodyPart.java
Patch:
@@ -10,10 +10,10 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.providers.jdk;
+package org.asynchttpclient.providers.jdk;
 
-import com.ning.http.client.AsyncHttpProvider;
-import com.ning.http.client.HttpResponseBodyPart;
+import org.asynchttpclient.AsyncHttpProvider;
+import org.asynchttpclient.HttpResponseBodyPart;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: api/src/main/java/org/asynchttpclient/providers/jdk/ResponseStatus.java
Patch:
@@ -10,10 +10,10 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.providers.jdk;
+package org.asynchttpclient.providers.jdk;
 
-import com.ning.http.client.AsyncHttpProvider;
-import com.ning.http.client.HttpResponseStatus;
+import org.asynchttpclient.AsyncHttpProvider;
+import org.asynchttpclient.HttpResponseStatus;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;

File: api/src/main/java/org/asynchttpclient/resumable/PropertiesBasedResumableProcessor.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.resumable;
+package org.asynchttpclient.resumable;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -24,7 +24,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
- * A {@link com.ning.http.client.resumable.ResumableAsyncHandler.ResumableProcessor} which use a properties file
+ * A {@link org.asynchttpclient.resumable.ResumableAsyncHandler.ResumableProcessor} which use a properties file
  * to store the download index information.
  */
 public class PropertiesBasedResumableProcessor implements ResumableAsyncHandler.ResumableProcessor {

File: api/src/main/java/org/asynchttpclient/resumable/ResumableListener.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.resumable;
+package org.asynchttpclient.resumable;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;

File: api/src/main/java/org/asynchttpclient/simple/HeaderMap.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.simple;
+package org.asynchttpclient.simple;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -13,7 +13,7 @@
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
 
-import com.ning.http.client.FluentCaseInsensitiveStringsMap;
+import org.asynchttpclient.FluentCaseInsensitiveStringsMap;
 
 import java.util.Collection;
 import java.util.List;

File: api/src/main/java/org/asynchttpclient/simple/SimpleAHCTransferListener.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.simple;
+package org.asynchttpclient.simple;
 
 /*
  * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
@@ -13,14 +13,14 @@
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
 
-import com.ning.http.client.SimpleAsyncHttpClient;
+import org.asynchttpclient.SimpleAsyncHttpClient;
 
 /**
  * A simple transfer listener for use with the {@link SimpleAsyncHttpClient}.
  * <p/>
  * Note: This listener does not cover requests failing before a connection is
  * established. For error handling, see
- * {@link com.ning.http.client.SimpleAsyncHttpClient.Builder#setDefaultThrowableHandler(com.ning.http.client.ThrowableHandler)}
+ * {@link org.asynchttpclient.SimpleAsyncHttpClient.Builder#setDefaultThrowableHandler(org.asynchttpclient.ThrowableHandler)}
  *
  * @author Benjamin Hanzelmann
  */

File: api/src/main/java/org/asynchttpclient/util/AllowAllHostnameVerifier.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.util;
+package org.asynchttpclient.util;
 
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLSession;

File: api/src/main/java/org/asynchttpclient/util/Base64.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.util;
+package org.asynchttpclient.util;
 
 /**
  * Implements the "base64" binary encoding scheme as defined by

File: api/src/main/java/org/asynchttpclient/util/DateUtil.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.util;
+package org.asynchttpclient.util;
 
 /*
  * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/java/org/apache/commons/httpclient/util/DateUtil.java,v 1.2 2004/12/24 20:36:13 olegk Exp $

File: api/src/main/java/org/asynchttpclient/util/MiscUtil.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.util;
+package org.asynchttpclient.util;
 
 import java.util.Collection;
 import java.util.Map;

File: api/src/main/java/org/asynchttpclient/util/SslUtils.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.util;
+package org.asynchttpclient.util;
 
 import javax.net.ssl.KeyManager;
 import javax.net.ssl.KeyManagerFactory;

File: api/src/main/java/org/asynchttpclient/util/UTF8Codec.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.util;
+package org.asynchttpclient.util;
 
 import java.io.UnsupportedEncodingException;
 

File: api/src/main/java/org/asynchttpclient/util/UTF8UrlEncoder.java
Patch:
@@ -13,14 +13,14 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.util;
+package org.asynchttpclient.util;
 
 /**
  * Convenience class that encapsulates details of "percent encoding"
  * (as per RFC-3986, see [http://www.ietf.org/rfc/rfc3986.txt]).
  */
 public class UTF8UrlEncoder {
-    private static final boolean encodeSpaceUsingPlus = System.getProperty("com.com.ning.http.util.UTF8UrlEncoder.encodeSpaceUsingPlus") == null ? false : true;
+    private static final boolean encodeSpaceUsingPlus = System.getProperty("com.UTF8UrlEncoder.encodeSpaceUsingPlus") == null ? false : true;
 
     /**
      * Encoding table used for figuring out ascii characters that must be escaped

File: api/src/main/java/org/asynchttpclient/websocket/DefaultWebSocketListener.java
Patch:
@@ -37,7 +37,7 @@
  * only if the new code is made subject to such option by the copyright
  * holder.
  */
-package com.ning.http.client.websocket;
+package org.asynchttpclient.websocket;
 
 /**
  * Default WebSocketListener implementation.  Most methods are no-ops.  This 

File: api/src/main/java/org/asynchttpclient/websocket/WebSocket.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.websocket;
+package org.asynchttpclient.websocket;
 
 import java.io.Closeable;
 

File: api/src/main/java/org/asynchttpclient/websocket/WebSocketByteListener.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.websocket;
+package org.asynchttpclient.websocket;
 
 /**
  * A {@link WebSocketListener} for bytes

File: api/src/main/java/org/asynchttpclient/websocket/WebSocketCloseCodeReasonListener.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.websocket;
+package org.asynchttpclient.websocket;
 
 /**
  * Extend the normal close listener with one that support the WebSocket's code and reason.

File: api/src/main/java/org/asynchttpclient/websocket/WebSocketListener.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.websocket;
+package org.asynchttpclient.websocket;
 
 /**
  * A generic {@link WebSocketListener} for WebSocket events. Use the appropriate listener for receiving message bytes.

File: api/src/main/java/org/asynchttpclient/websocket/WebSocketPingListener.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.websocket;
+package org.asynchttpclient.websocket;
 
 /**
  * A WebSocket's Ping Listener

File: api/src/main/java/org/asynchttpclient/websocket/WebSocketPongListener.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.websocket;
+package org.asynchttpclient.websocket;
 
 /**
  * A WebSocket's Pong Listener

File: api/src/main/java/org/asynchttpclient/websocket/WebSocketTextListener.java
Patch:
@@ -10,7 +10,7 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.websocket;
+package org.asynchttpclient.websocket;
 
 /**
  * A {@link WebSocketListener} for text message

File: api/src/test/java/org/asynchttpclient/async/ComplexClientTest.java
Patch:
@@ -13,10 +13,10 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async;
+package org.asynchttpclient.async;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.Response;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.Response;
 import org.testng.annotations.Test;
 
 import java.util.concurrent.TimeUnit;

File: api/src/test/java/org/asynchttpclient/async/ErrorResponseTest.java
Patch:
@@ -14,10 +14,10 @@
  * under the License.
  *
  */
-package com.ning.http.client.async;
+package org.asynchttpclient.async;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.Response;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.Response;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.Test;

File: api/src/test/java/org/asynchttpclient/async/Expect100ContinueTest.java
Patch:
@@ -13,10 +13,10 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async;
+package org.asynchttpclient.async;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.Response;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.Response;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.Test;

File: api/src/test/java/org/asynchttpclient/async/FluentCaseInsensitiveStringsMapTest.java
Patch:
@@ -13,9 +13,9 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async;
+package org.asynchttpclient.async;
 
-import com.ning.http.client.FluentCaseInsensitiveStringsMap;
+import org.asynchttpclient.FluentCaseInsensitiveStringsMap;
 import org.testng.annotations.Test;
 
 import java.util.Arrays;

File: api/src/test/java/org/asynchttpclient/async/FluentStringsMapTest.java
Patch:
@@ -13,9 +13,9 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async;
+package org.asynchttpclient.async;
 
-import com.ning.http.client.FluentStringsMap;
+import org.asynchttpclient.FluentStringsMap;
 import org.testng.annotations.Test;
 
 import java.util.Arrays;

File: api/src/test/java/org/asynchttpclient/async/IdleStateHandlerTest.java
Patch:
@@ -13,10 +13,10 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async;
+package org.asynchttpclient.async;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.Server;

File: api/src/test/java/org/asynchttpclient/async/MaxConnectionsInThreads.java
Patch:
@@ -14,10 +14,10 @@
  * under the License.
  *
  */
-package com.ning.http.client.async;
+package org.asynchttpclient.async;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.nio.SelectChannelConnector;

File: api/src/test/java/org/asynchttpclient/async/RetryRequestTest.java
Patch:
@@ -10,10 +10,10 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.async;
+package org.asynchttpclient.async;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.annotations.Test;

File: api/src/test/java/org/asynchttpclient/generators/ByteArrayBodyGeneratorTest.java
Patch:
@@ -11,10 +11,11 @@
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
 
-package com.ning.http.client.generators;
+package org.asynchttpclient.generators;
 
-import com.ning.http.client.Body;
+import org.asynchttpclient.Body;
 
+import org.asynchttpclient.generators.ByteArrayBodyGenerator;
 import org.testng.annotations.Test;
 
 import java.io.IOException;

File: api/src/test/java/org/asynchttpclient/resumable/MapResumableProcessor.java
Patch:
@@ -1,6 +1,6 @@
-package com.ning.http.client.resumable;
+package org.asynchttpclient.resumable;
 
-import com.ning.http.client.resumable.ResumableAsyncHandler.ResumableProcessor;
+import org.asynchttpclient.resumable.ResumableAsyncHandler.ResumableProcessor;
 
 import java.util.HashMap;
 import java.util.Map;

File: api/src/test/java/org/asynchttpclient/resumable/PropertiesBasedResumableProcesserTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.resumable;
+package org.asynchttpclient.resumable;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -13,6 +13,7 @@
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
 
+import org.asynchttpclient.resumable.PropertiesBasedResumableProcessor;
 import org.testng.annotations.Test;
 
 import java.util.Map;

File: api/src/test/java/org/asynchttpclient/util/TestUTF8UrlCodec.java
Patch:
@@ -13,8 +13,9 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.util;
+package org.asynchttpclient.util;
 
+import org.asynchttpclient.util.UTF8UrlEncoder;
 import org.testng.Assert;
 import org.testng.annotations.Test;
 

File: api/src/test/java/org/asynchttpclient/websocket/AbstractBasicTest.java
Patch:
@@ -10,10 +10,10 @@
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the Apache License Version 2.0 for the specific language governing permissions and limitations there under.
  */
-package com.ning.http.client.websocket;
+package org.asynchttpclient.websocket;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.server.handler.HandlerWrapper;

File: extras/guava/src/main/java/com/ning/http/client/extra/ListenableFutureAdapter.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-import com.ning.http.client.ListenableFuture;
+import org.asynchttpclient.ListenableFuture;
 
 public final class ListenableFutureAdapter {
 

File: extras/jdeferred/src/main/java/com/ning/http/client/extra/HttpResponseBodyPartProgress.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.ning.http.client.extra;
 
-import com.ning.http.client.HttpResponseBodyPart;
+import org.asynchttpclient.HttpResponseBodyPart;
 
 public class HttpResponseBodyPartProgress implements HttpProgress {
 	private final HttpResponseBodyPart part;

File: extras/jdeferred/src/test/java/com/ning/http/client/extra/AsyncHttpTest.java
Patch:
@@ -28,8 +28,8 @@
 import org.jdeferred.impl.DefaultDeferredManager;
 import org.jdeferred.multiple.MultipleResults;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.Response;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.Response;
 
 public class AsyncHttpTest extends TestCase {
 	protected DefaultDeferredManager deferredManager;

File: providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProviderConfig.java
Patch:
@@ -12,7 +12,7 @@
  */
 package com.ning.http.client.providers.apache;
 
-import com.ning.http.client.AsyncHttpProviderConfig;
+import org.asynchttpclient.AsyncHttpProviderConfig;
 
 import java.util.Map;
 import java.util.Set;

File: providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheResponseBodyPart.java
Patch:
@@ -12,8 +12,8 @@
  */
 package com.ning.http.client.providers.apache;
 
-import com.ning.http.client.AsyncHttpProvider;
-import com.ning.http.client.HttpResponseBodyPart;
+import org.asynchttpclient.AsyncHttpProvider;
+import org.asynchttpclient.HttpResponseBodyPart;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;

File: providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheResponseStatus.java
Patch:
@@ -12,8 +12,8 @@
  */
 package com.ning.http.client.providers.apache;
 
-import com.ning.http.client.AsyncHttpProvider;
-import com.ning.http.client.HttpResponseStatus;
+import org.asynchttpclient.AsyncHttpProvider;
+import org.asynchttpclient.HttpResponseStatus;
 import org.apache.commons.httpclient.HttpMethodBase;
 
 import java.net.URI;

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/FeedableBodyGenerator.java
Patch:
@@ -12,8 +12,8 @@
  */
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.Body;
-import com.ning.http.client.BodyGenerator;
+import org.asynchttpclient.Body;
+import org.asynchttpclient.BodyGenerator;
 import java.io.IOException;
 import java.nio.ByteBuffer;
 import java.util.Queue;

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GSSSPNEGOWrapper.java
Patch:
@@ -6,7 +6,7 @@
 import org.ietf.jgss.GSSName;
 import org.ietf.jgss.Oid;
 
-import com.ning.http.util.Base64;
+import org.asynchttpclient.util.Base64;
 import org.slf4j.LoggerFactory;
 
 public class GSSSPNEGOWrapper {

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProviderConfig.java
Patch:
@@ -13,7 +13,7 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpProviderConfig;
+import org.asynchttpclient.AsyncHttpProviderConfig;
 import org.glassfish.grizzly.http.HttpCodecFilter;
 import org.glassfish.grizzly.nio.transport.TCPNIOTransport;
 
@@ -24,7 +24,7 @@
 /**
  * {@link AsyncHttpProviderConfig} implementation that allows customization
  * of the Grizzly runtime outside of the scope of what the
- * {@link com.ning.http.client.AsyncHttpClientConfig} offers.
+ * {@link org.asynchttpclient.AsyncHttpClientConfig} offers.
  *
  * @see Property
  * 

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
Patch:
@@ -13,8 +13,8 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.ConnectionsPool;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.ConnectionsPool;
 
 import org.glassfish.grizzly.CloseListener;
 import org.glassfish.grizzly.CloseType;

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseBodyPart.java
Patch:
@@ -13,8 +13,8 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpProvider;
-import com.ning.http.client.HttpResponseBodyPart;
+import org.asynchttpclient.AsyncHttpProvider;
+import org.asynchttpclient.HttpResponseBodyPart;
 
 import org.glassfish.grizzly.Buffer;
 import org.glassfish.grizzly.Connection;

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseHeaders.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpProvider;
-import com.ning.http.client.FluentCaseInsensitiveStringsMap;
-import com.ning.http.client.HttpResponseHeaders;
+import org.asynchttpclient.AsyncHttpProvider;
+import org.asynchttpclient.FluentCaseInsensitiveStringsMap;
+import org.asynchttpclient.HttpResponseHeaders;
 
 import org.glassfish.grizzly.http.HttpResponsePacket;
 import org.glassfish.grizzly.http.util.MimeHeaders;

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseStatus.java
Patch:
@@ -13,8 +13,8 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpProvider;
-import com.ning.http.client.HttpResponseStatus;
+import org.asynchttpclient.AsyncHttpProvider;
+import org.asynchttpclient.HttpResponseStatus;
 
 import org.glassfish.grizzly.http.HttpResponsePacket;
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncStreamHandlerTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.AsyncStreamHandlerTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.AsyncStreamHandlerTest;
 
 public class GrizzlyAsyncStreamHandlerTest extends AsyncStreamHandlerTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncStreamLifecycleTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.AsyncStreamLifecycleTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.AsyncStreamLifecycleTest;
 
 public class GrizzlyAsyncStreamLifecycleTest extends AsyncStreamLifecycleTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyAuthTimeoutTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.AuthTimeoutTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.AuthTimeoutTest;
 
 public class GrizzlyAuthTimeoutTest extends AuthTimeoutTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyBasicAuthTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.BasicAuthTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.BasicAuthTest;
 
 public class GrizzlyBasicAuthTest extends BasicAuthTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyBasicHttpsTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.BasicHttpsTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.BasicHttpsTest;
 
 public class GrizzlyBasicHttpsTest extends BasicHttpsTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyBodyChunkTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.BodyChunkTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.BodyChunkTest;
 
 public class GrizzlyBodyChunkTest extends BodyChunkTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyBodyDeferringAsyncHandlerTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.BodyDeferringAsyncHandlerTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.BodyDeferringAsyncHandlerTest;
 
 public class GrizzlyBodyDeferringAsyncHandlerTest extends BodyDeferringAsyncHandlerTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyByteBufferCapacityTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ByteBufferCapacityTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ByteBufferCapacityTest;
 import org.testng.annotations.Test;
 
 public class GrizzlyByteBufferCapacityTest extends ByteBufferCapacityTest {

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyChunkingTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ChunkingTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ChunkingTest;
 
 public class GrizzlyChunkingTest extends ChunkingTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyComplexClientTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ComplexClientTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ComplexClientTest;
 
 public class GrizzlyComplexClientTest extends ComplexClientTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyDigestAuthTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.DigestAuthTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.DigestAuthTest;
 
 public class GrizzlyDigestAuthTest extends DigestAuthTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyEmptyBodyTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.EmptyBodyTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.EmptyBodyTest;
 
 public class GrizzlyEmptyBodyTest extends EmptyBodyTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyErrorResponseTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ErrorResponseTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ErrorResponseTest;
 
 public class GrizzlyErrorResponseTest extends ErrorResponseTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyExpectContinue100Test.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.Expect100ContinueTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.Expect100ContinueTest;
 
 public class GrizzlyExpectContinue100Test extends Expect100ContinueTest{
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyFilterTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.FilterTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.FilterTest;
 
 public class GrizzlyFilterTest extends FilterTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyFollowingThreadTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.FollowingThreadTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.FollowingThreadTest;
 
 public class GrizzlyFollowingThreadTest extends FollowingThreadTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyHead302Test.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.Head302Test;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.Head302Test;
 
 public class GrizzlyHead302Test extends Head302Test {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyHttpToHttpsRedirectTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.HttpToHttpsRedirectTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.HttpToHttpsRedirectTest;
 
 public class GrizzlyHttpToHttpsRedirectTest extends HttpToHttpsRedirectTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyIdleStateHandlerTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.IdleStateHandlerTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.IdleStateHandlerTest;
 
 public class GrizzlyIdleStateHandlerTest extends IdleStateHandlerTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyInputStreamTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.InputStreamTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.InputStreamTest;
 
 public class GrizzlyInputStreamTest extends InputStreamTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyListenableFutureTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ListenableFutureTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ListenableFutureTest;
 
 public class GrizzlyListenableFutureTest extends ListenableFutureTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyMaxConnectionsInThreadsTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.MaxConnectionsInThreads;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.MaxConnectionsInThreads;
 
 public class GrizzlyMaxConnectionsInThreadsTest extends MaxConnectionsInThreads {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyMaxTotalConnectionTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.MaxTotalConnectionTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.MaxTotalConnectionTest;
 
 public class GrizzlyMaxTotalConnectionTest extends MaxTotalConnectionTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyMultipleHeaderTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.MultipleHeaderTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.MultipleHeaderTest;
 
 public class GrizzlyMultipleHeaderTest extends MultipleHeaderTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyNoNullResponseTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.NoNullResponseTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.NoNullResponseTest;
 
 public class GrizzlyNoNullResponseTest extends NoNullResponseTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyNonAsciiContentLengthTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.NonAsciiContentLengthTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.NonAsciiContentLengthTest;
 
 public class GrizzlyNonAsciiContentLengthTest extends NonAsciiContentLengthTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyParamEncodingTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ParamEncodingTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ParamEncodingTest;
 
 public class GrizzlyParamEncodingTest extends ParamEncodingTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyPerRequestRelative302Test.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.PerRequestRelative302Test;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.PerRequestRelative302Test;
 
 public class GrizzlyPerRequestRelative302Test extends PerRequestRelative302Test {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyPerRequestTimeoutTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.PerRequestTimeoutTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.PerRequestTimeoutTest;
 
 public class GrizzlyPerRequestTimeoutTest extends PerRequestTimeoutTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyPostRedirectGetTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.PostRedirectGetTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.PostRedirectGetTest;
 
 public class GrizzlyPostRedirectGetTest extends PostRedirectGetTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyPostWithQSTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.PostWithQSTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.PostWithQSTest;
 
 public class GrizzlyPostWithQSTest extends PostWithQSTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyProviderUtil.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
 
 public class GrizzlyProviderUtil {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyProxyTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProxyTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ProxyTest;
 
 public class GrizzlyProxyTest extends ProxyTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyProxyTunnelingTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProxyTunnellingTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ProxyTunnellingTest;
 
 public class GrizzlyProxyTunnelingTest extends ProxyTunnellingTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyPutLargeFileTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.PutLargeFileTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.PutLargeFileTest;
 
 public class GrizzlyPutLargeFileTest extends PutLargeFileTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyQueryParametersTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.QueryParametersTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.QueryParametersTest;
 
 public class GrizzlyQueryParametersTest extends QueryParametersTest{
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyRC10KTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.RC10KTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.RC10KTest;
 
 public class GrizzlyRC10KTest extends RC10KTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyRelative302Test.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.Relative302Test;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.Relative302Test;
 
 public class GrizzlyRelative302Test extends Relative302Test {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyRemoteSiteTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.RemoteSiteTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.RemoteSiteTest;
 
 public class GrizzlyRemoteSiteTest extends RemoteSiteTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyRetryRequestTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.RetryRequestTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.RetryRequestTest;
 
 public class GrizzlyRetryRequestTest extends RetryRequestTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlySimpleAsyncHttpClientTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.SimpleAsyncHttpClientTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.SimpleAsyncHttpClientTest;
 
 public class GrizzlySimpleAsyncHttpClientTest extends SimpleAsyncHttpClientTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/GrizzlyTransferListenerTest.java
Patch:
@@ -13,9 +13,9 @@
 
 package com.ning.http.client.providers.grizzly;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.TransferListenerTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.TransferListenerTest;
 
 public class GrizzlyTransferListenerTest extends TransferListenerTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/websocket/GrizzlyByteMessageTest.java
Patch:
@@ -12,11 +12,11 @@
  */
 package com.ning.http.client.providers.grizzly.websocket;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 import com.ning.http.client.providers.grizzly.GrizzlyProviderUtil;
-import com.ning.http.client.websocket.ByteMessageTest;
+import org.asynchttpclient.websocket.ByteMessageTest;
 import org.testng.annotations.Test;
 
 public class GrizzlyByteMessageTest extends ByteMessageTest {

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/websocket/GrizzlyCloseCodeReasonMsgTest.java
Patch:
@@ -13,11 +13,11 @@
 
 package com.ning.http.client.providers.grizzly.websocket;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 import com.ning.http.client.providers.grizzly.GrizzlyProviderUtil;
-import com.ning.http.client.websocket.CloseCodeReasonMessageTest;
+import org.asynchttpclient.websocket.CloseCodeReasonMessageTest;
 import org.testng.annotations.Test;
 
 public class GrizzlyCloseCodeReasonMsgTest extends CloseCodeReasonMessageTest {

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/websocket/GrizzlyRedirectTest.java
Patch:
@@ -13,11 +13,11 @@
 
 package com.ning.http.client.providers.grizzly.websocket;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 import com.ning.http.client.providers.grizzly.GrizzlyProviderUtil;
-import com.ning.http.client.websocket.RedirectTest;
+import org.asynchttpclient.websocket.RedirectTest;
 
 public class GrizzlyRedirectTest extends RedirectTest {
 

File: providers/grizzly/src/test/java/com/ning/http/client/providers/grizzly/websocket/GrizzlyTextMessageTest.java
Patch:
@@ -12,11 +12,11 @@
  */
 package com.ning.http.client.providers.grizzly.websocket;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 import com.ning.http.client.providers.grizzly.GrizzlyProviderUtil;
-import com.ning.http.client.websocket.ByteMessageTest;
+import org.asynchttpclient.websocket.ByteMessageTest;
 import org.testng.annotations.Test;
 
 public class GrizzlyTextMessageTest extends ByteMessageTest {

File: providers/netty-4/src/main/java/com/ning/http/client/providers/netty_4/BodyChunkedInput.java
Patch:
@@ -12,7 +12,7 @@
  */
 package com.ning.http.client.providers.netty_4;
 
-import com.ning.http.client.Body;
+import org.asynchttpclient.Body;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.stream.ChunkedInput;

File: providers/netty-4/src/main/java/com/ning/http/client/providers/netty_4/BodyFileRegion.java
Patch:
@@ -12,7 +12,7 @@
  */
 package com.ning.http.client.providers.netty_4;
 
-import com.ning.http.client.RandomAccessBody;
+import org.asynchttpclient.RandomAccessBody;
 import io.netty.buffer.AbstractReferenceCounted;
 import io.netty.buffer.ReferenceCounted;
 import io.netty.channel.FileRegion;

File: providers/netty-4/src/main/java/com/ning/http/client/providers/netty_4/FeedableBodyGenerator.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import com.ning.http.client.Body;
-import com.ning.http.client.BodyGenerator;
+import org.asynchttpclient.Body;
+import org.asynchttpclient.BodyGenerator;
 
 /**
  * {@link BodyGenerator} which may return just part of the payload at the time

File: providers/netty-4/src/main/java/com/ning/http/client/providers/netty_4/NettyAsyncHttpProviderConfig.java
Patch:
@@ -24,7 +24,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.ning.http.client.AsyncHttpProviderConfig;
+import org.asynchttpclient.AsyncHttpProviderConfig;
 import io.netty.channel.ChannelOption;
 import io.netty.channel.EventLoopGroup;
 import io.netty.channel.socket.SocketChannel;
@@ -77,7 +77,7 @@ public class NettyAsyncHttpProviderConfig implements AsyncHttpProviderConfig<Str
     public final static String USE_DIRECT_BYTEBUFFER = "bufferFactory";
 
     /**
-     * Allow nested request from any {@link com.ning.http.client.AsyncHandler}
+     * Allow nested request from any {@link org.asynchttpclient.AsyncHandler}
      */
     public final static String DISABLE_NESTED_REQUEST = "disableNestedRequest";
 
@@ -93,7 +93,7 @@ public NettyAsyncHttpProviderConfig() {
     }
 
     /**
-     * Add a property that will be used when the AsyncHttpClient initialize its {@link com.ning.http.client.AsyncHttpProvider}
+     * Add a property that will be used when the AsyncHttpClient initialize its {@link org.asynchttpclient.AsyncHttpProvider}
      * 
      * @param name
      *            the name of the property

File: providers/netty-4/src/main/java/com/ning/http/client/providers/netty_4/NettyConnectionsPool.java
Patch:
@@ -12,7 +12,7 @@
  */
 package com.ning.http.client.providers.netty_4;
 
-import com.ning.http.client.ConnectionsPool;
+import org.asynchttpclient.ConnectionsPool;
 import io.netty.channel.Channel;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -27,7 +27,7 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 
 /**
- * A simple implementation of {@link com.ning.http.client.ConnectionsPool} based on a {@link java.util.concurrent.ConcurrentHashMap}
+ * A simple implementation of {@link org.asynchttpclient.ConnectionsPool} based on a {@link java.util.concurrent.ConcurrentHashMap}
  */
 public class NettyConnectionsPool implements ConnectionsPool<String, Channel> {
 

File: providers/netty-4/src/main/java/com/ning/http/client/providers/netty_4/ResponseBodyPart.java
Patch:
@@ -15,8 +15,8 @@
  */
 package com.ning.http.client.providers.netty_4;
 
-import com.ning.http.client.AsyncHttpProvider;
-import com.ning.http.client.HttpResponseBodyPart;
+import org.asynchttpclient.AsyncHttpProvider;
+import org.asynchttpclient.HttpResponseBodyPart;
 import io.netty.buffer.ByteBuf;
 import io.netty.handler.codec.http.FullHttpResponse;
 import io.netty.handler.codec.http.HttpContent;

File: providers/netty-4/src/main/java/com/ning/http/client/providers/netty_4/ResponseStatus.java
Patch:
@@ -16,8 +16,8 @@
  */
 package com.ning.http.client.providers.netty_4;
 
-import com.ning.http.client.AsyncHttpProvider;
-import com.ning.http.client.HttpResponseStatus;
+import org.asynchttpclient.AsyncHttpProvider;
+import org.asynchttpclient.HttpResponseStatus;
 import io.netty.handler.codec.http.HttpResponse;
 
 import java.net.URI;

File: providers/netty-4/src/main/java/com/ning/http/client/providers/netty_4/WebSocketUtil.java
Patch:
@@ -12,7 +12,7 @@
  */
 package com.ning.http.client.providers.netty_4;
 
-import com.ning.http.util.Base64;
+import org.asynchttpclient.util.Base64;
 
 import java.io.UnsupportedEncodingException;
 import java.security.MessageDigest;

File: providers/netty-4/src/main/java/com/ning/http/client/providers/netty_4/spnego/SpnegoEngine.java
Patch:
@@ -37,7 +37,7 @@
 
 package com.ning.http.client.providers.netty_4.spnego;
 
-import com.ning.http.util.Base64;
+import org.asynchttpclient.util.Base64;
 import org.ietf.jgss.GSSContext;
 import org.ietf.jgss.GSSException;
 import org.ietf.jgss.GSSManager;

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyAsyncResponseTest.java
Patch:
@@ -15,9 +15,9 @@
 
 import com.ning.http.client.providers.netty_4.ResponseStatus;
 import com.ning.http.client.providers.netty_4.NettyResponse;
-import com.ning.http.client.Cookie;
-import com.ning.http.client.FluentCaseInsensitiveStringsMap;
-import com.ning.http.client.HttpResponseHeaders;
+import org.asynchttpclient.Cookie;
+import org.asynchttpclient.FluentCaseInsensitiveStringsMap;
+import org.asynchttpclient.HttpResponseHeaders;
 import org.testng.annotations.Test;
 
 import java.text.SimpleDateFormat;

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyAsyncStreamHandlerTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.AsyncStreamHandlerTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.AsyncStreamHandlerTest;
 
 public class NettyAsyncStreamHandlerTest extends AsyncStreamHandlerTest {
 

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyAsyncStreamLifecycleTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.AsyncStreamLifecycleTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.AsyncStreamLifecycleTest;
 
 public class NettyAsyncStreamLifecycleTest extends AsyncStreamLifecycleTest {
     @Override

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyAuthTimeoutTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.AuthTimeoutTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.AuthTimeoutTest;
 
 public class NettyAuthTimeoutTest extends AuthTimeoutTest {
 

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyBasicAuthTest.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.testng.annotations.Test;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.BasicAuthTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.BasicAuthTest;
 
 @Test
 public class NettyBasicAuthTest extends BasicAuthTest {

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyBasicHttpsTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.BasicHttpsTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.BasicHttpsTest;
 
 public class NettyBasicHttpsTest extends BasicHttpsTest {
 

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyBodyChunkTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.BodyChunkTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.BodyChunkTest;
 
 public class NettyBodyChunkTest extends BodyChunkTest {
 

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyBodyDeferringAsyncHandlerTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.BodyDeferringAsyncHandlerTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.BodyDeferringAsyncHandlerTest;
 
 public class NettyBodyDeferringAsyncHandlerTest extends BodyDeferringAsyncHandlerTest {
 

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyByteBufferCapacityTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ByteBufferCapacityTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ByteBufferCapacityTest;
 
 public class NettyByteBufferCapacityTest extends ByteBufferCapacityTest {
 

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyChunkingTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ChunkingTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ChunkingTest;
 
 public class NettyChunkingTest extends ChunkingTest {
     @Override

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyComplexClientTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ComplexClientTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ComplexClientTest;
 
 public class NettyComplexClientTest extends ComplexClientTest {
 

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyDigestAuthTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.DigestAuthTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.DigestAuthTest;
 
 public class NettyDigestAuthTest extends DigestAuthTest {
     @Override

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyEmptyBodyTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.EmptyBodyTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.EmptyBodyTest;
 
 public class NettyEmptyBodyTest extends EmptyBodyTest {
 

File: providers/netty-4/src/test/java/com/ning/http/client/providers/netty/NettyErrorResponseTest.java
Patch:
@@ -12,9 +12,9 @@
  */
 package com.ning.http.client.providers.netty;
 
-import com.ning.http.client.AsyncHttpClient;
-import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ErrorResponseTest;
+import org.asynchttpclient.AsyncHttpClient;
+import org.asynchttpclient.AsyncHttpClientConfig;
+import org.asynchttpclient.async.ErrorResponseTest;
 
 public class NettyErrorResponseTest extends ErrorResponseTest {
 

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2389,7 +2389,7 @@ public void onClose(ChannelHandlerContext ctx, ChannelStateEvent e) {
                 WebSocketUpgradeHandler h = WebSocketUpgradeHandler.class.cast(nettyResponse.getAsyncHandler());
                 NettyWebSocket webSocket = NettyWebSocket.class.cast(h.onCompleted());
 
-                webSocket.close();
+                webSocket.close(1006, "Connection was closed abnormally (that is, with no close frame being sent).");
             } catch (Throwable t) {
                 log.error("onError", t);
             }

File: api/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -608,7 +608,7 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                         lenght = MAX_BUFFERED_BYTES;
                     }
 
-                    MultipartRequestEntity mre = AsyncHttpProviderUtils.createMultipartRequestEntity(request.getParts(), request.getParams());
+                    MultipartRequestEntity mre = AsyncHttpProviderUtils.createMultipartRequestEntity(request.getParts(), request.getHeaders());
 
                     urlConnection.setRequestProperty("Content-Type", mre.getContentType());
                     urlConnection.setRequestProperty("Content-Length", String.valueOf(mre.getContentLength()));

File: api/src/main/java/com/ning/http/multipart/MultipartBody.java
Patch:
@@ -48,8 +48,8 @@ public class MultipartBody implements RandomAccessBody {
 
     enum FileLocation {NONE, START, MIDDLE, END}
 
-    public MultipartBody(List<com.ning.http.client.Part> parts, String boundary, String contentLength) {
-        this.boundary = MultipartEncodingUtil.getAsciiBytes(boundary.substring("multipart/form-data; boundary=".length()));
+    public MultipartBody(List<com.ning.http.client.Part> parts, String contentType, String contentLength) {
+        this.boundary = MultipartEncodingUtil.getAsciiBytes(contentType.substring(contentType.indexOf("boundary=") + "boundary=".length()));
         this.contentLength = Long.parseLong(contentLength);
         this.parts = parts;
 
@@ -430,6 +430,7 @@ private ByteArrayOutputStream generateFileStart(FilePart filePart)
         filePart.sendDispositionHeader(overhead);
         filePart.sendContentTypeHeader(overhead);
         filePart.sendTransferEncodingHeader(overhead);
+        filePart.sendContentIdHeader(overhead);
         filePart.sendEndOfHeader(overhead);
         return overhead;
     }

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -2473,7 +2473,7 @@ public boolean doHandle(final FilterChainContext ctx,
             MultipartRequestEntity mre =
                     AsyncHttpProviderUtils.createMultipartRequestEntity(
                             request.getParts(),
-                            request.getParams());
+                            request.getHeaders());
             requestPacket.setContentLengthLong(mre.getContentLength());
             requestPacket.setContentType(mre.getContentType());
             final MemoryManager mm = ctx.getMemoryManager();

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -509,9 +509,9 @@ public void operationComplete(ChannelFuture cf) {
                          * TODO: AHC-78: SSL + zero copy isn't supported by the MultiPart class and pretty complex to implements.
                          */
                         if (future.getRequest().getParts() != null) {
-                            String boundary = future.getNettyRequest().getHeader("Content-Type");
+                            String contentType = future.getNettyRequest().getHeader("Content-Type");
                             String length = future.getNettyRequest().getHeader("Content-Length");
-                            body = new MultipartBody(future.getRequest().getParts(), boundary, length);
+                            body = new MultipartBody(future.getRequest().getParts(), contentType, length);
                         }
 
                         ChannelFuture writeFuture;
@@ -825,7 +825,7 @@ else if (uri.getRawQuery() != null)
                         lenght = MAX_BUFFERED_BYTES;
                     }
 
-                    MultipartRequestEntity mre = AsyncHttpProviderUtils.createMultipartRequestEntity(request.getParts(), request.getParams());
+                    MultipartRequestEntity mre = AsyncHttpProviderUtils.createMultipartRequestEntity(request.getParts(), request.getHeaders());
 
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE, mre.getContentType());
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(mre.getContentLength()));

File: api/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
Patch:
@@ -12,6 +12,7 @@
  */
 package com.ning.http.client.providers.jdk;
 
+import com.ning.org.jboss.netty.handler.codec.http.CookieDecoder;
 import com.ning.http.client.Cookie;
 import com.ning.http.client.HttpResponseBodyPart;
 import com.ning.http.client.HttpResponseHeaders;
@@ -53,8 +54,7 @@ public List<Cookie> buildCookies() {
                 // TODO: ask for parsed header
                 List<String> v = header.getValue();
                 for (String value : v) {
-                    Cookie cookie = AsyncHttpProviderUtils.parseCookie(value);
-                    cookies.add(cookie);
+                    cookies.addAll(CookieDecoder.decode(value));
                 }
             }
         }

File: providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
Patch:
@@ -12,6 +12,7 @@
  */
 package com.ning.http.client.providers.apache;
 
+import com.ning.org.jboss.netty.handler.codec.http.CookieDecoder;
 import com.ning.http.client.Cookie;
 import com.ning.http.client.HttpResponseBodyPart;
 import com.ning.http.client.HttpResponseHeaders;
@@ -55,8 +56,7 @@ public List<Cookie> buildCookies() {
                 // TODO: ask for parsed header
                 List<String> v = header.getValue();
                 for (String value : v) {
-                    Cookie cookie = AsyncHttpProviderUtils.parseCookie(value);
-                    cookies.add(cookie);
+                    cookies.addAll(CookieDecoder.decode(value));
                 }
             }
         }

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.ning.http.client.providers.netty;
 
+import com.ning.org.jboss.netty.handler.codec.http.CookieDecoder;
 import com.ning.http.client.Cookie;
 import com.ning.http.client.HttpResponseBodyPart;
 import com.ning.http.client.HttpResponseHeaders;
@@ -65,8 +66,7 @@ protected List<Cookie> buildCookies() {
                 // TODO: ask for parsed header
                 List<String> v = header.getValue();
                 for (String value : v) {
-                    Cookie cookie = AsyncHttpProviderUtils.parseCookie(value);
-                    cookies.add(cookie);
+                    cookies.addAll(CookieDecoder.decode(value));
                 }
             }
         }

File: api/src/main/java/com/ning/http/client/oauth/ThreadSafeHMAC.java
Patch:
@@ -16,6 +16,7 @@
  */
 package com.ning.http.client.oauth;
 
+import com.ning.http.util.UTF8UrlEncoder;
 import com.ning.http.util.UTF8Codec;
 
 import javax.crypto.Mac;
@@ -36,7 +37,7 @@ public class ThreadSafeHMAC {
     private final Mac mac;
 
     public ThreadSafeHMAC(ConsumerKey consumerAuth, RequestToken userAuth) {
-        byte[] keyBytes = UTF8Codec.toUTF8(consumerAuth.getSecret() + "&" + userAuth.getSecret());
+        byte[] keyBytes = UTF8Codec.toUTF8(UTF8UrlEncoder.encode(consumerAuth.getSecret()) + "&" + UTF8UrlEncoder.encode(userAuth.getSecret()));
         SecretKeySpec signingKey = new SecretKeySpec(keyBytes, HMAC_SHA1_ALGORITHM);
 
         // Get an hmac_sha1 instance and initialize with the signing key

File: api/src/main/java/com/ning/http/client/RequestBuilderBase.java
Patch:
@@ -367,6 +367,8 @@ protected RequestBuilderBase(Class<T> derived, Request prototype) {
 
     public T setUrl(String url) {
         request.originalUri = buildURI(url);
+        request.uri = null;
+        request.rawUri = null;
         return derived.cast(this);
     }
 

File: providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -345,7 +345,7 @@ private HttpMethodBase createMethod(HttpClient client, Request request) throws I
 
             if (proxyServer.getPrincipal() != null) {
                 Credentials defaultcreds = new UsernamePasswordCredentials(proxyServer.getPrincipal(), proxyServer.getPassword());
-                client.getState().setCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);
+                client.getState().setProxyCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);
             }
 
             ProxyHost proxyHost = proxyServer == null ? null : new ProxyHost(proxyServer.getHost(), proxyServer.getPort());

File: providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -345,7 +345,7 @@ private HttpMethodBase createMethod(HttpClient client, Request request) throws I
 
             if (proxyServer.getPrincipal() != null) {
                 Credentials defaultcreds = new UsernamePasswordCredentials(proxyServer.getPrincipal(), proxyServer.getPassword());
-                client.getState().setCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);
+                client.getState().setProxyCredentials(new AuthScope(null, -1, AuthScope.ANY_REALM), defaultcreds);
             }
 
             ProxyHost proxyHost = proxyServer == null ? null : new ProxyHost(proxyServer.getHost(), proxyServer.getPort());

File: api/src/main/java/com/ning/http/client/oauth/ThreadSafeHMAC.java
Patch:
@@ -16,6 +16,7 @@
  */
 package com.ning.http.client.oauth;
 
+import com.ning.http.util.UTF8UrlEncoder;
 import com.ning.http.util.UTF8Codec;
 
 import javax.crypto.Mac;
@@ -36,7 +37,7 @@ public class ThreadSafeHMAC {
     private final Mac mac;
 
     public ThreadSafeHMAC(ConsumerKey consumerAuth, RequestToken userAuth) {
-        byte[] keyBytes = UTF8Codec.toUTF8(consumerAuth.getSecret() + "&" + userAuth.getSecret());
+        byte[] keyBytes = UTF8Codec.toUTF8(UTF8UrlEncoder.encode(consumerAuth.getSecret()) + "&" + UTF8UrlEncoder.encode(userAuth.getSecret()));
         SecretKeySpec signingKey = new SecretKeySpec(keyBytes, HMAC_SHA1_ALGORITHM);
 
         // Get an hmac_sha1 instance and initialize with the signing key

File: api/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -491,7 +491,7 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                 }
             }
 
-            String ka = config.getAllowPoolingConnection() ? "keep-alive" : "close";
+            String ka = AsyncHttpProviderUtils.keepAliveHeaderValue(config);
             urlConnection.setRequestProperty("Connection", ka);
             ProxyServer proxyServer = ProxyUtils.getProxyServer(config, request);
             if (proxyServer != null) {

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -705,12 +705,12 @@ else if (uri.getRawQuery() != null)
         }
 
         if (!webSocket && !request.getHeaders().containsKey(HttpHeaders.Names.CONNECTION)) {
-            nettyRequest.setHeader(HttpHeaders.Names.CONNECTION, "keep-alive");
+            nettyRequest.setHeader(HttpHeaders.Names.CONNECTION, AsyncHttpProviderUtils.keepAliveHeaderValue(config));
         }
 
         if (proxyServer != null) {
             if (!request.getHeaders().containsKey("Proxy-Connection")) {
-                nettyRequest.setHeader("Proxy-Connection", "keep-alive");
+                nettyRequest.setHeader("Proxy-Connection", AsyncHttpProviderUtils.keepAliveHeaderValue(config));
             }
 
             if (proxyServer.getPrincipal() != null) {

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyBasicAuthTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.BasicAuthTest;
 
+@Test
 public class NettyBasicAuthTest extends BasicAuthTest {
 
     @Override

File: api/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -180,7 +180,7 @@ private HttpURLConnection createUrlConnection(Request request) throws IOExceptio
             urlConnection =
                     (HttpURLConnection) AsyncHttpProviderUtils.createUri(request.getUrl()).toURL().openConnection(Proxy.NO_PROXY);
         } else {
-            urlConnection = (HttpURLConnection) AsyncHttpProviderUtils.createUri(request.getUrl()).toURL().openConnection(proxy);
+            urlConnection = (HttpURLConnection) AsyncHttpProviderUtils.createUri(proxyServer.toString()).toURL().openConnection(proxy);
         }
 
         if (request.getUrl().startsWith("https")) {

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -2566,7 +2566,8 @@ public void updated(Connection result) {
 
         private static String getPoolKey(final Request request) {
             final ConnectionPoolKeyStrategy keyStrategy = request.getConnectionPoolKeyStrategy();
-            return keyStrategy.getKey(request.getURI());
+            String savedUrlInConnPool = request.getProxyServer() != null ? request.getProxyServer().toString() : request.getUrl();
+            return keyStrategy.getKey(AsyncHttpProviderUtils.createUri(AsyncHttpProviderUtils.getBaseUrl(savedUrlInConnPool)));
         }
 
         // ------------------------------------------------------ Nested Classes

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1284,7 +1284,8 @@ private Realm ntlmProxyChallenge(List<String> wwwAuth,
     private void drainChannel(final ChannelHandlerContext ctx, final NettyResponseFuture<?> future, final boolean keepAlive, final URI uri) {
         ctx.setAttachment(new AsyncCallable(future) {
             public Object call() throws Exception {
-                if (keepAlive && ctx.getChannel().isReadable() && connectionsPool.offer(future.getConnectionPoolKeyStrategy().getKey(uri), ctx.getChannel())) {
+                URI connUrl = future.getRequest().getProxyServer() == null ? future.getURI() : AsyncHttpProviderUtils.createUri(future.getRequest().getProxyServer().toString());
+                if (keepAlive && ctx.getChannel().isReadable() && connectionsPool.offer(future.getConnectionPoolKeyStrategy().getKey(connUrl), ctx.getChannel())) {
                     return null;
                 }
 
@@ -1481,7 +1482,7 @@ private void finishUpdate(final NettyResponseFuture<?> future, final ChannelHand
             drainChannel(ctx, future, future.getKeepAlive(), future.getURI());
         } else {
             if (future.getKeepAlive() && ctx.getChannel().isReadable() &&
-                    connectionsPool.offer(future.getConnectionPoolKeyStrategy().getKey(future.getURI()), ctx.getChannel())) {
+                    (connectionsPool.offer(AsyncHttpProviderUtils.getBaseUrl(future.getRequest().getProxyServer() == null ? future.getURI() : AsyncHttpProviderUtils.createUri(future.getRequest().getProxyServer().toString())), ctx.getChannel()))){
                 markAsDone(future, ctx);
                 return;
             }

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -594,7 +594,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, AsyncHttpProviderUtils.getAuthority(uri));
         } else {
             String path = null;
-            if (proxyServer != null)
+            if (proxyServer != null && !isSecure(uri))
                 path = uri.toString();
             else if (uri.getRawQuery() != null)
                 path = uri.getRawPath() + "?" + uri.getRawQuery();

File: api/src/test/java/com/ning/http/client/generators/ByteArrayBodyGeneratorTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Random;
 
 import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertTrue;
 
 /**
  * @author Bryan Davis bpd@keynetics.com

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyAsyncStreamHandlerTest.java
Patch:
@@ -15,12 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.AsyncStreamHandlerTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyAsyncStreamHandlerTest extends AsyncStreamHandlerTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyAsyncStreamLifecycleTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.AsyncStreamLifecycleTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyAsyncStreamLifecycleTest extends AsyncStreamLifecycleTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyAuthTimeoutTest.java
Patch:
@@ -15,13 +15,12 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.AuthTimeoutTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyAuthTimeoutTest extends AuthTimeoutTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyBasicHttpsTest.java
Patch:
@@ -15,12 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.BasicHttpsTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyBasicHttpsTest extends BasicHttpsTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyBodyChunkTest.java
Patch:
@@ -15,12 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.BodyChunkTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyBodyChunkTest extends BodyChunkTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyByteBufferCapacityTest.java
Patch:
@@ -15,12 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ByteBufferCapacityTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyByteBufferCapacityTest extends ByteBufferCapacityTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyChunkingTest.java
Patch:
@@ -3,11 +3,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ChunkingTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyChunkingTest extends ChunkingTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyComplexClientTest.java
Patch:
@@ -15,12 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ComplexClientTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyComplexClientTest extends ComplexClientTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyDigestAuthTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.DigestAuthTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyDigestAuthTest extends DigestAuthTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyEmptyBodyTest.java
Patch:
@@ -15,12 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.EmptyBodyTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyEmptyBodyTest extends EmptyBodyTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyErrorResponseTest.java
Patch:
@@ -15,12 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ErrorResponseTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyErrorResponseTest extends ErrorResponseTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyExpect100ContinueTest.java
Patch:
@@ -15,12 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.Expect100ContinueTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyExpect100ContinueTest extends Expect100ContinueTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyFilePartLargeFileTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.FilePartLargeFileTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyFilePartLargeFileTest extends FilePartLargeFileTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyFilterTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.FilterTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyFilterTest extends FilterTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyFollowingThreadTest.java
Patch:
@@ -15,13 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.FollowingThreadTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyFollowingThreadTest extends FollowingThreadTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 
 }
-

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyHead302Test.java
Patch:
@@ -15,12 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.Head302Test;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyHead302Test extends Head302Test {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyHostnameVerifierTest.java
Patch:
@@ -15,12 +15,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.HostnameVerifierTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyHostnameVerifierTest extends HostnameVerifierTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyHttpToHttpsRedirectTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.HttpToHttpsRedirectTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyHttpToHttpsRedirectTest extends HttpToHttpsRedirectTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyIdleStateHandlerTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.IdleStateHandlerTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyIdleStateHandlerTest extends IdleStateHandlerTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyInputStreamTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.InputStreamTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyInputStreamTest extends InputStreamTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyListenableFutureTest.java
Patch:
@@ -15,13 +15,12 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ListenableFutureTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyListenableFutureTest extends ListenableFutureTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyMaxConnectionsInThreads.java
Patch:
@@ -14,11 +14,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.MaxConnectionsInThreads;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyMaxConnectionsInThreads extends MaxConnectionsInThreads {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyMaxTotalConnectionTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.MaxTotalConnectionTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyMaxTotalConnectionTest extends MaxTotalConnectionTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyMultipartUploadTest.java
Patch:
@@ -15,7 +15,6 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.MultipartUploadTest;
-import com.ning.http.client.async.ProviderUtil;
 
 /**
  * @author dominict
@@ -24,8 +23,7 @@ public class NettyMultipartUploadTest extends MultipartUploadTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 
-
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyMultipleHeaderTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.MultipleHeaderTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyMultipleHeaderTest extends MultipleHeaderTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyNoNullResponseTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.NoNullResponseTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyNoNullResponseTest extends NoNullResponseTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyParamEncodingTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ParamEncodingTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyParamEncodingTest extends ParamEncodingTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyPerRequestRelative302Test.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.PerRequestRelative302Test;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyPerRequestRelative302Test extends PerRequestRelative302Test {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyPerRequestTimeoutTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.PerRequestTimeoutTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyPerRequestTimeoutTest extends PerRequestTimeoutTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyPostRedirectGetTest.java
Patch:
@@ -16,13 +16,12 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.PostRedirectGetTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyPostRedirectGetTest extends PostRedirectGetTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyPostWithQSTest.java
Patch:
@@ -15,11 +15,10 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.PostWithQSTest;
-import com.ning.http.client.async.ProviderUtil;
 
 public class NettyPostWithQSTest extends PostWithQSTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyProxyTunnellingTest.java
Patch:
@@ -14,12 +14,11 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.ProxyTunnellingTest;
 
 public class NettyProxyTunnellingTest extends ProxyTunnellingTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyPutLargeFileTest.java
Patch:
@@ -14,12 +14,11 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.PutLargeFileTest;
 
 public class NettyPutLargeFileTest extends PutLargeFileTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyQueryParametersTest.java
Patch:
@@ -14,12 +14,11 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.QueryParametersTest;
 
 public class NettyQueryParametersTest extends QueryParametersTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyRC10KTest.java
Patch:
@@ -14,12 +14,11 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.RC10KTest;
 
 public class NettyRC10KTest extends RC10KTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyRelative302Test.java
Patch:
@@ -14,13 +14,12 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.Relative302Test;
 
 public class NettyRelative302Test extends Relative302Test {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyRemoteSiteTest.java
Patch:
@@ -17,14 +17,12 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.RemoteSiteTest;
 
 public class NettyRemoteSiteTest extends RemoteSiteTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 
-
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyRetryRequestTest.java
Patch:
@@ -18,12 +18,11 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.RetryRequestTest;
 
 public class NettyRetryRequestTest extends RetryRequestTest{
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyTransferListenerTest.java
Patch:
@@ -14,12 +14,11 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.TransferListenerTest;
 
 public class NettyTransferListenerTest extends TransferListenerTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyWebDavBasicTest.java
Patch:
@@ -14,12 +14,11 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.WebDavBasicTest;
 
 public class NettyWebDavBasicTest extends WebDavBasicTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/NettyZeroCopyFileTest.java
Patch:
@@ -14,12 +14,11 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.ZeroCopyFileTest;
 
 public class NettyZeroCopyFileTest extends ZeroCopyFileTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/websocket/NettyByteMessageTest.java
Patch:
@@ -14,12 +14,12 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
+import com.ning.http.client.providers.netty.NettyProviderUtil;
 import com.ning.http.client.websocket.ByteMessageTest;
 
 public class NettyByteMessageTest extends ByteMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/websocket/NettyCloseCodeReasonMsgTest.java
Patch:
@@ -15,14 +15,14 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
+import com.ning.http.client.providers.netty.NettyProviderUtil;
 import com.ning.http.client.websocket.CloseCodeReasonMessageTest;
 
 public class NettyCloseCodeReasonMsgTest extends CloseCodeReasonMessageTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/websocket/NettyRedirectTest.java
Patch:
@@ -14,14 +14,14 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
+import com.ning.http.client.providers.netty.NettyProviderUtil;
 import com.ning.http.client.websocket.RedirectTest;
 
 public class NettyRedirectTest extends RedirectTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 
 }

File: providers/netty/src/test/java/com/ning/http/client/providers/netty/websocket/NettyTextMessageTest.java
Patch:
@@ -14,12 +14,12 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProviderUtil;
+import com.ning.http.client.providers.netty.NettyProviderUtil;
 import com.ning.http.client.websocket.TextMessageTest;
 
 public class NettyTextMessageTest extends TextMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return NettyProviderUtil.nettyProvider(config);
     }
 }

File: api/src/main/java/com/ning/http/util/ProxyUtils.java
Patch:
@@ -18,7 +18,6 @@
 import com.ning.http.client.ProxyServer.Protocol;
 import com.ning.http.client.Request;
 
-import java.net.URI;
 import java.util.List;
 import java.util.Properties;
 
@@ -72,7 +71,7 @@ public class ProxyUtils {
      * @return true if we have to avoid proxy use (obeying non-proxy hosts settings), false otherwise.
      */
     public static boolean avoidProxy(final ProxyServer proxyServer, final Request request) {
-        return avoidProxy(proxyServer, AsyncHttpProviderUtils.getHost(URI.create(request.getUrl())));
+        return avoidProxy(proxyServer, AsyncHttpProviderUtils.getHost(request.getOriginalURI()));
     }
 
     /**

File: api/src/test/java/com/ning/http/client/async/Relative302Test.java
Patch:
@@ -103,7 +103,7 @@ public void redirected302Test() throws Throwable {
         assertNotNull(response);
         assertEquals(response.getStatusCode(), 200);
         
-        String anyGoogleSubdomain = "http://www.google.[a-z]{1,}:80";
+        String anyGoogleSubdomain = "http://www\\.google\\.[a-z]+(\\.[a-z]+)*:80";
         String baseUrl = getBaseUrl( response.getUri() );
         
         assertTrue(baseUrl.matches( anyGoogleSubdomain ), "response does not show redirection to " + anyGoogleSubdomain);

File: api/src/test/java/com/ning/http/client/async/Relative302Test.java
Patch:
@@ -103,7 +103,7 @@ public void redirected302Test() throws Throwable {
         assertNotNull(response);
         assertEquals(response.getStatusCode(), 200);
         
-        String anyGoogleSubdomain = "http://www.google.[a-z]{1,}:80";
+        String anyGoogleSubdomain = "http://www\\.google\\.[a-z]+(\\.[a-z]+)*:80";
         String baseUrl = getBaseUrl( response.getUri() );
         
         assertTrue(baseUrl.matches( anyGoogleSubdomain ), "response does not show redirection to " + anyGoogleSubdomain);

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -1965,7 +1965,7 @@ public boolean doHandle(final FilterChainContext ctx,
 
             String charset = request.getBodyEncoding();
             if (charset == null) {
-                charset = Charsets.DEFAULT_CHARACTER_ENCODING;
+                charset = Charsets.ASCII_CHARSET.name();
             }
             final byte[] data = new String(request.getByteData(), charset).getBytes(charset);
             final MemoryManager mm = ctx.getMemoryManager();
@@ -2068,7 +2068,7 @@ public boolean doHandle(final FilterChainContext ctx,
             StringBuilder sb = null;
             String charset = request.getBodyEncoding();
             if (charset == null) {
-                charset = Charsets.DEFAULT_CHARACTER_ENCODING;
+                charset = Charsets.ASCII_CHARSET.name();
             }
             final FluentStringsMap params = request.getParams();
             if (!params.isEmpty()) {

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -2001,7 +2001,7 @@ public boolean doHandle(final FilterChainContext ctx,
 
             String charset = request.getBodyEncoding();
             if (charset == null) {
-                charset = Charsets.DEFAULT_CHARACTER_ENCODING;
+                charset = Charsets.ASCII_CHARSET.name();
             }
             final byte[] data = request.getStringData().getBytes(charset);
             final MemoryManager mm = ctx.getMemoryManager();

File: api/src/main/java/com/ning/http/client/Realm.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 Ning, Inc.
+ * Copyright 2010-2013 Ning, Inc.
  *
  * Ning licenses this file to you under the Apache License, version 2.0
  * (the "License"); you may not use this file except in compliance with the
@@ -538,7 +538,7 @@ private void newResponse() throws UnsupportedEncodingException {
                     .append(uri).toString().getBytes("ISO-8859-1"));
             byte[] ha2 = md.digest();
 
-            if(qop==null || qop.equals("")) {
+            if(qop==null || qop.length() == 0) {
                  md.update(new StringBuilder(toBase16(ha1))
                     .append(':')
                     .append(nonce)
@@ -599,7 +599,7 @@ private static String toBase16(byte[] bytes) {
         public Realm build() {
 
             // Avoid generating
-            if (nonce != null && !nonce.equals("")) {
+            if (nonce != null && nonce.length() > 0) {
                 newCnonce();
                 try {
                     newResponse();

File: api/src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2013 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -123,7 +123,7 @@ final String getResponseFor(String message, String username, String password,
                                 String host, String domain) throws NTLMEngineException {
 
         final String response;
-        if (message == null || message.trim().equals("")) {
+        if (message == null || message.trim().length() == 0) {
             response = getType1Message(host, domain);
         } else {
             Type2Message t2m = new Type2Message(message);

File: api/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2013 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -516,7 +516,7 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                                 AuthenticatorUtils.computeBasicAuthentication(realm));
                         break;
                     case DIGEST:
-                        if (realm.getNonce() != null && !realm.getNonce().equals("")) {
+                        if (realm.getNonce() != null && realm.getNonce().length() > 0) {
                             try {
                                 urlConnection.setRequestProperty("Authorization",
                                         AuthenticatorUtils.computeDigestAuthentication(realm));

File: api/src/main/java/com/ning/http/util/AuthenticatorUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2013 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -40,7 +40,7 @@ public static String computeDigestAuthentication(Realm realm) throws NoSuchAlgor
         builder.append("algorithm").append('=').append(realm.getAlgorithm()).append(", ");
 
         construct(builder, "response", realm.getResponse());
-        if (realm.getOpaque() != null && realm.getOpaque() != null && realm.getOpaque().equals("") == false)
+        if (realm.getOpaque() != null && realm.getOpaque().length() > 0)
             construct(builder, "opaque", realm.getOpaque());
         builder.append("qop").append('=').append(realm.getQop()).append(", ");
         builder.append("nc").append('=').append(realm.getNc()).append(", ");

File: api/src/test/java/com/ning/http/client/async/PostWithQSTest.java
Patch:
@@ -89,7 +89,7 @@ public void postWithNulParamQS() throws IOException, ExecutionException, Timeout
 
             /* @Override */
             public STATE onStatusReceived(final HttpResponseStatus status) throws Exception {
-                if (!status.getUrl().toURL().toString().equals("http://127.0.0.1:" + port1 + "/?a")) {
+                if (!status.getUrl().toURL().toString().equals("http://127.0.0.1:" + port1 + "/?a=")) {
                     throw new IOException(status.getUrl().toURL().toString());
                 }
                 return super.onStatusReceived(status);
@@ -109,7 +109,7 @@ public void postWithNulParamsQS() throws IOException, ExecutionException, Timeou
 
             /* @Override */
             public STATE onStatusReceived(final HttpResponseStatus status) throws Exception {
-                if (!status.getUrl().toURL().toString().equals("http://127.0.0.1:" + port1 + "/?a=b&c&d=e")) {
+                if (!status.getUrl().toURL().toString().equals("http://127.0.0.1:" + port1 + "/?a=b&c=&d=e")) {
                     throw new IOException("failed to parse the query properly");
                 }
                 return super.onStatusReceived(status);

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2010 Ning, Inc.
+ * Copyright 2010-2013 Ning, Inc.
  *
  * Ning licenses this file to you under the Apache License, version 2.0
  * (the "License"); you may not use this file except in compliance with the
@@ -668,7 +668,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                             AuthenticatorUtils.computeBasicAuthentication(realm));
                     break;
                 case DIGEST:
-                    if (realm.getNonce() != null && !realm.getNonce().equals("")) {
+                    if (realm.getNonce() != null && realm.getNonce().length() > 0) {
                         try {
                             nettyRequest.setHeader(HttpHeaders.Names.AUTHORIZATION,
                                     AuthenticatorUtils.computeDigestAuthentication(realm));

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -751,7 +751,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
             }
 
             String reqType = request.getMethod();
-            if (!"GET".equals(reqType) && !"HEAD".equals(reqType) && !"OPTION".equals(reqType) && !"TRACE".equals(reqType)) {
+            if (!"HEAD".equals(reqType) && !"OPTION".equals(reqType) && !"TRACE".equals(reqType)) {
 
                 String bodyCharset = request.getBodyEncoding() == null ? DEFAULT_CHARSET : request.getBodyEncoding();
 

File: api/src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -1559,8 +1559,8 @@ public void onThrowable(Throwable t) {
         c.close();
     }
 
-    @Test(groups = {"standalone", "default_provider"}, expectedExceptions = IllegalArgumentException.class)
-    public void getShouldNotAllowBody() throws IllegalArgumentException, IOException {
+    @Test(groups = {"standalone", "default_provider"})
+    public void getShouldAllowBody() throws IllegalArgumentException, IOException {
         AsyncHttpClient c = getAsyncHttpClient(null);
         AsyncHttpClient.BoundRequestBuilder builder = c.prepareGet(getTargetUrl());
         builder.setBody("Boo!");

File: providers/grizzly/src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -844,7 +844,8 @@ private boolean sendAsGrizzlyRequest(final Request request,
             }
             final URI uri = AsyncHttpProviderUtils.createUri(httpCtx.requestUrl);
             final HttpRequestPacket.Builder builder = HttpRequestPacket.builder();
-            boolean secure = "https".equals(uri.getScheme());
+            final String scheme = uri.getScheme();
+            boolean secure = "https".equals(scheme) || "wss".equals(scheme);
             builder.method(request.getMethod());
             builder.protocol(Protocol.HTTP_1_1);
             String host = request.getVirtualHost();
@@ -861,6 +862,7 @@ private boolean sendAsGrizzlyRequest(final Request request,
             final boolean useProxy = (proxy != null);
             if (useProxy) {
                 if ((secure || httpCtx.isWSRequest) && !httpCtx.isTunnelEstablished(ctx.getConnection())) {
+                    ctx.notifyDownstream(new SwitchingSSLFilter.SSLSwitchingEvent(false, ctx.getConnection()));
                     secure = false;
                     httpCtx.establishingTunnel = true;
                     builder.method(Method.CONNECT);

File: api/src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
Patch:
@@ -13,7 +13,6 @@
 package com.ning.http.client.providers.jdk;
 
 import com.ning.http.client.Cookie;
-import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
 import com.ning.http.client.HttpResponseHeaders;
 import com.ning.http.client.HttpResponseStatus;
@@ -50,7 +49,7 @@ public String getResponseBodyExcerpt(int maxLength, String charset) throws IOExc
     /* @Override */
     public List<Cookie> getCookies() {
         if (headers == null) {
-            throw new IllegalStateException(HEADERS_NOT_COMPUTED);
+            return Collections.emptyList();
         }
         if (cookies.isEmpty()) {
             for (Map.Entry<String, List<String>> header : headers.getHeaders().entrySet()) {

File: providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.Map;
 
 public class ApacheResponse extends ResponseBase {
-    private final static String HEADERS_NOT_COMPUTED = "Response's headers hasn't been computed by your AsyncHandler.";
 
     private final List<Cookie> cookies = new ArrayList<Cookie>();
 
@@ -61,7 +60,7 @@ public String getResponseBodyExcerpt(int maxLength, String charset) throws IOExc
     /* @Override */
     public List<Cookie> getCookies() {
         if (headers == null) {
-            throw new IllegalStateException(HEADERS_NOT_COMPUTED);
+            return Collections.emptyList();
         }
         if (cookies.isEmpty()) {
             for (Map.Entry<String, List<String>> header : headers.getHeaders().entrySet()) {

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
Patch:
@@ -58,7 +58,7 @@ public String getResponseBodyExcerpt(int maxLength, String charset) throws IOExc
 
     public List<Cookie> getCookies() {
         if (headers == null) {
-            throw new IllegalStateException(HEADERS_NOT_COMPUTED);
+            return Collections.emptyList();
         }
         if (cookies.isEmpty()) {
             for (Map.Entry<String, List<String>> header : headers.getHeaders().entrySet()) {

File: api/src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java
Patch:
@@ -489,7 +489,7 @@ public STATE onHeadersReceived(HttpResponseHeaders content) throws Exception {
                 Assert.assertNotNull(values);
                 Assert.assertEquals(values.length, expected.length);
                 Arrays.sort(values);
-                Assert.assertEquals(expected, values);
+                Assert.assertEquals(values, expected);
                 return STATE.ABORT;
             }
 

File: api/src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -505,7 +505,7 @@ public static String parseCharset(String contentType) {
 
     public static Cookie parseCookie(String value) {
         String[] fields = value.split(";\\s*");
-        String[] cookie = fields[0].split("=");
+        String[] cookie = fields[0].split("=", 2);
         String cookieName = cookie[0];
         String cookieValue = (cookie.length == 1) ? null : cookie[1];
 

File: api/src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
Patch:
@@ -904,7 +904,7 @@ public Builder setRequestCompressionLevel(int requestCompressionLevel) {
         }
 
         /**
-         * Set the number of time a request will be retried when an {@link java.io.IOException} occurs because of a Network exception.
+         * Set the number of times a request will be retried when an {@link java.io.IOException} occurs because of a Network exception.
          *
          * @param maxRequestRetry the number of time a request will be retried
          * @return this

File: api/src/main/java/com/ning/http/client/RequestBuilderBase.java
Patch:
@@ -293,14 +293,14 @@ public String toString() {
 
             sb.append("\t");
             sb.append(method);
-            sb.append("\theaders:"
+            sb.append("\theaders:");
             for (String name : headers.keySet()) {
                 sb.append("\t");
                 sb.append(name);
                 sb.append(":");
                 sb.append(headers.getJoinedValue(name, ", "));
             }
-            sb.append("\tparams:"
+            sb.append("\tparams:");
             for (String name : params.keySet()) {
                 sb.append("\t");
                 sb.append(name);

File: api/src/main/java/com/ning/http/client/RequestBuilderBase.java
Patch:
@@ -293,14 +293,14 @@ public String toString() {
 
             sb.append("\t");
             sb.append(method);
-            sb.append("\theaders:"
+            sb.append("\theaders:");
             for (String name : headers.keySet()) {
                 sb.append("\t");
                 sb.append(name);
                 sb.append(":");
                 sb.append(headers.getJoinedValue(name, ", "));
             }
-            sb.append("\tparams:"
+            sb.append("\tparams:");
             for (String name : params.keySet()) {
                 sb.append("\t");
                 sb.append(name);

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1988,7 +1988,7 @@ private boolean redirect(Request request,
                 String location = response.getHeader(HttpHeaders.Names.LOCATION);
                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);
                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();
-                if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {
+                if (!uri.toString().equals(future.getURI().toString())) {
                     final RequestBuilder nBuilder = stripQueryString ?
                             new RequestBuilder(future.getRequest()).setQueryParameters(null)
                             : new RequestBuilder(future.getRequest());

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1987,7 +1987,7 @@ private boolean redirect(Request request,
                 String location = response.getHeader(HttpHeaders.Names.LOCATION);
                 URI uri = AsyncHttpProviderUtils.getRedirectUri(future.getURI(), location);
                 boolean stripQueryString = config.isRemoveQueryParamOnRedirect();
-                if (!uri.toString().equalsIgnoreCase(future.getURI().toString())) {
+                if (!uri.toString().equals(future.getURI().toString())) {
                     final RequestBuilder nBuilder = stripQueryString ?
                             new RequestBuilder(future.getRequest()).setQueryParameters(null)
                             : new RequestBuilder(future.getRequest());

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
Patch:
@@ -212,7 +212,7 @@ public V get(long l, TimeUnit tu) throws InterruptedException, TimeoutException,
 
             if (expired) {
                 isCancelled.set(true);
-                TimeoutException te = new TimeoutException(String.format("No response received after %s", l));
+                TimeoutException te = new TimeoutException(String.format("No response received after %s %s", l, tu.name().toLowerCase()));
                 if (!throwableCalled.getAndSet(true)) {
                     try {
                         asyncHandler.onThrowable(te);

File: api/src/main/java/com/ning/http/client/AsyncHttpClientConfigBean.java
Patch:
@@ -53,7 +53,7 @@ void configureDefaults() {
         redirectEnabled = Boolean.getBoolean(ASYNC_CLIENT + "defaultRedirectsEnabled");
         maxDefaultRedirects = Integer.getInteger(ASYNC_CLIENT + "defaultMaxRedirects", 5);
         compressionEnabled = Boolean.getBoolean(ASYNC_CLIENT + "compressionEnabled");
-        userAgent = System.getProperty(ASYNC_CLIENT + "userAgent", "NING/1.0");
+        userAgent = System.getProperty(ASYNC_CLIENT + "userAgent", "AsyncHttpClient/" + AHC_VERSION);
 
         boolean useProxyProperties = Boolean.getBoolean(ASYNC_CLIENT + "useProxyProperties");
         if (useProxyProperties) {

File: api/src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -547,7 +547,9 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
             } else if (config.getUserAgent() != null) {
                 urlConnection.setRequestProperty("User-Agent", config.getUserAgent());
             } else {
-                urlConnection.setRequestProperty("User-Agent", AsyncHttpProviderUtils.constructUserAgent(JDKAsyncHttpProvider.class));
+                urlConnection.setRequestProperty("User-Agent",
+                        AsyncHttpProviderUtils.constructUserAgent(JDKAsyncHttpProvider.class,
+                                                                  config));
             }
 
             if (request.getCookies() != null && !request.getCookies().isEmpty()) {

File: providers/apache/src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -377,7 +377,7 @@ private HttpMethodBase createMethod(HttpClient client, Request request) throws I
         } else if (config.getUserAgent() != null) {
             method.setRequestHeader("User-Agent", config.getUserAgent());
         } else {
-            method.setRequestHeader("User-Agent", AsyncHttpProviderUtils.constructUserAgent(ApacheAsyncHttpProvider.class));
+            method.setRequestHeader("User-Agent", AsyncHttpProviderUtils.constructUserAgent(ApacheAsyncHttpProvider.class, config));
         }
 
         if (config.isCompressionEnabled()) {

File: providers/netty/src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -715,7 +715,9 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
         } else if (config.getUserAgent() != null) {
             nettyRequest.setHeader("User-Agent", config.getUserAgent());
         } else {
-            nettyRequest.setHeader("User-Agent", AsyncHttpProviderUtils.constructUserAgent(NettyAsyncHttpProvider.class));
+            nettyRequest.setHeader("User-Agent",
+                         AsyncHttpProviderUtils.constructUserAgent(NettyAsyncHttpProvider.class,
+                                                                   config));
         }
 
         if (!m.equals(HttpMethod.CONNECT)) {

File: api/src/test/java/com/ning/http/client/async/ProxyTunnellingTest.java
Patch:
@@ -111,7 +111,7 @@ public Response onCompleted(Response response) throws Exception {
         });
         Response r = responseFuture.get();
         assertEquals(r.getStatusCode(), 200);
-        assertEquals(r.getHeader("server"), "Jetty(8.1.1.v20120215)");
+        assertEquals(r.getHeader("X-Proxy-Connection"), "keep-alive");
 
         asyncHttpClient.close();
     }
@@ -142,7 +142,7 @@ public Response onCompleted(Response response) throws Exception {
         });
         Response r = responseFuture.get();
         assertEquals(r.getStatusCode(), 200);
-        assertEquals(r.getHeader("server"), "Jetty(8.1.1.v20120215)");
+        assertEquals(r.getHeader("X-Proxy-Connection"), "keep-alive");
 
         asyncHttpClient.close();
     }
@@ -161,7 +161,7 @@ public void testSimpleAHCConfigProxy() throws IOException, InterruptedException,
         Response r = client.get().get();
 
         assertEquals(r.getStatusCode(), 200);
-        assertEquals(r.getHeader("server"), "Jetty(8.1.1.v20120215)");
+        assertEquals(r.getHeader("X-Proxy-Connection"), "keep-alive");
 
         client.close();
     }

File: src/main/java/com/ning/http/client/AsyncHandler.java
Patch:
@@ -55,7 +55,7 @@ public static enum STATE {
          */
         CONTINUE,
         /**
-         * Upgrade the protocol. When specified, the AsyncHttpProvider will try to invoke the {@link UpgradeHandler#onReady}
+         * Upgrade the protocol.
          */
         UPGRADE
     }

File: src/main/java/com/ning/http/client/UpgradeHandler.java
Patch:
@@ -13,7 +13,7 @@
 package com.ning.http.client;
 
 /**
- * Invoked when an {@link AsyncHandler.STATE#UPGRADE} is returned. Currently the library only support {@link WebSocket}
+ * Invoked when an {@link AsyncHandler.STATE#UPGRADE} is returned. Currently the library only support {@link com.ning.http.client.websocket.WebSocket}
  * as type.
  *
  * @param <T>

File: src/main/java/com/ning/http/client/filter/FilterContext.java
Patch:
@@ -73,7 +73,6 @@ public HttpResponseStatus getResponseStatus() {
 
     /**
      * Return the response {@link HttpResponseHeaders}
-     * @return
      */
     public HttpResponseHeaders getResponseHeaders() {
         return b.headers;

File: src/main/java/com/ning/http/client/websocket/WebSocket.java
Patch:
@@ -41,7 +41,7 @@ public interface WebSocket {
      * @param offset   starting offset.
      * @param len      length.
      * @param last     flag indicating whether or not this is the last fragment.
-     * @return
+     * @return this.
      */
     WebSocket stream(byte[] fragment, int offset, int len, boolean last);
 

File: src/main/java/com/ning/http/client/websocket/WebSocketCloseCodeReasonListener.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Extend the normal close listener with one that support the WebSocket's code and reason.
- * @See http://tools.ietf.org/html/rfc6455#section-5.5.1
+ * @see "http://tools.ietf.org/html/rfc6455#section-5.5.1"
  */
 public interface WebSocketCloseCodeReasonListener {
 

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -291,7 +291,7 @@ public final static URI getRedirectUri(URI uri, String location) {
     public final static int getPort(URI uri) {
         int port = uri.getPort();
         if (port == -1)
-            port = uri.getScheme().equals("http") ? 80 : 443;
+            port = uri.getScheme().equals("http") || uri.getScheme().equals("ws") ? 80 : 443;
         return port;
     }
 

File: src/main/java/com/ning/http/client/AsyncHandler.java
Patch:
@@ -55,7 +55,7 @@ public static enum STATE {
          */
         CONTINUE,
         /**
-         * Upgrade the protocol. When specified, the AsyncHttpProvider will try to invoke the {@link UpgradeHandler#onReady}
+         * Upgrade the protocol.
          */
         UPGRADE
     }

File: src/main/java/com/ning/http/client/UpgradeHandler.java
Patch:
@@ -13,7 +13,7 @@
 package com.ning.http.client;
 
 /**
- * Invoked when an {@link AsyncHandler.STATE#UPGRADE} is returned. Currently the library only support {@link WebSocket}
+ * Invoked when an {@link AsyncHandler.STATE#UPGRADE} is returned. Currently the library only support {@link com.ning.http.client.websocket.WebSocket}
  * as type.
  *
  * @param <T>

File: src/main/java/com/ning/http/client/filter/FilterContext.java
Patch:
@@ -73,7 +73,6 @@ public HttpResponseStatus getResponseStatus() {
 
     /**
      * Return the response {@link HttpResponseHeaders}
-     * @return
      */
     public HttpResponseHeaders getResponseHeaders() {
         return b.headers;

File: src/main/java/com/ning/http/client/websocket/WebSocket.java
Patch:
@@ -41,7 +41,7 @@ public interface WebSocket {
      * @param offset   starting offset.
      * @param len      length.
      * @param last     flag indicating whether or not this is the last fragment.
-     * @return
+     * @return this.
      */
     WebSocket stream(byte[] fragment, int offset, int len, boolean last);
 

File: src/main/java/com/ning/http/client/websocket/WebSocketCloseCodeReasonListener.java
Patch:
@@ -14,7 +14,7 @@
 
 /**
  * Extend the normal close listener with one that support the WebSocket's code and reason.
- * @See http://tools.ietf.org/html/rfc6455#section-5.5.1
+ * @see "http://tools.ietf.org/html/rfc6455#section-5.5.1"
  */
 public interface WebSocketCloseCodeReasonListener {
 

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -22,6 +22,7 @@
 import com.ning.http.client.filter.RequestFilter;
 import com.ning.http.client.providers.jdk.JDKAsyncHttpProvider;
 import com.ning.http.client.resumable.ResumableAsyncHandler;
+import java.io.Closeable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -138,7 +139,7 @@
  * An instance of this class will cache every HTTP 1.1 connections and close them when the {@link AsyncHttpClientConfig#getIdleConnectionTimeoutInMs()}
  * expires. This object can hold many persistent connections to different host.
  */
-public class AsyncHttpClient {
+public class AsyncHttpClient implements Closeable {
 
     private final static String DEFAULT_PROVIDER = "com.ning.http.client.providers.netty.NettyAsyncHttpProvider";
     private final AsyncHttpProvider httpProvider;

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -555,7 +555,7 @@ private <T> FilterContext<T> preProcessRequest(FilterContext<T> fc) throws IOExc
             builder.setHeader("Range", "bytes=" + request.getRangeOffset() + "-");
             request = builder.build();
         }
-        fc = new FilterContext.FilterContextBuilder(fc).request(request).build();
+        fc = new FilterContext.FilterContextBuilder<T>(fc).request(request).build();
         return fc;
     }
 

File: src/main/java/com/ning/http/client/ListenableFuture.java
Patch:
@@ -46,7 +46,7 @@ public interface ListenableFuture<V> extends Future<V> {
      *
      * @param callable
      */
-    void done(Callable callable);
+    void done(Callable<?> callable);
 
     /**
      * Abort the current processing, and propagate the {@link Throwable} to the {@link AsyncHandler} or {@link Future}

File: src/main/java/com/ning/http/client/Realm.java
Patch:
@@ -257,9 +257,6 @@ public int hashCode() {
      * A builder for {@link Realm}
      */
     public static class RealmBuilder {
-
-        private static final Logger logger = LoggerFactory.getLogger(RealmBuilder.class);
-
         //
         //  Portions of code (newCnonce, newResponse) are highly inspired be Jetty 6 BasicAuthentication.java class.
         //  This code is already Apache licenced.

File: src/main/java/com/ning/http/client/extra/ResumableRandomAccessFileListener.java
Patch:
@@ -25,7 +25,6 @@
  */
 public class ResumableRandomAccessFileListener implements ResumableListener {
     private final RandomAccessFile file;
-    private final static Logger logger = LoggerFactory.getLogger(ThrottleRequestFilter.class);
 
     public ResumableRandomAccessFileListener(RandomAccessFile file) {
         this.file = file;

File: src/main/java/com/ning/http/client/filter/FilterException.java
Patch:
@@ -16,6 +16,7 @@
  * An exception that can be thrown by an {@link com.ning.http.client.AsyncHandler} to interrupt invocation of
  * the {@link RequestFilter} and {@link ResponseFilter}. It also interrupt the request and response processing.
  */
+@SuppressWarnings("serial")
 public class FilterException extends Exception {
 
     /**

File: src/main/java/com/ning/http/client/filter/ResponseFilter.java
Patch:
@@ -29,6 +29,5 @@ public interface ResponseFilter {
      * @return {@link FilterContext}. The {@link FilterContext} instance may not the same as the original one.
      * @throws FilterException to interrupt the filter processing.
      */
-    public FilterContext filter(FilterContext ctx) throws FilterException;
-
+    public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException;
 }

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
Patch:
@@ -315,8 +315,7 @@ public void run() {
 
                         final TimeoutResolver resolver = delayQueue.resolver;
 
-                        for (@SuppressWarnings("rawtypes")
-                        Iterator<Connection> it = delayQueue.queue.iterator(); it.hasNext(); ) {
+                        for (Iterator<Connection> it = delayQueue.queue.iterator(); it.hasNext(); ) {
                             final Connection<?> element = (Connection<?>) it.next();
                             final Long timeoutMs = resolver.getTimeoutMs(element);
 

File: src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java
Patch:
@@ -25,12 +25,13 @@ public class JDKDelegateFuture<V> extends JDKFuture<V> {
 
     private final ListenableFuture<V> delegateFuture;
 
-    public JDKDelegateFuture(AsyncHandler<V> asyncHandler, int responseTimeoutInMs, ListenableFuture<V> delegateFuture, HttpURLConnection urlConnection) {
+    public JDKDelegateFuture(AsyncHandler<V> asyncHandler, int responseTimeoutInMs,
+            ListenableFuture<V> delegateFuture, HttpURLConnection urlConnection) {
         super(asyncHandler, responseTimeoutInMs, urlConnection);
         this.delegateFuture = delegateFuture;
     }
 
-    public void done(Callable callable) {
+    public void done(Callable<?> callable) {
         delegateFuture.done(callable);
         super.done(callable);
     }

File: src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
Patch:
@@ -58,7 +58,7 @@ protected void setInnerFuture(Future<V> innerFuture) {
         this.innerFuture = innerFuture;
     }
 
-    public void done(Callable callable) {
+    public void done(Callable<?> callable) {
         isDone.set(true);
         super.done();
     }

File: src/main/java/com/ning/http/client/websocket/WebSocketUpgradeHandler.java
Patch:
@@ -28,8 +28,11 @@ public class WebSocketUpgradeHandler implements UpgradeHandler<WebSocket>, Async
 
     private WebSocket webSocket;
     private final ConcurrentLinkedQueue<WebSocketListener> l;
+    @SuppressWarnings("unused")
     private final String protocol;
+    @SuppressWarnings("unused")
     private final long maxByteSize;
+    @SuppressWarnings("unused")
     private final long maxTextSize;
     private final AtomicBoolean ok = new AtomicBoolean(false);
 

File: src/main/java/com/ning/http/multipart/FileUploadStalledException.java
Patch:
@@ -17,6 +17,6 @@
 /**
  * @author Gail Hernandez
  */
+@SuppressWarnings("serial")
 public class FileUploadStalledException extends IOException {
-	
 }

File: src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -514,7 +514,6 @@ public Response onCompleted(Response response) throws Exception {
     public void asyncDoPostBodyIsoTest() throws Throwable {
 
         AsyncHttpClient c = getAsyncHttpClient(null);
-        final CountDownLatch l = new CountDownLatch(1);
         Response r = c.preparePost(getTargetUrl()).addHeader("X-ISO", "true").setBody("\u017D\u017D\u017D\u017D\u017D\u017D").execute().get();
         assertEquals(r.getResponseBody().getBytes("ISO-8859-1"),"\u017D\u017D\u017D\u017D\u017D\u017D".getBytes("ISO-8859-1"));
         c.close();

File: src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java
Patch:
@@ -508,7 +508,6 @@ public String onCompleted() throws Exception {
 
     @Test(groups = {"standalone", "default_provider"})
     public void closeConnectionTest() throws Throwable {
-        final CountDownLatch l = new CountDownLatch(1);
         AsyncHttpClient c = getAsyncHttpClient(null);
 
         Response r = c.prepareGet(getTargetUrl()).execute(new AsyncHandler<Response>() {

File: src/test/java/com/ning/http/client/async/ByteBufferCapacityTest.java
Patch:
@@ -79,7 +79,6 @@ public AbstractHandler configureHandler() throws Exception {
     @Test(groups = {"standalone", "default_provider"})
     public void basicByteBufferTest() throws Throwable {
         AsyncHttpClient c = getAsyncHttpClient(null);
-        final AtomicBoolean completed = new AtomicBoolean(false);
 
         byte[] bytes = "RatherLargeFileRatherLargeFileRatherLargeFileRatherLargeFile".getBytes("UTF-16");
         long repeats = (1024 * 100 * 10 / bytes.length) + 1;

File: src/test/java/com/ning/http/client/async/MaxConnectionsInThreads.java
Patch:
@@ -174,6 +174,7 @@ public String getTargetUrl() {
         return s;
     }
 
+    @SuppressWarnings("serial")
     public static class MockTimeoutHttpServlet extends HttpServlet {
         private static final String contentType = "text/plain";
         public static long DEFAULT_TIMEOUT = 2000;

File: src/test/java/com/ning/http/client/async/MaxTotalConnectionTest.java
Patch:
@@ -109,7 +109,7 @@ public void testMaxTotalConnectionsCorrectExceptionHandling() {
                         .build()
         );
 
-        List<Future> futures = new ArrayList<Future>();
+        List<Future<Response>> futures = new ArrayList<Future<Response>>();
         boolean caughtError = false;
         for (int i = 0; i < urls.length; i++) {
             try {
@@ -126,9 +126,9 @@ public void testMaxTotalConnectionsCorrectExceptionHandling() {
         Assert.assertTrue(caughtError);
 
         // get results of executed requests
-        for (Future future : futures) {
+        for (Future<Response> future : futures) {
             try {
-                Object res = future.get();
+                /*Response res =*/ future.get();
             } catch (InterruptedException e) {
                 log.error("Error!", e);
             } catch (ExecutionException e) {

File: src/test/java/com/ning/http/client/async/PostRedirectGetTest.java
Patch:
@@ -80,7 +80,7 @@ private void doTestNegative(final int status, boolean strict) throws Exception {
                 setStrict302Handling(strict).
                 addResponseFilter(new ResponseFilter() {
                     @Override
-                    public FilterContext filter(FilterContext ctx) throws FilterException {
+                    public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
                         // pass on the x-expect-get and remove the x-redirect
                         // headers if found in the response
                         ctx.getResponseHeaders().getHeaders().get("x-expect-post");
@@ -118,7 +118,7 @@ private void doTestPositive(final int status) throws Exception {
         AsyncHttpClient p = getAsyncHttpClient(new AsyncHttpClientConfig.Builder().setFollowRedirects(true).
                 addResponseFilter(new ResponseFilter() {
                     @Override
-                    public FilterContext filter(FilterContext ctx) throws FilterException {
+                    public <T> FilterContext<T> filter(FilterContext<T> ctx) throws FilterException {
                         // pass on the x-expect-get and remove the x-redirect
                         // headers if found in the response
                         ctx.getResponseHeaders().getHeaders().get("x-expect-get");

File: src/test/java/com/ning/http/client/async/ProxyTunnellingTest.java
Patch:
@@ -36,12 +36,12 @@
 import java.util.concurrent.TimeoutException;
 
 import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertNotNull;
 
 /**
  * Proxy usage tests.
  */
-public abstract class ProxyyTunnellingTest extends AbstractBasicTest {
+@SuppressWarnings("deprecation")
+public abstract class ProxyTunnellingTest extends AbstractBasicTest {
 
     private Server server2;
 
@@ -158,7 +158,6 @@ public void testSimpleAHCConfigProxy() throws IOException, InterruptedException,
                 .setUrl(getTargetUrl2())
                 .setHeader("Content-Type", "text/html").build();
 
-        StringBuffer s = new StringBuffer();
         Response r = client.get().get();
 
         assertEquals(r.getStatusCode(), 200);

File: src/test/java/com/ning/http/client/async/PutLargeFileTest.java
Patch:
@@ -62,7 +62,7 @@ public void testPutSmallFile()
             throws Exception {
         byte[] bytes = "RatherLargeFileRatherLargeFileRatherLargeFileRatherLargeFile".getBytes("UTF-16");
         long repeats = (1024 / bytes.length) + 1;
-        int timeout = (5000);
+//        int timeout = (5000);
         largeFile = createTempFile(bytes, (int) repeats);
 
         AsyncHttpClientConfig config = new AsyncHttpClientConfig.Builder().build();

File: src/test/java/com/ning/http/client/async/RedirectConnectionUsageTest.java
Patch:
@@ -150,15 +150,15 @@ public void testGetRedirectFinalUrl() {
 
     protected abstract AsyncHttpProviderConfig getProviderConfig();
 
-
+    @SuppressWarnings("serial")
     class MockRedirectHttpServlet extends HttpServlet {
         public void service(HttpServletRequest req, HttpServletResponse res)
                 throws ServletException, IOException {
             res.sendRedirect("/overthere");
         }
-
     }
 
+    @SuppressWarnings("serial")
     class MockFullResponseHttpServlet extends HttpServlet {
 
         private static final String contentType = "text/xml";

File: src/test/java/com/ning/http/client/async/RetryNonBlockingIssue.java
Patch:
@@ -259,6 +259,7 @@ public void testRetryBlocking() throws IOException, InterruptedException,
         }
     }
 
+    @SuppressWarnings("serial")
     public class MockExceptionServlet extends HttpServlet {
 
         private Map<String, Integer> requests = new

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyProxyTunnelingTest.java
Patch:
@@ -15,10 +15,10 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.async.ProxyyTunnellingTest;
+import com.ning.http.client.async.ProxyTunnellingTest;
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 
-public class GrizzlyProxyTunnelingTest extends ProxyyTunnellingTest {
+public class GrizzlyProxyTunnelingTest extends ProxyTunnellingTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {

File: src/test/java/com/ning/http/client/async/netty/NettyProxyTunnellingTest.java
Patch:
@@ -15,9 +15,9 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ProviderUtil;
-import com.ning.http.client.async.ProxyyTunnellingTest;
+import com.ning.http.client.async.ProxyTunnellingTest;
 
-public class NettyProxyTunnellingTest extends ProxyyTunnellingTest {
+public class NettyProxyTunnellingTest extends ProxyTunnellingTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);

File: src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -859,7 +859,7 @@ public boolean isDone() {
          */
         public synchronized void run() {
             if (this.apacheResponseFuture != null && this.apacheResponseFuture.hasExpired()) {
-                logger.debug("Request Timeout expired for " + this.apacheResponseFuture);
+                logger.debug("Request Timeout expired for {}", this.apacheResponseFuture);
 
                 int requestTimeout = config.getRequestTimeoutInMs();
                 PerRequestConfig p = this.apacheResponseFuture.getRequest().getPerRequestConfig();

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
Patch:
@@ -126,7 +126,8 @@ public void run() {
                     }
                 }
 
-                log.trace(String.format("%d channel open, %d idle channels closed (times: 1st-loop=%d, 2nd-loop=%d).\n",
+                if (log.isTraceEnabled())
+                    log.trace(String.format("%d channel open, %d idle channels closed (times: 1st-loop=%d, 2nd-loop=%d).\n",
                         connectionsPool.size(), channelsInTimeout.size(), endConcurrentLoop - currentTime, System.currentTimeMillis() - endConcurrentLoop));
             } catch (Throwable t) {
                 log.error("uncaught exception!", t);

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -522,9 +522,9 @@ static int getPort(final URI uri, final int p) {
         int port = p;
         if (port == -1) {
             final String protocol = uri.getScheme().toLowerCase();
-            if ("http".equals(protocol)) {
+            if ("http".equals(protocol) || "ws".equals(protocol)) {
                 port = 80;
-            } else if ("https".equals(protocol)) {
+            } else if ("https".equals(protocol) || "wss".equals(protocol)) {
                 port = 443;
             } else {
                 throw new IllegalArgumentException("Unknown protocol: " + protocol);

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -235,7 +235,7 @@ public final static URI getRedirectUri(URI uri, String location) {
     public final static int getPort(URI uri) {
         int port = uri.getPort();
         if (port == -1)
-            port = uri.getScheme().equals("http") ? 80 : 443;
+            port = uri.getScheme().equals("http") || uri.getScheme().equals("ws") ? 80 : 443;
         return port;
     }
 

File: src/test/java/com/ning/http/client/websocket/TextMessageTest.java
Patch:
@@ -27,7 +27,7 @@
 
 public abstract class TextMessageTest extends AbstractBasicTest {
 
-    private final class EchoTextWebSocket implements org.eclipse.jetty.websocket.WebSocket, org.eclipse.jetty.websocket.WebSocket.OnTextMessage {
+    public static final class EchoTextWebSocket implements org.eclipse.jetty.websocket.WebSocket, org.eclipse.jetty.websocket.WebSocket.OnTextMessage {
 
         private Connection connection;
 

File: src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
Patch:
@@ -51,6 +51,9 @@ public String getResponseBodyExcerpt(int maxLength, String charset) throws IOExc
             charset = calculateCharset();
         }
         byte[] b = AsyncHttpProviderUtils.contentToBytes(bodyParts, maxLength);
+        if (charset == null) {
+            charset = DEFAULT_CHARSET;
+        }
         return new String(b, charset);
     }
 

File: src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
Patch:
@@ -48,6 +48,9 @@ public String getResponseBodyExcerpt(int maxLength) throws IOException {
     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {
         // should be fine; except that it may split multi-byte chars (last char may become '?')
         byte[] b = AsyncHttpProviderUtils.contentToBytes(bodyParts, maxLength);
+        if (charset == null) {
+            charset = DEFAULT_CHARSET;
+        }
         return new String(b, charset);
     }
 

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2004,7 +2004,7 @@ private boolean redirect(Request request,
                     final boolean initialConnectionKeepAlive = future.getKeepAlive();
                     future.setURI(uri);
                     String newUrl = uri.toString();
-                    if (future.getNettyRequest().getUri().startsWith(WEBSOCKET)) {
+                    if (request.getUrl().startsWith(WEBSOCKET)) {
                         newUrl = newUrl.replace(HTTP, WEBSOCKET);
                     }
 

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2070,7 +2070,7 @@ public void handle(final ChannelHandlerContext ctx, final MessageEvent e) throws
                         }
 
                         final Realm nr = new Realm.RealmBuilder().clone(newRealm)
-                                .setUri(request.getUrl()).build();
+                                .setUri(URI.create(request.getUrl()).getPath()).build();
 
                         log.debug("Sending authentication to {}", request.getUrl());
                         AsyncCallable ac = new AsyncCallable(future) {

File: src/main/java/com/ning/http/client/websocket/WebSocketCloseCodeReasonListener.java
Patch:
@@ -15,9 +15,6 @@
 /**
  * Extend the normal close listener with one that support the WebSocket's code and reason.
  * @See http://tools.ietf.org/html/rfc6455#section-5.5.1
- *
- * NOTE: This listener is currently only supported by the NettyAsyncHttpProvider
- *
  */
 public interface WebSocketCloseCodeReasonListener {
 

File: src/main/java/com/ning/http/client/websocket/WebSocketListener.java
Patch:
@@ -19,18 +19,21 @@ public interface WebSocketListener {
 
     /**
      * Invoked when the {@link WebSocket} is open.
+     *
      * @param websocket
      */
     void onOpen(WebSocket websocket);
 
     /**
      * Invoked when the {@link WebSocket} is close.
+     *
      * @param websocket
      */
     void onClose(WebSocket websocket);
 
     /**
      * Invoked when the {@link WebSocket} is open.
+     *
      * @param t a {@link Throwable}
      */
     void onError(Throwable t);

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -436,7 +436,7 @@ public static String parseCharset(String contentType) {
                     // it (all browsers do, Apache HTTP Client and Grizzly 
                     // strip it by default)
                     // This is a poor man's trim("\"").trim("'")
-                    return charset.replaceAll("\"", "").replaceAll("'", "")
+                    return charset.replaceAll("\"", "").replaceAll("'", "");
                 }
             }
         }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -75,7 +75,6 @@
 import org.jboss.netty.channel.socket.ClientSocketChannelFactory;
 import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
 import org.jboss.netty.channel.socket.oio.OioClientSocketChannelFactory;
-import org.jboss.netty.handler.codec.PrematureChannelClosureException;
 import org.jboss.netty.handler.codec.http.CookieEncoder;
 import org.jboss.netty.handler.codec.http.DefaultCookie;
 import org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -570,7 +570,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
         if (webSocket) {
             nettyRequest.addHeader(HttpHeaders.Names.UPGRADE, HttpHeaders.Values.WEBSOCKET);
             nettyRequest.addHeader(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.UPGRADE);
-            nettyRequest.addHeader("Sec-WebSocket-Origin", "http://" + uri.getHost());
+            nettyRequest.addHeader("Origin", "http://" + uri.getHost() + ":" + uri.getPort());
             nettyRequest.addHeader(WEBSOCKET_KEY, WebSocketUtil.getKey());
             nettyRequest.addHeader("Sec-WebSocket-Version", "13");
         }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -831,11 +831,11 @@ public void close() {
 
             config.executorService().shutdown();
             config.reaper().shutdown();
+            socketChannelFactory.releaseExternalResources();
             plainBootstrap.releaseExternalResources();
             secureBootstrap.releaseExternalResources();
             webSocketBootstrap.releaseExternalResources();
             secureWebSocketBootstrap.releaseExternalResources();
-            socketChannelFactory.releaseExternalResources();
         } catch (Throwable t) {
             log.warn("Unexpected error on close", t);
         }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -572,7 +572,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
             nettyRequest.addHeader(HttpHeaders.Names.CONNECTION, HttpHeaders.Values.UPGRADE);
             nettyRequest.addHeader("Sec-WebSocket-Origin", "http://" + uri.getHost());
             nettyRequest.addHeader(WEBSOCKET_KEY, WebSocketUtil.getKey());
-            nettyRequest.addHeader("Sec-WebSocket-Version", "8");
+            nettyRequest.addHeader("Sec-WebSocket-Version", "13");
         }
 
         if (host != null) {
@@ -831,11 +831,11 @@ public void close() {
 
             config.executorService().shutdown();
             config.reaper().shutdown();
-            socketChannelFactory.releaseExternalResources();
             plainBootstrap.releaseExternalResources();
             secureBootstrap.releaseExternalResources();
             webSocketBootstrap.releaseExternalResources();
             secureWebSocketBootstrap.releaseExternalResources();
+            socketChannelFactory.releaseExternalResources();
         } catch (Throwable t) {
             log.warn("Unexpected error on close", t);
         }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2116,7 +2116,7 @@ public Object call() throws Exception {
 
                         try {
                             log.debug("Connecting to proxy {} for scheme {}", proxyServer, request.getUrl());
-                            upgradeProtocol(ctx.getChannel().getPipeline(), request.getUrl());
+                            upgradeProtocol(ctx.getChannel().getPipeline(), URI.create(request.getUrl()).getScheme());
                         } catch (Throwable ex) {
                             abort(future, ex);
                         }

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -369,7 +369,7 @@ public void close() {
     protected void finalize() throws Throwable {
         try {
             if (!isClosed.get()) {
-                logger.warn("AsyncHttpClient.close() hasn't been invoked, which may produce file descriptor leaks");
+                logger.debug("AsyncHttpClient.close() hasn't been invoked, which may produce file descriptor leaks");
             }
         } finally {
             super.finalize();

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
Patch:
@@ -15,6 +15,7 @@
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
+import com.ning.http.client.HttpResponseBodyPartsInputStream;
 import com.ning.http.client.HttpResponseHeaders;
 import com.ning.http.client.HttpResponseStatus;
 import com.ning.http.client.Response;
@@ -91,7 +92,7 @@ public String getResponseBody(String charset) throws IOException {
     /* @Override */
     public InputStream getResponseBodyAsStream() throws IOException {
         if (bodyParts.size() > 0) {
-            return new ByteArrayInputStream(bodyParts.toArray(new HttpResponseBodyPart[bodyParts.size()])[0].getBodyPartBytes());
+            return new HttpResponseBodyPartsInputStream(bodyParts.toArray(new HttpResponseBodyPart[bodyParts.size()]));
         } else {
             return new ByteArrayInputStream("".getBytes());
         }

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
Patch:
@@ -15,6 +15,7 @@
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseBodyPart;
+import com.ning.http.client.HttpResponseBodyPartsInputStream;
 import com.ning.http.client.HttpResponseHeaders;
 import com.ning.http.client.HttpResponseStatus;
 import com.ning.http.client.Response;
@@ -91,7 +92,7 @@ public String getResponseBody(String charset) throws IOException {
     /* @Override */
     public InputStream getResponseBodyAsStream() throws IOException {
         if (bodyParts.size() > 0) {
-            return new ByteArrayInputStream(bodyParts.toArray(new HttpResponseBodyPart[bodyParts.size()])[0].getBodyPartBytes());
+            return new HttpResponseBodyPartsInputStream(bodyParts.toArray(new HttpResponseBodyPart[bodyParts.size()]));
         } else {
             return new ByteArrayInputStream("".getBytes());
         }

File: src/main/java/com/ning/http/util/SslUtils.java
Patch:
@@ -106,7 +106,7 @@ static class LooseTrustManager
         public static final LooseTrustManager INSTANCE = new LooseTrustManager();
 
         public java.security.cert.X509Certificate[] getAcceptedIssuers() {
-            return null;
+            return new java.security.cert.X509Certificate[0];
         }
 
         public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -400,7 +400,7 @@ public void onTimeout(Connection connection) {
             doDefaultTransportConfig();
         }
         fcb.add(new WebSocketFilter());
-
+        clientTransport.getAsyncQueueIO().getWriter().setMaxPendingBytesPerConnection(-1);
         clientTransport.setProcessor(fcb.build());
 
     }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1998,9 +1998,9 @@ public void handle(final ChannelHandlerContext ctx, final MessageEvent e) throws
                     final FluentCaseInsensitiveStringsMap headers = request.getHeaders();
                     final RequestBuilder builder = new RequestBuilder(future.getRequest());
 
-                    if (realm != null && !future.getURI().getPath().equalsIgnoreCase(realm.getUri())) {
-                        builder.setUrl(future.getURI().toString());
-                    }
+                    //if (realm != null && !future.getURI().getPath().equalsIgnoreCase(realm.getUri())) {
+                    //    builder.setUrl(future.getURI().toString());
+                    //}
 
                     if (statusCode == 401
                             && wwwAuth.size() > 0

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -1432,7 +1432,6 @@ public boolean handleStatus(final HttpResponsePacket responsePacket,
                                      final HttpTransactionContext httpTransactionContext,
                                      final FilterChainContext ctx) {
 
-                responsePacket.setSkipRemainder(true); // ignore the remainder of the response
                 final String auth = responsePacket.getHeader(Header.WWWAuthenticate);
                 if (auth == null) {
                     throw new IllegalStateException("401 response received, but no WWW-Authenticate header was present");
@@ -1446,6 +1445,9 @@ public boolean handleStatus(final HttpResponsePacket responsePacket,
                     httpTransactionContext.invocationStatus = InvocationStatus.STOP;
                     return true;
                 }
+
+                responsePacket.setSkipRemainder(true); // ignore the remainder of the response
+
                 final Request req = httpTransactionContext.request;
                 realm = new Realm.RealmBuilder().clone(realm)
                                 .setScheme(realm.getAuthScheme())

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -192,7 +192,7 @@ public NettyAsyncHttpProvider(AsyncHttpClientConfig config) {
                 e = Executors.newCachedThreadPool();
             }
             int numWorkers = config.getIoThreadMultiplier() * Runtime.getRuntime().availableProcessors();
-            log.debug("Number of application's worked threads is {}", numWorkers);
+            log.debug("Number of application's worker threads is {}", numWorkers);
             socketChannelFactory = new NioClientSocketChannelFactory(e, config.executorService(), numWorkers);
         }
         plainBootstrap = new ClientBootstrap(socketChannelFactory);

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -2598,7 +2598,7 @@ public WebSocket sendPong(byte[] payload) {
         }
 
         @Override
-        public WebSocket addMessageListener(WebSocketListener l) {
+        public WebSocket addWebSocketListener(WebSocketListener l) {
             gWebSocket.add(new AHCWebSocketListenerAdapter(l, this));
             return this;
         }

File: src/main/java/com/ning/http/client/providers/netty/NettyWebSocket.java
Patch:
@@ -75,7 +75,7 @@ public WebSocket sendPong(byte[] payload) {
     }
 
     @Override
-    public WebSocket addMessageListener(WebSocketListener l) {
+    public WebSocket addWebSocketListener(WebSocketListener l) {
         listeners.add(l);
         return this;
     }

File: src/main/java/com/ning/http/client/websocket/WebSocket.java
Patch:
@@ -85,7 +85,7 @@ public interface WebSocket {
      * @param l a {@link WebSocketListener}
      * @return this
      */
-    WebSocket addMessageListener(WebSocketListener l);
+    WebSocket addWebSocketListener(WebSocketListener l);
 
     /**
      * Returns <code>true</code> if the WebSocket is open/connected.

File: src/main/java/com/ning/http/client/websocket/WebSocketUpgradeHandler.java
Patch:
@@ -94,7 +94,7 @@ public final WebSocket onCompleted() throws Exception {
     public final void onSuccess(WebSocket webSocket) {
         this.webSocket = webSocket;
         for (WebSocketListener w : l) {
-            webSocket.addMessageListener(w);
+            webSocket.addWebSocketListener(w);
             w.onOpen(webSocket);
         }
         ok.set(true);
@@ -107,7 +107,7 @@ public final void onSuccess(WebSocket webSocket) {
     public final void onFailure(Throwable t) {
         for (WebSocketListener w : l) {
             if (!ok.get() && webSocket != null) {
-                webSocket.addMessageListener(w);
+                webSocket.addWebSocketListener(w);
             }
             w.onError(t);
         }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2258,7 +2258,8 @@ public void handle(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
 
                 final boolean validStatus = response.getStatus().equals(status);
                 final boolean validUpgrade = response.getHeader(HttpHeaders.Names.UPGRADE) != null;
-                final boolean validConnection = response.getHeader(HttpHeaders.Names.CONNECTION).equals(HttpHeaders.Values.UPGRADE);
+                String c = response.getHeader(HttpHeaders.Names.CONNECTION);
+                final boolean validConnection = c == null ? false : c.equals(HttpHeaders.Values.UPGRADE);
 
                 s = new ResponseStatus(future.getURI(), response, NettyAsyncHttpProvider.this);
                 final boolean statusReceived = h.onStatusReceived(s) == STATE.UPGRADE;

File: src/main/java/com/ning/http/client/websocket/WebSocketUpgradeHandler.java
Patch:
@@ -106,7 +106,7 @@ public final void onSuccess(WebSocket webSocket) {
     @Override
     public final void onFailure(Throwable t) {
         for (WebSocketListener w : l) {
-            if (!ok.get()) {
+            if (!ok.get() && webSocket != null) {
                 webSocket.addMessageListener(w);
             }
             w.onError(t);

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -432,7 +432,7 @@ public static String parseCharset(String contentType) {
         for (String part : contentType.split(";")) {
             if (part.trim().startsWith("charset=")) {
                 String[] val = part.split("=");
-                if (val[1].length > 1) {
+                if (val.length > 1) {
                     return val[1].trim();
                 }
             }

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -432,7 +432,7 @@ public static String parseCharset(String contentType) {
         for (String part : contentType.split(";")) {
             if (part.trim().startsWith("charset=")) {
                 String[] val = part.split("=");
-                if (val[1].length > 1) {
+                if (val.length > 1) {
                     return val[1].trim();
                 }
             }

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -432,7 +432,7 @@ public static String parseCharset(String contentType) {
         for (String part : contentType.split(";")) {
             if (part.trim().startsWith("charset=")) {
                 String[] val = part.split("=");
-                if (val[1] != null) {
+                if (val[1].length > 1) {
                     return val[1].trim();
                 }
             }

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -432,7 +432,7 @@ public static String parseCharset(String contentType) {
         for (String part : contentType.split(";")) {
             if (part.trim().startsWith("charset=")) {
                 String[] val = part.split("=");
-                if (val[1] != null) {
+                if (val[1].length > 1) {
                     return val[1].trim();
                 }
             }

File: src/main/java/com/ning/http/client/AsyncHttpClientConfigBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/AsyncHttpProviderConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/Body.java
Patch:
@@ -1,5 +1,5 @@
 /*
-* Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+* Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/BodyConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/BodyDeferringAsyncHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/BodyGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/ProgressAsyncHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/RandomAccessBody.java
Patch:
@@ -1,5 +1,5 @@
 /*
-* Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+* Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/ResumableBodyConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /*
-* Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+* Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/ThrowableHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
-* Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+* Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
 *
 * This program is licensed to you under the Apache License Version 2.0,
 * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/UpgradeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/consumers/AppendableBodyConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/consumers/ByteBufferBodyConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/consumers/FileBodyConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/consumers/OutputStreamBodyConsumer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/extra/ResumableRandomAccessFileListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/extra/ThrottleRequestFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/filter/FilterContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/filter/FilterException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/filter/IOExceptionFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/filter/RequestFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/filter/ResponseFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/generators/ByteArrayBodyGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/generators/FileBodyGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/listenable/AbstractListenableFuture.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/listenable/ExecutionList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/listener/TransferCompletionHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/listener/TransferListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/ntlm/NTLMEngine.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/ntlm/NTLMEngineException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProviderConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponseBodyPart.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponseHeaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponseStatus.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/grizzly/FeedableBodyGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProviderConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyConnectionsPool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseBodyPart.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseFuture.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseHeaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponseStatus.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/grizzly/TransportCustomizer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProviderConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/jdk/ResponseBodyPart.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/jdk/ResponseHeaders.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/jdk/ResponseStatus.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/netty/BodyChunkedInput.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/netty/BodyFileRegion.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/netty/NettyWebSocket.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/netty/Protocol.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/netty/WebSocketUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/netty/spnego/SpnegoEngine.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/providers/netty/spnego/SpnegoTokenGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/resumable/PropertiesBasedResumableProcessor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/resumable/ResumableAsyncHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/resumable/ResumableIOExceptionFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/resumable/ResumableListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/simple/SimpleAHCTransferListener.java
Patch:
@@ -1,7 +1,7 @@
 package com.ning.http.client.simple;
 
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0, 
  * and you may not use this file except in compliance with the Apache License Version 2.0. 

File: src/main/java/com/ning/http/client/webdav/WebDavCompletionHandlerBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/webdav/WebDavResponse.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/websocket/DefaultWebSocketListener.java
Patch:
@@ -1,7 +1,7 @@
 /*
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
  *
- * Copyright (c) 2011 Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2012 Oracle and/or its affiliates. All rights reserved.
  *
  * The contents of this file are subject to the terms of either the GNU
  * General Public License Version 2 only ("GPL") or the Common Development

File: src/main/java/com/ning/http/client/websocket/WebSocket.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/websocket/WebSocketByteListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/websocket/WebSocketListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/websocket/WebSocketPingListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/websocket/WebSocketPongListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/websocket/WebSocketTextListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/client/websocket/WebSocketUpgradeHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/multipart/FilePartStallHandler.java
Patch:
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) 2000-2011 Liferay, Inc. All rights reserved.
+ * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or modify it under
  * the terms of the GNU Lesser General Public License as published by the Free

File: src/main/java/com/ning/http/multipart/MultipartBody.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/util/AllowAllHostnameVerifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/util/AuthenticatorUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/util/Base64.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/util/CleanupChannelGroup.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/util/DateUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/util/ProxyUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/RealmTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/AuthTimeoutTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/BodyDeferringAsyncHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/ByteBufferCapacityTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/ChunkingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/DigestAuthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/FilePartLargeFileTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/FilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/HostnameVerifierTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/ListenableFutureTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/MultipartUploadTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/MultipleHeaderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/NonAsciiContentLengthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/ProxyyTunnellingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/PutLargeFileTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/RetryNonBlockingIssue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/RetryRequestTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/SimpleAsyncClientErrorBehaviourTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/TransferListenerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/WebDavBasicTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/ZeroCopyFileTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyAsyncProviderBasicTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyAsyncStreamHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyAsyncStreamLifecycleTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyAuthTimeoutTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyBasicAuthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyBasicHttpsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyBodyChunkTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyBodyDeferringAsyncHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyByteBufferCapacityTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyChunkingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyComplexClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyConnectionPoolTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyDigestAuthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyEmptyBodyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyErrorResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyExpectContinue100Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyFollowingThreadTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyHead302Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyHttpToHttpsRedirectTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyIdleStateHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyInputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyListenableFutureTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyMaxConnectionsInThreadsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyMaxTotalConnectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyMultipleHeaderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyNoNullResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyNonAsciiContentLengthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyParamEncodingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyPerRequestRelative302Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyPerRequestTimeoutTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyPostWithQSTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyProxyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyProxyTunnelingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyPutLargeFileTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyQueryParametersTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyRC10KTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyRedirectConnectionUsageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyRelative302Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyRemoteSiteTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyRetryRequestTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlySimpleAsyncHttpClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyTransferListenerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyAsyncHttpProviderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyAsyncProviderBasicTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyAsyncStreamHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyAsyncStreamLifecycleTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyAuthTimeoutTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyBasicAuthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyBasicHttpsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyBodyChunkTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyBodyDeferringAsyncHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyByteBufferCapacityTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyComplexClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyConnectionPoolTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyDigestAuthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyEmptyBodyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyErrorResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyExpect100ContinueTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyFilePartLargeFileTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyFilterTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyFollowingThreadTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyHead302Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyHostnameVerifierTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyHttpToHttpsRedirectTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyIdleStateHandlerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyInputStreamTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyListenableFutureTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyMaxConnectionsInThreads.java
Patch:
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2010-2011 Sonatype, Inc.
+ * Copyright (c) 2010-2012 Sonatype, Inc.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * and Apache License v2.0 which accompanies this distribution.

File: src/test/java/com/ning/http/client/async/netty/NettyMaxTotalConnectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyMultipartUploadTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyMultipleHeaderTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyNoNullResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyNonAsciiContentLengthTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyParamEncodingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyPerRequestRelative302Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyPerRequestTimeoutTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyPostWithQSTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyProxyTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyProxyTunnellingTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyPutLargeFileTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyQueryParametersTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyRC10KTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyRedirectConnectionUsageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyRelative302Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettySimpleAsyncHttpClientTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyTransferListenerTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyWebDavBasicTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/async/netty/NettyZeroCopyFileTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/providers/netty/NettyAsyncResponseTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.
@@ -34,7 +34,7 @@ public class NettyAsyncResponseTest {
 
     @Test(groups = "standalone")
     public void testCookieParseExpires() {
-        // e.g. "Sun, 06-Feb-2011 03:45:24 GMT";
+        // e.g. "Sun, 06-Feb-2012 03:45:24 GMT";
         SimpleDateFormat sdf = new SimpleDateFormat("EEE, dd-MMM-yyyy HH:mm:ss z", Locale.US);
         sdf.setTimeZone(TimeZone.getTimeZone("GMT"));
 

File: src/test/java/com/ning/http/client/websocket/AbstractBasicTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/websocket/ByteMessageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/websocket/TextMessageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/websocket/grizzly/GrizzlyByteMessageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/websocket/grizzly/GrizzlyTextMessageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/websocket/netty/NettyByteMessageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/client/websocket/netty/NettyTextMessageTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/test/java/com/ning/http/util/ProxyUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2010-2011 Sonatype, Inc. All rights reserved.
+ * Copyright (c) 2010-2012 Sonatype, Inc. All rights reserved.
  *
  * This program is licensed to you under the Apache License Version 2.0,
  * and you may not use this file except in compliance with the Apache License Version 2.0.

File: src/main/java/com/ning/http/multipart/MultipartBody.java
Patch:
@@ -458,7 +458,7 @@ private long handleFilePart(WritableByteChannel target, FilePart filePart) throw
                         if (nWrite == 0) {
                             logger.info("Waiting for writing...");
                             try {
-                                fc.wait(1000);
+                                fc.wait(50);
                             } catch (InterruptedException e) {
                                 logger.trace(e.getMessage(), e);
                             }

File: src/test/java/com/ning/http/client/websocket/netty/NettyByteMessageTest.java
Patch:
@@ -15,9 +15,9 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ProviderUtil;
-import com.ning.http.client.websocket.TextMessageTest;
+import com.ning.http.client.websocket.ByteMessageTest;
 
-public class NettyByteMessageTest extends TextMessageTest {
+public class NettyByteMessageTest extends ByteMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -947,7 +947,7 @@ private <T> ListenableFuture<T> doConnect(final Request request, final AsyncHand
 
         ChannelFuture channelFuture;
         ClientBootstrap bootstrap = request.getUrl().startsWith(WEBSOCKET) ? webSocketBootstrap : (useSSl ? secureBootstrap : plainBootstrap);
-        //bootstrap.setOption("connectTimeoutMillis", config.getConnectionTimeoutInMs());
+        bootstrap.setOption("connectTimeoutMillis", config.getConnectionTimeoutInMs());
 
         // Do no enable this with win.
         if (System.getProperty("os.name").toLowerCase().indexOf("win") == -1) {

File: src/test/java/com/ning/http/client/websocket/grizzly/GrizzlyByteMessageTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 import com.ning.http.client.websocket.ByteMessageTest;
 
-public class GrizzlyByteMessageText extends ByteMessageTest {
+public class GrizzlyByteMessageTest extends ByteMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         if (config == null) {

File: src/test/java/com/ning/http/client/websocket/grizzly/GrizzlyTextMessageTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 import com.ning.http.client.websocket.ByteMessageTest;
 
-public class GrizzlyTextMessageText extends ByteMessageTest {
+public class GrizzlyTextMessageTest extends ByteMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         if (config == null) {

File: src/test/java/com/ning/http/client/websocket/netty/NettyByteMessageTest.java
Patch:
@@ -15,9 +15,9 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ProviderUtil;
-import com.ning.http.client.websocket.ByteMessageTest;
+import com.ning.http.client.websocket.TextMessageTest;
 
-public class NettyTextMessageText extends ByteMessageTest {
+public class NettyByteMessageTest extends TextMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);

File: src/test/java/com/ning/http/client/websocket/netty/NettyTextMessageTest.java
Patch:
@@ -15,10 +15,9 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ProviderUtil;
-import com.ning.http.client.async.ZeroCopyFileTest;
-import com.ning.http.client.websocket.ByteMessageTest;
+import com.ning.http.client.websocket.TextMessageTest;
 
-public class NettyByteMessageText extends ByteMessageTest {
+public class NettyTextMessageTest extends TextMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -947,7 +947,7 @@ private <T> ListenableFuture<T> doConnect(final Request request, final AsyncHand
 
         ChannelFuture channelFuture;
         ClientBootstrap bootstrap = request.getUrl().startsWith(WEBSOCKET) ? webSocketBootstrap : (useSSl ? secureBootstrap : plainBootstrap);
-        //bootstrap.setOption("connectTimeoutMillis", config.getConnectionTimeoutInMs());
+        bootstrap.setOption("connectTimeoutMillis", config.getConnectionTimeoutInMs());
 
         // Do no enable this with win.
         if (System.getProperty("os.name").toLowerCase().indexOf("win") == -1) {

File: src/test/java/com/ning/http/client/websocket/grizzly/GrizzlyByteMessageTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 import com.ning.http.client.websocket.ByteMessageTest;
 
-public class GrizzlyByteMessageText extends ByteMessageTest {
+public class GrizzlyByteMessageTest extends ByteMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         if (config == null) {

File: src/test/java/com/ning/http/client/websocket/grizzly/GrizzlyTextMessageTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 import com.ning.http.client.websocket.ByteMessageTest;
 
-public class GrizzlyTextMessageText extends ByteMessageTest {
+public class GrizzlyTextMessageTest extends ByteMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         if (config == null) {

File: src/test/java/com/ning/http/client/websocket/netty/NettyByteMessageTest.java
Patch:
@@ -15,9 +15,9 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ProviderUtil;
-import com.ning.http.client.websocket.ByteMessageTest;
+import com.ning.http.client.websocket.TextMessageTest;
 
-public class NettyTextMessageText extends ByteMessageTest {
+public class NettyByteMessageTest extends TextMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);

File: src/test/java/com/ning/http/client/websocket/netty/NettyTextMessageTest.java
Patch:
@@ -15,10 +15,9 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ProviderUtil;
-import com.ning.http.client.async.ZeroCopyFileTest;
-import com.ning.http.client.websocket.ByteMessageTest;
+import com.ning.http.client.websocket.TextMessageTest;
 
-public class NettyByteMessageText extends ByteMessageTest {
+public class NettyTextMessageTest extends TextMessageTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2014,7 +2014,8 @@ public void handle(final ChannelHandlerContext ctx, final MessageEvent e) throws
                                     .build();
                         }
 
-                        final Realm nr = newRealm;
+                        final Realm nr = new Realm.RealmBuilder().clone(newRealm)
+                                .setUri(request.getUrl()).build();
 
                         log.debug("Sending authentication to {}", request.getUrl());
                         AsyncCallable ac = new AsyncCallable(future) {
@@ -2089,7 +2090,7 @@ public Object call() throws Exception {
                         return;
                     }
 
-                    boolean redirectEnabled = request.isRedirectOverrideSet()? request.isRedirectEnabled() : config.isRedirectEnabled();
+                    boolean redirectEnabled = request.isRedirectOverrideSet() ? request.isRedirectEnabled() : config.isRedirectEnabled();
                     if (redirectEnabled && (statusCode == 302 || statusCode == 301 || statusCode == 307)) {
 
                         if (future.incrementAndGetCurrentRedirectCount() < config.getMaxRedirects()) {

File: src/main/java/com/ning/http/util/AuthenticatorUtils.java
Patch:
@@ -40,6 +40,8 @@ public static String computeDigestAuthentication(Realm realm) throws NoSuchAlgor
         builder.append("algorithm").append('=').append(realm.getAlgorithm()).append(", ");
 
         construct(builder, "response", realm.getResponse());
+        if (realm.getOpaque() != null && realm.getOpaque() != null && realm.getOpaque().equals("") == false)
+            construct(builder, "opaque", realm.getOpaque());
         builder.append("qop").append('=').append(realm.getQop()).append(", ");
         builder.append("nc").append('=').append(realm.getNc()).append(", ");
         construct(builder, "cnonce", realm.getCnonce(), true);

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2089,7 +2089,7 @@ public Object call() throws Exception {
                         return;
                     }
 
-                    boolean redirectEnabled = request.isRedirectEnabled() ? true : config.isRedirectEnabled();
+                    boolean redirectEnabled = request.isRedirectOverrideSet()? request.isRedirectEnabled() : config.isRedirectEnabled();
                     if (redirectEnabled && (statusCode == 302 || statusCode == 301 || statusCode == 307)) {
 
                         if (future.incrementAndGetCurrentRedirectCount() < config.getMaxRedirects()) {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2014,7 +2014,8 @@ public void handle(final ChannelHandlerContext ctx, final MessageEvent e) throws
                                     .build();
                         }
 
-                        final Realm nr = newRealm;
+                        final Realm nr = new Realm.RealmBuilder().clone(newRealm)
+                                .setUri(request.getUrl()).build();
 
                         log.debug("Sending authentication to {}", request.getUrl());
                         AsyncCallable ac = new AsyncCallable(future) {
@@ -2089,7 +2090,7 @@ public Object call() throws Exception {
                         return;
                     }
 
-                    boolean redirectEnabled = request.isRedirectOverrideSet()? request.isRedirectEnabled() : config.isRedirectEnabled();
+                    boolean redirectEnabled = request.isRedirectOverrideSet() ? request.isRedirectEnabled() : config.isRedirectEnabled();
                     if (redirectEnabled && (statusCode == 302 || statusCode == 301 || statusCode == 307)) {
 
                         if (future.incrementAndGetCurrentRedirectCount() < config.getMaxRedirects()) {

File: src/main/java/com/ning/http/util/AuthenticatorUtils.java
Patch:
@@ -40,6 +40,8 @@ public static String computeDigestAuthentication(Realm realm) throws NoSuchAlgor
         builder.append("algorithm").append('=').append(realm.getAlgorithm()).append(", ");
 
         construct(builder, "response", realm.getResponse());
+        if (realm.getOpaque() != null && realm.getOpaque() != null && realm.getOpaque().equals("") == false)
+            construct(builder, "opaque", realm.getOpaque());
         builder.append("qop").append('=').append(realm.getQop()).append(", ");
         builder.append("nc").append('=').append(realm.getNc()).append(", ");
         construct(builder, "cnonce", realm.getCnonce(), true);

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -2089,7 +2089,7 @@ public Object call() throws Exception {
                         return;
                     }
 
-                    boolean redirectEnabled = request.isRedirectEnabled() ? true : config.isRedirectEnabled();
+                    boolean redirectEnabled = request.isRedirectOverrideSet()? request.isRedirectEnabled() : config.isRedirectEnabled();
                     if (redirectEnabled && (statusCode == 302 || statusCode == 301 || statusCode == 307)) {
 
                         if (future.incrementAndGetCurrentRedirectCount() < config.getMaxRedirects()) {

File: src/test/java/com/ning/http/client/async/ProxyyTunnellingTest.java
Patch:
@@ -111,7 +111,7 @@ public Response onCompleted(Response response) throws Exception {
         });
         Response r = responseFuture.get();
         assertEquals(r.getStatusCode(), 200);
-        assertEquals(r.getHeader("server"), "Jetty(7.1.4.v20100610)");
+        assertEquals(r.getHeader("server"), "Jetty(8.1.0.RC1)");
 
         asyncHttpClient.close();
     }
@@ -142,7 +142,7 @@ public Response onCompleted(Response response) throws Exception {
         });
         Response r = responseFuture.get();
         assertEquals(r.getStatusCode(), 200);
-        assertEquals(r.getHeader("server"), "Jetty(7.1.4.v20100610)");
+        assertEquals(r.getHeader("server"), "Jetty(8.1.0.RC1)");
 
         asyncHttpClient.close();
     }
@@ -162,7 +162,7 @@ public void testSimpleAHCConfigProxy() throws IOException, InterruptedException,
         Response r = client.get().get();
 
         assertEquals(r.getStatusCode(), 200);
-        assertEquals(r.getHeader("server"), "Jetty(7.1.4.v20100610)");
+        assertEquals(r.getHeader("server"), "Jetty(8.1.0.RC1)");
 
         client.close();
     }

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -1201,6 +1201,7 @@ protected void onInitialLineParsed(HttpHeader httpHeader,
         protected void onHttpHeaderError(final HttpHeader httpHeader,
                                          final FilterChainContext ctx,
                                          final Throwable t) throws IOException {
+
             t.printStackTrace();
             httpHeader.setSkipRemainder(true);
             final HttpTransactionContext context =

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -727,7 +727,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                     int length = lengthWrapper[0];
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));
                     nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));
-                } else if (request.getParams() != null) {
+                } else if (request.getParams() != null && !request.getParams().isEmpty()) {
                     StringBuilder sb = new StringBuilder();
                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {
                         final String key = paramEntry.getKey();

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
Patch:
@@ -35,7 +35,7 @@ public class NettyConnectionsPool implements ConnectionsPool<String, Channel> {
     private final ConcurrentHashMap<String, ConcurrentLinkedQueue<IdleChannel>> connectionsPool = new ConcurrentHashMap<String, ConcurrentLinkedQueue<IdleChannel>>();
     private final ConcurrentHashMap<Channel, IdleChannel> channel2IdleChannel = new ConcurrentHashMap<Channel, IdleChannel>();
     private final AtomicBoolean isClosed = new AtomicBoolean(false);
-    private final Timer idleConnectionDetector = new Timer();
+    private final Timer idleConnectionDetector = new Timer(true);
     private final boolean sslConnectionPoolEnabled;
     private final int maxTotalConnections;
     private final int maxConnectionPerHost;

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -219,6 +219,8 @@ public final static String getHost(URI uri) {
     }
 
     public final static URI getRedirectUri(URI uri, String location) {
+        if(location == null)
+            throw new IllegalArgumentException("URI " + uri + " was redirected to null location");
         URI newUri = uri.resolve(location);
 
         String scheme = newUri.getScheme();

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1229,7 +1229,7 @@ public Object call() throws Exception {
                     return;
                 }
 
-                boolean redirectEnabled = request.isRedirectEnabled() ? true : config.isRedirectEnabled();
+                boolean redirectEnabled = request.isRedirectOverrideSet()? request.isRedirectEnabled() : config.isRedirectEnabled();
                 if (redirectEnabled && (statusCode == 302 || statusCode == 301 || statusCode == 307)) {
 
                     if (future.incrementAndGetCurrentRedirectCount() < config.getMaxRedirects()) {

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -218,6 +218,8 @@ public final static String getHost(URI uri) {
     }
 
     public final static URI getRedirectUri(URI uri, String location) {
+        if(location == null)
+            throw new IllegalArgumentException("URI " + uri + " was redirected to null location");
         URI newUri = uri.resolve(location);
 
         String scheme = newUri.getScheme();

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -1081,7 +1081,7 @@ protected void onInitialLineParsed(HttpHeader httpHeader,
         }
 
         @Override
-        protected void onHttpError(final HttpHeader httpHeader,
+        protected void onHttpHeaderError(final HttpHeader httpHeader,
                                    final FilterChainContext ctx,
                                    final Throwable t) throws IOException {
             t.printStackTrace();

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -218,6 +218,8 @@ public final static String getHost(URI uri) {
     }
 
     public final static URI getRedirectUri(URI uri, String location) {
+        if(location == null)
+            throw new IllegalArgumentException("URI " + uri + " was redirected to null location");
         URI newUri = uri.resolve(location);
 
         String scheme = newUri.getScheme();

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1229,7 +1229,7 @@ public Object call() throws Exception {
                     return;
                 }
 
-                boolean redirectEnabled = request.isRedirectEnabled() ? true : config.isRedirectEnabled();
+                boolean redirectEnabled = request.isRedirectOverrideSet()? request.isRedirectEnabled() : config.isRedirectEnabled();
                 if (redirectEnabled && (statusCode == 302 || statusCode == 301 || statusCode == 307)) {
 
                     if (future.incrementAndGetCurrentRedirectCount() < config.getMaxRedirects()) {

File: src/main/java/com/ning/http/client/RequestBuilderBase.java
Patch:
@@ -134,7 +134,7 @@ private String toUrl(boolean encode) {
                 throw new IllegalArgumentException("Illegal URL: " + url, e);
             }
 
-            if (queryParams != null) {
+            if (queryParams != null && !queryParams.isEmpty()) {
 
                 StringBuilder builder = new StringBuilder();
                 if (!url.substring(8).contains("/")) { // no other "/" than http[s]:// -> http://localhost:1234

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -712,7 +712,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                     int length = lengthWrapper[0];
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(length));
                     nettyRequest.setContent(ChannelBuffers.wrappedBuffer(bytes, 0, length));
-                } else if (request.getParams() != null) {
+                } else if (request.getParams() != null && !request.getParams().isEmpty()) {
                     StringBuilder sb = new StringBuilder();
                     for (final Entry<String, List<String>> paramEntry : request.getParams()) {
                         final String key = paramEntry.getKey();

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyAsyncHttpProvider.java
Patch:
@@ -66,7 +66,7 @@
 import org.glassfish.grizzly.http.HttpResponsePacket;
 import org.glassfish.grizzly.http.Method;
 import org.glassfish.grizzly.http.Protocol;
-import org.glassfish.grizzly.http.util.Charsets;
+import org.glassfish.grizzly.utils.Charsets;
 import org.glassfish.grizzly.http.util.CookieSerializerUtils;
 import org.glassfish.grizzly.http.util.DataChunk;
 import org.glassfish.grizzly.http.util.Header;

File: src/main/java/com/ning/http/client/providers/grizzly/GrizzlyResponse.java
Patch:
@@ -23,7 +23,7 @@
 
 import org.glassfish.grizzly.Buffer;
 import org.glassfish.grizzly.http.CookiesBuilder;
-import org.glassfish.grizzly.http.util.Charsets;
+import org.glassfish.grizzly.utils.Charsets;
 import org.glassfish.grizzly.memory.Buffers;
 import org.glassfish.grizzly.memory.MemoryManager;
 import org.glassfish.grizzly.utils.BufferInputStream;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -631,7 +631,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
             }
 
             if (proxyServer.getPrincipal() != null) {
-                if (proxyServer.getNtlmDomain() != "") {
+                if (proxyServer.getNtlmDomain() != null && proxyServer.getNtlmDomain().length() > 0) {
 
                     List<String> auth = request.getHeaders().get(HttpHeaders.Names.PROXY_AUTHORIZATION);
                     if (!(auth != null && auth.size() > 0 && auth.get(0).startsWith("NTLM"))) {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -631,7 +631,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
             }
 
             if (proxyServer.getPrincipal() != null) {
-                if (proxyServer.getNtlmDomain() != null) {
+                if (proxyServer.getNtlmDomain() != "") {
 
                     List<String> auth = request.getHeaders().get(HttpHeaders.Names.PROXY_AUTHORIZATION);
                     if (!(auth != null && auth.size() > 0 && auth.get(0).startsWith("NTLM"))) {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -631,7 +631,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
             }
 
             if (proxyServer.getPrincipal() != null) {
-                if (proxyServer.getNtlmDomain() != null) {
+                if (proxyServer.getNtlmDomain() != "") {
 
                     List<String> auth = request.getHeaders().get(HttpHeaders.Names.PROXY_AUTHORIZATION);
                     if (!(auth != null && auth.size() > 0 && auth.get(0).startsWith("NTLM"))) {

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -275,7 +275,7 @@ public Request build() {
                 if (i >= 0) {
                     url = url.substring(0, i);
                 }
-                signatureCalculator.calculateAndAddSignature(baseURL, request, this);
+                signatureCalculator.calculateAndAddSignature(url, request, this);
             }
             return super.build();
         }

File: src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java
Patch:
@@ -67,7 +67,7 @@ public long getContentLength() {
         public long read(ByteBuffer buffer) throws IOException {
 
             // To be safe.
-            chunk = new byte[buffer.capacity() - 10];
+            chunk = new byte[buffer.remaining() - 10];
 
 
             int read = -1;

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyAsyncProviderBasicTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProviderConfig;
 import com.ning.http.client.providers.grizzly.TransportCustomizer;
+import org.glassfish.grizzly.filterchain.FilterChainBuilder;
 import org.glassfish.grizzly.nio.transport.TCPNIOTransport;
 import org.glassfish.grizzly.strategies.SameThreadIOStrategy;
 
@@ -41,7 +42,7 @@ protected AsyncHttpProviderConfig getProviderConfig() {
         final GrizzlyAsyncHttpProviderConfig config = new GrizzlyAsyncHttpProviderConfig();
         config.addProperty(TRANSPORT_CUSTOMIZER, new TransportCustomizer() {
             @Override
-            public void customize(TCPNIOTransport transport) {
+            public void customize(TCPNIOTransport transport, FilterChainBuilder builder) {
                 transport.setTcpNoDelay(true);
                 transport.setIOStrategy(SameThreadIOStrategy.getInstance());
             }

File: src/test/java/com/ning/http/client/async/grizzly/GrizzlyRedirectConnectionUsageTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProvider;
 import com.ning.http.client.providers.grizzly.GrizzlyAsyncHttpProviderConfig;
 import com.ning.http.client.providers.grizzly.TransportCustomizer;
+import org.glassfish.grizzly.filterchain.FilterChainBuilder;
 import org.glassfish.grizzly.nio.transport.TCPNIOTransport;
 import org.glassfish.grizzly.strategies.SameThreadIOStrategy;
 
@@ -40,7 +41,7 @@ protected AsyncHttpProviderConfig getProviderConfig() {
         final GrizzlyAsyncHttpProviderConfig config = new GrizzlyAsyncHttpProviderConfig();
         config.addProperty(TRANSPORT_CUSTOMIZER, new TransportCustomizer() {
             @Override
-            public void customize(TCPNIOTransport transport) {
+            public void customize(TCPNIOTransport transport, FilterChainBuilder builder) {
                 if (System.getProperty("blockingio") != null) {
                     transport.configureBlocking(true);
                 }

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -275,7 +275,7 @@ public Request build() {
                 if (i >= 0) {
                     url = url.substring(0, i);
                 }
-                signatureCalculator.calculateAndAddSignature(baseURL, request, this);
+                signatureCalculator.calculateAndAddSignature(url, request, this);
             }
             return super.build();
         }

File: src/main/java/com/ning/http/client/generators/InputStreamBodyGenerator.java
Patch:
@@ -67,7 +67,7 @@ public long getContentLength() {
         public long read(ByteBuffer buffer) throws IOException {
 
             // To be safe.
-            chunk = new byte[buffer.capacity() - 10];
+            chunk = new byte[buffer.remaining() - 10];
 
 
             int read = -1;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1848,6 +1848,7 @@ public void operationComplete(ChannelFuture cf) {
         }
 
         public void operationProgressed(ChannelFuture cf, long amount, long current, long total) {
+            future.touch();
             if (ProgressAsyncHandler.class.isAssignableFrom(asyncHandler.getClass())) {
                 ProgressAsyncHandler.class.cast(asyncHandler).onContentWriteProgress(amount, current, total);
             }

File: src/main/java/com/ning/http/client/simple/SimpleAHCTransferListener.java
Patch:
@@ -20,7 +20,7 @@
  * <p/>
  * Note: This listener does not cover requests failing before a connection is
  * established. For error handling, see
- * {@link SimpleAsyncHttpClient.Builder#setDefaultThrowableHandler(com.ning.http.client.ThrowableHandler)}
+ * {@link com.ning.http.client.SimpleAsyncHttpClient.Builder#setDefaultThrowableHandler(com.ning.http.client.ThrowableHandler)}
  *
  * @author Benjamin Hanzelmann
  */

File: src/main/java/com/ning/http/util/ProxyUtils.java
Patch:
@@ -113,7 +113,7 @@ public static boolean avoidProxy(final ProxyServer proxyServer, final String tar
      *
      * @param properties the properties to evaluate. Must not be null.
      * @return a ProxyServer instance or null, if no valid properties were set.
-     * @see http://download.oracle.com/javase/1.4.2/docs/guide/net/properties.html
+     * @see <a href="http://download.oracle.com/javase/1.4.2/docs/guide/net/properties.html">Networking Properties</a>
      * @see #PROXY_HOST
      * @see #PROXY_PORT
      * @see #PROXY_PROTOCOL

File: src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -515,8 +515,8 @@ public void asyncDoPostBodyIsoTest() throws Throwable {
 
         AsyncHttpClient c = getAsyncHttpClient(null);
         final CountDownLatch l = new CountDownLatch(1);
-        Response r = c.preparePost(getTargetUrl()).addHeader("X-ISO", "true").setBody("������").execute().get();
-        assertEquals(r.getResponseBody().getBytes("ISO-8859-1"),"������".getBytes("ISO-8859-1"));
+        Response r = c.preparePost(getTargetUrl()).addHeader("X-ISO", "true").setBody("\u017D\u017D\u017D\u017D\u017D\u017D").execute().get();
+        assertEquals(r.getResponseBody().getBytes("ISO-8859-1"),"\u017D\u017D\u017D\u017D\u017D\u017D".getBytes("ISO-8859-1"));
         c.close();
     }
     

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1254,14 +1254,14 @@ public Object call() throws Exception {
                     return;
                 } else if (!response.isChunked()) {
                     if (response.getContent().readableBytes() != 0) {
-                        updateBodyAndInterrupt(handler, new ResponseBodyPart(future.getURI(), response, this));
+                        updateBodyAndInterrupt(handler, new ResponseBodyPart(future.getURI(), response, this, true));
                     }
                     finishUpdate(future, ctx, false);
                     return;
                 }
 
                 if (nettyRequest.getMethod().equals(HttpMethod.HEAD)) {
-                    updateBodyAndInterrupt(handler, new ResponseBodyPart(future.getURI(), response, this));
+                    updateBodyAndInterrupt(handler, new ResponseBodyPart(future.getURI(), response, this, true));
                     markAsDone(future, ctx);
                     drainChannel(ctx, future, future.getKeepAlive(), future.getURI());
                 }
@@ -1270,7 +1270,7 @@ public Object call() throws Exception {
                 HttpChunk chunk = (HttpChunk) e.getMessage();
 
                 if (handler != null) {
-                    if (chunk.isLast() || updateBodyAndInterrupt(handler, new ResponseBodyPart(future.getURI(), null, this, chunk))) {
+                    if (chunk.isLast() || updateBodyAndInterrupt(handler, new ResponseBodyPart(future.getURI(), null, this, chunk, chunk.isLast()))) {
                         if (chunk instanceof DefaultHttpChunkTrailer) {
                             updateHeadersAndInterrupt(handler, new ResponseHeaders(future.getURI(),
                                     future.getHttpResponse(), this, (HttpChunkTrailer) chunk));

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -511,8 +511,6 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
         HttpRequest nettyRequest;
         if (m.equals(HttpMethod.CONNECT)) {
             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, AsyncHttpProviderUtils.getAuthority(uri));
-        } else if (config.getProxyServer() != null || request.getProxyServer() != null) {
-            nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.toString());
         } else {
             StringBuilder path = new StringBuilder(uri.getRawPath());
             if (uri.getQuery() != null) {

File: src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
Patch:
@@ -78,7 +78,7 @@ public byte[] getResponseBodyAsBytes() throws IOException {
 
     /* @Override */
     public String getResponseBody() throws IOException {
-        return getResponseBody(DEFAULT_CHARSET);
+        return getResponseBody(null);
     }
 
     public String getResponseBody(String charset) throws IOException {
@@ -112,7 +112,7 @@ public InputStream getResponseBodyAsStream() throws IOException {
     /* @Override */
 
     public String getResponseBodyExcerpt(int maxLength) throws IOException {
-        return getResponseBodyExcerpt(maxLength, DEFAULT_CHARSET);
+        return getResponseBodyExcerpt(maxLength, null);
     }
 
     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {

File: src/main/java/com/ning/http/util/ProxyUtils.java
Patch:
@@ -71,7 +71,7 @@ public class ProxyUtils {
      * @return true if we have to avoid proxy use (obeying non-proxy hosts settings), false otherwise.
      */
     public static boolean avoidProxy(final ProxyServer proxyServer, final Request request) {
-        return avoidProxy(proxyServer, URI.create(request.getUrl()).getHost());
+        return avoidProxy(proxyServer, AsyncHttpProviderUtils.getHost(URI.create(request.getUrl())));
     }
 
     /**

File: src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
Patch:
@@ -78,7 +78,7 @@ public byte[] getResponseBodyAsBytes() throws IOException {
 
     /* @Override */
     public String getResponseBody() throws IOException {
-        return getResponseBody(DEFAULT_CHARSET);
+        return getResponseBody(null);
     }
 
     public String getResponseBody(String charset) throws IOException {
@@ -112,7 +112,7 @@ public InputStream getResponseBodyAsStream() throws IOException {
     /* @Override */
 
     public String getResponseBodyExcerpt(int maxLength) throws IOException {
-        return getResponseBodyExcerpt(maxLength, DEFAULT_CHARSET);
+        return getResponseBodyExcerpt(maxLength, null);
     }
 
     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -511,8 +511,6 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
         HttpRequest nettyRequest;
         if (m.equals(HttpMethod.CONNECT)) {
             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, AsyncHttpProviderUtils.getAuthority(uri));
-        } else if (config.getProxyServer() != null || request.getProxyServer() != null) {
-            nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.toString());
         } else {
             StringBuilder path = new StringBuilder(uri.getRawPath());
             if (uri.getQuery() != null) {

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -215,8 +215,8 @@ public class BoundRequestBuilder extends RequestBuilderBase<BoundRequestBuilder>
          */
         protected String baseURL;
         
-        private BoundRequestBuilder(String reqType) {
-            super(BoundRequestBuilder.class, reqType);
+        private BoundRequestBuilder(String reqType, boolean useRawUrl) {
+            super(BoundRequestBuilder.class, reqType, useRawUrl);
         }
 
         private BoundRequestBuilder(Request prototype) {
@@ -557,7 +557,7 @@ private final static AsyncHttpProvider loadDefaultProvider(String className, Asy
     }
 
     protected BoundRequestBuilder requestBuilder(String reqType, String url) {
-        return new BoundRequestBuilder(reqType).setUrl(url).setSignatureCalculator(signatureCalculator);
+        return new BoundRequestBuilder(reqType, config.isUseRawUrl()).setUrl(url).setSignatureCalculator(signatureCalculator);
     }
 
     protected BoundRequestBuilder requestBuilder(Request prototype) {

File: src/main/java/com/ning/http/client/Request.java
Patch:
@@ -190,4 +190,6 @@ public static interface EntityWriter {
      */
     public String getBodyEncoding();
 
+    public boolean isUseRawUrl();
+
 }

File: src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java
Patch:
@@ -403,7 +403,7 @@ public final static class Builder implements DerivedBuilder {
         private SimpleAHCTransferListener listener = null;
 
         public Builder() {
-            requestBuilder = new RequestBuilder("GET");
+            requestBuilder = new RequestBuilder("GET", false);
         }
 
         private Builder(SimpleAsyncHttpClient client) {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -196,7 +196,7 @@ public NettyAsyncHttpProvider(AsyncHttpClientConfig config) {
                 e = Executors.newCachedThreadPool();
             }
             int numWorkers = config.getIoThreadMultiplier() * Runtime.getRuntime().availableProcessors();
-            log.info("Number of application's worked threads is {}", numWorkers);
+            log.debug("Number of application's worked threads is {}", numWorkers);
             socketChannelFactory = new NioClientSocketChannelFactory(e, config.executorService(), numWorkers);
         }
         plainBootstrap = new ClientBootstrap(socketChannelFactory);

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectListener.java
Patch:
@@ -92,7 +92,8 @@ public final void operationComplete(ChannelFuture f) throws Exception {
 
             logger.debug("Failed to recover from exception: {} with channel {}", cause, f.getChannel());
 
-            ConnectException e = new ConnectException(f.getCause() != null ? cause.getMessage() + " to " + future.getURI().toString(): future.getURI().toString());
+            boolean printCause = f.getCause() != null && cause.getMessage() != null;
+            ConnectException e = new ConnectException( printCause ? cause.getMessage() + " to " + future.getURI().toString() : future.getURI().toString());
             if (cause != null) {
                 e.initCause(cause);
             }

File: src/main/java/com/ning/http/multipart/MultipartBody.java
Patch:
@@ -538,8 +538,9 @@ private long writeToTarget(WritableByteChannel target, ByteArrayOutputStream byt
         synchronized (byteWriter) {
             ByteBuffer message = ByteBuffer.wrap(byteWriter.toByteArray());
             while ((target.isOpen()) && (written < byteWriter.size())) {
-                written += target.write(message);
-                if (written == 0 && maxSpin++ < 10) {
+                long nWrite = target.write(message);
+                written += nWrite;
+                if (nWrite == 0 && maxSpin++ < 10) {
                     logger.info("Waiting for writing...");
                     try {
                         byteWriter.wait(1000);

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -215,8 +215,8 @@ public class BoundRequestBuilder extends RequestBuilderBase<BoundRequestBuilder>
          */
         protected String baseURL;
         
-        private BoundRequestBuilder(String reqType) {
-            super(BoundRequestBuilder.class, reqType);
+        private BoundRequestBuilder(String reqType, boolean useRawUrl) {
+            super(BoundRequestBuilder.class, reqType, useRawUrl);
         }
 
         private BoundRequestBuilder(Request prototype) {
@@ -557,7 +557,7 @@ private final static AsyncHttpProvider loadDefaultProvider(String className, Asy
     }
 
     protected BoundRequestBuilder requestBuilder(String reqType, String url) {
-        return new BoundRequestBuilder(reqType).setUrl(url).setSignatureCalculator(signatureCalculator);
+        return new BoundRequestBuilder(reqType, config.isUseRawUrl()).setUrl(url).setSignatureCalculator(signatureCalculator);
     }
 
     protected BoundRequestBuilder requestBuilder(Request prototype) {

File: src/main/java/com/ning/http/client/Request.java
Patch:
@@ -190,4 +190,6 @@ public static interface EntityWriter {
      */
     public String getBodyEncoding();
 
+    public boolean isUseRawUrl();
+
 }

File: src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java
Patch:
@@ -403,7 +403,7 @@ public final static class Builder implements DerivedBuilder {
         private SimpleAHCTransferListener listener = null;
 
         public Builder() {
-            requestBuilder = new RequestBuilder("GET");
+            requestBuilder = new RequestBuilder("GET", false);
         }
 
         private Builder(SimpleAsyncHttpClient client) {

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -215,8 +215,8 @@ public class BoundRequestBuilder extends RequestBuilderBase<BoundRequestBuilder>
          */
         protected String baseURL;
         
-        private BoundRequestBuilder(String reqType) {
-            super(BoundRequestBuilder.class, reqType);
+        private BoundRequestBuilder(String reqType, boolean useRawUrl) {
+            super(BoundRequestBuilder.class, reqType, useRawUrl);
         }
 
         private BoundRequestBuilder(Request prototype) {
@@ -557,7 +557,7 @@ private final static AsyncHttpProvider loadDefaultProvider(String className, Asy
     }
 
     protected BoundRequestBuilder requestBuilder(String reqType, String url) {
-        return new BoundRequestBuilder(reqType).setUrl(url).setSignatureCalculator(signatureCalculator);
+        return new BoundRequestBuilder(reqType, config.isUseRawUrl()).setUrl(url).setSignatureCalculator(signatureCalculator);
     }
 
     protected BoundRequestBuilder requestBuilder(Request prototype) {

File: src/main/java/com/ning/http/client/Request.java
Patch:
@@ -190,4 +190,6 @@ public static interface EntityWriter {
      */
     public String getBodyEncoding();
 
+    public boolean isUseRawUrl();
+
 }

File: src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java
Patch:
@@ -403,7 +403,7 @@ public final static class Builder implements DerivedBuilder {
         private SimpleAHCTransferListener listener = null;
 
         public Builder() {
-            requestBuilder = new RequestBuilder("GET");
+            requestBuilder = new RequestBuilder("GET", false);
         }
 
         private Builder(SimpleAsyncHttpClient client) {

File: src/main/java/com/ning/http/multipart/MultipartBody.java
Patch:
@@ -377,7 +377,7 @@ private FilePart generateClientFilePart(com.ning.http.client.Part part)
     private StringPart generateClientStringpart(com.ning.http.client.Part part) {
         com.ning.http.client.StringPart stringPart = (com.ning.http.client.StringPart) part;
 
-        StringPart currentPart = new StringPart(stringPart.getName(), stringPart.getValue());
+        StringPart currentPart = new StringPart(stringPart.getName(), stringPart.getValue(), stringPart.getCharset());
         return currentPart;
     }
 

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -164,7 +164,7 @@ public boolean remove(Object o) {
 
     private final NettyAsyncHttpProviderConfig asyncHttpProviderConfig;
 
-    private boolean executeConnectAsync = false;
+    private boolean executeConnectAsync = true;
 
     public static final ThreadLocal<Boolean> IN_IO_THREAD = new ThreadLocalBoolean();
 

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -214,7 +214,7 @@ public final static MultipartRequestEntity createMultipartRequestEntity(List<Par
             } else if (part instanceof StringPart) {
                 parts[i] = new com.ning.http.multipart.StringPart(part.getName(),
                         ((StringPart) part).getValue(),
-                        "UTF-8");
+                        ((StringPart) part).getCharset());
             } else if (part instanceof FilePart) {
                 parts[i] = new com.ning.http.multipart.FilePart(part.getName(),
                         ((FilePart) part).getFile(),

File: src/test/java/com/ning/http/client/async/FilePartLargeFileTest.java
Patch:
@@ -67,7 +67,7 @@ public void testPutLargeTextFile()
         AsyncHttpClient client = getAsyncHttpClient(config);
         BoundRequestBuilder rb = client.preparePut(getTargetUrl());
 
-        rb.setBody(largeFile);
+        rb.addBodyPart(new FilePart("test", largeFile, "application/octet-stream" , "UTF-8"));
 
         Response response = rb.execute().get();
         Assert.assertEquals(200, response.getStatusCode());

File: src/test/java/com/ning/http/client/async/AbstractBasicTest.java
Patch:
@@ -19,7 +19,6 @@
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.AsyncHttpProvider;
 import com.ning.http.client.HttpResponseBodyPart;
 import com.ning.http.client.HttpResponseHeaders;
 import com.ning.http.client.HttpResponseStatus;
@@ -71,7 +70,7 @@ public void handle(String pathInContext,
             if (request.getMethod().equalsIgnoreCase("OPTIONS")) {
                 httpResponse.addHeader("Allow","GET,HEAD,POST,OPTIONS,TRACE");
             };
-            
+
             Enumeration<?> e = httpRequest.getHeaderNames();
             String param;
             while (e.hasMoreElements()) {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1107,6 +1107,7 @@ public Object call() throws Exception {
                             return null;
                         }
                     };
+
                     if (future.getKeepAlive() && response.isChunked()) {
                         // We must make sure there is no bytes left before executing the next request.
                         ctx.setAttachment(ac);

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
Patch:
@@ -160,7 +160,7 @@ public boolean offer(String uri, Channel channel) {
             IdleChannel idleChannel = new IdleChannel(uri, channel);
             added = idleConnectionForHost.add(idleChannel);
             if (channel2IdleChannel.put(channel, idleChannel) != null) {
-                log.error("Bas, this channel entry already exists in the connections pool!");
+                log.error("Channel {} already exists in the connections pool!", channel);
             }
         } else {
             log.debug("Maximum number of requests per host reached {} for {}", maxConnectionPerHost, uri);

File: src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -375,7 +375,7 @@ private HttpMethodBase createMethod(HttpClient client, Request request) throws I
         } else if (config.getUserAgent() != null) {
             method.setRequestHeader("User-Agent", config.getUserAgent());
         } else {
-            method.setRequestHeader("User-Agent", AsyncHttpProviderUtils.constructUserAgent(NettyAsyncHttpProvider.class));
+            method.setRequestHeader("User-Agent", AsyncHttpProviderUtils.constructUserAgent(ApacheAsyncHttpProvider.class));
         }
 
         if (config.isCompressionEnabled()) {

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -551,7 +551,7 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
             } else if (config.getUserAgent() != null) {
                 urlConnection.setRequestProperty("User-Agent", config.getUserAgent());
             } else {
-                urlConnection.setRequestProperty("User-Agent", AsyncHttpProviderUtils.constructUserAgent(NettyAsyncHttpProvider.class));
+                urlConnection.setRequestProperty("User-Agent", AsyncHttpProviderUtils.constructUserAgent(JDKAsyncHttpProvider.class));
             }
 
             if (request.getCookies() != null && !request.getCookies().isEmpty()) {

File: src/main/java/com/ning/http/client/Cookie.java
Patch:
@@ -56,11 +56,11 @@ public String getDomain() {
     }
 
     public String getName() {
-        return name;
+        return name == null ? "" : name;
     }
 
     public String getValue() {
-        return value;
+        return value == null ? "" : value;
     }
 
     public String getPath() {

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -400,7 +400,8 @@ public static Cookie parseCookie(String value) {
         String[] fields = value.split(";\\s*");
         String[] cookie = fields[0].split("=");
         String cookieName = cookie[0];
-        String cookieValue = cookie[1];
+        String cookieValue = (cookie.length==1) ? null : cookie[1];
+
         int maxAge = -1;
         String path = null;
         String domain = null;
@@ -414,6 +415,7 @@ public static Cookie parseCookie(String value) {
                 secure = true;
             } else if (fields[j].indexOf('=') > 0) {
                 String[] f = fields[j].split("=");
+                if(f.length==1) continue; // Add protection against null field values
 
                 // favor 'max-age' field over 'expires'
                 if (!maxAgeSet && "max-age".equalsIgnoreCase(f[0])) {

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -418,7 +418,7 @@ public static Cookie parseCookie(String value) {
                 // favor 'max-age' field over 'expires'
                 if (!maxAgeSet && "max-age".equalsIgnoreCase(f[0])) {
                     try {
-                        maxAge = Integer.valueOf(f[1]);
+                        maxAge = Integer.valueOf(removeQuote(f[1]));
                     }
                     catch (NumberFormatException e1) {
                         // ignore failure to parse -> treat as session cookie

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -55,6 +55,9 @@ protected SimpleDateFormat[] initialValue() {
                             new SimpleDateFormat("EEE, dd-MMM-yyyy HH:mm:ss z", Locale.US),
                             new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss Z", Locale.US),
                             new SimpleDateFormat("EEE, dd-MMM-yyyy HH:mm:ss Z", Locale.US),
+                            new SimpleDateFormat("EEE MMM d HH:mm:ss yyyy", Locale.US),  //ASCTIME
+                            new SimpleDateFormat("EEEE, dd-MMM-yy HH:mm:ss zzz", Locale.US), //RFC1036
+                            new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US) // RFC1123
                     };
         }
     };

File: src/main/java/com/ning/http/multipart/MultipartBody.java
Patch:
@@ -3,7 +3,6 @@
 
 import com.ning.http.client.RandomAccessBody;
 
-import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileNotFoundException;

File: src/test/java/com/ning/http/client/async/AuthTimeoutTest.java
Patch:
@@ -90,7 +90,7 @@ public void setUpServer(String auth)
 
         ConstraintSecurityHandler security = new ConstraintSecurityHandler();
         
-        security.setConstraintMappings(Arrays.asList(new ConstraintMapping[]{mapping}), knownRoles);
+        security.setConstraintMappings(new ConstraintMapping[]{mapping}, knownRoles);
         security.setAuthenticator(new BasicAuthenticator());
         security.setLoginService(loginService);
         security.setStrict(false);

File: src/test/java/com/ning/http/client/async/BasicAuthTest.java
Patch:
@@ -107,7 +107,7 @@ public void setUpGlobal() throws Exception {
         knownRoles.add(admin);
 
         ConstraintSecurityHandler security = new ConstraintSecurityHandler();
-        security.setConstraintMappings(Arrays.asList(new ConstraintMapping[]{mapping}), knownRoles);
+        security.setConstraintMappings(new ConstraintMapping[]{mapping}, knownRoles);
         security.setAuthenticator(new BasicAuthenticator());
         security.setLoginService(loginService);
         security.setStrict(false);
@@ -182,7 +182,7 @@ public void handle(String arg0, Request arg1, HttpServletRequest arg2, HttpServl
                 super.handle(arg0, arg1, arg2, arg3);
             }
         };
-        security.setConstraintMappings(Arrays.asList(new ConstraintMapping[]{mapping}), knownRoles);
+        security.setConstraintMappings(new ConstraintMapping[]{mapping}, knownRoles);
         security.setAuthenticator(new DigestAuthenticator());
         security.setLoginService(loginService);
         security.setStrict(true);

File: src/test/java/com/ning/http/client/async/DigestAuthTest.java
Patch:
@@ -87,7 +87,7 @@ public void setUpGlobal() throws Exception {
         knownRoles.add(admin);
 
         ConstraintSecurityHandler security = new ConstraintSecurityHandler();
-        security.setConstraintMappings(Arrays.asList(new ConstraintMapping[]{mapping}), knownRoles);
+        security.setConstraintMappings(new ConstraintMapping[]{mapping}, knownRoles);
         security.setAuthenticator(new DigestAuthenticator());
         security.setLoginService(loginService);
         security.setStrict(false);

File: src/test/java/com/ning/http/client/async/AuthTimeoutTest.java
Patch:
@@ -38,6 +38,7 @@
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.Future;
@@ -88,7 +89,8 @@ public void setUpServer(String auth)
         knownRoles.add(admin);
 
         ConstraintSecurityHandler security = new ConstraintSecurityHandler();
-        security.setConstraintMappings(new ConstraintMapping[]{mapping}, knownRoles);
+        
+        security.setConstraintMappings(Arrays.asList(new ConstraintMapping[]{mapping}), knownRoles);
         security.setAuthenticator(new BasicAuthenticator());
         security.setLoginService(loginService);
         security.setStrict(false);

File: src/test/java/com/ning/http/client/async/BasicAuthTest.java
Patch:
@@ -53,6 +53,7 @@
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.net.URL;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.ExecutionException;
@@ -106,7 +107,7 @@ public void setUpGlobal() throws Exception {
         knownRoles.add(admin);
 
         ConstraintSecurityHandler security = new ConstraintSecurityHandler();
-        security.setConstraintMappings(new ConstraintMapping[]{mapping}, knownRoles);
+        security.setConstraintMappings(Arrays.asList(new ConstraintMapping[]{mapping}), knownRoles);
         security.setAuthenticator(new BasicAuthenticator());
         security.setLoginService(loginService);
         security.setStrict(false);
@@ -181,7 +182,7 @@ public void handle(String arg0, Request arg1, HttpServletRequest arg2, HttpServl
                 super.handle(arg0, arg1, arg2, arg3);
             }
         };
-        security.setConstraintMappings(new ConstraintMapping[]{mapping}, knownRoles);
+        security.setConstraintMappings(Arrays.asList(new ConstraintMapping[]{mapping}), knownRoles);
         security.setAuthenticator(new DigestAuthenticator());
         security.setLoginService(loginService);
         security.setStrict(true);

File: src/test/java/com/ning/http/client/async/DigestAuthTest.java
Patch:
@@ -37,6 +37,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.ExecutionException;
@@ -86,7 +87,7 @@ public void setUpGlobal() throws Exception {
         knownRoles.add(admin);
 
         ConstraintSecurityHandler security = new ConstraintSecurityHandler();
-        security.setConstraintMappings(new ConstraintMapping[]{mapping}, knownRoles);
+        security.setConstraintMappings(Arrays.asList(new ConstraintMapping[]{mapping}), knownRoles);
         security.setAuthenticator(new DigestAuthenticator());
         security.setLoginService(loginService);
         security.setStrict(false);

File: src/main/java/com/ning/http/client/AsyncHttpProvider.java
Patch:
@@ -17,13 +17,12 @@
 
 import java.io.IOException;
 import java.util.Collection;
-import java.util.concurrent.Future;
 
 /**
  * Interface to be used when implementing custom asynchronous I/O HTTP client.
  * By default, the {@link com.ning.http.client.providers.netty.NettyAsyncHttpProvider} is used.
  */
-public interface AsyncHttpProvider<A> {
+public interface AsyncHttpProvider {
 
     /**
      * Execute the request and invoke the {@link AsyncHandler} when the response arrive.

File: src/main/java/com/ning/http/client/HttpContent.java
Patch:
@@ -21,15 +21,15 @@
  * Base class for callback class used by {@link com.ning.http.client.AsyncHandler}
  */
 public class HttpContent {
-    protected final AsyncHttpProvider<?> provider;
+    protected final AsyncHttpProvider provider;
     protected final URI uri;
 
-    protected HttpContent(URI url, AsyncHttpProvider<?> provider) {
+    protected HttpContent(URI url, AsyncHttpProvider provider) {
         this.provider = provider;
         this.uri= url;
     }
 
-    public final AsyncHttpProvider<?> provider() {
+    public final AsyncHttpProvider provider() {
         return provider;
     }
 

File: src/main/java/com/ning/http/client/HttpResponseBodyPart.java
Patch:
@@ -25,7 +25,7 @@
  */
 public abstract class HttpResponseBodyPart extends HttpContent {
 
-    public HttpResponseBodyPart(URI uri, AsyncHttpProvider<?> provider) {
+    public HttpResponseBodyPart(URI uri, AsyncHttpProvider provider) {
         super(uri, provider);
     }
 

File: src/main/java/com/ning/http/client/HttpResponseHeaders.java
Patch:
@@ -24,12 +24,12 @@ public abstract class HttpResponseHeaders extends HttpContent {
 
     private final boolean traillingHeaders;
 
-    public HttpResponseHeaders(URI uri, AsyncHttpProvider<?> provider) {
+    public HttpResponseHeaders(URI uri, AsyncHttpProvider provider) {
         super(uri, provider);
         this.traillingHeaders = false;
     }
 
-    public HttpResponseHeaders(URI uri, AsyncHttpProvider<?> provider, boolean traillingHeaders) {
+    public HttpResponseHeaders(URI uri, AsyncHttpProvider provider, boolean traillingHeaders) {
         super(uri, provider);
         this.traillingHeaders = traillingHeaders;
 

File: src/main/java/com/ning/http/client/HttpResponseStatus.java
Patch:
@@ -23,7 +23,7 @@
  */
 public abstract class HttpResponseStatus extends HttpContent {
 
-    public HttpResponseStatus(URI uri, AsyncHttpProvider<?> provider) {
+    public HttpResponseStatus(URI uri, AsyncHttpProvider provider) {
         super(uri, provider);
     }
 

File: src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -119,7 +119,7 @@
 /**
  * An {@link com.ning.http.client.AsyncHttpProvider} for Apache Http Client 3.1
  */
-public class ApacheAsyncHttpProvider implements AsyncHttpProvider<HttpClient> {
+public class ApacheAsyncHttpProvider implements AsyncHttpProvider {
     private final static Logger logger = LoggerFactory.getLogger(ApacheAsyncHttpProvider.class);
 
     private final AsyncHttpClientConfig config;

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponseBodyPart.java
Patch:
@@ -14,7 +14,6 @@
 
 import com.ning.http.client.AsyncHttpProvider;
 import com.ning.http.client.HttpResponseBodyPart;
-import org.apache.commons.httpclient.HttpClient;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -28,7 +27,7 @@ public class ApacheResponseBodyPart extends HttpResponseBodyPart {
 
     private final byte[] chunk;
 
-    public ApacheResponseBodyPart(URI uri, byte[] chunk, AsyncHttpProvider<HttpClient> provider) {
+    public ApacheResponseBodyPart(URI uri, byte[] chunk, AsyncHttpProvider provider) {
         super(uri, provider);
         this.chunk = chunk;
     }

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponseHeaders.java
Patch:
@@ -16,7 +16,6 @@
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
 import com.ning.http.client.HttpResponseHeaders;
 import org.apache.commons.httpclient.Header;
-import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpMethodBase;
 
 import java.net.URI;
@@ -29,7 +28,7 @@ public class ApacheResponseHeaders extends HttpResponseHeaders {
     private final HttpMethodBase method;
     private final FluentCaseInsensitiveStringsMap headers;
 
-    public ApacheResponseHeaders(URI uri, HttpMethodBase method, AsyncHttpProvider<HttpClient> provider) {
+    public ApacheResponseHeaders(URI uri, HttpMethodBase method, AsyncHttpProvider provider) {
         super(uri, provider, false);
         this.method = method;
         headers = computerHeaders();

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponseStatus.java
Patch:
@@ -14,7 +14,6 @@
 
 import com.ning.http.client.AsyncHttpProvider;
 import com.ning.http.client.HttpResponseStatus;
-import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.HttpMethodBase;
 
 import java.net.URI;
@@ -26,7 +25,7 @@ public class ApacheResponseStatus extends HttpResponseStatus {
 
     private final HttpMethodBase method;
 
-    public ApacheResponseStatus(URI uri, HttpMethodBase method, AsyncHttpProvider<HttpClient> provider) {
+    public ApacheResponseStatus(URI uri, HttpMethodBase method, AsyncHttpProvider provider) {
         super(uri, provider);
         this.method = method;
     }

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -81,7 +81,7 @@
 
 import static com.ning.http.util.AsyncHttpProviderUtils.DEFAULT_CHARSET;
 
-public class JDKAsyncHttpProvider implements AsyncHttpProvider<HttpURLConnection> {
+public class JDKAsyncHttpProvider implements AsyncHttpProvider {
     private final static Logger logger = LoggerFactory.getLogger(JDKAsyncHttpProvider.class);
 
     private final static String NTLM_DOMAIN = "http.auth.ntlm.domain";

File: src/main/java/com/ning/http/client/providers/jdk/ResponseBodyPart.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.io.IOException;
 import java.io.OutputStream;
-import java.net.HttpURLConnection;
 import java.net.URI;
 import java.nio.ByteBuffer;
 
@@ -28,7 +27,7 @@ public class ResponseBodyPart extends HttpResponseBodyPart {
 
     private final byte[] chunk;
 
-    public ResponseBodyPart(URI uri, byte[] chunk, AsyncHttpProvider<HttpURLConnection> provider) {
+    public ResponseBodyPart(URI uri, byte[] chunk, AsyncHttpProvider provider) {
         super(uri, provider);
         this.chunk = chunk;
     }

File: src/main/java/com/ning/http/client/providers/jdk/ResponseHeaders.java
Patch:
@@ -29,7 +29,7 @@ public class ResponseHeaders extends HttpResponseHeaders {
     private final HttpURLConnection urlConnection;
     private final FluentCaseInsensitiveStringsMap headers;
 
-    public ResponseHeaders(URI uri, HttpURLConnection urlConnection, AsyncHttpProvider<HttpURLConnection> provider) {
+    public ResponseHeaders(URI uri, HttpURLConnection urlConnection, AsyncHttpProvider provider) {
         super(uri, provider, false);
         this.urlConnection = urlConnection;
         headers = computerHeaders();

File: src/main/java/com/ning/http/client/providers/jdk/ResponseStatus.java
Patch:
@@ -26,7 +26,7 @@ public class ResponseStatus extends HttpResponseStatus {
 
     private final HttpURLConnection urlConnection;
 
-    public ResponseStatus(URI uri, HttpURLConnection urlConnection, AsyncHttpProvider<HttpURLConnection> provider) {
+    public ResponseStatus(URI uri, HttpURLConnection urlConnection, AsyncHttpProvider provider) {
         super(uri, provider);
         this.urlConnection = urlConnection;
     }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -124,7 +124,7 @@
 import static com.ning.http.util.AsyncHttpProviderUtils.DEFAULT_CHARSET;
 import static org.jboss.netty.channel.Channels.pipeline;
 
-public class NettyAsyncHttpProvider extends SimpleChannelUpstreamHandler implements AsyncHttpProvider<HttpResponse> {
+public class NettyAsyncHttpProvider extends SimpleChannelUpstreamHandler implements AsyncHttpProvider {
     private final static String HTTP_HANDLER = "httpHandler";
     final static String SSL_HANDLER = "sslHandler";
     private final static String HTTPS = "https";

File: src/main/java/com/ning/http/client/providers/netty/ResponseBodyPart.java
Patch:
@@ -36,13 +36,13 @@ public class ResponseBodyPart extends HttpResponseBodyPart {
     private final HttpResponse response;
     private final AtomicReference<byte[]> bytes = new AtomicReference(null);
 
-    public ResponseBodyPart(URI uri, HttpResponse response, AsyncHttpProvider<HttpResponse> provider) {
+    public ResponseBodyPart(URI uri, HttpResponse response, AsyncHttpProvider provider) {
         super(uri, provider);
         this.chunk = null;
         this.response = response;
     }
 
-    public ResponseBodyPart(URI uri, HttpResponse response, AsyncHttpProvider<HttpResponse> provider, HttpChunk chunk) {
+    public ResponseBodyPart(URI uri, HttpResponse response, AsyncHttpProvider provider, HttpChunk chunk) {
         super(uri, provider);
         this.chunk = chunk;
         this.response = response;

File: src/main/java/com/ning/http/client/providers/netty/ResponseHeaders.java
Patch:
@@ -32,14 +32,14 @@ public class ResponseHeaders extends HttpResponseHeaders {
     private final HttpResponse response;
     private final FluentCaseInsensitiveStringsMap headers;
 
-    public ResponseHeaders(URI uri, HttpResponse response, AsyncHttpProvider<HttpResponse> provider) {
+    public ResponseHeaders(URI uri, HttpResponse response, AsyncHttpProvider provider) {
         super(uri, provider, false);
         this.trailingHeaders = null;
         this.response = response;
         headers = computerHeaders();
     }
 
-    public ResponseHeaders(URI uri, HttpResponse response, AsyncHttpProvider<HttpResponse> provider, HttpChunkTrailer traillingHeaders) {
+    public ResponseHeaders(URI uri, HttpResponse response, AsyncHttpProvider provider, HttpChunkTrailer traillingHeaders) {
         super(uri, provider, true);
         this.trailingHeaders = traillingHeaders;
         this.response = response;

File: src/main/java/com/ning/http/client/providers/netty/ResponseStatus.java
Patch:
@@ -29,7 +29,7 @@ public class ResponseStatus extends HttpResponseStatus {
 
     private final HttpResponse response;
 
-    public ResponseStatus(URI uri, HttpResponse response, AsyncHttpProvider<HttpResponse> provider) {
+    public ResponseStatus(URI uri, HttpResponse response, AsyncHttpProvider provider) {
         super(uri, provider);
         this.response = response;
     }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1824,8 +1824,7 @@ public synchronized void run() {
                 this.channel = null;
             }
 
-            if (this.nettyResponseFuture != null
-                    && (this.nettyResponseFuture.isDone() || this.nettyResponseFuture.isCancelled())) {
+            if (this.nettyResponseFuture == null || this.nettyResponseFuture.isDone() || this.nettyResponseFuture.isCancelled()) {
                 cancel(true);
             }
         }

File: src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
Patch:
@@ -68,7 +68,7 @@ enum STATE {
     private HttpResponse httpResponse;
     private final AtomicReference<ExecutionException> exEx = new AtomicReference<ExecutionException>();
     private final AtomicInteger redirectCount = new AtomicInteger();
-    private Future<?> reaperFuture;
+    private volatile Future<?> reaperFuture;
     private final AtomicBoolean inAuth = new AtomicBoolean(false);
     private final AtomicBoolean statusReceived = new AtomicBoolean(false);
     private final AtomicLong touch = new AtomicLong(System.currentTimeMillis());

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
Patch:
@@ -104,6 +104,7 @@ public String toString() {
     }
 
     public void abort(Throwable t) {
+        exception.set(t);        
         if (innerFuture != null) {
             innerFuture.cancel(true);
         }
@@ -115,8 +116,6 @@ public void abort(Throwable t) {
         if (reaperFuture != null) {
             reaperFuture.cancel(true);
         }
-
-        exception.set(t);
         if (!timedOut.get() && !cancelled.get()) {
             try {
                 asyncHandler.onThrowable(t);

File: src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
Patch:
@@ -64,10 +64,10 @@ public void done(Callable callable) {
     }
 
     public void abort(Throwable t) {
+        exception.set(t);        
         if (innerFuture != null) {
             innerFuture.cancel(true);
         }
-        exception.set(t);
         if (!timedOut.get() && !cancelled.get()) {
             try {
                 asyncHandler.onThrowable(t);

File: src/test/java/com/ning/http/client/async/Relative302Test.java
Patch:
@@ -128,7 +128,6 @@ private static int getPort(URI uri) {
         return port;
     }
 
-    // TODO: Netty Only.
     @Test(groups = {"standalone", "default_provider"})
     public void redirected302InvalidTest() throws Throwable {
         isSet.getAndSet(false);

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -475,7 +475,7 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                 host = request.getVirtualHost();
             }
 
-            if (uri.getPort() == -1 && request.getVirtualHost() != null) {
+            if (uri.getPort() == -1 || request.getVirtualHost() != null) {
                 urlConnection.setRequestProperty("Host", host);
             } else {
                 urlConnection.setRequestProperty("Host", host + ":" + uri.getPort());

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -179,7 +179,8 @@ private HttpURLConnection createUrlConnection(Request request) throws IOExceptio
 
         HttpURLConnection urlConnection = null;
         if (proxy == null) {
-            urlConnection = (HttpURLConnection) AsyncHttpProviderUtils.createUri(request.getUrl()).toURL().openConnection();
+            urlConnection =
+                (HttpURLConnection) AsyncHttpProviderUtils.createUri( request.getUrl() ).toURL().openConnection( Proxy.NO_PROXY );
         } else {
             urlConnection = (HttpURLConnection) AsyncHttpProviderUtils.createUri(request.getUrl()).toURL().openConnection(proxy);
         }

File: src/test/java/com/ning/http/client/async/BodyDeferringAsyncHandlerTest.java
Patch:
@@ -157,7 +157,7 @@ public void deferredSimple() throws IOException, ExecutionException,
         client.close();
     }
 
-    @Test(groups = { "standalone", "default_provider" }, enabled = false)
+    @Test(groups = { "standalone", "default_provider" }, enabled = true)
     public void deferredSimpleWithFailure() throws IOException,
             ExecutionException, TimeoutException, InterruptedException {
         AsyncHttpClient client = getAsyncHttpClient(getAsyncHttpClientConfig());

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -474,7 +474,7 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                 host = request.getVirtualHost();
             }
 
-            if (uri.getPort() == -1) {
+            if (uri.getPort() == -1 && request.getVirtualHost() != null) {
                 urlConnection.setRequestProperty("Host", host);
             } else {
                 urlConnection.setRequestProperty("Host", host + ":" + uri.getPort());

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -508,6 +508,8 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
         if (host != null) {
             if (uri.getPort() == -1) {
                 nettyRequest.setHeader(HttpHeaders.Names.HOST, host);
+            } else if (request.getVirtualHost() != null) {
+                nettyRequest.setHeader(HttpHeaders.Names.HOST, host);
             } else {
                 nettyRequest.setHeader(HttpHeaders.Names.HOST, host + ":" + uri.getPort());
             }

File: src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -810,7 +810,7 @@ public void asyncRequestVirtualServerPOSTTest() throws Throwable {
                 .setUrl(getTargetUrl())
                 .setHeaders(h)
                 .setParameters(m)
-                .setVirtualHost("localhost")
+                .setVirtualHost("localhost:" + port1)
                 .build();
 
         Response response = n.executeRequest(request, new AsyncCompletionHandlerAdapter()).get();

File: src/test/java/com/ning/http/client/async/BodyDeferringAsyncHandlerTest.java
Patch:
@@ -157,7 +157,7 @@ public void deferredSimple() throws IOException, ExecutionException,
         client.close();
     }
 
-    @Test(groups = { "standalone", "default_provider" }, enabled = false)
+    @Test(groups = { "standalone", "default_provider" }, enabled = true)
     public void deferredSimpleWithFailure() throws IOException,
             ExecutionException, TimeoutException, InterruptedException {
         AsyncHttpClient client = getAsyncHttpClient(getAsyncHttpClientConfig());

File: src/main/java/com/ning/http/client/providers/netty/spnego/SpnegoEngine.java
Patch:
@@ -103,7 +103,7 @@ public String generateToken(String server) throws Throwable {
             boolean tryKerberos = false;
             try {
                 GSSManager manager = GSSManager.getInstance();
-                GSSName serverName = manager.createName("HTTP/" + server, null);
+                GSSName serverName = manager.createName("HTTP@" + server, GSSName.NT_HOSTBASED_SERVICE);
                 gssContext = manager.createContext(
                         serverName.canonicalize(negotiationOid), negotiationOid, null,
                         GSSContext.DEFAULT_LIFETIME);
@@ -126,7 +126,7 @@ public String generateToken(String server) throws Throwable {
                 log.debug("Using Kerberos MECH {}", KERBEROS_OID);
                 negotiationOid = new Oid(KERBEROS_OID);
                 GSSManager manager = GSSManager.getInstance();
-                GSSName serverName = manager.createName("HTTP/" + server, null);
+                GSSName serverName = manager.createName("HTTP@" + server, GSSName.NT_HOSTBASED_SERVICE);
                 gssContext = manager.createContext(
                         serverName.canonicalize(negotiationOid), negotiationOid, null,
                         GSSContext.DEFAULT_LIFETIME);

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class NettyConnectionsPool implements ConnectionsPool<String, Channel> {
 
-    private final static Logger log = LoggerFactory.getLogger(NettyAsyncHttpProvider.class);
+    private final static Logger log = LoggerFactory.getLogger(NettyConnectionsPool.class);
     private final ConcurrentHashMap<String, ConcurrentLinkedQueue<IdleChannel>> connectionsPool = new ConcurrentHashMap<String, ConcurrentLinkedQueue<IdleChannel>>();
     private final ConcurrentHashMap<Channel, IdleChannel> channel2IdleChannel = new ConcurrentHashMap<Channel, IdleChannel>();
     private final AtomicBoolean isClosed = new AtomicBoolean(false);

File: src/test/java/com/ning/http/client/async/RemoteSiteTest.java
Patch:
@@ -254,7 +254,7 @@ public Response onCompleted() throws Exception {
             }
         }).get(10, TimeUnit.SECONDS);
         assertNotNull(response);
-        assertEquals(response.getResponseBody().length(), 3876);
+        assertEquals(response.getResponseBody().length(), 3873);
     }
 
 }

File: src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -530,7 +530,7 @@ public T call() {
                         if (byteToRead > 0) {
                             int minBytes = Math.min(8192, byteToRead);
                             byte[] bytes = new byte[minBytes];
-                            int leftBytes = minBytes < 8192 ? 0 : byteToRead;
+                            int leftBytes = minBytes < 8192 ? minBytes : byteToRead;
                             int read = 0;
                             while (leftBytes > -1) {
 

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -336,7 +336,7 @@ public T call() throws Exception {
                     if (byteToRead > 0) {
                         int minBytes = Math.min(8192, byteToRead);
                         byte[] bytes = new byte[minBytes];
-                        int leftBytes = minBytes < 8192 ? 0 : byteToRead;
+                        int leftBytes = minBytes < 8192 ? minBytes : byteToRead;
                         int read = 0;
                         while (leftBytes > -1) {
 

File: src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
Patch:
@@ -207,7 +207,7 @@ public V get(long l, TimeUnit tu) throws InterruptedException, TimeoutException,
                     } catch (Throwable t) {
                         logger.debug("asyncHandler.onThrowable", t);
                     } finally {
-                        throw te;
+                        throw new ExecutionException(te);
                     }
                 }
             }

File: src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
Patch:
@@ -275,7 +275,9 @@ public final void done(Callable callable) {
     }
 
     public final void abort(final Throwable t) {
-        if (reaperFuture != null) reaperFuture.cancel(true);
+        if (reaperFuture != null && !reaperFuture.isCancelled() && !reaperFuture.isDone()) {
+            reaperFuture.cancel(true);
+        }
 
         if (isDone.get() || isCancelled.get()) return;
 

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -298,7 +298,6 @@ public T call() throws Exception {
                             .parseWWWAuthenticateHeader(wwwAuth)
                             .setUri(URI.create(request.getUrl()).getPath())
                             .setMethodName(request.getMethod())
-                            .setScheme(realm.getAuthScheme())
                             .setUsePreemptiveAuth(true)
                             .build();
                     RequestBuilder builder = new RequestBuilder(request);

File: src/test/java/com/ning/http/client/async/netty/NettyBasicAuthTest.java
Patch:
@@ -21,7 +21,7 @@ public class NettyBasicAuthTest extends BasicAuthTest {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.nettyProvider(config);
+        return ProviderUtil.jdkProvider(config);
     }
     
 }

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -530,6 +530,8 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                         jdkNtlmDomain = System.getProperty(NTLM_DOMAIN);
                         System.setProperty(NTLM_DOMAIN, realm.getDomain());
                         break;
+                    case NONE:
+                        break;
                     default:
                         throw new IllegalStateException(String.format("Invalid Authentication %s", realm.toString()));
                 }

File: src/main/java/com/ning/http/client/listenable/AbstractListenableFuture.java
Patch:
@@ -63,7 +63,6 @@ public ListenableFuture<V> addListener(Runnable listener, Executor exec) {
     /*
     * Override the done method to execute the execution list.
     */
-
     protected void done() {
         executionList.run();
     }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1745,7 +1745,7 @@ public synchronized void run() {
                 return;
             }
 
-            if (this.nettyResponseFuture != null && this.nettyResponseFuture.hasExpired()) {
+            if (this.nettyResponseFuture != null && this.nettyResponseFuture.hasExpired() && !this.nettyResponseFuture.isDone() && !this.nettyResponseFuture.isCancelled()) {
                 log.debug("Request Timeout expired for {}\n", this.nettyResponseFuture);
 
                 int requestTimeout = config.getRequestTimeoutInMs();
@@ -1754,7 +1754,7 @@ public synchronized void run() {
                     requestTimeout = p.getRequestTimeoutInMs();
                 }
 
-                closeChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));
+                finishChannel(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));
                 abort(this.nettyResponseFuture, new TimeoutException(String.format("No response received after %s", requestTimeout)));
 
                 this.nettyResponseFuture = null;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1746,8 +1746,8 @@ public synchronized void run() {
                 if (p != null && p.getRequestTimeoutInMs() != -1) {
                     requestTimeout = p.getRequestTimeoutInMs();
                 }
-                abort(this.nettyResponseFuture, new TimeoutException(String.format("No response received after %s", requestTimeout)));
                 markChannelNotReadable(channel.getPipeline().getContext(NettyAsyncHttpProvider.class));
+                abort(this.nettyResponseFuture, new TimeoutException(String.format("No response received after %s", requestTimeout)));
 
                 this.nettyResponseFuture = null;
                 this.channel = null;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -868,9 +868,6 @@ protected static int requestTimeout(AsyncHttpClientConfig config, PerRequestConf
     }
 
     private void closeChannel(final ChannelHandlerContext ctx) {
-        if (trackConnections && openChannels.contains(ctx.getChannel())) {
-            maxConnections.decrementAndGet();
-        }
         connectionsPool.removeAll(ctx.getChannel());
         finishChannel(ctx);
     }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -789,7 +789,7 @@ private <T> ListenableFuture<T> doConnect(final Request request, final AsyncHand
             try {
                 asyncHandler.onThrowable(ex);   
             } catch (Throwable t) {
-                log.warn("asyncHandler.onThrowable",t);
+                log.warn("!connectionsPool.canCacheConnection()",t);
             }
             throw ex;
         }

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProviderConfig.java
Patch:
@@ -20,8 +20,9 @@
 
 public class JDKAsyncHttpProviderConfig implements AsyncHttpProviderConfig<String,String> {
 
-    private final ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<String, String>();
+    public static final String FORCE_RESPONSE_BUFFERING = "bufferResponseInMemory";
 
+    private final ConcurrentHashMap<String, String> properties = new ConcurrentHashMap<String, String>();
 
     public AsyncHttpProviderConfig addProperty(String name, String value) {
         properties.put(name, value);

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1102,7 +1102,7 @@ public void messageReceived(final ChannelHandlerContext ctx, MessageEvent e) thr
 
                             log.debug("Redirecting to {}", newUrl);
 
-                            if (future.getKeepAlive()) {
+                            if (response.isChunked()) {
                                 drainChannel(ctx, future, initialConnectionUri);
                             } else {
                                 closeChannel(ctx);

File: src/main/java/com/ning/http/util/CleanupChannelGroup.java
Patch:
@@ -77,6 +77,7 @@ public ChannelGroupFuture close() {
                 return super.close();
             } else {
                 logger.debug("CleanupChannelGroup Already closed");
+                return null;
             }
         } finally {
             this.lock.writeLock().unlock();

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1310,6 +1310,7 @@ public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws
 
         if (ctx.getAttachment() instanceof NettyResponseFuture<?>) {
             NettyResponseFuture<?> future = (NettyResponseFuture<?>) ctx.getAttachment();
+            future.touch();
 
             if (config.getIOExceptionFilters().size() > 0) {
                 FilterContext fc = new FilterContext.FilterContextBuilder().asyncHandler(future.getAsyncHandler())

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1216,6 +1216,7 @@ private void replayRequest(final NettyResponseFuture<?> future, FilterContext fc
         final Request newRequest = fc.getRequest();
         future.setAsyncHandler(fc.getAsyncHandler());
         future.setState(NettyResponseFuture.STATE.NEW);
+        future.touch();
 
         log.debug("\n\nReplayed Request {}\n", newRequest);
 

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectListener.java
Patch:
@@ -27,7 +27,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.net.ssl.SSLException;
 import java.io.IOException;
 import java.net.ConnectException;
 import java.net.URI;
@@ -91,6 +90,7 @@ public final void operationComplete(ChannelFuture f) throws Exception {
 
     public static class Builder<T> {
         private final AsyncHttpClientConfig config;
+        
         private final Request request;
         private final AsyncHandler<T> asyncHandler;
         private NettyResponseFuture<T> future;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -92,6 +92,7 @@
 import org.slf4j.LoggerFactory;
 
 import javax.net.ssl.SSLEngine;
+import javax.net.ssl.SSLException;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -1466,7 +1467,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)
                 if (abortOnReadCloseException(cause) || abortOnWriteCloseException(cause)) {
                     log.debug("Trying to recover from dead Channel: {}", channel);
                     return;
-                }
+                }                             
             } else if (ctx.getAttachment() instanceof AsyncCallable) {
                 future = ((AsyncCallable) ctx.getAttachment()).future();
             }

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectListener.java
Patch:
@@ -59,11 +59,11 @@ public NettyResponseFuture<T> future() {
 
     public final void operationComplete(ChannelFuture f) throws Exception {
         if (f.isSuccess()) {
+            f.getChannel().getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(future);
             if (!handshakeDone.getAndSet(true) && f.getChannel().getPipeline().get(NettyAsyncHttpProvider.SSL_HANDLER) != null) {
                 ((SslHandler) f.getChannel().getPipeline().get(NettyAsyncHttpProvider.SSL_HANDLER)).handshake().addListener(this);              
                 return;
             }
-            f.getChannel().getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(future);
             future.provider().writeRequest(f.getChannel(), config, future, nettyRequest);
         } else {
             Throwable cause = f.getCause();

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -40,6 +40,9 @@
  * The cookies's handling code is from the Netty framework.
  */
 public class AsyncHttpProviderUtils {
+
+    public final static String DEFAULT_CHARSET = "ISO-8859-1";
+
     private final static String BODY_NOT_COMPUTED = "Response's body hasn't been computed by your AsyncHandler.";
 
     private final static SimpleDateFormat[] RFC2822_LIKE_DATE_FORMATS =

File: src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
Patch:
@@ -368,7 +368,7 @@ public int getMaxRequestRetry() {
 
     /**
      * Return true is SSL connection polling is enabled. Default is true.
-     * @return
+     * @return true is enabled.
      */
     public boolean isSslConnectionPoolEnabled() {
         return allowSslConnectionPool;

File: src/main/java/com/ning/http/client/BodyDeferringAsyncHandler.java
Patch:
@@ -177,7 +177,7 @@ public Response onCompleted() throws IOException {
      * error! Also, please not that this method might return <code>null</code>
      * in case of some errors.
      * 
-     * @return
+     * @return a {@link Response}
      * @throws InterruptedException
      */
     public Response getResponse() throws InterruptedException, IOException {
@@ -234,7 +234,7 @@ public void close() throws IOException {
          * <code>null</code>. See
          * {@link BodyDeferringAsyncHandler#getResponse()} method for details.
          * 
-         * @return
+         * @return a {@link Response}
          * @throws InterruptedException
          */
         public Response getAsapResponse() throws InterruptedException,
@@ -246,7 +246,7 @@ public Response getAsapResponse() throws InterruptedException,
          * Delegates to <code>Future<Response>#get()</code> method. Will block
          * as long as complete response arrives.
          * 
-         * @return
+         * @return a {@link Response}
          * @throws InterruptedException
          * @throws ExecutionException
          */

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
Patch:
@@ -79,7 +79,7 @@ public boolean offer(String uri, Channel channel) {
                 log.debug("ConnectionsPool increment totalConnections {}", trackedIdleConnections.size());
             }
         } else {
-            log.debug("Maximum connections per hosts reached {}", config.getMaxConnectionPerHost());
+            log.debug("Maximum number of requests per host reached {} for {}", config.getMaxConnectionPerHost(), uri);
             added = false;
         }
         return added;

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
Patch:
@@ -74,7 +74,7 @@ public String getResponseBody() throws IOException {
 
     public String getResponseBody(String charset) throws IOException {
         String contentType = getContentType();
-        if (contentType != null) {
+        if (contentType != null && charset == null) {
             charset = AsyncHttpProviderUtils.parseCharset(contentType);
         }
 
@@ -113,7 +113,7 @@ public String getResponseBodyExcerpt(int maxLength) throws IOException {
     
     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {
         String contentType = getContentType();
-        if (contentType != null) {
+        if (contentType != null && charset == null) {
             charset = AsyncHttpProviderUtils.parseCharset(contentType);
         }
 

File: src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
Patch:
@@ -77,7 +77,7 @@ public String getResponseBody() throws IOException {
 
     public String getResponseBody(String charset) throws IOException {
         String contentType = getContentType();
-        if (contentType != null) {
+        if (contentType != null && charset == null) {
             charset = AsyncHttpProviderUtils.parseCharset(contentType);
         }
 
@@ -166,7 +166,7 @@ public String getResponseBodyExcerpt(int maxLength) throws IOException {
 
     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {
         String contentType = getContentType();
-        if (contentType != null) {
+        if (contentType != null && charset == null) {
             charset = AsyncHttpProviderUtils.parseCharset(contentType);
         }
 

File: src/main/java/com/ning/http/client/providers/netty/NettyResponse.java
Patch:
@@ -80,7 +80,7 @@ public String getResponseBody() throws IOException {
 
     public String getResponseBody(String charset) throws IOException {
         String contentType = getContentType();
-        if (contentType != null) {
+        if (contentType != null && charset == null) {
             charset = AsyncHttpProviderUtils.parseCharset(contentType);
         }
 
@@ -124,7 +124,7 @@ public String getResponseBodyExcerpt(int maxLength) throws IOException {
 
     public String getResponseBodyExcerpt(int maxLength, String charset) throws IOException {
         String contentType = getContentType();
-        if (contentType != null) {
+        if (contentType != null && charset == null) {
             charset = AsyncHttpProviderUtils.parseCharset(contentType);
         }
 

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -874,7 +874,7 @@ public void messageReceived(final ChannelHandlerContext ctx, MessageEvent e) thr
 
         IN_IO_THREAD.set(Boolean.TRUE);
         if (ctx.getAttachment() == null) {
-            log.warn("ChannelHandlerContext wasn't having any attachment");
+            log.debug("ChannelHandlerContext wasn't having any attachment");
         }
 
         if (ctx.getAttachment() instanceof DiscardEvent) {

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectListener.java
Patch:
@@ -78,7 +78,7 @@ public final void operationComplete(ChannelFuture f) throws Exception {
                 }
             }
 
-            logger.warn("Failed to recover from exception: {} with channel {}", cause, f.getChannel());
+            logger.debug("Failed to recover from exception: {} with channel {}", cause, f.getChannel());
 
             ConnectException e = new ConnectException(f.getCause() != null ? cause.getMessage() : future.getURI().toString());
             if (cause != null) {

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponseFuture.java
Patch:
@@ -13,8 +13,8 @@
 package com.ning.http.client.providers.apache;
 
 import com.ning.http.client.AsyncHandler;
-import com.ning.http.client.FutureImpl;
 import com.ning.http.client.Request;
+import com.ning.http.client.listenable.AbstractListenableFuture;
 import org.apache.commons.httpclient.HttpMethodBase;
 
 import java.util.concurrent.Callable;
@@ -28,7 +28,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 
 
-public class ApacheResponseFuture<V> implements FutureImpl<V> {
+public class ApacheResponseFuture<V> extends AbstractListenableFuture<V> {
 
     private Future<V> innerFuture;
     private final AsyncHandler<V> asyncHandler;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -181,7 +181,7 @@ public NettyAsyncHttpProvider(AsyncHttpClientConfig config) {
             socketChannelFactory = new OioClientSocketChannelFactory(config.executorService());
         } else {
             socketChannelFactory = new NioClientSocketChannelFactory(
-                    Executors.newCachedThreadPool(),
+                    Executors.newFixedThreadPool(100),
                     config.executorService());
         }
         plainBootstrap = new ClientBootstrap(socketChannelFactory);

File: src/test/java/com/ning/http/client/async/ListenableFutureTest.java
Patch:
@@ -35,7 +35,7 @@
 public abstract class ListenableFutureTest extends AbstractBasicTest {
 
     @Test(groups = {"standalone", "default_provider"})
-    public void testPutEmptyBody() throws Throwable {
+    public void testListenableFuture() throws Throwable {
         final AtomicBoolean executed = new AtomicBoolean(false);
         AsyncHttpClient ahc = getAsyncHttpClient(null);
         Response response = ((ListenableFuture<Response>)ahc.prepareGet(getTargetUrl()).execute()).addListener(new Runnable(){

File: src/main/java/com/ning/http/client/providers/jdk/JDKResponse.java
Patch:
@@ -155,7 +155,7 @@ public int read() throws IOException {
                 active = parts[currentPos].getBodyPartBytes();
             }
 
-            return active[bytePos];
+            return active[bytePos] & 0xFF;
         }
     }
 

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -320,8 +320,7 @@ protected final <T> void writeRequest(final Channel channel,
                     abort(future, new ConnectException());
                     return;
                 } else {
-                    log.error("Channel is in close state {} and cannot be recovered", channel);
-                    abort(future, new ClosedChannelException());                    
+                    log.debug("Request {} has been recovered", nettyRequest);
                     return;
                 }
             }

File: src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
Patch:
@@ -221,6 +221,8 @@ V getContent() throws ExecutionException {
         }
 
         V update = content.get();
+        // No more retry
+        currentRetry.set(maxRetry);
         if (exEx.get() == null && !contentProcessed.getAndSet(true)) {
             try {
                 update = asyncHandler.onCompleted();

File: src/test/java/com/ning/http/client/async/TransferListenerTest.java
Patch:
@@ -191,7 +191,7 @@ public void onThrowable(Throwable t) {
         c.close();
     }
 
-    @Test(groups = {"standalone", "default_provider"}, enabled = false)
+    @Test(groups = {"standalone", "default_provider"})
     public void basicPutBodyTest() throws Throwable {
         AsyncHttpClient c = new AsyncHttpClient();
 

File: src/test/java/com/ning/http/client/async/netty/NettyZeroCopyFileTest.java
Patch:
@@ -16,8 +16,9 @@
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ProviderUtil;
 import com.ning.http.client.async.TransferListenerTest;
+import com.ning.http.client.async.ZeroCopyFileTest;
 
-public class NettyZeroCopyFileTest extends TransferListenerTest {
+public class NettyZeroCopyFileTest extends ZeroCopyFileTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);

File: src/main/java/com/ning/http/client/ProxyServer.java
Patch:
@@ -51,7 +51,7 @@ public String toString() {
     private final String principal;
     private final String password;
     private int port;
-    private String ntlmDomain;
+    private String ntlmDomain = System.getProperty("http.auth.ntlm.domain", "");
 
     public ProxyServer(final Protocol protocol, final String host, final int port, String principal, String password) {
         this.protocol = protocol;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -828,15 +828,15 @@ protected static int requestTimeout(AsyncHttpClientConfig config, PerRequestConf
     protected void channelIdle(ChannelHandlerContext ctx, IdleState state, long lastActivityTimeMillis) throws Exception {
 
         if (log.isDebugEnabled()) {
-            log.debug("Idle state {}, last activity {}ms ago",
+            log.debug("Idle state {}, last activity {} ms ago",
                     new Object[] {state, System.currentTimeMillis() - lastActivityTimeMillis});
         }
         if (state.equals(IdleState.READER_IDLE)) {
             return;
         }
 
         Object attachment = ctx.getAttachment();
-        
+
         if (attachment != null) {
             if (NettyResponseFuture.class.isAssignableFrom(attachment.getClass())) {
                 NettyResponseFuture<?> future = (NettyResponseFuture<?>) attachment;
@@ -846,7 +846,7 @@ protected void channelIdle(ChannelHandlerContext ctx, IdleState state, long last
                 }
     
                 abort(future, new TimeoutException("No response received. Connection timed out after "
-                        + config.getIdleConnectionTimeoutInMs()));
+                        + config.getIdleConnectionInPoolTimeoutInMs()));
             }
         } else {
           log.warn("null attachment on ChannelHandlerContext {}", ctx);

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1268,7 +1268,7 @@ private void abort(NettyResponseFuture<?> future, Throwable t) {
             openChannels.remove(future.channel());
         }
 
-        log.debug("abording Future {}", future);
+        log.debug("aborting Future {}", future);
         log.debug(t.getMessage(), t);
 
         future.abort(t);

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectListener.java
Patch:
@@ -120,6 +120,9 @@ public NettyConnectListener<T> build(final URI uri) throws IOException {
             HttpRequest nettyRequest = NettyAsyncHttpProvider.buildRequest(config, request, uri, true, buffer);
             if (future == null) {
                 future = NettyAsyncHttpProvider.newFuture(uri, request, asyncHandler, nettyRequest, config, provider);
+            } else {
+                future.setNettyRequest(nettyRequest);
+                future.setRequest(request);
             }
             return new NettyConnectListener<T>(config, future, nettyRequest);
         }

File: src/test/java/com/ning/http/client/async/netty/NettyBasicAuthTest.java
Patch:
@@ -23,4 +23,5 @@ public class NettyBasicAuthTest extends BasicAuthTest {
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);
     }
+    
 }

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
Patch:
@@ -65,6 +65,7 @@ public boolean offer(String uri, Channel connection) {
                 added = pooledConnectionForHost.add(connection);
                 if (added) {
                     totalConnections.incrementAndGet();
+                    log.debug("ConnectionsPool increment totalConnections {}", totalConnections);
                 }
             } else {
                 log.debug("Maximum connections per hosts reached {}", config.getMaxConnectionPerHost());
@@ -95,6 +96,7 @@ public Channel poll(String uri) {
                     channel = null;
                 } else {
                     totalConnections.decrementAndGet();
+                    log.debug("ConnectionsPool decrementAndGet totalConnections {}", totalConnections);
                 }
             }
         }
@@ -114,7 +116,7 @@ public boolean removeAll(Channel connection) {
                 if (removed) {
                     log.debug("Removing uri: {} for channel {}", e.getKey(), e.getValue());
                     totalConnections.decrementAndGet();
-
+                    log.debug("ConnectionsPool decrementAndGet totalConnections {}", totalConnections);                                        
                 }
                 isRemoved |= removed;
             }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -674,7 +674,9 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
          * Netty doesn't support NTLM, so fall back to the JDK in that case.
          */
         Realm realm = request.getRealm() != null ? request.getRealm() : config.getRealm();
-        if (realm != null && realm.getUsePreemptiveAuth() && realm.getScheme() == Realm.AuthScheme.NTLM) {
+        ProxyServer proxyServer = request.getProxyServer() != null ? request.getProxyServer() : config.getProxyServer();
+        if ((realm != null && realm.getUsePreemptiveAuth() && realm.getScheme() == Realm.AuthScheme.NTLM)
+                || (proxyServer != null && proxyServer.getProtocol().equals(ProxyServer.Protocol.NTLM))) {
             log.debug("NTLM not supported by this provider. Using the " + JDKAsyncHttpProvider.class.getName());
             return ntlmProvider.execute(request, asyncHandler);
         }
@@ -722,7 +724,6 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
         }
 
         NettyConnectListener<T> c = new NettyConnectListener.Builder<T>(config, request, asyncHandler, f, this, bufferedBytes).build(uri);
-        ProxyServer proxyServer = request.getProxyServer() != null ? request.getProxyServer() : config.getProxyServer();
         boolean avoidProxy = proxyServer != null && proxyServer.getNonProxyHosts().contains(uri.getHost());
         boolean useSSl = uri.getScheme().compareToIgnoreCase(HTTPS) == 0 && proxyServer == null;
 

File: src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -331,7 +331,8 @@ private HttpMethodBase createMethod(HttpClient client, Request request) throws I
         }
 
         ProxyServer proxyServer = request.getProxyServer() != null ? request.getProxyServer() : config.getProxyServer();
-        if (proxyServer != null) {
+        boolean avoidProxy = proxyServer != null && proxyServer.getNonProxyHosts().contains(URI.create(request.getUrl()).getHost());
+        if (!avoidProxy && proxyServer != null) {
 
             if (proxyServer.getPrincipal() != null) {
                 Credentials defaultcreds = new UsernamePasswordCredentials(proxyServer.getPrincipal(), proxyServer.getPassword());

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -748,7 +748,6 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
                 channelFuture = bootstrap.connect(new InetSocketAddress(proxyServer.getHost(), proxyServer.getPort()));
             }
         } catch (Throwable t) {
-            log.error("bootstrap.connect", t);
             abort(c.future(), t.getCause() == null ? t : t.getCause());
             return c.future();
         }

File: src/main/java/com/ning/http/client/simple/HeaderMap.java
Patch:
@@ -66,7 +66,7 @@ public String getFirstValue(String key) {
     }
 
     /**
-     * @see FluentCaseInsensitiveStringsMap#getJoinedValue(String)
+     * @see FluentCaseInsensitiveStringsMap#getJoinedValue(String, String) 
      */
     public String getJoinedValue(String key, String delimiter) {
         return headers.getJoinedValue(key, delimiter);

File: src/main/java/com/ning/http/client/simple/SimpleAHCTransferListener.java
Patch:
@@ -20,7 +20,7 @@
  * <p>
  * Note: This listener does not cover requests failing before a connection is
  * established. For error handling, see
- * {@link SimpleAsyncHttpClient.Builder#setDefaultThrowableHandler(com.ning.http.client.ThrowableHandler)}.
+ * {@link SimpleAsyncHttpClient.Builder#setDefaultThrowableHandler(com.ning.http.client.ThrowableHandler)} 
  * 
  * @author Benjamin Hanzelmann
  */

File: src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java
Patch:
@@ -139,10 +139,10 @@ public void testPutZeroBytesFileTest() throws Throwable {
     }
   
   
-    @Test(groups = {"standalone", "default_provider"})
+    @Test(groups = {"standalone", "default_provider"}, enabled = false)
     public void testDerive() throws Exception 
     {
-        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().setUrl("http://invalid.url").build();
+        SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder().build();
         SimpleAsyncHttpClient derived = client.derive().build();
         
         assertNotSame(derived, client);

File: src/main/java/com/ning/http/client/providers/jdk/JDKDelegateFuture.java
Patch:
@@ -15,6 +15,7 @@
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.FutureImpl;
 
+import java.net.HttpURLConnection;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeUnit;
@@ -24,8 +25,8 @@ public class JDKDelegateFuture<V> extends JDKFuture<V> {
 
     private final FutureImpl<V> delegateFuture;
 
-    public JDKDelegateFuture(AsyncHandler<V> asyncHandler, int responseTimeoutInMs, FutureImpl<V> delegateFuture) {
-        super(asyncHandler, responseTimeoutInMs);
+    public JDKDelegateFuture(AsyncHandler<V> asyncHandler, int responseTimeoutInMs, FutureImpl<V> delegateFuture, HttpURLConnection urlConnection) {
+        super(asyncHandler, responseTimeoutInMs, urlConnection);
         this.delegateFuture = delegateFuture;
     }
 

File: src/test/java/com/ning/http/client/async/netty/NettyAsyncProviderBasicTest.java
Patch:
@@ -23,4 +23,5 @@ public class NettyAsyncProviderBasicTest extends AsyncProvidersBasicTest {
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);
     }
+
 }

File: src/main/java/com/ning/http/client/providers/apache/ApacheResponse.java
Patch:
@@ -69,7 +69,7 @@ public String getStatusText() {
 
     public String getResponseBody() throws IOException {
         String contentType = getContentType();
-        String charset = "UTF-8";
+        String charset = "ISO-8859-1";
         if (contentType != null) {
             for (String part : contentType.split(";")) {
                 if (part.startsWith("charset=")) {
@@ -98,7 +98,7 @@ public InputStream getResponseBodyAsStream() throws IOException {
     }
 
     private void checkBodyParts() {
-        if (bodyParts == null && bodyParts.size() > 0) {
+        if (bodyParts == null || bodyParts.size() == 0) {
             throw new IllegalStateException(BODY_NOT_COMPUTED);
         }
     }
@@ -107,7 +107,7 @@ private void checkBodyParts() {
 
     public String getResponseBodyExcerpt(int maxLength) throws IOException {
         String contentType = getContentType();
-        String charset = "UTF-8";
+        String charset = "ISO-8859-1";
         if (contentType != null) {
             for (String part : contentType.split(";")) {
                 if (part.startsWith("charset=")) {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java
Patch:
@@ -85,7 +85,7 @@ public String getStatusText() {
 
     public String getResponseBody() throws IOException {
         String contentType = getContentType();
-        String charset = "UTF-8";
+        String charset = "ISO-8859-1";
         if (contentType != null) {
             for (String part : contentType.split(";")) {
                 if (part.startsWith("charset=")) {
@@ -125,7 +125,7 @@ public InputStream getResponseBodyAsStream() throws IOException {
     }
 
     private void checkBodyParts() {
-        if (bodyParts == null && bodyParts.size() > 0) {
+        if (bodyParts == null || bodyParts.size() == 0) {
             throw new IllegalStateException(BODY_NOT_COMPUTED);
         }
     }
@@ -136,7 +136,7 @@ public String getResponseBodyExcerpt(int maxLength) throws IOException {
         checkBodyParts();
 
         String contentType = getContentType();
-        String charset = "UTF-8";
+        String charset = "ISO-8859-1";
         if (contentType != null) {
             for (String part : contentType.split(";")) {
                 if (part.startsWith("charset=")) {

File: src/test/java/com/ning/http/client/async/netty/NettyAsyncProviderBasicTest.java
Patch:
@@ -23,5 +23,4 @@ public class NettyAsyncProviderBasicTest extends AsyncProvidersBasicTest {
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);
     }
-    
 }

File: src/main/java/com/ning/http/client/SimpleAsyncHttpClient.java
Patch:
@@ -332,7 +332,7 @@ private Builder(SimpleAsyncHttpClient client) {
             this.errorDocumentBehaviour = client.errorDocumentBehaviour;
             this.enableResumableDownload = client.resumeEnabled;
             
-            this.ahc = client.asyncHttpClient;
+            this.ahc = client.asyncHttpClient();
         }
 
         public Builder addBodyPart(Part part) throws IllegalArgumentException {

File: src/test/java/com/ning/http/client/async/netty/NettyAsyncProviderBasicTest.java
Patch:
@@ -26,5 +26,4 @@ public class NettyAsyncProviderBasicTest extends AsyncProvidersBasicTest {
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
         return ProviderUtil.nettyProvider(config);
     }
-
 }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -330,7 +330,7 @@ protected final <T> void writeRequest(final Channel channel,
                         throw new IllegalStateException(ex);
                     }
                     long length = body.getContentLength();
-                    if (length > 0) {
+                    if (length != -1) {
                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, length);
                     } else {
                         nettyRequest.setHeader(HttpHeaders.Names.TRANSFER_ENCODING, HttpHeaders.Values.CHUNKED);

File: src/test/java/com/ning/http/client/async/SimpleAsyncHttpClientTest.java
Patch:
@@ -120,7 +120,7 @@ public void RequestByteArrayOutputStreamBodyConsumerTest() throws Throwable {
     /**
      * See https://issues.sonatype.org/browse/AHC-5
      */
-    @Test(groups = {"standalone", "default_provider"}, enabled = false)
+    @Test(groups = {"standalone", "default_provider"}, enabled = true)
     public void testPutZeroBytesFileTest() throws Throwable {
         System.err.println("setting up client");
         SimpleAsyncHttpClient client = new SimpleAsyncHttpClient.Builder()

File: src/test/java/com/ning/http/client/async/AbstractBasicTest.java
Patch:
@@ -120,9 +120,9 @@ public void handle(String pathInContext,
             byte[] bytes = new byte[size];
             if (bytes.length > 0) {
                 int read = httpRequest.getInputStream().read(bytes);
-                //if (read > 0) {
+                if (read > 0) {
                     httpResponse.getOutputStream().write(bytes, 0, read);
-                //}
+                }
             }
 
             httpResponse.setStatus(200);

File: src/main/java/com/ning/http/client/RequestBuilder.java
Patch:
@@ -88,8 +88,8 @@ public RequestBuilder setBody(EntityWriter dataWriter) {
 
     /**
      * Deprecated - Use setBody(new InputStreamBodyGenerator(inputStream)).
-     * @param stream
-     * @return
+     * @param stream - An {@link InputStream}
+     * @return a {@link RequestBuilder}
      * @throws IllegalArgumentException
      */
     @Override

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -161,7 +161,7 @@ public NettyAsyncHttpProvider(AsyncHttpClientConfig config) {
                 && NettyAsyncHttpProviderConfig.class.isAssignableFrom(config.getAsyncHttpProviderConfig().getClass())) {
             asyncHttpProviderConfig = NettyAsyncHttpProviderConfig.class.cast(config.getAsyncHttpProviderConfig());
         } else {
-            asyncHttpProviderConfig = null;
+            asyncHttpProviderConfig = new NettyAsyncHttpProviderConfig();
         }
 
         if (asyncHttpProviderConfig != null && asyncHttpProviderConfig.getProperty(NettyAsyncHttpProviderConfig.USE_BLOCKING_IO) != null) {
@@ -733,7 +733,7 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
 
         // Do no enable this with win.
         if (System.getProperty("os.name").toLowerCase().indexOf("win") == -1) {
-            bootstrap.setOption("reuseAddress", true);
+            bootstrap.setOption("reuseAddress", asyncHttpProviderConfig.getProperty(NettyAsyncHttpProviderConfig.REUSE_ADDRESS));
         }
 
         try {

File: src/test/java/com/ning/http/client/async/netty/NettyRelative302Test.java
Patch:
@@ -18,9 +18,9 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ProviderUtil;
-import com.ning.http.client.async.RC10KTest;
+import com.ning.http.client.async.Relative302Test;
 
-public class NettyRelative302Test extends RC10KTest {
+public class NettyRelative302Test extends Relative302Test {
 
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {

File: src/test/java/com/ning/http/client/async/PerRequestRelative302Test.java
Patch:
@@ -103,7 +103,7 @@ public void redirected302Test() throws Throwable {
         assertNotNull(response);
         assertEquals(response.getStatusCode(), 200);
 
-        assertEquals(getBaseUrl(response.getUri()), "http://www.microsoft.com:80");
+        assertEquals(getBaseUrl(response.getUri()), "http://www.microsoft.com/en/us/default.asp:80");
         c.close();
     }
 

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -744,7 +744,7 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
             }
         } catch (Throwable t) {
             log.error("bootstrap.connect", t);
-            abort(c.future(), t.getCause());
+            abort(c.future(), t.getCause() == null ? t : t.getCause());
             return c.future();
         }
 

File: src/main/java/com/ning/http/client/Request.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * The Request class can be used to construct HTTP request:
  * {@code
- *   Request r = new RequestBuilder().setUrl("url)
+ *   Request r = new RequestBuilder().setUrl("url")
  *                      .setRealm((new Realm.RealmBuilder()).setPrincipal(user)
  *                      .setPassword(admin)
  *                      .setRealmName("MyRealm")

File: src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -1503,7 +1503,7 @@ public void onThrowable(Throwable t) {
             Assert.fail();
         } catch (Throwable ex) {
             System.out.println("EXPIRED: " + (System.currentTimeMillis() - t1));
-            Assert.assertNull(ex.getCause());
+            Assert.assertNotNull(ex.getCause());
             Assert.assertEquals(ex.getCause().getMessage(), "No response received after 10000");
         }
         c.close();

File: src/main/java/com/ning/http/client/RequestBuilderBase.java
Patch:
@@ -131,7 +131,7 @@ private String toUrl(boolean encode) {
                         } else {
                             builder.append(name);
                         }
-                        if (value != null) {
+                        if (value != null && !value.equals("")) {
                             builder.append('=');
                             if (encode) {
                                 UTF8UrlEncoder.appendEncoded(builder, value);

File: src/test/java/com/ning/http/client/async/netty/NettyAsyncProviderBasicTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyAsyncStreamHandlerTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyAsyncStreamLifecycleTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyAuthTimeoutTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyBasicAuthTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyBasicHttpsTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyBodyChunkTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyComplexClientTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyConnectionPoolTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyDigestAuthTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyEmptyBodyTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyErrorResponseTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyExpect100ContinueTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyFilterTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyFollowingThreadTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyHead302Test.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyHttpToHttpsRedirectTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyIdleStateHandlerTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyInputStreamTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyMaxTotalConnectionTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyMultipleHeaderTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyNoNullResponseTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyParamEncodingTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyPerRequestRelative302Test.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyPostWithQSTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyProxyTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyProxyTunnellingTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyPutLargeFileTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyQueryParametersTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyRC10KTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyRelative302Test.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyRemoteSiteTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyTransferListenerTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyWebDavBasicTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/netty/NettyZeroCopyFileTest.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.async.jdk;
+package com.ning.http.client.async.netty;
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/test/java/com/ning/http/client/async/apache/ApacheRemoteSiteTest.java
Patch:
@@ -18,11 +18,11 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.async.ProviderUtil;
-import com.ning.http.client.async.ResumableFileTest;
+import com.ning.http.client.async.RemoteSiteTest;
 
-public class ApacheResumableFileTest extends ResumableFileTest {
+public class ApacheRemoteSiteTest extends RemoteSiteTest {
     @Override
     public AsyncHttpClient getAsyncHttpClient(AsyncHttpClientConfig config) {
-        return ProviderUtil.apacheProvider(config);
+        return ProviderUtil.jdkProvider(config);
     }
 }

File: src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -167,7 +167,7 @@ public <T> Future<T> execute(Request request, AsyncHandler<T> handler) throws IO
         }
 
         int requestTimeout = requestTimeout(config, request.getPerRequestConfig());
-        if (config.getIdleConnectionTimeoutInMs() > 0) {
+        if (config.getIdleConnectionTimeoutInMs() > 0 && requestTimeout != -1 && requestTimeout < config.getIdleConnectionTimeoutInMs()) {
             idleConnectionTimeoutThread = new IdleConnectionTimeoutThread();
             idleConnectionTimeoutThread.setConnectionTimeout(config.getIdleConnectionTimeoutInMs());
             idleConnectionTimeoutThread.addConnectionManager(connectionManager);

File: src/test/java/com/ning/http/client/async/Expect100ContinueTest.java
Patch:
@@ -33,7 +33,7 @@
 import static org.testng.Assert.assertNotNull;
 
 /**
- * Zero copy test which use FileChannel.transfer under the hood . The same SSL test is also covered in {@link BasicHttpsTest}
+ * Test the Expect: 100-Continue.
  */
 public class Expect100ContinueTest extends AbstractBasicTest {
 

File: src/main/java/com/ning/http/client/resumable/PropertiesBasedResumableProcessor.java
Patch:
@@ -93,7 +93,7 @@ private static String append(Map.Entry<String, Long> e) {
         return new StringBuffer(e.getKey()).append("=").append(e.getValue()).append( "\n" ).toString();
     }
 
-    /**
+/**
      * {@inheritDoc}
      */
     /* @Override */

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java
Patch:
@@ -230,7 +230,7 @@ public List<Cookie> getCookies() {
      */
     /* @Override */
     public boolean hasResponseStatus() {
-        return (bodyParts != null ? true : false);
+        return (status != null ? true : false);
     }
 
     /**

File: src/main/java/com/ning/http/client/resumable/FileBasedResumableProcessor.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Properties;
 
 /**
- * A {@link com.ning.http.client.resumable.ResumableAsyncHandler.ResumableProcessor} which use a {@link File}
+ * A {@link com.ning.http.client.resumable.ResumableAsyncHandler.ResumableProcessor} which use a {@link RandomAccessFile}
  * to store the download index information.
  */
 public class FileBasedResumableProcessor implements ResumableAsyncHandler.ResumableProcessor {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1126,7 +1126,7 @@ private void replayRequest(final NettyResponseFuture<?> future, FilterContext fc
         future.setState(NettyResponseFuture.STATE.NEW);
 
         if (log.isDebugEnabled()) {
-            log.debug("\n\nReaplyed Request {}\n", newRequest);
+            log.debug("\n\nReplayed Request {}\n", newRequest);
         }
                 
         // We must consume the body first in order to re-use the connection.

File: src/main/java/com/ning/http/client/extra/ThrottleRequestFilter.java
Patch:
@@ -66,7 +66,7 @@ public FilterContext filter(FilterContext ctx) throws FilterException {
                     String.format("Interrupted Request %s with AsyncHandler %s", ctx.getRequest(), ctx.getAsyncHandler()));
         }
 
-        return new FilterContext.FilterContextBuilder(ctx).build();
+        return new FilterContext.FilterContextBuilder(ctx).asyncHandler(new AsyncHandlerWrapper(ctx.getAsyncHandler())).build();
     }
 
     private class AsyncHandlerWrapper<T> implements AsyncHandler {

File: src/test/java/com/ning/http/client/async/QueryParametersTest.java
Patch:
@@ -111,7 +111,7 @@ public void urlWithColonTest_Netty() throws Throwable {
                 .setHeader("Content-Type", "text/html")
                 .execute().get(TIMEOUT, TimeUnit.SECONDS);
 
-        assertEquals(response.getHeader("X-queryString"), "q=" + URLEncoder.encode(query, "UTF-8"));
+        assertEquals(response.getHeader("q"), URLEncoder.encode(query, "UTF-8"));
     }
 
     @Test(groups = "standalone")
@@ -124,7 +124,7 @@ public void urlWithColonTest_JDK() throws Throwable {
                 .setHeader("Content-Type", "text/html")
                 .execute().get(TIMEOUT, TimeUnit.SECONDS);
 
-        assertEquals(response.getHeader("X-queryString"), "q=" + URLEncoder.encode(query, "UTF-8"));
+        assertEquals(response.getHeader("q"), URLEncoder.encode(query, "UTF-8"));
     }
     
 }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -731,7 +731,7 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
             throw new IOException(String.format("Too many connections %s", config.getMaxTotalConnections()));
         }
 
-        NettyConnectListener<T> c = new NettyConnectListener.Builder<T>(config, request, asyncHandler, f, this, bufferedBytes).build();
+        NettyConnectListener<T> c = new NettyConnectListener.Builder<T>(config, request, asyncHandler, f, this, bufferedBytes).build(uri);
         ProxyServer proxyServer = request.getProxyServer() != null ? request.getProxyServer() : config.getProxyServer();
 
         boolean useSSl = uri.getScheme().compareToIgnoreCase(HTTPS) == 0 && proxyServer == null;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -731,7 +731,7 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
             throw new IOException(String.format("Too many connections %s", config.getMaxTotalConnections()));
         }
 
-        NettyConnectListener<T> c = new NettyConnectListener.Builder<T>(config, request, asyncHandler, f, this, bufferedBytes).build();
+        NettyConnectListener<T> c = new NettyConnectListener.Builder<T>(config, request, asyncHandler, f, this, bufferedBytes).build(uri);
         ProxyServer proxyServer = request.getProxyServer() != null ? request.getProxyServer() : config.getProxyServer();
 
         boolean useSSl = uri.getScheme().compareToIgnoreCase(HTTPS) == 0 && proxyServer == null;

File: src/main/java/com/ning/http/client/listener/TransferCompletionHandler.java
Patch:
@@ -21,7 +21,7 @@
 import com.ning.http.client.HttpResponseBodyPart;
 import com.ning.http.client.HttpResponseHeaders;
 import com.ning.http.client.Response;
-import org.slf4j.Logger;;
+import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;

File: src/main/java/com/ning/http/client/filter/FilterContext.java
Patch:
@@ -28,7 +28,7 @@
  * <p/>
  * Invoking {@link com.ning.http.client.filter.FilterContext#getResponseStatus()} returns an instance of {@link HttpResponseStatus}
  * that can be used to decide if the response processing should continue or not. You can stop the current response processing
- * and replay the request but creating a {@link FilterContext(AsyncHandler<T>, Request, boolean)}. The {@link com.ning.http.client.AsyncHttpProvider}
+ * and replay the request but creating a {@link FilterContext}. The {@link com.ning.http.client.AsyncHttpProvider}
  * will interrupt the processing and "replay" the associated {@link Request} instance.
  */
 public class FilterContext<T> {

File: src/main/java/com/ning/http/client/AsyncCompletionHandler.java
Patch:
@@ -62,7 +62,7 @@ public STATE onBodyPartReceived(final HttpResponseBodyPart content) throws Excep
      * {@inheritDoc}
      */
     /* @Override */
-    public final STATE onStatusReceived(final HttpResponseStatus status) throws Exception {
+    public STATE onStatusReceived(final HttpResponseStatus status) throws Exception {
         builder.reset();
         builder.accumulate(status);
         return STATE.CONTINUE;
@@ -72,7 +72,7 @@ public final STATE onStatusReceived(final HttpResponseStatus status) throws Exce
      * {@inheritDoc}
      */
     /* @Override */
-    public final STATE onHeadersReceived(final HttpResponseHeaders headers) throws Exception {
+    public STATE onHeadersReceived(final HttpResponseHeaders headers) throws Exception {
         builder.accumulate(headers);
         return STATE.CONTINUE;
     }

File: src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
Patch:
@@ -256,7 +256,7 @@ protected final Request getRequest() {
         return request;
     }
 
-    protected final HttpRequest getNettyRequest() {
+    public final HttpRequest getNettyRequest() {
         return nettyRequest;
     }
 

File: src/test/java/com/ning/http/client/async/AbstractBasicTest.java
Patch:
@@ -122,11 +122,9 @@ public void handle(String pathInContext,
                 httpResponse.getOutputStream().write(bytes);
             }
 
-
             httpResponse.setStatus(200);
             httpResponse.getOutputStream().flush();
             httpResponse.getOutputStream().close();
-
         }
     }
 

File: src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
Patch:
@@ -605,7 +605,7 @@ public Builder removeRequestFilter(RequestFilter asyncFilter) {
          * @param responseFilter
          * @return this
          */
-        public Builder addRequestFilter(ResponseFilter responseFilter) {
+        public Builder addResponseFilter(ResponseFilter responseFilter) {
             responseFilters.add(responseFilter);
             return this;
         }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -908,7 +908,7 @@ public Object call() throws Exception {
                             }
                         });
                     } else {
-                        nextRequest(request, future);
+                        nextRequest(newRequest, future);
                     }
                 }
 

File: src/test/java/com/ning/http/client/async/PutLargeFileTest.java
Patch:
@@ -39,7 +39,7 @@ public class PutLargeFileTest
 
     private File largeFile;
 
-    @Test(groups = "standalone", enabled = false)
+    @Test(groups = "standalone", enabled = true)
     public void testPutLargeFile()
             throws Exception {
         byte[] bytes = "RatherLargeFileRatherLargeFileRatherLargeFileRatherLargeFile".getBytes("UTF-16");
@@ -101,7 +101,7 @@ public void handle(String arg0, Request arg1, HttpServletRequest req, HttpServle
                 resp.setStatus(200);
                 resp.getOutputStream().flush();
                 resp.getOutputStream().close();
-                
+
                 arg1.setHandled(true);
 
             }

File: src/test/java/com/ning/http/client/async/ZeroCopyFileTest.java
Patch:
@@ -55,7 +55,7 @@ public void handle(String s,
                            Request r,
                            HttpServletRequest httpRequest,
                            HttpServletResponse httpResponse) throws IOException, ServletException {
-            
+
             int size = 10 * 1024;
             if (httpRequest.getContentLength() > 0) {
                 size = httpRequest.getContentLength();

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -208,7 +208,7 @@ public ChannelPipeline getPipeline() throws Exception {
             if (asyncHttpProviderConfig.getProperty(NettyAsyncHttpProviderConfig.EXECUTE_ASYNC_CONNECT) != null) {
                 executeConnectAsync = true;
             } else if (asyncHttpProviderConfig.getProperty(NettyAsyncHttpProviderConfig.DISABLE_NESTED_REQUEST) != null) {
-                DefaultChannelFuture.setUseDeadLockChecker(false);
+                DefaultChannelFuture.setUseDeadLockChecker(true);
             }
         }
     }

File: src/test/java/org/sonatype/ahc/suite/CertAuthGetTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite;
+package org.sonatype.ahc.suite;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -20,7 +20,7 @@
 import org.sonatype.tests.http.server.jetty.configurations.CertAuthSuiteConfigurator;
 
 import com.ning.http.client.AsyncHttpClientConfig.Builder;
-import com.ning.http.client.suite.util.CertUtil;
+import org.sonatype.ahc.suite.util.CertUtil;
 
 /**
  * @author Benjamin Hanzelmann

File: src/test/java/org/sonatype/ahc/suite/CertAuthPutTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite;
+package org.sonatype.ahc.suite;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -20,7 +20,7 @@
 import org.sonatype.tests.http.server.jetty.configurations.CertAuthSuiteConfigurator;
 
 import com.ning.http.client.AsyncHttpClientConfig.Builder;
-import com.ning.http.client.suite.util.CertUtil;
+import org.sonatype.ahc.suite.util.CertUtil;
 
 /**
  * @author Benjamin Hanzelmann

File: src/test/java/org/sonatype/ahc/suite/FailingAuthTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite;
+package org.sonatype.ahc.suite;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -19,7 +19,7 @@
 import org.testng.annotations.Test;
 
 import com.ning.http.client.Response;
-import com.ning.http.client.suite.util.AsyncSuiteConfiguration;
+import org.sonatype.ahc.suite.util.AsyncSuiteConfiguration;
 
 /**
  * @author Benjamin Hanzelmann

File: src/test/java/org/sonatype/ahc/suite/GetTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite;
+package org.sonatype.ahc.suite;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -27,8 +27,8 @@
 
 import com.ning.http.client.AsyncHttpClient.BoundRequestBuilder;
 import com.ning.http.client.Response;
-import com.ning.http.client.suite.util.AssertingAsyncHandler;
-import com.ning.http.client.suite.util.AsyncSuiteConfiguration;
+import org.sonatype.ahc.suite.util.AssertingAsyncHandler;
+import org.sonatype.ahc.suite.util.AsyncSuiteConfiguration;
 
 /**
  * @author Benjamin Hanzelmann

File: src/test/java/org/sonatype/ahc/suite/HeadTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite;
+package org.sonatype.ahc.suite;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -19,7 +19,7 @@
 
 import com.ning.http.client.AsyncHttpClient.BoundRequestBuilder;
 import com.ning.http.client.Response;
-import com.ning.http.client.suite.util.AsyncSuiteConfiguration;
+import org.sonatype.ahc.suite.util.AsyncSuiteConfiguration;
 
 /**
  * @author Benjamin Hanzelmann

File: src/test/java/org/sonatype/ahc/suite/NonPreemptiveAuthGetTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite;
+package org.sonatype.ahc.suite;
 
 import org.sonatype.tests.http.runner.annotations.ConfiguratorList;
 import org.testng.annotations.BeforeMethod;

File: src/test/java/org/sonatype/ahc/suite/NonPreemptiveAuthPutTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite;
+package org.sonatype.ahc.suite;
 
 import org.sonatype.tests.http.runner.annotations.ConfiguratorList;
 import org.testng.annotations.BeforeMethod;

File: src/test/java/org/sonatype/ahc/suite/PreemptiveAuthGetTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite;
+package org.sonatype.ahc.suite;
 
 import org.sonatype.tests.http.runner.annotations.ConfiguratorList;
 import org.testng.annotations.BeforeMethod;

File: src/test/java/org/sonatype/ahc/suite/PreemptiveAuthPutTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite;
+package org.sonatype.ahc.suite;
 
 import org.sonatype.tests.http.runner.annotations.ConfiguratorList;
 import org.testng.annotations.BeforeMethod;

File: src/test/java/org/sonatype/ahc/suite/PutTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite;
+package org.sonatype.ahc.suite;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -32,7 +32,7 @@
 import com.ning.http.client.AsyncHttpClient.BoundRequestBuilder;
 import com.ning.http.client.AsyncHttpClientConfig.Builder;
 import com.ning.http.client.Response;
-import com.ning.http.client.suite.util.AsyncSuiteConfiguration;
+import org.sonatype.ahc.suite.util.AsyncSuiteConfiguration;
 
 /**
  * @author Benjamin Hanzelmann

File: src/test/java/org/sonatype/ahc/suite/auth/AuthMethodsTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite.auth;
+package org.sonatype.ahc.suite.auth;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -23,7 +23,7 @@
 
 import com.ning.http.client.AsyncHttpClient.BoundRequestBuilder;
 import com.ning.http.client.Response;
-import com.ning.http.client.suite.util.AsyncSuiteConfiguration;
+import org.sonatype.ahc.suite.util.AsyncSuiteConfiguration;
 
 /**
  * @author Benjamin Hanzelmann

File: src/test/java/org/sonatype/ahc/suite/auth/CertAuthTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite.auth;
+package org.sonatype.ahc.suite.auth;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -27,8 +27,8 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.Response;
-import com.ning.http.client.suite.util.AsyncSuiteConfiguration;
-import com.ning.http.client.suite.util.CertUtil;
+import org.sonatype.ahc.suite.util.AsyncSuiteConfiguration;
+import org.sonatype.ahc.suite.util.CertUtil;
 
 /**
  * @author Benjamin Hanzelmann

File: src/test/java/org/sonatype/ahc/suite/proxy/HttpAuthProxyTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite.proxy;
+package org.sonatype.ahc.suite.proxy;
 
 import org.sonatype.tests.http.runner.annotations.Configurators;
 import org.sonatype.tests.http.server.jetty.configurations.HttpProxyAuthConfigurator;

File: src/test/java/org/sonatype/ahc/suite/proxy/HttpProxyTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite.proxy;
+package org.sonatype.ahc.suite.proxy;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -27,7 +27,7 @@
 import com.ning.http.client.AsyncHttpClientConfig.Builder;
 import com.ning.http.client.ProxyServer;
 import com.ning.http.client.Response;
-import com.ning.http.client.suite.util.AsyncSuiteConfiguration;
+import org.sonatype.ahc.suite.util.AsyncSuiteConfiguration;
 
 /**
  * @author Benjamin Hanzelmann

File: src/test/java/org/sonatype/ahc/suite/redirect/RedirectHttpTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite.redirect;
+package org.sonatype.ahc.suite.redirect;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.
@@ -24,7 +24,7 @@
 
 import com.ning.http.client.MaxRedirectException;
 import com.ning.http.client.Response;
-import com.ning.http.client.suite.util.AsyncSuiteConfiguration;
+import org.sonatype.ahc.suite.util.AsyncSuiteConfiguration;
 
 /**
  * @author Benjamin Hanzelmann

File: src/test/java/org/sonatype/ahc/suite/util/AssertingAsyncHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite.util;
+package org.sonatype.ahc.suite.util;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.

File: src/test/java/org/sonatype/ahc/suite/util/AsyncDebugHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite.util;
+package org.sonatype.ahc.suite.util;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.

File: src/test/java/org/sonatype/ahc/suite/util/AsyncSuiteConfiguration.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite.util;
+package org.sonatype.ahc.suite.util;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.

File: src/test/java/org/sonatype/ahc/suite/util/CertUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.ning.http.client.suite.util;
+package org.sonatype.ahc.suite.util;
 
 /*
  * Copyright (c) 2010 Sonatype, Inc. All rights reserved.

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1309,6 +1309,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)
         } catch (Throwable t) {
             cause = t;
         }
+        closeChannel(ctx);
 
         if (future != null) {
             try {
@@ -1324,7 +1325,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)
                     ctx.getAttachment()));
             log.error(cause);
         }
-        
+        ctx.sendUpstream(e);        
     }
 
 

File: src/test/java/com/ning/http/client/async/ComplexClientTest.java
Patch:
@@ -60,7 +60,7 @@ public void urlWithoutSlashTest() throws Throwable {
                 .setHeader("Content-Type", "text/html")
                 .execute().get(TIMEOUT, TimeUnit.SECONDS);
 
-        assertEquals(response.getResponseBody(),body);
+        assertEquals(response.getResponseBody(), body);
     }
 
     @Test(groups = "standalone")
@@ -74,4 +74,5 @@ public void urlWithColonTest() throws Throwable {
 
         assertEquals(response.getHeader("X-queryString"), query);
     }
+
 }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -248,7 +248,7 @@ private Channel lookupInCache(URI uri) {
 
         if (channel != null) {
             if (log.isDebugEnabled()) {
-                log.debug(String.format(currentThread() + "Using cached Channel %s", uri, channel));
+                log.debug(String.format(currentThread() + "Using cached Channel %s for uri %s", channel, uri));
             }
 
             if (channel.isOpen() && channel.isBound()) {
@@ -708,7 +708,7 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
 
                 if (log.isDebugEnabled()) {
                     log.debug(String.format(currentThread()
-                            + "\n\nCached Request %s\n", request.toString()));
+                            + "\n\nCached Request %s\n", channel));
                 }
                 channel.getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(f);
 
@@ -748,7 +748,7 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
             } else {
                 channelFuture = bootstrap.connect(new InetSocketAddress(proxyServer.getHost(), proxyServer.getPort()));
             }
-            bootstrap.setOption("connectTimeout", config.getConnectionTimeoutInMs());
+            bootstrap.setOption("connectTimeoutMillis", config.getConnectionTimeoutInMs());
         } catch (Throwable t) {
             log.error(String.format(currentThread() + "doConnect"), t);
             abort(c.future(), t.getCause());

File: src/main/java/com/ning/http/client/providers/apache/ApacheAsyncHttpProvider.java
Patch:
@@ -335,7 +335,9 @@ private HttpMethodBase createMethod(HttpClient client, Request request) throws I
         }
 
         if (request.getHeaders().getFirstValue("User-Agent") == null && config.getUserAgent() != null) {
-            method.setRequestHeader("User-Agent", config.getUserAgent() + " (ApacheAsyncHttpProvider)");
+            method.setRequestHeader("User-Agent", config.getUserAgent());
+        } else {
+            method.setRequestHeader("User-Agent", AsyncHttpProviderUtils.constructUserAgent(ApacheAsyncHttpProvider.class));
         }
 
         if (config.isCompressionEnabled()) {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -527,6 +527,8 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
 
         if (request.getHeaders().getFirstValue("User-Agent") == null && config.getUserAgent() != null) {
             nettyRequest.setHeader("User-Agent", config.getUserAgent());
+        } else {
+            nettyRequest.setHeader("User-Agent", AsyncHttpProviderUtils.constructUserAgent(NettyAsyncHttpProvider.class));
         }
 
         if (!m.equals(HttpMethod.CONNECT)) {

File: src/main/java/com/ning/http/client/logging/JulLogger.java
Patch:
@@ -40,15 +40,15 @@ public void debug(Throwable t, String msg, Object... msgArgs) {
         logger.log(Level.FINE, String.format(msg, msgArgs), t);
     }
 
-    public void FINE(String msg, Object... msgArgs) {
+    public void info(String msg, Object... msgArgs) {
         logger.log(Level.FINE, msg, msgArgs);
     }
 
-    public void FINE(Throwable t) {
+    public void info(Throwable t) {
         logger.log(Level.FINE, t.getMessage(), t);
     }
 
-    public void FINE(Throwable t, String msg, Object... msgArgs) {
+    public void info(Throwable t, String msg, Object... msgArgs) {
         logger.log(Level.FINE, String.format(msg, msgArgs), t);
     }
 

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -363,7 +363,7 @@ public void close() {
 
     @Override
     protected void finalize() throws Throwable {
-        if (!isClosed.get()) {
+        if (isClosed.get()) {
             close();
         }
         super.finalize();

File: src/main/java/com/ning/http/client/Response.java
Patch:
@@ -141,7 +141,6 @@ public interface Response {
 
 
     public static class ResponseBuilder {
-
         private final Collection<HttpResponseBodyPart> bodies =
                 Collections.synchronizedCollection(new ArrayList<HttpResponseBodyPart>());
         private HttpResponseStatus status;

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
Patch:
@@ -20,6 +20,7 @@
 import com.ning.http.client.logging.LogManager;
 import com.ning.http.client.logging.Logger;
 import org.jboss.netty.channel.Channel;
+import org.jboss.netty.handler.ssl.SslHandler;
 
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -52,7 +53,7 @@ public boolean addConnection(String uri, Channel connection) {
             log.debug(String.format(NettyAsyncHttpProvider.currentThread() + "Adding uri: %s for channel %s", uri, connection));
         }
         connection.getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(new NettyAsyncHttpProvider.DiscardEvent());
-
+      
         List<Channel> pooledConnectionForHost = connectionsPool.get(uri);
         if (pooledConnectionForHost == null) {
             List<Channel> newPool = new LinkedList<Channel>();

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -946,6 +946,9 @@ public Object call() throws Exception {
 
                     if (future.incrementAndGetCurrentRedirectCount() < config.getMaxRedirects()) {
 
+                        // We must allow 401 handling again.
+                        future.getAndSetAuth(false);
+
                         String location = response.getHeader(HttpHeaders.Names.LOCATION);
                         if (location.startsWith("/")) {
                             location = AsyncHttpProviderUtils.getBaseUrl(future.getURI()) + location;

File: src/main/java/com/ning/http/client/Realm.java
Patch:
@@ -352,7 +352,7 @@ public RealmBuilder parseWWWAuthenticateHeader(String headerLine) {
             setNonce(match(headerLine, "nonce"));
             setAlgorithm(match(headerLine, "algorithm"));
             setQop(match(headerLine, "qop"));
-            if (getNonce() != null) {
+            if (getNonce() != null && !getNonce().equalsIgnoreCase("")) {
                 setScheme(AuthScheme.DIGEST);
             }
             return this;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -865,11 +865,11 @@ public Boolean call() {
                         && !future.getAndSetAuth(true)) {
 
                     final Realm nr = new Realm.RealmBuilder().clone(realm)
-                            .parseWWWAuthenticateHeader(wwwAuth)
+                            .setScheme(realm.getAuthScheme())                            
                             .setUri(URI.create(request.getUrl()).getPath())
                             .setMethodName(request.getReqType())
-                            .setScheme(realm.getAuthScheme())
                             .setUsePreemptiveAuth(true)
+                            .parseWWWAuthenticateHeader(wwwAuth)                            
                             .build();
 
                     if (log.isDebugEnabled()) {

File: src/test/java/com/ning/http/client/async/PerRequestTimeoutTest.java
Patch:
@@ -105,7 +105,7 @@ public void testRequestTimeout() throws IOException {
             fail("Interrupted.", e);
         } catch (ExecutionException e) {
             assertTrue(e.getCause() instanceof TimeoutException);
-            assertEquals(e.getCause().getMessage(), "Request timed out.");
+            assertEquals(e.getCause().getMessage(), "No response received after 100");
         } catch (TimeoutException e) {
             fail("Timeout.", e);
         }
@@ -126,7 +126,7 @@ public void testGlobalDefaultPerRequestInfiniteTimeout() throws IOException {
             fail("Interrupted.", e);
         } catch (ExecutionException e) {
             assertTrue(e.getCause() instanceof TimeoutException);
-            assertEquals(e.getCause().getMessage(), "Request timed out.");
+            assertEquals(e.getCause().getMessage(), "No response received after 100");
         }
     }
 
@@ -142,7 +142,7 @@ public void testGlobalRequestTimeout() throws IOException {
             fail("Interrupted.", e);
         } catch (ExecutionException e) {
             assertTrue(e.getCause() instanceof TimeoutException);
-            assertEquals(e.getCause().getMessage(), "Request timed out.");
+            assertEquals(e.getCause().getMessage(), "No response received after 100");
         } catch (TimeoutException e) {
             fail("Timeout.", e);
         }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -110,7 +110,7 @@
 
 public class NettyAsyncHttpProvider extends IdleStateHandler implements AsyncHttpProvider<HttpResponse> {
     private final static String HTTP_HANDLER = "httpHandler";
-    private final static String SSL_HANDLER = "sslHandler";
+    final static String SSL_HANDLER = "sslHandler";
 
     private final static Logger log = LogManager.getLogger(NettyAsyncHttpProvider.class);
 
@@ -195,7 +195,7 @@ public ChannelPipeline getPipeline() throws Exception {
         });
     }
 
-    void constructSSLPipeline(final ConnectListener<?> cl) {
+    void constructSSLPipeline(final NettyConnectListener<?> cl) {
 
         secureBootstrap.setPipelineFactory(new ChannelPipelineFactory() {
 
@@ -650,7 +650,7 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
             throw new IOException(String.format("Too many connections %s", config.getMaxTotalConnections()));
         }
 
-        ConnectListener<T> c = new ConnectListener.Builder<T>(config, request, asyncHandler, f, this).build();
+        NettyConnectListener<T> c = new NettyConnectListener.Builder<T>(config, request, asyncHandler, f, this).build();
         ProxyServer proxyServer = request.getProxyServer() != null ? request.getProxyServer() : config.getProxyServer();
 
         boolean useSSl = uri.getScheme().compareToIgnoreCase("https") == 0

File: src/main/java/com/ning/http/client/AsyncCompletionHandler.java
Patch:
@@ -135,7 +135,7 @@ public STATE onContentWriteCompleted() {
      * @param total The total number of bytes transferred
      * @return a {@link com.ning.http.client.AsyncHandler.STATE} telling to CONTINUE or ABORT the current processing.
      */
-    public STATE onContentWriteProgess(long amount, long current, long total) {
+    public STATE onContentWriteProgress(long amount, long current, long total) {
         return STATE.CONTINUE;
     }
 }

File: src/main/java/com/ning/http/client/ProgressAsyncHandler.java
Patch:
@@ -46,6 +46,6 @@ public interface ProgressAsyncHandler<T> extends AsyncHandler<T> {
      * @param total The total number of bytes transferred
      * @return a {@link com.ning.http.client.AsyncHandler.STATE} telling to CONTINUE or ABORT the current processing.
      */
-    STATE onContentWriteProgess(long amount, long current, long total);
+    STATE onContentWriteProgress(long amount, long current, long total);
 
 }

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProviderConfig.java
Patch:
@@ -24,6 +24,7 @@
 
 public class NettyAsyncHttpProviderConfig implements AsyncHttpProviderConfig<String, Object> {
 
+    public final static String USE_BLOCKING_IO = "useBlockingIO";
 
     private final ConcurrentHashMap<String, Object> properties = new ConcurrentHashMap<String, Object>();
 

File: src/test/java/com/ning/http/client/async/AbstractBasicTest.java
Patch:
@@ -185,7 +185,7 @@ public void setUpGlobal() throws Exception {
         log.info("Local HTTP server started successfully");
     }
 
-    public void setUpLogger() {
+    public static void setUpLogger() {
         final java.util.logging.Logger logger = java.util.logging.Logger.getLogger("UnitTest");
         LogManager.setProvider(new LoggerProvider() {
 

File: src/test/java/com/ning/http/client/async/RemoteSiteTest.java
Patch:
@@ -130,7 +130,7 @@ public void testGoogleComWithTimeout() throws IOException, BrokenBarrierExceptio
         b.await();
         Thread.sleep(20000); // Wait for timeout
         if (t != null){
-            Assert.fail("timeout?!");            
+            Assert.fail("timeout?!");
         }
     }
 
@@ -155,8 +155,8 @@ public Response onCompleted(Response response) throws Exception {
 
         if (!l.await(5, TimeUnit.SECONDS)) {
             Assert.fail("Timeout out");
-        }
-
+       }
     }
+    
 }
 

File: src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
Patch:
@@ -88,7 +88,7 @@ public V get(long timeout, TimeUnit unit) throws InterruptedException, Execution
             content = innerFuture.get(timeout, unit);
         } catch (TimeoutException t) {
             timedOut.set(true);
-            throw new TimeoutException("Request timed out.");
+            throw new TimeoutException((String.format("No response received after %", responseTimeoutInMs)));
         } catch (CancellationException ce) {
         }
 

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -521,9 +521,9 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                     request.getEntityWriter().writeEntity(urlConnection.getOutputStream());
                 } else if (request.getFile() != null) {
                     File file = request.getFile();
-                    if (file.isHidden() || !file.exists() || !file.isFile()) {
-                        throw new IOException(String.format("[" + Thread.currentThread().getName()
-                                + "] File %s is not a file, is hidden or doesn't exist", file.getAbsolutePath()));
+                    if (!file.isFile()) {
+                        throw new IOException(String.format(Thread.currentThread()
+                                + "File %s is not a file or doesn't exist", file.getAbsolutePath()));
                     }
                     long lenght = new RandomAccessFile(file, "r").length();
                     urlConnection.setRequestProperty("Content-Length", String.valueOf(lenght));

File: src/test/java/com/ning/http/client/async/HttpToHttpsRedirectTest.java
Patch:
@@ -172,7 +172,7 @@ public void httpToHttpsProperConfig() throws Throwable {
 
         // Test if the internal channel is downgraded to clean http.
         response = c.preparePost(getTargetUrl())
-                .setHeader("X-redirect", getTargetUrl2())
+                .setHeader("X-redirect", getTargetUrl2() + "/foo2")
                 .execute().get();
         assertNotNull(response);
         assertEquals(response.getStatusCode(), 200);

File: src/test/java/com/ning/http/client/async/HttpToHttpsRedirectTest.java
Patch:
@@ -141,7 +141,7 @@ private static int getPort(URI uri) {
     public void httpToHttpsRedirect() throws Throwable {
         isSet.getAndSet(false);
 
-        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build();
+        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setMaximumNumberOfRedirects(5).setFollowRedirects(true).build();
         AsyncHttpClient c = new AsyncHttpClient(cg);
 
         Response response = c.preparePost(getTargetUrl())
@@ -161,7 +161,7 @@ public String getTargetUrl(){
     public void httpToHttpsProperConfig() throws Throwable {
         isSet.getAndSet(false);
 
-        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setFollowRedirects(true).setMaximumConnectionsPerHost(10).build();
+        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setMaximumNumberOfRedirects(5).setFollowRedirects(true).build();
         AsyncHttpClient c = new AsyncHttpClient(cg);
 
         Response response = c.preparePost(getTargetUrl())
@@ -184,7 +184,7 @@ public void httpToHttpsProperConfig() throws Throwable {
     public void relativeLocationUrl() throws Throwable {
         isSet.getAndSet(false);
 
-        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build();
+        AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setMaximumNumberOfRedirects(5).setFollowRedirects(true).build();
         AsyncHttpClient c = new AsyncHttpClient(cg);
 
         Response response = c.preparePost(getTargetUrl())

File: src/test/java/com/ning/http/client/async/AsyncStreamHandlerTest.java
Patch:
@@ -439,7 +439,7 @@ public Integer onCompleted() throws Exception {
             Assert.fail("Timeout");
             return;
         }
-        Integer status = statusCode.get(1, TimeUnit.SECONDS);
+        Integer status = statusCode.get(TIMEOUT, TimeUnit.SECONDS);
         Assert.assertEquals((int) status, 200, "Expected status code failed.");
 
         if (!whatCalled[STATUS]) {

File: src/main/java/com/ning/http/client/providers/jdk/JDKFuture.java
Patch:
@@ -19,6 +19,7 @@
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.FutureImpl;
 
+import java.util.concurrent.Callable;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
@@ -47,7 +48,7 @@ protected void setInnerFuture(Future<V> innerFuture) {
         this.innerFuture = innerFuture;
     }
 
-    public void done() {
+    public void done(Callable callable) {
         isDone.set(true);
     }
 

File: src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -1322,7 +1322,7 @@ public Response onCompleted(Response response) throws Exception {
 
             @Override
             public void onThrowable(Throwable t) {
-                Assert.assertFalse(true);
+                t.printStackTrace();
             }
         };
 

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -581,7 +581,7 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
             if (channel.isConnected()) {
 
                 ChannelBuffer b = null;
-                if (f != null && f.getRequest().getStreamData() != null) {
+                if (f != null && f.getRequest().getFile() == null) {
                     b = f.getNettyRequest().getContent();
                 }
 

File: src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
Patch:
@@ -66,6 +66,7 @@ enum STATE {
     private final AtomicLong touch = new AtomicLong(System.currentTimeMillis());
     private final NettyAsyncHttpProvider asyncHttpProvider;
     private final AtomicReference<STATE> state = new AtomicReference<STATE>(STATE.NEW);
+    private final AtomicBoolean contentProcessed = new AtomicBoolean(false);
 
     public NettyResponseFuture(URI uri,
                                Request request,
@@ -171,7 +172,7 @@ public V get(long l, TimeUnit tu) throws InterruptedException, TimeoutException,
 
     V getContent() {
         V update = content.get();
-        if (update == null) {
+        if (!contentProcessed.getAndSet(true)) {
             try {
                 update = asyncHandler.onCompleted();
             } catch (Throwable ex) {

File: src/test/java/com/ning/http/client/async/ProxyyTunnellingTest.java
Patch:
@@ -42,7 +42,7 @@ public AbstractHandler configureHandler() throws Exception {
         return proxy;
     }
 
-    @Test
+    @Test(groups = "online")
     public void testRequestProxy() throws IOException, InterruptedException, ExecutionException, TimeoutException {
         AsyncHttpClientConfig.Builder b = new AsyncHttpClientConfig.Builder();
         b.setFollowRedirects(true);
@@ -71,7 +71,7 @@ public Response onCompleted(Response response) throws Exception {
         
     }
 
-    @Test
+    @Test(groups = "online")
     public void testConfigProxy() throws IOException, InterruptedException, ExecutionException, TimeoutException {
         AsyncHttpClientConfig.Builder b = new AsyncHttpClientConfig.Builder();
         b.setFollowRedirects(true);

File: src/main/java/com/ning/http/util/SslUtils.java
Patch:
@@ -51,7 +51,7 @@ public static SSLEngine getSSLEngine()
     public static SSLContext getSSLContext()
             throws GeneralSecurityException, IOException {
         SSLConfig config = new SSLConfig();
-        if (config.keyStoreLocation == null || config.trustStoreLocation != null) {
+        if (config.keyStoreLocation == null || config.trustStoreLocation == null) {
             return getLooseSSLContext();
         } else {
             return getStrictSSLContext(config);

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
Patch:
@@ -108,7 +108,6 @@ public boolean removeAllConnections(Channel connection) {
                 }
                 i.remove();
                 isRemoved = true;
-                connectionsPerHost.remove(e.getKey());
             }
         }
         return isRemoved;

File: src/main/java/com/ning/http/client/providers/netty/ConnectionListener.java
Patch:
@@ -76,7 +76,8 @@ public Builder(AsyncHttpClientConfig config, Request request, AsyncHandler<T> as
             this.provider = provider;
         }
 
-        public Builder(AsyncHttpClientConfig config, Request request, AsyncHandler<T> asyncHandler, NettyResponseFuture<T> future, NettyAsyncHttpProvider provider) {
+        public Builder(AsyncHttpClientConfig config, Request request, AsyncHandler<T> asyncHandler,
+                       NettyResponseFuture<T> future, NettyAsyncHttpProvider provider) {
             this.config = config;
             this.request = request;
             this.asyncHandler = asyncHandler;
@@ -86,7 +87,7 @@ public Builder(AsyncHttpClientConfig config, Request request, AsyncHandler<T> as
 
         public ConnectListener<T> build() throws IOException {
             URI uri = AsyncHttpProviderUtils.createUri(request.getRawUrl().replace(" ", "%20"));
-            HttpRequest nettyRequest = NettyAsyncHttpProvider.buildRequest(config, request, uri, true);
+            HttpRequest nettyRequest = NettyAsyncHttpProvider.buildRequest(config, request, uri, true, null);
             if (future == null) {
                 future = new NettyResponseFuture<T>(uri, request, asyncHandler,
                         nettyRequest, NettyAsyncHttpProvider.requestTimeout(config, request.getPerRequestConfig()), provider);

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -1004,7 +1004,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)
 
             // Windows only.
             if (abortOnRemoteCloseException(cause)){
-                log.error(currentThread() + String.format("Trying to recover from dead Channel: %s ", channel));
+                log.debug(currentThread() + String.format("Trying to recover from dead Channel: %s ", channel));
                 remotelyClosed(channel, null);
                 return;
             }
@@ -1025,10 +1025,9 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)
     }
 
     /**
-     * On windows, there is scenario where the connection get broken and the only way we can find it is by inspecting
+     * On Windows, there is scenario where the connection get broken and the only way we can find it is by inspecting
      * the stack trace in order to catch the following exception:
      *
-     *
      * java.io.IOException: An established connection was aborted by the software in your host machine
         at sun.nio.ch.SocketDispatcher.read0(Native Method)
         at sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:25)

File: src/main/java/com/ning/http/client/providers/jdk/ResponseBodyPart.java
Patch:
@@ -30,7 +30,6 @@
  */
 public class ResponseBodyPart extends HttpResponseBodyPart {
 
-    private final AtomicReference<byte[]> bytes = new AtomicReference(null);
     private final byte[] chunk;
 
     public ResponseBodyPart(URI uri, byte[] chunk, AsyncHttpProvider<HttpURLConnection> provider) {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -993,7 +993,8 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)
         Throwable cause = e.getCause();
 
         if (log.isDebugEnabled()) {
-            log.debug("Fatal I/O exception: ", cause);
+            log.error(String.format("Fatal I/O exception: %s ", cause != null ? cause.getMessage() : "unavailable cause"));
+            log.error(cause);
         }
 
         if (ctx.getAttachment() instanceof NettyResponseFuture<?>) {

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -665,7 +665,7 @@ private void closeChannel(ChannelHandlerContext ctx) {
 
     @Override
     public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {        
-    	// Discard in memory bytes if the HttpContent.interrupt() has been invoked.
+        // Discard in memory bytes if the HttpContent.interrupt() has been invoked.
         if (ctx.getAttachment() instanceof DiscardEvent) {
             ctx.getChannel().setReadable(false);
             return;

File: src/main/java/com/ning/http/util/AsyncHttpProviderUtils.java
Patch:
@@ -162,7 +162,7 @@ public final static int getPort(URI uri) {
      *
      * @param params
      * @param methodParams
-     * @return
+     * @return a MultipartRequestEntity.
      * @throws java.io.FileNotFoundException
      */
     public final static MultipartRequestEntity createMultipartRequestEntity(List<Part> params, FluentStringsMap methodParams) throws FileNotFoundException {

File: src/test/java/com/ning/http/client/async/ConnectionPoolTest.java
Patch:
@@ -149,7 +149,7 @@ public void destroy() {
             exception = ex;
         }
         assertNotNull(exception);
-        assertEquals(exception.getMessage(), "Too many connections");
+        assertEquals(exception.getMessage(), "Too many connections -1");
     }
 
     @Test
@@ -224,7 +224,7 @@ public void multipleMaxConnectionOpenTest() throws Throwable {
             exception = ex;
         }
         assertNotNull(exception);
-        assertEquals(exception.getMessage(), "Too many connections");
+        assertEquals(exception.getMessage(), "Too many connections 1");
     }
 
     @Test(groups = "standalone")
@@ -287,7 +287,7 @@ public void onThrowable(Throwable t) {
             Assert.fail();
         } catch (IOException ex) {
             String s = ex.getMessage();
-            assertEquals(s, "Too many connections");
+            assertEquals(s, "Too many connections 2");
         }
 
         if (!l.await(TIMEOUT, TimeUnit.SECONDS)) {

File: src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
Patch:
@@ -42,7 +42,7 @@
  */
 public class AsyncHttpClientConfig {
 
-    private final static String ASYNC_CLIENT = AsyncHttpClient.class.getName() + ".";
+    private final static String ASYNC_CLIENT = AsyncHttpClientConfig.class.getName() + ".";
 
     private final int maxTotalConnections;
     private final int maxConnectionPerHost;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -750,7 +750,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
                     return;
                 }
 
-                boolean redirectEnabled = (request.isRedirectEnabled() || config.isRedirectEnabled());
+                boolean redirectEnabled = request.isRedirectEnabled() ? true : config.isRedirectEnabled();
                 if (redirectEnabled && (statusCode == 302 || statusCode == 301)) {
 
                     if (future.incrementAndGetCurrentRedirectCount() < config.getMaxRedirects()) {

File: src/main/java/com/ning/http/client/Realm.java
Patch:
@@ -143,7 +143,7 @@ public boolean getUsePreemptiveAuth() {
 
     /**
      * Return the NTLM domain to use. This value should map the JDK
-     * @return
+     * @return the NTLM domain
      */
     public String getDomain() {
         return domain;

File: src/main/java/com/ning/http/client/providers/jdk/JDKAsyncHttpProvider.java
Patch:
@@ -432,7 +432,7 @@ private void configure(URI uri, HttpURLConnection urlConnection, Request request
                 }
             }
 
-            if (realm != null && realm.getDomain() != null) {
+            if (realm != null && realm.getDomain() != null && realm.getScheme() == Realm.AuthScheme.NTLM) {
                 System.setProperty("http.auth.ntlm.domain", realm.getDomain());
             }
             

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -377,7 +377,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                     .append(getPort(uri)).toString());
             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_0, m, uri.toString());
         } else if (config.getProxyServer() != null || request.getProxyServer() != null) {
-            nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.getPath());
+            nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.toString());
         } else {
             StringBuilder path = new StringBuilder(uri.getRawPath());
             if (uri.getQuery() != null) {

File: src/test/java/com/ning/http/client/async/ProxyTest.java
Patch:
@@ -72,7 +72,7 @@ public void testRequestLevelProxy() throws IOException, ExecutionException, Time
         Response resp = f.get(3, TimeUnit.SECONDS);
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
-        assertEquals(resp.getHeader("target"), "/");
+        assertEquals(resp.getHeader("target"), target);
     }
 
     @Test(groups = "standalone")
@@ -87,7 +87,7 @@ public void testGlobalProxy() throws IOException, ExecutionException, TimeoutExc
         Response resp = f.get(3, TimeUnit.SECONDS);
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
-        assertEquals(resp.getHeader("target"), "/");
+        assertEquals(resp.getHeader("target"), target);
     }
 
     @Test(groups = "standalone")
@@ -103,6 +103,6 @@ public void testBothProxies() throws IOException, ExecutionException, TimeoutExc
         Response resp = f.get(3, TimeUnit.SECONDS);
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
-        assertEquals(resp.getHeader("target"), "/");
+        assertEquals(resp.getHeader("target"), target);
     }
 }

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -133,7 +133,7 @@
  */
 public class AsyncHttpClient {
 
-    private final static String DEFAULT_PROVIDER = "com.ning.http.client.providers.NettyAsyncHttpProvider";
+    private final static String DEFAULT_PROVIDER = "com.ning.http.client.providers.netty.NettyAsyncHttpProvider";
     private final AsyncHttpProvider<?> httpProvider;
     private final AsyncHttpClientConfig config;
 
@@ -146,7 +146,7 @@ public class AsyncHttpClient {
     
     /**
      * Create a new HTTP Asynchronous Client using the default {@link AsyncHttpClientConfig} configuration. The
-     * default {@link AsyncHttpProvider} will be used ({@link com.ning.http.client.providers.NettyAsyncHttpProvider}
+     * default {@link AsyncHttpProvider} will be used ({@link com.ning.http.client.providers.netty.NettyAsyncHttpProvider}
      */
     public AsyncHttpClient() {
         this(new AsyncHttpClientConfig.Builder().build());

File: src/main/java/com/ning/http/client/AsyncHttpProvider.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Interface to be used when implementing custom asynchronous I/O HTTP client.
- * By default, the {@link com.ning.http.client.providers.NettyAsyncHttpProvider} is used.
+ * By default, the {@link com.ning.http.client.providers.netty.NettyAsyncHttpProvider} is used.
  * 
  */
 public interface AsyncHttpProvider<A> {

File: src/main/java/com/ning/http/client/providers/netty/ConnectionListener.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client.providers;
+package com.ning.http.client.providers.netty;
 
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.AsyncHttpClientConfig;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProvider.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.providers;
+package com.ning.http.client.providers.netty;
 
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.AsyncHandler.STATE;

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncHttpProviderConfig.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client.providers;
+package com.ning.http.client.providers.netty;
 
 import com.ning.http.client.AsyncHttpProviderConfig;
 

File: src/main/java/com/ning/http/client/providers/netty/NettyAsyncResponse.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.providers;
+package com.ning.http.client.providers.netty;
 
 import com.ning.http.client.Cookie;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;

File: src/main/java/com/ning/http/client/providers/netty/NettyConnectionsPool.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.providers;
+package com.ning.http.client.providers.netty;
 
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.ConnectionsPool;

File: src/main/java/com/ning/http/client/providers/netty/NettyResponseFuture.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.providers;
+package com.ning.http.client.providers.netty;
 
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.FutureImpl;

File: src/main/java/com/ning/http/client/providers/netty/ResponseBodyPart.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.providers;
+package com.ning.http.client.providers.netty;
 
 import com.ning.http.client.AsyncHttpProvider;
 import com.ning.http.client.HttpResponseBodyPart;
@@ -83,4 +83,4 @@ public ByteBuffer getBodyByteBuffer() {
     protected HttpChunk chunk() {
         return chunk;
     }
-}
\ No newline at end of file
+}

File: src/main/java/com/ning/http/client/providers/netty/ResponseHeaders.java
Patch:
@@ -13,7 +13,7 @@
  * License for the specific language governing permissions and limitations
  * under the License.
  */
-package com.ning.http.client.providers;
+package com.ning.http.client.providers.netty;
 
 import com.ning.http.client.AsyncHttpProvider;
 import com.ning.http.client.FluentCaseInsensitiveStringsMap;
@@ -73,4 +73,4 @@ private FluentCaseInsensitiveStringsMap computerHeaders() {
     public FluentCaseInsensitiveStringsMap getHeaders() {
         return headers;
     }
-}
\ No newline at end of file
+}

File: src/main/java/com/ning/http/client/providers/netty/ResponseStatus.java
Patch:
@@ -14,7 +14,7 @@
  * under the License.
  *
  */
-package com.ning.http.client.providers;
+package com.ning.http.client.providers.netty;
 
 import com.ning.http.client.AsyncHttpProvider;
 import com.ning.http.client.HttpResponseStatus;
@@ -70,4 +70,4 @@ public String getProtocolText() {
         return response.getProtocolVersion().getText();
     }
 
-}
\ No newline at end of file
+}

File: src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -28,9 +28,9 @@
 import com.ning.http.client.RequestBuilder;
 import com.ning.http.client.Response;
 import com.ning.http.client.StringPart;
-import com.ning.http.client.providers.NettyAsyncHttpProvider;
-import com.ning.http.client.providers.NettyAsyncHttpProviderConfig;
-import com.ning.http.client.providers.NettyResponseFuture;
+import com.ning.http.client.providers.netty.NettyAsyncHttpProvider;
+import com.ning.http.client.providers.netty.NettyAsyncHttpProviderConfig;
+import com.ning.http.client.providers.netty.NettyResponseFuture;
 import org.testng.Assert;
 import org.testng.annotations.Test;
 

File: src/test/java/com/ning/http/client/async/RemoteSiteTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.ning.http.client.RequestBuilder;
 import com.ning.http.client.Response;
 import com.ning.http.client.async.AbstractBasicTest.AsyncCompletionHandlerAdapter;
-import com.ning.http.client.providers.NettyAsyncHttpProvider;
+import com.ning.http.client.providers.netty.NettyAsyncHttpProvider;
 import org.testng.Assert;
 import org.testng.annotations.AfterClass;
 import org.testng.annotations.BeforeClass;

File: src/test/java/com/ning/http/client/async/ConnectionPoolTest.java
Patch:
@@ -64,7 +64,7 @@ public void testMaxTotalConnections() {
         }
     }
 
-    @Test(groups = {"standalone", "async"}, enabled = false, invocationCount = 10, alwaysRun = true)
+    @Test(groups = {"standalone", "async"}, enabled = true, invocationCount = 10, alwaysRun = true)
     public void asyncDoGetKeepAliveHandlerTest_channelClosedDoesNotFail() throws Throwable {
         AsyncHttpClient client = new AsyncHttpClient();
 

File: src/main/java/com/ning/http/client/HttpContent.java
Patch:
@@ -29,7 +29,7 @@ protected HttpContent(URI url, AsyncHttpProvider<?> provider) {
         this.uri= url;
     }
 
-    protected final AsyncHttpProvider<?> provider() {
+    public final AsyncHttpProvider<?> provider() {
         return provider;
     }
 

File: src/test/java/com/ning/http/client/async/ConnectionPoolTest.java
Patch:
@@ -73,7 +73,7 @@ public void testMaxTotalConnections() {
         }
     }
 
-    @Test(groups = {"standalone", "async"})
+    @Test(groups = {"standalone", "async"}, invocationCount = 10, alwaysRun = true)
     public void asyncDoGetKeepAliveHandlerTest_channelClosedDoesNotFail() throws Throwable {
         AsyncHttpClient client = new AsyncHttpClient();
 

File: src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
Patch:
@@ -431,6 +431,7 @@ public Builder setKeepAlive(boolean keepAlive) {
          * @return a {@link Builder}
          */
         public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {
+            if (this.reaper != null) this.reaper.shutdown();
             this.reaper = reaper;
             return this;
         }
@@ -444,6 +445,7 @@ public Builder setScheduledExecutorService(ScheduledExecutorService reaper) {
          * @return a {@link Builder}
          */
         public Builder setExecutorService(ExecutorService applicationThreadPool) {
+            if (this.applicationThreadPool != null) this.applicationThreadPool.shutdown();
             this.applicationThreadPool = applicationThreadPool;
             return this;
         }

File: src/main/java/com/ning/http/client/AsyncHttpProviderConfig.java
Patch:
@@ -31,23 +31,23 @@ public interface AsyncHttpProviderConfig<U, V> {
      *
      * @param name  the name of the property
      * @param value the value of the property
-     * @return
+     * @return this instance of AsyncHttpProviderConfig
      */
     public AsyncHttpProviderConfig addProperty(U name, V value);
 
     /**
      * Return the value associated with the property's name
      *
      * @param name
-     * @return
+     * @return this instance of AsyncHttpProviderConfig
      */
     public V getProperty(U name);
 
     /**
      * Remove the value associated with the property's name
      *
      * @param name
-     * @return
+     * @return true if removed
      */
     public V removeProperty(U name);
 

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProviderConfig.java
Patch:
@@ -32,7 +32,7 @@ public class NettyAsyncHttpProviderConfig implements AsyncHttpProviderConfig<Str
      *
      * @param name  the name of the property
      * @param value the value of the property
-     * @return
+     * @return this instance of AsyncHttpProviderConfig
      */
     public NettyAsyncHttpProviderConfig addProperty(String name, Object value) {
         properties.put(name, value);
@@ -43,7 +43,7 @@ public NettyAsyncHttpProviderConfig addProperty(String name, Object value) {
      * Return the value associated with the property's name
      *
      * @param name
-     * @return
+     * @return this instance of AsyncHttpProviderConfig
      */
     public Object getProperty(String name) {
         return properties.get(name);
@@ -53,7 +53,7 @@ public Object getProperty(String name) {
      * Remove the value associated with the property's name
      *
      * @param name
-     * @return
+     * @return true if removed
      */
     public Object removeProperty(String name) {
         return properties.remove(name);

File: src/main/java/com/ning/http/client/Request.java
Patch:
@@ -46,7 +46,7 @@ public static interface EntityWriter {
      * Return the request's type (GET, POST, etc.)
      * @return the request's type (GET, POST, etc.)
      */
-    public RequestType getType();
+    public String getReqType();
 
     /**
      * Return the decoded url

File: src/test/java/com/ning/http/client/async/Head302Test.java
Patch:
@@ -19,7 +19,6 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.Request;
 import com.ning.http.client.RequestBuilder;
-import com.ning.http.client.RequestType;
 import com.ning.http.client.Response;
 import org.eclipse.jetty.server.handler.AbstractHandler;
 import org.testng.Assert;
@@ -64,7 +63,7 @@ public void handle(String s,
     public void testHEAD302() throws IOException, BrokenBarrierException, InterruptedException, ExecutionException, TimeoutException {
         AsyncHttpClient client = new AsyncHttpClient();
         final CountDownLatch l = new CountDownLatch(1);
-        Request request = new RequestBuilder(RequestType.HEAD).setUrl("http://127.0.0.1:" + port1 + "/Test").build();
+        Request request = new RequestBuilder("HEAD").setUrl("http://127.0.0.1:" + port1 + "/Test").build();
 
         client.executeRequest(request, new AsyncCompletionHandlerBase() {
             @Override
@@ -83,4 +82,4 @@ public Response onCompleted(Response response) throws Exception {
     public AbstractHandler configureHandler() throws Exception {
         return new Head302handler();
     }
-}
\ No newline at end of file
+}

File: src/test/java/com/ning/http/client/async/RemoteSiteTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.Request;
 import com.ning.http.client.RequestBuilder;
-import com.ning.http.client.RequestType;
 import com.ning.http.client.Response;
 import com.ning.http.client.async.AbstractBasicTest.AsyncCompletionHandlerAdapter;
 import com.ning.http.client.providers.NettyAsyncHttpProvider;
@@ -153,7 +152,7 @@ public void asyncStatusHEADContentLenghtTest() throws Throwable {
                 new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build());
 
         final CountDownLatch l = new CountDownLatch(1);
-        Request request = new RequestBuilder(RequestType.HEAD)
+        Request request = new RequestBuilder("HEAD")
                 .setUrl("http://www.google.com/")
                 .build();
 

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -233,7 +233,7 @@ private Channel lookupInCache(URI uri) {
     }
 
     private SSLEngine createSSLEngine() throws IOException, GeneralSecurityException {
-        SSLEngine sslEngine = config.getSSLEngine();
+        SSLEngine sslEngine = config.getSSLEngineFactory().newSSLEngine();
         if (sslEngine == null) {
             sslEngine = SslUtils.getSSLEngine();
         }

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -415,7 +415,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
         }
 
         Realm realm = request.getRealm();
-        if (realm != null && realm.usePreventiveAuth()) {
+        if (realm != null && realm.getUsePreemptiveAuth()) {
             switch (realm.getAuthScheme()) {
                 case BASIC:
                     nettyRequest.setHeader(HttpHeaders.Names.AUTHORIZATION,
@@ -707,7 +707,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
                             .setUri(URI.create(request.getUrl()).getPath())
                             .setMethodName(request.getType().toString())
                             .setScheme(request.getRealm().getAuthScheme())
-                            .setUsePreventiveAuth(true)
+                            .setUsePreemptiveAuth(true)
                             .build();
 
                     log.debug("Sending authentication to %s", request.getUrl());

File: src/test/java/com/ning/http/client/async/BasicAuthTest.java
Patch:
@@ -130,7 +130,7 @@ public void basicAuthTest() throws IOException, ExecutionException, TimeoutExcep
     public void basicAuthTestPreemtiveTest() throws IOException, ExecutionException, TimeoutException, InterruptedException {
         AsyncHttpClient client = new AsyncHttpClient();
         AsyncHttpClient.BoundRequestBuilder r = client.prepareGet("http://127.0.0.1:" + port1 + "/")
-                .setRealm((new Realm.RealmBuilder()).setPrincipal(user).setPassword(admin).setUsePreventiveAuth(true).build());
+                .setRealm((new Realm.RealmBuilder()).setPrincipal(user).setPassword(admin).setUsePreemptiveAuth(true).build());
 
         Future<Response> f = r.execute();
         Response resp = f.get(3, TimeUnit.SECONDS);

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -415,7 +415,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
         }
 
         Realm realm = request.getRealm();
-        if (realm != null) {
+        if (realm != null && realm.usePreventiveAuth()) {
             switch (realm.getAuthScheme()) {
                 case BASIC:
                     nettyRequest.setHeader(HttpHeaders.Names.AUTHORIZATION,
@@ -706,7 +706,8 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
                             .parseWWWAuthenticateHeader(wwwAuth)
                             .setUri(URI.create(request.getUrl()).getPath())
                             .setMethodName(request.getType().toString())
-                            .setScheme(Realm.AuthScheme.DIGEST)
+                            .setScheme(request.getRealm().getAuthScheme())
+                            .setUsePreventiveAuth(true)
                             .build();
 
                     log.debug("Sending authentication to %s", request.getUrl());

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -246,7 +246,7 @@ public Builder(AsyncHttpClientConfig config, Request request, AsyncHandler<T> as
 
             public ConnectListener<T> build() throws IOException {
 
-                URI uri = createUri(request.getRawUrl());
+                URI uri = createUri(request.getRawUrl().replace(" ","%20"));
                 HttpRequest nettyRequest = buildRequest(config, request, uri, true);
 
                 log.debug("Executing the doConnect operation: %s", asyncHandler);

File: src/test/java/com/ning/http/client/async/PerRequestTimeoutTest.java
Patch:
@@ -56,7 +56,7 @@ public void handle(String target, Request baseRequest, HttpServletRequest reques
             try {
                 response.getOutputStream().print(MSG);
                 response.getOutputStream().flush();
-                Thread.sleep(300);
+                Thread.sleep(3000);
                 response.getOutputStream().print(MSG);
                 response.getOutputStream().flush();
             } catch (InterruptedException e) {
@@ -73,7 +73,7 @@ public void testRequestTimeout() throws IOException {
         Future<Response> responseFuture =
                 client.prepareGet(getTargetUrl()).setPerRequestConfig(requestConfig).execute();
         try {
-            Response response = responseFuture.get(200, TimeUnit.MILLISECONDS);
+            Response response = responseFuture.get(2000, TimeUnit.MILLISECONDS);
             assertNull(response);
             client.close();
         } catch (InterruptedException e) {
@@ -91,7 +91,7 @@ public void testGlobalRequestTimeout() throws IOException {
         AsyncHttpClient client = new AsyncHttpClient(new AsyncHttpClientConfig.Builder().setRequestTimeoutInMs(100).build());
         Future<Response> responseFuture = client.prepareGet(getTargetUrl()).execute();
         try {
-            Response response = responseFuture.get(200, TimeUnit.MILLISECONDS);
+            Response response = responseFuture.get(2000, TimeUnit.MILLISECONDS);
             assertNull(response);
             client.close();
         } catch (InterruptedException e) {

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -379,7 +379,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
         } else if (config.getProxyServer() != null || request.getProxyServer() != null) {
             nettyRequest = new DefaultHttpRequest(HttpVersion.HTTP_1_1, m, uri.getPath());
         } else {
-            StringBuilder path = new StringBuilder(uri.getPath());
+            StringBuilder path = new StringBuilder(uri.getRawPath());
             if (uri.getQuery() != null) {
                 path.append("?").append(uri.getRawQuery());
             }

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -805,10 +805,10 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
                     }
                 }
 
-                if (updateStatusAndInterrupt(handler, new ResponseStatus(future.getURI(), response, this))) {
+                if (!future.getAndSetStatusReceived(true) && updateStatusAndInterrupt(handler, new ResponseStatus(future.getURI(), response, this))) {
                     finishUpdate(future, ctx);
                     return;
-                } else if (updateHeadersAndInterrupt(handler, new ResponseHeaders(future.getURI(), response, this))) {
+                } else if (!future.getAndSetHeaderReceived(true) && updateHeadersAndInterrupt(handler, new ResponseHeaders(future.getURI(), response, this))) {
                     finishUpdate(future, ctx);
                     return;
                 } else if (!response.isChunked()) {

File: src/test/java/com/ning/http/client/async/ZeroCopyFileTest.java
Patch:
@@ -139,7 +139,7 @@ public void zeroCopyFileTest() throws IOException, ExecutionException, TimeoutEx
         URL url = cl.getResource("SimpleTextFile.txt");
         File file = new File(url.toURI());
 
-        File tmp = new File(System.getProperty("java.io.tmpdir") + "zeroCopy.txt");
+        File tmp = new File(System.getProperty("java.io.tmpdir") + File.separator + "zeroCopy.txt");
         final FileOutputStream stream = new FileOutputStream(tmp);
         Future<Response> f = client.preparePost("http://127.0.0.1:" + port1 + "/").setBody(file).execute(new AsyncHandler<Response>() {
             public void onThrowable(Throwable t) {

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -694,7 +694,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
                 if (statusCode == 401
                         && wwwAuth != null
                         && future.getRequest().getRealm() != null
-                        && !future.getAnSetAuth(true)) {
+                        && !future.getAndSetAuth(true)) {
 
                     Realm realm = new Realm.RealmBuilder().clone(request.getRealm())
                             .parseWWWAuthenticateHeader(wwwAuth)
@@ -717,7 +717,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
                 if (statusCode == 407
                         && proxyAuth != null
                         && future.getRequest().getRealm() != null
-                        && !future.getAnSetAuth(true)) {
+                        && !future.getAndSetAuth(true)) {
 
                     log.debug("Sending proxy authentication to %s", request.getUrl());
 

File: src/main/java/com/ning/http/client/providers/NettyResponseFuture.java
Patch:
@@ -225,7 +225,7 @@ public boolean isInAuth() {
         return inAuth.get();
     }
 
-    public boolean getAnSetAuth(boolean inDigestAuth) {
+    public boolean getAndSetAuth(boolean inDigestAuth) {
         return inAuth.getAndSet(inDigestAuth);
     }
 }

File: src/main/java/com/ning/http/client/RequestType.java
Patch:
@@ -22,5 +22,6 @@ public enum RequestType {
     PUT,
     DELETE,
     HEAD,
-    OPTIONS
+    OPTIONS,
+    CONNECT
 }

File: src/main/java/com/ning/http/util/SslUtils.java
Patch:
@@ -51,7 +51,7 @@ public static SSLEngine getSSLEngine()
     static SSLContext getSSLContext()
             throws GeneralSecurityException, IOException {
         SSLConfig config = new SSLConfig();
-        if (config.keyStoreLocation == null) {
+        if (config.keyStoreLocation == null || config.trustStoreLocation != null) {
             return getLooseSSLContext();
         } else {
             return getStrictSSLContext(config);

File: src/test/java/com/ning/http/client/async/ProxyTest.java
Patch:
@@ -72,7 +72,7 @@ public void testRequestLevelProxy() throws IOException, ExecutionException, Time
         Response resp = f.get(3, TimeUnit.SECONDS);
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
-        assertEquals(resp.getHeader("target"), target);
+        assertEquals(resp.getHeader("target"), "/");
     }
 
     @Test(groups = "standalone")
@@ -87,7 +87,7 @@ public void testGlobalProxy() throws IOException, ExecutionException, TimeoutExc
         Response resp = f.get(3, TimeUnit.SECONDS);
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
-        assertEquals(resp.getHeader("target"), target);
+        assertEquals(resp.getHeader("target"), "/");
     }
 
     @Test(groups = "standalone")
@@ -103,6 +103,6 @@ public void testBothProxies() throws IOException, ExecutionException, TimeoutExc
         Response resp = f.get(3, TimeUnit.SECONDS);
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);
-        assertEquals(resp.getHeader("target"), target);
+        assertEquals(resp.getHeader("target"), "/");
     }
 }

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -663,13 +663,13 @@ private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, f
     }
 
     private String getBaseUrl(URI uri){
-        String url = uri.toString();
+        String url = uri.getScheme() + "://" + uri.getAuthority();
         int port = uri.getPort();
         if (port == -1) {
             port = getPort(uri);
-            url = url.substring(0,url.length() -1) + ":" + port;
+            url += ":" + port;
         }
-        return url.substring(0,url.indexOf(":", 9) + String.valueOf(port).length() +1);
+        return url;
     }
     
     private static int getPort(URI uri) {

File: src/main/java/com/ning/http/client/RequestBuilderBase.java
Patch:
@@ -324,7 +324,7 @@ private void resetMultipartData() {
         request.parts = null;
     }
         
-    public T setBoby(File file) {
+    public T setBody(File file) {
         request.file = file;
         return derived.cast(this);
     }

File: src/test/java/com/ning/http/client/async/BasicHttpsTest.java
Patch:
@@ -293,7 +293,7 @@ public void zeroCopyPostTest() throws IOException, ExecutionException, TimeoutEx
         URL url = cl.getResource("SimpleTextFile.txt");
         File file = new File(url.toURI());
 
-        Future<Response> f = client.preparePost(TARGET_URL).setBoby(file).execute();
+        Future<Response> f = client.preparePost(TARGET_URL).setBody(file).execute();
         Response resp = f.get();
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);

File: src/test/java/com/ning/http/client/async/ZeroCopyFileTest.java
Patch:
@@ -78,7 +78,7 @@ public void zeroCopyPostTest() throws IOException, ExecutionException, TimeoutEx
         final AtomicBoolean operationCompleted = new AtomicBoolean(false);
 
 
-        Future<Response> f = client.preparePost("http://127.0.0.1:" + port1 + "/").setBoby(file).execute(new AsyncCompletionHandler() {
+        Future<Response> f = client.preparePost("http://127.0.0.1:" + port1 + "/").setBody(file).execute(new AsyncCompletionHandler() {
 
             public STATE onHeaderWriteCompleted() {
                 headerSent.set(true);
@@ -112,7 +112,7 @@ public void zeroCopyPutTest() throws IOException, ExecutionException, TimeoutExc
         URL url = cl.getResource("SimpleTextFile.txt");
         File file = new File(url.toURI());
 
-        Future<Response> f = client.preparePut("http://127.0.0.1:" + port1 + "/").setBoby(file).execute();
+        Future<Response> f = client.preparePut("http://127.0.0.1:" + port1 + "/").setBody(file).execute();
         Response resp = f.get();
         assertNotNull(resp);
         assertEquals(resp.getStatusCode(), HttpServletResponse.SC_OK);

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -77,7 +77,6 @@
 import org.jboss.netty.handler.timeout.IdleState;
 import org.jboss.netty.handler.timeout.IdleStateHandler;
 import org.jboss.netty.util.HashedWheelTimer;
-import org.jboss.netty.util.internal.ConcurrentHashMap;
 
 import javax.net.ssl.SSLEngine;
 import java.io.FileNotFoundException;
@@ -93,6 +92,7 @@
 import java.util.List;
 import java.util.Map.Entry;
 import java.util.concurrent.Callable;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 import java.util.concurrent.RejectedExecutionException;

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -302,7 +302,9 @@ private final static URI createUri(String u) {
         } else if (path.length() > 0 && path.charAt(0) != '/') {
             throw new IllegalArgumentException("The URI path, of the URI " + uri
                     + ". must start with a '/'");
-        } 
+        } else if (path.length() == 0 ) {
+            return URI.create(u + "/");
+        }
 
         return uri;
     }

File: src/test/java/com/ning/http/client/async/RequestBuilderTest.java
Patch:
@@ -68,4 +68,5 @@ public void testParsesQueryParams() throws IOException, ExecutionException, Inte
         assertEquals(params.get("param1").get(0), "value1");
         assertEquals(params.get("param2").get(0), "value2");
     }
+
 }

File: src/test/java/com/ning/http/client/async/DigestAuthTest.java
Patch:
@@ -64,7 +64,7 @@ public void setUpGlobal() throws Exception {
         root.addAppender(new ConsoleAppender(
                 new PatternLayout(PatternLayout.TTCC_CONVERSION_PATTERN)));
 
-        port1 = 8080;
+        port1 = findFreePort();
         Connector listener = new SelectChannelConnector();
 
         listener.setHost("127.0.0.1");

File: src/main/java/com/ning/http/client/Realm.java
Patch:
@@ -153,7 +153,7 @@ public int hashCode() {
         return result;
     }
 
-    public class Builder {
+    public static class Builder {
 
         private String principal = "";
         private String password = "";

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -348,7 +348,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                 case DIGEST:
                     try {
                         nettyRequest.setHeader(HttpHeaders.Names.AUTHORIZATION,
-                                               AuthenticatorUtils.computeDisgestAuthentication(realm));
+                                               AuthenticatorUtils.computeDigestAuthentication(realm));
                     } catch (NoSuchAlgorithmException e) {
                         throw new SecurityException(e);
                     }

File: src/main/java/com/ning/http/util/AuthenticatorUtils.java
Patch:
@@ -36,7 +36,7 @@ public static String computeBasicAuthentication(Realm realm) {
         return "Basic " + Base64.encode(s.getBytes());
     }
 
-    public static String computeDisgestAuthentication(Realm realm) throws NoSuchAlgorithmException {
+    public static String computeDigestAuthentication(Realm realm) throws NoSuchAlgorithmException {
 
         StringBuilder builder = new StringBuilder().append("Digest ");
         construct(builder, "username", realm.getPrincipal());

File: src/test/java/com/ning/http/client/async/MultipleHeaderTest.java
Patch:
@@ -23,7 +23,6 @@
 import com.ning.http.client.Request;
 import com.ning.http.client.RequestBuilder;
 import com.ning.http.client.RequestType;
-import org.apache.log4j.BasicConfigurator;
 import org.testng.Assert;
 import org.testng.annotations.AfterClass;
 import org.testng.annotations.BeforeClass;
@@ -148,7 +147,6 @@ public Void onCompleted() throws Exception {
 
     @BeforeClass(alwaysRun = true)
     public void setUpGlobal() throws Exception {
-        BasicConfigurator.configure();
         serverSocket = new ServerSocket(PORT);
         executorService = Executors.newFixedThreadPool(1);
         voidFuture = executorService.submit(new Callable() {

File: src/test/java/com/ning/http/client/async/Relative302Test.java
Patch:
@@ -18,7 +18,6 @@
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
 import com.ning.http.client.Response;
-import org.apache.log4j.BasicConfigurator;
 import org.eclipse.jetty.server.Connector;
 import org.eclipse.jetty.server.Request;
 import org.eclipse.jetty.server.Server;
@@ -40,7 +39,6 @@
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
 
-
 public class Relative302Test extends AbstractBasicTest {
     private final AtomicBoolean isSet = new AtomicBoolean(false);
 
@@ -75,7 +73,6 @@ public void handle(String s,
     @BeforeClass(alwaysRun = true)
     public void setUpGlobal() throws Exception {
         server = new Server();
-        BasicConfigurator.configure();
 
         port1 = findFreePort();
         port2 = findFreePort();

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -225,7 +225,7 @@ public Builder(AsyncHttpClientConfig config, Request request, AsyncHandler<T> as
 
             public ConnectListener<T> build() throws IOException {
 
-                URI uri = createUri(request.getUrl());
+                URI uri = createUri(request.getRawUrl());
                 HttpRequest nettyRequest = buildRequest(config,request,uri);
 
                 if (log.isDebugEnabled())
@@ -472,7 +472,7 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
             throw new IOException("Too many connections");
         }
 
-        URI uri = createUri(request.getUrl());
+        URI uri = createUri(request.getRawUrl());
         if (log.isDebugEnabled())
             log.debug("Lookup cache: " + uri.toString());
 

File: src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -1373,7 +1373,7 @@ public void optionsNegativeTest() throws Throwable {
     public void testAwsS3() throws Exception {
         final AsyncHttpClient c = new AsyncHttpClient(new Builder().build());
         Response response = c.prepareGet("http://test.s3.amazonaws.com/").execute().get();
-        if (response.getResponseBody() == null || response.getResponseBody().isEmpty()) {
+        if (response.getResponseBody() == null || response.getResponseBody().equals("")) {
             fail("No response Body");
         } else {
             assertEquals(response.getStatusCode(), 403);

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -478,6 +478,9 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
 
         Channel channel = lookupInCache(uri);
         if (channel != null && channel.isOpen()) {
+            // Decrement the count as this is not a new connection.
+            activeConnectionsCount.decrementAndGet();
+            
             HttpRequest nettyRequest = buildRequest(config,request,uri);
             if (f == null) {
                 f = new NettyResponseFuture<T>(uri, request, asyncHandler,

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -606,7 +606,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
                     return;
                 }
 
-                if (response.getStatus().getCode() != 200 || nettyRequest.getMethod().equals(HttpMethod.HEAD)) {
+                if (nettyRequest.getMethod().equals(HttpMethod.HEAD)) {
                     markAsDoneAndCacheConnection(future, ctx.getChannel());
                 }
 

File: src/main/java/com/ning/http/client/Request.java
Patch:
@@ -53,4 +53,6 @@ public static interface EntityWriter {
     public String getVirtualHost();
 
     public FluentStringsMap getQueryParams();
+
+    public ProxyServer getProxyServer();
 }

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -663,13 +663,13 @@ private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, f
     }
 
     private String getBaseUrl(URI uri){
-        String url = uri.toString();
+        String url = uri.getScheme() + "://" + uri.getAuthority();
         int port = uri.getPort();
         if (port == -1) {
             port = getPort(uri);
-            url = url.substring(0,url.length() -1) + ":" + port;
+            url += ":" + port;
         }
-        return url.substring(0,url.indexOf(":", 9) + String.valueOf(port).length() +1);
+        return url;
     }
     
     private static int getPort(URI uri) {

File: src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
Patch:
@@ -232,8 +232,8 @@ public SSLEngine getSSLEngine(){
      * Builder for an {@link AsyncHttpClient}
      */
     public static class Builder {
-        private int defaultMaxTotalConnections = Integer.getInteger(ASYNC_CLIENT + "defaultMaxTotalConnections", 2000);
-        private int defaultMaxConnectionPerHost = Integer.getInteger(ASYNC_CLIENT + "defaultMaxConnectionsPerHost", 2000);
+        private int defaultMaxTotalConnections = Integer.getInteger(ASYNC_CLIENT + "defaultMaxTotalConnections", -1);
+        private int defaultMaxConnectionPerHost = Integer.getInteger(ASYNC_CLIENT + "defaultMaxConnectionsPerHost", -1);
         private int defaultConnectionTimeOutInMs = Integer.getInteger(ASYNC_CLIENT + "defaultConnectionTimeoutInMS", 60 * 1000);
         private int defaultIdleConnectionTimeoutInMs = Integer.getInteger(ASYNC_CLIENT + "defaultIdleConnectionTimeoutInMS", 60 * 1000);
         private int defaultRequestTimeoutInMs = Integer.getInteger(ASYNC_CLIENT + "defaultRequestTimeoutInMS", 60 * 1000);

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -665,7 +665,7 @@ private String getBaseUrl(URI uri){
             port = getPort(uri);
             url = url.substring(0,url.length() -1) + ":" + port;
         }
-        return url.substring(0,url.lastIndexOf(":") + String.valueOf(port).length() +1);
+        return url.substring(0,url.indexOf(":", 9) + String.valueOf(port).length() +1);
     }
     
     private static int getPort(URI uri) {

File: src/main/java/com/ning/http/client/RequestBuilderBase.java
Patch:
@@ -63,8 +63,8 @@ public RequestImpl(Request prototype) {
                 this.stringData = prototype.getStringData();
                 this.streamData = prototype.getStreamData();
                 this.entityWriter = prototype.getEntityWriter();
-                this.params = (prototype.getParams() == null ? null : new FluentStringsMap());
-                this.queryParams = (prototype.getQueryParams() == null ? null : new FluentStringsMap());
+                this.params = (prototype.getParams() == null ? null : new FluentStringsMap(prototype.getParams()));
+                this.queryParams = (prototype.getQueryParams() == null ? null : new FluentStringsMap(prototype.getQueryParams()));
                 this.parts = (prototype.getParts() == null ? null : new ArrayList<Part>(prototype.getParts()));
                 this.virtualHost = prototype.getVirtualHost();
                 this.length = prototype.getLength();

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -374,7 +374,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                 nettyRequest.setContent(ChannelBuffers.copiedBuffer(b));
             } else if (request.getParams() != null) {
                 StringBuilder sb = new StringBuilder();
-                for (final Entry<String, List<String>> paramEntry : request.getParams().entrySet()) {
+                for (final Entry<String, List<String>> paramEntry : request.getParams()) {
                     for (final String value : paramEntry.getValue()) {
                         sb.append(paramEntry.getKey());
                         sb.append("=");

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -460,7 +460,8 @@ private <T> Future<T> doConnect(final Request request, final AsyncHandler<T> asy
         }
 
 
-        if (config.getMaxTotalConnections() != -1 && activeConnectionsCount.getAndIncrement()>= config.getMaxTotalConnections()) {
+        if (config.getMaxTotalConnections() != -1 && activeConnectionsCount.getAndIncrement() >= config.getMaxTotalConnections()) {
+            activeConnectionsCount.decrementAndGet();
             throw new IOException("Too many connections");
         }
 
@@ -646,6 +647,7 @@ private void markAsDoneAndCacheConnection(final NettyResponseFuture<?> future, f
             if (connectionPerHost.getAndIncrement() < config.getMaxConnectionPerHost()) {
                 connectionsPool.put(getBaseUrl(future.getURI()), channel);
             } else {
+                connectionPerHost.decrementAndGet();
                 log.warn("Maximum connections per hosts reached " + config.getMaxConnectionPerHost());
             }
         } else {

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -58,6 +58,7 @@
 import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
 import org.jboss.netty.handler.codec.http.CookieEncoder;
 import org.jboss.netty.handler.codec.http.DefaultCookie;
+import org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer;
 import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
 import org.jboss.netty.handler.codec.http.HttpChunk;
 import org.jboss.netty.handler.codec.http.HttpChunkTrailer;
@@ -595,8 +596,8 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
                 HttpChunk chunk = (HttpChunk) e.getMessage();
 
                 if (handler != null) {
-                    if (updateBodyAndInterrupt(handler, new ResponseBodyPart(future.getURI(),null, this,chunk)) || chunk.isLast()) {
-                        if (chunk instanceof HttpChunkTrailer) {
+                    if (chunk.isLast() || updateBodyAndInterrupt(handler, new ResponseBodyPart(future.getURI(),null, this,chunk))) {
+                        if (chunk instanceof DefaultHttpChunkTrailer) {
                             updateHeadersAndInterrupt(handler, new ResponseHeaders(future.getURI(),
                                     future.getHttpResponse(), this, (HttpChunkTrailer) chunk));
                         }

File: src/main/java/com/ning/http/client/providers/NettyAsyncResponse.java
Patch:
@@ -150,7 +150,7 @@ public boolean isRedirected() {
     /* @Override */
     public List<Cookie> getCookies() {
         if (cookies.isEmpty()) {
-            for (Map.Entry<String, List<String>> header : headers.getHeaders()) {
+            for (Map.Entry<String, List<String>> header : headers.getHeaders().entrySet()) {
                 if (header.getKey().equalsIgnoreCase("Set-Cookie")) {
                     // TODO: ask for parsed header
                     for (String value : header.getValue()) {

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -58,6 +58,7 @@
 import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
 import org.jboss.netty.handler.codec.http.CookieEncoder;
 import org.jboss.netty.handler.codec.http.DefaultCookie;
+import org.jboss.netty.handler.codec.http.DefaultHttpChunkTrailer;
 import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
 import org.jboss.netty.handler.codec.http.HttpChunk;
 import org.jboss.netty.handler.codec.http.HttpChunkTrailer;
@@ -595,8 +596,8 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
                 HttpChunk chunk = (HttpChunk) e.getMessage();
 
                 if (handler != null) {
-                    if (updateBodyAndInterrupt(handler, new ResponseBodyPart(future.getURI(),null, this,chunk)) || chunk.isLast()) {
-                        if (chunk instanceof HttpChunkTrailer) {
+                    if (chunk.isLast() || updateBodyAndInterrupt(handler, new ResponseBodyPart(future.getURI(),null, this,chunk))) {
+                        if (chunk instanceof DefaultHttpChunkTrailer) {
                             updateHeadersAndInterrupt(handler, new ResponseHeaders(future.getURI(),
                                     future.getHttpResponse(), this, (HttpChunkTrailer) chunk));
                         }

File: src/main/java/com/ning/http/client/providers/NettyAsyncResponse.java
Patch:
@@ -150,7 +150,7 @@ public boolean isRedirected() {
     /* @Override */
     public List<Cookie> getCookies() {
         if (cookies.isEmpty()) {
-            for (Map.Entry<String, List<String>> header : headers.getHeaders()) {
+            for (Map.Entry<String, List<String>> header : headers.getHeaders().entrySet()) {
                 if (header.getKey().equalsIgnoreCase("Set-Cookie")) {
                     // TODO: ask for parsed header
                     for (String value : header.getValue()) {

File: src/main/java/com/ning/http/client/HttpResponseBodyPart.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.ning.http.client;
 
-import com.ning.http.url.Url;
+import java.net.URI;
 
 /**
  * A callback class used when an HTTP response body is received.
  */
 public abstract class HttpResponseBodyPart extends HttpContent {
 
-    public HttpResponseBodyPart(Url url, AsyncHttpProvider<?> provider) {
-        super(url, provider);
+    public HttpResponseBodyPart(URI uri, AsyncHttpProvider<?> provider) {
+        super(uri, provider);
     }
 
     /**

File: src/main/java/com/ning/http/client/HttpResponseStatus.java
Patch:
@@ -16,15 +16,15 @@
  */
 package com.ning.http.client;
 
-import com.ning.http.url.Url;
+import java.net.URI;
 
 /**
  * A class that represent the HTTP response' status line (code + text)
  */
 public abstract class HttpResponseStatus extends HttpContent {
 
-    public HttpResponseStatus(Url url, AsyncHttpProvider<?> provider) {
-        super(url, provider);
+    public HttpResponseStatus(URI uri, AsyncHttpProvider<?> provider) {
+        super(uri, provider);
     }
 
     /**

File: src/test/java/com/ning/http/client/async/IdleStateHandlerTest.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.ning.http.client.AsyncHttpClient;
 import com.ning.http.client.AsyncHttpClientConfig;
-import com.ning.http.client.Response;
 import org.apache.log4j.BasicConfigurator;
 import org.mortbay.jetty.Connector;
 import org.mortbay.jetty.Server;
@@ -30,12 +29,10 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import java.net.ConnectException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 import static org.testng.Assert.assertEquals;
-import static org.testng.Assert.assertNotNull;
 
 
 public class IdleStateHandlerTest extends AbstractBasicTest {

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -110,7 +110,7 @@
  *
  *      String bodyResponse = f.get();
  * }
- * From any {@link HttpContent} sub classses, you can asynchronously process the response status,headers and body and decide when to
+ * From any {@link HttpContent} sub classes, you can asynchronously process the response status,headers and body and decide when to
  * stop the processing the response by throwing a new {link ResponseComplete} at any moment.
  *
  * This class can also be used without the need of {@link AsyncHandler}</p>

File: src/main/java/com/ning/http/client/AsyncHandler.java
Patch:
@@ -44,21 +44,21 @@ public static enum STATE { ABORT, CONTINUE }
      * @param bodyPart response's body part.
      * @throws Exception
      */
-    STATE onBodyPartReceived(HttpResponseBodyPart<T> bodyPart) throws Exception;
+    STATE onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception;
 
     /**
      * Invoked as soon as the HTTP status line has been received
      * @param responseStatus the status code and test of the response
      * @throws Exception
      */
-    STATE onStatusReceived(HttpResponseStatus<T> responseStatus) throws Exception;
+    STATE onStatusReceived(HttpResponseStatus responseStatus) throws Exception;
 
     /**
      * Invoked as soon as the HTTP headers has been received.
      * @param headers the HTTP headers.
      * @throws Exception
      */
-    STATE onHeadersReceived(HttpResponseHeaders<T> headers) throws Exception;
+    STATE onHeadersReceived(HttpResponseHeaders headers) throws Exception;
 
     /**
      * Invoked once the HTTP response has been fully received

File: src/main/java/com/ning/http/client/AsyncHttpProvider.java
Patch:
@@ -47,8 +47,8 @@ public interface AsyncHttpProvider<A> {
      * @param bodyParts  list of {@link HttpResponseBodyPart}
      * @return a {@link Response}
      */
-    public Response prepareResponse(HttpResponseStatus<A> status,
-                                    HttpResponseHeaders<A> headers,
-                                    Collection<HttpResponseBodyPart<A>> bodyParts);
+    public Response prepareResponse(HttpResponseStatus status,
+                                    HttpResponseHeaders headers,
+                                    Collection<HttpResponseBodyPart> bodyParts);
 
 }

File: src/main/java/com/ning/http/client/Headers.java
Patch:
@@ -164,7 +164,7 @@ public Headers replace(final String name, final String... values) {
      * Replaces the indicated header with the given values.
      *
      * @param name  The header name
-     * @param value The new header value
+     * @param values The new header value
      * @return This object
      */
     public Headers replace(final String name, final Collection<String> values) {

File: src/main/java/com/ning/http/client/HttpResponseBodyPart.java
Patch:
@@ -20,10 +20,10 @@
 /**
  * A callback class used when an HTTP response body is received.
  */
-public abstract class HttpResponseBodyPart<R> extends HttpContent<R> {
+public abstract class HttpResponseBodyPart extends HttpContent {
 
-    public HttpResponseBodyPart(Url url, R response, AsyncHttpProvider<R> provider) {
-        super(url, response, provider);
+    public HttpResponseBodyPart(Url url, AsyncHttpProvider<?> provider) {
+        super(url, provider);
     }
 
     /**

File: src/main/java/com/ning/http/client/HttpResponseStatus.java
Patch:
@@ -21,10 +21,10 @@
 /**
  * A class that represent the HTTP response' status line (code + text)
  */
-public abstract class HttpResponseStatus<R> extends HttpContent<R> {
+public abstract class HttpResponseStatus extends HttpContent {
 
-    public HttpResponseStatus(Url url, R response, AsyncHttpProvider<R> provider) {
-        super(url, response, provider);
+    public HttpResponseStatus(Url url, AsyncHttpProvider<?> provider) {
+        super(url, provider);
     }
 
     /**

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -466,9 +466,9 @@ public void close() {
     }
 
     /* @Override */
-    public Response prepareResponse(final HttpResponseStatus<HttpResponse> status,
-                                    final HttpResponseHeaders<HttpResponse> headers,
-                                    final Collection<HttpResponseBodyPart<HttpResponse>> bodyParts) {
+    public Response prepareResponse(final HttpResponseStatus status,
+                                    final HttpResponseHeaders headers,
+                                    final Collection<HttpResponseBodyPart> bodyParts) {
         return new NettyAsyncResponse(status,headers,bodyParts);
     }
     

File: src/test/java/com/ning/http/client/async/AbstractBasicTest.java
Patch:
@@ -208,17 +208,17 @@ public void onThrowable(Throwable t) {
         }
 
         /* @Override */
-        public STATE onBodyPartReceived(final HttpResponseBodyPart<String> content) throws Exception {
+        public STATE onBodyPartReceived(final HttpResponseBodyPart content) throws Exception {
             return STATE.CONTINUE;
         }
 
         /* @Override */
-        public STATE onStatusReceived(final HttpResponseStatus<String> responseStatus) throws Exception {
+        public STATE onStatusReceived(final HttpResponseStatus responseStatus) throws Exception {
             return STATE.CONTINUE;
         }
 
         /* @Override */
-        public STATE onHeadersReceived(final HttpResponseHeaders<String> headers) throws Exception {
+        public STATE onHeadersReceived(final HttpResponseHeaders headers) throws Exception {
             return STATE.CONTINUE;
         }
 

File: src/test/java/com/ning/http/client/async/RC10KTest.java
Patch:
@@ -136,18 +136,18 @@ public void onThrowable(Throwable t) {
             log.warn("onThrowable called.", t);
         }
 
-        public STATE onBodyPartReceived(HttpResponseBodyPart<Integer> event) throws Exception {
+        public STATE onBodyPartReceived(HttpResponseBodyPart event) throws Exception {
             String s = new String(event.getBodyPartBytes());
             result.compareAndSet(-1, new Integer(s.trim().equals("") ? "-1" : s));
             return STATE.CONTINUE;
         }
 
-        public STATE onStatusReceived(HttpResponseStatus<Integer> event) throws Exception {
+        public STATE onStatusReceived(HttpResponseStatus event) throws Exception {
             assertEquals(event.getStatusCode(), 200);
             return STATE.CONTINUE;
         }
 
-        public STATE onHeadersReceived(HttpResponseHeaders<Integer> event) throws Exception {
+        public STATE onHeadersReceived(HttpResponseHeaders event) throws Exception {
             assertEquals(event.getHeaders().getHeaderValue(ARG_HEADER), arg);
             return STATE.CONTINUE;
         }

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -711,7 +711,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)
         Throwable cause = e.getCause();
 
         if (log.isDebugEnabled())
-            log.debug("I/O Exception during read or doConnect: ", e.getCause());
+            log.debug("I/O Exception during read or doConnect: ", cause);
         if (ctx.getAttachment() instanceof NettyResponseFuture<?>) {
             NettyResponseFuture<?> future = (NettyResponseFuture<?>) ctx.getAttachment();
 

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -420,8 +420,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));
                     nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes()));
 
-                    if (request.getHeaders().getHeaderValues(Headers.CONTENT_TYPE).isEmpty()
-                            && request.getHeaders().getHeaderValue(Headers.CONTENT_TYPE) == null) {
+                    if (!request.getHeaders().isDefined(Headers.CONTENT_TYPE)) {
                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE,"application/x-www-form-urlencoded");
                     }
 

File: src/test/java/com/ning/http/client/async/AbstractBasicTest.java
Patch:
@@ -193,7 +193,7 @@ public Response onCompleted(Response response) throws Exception {
         /* @Override */
         public void onThrowable(Throwable t) {
             t.printStackTrace();
-            Assert.fail("Unexpected exception", t);
+            Assert.fail("Unexpected exception: " + t.getMessage(), t);
         }
 
     }

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -426,7 +426,7 @@ private static HttpRequest construct(AsyncHttpClientConfig config,
                     nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(sb.length()));
                     nettyRequest.setContent(ChannelBuffers.copiedBuffer(sb.toString().getBytes()));
 
-                    if (request.getHeaders().getHeaderValues(Headers.CONTENT_TYPE) == null
+                    if (request.getHeaders().getHeaderValues(Headers.CONTENT_TYPE).isEmpty()
                             && request.getHeaders().getHeaderValue(Headers.CONTENT_TYPE) == null) {
                         nettyRequest.setHeader(HttpHeaders.Names.CONTENT_TYPE,"application/x-www-form-urlencoded");
                     }

File: src/test/java/com/ning/http/client/async/RemoteSiteTest.java
Patch:
@@ -152,9 +152,10 @@ public void testGoogleComWithTimeout() throws IOException, BrokenBarrierExceptio
         }
     }
 
-    @Test(groups = "async", enabled = false)
+    @Test
     public void asyncStatusHEADContentLenghtTest() throws Throwable {
-        NettyAsyncHttpProvider n = new NettyAsyncHttpProvider(new AsyncHttpClientConfig.Builder().build());
+        NettyAsyncHttpProvider n = new NettyAsyncHttpProvider(
+                new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build());
 
         final CountDownLatch l = new CountDownLatch(1);
         Request request = new RequestBuilder(RequestType.HEAD)

File: src/main/java/com/ning/http/client/Headers.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 public class Headers implements Iterable<Pair<String, String>> {
-    public static final String CONTENT_TYPE = "Content-type";
+    public static final String CONTENT_TYPE = "Content-Type";
 
     private List<Pair<String, String>> headers = new ArrayList<Pair<String, String>>();
 

File: src/test/java/com/ning/http/client/async/Relative302Test.java
Patch:
@@ -118,8 +118,8 @@ public void redirected302InvalidTest() throws Throwable {
         AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build();
         AsyncHttpClient c = new AsyncHttpClient(cg);
 
+        // If the test hit a proxy, no ConnectException will be thrown and instead of 404 will be returned.
         try {
-            // Some OS will throw an exception
             Response response = c.preparePost(TARGET_URL)
                     .setHeader("X-redirect", "http://www.grroooogle.com/")
                     .execute().get();

File: src/test/java/com/ning/http/client/async/Relative302Test.java
Patch:
@@ -35,6 +35,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
+import java.net.ConnectException;
 import java.nio.channels.UnresolvedAddressException;
 import java.util.Enumeration;
 import java.util.concurrent.BrokenBarrierException;
@@ -126,7 +127,7 @@ public void redirected302InvalidTest() throws Throwable {
             assertNotNull(response);
             assertEquals(response.getStatusCode(),404);
         } catch (ExecutionException ex) {
-            assertEquals(ex.getCause().getClass(),UnresolvedAddressException.class);
+            assertEquals(ex.getCause().getClass(), ConnectException.class);
         }
     }
 

File: src/test/java/com/ning/http/client/async/AbstractBasicTest.java
Patch:
@@ -76,7 +76,6 @@ public void handle(String pathInContext,
                     httpResponse.sendRedirect(httpRequest.getHeader("X-redirect"));
                     return;
                 }
-
                 httpResponse.addHeader("X-" + param, httpRequest.getHeader(param));
             }
 

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -549,7 +549,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
         try{
             if (e.getMessage() instanceof HttpResponse) {
                 HttpResponse response = (HttpResponse) e.getMessage();
-                // Required if there is some trailling headers.
+                // Required if there is some trailing headers.
                 future.setHttpResponse(response);
 
                 String ka = response.getHeader("Connection");

File: src/test/java/com/ning/http/client/async/PostWithQSTest.java
Patch:
@@ -41,7 +41,7 @@ public void handle(String s,
             if ("POST".equalsIgnoreCase(request.getMethod())) {
                 String qs = request.getQueryString();
                 ServletInputStream is = request.getInputStream();
-                if (qs != null && !qs.isEmpty() && is.available() == 3) {
+                if (qs != null && !qs.equals("") && is.available() == 3) {
                     response.setStatus(HttpServletResponse.SC_OK);
                     byte buf[] = new byte[is.available()];
                     is.readLine(buf, 0, is.available());

File: src/test/java/com/ning/http/client/async/RemoteSiteTest.java
Patch:
@@ -152,9 +152,10 @@ public void testGoogleComWithTimeout() throws IOException, BrokenBarrierExceptio
         }
     }
 
-    @Test(groups = "async", enabled = false)
+    @Test
     public void asyncStatusHEADContentLenghtTest() throws Throwable {
-        NettyAsyncHttpProvider n = new NettyAsyncHttpProvider(new AsyncHttpClientConfig.Builder().build());
+        NettyAsyncHttpProvider n = new NettyAsyncHttpProvider(
+                new AsyncHttpClientConfig.Builder().setFollowRedirects(true).build());
 
         final CountDownLatch l = new CountDownLatch(1);
         Request request = new RequestBuilder(RequestType.HEAD)

File: src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
Patch:
@@ -128,7 +128,7 @@ public int getMaxConnectionPerHost() {
      *
      * @return the maximum time in millisecond an {@link com.ning.http.client.AsyncHttpClient} can wait when connecting to a remote host
      */
-    public long getConnectionTimeoutInMs() {
+    public int getConnectionTimeoutInMs() {
         return connectionTimeOutInMs;
     }
 
@@ -137,7 +137,7 @@ public long getConnectionTimeoutInMs() {
      *
      * @return the maximum time in millisecond an {@link com.ning.http.client.AsyncHttpClient} can stay idle.
      */
-    public long getIdleConnectionTimeoutInMs() {
+    public int getIdleConnectionTimeoutInMs() {
         return idleConnectionTimeoutInMs;
     }
 

File: src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -236,8 +236,8 @@ public void asyncStatusHEADContentLenghtTest() throws Throwable {
                 .addHeader("Content-Lenght","1")
                 .setUrl(TARGET_URL)
                 .build();
-        n.execute(request, new AsyncCompletionHandlerAdapter() {
 
+        n.execute(request, new AsyncCompletionHandlerAdapter() {
             @Override
             public Response onCompleted(Response response) throws Exception {
                 Assert.assertEquals(response.getStatusCode(), 200);

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -461,8 +461,10 @@ private final static HttpRequest construct(AsyncHttpClientConfig config,
                 break;
             case PUT:
                 if (request.getByteData() != null) {
+                    nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, String.valueOf(request.getByteData().length));
                     nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getByteData()));
                 } else if (request.getStringData() != null) {
+                    nettyRequest.setHeader(HttpHeaders.Names.CONTENT_LENGTH, request.getStringData().length());                    
                     nettyRequest.setContent(ChannelBuffers.copiedBuffer(request.getStringData(), "UTF-8"));
                 }
                 break;

File: src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -582,7 +582,6 @@ public void asyncDoPutTest() throws Throwable {
         Response response = c.preparePut(TARGET_URL).setHeaders(h).setBody(sb.toString()).execute(new AsyncCompletionHandlerAdapter()).get();
 
         Assert.assertEquals(response.getStatusCode(), 200);
-        Assert.assertEquals(response.getHeader("X-param_1"), null);
 
     }
 

File: src/main/java/com/ning/http/client/providers/NettyAsyncResponse.java
Patch:
@@ -94,7 +94,7 @@ public InputStream getResponseBodyAsStream() throws IOException {
             // (2) we need a CompositeByteArrayInputStream to avoid
             // copying the bytes.
             if (bp.getClass().isAssignableFrom(ResponseBodyPart.class)){
-                buf.writeBytes(((ResponseBodyPart)bp).chunk().getContent());
+                buf.writeBytes(bp.getBodyPartBytes());
             }
         }
         return new ChannelBufferInputStream(buf); 

File: src/test/java/com/ning/http/client/async/BasicHttpsTest.java
Patch:
@@ -247,7 +247,7 @@ public void multipleSSLRequestsTest() throws Throwable {
 
         SSLContext sslContext = null;
         try {
-            InputStream keyStoreStream = AsyncClientTest.class.getResourceAsStream("ssltest-cacerts.jks");
+            InputStream keyStoreStream = ComplexClientTest.class.getResourceAsStream("ssltest-cacerts.jks");
             char[] keyStorePassword = "changeit".toCharArray();
             KeyStore ks = KeyStore.getInstance("JKS");
             ks.load(keyStoreStream, keyStorePassword);

File: src/test/java/com/ning/http/client/async/ComplexClientTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.testng.Assert.assertEquals;
 import static org.testng.Assert.assertNotNull;
 
-public class AsyncClientTest extends AbstractBasicTest {
+public class ComplexClientTest extends AbstractBasicTest {
 
     @Test
     public void multipleRequestsTest() throws Throwable {

File: src/test/java/com/ning/http/client/async/AsyncClientTest.java
Patch:
@@ -51,7 +51,7 @@ public void multipleRequestsTest() throws Throwable {
     @Test
     public void multipleMaxConnectionOpenTest() throws Throwable {
         AsyncHttpClientConfig cg = new AsyncHttpClientConfig.Builder().setKeepAlive(true)
-                .setConnectionTimeoutInMs(1000).setMaximumConnectionsTotal(1).build();
+                .setConnectionTimeoutInMs(5000).setMaximumConnectionsTotal(1).build();
         AsyncHttpClient c = new AsyncHttpClient(cg);
 
         String body = "hello there";

File: src/test/java/com/ning/http/client/async/BasicHttpsTest.java
Patch:
@@ -129,7 +129,6 @@ public void handle(String pathInContext,
                 httpResponse.getOutputStream().write(bytes);
             }
 
-
             httpResponse.setStatus(200);
             httpResponse.getOutputStream().flush();
             httpResponse.getOutputStream().close();

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -121,12 +121,12 @@
  *
  * Finally, you can configure the AsyncHttpClient using an {@link AsyncHttpClientConfig} instance</p>
  * {@code
- *      AsyncHttpClient c = new AsyncHttpClient(new AsyncHttpClientConfig.Builder().setRequestTimeout(...).build());
+ *      AsyncHttpClient c = new AsyncHttpClient(new AsyncHttpClientConfig.Builder().setRequestTimeoutInMs(...).build());
  *      Future<Response> f = c.prepareGet(TARGET_URL).execute();
  *      Response r = f.get();
  * }
  *
- * An instance of this class will cache every HTTP 1.1 connections and close them when the {@link AsyncHttpClientConfig#getIdleConnectionTimeout()}
+ * An instance of this class will cache every HTTP 1.1 connections and close them when the {@link AsyncHttpClientConfig#getIdleConnectionTimeoutInMs()}
  * expires. This object can hold many persistent connections to different host.
  *
  */

File: src/test/java/com/ning/http/client/async/AsyncProvidersBasicTest.java
Patch:
@@ -955,7 +955,7 @@ public void onThrowable(Throwable t) {
     public void asyncDoGetDelayHandlerTest() throws Throwable {
         Headers h = new Headers();
         h.add("LockThread", "true");
-        AsyncHttpClient client = new AsyncHttpClient(new AsyncHttpClientConfig.Builder().setRequestTimeout(5 * 1000).build());
+        AsyncHttpClient client = new AsyncHttpClient(new AsyncHttpClientConfig.Builder().setRequestTimeoutInMs(5 * 1000).build());
 
         // Use a latch in case the assert fail
         final CountDownLatch latch = new CountDownLatch(1);

File: src/test/java/com/ning/http/client/async/RemoteSiteTest.java
Patch:
@@ -47,7 +47,7 @@ public class RemoteSiteTest {
     public void before() {
         BasicConfigurator.configure();
         b = new CyclicBarrier(2);
-        c = new AsyncHttpClient(new AsyncHttpClientConfig.Builder().setRequestTimeout(10000).build());
+        c = new AsyncHttpClient(new AsyncHttpClientConfig.Builder().setRequestTimeoutInMs(10000).build());
         t = null;
         h = new AsyncCompletionHandler<Response>() {
             public void onThrowable(Throwable t) {

File: src/main/java/com/ning/http/multipart/PartBase.java
Patch:
@@ -16,9 +16,8 @@
 package com.ning.http.multipart;
 
 /**
- * Provides setters and getters for the basic Part properties.
- *
- * @author Michael Becke
+ * This class is an adaptation of the Apache HttpClient implementation
+ * @link http://hc.apache.org/httpclient-3.x/
  */
 public abstract class PartBase extends Part {
 

File: src/main/java/com/ning/http/multipart/RequestEntity.java
Patch:
@@ -19,7 +19,8 @@
 import java.io.OutputStream;
 
 /**
- * @since 3.0
+ * This class is an adaptation of the Apache HttpClient implementation
+ * @link http://hc.apache.org/httpclient-3.x/
  */
 public interface RequestEntity {
 

File: src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.ning.http.client;
 
-import javax.net.ssl.SSLContext;
 import javax.net.ssl.SSLEngine;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;

File: src/main/java/com/ning/http/client/HttpResponseBodyPart.java
Patch:
@@ -22,8 +22,8 @@
  */
 public abstract class HttpResponseBodyPart<R> extends HttpContent<R> {
 
-    public HttpResponseBodyPart(Url url, R response, AsyncHttpProvider provider) {
-        super(url,response, provider);
+    public HttpResponseBodyPart(Url url, R response, AsyncHttpProvider<R> provider) {
+        super(url, response, provider);
     }
 
     /**

File: src/main/java/com/ning/http/client/Request.java
Patch:
@@ -23,7 +23,6 @@
 import java.io.OutputStream;
 import java.util.Collection;
 import java.util.List;
-import java.util.Map;
 
 public interface Request {
 

File: src/main/java/com/ning/http/client/providers/NettyAsyncResponse.java
Patch:
@@ -79,16 +79,16 @@ public String getResponseBody() throws IOException {
 
     String contentToString(String charset) throws UnsupportedEncodingException {
         StringBuilder b = new StringBuilder();
-        for (HttpResponseBodyPart bp: bodyParts){
-            b.append(new String(bp.getBodyPartBytes(),charset));
+        for (HttpResponseBodyPart<?> bp : bodyParts) {
+            b.append(new String(bp.getBodyPartBytes(), charset));
         }
         return b.toString();
     }
 
     /* @Override */
     public InputStream getResponseBodyAsStream() throws IOException {
         ChannelBuffer buf =  ChannelBuffers.dynamicBuffer();
-        for (HttpResponseBodyPart bp: bodyParts){
+        for (HttpResponseBodyPart<?> bp : bodyParts){
             // Ugly. TODO
             // (1) We must remove the downcast,
             // (2) we need a CompositeByteArrayInputStream to avoid

File: src/test/java/com/ning/http/client/async/AbstractBasicTest.java
Patch:
@@ -179,17 +179,17 @@ public void onThrowable(Throwable t) {
         }
 
         /* @Override */
-        public STATE onBodyPartReceived(final HttpResponseBodyPart content) throws Exception {
+        public STATE onBodyPartReceived(final HttpResponseBodyPart<String> content) throws Exception {
             return STATE.CONTINUE;
         }
 
         /* @Override */
-        public STATE onStatusReceived(final HttpResponseStatus responseStatus) throws Exception {
+        public STATE onStatusReceived(final HttpResponseStatus<String> responseStatus) throws Exception {
             return STATE.CONTINUE;
         }
 
         /* @Override */
-        public STATE onHeadersReceived(final HttpResponseHeaders headers) throws Exception {
+        public STATE onHeadersReceived(final HttpResponseHeaders<String> headers) throws Exception {
             return STATE.CONTINUE;
         }
 

File: src/main/java/com/ning/http/client/providers/NettyResponseFuture.java
Patch:
@@ -167,6 +167,7 @@ public final void abort(final Throwable t) {
         if (exEx.get() == null){
             exEx.set(new ExecutionException(t));
         }
+        asyncHandler.onThrowable(t);        
         isDone.set(true);
         latch.countDown();
     }

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -398,7 +398,7 @@ public <T> Future<T> execute(final Request request, final AsyncHandler<T> handle
         config.reaper().schedule(new Callable<Object>() {
             public Object call() {
                 if (!f.isDone()) {
-                    f.onThrowable(new TimeoutException());
+                    handler.onThrowable(new TimeoutException());
                 }
                 return null;
             }
@@ -543,7 +543,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e)
             NettyResponseFuture<?> future = (NettyResponseFuture<?>) ctx.getAttachment();
 
             if (future!= null)
-                future.onThrowable(cause);
+                future.getAsyncHandler().onThrowable(cause);
         }
         if (log.isDebugEnabled()){
             log.debug(e);

File: src/main/java/com/ning/http/client/AsyncHttpClient.java
Patch:
@@ -74,21 +74,21 @@
  *          private StringBuilder builder = new StringBuilder();
  *
  *          &#64;Override
- *          public void onStatusReceived(ResponseStatus s) throws Exception &#123;
+ *          public void onStatusReceived(HttpResponseStatus s) throws Exception &#123;
  *               // The Status have been read
  *               // If you don't want to read the headers,body, or stop processing the response
  *               throw new ResponseComplete();
  *          }
  *
  *          &#64;Override
- *          public void onHeadersReceived(ResponseHeaders bodyPart) throws Exception &#123;
+ *          public void onHeadersReceived(HttpResponseHeaders bodyPart) throws Exception &#123;
  *               // The headers have been read
  *               // If you don't want to read the body, or stop processing the response
  *               throw new ResponseComplete();
  *          }
  *          &#64;Override
  *
- *          public void onBodyPartReceived(ResponseBodyPart bodyPart) throws Exception &#123;
+ *          public void onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception &#123;
  *               builder.append(new String(bodyPart));
  *          &#125;
  *

File: src/main/java/com/ning/http/client/fancy/TypeMapper.java
Patch:
@@ -39,7 +39,7 @@ public void onThrowable(Throwable t)
                     @Override
                     public STATE onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception
                     {
-                        b.append(bodyPart.getBodyPartBytes());
+                        b.append(new String(bodyPart.getBodyPartBytes()));
                         return STATE.CONTINUE;
                     }
 

File: src/main/java/com/ning/http/client/fancy/TypeMapper.java
Patch:
@@ -1,5 +1,6 @@
 package com.ning.http.client.fancy;
 
+import com.ning.http.client.AsyncCompletionHandlerBase;
 import com.ning.http.client.AsyncHandler;
 import com.ning.http.client.HttpResponseBodyPart;
 import com.ning.http.client.HttpResponseHeaders;
@@ -18,7 +19,7 @@ public TypeMapper() {
             @Override
             public AsyncHandler<Response> build()
             {
-                return null;
+                return new AsyncCompletionHandlerBase();
             }
         });
 

File: src/main/java/com/ning/http/client/AsyncHttpClientConfig.java
Patch:
@@ -95,7 +95,7 @@ private AsyncHttpClientConfig(int maxTotalConnections,
     /**
      * A {@link ScheduledExecutorService} used to expire idle connections.
      *
-     * @return
+     * @return {@link ScheduledExecutorService} 
      */
     public ScheduledExecutorService reaper() {
         return reaper;

File: src/main/java/com/ning/http/url/Url.java
Patch:
@@ -160,7 +160,7 @@ public Protocol getProtocol() {
     /**
      * Gets the path part of this url. The value is url-decoded.
      *
-     * @return
+     * @return he path part of this url. The value is url-decoded.
      */
     public String getPath() {
         return path;
@@ -427,7 +427,7 @@ public boolean equals(Object obj) {
      * Is the given Url string in a valid format?
      *
      * @param url
-     * @return
+     * @return true if valid
      */
     public static boolean isValidUrl(String url) {
         try {

File: src/main/java/com/ning/http/client/Response.java
Patch:
@@ -59,6 +59,8 @@ public interface Response {
      */
     public String getResponseBodyExcerpt(int maxLength) throws IOException;
 
+    public String getResponseBody() throws IOException;
+
     public Url getUrl() throws MalformedURLException;
 
     public String getContentType();

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -335,11 +335,10 @@ public <T> Future<T> execute(final Request request, final AsyncHandler<T> handle
         channel.getConfig().setConnectTimeoutMillis((int) config.getConnectionTimeoutInMs());
         channel.getPipeline().getContext(NettyAsyncHttpProvider.class).setAttachment(f);
 
-        final ChannelFuture cf = channel.write(nettyRequest);
+        channel.write(nettyRequest);
         config.reaper().schedule(new Callable<Object>() {
             public Object call() {
-                if (!cf.isDone() && !cf.isCancelled()) {
-                    cf.cancel();
+                if (!f.isDone()) {
                     f.onThrowable(new TimeoutException());
                 }
                 return null;

File: src/main/java/com/ning/http/client/providers/NettyResponseFuture.java
Patch:
@@ -141,6 +141,7 @@ V getContent() {
     }
 
     public void done() {
+        isDone.set(true);
         getContent();
         latch.countDown();
     }

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -338,7 +338,7 @@ public <T> Future<T> execute(final Request request, final AsyncHandler<T> handle
         final ChannelFuture cf = channel.write(nettyRequest);
         config.reaper().schedule(new Callable<Object>() {
             public Object call() {
-                if (!cf.isDone() || !cf.isCancelled()) {
+                if (!cf.isDone() && !cf.isCancelled()) {
                     cf.cancel();
                     f.onThrowable(new TimeoutException());
                 }

File: src/main/java/com/ning/http/client/providers/NettyAsyncHttpProvider.java
Patch:
@@ -404,7 +404,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex
                 }
             }
 
-            if (response.getStatus().getCode() != 200 || nettyRequest.getMethod().equals(HttpMethod.HEAD)) {
+            if (!response.isChunked() || response.getStatus().getCode() != 200 || nettyRequest.getMethod().equals(HttpMethod.HEAD)) {
                 asyncResponse.getFuture().done();
             }
 

File: src/main/java/com/ning/http/client/AsyncHttpProvider.java
Patch:
@@ -25,13 +25,13 @@
 public interface AsyncHttpProvider {
 
     /**
-     * Send the request and invoke the {@link com.ning.http.client.AsyncHandler} when the response arrive.
+     * Execute the request and invoke the {@link com.ning.http.client.AsyncHandler} when the response arrive.
      *
      * @param handler an instance of {@link AsyncHandler}
      * @return a {@link java.util.concurrent.Future}
      * @throws IOException
      */
-    public <T> Future<T> handle(Request request, AsyncHandler<T> handler) throws IOException;
+    public <T> Future<T> execute(Request request, AsyncHandler<T> handler) throws IOException;
 
     /**
      * Close the current underlying TCP/HTTP connection.

