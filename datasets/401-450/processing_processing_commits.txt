File: core/src/processing/core/PFont.java
Patch:
@@ -782,7 +782,7 @@ public PShape getShape(char ch, float detail) {
       case PathIterator.SEG_CUBICTO:  // 3 points
 //        System.out.println("cubicto");
 //        PApplet.println(iterPoints);
-        s.quadraticVertex(iterPoints[0], iterPoints[1],
+        s.bezierVertex(iterPoints[0], iterPoints[1],
                           iterPoints[2], iterPoints[3],
                           iterPoints[4], iterPoints[5]);
         break;

File: core/src/processing/core/PFont.java
Patch:
@@ -782,7 +782,7 @@ public PShape getShape(char ch, float detail) {
       case PathIterator.SEG_CUBICTO:  // 3 points
 //        System.out.println("cubicto");
 //        PApplet.println(iterPoints);
-        s.quadraticVertex(iterPoints[0], iterPoints[1],
+        s.bezierVertex(iterPoints[0], iterPoints[1],
                           iterPoints[2], iterPoints[3],
                           iterPoints[4], iterPoints[5]);
         break;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1482,10 +1482,10 @@ public void vertex(float x, float y, float z) {
     // http://dev.processing.org/bugs/show_bug.cgi?id=444
     if (shape == POLYGON) {
       if (vertexCount > 0) {
+        float[] pvertex = vertices[vertexCount-1];
         if ((Math.abs(pvertex[X] - x) < EPSILON) &&
             (Math.abs(pvertex[Y] - y) < EPSILON) &&
             (Math.abs(pvertex[Z] - z) < EPSILON)) {
-        float[] pvertex = vertices[vertexCount-1];
           // this vertex is identical, don't add it,
           // because it will anger the triangulator
           return;

File: core/src/processing/core/PMatrix2D.java
Patch:
@@ -381,7 +381,7 @@ public PVector mult(PVector source, PVector target) {
    * If out is null or not length four, a new float array will be returned.
    * The values for vec and out can be the same (though that's less efficient).
    */
-  public float[] mult(float vec[], float out[]) {
+  public float[] mult(float[] vec, float[] out) {
     if (out == null || out.length != 2) {
       out = new float[2];
     }

File: core/src/processing/core/PShapeOBJ.java
Patch:
@@ -327,7 +327,7 @@ static protected void parseMTL(PApplet parent, String mtlfn, String path,
       while ((line = reader.readLine()) != null) {
         // Parse the line
         line = line.trim();
-        String parts[] = line.split("\\s+");
+        String[] parts = line.split("\\s+");
         if (parts.length > 0) {
           // Extract the material data.
           if (parts[0].equals("newmtl")) {

File: core/src/processing/core/PShapeSVG.java
Patch:
@@ -1499,7 +1499,7 @@ static public class Gradient extends PShapeSVG {
     public Gradient(PShapeSVG parent, XML properties) {
       super(parent, properties, true);
 
-      XML elements[] = properties.getChildren();
+      XML[] elements = properties.getChildren();
       offset = new float[elements.length];
       color = new int[elements.length];
 
@@ -1555,7 +1555,7 @@ public LinearGradient(PShapeSVG parent, XML properties) {
         properties.getString("gradientTransform");
 
       if (transformStr != null) {
-        float t[] = parseTransform(transformStr).get(null);
+        float[] t = parseTransform(transformStr).get(null);
         this.transform = new AffineTransform(t[0], t[3], t[1], t[4], t[2], t[5]);
 
         Point2D t1 = transform.transform(new Point2D.Float(x1, y1), null);
@@ -1587,7 +1587,7 @@ public RadialGradient(PShapeSVG parent, XML properties) {
         properties.getString("gradientTransform");
 
       if (transformStr != null) {
-        float t[] = parseTransform(transformStr).get(null);
+        float[] t = parseTransform(transformStr).get(null);
         this.transform = new AffineTransform(t[0], t[3], t[1], t[4], t[2], t[5]);
 
         Point2D t1 = transform.transform(new Point2D.Float(cx, cy), null);

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -67,7 +67,7 @@ public class PGraphicsFX2D extends PGraphics {
   /// break the shape at the next vertex (next vertex() call is a moveto())
   boolean breakShape;
 
-  private float pathCoordsBuffer[] = new float[6];
+  private float[] pathCoordsBuffer = new float[6];
 
   /// coordinates for internal curve calculation
   float[] curveCoordX;
@@ -76,7 +76,7 @@ public class PGraphicsFX2D extends PGraphics {
   float[] curveDrawY;
 
   int transformCount;
-  Affine transformStack[] = new Affine[MATRIX_STACK_DEPTH];
+  Affine[] transformStack = new Affine[MATRIX_STACK_DEPTH];
 
 //  Line2D.Float line = new Line2D.Float();
 //  Ellipse2D.Float ellipse = new Ellipse2D.Float();
@@ -239,7 +239,7 @@ public void texture(PImage image) {
   @Override
   public void vertex(float x, float y) {
     if (vertexCount == vertices.length) {
-      float temp[][] = new float[vertexCount<<1][VERTEX_FIELD_COUNT];
+      float[][] temp = new float[vertexCount<<1][VERTEX_FIELD_COUNT];
       System.arraycopy(vertices, 0, temp, 0, vertexCount);
       vertices = temp;
       //message(CHATTER, "allocating more vertices " + vertices.length);

File: core/src/processing/opengl/LinePath.java
Patch:
@@ -324,7 +324,7 @@ public final void reset() {
 
 
   static public class PathIterator {
-    float floatCoords[];
+    float[] floatCoords;
 
     int typeIdx;
 
@@ -334,7 +334,7 @@ static public class PathIterator {
 
     LinePath path;
 
-    static final int curvecoords[] = { 2, 2, 0 };
+    static final int[] curvecoords = { 2, 2, 0 };
 
     PathIterator(LinePath p2df) {
       this.path = p2df;
@@ -470,7 +470,7 @@ private static void strokeTo(LinePath src, float width, int caps, int join,
 
 
   private static void pathTo(PathIterator pi, LineStroker lsink) {
-    float coords[] = new float[6];
+    float[] coords = new float[6];
     while (!pi.isDone()) {
       int color;
       switch (pi.currentSegment(coords)) {

File: core/src/processing/opengl/PGL.java
Patch:
@@ -475,7 +475,7 @@ protected int getDefaultReadBuffer()  {
   }
 
 
-  protected boolean isFBOBacked() {;
+  protected boolean isFBOBacked() {
     return fboLayerEnabled;
   }
 
@@ -2127,7 +2127,7 @@ protected int[] getGLVersion() {
     String[] parts = version.split(" ");
     for (int i = 0; i < parts.length; i++) {
       if (0 < parts[i].indexOf(".")) {
-        String nums[] = parts[i].split("\\.");
+        String[] nums = parts[i].split("\\.");
         try {
           res[0] = Integer.parseInt(nums[0]);
         } catch (NumberFormatException e) { }

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -722,7 +722,7 @@ protected class FontOutline implements PGL.FontOutline {
     PathIterator iter;
 
     public FontOutline(char ch, Font font) {
-      char textArray[] = new char[] { ch };
+      char[] textArray = new char[] { ch };
       FontRenderContext frc = getFontRenderContext(font);
       GlyphVector gv = font.createGlyphVector(frc, textArray);
       Shape shp = gv.getOutline();
@@ -733,7 +733,7 @@ public boolean isDone() {
       return iter.isDone();
     }
 
-    public int currentSegment(float coords[]) {
+    public int currentSegment(float[] coords) {
       return iter.currentSegment(coords);
     }
 

File: app/src/processing/app/ui/Recent.java
Patch:
@@ -242,6 +242,8 @@ public void actionPerformed(ActionEvent e) {
   synchronized static public void remove(Editor editor) {
     int index = findRecord(editor.getSketch().getMainFilePath());
     if (index != -1) {
+      System.out.println("removing " + editor.getSketch().getMainFilePath());
+      new Exception().printStackTrace(System.out);
       records.remove(index);
     }
   }
@@ -291,6 +293,7 @@ synchronized static public void append(Editor editor) {
       // If this sketch is already in the menu, remove it
       remove(editor);
 
+      // If the list is full, remove the first entry
       if (records.size() == Preferences.getInteger("recent.count")) {
         records.remove(0);  // remove the first entry
       }

File: app/src/processing/app/contrib/ContribProgressBar.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2013-15 The Processing Foundation
+  Copyright (c) 2013-20 The Processing Foundation
   Copyright (c) 2011-12 Ben Fry and Casey Reas
 
   This program is free software; you can redistribute it and/or modify

File: app/src/processing/app/contrib/ContributionType.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2013 The Processing Foundation
+  Copyright (c) 2013-20 The Processing Foundation
   Copyright (c) 2011-12 Ben Fry and Casey Reas
 
   This program is free software; you can redistribute it and/or modify
@@ -172,7 +172,7 @@ public File getSketchbookFolder() {
   }
 
 
-  boolean isCandidate(File potential) {
+  public boolean isCandidate(File potential) {
     return (potential.isDirectory() &&
             new File(potential, toString()).exists() &&
             !isTempFolderName(potential.getName()));
@@ -237,7 +237,7 @@ LocalContribution load(Base base, File folder) {
 
 
   ArrayList<LocalContribution> listContributions(Editor editor) {
-    ArrayList<LocalContribution> contribs = new ArrayList<LocalContribution>();
+    ArrayList<LocalContribution> contribs = new ArrayList<>();
     switch (this) {
     case LIBRARY:
       contribs.addAll(editor.getMode().contribLibraries);

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -1098,7 +1098,7 @@ protected void handleLaunch(boolean present, boolean tweak) {
             if (!tweak) {
               runtime = jmode.handleLaunch(sketch, listener, present);
             } else {
-              runtime = jmode.handleTweak(sketch, listener);
+              runtime = jmode.handleTweak(sketch, listener, JavaEditor.this);
             }
           }
         }

File: java/src/processing/mode/java/JavaMode.java
Patch:
@@ -140,9 +140,7 @@ public void run() {
 
   /** Start a sketch in tweak mode */
   public Runner handleTweak(Sketch sketch,
-                            RunnerListener listener) throws SketchException {
-//                            final boolean present) throws SketchException {
-    final JavaEditor editor = (JavaEditor) listener;
+                            RunnerListener listener, JavaEditor editor) throws SketchException {
 
     // first try to build the unmodified code
     JavaBuild build = new JavaBuild(sketch);

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -1098,7 +1098,7 @@ protected void handleLaunch(boolean present, boolean tweak) {
             if (!tweak) {
               runtime = jmode.handleLaunch(sketch, listener, present);
             } else {
-              runtime = jmode.handleTweak(sketch, listener);
+              runtime = jmode.handleTweak(sketch, listener, JavaEditor.this);
             }
           }
         }

File: java/src/processing/mode/java/JavaMode.java
Patch:
@@ -140,9 +140,7 @@ public void run() {
 
   /** Start a sketch in tweak mode */
   public Runner handleTweak(Sketch sketch,
-                            RunnerListener listener) throws SketchException {
-//                            final boolean present) throws SketchException {
-    final JavaEditor editor = (JavaEditor) listener;
+                            RunnerListener listener, JavaEditor editor) throws SketchException {
 
     // first try to build the unmodified code
     JavaBuild build = new JavaBuild(sketch);

File: app/src/processing/app/ui/Editor.java
Patch:
@@ -3083,9 +3083,9 @@ public void updateErrorTable(List<Problem> problems) {
   }
 
 
-    public void highlight(Problem p) {
+  public void highlight(Problem p) {
     if (p != null) {
-      highlight(p.getTabIndex(), p.getStartOffset(), p.getStartOffset());
+      highlight(p.getTabIndex(), p.getStartOffset(), p.getStopOffset());
     }
   }
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -2697,7 +2697,7 @@ protected void handleMouseEvent(MouseEvent event) {
                                event.getX(), event.getY(),
                                button, event.getCount());
       }
-      if (button == MouseEvent.RELEASE) {
+      if (action == MouseEvent.RELEASE) {
         macosxLeftButtonWithCtrlPressed = false;
       }
     }

File: core/src/processing/core/PApplet.java
Patch:
@@ -2697,7 +2697,7 @@ protected void handleMouseEvent(MouseEvent event) {
                                event.getX(), event.getY(),
                                button, event.getCount());
       }
-      if (button == MouseEvent.RELEASE) {
+      if (action == MouseEvent.RELEASE) {
         macosxLeftButtonWithCtrlPressed = false;
       }
     }

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -255,6 +255,7 @@ public String preprocess(File srcFolder,
           writer.close();
         }
       } catch (RuntimeException re) {
+        re.printStackTrace();
         throw new SketchException("Could not write " + java.getAbsolutePath());
       }
     } catch (antlr.RecognitionException re) {

File: java/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -1230,7 +1230,8 @@ protected void writeFooter(PrintWriter out, String className) {
     if ((mode == Mode.STATIC) || (mode == Mode.ACTIVE)) {
       // doesn't remove the original size() method,
       // but calling size() again in setup() is harmless.
-      if (!hasMethod("settings") && sizeInfo.hasSettings()) {
+      if (!hasMethod("settings") &&
+          sizeInfo != null && sizeInfo.hasSettings()) {
         out.println(indent + "public void settings() { " + sizeInfo.getSettings() + " }");
       }
 

File: app/src/processing/app/contrib/ListPanel.java
Patch:
@@ -35,7 +35,6 @@
 import processing.app.Base;
 import processing.app.Platform;
 import processing.app.ui.Toolkit;
-import sun.swing.SwingUtilities2;
 
 
 // The "Scrollable" implementation and its methods here take care of preventing

File: app/src/processing/app/contrib/ManagerFrame.java
Patch:
@@ -73,7 +73,7 @@ public ManagerFrame(Base base) {
     modesTab = new ContributionTab(this, ContributionType.MODE);
     toolsTab = new ContributionTab(this, ContributionType.TOOL);
     examplesTab = new ContributionTab(this, ContributionType.EXAMPLES);
-    updatesTab = new UpdateContributionTab(this, null);
+    updatesTab = new UpdateContributionTab(this);
   }
 
 

File: java/src/processing/mode/java/Debugger.java
Patch:
@@ -39,6 +39,7 @@
 import javax.swing.tree.DefaultMutableTreeNode;
 
 import processing.app.Messages;
+import processing.app.RunnerListenerEdtAdapter;
 import processing.app.Sketch;
 import processing.app.SketchCode;
 import processing.mode.java.debug.*;
@@ -201,7 +202,7 @@ public synchronized void startDebug() {
         //lineMap = LineMapping.generateMapping(srcPath + File.separator + mainClassName + ".java");
 
         log("launching debuggee runtime");
-        runtime = new Runner(build, editor);
+        runtime = new Runner(build, new RunnerListenerEdtAdapter(editor));
         VirtualMachine vm = runtime.debug(null); // non-blocking
         if (vm == null) {
           loge("error 37: launch failed", null);

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -1094,10 +1094,11 @@ protected void handleLaunch(boolean present, boolean tweak) {
         synchronized (runtimeLock) {
           if (runtimeLaunchRequested) {
             runtimeLaunchRequested = false;
+            RunnerListener listener = new RunnerListenerEdtAdapter(JavaEditor.this);
             if (!tweak) {
-              runtime = jmode.handleLaunch(sketch, JavaEditor.this, present);
+              runtime = jmode.handleLaunch(sketch, listener, present);
             } else {
-              runtime = jmode.handleTweak(sketch, JavaEditor.this);
+              runtime = jmode.handleTweak(sketch, listener);
             }
           }
         }

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -6821,6 +6821,9 @@ protected void setGLSettings() {
       } else {
         // offscreen surfaces are transparent by default.
         background(0x00 << 24 | (backgroundColor & 0xFFFFFF));
+
+        // Recreate offscreen FBOs
+        restartPGL();
       }
 
       // Sets the default projection and camera (initializes modelview).

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1190,7 +1190,7 @@ protected void createPolyBuffers() {
     if (!polyBuffersCreated || polyBuffersContextIsOutdated()) {
       polyBuffersContext = pgl.getCurrentContext();
 
-      bufPolyVertex = new VertexBuffer(this, PGL.ARRAY_BUFFER, 3, PGL.SIZEOF_FLOAT);
+      bufPolyVertex = new VertexBuffer(this, PGL.ARRAY_BUFFER, 4, PGL.SIZEOF_FLOAT);
       bufPolyColor = new VertexBuffer(this, PGL.ARRAY_BUFFER, 1, PGL.SIZEOF_INT);
       bufPolyNormal = new VertexBuffer(this, PGL.ARRAY_BUFFER, 3, PGL.SIZEOF_FLOAT);
       bufPolyTexcoord = new VertexBuffer(this, PGL.ARRAY_BUFFER, 2, PGL.SIZEOF_FLOAT);

File: app/src/processing/app/ui/EditorConsole.java
Patch:
@@ -233,6 +233,8 @@ public void message(String what, boolean err) {
       // https://github.com/processing/processing/issues/5462
       // Some discussion on the Apple's developer forums seems to suggest that is not serious:
       // https://forums.developer.apple.com/thread/105244
+    } else if (err && what.contains("NSWindow drag regions should only be invalidated on the Main Thread")) {  
+      // Keep hiding warnings triggered by JOGL on recent macOS versions (this is from 10.14 onwards I think).      
     } else if (err && what.contains("Make pbuffer:")) {
       // Remove initalization warning from LWJGL.
     } else if (err && what.contains("XInitThreads() called for concurrent")) {

File: app/src/processing/app/contrib/ManagerFrame.java
Patch:
@@ -73,7 +73,7 @@ public ManagerFrame(Base base) {
     modesTab = new ContributionTab(this, ContributionType.MODE);
     toolsTab = new ContributionTab(this, ContributionType.TOOL);
     examplesTab = new ContributionTab(this, ContributionType.EXAMPLES);
-    updatesTab = new UpdateContributionTab(this, null);
+    updatesTab = new UpdateContributionTab(this);
   }
 
 

File: build/jre/src/Downloader.java
Patch:
@@ -120,7 +120,7 @@ void download() throws IOException {
 
     //printHeaders(conn);
     //conn.connect();
-    while (conn.getResponseCode() == 302) {
+    while (conn.getResponseCode() == 302 || conn.getResponseCode() == 301) {
       Map<String, List<String>> headers = conn.getHeaderFields();
       List<String> location = headers.get("Location");
       if (location.size() == 1) {

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1190,7 +1190,7 @@ protected void createPolyBuffers() {
     if (!polyBuffersCreated || polyBuffersContextIsOutdated()) {
       polyBuffersContext = pgl.getCurrentContext();
 
-      bufPolyVertex = new VertexBuffer(this, PGL.ARRAY_BUFFER, 3, PGL.SIZEOF_FLOAT);
+      bufPolyVertex = new VertexBuffer(this, PGL.ARRAY_BUFFER, 4, PGL.SIZEOF_FLOAT);
       bufPolyColor = new VertexBuffer(this, PGL.ARRAY_BUFFER, 1, PGL.SIZEOF_INT);
       bufPolyNormal = new VertexBuffer(this, PGL.ARRAY_BUFFER, 3, PGL.SIZEOF_FLOAT);
       bufPolyTexcoord = new VertexBuffer(this, PGL.ARRAY_BUFFER, 2, PGL.SIZEOF_FLOAT);

File: core/src/processing/core/PGraphics.java
Patch:
@@ -6177,7 +6177,7 @@ public void style(PStyle s) {
     ellipseMode(s.ellipseMode);
     shapeMode(s.shapeMode);
 
-    if (blendMode != 0) {
+    if (blendMode != s.blendMode) {
       blendMode(s.blendMode);
     }
 

File: core/src/processing/core/PGraphics.java
Patch:
@@ -6177,7 +6177,7 @@ public void style(PStyle s) {
     ellipseMode(s.ellipseMode);
     shapeMode(s.shapeMode);
 
-    if (blendMode != 0) {
+    if (blendMode != s.blendMode) {
       blendMode(s.blendMode);
     }
 

File: app/src/processing/app/Language.java
Patch:
@@ -100,6 +100,7 @@ static private String[] listSupported() {
       "ko", // Korean
       "nl", // Dutch, Nederlands
       "pt", // Portuguese
+      "ru", // Russian
       "tr", // Turkish
       "uk", // Ukrainian
       "zh"  // Chinese

File: app/src/processing/app/Sketch.java
Patch:
@@ -1404,8 +1404,8 @@ public void setCurrentCode(int which) {
 //      System.out.println(current.visited);
 //    }
     // if current is null, then this is the first setCurrent(0)
-    if (((currentIndex == which) && (current != null))
-      || which >= codeCount || which < 0) {
+    if (which < 0 || which >= codeCount ||
+        ((currentIndex == which) && (current == code[currentIndex]))) {
       return;
     }
 

File: app/src/processing/app/ui/ChangeDetector.java
Patch:
@@ -215,8 +215,7 @@ private void checkFiles() {
         );
       }
       editor.rebuildHeader();
-      sketch.handleNextCode();
-      sketch.handlePrevCode();
+      sketch.setCurrentCode(sketch.getCurrentCodeIndex());
       editor.repaintHeader();
 
       editor.sketchChanged();

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -513,7 +513,8 @@ protected int getGLSLVersion() {
 
   @Override
   protected String getGLSLVersionSuffix() {
-    if (context.isGLESProfile()) {
+    VersionNumber vn = context.getGLSLVersionNumber();
+    if (context.isGLESProfile() && 1 < vn.getMajor()) {
       return " es";
     } else {
       return "";

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -513,7 +513,8 @@ protected int getGLSLVersion() {
 
   @Override
   protected String getGLSLVersionSuffix() {
-    if (context.isGLESProfile()) {
+    VersionNumber vn = context.getGLSLVersionNumber();
+    if (context.isGLESProfile() && 1 < vn.getMajor()) {
       return " es";
     } else {
       return "";

File: app/src/processing/app/Messages.java
Patch:
@@ -156,7 +156,7 @@ static public void showError(String title, String message, Throwable e) {
    * Testing a new warning window that includes the stack trace.
    */
   static public void showTrace(String title, String message,
-                                       Throwable t, boolean fatal) {
+                               Throwable t, boolean fatal) {
     if (title == null) title = fatal ? "Error" : "Warning";
 
     if (Base.isCommandLine()) {

File: java/libraries/io/src/processing/io/GPIO.java
Patch:
@@ -389,14 +389,14 @@ public static void pinMode(int pin, int mode) {
     }
 
     // we need to give udev some time to change the file permissions behind our back
-    // retry for 500ms when writing to the file fails with -EPERM
+    // retry for 500ms when writing to the file fails with -EACCES
     long start = System.currentTimeMillis();
     do {
       ret = NativeInterface.writeFile(fn, out);
-      if (ret == -1) {
+      if (ret == -13) {
         Thread.yield();
       }
-    } while (ret == -1 && System.currentTimeMillis()-start < 500);
+    } while (ret == -13 && System.currentTimeMillis()-start < 500);
 
     if (ret < 0) {
       throw new RuntimeException(fn + ": " + NativeInterface.getError(ret));

File: java/libraries/io/src/processing/io/I2C.java
Patch:
@@ -125,7 +125,7 @@ public void endTransmission() {
     transmitting = false;
     out = null;
     if (ret < 0) {
-      if (ret == -5) {    // EIO
+      if (ret == -5 | ret == -121) {    // EIO | EREMOTEIO
         System.err.println("The device did not respond. Check the cabling and whether you are using the correct address.");
       }
       throw new RuntimeException(NativeInterface.getError(ret));
@@ -185,7 +185,7 @@ public byte[] read(int len) {
     transmitting = false;
     out = null;
     if (ret < 0) {
-      if (ret == -5) {    // EIO
+      if (ret == -5 | ret == -121) {    // EIO | EREMOTEIO
         System.err.println("The device did not respond. Check the cabling and whether you are using the correct address.");
       }
       throw new RuntimeException(NativeInterface.getError(ret));

File: core/src/processing/core/PShape.java
Patch:
@@ -22,6 +22,7 @@
 
 package processing.core;
 
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 

File: app/src/processing/app/Sketch.java
Patch:
@@ -1404,8 +1404,8 @@ public void setCurrentCode(int which) {
 //      System.out.println(current.visited);
 //    }
     // if current is null, then this is the first setCurrent(0)
-    if (((currentIndex == which) && (current != null))
-      || which >= codeCount || which < 0) {
+    if (which < 0 || which >= codeCount ||
+        ((currentIndex == which) && (current == code[currentIndex]))) {
       return;
     }
 

File: app/src/processing/app/ui/ChangeDetector.java
Patch:
@@ -215,8 +215,7 @@ private void checkFiles() {
         );
       }
       editor.rebuildHeader();
-      sketch.handleNextCode();
-      sketch.handlePrevCode();
+      sketch.setCurrentCode(sketch.getCurrentCodeIndex());
       editor.repaintHeader();
 
       editor.sketchChanged();

File: java/src/processing/mode/java/Debugger.java
Patch:
@@ -39,6 +39,7 @@
 import javax.swing.tree.DefaultMutableTreeNode;
 
 import processing.app.Messages;
+import processing.app.RunnerListenerEdtAdapter;
 import processing.app.Sketch;
 import processing.app.SketchCode;
 import processing.mode.java.debug.*;
@@ -201,7 +202,7 @@ public synchronized void startDebug() {
         //lineMap = LineMapping.generateMapping(srcPath + File.separator + mainClassName + ".java");
 
         log("launching debuggee runtime");
-        runtime = new Runner(build, editor);
+        runtime = new Runner(build, new RunnerListenerEdtAdapter(editor));
         VirtualMachine vm = runtime.debug(null); // non-blocking
         if (vm == null) {
           loge("error 37: launch failed", null);

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -1093,10 +1093,11 @@ protected void handleLaunch(boolean present, boolean tweak) {
         synchronized (runtimeLock) {
           if (runtimeLaunchRequested) {
             runtimeLaunchRequested = false;
+            RunnerListener listener = new RunnerListenerEdtAdapter(JavaEditor.this);
             if (!tweak) {
-              runtime = jmode.handleLaunch(sketch, JavaEditor.this, present);
+              runtime = jmode.handleLaunch(sketch, listener, present);
             } else {
-              runtime = jmode.handleTweak(sketch, JavaEditor.this);
+              runtime = jmode.handleTweak(sketch, listener);
             }
           }
         }

File: core/src/processing/opengl/PGL.java
Patch:
@@ -2232,7 +2232,7 @@ protected boolean hasPackedDepthStencilSupport() {
 
   protected boolean hasAnisoSamplingSupport() {
     int major = getGLVersion()[0];
-    if (major < 3) {
+    if (isES() || major < 3) {
       String ext = getString(EXTENSIONS);
       return -1 < ext.indexOf("_texture_filter_anisotropic");
     } else {

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1934,6 +1934,8 @@ public void blitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX
       gl2x.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
     } else if (gl3 != null) {
       gl3.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
+    } else if (gl3es3 != null) {
+      gl3es3.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
     } else {
       throw new RuntimeException(String.format(MISSING_GLFUNC_ERROR, "glBlitFramebuffer()"));
     }

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1950,6 +1950,8 @@ public void readBuffer(int buf) {
       gl2x.glReadBuffer(buf);
     } else if (gl3 != null) {
       gl3.glReadBuffer(buf);
+    } else if (gl3es3 != null) {
+      gl3es3.glReadBuffer(buf);
     } else {
       throw new RuntimeException(String.format(MISSING_GLFUNC_ERROR, "glReadBuffer()"));
     }

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1937,6 +1937,8 @@ public void renderbufferStorageMultisample(int target, int samples, int format,
       gl2x.glRenderbufferStorageMultisample(target, samples, format, width, height);
     } else if (gl3 != null) {
       gl3.glRenderbufferStorageMultisample(target, samples, format, width, height);
+    } else if (gl3es3 != null) {
+      gl3es3.glRenderbufferStorageMultisample(target, samples, format, width, height);
     } else {
       throw new RuntimeException(String.format(MISSING_GLFUNC_ERROR, "glRenderbufferStorageMultisample()"));
     }

File: core/src/processing/core/PApplet.java
Patch:
@@ -3492,7 +3492,7 @@ static public Process exec(String... args) {
     try {
       return Runtime.getRuntime().exec(args);
     } catch (Exception e) {
-      throw new RuntimeException("Could not open " + join(args, ' '), e);
+      throw new RuntimeException("Exception while attempting " + join(args, ' '), e);
     }
   }
 

File: java/src/processing/mode/java/runner/Runner.java
Patch:
@@ -766,9 +766,9 @@ public static boolean handleCommonErrors(final String exceptionClass,
 
     } else if (exceptionClass.equals("java.lang.UnsupportedClassVersionError")) {
       listener.statusError("UnsupportedClassVersionError: A library is using code compiled with an unsupported version of Java.");
-      err.println("This version of Processing only supports libraries and JAR files compiled for Java 1.6 or earlier.");
-      err.println("A library used by this sketch was compiled for Java 1.7 or later, ");
-      err.println("and needs to be recompiled to be compatible with Java 1.6.");
+      err.println("This version of Processing only supports libraries and JAR files compiled for Java 1.8 or earlier.");
+      err.println("A library used by this sketch was compiled for Java 1.9 or later, ");
+      err.println("and needs to be recompiled to be compatible with Java 1.8.");
 
     } else if (exceptionClass.equals("java.lang.NoSuchMethodError") ||
                exceptionClass.equals("java.lang.NoSuchFieldError")) {

File: java/src/processing/mode/java/runner/Runner.java
Patch:
@@ -766,9 +766,9 @@ public static boolean handleCommonErrors(final String exceptionClass,
 
     } else if (exceptionClass.equals("java.lang.UnsupportedClassVersionError")) {
       listener.statusError("UnsupportedClassVersionError: A library is using code compiled with an unsupported version of Java.");
-      err.println("This version of Processing only supports libraries and JAR files compiled for Java 1.6 or earlier.");
-      err.println("A library used by this sketch was compiled for Java 1.7 or later, ");
-      err.println("and needs to be recompiled to be compatible with Java 1.6.");
+      err.println("This version of Processing only supports libraries and JAR files compiled for Java 1.8 or earlier.");
+      err.println("A library used by this sketch was compiled for Java 1.9 or later, ");
+      err.println("and needs to be recompiled to be compatible with Java 1.8.");
 
     } else if (exceptionClass.equals("java.lang.NoSuchMethodError") ||
                exceptionClass.equals("java.lang.NoSuchFieldError")) {

File: core/src/processing/core/PGraphics.java
Patch:
@@ -7388,6 +7388,7 @@ protected void backgroundImpl() {
     pushStyle();
     pushMatrix();
     resetMatrix();
+    noStroke();
     fill(backgroundColor);
     rect(0, 0, width, height);
     popMatrix();

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -264,7 +264,7 @@ public void actionPerformed(ActionEvent e) {
     item.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {
         try {
-          new Welcome2(base, Preferences.getSketchbookPath().equals(Preferences.getOldSketchbookPath()));
+          new Welcome(base, Preferences.getSketchbookPath().equals(Preferences.getOldSketchbookPath()));
         } catch (IOException ioe) {
           Messages.showWarning("Unwelcome Error",
                                "Please report this error to\n" +

File: core/src/processing/data/Table.java
Patch:
@@ -2434,6 +2434,7 @@ public void insertRow(int insert, Object[] columnData) {
     setRow(insert, columnData);
   }
 
+
   /**
    * @webref table:method
    * @brief Removes a row from a table

File: core/src/processing/data/Table.java
Patch:
@@ -2428,8 +2428,10 @@ public void insertRow(int insert, Object[] columnData) {
         }
       }
     }
+    // Need to increment before setRow(), because it calls ensureBounds()
+    // https://github.com/processing/processing/issues/5406
+    ++rowCount;
     setRow(insert, columnData);
-    rowCount++;
   }
 
   /**

File: core/src/processing/core/PApplet.java
Patch:
@@ -3703,8 +3703,7 @@ public void dispose() {
     if (platform == MACOSX) {
       try {
         final String td = "processing.core.ThinkDifferent";
-        final Class<?> thinkDifferent =
-          Thread.currentThread().getContextClassLoader().loadClass(td);
+        final Class<?> thinkDifferent = getClass().getClassLoader().loadClass(td);
         thinkDifferent.getMethod("cleanup").invoke(null);
       } catch (Exception e) {
         e.printStackTrace();

File: java/src/processing/mode/java/Compiler.java
Patch:
@@ -68,6 +68,7 @@ static public boolean compile(JavaBuild build) throws SketchException {
       //"-noExit",  // not necessary for ecj
       "-source", "1.7",
       "-target", "1.7",
+      "-encoding", "utf8",
       "-classpath", build.getClassPath(),
       "-nowarn", // we're not currently interested in warnings (works in ecj)
       "-d", build.getBinFolder().getAbsolutePath() // output the classes in the buildPath

File: java/libraries/net/src/processing/net/Client.java
Patch:
@@ -46,7 +46,7 @@
  */
 public class Client implements Runnable {
 
-  protected static final int MAX_BUFFER_SIZE = 2 << 27; // 128 MB
+  protected static final int MAX_BUFFER_SIZE = 1 << 27; // 128 MB
 
   PApplet parent;
   Method clientEventMethod;
@@ -222,7 +222,7 @@ public void run() {
     byte[] readBuffer;
     { // make the read buffer same size as socket receive buffer so that
       // we don't waste cycles calling listeners when there is more data waiting
-      int readBufferSize = 2 << 16; // 64 KB (default socket receive buffer size)
+      int readBufferSize = 1 << 16; // 64 KB (default socket receive buffer size)
       try {
         readBufferSize = socket.getReceiveBufferSize();
       } catch (SocketException ignore) { }

File: java/libraries/net/src/processing/net/Client.java
Patch:
@@ -46,7 +46,7 @@
  */
 public class Client implements Runnable {
 
-  protected static final int MAX_BUFFER_SIZE = 2 << 27; // 128 MB
+  protected static final int MAX_BUFFER_SIZE = 1 << 27; // 128 MB
 
   PApplet parent;
   Method clientEventMethod;
@@ -222,7 +222,7 @@ public void run() {
     byte[] readBuffer;
     { // make the read buffer same size as socket receive buffer so that
       // we don't waste cycles calling listeners when there is more data waiting
-      int readBufferSize = 2 << 16; // 64 KB (default socket receive buffer size)
+      int readBufferSize = 1 << 16; // 64 KB (default socket receive buffer size)
       try {
         readBufferSize = socket.getReceiveBufferSize();
       } catch (SocketException ignore) { }

File: core/src/processing/core/PApplet.java
Patch:
@@ -3703,8 +3703,7 @@ public void dispose() {
     if (platform == MACOSX) {
       try {
         final String td = "processing.core.ThinkDifferent";
-        final Class<?> thinkDifferent =
-          Thread.currentThread().getContextClassLoader().loadClass(td);
+        final Class<?> thinkDifferent = getClass().getClassLoader().loadClass(td);
         thinkDifferent.getMethod("cleanup").invoke(null);
       } catch (Exception e) {
         e.printStackTrace();

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -1280,6 +1280,7 @@ public void setCursor(PImage image, int hotspotX, int hotspotY) {
     display.getEDTUtil().invoke(false, new Runnable() {
       @Override
       public void run() {
+        window.setPointerVisible(true);
         window.setPointerIcon(pi);
       }
     });

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -1280,6 +1280,7 @@ public void setCursor(PImage image, int hotspotX, int hotspotY) {
     display.getEDTUtil().invoke(false, new Runnable() {
       @Override
       public void run() {
+        window.setPointerVisible(true);
         window.setPointerIcon(pi);
       }
     });

File: java/src/processing/mode/java/pdex/PDEX.java
Patch:
@@ -1290,6 +1290,7 @@ static private List<JavaProblem> checkForMissingBraces(PreprocessedSketch ps) {
 
 
     static public String[] getImportSuggestions(ClassPath cp, String className) {
+      className = className.replace("[", "\\[").replace("]", "\\]");
       RegExpResourceFilter regf = new RegExpResourceFilter(
           Pattern.compile(".*"),
           Pattern.compile("(.*\\$)?" + className + "\\.class",

File: java/src/processing/mode/java/pdex/PDEX.java
Patch:
@@ -1290,6 +1290,7 @@ static private List<JavaProblem> checkForMissingBraces(PreprocessedSketch ps) {
 
 
     static public String[] getImportSuggestions(ClassPath cp, String className) {
+      className = className.replace("[", "\\[").replace("]", "\\]");
       RegExpResourceFilter regf = new RegExpResourceFilter(
           Pattern.compile(".*"),
           Pattern.compile("(.*\\$)?" + className + "\\.class",

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -6893,7 +6893,7 @@ protected void getGLParameters() {
     // overwrite the default shaders with vendor specific versions
     // if needed
     if (OPENGL_RENDERER.equals("VideoCore IV HW") ||    // Broadcom's binary driver for Raspberry Pi
-      OPENGL_RENDERER.equals("Gallium 0.4 on VC4")) {   // Mesa driver for same hardware
+      OPENGL_RENDERER.contains("VC4")) {   // Mesa driver for same hardware
         defLightShaderVertURL =
           PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/LightVert-vc4.glsl");
         defTexlightShaderVertURL =

File: app/src/processing/app/Mode.java
Patch:
@@ -53,8 +53,7 @@ public abstract class Mode {
   protected File folder;
 
   protected TokenMarker tokenMarker;
-  protected Map<String, String> keywordToReference =
-    new HashMap<String, String>();
+  protected Map<String, String> keywordToReference = new HashMap<>();
 
   protected Settings theme;
 //  protected Formatter formatter;
@@ -598,7 +597,7 @@ public void actionPerformed(ActionEvent e) {
       contrib.setEnabled(false);
       importMenu.add(contrib);
 
-      HashMap<String, JMenu> subfolders = new HashMap<String, JMenu>();
+      HashMap<String, JMenu> subfolders = new HashMap<>();
 
       for (Library library : contribLibraries) {
         JMenuItem item = new JMenuItem(library.getName());

File: core/src/processing/javafx/PSurfaceFX.java
Patch:
@@ -272,7 +272,7 @@ public void start(final Stage stage) {
           displayDevice = devices[displayNum - 1];
         } else {
           System.err.format("Display %d does not exist, " +
-                                "using the default display instead.%n", displayNum);
+                            "using the default display instead.%n", displayNum);
           for (int i = 0; i < devices.length; i++) {
             System.err.format("Display %d is %s%n", (i+1), devices[i]);
           }

File: core/src/processing/core/PApplet.java
Patch:
@@ -1376,7 +1376,7 @@ public void resume() { }
 
   /** Map of registered methods, stored by name. */
   HashMap<String, RegisteredMethods> registerMap =
-    new HashMap<String, PApplet.RegisteredMethods>();
+    new HashMap<>();
 
 
   class RegisteredMethods {
@@ -9063,7 +9063,7 @@ static public String[] split(String value, char delim) {
 
 
   static public String[] split(String value, String delim) {
-    ArrayList<String> items = new ArrayList<String>();
+    List<String> items = new ArrayList<>();
     int index;
     int offset = 0;
     while ((index = value.indexOf(delim, offset)) != -1) {
@@ -9188,7 +9188,7 @@ static public String[] match(String str, String regexp) {
   static public String[][] matchAll(String str, String regexp) {
     Pattern p = matchPattern(regexp);
     Matcher m = p.matcher(str);
-    ArrayList<String[]> results = new ArrayList<String[]>();
+    List<String[]> results = new ArrayList<>();
     int count = m.groupCount() + 1;
     while (m.find()) {
       String[] groups = new String[count];

File: core/src/processing/core/PApplet.java
Patch:
@@ -3457,7 +3457,7 @@ static public Process launch(String... args) {
    * method, which uses the operating system's launcher to open the files.
    * It's always a good idea to use a full path to the executable here.
    * <pre>
-   * exec("/usr/bin/say", "-v", "Pipe Organ", "welcome to the command line");
+   * exec("/usr/bin/say", "welcome to the command line");
    * </pre>
    * Or if you want to wait until it's completed, something like this:
    * <pre>

File: core/src/processing/data/FloatDict.java
Patch:
@@ -120,6 +120,8 @@ public int size() {
    * Helpful for situations like sorting and then grabbing the top 50 entries.
    */
   public void resize(int length) {
+    if (length == count) return;
+
     if (length > count) {
       throw new IllegalArgumentException("resize() can only be used to shrink the dictionary");
     }
@@ -192,8 +194,8 @@ public void remove() {
       }
 
       public Entry next() {
+        ++index;
         Entry e = new Entry(keys[index], values[index]);
-        index++;
         return e;
       }
 

File: core/src/processing/data/IntDict.java
Patch:
@@ -193,8 +193,8 @@ public void remove() {
       }
 
       public Entry next() {
+        ++index;
         Entry e = new Entry(keys[index], values[index]);
-        index++;
         return e;
       }
 

File: core/src/processing/data/StringDict.java
Patch:
@@ -214,8 +214,8 @@ public void remove() {
       }
 
       public Entry next() {
+        ++index;
         Entry e = new Entry(keys[index], values[index]);
-        index++;
         return e;
       }
 

File: core/src/processing/data/FloatDict.java
Patch:
@@ -23,7 +23,7 @@ public class FloatDict {
   protected float[] values;
 
   /** Internal implementation for faster lookups */
-  private HashMap<String, Integer> indices = new HashMap<String, Integer>();
+  private HashMap<String, Integer> indices = new HashMap<>();
 
 
   public FloatDict() {
@@ -146,12 +146,12 @@ public void resize(int length) {
    */
   public void clear() {
     count = 0;
-    indices = new HashMap<String, Integer>();
+    indices = new HashMap<>();
   }
 
 
   private void resetIndices() {
-    indices = new HashMap<String, Integer>(count);
+    indices = new HashMap<>(count);
     for (int i = 0; i < count; i++) {
       indices.put(keys[i], i);
     }

File: core/src/processing/data/IntDict.java
Patch:
@@ -23,7 +23,7 @@ public class IntDict {
   protected int[] values;
 
   /** Internal implementation for faster lookups */
-  private HashMap<String, Integer> indices = new HashMap<String, Integer>();
+  private HashMap<String, Integer> indices = new HashMap<>();
 
 
   public IntDict() {
@@ -147,12 +147,12 @@ public void resize(int length) {
    */
   public void clear() {
     count = 0;
-    indices = new HashMap<String, Integer>();
+    indices = new HashMap<>();
   }
 
 
   private void resetIndices() {
-    indices = new HashMap<String, Integer>(count);
+    indices = new HashMap<>(count);
     for (int i = 0; i < count; i++) {
       indices.put(keys[i], i);
     }

File: core/src/processing/data/StringDict.java
Patch:
@@ -23,7 +23,7 @@ public class StringDict {
   protected String[] values;
 
   /** Internal implementation for faster lookups */
-  private HashMap<String, Integer> indices = new HashMap<String, Integer>();
+  private HashMap<String, Integer> indices = new HashMap<>();
 
 
   public StringDict() {
@@ -168,12 +168,12 @@ public void resize(int length) {
    */
   public void clear() {
     count = 0;
-    indices = new HashMap<String, Integer>();
+    indices = new HashMap<>();
   }
 
 
   private void resetIndices() {
-    indices = new HashMap<String, Integer>(count);
+    indices = new HashMap<>(count);
     for (int i = 0; i < count; i++) {
       indices.put(keys[i], i);
     }

File: java/src/processing/mode/java/pdex/SourceUtils.java
Patch:
@@ -284,7 +284,7 @@ static public void scrubCommentsAndStrings(StringBuilder p) {
           }
           break;
         case IN_BLOCK_COMMENT:
-          if (pch == '*' && ch == '/' && (i - blockStart) > 1) {
+          if (pch == '*' && ch == '/' && (i - blockStart) > 0) {
             state = OUT;
           }
           break;

File: java/src/processing/mode/java/pdex/SourceUtils.java
Patch:
@@ -284,7 +284,7 @@ static public void scrubCommentsAndStrings(StringBuilder p) {
           }
           break;
         case IN_BLOCK_COMMENT:
-          if (pch == '*' && ch == '/' && (i - blockStart) > 1) {
+          if (pch == '*' && ch == '/' && (i - blockStart) > 0) {
             state = OUT;
           }
           break;

File: java/src/processing/mode/java/pdex/PDEX.java
Patch:
@@ -1193,7 +1193,7 @@ static private List<JavaProblem> checkForCurlyQuotes(PreprocessedSketch ps) {
         int tabLine = ps.tabOffsetToTabLine(tabIndex, tabOffset);
 
         String message = Language.interpolate("editor.status.bad_curly_quote", q);
-        JavaProblem problem = new JavaProblem(message, JavaProblem.ERROR, tabIndex, tabLine, 10);
+        JavaProblem problem = new JavaProblem(message, JavaProblem.ERROR, tabIndex, tabLine);
         problem.setPDEOffsets(tabOffset, tabOffset+1);
 
         problems.add(problem);
@@ -1229,7 +1229,7 @@ static private List<JavaProblem> checkForCurlyQuotes(PreprocessedSketch ps) {
                 } else {
                   message = Language.interpolate("editor.status.bad_curly_quote", q);
                 }
-                JavaProblem p = new JavaProblem(message, JavaProblem.ERROR, in.tabIndex, line, 10);
+                JavaProblem p = new JavaProblem(message, JavaProblem.ERROR, in.tabIndex, line);
                 p.setPDEOffsets(tabStart, tabStop);
                 problems2.add(p);
               }
@@ -1255,7 +1255,7 @@ static private List<JavaProblem> checkForMissingBraces(PreprocessedSketch ps) {
               new JavaProblem(braceResult[0] < 0
                                   ? Language.interpolate("editor.status.missing.left_curly_bracket")
                                   : Language.interpolate("editor.status.missing.right_curly_bracket"),
-                              JavaProblem.ERROR, tabIndex, braceResult[1], 8);
+                              JavaProblem.ERROR, tabIndex, braceResult[1]);
           problem.setPDEOffsets(braceResult[3], braceResult[3] + 1);
           problems.add(problem);
         }

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -524,6 +524,7 @@ public String preprocess(File srcFolder,
   protected boolean ignorableImport(String pkg) {
     if (pkg.startsWith("java.")) return true;
     if (pkg.startsWith("javax.")) return true;
+    if (pkg.startsWith("javafx.")) return true;
 
     if (pkg.startsWith("processing.core.")) return true;
     if (pkg.startsWith("processing.data.")) return true;

File: app/src/processing/app/Base.java
Patch:
@@ -55,9 +55,9 @@
 public class Base {
   // Added accessors for 0218 because the UpdateCheck class was not properly
   // updating the values, due to javac inlining the static final values.
-  static private final int REVISION = 262;
+  static private final int REVISION = 263;
   /** This might be replaced by main() if there's a lib/version.txt file. */
-  static private String VERSION_NAME = "0262"; //$NON-NLS-1$
+  static private String VERSION_NAME = "0263"; //$NON-NLS-1$
   /** Set true if this a proper release rather than a numbered revision. */
 
   /**

File: app/src/processing/app/Language.java
Patch:
@@ -95,6 +95,7 @@ static private String[] listSupported() {
       "el", // Greek
       "es", // Spanish
       "fr", // French, Français
+      "it", // Italiano, Italian
       "ja", // Japanese
       "ko", // Korean
       "nl", // Dutch, Nederlands

File: app/src/processing/app/ui/Editor.java
Patch:
@@ -3106,9 +3106,10 @@ public void updateEditorStatus() {
 
 
   /**
-   * @return the Problem for the first error or warning on 'line'
+   * @return the Problem for the most relevant error or warning on 'line',
+   *         defaulting to the first.
    */
-  Problem findProblem(int line) {
+  protected Problem findProblem(int line) {
     int currentTab = getSketch().getCurrentCodeIndex();
     return problems.stream()
         .filter(p -> p.getTabIndex() == currentTab)

File: java/src/processing/mode/java/pdex/SourceUtils.java
Patch:
@@ -355,7 +355,7 @@ static public List<JavaProblem> checkForMissingBraces(StringBuilder p, int[] tab
         if (depth < 0) {
           JavaProblem problem =
               new JavaProblem("Found one too many } characters without { to match it.",
-                              JavaProblem.ERROR, tabIndex, lineNumber);
+                              JavaProblem.ERROR, tabIndex, lineNumber, 8);
           problem.setPDEOffsets(i - tabStartOffset, i - tabStartOffset + 1);
           problems.add(problem);
           continue tabLoop;
@@ -364,7 +364,7 @@ static public List<JavaProblem> checkForMissingBraces(StringBuilder p, int[] tab
       if (depth > 0) {
         JavaProblem problem =
             new JavaProblem("Found one too many { characters without } to match it.",
-                            JavaProblem.ERROR, tabIndex, lineNumber - 1);
+                            JavaProblem.ERROR, tabIndex, lineNumber - 1, 8);
         problem.setPDEOffsets(tabEndOffset - tabStartOffset - 2, tabEndOffset - tabStartOffset - 1);
         problems.add(problem);
       }

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -3482,6 +3482,7 @@ public float textDescent() {
 
   @Override
   protected float textWidthImpl(char buffer[], int start, int stop) {
+    if (textFont == null) defaultFontOrDeath("textWidth");
     Object font = textFont.getNative();
     float twidth = 0;
     if (font != null) twidth = pgl.getTextWidth(font, buffer, start, stop);

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -3482,6 +3482,7 @@ public float textDescent() {
 
   @Override
   protected float textWidthImpl(char buffer[], int start, int stop) {
+    if (textFont == null) defaultFontOrDeath("textWidth");
     Object font = textFont.getNative();
     float twidth = 0;
     if (font != null) twidth = pgl.getTextWidth(font, buffer, start, stop);

File: app/src/processing/app/ui/EditorConsole.java
Patch:
@@ -69,8 +69,8 @@ public class EditorConsole extends JScrollPane {
   public EditorConsole(Editor editor) {
     this.editor = editor;
 
-    maxLineCount = Preferences.getInteger("console.lines");
-    maxCharCount = Preferences.getInteger("console.chars");
+    maxLineCount = Preferences.getInteger("console.scrollback.lines");
+    maxCharCount = Preferences.getInteger("console.scrollback.chars");
 
     consoleDoc = new BufferedStyledDocument(10000, maxLineCount, maxCharCount);
     consoleTextPane = new JTextPane(consoleDoc);

File: app/src/processing/app/Library.java
Patch:
@@ -28,7 +28,7 @@ public class Library extends LocalContribution {
   StringList packageList;
 
   /** Per-platform exports for this library. */
-   HashMap<String, String[]> exportList;
+  HashMap<String, String[]> exportList;
 
   /** Applet exports (cross-platform by definition). */
   String[] appletExportList;

File: app/src/processing/app/ui/ChangeDetector.java
Patch:
@@ -218,6 +218,8 @@ private void checkFiles() {
       sketch.handleNextCode();
       sketch.handlePrevCode();
       editor.repaintHeader();
+
+      editor.sketchChanged();
     }
 
   }

File: app/src/processing/app/ui/Editor.java
Patch:
@@ -1125,6 +1125,8 @@ public void librariesChanged() { }
 
   public void codeFolderChanged() { }
 
+  public void sketchChanged() { }
+
 
   // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -10459,6 +10459,9 @@ static public void runSketch(final String[] args,
     // Remove 60fps limit on the JavaFX "pulse" timer
     System.setProperty("javafx.animation.fullspeed", "true");
 
+    // Doesn't seem to do anything helpful here (that can't be done via Runner)
+    //System.setProperty("com.apple.mrj.application.apple.menu.about.name", "potato");
+
     Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
       public void uncaughtException(Thread t, Throwable e) {
         e.printStackTrace();

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -796,7 +796,8 @@ protected boolean exportApplication(File destFolder,
 
       File macosFolder = new File(contentsFolder, "MacOS");
       macosFolder.mkdirs();
-      Util.copyFile(new File(contentsOrig, "MacOS/Processing"),
+      // This is an unsigned copy of the app binary (see build/build.xml)
+      Util.copyFile(mode.getContentFile("application/mac-app-stub"),
                     new File(contentsFolder, "MacOS/" + sketch.getName()));
 
       File pkgInfo = new File(contentsFolder, "PkgInfo");

File: java/src/processing/mode/java/Compiler.java
Patch:
@@ -39,7 +39,7 @@ public class Compiler {
 
   static HashMap<String, String> importSuggestions;
   static {
-    importSuggestions = new HashMap<String, String>();
+    importSuggestions = new HashMap<>();
     importSuggestions.put("Arrays", "java.util.Arrays");
     importSuggestions.put("Collections", "java.util.Collections");
     importSuggestions.put("Date", "java.util.Date");
@@ -188,7 +188,8 @@ public void close() { }
                                    "You might be missing a library.");
               System.err.println("Libraries must be " +
                                  "installed in a folder named 'libraries' " +
-                                 "inside the 'sketchbook' folder.");
+                                 "inside the sketchbook folder " +
+                                 "(see the Preferences window).");
             }
           }
 

File: core/src/processing/awt/PGraphicsJava2D.java
Patch:
@@ -2797,7 +2797,7 @@ public void updatePixels(int x, int y, int c, int d) {
     if (pixels != null) {
       getRaster().setDataElements(0, 0, pixelWidth, pixelHeight, pixels);
     }
-    modified = false;
+    modified = true;
   }
 
 

File: core/src/processing/awt/PGraphicsJava2D.java
Patch:
@@ -2797,7 +2797,7 @@ public void updatePixels(int x, int y, int c, int d) {
     if (pixels != null) {
       getRaster().setDataElements(0, 0, pixelWidth, pixelHeight, pixels);
     }
-    modified = false;
+    modified = true;
   }
 
 

File: java/libraries/io/src/processing/io/GPIO.java
Patch:
@@ -450,7 +450,7 @@ public static void releasePin(int pin) {
    *  @webref
    */
   public static void waitFor(int pin, int mode) {
-    waitForInterrupt(pin, mode, -1);
+    waitFor(pin, mode, -1);
   }
 
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -658,7 +658,7 @@ public class PApplet implements PConstants {
    * @see PApplet#keyReleased()
    */
   public boolean keyPressed;
-  int keyPressedCount;
+  public int keyPressedCount;
 
   /**
    * The last KeyEvent object passed into a mouse function.
@@ -2941,7 +2941,7 @@ protected void handleKeyEvent(KeyEvent event) {
       break;
     case KeyEvent.RELEASE:
       keyPressedCount--;
-      keyPressed = (keyPressedCount == 0);
+      keyPressed = (keyPressedCount > 0);
       keyReleased(keyEvent);
       break;
     case KeyEvent.TYPE:

File: core/src/processing/awt/PGraphicsJava2D.java
Patch:
@@ -1684,7 +1684,7 @@ public void update(PImage source, boolean tint, int tintColor) {
       WritableRaster wr = image.getRaster();
       if (tint) {
         if (tintedTemp == null || tintedTemp.length != source.pixelWidth) {
-          tintedTemp = new int[source.pixelHeight];
+          tintedTemp = new int[source.pixelWidth];
         }
         int a2 = (tintColor >> 24) & 0xff;
 //        System.out.println("tint color is " + a2);

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -1166,7 +1166,7 @@ public void update(PImage source, boolean tint, int tintColor) {
                 tintedTemp[x] = hi | (source.pixels[index++] & 0xFFFFFF);
               }
               //wr.setDataElements(0, y, source.width, 1, tintedTemp);
-              pw.setPixels(0, y, source.pixelWidth, 1, argbFormat, tintedTemp, 0, source.pixelHeight);
+              pw.setPixels(0, y, source.pixelWidth, 1, argbFormat, tintedTemp, 0, source.pixelWidth);
             }
           } else {
             int index = 0;

File: core/src/processing/awt/PGraphicsJava2D.java
Patch:
@@ -1684,7 +1684,7 @@ public void update(PImage source, boolean tint, int tintColor) {
       WritableRaster wr = image.getRaster();
       if (tint) {
         if (tintedTemp == null || tintedTemp.length != source.pixelWidth) {
-          tintedTemp = new int[source.pixelHeight];
+          tintedTemp = new int[source.pixelWidth];
         }
         int a2 = (tintColor >> 24) & 0xff;
 //        System.out.println("tint color is " + a2);

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -1166,7 +1166,7 @@ public void update(PImage source, boolean tint, int tintColor) {
                 tintedTemp[x] = hi | (source.pixels[index++] & 0xFFFFFF);
               }
               //wr.setDataElements(0, y, source.width, 1, tintedTemp);
-              pw.setPixels(0, y, source.pixelWidth, 1, argbFormat, tintedTemp, 0, source.pixelHeight);
+              pw.setPixels(0, y, source.pixelWidth, 1, argbFormat, tintedTemp, 0, source.pixelWidth);
             }
           } else {
             int index = 0;

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -5479,7 +5479,7 @@ protected void drawPixels(int x, int y, int w, int h) {
       endPixelsOp();
     } else {
       // We only need to copy the pixels to the back texture where we are
-      // currently drawing to. Because the texture is invertex along Y, we
+      // currently drawing to. Because the texture is inverted along Y, we
       // need to reflect that in the vertical arguments.
       pgl.copyToTexture(texture.glTarget, texture.glFormat, texture.glName,
                         x, pixelHeight - (y + h), w, h, nativePixelBuffer);

File: core/src/processing/opengl/Texture.java
Patch:
@@ -340,6 +340,8 @@ public void set(int[] pixels, int x, int y, int w, int h, int format) {
 
     loadPixels(w * h);
     convertToRGBA(pixels, format, w, h);
+    if (invertedX) flipArrayOnX(rgbaPixels, 1);
+    if (invertedY) flipArrayOnY(rgbaPixels, 1);
     updatePixelBuffer(rgbaPixels);
     pgl.texSubImage2D(glTarget, 0, x, y, w, h, PGL.RGBA, PGL.UNSIGNED_BYTE,
                       pixelBuffer);

File: app/src/processing/app/ui/ExamplesFrame.java
Patch:
@@ -183,6 +183,9 @@ public void treeCollapsed(TreeExpansionEvent event) {
       tree.setToggleClickCount(1);
     }
 
+    // Special cell renderer that takes the UI zoom into account
+    tree.setCellRenderer(new ZoomTreeCellRenderer());
+
     JScrollPane treePane = new JScrollPane(tree);
     treePane.setPreferredSize(new Dimension(250, 300));
     treePane.setBorder(new EmptyBorder(2, 0, 0, 0));

File: core/src/processing/core/PGraphics.java
Patch:
@@ -7352,7 +7352,7 @@ protected void backgroundFromCalc() {
    * @param image PImage to set as background (must be same size as the sketch window)
    */
   public void background(PImage image) {
-    if ((image.pixelWidth != width) || (image.pixelHeight != height)) {
+    if ((image.pixelWidth != pixelWidth) || (image.pixelHeight != pixelHeight)) {
       throw new RuntimeException(ERROR_BACKGROUND_IMAGE_SIZE);
     }
     if ((image.format != RGB) && (image.format != ARGB)) {

File: java/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -811,7 +811,7 @@ private static void checkForUnterminatedMultilineComment(final String program)
         boolean terminated = false;
         while (i < length - 1) {
           if ((program.charAt(i) == '*') && (program.charAt(i + 1) == '/')) {
-            i += 2;
+            i++; // advance to the ending '/'
             terminated = true;
             break;
           } else {

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -1046,8 +1046,7 @@ protected void nativeMouseEvent(com.jogamp.newt.event.MouseEvent nativeEvent,
 
     int scale;
     if (PApplet.platform == PConstants.MACOSX) {
-      window.getCurrentSurfaceScale(currentPixelScale);
-      scale = (int) currentPixelScale[0];
+      scale = (int) getCurrentPixelScale();
     } else {
       scale = (int) getPixelScale();
     }
@@ -1060,7 +1059,7 @@ protected void nativeMouseEvent(com.jogamp.newt.event.MouseEvent nativeEvent,
       mx -= (int)pgl.presentX;
       my -= (int)pgl.presentY;
       if (peAction == KeyEvent.RELEASE &&
-          pgl.insideStopButton(sx, sy - screenRect.height / scale)) {
+          pgl.insideStopButton(sx, sy - screenRect.height / windowScaleFactor)) {
         sketch.exit();
       }
       if (mx < 0 || sketchWidth < mx || my < 0 || sketchHeight < my) {

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -1055,7 +1055,7 @@ protected void nativeMouseEvent(com.jogamp.newt.event.MouseEvent nativeEvent,
       mx -= (int)pgl.presentX;
       my -= (int)pgl.presentY;
       if (peAction == KeyEvent.RELEASE &&
-          pgl.insideStopButton(sx, sy - screenRect.height)) {
+          pgl.insideStopButton(sx, sy - screenRect.height / scale)) {
         sketch.exit();
       }
       if (mx < 0 || sketchWidth < mx || my < 0 || sketchHeight < my) {

File: core/src/processing/javafx/PSurfaceFX.java
Patch:
@@ -555,6 +555,7 @@ public void placeWindow(int[] location) {
   public void placeWindow(int[] location, int[] editorLocation) {
     if (sketch.sketchFullScreen()) {
       PApplet.hideMenuBar();
+      return;
     }
 
     //Dimension window = setFrameSize();

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -751,8 +751,9 @@ public void placeWindow(int[] location, int[] editorLocation) {
 
 
   public void placePresent(int stopColor) {
-    pgl.initPresentMode(0.5f * (screenRect.width - sketchWidth),
-                        0.5f * (screenRect.height - sketchHeight), stopColor);
+    float scale = getPixelScale();
+    pgl.initPresentMode(0.5f * (screenRect.width/scale - sketchWidth),
+                        0.5f * (screenRect.height/scale - sketchHeight), stopColor);
     window.setSize(screenRect.width, screenRect.height);
     PApplet.hideMenuBar();
     window.setTopLevelPosition(sketchX + screenRect.x,

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -953,8 +953,8 @@ public void init(GLAutoDrawable drawable) {
     public void reshape(GLAutoDrawable drawable, int x, int y, int w, int h) {
       pgl.resetFBOLayer();
       pgl.getGL(drawable);
-      window.getCurrentSurfaceScale(currentPixelScale);
-      setSize((int) (w / currentPixelScale[0]), (int) (h / currentPixelScale[1]));
+      float scale = getPixelScale();
+      setSize((int) (w / scale), (int) (h / scale));
     }
   }
 

File: app/src/processing/app/Library.java
Patch:
@@ -189,7 +189,7 @@ protected void handle() {
       String platformName = platformNames[i];
       String platformName32 = platformName + "32";
       String platformName64 = platformName + "64";
-      String platformNameArmv6hh = platformName + "-armv6hf";
+      String platformNameArmv6hf = platformName + "-armv6hf";
       String platformNameArm64 = platformName + "-arm64";
 
       // First check for things like 'application.macosx=' or 'application.windows32' in the export.txt file.
@@ -216,7 +216,7 @@ protected void handle() {
         platformList64 = listPlatformEntries(libraryFolder, platformName64, baseList);
       }
       if (platformListArmv6hf == null) {
-        platformListArmv6hf = listPlatformEntries(libraryFolder, platformNameArmv6hh, baseList);
+        platformListArmv6hf = listPlatformEntries(libraryFolder, platformNameArmv6hf, baseList);
       }
       if (platformListArm64 == null) {
         platformListArm64 = listPlatformEntries(libraryFolder, platformNameArm64, baseList);
@@ -244,7 +244,7 @@ protected void handle() {
           exportList.put(platformName64, platformList64);
         }
         if (platformListArmv6hf != null) {
-          exportList.put(platformNameArmv6hh, platformListArmv6hf);
+          exportList.put(platformNameArmv6hf, platformListArmv6hf);
         }
         if (platformListArm64 != null) {
           exportList.put(platformNameArm64, platformListArm64);

File: java/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -811,7 +811,7 @@ private static void checkForUnterminatedMultilineComment(final String program)
         boolean terminated = false;
         while (i < length - 1) {
           if ((program.charAt(i) == '*') && (program.charAt(i + 1) == '/')) {
-            i += 2;
+            i++; // advance to the ending '/'
             terminated = true;
             break;
           } else {

File: java/libraries/io/src/processing/io/PWM.java
Patch:
@@ -117,7 +117,7 @@ public void close() {
     // XXX: implicit clear()?
     // XXX: also check GPIO
 
-    String fn = "/sys/class/pwm/" + chip + "/export";
+    String fn = "/sys/class/pwm/" + chip + "/unexport";
     int ret = NativeInterface.writeFile(fn, Integer.toString(channel));
     if (ret < 0) {
       if (ret == -2) {    // ENOENT

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -982,6 +982,7 @@ public void next() {
     FRAMEBUFFER_INCOMPLETE_FORMATS            = GL.GL_FRAMEBUFFER_INCOMPLETE_FORMATS;
     FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER        = GL2GL3.GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER;
     FRAMEBUFFER_INCOMPLETE_READ_BUFFER        = GL2GL3.GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER;
+    FRAMEBUFFER_INCOMPLETE_MULTISAMPLE        = GL.GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE;
     FRAMEBUFFER_UNSUPPORTED                   = GL.GL_FRAMEBUFFER_UNSUPPORTED;
 
     FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE           = GL.GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE;

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -6885,8 +6885,7 @@ protected void getGLParameters() {
 
     // overwrite the default shaders with vendor specific versions
     // if needed
-    if (OPENGL_RENDERER.equals("VideoCore IV HW") ||    // Broadcom's binary driver for Raspberry Pi
-      OPENGL_RENDERER.equals("Gallium 0.4 on VC4")) {   // Mesa driver for same hardware
+    if (OPENGL_RENDERER.equals("VideoCore IV HW")) {   // Mesa driver for same hardware
         defLightShaderVertURL =
           PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/LightVert-vc4.glsl");
         defTexlightShaderVertURL =

File: core/src/processing/awt/PGraphicsJava2D.java
Patch:
@@ -2889,7 +2889,7 @@ protected void getImpl(int sourceX, int sourceY,
 
   @Override
   public void set(int x, int y, int argb) {
-    if ((x < 0) || (y < 0) || (x >= width) || (y >= height)) return;
+    if ((x < 0) || (y < 0) || (x >= pixelWidth) || (y >= pixelHeight)) return;
 //    ((BufferedImage) image).setRGB(x, y, argb);
     getset[0] = argb;
 //    WritableRaster raster = ((BufferedImage) (useOffscreen && primarySurface ? offscreen : image)).getRaster();

File: core/src/processing/awt/PGraphicsJava2D.java
Patch:
@@ -409,8 +409,6 @@ public void beginDraw() {
     checkSettings();
     resetMatrix(); // reset model matrix
     vertexCount = 0;
-
-    g2.scale(pixelDensity, pixelDensity);
   }
 
 
@@ -2236,6 +2234,7 @@ public void shearY(float angle) {
   @Override
   public void resetMatrix() {
     g2.setTransform(new AffineTransform());
+    g2.scale(pixelDensity, pixelDensity);
   }
 
 

File: build/shared/tools/MovieMaker/src/ch/randelshofer/gui/datatransfer/FileTextFieldTransferHandler.java
Patch:
@@ -84,7 +84,8 @@ public boolean importData(JComponent comp, Transferable t) {
             }
 
             try {
-                List list = (List) t.getTransferData(DataFlavor.javaFileListFlavor);
+                List<?> list = (List<?>) 
+                    t.getTransferData(DataFlavor.javaFileListFlavor);
                 if (list.size() > 0) {
                     File file = (File) list.get(0);
 

File: app/src/processing/app/ui/Toolkit.java
Patch:
@@ -1036,7 +1036,7 @@ static public Font getSansFont(int size, int style) {
         }
         */
         sansFont = createFont("ProcessingSansPro-Regular.ttf", size);
-        sansBoldFont = createFont("SourceSansPro-Semibold.ttf", size);
+        sansBoldFont = createFont("ProcessingSansPro-Semibold.ttf", size);
 
         // additional language constraints
         if ("el".equals(Language.getLanguage())) {

File: app/src/processing/app/contrib/ContributionTab.java
Patch:
@@ -38,7 +38,7 @@
 
 public class ContributionTab extends JPanel {
   static final String ANY_CATEGORY = Language.text("contrib.all");
-  static final int FILTER_WIDTH = 180;
+  static final int FILTER_WIDTH = Toolkit.zoom(180);
 
   ContributionType contribType;
   ManagerFrame contribDialog;

File: app/src/processing/app/contrib/StatusPanel.java
Patch:
@@ -45,7 +45,7 @@
 
 
 class StatusPanel extends JPanel {
-  static final int BUTTON_WIDTH = 150;
+  static final int BUTTON_WIDTH = Toolkit.zoom(150);
 
   static Icon foundationIcon;
   static Icon installIcon;

File: app/src/processing/app/contrib/ListPanel.java
Patch:
@@ -107,8 +107,8 @@ public Component prepareRenderer(TableCellRenderer renderer, int row, int column
     table.setFillsViewportHeight(true);
     table.setDefaultRenderer(Contribution.class, new ContribStatusRenderer());
     table.setFont(ManagerFrame.NORMAL_PLAIN);
-    table.setRowHeight(28);
-    table.setRowMargin(6);
+    table.setRowHeight(Toolkit.zoom(28));
+    table.setRowMargin(Toolkit.zoom(6));
     table.getColumnModel().setColumnMargin(0);
     table.getColumnModel().getColumn(0).setMaxWidth(ManagerFrame.STATUS_WIDTH);
     table.getColumnModel().getColumn(2).setMinWidth(ManagerFrame.AUTHOR_WIDTH);

File: app/src/processing/app/contrib/DetailPanel.java
Patch:
@@ -198,7 +198,7 @@ public void hyperlinkUpdate(HyperlinkEvent e) {
     notificationLabel.setInheritsPopupMenu(true);
     notificationLabel.setVisible(false);
     notificationLabel.setOpaque(false);
-    notificationLabel.setFont(Toolkit.getSansFont(12, Font.PLAIN));
+    notificationLabel.setFont(ManagerFrame.SMALL_PLAIN);
 
     {
       updateButton = new JButton("Update");
@@ -406,7 +406,7 @@ public void setContribution(Contribution contrib) {
     }
 
     // Avoid ugly synthesized bold
-    Font boldFont = Toolkit.getSansFont(12, Font.BOLD);
+    Font boldFont = ManagerFrame.SMALL_BOLD;
     String fontFace = "<font face=\"" + boldFont.getName() + "\">";
 
     StringBuilder desc = new StringBuilder();

File: app/src/processing/app/contrib/StatusPanel.java
Patch:
@@ -79,7 +79,7 @@ public StatusPanel(final ContributionTab contributionTab, int width) {
       installIcon = Toolkit.getLibIconX("manager/install");
       updateIcon = Toolkit.getLibIconX("manager/update");
       removeIcon = Toolkit.getLibIconX("manager/remove");
-      buttonFont = Toolkit.getSansFont(14, Font.PLAIN);
+      buttonFont = ManagerFrame.NORMAL_PLAIN;
     }
 
     setBackground(new Color(0xebebeb));

File: app/src/processing/app/contrib/UpdateStatusPanel.java
Patch:
@@ -21,7 +21,6 @@
 package processing.app.contrib;
 
 import java.awt.Color;
-import java.awt.Font;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 
@@ -39,7 +38,7 @@ public UpdateStatusPanel(UpdateContributionTab tab, int width) {
     this.contributionTab = tab;
 
     updateButton = Toolkit.createIconButton("Update All", "manager/update");
-    updateButton.setFont(Toolkit.getSansFont(14, Font.PLAIN));
+    updateButton.setFont(ManagerFrame.NORMAL_PLAIN);
     updateButton.setHorizontalAlignment(SwingConstants.LEFT);
     updateButton.setVisible(true);
     updateButton.setEnabled(false);

File: app/src/processing/app/ui/EditorConsole.java
Patch:
@@ -223,7 +223,8 @@ public PrintStream getErr() {
    */
   protected void updateAppearance() {
     String fontFamily = Preferences.get("editor.font.family");
-    int fontSize = Preferences.getInteger("console.font.size");
+    int fontSize =
+      Toolkit.zoom(Preferences.getInteger("console.font.size"));
     StyleConstants.setFontFamily(stdStyle, fontFamily);
     StyleConstants.setFontSize(stdStyle, fontSize);
     StyleConstants.setFontFamily(errStyle, fontFamily);

File: app/src/processing/app/ui/EditorState.java
Patch:
@@ -221,6 +221,8 @@ void apply(Editor editor) {
     editor.setBounds(editorBounds);
     if (dividerLocation != 0) {
       editor.setDividerLocation(dividerLocation);
+    } else {
+      editor.setDividerLocation(2 * editor.getSize().height / 3);
     }
     if (isMaximized) {
       editor.setExtendedState(Frame.MAXIMIZED_BOTH);

File: app/src/processing/app/ui/EditorStatus.java
Patch:
@@ -328,11 +328,11 @@ public Dimension getPreferredSize() {
 
 
   public Dimension getMinimumSize() {
-    return Toolkit.zoom(300, HIGH);
+    return new Dimension(Toolkit.zoom(300), HIGH);
   }
 
 
   public Dimension getMaximumSize() {
-    return Toolkit.zoom(super.getMaximumSize().width, HIGH);
+    return new Dimension(super.getMaximumSize().width, HIGH);
   }
 }

File: app/src/processing/app/ui/Toolkit.java
Patch:
@@ -844,9 +844,11 @@ static public void dpiStroke(Graphics2D g2) {
   }
 
 
+  /*
   static Dimension zoom(int w, int h) {
     return new Dimension(zoom(w), zoom(h));
   }
+  */
 
 
   // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

File: app/src/processing/app/tools/InstallCommander.java
Patch:
@@ -105,7 +105,7 @@ public void run() {
       String classPath = jarList.join(":").replaceAll(javaRoot + "\\/?", "");
 
       writer.println("cd \"" + javaRoot + "\" && " +
-                     Platform.getJavaPath() +
+                     Platform.getJavaPath().replaceAll(" ", "\\\\ ") +
                      " -Djna.nosys=true" +
                      " $OPTION_FOR_HEADLESS_RUN" +
       		           " -cp \"" + classPath + "\"" +

File: java/src/processing/mode/java/JavaInputHandler.java
Patch:
@@ -164,7 +164,7 @@ public boolean handlePressed(KeyEvent event) {
         event.consume();
       }
 
-    } else if (c == 10 || c == 13) {  // auto-indent
+    } else if (code == 10 || code == 13) {  // auto-indent
       if (Preferences.getBoolean("editor.indent")) {
         char contents[] = textarea.getText().toCharArray();
         int tabSize = Preferences.getInteger("editor.tabs.size");

File: core/src/processing/core/PSurfaceNone.java
Patch:
@@ -207,7 +207,7 @@ public boolean stopThread() {
 
 
   public boolean isStopped() {
-    return thread == null;
+    return thread == null || !thread.isAlive();
   }
 
 

File: app/src/processing/app/Sketch.java
Patch:
@@ -657,9 +657,10 @@ public void handleDeleteCode() {
         // get the changes into the sketchbook menu
         //sketchbook.rebuildMenus();
 
-        // make a new sketch, and i think this will rebuild the sketch menu
+        // make a new sketch and rebuild the sketch menu
         //editor.handleNewUnchecked();
         //editor.handleClose2();
+        editor.getBase().rebuildSketchbookMenus();
         editor.getBase().handleClose(editor, false);
 
       } else {

File: app/src/processing/app/contrib/UpdateListPanel.java
Patch:
@@ -247,10 +247,8 @@ public void contributionChanged(final Contribution oldContrib,
     DetailPanel panel = panelByContribution.get(oldContrib);
     if (panel == null) {
       contributionAdded(newContrib);
-    } else {
+    } else if (newContrib.isInstalled()) {
       panelByContribution.remove(oldContrib);
-    }
-    if (visibleContributions.contains(oldContrib)) {
       visibleContributions.remove(oldContrib);
     }
     updatePanelOrdering(visibleContributions);

File: core/src/processing/core/PSurfaceNone.java
Patch:
@@ -207,7 +207,7 @@ public boolean stopThread() {
 
 
   public boolean isStopped() {
-    return thread == null;
+    return thread == null || !thread.isAlive();
   }
 
 

File: core/src/processing/opengl/PGL.java
Patch:
@@ -1914,7 +1914,7 @@ protected static String[] preprocessFragmentSource(String[] fragSrc0,
       Pattern[] search = new Pattern[] {
           Pattern.compile(String.format(GLSL_ID_REGEX, "varying|attribute")),
           Pattern.compile(String.format(GLSL_ID_REGEX, "texture")),
-          Pattern.compile(String.format(GLSL_FN_REGEX, "textureRect|texture2D|texture3D|textureCube")),
+          Pattern.compile(String.format(GLSL_FN_REGEX, "texture2DRect|texture2D|texture3D|textureCube")),
           Pattern.compile(String.format(GLSL_ID_REGEX, "gl_FragColor"))
       };
       String[] replace = new String[] {
@@ -1954,7 +1954,7 @@ protected static String[] preprocessVertexSource(String[] vertSrc0,
           Pattern.compile(String.format(GLSL_ID_REGEX, "varying")),
           Pattern.compile(String.format(GLSL_ID_REGEX, "attribute")),
           Pattern.compile(String.format(GLSL_ID_REGEX, "texture")),
-          Pattern.compile(String.format(GLSL_FN_REGEX, "textureRect|texture2D|texture3D|textureCube"))
+          Pattern.compile(String.format(GLSL_FN_REGEX, "texture2DRect|texture2D|texture3D|textureCube"))
       };
       String[] replace = new String[] {
           "out", "in", "texMap", "texture",

File: core/src/processing/opengl/PGL.java
Patch:
@@ -1914,7 +1914,7 @@ protected static String[] preprocessFragmentSource(String[] fragSrc0,
       Pattern[] search = new Pattern[] {
           Pattern.compile(String.format(GLSL_ID_REGEX, "varying|attribute")),
           Pattern.compile(String.format(GLSL_ID_REGEX, "texture")),
-          Pattern.compile(String.format(GLSL_FN_REGEX, "textureRect|texture2D|texture3D|textureCube")),
+          Pattern.compile(String.format(GLSL_FN_REGEX, "texture2DRect|texture2D|texture3D|textureCube")),
           Pattern.compile(String.format(GLSL_ID_REGEX, "gl_FragColor"))
       };
       String[] replace = new String[] {
@@ -1954,7 +1954,7 @@ protected static String[] preprocessVertexSource(String[] vertSrc0,
           Pattern.compile(String.format(GLSL_ID_REGEX, "varying")),
           Pattern.compile(String.format(GLSL_ID_REGEX, "attribute")),
           Pattern.compile(String.format(GLSL_ID_REGEX, "texture")),
-          Pattern.compile(String.format(GLSL_FN_REGEX, "textureRect|texture2D|texture3D|textureCube"))
+          Pattern.compile(String.format(GLSL_FN_REGEX, "texture2DRect|texture2D|texture3D|textureCube"))
       };
       String[] replace = new String[] {
           "out", "in", "texMap", "texture",

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -208,6 +208,7 @@ public void endDraw() {
   public void beginShape(int kind) {
     shape = kind;
     vertexCount = 0;
+    curveVertexCount = 0;
 
     workPath.reset();
     auxPath.reset();

File: java/src/processing/mode/java/JavaInputHandler.java
Patch:
@@ -164,7 +164,7 @@ public boolean handlePressed(KeyEvent event) {
         event.consume();
       }
 
-    } else if (c == 10 || c == 13) {  // auto-indent
+    } else if (code == 10 || code == 13) {  // auto-indent
       if (Preferences.getBoolean("editor.indent")) {
         char contents[] = textarea.getText().toCharArray();
         int tabSize = Preferences.getInteger("editor.tabs.size");

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -207,6 +207,7 @@ public void endDraw() {
   public void beginShape(int kind) {
     shape = kind;
     vertexCount = 0;
+    curveVertexCount = 0;
 
     workPath.reset();
     auxPath.reset();

File: app/src/processing/app/Util.java
Patch:
@@ -74,7 +74,7 @@ static public byte[] loadBytesRaw(File file) throws IOException {
    */
   static public StringDict readSettings(File inputFile) {
     if (!inputFile.exists()) {
-      if (Base.DEBUG) System.err.println(inputFile + " does not exist.");
+      Messages.loge(inputFile + " does not exist inside readSettings()");
       return null;
     }
     String lines[] = PApplet.loadStrings(inputFile);

File: app/src/processing/app/syntax/im/InputMethodSupport.java
Patch:
@@ -195,9 +195,7 @@ public void inputMethodTextChanged(InputMethodEvent event) {
       }
 
       CompositionTextPainter compositionPainter = textArea.getPainter().getCompositionTextpainter();
-      if (Base.DEBUG) {
-        Messages.log(" textArea.getCaretPosition() + committed_count: " + (textArea.getCaretPosition() + committedCount));
-      }
+      Messages.log("textArea.getCaretPosition() + committed_count: " + (textArea.getCaretPosition() + committedCount));
       compositionPainter.setComposedTextLayout(getTextLayout(text, committedCount), textArea.getCaretPosition() + committedCount);
       compositionPainter.setCaret(event.getCaret());
 

File: java/src/processing/mode/java/pdex/PreprocessedSketch.java
Patch:
@@ -26,7 +26,7 @@ public class PreprocessedSketch {
   public final ClassPath classPath;
   public final URLClassLoader classLoader;
 
-  public final ClassPath searchClassPath;
+  public final String[] searchClassPathArray;
 
   public final int[] tabStartOffsets;
 
@@ -206,7 +206,7 @@ public static class Builder {
     public ClassPath classPath;
     public URLClassLoader classLoader;
 
-    public ClassPath searchClassPath;
+    public String[] searchClassPathArray;
 
     public int[] tabStartOffsets = new int[0];
 
@@ -242,7 +242,7 @@ private PreprocessedSketch(Builder b) {
     classPath = b.classPath;
     classLoader = b.classLoader;
 
-    searchClassPath = b.searchClassPath;
+    searchClassPathArray = b.searchClassPathArray;
 
     tabStartOffsets = b.tabStartOffsets;
 

File: app/src/processing/app/syntax/PdeTextAreaPainter.java
Patch:
@@ -113,7 +113,7 @@ public void setMode(Mode mode) {
    * @param x horizontal position
    */
   @Override
-  protected void paintLine(Graphics gfx, int line, int x, TokenMarker marker) {
+  protected void paintLine(Graphics gfx, int line, int x, TokenMarkerState marker) {
     try {
       // TODO This line is causing NPEs randomly ever since I added the
       //      toggle for Java Mode/Debugger toolbar. [Manindra]
@@ -346,4 +346,4 @@ public Editor getEditor() {
   public PdeTextArea getPdeTextArea() {
     return (PdeTextArea) textArea;
   }
-}
\ No newline at end of file
+}

File: app/src/processing/app/syntax/TextAreaPainter.java
Patch:
@@ -488,7 +488,7 @@ public void paint(Graphics gfx) {
     int lastInvalid = firstLine + (clipRect.y + clipRect.height - 1) / height;
 
     try {
-      TokenMarker tokenMarker = textArea.getDocument().getTokenMarker();
+      TokenMarkerState tokenMarker = textArea.getDocument().getTokenMarker();
       int x = textArea.getHorizontalOffset();
 
       for (int line = firstInvalid; line <= lastInvalid; line++) {
@@ -611,7 +611,7 @@ public Segment getCurrentLine() {
 //    Font defaultFont = getFont();
 //    Color defaultColor = getForeground();
   protected void paintLine(Graphics gfx, int line, int x,
-                           TokenMarker tokenMarker) {
+                           TokenMarkerState tokenMarker) {
     currentLineIndex = line;
     int y = textArea.lineToY(line);
 
@@ -671,7 +671,7 @@ protected void paintPlainLine(Graphics gfx, int line, int x, int y) {
 //                                 int line, Font defaultFont,
 //                                 Color defaultColor, int x, int y) {
   protected void paintSyntaxLine(Graphics gfx, int line, int x, int y,
-                                 TokenMarker tokenMarker) {
+                                 TokenMarkerState tokenMarker) {
     textArea.getLineText(currentLineIndex, currentLine);
     currentLineTokens = tokenMarker.markTokens(currentLine, currentLineIndex);
 

File: app/src/processing/app/syntax/PdeTextAreaPainter.java
Patch:
@@ -113,7 +113,7 @@ public void setMode(Mode mode) {
    * @param x horizontal position
    */
   @Override
-  protected void paintLine(Graphics gfx, int line, int x, TokenMarker marker) {
+  protected void paintLine(Graphics gfx, int line, int x, TokenMarkerState marker) {
     try {
       // TODO This line is causing NPEs randomly ever since I added the
       //      toggle for Java Mode/Debugger toolbar. [Manindra]
@@ -346,4 +346,4 @@ public Editor getEditor() {
   public PdeTextArea getPdeTextArea() {
     return (PdeTextArea) textArea;
   }
-}
\ No newline at end of file
+}

File: app/src/processing/app/syntax/TextAreaPainter.java
Patch:
@@ -488,7 +488,7 @@ public void paint(Graphics gfx) {
     int lastInvalid = firstLine + (clipRect.y + clipRect.height - 1) / height;
 
     try {
-      TokenMarker tokenMarker = textArea.getDocument().getTokenMarker();
+      TokenMarkerState tokenMarker = textArea.getDocument().getTokenMarker();
       int x = textArea.getHorizontalOffset();
 
       for (int line = firstInvalid; line <= lastInvalid; line++) {
@@ -611,7 +611,7 @@ public Segment getCurrentLine() {
 //    Font defaultFont = getFont();
 //    Color defaultColor = getForeground();
   protected void paintLine(Graphics gfx, int line, int x,
-                           TokenMarker tokenMarker) {
+                           TokenMarkerState tokenMarker) {
     currentLineIndex = line;
     int y = textArea.lineToY(line);
 
@@ -671,7 +671,7 @@ protected void paintPlainLine(Graphics gfx, int line, int x, int y) {
 //                                 int line, Font defaultFont,
 //                                 Color defaultColor, int x, int y) {
   protected void paintSyntaxLine(Graphics gfx, int line, int x, int y,
-                                 TokenMarker tokenMarker) {
+                                 TokenMarkerState tokenMarker) {
     textArea.getLineText(currentLineIndex, currentLine);
     currentLineTokens = tokenMarker.markTokens(currentLine, currentLineIndex);
 

File: java/src/processing/mode/java/pdex/SourceUtils.java
Patch:
@@ -84,7 +84,7 @@ public static List<Edit> replaceTypeConstructors(CharSequence source) {
 
 
   public static final Pattern HEX_LITERAL_REGEX =
-      Pattern.compile("(?:^|\\W)(#[A-Fa-f0-9]{6})(?:\\W|$)");
+      Pattern.compile("(?<=^|\\W)(#[A-Fa-f0-9]{6})(?=\\W|$)");
 
   public static List<Edit> replaceHexLiterals(CharSequence source) {
     // Find all #[webcolor] and replace with 0xff[webcolor]

File: java/src/processing/mode/java/pdex/SourceUtils.java
Patch:
@@ -84,7 +84,7 @@ public static List<Edit> replaceTypeConstructors(CharSequence source) {
 
 
   public static final Pattern HEX_LITERAL_REGEX =
-      Pattern.compile("(?:^|\\W)(#[A-Fa-f0-9]{6})(?:\\W|$)");
+      Pattern.compile("(?<=^|\\W)(#[A-Fa-f0-9]{6})(?=\\W|$)");
 
   public static List<Edit> replaceHexLiterals(CharSequence source) {
     // Find all #[webcolor] and replace with 0xff[webcolor]

File: core/src/processing/core/PApplet.java
Patch:
@@ -1194,7 +1194,7 @@ static public int displayDensity(int display) {
   *
   */
   public void pixelDensity(int density) {
-    println(density + " " + this.pixelDensity);
+    //println(density + " " + this.pixelDensity);
     if (density != this.pixelDensity) {
       if (insideSettings("pixelDensity", density)) {
         if (density != 1 && density != 2) {

File: app/src/processing/app/Messages.java
Patch:
@@ -327,7 +327,9 @@ static public void logf(String message, Object... args) {
 
   static public void loge(String message, Throwable e) {
     if (Base.DEBUG) {
-      System.err.println(message);
+      if (message != null) {
+        System.err.println(message);
+      }
       e.printStackTrace();
     }
   }

File: app/src/processing/app/Messages.java
Patch:
@@ -335,7 +335,7 @@ static public void loge(String message, Throwable e) {
 
   static public void loge(String message) {
     if (Base.DEBUG) {
-      System.out.println(message);
+      System.err.println(message);
     }
   }
 }
\ No newline at end of file

File: app/src/processing/app/Base.java
Patch:
@@ -61,8 +61,8 @@ public class Base {
   /** Set true if this a proper release rather than a numbered revision. */
 
   /** True if heavy debugging error/log messages are enabled */
-//  static public boolean DEBUG = false;
-  static public boolean DEBUG = true;
+  static public boolean DEBUG = false;
+//  static public boolean DEBUG = true;
 
   static private boolean commandLine;
 

File: app/src/processing/app/contrib/DetailPanel.java
Patch:
@@ -167,7 +167,7 @@ private void addPaneComponents() {
     margin.bottom = 0;
     descriptionPane.setMargin(margin);
     descriptionPane.setContentType("text/html");
-    setTextStyle(descriptionPane);
+    setTextStyle(descriptionPane, "0.95em");
     descriptionPane.setOpaque(false);
     if (UIManager.getLookAndFeel().getID().equals("Nimbus")) {
       descriptionPane.setBackground(new Color(0, 0, 0, 0));
@@ -714,15 +714,15 @@ static void setForegroundStyle(JTextPane textPane,
   }
 
 
-  static void setTextStyle(JTextPane textPane) {
+  static void setTextStyle(JTextPane textPane, String fontSize) {
     Document doc = textPane.getDocument();
     if (doc instanceof HTMLDocument) {
       HTMLDocument html = (HTMLDocument) doc;
       StyleSheet stylesheet = html.getStyleSheet();
       stylesheet.addRule("body { " +
                          "  margin: 0; padding: 0;" +
                          "  font-family: " + Toolkit.getSansFontName() + ", Arial, Helvetica, sans-serif;" +
-                         "  font-size: 100%;" + "font-size: 0.95em; " +
+                         "  font-size: 100%;" + "font-size: " + fontSize + "; " +
                          "}");
     }
   }

File: app/src/processing/app/ui/Editor.java
Patch:
@@ -2579,6 +2579,7 @@ protected void handleOpenInternal(String path) throws EditorException {
     Preferences.save();
   }
 
+
   /**
    * Set the title of the PDE window based on the current sketch, i.e.
    * something like "sketch_070752a - Processing 0126"

File: app/src/processing/app/contrib/ListPanel.java
Patch:
@@ -538,7 +538,7 @@ public void filterLibraries(List<Contribution> filteredContributions) {
 //      for (Contribution contribution : filteredContributions) {
 //        if (contribution.getType() == contributionTab.contribType) {
 //          if(panelByContribution.keySet().contains(contribution)){
-//           visibleContributions.add(contribution); 
+//           visibleContributions.add(contribution);
 //          }
 //        }
 //      }

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -51,6 +51,8 @@ public class ContributionListing {
   List<AvailableContribution> advertisedContributions;
   Map<String, List<Contribution>> librariesByCategory;
   Map<String, Contribution> librariesByImportHeader;
+  // TODO: Every contribution is getting added twice
+  // and nothing is replaced ever.
   List<Contribution> allContributions;
   boolean listDownloaded;
   boolean listDownloadFailed;

File: core/src/processing/data/JSONArray.java
Patch:
@@ -263,7 +263,7 @@ private Object opt(int index) {
    * @return An object value.
    * @throws RuntimeException If there is no value for the index.
    */
-  private Object get(int index) {
+  public Object get(int index) {
     Object object = opt(index);
     if (object == null) {
       throw new RuntimeException("JSONArray[" + index + "] not found.");

File: core/src/processing/data/JSONObject.java
Patch:
@@ -537,7 +537,7 @@ static protected String doubleToString(double d) {
    * @return      The object associated with the key.
    * @throws      RuntimeException if the key is not found.
    */
-  private Object get(String key) {
+  public Object get(String key) {
     if (key == null) {
       throw new RuntimeException("Null key.");
     }
@@ -1300,7 +1300,7 @@ public JSONObject setJSONArray(String key, JSONArray value) {
    * @throws RuntimeException If the value is non-finite number
    *  or if the key is null.
    */
-  private JSONObject put(String key, Object value) {
+  public JSONObject put(String key, Object value) {
     String pooled;
     if (key == null) {
       throw new RuntimeException("Null key.");
@@ -1334,7 +1334,7 @@ private JSONObject put(String key, Object value) {
    * @throws RuntimeException if the key is a duplicate, or if
    * {@link #put(String,Object)} throws.
    */
-  private JSONObject putOnce(String key, Object value) {
+  public JSONObject putOnce(String key, Object value) {
     if (key != null && value != null) {
       if (this.opt(key) != null) {
         throw new RuntimeException("Duplicate key \"" + key + "\"");

File: app/src/processing/app/contrib/DetailPanel.java
Patch:
@@ -461,7 +461,7 @@ public void setContribution(Contribution contrib) {
     desc.append("</font> ");
 
     String version = contrib.getPrettyVersion();
-    if (version != null) {
+    if (version != null && !version.equals("null")) {
       desc.append(version);
     }
     desc.append(" <br/>");

File: app/src/processing/app/contrib/DetailPanel.java
Patch:
@@ -461,7 +461,7 @@ public void setContribution(Contribution contrib) {
     desc.append("</font> ");
 
     String version = contrib.getPrettyVersion();
-    if (version != null) {
+    if (version != null && !version.equals("null")) {
       desc.append(version);
     }
     desc.append(" <br/>");

File: core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -1410,7 +1410,7 @@ protected void transform(int type, float... args) {
       }
       break;
     }
-    matrix.apply(transform);
+    matrix.preApply(transform);
     pushTransform();
     if (tessellated) applyMatrixImpl(transform);
   }
@@ -2035,8 +2035,8 @@ protected void setStrokeImpl(boolean stroke) {
       if (is2D() && parent != null) {
         ((PShapeOpenGL)parent).strokedTexture(stroke && image != null);
       }
-      
-      this.stroke = stroke;      
+
+      this.stroke = stroke;
     }
   }
 

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1701,7 +1701,7 @@ public void getProgramiv(int program, int pname, IntBuffer params) {
   @Override
   public String getProgramInfoLog(int program) {
     int[] val = { 0 };
-    gl2.glGetShaderiv(program, GL2ES2.GL_INFO_LOG_LENGTH, val, 0);
+    gl2.glGetProgramiv(program, GL2ES2.GL_INFO_LOG_LENGTH, val, 0);
     int length = val[0];
 
     if (0 < length) {

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1701,7 +1701,7 @@ public void getProgramiv(int program, int pname, IntBuffer params) {
   @Override
   public String getProgramInfoLog(int program) {
     int[] val = { 0 };
-    gl2.glGetShaderiv(program, GL2ES2.GL_INFO_LOG_LENGTH, val, 0);
+    gl2.glGetProgramiv(program, GL2ES2.GL_INFO_LOG_LENGTH, val, 0);
     int length = val[0];
 
     if (0 < length) {

File: core/src/processing/data/IntDict.java
Patch:
@@ -666,7 +666,7 @@ public void write(PrintWriter writer) {
   public String toJSON() {
     StringList items = new StringList();
     for (int i = 0; i < size(); i++) {
-      items.append("\"" + JSONObject.quote(keys[i]) + "\": " + values[i]);
+      items.append(JSONObject.quote(keys[i])+ ": " + values[i]);
     }
     return "{ " + items.join(", ") + " }";
   }

File: app/src/processing/app/Mode.java
Patch:
@@ -1003,7 +1003,7 @@ public void prepareExportFolder(File targetFolder) {
       // Nuke the old applet/application folder because it can cause trouble
       if (Preferences.getBoolean("export.delete_target_folder")) {
 //        System.out.println("temporarily skipping deletion of " + targetFolder);
-        Util.removeDir(targetFolder);
+        Platform.deleteFile(targetFolder);
         //      targetFolder.renameTo(dest);
       }
       // Create a fresh output folder (needed before preproc is run next)

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -960,7 +960,7 @@ protected boolean exportApplication(File destFolder,
                           PApplet.javaVersionName +
                           ".jdk/Contents/Home/jre/lib/ext");
       } else if (exportPlatform == PConstants.WINDOWS) {
-        runOptions.append("-Djava.ext.dirs=\"%EXEDIR%/java/lib/ext\"");
+        runOptions.append("-Djava.ext.dirs=\"%EXEDIR%\\java\\lib\\ext\"");
       } else if (exportPlatform == PConstants.LINUX) {
         runOptions.append("-Djava.ext.dirs=\"$APPDIR/java/lib/ext\"");
       }

File: core/src/processing/core/PImage.java
Patch:
@@ -345,8 +345,8 @@ public PImage(Image img) {
   /**
    * Use the getNative() method instead, which allows library interfaces to be
    * written in a cross-platform fashion for desktop, Android, and others.
+   * This is still included for PGraphics objects, which may need the image.
    */
-  @Deprecated
   public Image getImage() {  // ignore
     return (Image) getNative();
   }

File: java/libraries/pdf/src/processing/pdf/PGraphicsPDF.java
Patch:
@@ -423,7 +423,7 @@ protected void imageImpl(PImage image,
     scale((x2 - x1) / imageWidth,
           (y2 - y1) / imageHeight);
     if (u2-u1 == imageWidth && v2-v1 == imageHeight) {
-      g2.drawImage((Image) image.getNative(), 0, 0, null);
+      g2.drawImage(image.getImage(), 0, 0, null);
     } else {
       PImage tmp = image.get(u1, v1, u2-u1, v2-v1);
       g2.drawImage((Image) tmp.getNative(), 0, 0, null);

File: app/src/processing/app/Base.java
Patch:
@@ -1874,6 +1874,7 @@ static protected void makeSketchbookSubfolders() {
     getSketchbookToolsFolder().mkdirs();
     getSketchbookModesFolder().mkdirs();
     getSketchbookExamplesFolder().mkdirs();
+    getSketchbookTemplatesFolder().mkdirs();
   }
 
 

File: app/src/processing/app/ui/Editor.java
Patch:
@@ -1805,7 +1805,7 @@ public void endCompoundEdit() {
       code.setDocument(document);
 
       // turn on syntax highlighting
-      document.setTokenMarker(mode.getTokenMarker());
+      document.setTokenMarker(mode.getTokenMarker(code));
 
       // insert the program text into the document object
       try {

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -90,6 +90,7 @@ protected JavaEditor(Base base, String path, EditorState state,
 
     hasJavaTabs = checkForJavaTabs();
 
+    /*
     // hack to add a JPanel to the right-hand side of the text area
     JPanel textAndError = new JPanel();
     // parent is a vertical box with the toolbar, the header, and the text area
@@ -103,6 +104,7 @@ protected JavaEditor(Base base, String path, EditorState state,
     textAndError.add(textarea);
     // add our hacked version back to the editor
     box.add(textAndError);
+    */
 
     getPdeTextArea().setMode(jmode);
 

File: java/src/processing/mode/java/pdex/PreprocessingService.java
Patch:
@@ -402,8 +402,7 @@ private PreprocessedSketch preprocessSketch(PreprocessedSketch prevResult) {
 
     // Prepare advanced transforms which operate on AST
     TextTransform toCompilable = new TextTransform(parsableStage);
-    toCompilable.addAll(SourceUtils.addPublicToTopLevelMethods(parsableCU));
-    toCompilable.addAll(SourceUtils.replaceColorAndFixFloats(parsableCU));
+    toCompilable.addAll(SourceUtils.preprocessAST(parsableCU));
 
     // Transform code to compilable state
     String compilableStage = toCompilable.apply();

File: java/src/processing/mode/java/pdex/PreprocessingService.java
Patch:
@@ -402,8 +402,7 @@ private PreprocessedSketch preprocessSketch(PreprocessedSketch prevResult) {
 
     // Prepare advanced transforms which operate on AST
     TextTransform toCompilable = new TextTransform(parsableStage);
-    toCompilable.addAll(SourceUtils.addPublicToTopLevelMethods(parsableCU));
-    toCompilable.addAll(SourceUtils.replaceColorAndFixFloats(parsableCU));
+    toCompilable.addAll(SourceUtils.preprocessAST(parsableCU));
 
     // Transform code to compilable state
     String compilableStage = toCompilable.apply();

File: core/src/processing/core/PGraphics.java
Patch:
@@ -718,7 +718,9 @@ public class PGraphics extends PImage implements PConstants {
 
 
   public PGraphics() {
-    // Allows subclasses to override
+    // In 3.1.2, giving up on the async image saving as the default
+    hints[DISABLE_ASYNC_SAVEFRAME] = true;
+    System.out.println("disabling async saveFrame");
   }
 
 

File: java/src/processing/mode/java/pdex/CompletionPanel.java
Patch:
@@ -64,7 +64,7 @@ public class CompletionPanel {
   private String subWord;
 
   /**
-   * Postion where the completion has to be inserted
+   * Position where the completion has to be inserted
    */
   private int insertionPosition;
 

File: java/src/processing/mode/java/pdex/JavaTextArea.java
Patch:
@@ -634,7 +634,7 @@ public int xToOffset(int line, int x) {
    * Sets default cursor (instead of text cursor) in the gutter area.
    */
   protected final MouseMotionAdapter gutterCursorMouseAdapter = new MouseMotionAdapter() {
-    private int lastX; // previous horizontal positon of the mouse cursor
+    private int lastX; // previous horizontal position of the mouse cursor
 
     @Override
     public void mouseMoved(MouseEvent me) {

File: app/src/processing/app/Language.java
Patch:
@@ -316,6 +316,9 @@ static class LanguageBundle {
 
     void read(File additions) {
       String[] lines = PApplet.loadStrings(additions);
+      if (lines == null) {
+        throw new NullPointerException("File not found:\n" + additions.getAbsolutePath());
+      }
       //for (String line : lines) {
       for (int i = 0; i < lines.length; i++) {
         String line = lines[i];

File: app/src/processing/app/Platform.java
Patch:
@@ -288,7 +288,7 @@ static public File getContentFile(String name) {
       // Decode URL
       String decodedPath;
       try {
-        decodedPath = pathURL.toURI().getPath();
+        decodedPath = pathURL.toURI().getSchemeSpecificPart();
       } catch (URISyntaxException e) {
         e.printStackTrace();
         return null;

File: core/src/processing/core/PApplet.java
Patch:
@@ -7413,7 +7413,7 @@ static protected String calcSketchPath() {
       URL jarURL =
           PApplet.class.getProtectionDomain().getCodeSource().getLocation();
       // Decode URL
-      String jarPath = jarURL.toURI().getPath();
+      String jarPath = jarURL.toURI().getSchemeSpecificPart();
 
       // Workaround for bug in Java for OS X from Oracle (7u51)
       // https://github.com/processing/processing/issues/2181

File: app/src/processing/app/Platform.java
Patch:
@@ -288,7 +288,7 @@ static public File getContentFile(String name) {
       // Decode URL
       String decodedPath;
       try {
-        decodedPath = pathURL.toURI().getPath();
+        decodedPath = pathURL.toURI().getSchemeSpecificPart();
       } catch (URISyntaxException e) {
         e.printStackTrace();
         return null;

File: core/src/processing/core/PApplet.java
Patch:
@@ -7413,7 +7413,7 @@ static protected String calcSketchPath() {
       URL jarURL =
           PApplet.class.getProtectionDomain().getCodeSource().getLocation();
       // Decode URL
-      String jarPath = jarURL.toURI().getPath();
+      String jarPath = jarURL.toURI().getSchemeSpecificPart();
 
       // Workaround for bug in Java for OS X from Oracle (7u51)
       // https://github.com/processing/processing/issues/2181

File: java/libraries/io/src/processing/io/SoftwareServo.java
Patch:
@@ -34,7 +34,7 @@ public class SoftwareServo {
   public static final int DEFAULT_MAX_PULSE = 2400;
 
   protected int pin = -1;           // gpio number (-1 .. not attached)
-  protected int handle = -1;        // native thread id (<0 .. not started)
+  protected long handle = -1;       // native thread id (<0 .. not started)
   protected int period = 20000;     // 20 ms (50 Hz)
   protected int minPulse = 0;       // minimum pulse width in microseconds
   protected int maxPulse = 0;       // maximum pulse width in microseconds
@@ -122,7 +122,7 @@ public void write(float angle) {
       }
       handle = NativeInterface.servoStartThread(pin, pulse, period);
       if (handle < 0) {
-        throw new RuntimeException(NativeInterface.getError(handle));
+        throw new RuntimeException(NativeInterface.getError((int)handle));
       }
     } else {
       // thread already running

File: java/src/processing/mode/java/pdex/JavaTextArea.java
Patch:
@@ -634,7 +634,7 @@ public int xToOffset(int line, int x) {
    * Sets default cursor (instead of text cursor) in the gutter area.
    */
   protected final MouseMotionAdapter gutterCursorMouseAdapter = new MouseMotionAdapter() {
-    private int lastX; // previous horizontal positon of the mouse cursor
+    private int lastX; // previous horizontal position of the mouse cursor
 
     @Override
     public void mouseMoved(MouseEvent me) {

File: java/src/processing/mode/java/pdex/CompletionPanel.java
Patch:
@@ -64,7 +64,7 @@ public class CompletionPanel {
   private String subWord;
 
   /**
-   * Postion where the completion has to be inserted
+   * Position where the completion has to be inserted
    */
   private int insertionPosition;
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -6179,8 +6179,7 @@ public PFont createFont(String name, float size, boolean smooth) {
   public PFont createFont(String name, float size,
                           boolean smooth, char[] charset) {
     if (g == null) {
-      System.err.println("The sketch is not initialized yet.");
-      throw new RuntimeException("Fonts must be created inside setup() or after it has been called.");
+      throw new RuntimeException("createFont() can only be used inside setup() or after setup() has been called.");
     }
     return g.createFont(name, size, smooth, charset);
   }

File: core/src/processing/data/FloatDict.java
Patch:
@@ -158,6 +158,7 @@ public Iterator<String> keyIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public String next() {
@@ -218,6 +219,7 @@ public Iterator<Float> valueIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public Float next() {

File: core/src/processing/data/FloatList.java
Patch:
@@ -793,6 +793,7 @@ public Iterator<Float> iterator() {
 
       public void remove() {
         FloatList.this.remove(index);
+        index--;
       }
 
       public Float next() {

File: core/src/processing/data/IntDict.java
Patch:
@@ -159,6 +159,7 @@ public Iterator<String> keyIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public String next() {
@@ -219,6 +220,7 @@ public Iterator<Integer> valueIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public Integer next() {

File: core/src/processing/data/IntList.java
Patch:
@@ -737,6 +737,7 @@ public Iterator<Integer> iterator() {
 
       public void remove() {
         IntList.this.remove(index);
+        index--;
       }
 
       public Integer next() {

File: core/src/processing/data/StringDict.java
Patch:
@@ -160,6 +160,7 @@ public Iterator<String> keyIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public String next() {
@@ -219,6 +220,7 @@ public Iterator<String> valueIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public String next() {

File: core/src/processing/data/StringList.java
Patch:
@@ -657,6 +657,7 @@ public Iterator<String> iterator() {
 
       public void remove() {
         StringList.this.remove(index);
+        index--;
       }
 
       public String next() {
@@ -768,4 +769,4 @@ public String toString() {
     sb.append(" ]");
     return sb.toString();
   }
-}
\ No newline at end of file
+}

File: core/src/processing/data/FloatDict.java
Patch:
@@ -158,6 +158,7 @@ public Iterator<String> keyIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public String next() {
@@ -218,6 +219,7 @@ public Iterator<Float> valueIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public Float next() {

File: core/src/processing/data/FloatList.java
Patch:
@@ -793,6 +793,7 @@ public Iterator<Float> iterator() {
 
       public void remove() {
         FloatList.this.remove(index);
+        index--;
       }
 
       public Float next() {

File: core/src/processing/data/IntDict.java
Patch:
@@ -159,6 +159,7 @@ public Iterator<String> keyIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public String next() {
@@ -219,6 +220,7 @@ public Iterator<Integer> valueIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public Integer next() {

File: core/src/processing/data/IntList.java
Patch:
@@ -737,6 +737,7 @@ public Iterator<Integer> iterator() {
 
       public void remove() {
         IntList.this.remove(index);
+        index--;
       }
 
       public Integer next() {

File: core/src/processing/data/StringDict.java
Patch:
@@ -160,6 +160,7 @@ public Iterator<String> keyIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public String next() {
@@ -219,6 +220,7 @@ public Iterator<String> valueIterator() {
 
       public void remove() {
         removeIndex(index);
+        index--;
       }
 
       public String next() {

File: core/src/processing/data/StringList.java
Patch:
@@ -657,6 +657,7 @@ public Iterator<String> iterator() {
 
       public void remove() {
         StringList.this.remove(index);
+        index--;
       }
 
       public String next() {
@@ -768,4 +769,4 @@ public String toString() {
     sb.append(" ]");
     return sb.toString();
   }
-}
\ No newline at end of file
+}

File: app/src/processing/app/contrib/UpdateContributionTab.java
Patch:
@@ -41,7 +41,7 @@ protected void setLayout(boolean error, boolean loading) {
 
       buildErrorPanel();
 
-      loaderLabel = new JLabel(Toolkit.getLibIcon("icons/loader.gif"));
+      loaderLabel = new JLabel(Toolkit.getLibIcon("manager/loader.gif"));
       loaderLabel.setOpaque(false);
 //      loaderLabel.setBackground(Color.WHITE);
     }

File: core/src/processing/core/PApplet.java
Patch:
@@ -11151,9 +11151,9 @@ public void filter(PShader shader) {
   /**
    * ( begin auto-generated from clip.xml )
    *
-   * Limits the rendering to the boundaries of a rectangle defined 
-   * by the parameters. The boundaries are drawn based on the state 
-   * of the <b>imageMode()</b> fuction, either CORNER, CORNERS, or CENTER. 
+   * Limits the rendering to the boundaries of a rectangle defined
+   * by the parameters. The boundaries are drawn based on the state
+   * of the <b>imageMode()</b> fuction, either CORNER, CORNERS, or CENTER.
    *
    * ( end auto-generated )
    *

File: app/src/processing/app/contrib/ExamplesContribution.java
Patch:
@@ -52,7 +52,7 @@ static private StringList parseModeList(StringDict properties) {
    * exampleLocation directory is compatible with the current mode.
    *
    * @param base
-   * @param exampleFolder
+   * @param props
    * @return true if the example is compatible with the mode of the currently
    *         active editor
    */

File: app/src/processing/app/syntax/SyntaxStyle.java
Patch:
@@ -30,9 +30,9 @@ public class SyntaxStyle {
   /**
    * Creates a new SyntaxStyle.
    * @param color The text color
-   * @param italic True if the text should be italics
    * @param bold True if the text should be bold
    */
+// * @param italic True if the text should be italics
 //  public SyntaxStyle(Color color, boolean italic, boolean bold) {
   public SyntaxStyle(Color color, boolean bold) {
     this.color = color;

File: app/src/processing/app/syntax/im/CompositionTextManager.java
Patch:
@@ -77,7 +77,7 @@ public void insertFullWidthSpace() {
    * This method initializes text manager.
    *
    * @param text Text from InputMethodEvent.
-   * @param commited_count Numbers of committed characters in text.
+   * @param committed_count Numbers of committed characters in text.
    */
   public void beginCompositionText(AttributedCharacterIterator text, int committed_count) {
     isInputProcess = true;
@@ -91,7 +91,7 @@ public void beginCompositionText(AttributedCharacterIterator text, int committed
    * select candidates from input method.
    *
    * @param text Text from InputMethodEvent.
-   * @param commited_count Numbers of committed characters in text.
+   * @param committed_count Numbers of committed characters in text.
    */
   public void processCompositionText(AttributedCharacterIterator text, int committed_count) {
     int layoutCaretPosition = initialCaretPosition + committed_count;
@@ -129,7 +129,7 @@ private boolean canRemovePreviousInput(int committed_count){
    * composition text. This method resets CompositionTextPainter.
    *
    * @param text Text from InputMethodEvent.
-   * @param commited_count Numbers of committed characters in text.
+   * @param committed_count Numbers of committed characters in text.
    */
   public void endCompositionText(AttributedCharacterIterator text, int committed_count) {
     /*

File: app/src/processing/app/syntax/im/CompositionTextPainter.java
Patch:
@@ -43,7 +43,6 @@ public CompositionTextPainter(JEditTextArea textArea) {
   /**
    * Check the painter has TextLayout.
    * If a user input via InputMethod, this result will return true.
-   * @param textarea textarea used by PDE.
    */
   public boolean hasComposedTextLayout() {
     return (composedTextLayout != null);
@@ -55,7 +54,6 @@ public boolean hasComposedTextLayout() {
    * TextLayout will be created and set by CompositionTextManager.
    * 
    * @see CompositionTextManager
-   * @param textarea textarea used by PDE.
    */
   public void setComposedTextLayout(TextLayout composedTextLayout, int composedStartCaretPosition) {
     this.composedTextLayout = composedTextLayout;

File: app/src/processing/app/syntax/im/InputMethodSupport.java
Patch:
@@ -32,8 +32,9 @@
  *
  * @see <a href="https://processing.org/bugs/bugzilla/854.html">Bug 854 : implement input method support for Japanese (and other languages)</a>
  * @see <a href="https://processing.org/bugs/bugzilla/1531.html">Bug 1531 : Can't input full-width space when Japanese IME is on.</a>
- * @see http://docs.oracle.com/javase/8/docs/technotes/guides/imf/index.html
- * @see http://docs.oracle.com/javase/tutorial/2d/text/index.html
+ * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/imf/index.html">Java Input Method Framework
+ * (IMF) Technology</a>
+ * @see <a href="http://docs.oracle.com/javase/tutorial/2d/text/index.html">The Java Tutorials</a>
  *
  * @author Takashi Maekawa (takachin@generative.info)
  * @author Satoshi Okita

File: core/src/processing/core/PShape.java
Patch:
@@ -2940,8 +2940,8 @@ public boolean contains(float x, float y) {
    * @webref pshape:method
    * @usage web_application
    * @brief Displaces the shape
-   * @param tx left/right translation
-   * @param ty up/down translation
+   * @param x left/right translation
+   * @param y up/down translation
    * @see PShape#rotate(float)
    * @see PShape#scale(float)
    * @see PShape#resetMatrix()
@@ -2952,7 +2952,7 @@ public void translate(float x, float y) {
   }
 
   /**
-   * @param tz forward/back translation
+   * @param z forward/back translation
    */
   public void translate(float x, float y, float z) {
     checkMatrix(3);

File: core/src/processing/data/Table.java
Patch:
@@ -3577,7 +3577,7 @@ public int matchRowIndex(String what, String columnName) {
   /**
    * Return a list of rows that contain the String passed in. If there are no
    * matches, a zero length array will be returned (not a null array).
-   * @param what the String to match
+   * @param regexp the String to match
    * @param column ID number of the column to search
    */
   public int[] matchRowIndices(String regexp, int column) {
@@ -3762,7 +3762,7 @@ public void replaceAll(String regex, String replacement, int column) {
   /**
    * Run String.replaceAll() on all entries in a column.
    * Only works with columns that are already String values.
-   * @param what the String to match
+   * @param regex the String to match
    * @param columnName title of the column to search
    */
   public void replaceAll(String regex, String replacement, String columnName) {

File: core/src/processing/data/XML.java
Patch:
@@ -45,7 +45,6 @@
  * representing a single node of an XML tree.
  *
  * @webref data:composite
- * @see PApplet#createXML(String)
  * @see PApplet#loadXML(String)
  * @see PApplet#parseXML(String)
  * @see PApplet#saveXML(XML, String)

File: core/src/processing/opengl/LinePath.java
Patch:
@@ -159,7 +159,7 @@ public LinePath(int rule) {
    *
    * @param rule
    *          the winding rule
-   * @param initialTypes
+   * @param initialCapacity
    *          the size to make the initial array to store the path segment types
    */
   public LinePath(int rule, int initialCapacity) {
@@ -415,7 +415,7 @@ static public LinePath createStrokedPath(LinePath src, float weight,
    *          the original path to be stroked
    * @param weight
    *          the weight of the stroked path
-   * @param cap
+   * @param caps
    *          the decoration of the ends of the segments in the path
    * @param join
    *          the decoration applied where path segments meet

File: java/libraries/io/src/processing/io/SPI.java
Patch:
@@ -145,7 +145,7 @@ public static String[] list() {
    *  Configures the SPI interface
    *  @param maxSpeed maximum transmission rate in Hz, 500000 (500 kHz) is a resonable default
    *  @param dataOrder whether data is send with the first- or least-significant bit first (SPI.MSBFIRST or SPI.LSBFIRST, the former is more common)
-   *  @param mode <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Clock_polarity_and_phase">SPI.MODE0 to SPI.MODE3</br>
+   *  @param mode <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Clock_polarity_and_phase">SPI.MODE0 to SPI.MODE3</a>
    *  @webref
    */
   public void settings(int maxSpeed, int dataOrder, int mode) {

File: java/libraries/serial/src/processing/serial/Serial.java
Patch:
@@ -533,7 +533,7 @@ public String readStringUntil(int inByte) {
    * @generate serialEvent.xml
    * @webref serial:events
    * @usage web_application
-   * @param serialPorttEvent the port where new data is available
+   * @param event the port where new data is available
    */
   public void serialEvent(SerialPortEvent event) {
     if (event.getEventType() == SerialPortEvent.RXCHAR) {

File: app/src/processing/app/contrib/ExamplesContribution.java
Patch:
@@ -52,7 +52,7 @@ static private StringList parseModeList(StringDict properties) {
    * exampleLocation directory is compatible with the current mode.
    *
    * @param base
-   * @param exampleFolder
+   * @param props
    * @return true if the example is compatible with the mode of the currently
    *         active editor
    */

File: app/src/processing/app/syntax/SyntaxStyle.java
Patch:
@@ -30,9 +30,9 @@ public class SyntaxStyle {
   /**
    * Creates a new SyntaxStyle.
    * @param color The text color
-   * @param italic True if the text should be italics
    * @param bold True if the text should be bold
    */
+// * @param italic True if the text should be italics
 //  public SyntaxStyle(Color color, boolean italic, boolean bold) {
   public SyntaxStyle(Color color, boolean bold) {
     this.color = color;

File: app/src/processing/app/syntax/im/CompositionTextManager.java
Patch:
@@ -77,7 +77,7 @@ public void insertFullWidthSpace() {
    * This method initializes text manager.
    *
    * @param text Text from InputMethodEvent.
-   * @param commited_count Numbers of committed characters in text.
+   * @param committed_count Numbers of committed characters in text.
    */
   public void beginCompositionText(AttributedCharacterIterator text, int committed_count) {
     isInputProcess = true;
@@ -91,7 +91,7 @@ public void beginCompositionText(AttributedCharacterIterator text, int committed
    * select candidates from input method.
    *
    * @param text Text from InputMethodEvent.
-   * @param commited_count Numbers of committed characters in text.
+   * @param committed_count Numbers of committed characters in text.
    */
   public void processCompositionText(AttributedCharacterIterator text, int committed_count) {
     int layoutCaretPosition = initialCaretPosition + committed_count;
@@ -129,7 +129,7 @@ private boolean canRemovePreviousInput(int committed_count){
    * composition text. This method resets CompositionTextPainter.
    *
    * @param text Text from InputMethodEvent.
-   * @param commited_count Numbers of committed characters in text.
+   * @param committed_count Numbers of committed characters in text.
    */
   public void endCompositionText(AttributedCharacterIterator text, int committed_count) {
     /*

File: app/src/processing/app/syntax/im/CompositionTextPainter.java
Patch:
@@ -43,7 +43,6 @@ public CompositionTextPainter(JEditTextArea textArea) {
   /**
    * Check the painter has TextLayout.
    * If a user input via InputMethod, this result will return true.
-   * @param textarea textarea used by PDE.
    */
   public boolean hasComposedTextLayout() {
     return (composedTextLayout != null);
@@ -55,7 +54,6 @@ public boolean hasComposedTextLayout() {
    * TextLayout will be created and set by CompositionTextManager.
    * 
    * @see CompositionTextManager
-   * @param textarea textarea used by PDE.
    */
   public void setComposedTextLayout(TextLayout composedTextLayout, int composedStartCaretPosition) {
     this.composedTextLayout = composedTextLayout;

File: app/src/processing/app/syntax/im/InputMethodSupport.java
Patch:
@@ -32,8 +32,9 @@
  *
  * @see <a href="https://processing.org/bugs/bugzilla/854.html">Bug 854 : implement input method support for Japanese (and other languages)</a>
  * @see <a href="https://processing.org/bugs/bugzilla/1531.html">Bug 1531 : Can't input full-width space when Japanese IME is on.</a>
- * @see http://docs.oracle.com/javase/8/docs/technotes/guides/imf/index.html
- * @see http://docs.oracle.com/javase/tutorial/2d/text/index.html
+ * @see <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/imf/index.html">Java Input Method Framework
+ * (IMF) Technology</a>
+ * @see <a href="http://docs.oracle.com/javase/tutorial/2d/text/index.html">The Java Tutorials</a>
  *
  * @author Takashi Maekawa (takachin@generative.info)
  * @author Satoshi Okita

File: core/src/processing/core/PShape.java
Patch:
@@ -2940,8 +2940,8 @@ public boolean contains(float x, float y) {
    * @webref pshape:method
    * @usage web_application
    * @brief Displaces the shape
-   * @param tx left/right translation
-   * @param ty up/down translation
+   * @param x left/right translation
+   * @param y up/down translation
    * @see PShape#rotate(float)
    * @see PShape#scale(float)
    * @see PShape#resetMatrix()
@@ -2952,7 +2952,7 @@ public void translate(float x, float y) {
   }
 
   /**
-   * @param tz forward/back translation
+   * @param z forward/back translation
    */
   public void translate(float x, float y, float z) {
     checkMatrix(3);

File: core/src/processing/data/Table.java
Patch:
@@ -3577,7 +3577,7 @@ public int matchRowIndex(String what, String columnName) {
   /**
    * Return a list of rows that contain the String passed in. If there are no
    * matches, a zero length array will be returned (not a null array).
-   * @param what the String to match
+   * @param regexp the String to match
    * @param column ID number of the column to search
    */
   public int[] matchRowIndices(String regexp, int column) {
@@ -3762,7 +3762,7 @@ public void replaceAll(String regex, String replacement, int column) {
   /**
    * Run String.replaceAll() on all entries in a column.
    * Only works with columns that are already String values.
-   * @param what the String to match
+   * @param regex the String to match
    * @param columnName title of the column to search
    */
   public void replaceAll(String regex, String replacement, String columnName) {

File: core/src/processing/data/XML.java
Patch:
@@ -45,7 +45,6 @@
  * representing a single node of an XML tree.
  *
  * @webref data:composite
- * @see PApplet#createXML(String)
  * @see PApplet#loadXML(String)
  * @see PApplet#parseXML(String)
  * @see PApplet#saveXML(XML, String)

File: core/src/processing/opengl/LinePath.java
Patch:
@@ -159,7 +159,7 @@ public LinePath(int rule) {
    *
    * @param rule
    *          the winding rule
-   * @param initialTypes
+   * @param initialCapacity
    *          the size to make the initial array to store the path segment types
    */
   public LinePath(int rule, int initialCapacity) {
@@ -415,7 +415,7 @@ static public LinePath createStrokedPath(LinePath src, float weight,
    *          the original path to be stroked
    * @param weight
    *          the weight of the stroked path
-   * @param cap
+   * @param caps
    *          the decoration of the ends of the segments in the path
    * @param join
    *          the decoration applied where path segments meet

File: java/libraries/io/src/processing/io/SPI.java
Patch:
@@ -145,7 +145,7 @@ public static String[] list() {
    *  Configures the SPI interface
    *  @param maxSpeed maximum transmission rate in Hz, 500000 (500 kHz) is a resonable default
    *  @param dataOrder whether data is send with the first- or least-significant bit first (SPI.MSBFIRST or SPI.LSBFIRST, the former is more common)
-   *  @param mode <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Clock_polarity_and_phase">SPI.MODE0 to SPI.MODE3</br>
+   *  @param mode <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus#Clock_polarity_and_phase">SPI.MODE0 to SPI.MODE3</a>
    *  @webref
    */
   public void settings(int maxSpeed, int dataOrder, int mode) {

File: java/libraries/serial/src/processing/serial/Serial.java
Patch:
@@ -533,7 +533,7 @@ public String readStringUntil(int inByte) {
    * @generate serialEvent.xml
    * @webref serial:events
    * @usage web_application
-   * @param serialPorttEvent the port where new data is available
+   * @param event the port where new data is available
    */
   public void serialEvent(SerialPortEvent event) {
     if (event.getEventType() == SerialPortEvent.RXCHAR) {

File: app/src/processing/app/Mode.java
Patch:
@@ -327,7 +327,9 @@ public void rebuildLibraryList() {
     // Make this Map thread-safe
     this.importToLibraryTable = Collections.unmodifiableMap(importToLibraryTable);
 
-    base.getEditors().forEach(Editor::librariesChanged);
+    if (base != null) {
+      base.getEditors().forEach(Editor::librariesChanged);
+    }
   }
 
 

File: app/src/processing/app/syntax/Brackets.java
Patch:
@@ -51,7 +51,7 @@ public int findMatchingBracket(final String text, final int pos) {
       return -1;
     }
 
-    if (offsets == null || offsets.get(offsets.size()-1) >= text.length())
+    if (offsets == null)
       parse(text);
     
     // find this bracket
@@ -126,9 +126,9 @@ private void readMLComment(final String text) {
     for (pos++; pos < len; pos++) {
       final char c = text.charAt(pos);
       if (c == '*' && (pos < len - 1)) {
-        pos++;
-        final char d = text.charAt(pos);
+        final char d = text.charAt(pos + 1);
         if (d == '/') {
+          pos++;
           return;
         }
       }

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -818,6 +818,7 @@ public void setDocument(SyntaxDocument document) {
 
     document.addDocumentListener(documentHandler);
 
+    bracketHelper.invalidate();
     select(0, 0);
     updateScrollBars();
     painter.repaint();
@@ -838,6 +839,7 @@ public void setDocument(SyntaxDocument document,
 
     document.addDocumentListener(documentHandler);
 
+    bracketHelper.invalidate();
     select(start, stop);
     updateScrollBars();
     setVerticalScrollPosition(scroll);

File: java/src/processing/mode/java/pdex/PreprocessingService.java
Patch:
@@ -104,6 +104,9 @@ public PreprocessingService(JavaEditor editor) {
     this.editor = editor;
     isEnabled = !editor.hasJavaTabs();
 
+    // Register listeners for first run
+    whenDone(this::fireListeners);
+
     preprocessingThread = new Thread(this::mainLoop, "ECS");
     preprocessingThread.start();
   }

File: java/src/processing/mode/java/pdex/PreprocessingService.java
Patch:
@@ -104,6 +104,9 @@ public PreprocessingService(JavaEditor editor) {
     this.editor = editor;
     isEnabled = !editor.hasJavaTabs();
 
+    // Register listeners for first run
+    whenDone(this::fireListeners);
+
     preprocessingThread = new Thread(this::mainLoop, "ECS");
     preprocessingThread.start();
   }

File: java/src/processing/mode/java/pdex/PDEX.java
Patch:
@@ -310,7 +310,7 @@ private static class ShowUsage {
     final JTree tree;
 
     final JavaEditor editor;
-//    final PreprocessingService pps;
+    final PreprocessingService pps;
 
     final Consumer<PreprocessedSketch> reloadListener;
 
@@ -319,7 +319,7 @@ private static class ShowUsage {
 
     ShowUsage(JavaEditor editor, PreprocessingService pps) {
       this.editor = editor;
-//      this.pps = pps;
+      this.pps = pps;
 
       // Add show usage option
       JMenuItem showUsageItem = new JMenuItem(Language.text("editor.popup.show_usage"));

File: java/src/processing/mode/java/pdex/PDEX.java
Patch:
@@ -310,7 +310,7 @@ private static class ShowUsage {
     final JTree tree;
 
     final JavaEditor editor;
-//    final PreprocessingService pps;
+    final PreprocessingService pps;
 
     final Consumer<PreprocessedSketch> reloadListener;
 
@@ -319,7 +319,7 @@ private static class ShowUsage {
 
     ShowUsage(JavaEditor editor, PreprocessingService pps) {
       this.editor = editor;
-//      this.pps = pps;
+      this.pps = pps;
 
       // Add show usage option
       JMenuItem showUsageItem = new JMenuItem(Language.text("editor.popup.show_usage"));

File: java/src/processing/mode/java/pdex/PDEX.java
Patch:
@@ -232,7 +232,6 @@ public void keyReleased(KeyEvent e) {
 
 
     void checkInspectMode() {
-      System.out.println(isMouseDown + " " + isCtrlDown + " " + isMetaDown);
       inspectModeEnabled = !isMouseDown && (isCtrlDown && !Platform.isMacOS()) || isMetaDown;
     }
 

File: java/src/processing/mode/java/pdex/PDEX.java
Patch:
@@ -232,7 +232,6 @@ public void keyReleased(KeyEvent e) {
 
 
     void checkInspectMode() {
-      System.out.println(isMouseDown + " " + isCtrlDown + " " + isMetaDown);
       inspectModeEnabled = !isMouseDown && (isCtrlDown && !Platform.isMacOS()) || isMetaDown;
     }
 

File: java/src/processing/mode/java/pdex/TextTransform.java
Patch:
@@ -10,8 +10,6 @@
 
 import processing.core.PApplet;
 
-import static java.awt.SystemColor.text;
-
 
 public class TextTransform {
 
@@ -209,7 +207,7 @@ public String toString() {
       return "Edit{" +
           "from=" + fromOffset + ":" + fromLength +
           ", to=" + toOffset + ":" + toLength +
-          ((text != null) ? (", text='" + outputText + '\'') : "") +
+          ((outputText != null) ? (", text='" + outputText + '\'') : "") +
           '}';
     }
   }

File: java/src/processing/mode/java/pdex/PDEX.java
Patch:
@@ -273,8 +273,6 @@ void findUsageAndUpdateTree(PreprocessedSketch ps, int tabIndex,
 
       // Find binding
       IBinding binding = ASTUtils.resolveBinding(name);
-
-      this.binding = binding;
       if (binding == null) {
         editor.statusMessage("Cannot find usages, try to fix errors in your code first",
                              EditorStatus.ERROR);
@@ -288,6 +286,8 @@ void findUsageAndUpdateTree(PreprocessedSketch ps, int tabIndex,
     // Thread: worker
     void findUsageAndUpdateTree(PreprocessedSketch ps, IBinding binding) {
 
+      this.binding = binding;
+
       // Get label
       String bindingType = "";
       switch (binding.getKind()) {

File: java/src/processing/mode/java/pdex/JavaTextArea.java
Patch:
@@ -322,7 +322,7 @@ protected void fetchPhrase() {
     int codeIndex = editor.getSketch().getCodeIndex(editor.getCurrentTab());
     int lineStartOffset = editor.getTextArea().getLineStartOffset(caretLineIndex);
 
-    editor.getErrorChecker().acceptWhenDone(ps -> {
+    editor.getPreprocessingService().whenDone(ps -> {
       int lineNumber = ps.tabOffsetToJavaLine(codeIndex, lineStartOffset);
 
       String phrase = null;

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -523,11 +523,11 @@ public String preprocess(File srcFolder,
           } else {
             if (packageMatch == null) {
               // use the default package name, since mixing with package-less code will break
-              packageMatch = new String[] { packageName };
+              packageMatch = new String[] { "", packageName };
               // add the package name to the source before writing it
               javaCode = "package " + packageName + ";" + javaCode;
             }
-            File packageFolder = new File(srcFolder, packageMatch[0].replace('.', '/'));
+            File packageFolder = new File(srcFolder, packageMatch[1].replace('.', File.separatorChar));
             packageFolder.mkdirs();
             Util.saveFile(javaCode, new File(packageFolder, filename));
           }

File: java/src/processing/mode/java/pdex/JavaTextArea.java
Patch:
@@ -372,7 +372,7 @@ protected void fetchPhrase() {
           }
         });
       } catch (Exception e) {
-        Messages.loge("error while preparing suggestions", e.getCause());
+        Messages.loge("error while preparing suggestions", e);
       }
     });
   }

File: java/src/processing/mode/java/pdex/ASTGenerator.java
Patch:
@@ -1173,7 +1173,6 @@ public void handleShowUsage(int tabIndex, int startTabOffset, int stopTabOffset)
     if (editor.hasJavaTabs()) return; // show usage disabled if java tabs
 
     PreprocessedSketch ps = errorCheckerService.latestResult;
-    if (ps.hasSyntaxErrors) return;
 
     // Map offsets
     int startJavaOffset = ps.tabOffsetToJavaOffset(tabIndex, startTabOffset);
@@ -1193,7 +1192,6 @@ public void handleShowUsage(int tabIndex, int startTabOffset, int stopTabOffset)
 
   public void handleShowUsage(IBinding binding) {
     PreprocessedSketch ps = errorCheckerService.latestResult;
-    if (ps.hasSyntaxErrors) return;
 
     String bindingKey = binding.getKey();
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -5333,6 +5333,7 @@ public PImage loadImage(String filename, String extension) { //, Object params)
 //          if (params != null) {
 //            image.setParams(g, params);
 //          }
+          image.parent = this;
           return image;
         }
       }

File: java/src/processing/mode/java/pdex/PreprocessedSketch.java
Patch:
@@ -44,9 +44,9 @@ public class PreprocessedSketch {
   public static int lineToOffset(String text, int line) {
     int lineOffset = 0;
     for (int i = 0; i < line && lineOffset >= 0; i++) {
-      lineOffset = text.indexOf('\n', lineOffset+1);
+      lineOffset = text.indexOf('\n', lineOffset) + 1;
     }
-    return lineOffset + 1;
+    return lineOffset;
   }
 
 

File: java/src/processing/mode/java/pdex/SourceUtils.java
Patch:
@@ -62,9 +62,8 @@ public static List<Edit> replaceTypeConstructors(CharSequence source) {
       int offset = matcher.start(1);
       int length = match.length();
       String replace = "PApplet.parse"
-          + Character.toUpperCase(match.charAt(0))
-          + match.substring(1);
-      result.add(Edit.replace(offset, length, replace));
+          + Character.toUpperCase(match.charAt(0));
+      result.add(Edit.replace(offset, length - (match.length() - 1), replace));
     }
 
     return result;

File: java/src/processing/mode/java/pdex/JavaTextAreaPainter.java
Patch:
@@ -175,10 +175,10 @@ else if (s.length() == 0)
       if (Character.isDigit(word.charAt(0)))
         return;
 
-      Messages.log(getJavaEditor().getErrorChecker().mainClassOffset + line + "|" + line + "| offset " + xLS + word + " <= \n");
+      Messages.log(line + "|" + line + "| offset " + xLS + word + " <= \n");
       ASTGenerator astGenerator = getJavaEditor().getErrorChecker().getASTGenerator();
       synchronized (astGenerator) {
-        astGenerator.scrollToDeclaration(line, word, xLS);
+        astGenerator.scrollToDeclaration(off, word);
       }
     }
   }

File: app/src/processing/app/syntax/Brackets.java
Patch:
@@ -51,7 +51,7 @@ public int findMatchingBracket(final String text, final int pos) {
       return -1;
     }
 
-    if (offsets == null || offsets.get(offsets.size()-1) >= text.length())
+    if (offsets == null)
       parse(text);
     
     // find this bracket
@@ -126,9 +126,9 @@ private void readMLComment(final String text) {
     for (pos++; pos < len; pos++) {
       final char c = text.charAt(pos);
       if (c == '*' && (pos < len - 1)) {
-        pos++;
-        final char d = text.charAt(pos);
+        final char d = text.charAt(pos + 1);
         if (d == '/') {
+          pos++;
           return;
         }
       }

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -818,6 +818,7 @@ public void setDocument(SyntaxDocument document) {
 
     document.addDocumentListener(documentHandler);
 
+    bracketHelper.invalidate();
     select(0, 0);
     updateScrollBars();
     painter.repaint();
@@ -838,6 +839,7 @@ public void setDocument(SyntaxDocument document,
 
     document.addDocumentListener(documentHandler);
 
+    bracketHelper.invalidate();
     select(start, stop);
     updateScrollBars();
     setVerticalScrollPosition(scroll);

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -2519,7 +2519,7 @@ public LineMarker findError(int line) {
     for (LineMarker emarker : errorPoints) {
       Problem p = emarker.getProblem();
       int pStartLine = p.getLineNumber();
-      int pEndOffset = textArea.getLineStartOffset(pStartLine) + p.getPDELineStopOffset() + 1;
+      int pEndOffset = p.getStopOffset();
       int pEndLine = textArea.getLineOfOffset(pEndOffset);
       if (line >= pStartLine && line <= pEndLine) {
         return emarker;

File: java/src/processing/mode/java/pdex/SourceMapping.java
Patch:
@@ -225,7 +225,7 @@ private void checkNotApplied() {
 
 
   private void checkApplied() {
-    if (applied) throw new RuntimeException("this mapping was not applied yet");
+    if (!applied) throw new RuntimeException("this mapping was not applied yet");
   }
 
 

File: java/src/processing/mode/java/pdex/ErrorCheckerService.java
Patch:
@@ -436,7 +436,7 @@ protected CodeCheckResult checkCode() {
 
       SourceMapping mapping2 = new SourceMapping();
 
-      mapping2.addAll(SourceUtils.addPublicToTopLeveMethods(result.compilationUnit));
+      mapping2.addAll(SourceUtils.addPublicToTopLevelMethods(result.compilationUnit));
       mapping2.addAll(SourceUtils.replaceColorAndFixFloats(result.compilationUnit));
 
       result.sourceCode = mapping2.apply(result.sourceCode);

File: java/src/processing/mode/java/pdex/SourceUtils.java
Patch:
@@ -136,7 +136,7 @@ public static List<Edit> wrapSketch(PdePreprocessor.Mode mode, String className,
   }
 
 
-  public static List<Edit> addPublicToTopLeveMethods(CompilationUnit cu) {
+  public static List<Edit> addPublicToTopLevelMethods(CompilationUnit cu) {
     List<Edit> edits = new ArrayList<>();
 
     // Add public modifier to top level methods

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -1619,7 +1619,7 @@ public void actionPerformed(ActionEvent e) {
     item = Toolkit.newJMenuItem(Language.text("menu.debug.show_sketch_outline"), KeyEvent.VK_L);
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          Base.log("Show Sketch Outline:");
+          Messages.log("Show Sketch Outline:");
           errorCheckerService.getASTGenerator().showSketchOutline();
         }
       });
@@ -1628,7 +1628,7 @@ public void actionPerformed(ActionEvent e) {
     item = Toolkit.newJMenuItem(Language.text("menu.debug.show_tabs_list"), KeyEvent.VK_Y);
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          Base.log("Show Tab Outline:");
+          Messages.log("Show Tab Outline:");
           errorCheckerService.getASTGenerator().showTabOutline();
         }
       });

File: java/src/processing/mode/java/MarkerColumn.java
Patch:
@@ -28,7 +28,6 @@
 import java.awt.event.MouseEvent;
 import java.awt.event.MouseMotionAdapter;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import javax.swing.JPanel;

File: app/src/processing/app/Language.java
Patch:
@@ -99,6 +99,7 @@ static private String[] listSupported() {
       "nl", // Dutch, Nederlands
       "pt", // Portuguese
       "tr", // Turkish
+      "uk", // Ukrainian
       "zh"  // Chinese
     };
     return SUPPORTED;

File: java/src/processing/mode/java/MarkerColumn.java
Patch:
@@ -62,8 +62,7 @@ public class MarkerColumn extends JPanel {
 	private Color warningColor;
 
 	// Stores error markers displayed PER TAB along the error bar.
-	private List<LineMarker> errorPoints =
-	  Collections.synchronizedList(new ArrayList<LineMarker>());
+	private List<LineMarker> errorPoints = new ArrayList<LineMarker>();
 
 
 	public MarkerColumn(JavaEditor editor, int height) {
@@ -119,7 +118,7 @@ public void updateErrorPoints(final List<Problem> problems) {
 	  // index in the arraylist is LOCALIZED for current tab.
 	  Sketch sketch = editor.getSketch();
 	  int currentTab = sketch.getCurrentCodeIndex();
-	  errorPoints = Collections.synchronizedList(new ArrayList<LineMarker>());
+	  errorPoints.clear();
 	  // Each problem.getSourceLine() will have an extra line added because
 	  // of class declaration in the beginning as well as default imports
 	  for (Problem problem : problems) {

File: java/src/processing/mode/java/pdex/ErrorCheckerService.java
Patch:
@@ -779,13 +779,13 @@ protected boolean ignorableSuggestionImport(String impName) {
     final String exclude = "exclude";
 
     if (impName.startsWith("processing")) {
-      if (JavaMode.suggestionsMap.get(include).contains(impName)) {
+      if (JavaMode.suggestionsMap.containsKey(include) && JavaMode.suggestionsMap.get(include).contains(impName)) {
         return false;
-      } else if (JavaMode.suggestionsMap.get(exclude).contains(impName)) {
+      } else if (JavaMode.suggestionsMap.containsKey(exclude) && JavaMode.suggestionsMap.get(exclude).contains(impName)) {
         return true;
       }
     } else if (impName.startsWith("java")) {
-      if (JavaMode.suggestionsMap.get(include).contains(impName)) {
+      if (JavaMode.suggestionsMap.containsKey(include) && JavaMode.suggestionsMap.get(include).contains(impName)) {
         return false;
       }
     }

File: app/src/processing/app/contrib/ContributionTab.java
Patch:
@@ -228,8 +228,7 @@ protected void buildErrorPanel() {
     StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
     doc.setParagraphAttributes(0, doc.getLength(), center, false);
 
-    // TODO https://github.com/processing/processing/issues/3706
-    closeButton = new JButton("X");
+    closeButton = new JButton(Toolkit.getLibIconX("manager/close"));
     closeButton.setContentAreaFilled(false);
     closeButton.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {

File: core/src/processing/core/PApplet.java
Patch:
@@ -11138,9 +11138,9 @@ public void filter(PShader shader) {
   /**
    * ( begin auto-generated from clip.xml )
    *
-   * Limits the rendering to the boundaries of a rectangle defined
-   * by the parameters. The boundaries are drawn based on the state
-   * of the <b>imageMode()</b> fuction, either CORNER, CORNERS, or CENTER.
+   * Limits the rendering to the boundaries of a rectangle defined 
+   * by the parameters. The boundaries are drawn based on the state 
+   * of the <b>imageMode()</b> fuction, either CORNER, CORNERS, or CENTER. 
    *
    * ( end auto-generated )
    *

File: core/src/processing/javafx/PSurfaceFX.java
Patch:
@@ -313,7 +313,8 @@ public void start(final Stage stage) {
       // https://github.com/processing/processing/issues/3823
       if ((PApplet.platform == PConstants.MACOSX ||
            PApplet.platform == PConstants.LINUX) &&
-          PApplet.javaVersionName.compareTo("1.8.0_60") >= 0) {
+          PApplet.javaVersionName.compareTo("1.8.0_60") >= 0 &&
+          PApplet.javaVersionName.compareTo("1.8.0_72") < 0) {
         System.err.println("smooth() disabled for JavaFX with this Java version due to Oracle bug");
         System.err.println("https://github.com/processing/processing/issues/3795");
         smooth = 0;

File: app/src/processing/app/tools/InstallCommander.java
Patch:
@@ -91,7 +91,7 @@ public void run() {
                    "OPTION_FOR_HEADLESS_RUN=\"\"\n" +
                    "for ARG in \"$@\"\n" +
                    "do\n" +
-                   "    if [ $ARG = \"--build\" ]; then\n" +
+                   "    if [ \"$ARG\" = \"--build\" ]; then\n" +
                    "        OPTION_FOR_HEADLESS_RUN=\"-Djava.awt.headless=true\"\n" +
                    "    fi\n" +
                    "done\n\n");

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -327,8 +327,7 @@ public void actionPerformed(ActionEvent e) {
       public void actionPerformed(ActionEvent e) {
         if (textarea.isSelectionActive()) {
           handleFindReference();
-        }
-        else {
+        } else {
           statusNotice(Language.text("editor.status.find_reference.select_word_first"));
         }
       }

File: java/src/processing/mode/java/pdex/ASTGenerator.java
Patch:
@@ -2497,6 +2497,7 @@ public static void printRecur(ASTNode node) {
 
   protected static ASTNode findLineOfNode(ASTNode node, int lineNumber,
                                         int offset, String name) {
+    if (node == null) return null;
 
     CompilationUnit root = (CompilationUnit) node.getRoot();
 //    log("Inside "+getNodeAsString(node) + " | " + root.getLineNumber(node.getStartPosition()));

File: app/src/processing/app/syntax/Brackets.java
Patch:
@@ -16,7 +16,7 @@ public void invalidate() {
   }
 
   public int findMatchingBracket(final String text, final int pos) {
-    if (pos < 0 || pos > text.length())
+    if (pos < 0 || pos >= text.length())
       return -1;
     
     final char alpha = text.charAt(pos);
@@ -51,7 +51,7 @@ public int findMatchingBracket(final String text, final int pos) {
       return -1;
     }
 
-    if (offsets == null)
+    if (offsets == null || offsets.get(offsets.size()-1) >= text.length())
       parse(text);
     
     // find this bracket

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -755,6 +755,9 @@ public int xToOffset(int line, int x) {
 //                             ", i = " + i +
 //                             ", length = " + length +
 //                             ", array len = " + segmentArray.length);
+          if (segmentOffset + offset + i >= segmentArray.length) {
+            return segmentArray.length - segmentOffset - 1;
+          }
           char c = segmentArray[segmentOffset + offset + i];
           int charWidth;
           if (c == '\t') {

File: java/src/processing/mode/java/JavaToolbar.java
Patch:
@@ -79,7 +79,7 @@ public void actionPerformed(ActionEvent e) {
                                     Language.text("menu.debug.step_out")) {
         @Override
         public void actionPerformed(ActionEvent e) {
-          final int mask = KeyEvent.SHIFT_DOWN_MASK | KeyEvent.ALT_DOWN_MASK;
+          final int mask = ActionEvent.SHIFT_MASK | ActionEvent.ALT_MASK;
           jeditor.handleStep(e.getModifiers() & mask);
         }
       };

File: core/src/processing/core/PVector.java
Patch:
@@ -934,7 +934,7 @@ public PVector rotate(float theta) {
    * @usage web_application
    * @brief Linear interpolate the vector to another vector
    * @param v the vector to lerp to
-   * @param amt  The amount of interpolation; some value between 0.0 (old vector) and 1.0 (new vector). 0.1 is very near the new vector. 0.5 is halfway in between.
+   * @param amt  The amount of interpolation; some value between 0.0 (old vector) and 1.0 (new vector). 0.1 is very near the old vector; 0.5 is halfway in between.
    * @see PApplet#lerp(float, float, float)
    */
   public PVector lerp(PVector v, float amt) {

File: app/src/processing/app/ui/PreferencesFrame.java
Patch:
@@ -165,7 +165,8 @@ public void actionPerformed(ActionEvent e) {
 
     presentColor = new JTextField("      ");
     presentColor.setOpaque(true);
-    presentColor.setEnabled(false);
+    presentColor.setEnabled(true);
+    presentColor.setEditable(false);
     Border cb = new CompoundBorder(BorderFactory.createMatteBorder(1, 1, 0, 0, new Color(195, 195, 195)),
                                    BorderFactory.createMatteBorder(0, 0, 1, 1, new Color(54, 54, 54)));
     presentColor.setBorder(cb);

File: core/src/processing/core/PGraphics.java
Patch:
@@ -5720,6 +5720,7 @@ public void beginCamera() {
    * ( end auto-generated )
    *
    * @webref lights_camera:camera
+   * @see PGraphics#beginCamera()
    * @see PGraphics#camera(float, float, float, float, float, float, float, float, float)
    */
   public void endCamera() {
@@ -5742,6 +5743,7 @@ public void endCamera() {
    * ( end auto-generated )
    *
    * @webref lights_camera:camera
+   * @see PGraphics#beginCamera()
    * @see PGraphics#endCamera()
    * @see PGraphics#frustum(float, float, float, float, float, float)
    */
@@ -5876,6 +5878,7 @@ public void perspective(float fovy, float aspect, float zNear, float zFar) {
    * @param near near component of the clipping plane; must be greater than zero
    * @param far far component of the clipping plane; must be greater than the near value
    * @see PGraphics#camera(float, float, float, float, float, float, float, float, float)
+   * @see PGraphics#beginCamera()
    * @see PGraphics#endCamera()
    * @see PGraphics#perspective(float, float, float, float)
    */

File: app/src/processing/app/Platform.java
Patch:
@@ -311,7 +311,8 @@ static public File getContentFile(String name) {
           System.err.println("Could not find lib folder via " +
             jarFolder.getAbsolutePath() +
             ", switching to user.dir");
-          processingRoot = new File(System.getProperty("user.dir"));
+          final String userDir = System.getProperty("user.dir");
+          processingRoot = new File(PApplet.urlDecode(userDir));
         }
       }
     }

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -938,8 +938,7 @@ public void windowLostFocus(com.jogamp.newt.event.WindowEvent arg0) {
 
     @Override
     public void windowDestroyNotify(com.jogamp.newt.event.WindowEvent arg0) {
-      sketch.dispose();
-      sketch.exitActual();
+      sketch.exit();
     }
 
     @Override

File: core/src/processing/core/PGraphics.java
Patch:
@@ -4685,7 +4685,7 @@ public void text(char[] chars, int start, int stop,
    * ignored.
    *
    * @param x1 by default, the x-coordinate of text, see rectMode() for more info
-   * @param y1 by default, the x-coordinate of text, see rectMode() for more info
+   * @param y1 by default, the y-coordinate of text, see rectMode() for more info
    * @param x2 by default, the width of the text box, see rectMode() for more info
    * @param y2 by default, the height of the text box, see rectMode() for more info
    */

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -10480,6 +10480,8 @@ private void copyFewCoords(InGeometry in, int i0, int index, int nvert) {
     // Copy many vertices using arrayCopy
     private void copyManyCoords(InGeometry in, int i0, int index, int nvert) {
       for (int i = 0; i < nvert; i++) {
+        // Position data needs to be copied in batches of three, because the
+        // input vertices don't have a w coordinate.
         int inIdx = i0 + i;
         int tessIdx = firstPolyVertex + i;
         PApplet.arrayCopy(in.vertices, 3 * inIdx,
@@ -10500,7 +10502,7 @@ private void copyManyCoords(InGeometry in, int i0, int index, int nvert) {
                         polyNormals, 3 * firstPolyVertex, 3 * nvert);
       for (String name: polyAttribs.keySet()) {
         VertexAttribute attrib = polyAttribs.get(name);
-        if (!attrib.isPosition()) continue;
+        if (!attrib.isNormal()) continue;
         float[] inValues = in.fattribs.get(name);
         float[] tessValues = fpolyAttribs.get(name);
         PApplet.arrayCopy(inValues, 3 * i0,

File: app/src/processing/app/tools/InstallCommander.java
Patch:
@@ -91,7 +91,7 @@ public void run() {
                    "OPTION_FOR_HEADLESS_RUN=\"\"\n" +
                    "for ARG in \"$@\"\n" +
                    "do\n" +
-                   "    if [ $ARG = \"--build\" ]; then\n" +
+                   "    if [ \"$ARG\" = \"--build\" ]; then\n" +
                    "        OPTION_FOR_HEADLESS_RUN=\"-Djava.awt.headless=true\"\n" +
                    "    fi\n" +
                    "done\n\n");

File: core/src/processing/core/PVector.java
Patch:
@@ -934,7 +934,7 @@ public PVector rotate(float theta) {
    * @usage web_application
    * @brief Linear interpolate the vector to another vector
    * @param v the vector to lerp to
-   * @param amt  The amount of interpolation; some value between 0.0 (old vector) and 1.0 (new vector). 0.1 is very near the new vector. 0.5 is halfway in between.
+   * @param amt  The amount of interpolation; some value between 0.0 (old vector) and 1.0 (new vector). 0.1 is very near the old vector; 0.5 is halfway in between.
    * @see PApplet#lerp(float, float, float)
    */
   public PVector lerp(PVector v, float amt) {

File: app/src/processing/app/syntax/Brackets.java
Patch:
@@ -51,7 +51,7 @@ public int findMatchingBracket(final String text, final int pos) {
       return -1;
     }
 
-    if (offsets == null)
+    if (offsets == null || offsets.get(offsets.size()-1) >= text.length())
       parse(text);
     
     // find this bracket

File: core/src/processing/core/PGraphics.java
Patch:
@@ -5363,6 +5363,7 @@ public void rotateZ(float angle) {
   /**
    * <h3>Advanced</h3>
    * Rotate about a vector in space. Same as the glRotatef() function.
+   * @nowebref
    * @param x
    * @param y
    * @param z

File: java/src/processing/mode/java/Debugger.java
Patch:
@@ -1124,13 +1124,13 @@ protected void printThis(ThreadReference t) {
       } else {
         StackFrame sf = t.frame(0);
         ObjectReference thisObject = sf.thisObject();
-        if (this != null) {
+        if (thisObject != null) {
           ReferenceType type = thisObject.referenceType();
           System.out.println("fields in this (" + type.name() + "):");
           for (Field f : type.visibleFields()) {
             System.out.println(f.typeName() + " " + f.name() + " = " + thisObject.getValue(f));
           }
-        } else {  // TODO [this is not reachable - fry]
+        } else {
           System.out.println("can't get this (in native or static method)");
         }
       }

File: java/src/processing/mode/java/Debugger.java
Patch:
@@ -920,7 +920,8 @@ protected String thisName(ThreadReference t) {
       if (!t.isSuspended() || t.frameCount() == 0) {
         return "";
       }
-      return t.frame(0).thisObject().referenceType().name();
+      ObjectReference ref = t.frame(0).thisObject();
+      return ref == null ? "" : ref.referenceType().name();
 
     } catch (IncompatibleThreadStateException ex) {
       log(Level.SEVERE, null, ex);

File: java/src/processing/mode/java/JavaToolbar.java
Patch:
@@ -79,7 +79,7 @@ public void actionPerformed(ActionEvent e) {
                                     Language.text("menu.debug.step_out")) {
         @Override
         public void actionPerformed(ActionEvent e) {
-          final int mask = KeyEvent.SHIFT_DOWN_MASK | KeyEvent.ALT_DOWN_MASK;
+          final int mask = ActionEvent.SHIFT_MASK | ActionEvent.ALT_MASK;
           jeditor.handleStep(e.getModifiers() & mask);
         }
       };

File: java/src/processing/mode/java/pdex/ASTGenerator.java
Patch:
@@ -2495,6 +2495,7 @@ public static void printRecur(ASTNode node) {
 
   protected static ASTNode findLineOfNode(ASTNode node, int lineNumber,
                                         int offset, String name) {
+    if (node == null) return null;
 
     CompilationUnit root = (CompilationUnit) node.getRoot();
 //    log("Inside "+getNodeAsString(node) + " | " + root.getLineNumber(node.getStartPosition()));

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -1343,7 +1343,8 @@ protected void setNewSelectionWord( int line, int offset )
     int wordStart = 0;
     int wordEnd = lineText.length();
 
-    char ch = lineText.charAt(Math.max(0,offset - 1));
+    int charPos = PApplet.constrain(offset - 1, 0, lineText.length() - 1);
+    char ch = lineText.charAt(charPos);
 
     CharacterKinds thisWord = CharacterKind(ch,noWordSep);
 

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -1343,7 +1343,8 @@ protected void setNewSelectionWord( int line, int offset )
     int wordStart = 0;
     int wordEnd = lineText.length();
 
-    char ch = lineText.charAt(Math.max(0,offset - 1));
+    int charPos = PApplet.constrain(offset - 1, 0, lineText.length() - 1);
+    char ch = lineText.charAt(charPos);
 
     CharacterKinds thisWord = CharacterKind(ch,noWordSep);
 

File: java/src/processing/mode/java/pdex/ASTGenerator.java
Patch:
@@ -216,8 +216,7 @@ protected DefaultMutableTreeNode buildAST(String source, CompilationUnit cu) {
 
       Map<String, String> options = JavaCore.getOptions();
 
-      JavaCore.setComplianceOptions(JavaCore.VERSION_1_8, options);
-      options.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_8);
+      JavaCore.setComplianceOptions(JavaCore.VERSION_1_7, options);
       parser.setCompilerOptions(options);
       compilationUnit = (CompilationUnit) parser.createAST(null);
     } else {

File: java/src/processing/mode/java/pdex/ErrorCheckerService.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.TreeMap;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.Executors;
@@ -514,8 +513,6 @@ public boolean hasErrors(){
     return lastCodeCheckResult.containsErrors;
   }
 
-  public TreeMap<String, IProblem> tempErrorLog = new TreeMap<>();
-
   protected URLClassLoader classLoader;
 
 

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -803,7 +803,7 @@ protected boolean exportApplication() throws IOException, SketchException {
           }
           // export the 64-bit version
           folder = new File(sketch.getFolder(), "application." + platformName + "64");
-          if (!exportApplication(folder, platform, "64", embedJava && Platform.getNativeBits() == 64 && "x86".equals(Platform.getNativeArch()))) {
+          if (!exportApplication(folder, platform, "64", embedJava && Platform.getNativeBits() == 64 && "amd64".equals(Platform.getNativeArch()))) {
             return false;
           }
           if (platform == PConstants.LINUX) {

File: app/src/processing/app/Base.java
Patch:
@@ -1250,7 +1250,7 @@ protected Editor handleOpen(String path, boolean untitled,
         return editor;
 
       } catch (EditorException ee) {
-        if (!ee.getMessage().equals("")) {  // blank if the user canceled
+        if (ee.getMessage() != null) {  // null if the user canceled
           Messages.showWarning("Error opening sketch", ee.getMessage(), ee);
         }
       } catch (NoSuchMethodError nsme) {

File: java/libraries/io/src/processing/io/PWM.java
Patch:
@@ -157,17 +157,19 @@ public static String[] list() {
   public void set(int period, float duty) {
     // set period
     String fn = fn = String.format("/sys/class/pwm/%s/pwm%d/period", chip, channel);
+    // convert to nanoseconds
     int ret = NativeInterface.writeFile(fn, String.format("%d", (int)(1000000000 / period)));
     if (ret < 0) {
       throw new RuntimeException(fn + ": " + NativeInterface.getError(ret));
     }
 
     // set duty cycle
-    fn = fn = String.format("/sys/class/pwm/%s/pwm%d/duty", chip, channel);
+    fn = fn = String.format("/sys/class/pwm/%s/pwm%d/duty_cycle", chip, channel);
     if (duty < 0.0 || 1.0 < duty) {
       System.err.println("Duty cycle must be between 0.0 and 1.0.");
       throw new IllegalArgumentException("Illegal argument");
     }
+    // convert to nanoseconds
     ret = NativeInterface.writeFile(fn, String.format("%d", (int)((1000000000 * duty) / period)));
     if (ret < 0) {
       throw new RuntimeException(fn + ": " + NativeInterface.getError(ret));

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -13449,9 +13449,9 @@ void sort(TessGeometry tessGeo) {
 
                 testTid = activeTid + 1;
               } else {
-                // oops, we already tested this one, probably intersecting or
-                // interlocked in loop with others, just draw it incorrectly :(
-                draw = true;
+                // oops, we already tested this one, either in one plane or
+                // interlocked in loop with others, just ignore it for now :(
+                testTid++;
               }
             }
           }

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -407,7 +407,7 @@ protected void initListeners() {
 
 
   protected void initAnimator() {
-    animator = new FPSAnimator(window, 60, true);
+    animator = new FPSAnimator(window, 60);
     drawException = null;
     animator.setUncaughtExceptionHandler(new GLAnimatorControl.UncaughtExceptionHandler() {
       @Override

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -803,7 +803,7 @@ protected boolean exportApplication() throws IOException, SketchException {
           }
           // export the 64-bit version
           folder = new File(sketch.getFolder(), "application." + platformName + "64");
-          if (!exportApplication(folder, platform, "64", embedJava && Platform.getNativeBits() == 64 && "x86".equals(Platform.getNativeArch()))) {
+          if (!exportApplication(folder, platform, "64", embedJava && Platform.getNativeBits() == 64 && "amd64".equals(Platform.getNativeArch()))) {
             return false;
           }
           if (platform == PConstants.LINUX) {

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -407,7 +407,7 @@ protected void initListeners() {
 
 
   protected void initAnimator() {
-    animator = new FPSAnimator(window, 60, true);
+    animator = new FPSAnimator(window, 60);
     drawException = null;
     animator.setUncaughtExceptionHandler(new GLAnimatorControl.UncaughtExceptionHandler() {
       @Override

File: app/src/processing/app/Base.java
Patch:
@@ -1250,7 +1250,7 @@ protected Editor handleOpen(String path, boolean untitled,
         return editor;
 
       } catch (EditorException ee) {
-        if (!ee.getMessage().equals("")) {  // blank if the user canceled
+        if (ee.getMessage() != null) {  // null if the user canceled
           Messages.showWarning("Error opening sketch", ee.getMessage(), ee);
         }
       } catch (NoSuchMethodError nsme) {

File: java/libraries/io/src/processing/io/GPIO.java
Patch:
@@ -505,6 +505,7 @@ public static void releasePin(int pin) {
    *
    *  Make sure to setup the interrupt with enableInterrupt() before calling
    *  this function. A timeout value of -1 waits indefinitely.
+   *  @param pin GPIO pin
    *  @param timeout don't wait more than timeout milliseconds
    *  @return true if the interrupt occured, false if the timeout occured
    *  @see enableInterrupt
@@ -536,6 +537,7 @@ public static boolean waitForInterrupt(int pin, int timeout) {
    *  Make sure to setup the interrupt with enableInterrupt() before calling
    *  this function. This function will wait indefinitely for an interrupt
    *  to occur.
+   *  @parm pin GPIO pin
    *  @see enableInterrupt
    *  @see disableInterrupt
    */

File: java/libraries/io/src/processing/io/PWM.java
Patch:
@@ -81,7 +81,7 @@ public PWM(String channel) {
 
 
   /**
-   *  Disables the output
+   *  Disables the PWM output
    */
   public void clear() {
     String fn = String.format("/sys/class/pwm/%s/gpio%d/enable", chip, channel);

File: java/libraries/io/src/processing/io/SPI.java
Patch:
@@ -64,7 +64,7 @@ public SPI(String dev) {
 
 
   /**
-   *  Closes the I2C interface
+   *  Closes the SPI interface
    */
   public void close() {
     NativeInterface.closeDevice(handle);

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1678,7 +1678,7 @@ public String getProgramInfoLog(int program) {
       gl2.glGetProgramInfoLog(program, length, val, 0, log, 0);
       return new String(log);
     } else {
-      return "Unknow error";
+      return "Unknown error";
     }
   }
 

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -5928,7 +5928,7 @@ protected void loadTextureImpl(int sampling, boolean mipmap) {
   protected void createPTexture() {
     updatePixelSize();
     if (texture != null) {
-      texture = new Texture(this, pixelWidth, pixelHeight, texture.getParameters());
+      ptexture = new Texture(this, pixelWidth, pixelHeight, texture.getParameters());
       ptexture.invertedY(true);
       ptexture.colorBuffer(true);
     }

File: core/src/processing/core/PApplet.java
Patch:
@@ -6408,7 +6408,7 @@ public void run() {
           fileChooser.setDialogTitle(prompt);
           fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
           if (defaultSelection != null) {
-            fileChooser.setSelectedFile(defaultSelection);
+            fileChooser.setCurrentDirectory(defaultSelection);
           }
 
           int result = fileChooser.showOpenDialog(parentFrame);

File: core/src/processing/core/PApplet.java
Patch:
@@ -6408,7 +6408,7 @@ public void run() {
           fileChooser.setDialogTitle(prompt);
           fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
           if (defaultSelection != null) {
-            fileChooser.setSelectedFile(defaultSelection);
+            fileChooser.setCurrentDirectory(defaultSelection);
           }
 
           int result = fileChooser.showOpenDialog(parentFrame);

File: java/src/processing/mode/java/VariableInspector.java
Patch:
@@ -465,10 +465,10 @@ public String getColumnName(int i) {
    */
   class OutlineRenderer implements RenderDataProvider {
     Icon[][] icons;
-    static final int ICON_SIZE = 16; // icon size (square, size=width=height)
+    static final int ICON_SIZE = 16;
 
     OutlineRenderer() {
-      icons = loadIcons("theme/var-icons.gif");
+      icons = loadIcons("theme/variables-1x.png");
     }
 
     /**

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -2729,13 +2729,14 @@ private boolean checkForJavaTabs() {
   }
 
 
+  @Override
   protected void applyPreferences() {
     super.applyPreferences();
     if (jmode != null) {
       jmode.loadPreferences();
       Messages.log("Applying prefs");
       // trigger it once to refresh UI
-      errorCheckerService.request();
+      errorCheckerService.handleErrorCheckingToggle();
     }
   }
 

File: app/src/processing/app/ui/Editor.java
Patch:
@@ -59,6 +59,8 @@
 import java.util.TimerTask;
 
 import javax.swing.*;
+import javax.swing.border.EmptyBorder;
+import javax.swing.border.MatteBorder;
 import javax.swing.event.*;
 import javax.swing.plaf.basic.*;
 import javax.swing.text.*;

File: app/src/processing/app/ui/ErrorTable.java
Patch:
@@ -117,6 +117,7 @@ synchronized public void mouseClicked(MouseEvent e) {
             } else if (clickCount > 1) {
               editor.errorTableDoubleClick(data);
             }
+						editor.getTextArea().requestFocusInWindow();
 //				  editor.getErrorChecker().scrollToErrorLine(row);
           }
         } catch (Exception ex) {

File: app/src/processing/app/ui/ErrorTable.java
Patch:
@@ -117,6 +117,7 @@ synchronized public void mouseClicked(MouseEvent e) {
             } else if (clickCount > 1) {
               editor.errorTableDoubleClick(data);
             }
+						editor.getTextArea().requestFocusInWindow();
 //				  editor.getErrorChecker().scrollToErrorLine(row);
           }
         } catch (Exception ex) {

File: app/src/processing/app/contrib/ListPanel.java
Patch:
@@ -442,6 +442,7 @@ void updatePanelOrdering(Set<Contribution> contributionsSet) {
 
   public void contributionAdded(final Contribution contribution) {
     if (filter.matches(contribution)) {
+      // TODO: this should already be on EDT, check it [jv]
       EventQueue.invokeLater(new Runnable() {
         public void run() {
           if (!panelByContribution.containsKey(contribution)) {
@@ -467,6 +468,7 @@ public void run() {
 
 
   public void contributionRemoved(final Contribution contribution) {
+    // TODO: this should already be on EDT, check it [jv]
     EventQueue.invokeLater(new Runnable() {
       public void run() {
         synchronized (panelByContribution) {
@@ -489,6 +491,7 @@ public void run() {
 
   public void contributionChanged(final Contribution oldContrib,
                                   final Contribution newContrib) {
+    // TODO: this should already be on EDT, check it [jv]
     EventQueue.invokeLater(new Runnable() {
       public void run() {
         synchronized (panelByContribution) {

File: app/src/processing/app/contrib/UpdateListPanel.java
Patch:
@@ -216,6 +216,7 @@ void updatePanelOrdering(Set<Contribution> contributionsSet) {
   @Override
   public void contributionAdded(final Contribution contribution) {
     if (filter.matches(contribution)) {
+      // TODO: this should already be on EDT, check it [jv]
       EventQueue.invokeLater(new Runnable() {
         public void run() {
           // TODO make this longer and more contorted [fry]

File: app/src/processing/app/contrib/ListPanel.java
Patch:
@@ -442,6 +442,7 @@ void updatePanelOrdering(Set<Contribution> contributionsSet) {
 
   public void contributionAdded(final Contribution contribution) {
     if (filter.matches(contribution)) {
+      // TODO: this should already be on EDT, check it [jv]
       EventQueue.invokeLater(new Runnable() {
         public void run() {
           if (!panelByContribution.containsKey(contribution)) {
@@ -467,6 +468,7 @@ public void run() {
 
 
   public void contributionRemoved(final Contribution contribution) {
+    // TODO: this should already be on EDT, check it [jv]
     EventQueue.invokeLater(new Runnable() {
       public void run() {
         synchronized (panelByContribution) {
@@ -489,6 +491,7 @@ public void run() {
 
   public void contributionChanged(final Contribution oldContrib,
                                   final Contribution newContrib) {
+    // TODO: this should already be on EDT, check it [jv]
     EventQueue.invokeLater(new Runnable() {
       public void run() {
         synchronized (panelByContribution) {

File: app/src/processing/app/contrib/UpdateListPanel.java
Patch:
@@ -216,6 +216,7 @@ void updatePanelOrdering(Set<Contribution> contributionsSet) {
   @Override
   public void contributionAdded(final Contribution contribution) {
     if (filter.matches(contribution)) {
+      // TODO: this should already be on EDT, check it [jv]
       EventQueue.invokeLater(new Runnable() {
         public void run() {
           // TODO make this longer and more contorted [fry]

File: app/src/processing/app/contrib/ContribProgressBar.java
Patch:
@@ -50,6 +50,9 @@ public void setProgress(int value) {
   @Override
   public void finished() {
     super.finished();
+
+    // TODO: this one almost always touches the UI, should be invoked on the EDT;
+    // TODO: then one can remove synchronization on visibleContributions in ListPanel
     finishedAction();
   }
 

File: app/src/processing/app/contrib/ContribProgressBar.java
Patch:
@@ -50,6 +50,9 @@ public void setProgress(int value) {
   @Override
   public void finished() {
     super.finished();
+
+    // TODO: this one almost always touches the UI, should be invoked on the EDT;
+    // TODO: then one can remove synchronization on visibleContributions in ListPanel
     finishedAction();
   }
 

File: java/src/processing/mode/java/Commander.java
Patch:
@@ -387,7 +387,7 @@ static void printCommandLine(PrintStream out) {
 //    out.println("                     Otherwise specify 0 or leave it out.");
 
     out.println();
-    out.println("The --build, --run, --present, or --export will be the final parameter");
+    out.println("The --build, --run, --present, or --export must be the final parameter");
     out.println("passed to Processing. Arguments passed following one of those four will");
     out.println("be passed through to the sketch itself, and therefore available to the");
     out.println("sketch via the 'args' field. To pass options understood by PApplet.main(),");

File: app/src/processing/app/ui/ErrorTable.java
Patch:
@@ -29,6 +29,7 @@
 
 import javax.swing.JLabel;
 import javax.swing.JTable;
+import javax.swing.ListSelectionModel;
 import javax.swing.SwingConstants;
 import javax.swing.ToolTipManager;
 import javax.swing.table.DefaultTableModel;
@@ -79,6 +80,8 @@ public interface Entry {
 	public ErrorTable(final Editor editor) {
 	  super(new DefaultTableModel(columnNames, 0));
 
+    setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+
 	  this.editor = editor;
 	  JTableHeader header = getTableHeader();
 

File: java/src/processing/mode/java/pdex/ASTGenerator.java
Patch:
@@ -1927,6 +1927,8 @@ protected void addListeners(){
       @Override
       public void valueChanged(TreeSelectionEvent e) {
         Messages.log(e.toString());
+
+        // TODO: this should already run on EDT so why the SwingWorker?
         SwingWorker<Object, Object> worker = new SwingWorker<Object, Object>() {
 
           @Override

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -673,7 +673,7 @@ public void requestDraw() {
   @Override
   // Java only
   public PSurface createSurface() {  // ignore
-    return new PSurfaceJOGL(this);
+    return surface = new PSurfaceJOGL(this);
   }
 
 

File: app/src/processing/app/Sketch.java
Patch:
@@ -1129,6 +1129,7 @@ long copyDir(File sourceDir, File targetDir,
           @Override
           public void done() {
             frame.dispose();
+            editor.statusNotice(Language.text("editor.status.saving.done"));
           }
         }.execute();
       }

File: app/src/processing/app/ui/Editor.java
Patch:
@@ -2525,7 +2525,7 @@ public boolean handleSaveAs() {
     statusNotice(Language.text("editor.status.saving"));
     try {
       if (sketch.saveAs()) {
-        // statusNotice("Done Saving.");
+        //statusNotice(Language.text("editor.status.saving.done"));
         // status is now printed from Sketch so that "Done Saving."
         // is only printed after Save As when progress bar is shown.
       } else {

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -406,7 +406,7 @@ protected void initListeners() {
 
 
   protected void initAnimator() {
-    animator = new FPSAnimator(window, 60);
+    animator = new FPSAnimator(window, 60, true);
     drawException = null;
     animator.setUncaughtExceptionHandler(new GLAnimatorControl.UncaughtExceptionHandler() {
       @Override

File: java/src/processing/mode/java/MarkerColumn.java
Patch:
@@ -142,6 +142,7 @@ protected Object doInBackground() throws Exception {
 
 	      protected void done() {
 	        repaint();
+					editor.getErrorChecker().updateEditorStatus();
 	      }
 	    }.execute();
 

File: java/src/processing/mode/java/pdex/ASTNodeWrapper.java
Patch:
@@ -555,7 +555,7 @@ public boolean highlightNode(JavaEditor editor){
       int javaLineNumber = getLineNumber(nodeName);
       int pdeOffs[] = editor.getErrorChecker().calculateTabIndexAndLineNumber(javaLineNumber);
       PlainDocument javaSource = new PlainDocument();
-      javaSource.insertString(0, editor.getErrorChecker().sourceCode, null);
+      javaSource.insertString(0, editor.getErrorChecker().lastCodeCheckResult.sourceCode, null);
       Element lineElement = javaSource.getDefaultRootElement()
           .getElement(javaLineNumber-1);
       if(lineElement == null) {

File: java/src/processing/mode/java/pdex/JavaTextAreaPainter.java
Patch:
@@ -348,7 +348,7 @@ static private String trimRight(String str) {
    */
   protected void paintErrorLine(Graphics gfx, int line, int x) {
     ErrorCheckerService ecs = getJavaEditor().getErrorChecker();
-    if (ecs == null || ecs.problemsList == null) {
+    if (ecs == null || ecs.lastCodeCheckResult.problems.isEmpty()) {
       return;
     }
 

File: java/src/processing/mode/java/MarkerColumn.java
Patch:
@@ -142,6 +142,7 @@ protected Object doInBackground() throws Exception {
 
 	      protected void done() {
 	        repaint();
+					editor.getErrorChecker().updateEditorStatus();
 	      }
 	    }.execute();
 

File: java/src/processing/mode/java/pdex/ASTNodeWrapper.java
Patch:
@@ -555,7 +555,7 @@ public boolean highlightNode(JavaEditor editor){
       int javaLineNumber = getLineNumber(nodeName);
       int pdeOffs[] = editor.getErrorChecker().calculateTabIndexAndLineNumber(javaLineNumber);
       PlainDocument javaSource = new PlainDocument();
-      javaSource.insertString(0, editor.getErrorChecker().sourceCode, null);
+      javaSource.insertString(0, editor.getErrorChecker().lastCodeCheckResult.sourceCode, null);
       Element lineElement = javaSource.getDefaultRootElement()
           .getElement(javaLineNumber-1);
       if(lineElement == null) {

File: java/src/processing/mode/java/pdex/JavaTextAreaPainter.java
Patch:
@@ -348,7 +348,7 @@ static private String trimRight(String str) {
    */
   protected void paintErrorLine(Graphics gfx, int line, int x) {
     ErrorCheckerService ecs = getJavaEditor().getErrorChecker();
-    if (ecs == null || ecs.problemsList == null) {
+    if (ecs == null || ecs.lastCodeCheckResult.problems.isEmpty()) {
       return;
     }
 

File: app/src/processing/app/contrib/ManagerFrame.java
Patch:
@@ -93,6 +93,8 @@ public void showFrame(ContributionType contributionType) {
       tabs.setPanel(showTab);
     }
     frame.setVisible(true);
+    // Avoid the search box taking focus and hiding the 'search' text
+    tabs.requestFocusInWindow();
   }
 
 

File: app/src/processing/app/ui/ErrorTable.java
Patch:
@@ -335,7 +335,6 @@ public Component getTableCellRendererComponent(JTable table, Object value,
 	                                                 boolean selected,
 	                                                 boolean focused,
 	                                                 int row, int column) {
-	    setBackground(Color.RED);
 	    if (selected) {
 	      setForeground(textColorSelected);
 	      setBackground(bgColorSelected);

File: app/src/processing/app/contrib/StatusPanel.java
Patch:
@@ -181,7 +181,7 @@ public void actionPerformed(ActionEvent e) {
                                 BUTTON_WIDTH, BUTTON_WIDTH, BUTTON_WIDTH)
                   .addComponent(updateButton)
                   .addComponent(removeButton))
-      .addGap(16));  // make buttons line up relative to the scrollbar
+      .addGap(12));  // make buttons line up relative to the scrollbar
 
     layout.setVerticalGroup(layout
       .createParallelGroup(GroupLayout.Alignment.LEADING)

File: java/src/processing/mode/java/pdex/JavaTextArea.java
Patch:
@@ -954,6 +954,7 @@ public void run() {
    * @param subWord
    */
   protected void showSuggestion(DefaultListModel<CompletionCandidate> listModel, String subWord) {
+    //new Exception(System.currentTimeMillis() + "").printStackTrace(System.out);
     hideSuggestion();
 
     if (listModel.size() == 0) {

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -745,7 +745,7 @@ public void display(GLAutoDrawable drawable) {
       }
 
       if (sketch.frameCount == 0) {
-        if (sketchWidth0 < sketchWidth0 || sketchHeight < sketchHeight0) {
+        if (sketchWidth < sketchWidth0 || sketchHeight < sketchHeight0) {
           PGraphics.showWarning("The sketch has been automatically resized to fit the screen resolution");
         }
 //        System.out.println("display: " + window.getWidth() + " "+ window.getHeight() + " - " + sketchWidth + " " + sketchHeight);

File: java/src/processing/mode/java/pdex/ErrorCheckerService.java
Patch:
@@ -1364,7 +1364,9 @@ protected String preprocessCode(String pdeCode) {
     // Footer
     if (mode != PdePreprocessor.Mode.JAVA) {
       if (mode == PdePreprocessor.Mode.STATIC) {
-        sb.append("\nnoLoop();\n}");
+        // no noLoop() here so it does not tell you
+        // "can't invoke noLoop() on obj" when you type "obj."
+        sb.append("\n}");
       }
       sb.append("\n}");
     }

File: app/src/processing/app/ui/EditorToolbar.java
Patch:
@@ -112,7 +112,7 @@ public void rebuild() {
 //    stopButton.setRolloverLabel(label);
 
     box.add(Box.createHorizontalGlue());
-    addModeButtons(box);
+    addModeButtons(box, label);
 //    Component items = createModeButtons();
 //    if (items != null) {
 //      box.add(items);
@@ -165,7 +165,7 @@ public void actionPerformed(ActionEvent e) {
   }
 
 
-  public void addModeButtons(Box box) {
+  public void addModeButtons(Box box, JLabel label) {
   }
 
 

File: app/src/processing/app/Base.java
Patch:
@@ -1733,7 +1733,8 @@ static public File getSettingsFolder() {
       if (!settingsFolder.mkdirs()) {
         Messages.showError("Settings issues",
                            "Processing cannot run because it could not\n" +
-                           "create a folder to store your settings.", null);
+                           "create a folder to store your settings.\n" +
+                           settingsFolder.getAbsolutePath(), null);
       }
     }
     return settingsFolder;

File: app/src/processing/app/contrib/ContributionListPanel.java
Patch:
@@ -345,7 +345,7 @@ public Component getTableCellRendererComponent(JTable table, Object value,
         if (table.isRowSelected(row)) {
           label.setBackground(new Color(0xe0fffd));
         }
-        label.setFont(ContributionManagerDialog.myFont);
+        label.setFont(ContributionManagerDialog.font);
         label.setOpaque(true);
       } else {
         if (contribution.isSpecial()) {

File: app/src/processing/app/contrib/StatusPanel.java
Patch:
@@ -73,8 +73,8 @@ public StatusPanel(int width, final ContributionTab contributionTab) {
     label.setEditable(false);
     label.setOpaque(false);
     label.setContentType("text/html");
-    bodyRule = "a, body { font-family: " + ContributionManagerDialog.myFont.getFamily() + "; " +
-            "font-size: " + ContributionManagerDialog.myFont.getSize() + "pt; color: black; text-decoration: none;}";
+    bodyRule = "a, body { font-family: " + ContributionManagerDialog.font.getFamily() + "; " +
+            "font-size: " + ContributionManagerDialog.font.getSize() + "pt; color: black; text-decoration: none;}";
     label.addHyperlinkListener(new HyperlinkListener() {
 
       @Override

File: app/src/processing/app/Library.java
Patch:
@@ -28,7 +28,7 @@ public class Library extends LocalContribution {
   StringList packageList;
 
   /** Per-platform exports for this library. */
-  HashMap<String,String[]> exportList;
+  HashMap<String, String[]> exportList;
 
   /** Applet exports (cross-platform by definition). */
   String[] appletExportList;

File: core/src/processing/core/PSurface.java
Patch:
@@ -71,6 +71,9 @@ public interface PSurface {
   /** Set true if we want to resize things (default is not resizable) */
   public void setResizable(boolean resizable);
 
+  /** Dumb name, but inherited from Frame and no better ideas. */
+  public void setAlwaysOnTop(boolean always);
+
   public void setIcon(PImage icon);
 
   //

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1784,15 +1784,15 @@ public PShape createShape(int kind, float... p) {
     if (kind == POINT) {
       if (is3D() && len != 2 && len != 3) {
         throw new IllegalArgumentException("Use createShape(POINT, x, y) or createShape(POINT, x, y, z)");
-      } else if (len != 2) {
+      } else if (is2D() && len != 2) {
         throw new IllegalArgumentException("Use createShape(POINT, x, y)");
       }
       return createShapePrimitive(kind, p);
 
     } else if (kind == LINE) {
       if (is3D() && len != 4 && len != 6) {
         throw new IllegalArgumentException("Use createShape(LINE, x1, y1, x2, y2) or createShape(LINE, x1, y1, z1, x2, y2, z1)");
-      } else if (len != 4) {
+      } else if (is2D() && len != 4) {
         throw new IllegalArgumentException("Use createShape(LINE, x1, y1, x2, y2)");
       }
       return createShapePrimitive(kind, p);

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1784,15 +1784,15 @@ public PShape createShape(int kind, float... p) {
     if (kind == POINT) {
       if (is3D() && len != 2 && len != 3) {
         throw new IllegalArgumentException("Use createShape(POINT, x, y) or createShape(POINT, x, y, z)");
-      } else if (len != 2) {
+      } else if (is2D() && len != 2) {
         throw new IllegalArgumentException("Use createShape(POINT, x, y)");
       }
       return createShapePrimitive(kind, p);
 
     } else if (kind == LINE) {
       if (is3D() && len != 4 && len != 6) {
         throw new IllegalArgumentException("Use createShape(LINE, x1, y1, x2, y2) or createShape(LINE, x1, y1, z1, x2, y2, z1)");
-      } else if (len != 4) {
+      } else if (is2D() && len != 4) {
         throw new IllegalArgumentException("Use createShape(LINE, x1, y1, x2, y2)");
       }
       return createShapePrimitive(kind, p);

File: java/src/processing/mode/java/pdex/JavaTextArea.java
Patch:
@@ -181,6 +181,7 @@ public void processKeyEvent(KeyEvent evt) {
         if (suggestion.isVisible()) {
           prepareSuggestions(evt);
         }
+        return;
       }
     }
 

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -1475,7 +1475,6 @@ protected void setTextFont(PFont which, float size) {
     }
 
     context.setFont(textFontInfo.font);
-    fontCache.measuringText.setFont(textFontInfo.font);
   }
 
 
@@ -1552,6 +1551,7 @@ protected float textWidthImpl(char[] buffer, int start, int stop) {
       return super.textWidthImpl(buffer, start, stop);
     }
 
+    fontCache.measuringText.setFont(textFontInfo.font);
     fontCache.measuringText.setText(new String(buffer, start, stop - start));
     return (float) fontCache.measuringText.getLayoutBounds().getWidth();
   }

File: core/src/processing/core/PApplet.java
Patch:
@@ -10025,6 +10025,8 @@ static public void runSketch(final String[] args,
     // Remove 60fps limit on the JavaFX "pulse" timer
     System.setProperty("javafx.animation.fullspeed", "true");
 
+    // This doesn't work, need to mess with Info.plist instead
+    /*
     // In an exported application, add the Contents/Java folder to the
     // java.library.path, so that native libraries work properly.
     // Without this, the library path is only set to Contents/MacOS
@@ -10042,6 +10044,7 @@ static public void runSketch(final String[] args,
         System.setProperty("java.library.path", libraryPath);
       }
     }
+    */
 
     // Catch any HeadlessException to provide more useful feedback
     try {

File: app/src/processing/app/Base.java
Patch:
@@ -1754,7 +1754,7 @@ static public void locateSketchbookFolder() {
                              "Processing will switch to the default sketchbook\n" +
                              "location, and create a new sketchbook folder if\n" +
                              "necessary. Processing will then stop talking\n" +
-                             "about himself in the third person.", null);
+                             "about itself in the third person.", null);
         sketchbookFolder = null;
       }
     }

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -779,7 +779,7 @@ static void drainRefQueueBounded() {
         if (res == null) {
           break;
         }
-        System.out.println("Disposing texture resource " + iterations + " " + res.hashCode());
+//        System.out.println("Disposing texture resource " + iterations + " " + res.hashCode());
         res.dispose();
         ++iterations;
       }
@@ -855,7 +855,7 @@ static void drainRefQueueBounded() {
         if (res == null) {
           break;
         }
-        System.out.println("Disposing VertexBuffer resource " + iterations + " " + res.hashCode());
+//        System.out.println("Disposing VertexBuffer resource " + iterations + " " + res.hashCode());
         res.dispose();
         ++iterations;
       }
@@ -933,7 +933,7 @@ static void drainRefQueueBounded() {
         if (res == null) {
           break;
         }
-        System.out.println("Disposing shader resource " + res.hashCode());
+//        System.out.println("Disposing shader resource " + res.hashCode());
         res.dispose();
         ++iterations;
       }

File: core/src/processing/core/PGraphics.java
Patch:
@@ -4708,7 +4708,7 @@ protected boolean textSentence(char[] buffer, int start, int stop,
       // boundary of a word or end of this sentence
       if ((buffer[index] == ' ') || (index == stop)) {
 //        System.out.println((index == stop) + " " + wordStart + " " + index);
-        if (wordStart == index) {  // end of line, nothing is fitting
+        if (start != stop && wordStart == index) {  // end of line, nothing is fitting
           return false;
         }
         float wordWidth = textWidthImpl(buffer, wordStart, index);

File: core/src/processing/core/PGraphics.java
Patch:
@@ -4708,7 +4708,7 @@ protected boolean textSentence(char[] buffer, int start, int stop,
       // boundary of a word or end of this sentence
       if ((buffer[index] == ' ') || (index == stop)) {
 //        System.out.println((index == stop) + " " + wordStart + " " + index);
-        if (wordStart == index) {  // end of line, nothing is fitting
+        if (start != stop && wordStart == index) {  // end of line, nothing is fitting
           return false;
         }
         float wordWidth = textWidthImpl(buffer, wordStart, index);

File: core/src/processing/javafx/PSurfaceFX.java
Patch:
@@ -733,7 +733,9 @@ private int getKeyCode(KeyEvent fxEvent) {
   @SuppressWarnings("deprecation")
   private char getKeyChar(KeyEvent fxEvent) {
     if (fxEvent.getEventType() == KeyEvent.KEY_TYPED) {
-      return fxEvent.getCharacter().charAt(0);
+      String ch = fxEvent.getCharacter();
+      if (ch.length() < 1) return PConstants.CODED;
+      return ch.charAt(0);
     }
 
     KeyCode kc = fxEvent.getCode();

File: core/src/processing/javafx/PSurfaceFX.java
Patch:
@@ -733,7 +733,9 @@ private int getKeyCode(KeyEvent fxEvent) {
   @SuppressWarnings("deprecation")
   private char getKeyChar(KeyEvent fxEvent) {
     if (fxEvent.getEventType() == KeyEvent.KEY_TYPED) {
-      return fxEvent.getCharacter().charAt(0);
+      String ch = fxEvent.getCharacter();
+      if (ch.length() < 1) return PConstants.CODED;
+      return ch.charAt(0);
     }
 
     KeyCode kc = fxEvent.getCode();

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -1437,7 +1437,7 @@ public void translate(float tx, float ty) {
 
   @Override
   public void rotate(float angle) {
-    context.rotate(PApplet.radians(angle));
+    context.rotate(PApplet.degrees(angle));
   }
 
 

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -1404,7 +1404,7 @@ public void pushMatrix() {
       throw new RuntimeException("pushMatrix() cannot use push more than " +
                                  transformStack.length + " times");
     }
-    context.getTransform(transformStack[transformCount]);
+    transformStack[transformCount] = context.getTransform(transformStack[transformCount]);
     transformCount++;
   }
 

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -1437,7 +1437,7 @@ public void translate(float tx, float ty) {
 
   @Override
   public void rotate(float angle) {
-    context.rotate(PApplet.radians(angle));
+    context.rotate(PApplet.degrees(angle));
   }
 
 

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -1404,7 +1404,7 @@ public void pushMatrix() {
       throw new RuntimeException("pushMatrix() cannot use push more than " +
                                  transformStack.length + " times");
     }
-    context.getTransform(transformStack[transformCount]);
+    transformStack[transformCount] = context.getTransform(transformStack[transformCount]);
     transformCount++;
   }
 

File: core/src/processing/opengl/PGL.java
Patch:
@@ -1697,8 +1697,8 @@ protected static String[] preprocessFragmentSource(String[] fragSrc0,
       String[] search = new String[] {
           "varying", "attribute",
           "texture",
-          "texMap2D", "texMap3D", "texMap2DRect",
-          "texMapCube", "gl_FragColor"
+          "texMap2DRect", "texMap2D", "texMap3D", "texMapCube",
+          "gl_FragColor"
       };
       String[] replace = new String[] {
           "in", "in",
@@ -1739,7 +1739,7 @@ protected static String[] preprocessVertexSource(String[] vertSrc0,
       String[] search = new String[] {
           "varying", "attribute",
           "texture",
-          "texMap2D", "texMap3D", "texMap2DRect", "texMapCube"
+          "texMap2DRect", "texMap2D", "texMap3D", "texMapCube"
       };
       String[] replace = new String[] {
           "out", "in",

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -279,7 +279,7 @@ public void actionPerformed(ActionEvent e) {
       menu.add(item);
     }
 
-    item = new JMenuItem("Welcome to Processing 3");
+    item = new JMenuItem(Language.text("menu.help.welcome"));
     item.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {
         try {

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -194,7 +194,7 @@ public void rebuild() {
   @Override
   public EditorFooter createFooter() {
     EditorFooter footer = super.createFooter();
-    addErrorTable();
+    addErrorTable(footer);
     return footer;
   }
 

File: java/src/processing/mode/java/pdex/ErrorCheckerService.java
Patch:
@@ -956,6 +956,7 @@ public void updateErrorTable() {
 //        }
 
       }
+//      table.updateColumns();
 
 //      DefaultTableModel tm =
 //        new DefaultTableModel(errorData, XQErrorTable.columnNames);

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -194,6 +194,7 @@ public void stateChanged(ChangeEvent e) {
           updateTabPanel.setBackground(new Color(0xe0fffd));
           updateTabLabel.setForeground(Color.BLACK);
         }
+        getActiveTab().contributionListPanel.scrollPane.requestFocusInWindow();
 //        // When the tab is changed update status to the current selected panel
 //        ContributionPanel currentPanel = getActiveTab().contributionListPanel
 //          .getSelectedPanel();

File: app/src/processing/app/contrib/UpdateContributionTab.java
Patch:
@@ -146,7 +146,7 @@ public void changeSelection(int rowIndex, int columnIndex,
 //          return super.isRowSelected(row);
 //        }
       };
-      JScrollPane scrollPane = new JScrollPane(table);
+      scrollPane = new JScrollPane(table);
       table.setFillsViewportHeight(true);
       table.setSelectionBackground(new Color(0xe0fffd));
       table.setSelectionForeground(table.getForeground());

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -194,6 +194,7 @@ public void stateChanged(ChangeEvent e) {
           updateTabPanel.setBackground(new Color(0xe0fffd));
           updateTabLabel.setForeground(Color.BLACK);
         }
+        getActiveTab().contributionListPanel.scrollPane.requestFocusInWindow();
 //        // When the tab is changed update status to the current selected panel
 //        ContributionPanel currentPanel = getActiveTab().contributionListPanel
 //          .getSelectedPanel();

File: app/src/processing/app/contrib/UpdateContributionTab.java
Patch:
@@ -146,7 +146,7 @@ public void changeSelection(int rowIndex, int columnIndex,
 //          return super.isRowSelected(row);
 //        }
       };
-      JScrollPane scrollPane = new JScrollPane(table);
+      scrollPane = new JScrollPane(table);
       table.setFillsViewportHeight(true);
       table.setSelectionBackground(new Color(0xe0fffd));
       table.setSelectionForeground(table.getForeground());

File: app/src/processing/app/ui/Editor.java
Patch:
@@ -2207,6 +2207,7 @@ public void handleAutoFormat() {
       if (formattedText.equals(source)) {
         statusNotice(Language.text("editor.status.autoformat.no_changes"));
       } else {
+        startCompoundEdit();
         // replace with new bootiful text
         // selectionEnd hopefully at least in the neighborhood
         int scrollPos = textarea.getVerticalScrollPosition();
@@ -2227,6 +2228,7 @@ public void handleAutoFormat() {
           textarea.setVerticalScrollPosition(scrollPos);
 //          }
         }
+        stopCompoundEdit();
         getSketch().setModified(true);
         // mark as finished
         statusNotice(Language.text("editor.status.autoformat.finished"));

File: core/src/processing/opengl/PGL.java
Patch:
@@ -2807,7 +2807,7 @@ public void readPixels(int x, int y, int width, int height, int format, int type
   public abstract void vertexAttrib1fv(int index, FloatBuffer values);
   public abstract void vertexAttrib2fv(int index, FloatBuffer values);
   public abstract void vertexAttrib3fv(int index, FloatBuffer values);
-  public abstract void vertexAttri4fv(int index, FloatBuffer values);
+  public abstract void vertexAttrib4fv(int index, FloatBuffer values);
   public abstract void vertexAttribPointer(int index, int size, int type, boolean normalized, int stride, int offset);
   public abstract void enableVertexAttribArray(int index);
   public abstract void disableVertexAttribArray(int index);

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1956,7 +1956,7 @@ public void vertexAttrib3fv(int index, FloatBuffer values) {
   }
 
   @Override
-  public void vertexAttri4fv(int index, FloatBuffer values) {
+  public void vertexAttrib4fv(int index, FloatBuffer values) {
     gl2.glVertexAttrib4fv(index, values);
   }
 

File: core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -412,6 +412,9 @@ public PShapeOpenGL(PGraphicsOpenGL pg, int family) {
       // GROUP shapes are always marked as ended.
       shapeCreated = true;
     }
+
+    // OpenGL supports per-vertex coloring (unlike Java2D)
+    perVertexStyles = true;
   }
 
 

File: app/src/processing/app/contrib/ContributionListPanel.java
Patch:
@@ -59,6 +59,7 @@ public void hyperlinkUpdate(HyperlinkEvent e) { }
   protected ContributionListing contribListing = ContributionListing.getInstance();
   protected JTable table;
   DefaultTableModel dtm;
+  JScrollPane scrollPane;
   Font myFont;
 
   public ContributionListPanel() {
@@ -104,7 +105,8 @@ public Component prepareRenderer(
     // There is a space before Status
     String[] colName = { " Status", "Name", "Author" };
     dtm.setColumnIdentifiers(colName);
-    JScrollPane scrollPane = new JScrollPane(table);
+    scrollPane = new JScrollPane(table);
+    scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
     table.setFillsViewportHeight(true);
 //    table.setBorder();
     table.setDefaultRenderer(Contribution.class, new StatusRendere());

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -93,7 +93,6 @@ public JEditTextArea(TextAreaDefaults defaults, InputHandler inputHandler) {
     if (!DISABLE_CARET) {
       caretTimer = new Timer(500, new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          System.out.println("blink " + caretTimer);
           if (hasFocus()) {
             blinkCaret();
           }
@@ -1937,7 +1936,6 @@ public void removeNotify() {
 //      focusedComponent = null;
     if (!DISABLE_CARET) {
       caretTimer.stop();
-      System.out.println("disabling caret");
     }
   }
 

File: app/src/processing/app/Messages.java
Patch:
@@ -155,7 +155,7 @@ static public void showError(String title, String message, Throwable e) {
   /**
    * Testing a new warning window that includes the stack trace.
    */
-  static void showBadnessTrace(String title, String message,
+  static public void showTrace(String title, String message,
                                        Throwable t, boolean fatal) {
     if (title == null) title = fatal ? "Error" : "Warning";
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -6368,7 +6368,9 @@ public void run() {
         if (platform == MACOSX && useNativeSelect != false) {
           FileDialog fileDialog =
             new FileDialog(parentFrame, prompt, FileDialog.LOAD);
-          fileDialog.setDirectory(defaultSelection.getAbsolutePath());
+          if (defaultSelection != null) {
+            fileDialog.setDirectory(defaultSelection.getAbsolutePath());
+          }
           System.setProperty("apple.awt.fileDialogForDirectories", "true");
           fileDialog.setVisible(true);
           System.setProperty("apple.awt.fileDialogForDirectories", "false");

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -658,8 +658,8 @@ public void quad(float x1, float y1, float x2, float y2,
   protected void rectImpl(float x1, float y1, float x2, float y2) {
 //    rect.setFrame(x1, y1, x2-x1, y2-y1);
 //    drawShape(rect);
-    if (fill) context.fillRect(x1, y1, x2, y2);
-    if (stroke) context.strokeRect(x1, y1, x2, y2);
+    if (fill) context.fillRect(x1, y1, x2 - x1, y2 - y1);
+    if (stroke) context.strokeRect(x1, y1, x2 - x1, y2 - y1);
   }
 
 

File: core/src/processing/javafx/PGraphicsFX2D.java
Patch:
@@ -658,8 +658,8 @@ public void quad(float x1, float y1, float x2, float y2,
   protected void rectImpl(float x1, float y1, float x2, float y2) {
 //    rect.setFrame(x1, y1, x2-x1, y2-y1);
 //    drawShape(rect);
-    if (fill) context.fillRect(x1, y1, x2, y2);
-    if (stroke) context.strokeRect(x1, y1, x2, y2);
+    if (fill) context.fillRect(x1, y1, x2 - x1, y2 - y1);
+    if (stroke) context.strokeRect(x1, y1, x2 - x1, y2 - y1);
   }
 
 

File: java/src/processing/mode/java/ErrorColumn.java
Patch:
@@ -30,6 +30,7 @@
 import java.awt.event.MouseEvent;
 import java.awt.event.MouseMotionAdapter;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import javax.swing.JPanel;
@@ -98,7 +99,8 @@ public class ErrorColumn extends JPanel {
 	/**
 	 * Stores error markers displayed PER TAB along the error bar.
 	 */
-	protected List<ErrorMarker> errorPoints = new ArrayList<ErrorMarker>();
+	protected List<ErrorMarker> errorPoints =
+	  Collections.synchronizedList(new ArrayList<ErrorMarker>());
 
 	/**
 	 * Stores previous list of error markers.

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -936,7 +936,7 @@ protected void nativeKeyEvent(com.jogamp.newt.event.KeyEvent nativeEvent,
         KeyEvent tke = new KeyEvent(nativeEvent, nativeEvent.getWhen(),
                                     KeyEvent.TYPE, peModifiers,
                                     keyChar,
-                                    keyCode,
+                                    0,
                                     nativeEvent.isAutoRepeat());
 
         sketch.postEvent(tke);

File: java/src/processing/mode/java/Commander.java
Patch:
@@ -386,6 +386,7 @@ static void printCommandLine(PrintStream out) {
 //    out.println("                     32- or 64-bit specific such as the OpenGL library.");
 //    out.println("                     Otherwise specify 0 or leave it out.");
 
+    out.println();
     out.println("The --build, --run, --present, or --export will be the final parameter");
     out.println("passed to Processing. Arguments passed following one of those four will");
     out.println("be passed through to the sketch itself, and therefore available to the");

File: java/src/processing/mode/java/runner/Runner.java
Patch:
@@ -671,7 +671,7 @@ public static boolean handleCommonErrors(final String exceptionClass,
     } else if (exceptionClass.equals("java.lang.UnsatisfiedLinkError")) {
       listener.statusError("A library used by this sketch is not installed properly.");
       if (PApplet.platform == PConstants.LINUX) {
-        System.out.println(message);
+        err.println(message);
       }
       err.println("A library relies on native code that's not available.");
       err.println("Or only works properly when the sketch is run as a " +

File: java/src/processing/mode/java/runner/Runner.java
Patch:
@@ -671,7 +671,7 @@ public static boolean handleCommonErrors(final String exceptionClass,
     } else if (exceptionClass.equals("java.lang.UnsatisfiedLinkError")) {
       listener.statusError("A library used by this sketch is not installed properly.");
       if (PApplet.platform == PConstants.LINUX) {
-        System.out.println(message);
+        err.println(message);
       }
       err.println("A library relies on native code that's not available.");
       err.println("Or only works properly when the sketch is run as a " +

File: core/src/processing/opengl/PShader.java
Patch:
@@ -325,7 +325,7 @@ public PShader(PApplet parent, String[] vertSource, String[] fragSource) {
 
   public void setVertexShader(String vertFilename) {
     this.vertexFilename = vertFilename;
-    vertexShaderSource = pgl.loadFragmentShader(vertFilename);
+    vertexShaderSource = pgl.loadVertexShader(vertFilename);
   }
 
 
@@ -342,13 +342,13 @@ public void setVertexShader(String[] vertSource) {
 
   public void setFragmentShader(String fragFilename) {
     this.fragmentFilename = fragFilename;
-    fragmentShaderSource = pgl.loadVertexShader(fragFilename);
+    fragmentShaderSource = pgl.loadFragmentShader(fragFilename);
   }
 
 
   public void setFragmentShader(URL fragURL) {
     this.fragmentURL = fragURL;
-    fragmentShaderSource = pgl.loadVertexShader(fragURL);
+    fragmentShaderSource = pgl.loadFragmentShader(fragURL);
   }
 
   public void setFragmentShader(String[] fragSource) {

File: core/src/processing/opengl/PShader.java
Patch:
@@ -325,7 +325,7 @@ public PShader(PApplet parent, String[] vertSource, String[] fragSource) {
 
   public void setVertexShader(String vertFilename) {
     this.vertexFilename = vertFilename;
-    vertexShaderSource = pgl.loadFragmentShader(vertFilename);
+    vertexShaderSource = pgl.loadVertexShader(vertFilename);
   }
 
 
@@ -342,13 +342,13 @@ public void setVertexShader(String[] vertSource) {
 
   public void setFragmentShader(String fragFilename) {
     this.fragmentFilename = fragFilename;
-    fragmentShaderSource = pgl.loadVertexShader(fragFilename);
+    fragmentShaderSource = pgl.loadFragmentShader(fragFilename);
   }
 
 
   public void setFragmentShader(URL fragURL) {
     this.fragmentURL = fragURL;
-    fragmentShaderSource = pgl.loadVertexShader(fragURL);
+    fragmentShaderSource = pgl.loadFragmentShader(fragURL);
   }
 
   public void setFragmentShader(String[] fragSource) {

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1270,14 +1270,14 @@ protected String[] loadFragmentShader(URL url) {
 
 
   @Override
-  protected String[] loadVertexShader(String filename, int version) {
+  protected String[] loadFragmentShader(String filename, int version) {
     String[] fragSrc0 = pg.parent.loadStrings(filename);
     return preprocessFragmentSource(fragSrc0, version);
   }
 
 
   @Override
-  protected String[] loadFragmentShader(String filename, int version) {
+  protected String[] loadVertexShader(String filename, int version) {
     String[] vertSrc0 = pg.parent.loadStrings(filename);
     return preprocessVertexSource(vertSrc0, version);
   }

File: java/src/processing/mode/java/runner/Runner.java
Patch:
@@ -670,6 +670,9 @@ public static boolean handleCommonErrors(final String exceptionClass,
       }
     } else if (exceptionClass.equals("java.lang.UnsatisfiedLinkError")) {
       listener.statusError("A library used by this sketch is not installed properly.");
+      if (PApplet.platform == PConstants.LINUX) {
+        System.out.println(message);
+      }
       err.println("A library relies on native code that's not available.");
       err.println("Or only works properly when the sketch is run as a " +
         ((Platform.getNativeBits() == 32) ? "64-bit" : "32-bit") + " application.");

File: java/src/processing/mode/java/Commander.java
Patch:
@@ -275,6 +275,7 @@ public Commander(String[] args) {
               } else {
                 runner.launch(sketchArgs);
               }
+              success = !runner.vmReturnedError();
             }
           } else {
             success = false;

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -138,6 +138,7 @@ public void showFrame(final Editor editor, ContributionType contributionType) {
 
   public void makeFrame(final Editor editor) {
     dialog = new JFrame(title);
+    dialog.setMinimumSize(new Dimension(750, 500));
     tabbedPane = new JTabbedPane();
 
     makeAndShowTab(false, true);

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -138,6 +138,7 @@ public void showFrame(final Editor editor, ContributionType contributionType) {
 
   public void makeFrame(final Editor editor) {
     dialog = new JFrame(title);
+    dialog.setMinimumSize(new Dimension(750, 500));
     tabbedPane = new JTabbedPane();
 
     makeAndShowTab(false, true);

File: core/src/processing/opengl/PGL.java
Patch:
@@ -696,7 +696,7 @@ protected void endDraw(boolean clear, int windowColor) {
       frontTex = backTex;
       backTex = temp;
     } else if (!clear && pg.parent.frameCount == 1) {
-      requestFBOLayer();
+      //requestFBOLayer();
     }
   }
 

File: core/src/processing/opengl/PGL.java
Patch:
@@ -1673,7 +1673,7 @@ protected static String[] preprocessFragmentSource(String[] fragSrc0,
       // 'textureXXX()' functions by 'texture()' functions. Order of these
       // replacements is important to prevent collisions between these two.
       String[] search = new String[] {
-          "varying", "attibute",
+          "varying", "attribute",
           "texture",
           "texMap2D", "texMap3D", "texMap2DRect",
           "texMapCube", "gl_FragColor"
@@ -1701,7 +1701,7 @@ protected static String[] preprocessVertexSource(String[] vertSrc0,
       // 'textureXXX()' functions by 'texture()' functions. Order of these
       // replacements is important to prevent collisions between these two.
       String[] search = new String[] {
-          "varying", "attibute",
+          "varying", "attribute",
           "texture",
           "texMap2D", "texMap3D", "texMap2DRect", "texMapCube"
       };

File: core/src/processing/opengl/PGL.java
Patch:
@@ -1673,7 +1673,7 @@ protected static String[] preprocessFragmentSource(String[] fragSrc0,
       // 'textureXXX()' functions by 'texture()' functions. Order of these
       // replacements is important to prevent collisions between these two.
       String[] search = new String[] {
-          "varying", "attibute",
+          "varying", "attribute",
           "texture",
           "texMap2D", "texMap3D", "texMap2DRect",
           "texMapCube", "gl_FragColor"
@@ -1701,7 +1701,7 @@ protected static String[] preprocessVertexSource(String[] vertSrc0,
       // 'textureXXX()' functions by 'texture()' functions. Order of these
       // replacements is important to prevent collisions between these two.
       String[] search = new String[] {
-          "varying", "attibute",
+          "varying", "attribute",
           "texture",
           "texMap2D", "texMap3D", "texMap2DRect", "texMapCube"
       };

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1174,7 +1174,6 @@ public void keyTyped(com.jogamp.newt.event.KeyEvent e)  {
 
   @Override
   protected void enableTexturing(int target) {
-    if (profile == 2) enable(target);
     if (target == TEXTURE_2D) {
       texturingTargets[0] = true;
     } else if (target == TEXTURE_RECTANGLE) {
@@ -1185,7 +1184,6 @@ protected void enableTexturing(int target) {
 
   @Override
   protected void disableTexturing(int target) {
-    if (profile == 2) disable(target);
     if (target == TEXTURE_2D) {
       texturingTargets[0] = false;
     } else if (target == TEXTURE_RECTANGLE) {

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -500,7 +500,7 @@ protected int getDefaultReadBuffer() {
   protected boolean isFBOBacked() {
     return super.isFBOBacked() || capabilities.isFBO();
   }
-
+*/
 
   @Override
   protected int getDepthBits() {
@@ -512,7 +512,7 @@ protected int getDepthBits() {
   protected int getStencilBits() {
     return capabilities.getStencilBits();
   }
-
+/*
 
   @Override
   protected Texture wrapBackTexture(Texture texture) {

File: java/src/processing/mode/java/pdex/ImportStatement.java
Patch:
@@ -63,7 +63,9 @@ public String getPackageName(){
 	  if(ret.startsWith("import "))
 	    ret = ret.substring(7);
 	  if(ret.endsWith(";"))
-	    ret = ret.substring(0, ret.length() - 1);	  
+	    ret = ret.substring(0, ret.length() - 1).trim();
+	  if(ret.endsWith(".*"))
+	    ret = ret.substring(0, ret.length() - 2);
 	  return ret;
 	}
 

File: java/src/processing/mode/java/pdex/CompletionPanel.java
Patch:
@@ -117,6 +117,8 @@ public CompletionPanel(final JEditTextArea textarea,
     } else {
       this.subWord = subWord;
     }
+
+    loadIcons();
     popupMenu = new JPopupMenu();
     popupMenu.removeAll();
     popupMenu.setOpaque(false);
@@ -131,7 +133,6 @@ public CompletionPanel(final JEditTextArea textarea,
     textarea.requestFocusInWindow();
     popupMenu.show(textarea, location.x, textarea.getBaseline(0, 0) + location.y);
     //log("Suggestion shown: " + System.currentTimeMillis());
-    loadIcons();
   }
 
 

File: java/src/processing/mode/java/JavaMode.java
Patch:
@@ -107,7 +107,7 @@ public String[] getIgnorable() {
 
   public Library getCoreLibrary() {
     if (coreLibrary == null) {
-      File coreFolder = Base.getContentFile("core");
+      File coreFolder = Platform.getContentFile("core");
       coreLibrary = new Library(coreFolder);
 //      try {
 //        coreLibrary = getLibrary("processing.core");

File: java/src/processing/mode/java/pdex/ASTGenerator.java
Patch:
@@ -108,6 +108,7 @@
 
 import processing.app.Base;
 import processing.app.Library;
+import processing.app.Platform;
 import processing.app.SketchCode;
 import processing.app.Util;
 import processing.app.syntax.JEditTextArea;
@@ -326,7 +327,7 @@ protected void loadJars() {
     classPath = factory.createFromPath(tehPath.toString());
     log("Classpath created " + (classPath != null));
     log("Sketch classpath jars loaded.");
-    if (Base.isMacOS()) {
+    if (Platform.isMacOS()) {
       File f = new File(System.getProperty("java.home") + File.separator + "bundle"
           + File.separator + "Classes" + File.separator + "classes.jar");
       log(f.getAbsolutePath() + " | classes.jar found?"

File: java/src/processing/mode/java/pdex/JavaTextArea.java
Patch:
@@ -37,6 +37,7 @@
 
 import processing.app.Base;
 import processing.app.Mode;
+import processing.app.Platform;
 import processing.app.syntax.JEditTextArea;
 import processing.app.syntax.PdeTextAreaDefaults;
 import processing.app.syntax.TextAreaDefaults;
@@ -234,7 +235,7 @@ public void processKeyEvent(KeyEvent evt) {
       if (evt.getID() == KeyEvent.KEY_TYPED) {
         processCompletionKeys(evt);
 
-      } else if (Base.isMacOS() && evt.getID() == KeyEvent.KEY_RELEASED) {
+      } else if (Platform.isMacOS() && evt.getID() == KeyEvent.KEY_RELEASED) {
         processControlSpace(evt);
       }
     }
@@ -279,7 +280,7 @@ private void processCompletionKeys(final KeyEvent event) {
         Base.log("Typing: " + fetchPhrase(event));
       }
     } else if (keyChar == ' ') { // Trigger on Ctrl-Space
-      if (!Base.isMacOS() && JavaMode.codeCompletionsEnabled &&
+      if (!Platform.isMacOS() && JavaMode.codeCompletionsEnabled &&
           (event.isControlDown() || event.isMetaDown())) {
         SwingWorker<Object, Object> worker = new SwingWorker<Object, Object>() {
           protected Object doInBackground() throws Exception {

File: java/src/processing/mode/java/pdex/JavaTextAreaPainter.java
Patch:
@@ -48,6 +48,7 @@
 import javax.swing.text.Utilities;
 
 import processing.app.Base;
+import processing.app.Platform;
 import processing.app.SketchCode;
 import processing.app.syntax.SyntaxDocument;
 import processing.app.syntax.TextAreaDefaults;
@@ -102,7 +103,7 @@ public JavaTextAreaPainter(JavaTextArea textArea, TextAreaDefaults defaults) {
       public void mouseClicked(MouseEvent evt) {
         if (!getEditor().hasJavaTabs()) { // Ctrl + Click disabled for java tabs
           if (evt.getButton() == MouseEvent.BUTTON1) {
-            if ((evt.isControlDown() && !Base.isMacOS()) || evt.isMetaDown()) {
+            if ((evt.isControlDown() && !Platform.isMacOS()) || evt.isMetaDown()) {
               handleCtrlClick(evt);
             }
           }

File: java/src/processing/mode/java/runner/Runner.java
Patch:
@@ -668,7 +668,7 @@ public static boolean handleCommonErrors(final String exceptionClass,
       listener.statusError("A library used by this sketch is not installed properly.");
       err.println("A library relies on native code that's not available.");
       err.println("Or only works properly when the sketch is run as a " +
-        ((Base.getNativeBits() == 32) ? "64-bit " : "32-bit ") + " application.");
+        ((Base.getNativeBits() == 32) ? "64-bit" : "32-bit") + " application.");
 
     } else if (exceptionClass.equals("java.lang.StackOverflowError")) {
       listener.statusError("StackOverflowError: This sketch is attempting too much recursion.");

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -5991,7 +5991,7 @@ protected void readPixels() {
 
   protected void drawPixels(int x, int y, int w, int h) {
     int f = (int)getPixelScale();
-    int len = f * w * h;
+    int len = f * w * f * h;
     if (nativePixels == null || nativePixels.length < len) {
       nativePixels = new int[len];
       nativePixelBuffer = PGL.allocateIntBuffer(nativePixels);

File: app/src/processing/app/Mode.java
Patch:
@@ -38,7 +38,6 @@
 import javax.swing.event.TreeExpansionListener;
 import javax.swing.tree.*;
 
-import processing.app.contrib.Contribution;
 import processing.app.contrib.ContributionType;
 import processing.app.contrib.ExamplesContribution;
 import processing.app.syntax.*;

File: app/src/processing/app/Library.java
Patch:
@@ -256,13 +256,13 @@ static String[] listPlatformEntries(File libraryFolder, String folderName, Strin
    * @param importToLibraryTable mapping from package names to Library objects
    */
 //  public void addPackageList(HashMap<String,Library> importToLibraryTable) {
-  public void addPackageList(Map<String, ArrayList<Library>> importToLibraryTable) {
+  public void addPackageList(Map<String, List<Library>> importToLibraryTable) {
 //    PApplet.println(packages);
     for (String pkg : packageList) {
 //          pw.println(pkg + "\t" + libraryFolder.getAbsolutePath());
 //      PApplet.println(pkg + "\t" + getName());
 //      Library library = importToLibraryTable.get(pkg);
-      ArrayList<Library> libraries = importToLibraryTable.get(pkg);
+      List<Library> libraries = importToLibraryTable.get(pkg);
       if (libraries == null) {
         libraries = new ArrayList<Library>();
         importToLibraryTable.put(pkg, libraries);

File: app/src/processing/app/Mode.java
Patch:
@@ -62,7 +62,7 @@ public abstract class Mode {
 //  protected Tool formatter;
 
   // maps imported packages to their library folder
-  protected Map<String, ArrayList<Library>> importToLibraryTable;
+  protected Map<String, List<Library>> importToLibraryTable;
 
   // these menus are shared so that they needn't be rebuilt for all windows
   // each time a sketch is created, renamed, or moved.
@@ -318,7 +318,7 @@ public File getReferenceFolder() {
   public void rebuildLibraryList() {
     //new Exception("Rebuilding library list").printStackTrace(System.out);
     // reset the table mapping imports to libraries
-    importToLibraryTable = new HashMap<String, ArrayList<Library>>();
+    importToLibraryTable = new HashMap<String, List<Library>>();
 
     Library core = getCoreLibrary();
     if (core != null) {

File: app/src/processing/app/contrib/Contribution.java
Patch:
@@ -31,11 +31,8 @@
 
 abstract public class Contribution {
   static final String IMPORTS_PROPERTY = "imports";
-//  static final String CATEGORIES_PROPERTY = "category";
   static final String CATEGORIES_PROPERTY = "categories";
-  //static final String MODES_PROPERTY = "compatibleModesList";
   static final String MODES_PROPERTY = "modes";
-  //static final String AUTHORS_PROPERTY = "authorList";
   static final String AUTHORS_PROPERTY = "authors";
 
   static final String SPECIAL_CATEGORY = "Starred";

File: core/src/processing/core/PImage.java
Patch:
@@ -1862,8 +1862,8 @@ public void blend(PImage src,
     loadPixels();
     if (src == this) {
       if (intersect(sx, sy, sx2, sy2, dx, dy, dx2, dy2)) {
-        blit_resize(get(sx, sy, sx2 - sx, sy2 - sy),
-                    0, 0, sx2 - sx - 1, sy2 - sy - 1,
+        blit_resize(get(sx, sy, sw, sh),
+                    0, 0, sw, sh,
                     pixels, pixelWidth, pixelHeight, dx, dy, dx2, dy2, mode);
       } else {
         // same as below, except skip the loadPixels() because it'd be redundant

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -975,11 +975,12 @@ private static char hackToChar(short code, char def) {
     return def;
   }
 
+
   // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 
 
   public void setCursor(int kind) {
-    System.err.println("Cursor types not supported in OpenGL, provide your cursor image");
+    PGraphics.showWarning("Cursor types not yet supported in OpenGL, provide your cursor image");
   }
 
 

File: app/src/processing/app/Library.java
Patch:
@@ -256,7 +256,7 @@ static String[] listPlatformEntries(File libraryFolder, String folderName, Strin
    * @param importToLibraryTable mapping from package names to Library objects
    */
 //  public void addPackageList(HashMap<String,Library> importToLibraryTable) {
-  public void addPackageList(HashMap<String,ArrayList<Library>> importToLibraryTable) {
+  public void addPackageList(Map<String, ArrayList<Library>> importToLibraryTable) {
 //    PApplet.println(packages);
     for (String pkg : packageList) {
 //          pw.println(pkg + "\t" + libraryFolder.getAbsolutePath());

File: java/src/processing/mode/java/pdex/ASTNodeWrapper.java
Patch:
@@ -195,7 +195,7 @@ public int[] getJavaCodeOffsets(ErrorCheckerService ecs) {
     }
    
     int pdeoffsets[] = getPDECodeOffsets(ecs);
-    String pdeCode = ecs.getPDECodeAtLine(pdeoffsets[0],pdeoffsets[1] - 1).trim();
+    String pdeCode = ecs.getPdeCodeAtLine(pdeoffsets[0],pdeoffsets[1] - 1).trim();
     int vals[] = createOffsetMapping(ecs, pdeCode,nodeOffset - altStartPos,nodeLength);
     if (vals != null)
       return new int[] {
@@ -635,7 +635,7 @@ public boolean highlightNode(ASTGenerator astGenerator){
    */
   public int[][] getOffsetMapping(ErrorCheckerService ecs){
     int pdeoffsets[] = getPDECodeOffsets(ecs);
-    String pdeCode = ecs.getPDECodeAtLine(pdeoffsets[0],pdeoffsets[1] - 1).trim();
+    String pdeCode = ecs.getPdeCodeAtLine(pdeoffsets[0],pdeoffsets[1] - 1).trim();
     return getOffsetMapping(ecs, pdeCode);
   }
  

File: app/src/processing/app/ui/WebFrame.java
Patch:
@@ -90,7 +90,7 @@ public void hyperlinkUpdate(HyperlinkEvent e) {
           if (result.trim().length() != 0) {
             String[] pairs = result.split("&");
             for (String pair : pairs) {
-              System.out.println("pair is " + pair);
+              //System.out.println("pair is " + pair);
               String[] pieces = pair.split("=");
               String attr = PApplet.urlDecode(pieces[0]);
               String valu = PApplet.urlDecode(pieces[1]);
@@ -192,4 +192,4 @@ public void propertyChange(PropertyChangeEvent evt) {
       }
     }).start();
   }
-}
\ No newline at end of file
+}

File: app/src/processing/app/Sketch.java
Patch:
@@ -678,7 +678,7 @@ public void handleDeleteCode() {
         setCurrentCode(0);
 
         // update the tabs
-        editor.repaintHeader();
+        editor.rebuildHeader();
       }
     }
   }

File: app/src/processing/app/Sketch.java
Patch:
@@ -678,7 +678,7 @@ public void handleDeleteCode() {
         setCurrentCode(0);
 
         // update the tabs
-        editor.repaintHeader();
+        editor.rebuildHeader();
       }
     }
   }

File: app/src/processing/app/ui/EditorHeader.java
Patch:
@@ -518,7 +518,7 @@ public void actionPerformed(ActionEvent e) {
       }
     };
     mapKey = "editor.header.delete";
-    keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_D, Toolkit.SHORTCUT_ALT_KEY_MASK);
+    keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_D, Toolkit.SHORTCUT_SHIFT_KEY_MASK);
     inputMap.put(keyStroke, mapKey);
     actionMap.put(mapKey, action);
     item.addActionListener(action);

File: app/src/processing/app/syntax/PdeInputHandler.java
Patch:
@@ -193,6 +193,7 @@ protected boolean isMnemonic(KeyEvent event) {
     // non-ASCII chars, and there are no menu mnemonics to speak of
     if (!Base.isMacOS()) {
       if ((event.getModifiers() & InputEvent.ALT_MASK) != 0 &&
+          (event.getModifiers() & InputEvent.CTRL_MASK) == 0 &&
           event.getKeyChar() != KeyEvent.VK_UNDEFINED) {
         // This is probably a menu mnemonic, don't pass it through.
         // If it's an alt-NNNN sequence, those only work on the keypad

File: app/src/processing/app/ui/EditorHeader.java
Patch:
@@ -518,7 +518,7 @@ public void actionPerformed(ActionEvent e) {
       }
     };
     mapKey = "editor.header.delete";
-    keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_D, Toolkit.SHORTCUT_ALT_KEY_MASK);
+    keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_D, Toolkit.SHORTCUT_SHIFT_KEY_MASK);
     inputMap.put(keyStroke, mapKey);
     actionMap.put(mapKey, action);
     item.addActionListener(action);

File: core/src/processing/core/PShape.java
Patch:
@@ -115,6 +115,9 @@ public class PShape implements PConstants {
   static public final String NO_VERTICES_ERROR =
     "getVertexCount() only works with PATH or GEOMETRY shapes";
 
+  public static final String NOT_A_SIMPLE_VERTEX =
+      "%1$s can not be called on quadratic or bezier vertices";
+
   // boundary box of this shape
   //protected float x;
   //protected float y;

File: core/src/processing/opengl/PGL.java
Patch:
@@ -2716,7 +2716,7 @@ protected interface FontOutline {
   // to glReadPixels() should be done in readPixelsImpl().
 
   public void readPixels(int x, int y, int width, int height, int format, int type, Buffer buffer){
-    boolean multisampled = isMultisampled();
+    boolean multisampled = isMultisampled() || pg.offscreenMultisample;
     boolean depthReadingEnabled = pg.getHint(PConstants.ENABLE_DEPTH_READING);
     boolean depthRequested = format == STENCIL_INDEX || format == DEPTH_COMPONENT || format == DEPTH_STENCIL;
 

File: core/src/processing/core/PShape.java
Patch:
@@ -115,6 +115,9 @@ public class PShape implements PConstants {
   static public final String NO_VERTICES_ERROR =
     "getVertexCount() only works with PATH or GEOMETRY shapes";
 
+  public static final String NOT_A_SIMPLE_VERTEX =
+      "%1$s can not be called on quadratic or bezier vertices";
+
   // boundary box of this shape
   //protected float x;
   //protected float y;

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -899,8 +899,8 @@ void dispose() {
 
     @Override
     public boolean equals(Object obj) {
-      GLResourceTexture other = (GLResourceTexture)obj;
-      return other.glName == glId &&
+      GLResourceVertexBuffer other = (GLResourceVertexBuffer)obj;
+      return other.glId == glId &&
              other.context == context;
     }
 

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -257,8 +257,7 @@ public String preprocess(File srcFolder,
       return null;
     }
     //System.out.format("size() is '%s'%n", info[0]);
-
-    /*
+    
     // Remove the size() statement (will be added back by writeFooter())
     if (sizeInfo != null) {
       String sizeStatement = sizeInfo.getStatement();
@@ -267,7 +266,6 @@ public String preprocess(File srcFolder,
         bigCode.delete(index, index + sizeStatement.length());
       }
     }
-    */
 
     PreprocessorResult result;
     try {

File: core/src/processing/core/PFont.java
Patch:
@@ -85,8 +85,7 @@ public class PFont implements PConstants {
   /**
    * The original size of the font when it was first created
    */
-  //protected int size;
-  private int size;
+  protected int size;
 
   /** Default density set to 1 for backwards compatibility with loadFont(). */
   protected int density = 1;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1795,8 +1795,8 @@ public PShape createShape(int kind, float... p) {
       return createShapePrimitive(kind, p);
 
     } else if (kind == ELLIPSE) {
-      if (len != 4 && len != 5) {
-        throw new IllegalArgumentException("Use createShape(ELLIPSE, x, y, w, h) or createShape(ELLIPSE, x, y, w, h, mode)");
+      if (len != 4) {
+        throw new IllegalArgumentException("Use createShape(ELLIPSE, x, y, w, h)");
       }
       return createShapePrimitive(kind, p);
 

File: core/src/processing/core/PShape.java
Patch:
@@ -1654,9 +1654,8 @@ protected void drawPrimitive(PGraphics g) {
         }
       }
     } else if (kind == ELLIPSE) {
-      g.ellipseMode(CORNER);
-      g.ellipse(params[0], params[1], params[2], params[3]);
-
+      g.ellipse(params[0], params[1],
+                params[2], params[3]);
     } else if (kind == ARC) {
       if (params.length == 6) {
         g.arc(params[0], params[1],

File: core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -3211,9 +3211,6 @@ protected void tessellateEllipse() {
       b = params[1];
       c = params[2];
       d = params[3];
-      if (params.length == 5) {
-        mode = (int)(params[4]);
-      }
     }
 
     float x = a;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1789,7 +1789,7 @@ public PShape createShape(int kind, float... p) {
       return createShapePrimitive(kind, p);
 
     } else if (kind == RECT) {
-      if (len != 4 && len != 5 && len != 8 && len != 9) {
+      if (len != 4 && len != 5 && len != 8) {
         throw new IllegalArgumentException("Wrong number of parameters for createShape(RECT), see the reference");
       }
       return createShapePrimitive(kind, p);

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1802,7 +1802,7 @@ public PShape createShape(int kind, float... p) {
 
     } else if (kind == ARC) {
       if (len != 6 && len != 7) {
-        throw new IllegalArgumentException("Use createShape(ARC, x, y, w, h, start, stop)");
+        throw new IllegalArgumentException("Use createShape(ARC, x, y, w, h, start, stop) or createShape(ARC, x, y, w, h, start, stop, arcMode)");
       }
       return createShapePrimitive(kind, p);
 

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -899,8 +899,8 @@ void dispose() {
 
     @Override
     public boolean equals(Object obj) {
-      GLResourceTexture other = (GLResourceTexture)obj;
-      return other.glName == glId &&
+      GLResourceVertexBuffer other = (GLResourceVertexBuffer)obj;
+      return other.glId == glId &&
              other.context == context;
     }
 

File: core/src/processing/core/PVector.java
Patch:
@@ -874,8 +874,8 @@ public PVector setMag(PVector target, float len) {
    * @brief Calculate the angle of rotation for this vector
    */
   public float heading() {
-    float angle = (float) Math.atan2(-y, x);
-    return -1*angle;
+    float angle = (float) Math.atan2(y, x);
+    return angle;
   }
 
 

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -13083,7 +13083,7 @@ void addCurveVertexSegment(int i, float x1, float y1, float z1,
       }
       if (stroke) addStrokeVertex(x, y, z, strokeColor, strokeWeight);
 
-      for (int j = 0; j < pg.curveDetail; j++) {
+      for (int j = 0; j < pg.curveDetail - 1; j++) {
         x += xplot1; xplot1 += xplot2; xplot2 += xplot3;
         y += yplot1; yplot1 += yplot2; yplot2 += yplot3;
         z += zplot1; zplot1 += zplot2; zplot2 += zplot3;

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -13083,7 +13083,7 @@ void addCurveVertexSegment(int i, float x1, float y1, float z1,
       }
       if (stroke) addStrokeVertex(x, y, z, strokeColor, strokeWeight);
 
-      for (int j = 0; j < pg.curveDetail; j++) {
+      for (int j = 0; j < pg.curveDetail - 1; j++) {
         x += xplot1; xplot1 += xplot2; xplot2 += xplot3;
         y += yplot1; yplot1 += yplot2; yplot2 += yplot3;
         z += zplot1; zplot1 += zplot2; zplot2 += zplot3;

File: core/src/processing/core/PApplet.java
Patch:
@@ -10235,7 +10235,7 @@ public void setLocation(int x, int y) {
         @Override
         public void setSize(int w, int h) {
           deprecationWarning("setSize");
-          surface.setLocation(w, h);
+          surface.setSize(w, h);
         }
 
         private void deprecationWarning(String method) {

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -564,6 +564,7 @@ public void setSize(int width, int height) {
         sketchWidth = width;
         sketchHeight = height;
         graphics.setSize(width, height);
+        window.setSize(width, height);
       }
 
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -10235,7 +10235,7 @@ public void setLocation(int x, int y) {
         @Override
         public void setSize(int w, int h) {
           deprecationWarning("setSize");
-          surface.setLocation(w, h);
+          surface.setSize(w, h);
         }
 
         private void deprecationWarning(String method) {

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -564,6 +564,7 @@ public void setSize(int width, int height) {
         sketchWidth = width;
         sketchHeight = height;
         graphics.setSize(width, height);
+        window.setSize(width, height);
       }
 
 

File: app/src/processing/app/contrib/Contribution.java
Patch:
@@ -178,7 +178,7 @@ public int getMaxRevision() {
 
 
   public boolean isCompatible(int versionNum) {
-    return ((maxRevision == 0 || versionNum < maxRevision) && versionNum > minRevision);
+    return ((maxRevision == 0 || versionNum <= maxRevision) && versionNum >= minRevision);
   }
 
 

File: app/src/processing/app/ui/Editor.java
Patch:
@@ -434,7 +434,7 @@ public void processKeyEvent(KeyEvent evt) {
   public EditorFooter createFooter() {
     EditorFooter ef = new EditorFooter(this);
     console = new EditorConsole(this);
-    ef.addPanel(Language.text("editor.footer.console"), console);
+    ef.addPanel(console, Language.text("editor.footer.console"), "/lib/footer/console");
     return ef;
 
     /*

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -264,7 +264,7 @@ public EditorFooter createFooter() {
 
 //    console = new EditorConsole(this);
 //    footer.addPanel(Language.text("editor.footer.console"), console);
-    footer.addPanel(Language.text("editor.footer.errors"), errorTableScrollPane);
+    footer.addPanel(errorTableScrollPane, Language.text("editor.footer.errors"), "/lib/footer/error");
 
     //return consolePanel;
     return footer;

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -486,6 +486,9 @@ boolean hasUpdates(Contribution contribution) {
 
   String getLatestVersion(Contribution contribution) {
     Contribution newestContrib = getAvailableContribution(contribution);
+    if(newestContrib == null){
+      return null;
+    }
     String latestVersion = newestContrib.getPrettyVersion();
     if (latestVersion != null && !latestVersion.isEmpty()) {
       if (latestVersion.toLowerCase().startsWith("build")) // For Python mode

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -486,6 +486,9 @@ boolean hasUpdates(Contribution contribution) {
 
   String getLatestVersion(Contribution contribution) {
     Contribution newestContrib = getAvailableContribution(contribution);
+    if(newestContrib == null){
+      return null;
+    }
     String latestVersion = newestContrib.getPrettyVersion();
     if (latestVersion != null && !latestVersion.isEmpty()) {
       if (latestVersion.toLowerCase().startsWith("build")) // For Python mode

File: core/src/processing/awt/PGraphicsJava2D.java
Patch:
@@ -2903,6 +2903,9 @@ protected void setImpl(PImage sourceImage,
     if ((sourceX == 0) && (sourceY == 0) &&
         (sourceWidth == sourceImage.width) &&
         (sourceHeight == sourceImage.height)) {
+//      System.out.format("%d %d  %dx%d  %d%n", targetX, targetY,
+//                             sourceImage.width, sourceImage.height,
+//                             sourceImage.pixels.length);
       raster.setDataElements(targetX, targetY,
                              sourceImage.width, sourceImage.height,
                              sourceImage.pixels);

File: core/src/processing/core/PApplet.java
Patch:
@@ -5294,7 +5294,8 @@ public PImage loadImage(String filename, String extension) { //, Object params)
           }
 
           // if it's a .gif image, test to see if it has transparency
-          if (extension.equals("gif") || extension.equals("png")) {
+          if (extension.equals("gif") || extension.equals("png") ||
+              extension.equals("unknown")) {
             image.checkAlpha();
           }
 

File: core/src/processing/core/ThinkDifferent.java
Patch:
@@ -71,6 +71,7 @@ public void handleQuitRequestWith(QuitEvent event, QuitResponse response) {
   }
 
 
+  // Called via reflection from PSurfaceAWT and others
   static public void setIconImage(Image image) {
     // When already set, is a sun.awt.image.MultiResolutionCachedImage on OS X
 //    Image current = application.getDockIconImage();

File: app/src/processing/app/Preferences.java
Patch:
@@ -21,7 +21,9 @@
 
 package processing.app;
 
-import java.awt.*;
+import java.awt.Color;
+import java.awt.Font;
+import java.awt.SystemColor;
 import java.io.*;
 import java.util.*;
 

File: java/src/processing/mode/java/tweak/SketchParser.java
Patch:
@@ -847,8 +847,6 @@ static public int getSetupEnd(String code) {
 			return -1;
 		}
 
-		System.out.println("setup start = " + setupStart);
-
 		// count brackets to look for setup end
 		int bracketCount=1;
 		int pos = setupStart;

File: app/src/processing/app/contrib/ContributionListPanel.java
Patch:
@@ -226,12 +226,12 @@ public void filterLibraries(List<Contribution> filteredContributions) {
 
 
   protected void setSelectedPanel(ContributionPanel contributionPanel) {
+    contributionTab.contributionManagerDialog.updateStatusPanel(contributionPanel);
     if (selectedPanel == contributionPanel) {
       selectedPanel.setSelected(true);
 
     } else {
       
-      contributionTab.contributionManagerDialog.updateStatusPanel(contributionPanel);
       ContributionPanel lastSelected = selectedPanel;
       selectedPanel = contributionPanel;
 

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -151,6 +151,7 @@ public void makeFrame(final Editor editor) {
     
     
 //    tabbedPane.setSize(450, 400);
+    buildErrorPanel();
     setLayoutWithoutError();
     
     restartButton = new JButton(Language.text("contrib.restart"));
@@ -207,7 +208,6 @@ public void actionPerformed(ActionEvent arg0) {
   }
 
   private void setLayoutWithError() {
-    System.out.println(tabbedPane.getPreferredSize());
     GroupLayout layout = new GroupLayout(dialog.getContentPane());
     dialog.getContentPane().setLayout(layout);
     dialog.setResizable(true);
@@ -627,11 +627,9 @@ public void finishedAction() {
           exception.printStackTrace();
           activeTab.retryConnectingButton.setVisible(true);
           
-          buildErrorPanel();
           setLayoutWithError();
           
         } else {
-          
           activeTab.statusPanel.setMessage(Language.text("contrib.status.done"));
           activeTab.retryConnectingButton.setVisible(false);
         }

File: app/src/processing/app/contrib/ContributionTab.java
Patch:
@@ -367,7 +367,7 @@ public void itemStateChanged(ItemEvent arg0) {
 //      pane.add(filterField, c);
 //    }
 
-    panel.setMinimumSize(new Dimension(450, 400));
+//    panel.setSize(new Dimension(450, 400));//TODO try to remove this
   }
 
 
@@ -485,7 +485,6 @@ public void finishedAction() {
           }
           exception.printStackTrace();
           retryConnectingButton.setVisible(true);
-
         } else {
           statusPanel.setMessage(Language.text("contrib.status.done"));
           retryConnectingButton.setVisible(false);

File: app/src/processing/app/contrib/StatusPanel.java
Patch:
@@ -173,7 +173,7 @@ void clear() {
   }
 
   public void update(ContributionPanel panel) {
-    
+
     progressBarPanel.removeAll();
 
     label.setText(panel.description.toString());

File: app/src/processing/app/ui/Toolkit.java
Patch:
@@ -87,10 +87,11 @@ public class Toolkit {
   /**
    * Standardized width for buttons. Mac OS X 10.3 wants 70 as its default,
    * Windows XP needs 66, and my Ubuntu machine needs 80+, so 80 seems proper.
+   * This is now stored in the languages file since this may need to be larger
+   * for languages that are consistently wider than English.
    */
   static public int BUTTON_WIDTH =
-    //Integer.parseInt(Language.text("preferences.button.width"));
-    Preferences.getInteger("preferences.button.width");
+    Integer.parseInt(Language.text("preferences.button.width"));
 
   static final java.awt.Toolkit awtToolkit =
     java.awt.Toolkit.getDefaultToolkit();

File: core/src/processing/core/PApplet.java
Patch:
@@ -1120,6 +1120,7 @@ public int displayDensity() {
           return 1;
         }
       }
+      // If nobody's density is 1 (or != 2, to be exact) then everyone is 2
       return 2;
     }
     return displayDensity(display);
@@ -1153,7 +1154,7 @@ static public int displayDensity(int display) {
               System.err.println("Only one display is currently known, use displayDensity(1).");
             } else {
               System.err.format("Your displays are numbered %d through %d, " +
-                "pass one of those numbers to displayDensity()", 1, devices.length);
+                "pass one of those numbers to displayDensity()%n", 1, devices.length);
             }
             throw new RuntimeException("Display " + display + " does not exist.");
           }

File: java/src/processing/mode/java/pdex/ASTGenerator.java
Patch:
@@ -901,9 +901,9 @@ public void preparePredictions(final String word, final int line,
               if (td.getStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY) != null) {
                 SimpleType st = (SimpleType) td.getStructuralProperty(TypeDeclaration.SUPERCLASS_TYPE_PROPERTY);
                 log("Superclass " + st.getName());
-                ArrayList<CompletionCandidate> candidates =
+                ArrayList<CompletionCandidate> tempCandidates =
                   getMembersForType(st.getName().toString(), word2, noCompare, false);
-                for (CompletionCandidate can : candidates) {
+                for (CompletionCandidate can : tempCandidates) {
                   candidates.add(can);
                 }
                 //findDeclaration(st.getName())

File: app/src/processing/app/Mode.java
Patch:
@@ -696,7 +696,7 @@ public DefaultMutableTreeNode buildExamplesTree() {
     } catch (IOException e) {
       e.printStackTrace();
     }
-    
+
     DefaultMutableTreeNode contributedExamplesNode =
       buildContributedExamplesTrees();
     if(contributedExamplesNode.getChildCount() > 0){
@@ -718,7 +718,7 @@ private DefaultMutableTreeNode buildContributedExamplesTrees() {
         subfolders = new File[0]; //empty array
       }
       for (File sub : subfolders) {
-        if (!ExamplesContribution.isExamplesCompatible(base, sub))
+        if (!ExamplesContribution.isCompatible(base, sub))
           continue;
         DefaultMutableTreeNode subNode =
           new DefaultMutableTreeNode(sub.getName());

File: app/src/processing/app/contrib/ExamplesContribution.java
Patch:
@@ -49,10 +49,10 @@ static private StringList parseModeList(StringDict properties) {
    * @return true if the example is compatible with the mode of the currently
    *         active editor
    */
-  public boolean isCompatible(Base base, File exampleFolder) {
+  static public boolean isCompatible(Base base, File exampleFolder) {
     String currentIdentifier = base.getActiveEditor().getMode().getIdentifier();
     File propertiesFile =
-      new File(exampleFolder, getPropertiesName());
+      new File(exampleFolder, EXAMPLES.getPropertiesName());
     if (propertiesFile.exists()) {
       StringList compatibleList =
         parseModeList(Base.readSettings(propertiesFile));

File: app/src/processing/app/Base.java
Patch:
@@ -559,7 +559,8 @@ public byte[] getInstalledContribsInfo() {
                                         c.getVersion(), c.getPrettyVersion()));
       entries.append(entry);
     }
-    String joined = "id=" + Preferences.get("update.id") + entries.join("&");
+    String joined =
+      "id=" + Preferences.get("update.id") + "&" + entries.join("&");
 //    StringBuilder sb = new StringBuilder();
 //    try {
 //      // Truly ridiculous attempt to shove everything into a GET request.

File: app/src/processing/app/Mode.java
Patch:
@@ -29,6 +29,7 @@
 import java.awt.image.WritableRaster;
 import java.io.*;
 import java.util.*;
+import java.util.List;
 
 import javax.swing.*;
 import javax.swing.border.Border;
@@ -76,8 +77,8 @@ public abstract class Mode {
 
   protected File examplesContribFolder;
 
-  public ArrayList<Library> coreLibraries;
-  public ArrayList<Library> contribLibraries;
+  public List<Library> coreLibraries;
+  public List<Library> contribLibraries;
 
   /** Library folder for core. (Used for OpenGL in particular.) */
   protected Library coreLibrary;

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2013 The Processing Foundation
+  Copyright (c) 2013-15 The Processing Foundation
   Copyright (c) 2011-12 Ben Fry and Casey Reas
 
   This program is free software; you can redistribute it and/or modify
@@ -30,6 +30,7 @@
 import processing.app.Base;
 import processing.app.Library;
 import processing.core.PApplet;
+import processing.data.StringDict;
 
 
 public class ContributionListing {
@@ -555,7 +556,7 @@ ArrayList<AvailableContribution> parseContribList(File file) {
 
           String[] contribLines = PApplet.subset(lines, start, end-start);
 
-          Map<String, String> contribParams = Base.readSettings(file.getName(), contribLines);
+          StringDict contribParams = Base.readSettings(file.getName(), contribLines);
 
           outgoing.add(new AvailableContribution(contribType, contribParams));
           start = end + 1;

File: app/src/processing/app/contrib/ContributionManager.java
Patch:
@@ -31,6 +31,7 @@
 import processing.app.Editor;
 import processing.app.Language;
 import processing.core.PApplet;
+import processing.data.StringDict;
 
 
 public class ContributionManager {
@@ -613,9 +614,8 @@ else if (type.equalsIgnoreCase("libraries")) //putting this here, just in case
       propFileName = "libraries.properties";
 
     for (File folder : markedForUpdate) {
-      Map<String, String> properties =
-        Base.readSettings(new File(folder, propFileName));
-      updateContribsNames.add(properties.get("name"));
+      StringDict props = Base.readSettings(new File(folder, propFileName));
+      updateContribsNames.add(props.get("name"));
       Base.removeDir(folder);
     }
 

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -34,6 +34,7 @@
 import processing.app.*;
 import processing.app.exec.ProcessHelper;
 import processing.core.*;
+import processing.data.StringList;
 import processing.data.XML;
 import processing.mode.java.preproc.*;
 
@@ -212,7 +213,7 @@ public String preprocess(File srcFolder,
 
     // figure out the contents of the code folder to see if there
     // are files that need to be added to the imports
-    String[] codeFolderPackages = null;
+    StringList codeFolderPackages = null;
     if (sketch.hasCodeFolder()) {
       File codeFolder = sketch.getCodeFolder();
       javaLibraryPath = codeFolder.getAbsolutePath();

File: java/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -645,7 +645,7 @@ public PreprocessorResult write(final Writer out, String program)
 
 
   public PreprocessorResult write(Writer out, String program,
-                                  String codeFolderPackages[])
+                                  StringList codeFolderPackages)
       throws SketchException, RecognitionException, TokenStreamException {
 
     // these ones have the .* at the end, since a class name might be at the end

File: core/src/processing/core/PSurfaceAWT.java
Patch:
@@ -151,7 +151,7 @@ public void componentResized(ComponentEvent e) {
   // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 
 
-  class SmoothCanvas extends Canvas {
+  public class SmoothCanvas extends Canvas {
     private Dimension oldSize = new Dimension(0, 0);
     private Dimension newSize = new Dimension(0, 0);
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -10072,6 +10072,7 @@ static protected void runSketchEDT(final String[] args,
     PSurface surface = sketch.initSurface();
 //      sketch.initSurface(windowColor, displayIndex, fullScreen, spanDisplays);
 
+    /*
     // Wait until the applet has figured out its width. In a static mode app,
     // everything happens inside setup(), so this will be after setup() has
     // completed, and the empty draw() has set "finished" to true.
@@ -10084,6 +10085,7 @@ static protected void runSketchEDT(final String[] args,
         //System.out.println("interrupt");
       }
     }
+    */
 
     if (present) {
       if (hideStop) {

File: core/src/processing/core/PApplet.java
Patch:
@@ -2276,7 +2276,7 @@ public void handleDraw() {
     // canDraw = g != null && (looping || redraw);
     if (g == null) return;
     if (!looping && !redraw) return;
-    //System.out.println("looping/redraw = " + looping + " " + redraw);
+//    System.out.println("looping/redraw = " + looping + " " + redraw);
 
     // no longer in use by any of our renderers
 //    if (!g.canDraw()) {

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -305,7 +305,7 @@ public Graphics2D checkImage() {
       int wide = width * pixelDensity;
       int high = height * pixelDensity;
 //      System.out.println("re-creating image");
-      image = gc.createCompatibleImage(wide, high);
+      image = gc.createCompatibleImage(wide, high, Transparency.TRANSLUCENT);
 //      image = gc.createCompatibleVolatileImage(wide, high);
       //image = surface.getComponent().createImage(width, height);
     }

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -743,7 +743,7 @@ public void itemStateChanged(ItemEvent e) {
     showStopButton.setEnabled(Preferences.getBoolean("export.application.present"));
     showStopButton.setBorder(new EmptyBorder(3, 13 + indent, 6, 13));
 
-    final JCheckBox presentButton = new JCheckBox(Language.text("export.options.fullscreen"));
+    final JCheckBox presentButton = new JCheckBox(Language.text("export.options.present"));
     presentButton.setSelected(Preferences.getBoolean("export.application.present"));
     presentButton.addItemListener(new ItemListener() {
       public void itemStateChanged(ItemEvent e) {

File: app/src/processing/app/Base.java
Patch:
@@ -150,10 +150,10 @@ static public void main(final String[] args) {
         public void run() {
           try {
             createAndShowGUI(args);
-          } catch (Exception e) {
+          } catch (Throwable t) {
             showBadnessTrace("It was not meant to be",
                              "A serious problem happened during startup. Please report:\n" +
-                             "http://github.com/processing/processing/issues/new", e, true);
+                             "http://github.com/processing/processing/issues/new", t, true);
           }
         }
     });

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -522,8 +522,9 @@ public void setSize(int width, int height) {
 //      System.err.println("3. set size");
 
       if (!presentMode) {
-        sketch.width = width;
-        sketch.height = height;
+//        sketch.width = width;
+//        sketch.height = height;
+        sketch.setSize(width, height);
         sketchWidth = width;
         sketchHeight = height;
         graphics.setSize(width, height);

File: app/src/processing/app/Base.java
Patch:
@@ -2076,8 +2076,9 @@ static private void showBadnessTrace(String title, String message,
       t.printStackTrace(new PrintWriter(sw));
       // Necessary to replace \n with <br/> (even if pre) otherwise Java
       // treats it as a closed tag and reverts to plain formatting.
-      message = "<html>" + message + "<br/><font size=2><br/>" +
-        sw.toString().replaceAll("\n", "<br/>");
+      message = "<html>" + message.replaceAll("\n", "<br/>") +
+        "<br/><font size=2><br/>" +
+        sw.toString().replaceAll("\n", "<br/>") + "</html>";
 
       JOptionPane.showMessageDialog(new Frame(), message, title,
                                     fatal ?

File: core/src/processing/core/PSurfaceAWT.java
Patch:
@@ -398,6 +398,7 @@ public void initFrame(PApplet sketch) {/*, int backgroundColor,
       GraphicsEnvironment.getLocalGraphicsEnvironment();
 
     int displayNum = sketch.sketchDisplay();
+//    System.out.println("display from sketch is " + displayNum);
     if (displayNum > 0) {  // if -1, use the default device
       GraphicsDevice[] devices = environment.getScreenDevices();
       if (displayNum <= devices.length) {
@@ -694,6 +695,7 @@ public void placeWindow(int[] location, int[] editorLocation) {
     int contentW = Math.max(sketchWidth, MIN_WINDOW_WIDTH);
     int contentH = Math.max(sketchHeight, MIN_WINDOW_HEIGHT);
 
+    // Ignore previous sketch placement when dealing with full screen
     if (sketch.sketchFullScreen()) {
       location = null;
     }

File: core/src/processing/core/PSurfaceAWT.java
Patch:
@@ -404,9 +404,9 @@ public void initFrame(PApplet sketch) {/*, int backgroundColor,
         displayDevice = devices[displayNum - 1];
       } else {
         System.err.format("Display %d does not exist, " +
-          "using the default display instead.", displayNum);
+          "using the default display instead.%n", displayNum);
         for (int i = 0; i < devices.length; i++) {
-          System.err.format("Display %d is %s\n", i, devices[i]);
+          System.err.format("Display %d is %s%n", (i+1), devices[i]);
         }
       }
     }

File: core/src/processing/opengl/PSurfaceJOGL.java
Patch:
@@ -222,9 +222,9 @@ protected void initWindow() {
         displayDevice = monitors.get(displayNum - 1);
       } else {
         System.err.format("Display %d does not exist, " +
-          "using the default display instead.", displayNum);
+          "using the default display instead.%n", displayNum);
         for (int i = 0; i < monitors.size(); i++) {
-          System.err.format("Display %d is %s\n", i+1, monitors.get(i));
+          System.err.format("Display %d is %s%n", i+1, monitors.get(i));
         }
       }
     }

File: core/src/processing/core/PApplet.java
Patch:
@@ -1569,7 +1569,7 @@ protected void resizeRenderer(int newWidth, int newHeight) {
   *
   * ( end auto-generated )
   * @webref environment
-  * @param renderer the renderer to use, e.g. P2D, P2D_2X, P3D...
+  * @param renderer the renderer to use, e.g. JAVA2D, JAVA2D_2X, P2D, P2D_2X, P3D, P3D_2X
   * @see PApplet#settings()
   * @see PApplet#setup()
   * @see PApplet#size()
@@ -10657,7 +10657,7 @@ public void noClip() {
    *
    * ( end auto-generated )
    *
-   * @webref Rendering
+   * @webref rendering
    * @param mode the blending mode to use
    */
   public void blendMode(int mode) {

File: core/src/processing/core/PSurfaceAWT.java
Patch:
@@ -975,7 +975,7 @@ static protected void setIconImage(Frame frame) {
       try {
         if (iconImages == null) {
           iconImages = new ArrayList<Image>();
-          final int[] sizes = { 16, 32, 48, 64 };
+          final int[] sizes = { 16, 32, 48, 64, 128, 256, 512 };
 
           for (int sz : sizes) {
             //URL url = getClass().getResource("/icon/icon-" + sz + ".png");

File: app/src/processing/app/Editor.java
Patch:
@@ -469,7 +469,6 @@ public boolean canImport(TransferHandler.TransferSupport support) {
 
     @SuppressWarnings("unchecked")
     public boolean importData(TransferHandler.TransferSupport support) {
-      System.out.println(support.getTransferable());
       int successful = 0;
 
       if (!canImport(support)) {

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -162,15 +162,15 @@ public class PGraphicsOpenGL extends PGraphics {
   static protected URL defLightShaderVertURL =
     PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/LightVert.glsl");
   static protected URL defTexlightShaderVertURL =
-    PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/TexlightVert.glsl");
+    PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/TexLightVert.glsl");
   static protected URL defColorShaderFragURL =
     PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/ColorFrag.glsl");
   static protected URL defTextureShaderFragURL =
     PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/TexFrag.glsl");
   static protected URL defLightShaderFragURL =
     PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/LightFrag.glsl");
   static protected URL defTexlightShaderFragURL =
-    PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/TexlightFrag.glsl");
+    PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/TexLightFrag.glsl");
 
   static protected URL defLineShaderVertURL =
     PGraphicsOpenGL.class.getResource("/processing/opengl/shaders/LineVert.glsl");

File: core/src/processing/core/PSurfaceNone.java
Patch:
@@ -367,4 +367,4 @@ public void run() {
       }
     }
   }
-}
\ No newline at end of file
+}

File: java/src/processing/mode/java/pdex/JavaTextAreaPainter.java
Patch:
@@ -100,7 +100,6 @@ public ErrorLineCoord(int xStart, int xEnd, int yStart, int yEnd, Problem proble
 
   public JavaTextAreaPainter(JavaTextArea textArea, TextAreaDefaults defaults) {
     super(textArea, defaults);
-    new Exception().printStackTrace(System.out);
 
     addMouseListener(new MouseAdapter() {
       public void mouseClicked(MouseEvent evt) {

File: java/src/processing/mode/java/pdex/ErrorCheckerService.java
Patch:
@@ -111,7 +111,7 @@ public class ErrorCheckerService implements Runnable {
   /**
    * Stores all Problems in the sketch
    */
-  public ArrayList<Problem> problemsList;
+  public List<Problem> problemsList;
 
   /**
    * How many lines are present till the initial class declaration? In static

File: app/src/processing/app/EditorHeader.java
Patch:
@@ -351,7 +351,7 @@ private boolean placeTabs(int left, int right, Graphics2D g) {
         if (code.isModified()) {
           g.setColor(modifiedColor);
           //g.drawLine(tab.left + NOTCH, top, tab.right - NOTCH, top);
-          g.drawLine(tab.left + (i == 0 ? CURVE_RADIUS : 0), TAB_TOP, tab.right, TAB_TOP);
+          g.drawLine(tab.left + (i == 0 ? CURVE_RADIUS : 0), TAB_TOP, tab.right-1, TAB_TOP);
         }
       }
 

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -292,7 +292,7 @@ public Graphics2D checkImage() {
       }
       // If not realized (off-screen, i.e the Color Selector Tool), gc will be null.
       if (gc == null) {
-        System.err.println("GraphicsConfiguration null in initImage()");
+        //System.err.println("GraphicsConfiguration null in initImage()");
         GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
         gc = ge.getDefaultScreenDevice().getDefaultConfiguration();
       }

File: java/src/processing/mode/java/JavaToolbar.java
Patch:
@@ -22,6 +22,7 @@
 
 import java.awt.event.ActionEvent;
 import java.awt.event.InputEvent;
+import java.awt.event.KeyEvent;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -77,7 +78,8 @@ public void actionPerformed(ActionEvent e) {
                                     Language.text("menu.debug.step_out")) {
         @Override
         public void actionPerformed(ActionEvent e) {
-          jeditor.handleStep(e.getModifiers());
+          final int mask = KeyEvent.SHIFT_DOWN_MASK | KeyEvent.ALT_DOWN_MASK;
+          jeditor.handleStep(e.getModifiers() & mask);
         }
       };
       outgoing.add(stepButton);

File: java/src/processing/mode/java/pdex/ErrorCheckerService.java
Patch:
@@ -52,6 +52,7 @@
 import processing.app.Base;
 import processing.app.Editor;
 import processing.app.EditorStatus;
+import processing.app.Language;
 import processing.app.Library;
 import processing.app.SketchCode;
 import processing.app.syntax.SyntaxDocument;
@@ -331,7 +332,7 @@ public void run() {
     lastErrorCheckCall = System.currentTimeMillis();
 
     if(!hasSyntaxErrors())
-      editor.showProblemListView(XQConsoleToggle.CONSOLE);
+      editor.showProblemListView(Language.text("editor.footer.console"));
     // Make sure astGen has at least one CU to start with
     // This is when the loaded sketch already has syntax errors.
     // Completion wouldn't be complete, but it'd be still something

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -44,7 +44,7 @@ public class PGraphicsOpenGL extends PGraphics {
   protected WeakHashMap<PFont, FontTexture> fontMap;
 
   // just to get things running properly, need to
-  protected PSurfaceJOGL surfaceJOGL;
+  static protected PSurfaceJOGL surfaceJOGL;
 
   // ........................................................
 

File: java/src/processing/mode/java/Debugger.java
Patch:
@@ -876,7 +876,7 @@ protected void updateVariableInspector(ThreadReference t) {
         // TODO: needs to be handled in a better way:
         log(Level.WARNING, "call stack empty");
       } else {
-        final DebugTray vi = editor.variableInspector();
+        final VariableInspector vi = editor.variableInspector();
         // first get data
         final List<DefaultMutableTreeNode> stackTrace = getStackTrace(t);
         final List<VariableNode> locals = getLocals(t, 0);

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -68,7 +68,7 @@ public class JavaEditor extends Editor {
   JCheckBoxMenuItem enableDebug;
 
   protected Debugger debugger;
-  protected DebugTray tray;
+  protected VariableInspector tray;
 
 //  private EditorToolbar javaToolbar;
 //  private DebugToolbar debugToolbar;
@@ -91,7 +91,7 @@ protected JavaEditor(Base base, String path, EditorState state, Mode mode) {
 
     jmode = (JavaMode) mode;
     debugger = new Debugger(this);
-    tray = new DebugTray(this);
+    tray = new VariableInspector(this);
 
     // Add show usage option
     JMenuItem showUsageItem = new JMenuItem("Show Usage...");
@@ -2042,7 +2042,7 @@ public void actionPerformed(ActionEvent e) {
    * Access variable inspector window.
    * @return the variable inspector object
    */
-  public DebugTray variableInspector() {
+  public VariableInspector variableInspector() {
     return tray;
   }
 

File: app/src/processing/app/Language.java
Patch:
@@ -61,7 +61,8 @@ private Language() {
     // Set available languages
     languages = new HashMap<String, String>();
     for (String code : listSupported()) {
-      languages.put(code, Locale.forLanguageTag(code).getDisplayLanguage(Locale.forLanguageTag(code)));
+      Locale locale = Locale.forLanguageTag(code);
+      languages.put(code, locale.getDisplayLanguage(locale));
     }
 
     // Set default language

File: core/src/processing/core/PSurfaceFX.java
Patch:
@@ -609,7 +609,7 @@ protected void fxMouseEvent(MouseEvent fxEvent) {
     }
 
     // If running on Mac OS, allow ctrl-click as right mouse.
-    // (Verified to be needed with Java 8u45 and JavaFX)
+    // Verified to be necessary with Java 8u45.
     if (PApplet.platform == PConstants.MACOSX &&
         fxEvent.isControlDown() &&
         button == PConstants.LEFT) {

File: core/src/processing/core/PGraphicsFX2D.java
Patch:
@@ -1085,7 +1085,7 @@ public void update(PImage source, boolean tint, int tintColor) {
         }
         // If no tint, just shove the pixels on in there verbatim
         //wr.setDataElements(0, 0, source.width, source.height, source.pixels);
-        System.out.println("moving the big one");
+        //System.out.println("moving the big one");
         pw.setPixels(0, 0, source.width, source.height,
                      argbFormat, source.pixels, 0, source.width);
       }

File: java/src/processing/mode/java/pdex/JavaTextAreaPainter.java
Patch:
@@ -104,7 +104,7 @@ public JavaTextAreaPainter(JavaTextArea textArea, TextAreaDefaults defaults) {
       public void mouseClicked(MouseEvent evt) {
         if (!getEditor().hasJavaTabs()) { // Ctrl + Click disabled for java tabs
           if (evt.getButton() == MouseEvent.BUTTON1) {
-            if (evt.isControlDown() || evt.isMetaDown()) {
+            if ((evt.isControlDown() && !Base.isMacOS()) || evt.isMetaDown()) {
               handleCtrlClick(evt);
             }
           }

File: java/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -203,6 +203,7 @@ public PdePreprocessor(final String sketchName, final int tabSize) {
 
   public String[] initSketchSize(String code, boolean sizeWarning) throws SketchException {
     String[] info = parseSketchSize(code, sizeWarning);
+    //PApplet.printArray(info);
     if (info != null) {
       sizeStatement = info[0];
       sketchWidth = info[1];
@@ -274,8 +275,8 @@ static public String[] parseSketchSize(String code, boolean fussy) {
       //String[] matches = split on commas, but not commas inside quotes
 
       StringList args = breakCommas(contents[1]);
-      String width = args.get(0);
-      String height = args.get(1);
+      String width = args.get(0).trim();
+      String height = args.get(1).trim();
       String renderer = (args.size() >= 3) ? args.get(2) : null;
       String path = (args.size() >= 4) ? args.get(3) : null;
 

File: core/src/processing/core/PConstants.java
Patch:
@@ -27,8 +27,6 @@
 import java.awt.Cursor;
 import java.awt.event.KeyEvent;
 
-import processing.data.StringList;
-
 
 /**
  * Numbers shared throughout processing.core.
@@ -48,6 +46,7 @@ public interface PConstants {
 
   // renderers known to processing.core
 
+  /*
   // List of renderers used inside PdePreprocessor
   static final StringList rendererList = new StringList(new String[] {
     "JAVA2D", "JAVA2D_2X",
@@ -56,6 +55,7 @@ public interface PConstants {
     "LWJGL.P2D", "LWJGL.P3D",  // hmm
     "PDF"  // no DXF because that's only for beginRaw()
   });
+  */
 
   static final String JAVA2D    = "processing.core.PGraphicsJava2D";
   static final String JAVA2D_2X = "processing.core.PGraphicsJava2D2X";

File: core/src/processing/core/PGraphics.java
Patch:
@@ -7125,7 +7125,9 @@ protected void backgroundFromCalc() {
     backgroundR = calcR;
     backgroundG = calcG;
     backgroundB = calcB;
-    backgroundA = (format == RGB) ? colorModeA : calcA;
+    //backgroundA = (format == RGB) ? colorModeA : calcA;
+    // If drawing surface is opaque, this maxes out at 1.0. [fry 150513]
+    backgroundA = (format == RGB) ? 1 : calcA;
     backgroundRi = calcRi;
     backgroundGi = calcGi;
     backgroundBi = calcBi;

File: app/src/processing/app/Editor.java
Patch:
@@ -2883,7 +2883,6 @@ public void statusNotice(String msg) {
       new IllegalArgumentException("This code called statusNotice(null)").printStackTrace();
       msg = "";
     }
-    new Exception("setting notice to " + msg).printStackTrace();
     status.notice(msg);
   }
 

File: app/src/processing/app/Editor.java
Patch:
@@ -508,9 +508,7 @@ public boolean importData(TransferHandler.TransferSupport support) {
                          "An error occurred while trying to add files to the sketch.", e);
         return false;
       }
-
       statusNotice(Language.pluralize("editor.status.drag_and_drop.files_added", successful));
-
       return true;
     }
   }
@@ -2885,6 +2883,7 @@ public void statusNotice(String msg) {
       new IllegalArgumentException("This code called statusNotice(null)").printStackTrace();
       msg = "";
     }
+    new Exception("setting notice to " + msg).printStackTrace();
     status.notice(msg);
   }
 

File: app/src/processing/app/Language.java
Patch:
@@ -194,6 +194,7 @@ static public String interpolate(String key, Object... arguments) {
     if (value == null) {
       return key;
     }
+//    System.out.println("  interp for " + key + " is " + String.format(value, arguments));
     return String.format(value, arguments);
   }
 

File: app/src/processing/app/Base.java
Patch:
@@ -1094,7 +1094,8 @@ protected void rebuildSketchbookMenus() {
       //mode.rebuildLibraryList();
       mode.rebuildImportMenu();  // calls rebuildLibraryList
       mode.rebuildToolbarMenu();
-      mode.resetExamples();
+      mode.rebuildExamplesFrame();
+      mode.rebuildSketchbookFrame();
     }
   }
 

File: app/src/processing/app/contrib/ContributionManager.java
Patch:
@@ -401,7 +401,7 @@ static public void refreshInstalled(Editor e) {
     while (iter.hasNext()) {
       Editor ed = iter.next();
       ed.getMode().rebuildImportMenu();
-      ed.getMode().resetExamples();
+      ed.getMode().rebuildExamplesFrame();
       ed.rebuildToolMenu();
       ed.rebuildModeMenu();
     }

File: app/src/processing/app/Editor.java
Patch:
@@ -2882,7 +2882,7 @@ public void statusError(Exception e) {
    */
   public void statusNotice(String msg) {
     if (msg == null) {
-      new Exception("This code called statusNotice(null)").printStackTrace();
+      new IllegalArgumentException("This code called statusNotice(null)").printStackTrace();
       msg = "";
     }
     status.notice(msg);

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -445,7 +445,7 @@ boolean hasUpdates(Base base) {
     for (Library l : base.getActiveEditor().getMode().contribLibraries)
       if (hasUpdates(l))
         return true;
-    for (ToolContribution t : base.getActiveEditor().contribTools)
+    for (ToolContribution t : base.getActiveEditor().getToolContribs())
       if (hasUpdates(t))
         return true;
     return false;

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -161,6 +161,9 @@ public void actionPerformed(ActionEvent arg0) {
 
         @Override
         public void actionPerformed(ActionEvent arg0) {
+          // The message is set to null so that every time the retry button is hit
+          // no previous error is displayed in the status
+          status.setMessage(null);
           downloadAndUpdateContributionListing();
         }
       });

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -161,6 +161,9 @@ public void actionPerformed(ActionEvent arg0) {
 
         @Override
         public void actionPerformed(ActionEvent arg0) {
+          // The message is set to null so that every time the retry button is hit
+          // no previous error is displayed in the status
+          status.setMessage(null);
           downloadAndUpdateContributionListing();
         }
       });

File: app/src/processing/app/PreferencesFrame.java
Patch:
@@ -504,7 +504,6 @@ public void actionPerformed(ActionEvent e) {
                   .addComponent(cancelButton))
       .addGap(BORDER)
       );
-    dialog.getRootPane().setDefaultButton(okButton);
 
     if (Base.isWindows()){
       autoAssociateBox.setVisible(true);

File: core/src/processing/core/PSurface.java
Patch:
@@ -97,6 +97,7 @@ public Frame initFrame(PApplet sketch, Color backgroundColor,
   //public void initImage(PGraphics gr, int wide, int high);
   // create pixel buffer, called from allocate() to produce a compatible image for rendering efficiently
 //  public void initImage(PGraphics gr);
+
   public Component getComponent();
 
   /**

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -8863,9 +8863,6 @@ int[] addSphere(float r, int detailU, int detailV,
         indices[indCount + 1] = vert1 - detailU;
         indices[indCount + 2] = vert1 - 1;
         indCount += 3;
-
-        addEdge(vert1 - detailU, vert1 - 1, true, true);
-        addEdge(vert1 - 1, vert1, true, true);
       }
 
       // Northern cap -------------------------------------------------------

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -8863,9 +8863,6 @@ int[] addSphere(float r, int detailU, int detailV,
         indices[indCount + 1] = vert1 - detailU;
         indices[indCount + 2] = vert1 - 1;
         indCount += 3;
-
-        addEdge(vert1 - detailU, vert1 - 1, true, true);
-        addEdge(vert1 - 1, vert1, true, true);
       }
 
       // Northern cap -------------------------------------------------------

File: core/src/processing/core/PApplet.java
Patch:
@@ -5488,7 +5488,7 @@ public boolean saveTable(Table table, String filename, String options) {
   */
   public PFont loadFont(String filename) {
     if (!filename.toLowerCase().endsWith(".vlw")) {
-      throw new IllegalArgumentException("loadFont() only works with .vlw font files");
+      throw new IllegalArgumentException("loadFont() is for .vlw files, try createFont()");
     }
     try {
       InputStream input = createInput(filename);

File: java/src/processing/mode/java/JavaEditor.java
Patch:
@@ -733,6 +733,8 @@ public void paintComponent(Graphics g) {
       platformName = "Linux (" + Base.getNativeBits() + "-bit)";
     }
 
+    final String javaPlatform =
+      PApplet.split(System.getProperty("java.version"), '.')[1];
     boolean embed = Preferences.getBoolean("export.application.embed_java");
     final String embedWarning =
       "<html><div width=\"" + divWidth + "\"><font size=\"2\">" +
@@ -744,7 +746,7 @@ public void paintComponent(Graphics g) {
       "<html><div width=\"" + divWidth + "\"><font size=\"2\">" +
 //      "<html><body><font size=2>" +
       "Users on all platforms will have to install the latest " +
-      "version of Java " + ((int) PApplet.version) +
+      "version of Java " + javaPlatform +
       " from <a href=\"\">http://java.com/download</a>. " +
       "<br/>&nbsp;";
       //"from <a href=\"http://java.com/download\">java.com/download</a>.";

File: core/src/processing/core/PApplet.java
Patch:
@@ -197,6 +197,7 @@ public class PApplet implements PConstants {
   /**
    * Path to sketch folder. Previously undocumented, made private in 3.0a5
    * so that people use the sketchPath() method and it's inited properly.
+   * Call sketchPath() once to set the default.
    */
   private String sketchPath;
 //  public String sketchPath;

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -563,7 +563,7 @@ public boolean scrollTo(int line, int offset) {
     int width = painter.getFontMetrics().charWidth('w');
 
     if(x < 0) {
-      newHorizontalOffset = Math.min(0,horizontalOffset - x + width + 5);
+      newHorizontalOffset = Math.max(0,horizontalOffset - x + width + 5);
     } else if(x + width >= painter.getWidth()) {
       newHorizontalOffset = horizontalOffset +
       (painter.getWidth() - x) - width - 5;

File: app/src/processing/app/Mode.java
Patch:
@@ -1152,7 +1152,7 @@ public ImageIcon loadIcon(String filename) {
     }
     File file = new File(folder, filename);
     if (!file.exists()) {
-      EditorConsole.systemErr.println("file does not exist: " + file.getAbsolutePath());
+//      EditorConsole.systemErr.println("file does not exist: " + file.getAbsolutePath());
       return null;
     }
 //    EditorConsole.systemErr.println("found: " + file.getAbsolutePath());

File: app/src/processing/app/Mode.java
Patch:
@@ -1152,7 +1152,7 @@ public ImageIcon loadIcon(String filename) {
     }
     File file = new File(folder, filename);
     if (!file.exists()) {
-//      EditorConsole.systemErr.println("file does not exist: " + file.getAbsolutePath());
+      EditorConsole.systemErr.println("file does not exist: " + file.getAbsolutePath());
       return null;
     }
 //    EditorConsole.systemErr.println("found: " + file.getAbsolutePath());

File: java/src/processing/mode/java/pdex/CompilationChecker.java
Patch:
@@ -374,7 +374,7 @@ private void compileMeQuitely(ICompilationUnit unit, Map<String, String> compile
     prob = new IProblem[problems.size()];
     int count = 0;
     for (Iterator<IProblem> it = problems.iterator(); it.hasNext();) {
-      IProblem problem = (IProblem) it.next();
+      IProblem problem = it.next();
       prob[count++] = problem;
     }
   }

File: java/src/processing/mode/java/pdex/JavadocHelper.java
Patch:
@@ -66,7 +66,7 @@ public boolean accept(File file) {
         String methodName = docFile.getName().substring(0, docFile.getName().indexOf('_'));
         //System.out.println(methodName);
         for (Iterator<Element> it = elm.iterator(); it.hasNext();) {
-          Element ele = (Element) it.next();
+          Element ele = it.next();
           msg = "<html><body> <strong><div style=\"width: 300px; text-justification: justify;\"></strong><table cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"ref-item\">"
               + ele.html() + "</table></div></html></body></html>";          
           //mat.replaceAll("");

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -123,7 +123,9 @@ protected void replaceContribution(Contribution oldLib, Contribution newLib) {
 
       if (oldLib.getImports() != null) {
         for (String importName : oldLib.getImports()) {
-          librariesByImportHeader.replace(importName, newLib);
+          if (librariesByImportHeader.containsKey(importName)) {
+            librariesByImportHeader.put(importName, newLib);
+          }
         }
       }
 

File: app/src/processing/app/ProgressFrame.java
Patch:
@@ -90,7 +90,7 @@ public void done() {
       // to close the progress bar automatically when done, and to 
       // print that Saving is done in Message Area
 
-      editor.statusNotice("Done Saving.");
+      editor.statusNotice(Language.text("editor.status.saving.done"));
       ProgressFrame.this.closeProgressBar();
     }
 

File: app/src/processing/app/Base.java
Patch:
@@ -2061,8 +2061,9 @@ static private void showBadnessTrace(String title, String message,
                                     JOptionPane.ERROR_MESSAGE :
                                     JOptionPane.WARNING_MESSAGE);
 
-      if (fatal)
+      if (fatal) {
         System.exit(1);
+      }
     }
   }
 

File: app/src/processing/app/Base.java
Patch:
@@ -2060,6 +2060,9 @@ static private void showBadnessTrace(String title, String message,
                                     fatal ?
                                     JOptionPane.ERROR_MESSAGE :
                                     JOptionPane.WARNING_MESSAGE);
+
+      if (fatal)
+        System.exit(1);
     }
   }
 

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -7014,6 +7014,7 @@ static protected class AttributeMap extends HashMap<String, VertexAttribute> {
     @Override
     public VertexAttribute put(String key, VertexAttribute value) {
       VertexAttribute prev = super.put(key, value);
+      names.add(key);
       if (value.kind == VertexAttribute.COLOR) numComp += 4;
       else numComp += value.size;
       return prev;
@@ -10026,7 +10027,7 @@ void addPolyVertex(double[] d, boolean clampXY) {
                      (float) d[24],
                      clampXY);
 
-       if (25 <= d.length) {
+       if (25 < d.length) {
          PMatrix3D mm = pg.modelview;
          PMatrix3D nm = pg.modelviewInv;
          int tessIdx = polyVertexCount - 1;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -7700,7 +7700,7 @@ public final float brightness(int rgb) {
    * @see PGraphics#color(float, float, float, float)
    * @see PApplet#lerp(float, float, float)
    */
-  public int lerpColor(int c1, int c2, float amt) {
+  public int lerpColor(int c1, int c2, float amt) {  // ignore
     return lerpColor(c1, c2, amt, colorMode);
   }
 

File: app/src/processing/app/Editor.java
Patch:
@@ -1413,7 +1413,6 @@ public CutAction() {
     }
     
     public void actionPerformed(ActionEvent e) {
-      System.out.println(e.getActionCommand());
       handleCut();
     }
     

File: core/src/processing/opengl/PGL.java
Patch:
@@ -402,7 +402,7 @@ protected int getDrawFramebuffer()  {
 
 
   protected int getDefaultDrawBuffer()  {
-    return fboLayerInUse ? COLOR_ATTACHMENT0 : FRONT;
+    return fboLayerInUse ? COLOR_ATTACHMENT0 : BACK;
   }
 
 

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -411,6 +411,7 @@ public String preprocess(File srcFolder,
     if (core != null) {
       importedLibraries.add(core);
       classPath += core.getClassPath();
+      javaLibraryPath += File.pathSeparator + core.getNativePath();
     }
 
 //    System.out.println("extra imports: " + result.extraImports);

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -1247,7 +1247,7 @@ public void select(int start, int end)
       newBias = true;
     }
 
-    if(newStart < 0 || newEnd > getDocumentLength())
+    if((newStart < 0 || newEnd > getDocumentLength()) && start != end)
     {
       throw new IllegalArgumentException("Bounds out of"
           + " range: " + newStart + "," +

File: java/libraries/jogl/src/processing/jogl/PSurfaceJOGL.java
Patch:
@@ -36,6 +36,7 @@
 import processing.core.PSurface;
 import processing.event.KeyEvent;
 import processing.event.MouseEvent;
+import processing.opengl.PGraphicsOpenGL;
 import processing.opengl.PGL;
 
 public class PSurfaceJOGL implements PSurface {
@@ -61,7 +62,7 @@ public class PSurfaceJOGL implements PSurface {
 
   public PSurfaceJOGL(PGraphics graphics) {
     this.graphics = graphics;
-    this.pgl = (PJOGL) ((PGraphicsJOGL)graphics).pgl;
+    this.pgl = (PJOGL) ((PGraphicsOpenGL)graphics).pgl;
   }
 
   public void initOffscreen() {

File: java/src/processing/mode/java/pdex/ErrorMessageSimplifier.java
Patch:
@@ -147,7 +147,7 @@ else if (args[0].equalsIgnoreCase(") Statement")){
         }
         else {
           if(args[1].equalsIgnoreCase("Statement")){ // See #3104
-            result = "Error on \"" + args[0];
+            result = "Error on \"" + args[0] + "\"";
           }
           else {
             result = "Error on \"" + args[0] + "\"Consider adding a \"" + args[1] + "\"";

File: java/src/processing/mode/java/pdex/ErrorMessageSimplifier.java
Patch:
@@ -147,7 +147,7 @@ else if (args[0].equalsIgnoreCase(") Statement")){
         }
         else {
           if(args[1].equalsIgnoreCase("Statement")){ // See #3104
-            result = "Error on \"" + args[0] + "\", statement expected after this.";
+            result = "Error on \"" + args[0];
           }
           else {
             result = "Error on \"" + args[0] + "\"Consider adding a \"" + args[1] + "\"";

File: app/src/processing/app/Sketch.java
Patch:
@@ -1210,9 +1210,9 @@ public void setCurrentCode(int which) {
     current = code[which];
     currentIndex = which;
     current.visited = System.currentTimeMillis();
-      editor.setCode(current);
-//      editor.header.rebuild();
-      editor.header.repaint();
+    editor.setCode(current);
+//    editor.header.rebuild();
+    editor.header.repaint();
   }
 
 

File: app/src/processing/app/ChangeDetector.java
Patch:
@@ -14,8 +14,7 @@ public class ChangeDetector implements WindowFocusListener {
   private Editor editor;
 
 //  private boolean enabled = true;
-  //REMOVE on for testing
-  private boolean enabled = true; // broken on OS X
+  private boolean enabled = true; // broken on OS X (possibly fixed? tested and it seems to work)
 
   private boolean skip = false;
 

File: app/src/processing/app/Sketch.java
Patch:
@@ -1210,12 +1210,13 @@ public void setCurrentCode(int which) {
     current = code[which];
     currentIndex = which;
     current.visited = System.currentTimeMillis();
+    //REMOVE 
     try {
       editor.setCode(current);
 //    editor.header.rebuild();
       editor.header.repaint();
     } catch (NullPointerException e) {
-      e.printStackTrace();
+      //e.printStackTrace();
     }
   }
 

File: app/src/processing/app/SketchCode.java
Patch:
@@ -296,6 +296,7 @@ public void load() throws IOException {
       System.err.println();
     }
 
+    lastModified = file.lastModified();
     setModified(false);
   }
 

File: app/src/processing/app/Toolkit.java
Patch:
@@ -414,6 +414,7 @@ static public Image getLibImage(String filename) {
   static public ImageIcon getLibIcon(String filename) {
     File file = Base.getContentFile("lib/" + filename);
     if (!file.exists()) {
+      System.err.println("does not exist: " + file);
       return null;
     }
     return new ImageIcon(file.getAbsolutePath());

File: app/src/processing/app/Base.java
Patch:
@@ -2060,6 +2060,9 @@ static private void showBadnessTrace(String title, String message,
                                     fatal ?
                                     JOptionPane.ERROR_MESSAGE :
                                     JOptionPane.WARNING_MESSAGE);
+
+      if (fatal)
+        System.exit(1);
     }
   }
 

File: app/src/processing/app/EditorToolbar.java
Patch:
@@ -32,7 +32,7 @@
 
 
 /**
- * run/stop/etc buttons for the ide
+ * Run/Stop button plus Mode selection
  */
 public abstract class EditorToolbar extends JComponent implements MouseInputListener, KeyListener {
 

File: java/src/processing/mode/java/pdex/ASTGenerator.java
Patch:
@@ -429,7 +429,7 @@ protected void loadJavaDoc() {
 
       @Override
       public void run() {
-        JavadocHelper.loadJavaDoc(jdocMap, editor.mode().getReferenceFolder());
+        JavadocHelper.loadJavaDoc(jdocMap, editor.getMode().getReferenceFolder());
       }
     });
     t.start();

File: java/src/processing/mode/java/debug/LineBreakpoint.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.logging.Logger;
 
 import processing.app.Base;
+import processing.mode.java.Debugger;
 
 import com.sun.jdi.AbsentInformationException;
 import com.sun.jdi.Location;

File: java/src/processing/mode/java/pdex/CompletionPanel.java
Patch:
@@ -51,7 +51,7 @@
 
 import processing.app.Base;
 import processing.app.syntax.JEditTextArea;
-import processing.mode.java.debug.DebugEditor;
+import processing.mode.java.JavaEditor;
 
 
 /**
@@ -87,7 +87,7 @@ public class CompletionPanel {
    */
   private JScrollPane scrollPane;
   
-  protected DebugEditor editor;
+  protected JavaEditor editor;
   
   public static final int MOUSE_COMPLETION = 10, KEYBOARD_COMPLETION = 20;
 
@@ -101,7 +101,7 @@ public class CompletionPanel {
    * @param dedit
    */
   public CompletionPanel(final JEditTextArea textarea, int position, String subWord,
-                         DefaultListModel<CompletionCandidate> items, final Point location, DebugEditor dedit) {
+                         DefaultListModel<CompletionCandidate> items, final Point location, JavaEditor dedit) {
     this.textarea = (JavaTextArea) textarea;
     editor = dedit;
     this.insertionPosition = position;

File: java/src/processing/mode/java/pdex/ErrorWindow.java
Patch:
@@ -37,7 +37,7 @@
 
 import processing.app.Editor;
 import processing.app.Toolkit;
-import processing.mode.java.debug.DebugEditor;
+import processing.mode.java.JavaEditor;
 
 /**
  * Error Window that displays a tablular list of errors. Clicking on an error
@@ -58,7 +58,7 @@ public class ErrorWindow extends JFrame {
 	 */
 	protected JScrollPane scrollPane;
 
-	protected DebugEditor thisEditor;
+	protected JavaEditor thisEditor;
 	private JFrame thisErrorWindow;
 	
 	/**
@@ -75,7 +75,7 @@ public class ErrorWindow extends JFrame {
 	 *            - Editor
 	 * @param ecs - ErrorCheckerService
 	 */
-	public ErrorWindow(DebugEditor editor, ErrorCheckerService ecs) {
+	public ErrorWindow(JavaEditor editor, ErrorCheckerService ecs) {
 		thisErrorWindow = this;
 		errorCheckerService = ecs;
 		thisEditor = editor;

File: java/src/processing/mode/java/pdex/JavaTextAreaPainter.java
Patch:
@@ -21,7 +21,7 @@
 package processing.mode.java.pdex;
 
 import processing.mode.java.JavaMode;
-import processing.mode.java.debug.DebugEditor;
+import processing.mode.java.JavaEditor;
 import processing.mode.java.tweak.*;
 
 import java.awt.Color;
@@ -845,7 +845,7 @@ public void mouseEntered(MouseEvent e) {
 	// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 	
 	
-	private DebugEditor getEditor() {
+	private JavaEditor getEditor() {
 	  return ((JavaTextArea) textArea).editor;
 	}
 	

File: java/src/processing/mode/java/pdex/SketchOutline.java
Patch:
@@ -55,7 +55,7 @@
 import org.eclipse.jdt.core.dom.TypeDeclaration;
 import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
 
-import processing.mode.java.debug.DebugEditor;
+import processing.mode.java.JavaEditor;
 
 
 public class SketchOutline {
@@ -65,7 +65,7 @@ public class SketchOutline {
   protected DefaultMutableTreeNode soNode, tempNode;
   protected final JTree soTree;
   protected JTextField searchField;
-  protected DebugEditor editor;
+  protected JavaEditor editor;
   protected boolean internalSelection = false;
 
   

File: java/src/processing/mode/java/pdex/XQConsoleToggle.java
Patch:
@@ -31,7 +31,7 @@
 import javax.swing.JPanel;
 
 import processing.app.Language;
-import processing.mode.java.debug.DebugEditor;
+import processing.mode.java.JavaEditor;
 
 /**
  * Toggle Button displayed in the editor line status panel for toggling bewtween
@@ -51,10 +51,10 @@ public class XQConsoleToggle extends JPanel implements MouseListener {
 	 * Height of the component
 	 */
 	protected int height;
-	protected DebugEditor editor;
+	protected JavaEditor editor;
 	protected String buttonName;
 
-	public XQConsoleToggle(DebugEditor editor, String buttonName, int height) {
+	public XQConsoleToggle(JavaEditor editor, String buttonName, int height) {
 		this.editor = editor;
 		this.height = height;
 		this.buttonName = buttonName;

File: java/src/processing/mode/java/pdex/XQErrorTable.java
Patch:
@@ -33,7 +33,7 @@
 
 import processing.app.Base;
 import processing.app.Language;
-import processing.mode.java.debug.DebugEditor;
+import processing.mode.java.JavaEditor;
 
 
 /**
@@ -219,7 +219,7 @@ private void showImportSuggestion(String list[], int x, int y){
     frmImportSuggest.getContentPane().add(panel);
     frmImportSuggest.pack();
     
-    final DebugEditor editor = errorCheckerService.getEditor();
+    final JavaEditor editor = errorCheckerService.getEditor();
     classList.addListSelectionListener(new ListSelectionListener() {
       public void valueChanged(ListSelectionEvent e) {
         if (classList.getSelectedValue() != null) {

File: app/src/processing/app/Base.java
Patch:
@@ -275,12 +275,14 @@ public static void initRequirements() {
   */
 
 
+  // TODO should this be public to suggest override for Arduino and others?
   private String getDefaultModeIdentifier() {
     //return "processing.mode.java.pdex.ExperimentalMode";
     return "processing.mode.java.JavaMode";
   }
 
 
+  // TODO same as above... make public?
   private void buildCoreModes() {
     Mode javaMode =
       ModeContribution.load(this, getContentFile("modes/java"), //$NON-NLS-1$

File: app/src/processing/app/Base.java
Patch:
@@ -276,8 +276,8 @@ public static void initRequirements() {
 
 
   private String getDefaultModeIdentifier() {
-    return "processing.mode.java.pdex.ExperimentalMode";
-    //return "processing.mode.java.JavaMode";
+    //return "processing.mode.java.pdex.ExperimentalMode";
+    return "processing.mode.java.JavaMode";
   }
 
 

File: app/src/processing/app/contrib/ModeContribution.java
Patch:
@@ -77,6 +77,7 @@ private ModeContribution(Base base, File folder,
     className = initLoader(className);
     if (className != null) {
       Class<?> modeClass = loader.loadClass(className);
+      Base.log("Got mode class " + modeClass);
       Constructor con = modeClass.getConstructor(Base.class, File.class);
       mode = (Mode) con.newInstance(base, folder);
       mode.setClassLoader(loader);

File: java/src/processing/mode/java/Commander.java
Patch:
@@ -73,7 +73,7 @@ static public void main(String[] args) {
     // init the platform so that prefs and other native code is ready to go
     Base.initPlatform();
     // make sure a full JDK is installed
-    Base.initRequirements();
+    //Base.initRequirements();
 
     // launch command line handler
     new Commander(args);

File: java/src/processing/mode/java/JavaMode.java
Patch:
@@ -62,8 +62,8 @@ public String getTitle() {
 
 //  public Editor createEditor(Base ibase, String path, int[] location) {
 //  }
-
-
+  
+  
   // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 
 

File: java/src/processing/mode/java/JavaBuild.java
Patch:
@@ -1831,6 +1831,8 @@ protected void packClassPathIntoZipFile(String path,
               zos.closeEntry();
             }
           }
+          file.close();
+          
         } catch (IOException e) {
           System.err.println("Error in file " + pieces[i]);
           e.printStackTrace();

File: app/src/processing/app/Base.java
Patch:
@@ -1154,7 +1154,9 @@ public JMenu getToolbarRecentMenu() {
   public void handleRecent(Editor editor) {
     recent.handle(editor);
   }
-
+  public void handleRecentRename(Editor editor,String oldPath){
+    recent.handleRename(editor,oldPath);
+  }
 
   /**
    * Called before a sketch is renamed so that its old name is

File: app/src/processing/app/Sketch.java
Patch:
@@ -549,7 +549,7 @@ protected void nameCode(String newName) {
         for (int i = 1; i < codeCount; i++) {
           code[i].setFolder(newFolder);
         }
-        // Update internal state to reflect the new location
+       // Update internal state to reflect the new location
         updateInternal(sanitaryName, newFolder);
 
 //        File newMainFile = new File(newFolder, newName + ".pde");
@@ -985,8 +985,7 @@ public void run() {
    */
   protected void updateInternal(String sketchName, File sketchFolder) {
     // reset all the state information for the sketch object
-
-//  String oldPath = getMainFilePath();
+    String oldPath = getMainFilePath();    
     primaryFile = code[0].getFile();
 //    String newPath = getMainFilePath();
 //    editor.base.renameRecent(oldPath, newPath);
@@ -1005,6 +1004,7 @@ protected void updateInternal(String sketchName, File sketchFolder) {
 //    System.out.println("modified is now " + modified);
     editor.updateTitle();
     editor.base.rebuildSketchbookMenus();
+    editor.base.handleRecentRename(editor,oldPath);
 //    editor.header.rebuild();
   }
 

File: app/src/processing/app/EditorHeader.java
Patch:
@@ -516,7 +516,6 @@ public void actionPerformed(ActionEvent e) {
       @Override
       public void actionPerformed(ActionEvent e) {
         editor.getSketch().handleNewCode();
-        editor.setWatcherSave();
       }
     };
     mapKey = "editor.header.new_tab";
@@ -554,7 +553,6 @@ public void actionPerformed(ActionEvent e) {
                              Language.text("editor.header.delete.warning.text"), null);
         } else {
           editor.getSketch().handleDeleteCode();
-          editor.setWatcherSave();
         }
       }
     };

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -647,7 +647,7 @@ protected void getGL(PGL pgl) {
     this.drawable = pjogl.drawable;
     this.context = pjogl.context;
     this.glContext = pjogl.glContext;
-    this.glThread = pjogl.glThread;
+    setThread(pjogl.glThread);
 
     this.gl = pjogl.gl;
     this.gl2 = pjogl.gl2;
@@ -659,7 +659,7 @@ protected void getGL(PGL pgl) {
   protected void getGL(GLAutoDrawable glDrawable) {
     context = glDrawable.getContext();
     glContext = context.hashCode();
-    glThread = Thread.currentThread();
+    setThread(Thread.currentThread());
 
     gl = context.getGL();
     gl2 = gl.getGL2ES2();

File: core/src/processing/opengl/PSurfaceNEWT.java
Patch:
@@ -467,9 +467,9 @@ public void display(GLAutoDrawable drawable) {
     public void dispose(GLAutoDrawable drawable) {
       pgl.getGL(drawable);
       sketch.dispose();
-//      if (sketch.exitCalled) {
-//        sketch.exitActual();
-//      }
+      if (sketch.exitCalled()) {
+        sketch.exitActual();
+      }
     }
     public void init(GLAutoDrawable drawable) {
       pgl.init(drawable);

File: app/src/processing/app/EditorHeader.java
Patch:
@@ -520,7 +520,7 @@ public void actionPerformed(ActionEvent e) {
       }
     };
     mapKey = "editor.header.new_tab";
-    keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_N, Toolkit.SHORTCUT_ALT_KEY_MASK);
+    keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_N, Toolkit.SHORTCUT_SHIFT_KEY_MASK);
     mInputMap.put(keyStroke, mapKey);
     mActionMap.put(mapKey, action);
     item.addActionListener(action);

File: app/src/processing/mode/java/JavaEditor.java
Patch:
@@ -55,7 +55,7 @@ public Formatter createFormatter() {
   public JMenu buildFileMenu() {
     //String appTitle = JavaToolbar.getTitle(JavaToolbar.EXPORT, false);
     String appTitle = Language.text("toolbar.export_application");
-    JMenuItem exportApplication = Toolkit.newJMenuItem(appTitle, 'E');
+    JMenuItem exportApplication = Toolkit.newJMenuItemShift(appTitle, 'E');
     exportApplication.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {
         handleExportApplication();

File: core/src/processing/core/PApplet.java
Patch:
@@ -9482,7 +9482,7 @@ protected PSurface initSurface(Color backgroundColor, int displayIndex,
         //System.out.println("interrupt");
       }
     }
-    System.out.println("out of default size loop, " + width + " " + height);
+//    System.out.println("out of default size loop, " + width + " " + height);
     // convenience to avoid another 'get' from the static main() method
     return surface;
   }

File: core/src/processing/core/PSurfaceAWT.java
Patch:
@@ -803,13 +803,13 @@ protected void checkPause() {
       synchronized (pauseObject) {
         try {
           pauseObject.wait();
-          PApplet.debug("out of wait");
+//          PApplet.debug("out of wait");
         } catch (InterruptedException e) {
           // waiting for this interrupt on a start() (resume) call
         }
       }
     }
-    PApplet.debug("done with pause");
+//    PApplet.debug("done with pause");
   }
 
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -5442,6 +5442,9 @@ public boolean saveTable(Table table, String filename, String options) {
   * @see PApplet#createFont(String, float, boolean, char[])
   */
   public PFont loadFont(String filename) {
+    if (!filename.toLowerCase().endsWith(".vlw")) {
+      throw new IllegalArgumentException("loadFont() only works with .vlw font files");
+    }
     try {
       InputStream input = createInput(filename);
       return new PFont(input);

File: app/src/processing/app/Toolkit.java
Patch:
@@ -193,7 +193,7 @@ public static void setMenuMnemonics(JMenuItem... menu) {
       "&forward", "&gotopage", "&bookmarks", "&addbookmark", "bookmark&tabsasfolder", 
       "&editbookmarks", "&newbookmarksfolder", "&tools", "&settings", "&toolbars",
       "configure&shortcuts", "configuretool&bars", "&configure*", "&help", ".+&handbook", 
-      "&whatsthis", "report&bug", "&aboutprocessing", "about&kde" };
+      "&whatsthis", "report&bug", "&aboutprocessing", "about&kde", "&beenden" };
     Pattern[] kdePreDefPats = new Pattern[kdePreDefStrs.length];
     for (int i = 0; i < kdePreDefStrs.length; i++)
       kdePreDefPats[i] = Pattern.compile(kdePreDefStrs[i].replace("&",""));

File: app/src/processing/app/ColorChooser.java
Patch:
@@ -70,7 +70,7 @@ public class ColorChooser {  //extends JFrame implements DocumentListener {
   public ColorChooser(Frame owner, boolean modal, Color initialColor,
                       String buttonName, ActionListener buttonListener) {
     //super("Color Selector");
-    window = new JDialog(owner, "Color Selector", modal);
+    window = new JDialog(owner, Language.text("color_chooser"), modal);
     window.getContentPane().setLayout(new BorderLayout());
 
     Box box = Box.createHorizontalBox();
@@ -639,7 +639,7 @@ public void keyPressed() {
   /**
    * Extension of JTextField that only allows numbers
    */
-  class NumberField extends JTextField {
+  static class NumberField extends JTextField {
 
     public boolean allowHex;
 
@@ -672,7 +672,7 @@ public Dimension getMaximumSize() {
   /**
    * Document model to go with JTextField that only allows numbers.
    */
-  class NumberDocument extends PlainDocument {
+  static class NumberDocument extends PlainDocument {
 
     NumberField parentField;
 

File: app/src/processing/app/Library.java
Patch:
@@ -498,7 +498,7 @@ static protected void list(File folder, ArrayList<Library> libraries) {
       for (String subfolderName : list) {
         File subfolder = new File(folder, subfolderName);
 
-        if (!libraries.contains(subfolder)) {
+        if (!librariesFolders.contains(subfolder)) {
           ArrayList<File> discoveredLibFolders = new ArrayList<File>();
           discover(subfolder, discoveredLibFolders);
 

File: app/src/processing/app/Platform.java
Patch:
@@ -74,6 +74,7 @@ public void setLookAndFeel() throws Exception {
     }
   }
 
+  public void saveLanguage(String languageCode) {}
 
   public void init(Base base) {
     this.base = base;
@@ -216,4 +217,4 @@ protected void showLauncherWarning() {
                      null);
   }
   */
-}
\ No newline at end of file
+}

File: app/src/processing/app/Recent.java
Patch:
@@ -310,7 +310,7 @@ int findRecord(String path) {
 //  }
 
 
-  class Record {
+  static class Record {
     String path;  // if not loaded, this is non-null
 //    EditorState state;  // if not loaded, this is non-null
 
@@ -376,4 +376,4 @@ String getPath() {
 //      return getPath().equals(r.getPath());
 //    }
   }
-}
\ No newline at end of file
+}

File: app/src/processing/app/syntax/im/CompositionTextManager.java
Patch:
@@ -94,7 +94,7 @@ public void processCompositionText(AttributedCharacterIterator text, int committ
     CompositionTextPainter compositionPainter = textArea.getPainter().getCompositionTextpainter();
     compositionPainter.setComposedTextLayout(getTextLayout(text, committed_count), layoutCaretPosition);
     int textLength = text.getEndIndex() - text.getBeginIndex() - committed_count;
-    StringBuffer unCommitedStringBuf = new StringBuffer(textLength);
+    StringBuilder unCommitedStringBuf = new StringBuilder(textLength);
     char c;
     for (c = text.setIndex(committed_count); c != CharacterIterator.DONE
         && textLength > 0; c = text.next(), --textLength) {

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -234,7 +234,7 @@ public String preprocess(File srcFolder,
     // 1. concatenate all .pde files to the 'main' pde
     //    store line number for starting point of each code bit
 
-    StringBuffer bigCode = new StringBuffer();
+    StringBuilder bigCode = new StringBuilder();
     int bigCount = 0;
     for (SketchCode sc : sketch.getCode()) {
       if (sc.isExtension("pde")) {
@@ -1417,7 +1417,7 @@ protected boolean exportApplication(File destFolder,
 
     String jarList[] = new String[jarListVector.size()];
     jarListVector.copyInto(jarList);
-    StringBuffer exportClassPath = new StringBuffer();
+    StringBuilder exportClassPath = new StringBuilder();
 
     if (exportPlatform == PConstants.MACOSX) {
       for (int i = 0; i < jarList.length; i++) {
@@ -1474,7 +1474,7 @@ protected boolean exportApplication(File destFolder,
       String lines[] = PApplet.loadStrings(plistTemplate);
       for (int i = 0; i < lines.length; i++) {
         if (lines[i].indexOf("@@") != -1) {
-          StringBuffer sb = new StringBuffer(lines[i]);
+          StringBuilder sb = new StringBuilder(lines[i]);
           int index = 0;
           while ((index = sb.indexOf("@@jvm_runtime@@")) != -1) {
             sb.replace(index, index + "@@jvm_runtime@@".length(),

File: app/src/processing/mode/java/PdeKeyListener.java
Patch:
@@ -80,6 +80,7 @@ public boolean keyPressed(KeyEvent event) {
 
     Sketch sketch = editor.getSketch();
 
+    /*
     if ((event.getModifiers() & CTRL_ALT) == CTRL_ALT) {
       if (code == KeyEvent.VK_LEFT) {
         sketch.handlePrevCode();
@@ -89,6 +90,7 @@ public boolean keyPressed(KeyEvent event) {
         return true;
       }
     }
+    */
 
     if ((event.getModifiers() & InputEvent.META_MASK) != 0) {
       //event.consume();  // does nothing

File: app/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -167,7 +167,7 @@ public static enum Mode {
    * and pasting from the reference.
    */
   public static final String SIZE_REGEX =
-    "(?:^|\\s|;)size\\s*\\(\\s*([^\\s,]+)\\s*,\\s*([^\\s,\\)]+),?\\s*([^\\)]*)\\s*\\)\\s*\\;";
+    "(?:^|\\s|;)size\\s*\\(\\s*([^\\s,]+)\\s*,\\s*([^\\s,\\)]+)\\s*,?\\s*([^\\)]*)\\s*\\)\\s*\\;";
     //"(?:^|\\s|;)size\\s*\\(\\s*(\\S+)\\s*,\\s*([^\\s,\\)]+),?\\s*([^\\)]*)\\s*\\)\\s*\\;";
 
   

File: core/methods/demo/PApplet.java
Patch:
@@ -5740,7 +5740,7 @@ static public String join(String str[], char separator) {
    *      // list is now "apple, bear, cat"</PRE>
    */
   static public String join(String str[], String separator) {
-    StringBuffer buffer = new StringBuffer();
+    StringBuilder buffer = new StringBuilder();
     for (int i = 0; i < str.length; i++) {
       if (i != 0) buffer.append(separator);
       buffer.append(str[i]);
@@ -5959,7 +5959,7 @@ static final public boolean parseBoolean(float what) {
    * @return true if 'what' is "true" or "TRUE", false otherwise
    */
   static final public boolean parseBoolean(String what) {
-    return new Boolean(what).booleanValue();
+    return Boolean.parseBoolean(what);
   }
 
   // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
@@ -6017,7 +6017,7 @@ static final public boolean[] parseBoolean(float what[]) {
   static final public boolean[] parseBoolean(String what[]) {
     boolean outgoing[] = new boolean[what.length];
     for (int i = 0; i < what.length; i++) {
-      outgoing[i] = new Boolean(what[i]).booleanValue();
+      outgoing[i] = Boolean.parseBoolean(what[i]);
     }
     return outgoing;
   }

File: core/src/processing/opengl/PGL.java
Patch:
@@ -800,7 +800,6 @@ protected boolean contextIsCurrent(int other) {
 
 
   protected void enableTexturing(int target) {
-    enable(target);
     if (target == TEXTURE_2D) {
       texturingTargets[0] = true;
     } else if (target == TEXTURE_RECTANGLE) {
@@ -810,7 +809,6 @@ protected void enableTexturing(int target) {
 
 
   protected void disableTexturing(int target) {
-    disable(target);
     if (target == TEXTURE_2D) {
       texturingTargets[0] = false;
     } else if (target == TEXTURE_RECTANGLE) {

File: core/src/processing/opengl/PShader.java
Patch:
@@ -753,7 +753,8 @@ protected void setUniformImpl(String name, int type, Object value) {
       uniformValues.put(loc, new UniformValue(type, value));
     } else {
       PGraphics.showWarning("The shader doesn't have a uniform called \"" +
-                            name + "\"");
+                            name + "\" OR the uniform was removed during" +
+                            "compilation because it was unused.");
     }
   }
 
@@ -1437,7 +1438,7 @@ protected void setPointAttribute(int vboId, int size, int type,
   //
   // Class to store a user-specified value for a uniform parameter
   // in the shader
-  protected class UniformValue {
+  protected static class UniformValue {
     static final int INT1      = 0;
     static final int INT2      = 1;
     static final int INT3      = 2;

File: core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -173,7 +173,7 @@ public class PShapeOpenGL extends PShape {
   protected boolean needBufferInit = false;
 
   // Flag to indicate if the shape can have holes or not.
-  protected boolean solid;
+  protected boolean solid = true;
 
   protected boolean breakShape = false;
   protected boolean shapeCreated = false;
@@ -2995,7 +2995,7 @@ protected void tessellateRect() {
     if (rounded) {
       saveBezierVertexSettings();
       inGeo.addRect(a, b, c, d, tl, tr, br, bl, stroke);
-      tessellator.tessellatePolygon(false, true, true);
+      tessellator.tessellatePolygon(true, true, true);
       restoreBezierVertexSettings();
     } else {
       inGeo.addRect(a, b, c, d, stroke);
@@ -3289,7 +3289,7 @@ protected void tessellatePath() {
       saveCurveVertexSettings();
       tessellator.resetCurveVertexCount();
     }
-    tessellator.tessellatePolygon(false, close, true);
+    tessellator.tessellatePolygon(true, close, true);
     if (bez || quad) restoreBezierVertexSettings();
     if (curv) restoreCurveVertexSettings();
   }

File: java/libraries/lwjgl/src/processing/lwjgl/PLWJGL.java
Patch:
@@ -1528,7 +1528,7 @@ public void texSubImage2D(int target, int level, int xOffset, int yOffset, int w
   }
 
   public void copyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height) {
-    GL11.glCopyTexSubImage2D(target, level, x, y, xOffset, xOffset, width, height);
+    GL11.glCopyTexSubImage2D(target, level, x, y, xOffset, yOffset, width, height);
   }
 
   public void compressedTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int imageSize, Buffer data) {

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -252,7 +252,7 @@ public String preprocess(File srcFolder,
 //    // if this fella is OpenGL, and if so, to add the import. It's messy and
 //    // gross and someday we'll just always include OpenGL.
 //    String[] sizeInfo =
-//      preprocessor.initSketchSize(sketch.getMainProgram(), sizeWarning);
+      preprocessor.initSketchSize(sketch.getMainProgram(), sizeWarning);
 //      //PdePreprocessor.parseSketchSize(sketch.getMainProgram(), false);
 //    if (sizeInfo != null) {
 //      String sketchRenderer = sizeInfo[3];

File: core/src/processing/core/PApplet.java
Patch:
@@ -37,6 +37,7 @@
 import java.awt.Image;
 import java.awt.Toolkit;
 import java.awt.color.ColorSpace;
+import java.awt.font.FontRenderContext;
 import java.awt.image.BufferedImage;
 import java.io.*;
 import java.lang.reflect.*;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -770,7 +770,7 @@ public void dispose() {  // ignore
 
 
   public PSurface createSurface() {  // ignore
-    return null;
+    return new PSurfaceAWT(this);
   }
 
 

File: pdex/src/processing/mode/experimental/ErrorMessageSimplifier.java
Patch:
@@ -96,7 +96,7 @@ public static String getSimplifiedErrorMessage(Problem problem) {
             result = "Consider adding a \"=\"";
           }
           else {
-            result = "Consider adding a \"" + args[0] + "\"";
+            result = "Error on \"" + args[0] + "\"";
           }
         }
       }
@@ -122,7 +122,7 @@ public static String getSimplifiedErrorMessage(Problem problem) {
           result = getErrorMessageForBracket(args[1].charAt(0));
         }
         else {
-          result = "Consider adding a \"" + args[1] + "\"";
+          result = "Error on \"" + args[0] + "\"Consider adding a \"" + args[1] + "\"";
         }
       }
       break;

File: pdex/src/processing/mode/experimental/TextArea.java
Patch:
@@ -238,8 +238,7 @@ else if (keyChar == ')') {
           SwingWorker<Object, Object> worker = new SwingWorker<Object, Object>() {
             protected Object doInBackground() throws Exception {
               // Provide completions only if it's enabled
-              if (ExperimentalMode.codeCompletionsEnabled
-                  && ExperimentalMode.ccTriggerEnabled) {
+              if (ExperimentalMode.codeCompletionsEnabled) {
                 getDocument().remove(getCaretPosition() - 1, 1); // Remove the typed space
                 log("[KeyEvent]" + evt2.getKeyChar() + "  |Prediction started");
                 log("Typing: " + fetchPhrase(evt2));

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -513,7 +513,7 @@ static protected PShape createShapeImpl(PGraphicsJava2D pg, int type) {
     } else if (type == PShape.GEOMETRY) {
       shape = new PShape(pg, PShape.GEOMETRY);
     }
-    shape.is3D(false);
+    shape.set3D(false);
     return shape;
   }
 
@@ -584,7 +584,7 @@ static protected PShape createShapeImpl(PGraphicsJava2D pg,
       shape.setParams(p);
     }
 
-    shape.is3D(false);
+    shape.set3D(false);
     return shape;
   }
 

File: core/src/processing/opengl/PGraphics2D.java
Patch:
@@ -308,7 +308,7 @@ static protected PShapeOpenGL createShapeImpl(PGraphicsOpenGL pg, int type) {
     } else if (type == PShape.GEOMETRY) {
       shape = new PShapeOpenGL(pg, PShape.GEOMETRY);
     }
-    shape.is3D(false);
+    shape.set3D(false);
     return shape;
   }
 
@@ -379,7 +379,7 @@ static protected PShapeOpenGL createShapeImpl(PGraphicsOpenGL pg,
       shape.setParams(p);
     }
 
-    shape.is3D(false);
+    shape.set3D(false);
     return shape;
   }
 

File: core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -191,7 +191,7 @@ static protected PShapeOpenGL createShapeImpl(PGraphicsOpenGL pg, int type) {
     } else if (type == PShape.GEOMETRY) {
       shape = new PShapeOpenGL(pg, PShape.GEOMETRY);
     }
-    shape.is3D(true);
+    shape.set3D(true);
     return shape;
   }
 
@@ -272,7 +272,7 @@ static protected PShapeOpenGL createShapeImpl(PGraphicsOpenGL pg,
       shape.setParams(p);
     }
 
-    shape.is3D(true);
+    shape.set3D(true);
     return shape;
   }
 }
\ No newline at end of file

File: app/src/processing/app/syntax/PdeTextAreaDefaults.java
Patch:
@@ -215,6 +215,7 @@ public PdeTextAreaDefaults(Mode mode) {
     styles[Token.KEYWORD3] = mode.getStyle("keyword3");
     styles[Token.KEYWORD4] = mode.getStyle("keyword4");
     styles[Token.KEYWORD5] = mode.getStyle("keyword5");
+    styles[Token.KEYWORD6] = mode.getStyle("keyword6");
 
     styles[Token.FUNCTION1] = mode.getStyle("function1");
     styles[Token.FUNCTION2] = mode.getStyle("function2");

File: app/src/processing/app/syntax/PdeTextAreaDefaults.java
Patch:
@@ -215,6 +215,7 @@ public PdeTextAreaDefaults(Mode mode) {
     styles[Token.KEYWORD3] = mode.getStyle("keyword3");
     styles[Token.KEYWORD4] = mode.getStyle("keyword4");
     styles[Token.KEYWORD5] = mode.getStyle("keyword5");
+    styles[Token.KEYWORD6] = mode.getStyle("keyword6");
 
     styles[Token.FUNCTION1] = mode.getStyle("function1");
     styles[Token.FUNCTION2] = mode.getStyle("function2");

File: core/src/processing/core/PGraphicsJava2D2X.java
Patch:
@@ -3,7 +3,7 @@
 import java.awt.*;
 
 
-public class PGraphicsRetina2D extends PGraphicsJava2D {
+public class PGraphicsJava2D2X extends PGraphicsJava2D {
 //  PImage retina;
 //  int retinaWidth;
 //  int retinaHeight;
@@ -14,7 +14,7 @@ public class PGraphicsRetina2D extends PGraphicsJava2D {
   // INTERNAL
 
 
-  public PGraphicsRetina2D() {
+  public PGraphicsJava2D2X() {
     pixelFactor = 2;
 //    retina = new PImage();
 //    retina.format = RGB;

File: pdex/src/processing/mode/experimental/ErrorMessageSimplifier.java
Patch:
@@ -83,14 +83,14 @@ public static String getSimplifiedErrorMessage(Problem problem) {
               + "\" should go here";
         }
         else {
-        result = "Code error on \"" + args[0]
+        result = "Error on \"" + args[0]
             + "\"";
         }        
       }
       break;
     case IProblem.ParsingErrorDeleteToken:
       if (args.length > 0) {
-        result = "Code error on \"" + args[0] + "\"";
+        result = "Error on \"" + args[0] + "\"";
       }
       break;
     case IProblem.ParsingErrorInsertToComplete:
@@ -115,7 +115,7 @@ public static String getSimplifiedErrorMessage(Problem problem) {
             result = "\"color\" and \"int\" are reserved words & can't be used as variable names";
           }
           else {
-            result = "Code error on \"" + args[0] + "\"";
+            result = "Error on \"" + args[0] + "\"";
           }
         }
       }

File: pdex/src/processing/mode/experimental/ExperimentalMode.java
Patch:
@@ -140,7 +140,7 @@ public File getContentFile(String path) {
       debugOutputEnabled = false, errorLogsEnabled = false,
       autoSaveEnabled = true, autoSavePromptEnabled = true,
       defaultAutoSaveEnabled = true, // ,untitledAutoSaveEnabled;
-      ccTriggerEnabled = false, importSuggestEnabled = true;
+      ccTriggerEnabled = true, importSuggestEnabled = true;
   public static int autoSaveInterval = 3; //in minutes
 
   /**

File: app/src/processing/mode/java/PdeKeyListener.java
Patch:
@@ -80,6 +80,7 @@ public boolean keyPressed(KeyEvent event) {
 
     Sketch sketch = editor.getSketch();
 
+    /*
     if ((event.getModifiers() & CTRL_ALT) == CTRL_ALT) {
       if (code == KeyEvent.VK_LEFT) {
         sketch.handlePrevCode();
@@ -89,6 +90,7 @@ public boolean keyPressed(KeyEvent event) {
         return true;
       }
     }
+    */
 
     if ((event.getModifiers() & InputEvent.META_MASK) != 0) {
       //event.consume();  // does nothing

File: app/src/processing/app/Sketch.java
Patch:
@@ -493,9 +493,10 @@ protected void nameCode(String newName) {
     // A regression introduced by Florian's bug report (below) years earlier.
     if (!(renamingCode && sanitaryName.equals(current.getPrettyName()))) {
       // Make sure no .pde *and* no .java files with the same name already exist
+      // (other than the one we are currently attempting to rename)
       // http://processing.org/bugs/bugzilla/543.html
       for (SketchCode c : code) {
-        if (sanitaryName.equalsIgnoreCase(c.getPrettyName())) {
+        if (c != current && sanitaryName.equalsIgnoreCase(c.getPrettyName())) {
           Base.showMessage("Nope",
                            "A file named \"" + c.getFileName() + "\" already exists at\n" +
                              "\"" + folder.getAbsolutePath() + "\"");

File: app/src/processing/app/Sketch.java
Patch:
@@ -1199,7 +1199,8 @@ public void setCurrentCode(int which) {
 //      System.out.println(current.visited);
 //    }
     // if current is null, then this is the first setCurrent(0)
-    if ((currentIndex == which) && (current != null)) {
+    if (((currentIndex == which) && (current != null))
+      || which >= codeCount || which < 0) {
       return;
     }
 

File: app/src/processing/app/Toolkit.java
Patch:
@@ -76,6 +76,8 @@ public class Toolkit {
   /** Command-Option on Mac OS X, Ctrl-Alt on Windows and Linux */
   static final int SHORTCUT_ALT_KEY_MASK = ActionEvent.ALT_MASK |
     awtToolkit.getMenuShortcutKeyMask();
+  static final int SHORTCUT_SHIFT_KEY_MASK = ActionEvent.SHIFT_MASK |
+    SHORTCUT_KEY_MASK;
 
 
   /**

File: app/src/processing/app/Preferences.java
Patch:
@@ -64,7 +64,7 @@ public class Preferences {
    * Windows XP needs 66, and my Ubuntu machine needs 80+, so 80 seems proper.
    */
   static public int BUTTON_WIDTH = 
-    Integer.valueOf(Language.text("preferences.button.width"));
+    Integer.parseInt(Language.text("preferences.button.width"));
 
   /** height of the EditorHeader, EditorToolbar, and EditorStatus */
   static final int GRID_SIZE = 32;

File: app/src/processing/app/tools/ColorSelector.java
Patch:
@@ -43,7 +43,7 @@ public class ColorSelector implements Tool {
    * Only create one instance, otherwise we'll have dozens of animation
    * threads going if you open/close a lot of editor windows.
    */
-  static ColorChooser selector;
+  private static volatile ColorChooser selector;
 
   private Editor editor;
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -2637,7 +2637,7 @@ public void updateListeners(Component comp) {
 //  protected int eventCount;
 
 
-  class InternalEventQueue {
+  static class InternalEventQueue {
     protected Event queue[] = new Event[10];
     protected int offset;
     protected int count;
@@ -9049,7 +9049,7 @@ static public String[] split(String value, char delim) {
     //}
     if (splitCount == 0) {
       String splits[] = new String[1];
-      splits[0] = new String(value);
+      splits[0] = value;
       return splits;
     }
     //int pieceCount = splitCount + 1;

File: core/src/processing/data/JSONObject.java
Patch:
@@ -1492,7 +1492,7 @@ static protected Object stringToValue(String string) {
             return d;
           }
         } else {
-          Long myLong = new Long(string);
+          Long myLong = Long.valueOf(string);
           if (myLong.longValue() == myLong.intValue()) {
             return Integer.valueOf(myLong.intValue());
           } else {

File: core/src/processing/data/Table.java
Patch:
@@ -3862,7 +3862,7 @@ protected void checkBounds(int row, int column) {
   // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 
 
-  class HashMapBlows {
+  static class HashMapBlows {
     HashMap<String,Integer> dataToIndex = new HashMap<String, Integer>();
     ArrayList<String> indexToData = new ArrayList<String>();
 

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1203,7 +1203,7 @@ protected Tessellator createTessellator(TessellatorCallback callback) {
   }
 
 
-  protected class Tessellator implements PGL.Tessellator {
+  protected static class Tessellator implements PGL.Tessellator {
     protected GLUtessellator tess;
     protected TessellatorCallback callback;
     protected GLUCallback gluCallback;

File: core/src/processing/opengl/PShader.java
Patch:
@@ -1438,7 +1438,7 @@ protected void setPointAttribute(int vboId, int size, int type,
   //
   // Class to store a user-specified value for a uniform parameter
   // in the shader
-  protected class UniformValue {
+  protected static class UniformValue {
     static final int INT1      = 0;
     static final int INT2      = 1;
     static final int INT3      = 2;

File: app/src/processing/app/contrib/ContributionListPanel.java
Patch:
@@ -179,7 +179,7 @@ public void run() {
   
   public void filterLibraries(List<Contribution> filteredContributions) {
     synchronized (panelByContribution) {
-      Set<Contribution> hiddenPanels = new TreeSet(contribListing.getComparator());
+      Set<Contribution> hiddenPanels = new TreeSet<Contribution>(contribListing.getComparator());
       hiddenPanels.addAll(panelByContribution.keySet());
 
       for (Contribution info : filteredContributions) {

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -46,7 +46,7 @@ public class ContributionManagerDialog {
   JFrame dialog;
   String title;
   ContributionFilter filter;
-  JComboBox categoryChooser;
+  JComboBox<String> categoryChooser;
   JScrollPane scrollPane;
   ContributionListPanel contributionListPanel;
   StatusPanel status;
@@ -219,7 +219,7 @@ private void createComponents() {
 
       filterPanel.add(Box.createHorizontalStrut(5));
 
-      categoryChooser = new JComboBox();
+      categoryChooser = new JComboBox<String>();
       categoryChooser.setMaximumRowCount(20);
       updateCategoryChooser();
 //      filterPanel.add(categoryChooser, c);

File: core/src/processing/core/PShape.java
Patch:
@@ -618,7 +618,9 @@ public void beginContour() {
 
 
   protected void beginContourImpl() {
-    if (vertexCodes.length == vertexCodeCount) {
+    if (vertexCodes == null) {
+      vertexCodes = new int[10];
+    } else if (vertexCodes.length == vertexCodeCount) {
       vertexCodes = PApplet.expand(vertexCodes);
     }
     vertexCodes[vertexCodeCount++] = BREAK;

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -2363,7 +2363,7 @@ protected void tessellate(int mode) {
       if (normalMode == NORMAL_MODE_AUTO) inGeo.calcQuadStripNormals();
       tessellator.tessellateQuadStrip();
     } else if (shape == POLYGON) {
-      tessellator.tessellatePolygon(false, mode == CLOSE,
+      tessellator.tessellatePolygon(true, mode == CLOSE,
                                     normalMode == NORMAL_MODE_AUTO);
     }
   }

File: core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -173,7 +173,7 @@ public class PShapeOpenGL extends PShape {
   protected boolean needBufferInit = false;
 
   // Flag to indicate if the shape can have holes or not.
-  protected boolean solid;
+  protected boolean solid = true;
 
   protected boolean breakShape = false;
   protected boolean shapeCreated = false;
@@ -2995,7 +2995,7 @@ protected void tessellateRect() {
     if (rounded) {
       saveBezierVertexSettings();
       inGeo.addRect(a, b, c, d, tl, tr, br, bl, stroke);
-      tessellator.tessellatePolygon(false, true, true);
+      tessellator.tessellatePolygon(true, true, true);
       restoreBezierVertexSettings();
     } else {
       inGeo.addRect(a, b, c, d, stroke);
@@ -3289,7 +3289,7 @@ protected void tessellatePath() {
       saveCurveVertexSettings();
       tessellator.resetCurveVertexCount();
     }
-    tessellator.tessellatePolygon(false, close, true);
+    tessellator.tessellatePolygon(true, close, true);
     if (bez || quad) restoreBezierVertexSettings();
     if (curv) restoreCurveVertexSettings();
   }

File: java/libraries/net/src/processing/net/Server.java
Patch:
@@ -310,8 +310,8 @@ public void run() {
   public void write(int data) {  // will also cover char
     int index = 0;
     while (index < clientCount) {
-      clients[index].write(data);
       if (clients[index].active()) {
+        clients[index].write(data);
         index++;
       } else {
         removeIndex(index);
@@ -323,8 +323,8 @@ public void write(int data) {  // will also cover char
   public void write(byte data[]) {
     int index = 0;
     while (index < clientCount) {
-      clients[index].write(data);
       if (clients[index].active()) {
+        clients[index].write(data);
         index++;
       } else {
         removeIndex(index);
@@ -336,8 +336,8 @@ public void write(byte data[]) {
   public void write(String data) {
     int index = 0;
     while (index < clientCount) {
-      clients[index].write(data);
       if (clients[index].active()) {
+        clients[index].write(data);
         index++;
       } else {
         removeIndex(index);

File: pdex/src/processing/mode/experimental/XQConsoleToggle.java
Patch:
@@ -32,6 +32,8 @@
 
 import javax.swing.JPanel;
 
+import processing.app.Language;
+
 /**
  * Toggle Button displayed in the editor line status panel for toggling bewtween
  * console and problems list. Glorified JPanel.
@@ -41,7 +43,7 @@
  */
 
 public class XQConsoleToggle extends JPanel implements MouseListener {
-	public static final String CONSOLE = "Console", ERRORSLIST = "Errors" ;
+	public static final String CONSOLE = Language.text("editor.footer.console"), ERRORSLIST = Language.text("editor.footer.errors") ;
 	
 	private boolean toggleText = true;
 	private boolean toggleBG = true;

File: pdex/src/processing/mode/experimental/XQErrorTable.java
Patch:
@@ -30,6 +30,8 @@
 import javax.swing.table.JTableHeader;
 import javax.swing.table.TableModel;
 
+import processing.app.Language;
+
 /**
  * Custom JTable implementation for XQMode. Minor tweaks and addtions.
  * 
@@ -41,7 +43,7 @@ public class XQErrorTable extends JTable {
 	/**
 	 * Column Names of JTable
 	 */
-	public static final String[] columnNames = { "Problem", "Tab", "Line" };
+	public static final String[] columnNames = { Language.text("editor.footer.errors.problem"), Language.text("editor.footer.errors.tab"), Language.text("editor.footer.errors.line") };
 
 	/**
 	 * Column Widths of JTable.

File: core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -173,7 +173,7 @@ public class PShapeOpenGL extends PShape {
   protected boolean needBufferInit = false;
 
   // Flag to indicate if the shape can have holes or not.
-  protected boolean solid;
+  protected boolean solid = true;
 
   protected boolean breakShape = false;
   protected boolean shapeCreated = false;
@@ -2995,7 +2995,7 @@ protected void tessellateRect() {
     if (rounded) {
       saveBezierVertexSettings();
       inGeo.addRect(a, b, c, d, tl, tr, br, bl, stroke);
-      tessellator.tessellatePolygon(false, true, true);
+      tessellator.tessellatePolygon(true, true, true);
       restoreBezierVertexSettings();
     } else {
       inGeo.addRect(a, b, c, d, stroke);
@@ -3289,7 +3289,7 @@ protected void tessellatePath() {
       saveCurveVertexSettings();
       tessellator.resetCurveVertexCount();
     }
-    tessellator.tessellatePolygon(false, close, true);
+    tessellator.tessellatePolygon(true, close, true);
     if (bez || quad) restoreBezierVertexSettings();
     if (curv) restoreCurveVertexSettings();
   }

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -2363,7 +2363,7 @@ protected void tessellate(int mode) {
       if (normalMode == NORMAL_MODE_AUTO) inGeo.calcQuadStripNormals();
       tessellator.tessellateQuadStrip();
     } else if (shape == POLYGON) {
-      tessellator.tessellatePolygon(false, mode == CLOSE,
+      tessellator.tessellatePolygon(true, mode == CLOSE,
                                     normalMode == NORMAL_MODE_AUTO);
     }
   }

File: app/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -167,7 +167,7 @@ public static enum Mode {
    * and pasting from the reference.
    */
   public static final String SIZE_REGEX =
-    "(?:^|\\s|;)size\\s*\\(\\s*([^\\s,]+)\\s*,\\s*([^\\s,\\)]+),?\\s*([^\\)]*)\\s*\\)\\s*\\;";
+    "(?:^|\\s|;)size\\s*\\(\\s*([^\\s,]+)\\s*,\\s*([^\\s,\\)]+)\\s*,?\\s*([^\\)]*)\\s*\\)\\s*\\;";
     //"(?:^|\\s|;)size\\s*\\(\\s*(\\S+)\\s*,\\s*([^\\s,\\)]+),?\\s*([^\\)]*)\\s*\\)\\s*\\;";
 
   

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -861,7 +861,7 @@ public void compose(Raster src, Raster dstIn, WritableRaster dstOut) {
         src.getDataElements(0, y, width, 1, srcPixels);
         dstIn.getDataElements(0, y, width, 1, dstPixels);
         for (int x = 0; x < width; x++) {
-          dstPixels[x] = blendColor(srcPixels[x], alphaFiller | dstPixels[x], mode);
+          dstPixels[x] = blendColor(alphaFiller | dstPixels[x], srcPixels[x], mode);
         }
         dstOut.setDataElements(0, y, width, 1, dstPixels);
       }

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -1935,7 +1935,7 @@ public void texSubImage2D(int target, int level, int xOffset, int yOffset, int w
 
   @Override
   public void copyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height) {
-    gl.glCopyTexSubImage2D(target, level, x, y, xOffset, xOffset, width, height);
+    gl.glCopyTexSubImage2D(target, level, x, y, xOffset, yOffset, width, height);
   }
 
   @Override

File: java/libraries/lwjgl/src/processing/lwjgl/PLWJGL.java
Patch:
@@ -1528,7 +1528,7 @@ public void texSubImage2D(int target, int level, int xOffset, int yOffset, int w
   }
 
   public void copyTexSubImage2D(int target, int level, int xOffset, int yOffset, int x, int y, int width, int height) {
-    GL11.glCopyTexSubImage2D(target, level, x, y, xOffset, xOffset, width, height);
+    GL11.glCopyTexSubImage2D(target, level, x, y, xOffset, yOffset, width, height);
   }
 
   public void compressedTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int imageSize, Buffer data) {

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -10064,6 +10064,7 @@ void tessellateRoundPoints2D(int nvertTot, int nindTot, int nPtVert) {
       IndexCache cache = tess.polyIndexCache;
       int index = in.renderMode == RETAINED ? cache.addNew() : cache.getLast();
       firstPointIndexCache = index;
+      if (firstPolyIndexCache == -1) firstPolyIndexCache = index; // If the geometry has no fill, needs the first poly index.
       for (int i = 0; i < in.vertexCount; i++) {
         int count = cache.vertexCount[index];
         if (PGL.MAX_VERTEX_INDEX1 <= count + nPtVert) {
@@ -10192,6 +10193,7 @@ void tessellateSquarePoints2D(int nvertTot, int nindTot) {
       IndexCache cache = tess.polyIndexCache;
       int index = in.renderMode == RETAINED ? cache.addNew() : cache.getLast();
       firstPointIndexCache = index;
+      if (firstPolyIndexCache == -1) firstPolyIndexCache = index; // If the geometry has no fill, needs the first poly index.
       for (int i = 0; i < in.vertexCount; i++) {
         int nvert = 5;
         int count = cache.vertexCount[index];

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -6056,7 +6056,7 @@ protected void blendModeImpl() {
       if (blendEqSupported) {
         pgl.blendEquation(PGL.FUNC_ADD);
       }
-      pgl.blendFunc(PGL.DST_COLOR, PGL.SRC_COLOR);
+      pgl.blendFunc(PGL.ZERO, PGL.SRC_COLOR);
 
     } else if (blendMode == SCREEN) {
       if (blendEqSupported) {

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -6025,7 +6025,7 @@ protected void blendModeImpl() {
     } else if (blendMode == SUBTRACT) {
       if (blendEqSupported) {
         pgl.blendEquation(PGL.FUNC_REVERSE_SUBTRACT);
-        pgl.blendFunc(PGL.ONE, PGL.SRC_ALPHA);
+        pgl.blendFunc(PGL.SRC_ALPHA, PGL.ONE);
       } else {
         PGraphics.showWarning(BLEND_DRIVER_ERROR, "SUBTRACT");
       }

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -861,7 +861,7 @@ public void compose(Raster src, Raster dstIn, WritableRaster dstOut) {
         src.getDataElements(0, y, width, 1, srcPixels);
         dstIn.getDataElements(0, y, width, 1, dstPixels);
         for (int x = 0; x < width; x++) {
-          dstPixels[x] = blendColor(srcPixels[x], alphaFiller | dstPixels[x], mode);
+          dstPixels[x] = blendColor(alphaFiller | dstPixels[x], srcPixels[x], mode);
         }
         dstOut.setDataElements(0, y, width, 1, dstPixels);
       }

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -10064,6 +10064,7 @@ void tessellateRoundPoints2D(int nvertTot, int nindTot, int nPtVert) {
       IndexCache cache = tess.polyIndexCache;
       int index = in.renderMode == RETAINED ? cache.addNew() : cache.getLast();
       firstPointIndexCache = index;
+      if (firstPolyIndexCache == -1) firstPolyIndexCache = index; // If the geometry has no fill, needs the first poly index.
       for (int i = 0; i < in.vertexCount; i++) {
         int count = cache.vertexCount[index];
         if (PGL.MAX_VERTEX_INDEX1 <= count + nPtVert) {
@@ -10192,6 +10193,7 @@ void tessellateSquarePoints2D(int nvertTot, int nindTot) {
       IndexCache cache = tess.polyIndexCache;
       int index = in.renderMode == RETAINED ? cache.addNew() : cache.getLast();
       firstPointIndexCache = index;
+      if (firstPolyIndexCache == -1) firstPolyIndexCache = index; // If the geometry has no fill, needs the first poly index.
       for (int i = 0; i < in.vertexCount; i++) {
         int nvert = 5;
         int count = cache.vertexCount[index];

File: core/src/processing/data/Table.java
Patch:
@@ -1479,11 +1479,12 @@ public void setColumnType(String columnName, String columnType) {
   /**
    * Set the data type for a column so that using it is more efficient.
    * @param column the column to change
-   * @param columnType One of int, long, float, double, or String.
+   * @param columnType One of int, long, float, double, string, or category.
    */
   public void setColumnType(int column, String columnType) {
+    columnType = columnType.toLowerCase();
     int type = -1;
-    if (columnType.equals("String")) {
+    if (columnType.equals("string")) {
       type = STRING;
     } else if (columnType.equals("int")) {
       type = INT;

File: core/src/processing/data/FloatList.java
Patch:
@@ -300,7 +300,7 @@ public void append(FloatList list) {
 
 
   // same as splice
-  public void insert(int index, int[] values) {
+  public void insert(int index, float[] values) {
     if (index < 0) {
       throw new IllegalArgumentException("insert() index cannot be negative: it was " + index);
     }
@@ -328,7 +328,7 @@ public void insert(int index, int[] values) {
   }
 
 
-  public void insert(int index, IntList list) {
+  public void insert(int index, FloatList list) {
     insert(index, list.values());
   }
 

File: java/libraries/sound/src/processing/sound/Engine.java
Patch:
@@ -120,7 +120,7 @@ public static int[] soundFileInfo(String path){
 	};
 	    
 	public static int[] soundFilePlayMono(float rate, float pos, float amp, float add, boolean loop, String path, float dur, int cue){
-		return soundFilePlayMono(rate, pos, amp, add, loop, path, dur, cue);
+		return methCla.soundFilePlayMono(rate, pos, amp, add, loop, path, dur, cue);
 	};
 	  
 	public static int[] soundFilePlayMulti(float rate, float amp, float add, boolean loop, String path, float dur, int cue){

File: core/src/processing/data/FloatList.java
Patch:
@@ -300,7 +300,7 @@ public void append(FloatList list) {
 
 
   // same as splice
-  public void insert(int index, int[] values) {
+  public void insert(int index, float[] values) {
     if (index < 0) {
       throw new IllegalArgumentException("insert() index cannot be negative: it was " + index);
     }
@@ -328,7 +328,7 @@ public void insert(int index, int[] values) {
   }
 
 
-  public void insert(int index, IntList list) {
+  public void insert(int index, FloatList list) {
     insert(index, list.values());
   }
 

File: app/src/processing/app/contrib/ContributionListPanel.java
Patch:
@@ -179,7 +179,7 @@ public void run() {
   
   public void filterLibraries(List<Contribution> filteredContributions) {
     synchronized (panelByContribution) {
-      Set<Contribution> hiddenPanels = new TreeSet(contribListing.getComparator());
+      Set<Contribution> hiddenPanels = new TreeSet<Contribution>(contribListing.getComparator());
       hiddenPanels.addAll(panelByContribution.keySet());
 
       for (Contribution info : filteredContributions) {

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -46,7 +46,7 @@ public class ContributionManagerDialog {
   JFrame dialog;
   String title;
   ContributionFilter filter;
-  JComboBox categoryChooser;
+  JComboBox<String> categoryChooser;
   JScrollPane scrollPane;
   ContributionListPanel contributionListPanel;
   StatusPanel status;
@@ -219,7 +219,7 @@ private void createComponents() {
 
       filterPanel.add(Box.createHorizontalStrut(5));
 
-      categoryChooser = new JComboBox();
+      categoryChooser = new JComboBox<String>();
       categoryChooser.setMaximumRowCount(20);
       updateCategoryChooser();
 //      filterPanel.add(categoryChooser, c);

File: java/libraries/sound/src/processing/sound/Engine.java
Patch:
@@ -120,7 +120,7 @@ public static int[] soundFileInfo(String path){
 	};
 	    
 	public static int[] soundFilePlayMono(float rate, float pos, float amp, float add, boolean loop, String path, float dur, int cue){
-		return soundFilePlayMono(rate, pos, amp, add, loop, path, dur, cue);
+		return methCla.soundFilePlayMono(rate, pos, amp, add, loop, path, dur, cue);
 	};
 	  
 	public static int[] soundFilePlayMulti(float rate, float amp, float add, boolean loop, String path, float dur, int cue){

File: pdex/src/processing/mode/experimental/DebugEditor.java
Patch:
@@ -530,11 +530,11 @@ public void actionPerformed(ActionEvent e) {
         listBreakpointsMenuItem = new JMenuItem("List Breakpoints");
         listBreakpointsMenuItem.addActionListener(this);
 
-        stepOverMenuItem = Toolkit.newJMenuItem("Step", KeyEvent.VK_H);
+        stepOverMenuItem = Toolkit.newJMenuItem("Step", KeyEvent.VK_J);
         stepOverMenuItem.addActionListener(this);
-        stepIntoMenuItem = Toolkit.newJMenuItemShift("Step Into", KeyEvent.VK_H);
+        stepIntoMenuItem = Toolkit.newJMenuItemShift("Step Into", KeyEvent.VK_J);
         stepIntoMenuItem.addActionListener(this);
-        stepOutMenuItem = Toolkit.newJMenuItemAlt("Step Out", KeyEvent.VK_H);
+        stepOutMenuItem = Toolkit.newJMenuItemAlt("Step Out", KeyEvent.VK_J);
         stepOutMenuItem.addActionListener(this);
 
         printStackTraceMenuItem = new JMenuItem("Print Stack Trace");

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -6681,7 +6681,7 @@ public PShader loadShader(String fragFilename, String vertFilename) {
     if (fragFilename == null || fragFilename.equals("")) {
       PGraphics.showWarning(MISSING_FRAGMENT_SHADER);
       return null;
-    } else if (fragFilename == null || fragFilename.equals("")) {
+    } else if (vertFilename == null || vertFilename.equals("")) {
       PGraphics.showWarning(MISSING_VERTEX_SHADER);
       return null;
     } else {

File: core/src/processing/opengl/PShader.java
Patch:
@@ -753,7 +753,8 @@ protected void setUniformImpl(String name, int type, Object value) {
       uniformValues.put(loc, new UniformValue(type, value));
     } else {
       PGraphics.showWarning("The shader doesn't have a uniform called \"" +
-                            name + "\"");
+                            name + "\" OR the uniform was removed during" +
+                            "compilation because it was unused.");
     }
   }
 

File: app/src/processing/app/Sketch.java
Patch:
@@ -493,9 +493,10 @@ protected void nameCode(String newName) {
     // A regression introduced by Florian's bug report (below) years earlier.
     if (!(renamingCode && sanitaryName.equals(current.getPrettyName()))) {
       // Make sure no .pde *and* no .java files with the same name already exist
+      // (other than the one we are currently attempting to rename)
       // http://processing.org/bugs/bugzilla/543.html
       for (SketchCode c : code) {
-        if (sanitaryName.equalsIgnoreCase(c.getPrettyName())) {
+        if (c != current && sanitaryName.equalsIgnoreCase(c.getPrettyName())) {
           Base.showMessage("Nope",
                            "A file named \"" + c.getFileName() + "\" already exists at\n" +
                              "\"" + folder.getAbsolutePath() + "\"");

File: core/src/processing/opengl/PShader.java
Patch:
@@ -753,7 +753,8 @@ protected void setUniformImpl(String name, int type, Object value) {
       uniformValues.put(loc, new UniformValue(type, value));
     } else {
       PGraphics.showWarning("The shader doesn't have a uniform called \"" +
-                            name + "\"");
+                            name + "\" OR the uniform was removed during" +
+                            "compilation because it was unsued.");
     }
   }
 

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -6681,7 +6681,7 @@ public PShader loadShader(String fragFilename, String vertFilename) {
     if (fragFilename == null || fragFilename.equals("")) {
       PGraphics.showWarning(MISSING_FRAGMENT_SHADER);
       return null;
-    } else if (fragFilename == null || fragFilename.equals("")) {
+    } else if (vertFilename == null || vertFilename.equals("")) {
       PGraphics.showWarning(MISSING_VERTEX_SHADER);
       return null;
     } else {

File: app/src/processing/app/Mode.java
Patch:
@@ -414,7 +414,7 @@ public void actionPerformed(ActionEvent e) {
     });
     toolbarMenu.add(item);
     
-    item = new JMenuItem("Add Examples...");
+    item = new JMenuItem(Language.text("examples.add_examples"));
     item.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {
         base.handleOpenExampleManager();
@@ -843,7 +843,7 @@ public void actionPerformed(ActionEvent e) {
       examplesPanel.setBackground(Color.WHITE);
       
       final JPanel openExamplesManagerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
-      JLabel openExamplesManagerLabel = new JLabel("Add Examples...");
+      JLabel openExamplesManagerLabel = new JLabel(Language.text("examples.add_examples"));
 //      openExamplesManagerLabel.setAlignmentX(Component.LEFT_ALIGNMENT);
       openExamplesManagerPanel.add(openExamplesManagerLabel);
       openExamplesManagerPanel.setOpaque(false);

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -8185,7 +8185,8 @@ void addArc(float x, float y, float w, float h,
             addEdge(pidx, idx, i == 0, false);
           } else if (0 < i) {
             // when drawing full circle, the edge is closed later
-            addEdge(pidx, idx, i == inc, i == length && !fullCircle);
+            addEdge(pidx, idx, i == PApplet.min(inc, length),
+                               i == length && !fullCircle);
           }
         }
       } while (i < length);

File: app/src/processing/mode/java/JavaMode.java
Patch:
@@ -46,7 +46,7 @@ public JavaMode(Base base, File folder) {
 
 
   public String getTitle() {
-    return "Java (2.0)";
+    return "Java (Processing 2)";
   }
 
 

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -34,7 +34,7 @@
 public class ContributionListing {
   // Stable URL that will redirect to wherever we're hosting the file
   static final String LISTING_URL =
-    "http://download.processing.org/contributions.txt";
+    "http://download.processing.org/contribs.txt";
 
   static volatile ContributionListing singleInstance;
 

File: app/src/processing/app/Language.java
Patch:
@@ -87,6 +87,7 @@ private Language() {
   
   static private String[] listSupported() {
     // List of languages in alphabetical order. (Add yours here.)
+    // Also remember to add it to the corresponding build/build.xml rule.
     final String[] SUPPORTED = {
       "de", // German, Deutsch
       "en", // English
@@ -147,6 +148,7 @@ static public void saveLanguage(String language) {
     } catch (Exception e) {
       e.printStackTrace();
     }
+    Base.getPlatform().saveLanguage(language);
   }
   
   

File: app/src/processing/app/Platform.java
Patch:
@@ -74,6 +74,7 @@ public void setLookAndFeel() throws Exception {
     }
   }
 
+  public void saveLanguage(String languageCode) {}
 
   public void init(Base base) {
     this.base = base;
@@ -216,4 +217,4 @@ protected void showLauncherWarning() {
                      null);
   }
   */
-}
\ No newline at end of file
+}

File: app/src/processing/app/Language.java
Patch:
@@ -87,6 +87,7 @@ private Language() {
   
   static private String[] listSupported() {
     // List of languages in alphabetical order. (Add yours here.)
+    // Also remember to add it to the corresponding build/build.xml rule.
     final String[] SUPPORTED = {
       "de", // German, Deutsch
       "en", // English
@@ -147,6 +148,7 @@ static public void saveLanguage(String language) {
     } catch (Exception e) {
       e.printStackTrace();
     }
+    Base.getPlatform().saveLanguage(language);
   }
   
   

File: app/src/processing/app/Platform.java
Patch:
@@ -74,6 +74,7 @@ public void setLookAndFeel() throws Exception {
     }
   }
 
+  public void saveLanguage(String languageCode) {}
 
   public void init(Base base) {
     this.base = base;
@@ -216,4 +217,4 @@ protected void showLauncherWarning() {
                      null);
   }
   */
-}
\ No newline at end of file
+}

File: app/src/processing/app/Editor.java
Patch:
@@ -2437,7 +2437,9 @@ public void windowGainedFocus(WindowEvent arg0) {
           //if the directory was deleted, then don't scan
           if (finKey.isValid()) {
             List<WatchEvent<?>> events = finKey.pollEvents();
-            processFileEvents(events);
+            if (!watcherSave) {
+              processFileEvents(events);
+            }
           }
 
           List<WatchEvent<?>> events = finKey.pollEvents();

File: app/src/processing/app/Sketch.java
Patch:
@@ -1199,7 +1199,8 @@ public void setCurrentCode(int which) {
 //      System.out.println(current.visited);
 //    }
     // if current is null, then this is the first setCurrent(0)
-    if ((currentIndex == which) && (current != null)) {
+    if (((currentIndex == which) && (current != null))
+      || which >= codeCount || which < 0) {
       return;
     }
 

File: app/src/processing/app/Toolkit.java
Patch:
@@ -76,6 +76,8 @@ public class Toolkit {
   /** Command-Option on Mac OS X, Ctrl-Alt on Windows and Linux */
   static final int SHORTCUT_ALT_KEY_MASK = ActionEvent.ALT_MASK |
     awtToolkit.getMenuShortcutKeyMask();
+  static final int SHORTCUT_SHIFT_KEY_MASK = ActionEvent.SHIFT_MASK |
+    SHORTCUT_KEY_MASK;
 
 
   /**

File: app/src/processing/app/Editor.java
Patch:
@@ -2437,7 +2437,9 @@ public void windowGainedFocus(WindowEvent arg0) {
           //if the directory was deleted, then don't scan
           if (finKey.isValid()) {
             List<WatchEvent<?>> events = finKey.pollEvents();
-            processFileEvents(events);
+            if (!watcherSave) {
+              processFileEvents(events);
+            }
           }
 
           List<WatchEvent<?>> events = finKey.pollEvents();

File: app/src/processing/app/PreferencesFrame.java
Patch:
@@ -800,11 +800,11 @@ protected void showFrame() {
     }
     
     // This takes a while to load, so run it from a separate thread
-    new Thread(new Runnable() {
+    EventQueue.invokeLater(new Runnable() {
       public void run() {
         initFontList();
       }
-    }).start();
+    });
     
     fontSizeField.setSelectedItem(Preferences.getInteger("editor.font.size"));
     consoleSizeField.setSelectedItem(Preferences.getInteger("console.font.size"));

File: app/src/processing/app/PreferencesFrame.java
Patch:
@@ -526,7 +526,7 @@ public void stateChanged(ChangeEvent e) {
     right = Math.max(right, left + d.width);
     top += d.height; // + GUI_SMALL;
 
-    label = new JLabel(Preferences.getSketchbookPath());
+    label = new JLabel(Preferences.getPreferencesFile().getAbsolutePath());
     final JLabel clickable = label;
     label.addMouseListener(new MouseAdapter() {
         public void mousePressed(MouseEvent e) {

File: app/src/processing/app/PreferencesFrame.java
Patch:
@@ -526,7 +526,7 @@ public void stateChanged(ChangeEvent e) {
     right = Math.max(right, left + d.width);
     top += d.height; // + GUI_SMALL;
 
-    label = new JLabel(Preferences.getSketchbookPath());
+    label = new JLabel(Preferences.getPreferencesFile().getAbsolutePath());
     final JLabel clickable = label;
     label.addMouseListener(new MouseAdapter() {
         public void mousePressed(MouseEvent e) {

File: app/src/processing/app/EditorHeader.java
Patch:
@@ -512,6 +512,7 @@ public void actionPerformed(ActionEvent e) {
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
           editor.getSketch().handleNewCode();
+          editor.setWatcherSave();
         }
       });
     menu.add(item);
@@ -541,6 +542,7 @@ public void actionPerformed(ActionEvent e) {
                                Language.text("editor.header.delete.warning.text"), null);
           } else {
             editor.getSketch().handleDeleteCode();
+            editor.setWatcherSave();
           }
         }
       });

File: java/libraries/sound/src/processing/sound/Engine.java
Patch:
@@ -220,7 +220,7 @@ public static void reverbSet(float room, float damp, float wet, int nodeId){
 	// Mix
 
   	public static int[] mixPlay(int[] input, float[] amp){
-  		return methCla.mixPlay(input, amp);
+  		// return methCla.mixPlay(input, amp);
   	};
   
 	// Amplitude Follower
@@ -269,4 +269,4 @@ public void dispose() {
  	private void welcome() {
 		System.out.println("processing.sound v.09 by Wilm Thoben");
 	}
-}
\ No newline at end of file
+}

File: core/src/processing/core/PGraphics.java
Patch:
@@ -680,6 +680,7 @@ public class PGraphics extends PImage implements PConstants {
    * as the first line of a subclass' constructor to properly set
    * the internal fields and defaults.
    *
+   * @nowebref
    */
   public PGraphics() {
   }

File: pdex/src/processing/mode/experimental/TextArea.java
Patch:
@@ -360,7 +360,7 @@ else if (s.length() == 0)
    * @param evt - the KeyEvent which triggered this method 
    * @return
    */
-  private String fetchPhrase(KeyEvent evt) {
+  public String fetchPhrase(KeyEvent evt) {
    
     int off = getCaretPosition();
     log2("off " + off);

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -411,7 +411,6 @@ protected void updateContributionListing() {
     }
   }
 
-  
   protected void setFilterText(String filter) {
     if (filter == null || filter.isEmpty()) {
       filterField.setText("");

File: core/src/processing/core/PApplet.java
Patch:
@@ -11704,6 +11704,9 @@ public PShape loadShape(String filename) {
   }
 
 
+  /**
+   * @nowebref
+   */
   public PShape loadShape(String filename, String options) {
     return g.loadShape(filename, options);
   }

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1635,7 +1635,9 @@ public PShape loadShape(String filename) {
     return loadShape(filename, null);
   }
 
-
+  /**
+   * @nowebref
+   */
   public PShape loadShape(String filename, String options) {
     showMissingWarning("loadShape");
     return null;

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -62,6 +62,7 @@ public ContributionManagerDialog(ContributionType type) {
     if (type == null) {
       filter = ContributionType.createUpdateFilter();
     } else {
+
       filter = type.createFilter();    
     }
     contribListing = ContributionListing.getInstance();

File: app/src/processing/app/EditorHeader.java
Patch:
@@ -512,6 +512,7 @@ public void actionPerformed(ActionEvent e) {
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
           editor.getSketch().handleNewCode();
+          editor.setWatcherSave();
         }
       });
     menu.add(item);
@@ -533,7 +534,6 @@ public void actionPerformed(ActionEvent e) {
     item = new JMenuItem(Language.text("editor.header.delete"));
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          System.out.println("here high");
           Sketch sketch = editor.getSketch();
           if (!Base.isMacOS() &&  // ok on OS X
               editor.base.editors.size() == 1 &&  // mmm! accessor
@@ -542,6 +542,7 @@ public void actionPerformed(ActionEvent e) {
                                Language.text("editor.header.delete.warning.text"), null);
           } else {
             editor.getSketch().handleDeleteCode();
+            editor.setWatcherSave();
           }
         }
       });

File: core/src/processing/core/PApplet.java
Patch:
@@ -9635,7 +9635,7 @@ static final public float[] parseFloat(char what[]) {
   }
   */
 
-  static final public float[] parseByte(byte what[]) {
+  static final public float[] parseFloat(byte what[]) {
     float floaties[] = new float[what.length];
     for (int i = 0; i < what.length; i++) {
       floaties[i] = what[i];

File: pdex/src/processing/mode/experimental/ErrorCheckerService.java
Patch:
@@ -307,7 +307,7 @@ public void ensureMinP5Version(){
    * Error checking doesn't happen before this interval has ellapsed since the
    * last runManualErrorCheck() call.
    */
-  private final static long errorCheckInterval = 1100;
+  private final static long errorCheckInterval = 500;
 
   /**
    * The way the error checking happens is: DocumentListeners are added

File: core/src/processing/data/Table.java
Patch:
@@ -1108,7 +1108,7 @@ protected void writeHTML(PrintWriter writer) {
     writer.println("  </table>");
     writer.println("</body>");
 
-    writer.println("</hmtl>");
+    writer.println("</html>");
     writer.flush();
   }
 

File: core/src/processing/data/Table.java
Patch:
@@ -1108,7 +1108,7 @@ protected void writeHTML(PrintWriter writer) {
     writer.println("  </table>");
     writer.println("</body>");
 
-    writer.println("</hmtl>");
+    writer.println("</html>");
     writer.flush();
   }
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -9795,7 +9795,7 @@ static public String nf(int num, int digits) {
  * @param num the number(s) to format
  * @see PApplet#nf(float, int, int)
  * @see PApplet#nfp(float, int, int)
- * @see PApplet#nfc(float, int)
+ * @see PApplet#nfs(float, int, int)
  */
   static public String[] nfc(int num[]) {
     String formatted[] = new String[num.length];

File: core/src/processing/core/PApplet.java
Patch:
@@ -9795,7 +9795,7 @@ static public String nf(int num, int digits) {
  * @param num the number(s) to format
  * @see PApplet#nf(float, int, int)
  * @see PApplet#nfp(float, int, int)
- * @see PApplet#nfc(float, int)
+ * @see PApplet#nfs(float, int)
  */
   static public String[] nfc(int num[]) {
     String formatted[] = new String[num.length];

File: pdex/src/processing/mode/experimental/CompletionPanel.java
Patch:
@@ -189,6 +189,9 @@ private int calcHeight(int itemCount) {
 
     float h = itemHeight * (itemCount);
 
+    if (itemCount >= 4)
+    	h += itemHeight * 0.3; // a bit of offset
+
     return Math.min(maxHeight, (int) h); // popup menu height
   }
   

File: pdex/src/processing/mode/experimental/CompletionPanel.java
Patch:
@@ -212,7 +212,7 @@ private int calcWidth() {
     if(w == maxWidth) 
       horizontalScrollBarVisible = true;
     w += editor.dmode.classIcon.getIconWidth(); // add icon width too!
-    w += fm.stringWidth("         "); // a bit of offset
+    w += fm.stringWidth("           "); // a bit of offset
     //log("popup width " + w);
     return w; // popup menu width
   }

File: core/src/processing/core/PShape.java
Patch:
@@ -1547,7 +1547,9 @@ public void drawImpl(PGraphics g) {
     } else if (family == PRIMITIVE) {
       drawPrimitive(g);
     } else if (family == GEOMETRY) {
-      drawGeometry(g);
+      // same as path
+      drawPath(g);
+//      drawGeometry(g);
     } else if (family == PATH) {
       drawPath(g);
     }

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -97,9 +97,6 @@ public void actionPerformed(ActionEvent arg0) {
             Editor ed = iter.next();
             if (ed.getSketch().isModified()) {
               int option = Base
-                .showYesNoQuestion(editor, title,
-                                   Language.text("contrib.unsaved_changes"),
-                                   Language.text("contrib.unsaved_changes.prompt"));
                 .showYesNoQuestion(editor, Language.text("contributions"),
                                    Language.text("contributions.unsaved_changes"),
                                    Language.text("contributions.unsaved_changes.prompt"));

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -44,7 +44,6 @@ public class ContributionManagerDialog {
   static final String ANY_CATEGORY = Language.text("contrib.all");
 
   JFrame dialog;
-  String title;
   ContributionFilter filter;
   JComboBox categoryChooser;
   JScrollPane scrollPane;
@@ -101,6 +100,9 @@ public void actionPerformed(ActionEvent arg0) {
                 .showYesNoQuestion(editor, title,
                                    Language.text("contrib.unsaved_changes"),
                                    Language.text("contrib.unsaved_changes.prompt"));
+                .showYesNoQuestion(editor, Language.text("contributions"),
+                                   Language.text("contributions.unsaved_changes"),
+                                   Language.text("contributions.unsaved_changes.prompt"));
 
               if (option == JOptionPane.NO_OPTION)
                 return;

File: app/src/processing/app/Sketch.java
Patch:
@@ -1103,7 +1103,7 @@ public boolean addFile(File sourceFile) {
 
     // check whether this file already exists
     if (destFile.exists()) {
-      Object[] options = { Language.text("prompt.okay"), Language.text("prompt.cancel") };
+      Object[] options = { Language.text("prompt.ok"), Language.text("prompt.cancel") };
       String prompt = "Replace the existing version of " + filename + "?";
       int result = JOptionPane.showOptionDialog(editor,
                                                 prompt,

File: app/src/processing/app/Mode.java
Patch:
@@ -684,7 +684,7 @@ public void resetExamples() {
 
   public void showExamplesFrame() {
     if (examplesFrame == null) {
-      examplesFrame = new JFrame(getTitle() + " " + Language.text("editor.window.examples"));
+      examplesFrame = new JFrame(getTitle() + " " + Language.text("examples"));
       Toolkit.setIcon(examplesFrame);
       Toolkit.registerWindowCloseKeys(examplesFrame.getRootPane(), new ActionListener() {
         public void actionPerformed(ActionEvent e) {

File: app/src/processing/app/Mode.java
Patch:
@@ -684,7 +684,7 @@ public void resetExamples() {
 
   public void showExamplesFrame() {
     if (examplesFrame == null) {
-      examplesFrame = new JFrame(getTitle() + " " + Language.text("editor.window.examples"));
+      examplesFrame = new JFrame(getTitle() + " " + Language.text("examples"));
       Toolkit.setIcon(examplesFrame);
       Toolkit.registerWindowCloseKeys(examplesFrame.getRootPane(), new ActionListener() {
         public void actionPerformed(ActionEvent e) {

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1867,7 +1867,7 @@ protected void bezierVertexCheck(int shape, int vertexCount) {
                                  "must be used before bezierVertex() or quadraticVertex()");
     }
     if (vertexCount == 0) {
-      throw new RuntimeException("vertex() must be used at least once" +
+      throw new RuntimeException("vertex() must be used at least once " +
                                  "before bezierVertex() or quadraticVertex()");
     }
   }

File: app/src/processing/app/Library.java
Patch:
@@ -498,7 +498,7 @@ static protected void list(File folder, ArrayList<Library> libraries) {
       for (String subfolderName : list) {
         File subfolder = new File(folder, subfolderName);
 
-        if (!libraries.contains(subfolder)) {
+        if (!librariesFolders.contains(subfolder)) {
           ArrayList<File> discoveredLibFolders = new ArrayList<File>();
           discover(subfolder, discoveredLibFolders);
 

File: app/src/processing/app/EditorStatus.java
Patch:
@@ -162,6 +162,7 @@ public void run() {
         }
       }
     };
+    thread.setName("Editor Status");
     thread.start();
   }
 

File: app/src/processing/app/SingleInstance.java
Patch:
@@ -115,7 +115,7 @@ public void run() {
             }
           }
         }
-      }).start();
+      }, "SingleInstance Server").start();
 
     } catch (IOException e) {
       Base.log("Could not create single instance server.", e);
@@ -170,4 +170,4 @@ static boolean sendArguments(String[] args) {  //, long timeout) {
     }
     return false;
   }
-}
\ No newline at end of file
+}

File: app/src/processing/app/UpdateCheck.java
Patch:
@@ -71,7 +71,7 @@ public void run() {
 //          }
         }
       }
-    }).start();
+    }, "Update Checker").start();
   }
 
 

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -370,7 +370,7 @@ public void run() {
         }
         downloadingListingLock.unlock();
       }
-    }).start();
+    }, "Contribution List Downloader").start();
   }
 
 

File: app/src/processing/app/contrib/ContributionManager.java
Patch:
@@ -165,7 +165,7 @@ public void run() {
           status.setErrorMessage("Could not write to temporary directory.");
         }
       }
-    }).start();
+    }, "Contribution Installer").start();
   }
 
 
@@ -224,7 +224,7 @@ public void run() {
               + ad.getName());
         }
       }
-    }).start();
+    }, "Contribution Installer").start();
   }
 
 

File: app/src/processing/app/contrib/LocalContribution.java
Patch:
@@ -349,7 +349,7 @@ public void run() {
                status, 
                ContributionListing.getInstance()); 
       }
-    }).start();
+    }, "Contribution Uninstaller").start();
   }
   
   

File: app/src/processing/app/EditorStatus.java
Patch:
@@ -162,6 +162,7 @@ public void run() {
         }
       }
     };
+    thread.setName("Editor Status");
     thread.start();
   }
 

File: app/src/processing/app/SingleInstance.java
Patch:
@@ -115,7 +115,7 @@ public void run() {
             }
           }
         }
-      }).start();
+      }, "SingleInstance Server").start();
 
     } catch (IOException e) {
       Base.log("Could not create single instance server.", e);
@@ -170,4 +170,4 @@ static boolean sendArguments(String[] args) {  //, long timeout) {
     }
     return false;
   }
-}
\ No newline at end of file
+}

File: app/src/processing/app/UpdateCheck.java
Patch:
@@ -71,7 +71,7 @@ public void run() {
 //          }
         }
       }
-    }).start();
+    }, "Update Checker").start();
   }
 
 

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -370,7 +370,7 @@ public void run() {
         }
         downloadingListingLock.unlock();
       }
-    }).start();
+    }, "Contribution List Downloader").start();
   }
 
 

File: app/src/processing/app/contrib/ContributionManager.java
Patch:
@@ -165,7 +165,7 @@ public void run() {
           status.setErrorMessage("Could not write to temporary directory.");
         }
       }
-    }).start();
+    }, "Contribution Installer").start();
   }
 
 
@@ -224,7 +224,7 @@ public void run() {
               + ad.getName());
         }
       }
-    }).start();
+    }, "Contribution Installer").start();
   }
 
 

File: app/src/processing/app/contrib/LocalContribution.java
Patch:
@@ -349,7 +349,7 @@ public void run() {
                status, 
                ContributionListing.getInstance()); 
       }
-    }).start();
+    }, "Contribution Uninstaller").start();
   }
   
   

File: app/src/processing/app/PreferencesFrame.java
Patch:
@@ -302,7 +302,7 @@ public void run() {
     });
 
     selector = new ColorChooser(dialog, false,
-        Preferences.getColor("run.present.bgcolor"), Language.text("prompt.okay"),
+        Preferences.getColor("run.present.bgcolor"), Language.text("prompt.ok"),
         new ActionListener() {
           @Override
           public void actionPerformed(ActionEvent e) {

File: app/src/processing/app/Base.java
Patch:
@@ -92,7 +92,7 @@ public class Base {
   static private boolean commandLine;
 
   // A single instance of the preferences window
-  Preferences preferencesFrame;
+  PreferencesFrame preferencesFrame;
 
   // A single instance of the library manager window
   ContributionManagerDialog libraryManagerFrame;
@@ -1605,7 +1605,7 @@ File checkSketchFolder(File subfolder, String item) {
    */
   public void handlePrefs() {
     if (preferencesFrame == null) {
-      preferencesFrame = new Preferences(this);
+      preferencesFrame = new PreferencesFrame(this);
     }
     preferencesFrame.showFrame();
   }

File: core/src/processing/data/FloatDict.java
Patch:
@@ -675,6 +675,9 @@ public int size() {
           int right = count - 1;
           while (values[right] != values[right]) {
             right--;
+            if (right == -1) {
+              return 0;  // all values are NaN
+            }
           }
           for (int i = right; i >= 0; --i) {
             if (Float.isNaN(values[i])) {

File: core/src/processing/data/FloatList.java
Patch:
@@ -570,6 +570,9 @@ public int size() {
         int right = count - 1;
         while (data[right] != data[right]) {
           right--;
+          if (right == -1) {  // all values are NaN
+            return 0;
+          }
         }
         for (int i = right; i >= 0; --i) {
           float v = data[i];

File: pdex/src/processing/mode/experimental/VariableInspector.java
Patch:
@@ -74,7 +74,7 @@ public class VariableInspector extends javax.swing.JFrame {
     protected List<VariableNode> declaredThisFields; // declared i.e. non-inherited fields of this
     protected DebugEditor editor; // the editor
     protected Debugger dbg; // the debugger
-    protected List<TreePath> expandedNodes = new ArrayList<>(); // list of expanded tree paths. (using list to maintain the order of expansion)
+    protected List<TreePath> expandedNodes = new ArrayList<TreePath>(); // list of expanded tree paths. (using list to maintain the order of expansion)
     protected boolean p5mode = true; // processing / "advanced" mode flag (currently not used
 
     /**
@@ -515,7 +515,7 @@ public void treeCollapsed(TreeExpansionEvent tee) {
             // first remove all children of collapsed path
             // this makes sure children do not appear before parents in the list.
             // (children can't be expanded before their parents)
-            List<TreePath> removalList = new ArrayList<>();
+            List<TreePath> removalList = new ArrayList<TreePath>();
             for (TreePath path : expandedNodes) {
                 if (path.getParentPath().equals(tee.getPath())) {
                     removalList.add(path);

File: pdex/src/processing/mode/experimental/VariableNode.java
Patch:
@@ -53,7 +53,7 @@ public class VariableNode implements MutableTreeNode {
     protected String type;
     protected String name;
     protected Value value;
-    protected List<MutableTreeNode> children = new ArrayList<>();
+    protected List<MutableTreeNode> children = new ArrayList<MutableTreeNode>();
     protected MutableTreeNode parent;
 
     /**

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -166,7 +166,9 @@ private Contribution getContribution(Contribution contribution) {
 
 
   protected AvailableContribution getAvailableContribution(Contribution info) {
-    for (AvailableContribution advertised : advertisedContributions) {
+    Iterator<AvailableContribution> iter = advertisedContributions.iterator();
+    while(iter.hasNext()) {
+      AvailableContribution advertised = iter.next();
       if (advertised.getType() == info.getType() &&
           advertised.getName().equals(info.getName())) {
         return advertised;

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -98,7 +98,7 @@ public void actionPerformed(ActionEvent arg0) {
           Iterator<Editor> iter = editor.getBase().getEditors().iterator();
           while (iter.hasNext()) {
             Editor ed = iter.next();
-            if (ed.getSketch().isModified() || ed.getSketch().isUntitled()) {
+            if (ed.getSketch().isModified()) {
               int option = Base
                 .showYesNoQuestion(editor, title,
                                    "Unsaved changes have been found",

File: pdex/src/processing/mode/experimental/VariableInspector.java
Patch:
@@ -74,7 +74,7 @@ public class VariableInspector extends javax.swing.JFrame {
     protected List<VariableNode> declaredThisFields; // declared i.e. non-inherited fields of this
     protected DebugEditor editor; // the editor
     protected Debugger dbg; // the debugger
-    protected List<TreePath> expandedNodes = new ArrayList<>(); // list of expanded tree paths. (using list to maintain the order of expansion)
+    protected List<TreePath> expandedNodes = new ArrayList<TreePath>(); // list of expanded tree paths. (using list to maintain the order of expansion)
     protected boolean p5mode = true; // processing / "advanced" mode flag (currently not used
 
     /**
@@ -515,7 +515,7 @@ public void treeCollapsed(TreeExpansionEvent tee) {
             // first remove all children of collapsed path
             // this makes sure children do not appear before parents in the list.
             // (children can't be expanded before their parents)
-            List<TreePath> removalList = new ArrayList<>();
+            List<TreePath> removalList = new ArrayList<TreePath>();
             for (TreePath path : expandedNodes) {
                 if (path.getParentPath().equals(tee.getPath())) {
                     removalList.add(path);

File: pdex/src/processing/mode/experimental/VariableNode.java
Patch:
@@ -53,7 +53,7 @@ public class VariableNode implements MutableTreeNode {
     protected String type;
     protected String name;
     protected Value value;
-    protected List<MutableTreeNode> children = new ArrayList<>();
+    protected List<MutableTreeNode> children = new ArrayList<MutableTreeNode>();
     protected MutableTreeNode parent;
 
     /**

File: app/src/processing/mode/java/PdeKeyListener.java
Patch:
@@ -304,9 +304,11 @@ public boolean keyPressed(KeyEvent event) {
           //textarea.setSelectionStart(origIndex + 1);
           textarea.setSelectionEnd(textarea.getSelectionStop() - spaceCount);
           textarea.setSelectedText("\n");
+          textarea.setCaretPosition(textarea.getCaretPosition() + extraCount + spaceCount);
         } else {
           String insertion = "\n" + spaces(spaceCount);
           textarea.setSelectedText(insertion);
+          textarea.setCaretPosition(textarea.getCaretPosition() + extraCount);
         }
 
         // not gonna bother handling more than one brace

File: app/src/processing/mode/java/PdeKeyListener.java
Patch:
@@ -304,9 +304,11 @@ public boolean keyPressed(KeyEvent event) {
           //textarea.setSelectionStart(origIndex + 1);
           textarea.setSelectionEnd(textarea.getSelectionStop() - spaceCount);
           textarea.setSelectedText("\n");
+          textarea.setCaretPosition(textarea.getCaretPosition() + extraCount + spaceCount);
         } else {
           String insertion = "\n" + spaces(spaceCount);
           textarea.setSelectedText(insertion);
+          textarea.setCaretPosition(textarea.getCaretPosition() + extraCount);
         }
 
         // not gonna bother handling more than one brace

File: app/src/processing/app/Base.java
Patch:
@@ -171,6 +171,7 @@ static private void createAndShowGUI(String[] args) {
     // Make sure a full JDK is installed
     initRequirements();
     
+    // Load the languages
     Language.init();
     
     // run static initialization that grabs all the prefs

File: pdex/src/processing/mode/experimental/ErrorBar.java
Patch:
@@ -149,7 +149,8 @@ synchronized public void updateErrorPoints(final ArrayList<Problem> problems) {
 
 		// NOTE TO SELF: ErrorMarkers are calculated for the present tab only
 		// Error Marker index in the arraylist is LOCALIZED for current tab.
-		// Also, need to do the update in the UI thread to prevent concurrency issues. 
+		// Also, need to do the update in the UI thread via SwingWorker to prevent
+	  // concurrency issues. 
 		final int fheight = this.getHeight();
 		SwingWorker<Object, Object> worker = new SwingWorker<Object, Object>() {
 
@@ -178,7 +179,7 @@ protected Object doInBackground() throws Exception {
             for (Problem problem : problems) {
               if (problem.getTabIndex() == currentTab) {
                 // Ratio of error line to total lines
-                float y = (problem.getLineNumber() - errorCheckerService.defaultImportsOffset)
+                float y = (problem.getLineNumber() + 1)
                     / ((float) totalLines);
                 // Ratio multiplied by height of the error bar
                 y *= fheight - 15; // -15 is just a vertical offset

File: pdex/src/processing/mode/experimental/ErrorCheckerService.java
Patch:
@@ -68,7 +68,7 @@ public class ErrorCheckerService implements Runnable{
   /**
    * Error check happens every sleepTime milliseconds
    */
-  public static final int sleepTime = 1000;
+  public static final int sleepTime = 4000;
 
   /**
    * The amazing eclipse ast parser

File: pdex/src/processing/mode/experimental/ExperimentalMode.java
Patch:
@@ -56,7 +56,7 @@ public class ExperimentalMode extends JavaMode {
   public static final boolean VERBOSE_LOGGING = true;
   //public static final boolean VERBOSE_LOGGING = false;  
   public static final int LOG_SIZE = 512 * 1024; // max log file size (in bytes)
-  public static boolean DEBUG = !true;
+  public static boolean DEBUG = true;
   
   public ExperimentalMode(Base base, File folder) {
     super(base, folder);

File: app/src/processing/app/Sketch.java
Patch:
@@ -749,7 +749,8 @@ protected void calcModified() {
     if (Base.isMacOS()) {
       // http://developer.apple.com/qa/qa2001/qa1146.html
       Object modifiedParam = modified ? Boolean.TRUE : Boolean.FALSE;
-      editor.getRootPane().putClientProperty("windowModified", modifiedParam);
+      // https://developer.apple.com/library/mac/technotes/tn2007/tn2196.html#WINDOW_DOCUMENTMODIFIED
+      editor.getRootPane().putClientProperty("Window.documentModified", modifiedParam);
     }
   }
 

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -1302,9 +1302,10 @@ protected void imageImpl(PImage who,
 
     if (who.modified) {
       if (who.pixels == null) {
-        // This might be a PGraphics that hasn't been drawn to yet, bail out.
+        // This might be a PGraphics that hasn't been drawn to yet.
+        // Can't just bail because the cache has been created above.
         // https://github.com/processing/processing/issues/2208
-        return;
+        who.pixels = new int[who.width * who.height];
       }
       cash.update(who, tint, tintColor);
       who.modified = false;

File: core/src/processing/data/StringList.java
Patch:
@@ -312,7 +312,7 @@ public void insert(int index, String[] values) {
     if (index < 0) {
       throw new IllegalArgumentException("insert() index cannot be negative: it was " + index);
     }
-    if (index >= values.length) {
+    if (index >= data.length) {
       throw new IllegalArgumentException("insert() index " + index + " is past the end of this list");
     }
 

File: core/src/processing/data/FloatList.java
Patch:
@@ -110,6 +110,9 @@ public void clear() {
    * @brief Get an entry at a particular index
    */
   public float get(int index) {
+    if (index >= count) {
+      throw new ArrayIndexOutOfBoundsException(index);
+    }
     return data[index];
   }
 

File: core/src/processing/data/IntList.java
Patch:
@@ -130,6 +130,9 @@ public void clear() {
    * @brief Get an entry at a particular index
    */
   public int get(int index) {
+    if (index >= this.count) {
+      throw new ArrayIndexOutOfBoundsException(index);
+    }
     return data[index];
   }
 

File: core/src/processing/data/StringList.java
Patch:
@@ -113,6 +113,9 @@ public void clear() {
    * @brief Get an entry at a particular index
    */
   public String get(int index) {
+    if (index >= count) {
+      throw new ArrayIndexOutOfBoundsException(index);
+    }
     return data[index];
   }
 

File: core/src/processing/data/StringList.java
Patch:
@@ -309,7 +309,7 @@ public void insert(int index, String[] values) {
     if (index < 0) {
       throw new IllegalArgumentException("insert() index cannot be negative: it was " + index);
     }
-    if (index >= values.length) {
+    if (index >= data.length) {
       throw new IllegalArgumentException("insert() index " + index + " is past the end of this list");
     }
 

File: app/src/processing/app/contrib/ContributionPanel.java
Patch:
@@ -185,6 +185,9 @@ private void addPaneComponents() {
     descriptionBlock.setContentType("text/html");
     setTextStyle(descriptionBlock);
     descriptionBlock.setOpaque(false);
+    if (UIManager.getLookAndFeel().getID().equals("Nimbus")) {
+      descriptionBlock.setBackground(new Color(0, 0, 0, 0));
+    }
 //    stripTextSelectionListeners(descriptionBlock);
 
     descriptionBlock.setBorder(new EmptyBorder(4, 7, 7, 7));

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -125,6 +125,7 @@ public void finished() {
    * Close the window after an OK or Cancel.
    */
   protected void disposeFrame() {
+    status.clear();
     dialog.dispose();
     editor = null;
   }

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -125,6 +125,7 @@ public void finished() {
    * Close the window after an OK or Cancel.
    */
   protected void disposeFrame() {
+    status.clear();
     dialog.dispose();
     editor = null;
   }

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -1216,7 +1216,7 @@ protected boolean exportApplication(File destFolder,
         File jdkFolder = new File(Base.getJavaHome(), "../../..");
         String jdkFolderName = jdkFolder.getCanonicalFile().getName();
         jvmRuntime = "<key>JVMRuntime</key>\n    <string>" + jdkFolderName + "</string>";
-        jdkPath = new File(dotAppFolder, "Contents/PlugIns/" + jdkFolderName + ".jdk").getAbsolutePath();
+        jdkPath = new File(dotAppFolder, "Contents/PlugIns/" + jdkFolderName).getAbsolutePath();
       }
 
       File contentsFolder = new File(dotAppFolder, "Contents");

File: core/src/processing/data/FloatList.java
Patch:
@@ -601,7 +601,7 @@ public void swap(int a, int b) {
 
   /**
    * @webref floatlist:method
-   * @brief Reverse sort, orders values by first digit
+   * @brief Reverse the order of the list elements
    */
   public void reverse() {
     int ii = count - 1;

File: core/src/processing/data/IntList.java
Patch:
@@ -569,7 +569,7 @@ public void swap(int a, int b) {
 
   /**
    * @webref intlist:method
-   * @brief Reverse sort, orders values by first digit
+   * @brief Reverse the order of the list elements
    */
   public void reverse() {
     int ii = count - 1;

File: core/src/processing/data/StringList.java
Patch:
@@ -495,7 +495,7 @@ public void swap(int a, int b) {
 
   /**
    * @webref stringlist:method
-   * @brief To come...
+   * @brief Reverse the order of the list elements
    */
   public void reverse() {
     int ii = count - 1;

File: core/src/processing/data/FloatList.java
Patch:
@@ -601,7 +601,7 @@ public void swap(int a, int b) {
 
   /**
    * @webref floatlist:method
-   * @brief Reverse sort, orders values by first digit
+   * @brief Reverse the order of the list elements
    */
   public void reverse() {
     int ii = count - 1;

File: core/src/processing/data/IntList.java
Patch:
@@ -569,7 +569,7 @@ public void swap(int a, int b) {
 
   /**
    * @webref intlist:method
-   * @brief Reverse sort, orders values by first digit
+   * @brief Reverse the order of the list elements
    */
   public void reverse() {
     int ii = count - 1;

File: core/src/processing/data/StringList.java
Patch:
@@ -495,7 +495,7 @@ public void swap(int a, int b) {
 
   /**
    * @webref stringlist:method
-   * @brief To come...
+   * @brief Reverse the order of the list elements
    */
   public void reverse() {
     int ii = count - 1;

File: java/libraries/sound/src/processing/sound/Noise.java
Patch:
@@ -10,7 +10,6 @@ interface Noise extends SoundObject {
 	public void amp(float amp);
 	public void add(float add);
 	public void pan(float pos);
-	public void set();	
 	public void set(float amp, float add, float pan);
 	public void stop();
 	public void dispose();

File: java/libraries/sound/src/processing/sound/Oscillator.java
Patch:
@@ -11,7 +11,6 @@ interface Oscillator extends SoundObject {
 	public void amp(float amp);
 	public void add(float add);
 	public void pan(float pos);
-	public void set();
 	public void set(float freq, float amp, float add, float pan);
 	public void stop();
 	public void dispose();

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1867,7 +1867,7 @@ protected void bezierVertexCheck(int shape, int vertexCount) {
                                  "must be used before bezierVertex() or quadraticVertex()");
     }
     if (vertexCount == 0) {
-      throw new RuntimeException("vertex() must be used at least once" +
+      throw new RuntimeException("vertex() must be used at least once " +
                                  "before bezierVertex() or quadraticVertex()");
     }
   }

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -3056,6 +3056,7 @@ public void bezierVertex(float x2, float y2, float z2,
   protected void bezierVertexImpl(float x2, float y2, float z2,
                                   float x3, float y3, float z3,
                                   float x4, float y4, float z4) {
+    bezierVertexCheck(shape, inGeo.vertexCount);
     inGeo.setMaterial(fillColor, strokeColor, strokeWeight,
                       ambientColor, specularColor, emissiveColor, shininess);
     inGeo.setNormal(normalX, normalY, normalZ);
@@ -3083,6 +3084,7 @@ public void quadraticVertex(float cx, float cy, float cz,
 
   protected void quadraticVertexImpl(float cx, float cy, float cz,
                                      float x3, float y3, float z3) {
+    bezierVertexCheck(shape, inGeo.vertexCount);
     inGeo.setMaterial(fillColor, strokeColor, strokeWeight,
                       ambientColor, specularColor, emissiveColor, shininess);
     inGeo.setNormal(normalX, normalY, normalZ);
@@ -3109,6 +3111,7 @@ public void curveVertex(float x, float y, float z) {
 
 
   protected void curveVertexImpl(float x, float y, float z) {
+    curveVertexCheck(shape);
     inGeo.setMaterial(fillColor, strokeColor, strokeWeight,
                       ambientColor, specularColor, emissiveColor, shininess);
     inGeo.setNormal(normalX, normalY, normalZ);

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -11579,7 +11579,7 @@ void addBezierVertex(int i) {
     void addQuadraticVertex(int i) {
       pg.curveVertexCount = 0;
       pg.bezierInitCheck();
-      pg.bezierVertexCheck(pg.shape, i);
+      pg.bezierVertexCheck(POLYGON, i);
 
       PMatrix3D draw = pg.bezierDrawMatrix;
 

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -167,7 +167,7 @@ public class PJOGL extends PGL {
 
   /** This countdown latch is used to maintain the synchronization between
    * Processing's drawing thread and JOGL's rendering thread */
-  protected CountDownLatch drawLatch;
+  protected CountDownLatch drawLatch = new CountDownLatch(0);
 
   /** Flag used to do request final display() call to make sure that the
    * buffers are properly swapped.

File: core/src/processing/core/PGraphics.java
Patch:
@@ -2664,8 +2664,8 @@ public void arc(float a, float b, float c, float d,
         }
 
         if (stop - start > TWO_PI) {
-          start = 0;
-          stop = TWO_PI;
+          // don't change start, it is visible in PIE mode
+          stop = start + TWO_PI;
         }
         arcImpl(x, y, w, h, start, stop, mode);
       }

File: core/src/processing/data/TableRow.java
Patch:
@@ -109,4 +109,7 @@ public interface TableRow {
   public int getColumnType(int column);
 
   public int[] getColumnTypes();
+
+  public String getColumnTitle(int column);
+  public String[] getColumnTitles();
 }

File: pdex/src/processing/mode/experimental/ASTGenerator.java
Patch:
@@ -2496,7 +2496,7 @@ protected static ASTNode findLineOfNode(ASTNode node, int lineNumber,
     CompilationUnit root = (CompilationUnit) node.getRoot();
 //    log("Inside "+getNodeAsString(node) + " | " + root.getLineNumber(node.getStartPosition()));
     if (root.getLineNumber(node.getStartPosition()) == lineNumber) {
-      logE(3 + getNodeAsString(node) + " len " + node.getLength());      
+      // logE(3 + getNodeAsString(node) + " len " + node.getLength());      
       return node;
 //      if (offset < node.getLength())
 //        return node;

File: pdex/src/processing/mode/experimental/TextArea.java
Patch:
@@ -774,7 +774,7 @@ protected void showSuggestion(DefaultListModel defListModel,String subWord) {
           - getLineStartOffset(getCaretLine()));
       location.y = lineToY(getCaretLine())
           + getPainter().getFontMetrics().getHeight() + getPainter().getFontMetrics().getDescent();
-      log("TA position: " + location);
+      //log("TA position: " + location);
     } catch (Exception e2) {
       e2.printStackTrace();
       return;
@@ -805,7 +805,7 @@ protected void showSuggestion(DefaultListModel defListModel,String subWord) {
   protected void hideSuggestion() {
     if (suggestion != null) {
       suggestion.hide();
-      log("Suggestion hidden.");
+      //log("Suggestion hidden.");
       suggestion = null;
     }
   }

File: pdex/src/processing/mode/experimental/CompletionPanel.java
Patch:
@@ -106,15 +106,15 @@ public CompletionPanel(final JEditTextArea textarea, int position, String subWor
     textarea.requestFocusInWindow();
     popupMenu.show(textarea, location.x, textarea.getBaseline(0, 0)
         + location.y);
-    log("Suggestion shown: " + System.currentTimeMillis());
+    //log("Suggestion shown: " + System.currentTimeMillis());
   }
 
   public boolean isVisible() {
     return popupMenu.isVisible();
   }
   
   public void setVisible(boolean v){
-    log("Pred popup visible.");
+    //log("Pred popup visible.");
     popupMenu.setVisible(v);
   }
   
@@ -243,7 +243,7 @@ public boolean insertSelection() {
           textarea.setCaretPosition(insertionPosition
               + selectedSuggestion.length());
         }
-        log("Suggestion inserted: " + System.currentTimeMillis());
+        //log("Suggestion inserted: " + System.currentTimeMillis());
         return true;
       } catch (BadLocationException e1) {
         e1.printStackTrace();

File: pdex/src/processing/mode/experimental/TextAreaPainter.java
Patch:
@@ -513,8 +513,8 @@ else if (s.length() == 0)
       String tooltipText = errorCheckerService.getASTGenerator()
           .getLabelForASTNode(line, word, xLS);
 
-      log(errorCheckerService.mainClassOffset + " MCO "
-      + "|" + line + "| offset " + xLS + word + " <= offf: "+off+ "\n");
+//      log(errorCheckerService.mainClassOffset + " MCO "
+//      + "|" + line + "| offset " + xLS + word + " <= offf: "+off+ "\n");
       if (tooltipText != null)
         return tooltipText;
       return word;

File: pdex/src/processing/mode/experimental/ExperimentalMode.java
Patch:
@@ -289,7 +289,7 @@ protected void loadIcons(){
         + "field_protected_obj.png"); 
     localVarIcon = new ImageIcon(iconPath + File.separator
                               + "field_default_obj.png");
-    log("Icons loaded");
+    // log("Icons loaded");
   }
 
     

File: pdex/src/processing/mode/experimental/TextArea.java
Patch:
@@ -246,7 +246,7 @@ protected Object doInBackground() throws Exception {
           // errorCheckerService.runManualErrorCheck();
           // Provide completions only if it's enabled
           if (ExperimentalMode.codeCompletionsEnabled
-              && !ExperimentalMode.ccTriggerEnabled) {
+              && (!ExperimentalMode.ccTriggerEnabled || suggestion.isVisible())) {
             log("[KeyEvent]" + evt2.getKeyChar() + "  |Prediction started: "
                 + System.currentTimeMillis());
             log("Typing: " + fetchPhrase(evt2) + " "

File: pdex/src/processing/mode/experimental/ErrorCheckerService.java
Patch:
@@ -727,7 +727,8 @@ private void calcPDEOffsetsForProbList() {
             .getIProblem().getSourceEnd() - pkgNameOffset;
         log(p.toString());
         log("IProblem Start " + prbStart + ", End " + prbEnd);
-        int javaLineNumber = p.getSourceLineNumber() - 1;
+        int javaLineNumber = p.getSourceLineNumber()
+            - ((compilationUnitState != 2) ? 1 : 2);
         Element lineElement = javaSource.getDefaultRootElement()
             .getElement(javaLineNumber);
         if (lineElement == null) {

File: java/libraries/sound/src/processing/sound/SqrOsc.java
Patch:
@@ -20,8 +20,7 @@ public SqrOsc(PApplet theParent) {
 	}
 	
 	public void play(){
-		//m_nodeId = m_engine.pulsePlay(m_freq, 0.5f, m_amp*2, m_add-1, m_pos);
-		m_nodeId = m_engine.sqrPlay(m_freq, m_amp, m_add-1, m_pos);
+			m_nodeId = m_engine.sqrPlay(m_freq, m_amp, m_add-1, m_pos);
 	};	
 	
 	public void play(float freq, float amp, float add, float pos){

File: pdex/src/processing/mode/experimental/ErrorMessageSimplifier.java
Patch:
@@ -99,7 +99,7 @@ public static String getSimplifiedErrorMessage(Problem problem) {
           result = "Looks like you forgot to close your square bracket \"]\"";
           break;
         case '(':
-          result = "I sense a missing opening square bracket \"(\"";
+          result = "I sense a missing opening parentheses \"(\"";
           break;
         case ')':
           result = "Looks like you forgot to close your parentheses \")\"";
@@ -128,7 +128,7 @@ public static String getSimplifiedErrorMessage(Problem problem) {
           result = "Looks like you forgot to close your square bracket \"]\"";
           break;
         case '(':
-          result = "I sense a missing opening square bracket \"(\"";
+          result = "I sense a missing opening parentheses \"(\"";
           break;
         case ')':
           result = "Looks like you forgot to close your parentheses \")\"";

File: pdex/src/processing/mode/experimental/Problem.java
Patch:
@@ -83,7 +83,8 @@ else if(iProblem.isWarning()) {
     this.tabIndex = tabIndex;
     this.lineNumber = lineNumber;
     this.message = process(iProblem);
-    ErrorMessageSimplifier.getSimplifiedErrorMessage(this);
+    this.message = ErrorMessageSimplifier.getSimplifiedErrorMessage(this);
+    //ErrorMessageSimplifier.getSimplifiedErrorMessage(this);
   }
   
   public void setPDEOffsets(int startOffset, int stopOffset){

File: pdex/src/processing/mode/experimental/Problem.java
Patch:
@@ -83,6 +83,7 @@ else if(iProblem.isWarning()) {
     this.tabIndex = tabIndex;
     this.lineNumber = lineNumber;
     this.message = process(iProblem);
+    ErrorMessageSimplifier.getSimplifiedErrorMessage(this);
   }
   
   public void setPDEOffsets(int startOffset, int stopOffset){

File: java/libraries/sound/src/processing/sound/Pulse.java
Patch:
@@ -8,8 +8,8 @@ public class Pulse implements SoundObject {
 	MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
 	private float m_freq = 440;
-	private float m_width = 0.5;	
-	private float m_amp = 0.5;
+	private float m_width = 0.5f;	
+	private float m_amp = 0.5f;
 	private float m_add = 0;
 	private float m_pos = 0;
 	

File: java/libraries/sound/src/processing/sound/SawOsc.java
Patch:
@@ -8,7 +8,7 @@ public class SawOsc implements Oscillator{
 	private MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
 	private float m_freq = 440;
-	private float m_amp = 0.5;
+	private float m_amp = 0.5f;
 	private float m_add = 0;
 	private float m_pos = 0;
 	

File: java/libraries/sound/src/processing/sound/SinOsc.java
Patch:
@@ -7,7 +7,7 @@ public class SinOsc implements Oscillator {
 	private MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
 	private float m_freq = 440;
-	private float m_amp = 0.5;
+	private float m_amp = 0.5f;
 	private float m_add = 0;
 	private float m_pos = 0;
 	

File: java/libraries/sound/src/processing/sound/SqrOsc.java
Patch:
@@ -8,7 +8,7 @@ public class SqrOsc implements SoundObject {
 	MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
 	private float m_freq = 440;
-	private float m_amp = 0.5;
+	private float m_amp = 0.5f;
 	private float m_add = 0;
 	private float m_pos = 0;
 	

File: java/libraries/sound/src/processing/sound/TriOsc.java
Patch:
@@ -8,7 +8,7 @@ public class TriOsc implements Oscillator{
 	private MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
 	private float m_freq = 440;
-	private float m_amp = 0.5;
+	private float m_amp = 0.5f;
 	private float m_add = 0;
 	private float m_pos = 0;
 	

File: java/libraries/sound/src/processing/sound/WhiteNoise.java
Patch:
@@ -6,7 +6,7 @@ public class WhiteNoise implements SoundObject{
 	PApplet parent;
 	private MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
-	private float m_amp=0.5;
+	private float m_amp=0.5f;
 	private float m_add=0;
 	private float m_pos=0;
 	

File: java/libraries/sound/src/processing/sound/Amplitude.java
Patch:
@@ -17,7 +17,7 @@ public void input(SoundObject input){
 		ptr = m_engine.amplitude(input.returnId());
 	}
 	
-	public float process(){
+	public float analyze(){
 		return m_engine.poll_amplitude(ptr);
 	}
 	/*

File: java/libraries/sound/src/processing/sound/BPF.java
Patch:
@@ -17,12 +17,12 @@ public BPF(PApplet theParent) {
 		m_engine = new MethClaInterface();		
 	}
 	
-	public void play(SoundObject input, float freq, float res){
+	public void process(SoundObject input, float freq, float res){
 		m_freq=freq; m_res=res;
 		m_nodeId = m_engine.bandPassPlay(input.returnId(), m_freq, m_res);
 	}
 	
-	public void play(SoundObject input, float freq){
+	public void process(SoundObject input, float freq){
 		m_freq=freq;
 		m_nodeId = m_engine.bandPassPlay(input.returnId(), m_freq, m_res);
 	}

File: java/libraries/sound/src/processing/sound/Delay.java
Patch:
@@ -18,17 +18,17 @@ public Delay(PApplet theParent) {
 		m_engine = new MethClaInterface();		
 	}
 	
-	public void play(SoundObject input, float maxDelayTime, float delayTime, float feedBack){
+	public void process(SoundObject input, float maxDelayTime, float delayTime, float feedBack){
 		m_maxDelayTime=maxDelayTime; m_delayTime=delayTime; m_feedBack=feedBack;
 		m_nodeId = m_engine.delayPlay(input.returnId(), m_maxDelayTime, m_delayTime, m_feedBack);
 	}
 	
-	public void play(SoundObject input, float maxDelayTime, float delayTime){
+	public void process(SoundObject input, float maxDelayTime, float delayTime){
 		m_maxDelayTime=maxDelayTime; m_delayTime=delayTime; 
 		m_nodeId = m_engine.delayPlay(input.returnId(), m_maxDelayTime, m_delayTime, m_feedBack);
 	}
 
-	public void play(SoundObject input, float maxDelayTime){
+	public void process(SoundObject input, float maxDelayTime){
 		m_maxDelayTime=maxDelayTime; 
 		m_nodeId = m_engine.delayPlay(input.returnId(), m_maxDelayTime, m_delayTime, m_feedBack);
 	}

File: java/libraries/sound/src/processing/sound/FFT.java
Patch:
@@ -17,7 +17,7 @@ public void input(SoundObject input, int fftSize){
 		ptr = m_engine.fft(input.returnId(), fftSize);
 	}
 	
-	public void process(float[] value){
+	public void analyze(float[] value){
 		float[] m_value = m_engine.poll_fft(ptr);
 		int num_samples = Math.min(value.length, m_value.length);
 		for(int i=0; i<num_samples; i++){

File: java/libraries/sound/src/processing/sound/HPF.java
Patch:
@@ -17,12 +17,12 @@ public HPF(PApplet theParent) {
 		m_engine = new MethClaInterface();		
 	}
 	
-	public void play(SoundObject input, float freq, float res){
+	public void process(SoundObject input, float freq, float res){
 		m_freq=freq; m_res=res;
 		m_nodeId = m_engine.highPassPlay(input.returnId(), m_freq, m_res);
 	}
 	
-	public void play(SoundObject input, float freq){
+	public void process(SoundObject input, float freq){
 		m_freq=freq;
 		m_nodeId = m_engine.highPassPlay(input.returnId(), m_freq, m_res);
 	}

File: java/libraries/sound/src/processing/sound/LPF.java
Patch:
@@ -17,12 +17,12 @@ public LPF(PApplet theParent) {
 		m_engine = new MethClaInterface();		
 	}
 	
-	public void play(SoundObject input, float freq, float res){
+	public void process(SoundObject input, float freq, float res){
 		m_freq=freq; m_res=res;
 		m_nodeId = m_engine.lowPassPlay(input.returnId(), m_freq, m_res);
 	}
 	
-	public void play(SoundObject input, float freq){
+	public void process(SoundObject input, float freq){
 		m_freq=freq;
 		m_nodeId = m_engine.lowPassPlay(input.returnId(), m_freq, m_res);
 	}

File: java/libraries/sound/src/processing/sound/Pulse.java
Patch:
@@ -7,9 +7,9 @@ public class Pulse implements SoundObject {
 	PApplet parent;
 	MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
-	private float m_freq = 0;
-	private float m_width = 0;	
-	private float m_amp = 0;
+	private float m_freq = 440;
+	private float m_width = 0.5;	
+	private float m_amp = 0.5;
 	private float m_add = 0;
 	private float m_pos = 0;
 	

File: java/libraries/sound/src/processing/sound/SawOsc.java
Patch:
@@ -7,8 +7,8 @@ public class SawOsc implements Oscillator{
 	PApplet parent;
 	private MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
-	private float m_freq = 0;
-	private float m_amp = 0;
+	private float m_freq = 440;
+	private float m_amp = 0.5;
 	private float m_add = 0;
 	private float m_pos = 0;
 	

File: java/libraries/sound/src/processing/sound/SinOsc.java
Patch:
@@ -6,8 +6,8 @@ public class SinOsc implements Oscillator {
 	PApplet parent;
 	private MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
-	private float m_freq = 0;
-	private float m_amp = 0;
+	private float m_freq = 440;
+	private float m_amp = 0.5;
 	private float m_add = 0;
 	private float m_pos = 0;
 	

File: java/libraries/sound/src/processing/sound/SqrOsc.java
Patch:
@@ -7,8 +7,8 @@ public class SqrOsc implements SoundObject {
 	PApplet parent;
 	MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
-	private float m_freq = 0;
-	private float m_amp = 0;
+	private float m_freq = 440;
+	private float m_amp = 0.5;
 	private float m_add = 0;
 	private float m_pos = 0;
 	

File: java/libraries/sound/src/processing/sound/TriOsc.java
Patch:
@@ -7,8 +7,8 @@ public class TriOsc implements Oscillator{
 	PApplet parent;
 	private MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
-	private float m_freq = 0;
-	private float m_amp = 0;
+	private float m_freq = 440;
+	private float m_amp = 0.5;
 	private float m_add = 0;
 	private float m_pos = 0;
 	

File: java/libraries/sound/src/processing/sound/WhiteNoise.java
Patch:
@@ -6,7 +6,7 @@ public class WhiteNoise implements SoundObject{
 	PApplet parent;
 	private MethClaInterface m_engine;
 	private int[] m_nodeId = {-1,-1};
-	private float m_amp=0;
+	private float m_amp=0.5;
 	private float m_add=0;
 	private float m_pos=0;
 	

File: pdex/src/processing/mode/experimental/ErrorCheckerService.java
Patch:
@@ -218,7 +218,7 @@ public class ErrorCheckerService implements Runnable{
    */
   final Pattern FUNCTION_DECL = Pattern
     .compile("(^|;)\\s*((public|private|protected|final|static)\\s+)*"
-      + "(void|int|float|double|String|char|byte)"
+      + "(void|int|float|double|String|char|byte|boolean)"
       + "(\\s*\\[\\s*\\])?\\s+[a-zA-Z0-9]+\\s*\\(", Pattern.MULTILINE);
   
   protected ErrorMessageSimplifier errorMsgSimplifier;

File: app/src/processing/app/Base.java
Patch:
@@ -298,12 +298,12 @@ private void buildCoreModes() {
 //    try {
 //      Class.forName("processing.mode.java2.DebugMode");
     ModeContribution experimentalContrib =
-      ModeContribution.load(this, getContentFile("modes/experimental"), //$NON-NLS-1$
+      ModeContribution.load(this, getContentFile("modes/ExperimentalMode"), //$NON-NLS-1$
         "processing.mode.experimental.ExperimentalMode"); //$NON-NLS-1$
     if (experimentalContrib != null) {
       Mode experimentalMode = experimentalContrib.getMode();
       //coreModes = new Mode[] { javaMode, androidMode, experimentalMode };
-      coreModes = new Mode[] { javaMode, experimentalMode };
+      coreModes = new Mode[] { experimentalMode, javaMode };
     }
 //    } catch (ClassNotFoundException e) { }
 

File: pdex/src/processing/mode/experimental/ErrorCheckerService.java
Patch:
@@ -751,7 +751,7 @@ private void calcPDEOffsetsForProbList() {
     // Code in pde tabs stored as PlainDocument
     PlainDocument pdeTabs[] = new PlainDocument[editor.getSketch()
         .getCodeCount()];
-    
+    log("calcPDEOffsetsForProbList() mco: " + mainClassOffset);
     try {      
       javaSource.insertString(0, sourceCode, null);
       for (int i = 0; i < pdeTabs.length; i++) {
@@ -803,7 +803,7 @@ private void calcPDEOffsetsForProbList() {
             .getIProblem().getSourceStart()));
 //        astGenerator.highlightPDECode(p.getTabIndex(), p.getLineNumber(),
 //                                      pdeOffset, (prbEnd - prbStart + 1));
-        p.setPDEOffsets(pdeOffset, prbEnd - prbStart);
+        p.setPDEOffsets(pdeOffset, pdeOffset + prbEnd - prbStart);
       }
     } catch (BadLocationException e) {
       // TODO Auto-generated catch block

File: pdex/src/processing/mode/experimental/ASTGenerator.java
Patch:
@@ -240,7 +240,7 @@ protected void setupGUI(){
   /**
    * Toggle AST View window
    */
-  public static final boolean SHOWAST = !true;
+  public static final boolean SHOWAST = true;
 
   protected DefaultMutableTreeNode buildAST(String source, CompilationUnit cu) {
     if (cu == null) {
@@ -2059,6 +2059,8 @@ protected void refactorIt(){
    */
   public void highlightPDECode(int tab, int lineNumber, int lineStartWSOffset,
                                int length) {
+    log("ASTGen.highlightPDECode: T " + tab + ",L: " + lineNumber + ",LSO: "
+        + lineStartWSOffset + ",Len: " + length);
     editor.toFront();
     editor.getSketch().setCurrentCode(tab);
     lineStartWSOffset += editor.ta.getLineStartOffset(lineNumber);

File: pdex/src/processing/mode/experimental/DebugEditor.java
Patch:
@@ -567,7 +567,7 @@ public void actionPerformed(ActionEvent e) {
         });
         debugMenu.add(item);
 
-        problemWindowMenuCB = new JCheckBoxMenuItem("Show Problem Window");
+        /*problemWindowMenuCB = new JCheckBoxMenuItem("Show Problem Window");
         // problemWindowMenuCB.setSelected(true);
         problemWindowMenuCB.addActionListener(new ActionListener() {
 
@@ -583,7 +583,7 @@ public void actionPerformed(ActionEvent e) {
             showProblemListView(XQConsoleToggle.CONSOLE);
           }
         });
-        debugMenu.add(problemWindowMenuCB);
+        debugMenu.add(problemWindowMenuCB);*/
 
         showWarnings = new JCheckBoxMenuItem("Warnings Enabled");
         showWarnings.setSelected(ExperimentalMode.warningsEnabled);

File: java/libraries/net/src/processing/net/Client.java
Patch:
@@ -77,6 +77,7 @@ public Client(PApplet parent, String host, int port) {
       socket = new Socket(this.host, this.port);
       input = socket.getInputStream();
       output = socket.getOutputStream();
+      ip = socket.getInetAddress().getHostAddress();
 
       thread = new Thread(this);
       thread.start();
@@ -123,6 +124,7 @@ public Client(PApplet parent, Socket socket) throws IOException {
 
     input = socket.getInputStream();
     output = socket.getOutputStream();
+    ip = socket.getInetAddress().getHostAddress();
 
     thread = new Thread(this);
     thread.start();
@@ -274,7 +276,7 @@ public boolean active() {
    * @brief Returns the IP address of the machine as a String
    */
   public String ip() {
-    return socket.getInetAddress().getHostAddress();
+    return ip;
   }
 
 

File: java/libraries/net/src/processing/net/Server.java
Patch:
@@ -309,8 +309,8 @@ public void run() {
   public void write(int data) {  // will also cover char
     int index = 0;
     while (index < clientCount) {
-      clients[index].write(data);
       if (clients[index].active()) {
+        clients[index].write(data);
         index++;
       } else {
         removeIndex(index);
@@ -322,8 +322,8 @@ public void write(int data) {  // will also cover char
   public void write(byte data[]) {
     int index = 0;
     while (index < clientCount) {
-      clients[index].write(data);
       if (clients[index].active()) {
+        clients[index].write(data);
         index++;
       } else {
         removeIndex(index);
@@ -335,8 +335,8 @@ public void write(byte data[]) {
   public void write(String data) {
     int index = 0;
     while (index < clientCount) {
-      clients[index].write(data);
       if (clients[index].active()) {
+        clients[index].write(data);
         index++;
       } else {
         removeIndex(index);

File: pdex/src/processing/mode/experimental/DebugEditor.java
Patch:
@@ -921,7 +921,7 @@ public boolean handleSaveAs() {
             vi.setTitle(getSketch().getName());
         }
         //  if file location has changed, update autosaver
-        autosaver.reloadAutosaveDir();
+//        autosaver.reloadAutosaveDir();
         return saved;
     }
     

File: app/src/processing/app/Base.java
Patch:
@@ -2527,7 +2527,8 @@ static public File getJavaHome() {
       //return "Contents/PlugIns/jdk1.7.0_40.jdk/Contents/Home/jre/bin/java";
       File[] plugins = getContentFile("../PlugIns").listFiles(new FilenameFilter() {
         public boolean accept(File dir, String name) {
-          return name.endsWith(".jdk") && dir.isDirectory();
+          return dir.isDirectory() && 
+            name.endsWith(".jdk") && !name.startsWith(".");
         }
       });
       return new File(plugins[0], "Contents/Home/jre");

File: java/libraries/video/src/processing/video/Capture.java
Patch:
@@ -966,7 +966,7 @@ public void rgbFrame(int w, int h, IntBuffer buffer) {
 
   /**
    * Uses a generic object as handler of the capture. This object should have a
-   * captureEvent method that receives a GSMovie argument. This method will
+   * captureEvent method that receives a Capture argument. This method will
    * be called upon a new frame read event.
    *
    */

File: app/src/processing/mode/java/JavaEditor.java
Patch:
@@ -616,7 +616,7 @@ public ColorPreference(String pref) {
       setMaximumSize(new Dimension(30, 20));
       
       addMouseListener(new MouseAdapter() {
-        public void mousePressed(MouseEvent e) {
+        public void mouseReleased(MouseEvent e) {
           Color color = Preferences.getColor(prefName);
           chooser = new ColorChooser(JavaEditor.this, true, color, "Select", ColorPreference.this);
           chooser.show();

File: app/src/processing/app/Preferences.java
Patch:
@@ -430,8 +430,8 @@ public void actionPerformed(ActionEvent e) {
     deletePreviousBox.setBounds(left, top, d.width + 10, d.height);
     right = Math.max(right, left + d.width);
     top += d.height + GUI_BETWEEN;
-
-
+    
+    
 //    // [ ] Use external editor
 //
 //    externalEditorBox = new JCheckBox("Use external editor");

File: app/src/processing/app/syntax/TextAreaPainter.java
Patch:
@@ -771,8 +771,8 @@ protected int paintSyntaxLine(Graphics gfx, Segment line, int x, int y,
 //      int w = fm.charWidth(' ');
       for (int i = 0; i < line.count; i++) {
         gfx.drawChars(line.array, line.offset+i, 1, x, y);
-        x = currentLine.array[currentLine.offset + i] == '\t' ? (int)nextTabStop(x, i) : 
-          x + fm.charWidth(currentLine.array[currentLine.offset+i]);
+        x = line.array[line.offset + i] == '\t' ? (int)nextTabStop(x, i) : 
+          x + fm.charWidth(line.array[line.offset+i]);
       }
       //x += fm.charsWidth(line.array, line.offset, line.count);
       //x += fm.charWidth(' ') * line.count;

File: core/src/processing/core/PApplet.java
Patch:
@@ -4324,6 +4324,8 @@ public String insertFrame(String what) {
    * @param kind either ARROW, CROSS, HAND, MOVE, TEXT, or WAIT
    */
   public void cursor(int kind) {
+    // Swap the HAND cursor because MOVE doesn't seem to be available on OS X
+    // https://github.com/processing/processing/issues/2358
     if (platform == MACOSX && kind == MOVE) {
       kind = HAND;
     }

File: core/src/processing/core/PShapeSVG.java
Patch:
@@ -586,6 +586,8 @@ protected void parsePath() {
       case 'm':  // m - move to (relative)
         cx = cx + PApplet.parseFloat(pathTokens[i + 1]);
         cy = cy + PApplet.parseFloat(pathTokens[i + 2]);
+        movetoX = cx;
+        movetoY = cy;
         parsePathMoveto(cx, cy);
         implicitCommand = 'l';
         i += 3;

File: app/src/processing/app/tools/InstallCommander.java
Patch:
@@ -101,6 +101,7 @@ public void run() {
       String javaRoot = Base.getContentFile(".").getCanonicalPath();
       writer.println("cd \"" + javaRoot + "\" && " +
                      Base.getJavaPath() + 
+                     " -Djna.nosys=true" +
       		           " -cp \"" + classPath + "\"" +
       		           " processing.mode.java.Commander \"$@\"");
       writer.flush();

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -1595,13 +1595,13 @@ protected boolean exportApplication(File destFolder,
       File exeFile = new File(destFolder, sketch.getName() + ".exe");
       config.setString("outfile", exeFile.getAbsolutePath());
       config.setString("dontWrapJar", "true");
-      config.setString("jarPath", jarList[0]);
+      config.setString("jarPath", "lib\\" + jarList[0]);
       
       XML clazzPath = config.addChild("classPath");
       clazzPath.setString("mainClass", sketch.getName());
       for (int i = 1; i < jarList.length; i++) {
         String jarName = jarList[i];
-        clazzPath.addChild("cp").setContent(jarName);
+        clazzPath.addChild("cp").setContent("lib\\" + jarName);
       }
       XML jre = config.addChild("jre");
       jre.setString("minVersion", "1.7.0_40");
@@ -1610,7 +1610,7 @@ protected boolean exportApplication(File destFolder,
         jre.addChild("opt").setContent(opt);
       }
       
-      File buildFile = new File(destFolder + "build.xml");
+      File buildFile = new File(destFolder, "build-launch4j.xml");
       project.save(buildFile);
       buildWindowsLauncher(buildFile, "windows");
 //    PrintWriter pw = PApplet.createWriter(buildFile);

File: core/src/processing/opengl/Texture.java
Patch:
@@ -329,8 +329,7 @@ public void set(int[] pixels, int x, int y, int w, int h, int format) {
       return;
     }
 
-    if (pixels.length == 0) {
-      // Nothing to do (means that w == h == 0) but not an erroneous situation
+    if (pixels.length == 0 || w == 0 || h == 0) {
       return;
     }
 

File: pdex/src/processing/mode/experimental/ASTGenerator.java
Patch:
@@ -240,7 +240,7 @@ protected void setupGUI(){
   /**
    * Toggle AST View window
    */
-  public static final boolean SHOWAST = true;
+  public static final boolean SHOWAST = !true;
 
   protected DefaultMutableTreeNode buildAST(String source, CompilationUnit cu) {
     if (cu == null) {

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -1278,7 +1278,8 @@ protected boolean exportApplication(File destFolder,
         File batFile = new File(destFolder, sketch.getName() + ".bat");
         PrintWriter writer = PApplet.createWriter(batFile);
         writer.println("@echo off");
-        writer.println("java -Djava.ext.dirs=lib -Djava.library.path=lib " + sketch.getName());
+        String javaPath = embedJava ? ".\\java\\bin\\java.exe" : "java";
+        writer.println(javaPath + " -Djava.ext.dirs=lib -Djava.library.path=lib " + sketch.getName());
         writer.flush();
         writer.close();
       } else {

File: core/src/processing/core/PApplet.java
Patch:
@@ -4270,6 +4270,7 @@ public void saveFrame() {
    * @webref output:image
    * @see PApplet#save(String)
    * @see PApplet#createGraphics(int, int, String, String)
+   * @see PApplet#frameCount
    * @param filename any sequence of letters or numbers that ends with either ".tif", ".tga", ".jpg", or ".png"
    */
   public void saveFrame(String filename) {

File: java/libraries/net/src/processing/net/Server.java
Patch:
@@ -267,6 +267,8 @@ public void run() {
         }
       } catch (SocketException e) {
         //thrown when server.close() is called and server is waiting on accept
+        System.err.println("Server SocketException: " + e.getMessage());
+        thread = null;
       } catch (IOException e) {
         //errorMessage("run", e);
         e.printStackTrace();

File: java/libraries/net/src/processing/net/Server.java
Patch:
@@ -265,6 +265,8 @@ public void run() {
             }
           }
         }
+      } catch (SocketException e) {
+        //thrown when server.close() is called and server is waiting on accept
       } catch (IOException e) {
         //errorMessage("run", e);
         e.printStackTrace();

File: pdex/src/processing/mode/experimental/ASTNodeWrapper.java
Patch:
@@ -553,6 +553,7 @@ public boolean highlightNode(ASTGenerator astGenerator){
         logE("Logical error in highLightNode(). Please file a bug report.");
         return false;
       }
+      //TODO: Asteriods example. Spaceship ship; wrong highlight
       Pattern toFind = Pattern.compile("\\b" + nodeName.toString() + "\\b");
       Matcher matcher = toFind.matcher(javaLine);
       int count = 0, index = 0;
@@ -583,6 +584,7 @@ public boolean highlightNode(ASTGenerator astGenerator){
           index += lookingFor.length();
         }
       }
+      
       log("pde lso " + (index - lookingFor.length()));
       
       int lso = astGenerator.editor.ta.getLineStartOffset(pdeOffs[1]);

File: app/src/processing/mode/java/runner/Runner.java
Patch:
@@ -678,7 +678,9 @@ public void run() {
 
             for (Event event : eventSet) {
 //              System.out.println("EventThread.handleEvent -> " + event);
-              if (event instanceof ExceptionEvent) {
+              if (event instanceof VMStartEvent) {
+                vm.resume();
+              } else if (event instanceof ExceptionEvent) {
 //                for (ThreadReference thread : vm.allThreads()) {
 //                  System.out.println("thread : " + thread);
 ////                  thread.suspend();
@@ -710,8 +712,6 @@ public void run() {
     errThread.start();
     outThread.start();
 
-    vm.resume();
-
     // Shutdown begins when event thread terminates
     try {
       if (eventThread != null) eventThread.join();  // is this the problem?

File: java/libraries/net/src/processing/net/Client.java
Patch:
@@ -151,7 +151,7 @@ public Client(PApplet parent, Socket socket) throws IOException {
    * @usage application
    */
   public void stop() {    
-    if (disconnectEventMethod != null) {
+    if (disconnectEventMethod != null && thread != null){
       try {
         disconnectEventMethod.invoke(parent, new Object[] { this });
       } catch (Exception e) {

File: app/src/processing/mode/java/runner/Runner.java
Patch:
@@ -133,7 +133,7 @@ public boolean launchVirtualMachine(boolean presenting) {
 //    String jdwpArg = "-Xrunjdwp:transport=dt_socket,address=" + portStr + ",server=y,suspend=y";
 //    String debugArg = "-Xdebug"; 
     // Newer (Java 1.5+) version that uses JVMTI
-    String jdwpArg = "-agentlib:jdwp=transport=dt_socket,address=" + portStr + ",server=y,suspend=n";
+    String jdwpArg = "-agentlib:jdwp=transport=dt_socket,address=" + portStr + ",server=y,suspend=y";
 
     // Everyone works the same under Java 7 (also on OS X) 
     String[] commandArgs = new String[] { Base.getJavaPath(), jdwpArg };

File: app/src/processing/app/Editor.java
Patch:
@@ -22,6 +22,7 @@
 
 package processing.app;
 
+import processing.app.Base.LastEditorClosePolicy;
 import processing.app.contrib.ToolContribution;
 import processing.app.syntax.*;
 import processing.app.tools.*;
@@ -126,7 +127,7 @@ protected Editor(final Base base, String path, EditorState state, final Mode mod
     // add listener to handle window close box hit event
     addWindowListener(new WindowAdapter() {
         public void windowClosing(WindowEvent e) {
-          base.handleClose(Editor.this, false);
+          base.handleClose(Editor.this, LastEditorClosePolicy.QUIT);
         }
       });
     // don't close the window when clicked, the app will take care
@@ -601,7 +602,7 @@ public void actionPerformed(ActionEvent e) {
     item = Toolkit.newJMenuItem("Close", 'W');
     item.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {
-        base.handleClose(Editor.this, false);
+        base.handleClose(Editor.this, LastEditorClosePolicy.QUIT);
       }
     });
     fileMenu.add(item);

File: app/src/processing/app/Sketch.java
Patch:
@@ -23,6 +23,7 @@
 
 package processing.app;
 
+import processing.app.Base.LastEditorClosePolicy;
 import processing.core.*;
 
 import java.awt.*;
@@ -569,7 +570,7 @@ public void handleDeleteCode() {
         // make a new sketch, and i think this will rebuild the sketch menu
         //editor.handleNewUnchecked();
         //editor.handleClose2();
-        editor.base.handleClose(editor, false);
+        editor.base.handleClose(editor, LastEditorClosePolicy.QUIT);
 
       } else {
         // delete the file

File: app/src/processing/mode/java/runner/Runner.java
Patch:
@@ -133,7 +133,7 @@ public boolean launchVirtualMachine(boolean presenting) {
 //    String jdwpArg = "-Xrunjdwp:transport=dt_socket,address=" + portStr + ",server=y,suspend=y";
 //    String debugArg = "-Xdebug"; 
     // Newer (Java 1.5+) version that uses JVMTI
-    String jdwpArg = "-agentlib:jdwp=transport=dt_socket,address=" + portStr + ",server=y,suspend=y";
+    String jdwpArg = "-agentlib:jdwp=transport=dt_socket,address=" + portStr + ",server=y,suspend=n";
 
     // Everyone works the same under Java 7 (also on OS X) 
     String[] commandArgs = new String[] { Base.getJavaPath(), jdwpArg };

File: app/src/processing/app/contrib/ContributionPanel.java
Patch:
@@ -122,6 +122,7 @@ public void actionPerformed(ActionEvent arg) {
           updateButton.setEnabled(false);
           installRemoveButton.setEnabled(false);
           installProgressBar.setVisible(true);
+          installProgressBar.setIndeterminate(true);
 
           ((LocalContribution) contrib).removeContribution(listPanel.contribManager.editor,
                                                            new JProgressMonitor(installProgressBar) {

File: app/src/processing/app/contrib/ContributionPanel.java
Patch:
@@ -484,7 +484,7 @@ static void stripTextSelectionListeners(JEditorPane editorPane) {
 
   protected void resetInstallProgressBarState() {
     installProgressBar.setString("Starting");
-    installProgressBar.setIndeterminate(true);
+    installProgressBar.setIndeterminate(false);
     installProgressBar.setValue(0);
     installProgressBar.setVisible(false);
   }

File: app/src/processing/app/contrib/ContributionPanel.java
Patch:
@@ -484,7 +484,7 @@ static void stripTextSelectionListeners(JEditorPane editorPane) {
 
   protected void resetInstallProgressBarState() {
     installProgressBar.setString("Starting");
-    installProgressBar.setIndeterminate(true);
+    installProgressBar.setIndeterminate(false);
     installProgressBar.setValue(0);
     installProgressBar.setVisible(false);
   }

File: app/src/processing/app/Toolkit.java
Patch:
@@ -220,6 +220,7 @@ public int compare(Character ch1, Character ch2) {
     // METHOD 1: attempt to assign KDE defaults.
     for (JMenuItem jmi : menu) {
       if (jmi == null) continue;
+      if (jmi.getText() == null) continue;
       jmi.setMnemonic(0); // Reset.
       for (int i = 0; i < kdePreDefStrs.length; i++) {
         String cleanName = nonAAlpha.matcher(jmi.getText()).replaceAll("").toLowerCase();
@@ -236,6 +237,7 @@ public int compare(Character ch1, Character ch2) {
     algorithmicAssaignment:
     for (JMenuItem jmi : menu) {
       if (jmi == null) continue;
+      if (jmi.getText() == null) continue;
       if (jmi.getMnemonic() != 0) continue; // Already assigned.
 
       // The string can't be made lower-case as that would spoil

File: core/src/processing/core/PGraphics.java
Patch:
@@ -7287,14 +7287,15 @@ protected void colorCalc(float x, float y, float z, float a) {
    * Strangely the old version of this code ignored the alpha
    * value. not sure if that was a bug or what.
    * <P>
-   * Note, no need for a bounds check since it's a 32 bit number.
+   * Note, no need for a bounds check for 'argb' since it's a 32 bit number.
+   * Bounds now checked on alpha, however (rev 0225).
    */
   protected void colorCalcARGB(int argb, float alpha) {
     if (alpha == colorModeA) {
       calcAi = (argb >> 24) & 0xff;
       calcColor = argb;
     } else {
-      calcAi = (int) (((argb >> 24) & 0xff) * (alpha / colorModeA));
+      calcAi = (int) (((argb >> 24) & 0xff) * PApplet.constrain((alpha / colorModeA), 0, 1));
       calcColor = (calcAi << 24) | (argb & 0xFFFFFF);
     }
     calcRi = (argb >> 16) & 0xff;

File: app/src/processing/app/SketchCode.java
Patch:
@@ -94,7 +94,7 @@ public SketchCode(File file, String extension) {
 
   protected void makePrettyName() {
     prettyName = file.getName();
-    int dot = prettyName.indexOf('.');
+    int dot = prettyName.lastIndexOf('.');
     prettyName = prettyName.substring(0, dot);
   }
 

File: app/src/processing/app/SketchCode.java
Patch:
@@ -94,7 +94,7 @@ public SketchCode(File file, String extension) {
 
   protected void makePrettyName() {
     prettyName = file.getName();
-    int dot = prettyName.indexOf('.');
+    int dot = prettyName.lastIndexOf('.');
     prettyName = prettyName.substring(0, dot);
   }
 

File: java/libraries/video/src/processing/video/Movie.java
Patch:
@@ -570,7 +570,7 @@ public synchronized void loadPixels() {
       }
       
       // super.loadPixels() sets loaded to true, but in the useBufferSink mode,
-      // the contents of the pixels array is overriden by the buffers coming
+      // the contents of the pixels array is overwritten by the buffers coming
       // from gstreamer, so we don't want PGraphicsOpenGL replacing the OpenGL
       // texture with the pixels.
       setLoaded(false);

File: core/src/processing/core/PApplet.java
Patch:
@@ -2369,7 +2369,9 @@ public void handleDraw() {
           render();
         } else {
           Graphics screen = getGraphics();
-          screen.drawImage(g.image, 0, 0, width, height, null);
+          if (screen != null) {
+            screen.drawImage(g.image, 0, 0, width, height, null);
+          }
         }
       } else {
         repaint();

File: core/src/processing/core/PApplet.java
Patch:
@@ -2369,7 +2369,9 @@ public void handleDraw() {
           render();
         } else {
           Graphics screen = getGraphics();
-          screen.drawImage(g.image, 0, 0, width, height, null);
+          if (screen != null) {
+            screen.drawImage(g.image, 0, 0, width, height, null);
+          }
         }
       } else {
         repaint();

File: app/src/processing/app/Toolkit.java
Patch:
@@ -167,8 +167,6 @@ static public void addDisabledItem(JMenu menu, String title) {
    * Author: George Bateman. Initial work Myer Nore.
    * @param menu
    *          A menu, a list of menus or an array of menu items to set mnemonics for.
-   * @param font
-   *          A font for rendering character widths.
    */
   public static void setMenuMnemonics(JMenuItem... menu) {
     if (Base.isMacOS()) return;

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -369,6 +369,7 @@ protected void initSurface(int antialias) {
       canvasAWT = null;
     }
 
+    pg.parent.defaultSize = false;
     registerListeners();
 
     fboLayerCreated = false;
@@ -384,6 +385,7 @@ protected void reinitSurface() {
     fboLayerCreated = false;
     fboLayerInUse = false;
     firstFrame = true;
+    pg.parent.defaultSize = false;
   }
 
 

File: app/src/processing/mode/java/runner/Runner.java
Patch:
@@ -923,7 +923,7 @@ protected SketchException findException(String message, ObjectReference or, Thre
         ObjectReference ref = (ObjectReference)val;
         method = ((ClassType) ref.referenceType()).concreteMethodByName("getFileName", "()Ljava/lang/String;");
         StringReference strref = (StringReference) ref.invokeMethod(thread, method, new ArrayList<Value>(), ObjectReference.INVOKE_SINGLE_THREADED);
-        String filename = strref.value();
+        String filename = strref == null ? "Unknown Source" : strref.value();
         method = ((ClassType) ref.referenceType()).concreteMethodByName("getLineNumber", "()I");
         IntegerValue intval = (IntegerValue) ref.invokeMethod(thread, method, new ArrayList<Value>(), ObjectReference.INVOKE_SINGLE_THREADED);
         int lineNumber = intval.intValue() - 1;

File: pdex/src/processing/mode/experimental/DebugEditor.java
Patch:
@@ -891,7 +891,7 @@ public void run() {
             }
         }
         //  if file location has changed, update autosaver
-        autosaver.reloadAutosaveDir();
+        // autosaver.reloadAutosaveDir();
         return saved;
     }
 

File: pdex/src/processing/mode/experimental/LineBreakpoint.java
Patch:
@@ -53,6 +53,7 @@ public LineBreakpoint(LineID line, Debugger dbg) {
         this.dbg = dbg;
         theClass = dbg.getClass(className()); // try to get the class immediately, may return null if not yet loaded
         set(); // activate the breakpoint (show highlight, attach if debugger is running)
+        Logger.getLogger(LineBreakpoint.class.getName()).log(Level.INFO, "LBP Created " +toString() + " class: " + theClass, new Object[]{});
     }
 
     /**
@@ -108,6 +109,7 @@ protected void attach() {
             return;
         }
         try {
+          Logger.getLogger(LineBreakpoint.class.getName()).log(Level.WARNING, "BPs of class: {0}", new Object[]{theClass});
             List<Location> locations = theClass.locationsOfLine(javaLine.lineIdx() + 1);
             if (locations.isEmpty()) {
                 Logger.getLogger(LineBreakpoint.class.getName()).log(Level.WARNING, "no location found for line {0} -> {1}", new Object[]{line, javaLine});

File: app/src/processing/mode/java/runner/Runner.java
Patch:
@@ -923,7 +923,7 @@ protected SketchException findException(String message, ObjectReference or, Thre
         ObjectReference ref = (ObjectReference)val;
         method = ((ClassType) ref.referenceType()).concreteMethodByName("getFileName", "()Ljava/lang/String;");
         StringReference strref = (StringReference) ref.invokeMethod(thread, method, new ArrayList<Value>(), ObjectReference.INVOKE_SINGLE_THREADED);
-        String filename = strref.value();
+        String filename = strref == null ? "Unknown Source" : strref.value();
         method = ((ClassType) ref.referenceType()).concreteMethodByName("getLineNumber", "()I");
         IntegerValue intval = (IntegerValue) ref.invokeMethod(thread, method, new ArrayList<Value>(), ObjectReference.INVOKE_SINGLE_THREADED);
         int lineNumber = intval.intValue() - 1;

File: core/src/processing/opengl/PGL.java
Patch:
@@ -590,8 +590,7 @@ protected void endDraw(boolean clear0) {
       disable(BLEND);
       drawTexture(TEXTURE_2D, glColorTex.get(backTex),
                   fboWidth, fboHeight, pg.width, pg.height,
-                                       0, 0, pg.width, pg.height,
-                                       0, 0, pg.width, pg.height);
+                  0, 0, pg.width, pg.height, 0, 0, pg.width, pg.height);
 
       // Swapping front and back textures.
       int temp = frontTex;

File: core/src/processing/opengl/Texture.java
Patch:
@@ -1252,22 +1252,22 @@ protected void copyTexture(Texture tex, int x, int y, int w, int h,
     pg.setFramebuffer(tempFbo);
     // Clear the color buffer to make sure that the alpha channel is set to
     // full transparency
-    pgl.clearColor(0, 0, 0, 0);
+    pgl.clearColor(1, 1, 1, 1);
     pgl.clear(PGL.COLOR_BUFFER_BIT);
     if (scale) {
       // Rendering tex into "this", and scaling the source rectangle
       // to cover the entire destination region.
       pgl.drawTexture(tex.glTarget, tex.glName,
                       tex.glWidth, tex.glHeight, tempFbo.width, tempFbo.height,
-                      x, y, w, h, 0, 0, width, height);
+                      x, y, x + w, y + h, 0, 0, width, height);
 
     } else {
       // Rendering tex into "this" but without scaling so the contents
       // of the source texture fall in the corresponding texels of the
       // destination.
       pgl.drawTexture(tex.glTarget, tex.glName,
                       tex.glWidth, tex.glHeight, tempFbo.width, tempFbo.height,
-                      x, y, w, h, x, y, w, h);
+                      x, y, x + w, y + h, x, y, x + w, y + h);
     }
     pg.popFramebuffer();
 

File: core/src/processing/data/FloatList.java
Patch:
@@ -110,6 +110,9 @@ public void clear() {
    * @brief Get an entry at a particular index
    */
   public float get(int index) {
+    if (index >= count) {
+      throw new ArrayIndexOutOfBoundsException(index);
+    }
     return data[index];
   }
 

File: core/src/processing/data/IntList.java
Patch:
@@ -130,6 +130,9 @@ public void clear() {
    * @brief Get an entry at a particular index
    */
   public int get(int index) {
+    if (index >= this.count) {
+      throw new ArrayIndexOutOfBoundsException(index);
+    }
     return data[index];
   }
 

File: core/src/processing/data/StringList.java
Patch:
@@ -113,6 +113,9 @@ public void clear() {
    * @brief Get an entry at a particular index
    */
   public String get(int index) {
+    if (index >= count) {
+      throw new ArrayIndexOutOfBoundsException(index);
+    }
     return data[index];
   }
 

File: pdex/src/processing/mode/experimental/TextArea.java
Patch:
@@ -205,11 +205,12 @@ public void processKeyEvent(KeyEvent evt) {
       final KeyEvent evt2 = evt;      
       SwingWorker worker = new SwingWorker() {
         protected Object doInBackground() throws Exception {
+          log("[KeyEvent]" + evt2.getKeyChar() + "  |Prediction started: " + System.currentTimeMillis());
           errorCheckerService.runManualErrorCheck();
           // Provide completions only if it's enabled
           if(ExperimentalMode.codeCompletionsEnabled)
-            log(" Typing: " + fetchPhrase(evt2) + " "
-                + (evt2.getKeyChar() == KeyEvent.VK_ENTER));
+            log("Typing: " + fetchPhrase(evt2) + " "
+                + (evt2.getKeyChar() == KeyEvent.VK_ENTER) + " T: " + System.currentTimeMillis());
           return null;
         }
       };

File: pdex/src/processing/mode/experimental/DebugEditor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2012 Martin Leopold <m@martinleopold.com>
+ * Copyright (C) 2012-14 Martin Leopold <m@martinleopold.com> and Manindra Moharana <me@mkmoharana.com>
  *
  * This program is free software; you can redistribute it and/or modify it under
  * the terms of the GNU General Public License as published by the Free Software

File: core/src/processing/data/StringDict.java
Patch:
@@ -63,6 +63,7 @@ public StringDict(BufferedReader reader) {
       if (pieces.length == 2) {
         keys[count] = pieces[0];
         values[count] = pieces[1];
+        indices.put(keys[count], count);
         count++;
       }
     }

File: core/src/processing/opengl/PJOGL.java
Patch:
@@ -278,7 +278,7 @@ protected void initSurface(int antialias) {
       }
     }
 
-    if (canvasAWT != null && canvasNEWT != null) {
+    if (canvasAWT != null || canvasNEWT != null) {
       // Restarting...
       if (canvasAWT != null) {
         sharedCanvasAWT = null;

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -1538,7 +1538,7 @@ protected boolean exportApplication(File destFolder,
       PrintWriter pw = PApplet.createWriter(argsFile);
 
       // Since this is only on Windows, make sure we use Windows CRLF
-      pw.print(runOptions + "\r\n");
+      pw.print(PApplet.join(runOptions.toArray(new String[0]), " ") + "\r\n");
       pw.print(sketch.getName() + "\r\n");
       pw.print(exportClassPath);
 

File: build/shared/tools/MovieMaker/src/processing/app/tools/MovieMaker.java
Patch:
@@ -1347,7 +1347,7 @@ public void run() {
   private JLabel aboutLabel;
   private JButton chooseImageFolderButton;
   private JButton chooseSoundFileButton;
-  private JComboBox compressionBox;
+  private JComboBox<?> compressionBox;
   private JLabel compressionLabel;
 //  private JRadioButton fastStartCompressedRadio;
 //  private JRadioButton fastStartRadio;

File: core/src/processing/opengl/Texture.java
Patch:
@@ -881,7 +881,7 @@ public void disposeSourceBuffer() {
   public void getBufferPixels(int[] pixels) {
     BufferData data = null;
     if (usedBuffers != null && 0 < usedBuffers.size()) {
-      // the last used buffer is the one currently stored in the opengl the
+      // the last used buffer is the one currently stored in the opengl
       // texture
       data = usedBuffers.getLast();
     } else if (bufferCache != null && 0 < bufferCache.size()) {

File: pdex/src/processing/mode/experimental/DebugEditor.java
Patch:
@@ -245,7 +245,7 @@ public void actionPerformed(ActionEvent e) {
         ta.setECSandThemeforTextArea(errorCheckerService, dmode);
         addXQModeUI();    
         debugToolbarEnabled = new AtomicBoolean(false);
-        log("Sketch Path: " + path);        
+        log("Sketch Path: " + path);    
     }
     
     private void addXQModeUI(){
@@ -737,7 +737,6 @@ protected boolean handleOpenInternal(String path) {
         if(autosaver != null)
           autosaver.stop();
         loadAutoSaver();
-        //System.out.println("LOADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD");
         return didOpen;
     }
 
@@ -878,10 +877,11 @@ public boolean handleSaveAs() {
     }
     
     public void loadAutoSaver(){
+      log("Load Auto Saver()");
       if(autosaver != null){
         autosaver.stop();
       }
-      autosaver = new AutoSaveUtil(this, dmode.autoSaveInterval);
+      autosaver = new AutoSaveUtil(this, ExperimentalMode.autoSaveInterval);
       if(!autosaver.checkForPastSave()) {
         autosaver.init();
         return;

File: pdex/src/processing/mode/experimental/ExperimentalMode.java
Patch:
@@ -119,9 +119,9 @@ public File[] getKeywordFiles() {
   
   volatile public static boolean errorCheckEnabled = true, warningsEnabled = true,
       codeCompletionsEnabled = true, debugOutputEnabled = false, errorLogsEnabled = false;
-  public int autoSaveInterval = 5; //in minutes
+  public static int autoSaveInterval = 5; //in minutes
 
-  public final String prefErrorCheck = "pdex.errorCheckEnabled",
+  public static final String prefErrorCheck = "pdex.errorCheckEnabled",
       prefWarnings = "pdex.warningsEnabled",
       prefCodeCompletionEnabled = "pdex.ccEnabled",
       prefDebugOP = "pdex.dbgOutput", prefErrorLogs = "pdex.writeErrorLogs", prefAutoSaveInterval = "pdex.autoSaveInterval";

File: app/src/processing/app/syntax/Brackets.java
Patch:
@@ -90,7 +90,7 @@ private void parse(final String text) {
           readComment(text);
         } else if (d == '*') {
           readMLComment(text);
-        }
+        } else pos--; // Go back because there isn't a comment.
       } else if (c == '"' || c == '\'') {
         readString(text, c);
       } else if (c == '{' || c == '[' || c == '(' || c == '}' || c == ']'

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -3115,7 +3115,7 @@ protected void rectImpl(float x1, float y1, float x2, float y2,
                       ambientColor, specularColor, emissiveColor, shininess);
     inGeo.setNormal(normalX, normalY, normalZ);
     inGeo.addRect(x1, y1, x2, y2, tl, tr, br, bl, stroke);
-    endShape();
+    endShape(CLOSE);
   }
 
 

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -6223,7 +6223,7 @@ protected void endOnscreenDraw() {
 
   protected void initOffscreen() {
     // Getting the context and capabilities from the main renderer.
-    loadTextureImpl(Texture.BILINEAR, false);
+    loadTextureImpl(textureSampling, false);
 
     // In case of reinitialization (for example, when the smooth level
     // is changed), we make sure that all the OpenGL resources associated

File: core/src/processing/opengl/Texture.java
Patch:
@@ -52,13 +52,13 @@ public class Texture implements PConstants {
    * to linear */
   protected static final int LINEAR = 3;
   /** Bilinear sampling: both magnification filtering is set to linear and
-   * minification either to linear-mipmap-nearest (linear interplation is used
+   * minification either to linear-mipmap-nearest (linear interpolation is used
    * within a mipmap, but not between different mipmaps). */
   protected static final int BILINEAR = 4;
   /** Trilinear sampling: magnification filtering set to linear, minification to
    * linear-mipmap-linear, which offers the best mipmap quality since linear
    * interpolation to compute the value in each of two maps and then
-   * interpolates linearly between these two value. */
+   * interpolates linearly between these two values. */
   protected static final int TRILINEAR = 5;
 
 

File: core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -2643,7 +2643,7 @@ protected void tessellateImpl() {
         tessellator.setInGeometry(inGeo);
         tessellator.setTessGeometry(tessGeo);
         tessellator.setFill(fill || image != null);
-        tessellator.setTexCache(null, null, null);
+        tessellator.setTexCache(null, null);
         tessellator.setStroke(stroke);
         tessellator.setStrokeColor(strokeColor);
         tessellator.setStrokeWeight(strokeWeight);

File: pdex/src/processing/mode/experimental/ASTGenerator.java
Patch:
@@ -233,7 +233,7 @@ protected void setupGUI(){
     
   }
   
-  public static final boolean SHOWAST = true;
+  public static final boolean SHOWAST = !true;
 
   protected DefaultMutableTreeNode buildAST(String source, CompilationUnit cu) {
     if (cu == null) {

File: core/src/processing/core/PStyle.java
Patch:
@@ -30,6 +30,8 @@ public class PStyle implements PConstants {
   public int ellipseMode;
   public int shapeMode;
 
+  public int blendMode;
+
   public int colorMode;
   public float colorModeX;
   public float colorModeY;

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -79,7 +79,7 @@ public class PGraphicsOpenGL extends PGraphics {
   static final String MISSING_UV_TEXCOORDS_ERROR =
     "No uv texture coordinates supplied with vertex() call";
   static final String INVALID_FILTER_SHADER_ERROR =
-    "Your shader needs to be of TEXTURE type to be used as a filter";
+    "Your shader cannot be used as a filter because is of type POINT or LINES";
   static final String INCONSISTENT_SHADER_TYPES =
     "The vertex and fragment shaders have different types";
   static final String WRONG_SHADER_TYPE_ERROR =
@@ -5546,7 +5546,7 @@ public void filter(int kind, float param) {
 
   @Override
   public void filter(PShader shader) {
-    if (!shader.isPolyShader() || !shader.supportsTexturing()) {
+    if (!shader.isPolyShader()) {
       PGraphics.showWarning(INVALID_FILTER_SHADER_ERROR);
       return;
     }

File: core/src/processing/core/PApplet.java
Patch:
@@ -6377,7 +6377,7 @@ public Table loadTable(String filename, String options) {
 
 
   /**
-   * @webref input:files
+   * @webref output:files
    * @param table the Table object to save to a file
    * @param filename the filename to which the Table should be saved
    * @see Table

File: app/src/processing/app/Mode.java
Patch:
@@ -1039,9 +1039,8 @@ public boolean validExtension(String what) {
   // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 
   /**
-   * Checks coreLibraries and contribLibraries in 'mode' for a library whose name is 'libName'  
-   * @param mode the mode to check
-   * @param libName the name of the library
+   * Checks coreLibraries and contribLibraries for a library with the specified name  
+   * @param libName the name of the library to find
    * @return the Library or null if not found
    */
   public Library findLibraryByName(String libName) {

File: app/src/processing/app/contrib/LocalContribution.java
Patch:
@@ -47,7 +47,7 @@ public abstract class LocalContribution extends Contribution {
   protected File folder;
   protected HashMap<String, String> properties;
   protected ClassLoader loader;
-  protected List<String> specifiedImports; // "mylib, mylib.util";
+  protected List<String> specifiedImports; // mylib,mylib.util;
 
   public LocalContribution(File folder) {
     this.folder = folder;

File: app/src/processing/mode/java/JavaEditor.java
Patch:
@@ -558,7 +558,7 @@ public void handleImportLibrary(String libraryName) {
     String[] list = lib.getSpecifiedImports(); // ask the library for its imports 
     if (list == null) {
       
-      // Default to old behavior and load every package in the primary jar
+      // Default to old behavior and load each package in the primary jar
       list = Base.packageListFromClassPath(lib.getJarPath());
     }
 

File: app/src/processing/app/Editor.java
Patch:
@@ -899,7 +899,7 @@ public void actionPerformed(ActionEvent e) {
   }
 
 
-  abstract public void handleImportLibrary(String jarPath);
+  abstract public void handleImportLibrary(String name);
 
 
   public JMenu getToolMenu() {

File: core/src/processing/core/PMatrix.java
Patch:
@@ -97,6 +97,8 @@ public void apply(float n00, float n01, float n02, float n03,
   /**
    * Apply another matrix to the left of this one.
    */
+  public void preApply(PMatrix left);
+
   public void preApply(PMatrix2D left);
 
   public void preApply(PMatrix3D left);

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -10197,6 +10197,7 @@ int addLineSegment3D(int i0, int i1, int index, short[] lastInd,
 
       color0 = color = constStroke ? strokeColor : strokeColors[i0];
       weight = constStroke ? strokeWeight : strokeWeights[i0];
+      weight *= transformScale();
 
       tess.setLineVertex(vidx++, strokeVertices, i0, i1, color, +weight/2);
       tess.lineIndices[iidx++] = (short) (count + 0);
@@ -10206,6 +10207,7 @@ int addLineSegment3D(int i0, int i1, int index, short[] lastInd,
 
       color = constStroke ? strokeColor : strokeColors[i1];
       weight = constStroke ? strokeWeight : strokeWeights[i1];
+      weight *= transformScale();
 
       tess.setLineVertex(vidx++, strokeVertices, i1, i0, color, -weight/2);
       tess.lineIndices[iidx++] = (short) (count + 2);
@@ -10433,7 +10435,7 @@ boolean subPixelStroke(float weight) {
     }
 
     boolean noCapsJoins() {
-      // The stroke weight is scaled so it correspons to the current
+      // The stroke weight is scaled so it corresponds to the current
       // "zoom level" being applied on the geometry due to scaling:
       return tess.renderMode == IMMEDIATE &&
              transformScale() * strokeWeight < PGL.MIN_CAPS_JOINS_WEIGHT;

File: core/src/processing/core/PApplet.java
Patch:
@@ -10234,6 +10234,7 @@ public void componentResized(ComponentEvent e) {
               if (!newBounds.equals(oldBounds)) {
                 // the ComponentListener in PApplet will handle calling size()
                 setBounds(newBounds);
+                revalidate();   // let the layout manager do its work
               }
             }
           }

File: app/src/processing/app/Base.java
Patch:
@@ -2351,8 +2351,6 @@ static public File getContentFile(String name) {
       // Path may have URL encoding, so remove it
       String decodedPath = PApplet.urlDecode(path);
       
-      //if (decodedPath.contains(PApplet.platformNames[PApplet.platform]
-      System.out.println("path is " + decodedPath);
       if (decodedPath.contains("/app/bin")) {
         if (Base.isMacOS()) {
           processingRoot = 

File: app/src/processing/app/Editor.java
Patch:
@@ -476,6 +476,8 @@ protected void applyPreferences() {
     textarea.getPainter().updateAppearance();
     textarea.repaint();
     
+    console.updateAppearance();
+    
     // All of this code was specific to using an external editor.  
     /*
 //    // apply the setting for 'use external editor'

File: core/src/processing/core/PMatrix.java
Patch:
@@ -97,6 +97,8 @@ public void apply(float n00, float n01, float n02, float n03,
   /**
    * Apply another matrix to the left of this one.
    */
+  public void preApply(PMatrix left);
+
   public void preApply(PMatrix2D left);
 
   public void preApply(PMatrix3D left);

File: app/src/processing/app/syntax/PdeTextAreaDefaults.java
Patch:
@@ -201,8 +201,8 @@ public PdeTextAreaDefaults(Mode mode) {
     int fontSize = Preferences.getInteger("editor.font.size");
     plainFont = new Font(fontFamily, Font.PLAIN, fontSize);
     boldFont = new Font(fontFamily, Font.BOLD, fontSize);
-    System.out.println("font is " + plainFont.getFamily() + " / " + plainFont.getName() + " / " + plainFont.getFontName() + " / " + plainFont.getPSName());
-//    antialias = Preferences.getBoolean("editor.antialias");
+//    System.out.println("font is " + plainFont.getFamily() + " / " + plainFont.getName() + " / " + plainFont.getFontName() + " / " + plainFont.getPSName());
+    antialias = Preferences.getBoolean("editor.antialias");
 
     styles = new SyntaxStyle[Token.ID_COUNT];
 

File: app/src/processing/app/Base.java
Patch:
@@ -2082,7 +2082,7 @@ static public void showMessage(String title, String message) {
   /**
    * Non-fatal error message with optional stack trace side dish.
    */
-  static public void showWarning(String title, String message, Exception e) {
+  static public void showWarning(String title, String message, Throwable e) {
     if (title == null) title = "Warning";
 
     if (commandLine) {
@@ -2101,7 +2101,7 @@ static public void showWarning(String title, String message, Exception e) {
    */
   static public void showWarningTiered(String title,
                                        String primary, String secondary,
-                                       Exception e) {
+                                       Throwable e) {
     if (title == null) title = "Warning";
 
     final String message = primary + "\n" + secondary;
@@ -3007,7 +3007,7 @@ static public void logf(String message, Object... args) {
   }
 
 
-  static public void log(String message, Exception e) {
+  static public void log(String message, Throwable e) {
     if (DEBUG) {
       System.out.println(message);
       e.printStackTrace();

File: app/src/processing/app/syntax/PdeTextAreaDefaults.java
Patch:
@@ -201,7 +201,7 @@ public PdeTextAreaDefaults(Mode mode) {
     int fontSize = Preferences.getInteger("editor.font.size");
     plainFont = new Font(fontFamily, Font.PLAIN, fontSize);
     boldFont = new Font(fontFamily, Font.BOLD, fontSize);
-    //System.out.println("font is " + plainFont.getFamily() + " / " + plainFont.getName() + " / " + plainFont.getFontName() + " / " + plainFont.getPSName());
+    System.out.println("font is " + plainFont.getFamily() + " / " + plainFont.getName() + " / " + plainFont.getFontName() + " / " + plainFont.getPSName());
 //    antialias = Preferences.getBoolean("editor.antialias");
 
     styles = new SyntaxStyle[Token.ID_COUNT];

File: app/src/processing/app/syntax/SyntaxStyle.java
Patch:
@@ -14,8 +14,8 @@
 
 
 /**
- * A simple text style class. It can specify the color, italic flag,
- * and bold flag of a run of text.
+ * A simple text style class. 
+ * It can specify the color and bold flag of a run of text.
  * @author Slava Pestov
  * @version $Id$
  */
@@ -27,6 +27,7 @@ public class SyntaxStyle {
   private Font lastStyledFont;
   private FontMetrics fontMetrics;
 
+  
   /**
    * Creates a new SyntaxStyle.
    * @param color The text color

File: app/src/processing/app/syntax/TextAreaDefaults.java
Patch:
@@ -41,7 +41,8 @@ public class TextAreaDefaults {
   public boolean paintInvalid;
 
   // moved from TextAreaPainter [fry]
-  public Font font;
+  public Font plainFont;
+  public Font boldFont;
   public Color fgcolor;
   public Color bgcolor;
   public boolean antialias;

File: app/src/processing/app/Base.java
Patch:
@@ -1038,6 +1038,7 @@ public boolean handleClose(Editor editor, boolean modeSwitch) {
     // Close the running window, avoid window boogers with multiple sketches
     editor.internalCloseRunner();
 
+//    System.out.println("editors size is " + editors.size());
     if (editors.size() == 1) {
       // For 0158, when closing the last window /and/ it was already an
       // untitled sketch, just give up and let the user quit.
@@ -1077,6 +1078,7 @@ public boolean handleClose(Editor editor, boolean modeSwitch) {
 
       // This will store the sketch count as zero
       editors.remove(editor);
+//      System.out.println("editors size now " + editors.size());
 //      storeSketches();
 
       // Save out the current prefs state

File: app/src/processing/mode/java/runner/Runner.java
Patch:
@@ -470,7 +470,7 @@ public void run() {
 //            PApplet.println("launchJava stderr:");
 //            PApplet.println(errorStrings);
 //            PApplet.println("launchJava stdout:");
-            PApplet.println(inputStrings);
+            PApplet.printArray(inputStrings);
             
             if (errorStrings != null && errorStrings.length > 1) {
               if (errorStrings[0].indexOf("Invalid maximum heap size") != -1) {

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1224,6 +1224,9 @@ public void normal(float nx, float ny, float nz) {
    * @see PGraphics#textureWrap(int)
    */
   public void textureMode(int mode) {
+    if (mode != IMAGE && mode != NORMAL) {
+      throw new RuntimeException("textureMode() only supports IMAGE and NORMAL");
+    }
     this.textureMode = mode;
   }
 

File: app/src/processing/app/Base.java
Patch:
@@ -53,8 +53,8 @@ public class Base {
 //  static private boolean RELEASE = false;
 
   /** True if heavy debugging error/log messages are enabled */
-//  static public boolean DEBUG = false;
-  static public boolean DEBUG = true;
+  static public boolean DEBUG = false;
+//  static public boolean DEBUG = true;
 
   static HashMap<Integer, String> platformNames =
     new HashMap<Integer, String>();

File: build/shared/tools/MovieMaker/src/processing/app/tools/Chooser.java
Patch:
@@ -8,7 +8,8 @@
 import javax.swing.JFileChooser;
 
 
-public class Chooser {
+/** File chooser additions, cannibalized from PApplet. */
+class Chooser {
   static final boolean useNativeSelect = true;
 
   

File: build/shared/tools/MovieMaker/src/processing/app/tools/MovieMaker.java
Patch:
@@ -645,12 +645,14 @@ private BufferedImage readImage(File file) throws IOException {
     
     BufferedImage image = ImageIO.read(file);
 
+    /*
     String[] loadImageFormats = ImageIO.getReaderFormatNames();
     if (loadImageFormats != null) {
       for (String format : loadImageFormats) {
         System.out.println(format);
       }
     }
+    */
     
     if (image == null) {
       String path = file.getAbsolutePath();

File: app/src/processing/app/Base.java
Patch:
@@ -53,8 +53,8 @@ public class Base {
 //  static private boolean RELEASE = false;
 
   /** True if heavy debugging error/log messages are enabled */
-  static public boolean DEBUG = false;
-//  static public boolean DEBUG = true;
+//  static public boolean DEBUG = false;
+  static public boolean DEBUG = true;
 
   static HashMap<Integer, String> platformNames =
     new HashMap<Integer, String>();

File: core/src/processing/opengl/PShader.java
Patch:
@@ -265,7 +265,7 @@ public void set(String name, int x, int y, int z) {
    * @param w fourth component of the variable to modify. The variable has to be declared with an array/vector type in the shader (i.e.: int[4], vec4)
    */
   public void set(String name, int x, int y, int z, int w) {
-    setUniformImpl(name, UniformValue.INT4, new int[] { x, y, z });
+    setUniformImpl(name, UniformValue.INT4, new int[] { x, y, z, w });
   }
 
 

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -2403,7 +2403,6 @@ public void mousePressed(MouseEvent event) {
       }
 
       if (event.isPopupTrigger() && (popup != null)) {
-        System.out.println("firing popup press");
         popup.show(painter, event.getX(), event.getY());
         return;
       }
@@ -2447,7 +2446,6 @@ public void mousePressed(MouseEvent event) {
     // http://docs.oracle.com/javase/7/docs/api/java/awt/event/MouseEvent.html#isPopupTrigger()
     public void mouseReleased(MouseEvent event) {
       if (event.isPopupTrigger() && (popup != null)) {
-        System.out.println("firing popup release");
         popup.show(painter, event.getX(), event.getY());
       }
     }

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -5953,8 +5953,6 @@ protected void reinitPrimary() {
 
     allocate();
 
-    reapplySettings();
-
     // init perspective projection based on new dimensions
     cameraFOV = 60 * DEG_TO_RAD; // at least for now
     cameraX = width / 2.0f;
@@ -6148,6 +6146,8 @@ protected void setDrawDefaults() {
     pgl.disable(PGL.POLYGON_SMOOTH);
 
     if (sized) {
+      reapplySettings();
+
       // To avoid having garbage in the screen after a resize,
       // in the case background is not called in draw().
       background(backgroundColor);

File: app/src/processing/app/Editor.java
Patch:
@@ -1009,9 +1009,6 @@ protected JMenu addInternalTools(JMenu menu) {
     addToolMenuItem(menu, "processing.app.tools.Archiver");
 
     if (Base.isMacOS()) {
-      if (SerialFixer.isNeeded()) {
-        addToolMenuItem(menu, "processing.app.tools.SerialFixer");
-      }
       addToolMenuItem(menu, "processing.app.tools.InstallCommander");
     }
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -6104,6 +6104,7 @@ public XML loadXML(String filename) {
   public XML loadXML(String filename, String options) {
     try {
       return new XML(createReader(filename), options);
+//      return new XML(createInput(filename), options);
     } catch (Exception e) {
       e.printStackTrace();
       return null;

File: app/src/processing/app/contrib/LocalContribution.java
Patch:
@@ -79,6 +79,7 @@ public LocalContribution(File folder) {
       Base.log("No properties file at " + propertiesFile.getAbsolutePath());
       // We'll need this to be set at a minimum.
       name = folder.getName();
+      categories = defaultCategory();
     }
   }
 

File: pdex/src/processing/mode/experimental/DebugEditor.java
Patch:
@@ -241,6 +241,7 @@ public void actionPerformed(ActionEvent e) {
         ta.setECSandThemeforTextArea(errorCheckerService, dmode);
         addXQModeUI();    
         debugToolbarEnabled = new AtomicBoolean(false);
+        log("Sketch Path: " + path);
     }
     
     private void addXQModeUI(){

File: pdex/src/processing/mode/experimental/CompletionPanel.java
Patch:
@@ -115,6 +115,7 @@ public void mouseClicked(MouseEvent e) {
     return list;
   }
   
+  // possibly defunct
   public boolean updateList(final DefaultListModel items, String newSubword,
                             final Point location, int position) {
     this.subWord = new String(newSubword);

File: app/src/processing/app/Base.java
Patch:
@@ -2393,10 +2393,10 @@ static public String getJavaPath() {
       return getContentFile("../PlugIns/jdk1.7.0_40.jdk/Contents/Home/jre/bin/java").getAbsolutePath();
       
     } else if (isLinux()) {
-      return getContentFile("../java/bin/java").getAbsolutePath();
+      return getContentFile("java/bin/java").getAbsolutePath();
       
     } else if (isWindows()) {
-      return getContentFile("../java/bin/java.exe").getAbsolutePath();      
+      return getContentFile("java/bin/java.exe").getAbsolutePath();      
     } 
     System.err.println("No appropriate platform found. " +
                        "Hoping that Java is in the path.");

File: pdex/src/processing/mode/experimental/TextAreaPainter.java
Patch:
@@ -188,8 +188,8 @@ protected void paintLine(Graphics gfx, TokenMarker tokenMarker, int line,
     try {
       //TODO: This line is causing NPE's randomly ever since I added the toggle for 
       //Java Mode/Debugger toolbar.
-      super.paintLine(gfx, tokenMarker, line, x);
-    } catch (NullPointerException e) {
+      super.paintLine(gfx, tokenMarker, line, x + ta.getGutterWidth());
+    } catch (Exception e) {
       log(e.getMessage());
     }
   }

File: pdex/src/processing/mode/experimental/ASTGenerator.java
Patch:
@@ -779,7 +779,7 @@ protected void trimCandidates(String newWord){
   protected ArrayList<CompletionCandidate> candidates;
   protected String lastPredictedWord = " ";
   //protected AtomicBoolean predictionsEnabled;
-  protected int predictionMinLength = 3;
+  protected int predictionMinLength = 2;
   
   public void preparePredictions(final String word, final int line, final int lineStartNonWSOffset) {
     if(!ExperimentalMode.codeCompletionsEnabled) return;

File: pdex/src/processing/mode/experimental/CompletionPanel.java
Patch:
@@ -92,7 +92,7 @@ public void mouseClicked(MouseEvent e) {
     return list;
   }
   
-  public boolean updateList(final DefaultListModel items, String newSubword, int position){
+  public boolean updateList(final DefaultListModel items, String newSubword, Point location, int position){
     scrollPane.getViewport().removeAll();    
     Dimension dimen = popupMenu.getSize();
     completionList.setModel(items);
@@ -101,7 +101,7 @@ public boolean updateList(final DefaultListModel items, String newSubword, int p
     scrollPane.setViewportView(completionList);
     scrollPane.validate();
     popupMenu.setSize(dimen);
-    
+    popupMenu.setLocation(location);
     this.subWord = new String(newSubword);
     if (subWord.indexOf('.') != -1)
       this.subWord = subWord.substring(subWord.lastIndexOf('.') + 1);

File: core/src/processing/core/PApplet.java
Patch:
@@ -6198,7 +6198,7 @@ public JSONArray parseJSONArray(String input) {
     return new JSONArray(new StringReader(input));
   }
 
-  
+
   /**
    * @webref input:files
    * @param filename name of a file in the data folder or a URL
@@ -6212,7 +6212,7 @@ public JSONArray loadJSONArray(String filename) {
     return new JSONArray(createReader(filename));
   }
 
-  
+
   static public JSONArray loadJSONArray(File file) {
     return new JSONArray(createReader(file));
   }

File: core/src/processing/data/IntDict.java
Patch:
@@ -88,6 +88,7 @@ public IntDict(BufferedReader reader) {
       if (pieces.length == 2) {
         keys[count] = pieces[0];
         values[count] = PApplet.parseInt(pieces[1]);
+        indices.put(pieces[0], count);
         count++;
       }
     }

File: core/src/processing/opengl/PGraphics2D.java
Patch:
@@ -346,7 +346,7 @@ static protected PShapeOpenGL createShapeImpl(PApplet parent,
       shape = new PShapeOpenGL(parent, PShape.PRIMITIVE);
       shape.setKind(QUAD);
     } else if (kind == RECT) {
-      if (len != 4 && len != 5 && len != 8) {
+      if (len != 4 && len != 5 && len != 8 && len != 9) {
         showWarning("Wrong number of parameters");
         return null;
       }

File: core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -217,7 +217,7 @@ static protected PShapeOpenGL createShapeImpl(PApplet parent,
       shape = new PShapeOpenGL(parent, PShape.PRIMITIVE);
       shape.setKind(QUAD);
     } else if (kind == RECT) {
-      if (len != 4 && len != 5 && len != 8) {
+      if (len != 4 && len != 5 && len != 8 && len != 9) {
         showWarning("Wrong number of parameters");
         return null;
       }

File: core/src/processing/core/PShape.java
Patch:
@@ -167,6 +167,8 @@ public class PShape implements PConstants {
   protected float shininess;
 
   protected int sphereDetailU, sphereDetailV;
+  protected int rectMode;
+  protected int ellipseMode;
 
   /** Temporary toggle for whether styles should be honored. */
   protected boolean style = true;

File: core/src/processing/opengl/PGraphics2D.java
Patch:
@@ -353,7 +353,7 @@ static protected PShapeOpenGL createShapeImpl(PApplet parent,
       shape = new PShapeOpenGL(parent, PShape.PRIMITIVE);
       shape.setKind(RECT);
     } else if (kind == ELLIPSE) {
-      if (len != 4) {
+      if (len != 4 && len != 5) {
         showWarning("Wrong number of parameters");
         return null;
       }

File: core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -224,7 +224,7 @@ static protected PShapeOpenGL createShapeImpl(PApplet parent,
       shape = new PShapeOpenGL(parent, PShape.PRIMITIVE);
       shape.setKind(RECT);
     } else if (kind == ELLIPSE) {
-      if (len != 4) {
+      if (len != 4 && len != 5) {
         showWarning("Wrong number of parameters");
         return null;
       }

File: pdex/src/processing/mode/experimental/TextArea.java
Patch:
@@ -179,7 +179,7 @@ public void processKeyEvent(KeyEvent evt) {
     }
       super.processKeyEvent(evt);
       
-    if (evt.getID() == KeyEvent.KEY_TYPED) {
+    if (evt.getID() == KeyEvent.KEY_TYPED && editor.errorCheckerService.getASTGenerator().predictionsEnabled.get()) {
       final KeyEvent evt2 = evt;
       SwingWorker worker = new SwingWorker() {
         protected Object doInBackground() throws Exception {

File: core/src/processing/core/PApplet.java
Patch:
@@ -6261,7 +6261,7 @@ public Table loadTable(String filename) {
   public Table loadTable(String filename, String options) {
     try {
       String optionStr = Table.extensionOptions(true, filename, options);
-      String[] optionList = split(optionStr, ',');
+      String[] optionList = trim(split(optionStr, ','));
 
       Table dictionary = null;
       for (String opt : optionList) {
@@ -10640,7 +10640,7 @@ public void mousePressed(java.awt.event.MouseEvent e) {
     } else {  // if not presenting
       // can't do pack earlier cuz present mode don't like it
       // (can't go full screen with a frame after calling pack)
-      //        frame.pack();  
+      //        frame.pack();
 
       // get insets. get more.
       Insets insets = frame.getInsets();

File: core/src/processing/data/Table.java
Patch:
@@ -306,7 +306,7 @@ protected void parse(InputStream input, String options) throws IOException {
 
     String[] opts = null;
     if (options != null) {
-      opts = PApplet.splitTokens(options, " ,");
+      opts = PApplet.trim(PApplet.split(options, ','));
       for (String opt : opts) {
         if (opt.equals("tsv")) {
           extension = "tsv";
@@ -915,7 +915,7 @@ public boolean save(OutputStream output, String options) {
       throw new IllegalArgumentException("No extension specified for saving this Table");
     }
 
-    String[] opts = PApplet.splitTokens(options, ", ");
+    String[] opts = PApplet.trim(PApplet.split(options, ','));
     // Only option for save is the extension, so we can safely grab the last
     extension = opts[opts.length - 1];
     boolean found = false;

File: core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -117,6 +117,9 @@ static protected PShape loadShapeImpl(PGraphics pg, String filename,
 
     } else if (extension.equals("objz")) {
       try {
+        // TODO: The obj file can be read from the gzip, but if it refers to
+        // a materials file and texture images, those must be contained in the
+        // data folder, cannot be inside the gzip.
         InputStream input =
           new GZIPInputStream(pg.parent.createInput(filename));
         obj = new PShapeOBJ(pg.parent, PApplet.createReader(input));

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -3372,10 +3372,8 @@ protected void textCharModelImpl(FontTexture.TextureInfo info,
     if (textTex.currentTex != info.texIndex) {
       textTex.setTexture(info.texIndex);
     }
-    PImage tex = textTex.getCurrentTexture();
-
     beginShape(QUADS);
-    texture(tex);
+    texture(textTex.getCurrentTexture());
     vertex(x0, y0, info.u0, info.v0);
     vertex(x1, y0, info.u1, info.v0);
     vertex(x1, y1, info.u1, info.v1);

File: core/src/processing/opengl/Texture.java
Patch:
@@ -1235,7 +1235,8 @@ protected void copyTexture(Texture tex, int x, int y, int w, int h,
     // FBO copy:
     PGraphicsOpenGL.pushFramebuffer();
     PGraphicsOpenGL.setFramebuffer(tempFbo);
-    // Clear the color buffer to make sure that the alpha of the
+    // Clear the color buffer to make sure that the alpha channel is set to
+    // full transparency
     pgl.clearColor(0, 0, 0, 0);
     pgl.clear(PGL.COLOR_BUFFER_BIT);
     if (scale) {
@@ -1254,6 +1255,7 @@ protected void copyTexture(Texture tex, int x, int y, int w, int h,
                       x, y, w, h, x, y, w, h);
     }
     PGraphicsOpenGL.popFramebuffer();
+
     updateTexels(x, y, w, h);
   }
 

File: pdex/src/processing/mode/experimental/ExperimentalMode.java
Patch:
@@ -161,7 +161,7 @@ public Color getThemeColor(String attribute, Color defaultValue) {
     return defaultValue;
   }
   
-  protected ImageIcon classIcon, fieldIcon, methodIcon;
+  protected ImageIcon classIcon, fieldIcon, methodIcon, localVarIcon;
   protected void loadIcons(){
     String iconPath = getContentFile("data")
         .getAbsolutePath()
@@ -171,6 +171,8 @@ protected void loadIcons(){
         + "methpub_obj.png");
     fieldIcon = new ImageIcon(iconPath + File.separator
         + "field_protected_obj.png"); 
+    localVarIcon = new ImageIcon(iconPath + File.separator
+                              + "field_default_obj.png");
     log("Icons loaded");
   }
 

File: pdex/src/processing/mode/experimental/TextAreaPainter.java
Patch:
@@ -311,9 +311,9 @@ protected void paintErrorLine(Graphics gfx, int line, int x) {
     // Check if current line contains an error. If it does, find if it's an
     // error or warning
     for (ErrorMarker emarker : errorCheckerService.getEditor().errorBar.errorPoints) {
-      if (emarker.problem.lineNumber == line + 1) {
+      if (emarker.getProblem().lineNumber == line + 1) {
         notFound = false;
-        if (emarker.type == ErrorMarker.Warning) {
+        if (emarker.getType() == ErrorMarker.Warning) {
           isWarning = true;
         }
         break;

File: pdex/src/processing/mode/experimental/ErrorCheckerService.java
Patch:
@@ -424,8 +424,7 @@ private void compileCheck() {
         // .println("Experimental Mode: Loading contributed libraries referenced by import statements.");
         
         // The folder SketchBook/modes/ExperimentalMode/mode
-        File f = new File(Base.getSketchbookModesFolder().getAbsolutePath() + File.separator + "ExperimentalMode"
-            + File.separator + "mode");
+        File f = editor.getMode().getContentFile("mode");
         
         if(!f.exists()) {
         	System.err.println("Could not locate the files required for on-the-fly error checking. Bummer.");

File: pdex/src/processing/mode/experimental/TextArea.java
Patch:
@@ -294,6 +294,7 @@ else if (keyChar == KeyEvent.VK_ESCAPE) {
       word = word.trim();
       if (word.endsWith("."))
         word = word.substring(0, word.length() - 1);
+      if(word.length() > 1)
       errorCheckerService.astGenerator.preparePredictions(word, line
           + errorCheckerService.mainClassOffset,0);
       return word;
@@ -371,6 +372,7 @@ else if (s.charAt(x1) == ']') {
 //    if (word.endsWith("."))
 //      word = word.substring(0, word.length() - 1);
     int lineStartNonWSOffset = 0;
+    if(word.length() > 1)
     errorCheckerService.astGenerator.preparePredictions(word, line
         + errorCheckerService.mainClassOffset,lineStartNonWSOffset);
     //showSuggestionLater();

File: pdex/src/processing/mode/experimental/ExperimentalMode.java
Patch:
@@ -43,7 +43,7 @@ public class ExperimentalMode extends JavaMode {
   public static final boolean VERBOSE_LOGGING = true;
   //public static final boolean VERBOSE_LOGGING = false;  
   public static final int LOG_SIZE = 512 * 1024; // max log file size (in bytes)
-  public static boolean DEBUG = !true;
+  public static boolean DEBUG = true;
   
   public ExperimentalMode(Base base, File folder) {
     super(base, folder);

File: java/libraries/video/src/processing/video/Video.java
Patch:
@@ -212,7 +212,7 @@ static protected void convertToARGB(int[] pixels, int width, int height) {
       for (int y = 0; y < height; y++) {
         for (int x = 0; x < width; x++) {
           int pixel = pixels[p++];
-          pixels[t++] = (pixel >> 8) | ((pixel << 24) & 0xFF000000);
+          pixels[t++] = (pixel >>> 8) | ((pixel << 24) & 0xFF000000);
         }
       }
 

File: java/libraries/video/src/processing/video/Video.java
Patch:
@@ -212,7 +212,7 @@ static protected void convertToARGB(int[] pixels, int width, int height) {
       for (int y = 0; y < height; y++) {
         for (int x = 0; x < width; x++) {
           int pixel = pixels[p++];
-          pixels[t++] = (pixel >> 8) | ((pixel << 24) & 0xFF000000);
+          pixels[t++] = (pixel >>> 8) | ((pixel << 24) & 0xFF000000);
         }
       }
 

File: pdex/src/processing/mode/experimental/ASTGenerator.java
Patch:
@@ -257,9 +257,9 @@ protected void done() {
 						return;
           jtree.setModel(new DefaultTreeModel(codeTree));
           ((DefaultTreeModel) jtree.getModel()).reload();
-          if (!frame2.isVisible()) {
-            frame2.setVisible(true);
-          }
+//          if (!frame2.isVisible()) {
+//            frame2.setVisible(true);
+//          }
 //          if (!frameAutoComp.isVisible()) {
 //
 //            frameAutoComp.setVisible(true);

File: core/src/processing/opengl/PShader.java
Patch:
@@ -597,7 +597,7 @@ protected void consumeUniforms() {
           pgl.uniform3i(loc, v[0], v[1], v[2]);
         } else if (val.type == UniformValue.INT4) {
           int[] v = ((int[])val.value);
-          pgl.uniform4i(loc, v[0], v[1], v[2], v[4]);
+          pgl.uniform4i(loc, v[0], v[1], v[2], v[3]);
         } else if (val.type == UniformValue.FLOAT1) {
           float[] v = ((float[])val.value);
           pgl.uniform1f(loc, v[0]);

File: pdex/src/processing/mode/experimental/CompletionCandidate.java
Patch:
@@ -100,7 +100,7 @@ public CompletionCandidate(Field f) {
     elementName = f.getName();
     type = PREDEF_FIELD;
     label = f.getName() + " : " + f.getType().getSimpleName()
-        + f.getDeclaringClass().getSimpleName();
+        + " - " + f.getDeclaringClass().getSimpleName();
     completionString = elementName;
   }
 

File: pdex/src/processing/mode/experimental/CompletionPanel.java
Patch:
@@ -59,6 +59,7 @@ public boolean isVisible() {
   }
   
   public void setVisible(boolean v){
+    System.out.println("Pred popup visible.");
     popupMenu.setVisible(v);
   }
 

File: app/src/processing/app/Base.java
Patch:
@@ -1384,7 +1384,7 @@ public void actionPerformed(ActionEvent e) {
         }
       }
     }
-    return found;  // actually ignored, but..
+    return found;
   }
 
 

File: pdex/src/processing/mode/experimental/ErrorCheckerService.java
Patch:
@@ -352,6 +352,7 @@ private void syntaxCheck() {
 
     JavaCore.setComplianceOptions(JavaCore.VERSION_1_6, options);
     options.put(JavaCore.COMPILER_SOURCE, JavaCore.VERSION_1_6);
+    options.put(JavaCore.COMPILER_DOC_COMMENT_SUPPORT, JavaCore.ENABLED);
     parser.setCompilerOptions(options);
     cu = (CompilationUnit) parser.createAST(null);
 

File: pdex/src/processing/mode/experimental/ASTGenerator.java
Patch:
@@ -1189,8 +1189,9 @@ private Class findClassIfExists(String className){
         temp = temp.substring(0, temp.length() - 1) + className;
       } else {
         int x = temp.lastIndexOf('.');
-        if (temp.substring(x).equals(className)) {
-          // Well, we've found the class.
+        //System.out.println("fclife " + temp.substring(x + 1));
+        if (!temp.substring(x + 1).equals(className)) {
+          continue;
         }
       }
       tehClass = loadClass(temp);

File: app/src/processing/mode/java/Compiler.java
Patch:
@@ -100,7 +100,7 @@ static public boolean compile(JavaBuild build) throws SketchException {
 //    System.arraycopy(sourceFiles, 0, command, baseCommand.length, sourceCount);
     String[] command = PApplet.concat(baseCommand, sourceFiles);
 
-    //PApplet.println(command);
+//    PApplet.println(command);
 
     try {
       // Load errors into a local StringBuffer

File: app/src/processing/app/syntax/PdeKeywords.java
Patch:
@@ -137,7 +137,8 @@ public byte markTokensImpl(byte token, Segment line, int lineIndex) {
               lastOffset = lastKeyword = mlength;
               break loop;
             }
-            i++;  // http://processing.org/bugs/bugzilla/609.html [jdf] 
+            if(array[i1]!=' ')
+              i++;  // http://processing.org/bugs/bugzilla/609.html [jdf] 
           }
           break;
         default:

File: pdex/src/processing/mode/experimental/TextArea.java
Patch:
@@ -290,7 +290,7 @@ else if (keyChar == KeyEvent.CHAR_UNDEFINED) {
       if (word.endsWith("."))
         word = word.substring(0, word.length() - 1);
       errorCheckerService.astGenerator.updatePredictions(word, line
-          + errorCheckerService.mainClassOffset);
+          + errorCheckerService.mainClassOffset,0);
       return word;
     }
 //    if (keyChar == KeyEvent.VK_BACK_SPACE || keyChar == KeyEvent.VK_DELETE)
@@ -353,8 +353,9 @@ else if (keyChar == KeyEvent.CHAR_UNDEFINED) {
     word = word.trim();
 //    if (word.endsWith("."))
 //      word = word.substring(0, word.length() - 1);
+    int lineStartNonWSOffset = 0;
     errorCheckerService.astGenerator.updatePredictions(word, line
-        + errorCheckerService.mainClassOffset);
+        + errorCheckerService.mainClassOffset,lineStartNonWSOffset);
     //showSuggestionLater();
     return word;
 

File: core/src/processing/opengl/Texture.java
Patch:
@@ -851,14 +851,12 @@ public void copyBufferFromSource(Object natRef, ByteBuffer byteBuf,
 
 
   public void disposeSourceBuffer() {
-    System.out.println(" in disposeSourceBuffer");
     if (usedBuffers == null) return;
 
     while (0 < usedBuffers.size()) {
       BufferData data = null;
       try {
         data = usedBuffers.remove(0);
-        System.out.println("Disposing " + data + " in disposeSourceBuffer");
       } catch (NoSuchElementException ex) {
         PGraphics.showWarning("Cannot remove used buffer");
       }

File: java/libraries/video/src/processing/video/Capture.java
Patch:
@@ -1005,7 +1005,6 @@ protected synchronized void invokeEvent(int w, int h, Buffer buffer) {
       // To handle the situation where read() is not called in the sketch, so 
       // that the native buffers are not being sent to the sinke, and therefore, not disposed
       // by it.
-      System.out.println("  disposing nat buffer before reading new one");
       natBuffer.dispose(); 
     }    
     natBuffer = buffer;

File: java/libraries/video/src/processing/video/Movie.java
Patch:
@@ -770,7 +770,6 @@ protected synchronized void invokeEvent(int w, int h, Buffer buffer) {
       // To handle the situation where read() is not called in the sketch, so 
       // that the native buffers are not being sent to the sinke, and therefore, not disposed
       // by it.
-      System.out.println("  disposing nat buffer before reading new one");
       natBuffer.dispose(); 
     }
     natBuffer = buffer;

File: app/src/processing/app/Base.java
Patch:
@@ -1384,7 +1384,7 @@ public void actionPerformed(ActionEvent e) {
         }
       }
     }
-    return found;  // actually ignored, but..
+    return found;
   }
 
 

File: pdex/src/processing/mode/experimental/ASTGenerator.java
Patch:
@@ -790,7 +790,7 @@ protected void done() {
 //        CompletionCandidate[] candidatesArray = candidates
 //            .toArray(new CompletionCandidate[candidates.size()]);
         errorCheckerService.getEditor().textArea()
-            .showSuggestion(defListModel);
+            .showSuggestion(defListModel,word);
       }
     };
 
@@ -1376,7 +1376,7 @@ protected void done() {
         worker.execute();
       }
     });
-    // TODO: Diable this listner at deployment
+
     btnListOccurrence.addActionListener(new ActionListener() {
 
       @Override

File: pdex/src/processing/mode/experimental/CompletionPanel.java
Patch:
@@ -98,8 +98,9 @@ public boolean updateList(final DefaultListModel items, String newSubword, int p
   public boolean insertSelection() {
     if (completionList.getSelectedValue() != null) {
       try {
-        final String selectedSuggestion = ((CompletionCandidate) completionList
+        String selectedSuggestion = ((CompletionCandidate) completionList
             .getSelectedValue()).getCompletionString().substring(subWord.length());
+        System.err.println(subWord+" <= subword,Inserting suggestion=> " + selectedSuggestion);
         textarea.getDocument().insertString(insertionPosition,
                                             selectedSuggestion, null);
         textarea.setCaretPosition(insertionPosition

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -32,7 +32,7 @@
 
 public class ContributionListing {
   static final String LISTING_URL =
-    "http://processing.org/contrib_generate/contributions.txt"
+    "http://processing.org/contrib_generate/contributions.txt";
 
   static ContributionListing singleInstance;
 

File: core/src/processing/data/FloatList.java
Patch:
@@ -301,7 +301,7 @@ public void insert(int index, int[] values) {
     if (index < 0) {
       throw new IllegalArgumentException("insert() index cannot be negative: it was " + index);
     }
-    if (index >= values.length) {
+    if (index >= data.length) {
       throw new IllegalArgumentException("insert() index " + index + " is past the end of this list");
     }
 
@@ -720,4 +720,4 @@ public String toString() {
     sb.append(" ]");
     return sb.toString();
   }
-}
\ No newline at end of file
+}

File: core/src/processing/data/IntList.java
Patch:
@@ -255,7 +255,7 @@ public void insert(int index, int[] values) {
     if (index < 0) {
       throw new IllegalArgumentException("insert() index cannot be negative: it was " + index);
     }
-    if (index >= values.length) {
+    if (index >= data.length) {
       throw new IllegalArgumentException("insert() index " + index + " is past the end of this list");
     }
 
@@ -725,4 +725,4 @@ public String toString() {
     sb.append(" ]");
     return sb.toString();
   }
-}
\ No newline at end of file
+}

File: pdex/src/processing/mode/experimental/ErrorCheckerService.java
Patch:
@@ -249,7 +249,7 @@ public void run() {
       }
       
       updatePaintedThingys();
-      
+      updateEditorStatus();
       if (pauseThread)
         continue;
       if(textModified.get() == 0)
@@ -717,7 +717,7 @@ public void updatePaintedThingys() {
       textModified.set(5);
       lastTab = currentTab;
       editor.getTextArea().repaint();
-      updateEditorStatus();
+      editor.statusEmpty();
       return;
     }
 

File: pdex/src/processing/mode/experimental/TextArea.java
Patch:
@@ -166,7 +166,7 @@ public void run() {
 
     super.processKeyEvent(evt);
     if (evt.getID() == KeyEvent.KEY_TYPED) {
-      errorCheckerService.textModified.incrementAndGet();
+      errorCheckerService.runManualErrorCheck();
       System.out.println(" Typing: " + fetchPhrase(evt) + " "
           + (evt.getKeyChar() == KeyEvent.VK_BACK_SPACE));
 

File: pdex/src/processing/mode/experimental/ASTNodeWrapper.java
Patch:
@@ -37,8 +37,9 @@ public class ASTNodeWrapper {
    */
   
   public ASTNodeWrapper(ASTNode node) {
-    if (node == null)
+    if (node == null){
       return;
+    }
     this.Node = node;
     label = getNodeAsString(node);
     if (label == null)

File: app/src/processing/app/syntax/PdeKeywords.java
Patch:
@@ -137,7 +137,8 @@ public byte markTokensImpl(byte token, Segment line, int lineIndex) {
               lastOffset = lastKeyword = mlength;
               break loop;
             }
-            i++;  // http://processing.org/bugs/bugzilla/609.html [jdf] 
+            if(array[i1]!=' ')
+              i++;  // http://processing.org/bugs/bugzilla/609.html [jdf] 
           }
           break;
         default:

File: pdex/src/processing/mode/experimental/ASTNodeWrapper.java
Patch:
@@ -112,9 +112,9 @@ public int[] getJavaCodeOffsets(ErrorCheckerService ecs) {
     }
     System.out.println("Altspos " + altStartPos);
     int pdeoffsets[] = getPDECodeOffsets(ecs);
-    String pdeCode = ecs.getPDECode(pdeoffsets[1] - 1).trim();
+    String pdeCode = ecs.getPDECodeAtLine(pdeoffsets[0],pdeoffsets[1] - 1).trim();
     int vals[] = createOffsetMapping(pdeCode,nodeOffset - altStartPos,nodeLength);
-    if(vals != null)
+    if (vals != null)
       return new int[] {
         lineNumber, nodeOffset + vals[0] - altStartPos, vals[1] };
     else
@@ -337,7 +337,7 @@ public int[][] getOffsetMapping(String source){
   
   public int[][] getOffsetMapping(ErrorCheckerService ecs){
     int pdeoffsets[] = getPDECodeOffsets(ecs);
-    String pdeCode = ecs.getPDECode(pdeoffsets[1] - 1).trim();
+    String pdeCode = ecs.getPDECodeAtLine(pdeoffsets[0],pdeoffsets[1] - 1).trim();
     return getOffsetMapping(pdeCode);
   }
  

File: pdex/src/processing/mode/experimental/ErrorCheckerService.java
Patch:
@@ -810,7 +810,8 @@ public int[] JavaToPdeOffsets(int line, int offset){
     return new int[] { codeIndex, x };
   }
   
-  public String getPDECode(int linenumber){
+  public String getPDECodeAtLine(int tab, int linenumber){
+    editor.getSketch().setCurrentCode(tab);
     return editor.ta.getLineText(linenumber);
   }
   

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -5768,6 +5768,7 @@ protected void blendModeImpl() {
 
 
   /**
+   * Not an approved function, this will change or be removed in the future.
    * This utility method returns the texture associated to the renderer's.
    * drawing surface, making sure is updated to reflect the current contents
    * off the screen (or offscreen drawing surface).
@@ -5779,6 +5780,7 @@ public Texture getTexture() {
 
 
   /**
+   * Not an approved function, this will change or be removed in the future.
    * This utility method returns the texture associated to the image.
    * creating and/or updating it if needed.
    *

File: core/src/processing/opengl/PShader.java
Patch:
@@ -563,7 +563,7 @@ protected void consumeUniforms() {
           pgl.uniform3i(loc, v[0], v[1], v[2]);
         } else if (val.type == UniformValue.INT4) {
           int[] v = ((int[])val.value);
-          pgl.uniform4i(loc, v[0], v[1], v[2], v[4]);
+          pgl.uniform4i(loc, v[0], v[1], v[2], v[3]);
         } else if (val.type == UniformValue.FLOAT1) {
           float[] v = ((float[])val.value);
           pgl.uniform1f(loc, v[0]);

File: core/src/processing/opengl/PGL.java
Patch:
@@ -604,6 +604,8 @@ protected void initSurface(int antialias, GLCapabilities reqCaps,
       window.addGLEventListener(listener);
     }
 
+    canvas.setFocusTraversalKeysEnabled(false);
+
     fboLayerCreated = false;
     fboLayerInUse = false;
     firstFrame = true;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1836,7 +1836,6 @@ public void noClip() {
    */
   public void blendMode(int mode) {
     this.blendMode = mode;
-    new Exception("setting blend mode to " + mode).printStackTrace();
     blendModeImpl();
   }
 

File: app/src/processing/app/contrib/ContributionManager.java
Patch:
@@ -147,6 +147,7 @@ public void run() {
 
   static public void refreshInstalled(Editor editor) {
     editor.getMode().rebuildImportMenu();
+    editor.getMode().resetExamples();
     editor.rebuildToolMenu();
   }
 

File: core/src/processing/data/IntDict.java
Patch:
@@ -470,7 +470,7 @@ public int maxValue() {
   }
 
 
-  // return the key for the maximum value
+  // return the key corresponding to the maximum value
   public String maxKey() {
     checkMinMax("maxKey");
     return keys[maxIndex()];
@@ -626,7 +626,7 @@ public void swap(int a, int b) {
    * each key, divided by the total sum. The total for all values will be ~1.0.
    * @return a Dict with the original keys, mapped to their pct of the total
    */
-  public FloatDict getPercentages() {
+  public FloatDict getPercent() {
     double sum = 0;
     for (int value : valueArray()) {
       sum += value;

File: app/src/processing/app/contrib/ContributionManager.java
Patch:
@@ -147,6 +147,7 @@ public void run() {
 
   static public void refreshInstalled(Editor editor) {
     editor.getMode().rebuildImportMenu();
+    editor.getMode().resetExamples();
     editor.rebuildToolMenu();
   }
 

File: app/src/processing/app/Editor.java
Patch:
@@ -1409,6 +1409,8 @@ public void stopCompoundEdit() {
     if (compoundEdit != null) {
       compoundEdit.end();
       undo.addEdit(compoundEdit);
+      caretUndoStack.push(textarea.getCaretPosition());
+      caretRedoStack.clear();
       undoAction.updateUndoState();
       redoAction.updateRedoState();
       compoundEdit = null;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -5539,7 +5539,7 @@ public void frustum(float left, float right,
    * @see PGraphics#camera(float, float, float, float, float, float, float, float, float)
    */
   public void printProjection() {
-    showMethodWarning("printCamera");
+    showMethodWarning("printProjection");
   }
 
 

File: app/src/processing/mode/java/Commander.java
Patch:
@@ -104,7 +104,7 @@ public Commander(String[] args) {
     String pdePath = null;  // path to the .pde file
     String outputPath = null;
     File outputFolder = null;
-    boolean outputSet = false;
+    boolean outputSet = false;  // set an output folder
     boolean force = false;  // replace that no good output folder
 //    String preferencesPath = null;
     int platform = PApplet.platform; // default to this platform

File: core/src/processing/opengl/PGL.java
Patch:
@@ -561,7 +561,7 @@ protected void initSurface(int antialias, GLCapabilities reqCaps,
 
       pg.parent.setLayout(new BorderLayout());
       pg.parent.add(canvasAWT, BorderLayout.CENTER);
-      System.out.println("focus requested result was " + canvasAWT.requestFocusInWindow());
+      canvasAWT.requestFocusInWindow();
 
       pg.parent.removeListeners(pg.parent);
       pg.parent.addListeners(canvasAWT);
@@ -583,7 +583,7 @@ protected void initSurface(int antialias, GLCapabilities reqCaps,
 
       pg.parent.setLayout(new BorderLayout());
       pg.parent.add(canvasNEWT, BorderLayout.CENTER);
-      System.out.println("focus requested result was " + canvasNEWT.requestFocusInWindow());
+      canvasNEWT.requestFocusInWindow();
 
       if (EVENTS_TOOLKIT == NEWT) {
         NEWTMouseListener mouseListener = new NEWTMouseListener();

File: app/src/processing/app/Editor.java
Patch:
@@ -1409,6 +1409,8 @@ public void stopCompoundEdit() {
     if (compoundEdit != null) {
       compoundEdit.end();
       undo.addEdit(compoundEdit);
+      caretUndoStack.push(textarea.getCaretPosition());
+      caretRedoStack.clear();
       undoAction.updateUndoState();
       redoAction.updateRedoState();
       compoundEdit = null;

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -5157,7 +5157,6 @@ protected void saveSurfaceToPixels() {
 
 
   protected void restoreSurfaceFromPixels() {
-    System.out.println("restoreSurfaceFromPixels");
     drawPixels(0, 0, width, height);
   }
 

File: app/src/processing/mode/java/Compiler.java
Patch:
@@ -150,9 +150,9 @@ public void close() { }
       writer.close();
 
       String errorString = errorBuffer.toString();
-      if (errorString.trim().length() != 0) {
-        success = false;
-      }
+//      if (errorString.trim().length() != 0) {
+//        success = false;
+//      }
       BufferedReader reader =
         new BufferedReader(new StringReader(errorString));
       //System.err.println(errorBuffer.toString());

File: app/src/processing/app/Base.java
Patch:
@@ -53,8 +53,8 @@ public class Base {
 //  static private boolean RELEASE = false;
 
   /** True if heavy debugging error/log messages are enabled */
-  //  static public boolean DEBUG = false;
-  static public boolean DEBUG = true;
+  static public boolean DEBUG = false;
+//  static public boolean DEBUG = true;
 
   static HashMap<Integer, String> platformNames =
     new HashMap<Integer, String>();

File: app/src/processing/app/EditorToolbar.java
Patch:
@@ -97,8 +97,6 @@ public EditorToolbar(Editor editor, Base base) {  //, JMenu menu) {
     modeTitle = mode.getTitle();
     modeTextFont = mode.getFont("mode.button.font");
     modeButtonColor = mode.getColor("mode.button.color");
-    
-    System.out.println(modeTextFont.getPSName() + " " + mode.theme.get("mode.button.font"));
 
     if (modeArrow == null) {
       String suffix = Toolkit.highResDisplay() ? "-2x.png" : ".png";

File: core/src/processing/core/PApplet.java
Patch:
@@ -6174,7 +6174,7 @@ public JSONArray loadJSONArray(String filename) {
    * @see PApplet#saveJSONObject(JSONObject, String)
    */
   public boolean saveJSONArray(JSONArray json, String filename) {
-    return saveJSONArray(json, filename);
+    return saveJSONArray(json, filename, null);
   }
 
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -6174,7 +6174,7 @@ public JSONArray loadJSONArray(String filename) {
    * @see PApplet#saveJSONObject(JSONObject, String)
    */
   public boolean saveJSONArray(JSONArray json, String filename) {
-    return saveJSONArray(json, filename);
+    return saveJSONArray(json, filename, null);
   }
 
 

File: core/src/processing/opengl/FrameBuffer.java
Patch:
@@ -149,7 +149,6 @@ public class FrameBuffer implements PConstants {
   @Override
   protected void finalize() throws Throwable {
     try {
-//      PApplet.println("finalize FBO");
       if (!screenFb) {
         if (glFbo != 0) {
           PGraphicsOpenGL.finalizeFrameBufferObject(glFbo, context);

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -7149,10 +7149,11 @@ public void bind() {
       if (pgCurrent.getHint(DISABLE_OPTIMIZED_STROKE)) {
         setUniformValue(scaleLoc, 1.0f, 1.0f, 1.0f);
       } else {
+        float f = PGL.STROKE_DISPLACEMENT;
         if (orthoProjection()) {
-          setUniformValue(scaleLoc, 1.0f, 1.0f, 0.99f);
+          setUniformValue(scaleLoc, 1, 1, f);
         } else {
-          setUniformValue(scaleLoc, 0.99f, 0.99f, 0.99f);
+          setUniformValue(scaleLoc, f, f, f);
         }
       }
 

File: core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -4191,6 +4191,8 @@ protected void renderPolys(PGraphicsOpenGL g, PImage textureImage) {
       }
 
       if (tex != null) {
+        shader.setNormalAttribute(root.glPolyNormal, 3, PGL.FLOAT,
+                                  0, 3 * voffset * PGL.SIZEOF_FLOAT);
         shader.setTexcoordAttribute(root.glPolyTexcoord, 2, PGL.FLOAT,
                                     0, 2 * voffset * PGL.SIZEOF_FLOAT);
         shader.setTexture(tex);

File: app/src/processing/app/contrib/LocalContribution.java
Patch:
@@ -69,7 +69,9 @@ public LocalContribution(File folder) {
       try {
         version = Integer.parseInt(properties.get("version"));
       } catch (NumberFormatException e) {
-        e.printStackTrace();
+        System.err.println("The version number for the “" + name + "” library is not set properly.");
+        System.err.println("Please contact the library author to fix it according to the guidelines.");
+        //e.printStackTrace();
       }
       prettyVersion = properties.get("prettyVersion");
       

File: core/src/processing/data/FloatDict.java
Patch:
@@ -519,6 +519,7 @@ public FloatDict copy() {
     for (int i = 0; i < count; i++) {
       outgoing.indices.put(keys[i], i);
     }
+    outgoing.count = count;
     return outgoing;
   }
 

File: core/src/processing/data/IntDict.java
Patch:
@@ -409,6 +409,7 @@ public IntDict copy() {
     for (int i = 0; i < count; i++) {
       outgoing.indices.put(keys[i], i);
     }
+    outgoing.count = count;
     return outgoing;
   }
 

File: core/src/processing/data/StringDict.java
Patch:
@@ -346,6 +346,7 @@ public StringDict copy() {
     for (int i = 0; i < count; i++) {
       outgoing.indices.put(keys[i], i);
     }
+    outgoing.count = count;
     return outgoing;
   }
 

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -574,7 +574,7 @@ public void setPrimary(boolean primary) {
 
   @Override
   public void setFrameRate(float frameRate) {
-    pgl.setFrameRate(frameRate);
+    pgl.setFps(frameRate);
   }
 
 

File: core/src/processing/opengl/FrameBuffer.java
Patch:
@@ -149,7 +149,7 @@ public class FrameBuffer implements PConstants {
   @Override
   protected void finalize() throws Throwable {
     try {
-      PApplet.println("finalize FBO");
+//      PApplet.println("finalize FBO");
       if (!screenFb) {
         if (glFbo != 0) {
           PGraphicsOpenGL.finalizeFrameBufferObject(glFbo, context);

File: core/src/processing/opengl/Texture.java
Patch:
@@ -153,7 +153,7 @@ public Texture(int width, int height, Object params) {
   @Override
   protected void finalize() throws Throwable {
     try {
-      PApplet.println("finalize texture");
+//      PApplet.println("finalize texture");
       if (glName != 0) {
         PGraphicsOpenGL.finalizeTextureObject(glName, context);
       }

File: core/src/processing/core/PImage.java
Patch:
@@ -3122,7 +3122,9 @@ protected boolean saveImageIO(String path) throws IOException {
       }
       if ((writer = imageioWriter("png")) != null) {
         param = writer.getDefaultWriteParam();
-        metadata = imageioDPI(writer, param, 100);
+        if (false) {
+          metadata = imageioDPI(writer, param, 100);
+        }
       }
       if (writer != null) {
         BufferedOutputStream output =

File: core/src/processing/data/Table.java
Patch:
@@ -3391,7 +3391,7 @@ public StringDict getStringDict(String keyColumnName, String valueColumnName) {
 
   public StringDict getStringDict(int keyColumn, int valueColumn) {
     return new StringDict(getStringColumn(keyColumn),
-                       getStringColumn(valueColumn));
+                          getStringColumn(valueColumn));
   }
 
 

File: core/src/processing/opengl/PGL.java
Patch:
@@ -3289,15 +3289,15 @@ protected void nativeMouseEvent(com.jogamp.newt.event.MouseEvent nativeEvent,
       }
     }
 
-    float peAmount = peAction == MouseEvent.WHEEL ?
-      nativeEvent.getWheelRotation() :
+    int peCount = peAction == MouseEvent.WHEEL ?
+      (int) nativeEvent.getWheelRotation() :
       nativeEvent.getClickCount();
 
     MouseEvent me = new MouseEvent(nativeEvent, nativeEvent.getWhen(),
                                    peAction, peModifiers,
                                    nativeEvent.getX(), nativeEvent.getY(),
                                    peButton,
-                                   peAmount);
+                                   peCount);
 
     pg.parent.postEvent(me);
   }

File: app/src/processing/app/EditorHeader.java
Patch:
@@ -277,7 +277,9 @@ public void paintComponent(Graphics screen) {
 //    menuRight = sizeW - 16;
 //    menuLeft = menuRight - pieces[0][MENU].getWidth(this);
 //    menuLeft = menuRight - 50;  // FIXME!!
-    int tabMax = menuLeft - (MARGIN_WIDTH + SCROLLBAR_WIDTH);
+    int leftover = 
+      ARROW_GAP_WIDTH + ARROW_WIDTH + MARGIN_WIDTH; // + SCROLLBAR_WIDTH;
+    int tabMax = getWidth() - leftover;
 
     // reset all tab positions
     for (Tab tab : tabs) {

File: app/src/processing/app/Mode.java
Patch:
@@ -171,7 +171,7 @@ public ClassLoader getClassLoader() {
   public void setupGUI() {
     try {
       //theme = new Settings(new File(folder, "theme/theme.txt"));
-      theme = new Settings(Base.getContentFile("theme.txt"));
+      theme = new Settings(Base.getContentFile("lib/theme.txt"));
 
       // other things that have to be set explicitly for the defaults
       theme.setColor("run.window.bgcolor", SystemColor.control);

File: app/src/processing/app/tools/InstallCommander.java
Patch:
@@ -63,7 +63,7 @@ public void run() {
                                       "<html> " +
                                       "<head> <style type=\"text/css\">"+
                                       "b { font: 13pt \"Lucida Grande\" }"+
-                                      "p { font: 11pt \"Lucida Grande\"; margin-top: 8px }"+
+                                      "p { font: 11pt \"Lucida Grande\"; margin-top: 8px; width: 300px }"+
                                       "</style> </head>" +
                                       "<b>" + primary + "</b>" +
                                       "<p>" + secondary + "</p>",

File: core/src/processing/data/JSONObject.java
Patch:
@@ -129,7 +129,6 @@ public class JSONObject {
    * undefined.
    */
   private static final class Null {
-
     /**
      * There is only intended to be a single instance of the NULL object,
      * so the clone method returns itself.

File: core/src/processing/data/StringList.java
Patch:
@@ -611,7 +611,7 @@ public void unique() {
   public IntHash getTally() {
     IntHash outgoing = new IntHash();
     for (int i = 0; i < count; i++) {
-      outgoing.inc(data[i]);
+      outgoing.increment(data[i]);
     }
     return outgoing;
   }

File: core/src/processing/data/TableRow.java
Patch:
@@ -25,4 +25,6 @@ public interface TableRow {
   public void setDouble(String columnName, double value);
 
   public int getColumnCount();
+  public int getColumnType(String columnName);
+  public int getColumnType(int column);
 }

File: app/src/processing/app/Base.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-12 Ben Fry and Casey Reas
+  Copyright (c) 2004-13 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: core/src/processing/data/JSONArray.java
Patch:
@@ -107,7 +107,7 @@ public JSONArray() {
    * @param x A JSONTokener
    * @throws JSONException If there is a syntax error.
    */
-  protected JSONArray(JSONTokener x) {
+  public JSONArray(JSONTokener x) {
     this();
     if (x.nextClean() != '[') {
       throw new RuntimeException("A JSONArray text must start with '['");
@@ -332,7 +332,7 @@ public boolean getBoolean(int index) {
    * @throws JSONException If there is no value for the index. or if the
    * value is not a JSONArray
    */
-  public JSONArray getArray(int index) {
+  public JSONArray getJSONArray(int index) {
     Object object = this.get(index);
     if (object instanceof JSONArray) {
       return (JSONArray)object;
@@ -348,7 +348,7 @@ public JSONArray getArray(int index) {
    * @throws JSONException If there is no value for the index or if the
    * value is not a JSONObject
    */
-  public JSONObject getObject(int index) {
+  public JSONObject getJSONObject(int index) {
     Object object = this.get(index);
     if (object instanceof JSONObject) {
       return (JSONObject)object;

File: core/src/processing/data/JSONObject.java
Patch:
@@ -1116,12 +1116,12 @@ public JSONObject setBoolean(String key, boolean value) {
   }
 
 
-  public JSONObject setJSONObject(String key, String value) {
+  public JSONObject setJSONObject(String key, JSONObject value) {
     return put(key, value);
   }
 
 
-  public JSONObject setJSONArray(String key, String value) {
+  public JSONObject setJSONArray(String key, JSONArray value) {
     return put(key, value);
   }
 

File: java/libraries/lwjgl/src/processing/lwjgl/PGL.java
Patch:
@@ -786,7 +786,7 @@ protected boolean getDepthWriteMask() {
 
 
   protected Texture wrapBackTexture() {
-    Texture tex = new Texture(pg.parent);
+    Texture tex = new Texture();
     tex.init(pg.width, pg.height,
              glColorTex.get(backTex), TEXTURE_2D, RGBA,
              fboWidth, fboHeight, NEAREST, NEAREST,
@@ -799,7 +799,7 @@ protected Texture wrapBackTexture() {
 
 
   protected Texture wrapFrontTexture() {
-    Texture tex = new Texture(pg.parent);
+    Texture tex = new Texture();
     tex.init(pg.width, pg.height,
              glColorTex.get(frontTex), TEXTURE_2D, RGBA,
              fboWidth, fboHeight, NEAREST, NEAREST,

File: android/core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -11335,7 +11335,8 @@ boolean subPixelStroke(float weight) {
     boolean noCapsJoins() {
       // The stroke weight is scaled so it correspons to the current
       // "zoom level" being applied on the geometry due to scaling:
-      return transformScale() * strokeWeight < PGL.MIN_CAPS_JOINS_WEIGHT;
+      return tess.renderMode == IMMEDIATE &&
+             transformScale() * strokeWeight < PGL.MIN_CAPS_JOINS_WEIGHT;
     }
 
     float transformScale() {

File: app/src/processing/app/Toolkit.java
Patch:
@@ -226,6 +226,8 @@ static public boolean isRetina() {
           awtToolkit.getDesktopProperty("apple.awt.contentScaleFactor");
         if (prop != null) {
           retinaProp = prop == 2;
+        } else {
+          retinaProp = false;
         }
       }
       return retinaProp;

File: core/src/processing/core/PApplet.java
Patch:
@@ -5874,7 +5874,9 @@ header[17] image descriptor (packed bits)
 
     // where "reversed" means upper-left corner (normal for most of
     // the modernized world, but "reversed" for the tga spec)
-    boolean reversed = (header[17] & 0x20) != 0;
+    //boolean reversed = (header[17] & 0x20) != 0;
+    // https://github.com/processing/processing/issues/1682
+    boolean reversed = (header[17] & 0x20) == 0;
 
     if ((header[2] == 2) || (header[2] == 3)) {  // not RLE encoded
       if (reversed) {

File: core/src/processing/core/PApplet.java
Patch:
@@ -6042,6 +6042,9 @@ public XML loadXML(String filename) {
   }
 
   // version that uses 'options' though there are currently no supported options
+  /**
+   * @nowebref
+   */
   public XML loadXML(String filename, String options) {
     try {
       return new XML(createInput(filename), options);

File: core/src/processing/data/XML.java
Patch:
@@ -42,7 +42,10 @@
  * representing a single node of an XML tree.
  *
  * @webref data:composite
+ * @see PApplet#createXML(String)
  * @see PApplet#loadXML(String)
+ * @see PApplet#parseXML(String)
+ * @see PApplet#saveXML(XML, String)
  */
 public class XML implements Serializable {
 

File: core/src/processing/opengl/PGL.java
Patch:
@@ -624,6 +624,7 @@ protected void initSurface(int antialias) {
 
       pg.parent.setLayout(new BorderLayout());
       pg.parent.add(canvasAWT, BorderLayout.CENTER);
+      pg.parent.validate();
       pg.parent.removeListeners(pg.parent);
       pg.parent.addListeners(canvasAWT);
 
@@ -641,6 +642,7 @@ protected void initSurface(int antialias) {
 
       pg.parent.setLayout(new BorderLayout());
       pg.parent.add(canvasNEWT, BorderLayout.CENTER);
+      pg.parent.validate();
 
       if (events == NEWT) {
         NEWTMouseListener mouseListener = new NEWTMouseListener();

File: core/src/processing/data/Table.java
Patch:
@@ -661,7 +661,7 @@ public boolean save(OutputStream output, String options) {
           }
         } else {
           throw new IllegalArgumentException("'" + opt + "' not understood. " +
-                                             "Only csv, tsv, and html are " +
+                                             "Only csv, tsv, bin, and html are " +
                                              "accepted as save parameters");
         }
       }
@@ -1414,7 +1414,7 @@ public int lastRowIndex() {
   public void setRowCount(int newCount) {
     if (newCount != rowCount) {
       if (newCount > 1000000) {
-        System.out.println("setting row count to " + PApplet.nfc(newCount));
+        System.out.print("Note: setting maximum row count to " + PApplet.nfc(newCount));
       }
       long t = System.currentTimeMillis();
       for (int col = 0; col < columns.length; col++) {
@@ -1436,7 +1436,7 @@ public void setRowCount(int newCount) {
       }
       if (newCount > 1000000) {
         int ms = (int) (System.currentTimeMillis() - t);
-        System.out.println("  resize took " + PApplet.nfc(ms) + " ms");
+        System.out.println(" (resize took " + PApplet.nfc(ms) + " ms)");
       }
     }
     rowCount = newCount;

File: core/src/processing/opengl/PGL.java
Patch:
@@ -684,10 +684,8 @@ protected void deleteSurface() {
     if (canvasAWT != null) {
       canvasAWT.removeGLEventListener(listener);
       pg.parent.removeListeners(canvasAWT);
-      pg.parent.remove(canvasAWT);
     } else if (canvasNEWT != null) {
       window.removeGLEventListener(listener);
-      pg.parent.remove(canvasNEWT);
     }
 
     fboLayerCreated = false;

File: core/src/processing/opengl/PGL.java
Patch:
@@ -61,7 +61,6 @@
 import com.jogamp.newt.event.InputEvent;
 import com.jogamp.newt.opengl.GLWindow;
 import com.jogamp.opengl.FBObject;
-import com.jogamp.opengl.util.AnimatorBase;
 
 /**
  * Processing-OpenGL abstraction layer.
@@ -150,6 +149,7 @@ public class PGL {
       events = AWT;
     } else if (PApplet.platform == PConstants.LINUX) {
       toolkit = NEWT; // AWT extremely broken on Linux?
+      events = NEWT;
     } else if (PApplet.platform == PConstants.OTHER) {
       toolkit = NEWT; // NEWT should work on the Raspberry pi
       events = NEWT;

File: app/src/processing/app/contrib/LocalContribution.java
Patch:
@@ -293,7 +293,7 @@ void removeContribution(final Editor editor,
     new Thread(new Runnable() {
       public void run() {
         remove(editor,
-               (pm != null) ? pm : new NullProgressMonitor(),
+               pm,
                status, 
                ContributionListing.getInstance()); 
       }

File: android/core/src/processing/opengl/PGraphics2D.java
Patch:
@@ -389,7 +389,7 @@ static protected PShapeOpenGL createShapeImpl(PApplet parent,
       shape = new PShapeOpenGL(parent, PShape.PRIMITIVE);
       shape.setKind(ELLIPSE);
     } else if (kind == ARC) {
-      if (len != 6) {
+      if (len != 6 && len != 7) {
         showWarning("Wrong number of parameters");
         return null;
       }

File: android/core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -260,7 +260,7 @@ static protected PShapeOpenGL createShapeImpl(PApplet parent,
       shape = new PShapeOpenGL(parent, PShape.PRIMITIVE);
       shape.setKind(ELLIPSE);
     } else if (kind == ARC) {
-      if (len != 6) {
+      if (len != 6 && len != 7) {
         showWarning("Wrong number of parameters");
         return null;
       }

File: android/core/src/processing/opengl/Texture.java
Patch:
@@ -328,7 +328,6 @@ public void set(int[] pixels, int x, int y, int w, int h) {
 
   public void set(int[] pixels, int x, int y, int w, int h, int format) {
     if (pixels == null) {
-      pixels = null;
       PGraphics.showWarning("The pixels array is null.");
       return;
     }
@@ -1283,6 +1282,9 @@ protected void copyTexture(Texture tex, int x, int y, int w, int h,
     // FBO copy:
     pg.pushFramebuffer();
     pg.setFramebuffer(tempFbo);
+    // Clear the color buffer to make sure that the alpha of the
+    pgl.clearColor(0, 0, 0, 0);
+    pgl.clear(PGL.COLOR_BUFFER_BIT);
     if (scale) {
       // Rendering tex into "this", and scaling the source rectangle
       // to cover the entire destination region.

File: app/src/processing/app/contrib/ContributionManagerDialog.java
Patch:
@@ -34,15 +34,14 @@
 import javax.swing.event.*;
 
 import processing.app.*;
-import processing.app.contrib.ContributionListing.Filter;
 
 
 public class ContributionManagerDialog {
   static final String ANY_CATEGORY = "All";
 
   JFrame dialog;
   String title;
-  Filter filter;
+  ContributionFilter filter;
   JComboBox categoryChooser;
   JScrollPane scrollPane;
   ContributionListPanel contributionListPanel;
@@ -58,10 +57,11 @@ public class ContributionManagerDialog {
   public ContributionManagerDialog(ContributionType type) {
     if (type == null) {
       title = "Update Manager";
+      filter = ContributionType.createUpdateFilter();
     } else {
       title = type.getTitle() + " Manager";
+      filter = type.createFilter();    
     }
-    filter = ContributionListing.createFilter(type);    
     contribListing = ContributionListing.getInstance();
     contributionListPanel = new ContributionListPanel(this, filter);
     contribListing.addContributionListener(contributionListPanel);

File: core/src/processing/opengl/PGL.java
Patch:
@@ -3237,7 +3237,7 @@ public void reshape(GLAutoDrawable adrawable, int x, int y, int w, int h) {
 
   protected void nativeMouseEvent(com.jogamp.newt.event.MouseEvent nativeEvent,
                                   int peAction) {
-    if (!hasFocus) return;
+//    if (!hasFocus) return;
     int modifiers = nativeEvent.getModifiers();
     int peModifiers = modifiers &
                       (InputEvent.SHIFT_MASK |

File: core/src/processing/opengl/Texture.java
Patch:
@@ -328,7 +328,6 @@ public void set(int[] pixels, int x, int y, int w, int h) {
 
   public void set(int[] pixels, int x, int y, int w, int h, int format) {
     if (pixels == null) {
-      pixels = null;
       PGraphics.showWarning("The pixels array is null.");
       return;
     }
@@ -1283,6 +1282,9 @@ protected void copyTexture(Texture tex, int x, int y, int w, int h,
     // FBO copy:
     pg.pushFramebuffer();
     pg.setFramebuffer(tempFbo);
+    // Clear the color buffer to make sure that the alpha of the
+    pgl.clearColor(0, 0, 0, 0);
+    pgl.clear(PGL.COLOR_BUFFER_BIT);
     if (scale) {
       // Rendering tex into "this", and scaling the source rectangle
       // to cover the entire destination region.

File: core/src/processing/opengl/PGraphics2D.java
Patch:
@@ -389,7 +389,7 @@ static protected PShapeOpenGL createShapeImpl(PApplet parent,
       shape = new PShapeOpenGL(parent, PShape.PRIMITIVE);
       shape.setKind(ELLIPSE);
     } else if (kind == ARC) {
-      if (len != 6) {
+      if (len != 6 && len != 7) {
         showWarning("Wrong number of parameters");
         return null;
       }

File: core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -260,7 +260,7 @@ static protected PShapeOpenGL createShapeImpl(PApplet parent,
       shape = new PShapeOpenGL(parent, PShape.PRIMITIVE);
       shape.setKind(ELLIPSE);
     } else if (kind == ARC) {
-      if (len != 6) {
+      if (len != 6 && len != 7) {
         showWarning("Wrong number of parameters");
         return null;
       }

File: core/src/processing/data/TableHTML.java
Patch:
@@ -187,7 +187,7 @@ void beginTableRow() {
   void beginTableData(int advance) {
     colAdvance = advance;
     // expand the number of columns if necessary
-    checkColumn(colIndex + colAdvance - 1);
+    ensureColumn(colIndex + colAdvance - 1);
 //    if (colIndex + colAdvance > data[0].length) {
 //      int needed = (colIndex + colAdvance) * 2;
 //      for (int i = 0; i < data.length; i++) {

File: core/src/processing/data/TableRow.java
Patch:
@@ -23,4 +23,6 @@ public interface TableRow {
   public void setFloat(String columnName, float value);
   public void setDouble(int column, double value);
   public void setDouble(String columnName, double value);
+
+  public int getColumnCount();
 }

File: core/src/processing/opengl/PGL.java
Patch:
@@ -829,7 +829,6 @@ protected void update() {
       // Clear all buffers.
       clearDepth(1);
       clearStencil(0);
-
       int argb = pg.backgroundColor;
       float a = ((argb >> 24) & 0xff) / 255.0f;
       float r = ((argb >> 16) & 0xff) / 255.0f;

File: core/src/processing/opengl/PGraphics2D.java
Patch:
@@ -37,7 +37,6 @@ public class PGraphics2D extends PGraphicsOpenGL {
 
   public PGraphics2D() {
     super();
-    hints[ENABLE_STROKE_PERSPECTIVE] = false;
   }
 
 

File: core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -35,9 +35,9 @@ public class PGraphics3D extends PGraphicsOpenGL {
 
   public PGraphics3D() {
     super();
-    hints[ENABLE_STROKE_PERSPECTIVE] = false;
   }
 
+
   //////////////////////////////////////////////////////////////
 
   // RENDERER SUPPORT QUERIES

File: core/src/processing/core/PApplet.java
Patch:
@@ -1974,8 +1974,8 @@ public void paint(Graphics screen) {
         //screen.drawImage(g.image, 0, 0, null);  // not retina friendly
         screen.drawImage(g.image, 0, 0, width, height, null);
       }
-    //} else {
-    //  System.out.println(insideDraw + " " + g + " " + ((g != null) ? g.image : "-"));
+    } else {
+      debug(insideDraw + " " + g + " " + ((g != null) ? g.image : "-"));
     }
   }
 
@@ -2181,6 +2181,7 @@ public void run() {
       } else {    // sleepTime <= 0; the frame took longer than the period
 //        excess -= sleepTime;  // store excess time value
         overSleepTime = 0L;
+        noDelays++;
 
         if (noDelays > NO_DELAYS_PER_YIELD) {
           Thread.yield();   // give another thread a chance to run
@@ -2288,7 +2289,6 @@ public void handleDraw() {
       }
       insideDraw = false;
 
-      // 1.5.1 version
       if (useActive) {
         if (useStrategy) {
           render();

File: app/src/processing/app/contrib/ContributionListing.java
Patch:
@@ -368,7 +368,7 @@ public void run() {
 
         URL url = null;
         try {
-          url = new URL("http://processing.googlecode.com/svn/trunk/web/contrib_generate/contributions.txt");
+          url = new URL("https://raw.github.com/processing/processing-web/master/contrib_generate/contributions.txt");
         } catch (MalformedURLException e) {
           progressMonitor.error(e);
           progressMonitor.finished();

File: core/src/processing/core/PApplet.java
Patch:
@@ -10214,6 +10214,7 @@ static public void runSketch(final String args[], final PApplet constructedApple
     }
 
     Frame frame = new Frame(displayDevice.getDefaultConfiguration());
+    frame.setBackground(new Color(0xCC, 0xCC, 0xCC)); // default Processing gray
 //    JFrame frame = new JFrame(displayDevice.getDefaultConfiguration());
       /*
       Frame frame = null;

File: core/src/processing/opengl/PGL.java
Patch:
@@ -667,6 +667,7 @@ protected void initSurface(int antialias) {
       window.addKeyListener(keyListener);
       NEWTWindowListener winListener = new NEWTWindowListener();
       window.addWindowListener(winListener);
+      canvasNEWT.addFocusListener(pg.parent); // So focus detection work.
 
       capabilities = window.getChosenGLCapabilities();
       canvas = canvasNEWT;

File: app/src/processing/app/Editor.java
Patch:
@@ -1816,7 +1816,8 @@ public void handleIndentOutdent(boolean indent) {
         textarea.setSelectedText(tabString);
 
       } else {  // outdent
-        textarea.select(location, location + tabSize);
+        int last = Math.min(location + tabSize, textarea.getDocumentLength());
+        textarea.select(location, last);
         // Don't eat code if it's not indented
         if (textarea.getSelectedText().equals(tabString)) {
           textarea.setSelectedText("");

File: android/core/src/processing/core/PConstants.java
Patch:
@@ -101,6 +101,7 @@ public interface PConstants {
   static final float THIRD_PI   = PI / 3.0f;
   static final float QUARTER_PI = PI / 4.0f;
   static final float TWO_PI     = PI * 2.0f;
+  static final float TAU        = PI * 2.0f;
 
   static final float DEG_TO_RAD = PI/180.0f;
   static final float RAD_TO_DEG = 180.0f/PI;

File: core/src/processing/opengl/PShader.java
Patch:
@@ -89,7 +89,7 @@ public PShader() {
     parent = null;
     pgMain = null;
     pgl = null;
-    context = pgl.createEmptyContext();
+    context = -1;
 
     this.vertexURL = null;
     this.fragmentURL = null;

File: app/src/processing/app/macosx/Platform.java
Patch:
@@ -22,12 +22,9 @@
 
 package processing.app.macosx;
 
-import java.awt.Insets;
 import java.io.File;
 import java.io.FileNotFoundException;
 
-import javax.swing.UIManager;
-
 import com.apple.eio.FileManager;
 
 import processing.app.Base;
@@ -38,13 +35,16 @@
  */
 public class Platform extends processing.app.Platform {
 
+  // Removing for 2.0b8 because Quaqua doesn't have OS X 10.8 version.
+  /*
   public void setLookAndFeel() throws Exception {
     // Use the Quaqua L & F on OS X to make JFileChooser less awful
     UIManager.setLookAndFeel("ch.randelshofer.quaqua.QuaquaLookAndFeel");
     // undo quaqua trying to fix the margins, since we've already
     // hacked that in, bit by bit, over the years
     UIManager.put("Component.visualMargin", new Insets(1, 1, 1, 1));
   }
+  */
 
 
   public void init(Base base) {

File: build/shared/tools/MovieMaker/src/processing/app/tools/MovieMaker.java
Patch:
@@ -34,8 +34,7 @@ public void run() {
         e.printStackTrace();
       }
     } else {
-      System.out.println("null frame, yeah baby");
-      MovieMakerFrame.main(null);
+//      MovieMakerFrame.main(null);
     }
   }
 

File: pdex/src/processing/mode/experimental/DebugToolbar.java
Patch:
@@ -159,6 +159,7 @@ public void handlePressed(MouseEvent e, int idx) {
       super.handlePressed(e, JavaToolbar.EXPORT);
       break;
     case DEBUG:
+      deditor.handleStop(); // Close any running sketches
       if (shift) {
         Logger.getLogger(DebugToolbar.class.getName()).log(Level.INFO, "Invoked 'Run' toolbar button");
         deditor.handleRun();

File: experimental/src/processing/mode/experimental/DebugToolbar.java
Patch:
@@ -159,6 +159,7 @@ public void handlePressed(MouseEvent e, int idx) {
       super.handlePressed(e, JavaToolbar.EXPORT);
       break;
     case DEBUG:
+      deditor.handleStop(); // Close any running sketches
       if (shift) {
         Logger.getLogger(DebugToolbar.class.getName()).log(Level.INFO, "Invoked 'Run' toolbar button");
         deditor.handleRun();

File: pdex/src/processing/mode/experimental/ErrorBar.java
Patch:
@@ -162,8 +162,6 @@ protected void done() {
 				int currentTab = 0;
 				for (SketchCode sc : editor.getSketch().getCode()) {
 					if (sc.isExtension("pde")) {
-						sc.setPreprocOffset(bigCount);
-
 						try {
 							if (editor.getSketch().getCurrentCode().equals(sc)) {
 								// Adding + 1 to len because \n gets appended

File: experimental/src/processing/mode/experimental/ErrorBar.java
Patch:
@@ -162,8 +162,6 @@ protected void done() {
 				int currentTab = 0;
 				for (SketchCode sc : editor.getSketch().getCode()) {
 					if (sc.isExtension("pde")) {
-						sc.setPreprocOffset(bigCount);
-
 						try {
 							if (editor.getSketch().getCurrentCode().equals(sc)) {
 								// Adding + 1 to len because \n gets appended

File: android/core/src/processing/opengl/PGL.java
Patch:
@@ -2056,7 +2056,7 @@ protected static void javaToNativeARGB(int[] pixels, int width, int height) {
                           ((pixels[yindex] << 16) & 0xff0000) |
                           (pixels[yindex] & 0xff00) |
                           ((pixels[yindex] >> 16) & 0xff);
-          pixels[yindex] = (pixels[yindex] & 0xff000000) |
+          pixels[yindex] = (temp & 0xff000000) |
                            ((temp << 16) & 0xff0000) |
                            (temp & 0xff00) |
                            ((temp >> 16) & 0xff);

File: core/src/processing/opengl/PGL.java
Patch:
@@ -2616,7 +2616,7 @@ protected static void javaToNativeARGB(int[] pixels, int width, int height) {
                           ((pixels[yindex] << 16) & 0xff0000) |
                           (pixels[yindex] & 0xff00) |
                           ((pixels[yindex] >> 16) & 0xff);
-          pixels[yindex] = (pixels[yindex] & 0xff000000) |
+          pixels[yindex] = (temp & 0xff000000) |
                            ((temp << 16) & 0xff0000) |
                            (temp & 0xff00) |
                            ((temp >> 16) & 0xff);

File: android/core/src/processing/data/Table.java
Patch:
@@ -1801,7 +1801,8 @@ public void remove() {
 
   public int getInt(int row, int column) {
     checkBounds(row, column);
-    if (columnTypes[column] == INT) {
+    if (columnTypes[column] == INT ||
+        columnTypes[column] == CATEGORICAL) {
       int[] intData = (int[]) columns[column];
       return intData[row];
     }

File: core/src/processing/data/Table.java
Patch:
@@ -1801,7 +1801,8 @@ public void remove() {
 
   public int getInt(int row, int column) {
     checkBounds(row, column);
-    if (columnTypes[column] == INT) {
+    if (columnTypes[column] == INT ||
+        columnTypes[column] == CATEGORICAL) {
       int[] intData = (int[]) columns[column];
       return intData[row];
     }

File: app/src/processing/app/Mode.java
Patch:
@@ -102,7 +102,8 @@ protected void loadKeywords(File keywordFile) throws IOException {
     BufferedReader reader = PApplet.createReader(keywordFile);
     String line = null;
     while ((line = reader.readLine()) != null) {
-      String[] pieces = PApplet.trim(PApplet.split(line, '\t'));
+//      String[] pieces = PApplet.trim(PApplet.split(line, '\t'));
+      String[] pieces = PApplet.splitTokens(line);
       if (pieces.length >= 2) {
         String keyword = pieces[0];
         String coloring = pieces[1];

File: app/src/processing/app/syntax/Token.java
Patch:
@@ -67,7 +67,7 @@ public class Token {
   public static final byte FUNCTION3 = 13;
 
   /** Built-in Processing functions (setup, draw, mouseDragged). */
-  public static final byte FUNCTION4 = 13;
+  public static final byte FUNCTION4 = 14;
 
   /**
    * Operator token id. This can be used to mark an

File: app/src/processing/app/Editor.java
Patch:
@@ -1877,7 +1877,8 @@ protected boolean checkModified() {
       } else if (result == JOptionPane.NO_OPTION) {
         return true;  // ok to continue
 
-      } else if (result == JOptionPane.CANCEL_OPTION) {
+      } else if (result == JOptionPane.CANCEL_OPTION ||
+                 result == JOptionPane.CLOSED_OPTION) {
         return false;
 
       } else {

File: android/core/src/processing/opengl/PGL.java
Patch:
@@ -549,7 +549,6 @@ protected void update() {
 
       bindFramebuffer(FRAMEBUFFER, 0);
 
-      System.out.println("inited FBO layer");
       initialized = true;
     }
   }
@@ -1662,9 +1661,7 @@ protected void drawTexture(int target, int id, int width, int height,
       boolean depthMask = getDepthWriteMask();
       depthMask(false);
 
-      pg.report("BEFORE USE PROGRAM");
       useProgram(texShaderProgram);
-      pg.report("USE SHADER PROGRAM " + texShaderProgram);
 
       enableVertexAttribArray(texVertLoc);
       enableVertexAttribArray(texTCoordLoc);

File: android/core/src/processing/opengl/Texture.java
Patch:
@@ -207,7 +207,7 @@ public void init(int width, int height) {
   public void init(int width, int height, Parameters params)  {
     setParameters(params);
     setSize(width, height);
-    //allocate();
+    allocate();
   }
 
 

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1731,7 +1731,6 @@ protected void restoreGL() {
 
     currentFramebuffer.bind();
     pgl.drawBuffer(currentFramebuffer.getDefaultDrawBuffer());
-    report("HERE");
   }
 
 

File: pdex/src/processing/mode/experimental/DebugEditor.java
Patch:
@@ -378,6 +378,7 @@ public void actionPerformed(ActionEvent e) {
               errorCheckerService.updateErrorTable();
               errorCheckerService.updateEditorStatus();
               getTextArea().repaint();
+              errorBar.repaint();
             } else {
               errorCheckerService.resumeThread();
               System.out.println(thisEditor.getSketch().getName()

File: pdex/src/processing/mode/experimental/XQPreprocessor.java
Patch:
@@ -233,7 +233,7 @@ public boolean visit(NumberLiteral node) {
 		public boolean visit(SimpleType node) {
 			if (node.toString().equals("color")) {
 				System.err
-						.println("color type detected! \nThis shouldn't be happening! Please report this as an issue on www.github.com/Manindra29/XQMode");
+						.println("color type detected! \nThis shouldn't be happening! Please report this as an issue.");
 			}
 			return true;
 

File: experimental/src/processing/mode/experimental/DebugEditor.java
Patch:
@@ -378,6 +378,7 @@ public void actionPerformed(ActionEvent e) {
               errorCheckerService.updateErrorTable();
               errorCheckerService.updateEditorStatus();
               getTextArea().repaint();
+              errorBar.repaint();
             } else {
               errorCheckerService.resumeThread();
               System.out.println(thisEditor.getSketch().getName()

File: experimental/src/processing/mode/experimental/XQPreprocessor.java
Patch:
@@ -233,7 +233,7 @@ public boolean visit(NumberLiteral node) {
 		public boolean visit(SimpleType node) {
 			if (node.toString().equals("color")) {
 				System.err
-						.println("color type detected! \nThis shouldn't be happening! Please report this as an issue on www.github.com/Manindra29/XQMode");
+						.println("color type detected! \nThis shouldn't be happening! Please report this as an issue.");
 			}
 			return true;
 

File: app/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -950,6 +950,7 @@ public String[] getDefaultImports() {
     return new String[] { 
       "java.util.HashMap",
       "java.util.ArrayList",
+      "java.io.File",
       "java.io.BufferedReader",
       "java.io.PrintWriter",
       "java.io.InputStream",

File: android/core/src/processing/core/PConstants.java
Patch:
@@ -406,8 +406,8 @@ public interface PConstants {
   static final int DISABLE_DEPTH_MASK         =  5;
   static final int ENABLE_DEPTH_MASK          = -5;
 
-  static final int ENABLE_ACCURATE_2D         =  6;
-  static final int DISABLE_ACCURATE_2D        = -6;
+  static final int DISABLE_OPTIMIZED_STROKE   =  6;
+  static final int ENABLE_OPTIMIZED_STROKE    = -6;
 
   static final int ENABLE_STROKE_PERSPECTIVE  =  7;
   static final int DISABLE_STROKE_PERSPECTIVE = -7;

File: android/core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -4225,7 +4225,7 @@ public void draw(PGraphics g) {
   // Or accurate 2D mode is enabled, which forces each
   // shape to be rendered separately.
   protected boolean fragmentedGroup(PGraphicsOpenGL g) {
-    return g.getHint(ENABLE_ACCURATE_2D) ||
+    return g.getHint(DISABLE_OPTIMIZED_STROKE) ||
            (textures != null && 1 < textures.size()) ||
            strokedTexture;
   }

File: core/src/processing/core/PConstants.java
Patch:
@@ -453,8 +453,8 @@ public interface PConstants {
   static final int DISABLE_DEPTH_MASK         =  5;
   static final int ENABLE_DEPTH_MASK          = -5;
 
-  static final int ENABLE_ACCURATE_2D         =  6;
-  static final int DISABLE_ACCURATE_2D        = -6;
+  static final int DISABLE_OPTIMIZED_STROKE   =  6;
+  static final int ENABLE_OPTIMIZED_STROKE    = -6;
 
   static final int ENABLE_STROKE_PERSPECTIVE  =  7;
   static final int DISABLE_STROKE_PERSPECTIVE = -7;

File: core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -4225,7 +4225,7 @@ public void draw(PGraphics g) {
   // Or accurate 2D mode is enabled, which forces each
   // shape to be rendered separately.
   protected boolean fragmentedGroup(PGraphicsOpenGL g) {
-    return g.getHint(ENABLE_ACCURATE_2D) ||
+    return g.getHint(DISABLE_OPTIMIZED_STROKE) ||
            (textures != null && 1 < textures.size()) ||
            strokedTexture;
   }

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -285,7 +285,9 @@ public String preprocess(File srcFolder,
       // then search through for anyone else whose preprocName is null,
       // since they've also been combined into the main pde.
       int errorFile = findErrorFile(errorLine);
+//      System.out.println("error line is " + errorLine + ", file is " + errorFile);
       errorLine -= sketch.getCode(errorFile).getPreprocOffset();
+//      System.out.println("  preproc offset for that file: " + sketch.getCode(errorFile).getPreprocOffset());
 
 //      System.out.println("i found this guy snooping around..");
 //      System.out.println("whatcha want me to do with 'im boss?");
@@ -543,7 +545,7 @@ protected boolean ignorableImport(String pkg) {
   protected int findErrorFile(int errorLine) {
     for (int i = sketch.getCodeCount() - 1; i > 0; i--) {
       SketchCode sc = sketch.getCode(i);
-      if (sc.isExtension("pde") && (sc.getPreprocOffset() < errorLine)) {
+      if (sc.isExtension("pde") && (sc.getPreprocOffset() <= errorLine)) {
         // keep looping until the errorLine is past the offset
         return i;
       }

File: app/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -260,7 +260,7 @@ static public String[] parseSketchSize(String code, boolean fussy) {
           "values (not variables) for the size() command.\n" +
           "See the size() reference for an explanation.";
         Base.showWarning("Could not find sketch size", message, null);
-        new Exception().printStackTrace(System.out);
+//        new Exception().printStackTrace(System.out);
         return null;
       }
 
@@ -563,6 +563,7 @@ public PreprocessorResult write(Writer out, String program,
                                   write(program, stream), programImports);
   }
 
+  
   static String substituteUnicode(String program) {
     // check for non-ascii chars (these will be/must be in unicode format)
     char p[] = program.toCharArray();
@@ -688,6 +689,7 @@ private String write(final String program, final PrintWriter stream)
 
     return className;
   }
+  
 
   private PdeRecognizer createParser(final String program) {
     // create a lexer with the stream reader, and tell it to handle

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -433,7 +433,7 @@ public String preprocess(File srcFolder,
             }
           }
         }
-        if (ignorableImport(item, preprocessor)) {
+        if (ignorableImport(item)) {
           found = true;
         }
         if (!found) {
@@ -515,7 +515,7 @@ public String preprocess(File srcFolder,
    * for libraries that begin with a prefix like javax, since that includes
    * the OpenGL library, even though we're just returning true here, hrm...
    */
-  protected boolean ignorableImport(String pkg, PdePreprocessor preprocessor) {
+  protected boolean ignorableImport(String pkg) {
     if (pkg.startsWith("java.")) return true;
     if (pkg.startsWith("javax.")) return true;
 

File: core/src/processing/core/PGraphics.java
Patch:
@@ -4026,11 +4026,12 @@ public void textLeading(float leading) {
   public void textMode(int mode) {
     // CENTER and MODEL overlap (they're both 3)
     if ((mode == LEFT) || (mode == RIGHT)) {
-      showWarning("Since Processing beta, textMode() is now textAlign().");
+      showWarning("Since Processing 1.0 beta, textMode() is now textAlign().");
       return;
     }
     if (mode == SCREEN) {
       showWarning("textMode(SCREEN) has been removed from Processing 2.0.");
+      return;
     }
 
     if (textModeCheck(mode)) {

File: core/src/processing/core/PApplet.java
Patch:
@@ -219,15 +219,16 @@ public class PApplet extends Applet
    * change this setting before you call PApplet.main().
    * <pre>
    * static public void main(String[] args) {
-   *   PApplet.useQuartz = "false";
+   *   PApplet.useQuartz = false;
    *   PApplet.main(new String[] { "YourSketch" });
    * }
    * </pre>
    * This setting must be called before any AWT work happens, so that's why
    * it's such a terrible hack in how it's employed here. Calling setProperty()
    * inside setup() is a joke, since it's long since the AWT has been invoked.
    */
-  static public boolean useQuartz = true;
+//  static public boolean useQuartz = true;
+  static public boolean useQuartz = false;
 
   /**
    * Whether to use native (AWT) dialogs for selectInput and selectOutput.

File: core/src/processing/opengl/PGraphics2D.java
Patch:
@@ -120,7 +120,7 @@ public void frustum(float left, float right, float bottom, float top,
 
   @Override
   protected void defaultPerspective() {
-    super.ortho(-width/2, +width/2, +height/2, -height/2, -1, +1);
+    super.ortho(0, width, height, 0, -1, +1);
   }
 
 

File: core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -85,7 +85,7 @@ protected void defaultCamera() {
   @Override
   protected void begin2D() {
     pushProjection();
-    ortho(-width/2, +width/2, +height/2, -height/2, -1, +1);
+    ortho(0, width, height, 0, -1, +1);
     pushMatrix();
     camera(width/2, height/2);
   }

File: core/src/processing/opengl/PGraphics2D.java
Patch:
@@ -120,7 +120,7 @@ public void frustum(float left, float right, float bottom, float top,
 
   @Override
   protected void defaultPerspective() {
-    super.ortho(-width/2, +width/2, -height/2, +height/2, -1, +1);
+    super.ortho(-width/2, +width/2, +height/2, -height/2, -1, +1);
   }
 
 

File: core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -85,7 +85,7 @@ protected void defaultCamera() {
   @Override
   protected void begin2D() {
     pushProjection();
-    ortho(-width/2, +width/2, -height/2, +height/2, -1, +1);
+    ortho(-width/2, +width/2, +height/2, -height/2, -1, +1);
     pushMatrix();
     camera(width/2, height/2);
   }

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -10658,6 +10658,9 @@ void tessellateLineLoop2D(int lineCount) {
 
     void tessellateEdges() {
       if (stroke) {
+        if (in.edgeCount == 0) {
+          return;
+        }
         if (is3D) {
           tessellateEdges3D();
         } else if (is2D) {

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -11015,11 +11015,11 @@ void tessellateQuads() {
 
           rawIndices[idx++] = i0;
           rawIndices[idx++] = i1;
-          rawIndices[idx++] = i3;
+          rawIndices[idx++] = i2;
 
-          rawIndices[idx++] = i1;
           rawIndices[idx++] = i2;
           rawIndices[idx++] = i3;
+          rawIndices[idx++] = i0;
         }
         splitRawIndices();
       }

File: android/core/src/processing/core/PGraphicsAndroid2D.java
Patch:
@@ -378,6 +378,7 @@ public void vertex(float x, float y) {
         }
         break;
 
+      case QUAD:
       case QUADS:
         if ((vertexCount % 4) == 0) {
           quad(vertices[vertexCount - 4][X],

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -388,6 +388,7 @@ public void vertex(float x, float y) {
       }
       break;
 
+    case QUAD:
     case QUADS:
       if ((vertexCount % 4) == 0) {
         quad(vertices[vertexCount - 4][X],

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -1458,8 +1458,8 @@ protected boolean exportApplication(File destFolder,
       File shellScript = new File(destFolder, sketch.getName());
       PrintWriter pw = PApplet.createWriter(shellScript);
 
-      // do the newlines explicitly so that windows CRLF
-      // isn't used when exporting for unix
+      // Do the newlines explicitly so that Windows CRLF
+      // isn't used when exporting for Unix.
       pw.print("#!/bin/sh\n\n");
       //ps.print("APPDIR=`dirname $0`\n");
       pw.print("APPDIR=$(dirname \"$0\")\n");  // more posix compliant
@@ -1468,7 +1468,7 @@ protected boolean exportApplication(File destFolder,
       pw.print("java " + Preferences.get("run.options") +
                " -Djava.library.path=\"$APPDIR:$APPDIR/lib\"" +
                " -cp \"" + exportClassPath + "\"" +
-               " " + sketch.getName() + "\n");
+               " " + sketch.getName() + " \"$@\"\n");
 
       pw.flush();
       pw.close();

File: app/src/processing/mode/java/Commander.java
Patch:
@@ -300,9 +300,9 @@ public void statusError(Exception exception) {
       // format the runner exception like emacs
       //blah.java:2:10:2:13: Syntax Error: This is a big error message
       String filename = sketch.getCode(re.getCodeIndex()).getFileName();
-      int line = re.getCodeLine();
-      int column = re.getCodeColumn();
-      if (column == -1) column = 0;
+      int line = re.getCodeLine() + 1;
+      int column = re.getCodeColumn() + 1;
+      //if (column == -1) column = 0;
       // TODO if column not specified, should just select the whole line.
       System.err.println(filename + ":" +
                          line + ":" + column + ":" +

File: core/src/processing/core/PApplet.java
Patch:
@@ -2656,7 +2656,7 @@ protected void nativeMouseEvent(java.awt.event.MouseEvent nativeEvent) {
     // for mouseClicked and mouseReleased (or others).
     if (platform == MACOSX) {
       //if (nativeEvent.isPopupTrigger()) {
-      if ((modifiers & InputEvent.CTRL_DOWN_MASK) != 0) {
+      if ((modifiers & InputEvent.CTRL_MASK) != 0) {
         peButton = RIGHT;
       }
     }

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -419,7 +419,7 @@ public class PGraphics extends PImage implements PConstants {
 
   public int ambientColor;
   public float ambientR, ambientG, ambientB;
-  protected boolean setAmbient;
+  public boolean setAmbient;
 
   public int specularColor;
   public float specularR, specularG, specularB;

File: android/core/src/processing/core/PShape.java
Patch:
@@ -144,6 +144,7 @@ public class PShape implements PConstants {
   protected int tintColor;
 
   protected int ambientColor;
+  protected boolean setAmbient;
   protected int specularColor;
   protected int emissiveColor;
   protected float shininess;

File: android/core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -4734,6 +4734,8 @@ protected void fillFromCalc() {
       // default ambient color when the user doesn't specify
       // it explicitly.
       ambientFromCalc();
+      // ambientFromCalc sets setAmbient to true, but it hasn't been
+      // set by the user so put back to false.
       setAmbient = false;
     }
   }

File: core/src/processing/core/PGraphics.java
Patch:
@@ -445,7 +445,7 @@ public class PGraphics extends PImage implements PConstants {
 
   public int ambientColor;
   public float ambientR, ambientG, ambientB;
-  protected boolean setAmbient;
+  public boolean setAmbient;
 
   public int specularColor;
   public float specularR, specularG, specularB;

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -4721,6 +4721,8 @@ protected void fillFromCalc() {
       // default ambient color when the user doesn't specify
       // it explicitly.
       ambientFromCalc();
+      // ambientFromCalc sets setAmbient to true, but it hasn't been
+      // set by the user so put back to false.
       setAmbient = false;
     }
   }

File: core/src/processing/core/PGraphics.java
Patch:
@@ -7653,7 +7653,7 @@ static public void showWarning(String msg) {  // ignore
   /**
    * Version of showWarning() that takes a parsed String.
    */
-  static public void showWarning(String msg, String... args) {  // ignore
+  static public void showWarning(String msg, Object... args) {  // ignore
     showWarning(String.format(msg, args));
   }
 

File: core/src/processing/opengl/PGL.java
Patch:
@@ -360,9 +360,9 @@ public class PGL {
   protected static int toolkit = NEWT;
 
   protected static boolean enable_screen_FBO_macosx  = true;
-  protected static boolean enable_screen_FBO_windows = false;
-  protected static boolean enable_screen_FBO_linux   = false;
-  protected static boolean enable_screen_FBO_other   = false;
+  protected static boolean enable_screen_FBO_windows = true;
+  protected static boolean enable_screen_FBO_linux   = true;
+  protected static boolean enable_screen_FBO_other   = true;
 
   protected static int request_depth_bits = 24;
   // Stencil buffer disabled for now:

File: core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -33,7 +33,7 @@
 import processing.core.PVector;
 import processing.opengl.PGraphicsOpenGL.LineShader;
 import processing.opengl.PGraphicsOpenGL.PointShader;
-import processing.opengl.PGraphicsOpenGL.PolyShader;
+import processing.opengl.PGraphicsOpenGL.BaseShader;
 import processing.opengl.PGraphicsOpenGL.IndexCache;
 import processing.opengl.PGraphicsOpenGL.InGeometry;
 import processing.opengl.PGraphicsOpenGL.TessGeometry;
@@ -4295,7 +4295,7 @@ protected void renderPolys(PGraphicsOpenGL g, PImage textureImage) {
     }
 
     boolean renderingFill = false, renderingStroke = false;
-    PolyShader shader = null;
+    BaseShader shader = null;
     IndexCache cache = tessGeo.polyIndexCache;
     for (int n = firstPolyIndexCache; n <= lastPolyIndexCache; n++) {
       if (is3D() || (tex != null && (firstLineIndexCache == -1 ||

File: app/src/processing/mode/android/AndroidBuild.java
Patch:
@@ -90,9 +90,10 @@ protected boolean ignorableImport(String pkg) {
     if (pkg.startsWith("org.json.")) return true;
     if (pkg.startsWith("org.w3c.dom.")) return true;
     if (pkg.startsWith("org.xml.sax.")) return true;
-
+    
     if (pkg.startsWith("processing.core.")) return true;
     if (pkg.startsWith("processing.data.")) return true;
+    if (pkg.startsWith("processing.event.")) return true;
     if (pkg.startsWith("processing.opengl.")) return true;
 
     return false;

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -521,6 +521,7 @@ protected boolean ignorableImport(String pkg, PdePreprocessor preprocessor) {
 
     if (pkg.startsWith("processing.core.")) return true;
     if (pkg.startsWith("processing.data.")) return true;
+    if (pkg.startsWith("processing.event.")) return true;
     if (pkg.startsWith("processing.opengl.")) return true;
 
 //    // ignore core, data, and opengl packages

File: app/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -924,13 +924,14 @@ public String[] getCoreImports() {
     return new String[] {
       "processing.core.*",
       "processing.data.*",
+      "processing.event.*",
       "processing.opengl.*"
     };
   }
 
   public String[] getDefaultImports() {
     // These may change in-between (if the prefs panel adds this option)
-    String prefsLine = Preferences.get("preproc.imports.list");
+    String prefsLine = Preferences.get("preproc.imports");
     return PApplet.splitTokens(prefsLine, ", ");
   }
 

File: core/src/processing/event/KeyEvent.java
Patch:
@@ -36,6 +36,7 @@ public KeyEvent(Object nativeObject,
                   long millis, int action, int modifiers,
                   char key, int keyCode) {
     super(nativeObject, millis, action, modifiers);
+    this.flavor = KEY;
     this.key = key;
     this.keyCode = keyCode;
   }

File: core/src/processing/event/MouseEvent.java
Patch:
@@ -50,6 +50,7 @@ public MouseEvent(Object nativeObject,
                     long millis, int action, int modifiers,
                     int x, int y, int button, int clickCount) {
     super(nativeObject, millis, action, modifiers);
+    this.flavor = MOUSE;
     this.x = x;
     this.y = y;
     this.button = button;

File: core/src/processing/event/TouchEvent.java
Patch:
@@ -41,5 +41,6 @@ public class TouchEvent extends Event {
 
   public TouchEvent(Object nativeObject, long millis, int action, int modifiers) {
     super(nativeObject, millis, action, modifiers);
+    this.flavor = TOUCH;
   }
 }

File: core/src/processing/core/PApplet.java
Patch:
@@ -2523,9 +2523,9 @@ protected void nativeMouseEvent(java.awt.event.MouseEvent nativeEvent) {
       break;
     }
 
-    System.out.println(nativeEvent);
-
+    //System.out.println(nativeEvent);
     //int modifiers = nativeEvent.getModifiersEx();
+    // If using getModifiersEx(), the regular modifiers don't set properly.
     int modifiers = nativeEvent.getModifiers();
 
     int peModifiers = modifiers &

File: core/src/processing/core/PGraphics.java
Patch:
@@ -3454,8 +3454,6 @@ public void image(PImage img, float a, float b) {
   }
 
   /**
-   * @param a x-coordinate of the image
-   * @param b y-coordinate of the image
    * @param c width to display the image
    * @param d height to display the image
    */

File: app/src/processing/app/Mode.java
Patch:
@@ -90,8 +90,9 @@ public ClassLoader getClassLoader() {
 
 
   /**
-   * Setup additional elements that are only required when running
-   * with a GUI, rather than from the command-line.
+   * Setup additional elements that are only required when running with a GUI,
+   * rather than from the command-line. Note that this will not be called when
+   * the Mode is used from the command line (because Base will be null).  
    */
   public void setupGUI() {
     try {

File: app/src/processing/app/contrib/InstalledContribution.java
Patch:
@@ -89,6 +89,7 @@ public InstalledContribution(File folder) {
   public String initLoader(String className) throws Exception {
     File modeDirectory = new File(folder, getTypeName());
     if (modeDirectory.exists()) {
+      Base.log("checking mode folder regarding " + className);
       // If no class name specified, search the main <modename>.jar for the
       // full name package and mode name.
       if (className == null) {

File: app/src/processing/app/contrib/ModeContribution.java
Patch:
@@ -97,7 +97,9 @@ private ModeContribution(Base base, File folder,
       Constructor con = modeClass.getConstructor(Base.class, File.class);
       mode = (Mode) con.newInstance(base, folder);
       mode.setClassLoader(loader);
-      mode.setupGUI();
+      if (base != null) {
+        mode.setupGUI();
+      }
     }
 
 //    // Class name already found above, go ahead and instantiate

File: app/src/processing/app/syntax/PdeTextAreaDefaults.java
Patch:
@@ -137,7 +137,8 @@ public PdeTextAreaDefaults(Mode theme) {
     editable = true;
     electricScroll = 3;
     caretVisible = true;
-    caretBlinks = true;
+    caretBlinks = Preferences.getBoolean("editor.caret.blink");
+    blockCaret = Preferences.getBoolean("editor.caret.block");
     cols = 80;
     // Set the number of rows lower to avoid layout badness with large fonts
     // http://code.google.com/p/processing/issues/detail?id=1275

File: app/src/processing/app/Base.java
Patch:
@@ -1821,8 +1821,8 @@ static public void locateSketchbookFolder() {
                          "The sketchbook folder no longer exists.\n" +
                          "Processing will switch to the default sketchbook\n" +
                          "location, and create a new sketchbook folder if\n" +
-                         "necessary. Procesing will then stop talking about\n" +
-                         "himself in the third person.", null);
+                         "necessary. Processing will then stop talking\n" +
+                         "about himself in the third person.", null);
         sketchbookFolder = null;
       }
     }

File: app/src/processing/app/Editor.java
Patch:
@@ -234,9 +234,7 @@ public void windowDeactivated(WindowEvent e) {
 
     // end an undo-chunk any time the caret moves unless it's when text is edited
     textarea.addCaretListener(new CaretListener() {
-
       String lastText = textarea.getText();
-
       public void caretUpdate(CaretEvent e) {
         String newText = textarea.getText();
         if (lastText.equals(newText) && isDirectEdit()) {
@@ -252,7 +250,6 @@ public void caretUpdate(CaretEvent e) {
     pack();
 
     // Set the window bounds and the divider location before setting it visible
-//    setPlacement(location);
     state.apply(this);
 
     // Set the minimum size for the editor window

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -309,7 +309,7 @@ public void updateScrollBars() {
       // http://code.google.com/p/processing/issues/detail?id=280
       // http://code.google.com/p/processing/issues/detail?id=316
       //setValues(int newValue, int newExtent, int newMin, int newMax)
-      if ( (-horizontalOffset) > 0 ){
+      if (horizontalOffset < 0) {
         horizontal.setValues(-horizontalOffset, painterWidth, -leftHandGutter, width);
       } else {
         horizontal.setValues(-leftHandGutter, painterWidth, -leftHandGutter, width);

File: app/src/processing/app/syntax/PdeTextAreaDefaults.java
Patch:
@@ -139,7 +139,9 @@ public PdeTextAreaDefaults(Mode theme) {
     caretVisible = true;
     caretBlinks = true;
     cols = 80;
-    rows = 15;
+    // Set the number of rows lower to avoid layout badness with large fonts
+    // http://code.google.com/p/processing/issues/detail?id=1275
+    rows = 5;
 
     font = Preferences.getFont("editor.font");
     antialias = Preferences.getBoolean("editor.antialias");

File: app/src/processing/app/contrib/ModeContribution.java
Patch:
@@ -196,6 +196,8 @@ static public void loadMissing(Base base) {
       if (!existing.containsKey(folder)) {
           try {
             contribModes.add(new ModeContribution(base, folder, null));
+          } catch (IgnorableException ig) {
+            Base.log(ig.getMessage());
           } catch (Exception e) {
             e.printStackTrace();
           }

File: app/src/processing/app/Editor.java
Patch:
@@ -1019,6 +1019,9 @@ protected JMenu addInternalTools(JMenu menu) {
     addToolMenuItem(menu, "processing.app.tools.Archiver");
 
     if (Base.isMacOS()) {
+      if (SerialFixer.isNeeded()) {
+        addToolMenuItem(menu, "processing.app.tools.SerialFixer");
+      }
       addToolMenuItem(menu, "processing.app.tools.InstallCommander");
     }
 

File: app/src/processing/mode/java/Commander.java
Patch:
@@ -322,7 +322,7 @@ static void complainAndQuit(String lastWords, boolean schoolEmFirst) {
 
 
   static void printCommandLine(PrintStream out) {
-    out.println("Command line edition for Processing " + Base.VERSION_NAME + " (Java Mode");
+    out.println("Command line edition for Processing " + Base.VERSION_NAME + " (Java Mode)");
     out.println();
     out.println("--help               Show this help text. Congratulations.");
     out.println();

File: app/src/processing/mode/java/Commander.java
Patch:
@@ -70,9 +70,9 @@ static public void main(String[] args) {
     if (args == null || args.length == 0) {
 //      System.out.println(System.getProperty("user.dir"));
       args = new String[] {
-        "--export",
+//        "--export",
 //        "--build",
-//        "--run",
+        "--run",
 //        "--present",
 //        "--force",
 //        "--platform=windows",

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -5120,7 +5120,7 @@ public final float hue(int what) {
                      what & 0xff, cacheHsbValue);
       cacheHsbKey = what;
     }
-    return cacheHsbValue[0] * colorModeX;
+    return (cacheHsbValue[0] / 360f) * colorModeX;
   }
 
 

File: app/src/processing/app/Platform.java
Patch:
@@ -101,11 +101,11 @@ public File getSettingsFolder() throws Exception {
 
 
   /**
-   * @return if not overridden, a folder named "sketchbook" in user.dir.
+   * @return if not overridden, a folder named "sketchbook" in user.home.
    * @throws Exception so that subclasses can throw a fit
    */
   public File getDefaultSketchbookFolder() throws Exception {
-    return new File(System.getProperty("user.dir"), "sketchbook");
+    return new File(System.getProperty("user.home"), "sketchbook");
   }
 
 

File: app/src/processing/app/Sketch.java
Patch:
@@ -1134,7 +1134,7 @@ protected void setCurrentCode(String findName) {
    */
   public File makeTempFolder() {
     try {
-      File buildFolder = Base.createTempFolder(name, "temp");
+      File buildFolder = Base.createTempFolder(name, "temp", null);
 //      if (buildFolder.mkdirs()) {
       return buildFolder;
 

File: app/src/processing/mode/java/Compiler.java
Patch:
@@ -59,8 +59,8 @@ static public boolean compile(JavaBuild build) throws SketchException {
     String baseCommand[] = new String[] {
       "-Xemacs",
       //"-noExit",  // not necessary for ecj
-      "-source", "1.5",
-      "-target", "1.5",
+      "-source", "1.6",
+      "-target", "1.6",
       "-classpath", build.getClassPath(),
       "-nowarn", // we're not currently interested in warnings (works in ecj)
       "-d", build.getBinFolder().getAbsolutePath() // output the classes in the buildPath

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -275,6 +275,7 @@ public String preprocess(File srcFolder,
       fnfe.printStackTrace();
       String msg = "Build folder disappeared or could not be written";
       throw new SketchException(msg);
+
     } catch (antlr.RecognitionException re) {
       // re also returns a column that we're not bothering with for now
       // first assume that it's the main file
@@ -293,7 +294,7 @@ public String preprocess(File srcFolder,
       String msg = re.getMessage();
 
       //System.out.println(java.getAbsolutePath());
-      System.out.println(bigCode);
+//      System.out.println(bigCode);
 
       if (msg.contains("expecting RCURLY")) {
       //if (msg.equals("expecting RCURLY, found 'null'")) {

File: java/libraries/video/src/processing/video/Movie.java
Patch:
@@ -303,7 +303,7 @@ public void jump(float where) {
     boolean res;
     long pos = Video.secToNanoLong(where);
 
-    res = playbin.seek(1.0, Format.TIME, SeekFlags.FLUSH,
+    res = playbin.seek(rate, Format.TIME, SeekFlags.FLUSH,
                        SeekType.SET, pos, SeekType.NONE, -1);
 
     if (!res) {

File: android/core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -6082,8 +6082,8 @@ protected void getGLParameters() {
     int major = pgl.getGLVersion()[0];
     if (major < 2) {
       // There might be problems...
-      PGraphics.showWarning("The OpenGL version in this is less than 2.0 so " +
-                            "Processing might not draw things properly");
+      PGraphics.showWarning("The OpenGL version is less than 2.0 so " +
+                            "Processing might not draw properly");
       // ... but GLSL might still be available through extensions.
       if (OPENGL_EXTENSIONS.indexOf("_fragment_shader")  == -1 ||
           OPENGL_EXTENSIONS.indexOf("_vertex_shader")    == -1 ||

File: core/src/processing/opengl/PGL.java
Patch:
@@ -1011,10 +1011,9 @@ protected void requestDraw() {
           animator.requestDisplay();
         }
       } catch (GLException e) {
-        // Unwrap GLException so that only the causing exception
-        // is shown.
+        // Unwrap GLException so that only the causing exception is shown.
         Throwable tr = e.getCause();
-        throw (RuntimeException)tr;
+        throw new RuntimeException(tr);
       }
     }
   }

File: app/src/processing/app/Editor.java
Patch:
@@ -386,15 +386,14 @@ protected void initModeMenu() {
     modeMenu = new JMenu();
     for (final Mode m : base.getModeList()) {
       if (mode == m) {
-        JCheckBoxMenuItem item = new JCheckBoxMenuItem(m.getTitle());
+        JRadioButtonMenuItem item = new JRadioButtonMenuItem(m.getTitle());
         // doesn't need a listener, since it doesn't do anything
         item.setSelected(true);
         modeMenu.add(item);
       } else {
         JMenuItem item = new JMenuItem(m.getTitle());
         item.addActionListener(new ActionListener() {
           public void actionPerformed(ActionEvent e) {
-            //          System.out.println(e);
             base.changeMode(m);
           }
         });

File: app/src/processing/app/Editor.java
Patch:
@@ -132,7 +132,7 @@ public void windowClosing(WindowEvent e) {
     // don't close the window when clicked, the app will take care
     // of that via the handleQuitInternal() methods
     // http://dev.processing.org/bugs/show_bug.cgi?id=440
-    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
+    setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
 
     // When bringing a window to front, let the Base know
     addWindowListener(new WindowAdapter() {

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -106,8 +106,8 @@ public void actionPerformed(ActionEvent e) {
     // Initialize the GUI
     setLayout(new ScrollLayout());
     add(CENTER, painter);
-    add(RIGHT, vertical = new JScrollBar(JScrollBar.VERTICAL));
-    add(BOTTOM, horizontal = new JScrollBar(JScrollBar.HORIZONTAL));
+    add(RIGHT, vertical = new JScrollBar(Adjustable.VERTICAL));
+    add(BOTTOM, horizontal = new JScrollBar(Adjustable.HORIZONTAL));
 
     // Add some event listeners
     vertical.addAdjustmentListener(new AdjustHandler());

File: app/src/processing/mode/java/Compiler.java
Patch:
@@ -698,7 +698,7 @@ static protected void handleCrustyCode() {
     System.err.println("This code needs to be updated " +
                        "for this version of Processing, " +
                        "please read the Changes page on the Wiki.");
-    JavaEditor.showChanges();
+    Editor.showChanges();
   }
 
 

File: core/src/processing/core/PFont.java
Patch:
@@ -157,7 +157,7 @@ public class PFont implements PConstants {
 
 
   /** for subclasses that need to store metadata about the font */
-  protected HashMap<PGraphics, Object> cacheMap;
+//  protected HashMap<PGraphics, Object> cacheMap;
 
 
   public PFont() { }  // for subclasses

File: android/core/src/processing/core/PFont.java
Patch:
@@ -438,7 +438,7 @@ public void setNative(Object typeface) {
   /**
    * Return the native Typeface object associated with this PFont (if any).
    */
-  public Typeface getNative() {
+  public Object getNative() {
     if (subsetting) {
       return null;
     }

File: app/src/processing/app/Sketch.java
Patch:
@@ -1266,9 +1266,9 @@ public String getName() {
 
 
   /**
-   * Returns a file object for the primary .pde of this sketch.
+   * Returns a File object for the main .pde file for this sketch.
    */
-  public File getPrimaryFile() {
+  public File getMainFile() {
     return primaryFile;
   }
 

File: app/src/processing/app/tools/ColorSelector.java
Patch:
@@ -225,9 +225,9 @@ public void insertUpdate(DocumentEvent e) {
    * Set the RGB values based on the current HSB values.
    */
   protected void updateRGB() {
-    int rgb = Color.HSBtoRGB((float)hue / 359f,
-                             (float)saturation / 99f,
-                             (float)brightness / 99f);
+    int rgb = Color.HSBtoRGB(hue / 359f,
+                             saturation / 99f,
+                             brightness / 99f);
     updateRGB2(rgb);
   }
 

File: app/src/processing/app/windows/Registry.java
Patch:
@@ -93,7 +93,7 @@ private static String convertBufferToString(byte[] buf) throws UnsupportedEncodi
    * @return int
    */
   private static int convertBufferToInt(byte[] buf) {
-   return(((int)(buf[0] & 0xff)) + (((int)(buf[1] & 0xff)) << 8) + (((int)(buf[2] & 0xff)) << 16) + (((int)(buf[3] & 0xff)) << 24));
+    return((buf[0] & 0xff) + ((buf[1] & 0xff) << 8) + ((buf[2] & 0xff) << 16) + ((buf[3] & 0xff) << 24));
   }
 
   /**

File: app/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -781,7 +781,7 @@ protected int writeImports(final PrintWriter out,
   }
 
   protected int writeImportList(PrintWriter out, List<String> imports) {
-    return writeImportList(out, (String[]) imports.toArray(new String[0]));
+    return writeImportList(out, imports.toArray(new String[0]));
   }
 
   protected int writeImportList(PrintWriter out, String[] imports) {

File: app/src/processing/mode/java/runner/Runner.java
Patch:
@@ -308,7 +308,7 @@ protected String[] getSketchParams() {
 //    String outgoing[] = new String[params.size()];
 //    params.toArray(outgoing);
 //    return outgoing;
-    return (String[]) params.toArray(new String[0]);
+    return params.toArray(new String[0]);
   }
 
 

File: android/core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -126,12 +126,9 @@ static protected PShape loadShapeImpl(PGraphics pg, String filename,
     }
 
     if (obj != null) {
-      boolean prevStroke = pg.stroke;
       int prevTextureMode = pg.textureMode;
-      pg.stroke = false;
       pg.textureMode = NORMAL;
       PShapeOpenGL p3d = PShapeOpenGL.createShape3D(pg.parent, obj);
-      pg.stroke = prevStroke;
       pg.textureMode = prevTextureMode;
       return p3d;
     } else {

File: core/src/processing/opengl/PGraphics3D.java
Patch:
@@ -126,12 +126,9 @@ static protected PShape loadShapeImpl(PGraphics pg, String filename,
     }
 
     if (obj != null) {
-      boolean prevStroke = pg.stroke;
       int prevTextureMode = pg.textureMode;
-      pg.stroke = false;
       pg.textureMode = NORMAL;
       PShapeOpenGL p3d = PShapeOpenGL.createShape3D(pg.parent, obj);
-      pg.stroke = prevStroke;
       pg.textureMode = prevTextureMode;
       return p3d;
     } else {

File: app/src/processing/mode/javascript/JavaScriptBuild.java
Patch:
@@ -324,8 +324,8 @@ public boolean build ( File bin ) throws IOException, SketchException
 	// add a handy method to read the generated sketchID
 	String scriptFiles = "<script type=\"text/javascript\">\n";
 
-	scriptFiles += "// convenience function to fetch ID of sketch html element\n" +
-				   "function getProcessingSketchID () { return '"+sketchID+"'; }\n";
+	scriptFiles += "// convenience function to get the id attribute of generated sketch html element\n" +
+				   "function getProcessingSketchId () { return '"+sketchID+"'; }\n";
 
 //	ArrayList<String> addresses = jsServer.getInetAddresses();
 //	int port = jsServer.getPort();

File: core/src/processing/core/PApplet.java
Patch:
@@ -2845,7 +2845,7 @@ protected void handleKeyEvent(KeyEvent event) {
     keyCode = event.getKeyCode();
 
     if (keyEventMethods != null) {
-      keyEventMethods.handle(new Object[] { event });
+      keyEventMethods.handle(new Object[] { event.getNative() });
     }
 
     switch (event.getAction()) {
@@ -11541,9 +11541,9 @@ public void smooth() {
 
 
   /**
-   * 
+   *
    * @param level either 2, 4, or 8
-   */ 
+   */
   public void smooth(int level) {
     if (recorder != null) recorder.smooth(level);
     g.smooth(level);

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -5190,7 +5190,7 @@ protected void backgroundImpl() {
    * throw an GL_INVALID_OPERATION error.
    */
   public void report(String where) {
-    if (!hints[DISABLE_OPENGL_ERROR_REPORT]) {
+    if (!hints[DISABLE_OPENGL_ERRORS]) {
       int err = pgl.getError();
       if (err != 0) {
         String errString = pgl.errorString(err);

File: android/core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -5190,7 +5190,7 @@ protected void backgroundImpl() {
    * throw an GL_INVALID_OPERATION error.
    */
   public void report(String where) {
-    if (!hints[DISABLE_OPENGL_ERROR_REPORT]) {
+    if (!hints[DISABLE_OPENGL_ERRORS]) {
       int err = pgl.getError();
       if (err != 0) {
         String errString = pgl.errorString(err);

File: app/src/processing/app/Mode.java
Patch:
@@ -12,6 +12,7 @@
 import javax.swing.tree.*;
 
 import processing.app.syntax.*;
+import processing.core.PApplet;
 
 
 public abstract class Mode {
@@ -650,10 +651,10 @@ protected void restoreExpanded(JTree tree) {
     String pref = "examples." + getClass().getName() + ".visible";
     String value = Preferences.get(pref);
     if (value != null) {
-      String[] paths = value.split(File.pathSeparator);
+      String[] paths = PApplet.split(value, File.pathSeparator);
       for (String path : paths) {
 //        System.out.println("trying to expand " + path);
-        String[] items = path.split(File.separator);
+        String[] items = PApplet.split(path, File.separator);
         DefaultMutableTreeNode[] nodes = new DefaultMutableTreeNode[items.length];
         expandTree(tree, null, items, nodes, 0);
       }

File: android/core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -2073,7 +2073,7 @@ protected void defaultSettings() {
     textureMode(IMAGE);
 
     // Default material properties
-    ambient(80);
+    ambient(255);
     specular(125);
     emissive(0);
     shininess(1);

File: core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -2073,7 +2073,7 @@ protected void defaultSettings() {
     textureMode(IMAGE);
 
     // Default material properties
-    ambient(80);
+    ambient(255);
     specular(125);
     emissive(0);
     shininess(1);

File: android/core/src/processing/opengl/PFontTexture.java
Patch:
@@ -249,7 +249,7 @@ public boolean contextIsOutdated() {
     }
     if (outdated) {
       for (int i = 0; i < textures.length; i++) {
-        pg.removeTextureObject(textures[i].glName, textures[i].context.code());
+        pg.removeTextureObject(textures[i].glName, textures[i].context.id());
         textures[i].glName = 0;
       }
     }

File: core/src/processing/opengl/PFontTexture.java
Patch:
@@ -249,7 +249,7 @@ public boolean contextIsOutdated() {
     }
     if (outdated) {
       for (int i = 0; i < textures.length; i++) {
-        pg.removeTextureObject(textures[i].glName, textures[i].context.code());
+        pg.removeTextureObject(textures[i].glName, textures[i].context.id());
         textures[i].glName = 0;
       }
     }

File: core/src/processing/core/PVector.java
Patch:
@@ -835,7 +835,7 @@ public PVector normalize(PVector target) {
    * @brief Limit the magnitude of the vector
    */
   public void limit(float max) {
-    if (mag() > max) {
+    if (magSq() > max*max) {
       normalize();
       mult(max);
     }

File: java/libraries/video/src/processing/video/Capture.java
Patch:
@@ -561,7 +561,8 @@ static protected void addResFromStructure(ArrayList<String> res, Structure str,
     boolean singleFrac = false;
     try {
       Fraction fr = str.getFraction("framerate");
-      res.add(makeResolutionString(w, h, fr.numerator, fr.denominator));              
+      res.add(makeResolutionString(w, h, fr.numerator, fr.denominator));
+      singleFrac = true;
     } catch (Exception e) { 
     }
     

File: java/libraries/video/src/processing/video/Video.java
Patch:
@@ -66,7 +66,7 @@ public class Video implements PConstants {
   }  
     
   
-  static public void setPath(String path) {
+  static public void setGStreamerPath(String path) {
     gstreamerPath = path;
   }
   

File: core/src/processing/core/PGraphics.java
Patch:
@@ -721,13 +721,13 @@ public void endDraw() {  // ignore
   }
 
 
-  public PGL beginGL() {
+  public PGL beginPGL() {
     showMethodWarning("beginGL");
     return null;
   }
 
 
-  public void endGL() {
+  public void endPGL() {
     showMethodWarning("endGL");
   }
 

File: android/core/src/processing/opengl/PShader.java
Patch:
@@ -580,10 +580,10 @@ protected void consumeUniforms() {
           PImage img = (PImage)val.value;
           Texture tex = pgMain.getTexture(img);     
           pgl.glUniform1i(loc, texUnit);
-          if (textures == null) {
+          if (textures == null) {            
             textures = new HashMap<Integer, Texture>();
-            textures.put(texUnit, tex);
-          }
+          }  
+          textures.put(texUnit, tex);
           texUnit++;
         }
       }

File: core/src/processing/opengl/PShader.java
Patch:
@@ -580,10 +580,10 @@ protected void consumeUniforms() {
           PImage img = (PImage)val.value;
           Texture tex = pgMain.getTexture(img);     
           pgl.glUniform1i(loc, texUnit);
-          if (textures == null) {
+          if (textures == null) {            
             textures = new HashMap<Integer, Texture>();
-            textures.put(texUnit, tex);
-          }
+          }  
+          textures.put(texUnit, tex);
           texUnit++;
         }
       }

File: android/core/src/processing/opengl/PGL.java
Patch:
@@ -420,7 +420,7 @@ public PGL(PGraphicsOpenGL pg) {
   }
 
   
-  public void setFramerate(float framerate) {    
+  public void setFrameRate(float framerate) {    
   }
   
   

File: core/src/processing/opengl/PGL.java
Patch:
@@ -491,7 +491,7 @@ public PGL(PGraphicsOpenGL pg) {
   }
 
 
-  public void setFramerate(float framerate) {
+  public void setFrameRate(float framerate) {
     if (targetFramerate != framerate) {
       if (60 < framerate) {
         // Disables v-sync
@@ -631,7 +631,7 @@ public void initOffscreenSurface(PGL primary) {
 
   public void updatePrimary() {
     if (!setFramerate) {
-      setFramerate(targetFramerate);
+      setFrameRate(targetFramerate);
     }
 
     if (needScreenFBO && glColorFbo[0] == 0) {

File: java/libraries/serial/src/processing/serial/Serial.java
Patch:
@@ -68,7 +68,7 @@ public class Serial implements SerialPortEventListener {
   //boolean bufferUntil = false;
   int bufferSize = 1;  // how big before reset or event firing
   boolean bufferUntil;
-  int bufferUntilByte;
+  byte bufferUntilByte;
 
 
   // defaults
@@ -306,7 +306,7 @@ public void buffer(int count) {
    */
   public void bufferUntil(int what) {
     bufferUntil = true;
-    bufferUntilByte = what;
+    bufferUntilByte = (byte) what;
   }
 
 

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -263,6 +263,7 @@ public String preprocess(File srcFolder,
       File outputFolder = (packageName == null) ?
         srcFolder : new File(srcFolder, packageName.replace('.', '/'));
       outputFolder.mkdirs();
+//      Base.openFolder(outputFolder);
       final File java = new File(outputFolder, sketch.getName() + ".java");
       final PrintWriter stream = new PrintWriter(new FileWriter(java));
       try {
@@ -276,7 +277,6 @@ public String preprocess(File srcFolder,
       throw new SketchException(msg);
     } catch (antlr.RecognitionException re) {
       // re also returns a column that we're not bothering with for now
-
       // first assume that it's the main file
 //      int errorFile = 0;
       int errorLine = re.getLine() - 1;

File: android/core/src/processing/core/PShapeSVG.java
Patch:
@@ -154,7 +154,7 @@ public class PShapeSVG extends PShape {
   /**
    * Initializes a new SVG Object with the given filename.
    */
-  public PShapeSVG(PApplet parent, String filename) {
+  public PShapeSVG(PApplet parent, String filename) throws Exception {
     // this will grab the root document, starting <svg ...>
     // the xml version and initial comments are ignored
     this(new XML(parent, filename));

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -26,7 +26,6 @@
 import java.awt.*;
 import java.awt.geom.*;
 import java.awt.image.*;
-import java.io.IOException;
 import java.io.InputStream;
 import java.util.Arrays;
 import java.util.zip.GZIPInputStream;
@@ -1128,7 +1127,7 @@ public PShape loadShape(String filename) {
         InputStream input = new GZIPInputStream(parent.createInput(filename));
         XML xml = new XML(PApplet.createReader(input));
         svg = new PShapeSVG(xml);
-      } catch (IOException e) {
+      } catch (Exception e) {
         e.printStackTrace();
       }
     } else {

File: app/src/processing/app/Base.java
Patch:
@@ -162,7 +162,7 @@ static private void createAndShowGUI(String[] args) {
     // because the platform has to be inited properly first.
 
     // Make sure a full JDK is installed
-    initRequirements();
+//    initRequirements();
 
     // run static initialization that grabs all the prefs
     Preferences.init(null);

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -1677,4 +1677,3 @@ static protected void packClassPathIntoZipFileRecursive(File dir,
     }
   }
 }
-

File: android/core/src/processing/opengl/Texture.java
Patch:
@@ -411,7 +411,6 @@ public void loadPixels(int[] pixels) {
     }
     
     if (isModified()) {
-      PApplet.println("Getting pixels from texture...");
       // Regular pixel copy from texture.
       get(pixels);
     }
@@ -591,8 +590,6 @@ protected void updateTexelsImpl(int x, int y, int w, int h) {
       if (y2 < my1) my1 = PApplet.max(0, y2);
       if (y2 > my2) my2 = PApplet.min(height - 1, y2);
     }
-    
-    PApplet.println("Marking texels @" + x + "," + y + " " + w + "x" + h + " as updated");
   }
 
   

File: java/libraries/video/src/processing/video/Movie.java
Patch:
@@ -536,7 +536,6 @@ public synchronized void read() {
     
       if (firstFrame) {
         super.init(bufWidth, bufHeight, ARGB);
-        //loadPixels();
         firstFrame = false;
       }      
       
@@ -564,7 +563,6 @@ public synchronized void read() {
       }    
     
       if (firstFrame) {
-        //resize(bufWidth, bufHeight);
         super.init(bufWidth, bufHeight, RGB);
         firstFrame = false;
       }

File: java/libraries/video/src/processing/video/Video.java
Patch:
@@ -73,7 +73,7 @@ public class Video implements PConstants {
   // can improve performance significantly, since the video frames are automatically
   // copied into the texture without passing through the pixels arrays, as well as 
   // having the color conversion into RGBA handled natively by gstreamer.
-  public static boolean useGLBufferSink = false;  
+  public static boolean useGLBufferSink = true;  
   
   // Path that the video library will use to load the gstreamer native libs from.
   // It is buit either from the system or local paths.

File: android/core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -776,7 +776,7 @@ public void beginContour() {
     }
     
     if (openContour) {
-      PGraphics.showWarning("P3D: Already called beginContour().");
+      PGraphics.showWarning("Already called beginContour().");
       return;
     }    
     openContour = true;    
@@ -790,7 +790,7 @@ public void endContour() {
     }
     
     if (!openContour) {
-      PGraphics.showWarning("P3D: Need to call beginContour() first.");
+      PGraphics.showWarning("Need to call beginContour() first.");
       return;      
     }
     openContour = false;    

File: java/libraries/opengl/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -776,7 +776,7 @@ public void beginContour() {
     }
     
     if (openContour) {
-      PGraphics.showWarning("P3D: Already called beginContour().");
+      PGraphics.showWarning("Already called beginContour().");
       return;
     }    
     openContour = true;    
@@ -790,7 +790,7 @@ public void endContour() {
     }
     
     if (!openContour) {
-      PGraphics.showWarning("P3D: Need to call beginContour() first.");
+      PGraphics.showWarning("Need to call beginContour() first.");
       return;      
     }
     openContour = false;    

File: java/libraries/opengl/src/processing/opengl/PFontTexture.java
Patch:
@@ -269,7 +269,7 @@ protected void addToTexture(int idx, PFont.Glyph glyph) {
         rgba[t++] = 0xFFFFFF00; // Set the leftmost pixel in this row as blank
         for (int x = 0; x < glyph.width; x++) {
           rgba[t++] = 0xFFFFFF00 | glyph.image.pixels[p++];
-        }        
+        }
         rgba[t++] = 0xFFFFFF00; // Set the rightmost pixel in this row as blank
       }
       java.util.Arrays.fill(rgba, (h - 1) * w, h * w, 0xFFFFFF00); // Set the last row to blank pixels.
@@ -342,7 +342,6 @@ public class TextureInfo {
     public float u0, u1;
     public float v0, v1;
     public int[] pixels;
-
     
     public TextureInfo(int tidx, int cropX, int cropY, int cropW, int cropH, int[] pix) {
       texIndex = tidx;      

File: java/libraries/opengl/src/processing/opengl/Texture.java
Patch:
@@ -1094,7 +1094,7 @@ protected void setParameters(Parameters params) {
     } else {
       throw new RuntimeException("Unknown texture format");     
     }
-    
+
     if (params.sampling == POINT) {
       glMagFilter = PGL.GL_NEAREST;
       glMinFilter = PGL.GL_NEAREST;

File: android/core/src/processing/opengl/PFontTexture.java
Patch:
@@ -204,7 +204,7 @@ public void addAllGlyphsToTexture() {
   
   public void updateGlyphsTexCoords() {
     // loop over current glyphs.
-    for (int i = 0; i < font.getGlyphCount(); i++) {
+    for (int i = 0; i < glyphTexinfos.length; i++) {
       TextureInfo tinfo = glyphTexinfos[i];
       if (tinfo != null && tinfo.texIndex == currentTex) { 
         tinfo.updateUV();

File: java/libraries/video/src/processing/video/LibraryPath.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2011 Andres Colubri
+  Copyright (c) 2011-12 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
@@ -29,7 +29,7 @@
 
 class LibraryPath {
   // This method returns the folder inside which the gstreamer library folder
-  // should be located.
+  // is located.
   String get() {
     URL url = this.getClass().getResource("LibraryPath.class");
     if (url != null) {

File: java/libraries/video/src/processing/video/Movie.java
Patch:
@@ -3,8 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2011 Andres Colubri
-  Copyright (c) 2004-07 Ben Fry and Casey Reas
+  Copyright (c) 2004-12 Ben Fry and Casey Reas
   The previous version of this code was developed by Hernando Barragan
 
   This library is free software; you can redistribute it and/or

File: java/libraries/video/src/processing/video/Resolution.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2011 Andres Colubri
+  Copyright (c) 2011-12 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: java/libraries/video/src/processing/video/Video.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2011 Andres Colubri
+  Copyright (c) 2011-12 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: android/core/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -3872,7 +3872,7 @@ protected void render(PGraphicsOpenGL g, PImage texture) {
     
   
   protected void renderPolys(PGraphicsOpenGL g, PImage textureImage) {
-    PTexture tex = null;
+    Texture tex = null;
     if (textureImage != null) {
       tex = g.getTexture(textureImage);      
       if (tex != null) {

File: app/src/processing/mode/android/AndroidBuild.java
Patch:
@@ -125,8 +125,9 @@ public File createProject() throws IOException, SketchException {
 //    if (sizeInfo == null) {
 //      throw new SketchException("Could not parse the size() command.");
 //    }
+    // On Android, this init will throw a SketchException if there's a problem with size()
     preproc.initSketchSize(sketch.getMainProgram());
-    sketchClassName = preprocess(srcFolder, manifest.getPackageName(), preproc);
+    sketchClassName = preprocess(srcFolder, manifest.getPackageName(), preproc, false);
     if (sketchClassName != null) {
       File tempManifest = new File(tmpFolder, "AndroidManifest.xml");
       manifest.writeBuild(tempManifest, sketchClassName, target.equals("debug"));

File: app/src/processing/mode/android/AndroidPreprocessor.java
Patch:
@@ -162,6 +162,7 @@ protected void writeFooter(PrintWriter out, String className) {
 
     if ((mode == Mode.STATIC) || (mode == Mode.ACTIVE)) {
       out.println();
+      
       if (sketchWidth != null) {
         out.println(indent + "public int sketchWidth() { return " + sketchWidth + "; }");
       }

File: app/src/processing/mode/java/JavaMode.java
Patch:
@@ -174,7 +174,7 @@ public String[] getIgnorable() {
   
   public Runner handleRun(Sketch sketch, RunnerListener listener) throws SketchException {
     JavaBuild build = new JavaBuild(sketch);
-    String appletClassName = build.build();
+    String appletClassName = build.build(false);
     if (appletClassName != null) {
       final Runner runtime = new Runner(build, listener);
       new Thread(new Runnable() {
@@ -190,7 +190,7 @@ public void run() {
 
   public Runner handlePresent(Sketch sketch, RunnerListener listener) throws SketchException {
     JavaBuild build = new JavaBuild(sketch);
-    String appletClassName = build.build();
+    String appletClassName = build.build(false);
     if (appletClassName != null) {
       final Runner runtime = new Runner(build, listener);
       new Thread(new Runnable() {

File: app/src/processing/mode/android/AndroidBuild.java
Patch:
@@ -270,7 +270,7 @@ public boolean exportPackage() throws IOException, SketchException {
   // (which contains our friend processing-core.jar) unless your current
   // working directory is the same as the build file. So this is an unpleasant
   // workaround, at least until things are fixed or we hear of a better way.
-  protected boolean antBuild() throws SketchException {
+  protected boolean antBuild_dexworkaround() throws SketchException {
     try {
 //      ProcessHelper helper = new ProcessHelper(tmpFolder, new String[] { "ant", target });
       // Windows doesn't include full paths, so make 'em happen.
@@ -345,7 +345,7 @@ protected boolean antBuild() throws SketchException {
   */
 
 
-  protected boolean antBuild_normal() throws SketchException {
+  protected boolean antBuild() throws SketchException {
 //    System.setProperty("user.dir", tmpFolder.getAbsolutePath());  // oh why not { because it doesn't help }
     final Project p = new Project();
 //    p.setBaseDir(tmpFolder);  // doesn't seem to do anything

File: app/src/processing/mode/javascript/JavaScriptMode.java
Patch:
@@ -43,8 +43,7 @@ public JavaScriptMode ( Base base, File folder )
 		try {
 			loadKeywords(); // in JavaMode, sets tokenMarker
 			loadAdditionalKeywords( 
-				new File( base.getContentFile("modes/java"), 
-						  "keywords.txt" ),
+				new File(Base.getContentFile("modes/java"), "keywords.txt" ),
 				tokenMarker
 			);
 		} 

File: java/libraries/opengl/src/processing/opengl/PGL.java
Patch:
@@ -646,6 +646,9 @@ public void updateOffscreen(PGL primary) {
 
   
   public boolean primaryIsDoubleBuffered() {
+    // When using the multisampled FBO, the color
+    // FBO is single buffered as it has only one
+    // texture bound to it.
     return !needFBO;
   }
   
@@ -666,7 +669,6 @@ protected void releaseFBO() {
 
   public void beginOnscreenDraw(boolean clear) {
     if (needFBO) {
-      System.out.println("multisampled offscreen rendering...");
       // Render the scene to the mutisampled buffer...
       gl.glBindFramebuffer(GL.GL_FRAMEBUFFER, multiFBO[0]);    
       gl2x.glDrawBuffer(GL.GL_COLOR_ATTACHMENT0);

File: java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -5351,7 +5351,7 @@ public void setShader(PShader shader, int kind) {
   }
 
 
-  public void resetShader(int kind) {
+  public void defaultShader(int kind) {
     if (kind == POLY_SHADER_SIMPLE) {
       if (defPolyShaderSimple == null || defPolyShaderSimple.contextIsOutdated()) {
         defPolyShaderSimple = new PolyShaderSimple(parent, defPolyShaderVertSimpleURL, defPolyShaderFragNoTexURL);

File: core/src/processing/core/PShape.java
Patch:
@@ -769,6 +769,7 @@ public PShape copy(PGraphics g) {
       res = g.createShape(PATH);
       copyPath(res);
     }
+    res.setName(name);
     return res;
   }
 

File: java/libraries/opengl/src/processing/opengl/LinePath.java
Patch:
@@ -392,7 +392,6 @@ static public LinePath createStrokedPath(LinePath src, float weight,
                                            float miterlimit, PMatrix2D transform) {
     final LinePath dest = new LinePath();
 
-//    strokeTo(src, weight, caps, join, miterlimit, transform, new LineSink() {
     strokeTo(src, weight, caps, join, miterlimit, transform, new LineStroker() {
       public void moveTo(int x0, int y0) {
         dest.moveTo(S15_16ToFloat(x0), S15_16ToFloat(y0));
@@ -419,7 +418,6 @@ public void end() {
   
   private static void strokeTo(LinePath src, float width, int caps, int join,
                                float miterlimit, PMatrix2D transform,
-//                               LineSink lsink) {
                                LineStroker lsink) {
     lsink = new LineStroker(lsink, FloatToS15_16(width), caps, join,
                             FloatToS15_16(miterlimit),
@@ -430,7 +428,6 @@ private static void strokeTo(LinePath src, float width, int caps, int join,
   }
   
     
-//  private static void pathTo(PathIterator pi, LineSink lsink) {
   private static void pathTo(PathIterator pi, LineStroker lsink) {
     float coords[] = new float[2];
     while (!pi.isDone()) {

File: java/libraries/opengl/src/processing/opengl/PShapeOpenGL.java
Patch:
@@ -1683,8 +1683,8 @@ public void scale(float x, float y, float z) {
   public void applyMatrix(PMatrix2D source) {
     transform(MATRIX, source.m00, source.m01, 0, source.m02,
                       source.m10, source.m11, 0, source.m12,
-                      0, 0, 1, 0,
-                      0, 0, 0, 1);
+                               0,          0, 1,          0,
+                               0,          0, 0,          1);
   }
   
 

File: java/libraries/opengl/src/processing/opengl/PFontTexture.java
Patch:
@@ -3,8 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2011 Andres Colubri
-  Copyright (c) 2004-08 Ben Fry and Casey Reas
+  Copyright (c) 2011-12 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: android/core/src/processing/core/PVector.java
Patch:
@@ -128,7 +128,7 @@ public PVector() {
    *
    * @param  x the x coordinate.
    * @param  y the y coordinate.
-   * @param  z the y coordinate.
+   * @param  z the z coordinate.
    */
   public PVector(float x, float y, float z) {
     this.x = x;

File: core/src/processing/core/PVector.java
Patch:
@@ -131,7 +131,7 @@ public PVector() {
    *
    * @param  x the x coordinate.
    * @param  y the y coordinate.
-   * @param  z the y coordinate.
+   * @param  z the z coordinate.
    */
   public PVector(float x, float y, float z) {
     this.x = x;

File: java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1950,6 +1950,8 @@ public PShape createShape(int type) {
     PShape3D shape = null;
     if (type == PShape.GROUP) {
       shape = new PShape3D(parent, PShape.GROUP);
+    } else if (type == PShape.PATH) {
+      shape = new PShape3D(parent, PShape.PATH);
     } else if (type == POINTS) {
       shape = new PShape3D(parent, PShape.GEOMETRY);
       shape.setKind(POINTS);

File: java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -9485,10 +9485,10 @@ public void end() {
           // be safely assumed here to be less or equal than
           // MAX_VERTEX_INDEX1 because the condition was checked
           // every time a new vertex was emitted (see vertex() below).
-          tessBlock = tess.addFillIndexBlock(tessBlock);
-          tessBlock.vertexCount = tessCount;
+          tessBlock = tess.addFillIndexBlock(tessBlock);          
           tessFirst = 0;
         }
+        tessBlock.vertexCount += tessCount;
         
         switch (tessType) {
         case TRIANGLE_FAN:

File: java/libraries/opengl/src/processing/opengl/PGL.java
Patch:
@@ -100,7 +100,7 @@ public class PGL {
    * primitive type we have 2^15 = 32768 as the maximum number of  vertices
    * that can be referred to within a single VBO. */
   public static final int MAX_TESS_VERTICES = 32768;
-  //public static final int MAX_TESS_VERTICES = 6;
+//  public static final int MAX_TESS_VERTICES = 4;
 
   /** Maximum number of indices. Arbitrarily set to 2^24. GLES doesn't impose
    * any restriction on the size of the index buffers, but in any case a

File: java/libraries/opengl/src/processing/opengl/PFontTexture.java
Patch:
@@ -227,6 +227,7 @@ public boolean contextIsOutdated() {
     }
     if (outdated) {
       for (int i = 0; i < textures.length; i++) {
+        pg.removeTextureObject(textures[i].glID);
         textures[i].glID = 0;
       }
     }

File: java/libraries/opengl/src/processing/opengl/PGL.java
Patch:
@@ -1245,7 +1245,8 @@ static public short makeIndex(int intIdx) {
     // http://stackoverflow.com/questions/4331021/java-opengl-gldrawelements-with-32767-vertices
     //return 32767 < intIdx ? (short)(intIdx - 65536) : (short)intIdx;
     if (32767 < intIdx) {
-      PGraphics.showWarning("P3D: Vertex index is greater than 32767");
+      PGraphics.showWarning("P3D: More than 32767 vertices in a single shape, not all will be drawn.\n" +
+                             "Consider splitting your large shape into multiple smaller shapes.");
       return 32767;
     } else {
       return (short)intIdx;

File: app/src/processing/app/contrib/ModeContribution.java
Patch:
@@ -92,8 +92,9 @@ public boolean accept(File dir, String name) {
       loader = new URLClassLoader(urlList);
   
       for (int j = 0; j < archives.length; j++) {
-        className = ToolContribution.findClassInZipFile(folder.getName(),
-                                                        archives[j]);
+        className = ToolContribution.findClassInZipFile( folder.getName(),
+                                                         archives[j] );
+		if (className != null) break;
       }
     } catch (MalformedURLException e) {
       // Maybe log this

File: core/src/processing/core/PGraphics.java
Patch:
@@ -344,6 +344,7 @@ public class PGraphics extends PImage implements PConstants {
 
   public int ambientColor;
   public float ambientR, ambientG, ambientB;
+  protected boolean setAmbient;
 
   public int specularColor;
   public float specularR, specularG, specularB;
@@ -6062,7 +6063,8 @@ protected void ambientFromCalc() {
     ambientColor = calcColor;
     ambientR = calcR;
     ambientG = calcG;
-    ambientB = calcB;
+    ambientB = calcB;    
+    setAmbient = true;
   }
 
   /**

File: java/libraries/opengl/src/processing/opengl/PShape3D.java
Patch:
@@ -2605,6 +2605,9 @@ protected void tessellateBox() {
       d = params[2];
     }
         
+    //in.generateBox(w, h, d);
+                       
+    
     float x1 = -w/2f; float x2 = w/2f;
     float y1 = -h/2f; float y2 = h/2f;
     float z1 = -d/2f; float z2 = d/2f;

File: app/src/processing/mode/javascript/ServingEditor.java
Patch:
@@ -48,9 +48,9 @@ protected void setServerPort ()
 			return;
 		}
 
-		if ( port < 0 || port > 65535 )
+		if ( port < BasicServer.MIN_PORT || port > BasicServer.MAX_PORT )
 		{
-			statusError("That port number is out of range");
+			statusError( "That port number is out of range" );
 			return;
 		}
 		

File: app/src/processing/app/Editor.java
Patch:
@@ -1719,7 +1719,7 @@ protected void handleCommentUncomment() {
       } else {
         // Check the first characters to see if it's already a comment.
         String begin = textarea.getText(pos, prefixLen);
-        System.out.println("begin is '" + begin + "'");
+        //System.out.println("begin is '" + begin + "'");
         commented = begin.equals(prefix);
       }
     }

File: app/src/processing/app/Editor.java
Patch:
@@ -1717,9 +1717,9 @@ protected void handleCommentUncomment() {
       if (pos + prefixLen > length) {
         commented = false;
       } else {
-        // Check the first two characters to see if it's already a comment.
-        String begin = textarea.getText(pos, 2);
-        //System.out.println("begin is '" + begin + "'");
+        // Check the first characters to see if it's already a comment.
+        String begin = textarea.getText(pos, prefixLen);
+        System.out.println("begin is '" + begin + "'");
         commented = begin.equals(prefix);
       }
     }

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -139,7 +139,7 @@ protected void allocate() {
 //      parent.addListeners(canvas);
 ////      canvas.createBufferStrategy(1);
 //      g2 = (Graphics2D) canvas.getGraphics();
-      parent.addListeners(parent);
+      parent.updateListeners(parent);  // in case they're already there
 
       // Needs to be RGB otherwise there's a major performance hit [0204]
       // http://code.google.com/p/processing/issues/detail?id=729

File: android/core/src/processing/opengl/PShape3D.java
Patch:
@@ -3761,7 +3761,7 @@ public void draw(PGraphics g) {
         render(texture);
       }
     
-      if (matrix != null) {
+      if (matrix != null && applyMatrix) {
         g.popMatrix();
       } 
     }

File: java/libraries/opengl/src/processing/opengl/PShape3D.java
Patch:
@@ -3772,7 +3772,7 @@ public void draw(PGraphics g) {
         render(texture);
       }
     
-      if (matrix != null) {
+      if (matrix != null && applyMatrix) {
         g.popMatrix();
       } 
     }

File: android/core/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1897,7 +1897,7 @@ public PShape createShape(int type) {
     } else if (type == LINES) {
       shape = new PShape3D(parent, PShape.GEOMETRY);
       shape.setKind(LINES);
-    } else if (type == TRIANGLES) {
+    } else if (type == TRIANGLE || type == TRIANGLES) {
       shape = new PShape3D(parent, PShape.GEOMETRY);
       shape.setKind(TRIANGLES);
     } else if (type == TRIANGLE_FAN) {
@@ -1906,7 +1906,7 @@ public PShape createShape(int type) {
     } else if (type == TRIANGLE_STRIP) {      
       shape = new PShape3D(parent, PShape.GEOMETRY);
       shape.setKind(TRIANGLE_STRIP);
-    } else if (type == QUADS) {
+    } else if (type == QUADS || type == QUADS) {
       shape = new PShape3D(parent, PShape.GEOMETRY);
       shape.setKind(QUADS);
     } else if (type == QUAD_STRIP) {

File: java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1908,7 +1908,7 @@ public PShape createShape(int type) {
     } else if (type == LINES) {
       shape = new PShape3D(parent, PShape.GEOMETRY);
       shape.setKind(LINES);
-    } else if (type == TRIANGLES) {
+    } else if (type == TRIANGLE || type == TRIANGLES) {
       shape = new PShape3D(parent, PShape.GEOMETRY);
       shape.setKind(TRIANGLES);
     } else if (type == TRIANGLE_FAN) {
@@ -1917,7 +1917,7 @@ public PShape createShape(int type) {
     } else if (type == TRIANGLE_STRIP) {      
       shape = new PShape3D(parent, PShape.GEOMETRY);
       shape.setKind(TRIANGLE_STRIP);
-    } else if (type == QUADS) {
+    } else if (type == QUADS || type == QUADS) {
       shape = new PShape3D(parent, PShape.GEOMETRY);
       shape.setKind(QUADS);
     } else if (type == QUAD_STRIP) {

File: android/core/src/processing/opengl/PTexture.java
Patch:
@@ -769,7 +769,7 @@ protected void allocate() {
     pgl.glTexImage2D(glTarget, 0, glFormat, glWidth, glHeight, 0, PGL.GL_RGBA, PGL.GL_UNSIGNED_BYTE, null);
     
     // Makes sure that the texture buffer in video memory doesn't contain any garbage.
-    pgl.initTexture(glTarget, width, height, PGL.GL_RGBA, PGL.GL_UNSIGNED_BYTE);
+    pgl.initTexture(glTarget, PGL.GL_RGBA, width, height);
     
     pgl.glBindTexture(glTarget, 0);
     pgl.disableTexturing(glTarget);

File: core/src/processing/core/PImage.java
Patch:
@@ -787,7 +787,7 @@ public PImage get() {
   public void set(int x, int y, int c) {
     if ((x < 0) || (y < 0) || (x >= width) || (y >= height)) return;
     pixels[y*width + x] = c;
-    updatePixelsImpl(x, y, x+1, y+1);  // slow?
+    updatePixelsImpl(x, y, 1, 1);  // slow?
   }
 
 
@@ -847,7 +847,7 @@ protected void setImpl(int dx, int dy, int sx, int sy, int sw, int sh,
       srcOffset += src.width;
       dstOffset += width;
     }
-    updatePixelsImpl(sx, sy, sx+sw, sy+sh);
+    updatePixelsImpl(sx, sy, sw, sh);
   }
 
 

File: app/src/processing/mode/javascript/BasicServer.java
Patch:
@@ -363,7 +363,9 @@ public synchronized void run ()
 				try {
 					handleClient();
 				} catch (Exception e) {
-					e.printStackTrace();
+					// TODO check why this is raised instead of 
+					// sending 404 for favicon.ico, etc. ..
+					//e.printStackTrace();
 				}
 			}
 			socket = null;

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -2337,14 +2337,14 @@ class FocusHandler implements FocusListener
   {
     public void focusGained(FocusEvent evt)
     {
-      System.out.println("JEditTextArea: focusGained");
+//      System.out.println("JEditTextArea: focusGained");
       setCaretVisible(true);
 //      focusedComponent = JEditTextArea.this;
     }
 
     public void focusLost(FocusEvent evt)
     {
-      System.out.println("JEditTextArea: focusLost");
+//      System.out.println("JEditTextArea: focusLost");
       setCaretVisible(false);
 //      focusedComponent = null;
     }

File: app/src/processing/mode/java/preproc/PdePreprocessor.java
Patch:
@@ -711,7 +711,8 @@ public String[] getDefaultImports() {
    * @return true if this shouldn't be added to the final code
    */
   public boolean ignoreImport(String pkg) {
-    return pkg.startsWith("processing.xml.");
+    return false;
+//    return pkg.startsWith("processing.xml.");
   }
 
   /**

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -929,7 +929,7 @@ public boolean accept(File dir, String name) {
 //    }
     // If the renderer is set to the built-in OpenGL library,
     // then it's definitely an OpenGL applet.
-    if (renderer.equals("OPENGL")) {
+    if (renderer.equals("P3D") || renderer.equals("OPENGL")) {
       openglApplet = true;
     }
     if (is == null) {

File: java/libraries/lwjgl/src/processing/lwjgl/PGraphicsLWJGL.java
Patch:
@@ -7961,7 +7961,7 @@ public void addFillVertex(float x, float y, float z,
       fillAmbient.position(fillVertexCount);
       fillAmbient.put(am);      
       fillSpecular.position(fillVertexCount);
-      fillAmbient.put(am).put(sp);
+      fillSpecular.put(sp);
       fillEmissive.position(fillVertexCount);
       fillEmissive.put(em);
       fillShininess.position(fillVertexCount);

File: java/libraries/lwjgl/src/processing/lwjgl/PGL.java
Patch:
@@ -927,8 +927,7 @@ public void disableTexturing(int target) {
     GL11.glDisable(target);
   }   
   
-  public void initTexture(int target, int width, int height, int format, int type) {
-    //int[] texels = new int[width * height];    
+  public void initTexture(int target, int width, int height, int format, int type) {    
     IntBuffer texels = createIntBuffer(width * height);    
     GL11.glTexSubImage2D(target, 0, 0, 0, width, height, format, type, texels);
   }

File: core/src/processing/core/PGraphics.java
Patch:
@@ -5130,7 +5130,7 @@ public void perspective() {
    * @param fovy field-of-view angle (in radians) for vertical direction
    * @param aspect ratio of width to height
    * @param zNear z-position of nearest clipping plane
-   * @param zFar z-position of nearest farthest plane
+   * @param zFar z-position of farthest clipping plane
    */
   public void perspective(float fovy, float aspect, float zNear, float zFar) {
     showMissingWarning("perspective");

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -1265,8 +1265,8 @@ public void pushMatrix() {
 
   public void popMatrix() {
     if (transformCount == 0) {
-      throw new RuntimeException("missing a popMatrix() " +
-                                 "to go with that pushMatrix()");
+      throw new RuntimeException("missing a pushMatrix() " +
+                                 "to go with that popMatrix()");
     }
     transformCount--;
     g2.setTransform(transformStack[transformCount]);

File: app/src/processing/mode/javascript/JavaScriptEditor.java
Patch:
@@ -459,13 +459,13 @@ public boolean handleSaveRequest(boolean immediately)
     } else if (immediately) {
       handleSave();
 	  statusEmpty();
-	  startServer( getExportFolder() );
+	  handleStartServer();
     } else {
       SwingUtilities.invokeLater(new Runnable() {
           public void run() {
             handleSave();
 			statusEmpty();
-			startServer( getExportFolder() );
+			handleStartServer();
           }
         });
     }

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -4013,7 +4013,7 @@ public void lights() {
     colorMode = RGB;
 
     lightFalloff(1, 0, 0);
-    lightSpecular(255, 255, 255);
+    lightSpecular(0, 0, 0);
 
     ambientLight(colorModeX * 0.5f, colorModeY * 0.5f, colorModeZ * 0.5f);
     directionalLight(colorModeX * 0.5f, colorModeY * 0.5f, colorModeZ * 0.5f, 0, 0, -1);

File: java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -4019,7 +4019,7 @@ public void lights() {
     colorMode = RGB;
 
     lightFalloff(1, 0, 0);
-    lightSpecular(255, 255, 255);
+    lightSpecular(0, 0, 0);
 
     ambientLight(colorModeX * 0.5f, colorModeY * 0.5f, colorModeZ * 0.5f);
     directionalLight(colorModeX * 0.5f, colorModeY * 0.5f, colorModeZ * 0.5f, 0, 0, -1);

File: java/libraries/opengl/src/processing/opengl/PFontTexture.java
Patch:
@@ -28,6 +28,7 @@
 import processing.core.PConstants;
 import processing.core.PFont;
 import processing.core.PImage;
+
 import java.util.HashMap;
 
 /**
@@ -51,7 +52,7 @@ class PFontTexture implements PConstants {
   protected PApplet parent;
   protected PGraphicsOpenGL pg;
   protected PGL pgl;             
-  protected PGL.Context context;
+  protected PGL.Context context; 
   protected PFont font;
 
   protected int maxTexWidth;

File: android/core/src/processing/core/PShape3D.java
Patch:
@@ -2391,10 +2391,8 @@ protected void tessellate() {
         
         if (family == GEOMETRY) {
           if (kind == POINTS) {
-            if (normalMode == NORMAL_MODE_AUTO) in.calcPointsNormals();
             tessellator.tessellatePoints();    
           } else if (kind == LINES) {
-            if (normalMode == NORMAL_MODE_AUTO) in.calcLinesNormals();
             tessellator.tessellateLines();    
           } else if (kind == TRIANGLE || kind == TRIANGLES) {
             if (stroke) in.addTrianglesEdges();
@@ -2571,7 +2569,6 @@ protected void tessellateSphere() {
     if ((nu < 3) || (nv < 2)) {
       nu = nv = 30;
     }
- 
     
     float startLat = -90;
     float startLon = 0.0f;

File: android/core/src/processing/core/PFramebuffer.java
Patch:
@@ -514,11 +514,11 @@ protected void createPixelBuffer() {
   
   // Internal copy to texture method.
   protected void copyToTexture(IntBuffer buffer, int glid, int gltarget) {
-    pgl.glEnable(gltarget);
+    pgl.enableTexturing(gltarget);
     pgl.glBindTexture(gltarget, glid);    
     pgl.glTexSubImage2D(gltarget, 0, 0, 0, width, height, PGL.GL_RGBA, PGL.GL_UNSIGNED_BYTE, buffer);
     pgl.glBindTexture(gltarget, 0);
-    pgl.glDisable(gltarget);    
+    pgl.disableTexturing(gltarget);    
   }  
   
   public boolean validateFbo() {

File: android/core/src/processing/core/PShader.java
Patch:
@@ -140,7 +140,7 @@ public void stop() {
    * @return int
    */
   public int getAttribLocation(String name) {
-    init();
+    init();    
     return pgl.glGetAttribLocation(programObject, name);
   }
 
@@ -254,9 +254,8 @@ protected void init() {
       checkLogInfo("Vertex shader " + vertexFilename + " compilation: ", vertexShader);
       checkLogInfo("Fragment shader " + fragmentFilename + " compilation: ", fragmentShader);
       
-      pgl.glLinkProgram(programObject);
+      pgl.glLinkProgram(programObject);      
       pgl.glValidateProgram(programObject);
-      checkLogInfo("GLSL program validation: ", programObject);
     }
   }  
   

File: android/core/src/processing/core/PShape3D.java
Patch:
@@ -3708,7 +3708,7 @@ protected void renderFill(PImage textureImage) {
     if (textureImage != null) {
       tex = pg.getTexture(textureImage);
       if (tex != null) {
-        pgl.glEnable(tex.glTarget);          
+        pgl.enableTexturing(tex.glTarget);          
         pgl.glBindTexture(tex.glTarget, tex.glID);        
       }
     }    
@@ -3746,7 +3746,7 @@ protected void renderFill(PImage textureImage) {
     
     if (tex != null) {
       pgl.glBindTexture(tex.glTarget, 0); 
-      pgl.glDisable(tex.glTarget);
+      pgl.disableTexturing(tex.glTarget);
     }    
   }  
   

File: android/core/src/processing/core/PGL.java
Patch:
@@ -54,6 +54,9 @@ public class PGL {
   
   /** Size of a vertex index. */
   static final int SIZEOF_INDEX = SIZEOF_SHORT; 
+  
+  /** Type of a vertex index. */
+  static final int INDEX_TYPE = GLES20.GL_UNSIGNED_SHORT;
 
   /** Initial sizes for arrays of input and tessellated data. */
   public static final int DEFAULT_IN_VERTICES = 16;

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -30,7 +30,6 @@
 import java.util.HashSet;
 import java.util.Stack;
 import javax.microedition.khronos.opengles.*;
-import android.opengl.GLSurfaceView;
 
 
 // drawPixels is missing...calls to glDrawPixels are commented out
@@ -1688,9 +1687,9 @@ protected void defaultSettings() {
   // HINTS
 
   public void hint(int which) {
-    boolean oldValue = hints[which];
+    boolean oldValue = which > 0 ? hints[which] : hints[-which];
     super.hint(which);
-    boolean newValue = hints[which];
+    boolean newValue = which > 0 ? hints[which] : hints[-which];
 
     if (oldValue == newValue) {
       return;

File: java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1671,9 +1671,9 @@ protected void defaultSettings() {
   // HINTS
 
   public void hint(int which) {
-    boolean oldValue = hints[which];
+    boolean oldValue = which > 0 ? hints[which] : hints[-which];
     super.hint(which);
-    boolean newValue = hints[which];
+    boolean newValue = which > 0 ? hints[which] : hints[-which];
 
     if (oldValue == newValue) {
       return;

File: app/src/processing/mode/javascript/JavaScriptMode.java
Patch:
@@ -22,6 +22,8 @@
  */
 public class JavaScriptMode extends Mode
 {
+	public boolean showSizeWarning = true;
+	
 	private JavaScriptEditor jsEditor;
 
   // create a new editor with the mode

File: java/libraries/opengl/src/processing/opengl/PGL.java
Patch:
@@ -1067,7 +1067,7 @@ public void setDefaultBlend() {
   }
   
   public void setAdditiveBlend() {
-    gl.glBlendFunc(GL.GL_SRC_ALPHA, GL.GL_ONE_MINUS_SRC_ALPHA);
+    gl.glBlendFunc(GL.GL_SRC_ALPHA, GL.GL_ONE);;
   }
   
   public void setSubstractiveBlend() {

File: java/libraries/opengl/src/processing/opengl/PShader.java
Patch:
@@ -34,7 +34,7 @@
 public class PShader {
   protected PApplet parent;
   protected PGraphicsOpenGL ogl; 
-  protected PGLJava pgl;
+  protected PGL pgl;
   
   protected int programObject;
   protected int vertexShader;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -3504,7 +3504,7 @@ public float textDescent() {
   public void textFont(PFont which) {
     if (which != null) {
       textFont = which;
-      if (hints[ENABLE_NATIVE_FONTS]) {
+      if (hintEnabled(ENABLE_NATIVE_FONTS)) {
         //if (which.font == null) {
         which.findFont();
         //}

File: java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -8529,8 +8529,8 @@ protected void addLineToFill(int i0, int i1, int vcount, int icount) {
       float dy = y1 - y0;
       float len = PApplet.sqrt(dx * dx + dy * dy);
 
-      float linePerpX = -dy * (strokeWeight / len);
-      float linePerpY =  dx * (strokeWeight / len);
+      float linePerpX = -dy * (0.5f * strokeWeight / len);
+      float linePerpY =  dx * (0.5f * strokeWeight / len);
       
       tessGeo.putLineVertexIntoFill(inGeo, i0, +linePerpX, +linePerpY, vcount);
       tessGeo.fillIndices[icount++] = vcount;

File: java/libraries/opengl/src/processing/opengl/PShape3D.java
Patch:
@@ -890,7 +890,7 @@ protected void tessellate() {
             if (stroke) in.addQuadStripEdges();
             tessellator.tessellateQuadStrip();
           } else if (kind == POLYGON) {
-            if (stroke) in.addPolygonEdges();
+            if (stroke) in.addPolygonEdges(isClosed);
             tessellator.tessellatePolygon(isSolid, isClosed);
           }
         } else if (family == PRIMITIVE) {

File: app/src/processing/app/syntax/PdeKeywords.java
Patch:
@@ -102,7 +102,7 @@ public PdeKeywords(File file) throws IOException {
    */
   public void addColoring(String keyword, String coloring) {
     if (keywordColoring == null) {
-      keywordColoring = new KeywordMap(true);
+      keywordColoring = new KeywordMap(false);
     }
     // text will be KEYWORD or LITERAL
     boolean isKey = (coloring.charAt(0) == 'K');

File: core/src/processing/core/PGraphics.java
Patch:
@@ -416,7 +416,7 @@ public class PGraphics extends PImage implements PConstants {
   protected float vertices[][] =
     new float[DEFAULT_VERTICES][VERTEX_FIELD_COUNT];
   protected int vertexCount; // total number of vertices
-
+  
   // ........................................................
 
   protected boolean bezierInited = false;

File: core/src/processing/core/PShape.java
Patch:
@@ -155,7 +155,7 @@ public class PShape implements PConstants {
    * two variables.
    */
   protected float[][] vertices;
-
+  
   protected PShape parent;
   protected int childCount;
   protected PShape[] children;  
@@ -246,6 +246,7 @@ public boolean isVisible() {
     return visible;
   }
 
+  
   /**
    * ( begin auto-generated from PShape_setVisible.xml )
    * 
@@ -1332,5 +1333,4 @@ protected void checkMatrix(int dimensions) {
 
 
   // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
-
 }
\ No newline at end of file

File: app/src/processing/app/macosx/Platform.java
Patch:
@@ -51,6 +51,7 @@ public void setLookAndFeel() throws Exception {
 
 
   public void init(Base base) {
+    super.init(base);
     System.setProperty("apple.laf.useScreenMenuBar", "true");
     ThinkDifferent.init(base);
     /*

File: app/src/processing/app/windows/Platform.java
Patch:
@@ -54,7 +54,6 @@ public class Platform extends processing.app.Platform {
 
   public void init(Base base) {
     super.init(base);
-
     checkAssociations();
     //checkQuickTime();
     checkPath();

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -663,9 +663,7 @@ protected void checkSettings() {
    * This is currently called by checkSettings(), during beginDraw().
    */
   protected void defaultSettings() {  // ignore
-//    System.out.println("PGraphics.defaultSettings() " + width + " " + height);
-
-    noSmooth();  // 0149
+    smooth();  // 2.0a5
 
     colorMode(RGB, 255);
     fill(255);

File: core/src/processing/core/PApplet.java
Patch:
@@ -236,7 +236,6 @@ public class PApplet extends Applet
    * inside setup() is a joke, since it's long since the AWT has been invoked.
    */
   static public boolean useQuartz = true;
-  //static public String useQuartz = "true";
 
   /**
    * Modifier flags for the shortcut key used to trigger menus.
@@ -973,11 +972,11 @@ public class RegisteredMethods {
     int count;
     Object objects[];
     Method methods[];
-
+    Object[] convArgs = new Object[] { };
 
     // convenience version for no args
     public void handle() {
-      handle(new Object[] { });
+      handle(convArgs);
     }
 
     public void handle(Object oargs[]) {

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -755,7 +755,6 @@ public boolean exportApplet(File appletFolder) throws SketchException, IOExcepti
       // regex would fix this too, please submit one if that's your thing.)
       // http://code.google.com/p/processing/issues/detail?id=877
       found = found.substring(0, found.indexOf("*/"));
-      System.out.println(found);
       String[] pieces = PApplet.split(found, '\n');
       for (String line : pieces) {
         // if this line starts with * characters, remove 'em

File: app/src/processing/app/Base.java
Patch:
@@ -56,8 +56,8 @@ public class Base {
   /** Set true if this a proper release rather than a numbered revision. */
   static public boolean RELEASE = false;
   /** True if heavy debugging error/log messages are enabled */
-  static public boolean DEBUG = false;
-//  static public boolean DEBUG = true;
+  //  static public boolean DEBUG = false;
+  static public boolean DEBUG = true;
 
   static HashMap<Integer, String> platformNames =
     new HashMap<Integer, String>();

File: app/src/processing/mode/android/Devices.java
Patch:
@@ -115,7 +115,7 @@ private final Device blockingGetEmulator() {
         return null;
       }
     } else {
-      System.out.println("Emulator is " + emuController.getState() + 
+      System.out.println("Emulator is " + emuController.getState() +
                          ", which is not expected.");
     }
 //    System.out.println("and now we're out");
@@ -126,7 +126,8 @@ private final Device blockingGetEmulator() {
       //      System.err.println("AndroidEnvironment: emulatorcontroller state is "
       //          + emuController.getState());
       if (emuController.getState() == State.NOT_RUNNING) {
-        System.err.println("Ouch. Emulator got killed, I think.");
+        System.err.println("Error while starting the emulator. (" +
+                           emuController.getState() + ")");
         return null;
       }
       emu = find(true);

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -3142,8 +3142,6 @@ protected void textLineAlignImpl(char buffer[], int start, int stop,
    */
   protected void textLineImpl(char buffer[], int start, int stop,
                               float x, float y) {
-    System.out.println("PGraphics: Using inefficient font rendering.");
-    new Exception().printStackTrace(System.out);
     for (int index = start; index < stop; index++) {
       textCharImpl(buffer[index], x, y);
 

File: android/core/src/processing/core/PGraphicsAndroid2D.java
Patch:
@@ -1146,6 +1146,8 @@ protected void textLineImpl(char buffer[], int start, int stop,
                               float x, float y) {
     Typeface font = textFont.getTypeface();
     if (font == null) {
+      showWarning("Inefficient font rendering: use createFont() with a TTF/OTF instead of loadFont().");
+      //new Exception().printStackTrace(System.out);
       super.textLineImpl(buffer, start, stop, x, y);
       return;
     }

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -1522,6 +1522,8 @@ public void beginShape(int kind) {
       // reset vertex, line and triangle information
       // every shape is rendered at endShape();
       vertexCount = 0;
+      curveVertexCount = 0;
+      
       pathCount = 0;
       faceCount = 0;
       

File: java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1819,6 +1819,8 @@ public void beginShape(int kind) {
       // reset vertex, line and triangle information
       // every shape is rendered at endShape();
       vertexCount = 0;
+      curveVertexCount = 0;
+      
       pathCount = 0;
       faceCount = 0;
       

File: app/src/processing/app/Editor.java
Patch:
@@ -1705,6 +1705,7 @@ protected void handleCommentUncomment() {
     textarea.select(textarea.getLineStartOffset(startLine),
                     textarea.getLineStopOffset(stopLine) - 1);
     stopCompoundEdit();
+    sketch.setModified(true);
   }
 
 
@@ -1758,6 +1759,7 @@ public void handleIndentOutdent(boolean indent) {
     textarea.select(textarea.getLineStartOffset(startLine),
                     textarea.getLineStopOffset(stopLine) - 1);
     stopCompoundEdit();
+    sketch.setModified(true);
   }
 
 

File: app/src/processing/mode/android/AndroidSDK.java
Patch:
@@ -104,11 +104,11 @@ protected void checkDebugCertificate() {
           for (String line : lines) {
             String[] m = PApplet.match(line, "Valid from: .* until: (.*)");
             if (m != null) {
-              String timestamp = m[1];
+              String timestamp = m[1].trim();
               // "Sun Jan 22 11:09:08 EST 2012"
               // Hilariously, this is the format of Date.toString(), however 
               // it isn't the default for SimpleDateFormat or others. Yay!
-              DateFormat df = new SimpleDateFormat("EEE MMM dd HH:mm:ss z yyyy");
+              DateFormat df = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
               try {
                 Date date = df.parse(timestamp);
                 long expireMillis = date.getTime();

File: app/src/processing/mode/android/AndroidRunner.java
Patch:
@@ -84,7 +84,7 @@ public void launch(Future<Device> deviceFuture) {
     listener.statusNotice("Starting sketch on " + device.getId());
     if (startSketch(build, device)) {
       listener.statusNotice("Sketch launched on the "
-                            + (device.isEmulator() ? "emulator" : "phone") + ".");
+                            + (device.isEmulator() ? "emulator" : "device") + ".");
     } else {
       listener.statusError("Could not start the sketch.");
     }
@@ -174,7 +174,7 @@ private void runSketchOnDevice(Sketch sketch,
         listener.statusNotice("Starting sketch on " + device.getId());
         if (startSketch(build, device)) {
           listener.statusNotice("Sketch launched on the "
-              + (device.isEmulator() ? "emulator" : "phone") + ".");
+              + (device.isEmulator() ? "emulator" : "device") + ".");
         } else {
           listener.statusError("Could not start the sketch.");
         }

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -1288,8 +1288,8 @@ private boolean exportApplication(File destFolder,
 //            Base.copyDir(exportFile, new File(destFolder, exportName));
 //          }
 
-        } else if (exportFile.getName().toLowerCase().endsWith(".zip") ||
-                   exportFile.getName().toLowerCase().endsWith(".jar")) {
+        } else if (exportName.toLowerCase().endsWith(".zip") ||
+                   exportName.toLowerCase().endsWith(".jar")) {
           Base.copyFile(exportFile, new File(jarFolder, exportName));
           jarListVector.add(exportName);
 

File: app/src/processing/mode/android/AndroidBuild.java
Patch:
@@ -33,7 +33,7 @@
 
 
 class AndroidBuild extends JavaBuild {
-  static final String basePackage = "processing.changethispackage.beforesubmittingtothemarket";
+  static final String basePackage = "changethispackage.beforesubmitting.tothemarket";
   static final String sdkVersion = "8";
   static final String sdkTarget = "android-" + sdkVersion;
 

File: app/src/processing/app/Library.java
Patch:
@@ -103,17 +103,20 @@ public Library(File folder, String subfolder) {
     // for the host platform, need to figure out what's available
     File nativeLibraryFolder = libraryFolder;
     String hostPlatform = Base.getPlatformName();
+//    System.out.println("1 native lib folder now " + nativeLibraryFolder);
     // see if there's a 'windows', 'macosx', or 'linux' folder
     File hostLibrary = new File(libraryFolder, hostPlatform);
     if (hostLibrary.exists()) {
       nativeLibraryFolder = hostLibrary;
     }
+//    System.out.println("2 native lib folder now " + nativeLibraryFolder);
     // check for bit-specific version, e.g. on windows, check if there
     // is a window32 or windows64 folder (on windows)
     hostLibrary = new File(libraryFolder, hostPlatform + Base.getNativeBits());
     if (hostLibrary.exists()) {
       nativeLibraryFolder = hostLibrary;
     }
+//    System.out.println("3 native lib folder now " + nativeLibraryFolder);
     // save that folder for later use
     nativeLibraryPath = nativeLibraryFolder.getAbsolutePath();
 

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -508,7 +508,7 @@ protected boolean ignorableImport(String pkg) {
   
   
   protected int findErrorFile(int errorLine) {
-    for (int i = 1; i < sketch.getCodeCount(); i++) {
+    for (int i = sketch.getCodeCount() - 1; i > 0; i--) {
       SketchCode sc = sketch.getCode(i);
       if (sc.isExtension("pde") && (sc.getPreprocOffset() < errorLine)) {
         // keep looping until the errorLine is past the offset
@@ -1611,4 +1611,5 @@ static protected void packClassPathIntoZipFileRecursive(File dir,
       }
     }
   }
-}
\ No newline at end of file
+}
+

File: app/src/processing/mode/android/AndroidEditor.java
Patch:
@@ -117,7 +117,7 @@ public JMenu buildFileMenu() {
     JMenuItem exportPackage = Base.newJMenuItemShift(exportPkgTitle, 'E');
     exportPackage.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {
-        handleExportApplication();
+        handleExportPackage();
       }
     });
     

File: app/src/processing/app/ContributionListPanel.java
Patch:
@@ -162,9 +162,12 @@ public void run() {
           ContributionPanel panel = panelByContribution.get(contribution);
           if (panel != null) {
             remove(panel);
+            panelByContribution.remove(contribution);
           }
         }
         
+        updatePanelOrdering();
+        updateColors();
         updateUI();
       }
     });

File: core/src/processing/core/PImage.java
Patch:
@@ -56,8 +56,8 @@
  * @usage Web &amp; Application
  * @instanceName img any variable of type PImage
  * @see PApplet#loadImage(String)
- * @see PGraphics#imageMode(int)
- * @see PApplet#createImage(int, int)
+ * @see PApplet#imageMode(int)
+ * @see PApplet#createImage(int, int, int)
  */
 public class PImage implements PConstants, Cloneable {
 

File: app/src/processing/app/ContributionListing.java
Patch:
@@ -446,7 +446,7 @@ public ArrayList<AdvertisedContribution> getLibraries(File f) {
           System.arraycopy(lines, start, strings, 0, length);
           
           HashMap<String,String> exports = new HashMap<String,String>();
-          Base.readSettings(strings, exports);
+          Base.readSettings(null, strings, exports);
           
           Type kind = Contribution.Type.toType(type);
           outgoing.add(new AdvertisedContribution(kind, exports));

File: core/src/processing/core/PVector.java
Patch:
@@ -489,7 +489,7 @@ public void div(PVector v) {
 
 
   /**
-   * Multiply each element of one vector by the individual elements of another
+   * Divide each element of one vector by the individual elements of another
    * vector, and return the result as a new PVector.
    */
   static public PVector div(PVector v1, PVector v2) {

File: core/src/processing/core/PApplet.java
Patch:
@@ -5190,7 +5190,7 @@ public PShape createGeometry(String name, int type) {
 
 // ???
   // NODE I/O (XML, JSON, etc.)
-  public XML loadNode(String filename) {
+  public XML loadXML(String filename) {
     return new XML(this, filename);
   }
 

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -1305,12 +1305,12 @@ public void scale(float sx, float sy, float sz) {
   }
   
 
-  public void skewX(float angle) {
+  public void shearX(float angle) {
     g2.shear(Math.tan(angle), 0);
   }
 
 
-  public void skewY(float angle) {
+  public void shearY(float angle) {
     g2.shear(0, Math.tan(angle));
   }
 

File: core/src/processing/core/PShapeSVG.java
Patch:
@@ -163,7 +163,7 @@ public class PShapeSVG extends PShape {
   public PShapeSVG(PApplet parent, String filename) {
     // this will grab the root document, starting <svg ...>
     // the xml version and initial comments are ignored
-    this(parent.loadNode(filename));
+    this(parent.loadXML(filename));
   }
 
 

File: java/libraries/opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1878,8 +1878,8 @@ protected void vertexTexture(float u, float v, int t) {
                                    "using u and v coordinates with vertex()");
       }
       if (textureMode == IMAGE) {
-        u /= (float) img.width;
-        v /= (float) img.height;
+        u /= img.width;
+        v /= img.height;
       }
 
       texturesU[t] = u;

File: android/core/src/processing/core/PFontTexture.java
Patch:
@@ -127,7 +127,7 @@ public boolean addTexture() {
       h = PApplet.min(2 * textures[currentTex].glHeight, maxTexHeight);
       resize = true;
     } else {
-      h = PApplet.min(PGraphicsAndroid3D.maxTextureSize, 512, maxTexHeight / 4);
+      h = PApplet.min(PGraphicsAndroid3D.maxTextureSize, font.size * 2, maxTexHeight / 4);
       resize = false;
     }
     

File: core/src/processing/core/Table.java
Patch:
@@ -127,6 +127,8 @@ public Table(PApplet parent, String filename) {
   
   
   public Table(BufferedReader reader) {
+    columns = new Object[0];
+    columnTypes = new int[0];
     try {
       boolean csv = peekCSV(reader);
       if (csv) {

File: app/src/processing/app/Base.java
Patch:
@@ -192,6 +192,9 @@ public void run() {
               Socket s = ss.accept();
               BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream()));
               String receivedKey = br.readLine();
+              
+              if (platform.base == null) continue;
+              
               if (key.equals(receivedKey)) {
                 String filename = br.readLine();
                 if (filename != null) {

File: app/src/processing/app/Editor.java
Patch:
@@ -816,8 +816,8 @@ public JMenu getToolMenu() {
 
 
   protected void rebuildToolList() {
-    coreTools = ToolContribution.list(base.getToolsFolder());
-    contribTools = ToolContribution.list(base.getSketchbookToolsFolder());
+    coreTools = ToolContribution.list(base.getToolsFolder(), true);
+    contribTools = ToolContribution.list(base.getSketchbookToolsFolder(), true);
   }
 
 

File: app/src/processing/app/Library.java
Patch:
@@ -72,10 +72,9 @@ public boolean accept(File dir, String name) {
       return lc.endsWith(".jar") || lc.endsWith(".zip");
     }
   };
-
-
+  
   public Library(File folder, String subfolder) {
-    super(folder);
+    super(folder, "library.properties");
     this.group = subfolder;
 
     libraryFolder = new File(folder, "library");

File: app/src/processing/app/ToolContribution.java
Patch:
@@ -45,7 +45,7 @@ static public ToolContribution getTool(File folder) {
   }
   
   private ToolContribution(File folder) throws Exception {
-    super(folder);
+    super(folder, "tool.properties");
     
     File toolDirectory = new File(folder, "tool");
     // add dir to classpath for .classes

File: app/src/processing/app/UpdateCheck.java
Patch:
@@ -124,7 +124,7 @@ public void updateCheck() throws Exception {
         // should really be handled better).
         Thread.sleep(5 * 1000);
         if (!base.libraryManagerFrame.hasAlreadyBeenOpened() &&
-            base.libraryManagerFrame.contributionListing.hasUpdates()) {
+            base.libraryManagerFrame.contribListing.hasUpdates()) {
           promptToOpenContributionManager();
         }
       }

File: app/src/processing/app/contribution/Contribution.java
Patch:
@@ -24,7 +24,7 @@
 
 import java.util.List;
 
-public interface Contribution extends Comparable<Contribution> {
+public interface Contribution {
   // "Sound"
   String getCategory();
 

File: app/src/processing/mode/javascript/JavaScriptEditor.java
Patch:
@@ -62,7 +62,7 @@ public Formatter createFormatter ()
   
   public JMenu buildFileMenu () 
   {
-    JMenuItem exportItem = Base.newJMenuItem("export title", 'E');
+    JMenuItem exportItem = Base.newJMenuItem("Export", 'E');
     exportItem.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {
         handleExport( true );

File: app/src/processing/app/Base.java
Patch:
@@ -1414,7 +1414,7 @@ public void handleAddOrRemoveLibrary() {
    */
   public int handleConfirmAndInstallLibrary(File libFile) {
     if (libraryManagerFrame == null) libraryManagerFrame = new LibraryManager();
-    return libraryManagerFrame.confirmAndInstallLibrary(activeEditor, libFile);
+    return libraryManagerFrame.confirmAndInstallLibrary(activeEditor, libFile).size();
   }
 
   // ...................................................................

File: app/src/processing/app/FileDownloader.java
Patch:
@@ -77,6 +77,9 @@ public void run() {
       if (downloadFile(url, dest, progressMonitor)) {
         libFile = dest;
       }
+    } catch (FileNotFoundException e) {
+      Base.showWarning("Trouble downloading file",
+                       "The file was not found on the server.\n", null);
     } catch (IOException e) {
       Base.showWarning("Trouble downloading file",
                        "An error occured while downloading the file:\n"

File: java/libraries/video/src/processing/video/Capture.java
Patch:
@@ -417,7 +417,7 @@ static public String[] list(String sourceName) {
   }
   
   static protected String[] list(String sourceName, String propertyName) {
-    GSVideo.init();
+    Video.init();
     String[] valuesListing = new String[0];
     Element videoSource = ElementFactory.make(sourceName, "Source");
     PropertyProbe probe = PropertyProbe.wrap(videoSource);
@@ -524,7 +524,7 @@ protected void initGStreamer(PApplet parent, int requestWidth, int requestHeight
                                String[] strPropNames, String[] strPropValues, String frameRate) {
     this.parent = parent;
 
-    GSVideo.init();
+    Video.init();
 
     // register methods
     parent.registerDispose(this);
@@ -627,7 +627,7 @@ public void rgbFrame(int w, int h, IntBuffer buffer) {
       // Setting direct buffer passing in the video sink, so no new buffers are created
       // and disposed by the GC on each frame (thanks to Octavi Estape for pointing 
       // out this one).
-      rgbSink.setPassDirectBuffer(GSVideo.passDirectBuffer);      
+      rgbSink.setPassDirectBuffer(Video.passDirectBuffer);      
       
       // No need for rgbSink.dispose(), because the addMany() doesn't increment the
       // refcount of the videoSink object.      

File: java/libraries/video/src/processing/video/LibraryPath.java
Patch:
@@ -23,7 +23,7 @@
 
 import com.sun.jna.Platform;
 
-class GSLibraryPath {
+class LibraryPath {
   // This method returns the folder inside which the gstreamer library folder
   // should be located.
   String get() {

File: java/libraries/opengl/src/processing/opengl/PFramebuffer.java
Patch:
@@ -154,11 +154,10 @@ public void delete() {
   }
   
   public void backup() {
-    
   }
   
   public void restore() {    
-    setColorBuffers(colorBufferTex.clone(), colorBufferTex.length);        
+    setColorBuffers(colorBufferTex.clone(), colorBufferTex.length);
   }  
   
   public void clear() {

File: java/libraries/opengl/src/processing/opengl/PFontTexture.java
Patch:
@@ -86,7 +86,7 @@ public void delete() {
   
   public void refresh() {
     // loop over current glyphs.
-    for (int i = 0; i < font.getGlyphCount(); i++) {
+    for (int i = 0; i < PApplet.min(font.getGlyphCount(), glyphTexinfos.length); i++) {
       TextureInfo tinfo = glyphTexinfos[i];
       textures[tinfo.texIndex].bind();
       tinfo.updateTex();

File: app/src/processing/app/Base.java
Patch:
@@ -53,7 +53,7 @@ public class Base {
   /** True if heavy debugging error/log messages are enabled */
   static public boolean DEBUG = false;
 //  static public boolean DEBUG = true;
-  static public boolean ENABLE_LIBRARY_MANAGER = false;
+  static public boolean ENABLE_LIBRARY_MANAGER = true;
 
   static HashMap<Integer, String> platformNames =
     new HashMap<Integer, String>();

File: app/src/processing/app/Base.java
Patch:
@@ -53,7 +53,7 @@ public class Base {
   /** True if heavy debugging error/log messages are enabled */
   static public boolean DEBUG = false;
 //  static public boolean DEBUG = true;
-  static public boolean ENABLE_LIBRARY_MANAGER = false;
+  static public boolean ENABLE_LIBRARY_MANAGER = true;
 
   static HashMap<Integer, String> platformNames =
     new HashMap<Integer, String>();

File: app/src/processing/app/LibraryManager.java
Patch:
@@ -464,7 +464,7 @@ public static void unzip(File zipFile, File dest) {
       while ((next = zis.getNextEntry()) != null) {
         File currentFile = new File(dest, next.getName());
         if (next.isDirectory()) {
-          currentFile.mkdir();
+          currentFile.mkdirs();
         } else {
           currentFile.createNewFile();
           unzipEntry(zis, currentFile);

File: app/src/processing/app/LibraryListing.java
Patch:
@@ -36,7 +36,7 @@
 import processing.app.LibraryListing.LibraryInfo.Author;
 
 public class LibraryListing {
-
+  
   Map<String, List<LibraryInfo>> librariesByCategory;
   ArrayList<LibraryInfo> allLibraries;
   

File: android/core/src/processing/core/PNode.java
Patch:
@@ -101,6 +101,7 @@ public PNode(Reader reader) {
 //      Document document = builder.parse(dataPath("1_alt.html"));
       Document document = builder.parse(new InputSource(reader));
       node = document.getDocumentElement();
+      name = node.getNodeName();
 //      NodeList nodeList = document.getDocumentElement().getChildNodes();
 //      for (int i = 0; i < nodeList.getLength(); i++) {
 //      }

File: core/src/processing/core/PNode.java
Patch:
@@ -105,6 +105,7 @@ public PNode(Reader reader) {
 //      Document document = builder.parse(dataPath("1_alt.html"));
       Document document = builder.parse(new InputSource(reader));
       node = document.getDocumentElement();
+      name = node.getNodeName();
 //      NodeList nodeList = document.getDocumentElement().getChildNodes();
 //      for (int i = 0; i < nodeList.getLength(); i++) {
 //      }

File: app/src/processing/mode/javascript/DirectivesEditor.java
Patch:
@@ -151,7 +151,7 @@ void findRemoveDirectives ( boolean clean )
 				mm = mm.replaceAll("[\\s]*([^;\\s\\n\\r]+)[\\s]*[\\n\\r]+","$1;");
 				mm = mm.replaceAll("\n"," ").replaceAll("\r"," ");
 				
-				System.out.println(mm);
+				//System.out.println(mm);
 					
 				if ( clean )
 				{

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -5232,8 +5232,8 @@ public void endRecord() {
   }
 
 
-  public boolean isRecording() {
-    showMissingWarning("isRecording");
+  public boolean isRecordingShape() {
+    //showMissingWarning("isRecording");
     return false;
   }
 

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -1448,7 +1448,7 @@ private boolean exportApplication(File destFolder,
     String preprocFilename = sketch.getName() + ".java";
     File preprocFile = new File(srcFolder, preprocFilename);
     if (preprocFile.exists()) {
-      preprocFile.renameTo(new File(sourceFolder, preprocFilename));
+      Base.copyFile(preprocFile, new File(sourceFolder, preprocFilename));
     } else {
       System.err.println("Could not copy source file: " + preprocFile.getAbsolutePath());
     }

File: core/src/processing/core/PShapeSVG.java
Patch:
@@ -1824,7 +1824,7 @@ protected boolean isLegit() {  // TODO need a better way to handle this...
    * beneath them can be used here.
    * <PRE>
    * // This code grabs "Layer 3" and the shapes beneath it.
-   * PShape layer3 = svg.getShape("Layer 3");
+   * PShape layer3 = svg.getChild("Layer 3");
    * </PRE>
    */
   public PShape getChild(String name) {

File: app/src/processing/mode/javascript/JavaScriptMode.java
Patch:
@@ -115,8 +115,8 @@ public boolean accept (File f) {
 	File[] jModeExamples = new File[] {
       new File(jExamples, "Basics"),
       new File(jExamples, "Topics"),
-      new File(jExamples, "3D"),
-      new File(jExamples, "Books")
+      new File(jExamples, "3D") /*,
+      new File(jExamples, "Books")*/
     };
 	
 	// merge them all

File: app/src/processing/mode/javascript/JavaScriptServer.java
Patch:
@@ -14,7 +14,6 @@ class JavaScriptServer implements HttpConstants, Runnable
 	Thread thread = null;
 	ServerSocket server = null;
 	
-	// TODO: this needed? SocketException on stop coming from here?
     //private ArrayList<Worker> threads = new ArrayList<Worker>();
     //private int workers = 5;
 

File: android/core/src/processing/core/PShape.java
Patch:
@@ -668,6 +668,7 @@ public PShape getParent() {
     return parent;
   }
 
+
   public int getChildCount() {
     return childCount;
   }

File: core/src/processing/core/PShapeSVG.java
Patch:
@@ -1824,7 +1824,7 @@ protected boolean isLegit() {  // TODO need a better way to handle this...
    * beneath them can be used here.
    * <PRE>
    * // This code grabs "Layer 3" and the shapes beneath it.
-   * PShape layer3 = svg.getChild("Layer 3");
+   * PShape layer3 = svg.getShape("Layer 3");
    * </PRE>
    */
   public PShape getChild(String name) {

File: core/src/processing/core/PNode.java
Patch:
@@ -98,7 +98,7 @@ public interface PNode extends Serializable {
   public PNode[] getChildren(String name);
 
 
-  public void addChild(PNode kid);
+  public PNode addChild(String name);
 
   
   public void removeChild(PNode kid);
@@ -202,5 +202,5 @@ public interface PNode extends Serializable {
   public String toString(int indent);
   
   
-  public void write(PrintWriter writer);
+//  public void write(PrintWriter writer);
 }
\ No newline at end of file

File: java/libraries/dxf/src/processing/dxf/RawDXF.java
Patch:
@@ -112,7 +112,7 @@
  * Updated again for inclusion as a core library in March 2006.
  * Constructor modifications in September 2008 as we approach 1.0.
  */
-public class RawDXF extends PGraphics3D {
+public class RawDXF extends PGraphics {
 
   File file;
   PrintWriter writer;

File: app/src/processing/app/LibraryManager.java
Patch:
@@ -24,7 +24,6 @@
 package processing.app;
 
 import java.awt.*;
-import java.awt.event.*;
 import java.io.*;
 import java.net.*;
 import java.util.ArrayList;
@@ -35,8 +34,6 @@
 import javax.swing.event.ChangeEvent;
 import javax.swing.event.ChangeListener;
 
-import processing.app.LibraryListPanel.LibraryPanel;
-
 /**
  * 
  */
@@ -200,6 +197,7 @@ protected boolean downloadFile(URL source, File dest) {
       byte[] b = new byte[256];
       int bytesDownloaded = 0, len;
       while ((len = in.read(b)) != -1) {
+        @SuppressWarnings("unused")
         int progress = (int) (100.0 * bytesDownloaded / fileSize);
         // System.out.println("Downloaded " + progress + "%");
         out.write(b, 0, len);

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -929,7 +929,7 @@ public void vertex(float x, float y) {
 
     boolean textured = textureImage != null;
     if (fill || textured) {
-      if (fill) {
+      if (!textured) {
         vertex[R] = fillR;
         vertex[G] = fillG;
         vertex[B] = fillB;
@@ -1020,7 +1020,7 @@ public void vertex(float x, float y, float z) {
 
     boolean textured = textureImage != null;
     if (fill || textured) {
-      if (fill) {
+      if (!textured) {
         vertex[R] = fillR;
         vertex[G] = fillG;
         vertex[B] = fillB;

File: java/libraries/opengl2/src/processing/opengl2/PFramebuffer.java
Patch:
@@ -312,7 +312,7 @@ public void bind() {
       if (0 < numColorBuffers) {
         // Drawing the current contents of the first color buffer to emulate
         // front-back buffer swap.
-        ogl.drawTexture(glColorBufferTargets[0], glColorBufferIDs[0], 0, 0, width, height, 0, 0, width, height);
+        ogl.drawTexture(glColorBufferTargets[0], glColorBufferIDs[0], width, height, 0, 0, width, height, 0, 0, width, height);
       }
       
       if (noDepth) {

File: java/libraries/opengl2/src/processing/opengl2/PGraphicsOpenGL2.java
Patch:
@@ -4482,7 +4482,7 @@ public void printCamera() {
    * orthographic projection.
    */
   public void ortho() {
-    ortho(0, width, 0, height, -10, 10);
+    ortho(0, width, 0, height, cameraNear, cameraFar);
   }
 
   /**

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -6367,7 +6367,9 @@ protected PTexture addTexture(PImage img) {
       img.setParams(a3d, params);
     }
     PTexture tex = new PTexture(img.parent, img.width, img.height, params);
-    img.loadPixels();
+    if (img.pixels == null) {
+      img.loadPixels();
+    }
     tex.set(img.pixels);
     img.setCache(a3d, tex);
     return tex;

File: app/src/processing/app/Base.java
Patch:
@@ -572,7 +572,9 @@ protected int[] nextEditorLocation() {
     int defaultWidth = Preferences.getInteger("editor.window.width.default");
     int defaultHeight = Preferences.getInteger("editor.window.height.default");
 
-    if (activeEditor == null) {
+//    if (activeEditor == null) {
+    if (editors.size() == 0) {
+//      System.out.println("active editor is " + activeEditor);
       // If no current active editor, use default placement
       return new int[] {
           (screen.width - defaultWidth) / 2,

File: app/src/processing/app/Editor.java
Patch:
@@ -785,7 +785,7 @@ public void actionPerformed(ActionEvent e) {
   }
   
   
-  abstract public void handleImportLibrary(String item);
+  abstract public void handleImportLibrary(String jarPath);
 
 
   protected JMenu buildToolsMenu() {

File: android/core/src/processing/core/PShape3D.java
Patch:
@@ -796,7 +796,7 @@ protected void addChildImpl(PShape who, boolean newShape) {
   /**
    * Add a shape to the name lookup table.
    */
-  protected void addName(String nom, PShape shape) {    
+  public void addName(String nom, PShape shape) {    
     if (nameTable == null) {
       nameTable = new HashMap<String,PShape>();
     }
@@ -894,7 +894,7 @@ public PShape groupChildren(PShape[] gchildren, String gname) {
     child = gchildren[0];    
     p = child.parent;
     if (p != null) {
-      idx = p.getChildIdx(child);
+      idx = p.getChildIndex(child);
       if (idx < 0) idx = 0; 
     } else {
       p = this;
@@ -908,7 +908,7 @@ public PShape groupChildren(PShape[] gchildren, String gname) {
       child = gchildren[i];
       p = child.parent;
       if (p != null) {
-        idx = p.getChildIdx(child);
+        idx = p.getChildIndex(child);
         if (-1 < idx) {
           p.removeChild(idx);
         }

File: core/src/processing/core/PVector.java
Patch:
@@ -21,7 +21,7 @@
   Boston, MA  02111-1307  USA
 */
 
-package scratch;
+package processing.core;
 
 import java.io.Serializable;
 

File: core/src/processing/core/PFont.java
Patch:
@@ -863,13 +863,13 @@ public class Glyph {
     public int leftExtent;
 
     
-    protected Glyph() {
+    public Glyph() {
       index = -1;
       // used when reading from a stream or for subclasses
     }
     
     
-    protected Glyph(DataInputStream is) throws IOException {
+    public Glyph(DataInputStream is) throws IOException {
       index = -1;
       readHeader(is);
     }

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -85,7 +85,6 @@ public JEditTextArea(TextAreaDefaults defaults) {
 
     caretTimer = new Timer(500, new ActionListener() {
       public void actionPerformed(ActionEvent e) {
-        System.out.println(caretTimer);
         if (hasFocus()) {
           blinkCaret();      
         }

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -85,6 +85,7 @@ public JEditTextArea(TextAreaDefaults defaults) {
 
     caretTimer = new Timer(500, new ActionListener() {
       public void actionPerformed(ActionEvent e) {
+        System.out.println(caretTimer);
         if (hasFocus()) {
           blinkCaret();      
         }
@@ -1870,7 +1871,7 @@ public void processKeyEvent(KeyEvent evt) {
   protected static String BOTTOM = "bottom";
 
 //  protected static JEditTextArea focusedComponent;
-  protected static Timer caretTimer;
+  protected Timer caretTimer;
 
   protected TextAreaPainter painter;
 

File: core/src/processing/core/PFont.java
Patch:
@@ -579,7 +579,7 @@ protected int index(char c) {
       if (index != -1) {
         return index;
       }
-      if (font.canDisplay(c)) {
+      if (font != null && font.canDisplay(c)) {
         // create the glyph
         addGlyph(c);
         // now where did i put that?

File: app/src/processing/app/SketchCode.java
Patch:
@@ -114,6 +114,8 @@ protected boolean deleteFile() {
   
   
   protected boolean renameTo(File what, String ext) {
+    System.out.println("renaming " + file);
+    System.out.println("      to " + what);
     boolean success = file.renameTo(what);
     if (success) {
       this.file = what;  // necessary?

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -668,7 +668,7 @@ public void surfaceCreated(SurfaceHolder holder) {
 
     // part of SurfaceHolder.Callback
     public void surfaceDestroyed(SurfaceHolder holder) {
-      g2.dispose();
+      //g2.dispose();
     }
 
 
@@ -2499,12 +2499,12 @@ void exit2() {
 
   /** 
    * Called to dispose of resources and shut down the sketch. 
-   * Destroys the thread, dispose the renderer,and notify listeners.
+   * Destroys the thread, dispose the renderer, and notify listeners.
    * <p>
    * Not to be called or overriden by users. If called multiple times, 
    * will only notify listeners once. Register a dispose listener instead.
    */
-  public void dispose() {
+  final public void dispose() {
     // moved here from stop()
     finished = true;  // let the sketch know it is shut down time
 

File: app/src/processing/app/EditorStatus.java
Patch:
@@ -134,7 +134,7 @@ public void edit(String message, String dflt) {
     editField.setVisible(true);
     editField.setText(dflt);
     editField.selectAll();
-    editField.requestFocus();
+    editField.requestFocusInWindow();
 
     repaint();
   }
@@ -144,6 +144,7 @@ public void unedit() {
     okButton.setVisible(false);
     cancelButton.setVisible(false);
     editField.setVisible(false);
+    editor.textarea.requestFocusInWindow();
     empty();
   }
   

File: core/src/processing/core/PGraphics3D.java
Patch:
@@ -3709,7 +3709,7 @@ public PMatrix getProjection() {
   public void matrixMode(int mode) {    
     if (mode == PROJECTION) {
       matrixMode = PROJECTION;
-    } else if (matrixMode == MODELVIEW) {
+    } else if (mode == MODELVIEW) {
       matrixMode = MODELVIEW;
     } else {
       showWarning("Invalid matrix mode. Use PROJECTION or MODELVIEW");

File: app/src/processing/app/Base.java
Patch:
@@ -972,6 +972,7 @@ public boolean handleClose(Editor editor, boolean modeSwitch) {
           editor.setVisible(false);
           editor.dispose();
           activeEditor = null;
+          editors.remove(editor);
         } else {
           // Since this wasn't an actual Quit event, call System.exit()
           System.exit(0);
@@ -982,6 +983,7 @@ public boolean handleClose(Editor editor, boolean modeSwitch) {
         defaultFileMenu.insert(sketchbookMenu, 2);
 //        defaultFileMenu.insert(defaultMode.getExamplesMenu(), 3);
         activeEditor = null;
+        editors.remove(editor);
       }
 
     } else {

File: app/src/processing/app/Editor.java
Patch:
@@ -113,7 +113,7 @@ protected Editor(final Base base, String path, int[] location, final Mode mode)
     // add listener to handle window close box hit event
     addWindowListener(new WindowAdapter() {
         public void windowClosing(WindowEvent e) {
-          base.handleClose(Editor.this);
+          base.handleClose(Editor.this, false);
         }
       });
     // don't close the window when clicked, the app will take care
@@ -501,7 +501,7 @@ public void actionPerformed(ActionEvent e) {
     item = Base.newJMenuItem("Close", 'W');
     item.addActionListener(new ActionListener() {
       public void actionPerformed(ActionEvent e) {
-        base.handleClose(Editor.this);
+        base.handleClose(Editor.this, false);
       }
     });
     fileMenu.add(item);

File: app/src/processing/app/Sketch.java
Patch:
@@ -577,7 +577,7 @@ public void handleDeleteCode() {
         // make a new sketch, and i think this will rebuild the sketch menu
         //editor.handleNewUnchecked();
         //editor.handleClose2();
-        editor.base.handleClose(editor);
+        editor.base.handleClose(editor, false);
 
       } else {
         // delete the file

File: app/src/processing/mode/android/Permissions.java
Patch:
@@ -53,7 +53,8 @@ public class Permissions extends JFrame {
   
   public Permissions(Sketch sketch) {
   //public Permissions(Editor editor) {
-    super("Android Permissions Selector");    
+    super("Android Permissions Selector");
+    this.sketch = sketch;
 //    this.editor = editor;
 
 //    XMLElement xml = 

File: app/src/processing/app/Mode.java
Patch:
@@ -667,8 +667,8 @@ public void prepareExportFolder(File targetFolder) {
     if (targetFolder != null) {
       // Nuke the old applet/application folder because it can cause trouble
       if (Preferences.getBoolean("export.delete_target_folder")) {
-        System.out.println("temporarily skipping deletion of " + targetFolder);
-        //      Base.removeDir(targetFolder);
+//        System.out.println("temporarily skipping deletion of " + targetFolder);
+        Base.removeDir(targetFolder);
         //      targetFolder.renameTo(dest);
       }
       // Create a fresh output folder (needed before preproc is run next)

File: core/src/processing/core/PApplet.java
Patch:
@@ -7382,7 +7382,8 @@ static public void runSketch(String args[], final PApplet constructedApplet) {
       frame.setBackground(backgroundColor);
       if (exclusive) {
         displayDevice.setFullScreenWindow(frame);
-        frame.setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
+        // this trashes the location of the window on os x
+        //frame.setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
         fullScreenRect = frame.getBounds();
       } else {
         DisplayMode mode = displayDevice.getDisplayMode();

File: core/src/processing/core/PApplet.java
Patch:
@@ -4184,7 +4184,7 @@ protected PFont createDefaultFont(float size) {
 //    println("n: " + f.getName());
 //    println("fn: " + f.getFontName());
 //    println("ps: " + f.getPSName());
-    return createFont("SansSerif", size, true, null);
+    return createFont("Lucida Sans", size, true, null);
   }
 
 

File: app/src/processing/app/EditorLineStatus.java
Patch:
@@ -64,7 +64,7 @@ public void updateMode() {
     high = mode.getInteger("linestatus.height");
 
     if (Base.isMacOS()) {
-      resize = mode.loadImage("resize.gif");
+      resize = mode.loadImage("theme/resize.gif");
     }
   }
 

File: app/src/processing/mode/android/EmulatorController.java
Patch:
@@ -112,7 +112,7 @@ public void run() {
             }
             Thread.sleep(2000);
 //            System.out.println("done sleeping");
-            for (final String device : Devices.listDevices()) {
+            for (final String device : Devices.list()) {
               if (device.contains("emulator")) {
                 //                System.err.println("EmulatorController: Emulator booted.");
                 setState(State.RUNNING);

File: core/src/processing/core/PApplet.java
Patch:
@@ -1424,8 +1424,6 @@ public void update(Graphics screen) {
 
   //synchronized public void paint(Graphics screen) {  // shutting off for 0146
   public void paint(Graphics screen) {
-    println("non-active paint");
-
     // ignore the very first call to paint, since it's coming
     // from the o.s., and the applet will soon update itself anyway.
     if (frameCount == 0) {

File: app/src/processing/mode/java/JavaBuild.java
Patch:
@@ -1469,13 +1469,13 @@ public boolean accept(File dir, String name) {
     });
     for (File sub : files) {
       String relativePath = sub.getAbsolutePath().substring(rootPath.length());
-      System.out.println("relative path is " + relativePath);
+//      System.out.println("relative path is " + relativePath);
 
       if (sub.isDirectory()) {
         addClasses(zos, sub, rootPath);
 
       } else if (sub.getName().endsWith(".class")) {
-        System.out.println("  adding item " + relativePath);
+//        System.out.println("  adding item " + relativePath);
         ZipEntry entry = new ZipEntry(relativePath);
         zos.putNextEntry(entry);
         zos.write(Base.loadBytesRaw(sub));

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -4285,7 +4285,7 @@ public void ortho() {
    * from the current camera configuration.
    */  
   public void ortho(float left, float right, float bottom, float top) {
-    ortho(0, width, 0, height, cameraNear, cameraFar);
+    ortho(left, right, bottom, top, cameraNear, cameraFar);
   }  
   
   /**

File: java/libraries/opengl2/src/processing/opengl2/PGraphicsOpenGL2.java
Patch:
@@ -4394,7 +4394,7 @@ public void ortho() {
    * from the current camera configuration.
    */  
   public void ortho(float left, float right, float bottom, float top) {
-    ortho(0, width, 0, height, cameraNear, cameraFar);
+    ortho(left, right, bottom, top, cameraNear, cameraFar);
   }  
   
   /**

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -729,10 +729,11 @@ public SketchSurfaceView3D(Context context, int wide, int high) {
       // this.onResume() and thus require a valid renderer) are triggered
       // before surfaceChanged() is ever called.
       g3 = new PGraphicsAndroid3D();
+      g3.setParent(PApplet.this);
+      g3.setPrimary(true);      
       // Set semi-arbitrary size; will be set properly when surfaceChanged() called
       g3.setSize(wide, high);
-      g3.setParent(PApplet.this);
-      g3.setPrimary(true);
+
 
       // Set context factory. This make possible to have 2.x contexts.
       // We don't need this for the time being since we are using GLES 1.1.

File: core/src/processing/core/PApplet.java
Patch:
@@ -540,7 +540,7 @@ static public class RendererChangeException extends RuntimeException { }
    * <P>
    * Used by the millis() function.
    */
-  long millisOffset;
+  long millisOffset = System.currentTimeMillis();
 
   /**
    * The current value of frames per second.
@@ -677,7 +677,7 @@ public void init() {
     // send tab keys through to the PApplet
     setFocusTraversalKeysEnabled(false);
 
-    millisOffset = System.currentTimeMillis();
+    //millisOffset = System.currentTimeMillis(); // moved to the variable declaration
 
     finished = false; // just for clarity
 

File: app/src/processing/mode/android/AndroidEditor.java
Patch:
@@ -35,7 +35,6 @@
 import processing.app.SketchException;
 import processing.core.PApplet;
 import processing.mode.java.JavaEditor;
-import processing.mode.java.JavaToolbar;
 
 // http://dl.google.com/android/repository/repository.xml
 // http://dl.google.com/android/android-sdk_r3-mac.zip
@@ -68,7 +67,7 @@ protected AndroidEditor(Base base, String path, int[] location, Mode mode) {
       AndroidSDK sdk = amode.loadSDK();
       if (sdk == null) {
         sdk = AndroidSDK.locate(this);
-      }
+      }      
     } catch (BadSDKException bse) {
       statusError(bse);
       

File: app/src/processing/mode/android/AndroidBuild.java
Patch:
@@ -225,15 +225,15 @@ protected File createExportFolder() throws IOException {
   }
   
   
-  public boolean exportProject() throws IOException, SketchException {
+  public File exportProject() throws IOException, SketchException {
     File projectFolder = build("debug");
     if (projectFolder == null) {
-      return false;
+      return null;
     }
 
     File exportFolder = createExportFolder();
     Base.copyDir(projectFolder, exportFolder);
-    return true;
+    return exportFolder;
   }
 
 

File: app/src/processing/mode/android/AndroidRunner.java
Patch:
@@ -84,7 +84,7 @@ public void launch(Future<Device> deviceFuture) {
     } else {
       listener.statusError("Could not start the sketch.");
     }
-
+    listener.stopIndeterminate();
     lastRunDevice = device;
 //} finally {
 //  build.cleanup();
@@ -273,7 +273,7 @@ public void stackTrace(final List<String> trace) {
     }
   }
 
-  
+
   // called by AndroidMode.handleStop()...
   public void close() {
     if (lastRunDevice != null) {
@@ -284,6 +284,7 @@ public void close() {
 
   // sketch stopped on the device 
   public void sketchStopped() {
+    listener.stopIndeterminate();
     listener.statusHalt();
   }
 }

File: app/src/processing/app/Library.java
Patch:
@@ -97,7 +97,7 @@ public Library(File folder) {
 
     // get the list of files just in the library root
     String[] baseList = libraryFolder.list(standardFilter);
-    System.out.println("Loading " + name + "...");
+//    System.out.println("Loading " + name + "...");
 //    PApplet.println(baseList);
 
     String appletExportStr = exportTable.get("applet");

File: app/src/processing/mode/java/Compiler.java
Patch:
@@ -149,8 +149,8 @@ public void close() { }
         String errorMessage = pieces[4];
 
         exception = build.placeException(errorMessage, 
-                                          dotJavaFilename, 
-                                          dotJavaLineIndex);
+                                         dotJavaFilename, 
+                                         dotJavaLineIndex);
         /*
         int codeIndex = 0; //-1;
         int codeLine = -1;

File: app/src/processing/app/Mode.java
Patch:
@@ -245,6 +245,7 @@ public boolean accept(File dir, String name) {
 //        categoryItem.setEnabled(false);
 //        menu.add(categoryItem);
         base.addSketches(menu, sub, false);
+        menu.addSeparator();
       }
 
       // get library examples
@@ -267,6 +268,7 @@ public boolean accept(File dir, String name) {
         }
       }
       if (any) {
+        menu.addSeparator();
         Base.addDisabledItem(menu, "Contributed");
         for (Library lib : contribLibraries) {
           if (lib.hasExamples()) {

File: app/src/processing/mode/java/JavaMode.java
Patch:
@@ -164,7 +164,6 @@ public String[] getIgnorable() {
   
   /**
    * Implements Sketch &rarr; Run.
-   * @param present Set true to run in full screen (present mode).
    * @throws SketchException 
    */
   public void handleRun(Sketch sketch, RunnerListener listener) throws SketchException {

File: app/src/processing/mode/java/runner/Runner.java
Patch:
@@ -180,7 +180,7 @@ protected String[] getMachineParams() {
     String outgoing[] = new String[params.size()];
     params.toArray(outgoing);
 
-    //PApplet.println(outgoing);
+//    PApplet.println(outgoing);
 //    PApplet.println(PApplet.split(outgoing[0], ":"));
 //    PApplet.println();
 //    PApplet.println("class path");

File: app/src/processing/app/EditorToolbar.java
Patch:
@@ -134,8 +134,9 @@ public EditorToolbar(Editor editor, Base base) {  //, JMenu menu) {
   public Image[][] loadImages() {
 //    Image allButtons = Base.getThemeImage("buttons.gif", this);
 //    Image allButtons = Base.loadImage(file);
-    Image allButtons = mode.loadImage("buttons.gif");
+    Image allButtons = mode.loadImage("theme/buttons.gif");
     int count = allButtons.getWidth(this) / BUTTON_WIDTH;
+//    System.out.println("width is " + allButtons.getWidth(this));
     Image[][] buttonImages = new Image[count][3];
     
     for (int i = 0; i < count; i++) {

File: app/src/processing/app/Mode.java
Patch:
@@ -84,6 +84,8 @@ public File getLibrariesFolder() {
 
 
   public void rebuildLibraryList() {
+    System.out.println("rebuildLibraryList()");
+
     // reset the table mapping imports to libraries
     importToLibraryTable = new HashMap<String, Library>();
 
@@ -224,6 +226,7 @@ public void rebuildExamplesMenu(JMenu menu) {
       //base.addSketches(menu, examplesFolder, false);
       
       // break down the examples folder for examples
+      System.out.println("checking examples folder " + examplesFolder);
       File[] subfolders = examplesFolder.listFiles(new FilenameFilter() {
         public boolean accept(File dir, String name) {
           return dir.isDirectory() && name.charAt(0) != '.';

File: app/src/processing/app/syntax/PdeKeywords.java
Patch:
@@ -101,6 +101,9 @@ public PdeKeywords(File file) throws IOException {
    * @param coloring one of KEYWORD1, KEYWORD2, LITERAL1, etc.
    */
   public void addColoring(String keyword, String coloring) {
+    if (keywordColoring == null) {
+      keywordColoring = new KeywordMap(true);
+    }
     // text will be KEYWORD or LITERAL
     boolean isKey = (coloring.charAt(0) == 'K');
     // KEYWORD1 -> 0, KEYWORD2 -> 1, etc

File: app/src/processing/mode/java/JavaMode.java
Patch:
@@ -63,7 +63,7 @@ public JavaMode(Base base, File folder) {
     }
     
     try {
-      theme = new Settings(new File(folder, "theme.txt"));
+      theme = new Settings(new File(folder, "theme/theme.txt"));
     } catch (IOException e) {
       Base.showError("Problem loading theme.txt", 
                      "Could not load theme.txt, please re-install Processing", e);

File: core/src/processing/core/PTriangle.java
Patch:
@@ -1004,9 +1004,8 @@ private boolean precomputeAccurateTexturing() {
                     0,           0,           0, 1);
       // A 3x3 inversion would be more efficient here, 
       // given that the fourth r/c are unity
-      myMatrix.invert();
       // if the matrix inversion had trouble, let the caller know
-      if (myMatrix == null) return false;
+      if (!myMatrix.invert()) return false;
 
       float m00, m01, m02, m10, m11, m12, m20, m21, m22;
       m00 = myMatrix.m00*camX[o0]+myMatrix.m01*camX[o1]+myMatrix.m02*camX[o2];

File: android/core/src/processing/core/PFramebuffer.java
Patch:
@@ -308,6 +308,7 @@ protected void copyToTexture(IntBuffer buffer, int glid, int gltarget) {
     gl.glEnable(gltarget);
     gl.glBindTexture(gltarget, glid);    
     gl.glTexSubImage2D(gltarget, 0, 0, 0, width, height, GL10.GL_RGBA, GL10.GL_UNSIGNED_BYTE, buffer);
+    gl.glBindTexture(gltarget, 0);
     gl.glDisable(gltarget);
   }
   

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -2330,7 +2330,6 @@ protected void renderTriangles(int start, int stop) {
 
       PImage[] images = faceTextures[j];
       if (1 < numMultitextures) {
-        PApplet.println("multitexture");
         for (int t = 0; t < numMultitextures; t++) 
           if (images[t] != null) {
             PTexture tex = images[t].getTexture();
@@ -2352,7 +2351,6 @@ protected void renderTriangles(int start, int stop) {
             break;            
           }
       } else if (images[0] != null) {
-        PApplet.println("single texture");
         PTexture tex = images[0].getTexture();      
         if (tex != null) {
           gl.glEnable(tex.getGLTarget());
@@ -2367,7 +2365,6 @@ protected void renderTriangles(int start, int stop) {
       }
 
       if (0 < numTextures) {
-        PApplet.println("Texturing");
         if (numTexBuffers < numTextures) {
           addTexBuffers(numTextures - numTexBuffers);
         }                

File: android/core/src/processing/core/PShape3D.java
Patch:
@@ -691,7 +691,7 @@ static public PShape createChild(String name, int n0, int n1, int mode, float we
 
   
   public void addChild(String name, int n0, int n1) {
-    PShape child = createChild(name, n0, n1, glMode);
+    PShape child = createChild(name, n0, n1, getDrawModeImpl());
     addChild(child);
   }
   
@@ -721,7 +721,7 @@ public void addChild(PShape who) {
       who3d.papplet = papplet;
       who3d.a3d = a3d;
       who3d.gl = gl;
-      for (int n = who3d.firstVertex; n < who3d.lastVertex; n++) {
+      for (int n = who3d.firstVertex; n <= who3d.lastVertex; n++) {
         vertexChild[n] = who3d;
       }       
     } else {

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -1250,18 +1250,18 @@ protected void beginShapeRecorderImpl() {
       recordedNormals.ensureCapacity(normalBuffer.capacity() / 3);
     }
     
+    int size = texCoordBuffer[0].capacity() / 2;
     if (recordedTexCoords == null) {      
       recordedTexCoords = new ArrayList[MAX_TEXTURES];
       // We need to initialize all the buffers for recording of texture coordinates,
       // since we don't know in advance the number of texture units that will be used
       // in this recording.
-      int size = texCoordBuffer[0].capacity() / 2;
       for (int t = 0; t < maxTextureUnits; t++) {
         recordedTexCoords[t] = new ArrayList<PVector>(size);  
       }  
     } else {
       for (int t = 0; t < maxTextureUnits; t++) {
-        recordedTexCoords[t].ensureCapacity(texCoordBuffer[t].capacity() / 2);  
+        recordedTexCoords[t].ensureCapacity(size);  
       }      
     }
     

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -546,6 +546,7 @@ protected void onResume() {
 
   protected void onPause() {
     super.onPause();
+    
 
     // TODO need to save all application state here!
 //    System.out.println("PApplet.onPause() called");
@@ -795,7 +796,6 @@ public void surfaceDestroyed(SurfaceHolder holder) {
       if (DEBUG) {
         System.out.println("surfaceDestroyed()");
       }
-      g3.dispose();
     }
 
 
@@ -2500,7 +2500,7 @@ public void dispose(){
     // don't run stop and disposers twice
     if (thread == null) return;
     thread = null;
-
+    
     // call to shut down renderer, in case it needs it (pdf does)
     if (g != null) g.dispose();
     disposeMethods.handle();

File: android/core/src/processing/core/PFramebuffer.java
Patch:
@@ -111,7 +111,7 @@ public class PFramebuffer implements PConstants {
 
   protected void finalize() {
     a3d.removeRecreateResourceMethod(recreateResourceIdx);    
-    deleteFramebuffer();
+    //deleteFramebuffer();
   }
 
   void setColorBuffer(PTexture tex) {

File: android/core/src/processing/core/PTexture.java
Patch:
@@ -156,7 +156,7 @@ public PTexture(PApplet parent, String filename, Parameters params)  {
 
   protected void finalize() {
     a3d.removeRecreateResourceMethod(recreateResourceIdx);    
-    deleteTexture();
+    //deleteTexture();
   }
 
   

File: app/src/processing/app/Editor.java
Patch:
@@ -219,7 +219,7 @@ public void windowDeactivated(WindowEvent e) {
       splitPane.setDividerSize(dividerSize);
     }
 
-    splitPane.setMinimumSize(new Dimension(600, 400));
+//    splitPane.setMinimumSize(new Dimension(600, 400));
     box.add(splitPane);
 
     // hopefully these are no longer needed w/ swing

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -1043,7 +1043,7 @@ public void vertex(float x, float y, float z) {
       vertex[EG] = emissiveG;
       vertex[EB] = emissiveB;
     }
-
+    
     if (stroke) {
       vertex[SR] = strokeR;
       vertex[SG] = strokeG;
@@ -1061,7 +1061,8 @@ public void vertex(float x, float y, float z) {
     if (norm2 < EPSILON) {
       vertex[HAS_NORMAL] = 0;  
     } else {
-      if (Math.abs(norm2 - 1) < EPSILON) {
+      if (Math.abs(norm2 - 1) > EPSILON) {
+        // The normal vector is not normalized.
         float norm = PApplet.sqrt(norm2);
         normalX /= norm;
         normalY /= norm;

File: android/core/src/processing/core/PShape3D.java
Patch:
@@ -2317,6 +2317,8 @@ protected void parseMTL(BufferedReader reader, ArrayList<OBJMaterial> materials,
             // Loading texture map.
             String texname = elements[1];
             currentMtl.kdMap = parent.loadImage(texname);
+            // Texture orientation in Processing is inverted with respecto to OpenGL.
+            currentMtl.kdMap.getTexture().setFlippedY(true);
           } else if (elements[0].equals("Ka") && elements.length > 3) {
             // The ambient color of the material
             currentMtl.ka.x = Float.valueOf(elements[1]).floatValue();

File: app/src/processing/app/Sketch.java
Patch:
@@ -3124,6 +3124,9 @@ static public String checkName(String origName) {
    * Return true if the name is valid for a Processing sketch.
    */
   static public boolean isSanitaryName(String name) {
+    if (name.toLowerCase().endsWith(".pde")) {
+      name = name.substring(0, name.length() - 4);
+    }
     return sanitizeName(name).equals(name);
   }
 

File: app/src/processing/app/syntax/Brackets.java
Patch:
@@ -117,7 +117,6 @@ private void readComment(final String text) {
     final int len = text.length();
     for (pos++; pos < len; pos++)
       if (text.charAt(pos) == '\n') {
-        pos++;
         return;
       }
   }

File: app/src/processing/app/format/AutoFormat.java
Patch:
@@ -327,6 +327,7 @@ public String format(final String source) {
       case ',':
         trimRight(buf);
         buf.append(c);
+        buf.append(' ');
         break;
 
       case ' ':
@@ -581,7 +582,7 @@ public String format(final String source) {
 
         if ((lookup("for"))) {
           c = get_string();
-          while (c != ';') {
+          while (c != ';' && c != ':') {
             c = get_string();
           }
           ct = 0;

File: app/src/processing/app/Editor.java
Patch:
@@ -181,7 +181,7 @@ public void windowDeactivated(WindowEvent e) {
 
     textarea = new JEditTextArea(new PdeTextAreaDefaults());
     textarea.setRightClickPopup(new TextAreaPopup());
-    textarea.setHorizontalOffset(6);
+    textarea.setHorizontalOffset(JEditTextArea.leftHandGutter);
 
     // assemble console panel, consisting of status area and the console itself
     consolePanel = new JPanel();

File: app/src/processing/app/WebServer.java
Patch:
@@ -19,7 +19,7 @@ public class WebServer implements HttpConstants {
 
     /* Where worker threads stand idle */
     static Vector threads = new Vector();
-
+ 
     /* the web server's virtual root */
     //static File root;
 

File: android/tool/src/processing/app/tools/android/Build.java
Patch:
@@ -477,6 +477,7 @@ private void writeLibraries(final File libsFolder,
     // Copy any libraries to the 'libs' folder
     final Sketch sketch = editor.getSketch();
     for (LibraryFolder library : sketch.getImportedLibraries()) {
+	  File libraryFolder = new File(library.getPath());
       // in the list is a File object that points the
       // library sketch's "library" folder
       final File exportSettings = new File(libraryFolder, "export.txt");

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -5394,7 +5394,7 @@ public EGLConfig chooseBestConfig(EGL10 egl, EGLDisplay display,
           // We look for the config closest to the target config.
           // Closeness is measured by the score function defined above:
           // we give more weight to the RGB components, followed by the 
-          // alpha and finally by stencil bits.
+          // alpha, depth and finally stencil bits.
           bestConfig = config;
           bestScore = score;
 

File: app/src/processing/app/preproc/PdePreprocessor.java
Patch:
@@ -430,7 +430,7 @@ private String write(final String program, final PrintWriter stream)
     // Because the meanings of < and > are overloaded to support
     // type arguments and type parameters, we have to treat them
     // as copyable to hidden text (or else the following syntax,
-    // such as (); and what not gets lost under certain circumstances
+    // such as (); and what not gets lost under certain circumstances)
     // -- jdf
     filter.copy(PdeRecognizer.LT);
     filter.copy(PdeRecognizer.GT);

File: app/src/processing/app/Sketch.java
Patch:
@@ -1433,7 +1433,7 @@ public String preprocess(String buildPath,
       int dot = item.lastIndexOf('.');
       // http://dev.processing.org/bugs/show_bug.cgi?id=1145
       String entry = (dot == -1) ? item : item.substring(0, dot);
-      File libFolder = (File) Base.importToLibraryTable.get(entry);
+      File libFolder = Base.importToLibraryTable.get(entry);
 
       if (libFolder != null) {
         if (!importedLibraries.contains(libFolder)) {

File: android/core/src/processing/xml/XMLWriter.java
Patch:
@@ -201,7 +201,7 @@ public void write(XMLElement xml,
 //         while (en.hasMoreElements()) {
 //            String key = (String) en.nextElement();
          for (String key : xml.listAttributes()) {
-            String value = xml.getAttribute(key, null);
+            String value = xml.getString(key, null);
             this.writer.print(" " + key + "=\"");
             this.writeEncoded(value);
             this.writer.print('"');

File: android/tool/src/processing/app/tools/android/AndroidMode.java
Patch:
@@ -120,6 +120,7 @@ public void actionPerformed(ActionEvent e) {
         new Keys(editor);
       }
     });
+    item.setEnabled(false);
     menu.add(item);
     
     item = new JMenuItem("Android SDK & AVD Manager");

File: android/tool/src/processing/app/tools/android/Preprocessor.java
Patch:
@@ -65,6 +65,8 @@ protected boolean parseSketchSize() {
 
     String scrubbed = Sketch.scrubComments(sketch.getCode(0).getProgram());
     String[] matches = PApplet.match(scrubbed, Sketch.SIZE_REGEX);
+//    PApplet.println("matches: " + Sketch.SIZE_REGEX);
+//    PApplet.println(matches);
 
     if (matches != null) {
       boolean badSize = false;

File: core/src/processing/xml/XMLWriter.java
Patch:
@@ -201,7 +201,7 @@ public void write(XMLElement xml,
 //         while (en.hasMoreElements()) {
 //            String key = (String) en.nextElement();
          for (String key : xml.listAttributes()) {
-            String value = xml.getAttribute(key, null);
+            String value = xml.getString(key, null);
             this.writer.print(" " + key + "=\"");
             this.writeEncoded(value);
             this.writer.print('"');

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -4126,7 +4126,7 @@ public void directionalLight(float r, float g, float b, float nx, float ny,
     lightSpecular[lightCount][0] = currentLightSpecular[0];
     lightSpecular[lightCount][1] = currentLightSpecular[1];
     lightSpecular[lightCount][2] = currentLightSpecular[2];
-    lightSpecular[lightCount][2] = currentLightSpecular[3];
+    lightSpecular[lightCount][3] = currentLightSpecular[3];
 
     float invn = 1.0f / PApplet.dist(0, 0, 0, nx, ny, nz);
     lightNormal[lightCount][0] = invn * nx;

File: editor/processing.plugin.core/src/processing/plugin/core/builder/SketchBuilder.java
Patch:
@@ -224,7 +224,7 @@ protected IProject[] fullBuild( SketchProject sketchProject, IProgressMonitor mo
 		String[] codeFolderPackages = null;
 		if (codeFolder != null && codeFolder.exists()){
 			String codeFolderClassPath = Utilities.contentsToClassPath(codeFolder.getLocation().toFile());
-			for( String s : codeFolderClassPath.split(File.separator)){
+			for( String s : codeFolderClassPath.split(File.pathSeparator)){
 				if (!s.isEmpty()){
 					libraryJarPathList.add(new Path(s).makeAbsolute());
 				}

File: editor/processing.plugin.core/src/processing/plugin/core/ProcessingCorePreferences.java
Patch:
@@ -19,6 +19,7 @@
  * be done by preferences pages in processing.plugin.ui plug-in, but
  * may be programatically accessed in the case of headless operation.
  */
+@SuppressWarnings("deprecation")
 public class ProcessingCorePreferences {
 
 	private static ProcessingCorePreferences current;

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -601,6 +601,7 @@ public void setFramebuffer(PFramebuffer fbo) {
 
   public void popFramebuffer() {
     try {
+      currentFramebuffer.finish();
       currentFramebuffer = fbStack.pop();
       currentFramebuffer.bind();
     } catch (EmptyStackException e) {

File: app/src/processing/app/Preferences.java
Patch:
@@ -279,7 +279,7 @@ public void actionPerformed(ActionEvent e) {
     fontSizeField.setText(String.valueOf(editorFont.getSize()));
     top += d.height + GUI_BETWEEN;
 
-
+    
     // [ ] Use smooth text in editor window 
 
     editorAntialiasBox =

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -952,6 +952,7 @@ public void vertex(float x, float y) {
 
     vertex[X] = x;
     vertex[Y] = y;
+    vertex[Z] = 0;
 
     vertex[EDGE] = edge ? 1 : 0;
 

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -2024,8 +2024,7 @@ protected void renderTriangles(int start, int stop) {
       }
 
       // Division by three needed because each int element in the buffer is used
-      // to
-      // store three coordinates.
+      // to store three coordinates.
       if (vertexBuffer.capacity() / 3 < 3 * faceLength[j]) {
         expandBuffers();
       }

File: editor/processing.plugin.ui/src/processing/plugin/ui/wizards/NewSketchWizard.java
Patch:
@@ -23,7 +23,7 @@
 import org.eclipse.ui.INewWizard;
 import org.eclipse.ui.IWorkbench;
 import org.eclipse.ui.actions.WorkspaceModifyOperation;
-import processing.plugin.core.builder.SketchNature;
+import processing.plugin.core.builder.SketchProject;
 import processing.plugin.ui.wizards.NewSketchWizardPage;
 
 /**
@@ -136,7 +136,7 @@ protected void createNewProject(IProjectDescription description, IProject proj,
 		}
 		
 		// this is a new project
-		SketchNature.addNature(proj);
+		SketchProject.addSketchNature(proj);
 		
 	}
 

File: android/core/src/processing/core/PShape3D.java
Patch:
@@ -1947,8 +1947,8 @@ public void draw(PGraphics g, int gr0, int gr1) {
       }
       
       // Last transformation: inversion of coordinate to make compatible with Processing's inverted Y axis.
-      gl.glPushMatrix();
-      gl.glScalef(1, -1, 1);
+      //gl.glPushMatrix();
+      //gl.glScalef(1, -1, 1);
       
       // Setting the stroke weight (line width's in OpenGL terminology) using either the group's weight 
       // or the renderer's weight. 
@@ -1965,7 +1965,7 @@ public void draw(PGraphics g, int gr0, int gr1) {
         // Using the overall's vertex mode assigned to the entire model.
         gl.glDrawArrays(glMode, group.first, group.last - group.first + 1);
       }
-      gl.glPopMatrix();
+      //gl.glPopMatrix();
       
       if (tex != null)  {
         if (pointSprites)   {

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -2263,9 +2263,10 @@ private void glLightSpotConcentration(int num) {
 
 
   protected void backgroundImpl(PImage image) {
-    gl.glClearColor(backgroundR, backgroundG, backgroundB, 1);
-    gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
+    //gl.glClearColor(backgroundR, backgroundG, backgroundB, 1);
+    //gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);
     set(0, 0, image);
+    gl.glClear(GL.GL_DEPTH_BUFFER_BIT);
   }
 
 

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -59,7 +59,8 @@ public class PApplet extends Activity implements PConstants, Runnable {
   /** The PGraphics renderer associated with this PApplet */
   public PGraphics g;
 
-  static final boolean DEBUG = true;
+//  static final boolean DEBUG = true;
+  static final boolean DEBUG = false;
   
   /** The frame containing this applet (if any) */
 //  public Frame frame;

File: android/tool/src/processing/app/tools/android/AndroidEnvironment.java
Patch:
@@ -55,7 +55,7 @@ public static void killAdbServer() {
 
 
   private AndroidEnvironment() {
-    if (AndroidMode.DEBUG) {
+    if (processing.app.Base.DEBUG) {
       System.out.println("Starting up AndroidEnvironment");
     }
 //    killAdbServer();

File: android/tool/src/processing/app/tools/android/AndroidMode.java
Patch:
@@ -52,8 +52,6 @@ public class AndroidMode implements DeviceListener {
   private Editor editor;
   private Build build;
   
-  static public boolean DEBUG = true;
-
   private static final String ANDROID_CORE_FILENAME =
     "processing-android-core-" + Base.VERSION_NAME + ".zip";
 

File: android/tool/src/processing/app/tools/android/AndroidSDK.java
Patch:
@@ -199,7 +199,9 @@ public static ProcessResult runADB(final String... cmd)
       adbCmd = cmd;
     }
     // printing this here to see if anyone else is killing the adb server
-    if (AndroidMode.DEBUG) PApplet.println(adbCmd);
+    if (processing.app.Base.DEBUG) {
+      PApplet.println(adbCmd);
+    }
 //    try {
     ProcessResult adbResult = new ProcessHelper(adbCmd).execute();
     // Ignore messages about starting up an adb daemon

File: android/tool/src/processing/app/tools/android/Build.java
Patch:
@@ -113,7 +113,9 @@ public File createProject(String target) {
 
     // Create the 'src' folder with the preprocessed code.
     final File srcFolder = new File(tempBuildFolder, "src");
-    if (AndroidMode.DEBUG) Base.openFolder(tempBuildFolder);
+    if (processing.app.Base.DEBUG) {
+      Base.openFolder(tempBuildFolder);
+    }
 
     try {
       manifest = new Manifest(editor);

File: app/src/processing/app/Base.java
Patch:
@@ -46,6 +46,8 @@ public class Base {
   static public String VERSION_NAME = "0190";
   /** Set true if this a proper release rather than a numbered revision. */
   static public boolean RELEASE = false;
+  /** True if heavy debugging error/log messages are enabled */
+  static public boolean DEBUG = false;
 
   static HashMap<Integer, String> platformNames =
     new HashMap<Integer, String>();

File: android/tool/src/processing/app/tools/android/AndroidDevice.java
Patch:
@@ -170,7 +170,7 @@ private void reportStackTrace(final LogEntry entry) {
     final List<String> stackCopy = Collections
         .unmodifiableList(new ArrayList<String>(stackTrace));
     for (final DeviceListener listener : listeners) {
-      listener.stacktrace(stackCopy);
+      listener.stackTrace(stackCopy);
     }
     stackTrace.clear();
   }

File: android/tool/src/processing/app/tools/android/DeviceListener.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.List;
 
 public interface DeviceListener {
-  void stacktrace(final List<String> trace);
+  void stackTrace(final List<String> trace);
 
   void sketchStopped();
 }

File: app/src/processing/app/EditorToolbar.java
Patch:
@@ -314,13 +314,13 @@ public void mouseExited(MouseEvent e) {
     // because the popup being set visible will fire a mouseExited() event
     if ((popup != null) && popup.isVisible()) return;
 
-    // there is no more rollover, make sure that the rollover text goes away
-    currentRollover = -1;
-
     if (state[OPEN] != INACTIVE) {
       setState(OPEN, INACTIVE, true);
     }
     handleMouse(e);
+    
+    // there is no more rollover, make sure that the rollover text goes away
+    currentRollover = -1;
   }
 
   int wasDown = -1;

File: pdf/src/processing/pdf/PGraphicsPDF.java
Patch:
@@ -584,7 +584,7 @@ protected void checkFont() {
                                  "when drawing text using the PDF library.");
     } else if (textMode != SHAPE) {
       if (textFont.isStream()) {
-        throw new RuntimeException("Use textMode(SHAPE) with when loading " +
+        throw new RuntimeException("Use textMode(SHAPE) with PDF when loading " +
                                    ".ttf and .otf files with createFont().");
       } else if (mapper.getAliases().get(textFont.getName()) == null) {
         //System.out.println("alias for " + name + " = " + mapper.getAliases().get(name));

File: core/src/processing/core/PApplet.java
Patch:
@@ -8949,7 +8949,7 @@ public void shearX(float angle) {
 
 
   /**
-   * Skew along Y axis
+   * Shear along Y axis
    */
   public void shearY(float angle) {
     if (recorder != null) recorder.shearY(angle);

File: core/src/processing/xml/StdXMLBuilder.java
Patch:
@@ -283,7 +283,7 @@ public void addAttribute(String key,
 //      if (nsPrefix != null) {
 //         top.setAttribute(fullName, nsURI, value);
 //      } else {
-      top.set(fullName, value);
+      top.setString(fullName, value);
 //      }
    }
 

File: android/core/src/processing/core/PFont.java
Patch:
@@ -265,6 +265,7 @@ public PFont(Typeface font, int size, boolean smooth, char charset[]) {
         descent = PApplet.round(lazyPaint.descent());
       }
     }
+    PApplet.println("ascent/descent = " + ascent + " " + descent);
   }
 
 

File: android/tool/src/processing/app/tools/android/AVD.java
Patch:
@@ -32,11 +32,11 @@ public class AVD {
   public static boolean ensureEclairAVD(final AndroidSDK sdk) {
     try {
       if (defaultAVD.exists(sdk)) {
-        System.out.println("the avd exists");
+//        System.out.println("the avd exists");
         return true;
       }
       if (defaultAVD.create(sdk)) {
-        System.out.println("the avd was created");
+//        System.out.println("the avd was created");
         return true;
       }
       Base.showWarning("Android Error", AVD_CREATE_ERROR, null);

File: app/src/processing/app/exec/StreamPump.java
Patch:
@@ -12,7 +12,6 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
-import processing.app.EditorConsole;
 
 
 /**

File: android/tool/src/processing/app/tools/android/AndroidEnvironment.java
Patch:
@@ -152,8 +152,8 @@ public AndroidDevice call() throws Exception {
         return blockingGetHardware();
       }
     };
-    final FutureTask<AndroidDevice> task = new FutureTask<AndroidDevice>(
-                                                                         androidFinder);
+    final FutureTask<AndroidDevice> task = 
+      new FutureTask<AndroidDevice>(androidFinder);
     deviceLaunchThread.execute(task);
     return task;
   }
@@ -238,6 +238,7 @@ public static List<String> listDevices() {
     } catch (InterruptedException e) {
       return Collections.emptyList();
     } catch (IOException e) {
+      System.err.println("AndroidEnvironment.listDevices() did this to me");
       e.printStackTrace();
 //      System.err.println(e);
 //      System.err.println("checking devices");

File: android/tool/src/processing/app/tools/android/AndroidSDK.java
Patch:
@@ -197,7 +197,8 @@ public static ProcessResult runADB(final String... cmd)
     } else {
       adbCmd = cmd;
     }
-//    PApplet.println(adbCmd);
+    // printing this here to see if anyone else is killing the adb server
+    PApplet.println(adbCmd);
 //    try {
     ProcessResult adbResult = new ProcessHelper(adbCmd).execute();
     // Ignore messages about starting up an adb daemon

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -4946,7 +4946,7 @@ public void onSurfaceCreated(GL10 igl, EGLConfig config) {
       if (-1 < extensions.indexOf("framebuffer_object")) {
         fboSupported = true;
       }
-      fboSupported = false;
+
       usingModelviewStack = gl11 == null || !matrixGetSupported;
       
       int maxTexSize[] = new int[1];

File: android/core/src/processing/core/PTexture.java
Patch:
@@ -258,7 +258,7 @@ public void set(PImage img, int x, int y, int w, int h) {
   public void set(PTexture tex) {
     PFramebuffer fbo = new PFramebuffer(parent, glWidth, glHeight);
     // This is the color (destination) buffer of the FBO. 
-    fbo.addColorBuffer(this);
+    fbo.setColorBuffer(this);
     
     // FBO copy:
     a3d.pushFramebuffer();
@@ -326,7 +326,7 @@ public void get(int[] pixels) {
     // Attaching the texture to the color buffer of a FBO, binding the FBO and reading the pixels
     // from the current draw buffer (which is the color buffer of the FBO).
     PFramebuffer fbo = new PFramebuffer(parent, glWidth, glHeight);
-    fbo.addColorBuffer(this);
+    fbo.setColorBuffer(this);
     
     a3d.pushFramebuffer();
     a3d.setFramebuffer(fbo);

File: android/tool/src/processing/app/tools/android/Build.java
Patch:
@@ -473,7 +473,7 @@ private void writeDefaultProps(final File file) {
   
   private void writeLocalProps(final File file) {
     final PrintWriter writer = PApplet.createWriter(file);
-    final String sdkPath = sdk.getSdk().getAbsolutePath();
+    final String sdkPath = sdk.getSdkFolder().getAbsolutePath();
     if (Base.isWindows()) {
       // Windows needs backslashes escaped, or it will also accept forward
       // slashes in the build file. We're using the forward slashes since this

File: android/tool/src/processing/app/tools/android/Permissions.java
Patch:
@@ -271,8 +271,7 @@ public void mousePressed(MouseEvent e) {
           int index = locationToIndex(e.getPoint());
 
           if (index != -1) {
-            JCheckBox checkbox = (JCheckBox)
-            getModel().getElementAt(index);
+            JCheckBox checkbox = (JCheckBox) getModel().getElementAt(index);
             checkbox.setSelected(!checkbox.isSelected());
             repaint();
           }

File: app/src/processing/app/Editor.java
Patch:
@@ -854,7 +854,7 @@ public void actionPerformed(ActionEvent e) {
     item = new JMenuItem("Getting Started");
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          Base.openURL("http://processing.org/learning/gettingstarted/");
+          Base.showGettingStarted();
         }
       });
     menu.add(item);
@@ -870,7 +870,7 @@ public void actionPerformed(ActionEvent e) {
     item = new JMenuItem("Troubleshooting");
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          Base.openURL("http://wiki.processing.org/w/Troubleshooting");
+          Base.showTroubleshooting();
         }
       });
     menu.add(item);
@@ -896,7 +896,7 @@ public void actionPerformed(ActionEvent e) {
     item = new JMenuItem("Frequently Asked Questions");
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          Base.openURL("http://wiki.processing.org/w/FAQ");
+          Base.showFAQ();
         }
       });
     menu.add(item);

File: app/src/processing/app/debug/Compiler.java
Patch:
@@ -656,8 +656,8 @@ public void close() { }
 
   void handleCrustyCode(RunnerException rex) {
     rex.setMessage("This code needs to be updated, " +
-                   "please read the \u201Cchanges\u201D reference.");
-    Base.showReference("changes.html");
+                   "please read the Changes page on the Wiki.");
+    Base.showChanges();
   }
 
 

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -7800,7 +7800,7 @@ public void blend(PImage src,
   // A3D-only functions
   
   // TODO: Discuss proper integration into PApplet API. 
-  synchronized public void clear() {
+  public void clear() {
     if (g instanceof PGraphicsAndroid3D) {
       ((PGraphicsAndroid3D)g).clear();
     } else  {
@@ -7809,13 +7809,12 @@ synchronized public void clear() {
   }
 
 
-  synchronized public void noClear() {
+  public void noClear() {
     if (g instanceof PGraphicsAndroid3D) {
       ((PGraphicsAndroid3D)g).noClear();
     } else  {
        throw new RuntimeException("This method is only available in PGraphicsAndroid3D renderer.");
     }    
   }
   
-  
 }

File: editor/org.processing.editor/src/org/processing/editor/ProcessingAnnotationHover.java
Patch:
@@ -25,8 +25,9 @@
  
 public class ProcessingAnnotationHover implements IAnnotationHover {
 
-	/* (non-Javadoc)
-	 * Method declared on IAnnotationHover
+	/**
+	 * Provides info for a given mouse hover position to the tooltip.
+	 * Currently this means retrieving the text under the mouse.
 	 */
 	public String getHoverInfo(ISourceViewer sourceViewer, int lineNumber) {
 		IDocument document= sourceViewer.getDocument();

File: editor/org.processing.editor/src/org/processing/editor/ProcessingDocumentSetupParticipant.java
Patch:
@@ -17,12 +17,13 @@
 public class ProcessingDocumentSetupParticipant implements IDocumentSetupParticipant {
 	
 	/**
+	 * The constructor doesn't do much.
 	 */
 	public ProcessingDocumentSetupParticipant() {
 	}
 
-	/*
-	 * @see org.eclipse.core.filebuffers.IDocumentSetupParticipant#setup(org.eclipse.jface.text.IDocument)
+	/**
+	 * {@inheritDoc}
 	 */
 	public void setup(IDocument document) {
 		if (document instanceof IDocumentExtension3) {

File: editor/org.processing.editor/src/org/processing/editor/language/ProcessingAutoIndentStrategy.java
Patch:
@@ -25,13 +25,13 @@ public class ProcessingAutoIndentStrategy extends DefaultIndentLineAutoEditStrat
 	public ProcessingAutoIndentStrategy() {
 	}
 	
-	/* (non-Javadoc)
-	 * Method declared on IAutoIndentStrategy
+	/**
+	 * {@inheritDoc}
 	 */
 	public void customizeDocumentCommand(IDocument d, DocumentCommand c) {
 		if (c.length == 0 && c.text != null && endsWithDelimiter(d, c.text))
 			smartIndentAfterNewLine(d, c);
-		else if ("}".equals(c.text)) { //$NON-NLS-1$
+		else if ("}".equals(c.text)) {
 			smartInsertAfterBracket(d, c);
 		}
 	}

File: app/src/processing/app/Editor.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-09 Ben Fry and Casey Reas
+  Copyright (c) 2004-10 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
@@ -974,7 +974,7 @@ public void actionPerformed(ActionEvent e) {
       });
     menu.add(item);
 
-    item = newJMenuItemShift("Copy for Discourse", 'C');
+    item = newJMenuItemShift("Copy as HTML", 'C');
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
 //          SwingUtilities.invokeLater(new Runnable() {

File: editor/org.processing.editor/src/org/processing/editor/ProcessingEditorPlugin.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class ProcessingEditorPlugin extends AbstractUIPlugin {
 	
-	public static final String PLUGIN_ID = "org.processing.ProcessingEditor";
+	public static final String ID = "org.processing.ProcessingEditor";
 	public static final String PROCESSING_PARTITIONING= "__processing_partitioning";
 	
 	// The shared instance

File: editor/org.processing.editor/src/org/processing/editor/language/ProcessingCodeScanner.java
Patch:
@@ -157,7 +157,8 @@ public ProcessingCodeScanner(ProcessingColorProvider provider) {
 			wordRule.addWord(fgLabels[i], label);		
 		for (int i= 0; i < fgOperators.length; i++)
 			wordRule.addWord(fgOperators[i], operator);
-		
+		for (int i= 0; i < fgInvalids.length; i++)
+			wordRule.addWord(fgInvalids[i], invalid);
 		// Set these as the colorizing rules for the document
 		rules.add(wordRule);
 

File: editor/org.processing.editor/src/org/processing/editor/util/ProcessingColorProvider.java
Patch:
@@ -27,7 +27,7 @@ public class ProcessingColorProvider {
 	public static final RGB KEYWORD1= new RGB(204, 102, 0);
 	public static final RGB KEYWORD2= new RGB(204, 102, 0);
 	public static final RGB KEYWORD3= new RGB(204, 102, 0);
-	public static final RGB LITERAL1= new RGB(0, 102, 153); // currently unused used [lonnen] june 16, 2010
+	public static final RGB LITERAL1= new RGB(0, 102, 153); // currently unused [lonnen] june 16, 2010
 	public static final RGB LITERAL2= new RGB(0, 102, 153);
 	public static final RGB LABEL= new RGB(0, 0, 128); // use listed as '?' in p5 doc
 	public static final RGB OPERATOR= new RGB(0, 0, 0);

File: core/src/processing/core/PGraphics3D.java
Patch:
@@ -979,7 +979,7 @@ protected void endShapeCameraToScreen(int start, int stop) {
   protected void addPoint(int a) {
     if (pointCount == points.length) {
       int[][] temp = new int[pointCount << 1][LINE_FIELD_COUNT];
-      System.arraycopy(points, 0, temp, 0, lineCount);
+      System.arraycopy(points, 0, temp, 0, pointCount);
       points = temp;
     }
     points[pointCount][VERTEX1] = a;

File: android/core/src/processing/core/PTexture.java
Patch:
@@ -37,8 +37,7 @@
  * By Andres Colubri
  *  TODO: Finish integration with PImage
  *  TODO: Revise updating mechanism (what happens when the pixels change in the PImage, etc).
- *  TODO: Find alternative for FOBs or how to expose FBO functionality in N1 and other EGL2 phones.
- *  TODO: 
+ *  TODO: Find alternative for FOBs or how to expose FBO functionality in N1 and other EGL2 phones. 
  */
 @SuppressWarnings("unused")
 public class PTexture implements PConstants { 

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -110,7 +110,7 @@
  */
 public class PGraphics extends PImage implements PConstants {
 
-  public int VERTEXCOUNT = 0;
+  public int VERTEXCOUNT = 0; // Just for debugging purposes, I'll remove soon. Andres
   
   // ........................................................
 

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -449,7 +449,8 @@ protected void copyFrameToScreenTexture() {
     gl.glFinish(); // Make sure that the execution off all the openGL commands is finished.
     gl.glBindTexture(GL10.GL_TEXTURE_2D, screenTex.getTexture().getGLTextureID());
     //TODO: try using glCopyTexSubImage2D
-    gl.glCopyTexImage2D(GL10.GL_TEXTURE_2D, 0, GL10.GL_RGB, 0,0, width, height, 0);
+    //gl.glCopyTexSubImage2D(GL10.GL_TEXTURE_2D, 0, 0, 0, 0, 0, width, height);
+    gl.glCopyTexImage2D(GL10.GL_TEXTURE_2D, 0, GL10.GL_RGBA, 0,0, width, height, 0);
     gl.glBindTexture(GL10.GL_TEXTURE_2D, 0);
   }
   

File: android/tool/src/processing/app/tools/android/Build.java
Patch:
@@ -43,6 +43,7 @@ public Build(final Editor editor, final AndroidSDK sdk) {
     this.sdk = sdk;
   }
 
+  // TODO this needs to be a generic function inside Sketch or elsewhere
   protected int[] getSketchSize() {
     int wide = AVD.DEFAULT_WIDTH;
     int high = AVD.DEFAULT_HEIGHT;

File: android/tool/src/processing/app/tools/android/EmulatorController.java
Patch:
@@ -58,6 +58,9 @@ synchronized public void launch() throws IOException {
     // beginning execution of the emulator, so we are now officially "Launched"
     setState(State.WAITING_FOR_BOOT);
 
+    // 2010-04-13 15:26:56.380 emulator[91699:903] Warning once: This 
+    // application, or a library it uses, is using NSQuickDrawView, which has 
+    // been deprecated. Apps should cease use of QuickDraw and move to Quartz.
     final String title = PApplet.join(cmd, ' ');
     new StreamPump(p.getInputStream(), "out: " + title).addTarget(System.out)
         .start();

File: android/core/src/processing/core/PGraphicsAndroid3D.java
Patch:
@@ -57,6 +57,7 @@
  * TODO: Comment A3D, PShape3D and PTexture, 
  * TODO: Check lighting and materials, specially in PShape3D..
  * TODO: Revise triangulator (issues are particularly apparent when tesselating SVG shapes).
+ * TODO: Optimize Vertex Array rendering on real N1 hardware.
  */
 public class PGraphicsAndroid3D extends PGraphics {
   public SurfaceHolder holder;
@@ -633,7 +634,7 @@ public void hint(int which) {
 
   //public void beginShape()
   
-
+  
   public void beginShapeRecorder() {
     beginShapeRecorder(POLYGON);
   }
@@ -4685,7 +4686,7 @@ public void onSurfaceCreated(GL10 igl, EGLConfig config) {
        if (-1 < extensions.indexOf("GL_OES_matrix_get"))  {
          matrixGetSupported = true;
        }
-       if (-1 < extensions.indexOf("GL_ANDROID_vertex_buffer_object"))  {
+       if (-1 < extensions.indexOf("GL_ARB_vertex_buffer_object"))  {
          vboSupported = true;   
        }
        if (-1 < extensions.indexOf("GL_OES_framebuffer_object"))  {

File: android/tool/src/processing/app/tools/android/AVD.java
Patch:
@@ -83,6 +83,6 @@ protected boolean create(final AndroidSDK sdk) throws IOException {
   private static final String AVD_CREATE_ERROR = "An error occurred while running “android create avd”\n"
       + "to set up the default Android emulator. Make sure that the\n"
       + "Android SDK is installed properly, and that the Android\n"
-      + "and Google APIs are installed for level 5.";
+      + "and Google APIs are installed for level " + Build.sdkVersion + ".";
 
 }

File: app/src/processing/app/syntax/TokenMarker.java
Patch:
@@ -305,7 +305,7 @@ else if(lastToken.next == null)
         /**
          * Inner class for storing information about tokenized lines.
          */
-        public class LineInfo
+        private static class LineInfo
         {
                 /**
                  * Creates a new LineInfo object with token = Token.NULL

File: android/core/src/processing/core/PImage.java
Patch:
@@ -1486,8 +1486,8 @@ private void blit_resize(PImage img,
                            int mode) {
     if (srcX1 < 0) srcX1 = 0;
     if (srcY1 < 0) srcY1 = 0;
-    if (srcX2 >= img.width) srcX2 = img.width - 1;
-    if (srcY2 >= img.height) srcY2 = img.height - 1;
+    if (srcX2 > img.width) srcX2 = img.width;
+    if (srcY2 > img.height) srcY2 = img.height;
 
     int srcW = srcX2 - srcX1;
     int srcH = srcY2 - srcY1;

File: core/src/processing/core/PImage.java
Patch:
@@ -1565,8 +1565,8 @@ private void blit_resize(PImage img,
                            int mode) {
     if (srcX1 < 0) srcX1 = 0;
     if (srcY1 < 0) srcY1 = 0;
-    if (srcX2 >= img.width) srcX2 = img.width - 1;
-    if (srcY2 >= img.height) srcY2 = img.height - 1;
+    if (srcX2 > img.width) srcX2 = img.width;
+    if (srcY2 > img.height) srcY2 = img.height;
 
     int srcW = srcX2 - srcX1;
     int srcH = srcY2 - srcY1;

File: pdf/src/processing/pdf/PGraphicsPDF.java
Patch:
@@ -552,7 +552,7 @@ public void addFonts(String directory) {
    * @return true if it's ok
    */
   protected boolean checkFont(String name) {
-    System.out.println("alias for " + name + " = " + mapper.getAliases().get(name));
+    //System.out.println("alias for " + name + " = " + mapper.getAliases().get(name));
     return mapper.getAliases().get(name) != null;
   }
   

File: pdf/src/processing/pdf/PGraphicsPDF.java
Patch:
@@ -384,9 +384,11 @@ public void textFont(PFont which) {
   public void textMode(int mode) {
     if (textMode != mode) {
       if (mode == SHAPE) {
+        textMode = SHAPE;
         g2.dispose();
         g2 = content.createGraphicsShapes(width, height);
       } else if (mode == MODEL) {
+        textMode = MODEL;
         g2.dispose();
         g2 = content.createGraphics(width, height, mapper);
 //        g2 = template.createGraphics(width, height, mapper);

File: app/src/processing/app/syntax/CTokenMarker.java
Patch:
@@ -123,6 +123,7 @@ else if(doKeyword(line,i,c))
                                                         lastOffset = lastKeyword = mlength;
                                                         break loop;
                                                 }
+                                                i++; // jdf- fix http://dev.processing.org/bugs/show_bug.cgi?id=609
                                         }
                                         break;
                                 default:

File: app/src/processing/app/debug/Runner.java
Patch:
@@ -171,6 +171,8 @@ protected String[] getMachineParams() {
 //        File.pathSeparator +
 //        Base.librariesClassPath);
 
+    // enable assertions - http://dev.processing.org/bugs/show_bug.cgi?id=1188
+    params.add("-ea");
     //PApplet.println(PApplet.split(sketch.classPath, ':'));
 
     String outgoing[] = new String[params.size()];

File: app/src/processing/app/preproc/PdeEmitter.java
Patch:
@@ -546,6 +546,7 @@ public void print(final AST ast) throws RunnerException {
       break;
 
     case LITERAL_synchronized: // 0137 to fix bug #136
+    case LITERAL_assert:
       out.print(ast.getText());
       dumpHiddenAfter(ast);
       printChildren(ast);

File: core/src/processing/core/PApplet.java
Patch:
@@ -7313,7 +7313,7 @@ public void mousePressed(MouseEvent e) {
       if (frameLoc.y < 0) {
         // Windows actually allows you to place frames where they can't be 
         // closed. Awesome. http://dev.processing.org/bugs/show_bug.cgi?id=1508
-        frame.setLocation(frameLoc.x, 20);
+        frame.setLocation(frameLoc.x, 30);
       }
 
       if (backgroundColor == Color.black) {  //BLACK) {

File: app/src/processing/app/preproc/PdePreprocessor.java
Patch:
@@ -183,7 +183,7 @@ public int writePrefix(String program, String buildPath, String sketchName,
     // if the program ends with no CR or LF an OutOfMemoryError will happen.
     // not gonna track down the bug now, so here's a hack for it:
     // http://dev.processing.org/bugs/show_bug.cgi?id=5
-    program += "\n";
+    //program += "\n";  // fixed by jdf? Can't reproduce.
 
     // if the program ends with an unterminated multi-line comment,
     // an OutOfMemoryError or NullPointerException will happen.

File: core/src/processing/core/PFont.java
Patch:
@@ -684,7 +684,7 @@ static public void loadFonts() {
         GraphicsEnvironment.getLocalGraphicsEnvironment();
       fonts = ge.getAllFonts();
       if (PApplet.platform == PConstants.MACOSX) {
-        fontDifferent = new HashMap();
+        fontDifferent = new HashMap<String,Font>();
         for (Font font : fonts) {
           // getName() returns the PostScript name on OS X 10.6 w/ Java 6.
           fontDifferent.put(font.getName(), font);

File: android/tool/src/processing/app/tools/android/ProcessRegistry.java
Patch:
@@ -15,7 +15,7 @@ public void run() {
         synchronized (REGISTRY) {
           for (final Process p : REGISTRY) {
             try {
-              System.err.println("Cleaning up rogue process " + p);
+              //              System.err.println("Cleaning up rogue process " + p);
               p.destroy();
             } catch (final Exception drop) {
             }

File: android/tool/src/processing/app/tools/android/StreamPump.java
Patch:
@@ -99,5 +99,6 @@ public void processLine(final String line) {
     public void processLine(final String line) {
       // noop
     }
+
   };
 }

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -1324,7 +1324,7 @@ public void handleDraw() {
       g.endDraw();
 
       frameRateLastNanos = now;
-      frameCount++;
+      frameCount++;      
     }
   }
 

File: android/tool/src/processing/app/tools/android/Build.java
Patch:
@@ -211,15 +211,14 @@ private File createAndroidBuildFolder(final Sketch sketch) throws IOException {
   }
 
   /**
-   * @param buildFile
-   *          location of the build.xml for the sketch
    * @param target
    *          "debug" or "release"
    */
   boolean antBuild(final String target) {
     final Project p = new Project();
     p.setUserProperty("ant.file", buildFile.getAbsolutePath()
         .replace('\\', '/'));
+
     // deals with a problem where javac error messages weren't coming through
     p.setUserProperty("build.compiler", "extJavac");
     // p.setUserProperty("build.compiler.emacs", "true"); // does nothing

File: android/core/src/processing/core/PGraphicsAndroid2D.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class PGraphicsAndroid2D extends PGraphics {
 
-  Canvas canvas;  // like g2 for PGraphicsJava2D
+  public Canvas canvas;  // like g2 for PGraphicsJava2D
 
   /// break the shape at the next vertex (next vertex() call is a moveto())
   boolean breakShape;
@@ -286,6 +286,7 @@ public void vertex(float x, float y) {
 //        path.moveTo(x, y);
       //if (pathReset) {
       if (vertexCount == 0) {
+        path.reset();
         path.moveTo(x, y);
         vertexCount = 1;
 //        pathReset = false;

File: android/core/src/processing/core/PImage.java
Patch:
@@ -364,6 +364,7 @@ public void resize(int wide, int high) {  // ignore
       width = 0;  // Gimme a break, don't waste my time
       height = 0;
       pixels = new int[0];
+      bitmap = null;
 
     } else {
       if (wide == 0) {  // Use height to determine relative size

File: android/core/src/processing/core/PImage.java
Patch:
@@ -378,6 +378,7 @@ public void resize(int wide, int high) {  // ignore
       this.width = wide;
       this.height = high;
       this.pixels = temp.pixels;
+      this.bitmap = null;
     }
     // Mark the pixels array as altered
     updatePixels();

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -3012,8 +3012,7 @@ public PFont createFont(String name, float size,
 
     if (lowerName.endsWith(".otf") || lowerName.endsWith(".ttf")) {
       AssetManager assets = getBaseContext().getAssets();
-      baseFont = Typeface.createFromAsset(assets, "data/" + name);
-
+      baseFont = Typeface.createFromAsset(assets, name);
     } else {
       baseFont = PFont.findTypeface(name);
     }

File: android/tool/src/processing/app/tools/android/StreamPump.java
Patch:
@@ -79,7 +79,7 @@ public void run() {
     }
   }
 
-  private class WriterLineProcessor implements LineProcessor {
+  private static class WriterLineProcessor implements LineProcessor {
     private final PrintWriter writer;
 
     private WriterLineProcessor(final OutputStream out) {

File: core/src/processing/core/PImage.java
Patch:
@@ -711,6 +711,7 @@ public void mask(int maskArray[]) {
    * @param maskImg any PImage object used as the alpha channel for "img", needs to be same size as "img"
    */
   public void mask(PImage maskImg) {
+    maskImg.loadPixels();
     mask(maskImg.pixels);
   }
 

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -8,7 +8,7 @@
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation, version 2.
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PConstants.java
Patch:
@@ -3,13 +3,12 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-08 Ben Fry and Casey Reas
+  Copyright (c) 2004-10 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation; either
-  version 2.1 of the License, or (at your option) any later version.
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PFont.java
Patch:
@@ -3,12 +3,12 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-10 Ben Fry & Casey Reas
+  Copyright (c) 2004-10 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or
-  modify it under the terms of version 2 of the GNU Lesser General
-  Public License as published by the Free Software Foundation.
+  modify it under the terms of the GNU Lesser General Public
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -3,13 +3,12 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-08 Ben Fry and Casey Reas
+  Copyright (c) 2004-10 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation; either
-  version 2.1 of the License, or (at your option) any later version.
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PGraphicsAndroid2D.java
Patch:
@@ -7,8 +7,7 @@
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation; either
-  version 2.1 of the License, or (at your option) any later version.
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PMatrix.java
Patch:
@@ -3,12 +3,11 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005-08 Ben Fry and Casey Reas
+  Copyright (c) 2005-10 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation; either
-  version 2.1 of the License, or (at your option) any later version.
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PMatrix2D.java
Patch:
@@ -3,12 +3,11 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005-08 Ben Fry and Casey Reas
+  Copyright (c) 2005-10 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation; either
-  version 2.1 of the License, or (at your option) any later version.
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PMatrix3D.java
Patch:
@@ -3,12 +3,11 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005-08 Ben Fry and Casey Reas
+  Copyright (c) 2005-10 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation; either
-  version 2.1 of the License, or (at your option) any later version.
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PPolygon.java
Patch:
@@ -3,13 +3,12 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-08 Ben Fry and Casey Reas
+  Copyright (c) 2004-10 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation; either
-  version 2.1 of the License, or (at your option) any later version.
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PShape.java
Patch:
@@ -3,12 +3,11 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2006-08 Ben Fry and Casey Reas
+  Copyright (c) 2006-10 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation; either
-  version 2.1 of the License, or (at your option) any later version.
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PStyle.java
Patch:
@@ -3,12 +3,11 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2008 Ben Fry and Casey Reas
+  Copyright (c) 2008-10 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
-  License as published by the Free Software Foundation; either
-  version 2.1 of the License, or (at your option) any later version.
+  License version 2.1 as published by the Free Software Foundation.
 
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -2770,7 +2770,7 @@ public PImage loadImage(String filename) {
       System.err.println("Could not find the image " + filename + ".");
       return null;
     }
-    long t = System.currentTimeMillis();
+//    long t = System.currentTimeMillis();
     Bitmap bitmap = null;
     try {
       bitmap = BitmapFactory.decodeStream(stream);
@@ -2780,8 +2780,8 @@ public PImage loadImage(String filename) {
         stream = null;
       } catch (IOException e) { }
     }
-    int much = (int) (System.currentTimeMillis() - t);
-    println("loadImage(" + filename + ") was " + nfc(much));
+//    int much = (int) (System.currentTimeMillis() - t);
+//    println("loadImage(" + filename + ") was " + nfc(much));
     PImage image = new PImage(bitmap);
     image.parent = this;
     return image;

File: android/core/src/processing/core/PGraphicsAndroid2D.java
Patch:
@@ -877,8 +877,7 @@ public void noSmooth() {
 
   Rect imageImplSrcRect;
   RectF imageImplDstRect;
-  
-  android.widget.ImageView imv;
+  //android.widget.ImageView imv;
   
   /**
    * Handle renderer-specific image drawing.

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -2921,6 +2921,8 @@ public void run() {
         vessel.height = actual.height;
         vessel.format = actual.format;
         vessel.pixels = actual.pixels;
+        // an android, pixels[] will probably be null, we want this one
+        vessel.bitmap = actual.bitmap;
       }
       requestImageCount--;
     }

File: android/core/src/processing/core/PGraphics.java
Patch:
@@ -2155,6 +2155,9 @@ public void image(PImage image, float x, float y) {
     // Starting in release 0144, image errors are simply ignored.
     // loadImageAsync() sets width and height to -1 when loading fails.
     if (image.width == -1 || image.height == -1) return;
+    
+    // If not loaded yet, don't try to draw
+    if (image.width == 0 || image.height == 0) return;
 
     if (imageMode == CORNER || imageMode == CORNERS) {
       imageImpl(image,

File: android/core/src/processing/core/PImage.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-08 Ben Fry and Casey Reas
+  Copyright (c) 2004-10 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or
@@ -605,6 +605,7 @@ public void mask(int alpha[]) {
    * Set alpha channel for an image using another image as the source.
    */
   public void mask(PImage alpha) {
+    alpha.loadPixels();
     mask(alpha.pixels);
   }
 

File: android/core/src/processing/core/PGraphicsAndroid2D.java
Patch:
@@ -129,7 +129,7 @@ protected void allocate() {
 
 
   public void dispose() {
-    // called when paused.
+    bitmap.recycle();
   }
 
 

File: android/tool/src/processing/app/tools/android/AndroidEnvironment.java
Patch:
@@ -24,7 +24,7 @@
  * 
  * AndroidDevice n1 = env.getHardware();</pre>
  * 
- * @author Jonathan Feinberg &lt;jdf@us.ibm.com&gt;
+ * @author Jonathan Feinberg &lt;jdf@pobox.com&gt;
  *
  */
 public class AndroidEnvironment implements AndroidEnvironmentProperties {

File: android/tool/src/processing/app/tools/android/SketchLogCatter.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * 
- * @author Jonathan Feinberg <jdf@us.ibm.com>
+ * @author Jonathan Feinberg &lt;jdf@pobox.com&gt;
  *
  */
 class SketchLogCatter implements LineProcessor {

File: android/tool/src/processing/app/tools/android/StreamPump.java
Patch:
@@ -23,7 +23,7 @@
  * text, and not for arbitrary binary cruft.</b> It's handy for reading
  * the output of processes that emit textual data, for example.
  * 
- * @author Jonathan Feinberg &lt;jdf@us.ibm.com&gt;
+ * @author Jonathan Feinberg &lt;jdf@pobox.com&gt;
  *
  */
 class StreamPump implements Runnable {

File: android/tool/src/processing/app/tools/android/AndroidDevice.java
Patch:
@@ -32,7 +32,6 @@ public AndroidDevice(final AndroidEnvironment env, final String id) {
   //  adb shell am start -n com.android.launcher2/.Launcher
 
   private class LogLineProcessor implements LineProcessor {
-    @Override
     public void processLine(final String line) {
       final LogEntry entry = new LogEntry(line);
 

File: android/tool/src/processing/app/tools/android/ProcessResult.java
Patch:
@@ -19,7 +19,6 @@ public ProcessResult(final String cmd, final int result, final String output,
     this.time = time;
   }
 
-  @Override
   public Iterator<String> iterator() {
     return Arrays.asList(output.split("\r?\n")).iterator();
   }

File: android/tool/src/processing/app/tools/android/SketchLogCatter.java
Patch:
@@ -48,7 +48,6 @@ public void start() throws InterruptedException, IOException {
     process.waitFor();
   }
 
-  @Override
   public void processLine(final String line) {
     final Matcher m = interestingLine.matcher(line);
     if (m.matches()) {

File: android/tool/src/processing/app/tools/android/StreamPump.java
Patch:
@@ -29,7 +29,6 @@
 class StreamPump implements Runnable {
   private static final ExecutorService threads = Executors
       .newCachedThreadPool(new ThreadFactory() {
-        @Override
         public Thread newThread(final Runnable r) {
           final Thread t = new Thread(r);
           t.setDaemon(true);
@@ -64,7 +63,6 @@ public void start() {
     threads.execute(this);
   }
 
-  @Override
   public void run() {
     try {
       String line;
@@ -92,7 +90,6 @@ public WriterLineProcessor(final Writer writer) {
       this.writer = new PrintWriter(writer, true);
     }
 
-    @Override
     public void processLine(final String line) {
       writer.println(line);
     }

File: android/core/src/processing/core/PApplet.java
Patch:
@@ -500,6 +500,7 @@ public void resume() {
   public void onDestroy() {
     System.out.println("PApplet.onDestroy() called");
     super.onDestroy();
+    finish();
   }
 
 

File: core/src/processing/core/PImage.java
Patch:
@@ -1177,7 +1177,7 @@ protected void dilate(boolean isInverted) {
           if (idxRight>=maxRowIdx)
             idxRight=currIdx;
           if (idxUp<0)
-            idxUp=0;
+            idxUp=currIdx;
           if (idxDown>=maxIdx)
             idxDown=currIdx;
 
@@ -1234,7 +1234,7 @@ protected void dilate(boolean isInverted) {
           if (idxRight>=maxRowIdx)
             idxRight=currIdx;
           if (idxUp<0)
-            idxUp=0;
+            idxUp=currIdx;
           if (idxDown>=maxIdx)
             idxDown=currIdx;
 

File: android/tool/src/processing/app/tools/android/SketchLogCatter.java
Patch:
@@ -73,7 +73,7 @@ public void run() {
             continue;
           }
           final PrintWriter w = m.group(1).equals("W") ? stderr : stdout;
-          w.println("<" + m.group(3) + ">");
+          w.println(m.group(3));
         }
       } catch (final IOException e) {
         e.printStackTrace(System.err);

File: android/tool/src/processing/app/tools/android/Reset.java
Patch:
@@ -22,7 +22,6 @@
 package processing.app.tools.android;
 
 import javax.swing.JOptionPane;
-
 import processing.app.Editor;
 import processing.app.tools.Tool;
 

File: app/src/processing/app/tools/android/Device.java
Patch:
@@ -64,7 +64,7 @@ public class Device {
     "An error occurred while running “android create avd”\n" +
     "to set up the default Android emulator. Make sure that the\n" +
     "Android SDK is installed properly, and that the Android\n" +
-    "and Google APIs are installed for levels 4 and 5.";
+    "and Google APIs are installed for level 5.";
 
   static final String ADB_DEVICES_ERROR =
     "Received unfamiliar output from “adb devices”.\n" +

File: core/src/processing/core/PGraphics3D.java
Patch:
@@ -437,6 +437,7 @@ public void beginDraw() {
     shapeFirst = 0;
 
     // reset textures
+    Arrays.fill(textures, null);
     textureIndex = 0;
 
     normal(0, 0, 1);

File: app/src/processing/app/syntax/PdeTextAreaDefaults.java
Patch:
@@ -69,7 +69,7 @@ public PdeTextAreaDefaults() {
     // disabling for 0122, not sure what this does
     //inputHandler.addKeyBinding("C+\\", InputHandler.TOGGLE_RECT);
 
-    // for 0122, these have been changed for better compatability
+    // for 0122, these have been changed for better compatibility
     // HOME and END now mean the beginning/end of the document
     if (Base.isMacOS()) {
       inputHandler.addKeyBinding("HOME", InputHandler.DOCUMENT_HOME);

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.Vector;
 import java.awt.im.InputMethodRequests;
 
+import processing.app.syntax.im.InputMethodSupport;
+
 /**
  * jEdit's text area component. It is more suited for editing program
  * source code than JEditorPane, because it drops the unnecessary features
@@ -227,7 +229,7 @@ public void setCaretVisible(boolean caretVisible) {
    * Blinks the caret.
    */
   public final void blinkCaret() {
-    if (caretBlinks && !((InputMethodSupport)getInputMethodRequests()).getIsComposing())  {
+    if (caretBlinks)  {
       blink = !blink;
       painter.invalidateSelectedLines();
     } else {

File: core/preproc/src/processing/build/PAppletMethods.java
Patch:
@@ -189,7 +189,8 @@ private void process(PrintStream out, File input) throws IOException {
         out.println();
         out.println();
         // end has its own newline
-        out.print(commentBuffer.toString());
+        //out.print(commentBuffer.toString());  // TODO disabled for now XXXX
+        out.print(commentBuffer.toString());  // duplicates all comments
         commentBuffer.setLength(0);
         out.println(line);
 

File: android/core/src/processing/android/core/GLModel.java
Patch:
@@ -239,7 +239,7 @@ public void endUpdate() {
       int offset = firstUpdateIdx * 2;
       int size = (lastUpdateIdx - firstUpdateIdx + 1) * 2;
       
-      texCoords.put(updateNormalArray, offset, size);
+      texCoords.put(updateTexCoordArray, offset, size);
       texCoords.position(0);
       
       gl.glBufferSubData(GL11.GL_ARRAY_BUFFER, offset * SIZEOF_FLOAT, size * SIZEOF_FLOAT, texCoords);

File: core/src/processing/core/PApplet.java
Patch:
@@ -7152,6 +7152,7 @@ static public void main(String args[]) {
       frame.setBackground(backgroundColor);
       if (exclusive) {
         displayDevice.setFullScreenWindow(frame);
+        frame.setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
         fullScreenRect = frame.getBounds();
       } else {
         DisplayMode mode = displayDevice.getDisplayMode();

File: app/src/processing/app/Base.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-09 Ben Fry and Casey Reas
+  Copyright (c) 2004-10 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
@@ -1569,12 +1569,11 @@ static public boolean isCloseWindowEvent(KeyEvent e) {
   }
   */
 
-
   /**
    * Registers key events for a Ctrl-W and ESC with an ActionListener
    * that will take care of disposing the window.
    */
-  static public void registerWindowCloseKeys(JRootPane root, //Window window,
+  static public void registerWindowCloseKeys(JRootPane root,
                                              ActionListener disposer) {
     KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
     root.registerKeyboardAction(disposer, stroke,

File: android/core/src/processing/android/core/GLConstants.java
Patch:
@@ -77,7 +77,7 @@ public interface GLConstants {
   public static final int NORMALS = 1;
   public static final int COLORS = 2;
   public static final int TEXTURES = 3;
-  public static final int GROUPS = 3;
+  public static final int GROUPS = 4;
     
   
   

File: android/core/src/processing/android/core/GLModel.java
Patch:
@@ -217,7 +217,7 @@ public void endUpdate() {
       throw new RuntimeException("GLModel: call beginUpdate()");
     }
     
-    if (lastUpdateIdx < firstUpdateIdx) return;  
+    if (updateElement != GROUPS && lastUpdateIdx < firstUpdateIdx) return;  
     
     if (updateElement == VERTICES) {
       if (updateVertexArray == null) {

File: android/core/src/processing/android/core/GLModelParameters.java
Patch:
@@ -1,12 +1,12 @@
 package processing.android.core;
 
 public class GLModelParameters implements GLConstants, PConstants {
-  GLModelParameters() {
+  public GLModelParameters() {
     updateMode = STATIC;    
     drawMode= POINTS;
   }
 
-   GLModelParameters(GLModelParameters src) {
+   public GLModelParameters(GLModelParameters src) {
     updateMode = src.updateMode;    
     drawMode= src.drawMode;
   }

File: android/core/src/processing/android/core/PGraphicsAndroid2D.java
Patch:
@@ -869,7 +869,7 @@ protected void imageImpl(PImage who,
     if (who.bitmap == null || 
         who.width != who.bitmap.getWidth() || 
         who.height != who.bitmap.getHeight()) {
-      who.bitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888);
+      who.bitmap = Bitmap.createBitmap(who.width, who.height, Config.ARGB_8888);
       who.modified = true;
     } 
     if (who.modified) {

File: android/core/src/processing/android/core/PApplet.java
Patch:
@@ -46,7 +46,6 @@
 
 
 public class PApplet extends Activity implements PConstants, Runnable {
-
   /** The PGraphics renderer associated with this PApplet */
   public PGraphics g;
 
@@ -135,6 +134,9 @@ public class PApplet extends Activity implements PConstants, Runnable {
   /** height of this applet's associated PGraphics */
   public int height;
 
+  // can't call this because causes an ex, but could set elsewhere
+  //final float screenDensity = getResources().getDisplayMetrics().density;
+
   /** absolute x position of input on screen */
   public int mouseX;
 

File: app/src/processing/app/tools/android/Device.java
Patch:
@@ -106,7 +106,7 @@ static boolean checkDefaults() {
 
 
   protected boolean exists() throws IOException {
-    String[] cmd = { "android", "list", "avds" };
+    String[] cmd = { "android.bat", "list", "avds" };
 //    Process p = Runtime.getRuntime().exec(cmd);
 //    StringRedirectThread error = new StringRedirectThread(p.getErrorStream());
 //    StringRedirectThread output = new StringRedirectThread(p.getInputStream());
@@ -206,7 +206,6 @@ static void sendHomeButton(String device) throws IOException {
     // home on the emulator
 //  /dev/input/event0: 0001 0066 00000001
 //  /dev/input/event0: 0001 0066 00000000
-
   }
 
 

File: app/src/processing/app/Base.java
Patch:
@@ -250,7 +250,7 @@ public Base(String[] args) {
       }
     }
 
-    // If not path is set, get the default sketchbook folder for this platform
+    // If no path is set, get the default sketchbook folder for this platform
     if (sketchbookPath == null) {
       File defaultFolder = getDefaultSketchbookFolder();
       Preferences.set("sketchbook.path", defaultFolder.getAbsolutePath());

File: app/src/processing/app/tools/android/Device.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2009 Ben Fry and Casey Reas
+  Copyright (c) 2009-10 Ben Fry and Casey Reas
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License version 2

File: app/src/processing/app/tools/android/Device.java
Patch:
@@ -99,7 +99,7 @@ static boolean checkDefaults() {
       return true;
 
     } catch (Exception e) {
-      Base.showWarning("Android Error", AVD_CREATE_ERROR, null);
+      Base.showWarning("Android Error", AVD_CREATE_ERROR, e);
     }
     return false;
   }
@@ -149,7 +149,6 @@ protected boolean create() throws IOException {
 
     try {
       int result = p.waitFor();
-      System.out.println("res is " + result);
       if (result == 0) {
         // mumble the result into the console
         //PApplet.println(output.getLines());

File: app/src/processing/app/macosx/ThinkDifferent.java
Patch:
@@ -50,7 +50,8 @@ public class ThinkDifferent implements ApplicationListener {
   
   static protected void init(Base base) {    
     if (application == null) {
-      application = new com.apple.eawt.Application();
+      //application = new com.apple.eawt.Application();
+      application = com.apple.eawt.Application.getApplication();
     }
     if (adapter == null) {
       adapter = new ThinkDifferent(base);

File: app/src/processing/app/tools/android/Build.java
Patch:
@@ -16,7 +16,6 @@ public class Build {
   static SimpleDateFormat dateFormat = new SimpleDateFormat("yyMMdd.HHmm");
 
   static String basePackage = "processing.android.test";
-  static String sdkLocation = "/opt/android";
   
   Editor editor;
 
@@ -467,7 +466,7 @@ void writeDefaultProps(File file) {
   
   void writeLocalProps(File file) {
     PrintWriter writer = PApplet.createWriter(file);
-    writer.println("sdk-location=" + sdkLocation);
+    writer.println("sdk-location=" + Android.sdkPath);
     writer.flush();
     writer.close();
   }

File: app/src/processing/app/debug/Runner.java
Patch:
@@ -538,9 +538,9 @@ protected void reportException(String message, ThreadReference thread) {
   RunnerException findException(String message, ThreadReference thread) {
     try {
       // use to dump the stack for debugging
-      for (StackFrame frame : thread.frames()) {
-        System.out.println("frame: " + frame);
-      }
+//      for (StackFrame frame : thread.frames()) {
+//        System.out.println("frame: " + frame);
+//      }
 
       List<StackFrame> frames = thread.frames();
       for (StackFrame frame : frames) {

File: app/src/processing/app/Base.java
Patch:
@@ -1754,7 +1754,9 @@ static public int showYesNoQuestion(Editor editor, String title,
                                             String primary, String secondary) {
     if (!Base.isMacOS()) {
       return JOptionPane.showConfirmDialog(editor,
-                                           primary + "\n" + secondary, title,
+                                           "<html><body>" +
+                                           "<b>" + primary + "</b>" + 
+                                           "<br>" + secondary, title,
                                            JOptionPane.YES_NO_OPTION,
                                            JOptionPane.QUESTION_MESSAGE);
     } else {

File: app/src/processing/app/tools/android/AndroidRunner.java
Patch:
@@ -72,6 +72,9 @@ public class AndroidRunner extends Runner {
 
   public AndroidRunner(RunnerListener listener) {
     super(listener);
+    if (editor != null) {
+      sketch = editor.getSketch();
+    }
   }
 
 

File: app/src/processing/app/tools/android/Build.java
Patch:
@@ -164,6 +164,8 @@ public boolean createProject() {
     try {
       // need to change to a better set of imports here
 
+      // grab code from current editing window
+      sketch.prepare(); 
       className = sketch.preprocess(buildPath, new Preproc());
       if (className != null) {
         File androidXML = new File(androidFolder, "AndroidManifest.xml");

File: app/src/processing/app/Editor.java
Patch:
@@ -2253,7 +2253,7 @@ public void statusError(Exception e) {
       }
       statusError(mess);
     }
-    e.printStackTrace();
+//    e.printStackTrace();
   }
 
 

File: app/src/processing/app/preproc/PdePreprocessor.java
Patch:
@@ -195,7 +195,6 @@ public int writePrefix(String program, String buildPath,
     // again, not gonna bother tracking this down, but here's a hack.
     // http://dev.processing.org/bugs/show_bug.cgi?id=16
     String scrubbed = Sketch.scrubComments(program);
-    System.out.println(scrubbed);
     // If there are errors, an exception is thrown and this fxn exits.
 
     if (Preferences.getBoolean("preproc.substitute_unicode")) {

File: app/src/processing/app/Sketch.java
Patch:
@@ -1914,7 +1914,8 @@ static public String scrubComments(String what) {
             break;
 
           } else {
-            index++;
+            // continue blanking this area
+            p[index++] = ' ';
           }
         }
         if (!endOfRainbow) {

File: app/src/processing/app/debug/Runner.java
Patch:
@@ -77,8 +77,8 @@ public class Runner implements MessageConsumer {
   //private PrintStream leechErr;
 
   protected Editor editor;
-  protected Sketch sketch;
-  protected String appletClassName;
+  private Sketch sketch;
+  private String appletClassName;
 
 
   public Runner(RunnerListener listener) {

File: app/src/processing/app/tools/android/Android.java
Patch:
@@ -600,8 +600,8 @@ boolean debugSketch(String device, String prevPort) {
 
       System.out.println("launching vm");
       AndroidRunner ar = new AndroidRunner(editor);
-      ar.launch("29892");
-      System.out.println("vm launched");
+      return ar.launch("29892");
+      //System.out.println("vm launched");
 
     } catch (IOException e) {
       editor.statusError(e);

File: app/src/processing/app/Base.java
Patch:
@@ -29,8 +29,6 @@
 
 import javax.swing.*;
 
-import com.sun.codemodel.internal.JOp;
-
 import processing.app.debug.Compiler;
 import processing.core.*;
 

File: app/src/processing/app/debug/Runner.java
Patch:
@@ -377,7 +377,7 @@ private static String addArgument(String string, String argument, char sep) {
    * start threads to forward remote error and output streams,
    * resume the remote VM, wait for the final event, and shutdown.
    */
-  void generateTrace(PrintWriter writer) {
+  protected void generateTrace(PrintWriter writer) {
     vm.setDebugTraceMode(debugTraceMode);
 
     EventThread eventThread = null;
@@ -441,7 +441,7 @@ void generateTrace(PrintWriter writer) {
   /**
    * Find a com.sun.jdi.CommandLineLaunch connector
    */
-  LaunchingConnector findLaunchingConnector(String connectorName) {
+  protected LaunchingConnector findLaunchingConnector(String connectorName) {
     //VirtualMachineManager mgr = Bootstrap.virtualMachineManager();
 
     // Get the default connector.

File: app/src/processing/app/Commander.java
Patch:
@@ -203,9 +203,8 @@ public Commander(String[] args) {
           String className = sketch.build(outputPath);
           if (className != null) {
             success = true;
-            Runner runner =
-              new Runner(sketch, className, mode == PRESENT, this);
-            runner.launch();
+            Runner runner = new Runner(this);
+            runner.launch(sketch, className, mode == PRESENT);
 
           } else {
             success = false;

File: app/src/processing/app/debug/EventThread.java
Patch:
@@ -65,7 +65,8 @@ public class EventThread extends Thread {
   // Maps ThreadReference to ThreadTrace instances
   private Map traceMap = new HashMap();
 
-  EventThread(Runner parent, VirtualMachine vm, String[] excludes, PrintWriter writer) {
+  
+  public EventThread(Runner parent, VirtualMachine vm, String[] excludes, PrintWriter writer) {
     super("event-handler");
     this.parent = parent;
     this.vm = vm;
@@ -103,7 +104,7 @@ public void run() {
    * @param excludes     Class patterns for which we don't want events
    * @param watchFields  Do we want to watch assignments to fields
    */
-  void setEventRequests(boolean watchFields) {
+  public void setEventRequests(boolean watchFields) {
     EventRequestManager mgr = vm.eventRequestManager();
 
 //    VMDeathRequest deathReq = mgr.createVMDeathRequest();

File: app/src/processing/app/Editor.java
Patch:
@@ -1753,6 +1753,7 @@ protected boolean checkModified(boolean immediately) {
 
       } else if (result == JOptionPane.CANCEL_OPTION) {
         return false;
+
       } else {
         throw new IllegalStateException();
       }

File: app/src/processing/app/macosx/Platform.java
Patch:
@@ -48,6 +48,7 @@ public void setLookAndFeel() throws Exception {
 
 
   public void init(Base base) {
+    System.setProperty("apple.laf.useScreenMenuBar", "true");
     ThinkDifferent.init(base);
     /*
     try {

File: app/src/processing/app/Sketch.java
Patch:
@@ -387,7 +387,7 @@ protected void nameCode(String newName) {
     // Make sure no .pde *and* no .java files with the same name already exist
     // http://dev.processing.org/bugs/show_bug.cgi?id=543
     for (SketchCode c : code) {
-      if (sanitaryName.equals(c.getPrettyName())) {
+      if (sanitaryName.equalsIgnoreCase(c.getPrettyName())) {
         Base.showMessage("Nope",
                          "A file named \"" + c.getFileName() + "\" already exists\n" +
                          "in \"" + folder.getAbsolutePath() + "\"");
@@ -757,7 +757,7 @@ protected boolean saveAs() throws IOException {
     // but ignore this situation for the first tab, since it's probably being
     // resaved (with the same name) to another location/folder.
     for (int i = 1; i < codeCount; i++) {
-      if (newName.equals(code[i].getPrettyName())) {
+      if (newName.equalsIgnoreCase(code[i].getPrettyName())) {
         Base.showMessage("Nope",
                          "You can't save the sketch as \"" + newName + "\"\n" +
                          "because the sketch already has a tab with that name.");

File: app/src/processing/app/Base.java
Patch:
@@ -751,7 +751,8 @@ protected Editor handleOpen(String path, int[] location) {
    */
   public boolean handleClose(Editor editor) {
     // Check if modified
-    if (!editor.checkModified(false)) {
+    boolean immediate = editors.size() == 1;
+    if (!editor.checkModified(immediate)) {
       return false;
     }
 

File: core/src/processing/core/PImage.java
Patch:
@@ -691,7 +691,7 @@ public void filter(int kind) {
         throw new RuntimeException("Use filter(POSTERIZE, int levels) " +
         "instead of filter(POSTERIZE)");
 
-      case RGB:
+      case OPAQUE:
         for (int i = 0; i < pixels.length; i++) {
           pixels[i] |= 0xff000000;
         }

File: app/src/processing/app/preproc/PdePreprocessor.java
Patch:
@@ -441,7 +441,7 @@ void writeDeclaration(PrintStream out, String className) {
 
     } else if (programType == STATIC) {
       out.println("public class " + className + " extends PApplet {");
-      out.print(indent + "public void setup() {");
+      out.println(indent + "public void setup() {");
     }
   }
 

File: app/src/processing/app/PresentMode.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005-06 Ben Fry and Casey Reas
+  Copyright (c) 2005-09 Ben Fry and Casey Reas
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
@@ -59,7 +59,7 @@ public class PresentMode {
     devices = environment.getScreenDevices();
     GraphicsDevice defaultDevice = environment.getDefaultScreenDevice();
 
-    Vector names = new Vector();
+    Vector<String> names = new Vector<String>();
     for (int i = 0; i < devices.length; i++) {
       String name = String.valueOf(i + 1);
       if (devices[i] == defaultDevice) {

File: core/src/processing/core/PGraphics3D.java
Patch:
@@ -608,7 +608,7 @@ public void endShape(int mode) {
       endShapeStroke(mode);
     }
 
-    if (fill) {
+    if (fill || textureImage != null) {
       endShapeFill();
     }
 
@@ -622,7 +622,7 @@ public void endShape(int mode) {
     // render shape and fill here if not saving the shapes for later
     // if true, the shapes will be rendered on endDraw
     if (!hints[ENABLE_DEPTH_SORT]) {
-      if (fill) {
+      if (fill || textureImage != null) {
         if (triangleCount > 0) {
           renderTriangles(0, triangleCount);
           if (raw != null) {

File: core/src/processing/core/PPolygon.java
Patch:
@@ -419,7 +419,7 @@ private void scanline(int y, float l[], float r[]) {
     int tr, tg, tb, ta;
 
 //    System.out.println("P2D interp uv " + interpUV + " " + 
-//                       vertices[2][U] + " " + vertices[2][V]);    
+//                       vertices[2][U] + " " + vertices[2][V]);
     for (int x = lx; x <= rx; x++) {
       // map texture based on U, V coords in sp[U] and sp[V]
       if (interpUV) {

File: core/src/processing/core/PGraphics2D.java
Patch:
@@ -1698,7 +1698,7 @@ private void thick_flat_line(float ox1, float oy1,
       float len = (float) Math.sqrt(dX*dX + dY*dY);
 
       // TODO stroke width should be transformed!
-      float rh = strokeWeight / len;
+      float rh = (strokeWeight / len) / 2;
 
       float dx0 = rh * dY;
       float dy0 = rh * dX;

File: core/src/processing/core/PImage.java
Patch:
@@ -203,7 +203,7 @@ public PImage(java.awt.Image img) {
   public java.awt.Image getImage() {
     loadPixels();
     int type = (format == RGB) ?
-      BufferedImage.TYPE_INT_ARGB : BufferedImage.TYPE_INT_RGB;
+      BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;
     BufferedImage image = new BufferedImage(width, height, type);
     WritableRaster wr = image.getRaster();
     wr.setDataElements(0, 0, width, height, pixels);

File: core/src/processing/core/PApplet.java
Patch:
@@ -7345,7 +7345,7 @@ public void text(String str, float x, float y, float z) {
   }
 
 
-  public void text(char[] chars, int start, int stop,
+  public void text(char[] chars, int start, int stop, 
                    float x, float y, float z) {
     if (recorder != null) recorder.text(chars, start, stop, x, y, z);
     g.text(chars, start, stop, x, y, z);

File: app/src/processing/app/Base.java
Patch:
@@ -767,7 +767,6 @@ protected Editor handleOpen(String path, int[] location) {
   /**
    * Close a sketch as specified by its editor window.
    * @param editor Editor object of the sketch to be closed.
-   * @param quitting True if this is being called by File &rarr; Quit.
    * @return true if succeeded in closing, false if canceled.
    */
   public boolean handleClose(Editor editor) {

File: core/src/processing/core/PGraphics3D.java
Patch:
@@ -2339,7 +2339,6 @@ protected void rawTriangles(int start, int stop) {
     raw.noStroke();
     raw.beginShape(TRIANGLES);
 
-    //for (int i = 0; i < triangleCount; i ++) {
     for (int i = start; i < stop; i++) {
       float a[] = vertices[triangles[i][VERTEX1]];
       float b[] = vertices[triangles[i][VERTEX2]];
@@ -2385,7 +2384,7 @@ protected void rawTriangles(int start, int stop) {
             raw.fill(cr, cg, cb, c[A]);
             raw.vertex(c[VX] / c[VW], c[VY] / c[VW], c[VZ] / c[VW]);
           }
-        } else if (raw.is2D()){
+        } else if (raw.is2D()) {
           raw.fill(ar, ag, ab, a[A]);
           raw.vertex(a[TX], a[TY]);
           raw.fill(br, bg, bb, b[A]);

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -744,7 +744,6 @@ protected void renderTriangles(int start, int stop) {
         gl.glEnd();
       }
     }
-    triangleCount = 0;
     report("render_triangles out");
   }
 

File: app/src/processing/app/Base.java
Patch:
@@ -803,7 +803,8 @@ public boolean handleClose(Editor editor) {
                                                   null,
                                                   options,
                                                   options[0]);
-        if (result == JOptionPane.NO_OPTION) {
+        if (result == JOptionPane.NO_OPTION || 
+            result == JOptionPane.CLOSED_OPTION) {
           return false;
         }
       }

File: app/src/processing/app/Sketch.java
Patch:
@@ -1411,7 +1411,9 @@ public String preprocess(String buildPath) throws RunnerException {
     importedLibraries = new ArrayList<File>();
     for (String item : preprocessor.getExtraImports()) {
       // remove things up to the last dot
-      String entry = item.substring(0, item.lastIndexOf('.'));
+      int dot = item.lastIndexOf('.');
+      // http://dev.processing.org/bugs/show_bug.cgi?id=1145
+      String entry = (dot == -1) ? item : item.substring(0, dot);
       File libFolder = (File) Base.importToLibraryTable.get(entry);
 
       if (libFolder != null) {

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -1731,7 +1731,7 @@ public PImage get() {
 
   public void set(int x, int y, int argb) {
     if ((x < 0) || (y < 0) || (x >= width) || (y >= height)) return;
-    //((BufferedImage) image).setRGB(x, y, argb);
+//    ((BufferedImage) image).setRGB(x, y, argb);
     getset[0] = argb;
     WritableRaster raster = ((BufferedImage) image).getRaster();
     raster.setDataElements(x, y, getset);

File: app/src/processing/app/Base.java
Patch:
@@ -42,7 +42,7 @@
  */
 public class Base {
   static final int REVISION = 164;
-  static String VERSION_NAME = "0165";
+  static String VERSION_NAME = "0164";
 
   static HashMap<Integer, String> platformNames = new HashMap();
   static {

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1976,6 +1976,7 @@ protected void fillFromCalc() {
 
 
   protected void ambientFromCalc() {
+    super.ambientFromCalc();
     calcColorBuffer();
     gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT, colorBuffer, 0);
   }
@@ -2003,6 +2004,7 @@ protected void ambientFromCalc() {
 
 
   protected void specularFromCalc() {
+    super.specularFromCalc();
     calcColorBuffer();
     gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_SPECULAR, colorBuffer, 0);
   }
@@ -2036,6 +2038,7 @@ public void shininess(float shine) {
 
 
   protected void emissiveFromCalc() {
+    super.emissiveFromCalc();
     calcColorBuffer();
     gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_EMISSION, colorBuffer, 0);
   }

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -32,6 +32,7 @@
 
 import javax.media.opengl.*;
 import javax.media.opengl.glu.*;
+
 import com.sun.opengl.util.*;
 
 
@@ -560,18 +561,18 @@ protected void endShapeLighting(boolean lights) {
 
 
   protected void renderPoints(int start, int stop) {
-    gl.glBegin(GL.GL_POINTS);
     float sw = vertices[lines[start][VERTEX1]][SW];
     if (sw > 0) {
       gl.glPointSize(sw);  // can only be set outside glBegin/glEnd
+      gl.glBegin(GL.GL_POINTS);
       for (int i = start; i < stop; i++) {
         float[] a = vertices[points[i][VERTEX1]];
 
         gl.glColor4f(a[SR], a[SG], a[SB], a[SA]);
         gl.glVertex3f(a[VX], a[VY], a[VZ]);
       }
+      gl.glEnd();
     }
-    gl.glEnd();
   }
 
 

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -786,6 +786,9 @@ public void noSmooth() {
   protected void imageImpl(PImage who,
                            float x1, float y1, float x2, float y2,
                            int u1, int v1, int u2, int v2) {
+    // Image not ready yet, or an error
+    if (who.width <= 0 || who.height <= 0) return;
+    
     if (who.getCache(this) == null) {
       //System.out.println("making new image cache");
       who.setCache(this, new ImageCache(who));

File: app/src/processing/app/Base.java
Patch:
@@ -102,7 +102,7 @@ public class Base {
 
   static public void main(String args[]) {
     try {
-      File versionFile = getContentFile("version.txt");
+      File versionFile = getContentFile("lib/version.txt");
       if (versionFile.exists()) {
         VERSION_NAME = PApplet.loadStrings(versionFile)[0];
       }
@@ -1754,8 +1754,7 @@ static public Image getLibImage(String name, Component who) {
   /**
    * Return an InputStream for a file inside the Processing lib folder.
    */
-  static public InputStream getStream(String filename) throws IOException {
-    //return new FileInputStream(getLibContentsPath(filename));
+  static public InputStream getLibStream(String filename) throws IOException {
     return new FileInputStream(new File(getContentFile("lib"), filename));
   }
 

File: app/src/processing/app/Preferences.java
Patch:
@@ -154,7 +154,7 @@ static protected void init(String commandLinePrefs) {
     // start by loading the defaults, in case something
     // important was deleted from the user prefs
     try {
-      load(Base.getStream("preferences.txt"));
+      load(Base.getLibStream("preferences.txt"));
     } catch (Exception e) {
       Base.showError(null, "Could not read default settings.\n" +
                            "You'll need to reinstall Processing.", e);

File: app/src/processing/app/Sketch.java
Patch:
@@ -1804,9 +1804,9 @@ public boolean exportApplet(String appletPath) throws RunnerException, IOExcepti
     }
     if (is == null) {
       if (renderer.equals("OPENGL")) {
-        is = Base.getStream("export/applet-opengl.html");
+        is = Base.getLibStream("export/applet-opengl.html");
       } else {
-        is = Base.getStream("export/applet.html");
+        is = Base.getLibStream("export/applet.html");
       }
     }
     BufferedReader reader = PApplet.createReader(is);

File: app/src/processing/app/Theme.java
Patch:
@@ -46,7 +46,7 @@ public class Theme {
 
   static protected void init() {
     try {
-      load(Base.getStream("theme/theme.txt"));
+      load(Base.getLibStream("theme/theme.txt"));
     } catch (Exception te) {
       Base.showError(null, "Could not read color theme settings.\n" +
                            "You'll need to reinstall Processing.", te);

File: app/src/processing/app/syntax/PdeKeywords.java
Patch:
@@ -59,7 +59,7 @@ static public KeywordMap getKeywords() {
         keywordColoring = new KeywordMap(false);
         keywordToReference = new Hashtable();
 
-        InputStream input = Base.getStream("keywords.txt");
+        InputStream input = Base.getLibStream("keywords.txt");
         InputStreamReader isr = new InputStreamReader(input);
         BufferedReader reader = new BufferedReader(isr);
 

File: app/src/processing/app/preproc/PdePreprocessor.java
Patch:
@@ -240,7 +240,8 @@ public int writePrefix(String program, String buildPath,
     String prefsLine = Preferences.get("preproc.imports");
     defaultImports = PApplet.splitTokens(prefsLine, ", ");
 
-    String importRegexp = "(?:^|\\s|;)(import\\s+)(\\S+)(\\s*;)";
+    //String importRegexp = "(?:^|\\s|;)(import\\s+)(\\S+)(\\s*;)";
+    String importRegexp = "(?:^|;)\\s*(import\\s+)(\\S+)(\\s*;)";
     programImports = new ArrayList<String>();
 
     do {

File: core/src/processing/core/PSmoothTriangle.java
Patch:
@@ -384,7 +384,7 @@ private void scanline(int y, float l[], float r[]) {
       if (rx > parent.width1) rx = parent.width1;
     }
 
-//    System.out.println("P3D interp uv " + interpUV + " " + 
+//    System.out.println("P3D interp uv " + interpUV + " " +
 //                       vertices[2][U] + " " + vertices[2][V]);
 
     interpX = false;
@@ -394,8 +394,8 @@ private void scanline(int y, float l[], float r[]) {
 
       // added == because things on same plane weren't replacing each other
       // makes for strangeness in 3D [ewj: yup!], but totally necessary for 2D
-      if (noDepthTest || (sp[Z] < zbuffer[offset+x])) {
-        //if (noDepthTest || (sp[Z] <= zbuffer[offset+x])) {
+      //if (noDepthTest || (sp[Z] < zbuffer[offset+x])) {
+      if (noDepthTest || (sp[Z] <= zbuffer[offset+x])) {
         //if (true) {
 
         // map texture based on U, V coords in sp[U] and sp[V]

File: app/src/processing/app/Base.java
Patch:
@@ -182,8 +182,8 @@ static public void main(String args[]) {
             "p { font: 11pt \"Lucida Grande\"; margin-top: 8px }"+
             "</style> </head>" +
             "<b>The standard menu bar has been disabled.</b>" +
-            "<p>Due to an Apple bug, the Processing menu bar is " +
-            "unusable when run on Mac OS X 10.5 (Leopard). " +
+            "<p>Due to an Apple bug, the Processing menu bar " +
+            "is unusable on Mac OS X 10.5 (Leopard). " +
             "As a workaround, the menu bar will be placed inside " +
             "the editor window. This setting can be changed in the " +
             "Preferences window.</p>" +

File: app/src/processing/app/preproc/PdePreprocessor.java
Patch:
@@ -464,6 +464,9 @@ void writeFooter(PrintStream out, String className) {
         if (Preferences.getBoolean("export.application.fullscreen")) {
           out.print("\"--present\", ");
         }
+        if (!Preferences.getBoolean("export.application.stop")) {
+          out.print("\"--hide-stop\", ");
+        }
         out.println("\"" + className + "\" });");
         out.println(indent + "}");
       }

File: app/src/processing/app/Sketch.java
Patch:
@@ -2000,6 +2000,8 @@ public void itemStateChanged(ItemEvent e) {
     optionPanel.setAlignmentX(Component.LEFT_ALIGNMENT);
     optionPanel.setMaximumSize(goodIdea);
     panel.add(optionPanel);
+
+    //export.application.stop
    
 //    JPanel actionPanel = new JPanel();
 //    optionPanel.setLayout(new BoxLayout(optionPanel, BoxLayout.X_AXIS));

File: app/src/processing/app/syntax/PdeTextAreaDefaults.java
Patch:
@@ -169,7 +169,7 @@ public PdeTextAreaDefaults() {
     bgcolor = Theme.getColor("editor.bgcolor");
 
     caretVisible = true;
-    caretBlinks = Theme.getBoolean("editor.caret.blink");
+    caretBlinks = Preferences.getBoolean("editor.caret.blink");
     caretColor = Theme.getColor("editor.caret.color");
 
     selectionColor = Theme.getColor("editor.selection.color");

File: app/src/processing/app/Base.java
Patch:
@@ -1638,7 +1638,6 @@ static public Image getLibImage(String name, Component who) {
     Toolkit tk = Toolkit.getDefaultToolkit();
 
     File imageLocation = new File(getContentFile("lib"), name);
-    //image = tk.getImage(getLibContentsPath(name));
     image = tk.getImage(imageLocation.getAbsolutePath());
     MediaTracker tracker = new MediaTracker(who);
     tracker.addImage(image, 0);

File: app/src/processing/app/EditorHeader.java
Patch:
@@ -81,7 +81,7 @@ public EditorHeader(Editor eddie) {
       pieces = new Image[STATUS.length][WHERE.length];
       for (int i = 0; i < STATUS.length; i++) {
         for (int j = 0; j < WHERE.length; j++) {
-          String path = "theme/tab-" + STATUS[i] + "-" + WHERE[j] + ".gif";
+          String path = "tab-" + STATUS[i] + "-" + WHERE[j] + ".gif";
           pieces[i][j] = Base.getThemeImage(path, this);
         }
       }

File: app/src/processing/app/EditorHeader.java
Patch:
@@ -81,8 +81,8 @@ public EditorHeader(Editor eddie) {
       pieces = new Image[STATUS.length][WHERE.length];
       for (int i = 0; i < STATUS.length; i++) {
         for (int j = 0; j < WHERE.length; j++) {
-          pieces[i][j] = Base.getLibImage("tab-" + STATUS[i] + "-" +
-              WHERE[j] + ".gif", this);
+          String path = "theme/tab-" + STATUS[i] + "-" + WHERE[j] + ".gif";
+          pieces[i][j] = Base.getThemeImage(path, this);
         }
       }
     }

File: app/src/processing/app/EditorLineStatus.java
Patch:
@@ -55,7 +55,7 @@ public EditorLineStatus(JEditTextArea textarea) {
     high = Preferences.getInteger("linestatus.height");
 
     if (Base.isMacOS()) {
-      resize = Base.getLibImage("resize.gif", this);
+      resize = Base.getThemeImage("resize.gif", this);
     }
     //linestatus.bgcolor = #000000
     //linestatus.font    = SansSerif,plain,10

File: app/src/processing/app/EditorToolbar.java
Patch:
@@ -96,7 +96,7 @@ public EditorToolbar(Editor editor, JMenu menu) {  //JPopupMenu popup) {
     this.menu = menu;
     
     if (buttons == null) {
-      buttons = Base.getLibImage("buttons.gif", this);
+      buttons = Base.getThemeImage("buttons.gif", this);
     }
 
     buttonCount = 0;

File: core/src/processing/core/PApplet.java
Patch:
@@ -6268,7 +6268,7 @@ public void componentResized(ComponentEvent e) {
   /**
    * GIF image of the Processing logo.
    */
-  static final byte[] ICON_IMAGE = {
+  static public final byte[] ICON_IMAGE = {
     71, 73, 70, 56, 57, 97, 16, 0, 16, 0, -77, 0, 0, 0, 0, 0, -1, -1, -1, 12,
     12, 13, -15, -15, -14, 45, 57, 74, 54, 80, 111, 47, 71, 97, 62, 88, 117,
     1, 14, 27, 7, 41, 73, 15, 52, 85, 2, 31, 55, 4, 54, 94, 18, 69, 109, 37,

File: core/src/processing/core/PConstants.java
Patch:
@@ -133,7 +133,7 @@ public interface PConstants {
     "other", "windows", "macosx", "linux"
   };
 
-  
+
   static final float EPSILON = 0.0001f;
 
 

File: core/src/processing/core/PPolygon.java
Patch:
@@ -193,6 +193,7 @@ protected void renderPolygon(float[][] v, int count) {
 //      float[] vert = nextVertex();
 //      System.arraycopy()
 //    }
+    render();
   }
 
 
@@ -201,6 +202,7 @@ protected void renderTriangle(float[] v1, float[] v2, float[] v3) {
     vertices[0] = v1;
     vertices[1] = v2;
     vertices[2] = v3;
+    render();
   }
   
   

File: app/src/processing/app/Base.java
Patch:
@@ -1402,8 +1402,7 @@ static public void registerWindowCloseKeys(JRootPane root, //Window window,
   static public void showReference(String filename) {
     File referenceFolder = Base.getContentFile("reference");
     File referenceFile = new File(referenceFolder, filename);
-    //openURL(referenceFile.getAbsolutePath());
-    PApplet.open(referenceFile.getAbsolutePath());
+    openURL(referenceFile.getAbsolutePath());
   }
 
 

File: app/src/processing/app/Base.java
Patch:
@@ -1402,8 +1402,8 @@ static public void registerWindowCloseKeys(JRootPane root, //Window window,
   static public void showReference(String filename) {
     File referenceFolder = Base.getContentFile("reference");
     File referenceFile = new File(referenceFolder, filename);
-    openURL(referenceFile.getAbsolutePath());
-    //openURL(Base.getContentsPath("reference" + File.separator + referenceFile));
+    //openURL(referenceFile.getAbsolutePath());
+    PApplet.open(referenceFile.getAbsolutePath());
   }
 
 

File: core/src/processing/core/PShapeSVG.java
Patch:
@@ -56,7 +56,7 @@
  *
  * This code is based on the Candy library written by Michael Chang, which was
  * later revised and expanded for use as a Processing core library by Ben Fry.
- * Thanks to Ricard Marxer Pi��n for help with better Inkscape support in 0154.
+ * Thanks to Ricard Marxer Pinon for help with better Inkscape support in 0154.
  *
  * <p> <hr noshade> <p>
  *

File: app/src/processing/app/Sketch.java
Patch:
@@ -750,7 +750,7 @@ protected boolean saveAs() throws IOException {
     // make sure there doesn't exist a tab with that name already
     // but ignore this situation for the first tab, since it's probably being
     // resaved (with the same name) to another location/folder.
-    for (int i = 1; i < codeCount; i++) { 
+    for (int i = 1; i < codeCount; i++) {
       if (newName.equals(code[i].getPrettyName())) {
         Base.showMessage("Nope",
                          "You can't save the sketch as \"" + newName + "\"\n" +
@@ -1182,7 +1182,6 @@ protected String compile() throws RunnerException {
    * successful, re-export with purty set to true.
    *
    * @param buildPath Location to copy all the .java files
-   * @param purty true if output should use indents and newlines
    * @return null if compilation failed, main class name if not
    */
   public String preprocess(String buildPath) throws RunnerException {

File: video/src/processing/video/MovieMaker.java
Patch:
@@ -127,7 +127,9 @@ public class MovieMaker {
 
   private boolean readyForFrames;
 
-  private int TIME_SCALE = 1000;
+  // Changed from 1000 to 600 in release 0154 to enable exact 30 fps output.
+  // http://dev.processing.org/bugs/show_bug.cgi?id=988
+  private int TIME_SCALE = 600;
 
   // QT Stuff
   private VideoMedia videoMedia;

File: core/src/processing/core/PShapeSVG.java
Patch:
@@ -758,8 +758,7 @@ static protected PMatrix2D parseMatrix(String matrixStr) {
       System.err.println("Could not parse transform " + matrixStr);
       return null;
     }
-    float[] m = PApplet.parseFloat(PApplet.splitTokens(pieces[2]));
-
+    float[] m = PApplet.parseFloat(PApplet.splitTokens(pieces[2], ", "));
     if (pieces[1].equals("matrix")) {
       return new PMatrix2D(m[0], m[2], m[4], m[1], m[3], m[5]);
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -7348,7 +7348,7 @@ public void setMatrix(PMatrix source) {
   }
 
 
-  public void setMatrix(PMatrix2D source) {
+  public void setMatrix(PMatrix2D source) {  
     if (recorder != null) recorder.setMatrix(source);
     g.setMatrix(source);
   }
@@ -7424,8 +7424,8 @@ public void perspective(float fovy, float aspect, float zNear, float zFar) {
   }
 
 
-  public void frustum(float left, float right,
-                      float bottom, float top,
+  public void frustum(float left, float right, 
+                      float bottom, float top, 
                       float near, float far) {
     if (recorder != null) recorder.frustum(left, right, bottom, top, near, far);
     g.frustum(left, right, bottom, top, near, far);

File: app/src/processing/app/Sketch.java
Patch:
@@ -687,6 +687,7 @@ protected boolean saveAs() throws IOException {
     String newParentDir = null;
     String newName = null;
 
+    /*
     if (PApplet.platform == PConstants.LINUX) {
       JFileChooser fc = new JFileChooser();
       fc.setDialogTitle("Save sketch folder as...");
@@ -706,7 +707,7 @@ protected boolean saveAs() throws IOException {
         newName = selection.getName();
       }
 
-    } else {
+      } else {*/
       // get new name for folder
       FileDialog fd = new FileDialog(editor,
                                      "Save sketch folder as...",
@@ -723,7 +724,7 @@ protected boolean saveAs() throws IOException {
       fd.setVisible(true);
       newParentDir = fd.getDirectory();
       newName = fd.getFile();
-    }
+      //}
 
     // user cancelled selection
     if (newName == null) return false;

File: app/src/processing/app/Base.java
Patch:
@@ -173,6 +173,8 @@ static protected void initPlatform() {
         platformClass = Class.forName("processing.app.macosx.Platform");
       } else if (Base.isWindows()) {
         platformClass = Class.forName("processing.app.windows.Platform");
+      } else if (Base.isLinux()) {
+        platformClass = Class.forName("processing.app.linux.Platform");
       }
       platform = (Platform) platformClass.newInstance();
     } catch (Exception e) {

File: core/src/processing/core/PApplet.java
Patch:
@@ -1088,6 +1088,7 @@ protected PGraphics makeGraphics(int iwidth, int iheight,
     if (irenderer.equals("P2D")) {
       PGraphics.showWarning("The P2D renderer is currently disabled, " +
                             "please use P3D or JAVA2D.");
+      irenderer = P3D;
     }
 
     String openglError =

File: core/src/processing/core/PGraphics.java
Patch:
@@ -668,6 +668,8 @@ protected void checkSettings() {
   protected void defaultSettings() {  // ignore
 //    System.out.println("PGraphics.defaultSettings() " + width + " " + height);
 
+    noSmooth();  // 0149
+
     colorMode(RGB, 255);
     fill(255);
     stroke(0);

File: video/src/processing/video/MovieMaker.java
Patch:
@@ -267,6 +267,8 @@ private void initMovie(String filename) {
 
   // A simple add function to just add whatever is in the parent window
   public void addFrame() {
+    // http://dev.processing.org/bugs/show_bug.cgi?id=692
+    parent.flush();
     parent.loadPixels();
     addFrame(parent.pixels, parent.width, parent.height);
   }

File: app/src/processing/app/windows/Platform.java
Patch:
@@ -55,7 +55,7 @@ public void init(Base base) {
           "Processing is not set to handle .pde files.\n" +
           "Would you like to make it the default?";
         int result =
-          JOptionPane.showConfirmDialog(this, prompt, "Reassign .pde files",
+          JOptionPane.showConfirmDialog(null, prompt, "Reassign .pde files",
                                         JOptionPane.YES_NO_OPTION,
                                         JOptionPane.QUESTION_MESSAGE);
 
@@ -70,7 +70,7 @@ public void init(Base base) {
           "This version of Processing is not the default application\n" +
           "to open .pde files. Would you like to make it the default?";
         int result =
-          JOptionPane.showConfirmDialog(this, prompt, "Reassign .pde files",
+          JOptionPane.showConfirmDialog(null, prompt, "Reassign .pde files",
                                         JOptionPane.YES_NO_OPTION,
                                         JOptionPane.QUESTION_MESSAGE);
 

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1874,8 +1874,8 @@ public void combine(double[] coords, Object[] data,
   //////////////////////////////////////////////////////////////
   
   // STROKE CAP/JOIN/WEIGHT
-  
-  
+
+
   public void strokeWeight(float weight) {
     this.strokeWeight = weight;
   }

File: app/src/processing/app/preproc/PdePreprocessor.java
Patch:
@@ -388,8 +388,9 @@ protected void writeParseTree(String filename, AST ast) {
 
   int writeImports(PrintStream out) {
     out.println("import processing.core.*; ");
+    out.println("import processing.xml.*; ");
     out.println();
-    int count = 2;
+    int count = 3;
 
     if (programImports.size() != 0) {
       for (String item : programImports) {

File: core/src/processing/core/PShapeSVG.java
Patch:
@@ -1035,7 +1035,8 @@ protected void fillGradient(PGraphics g, String name, float x1, float y1, float
   // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
 
 
-	class Gradient extends PShapeSVG {
+
+	static class Gradient extends PShapeSVG {
 	  AffineTransform transform;
 
 	  float[] offset;
@@ -1334,7 +1335,7 @@ public Raster getRaster(int x, int y, int w, int h) {
 	  }
 	}
 
-	
+
 	protected Paint calcGradientPaint(Gradient gradient) {
 	  if (gradient instanceof LinearGradient) {
 	    LinearGradient grad = (LinearGradient) gradient;

File: candy/src/processing/candy/LinearGradient.java
Patch:
@@ -22,7 +22,8 @@ public LinearGradient(BaseObject parent, XMLElement properties) {
 			properties.getStringAttribute("gradientTransform");
 		
 		if (transformStr != null) {
-			this.transform = new AffineTransform(parseMatrix(transformStr));
+            float t[] = parseMatrix(transformStr).get(null);
+            this.transform = new AffineTransform(t[0], t[3], t[1], t[4], t[2], t[5]);
 
 			Point2D t1 = transform.transform(new Point2D.Float(x1, y1), null);
 			Point2D t2 = transform.transform(new Point2D.Float(x2, y2), null);

File: candy/src/processing/candy/RadialGradient.java
Patch:
@@ -21,7 +21,8 @@ public RadialGradient(BaseObject parent, XMLElement properties) {
 			properties.getStringAttribute("gradientTransform");
 		
 		if (transformStr != null) {
-			this.transform = new AffineTransform(parseMatrix(transformStr));
+		    float t[] = parseMatrix(transformStr).get(null);
+			this.transform = new AffineTransform(t[0], t[3], t[1], t[4], t[2], t[5]);
 
 			Point2D t1 = transform.transform(new Point2D.Float(cx, cy), null);
 			Point2D t2 = transform.transform(new Point2D.Float(cx + r, cy), null);

File: candy/src/processing/candy/SVG.java
Patch:
@@ -179,8 +179,8 @@ public SVG(XMLElement svg) {
         } else {
             if ((width == 0) || (height == 0)) {
                 //throw new RuntimeException("width/height not specified");
-            	System.err.println("The width and/or height is not " +
-            			           "readable in the <svg> tag of this file.");
+            	PGraphics.showWarning("The width and/or height is not " +
+            			              "readable in the <svg> tag of this file.");
             	// For the spec, the default is 100% and 100%. For purposes 
             	// here, insert a dummy value because this is prolly just a 
             	// font or something for which the w/h doesn't matter.

File: core/src/processing/core/PGraphics.java
Patch:
@@ -5053,15 +5053,15 @@ static protected void showTextFontException(String method) {
    * A better name? showFrame, displayable, isVisible, visible, shouldDisplay, 
    * what to call this?
    */
-  public boolean displayable() {  // ignore
+  public boolean displayable() {
     return true;
   }
 
 
   /**
    * Return true if this renderer supports 3D drawing. Defaults to false.
    */
-  public boolean dimensional() {  // ignore
+  public boolean dimensional() {
     return false;
   }
 }

File: core/src/processing/core/PStyle.java
Patch:
@@ -24,9 +24,7 @@
 package processing.core;
 
 
-public class PStyle {
-  public boolean smooth;
-
+public class PStyle implements PConstants {
   public int imageMode;
   public int rectMode;
   public int ellipseMode;

File: app/src/processing/app/tools/AutoFormat.java
Patch:
@@ -435,7 +435,8 @@ public int lookup_com (String keyword)
   public void show() {
     StringBuffer onechar;
 
-    String originalText = editor.getText();
+    // Adding an additional newline as a hack around other errors
+    String originalText = editor.getText() + "\n";
     strOut = new StringBuffer();
     indentValue = Preferences.getInteger("editor.tabs.size");
     indentChar = new String(" ");

File: candy/src/processing/candy/BaseObject.java
Patch:
@@ -541,6 +541,9 @@ protected void parseChildren(XMLElement graphics) {
 		for (XMLElement elem : elements) {
 			PShape kid = parseChild(elem);
 			if (kid != null) {
+//				System.out.println("adding child " + 
+//						kid.getClass().getName() + 
+//						" to " + getClass().getName());
 				addChild(kid);
 			}
 		}

File: core/src/processing/core/PGraphics.java
Patch:
@@ -85,9 +85,9 @@ public abstract class PGraphics extends PImage implements PConstants {
   static public final int DA = 6;
 
   //specular (by default kept white)
-  static public final int SPR = 27;
-  static public final int SPG = 28;
-  static public final int SPB = 29;
+  static public final int SPR = 28;
+  static public final int SPG = 29;
+  static public final int SPB = 30;
   //GL doesn't use a separate specular alpha, but we do (we're better)
   //static public final int SPA = 30;
 

File: app/src/processing/app/Sketch.java
Patch:
@@ -118,7 +118,7 @@ public Sketch(Editor editor, String path) throws IOException {
     //Base.addBuildFolderToClassPath();
 
     folder = new File(new File(path).getParent());
-    System.out.println("sketch dir is " + folder);
+    //System.out.println("sketch dir is " + folder);
 
     load();
   }

File: core/src/processing/core/PConstants.java
Patch:
@@ -50,10 +50,10 @@ public interface PConstants {
 
   // platform IDs for PApplet.platform
 
-  static final int WINDOWS = 1;
-  static final int MACOSX  = 3;
-  static final int LINUX   = 4;
   static final int OTHER   = 0;
+  static final int WINDOWS = 1;
+  static final int MACOSX  = 2;
+  static final int LINUX   = 3;
 
 
   // for better parity between c++ version (at no speed cost)

File: app/src/processing/app/debug/Runner.java
Patch:
@@ -621,7 +621,7 @@ protected void reportException(String message, ThreadReference thread) {
 //      System.out.println("reporting ex");
       List<StackFrame> frames = thread.frames();
       for (StackFrame frame : frames) {
-      System.out.println("frame: " + frame);
+        //System.out.println("frame: " + frame);
         Location location = frame.location();
         String filename = null;
         try {

File: app/src/processing/app/EditorHeader.java
Patch:
@@ -226,6 +226,7 @@ public void rebuild() {
     //System.out.println("rebuilding editor header");
     rebuildMenu();
     repaint();
+    Toolkit.getDefaultToolkit().sync();
   }
 
 

File: app/src/processing/app/Editor.java
Patch:
@@ -664,7 +664,6 @@ public boolean accept(File dir, String name) {
           className = findClassInZipFile(folders[i].getName(), archives[j]);
           if (className != null) break;
         }
-        if (className == null) return;
         
         /*
         // Alternatively, could use manifest files with special attributes:

File: dxf/src/processing/dxf/RawDXF.java
Patch:
@@ -57,7 +57,7 @@
  *
  * void draw() {
  *   if (record) {
- *     beginRaw(DXF, "output.dxf");
+ *     beginRaw(width, height, DXF, "output.dxf");
  *   }
  *
  *   // do all your drawing here
@@ -86,7 +86,7 @@
  *
  * void draw() {
  *   if (record) {
- *     dxf = (RawDXF) createGraphics(DXF, "output.dxf");
+ *     dxf = (RawDXF) createGraphics(width, height, DXF, "output.dxf");
  *     beginRaw(dxf);
  *   }
  *

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -280,13 +280,12 @@ public void unhint(int which) {
 
   /**
    * Get the current context, for use by libraries that need to talk to it.
-   * @return 
    */
   public GLContext getContext() {
     return context;
   }
-  
-  
+
+
   /**
    * Make the OpenGL rendering context current for this thread.
    */

File: app/src/processing/app/debug/Compiler.java
Patch:
@@ -44,7 +44,7 @@ public Compiler() { }
    *
    * @param sketch Sketch object to be compiled.
    * @param buildPath Where the temporary files live and will be built from.
-   * @return
+   * @return true if successful.
    * @throws RunnerException Only if there's a problem. Only then.
    */
   public boolean compile(Sketch sketch,

File: app/src/processing/app/syntax/TokenMarker.java
Patch:
@@ -22,9 +22,6 @@
  * cached.
  *
  * @author Slava Pestov
- * @version $Id$
- *
- * @see org.gjt.sp.jedit.syntax.Token
  */
 public abstract class TokenMarker
 {

File: app/src/processing/app/Base.java
Patch:
@@ -504,7 +504,7 @@ public Editor handleOpen(String path, int[] location) {
 
     // Cycle through open windows to make sure that it's not already open.
     for (int i = 0; i < editorCount; i++) {
-      if (editors[i].sketch.path.equals(path)) {
+      if (editors[i].getSketch().getMainFilePath().equals(path)) {
         editors[i].toFront();
         return editors[i];
       }
@@ -874,7 +874,7 @@ public void actionPerformed(ActionEvent e) {
       // If a .jar file of the same prefix as the folder exists
       // inside the 'library' subfolder of the sketch
       if (entry.exists()) {
-        String sanityCheck = Sketch.sanitizedName(list[i]);
+        String sanityCheck = Sketch.sanitizeName(list[i]);
         if (!sanityCheck.equals(list[i])) {
           String mess =
             "The library \"" + list[i] + "\" cannot be used.\n" +

File: app/src/processing/app/EditorListener.java
Patch:
@@ -108,10 +108,10 @@ public boolean keyPressed(KeyEvent event) {
 
     if ((event.getModifiers() & CTRL_ALT) == CTRL_ALT) {
       if (code == KeyEvent.VK_LEFT) {
-        editor.sketch.prevCode();
+        editor.sketch.handlePrevCode();
         return true;
       } else if (code == KeyEvent.VK_RIGHT) {
-        editor.sketch.nextCode();
+        editor.sketch.handleNextCode();
         return true;
       }
     }
@@ -122,7 +122,7 @@ public boolean keyPressed(KeyEvent event) {
     }
 
     // TODO i don't like these accessors. clean em up later.
-    if (!editor.sketch.modified) {
+    if (!editor.getSketch().isModified()) {
       if ((code == KeyEvent.VK_BACK_SPACE) || (code == KeyEvent.VK_TAB) ||
           (code == KeyEvent.VK_ENTER) || ((c >= 32) && (c < 128))) {
         editor.sketch.setModified(true);

File: app/src/processing/app/debug/Compiler.java
Patch:
@@ -195,7 +195,8 @@ public void close() { }
           for (int i = 1; i < sketch.getCodeCount(); i++) {
             SketchCode code = sketch.getCode(i);
 
-            if (code.flavor == Sketch.PDE) {
+            //if (code.flavor == Sketch.PDE) {
+            if (code.isExtension("pde")) {
               if (code.preprocOffset <= dotJavaLineIndex) {
                 codeIndex = i;
                 //System.out.println("i'm thinkin file " + i);

File: app/src/processing/app/debug/Runner.java
Patch:
@@ -222,7 +222,7 @@ protected String[] getSketchParams() {
     params.add(PApplet.ARGS_DISPLAY + "=" +
                Preferences.get("run.display"));
     params.add(PApplet.ARGS_SKETCH_FOLDER + "=" +
-               sketch.folder.getAbsolutePath());
+               sketch.getFolder().getAbsolutePath());
 
     if (presenting) {
       params.add(PApplet.ARGS_PRESENT);

File: app/src/processing/app/tools/Archiver.java
Patch:
@@ -71,7 +71,7 @@ public void show() {
       return;
     }
 
-    File location = sketch.folder;
+    File location = sketch.getFolder();
     String name = location.getName();
     File parent = new File(location.getParent());
 

File: app/src/processing/app/tools/FixEncoding.java
Patch:
@@ -60,7 +60,7 @@ public void show() {
     try {
       for (int i = 0; i < sketch.getCodeCount(); i++) {
         SketchCode code = sketch.getCode(i);
-        code.program = loadWithLocalEncoding(code.file);
+        code.program = loadWithLocalEncoding(code.getFile());
         code.modified = true;  // yes, because we want them to save this
       }
       // Update the currently visible program with its code

File: app/src/processing/app/Sketch.java
Patch:
@@ -1026,7 +1026,7 @@ public void addFile() {
     boolean result = addFile(sourceFile);
 
     if (result) {
-      editor.message("One file added to the sketch.");
+      editor.statusNotice("One file added to the sketch.");
     }
   }
 

File: app/src/processing/app/tools/Archiver.java
Patch:
@@ -125,13 +125,13 @@ public void show() {
         zos.flush();
         zos.close();
 
-        editor.message("Created archive " + newbie.getName() + ".");
+        editor.statusNotice("Created archive " + newbie.getName() + ".");
 
       } catch (IOException e) {
         e.printStackTrace();
       }
     } else {
-      editor.message("Archive sketch canceled.");
+      editor.statusNotice("Archive sketch canceled.");
     }
   }
 

File: app/src/processing/app/tools/DiscourseFormat.java
Patch:
@@ -107,7 +107,7 @@ public void lostOwnership(Clipboard clipboard, Transferable contents) {
         }
       });
 
-    editor.message("Code formatted for processing.org/discourse " +
+    editor.statusNotice("Code formatted for processing.org/discourse " +
                    "has been copied to the clipboard.");
   }
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -622,7 +622,7 @@ public void init() {
    */
   public void start() {
     if (thread != null) return;
-    thread = new Thread(this, "Processing Animation Thread");
+    thread = new Thread(this, "Animation Thread");
     thread.start();
   }
 

File: core/src/processing/core/PImage.java
Patch:
@@ -268,7 +268,7 @@ public void updatePixels(int x1, int y1, int x2, int y2) {
   }
   
   
-  public void updatePixelsImpl(int x1, int y1, int x2, int y2) {
+  protected void updatePixelsImpl(int x1, int y1, int x2, int y2) {
     if (!modified) {
       mx1 = x1;
       mx2 = x2;

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -1025,7 +1025,7 @@ public final int getSelectionStop()
    * Returns the offset where the selection ends on the specified
    * line.
    */
-  public int getSelectionEnd(int line)
+  public int getSelectionStop(int line)
   {
     if(line == selectionEndLine)
       return selectionEnd;
@@ -1062,7 +1062,8 @@ public final void setSelectionEnd(int selectionEnd)
   {
     select(selectionStart,selectionEnd);
   }
-
+  
+  
   public final boolean isSelectionActive()
   {
     return(selectionStart != selectionEnd);

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -777,6 +777,7 @@ protected void render_triangles() {
     if (raw != null) {
       raw.endShape();
     }
+    triangleCount = 0;
     report("render_triangles out");
   }
 

File: core/src/processing/core/PGraphics3D.java
Patch:
@@ -233,6 +233,7 @@ public PGraphics3D(int iwidth, int iheight, PApplet parent) {
    * Note that this will nuke any cameraMode() settings.
    */
   public void resize(int iwidth, int iheight) {  // ignore
+//    System.out.println("PGraphics3D.resize() " + iwidth + " " + iheight);
 //    insideDrawWait();
 //    insideResize = true;
 
@@ -242,6 +243,7 @@ public void resize(int iwidth, int iheight) {  // ignore
     height1 = height - 1;
 
     allocate();
+    reapplySettings();
 
     // clear the screen with the old background color
     //background(backgroundColor);
@@ -333,7 +335,7 @@ protected void allocate() {
     triangle = new PTriangle(this);
 
     // can't un-set this because this may be only a resize (Bug #463)
-    settingsInited = false;
+    //settingsInited = false;
     //System.out.println(this + " done allocating");
   }
 

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -134,7 +134,7 @@ public void resize(int iwidth, int iheight) {  // ignore
 
   // broken out because of subclassing for opengl
   protected void allocate() {
-    System.out.println("PGraphicsJava2D allocate()");
+//    System.out.println("PGraphicsJava2D allocate() " + width + " " + height);
 //    System.out.println("allocate " + Thread.currentThread().getName());
     image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
     g2 = (Graphics2D) image.getGraphics();

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -249,8 +249,8 @@ public void requestDisplay(PApplet applet) {
    */
   protected void allocate() {
     if (context == null) {
-      System.out.println("PGraphicsOpenGL.allocate() for " + width + " " + height);
-      new Exception().printStackTrace(System.out);
+//      System.out.println("PGraphicsOpenGL.allocate() for " + width + " " + height);
+//      new Exception().printStackTrace(System.out);
       // If OpenGL 2X or 4X smoothing is enabled, setup caps object for them
       GLCapabilities capabilities = new GLCapabilities();
       if (hints[ENABLE_OPENGL_2X_SMOOTH]) {
@@ -306,7 +306,7 @@ public void reshape(GLAutoDrawable drawable,
       gl = context.getGL();
       // Flag defaults to be reset on the next trip into beginDraw().
       settingsInited = false;
-      System.out.println("allocated.");
+//      System.out.println("allocated.");
 
     } else {
       // changing for 0100, need to resize rather than re-allocate

File: app/src/processing/app/EditorListener.java
Patch:
@@ -368,7 +368,7 @@ public boolean keyPressed(KeyEvent event) {
         if (spaceCount < 0) {
           // for rev 0122, actually delete extra space
           //textarea.setSelectionStart(origIndex + 1);
-          textarea.setSelectionEnd(textarea.getSelectionEnd() - spaceCount);
+          textarea.setSelectionEnd(textarea.getSelectionStop() - spaceCount);
           textarea.setSelectedText("\n");
         } else {
           String insertion = "\n" + Editor.EMPTY.substring(0, spaceCount);
@@ -403,7 +403,7 @@ public boolean keyPressed(KeyEvent event) {
         // first remove anything that was there (in case this multiple
         // characters are selected, so that it's not in the way of the
         // spaces for the auto-indent
-        if (textarea.getSelectionStart() != textarea.getSelectionEnd()) {
+        if (textarea.getSelectionStart() != textarea.getSelectionStop()) {
           textarea.setSelectedText("");
         }
 

File: app/src/processing/app/FindReplace.java
Patch:
@@ -282,7 +282,7 @@ public void find(boolean wrap) {
     }
 
     //int selectionStart = editor.textarea.getSelectionStart();
-    int selectionEnd = editor.textarea.getSelectionEnd();
+    int selectionEnd = editor.textarea.getSelectionStop();
 
     int nextIndex = text.indexOf(search, selectionEnd);
     if (nextIndex == -1) {

File: app/src/processing/app/Sketch.java
Patch:
@@ -520,7 +520,7 @@ public void nameCode(String newName) {
         editor.handleOpenUnchecked(mainFilename,
                                    currentIndex,
                                    editor.textarea.getSelectionStart(),
-                                   editor.textarea.getSelectionEnd(),
+                                   editor.textarea.getSelectionStop(),
                                    editor.textarea.getScrollPosition());
 
         // get the changes into the sketchbook menu
@@ -974,7 +974,7 @@ public boolean saveAs() throws IOException {
     editor.handleOpenUnchecked(newFile.getPath(),
                                currentIndex,
                                editor.textarea.getSelectionStart(),
-                               editor.textarea.getSelectionEnd(),
+                               editor.textarea.getSelectionStop(),
                                editor.textarea.getScrollPosition());
 
     // Name changed, rebuild the sketch menus
@@ -1197,7 +1197,7 @@ public void setCurrent(int which) {
     if (current != null) {
       current.program = editor.getText();
       current.selectionStart = editor.textarea.getSelectionStart();
-      current.selectionStop = editor.textarea.getSelectionEnd();
+      current.selectionStop = editor.textarea.getSelectionStop();
       current.scrollPosition = editor.textarea.getScrollPosition();
     }
 

File: app/src/processing/app/tools/AutoFormat.java
Patch:
@@ -900,7 +900,7 @@ else if(tabs > 0)
       */
 
       // save current (rough) selection point
-      int selectionEnd = editor.textarea.getSelectionEnd();
+      int selectionEnd = editor.textarea.getSelectionStop();
 
       // make sure the caret would be past the end of the text
       if (strOut.length() < selectionEnd - 1) {

File: core/src/processing/core/PGraphics.java
Patch:
@@ -2712,7 +2712,8 @@ public void text(String str, float x1, float y1, float x2, float y2) {
     int lineStart = 0;
     int index = 0;
     while (index < length) {
-      if ((textBuffer[index] == ' ') || (index == length-1)) {
+      if ((textBuffer[index] == ' ') ||
+          (index == length-1)) {
         // boundary of a word
         float wordWidth = textWidthImpl(textBuffer, wordStart, index);
 
@@ -2751,9 +2752,8 @@ public void text(String str, float x1, float y1, float x2, float y2) {
           lineStart = index;
           wordStart = index;
           wordStop = index;
-          runningX = x1; //boxX1;
+          runningX = x1;
           currentY += textLeading;
-          //if (currentY > boxY2) return;  // box is now full
           if (currentY > y2) return;  // box is now full
 
         } else {

File: core/src/processing/core/PImage.java
Patch:
@@ -170,6 +170,7 @@ protected void checkAlpha() {
   public PImage(java.awt.Image img) {
     width = img.getWidth(null);
     height = img.getHeight(null);
+    //System.out.println(width + " " + height + " " + img.getClass().getName());
 
     pixels = new int[width*height];
     PixelGrabber pg =
@@ -1309,14 +1310,14 @@ public Object clone() throws CloneNotSupportedException {  // ignore
    * Use 0 for wide or high to make that dimension scale proportionally.
    */
   public void resize(int wide, int high) {  // ignore
-    // Make sure that the pixels[] array is valid 
+    // Make sure that the pixels[] array is valid
     loadPixels();
 
     if (wide <= 0 && high <= 0) {
       width = 0;  // Gimme a break, don't waste my time
       height = 0;
       pixels = new int[0];
-      
+
     } else {
       if (wide == 0) {  // Use height to determine relative size
         float diff = (float) high / (float) height;

File: app/src/processing/app/EditorConsole.java
Patch:
@@ -255,7 +255,7 @@ synchronized public void message(String what, boolean err, boolean advance) {
       }
     }
 
-    // to console display
+    // to console display    
     appendText(what, err);
     // moved down here since something is punting
   }

File: app/src/processing/app/debug/RunnerException.java
Patch:
@@ -28,7 +28,7 @@
  * An exception with a line number attached that occurs
  * during either compile time or run time.
  */
-public class RunnerException extends Exception {
+public class RunnerException extends RuntimeException {
   protected String message;
   protected int codeIndex;
   protected int codeLine;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1590,6 +1590,8 @@ protected void arcImpl(float x1, float y1, float w, float h,
       int increment = 1; // what's a good algorithm? stopLUT - startLUT;
       for (int i = startLUT; i < stopLUT; i += increment) {
         int ii = i % SINCOS_LENGTH;
+        // modulo won't make the value positive
+        if (ii < 0) ii += SINCOS_LENGTH;
         vertex(centerX + cosLUT[ii] * hr,
                centerY + sinLUT[ii] * vr);
       }
@@ -1615,6 +1617,7 @@ protected void arcImpl(float x1, float y1, float w, float h,
       int increment = 1; // what's a good algorithm? stopLUT - startLUT;
       for (int i = startLUT; i < stopLUT; i += increment) {
         int ii = i % SINCOS_LENGTH;
+        if (ii < 0) ii += SINCOS_LENGTH;
         vertex(centerX + cosLUT[ii] * hr,
                centerY + sinLUT[ii] * vr);
       }

File: app/src/processing/app/debug/Compiler.java
Patch:
@@ -102,7 +102,7 @@ public void close() { }
 
       BufferedReader reader =
         new BufferedReader(new StringReader(errorBuffer.toString()));
-      System.out.println(errorBuffer.toString());
+      //System.err.println(errorBuffer.toString());
 
       String line = null;
       while ((line = reader.readLine()) != null) {

File: app/src/processing/app/debug/Runner.java
Patch:
@@ -934,7 +934,7 @@ synchronized public void message(String s) {
     //if (newMessage && s.length() > 2) {
     if (newMessage) {
       exception = new RunnerException(s);  // type of java ex
-      exception.hideStackTrace = true;
+      exception.hideStackTrace();
       //System.out.println("setting ex type to " + s);
       newMessage = false;
       foundMessageSource = false;
@@ -1040,7 +1040,7 @@ synchronized public void message(String s) {
               exception =
                 new RunnerException(exception.getMessage(),
                                     codeIndex, lineNumber, -1);
-              exception.hideStackTrace = true;
+              exception.hideStackTrace();
               foundMessageSource = true;
             }
           }
@@ -1096,7 +1096,7 @@ synchronized public void message(String s) {
         // so if five lines have gone past, might as well signal
         messageLineCount = -100;
         exception = new RunnerException(exception.getMessage());
-        exception.hideStackTrace = true;
+        exception.hideStackTrace();
         editor.error(exception);
 
       } else {

File: app/src/processing/app/Sketch.java
Patch:
@@ -58,7 +58,7 @@ public class Sketch {
   /**
    * true if any of the files have been modified.
    */
-  boolean modified;
+  protected boolean modified;
 
   public String path;
 

File: app/src/processing/app/debug/Runner.java
Patch:
@@ -91,7 +91,7 @@ public class Runner implements MessageConsumer {
 
   public Runner(Editor editor, boolean presenting) throws RunnerException {
     this.editor = editor;
-    this.sketch = editor.sketch;
+    this.sketch = editor.getSketch();
     this.presenting = presenting;
     //EditorConsole.systemOut.println("clear");
     //System.out.println("clear");

File: app/src/processing/app/tools/AutoFormat.java
Patch:
@@ -928,7 +928,7 @@ else if(tabs > 0)
         // replace with new bootiful text
         // selectionEnd hopefully at least in the neighborhood
         editor.setText(formattedText, selectionEnd, selectionEnd);
-        editor.sketch.setModified(true);
+        editor.getSketch().setModified(true);
         // mark as finished
         editor.message("Auto Format finished.");
       }

File: app/src/processing/app/tools/CreateFont.java
Patch:
@@ -73,7 +73,7 @@ public class CreateFont extends JFrame {
   public CreateFont(Editor editor) {
     super("Create Font");
 
-    targetFolder = editor.sketch.dataFolder;
+    targetFolder = editor.getSketch().dataFolder;
 
     Container paine = getContentPane();
     paine.setLayout(new BorderLayout()); //10, 10));

File: app/src/processing/app/tools/DiscourseFormat.java
Patch:
@@ -1,4 +1,4 @@
-﻿/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: app/src/processing/app/tools/CreateFont.java
Patch:
@@ -153,6 +153,9 @@ public void paintComponent(Graphics g) {
           super.paintComponent(g2);
         }
       };
+    // Seems that in some instances, no default font is set
+    // http://dev.processing.org/bugs/show_bug.cgi?id=777
+    sample.setFont(new Font("Dialog", Font.PLAIN, 12));
 
     pain.add(sample);
 

File: app/src/processing/app/Base.java
Patch:
@@ -120,7 +120,8 @@ static public void main(String args[]) {
     } catch (Exception e) {
       System.err.println("Non-fatal error while setting the Look & Feel.");
       System.err.println("The error message follows, however Processing should run fine.");
-      e.printStackTrace();
+      System.err.println(e.getMessage());
+      //e.printStackTrace();
     }
 
     // Use native popups so they don't look so crappy on osx

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -130,7 +130,8 @@ public void resize(int iwidth, int iheight) {  // ignore
   protected void allocate() {
     image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
     g2 = (Graphics2D) image.getGraphics();
-    // can't un-set this because this may be only a resize (Bug #463)
+    // can't un-set this because this may be only a resize
+    // http://dev.processing.org/bugs/show_bug.cgi?id=463
     defaultsInited = false;
   }
 

File: app/src/processing/app/Sketch.java
Patch:
@@ -2555,9 +2555,9 @@ public void packClassPathIntoZipFile(String path,
                                        ZipOutputStream zos)
     throws IOException {
     String pieces[] = PApplet.split(path, File.pathSeparatorChar);
-    new Exception().printStackTrace();
-    PApplet.println(pieces);
-    PApplet.println();
+    //new Exception().printStackTrace();
+    //PApplet.println(pieces);
+    //PApplet.println();
 
     for (int i = 0; i < pieces.length; i++) {
       if (pieces[i].length() == 0) continue;

File: app/src/processing/app/Editor.java
Patch:
@@ -1130,8 +1130,6 @@ public void handleRun(boolean present) {
     for (int i = 0; i < 10; i++) System.out.println();
 
     // clear the console on each run, unless the user doesn't want to
-    //if (Base.getBoolean("console.auto_clear", true)) {
-    //if (Preferences.getBoolean("console.auto_clear", true)) {
     if (Preferences.getBoolean("console.auto_clear")) {
       console.clear();
     }

File: core/src/processing/core/PApplet.java
Patch:
@@ -5760,6 +5760,7 @@ static public String[] split(String what, String delim) {
    */
   static public String[] match(String what, String regexp) {
     Pattern p = Pattern.compile(regexp);
+    //Pattern p = Pattern.compile(regexp, Pattern.MULTILINE);
     Matcher m = p.matcher(what);
     if (m.find()) {
       int count = m.groupCount();

File: app/src/processing/app/Editor.java
Patch:
@@ -761,15 +761,15 @@ public void actionPerformed(ActionEvent e) {
     item = new JMenuItem("Frequently Asked Questions");
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          Base.openURL("http://processing.org/");
+          Base.openURL("http://processing.org/faq.html");
         }
       });
     menu.add(item);
 
     item = newJMenuItem("Visit Processing.org", '5');
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          Base.openURL("http://processing.org/faq.html");
+          Base.openURL("http://processing.org/");
         }
       });
     menu.add(item);

File: core/src/processing/core/PApplet.java
Patch:
@@ -2366,7 +2366,7 @@ public void link(String url, String frameTitle) {
   /**
    * Attempt to open a file using the platform's shell.
    */
-  public void open(String filename) {
+  static public void open(String filename) {
     open(new String[] { filename });
   }
 

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -1211,6 +1211,7 @@ public void clear() {
 
 
   public void smooth() {
+    smooth = true;
     g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                         RenderingHints.VALUE_ANTIALIAS_ON);
     g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
@@ -1219,6 +1220,7 @@ public void smooth() {
 
 
   public void noSmooth() {
+    smooth = false;
     g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                         RenderingHints.VALUE_ANTIALIAS_OFF);
     g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,

File: xml/src/processing/xml/XMLElement.java
Patch:
@@ -1093,10 +1093,10 @@ public void setAttribute(String fullName,
                              String namespace,
                              String value) {
         int index = fullName.indexOf(':');
-        String name = fullName.substring(index + 1);
-        XMLAttribute attr = this.findAttribute(name, namespace);
+        String vorname = fullName.substring(index + 1);
+        XMLAttribute attr = this.findAttribute(vorname, namespace);
         if (attr == null) {
-            attr = new XMLAttribute(fullName, name, namespace, value, "CDATA");
+            attr = new XMLAttribute(fullName, vorname, namespace, value, "CDATA");
             this.attributes.addElement(attr);
         } else {
             attr.setValue(value);

File: xml/src/processing/xml/XMLUtil.java
Patch:
@@ -75,6 +75,8 @@ static void skipComment(StdXMLReader reader)
                if (dashesRead == 2) {
                   return;
                }
+               dashesRead = 0;
+               break;
 
             default:
                dashesRead = 0;

File: app/src/processing/app/debug/Runner.java
Patch:
@@ -193,6 +193,7 @@ protected String[] getVirtualMachineParams() {
 
     String outgoing[] = new String[params.size()];
     params.toArray(outgoing);
+    //PApplet.println(outgoing);
     return outgoing;
     //return (String[]) params.toArray();
 

File: app/src/processing/app/debug/MessageSiphon.java
Patch:
@@ -44,7 +44,7 @@ public MessageSiphon(InputStream stream, MessageConsumer consumer) {
     // bubble up in time (i.e. compile errors have a weird delay)
     //thread.setPriority(Thread.MIN_PRIORITY);
     thread.setPriority(Thread.MAX_PRIORITY-1);
-    thread.start();
+    //thread.start();
   }
 
 

File: app/src/processing/app/EditorConsole.java
Patch:
@@ -56,8 +56,8 @@ public class EditorConsole extends JScrollPane {
   static File outFile;
   static File tempFolder;
 
-  static PrintStream systemOut;
-  static PrintStream systemErr;
+  public PrintStream systemOut;
+  public PrintStream systemErr;
 
   static PrintStream consoleOut;
   static PrintStream consoleErr;

File: app/src/processing/app/Sketch.java
Patch:
@@ -1366,7 +1366,7 @@ protected String build(String buildPath, String suggestedClassName)
     //PApplet.println(PApplet.split(buildPath, ';'));
     //PApplet.println(PApplet.split(javaClassPath, ';'));
     classPath = buildPath +
-      File.pathSeparator + Base.librariesClassPath +
+      //File.pathSeparator + Base.librariesClassPath +
       File.pathSeparator + javaClassPath;
     //System.out.println("cp = " + classPath);
 

File: app/src/processing/app/debug/MessageSiphon.java
Patch:
@@ -43,7 +43,8 @@ public MessageSiphon(InputStream stream, MessageConsumer consumer) {
     // don't set priority too low, otherwise exceptions won't
     // bubble up in time (i.e. compile errors have a weird delay)
     //thread.setPriority(Thread.MIN_PRIORITY);
-    //thread.start();
+    thread.setPriority(Thread.MAX_PRIORITY-1);
+    thread.start();
   }
 
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -3841,6 +3841,8 @@ header[17] image descriptor (packed bits)
     int h = ((header[15] & 0xff) << 8) + (header[14] & 0xff);
     PImage outgoing = createImage(w, h, format);
 
+    // where "reversed" means upper-left corner (normal for most of
+    // the modernized world, but "reversed" for the tga spec)
     boolean reversed = (header[17] & 0x20) != 0;
 
     if ((header[2] == 2) || (header[2] == 3)) {  // not RLE encoded
@@ -3954,7 +3956,7 @@ header[17] image descriptor (packed bits)
         }
       }
 
-      if (reversed) {
+      if (!reversed) {
         int[] temp = new int[w];
         for (int y = 0; y < h/2; y++) {
           int z = (h-1) - y;

File: app/src/processing/app/Base.java
Patch:
@@ -34,6 +34,7 @@
 
 import com.ice.jni.registry.*;
 
+import processing.app.debug.Compiler;
 import processing.core.*;
 
 
@@ -64,7 +65,7 @@ public class Base {
   // classpath for all known libraries for p5
   // (both those in the p5/libs folder and those with lib subfolders
   // found in the sketchbook)
-  static String librariesClassPath;
+  static public String librariesClassPath;
 
   // Location for untitled items
   static File untitledFolder;

File: app/src/processing/app/EditorStatus.java
Patch:
@@ -243,7 +243,7 @@ protected void setup() {
         public void actionPerformed(ActionEvent e) {
           if (mode == EDIT) {
             unedit();
-            editor.toolbar.clear();
+            //editor.toolbar.clear();
           }
         }
       });
@@ -297,7 +297,7 @@ public void actionPerformed(ActionEvent e) {
           public void keyPressed(KeyEvent event) {
             if (event.getKeyChar() == KeyEvent.VK_ESCAPE) {
               unedit();
-              editor.toolbar.clear();
+              //editor.toolbar.clear();
               event.consume();
             }
           }
@@ -419,7 +419,7 @@ public Dimension getMaximumSize() {
   public void actionPerformed(ActionEvent e) {
     if (e.getSource() == cancelButton) {
       if (mode == EDIT) unedit();
-      editor.toolbar.clear();
+      //editor.toolbar.clear();
 
     } else if (e.getSource() == okButton) {
       // answering to rename/new code question

File: app/src/processing/app/RunnerException.java
Patch:
@@ -21,7 +21,7 @@
   Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 
-package processing.app;
+package processing.app.debug;
 
 /**
  * An exception with a line number attached that occurs

File: app/src/processing/app/SketchCode.java
Patch:
@@ -63,8 +63,8 @@ public class SketchCode {
   public boolean modified;
   //SketchHistory history;  // TODO add history information
 
-  String preprocName;  // name of .java file after preproc
-  int preprocOffset;  // where this code starts relative to the concat'd code
+  public String preprocName;  // name of .java file after preproc
+  public int preprocOffset;  // where this code starts relative to the concat'd code
 
 
   public SketchCode(String name, File file, int flavor) {

File: app/src/processing/app/preproc/PdeEmitter.java
Patch:
@@ -3,6 +3,7 @@
 package processing.app.preproc;
 
 import processing.app.*;
+import processing.app.debug.RunnerException;
 
 
 /* Based on original code copyright (c) 2003 Andy Tripp <atripp@comcast.net>.

File: app/src/processing/app/MessageConsumer.java
Patch:
@@ -21,7 +21,7 @@
   Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 
-package processing.app;
+package processing.app.debug;
 
 
 /**

File: app/src/processing/app/MessageSiphon.java
Patch:
@@ -21,7 +21,7 @@
   Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 
-package processing.app;
+package processing.app.debug;
 
 import java.io.*;
 
@@ -43,7 +43,7 @@ public MessageSiphon(InputStream stream, MessageConsumer consumer) {
     // don't set priority too low, otherwise exceptions won't
     // bubble up in time (i.e. compile errors have a weird delay)
     //thread.setPriority(Thread.MIN_PRIORITY);
-    thread.start();
+    //thread.start();
   }
 
 

File: app/src/processing/app/MessageStream.java
Patch:
@@ -21,7 +21,7 @@
   Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
 
-package processing.app;
+package processing.app.debug;
 
 import java.io.*;
 

File: core/src/processing/core/PImage.java
Patch:
@@ -331,7 +331,7 @@ public PImage get(int x, int y, int w, int h) {
       //x2 += x1; y2 += y1;
       // w/h are x2/y2 in this case, bring em down to size
       w = (w - x);
-      h = (h - x);
+      h = (h - y);
     }
 
     if (x < 0) {

File: core/src/processing/core/PApplet.java
Patch:
@@ -7061,7 +7061,7 @@ public void windowClosing(WindowEvent e) {
 
       //System.out.println("showing frame");
       //System.out.println("applet requesting focus");
-      //applet.requestFocus(); // ask for keydowns
+      applet.requestFocus(); // ask for keydowns
       //System.out.println("exiting main()");
 
     } catch (Exception e) {

File: core/src/processing/core/PGraphics.java
Patch:
@@ -4310,7 +4310,8 @@ public void beginRaw(PGraphics rawGraphics) {
   public void endRaw() {
     if (raw != null) {
       // for 3D, need to flush any geometry that's been stored for sorting
-      raw.flush();  // this should be called by endDraw() instead
+      // (particularly if the ENABLE_DEPTH_SORT hint is set) 
+      flush();
 
       // just like beginDraw, this will have to be called because
       // endDraw() will be happening outside of draw()

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -29,8 +29,7 @@
 
 
 /**
- * Subclass for PGraphics that implements the graphics API
- * in Java 1.3+ using Java 2D.
+ * Subclass for PGraphics that implements the graphics API using Java2D.
  *
  * <p>Pixel operations too slow? As of release 0085 (the first beta),
  * the default renderer uses Java2D. It's more accurate than the renderer

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -340,9 +340,9 @@ public void beginDraw() {
 
     // On the first frame that's guaranteed to be on screen,
     // and the component valid and all that, ask for focus.
-    //if (frameCount == 1) {
-    //  canvas.requestFocus();
-    //}
+    if (parent.frameCount == 1) {
+      canvas.requestFocus();
+    }
 
     report("top beginDraw()");
 

File: core/src/processing/core/PImage.java
Patch:
@@ -24,7 +24,7 @@
 
 package processing.core;
 
-import java.awt.Image;
+//import java.awt.Image;
 import java.awt.image.*;
 import java.io.*;
 import javax.imageio.ImageIO;

File: app/src/processing/app/Base.java
Patch:
@@ -506,6 +506,7 @@ public void handleNewReplace() {
     try {
       String path = createNewUntitled();
       activeEditor.handleOpenInternal(path);
+      activeEditor.untitled = true;
 
     } catch (IOException e) {
       if (activeEditor != null) {

File: app/src/processing/app/Editor.java
Patch:
@@ -1447,6 +1447,8 @@ protected void handleOpenInternal(String path) {
       }
       // Set the title of the window to "sketch_070752a - Processing 0126"
       setTitle(sketch.name + " | " + WINDOW_TITLE);
+      // Disable untitled setting from previous document, if any
+      untitled = false;
 
     } catch (Exception e) {
       error(e);

File: core/src/processing/core/PGraphics.java
Patch:
@@ -774,7 +774,7 @@ public void defaults() {  // ignore
     // is what's desired).
     // this background() call is for the Java 2D and OpenGL renderers.
     if (mainDrawingSurface) {
-      //System.out.println("main drawing surface " + getClass().getName());
+      //System.out.println("main drawing surface bg " + getClass().getName());
       background(backgroundColor);
     }
 

File: core/src/processing/core/PGraphics2D.java
Patch:
@@ -92,7 +92,8 @@ protected void allocate() {
     pixelCount = width * height;
     pixels = new int[pixelCount];
 
-    Arrays.fill(pixels, backgroundColor);
+    // Not necessary because background will be called almost immediately
+    //Arrays.fill(pixels, backgroundColor);
 
     if (mainDrawingSurface) {
       cm = new DirectColorModel(32, 0x00ff0000, 0x0000ff00, 0x000000ff);;

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -132,7 +132,7 @@ protected void allocate() {
     image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
     g2 = (Graphics2D) image.getGraphics();
     // can't un-set this because this may be only a resize (Bug #463)
-    //defaultsInited = false;
+    defaultsInited = false;
   }
 
 

File: video/src/processing/video/Movie.java
Patch:
@@ -242,7 +242,8 @@ public Movie(PApplet parent, String filename, int ifps) {
     // we've got a valid movie! let's rock.
     try {
       // this is probably causing the 2 seconds of audio
-      movie.prePreroll(0, 1.0f);
+      // disabled pre-preroll on 0126 because of security problems
+      //movie.prePreroll(0, 1.0f);
       movie.preroll(0, 1.0f);
 
       // this has a possibility of running forever..

File: app/src/processing/app/Base.java
Patch:
@@ -364,6 +364,7 @@ public void handleActivated(Editor whichEditor) {
     activeEditor = whichEditor;
 
     // set the current window to be the console that's getting output
+    EditorConsole.setEditor(activeEditor);
   }
 
 

File: app/src/processing/app/Base.java
Patch:
@@ -362,6 +362,8 @@ static public String getSketchbookPath() {
   // Window receives a WINDOW_GAINED_FOCUS or WINDOW_ACTIVATED event.
   public void handleActivated(Editor whichEditor) {
     activeEditor = whichEditor;
+
+    // set the current window to be the console that's getting output
   }
 
 

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -1642,8 +1642,9 @@ public void processKeyEvent(KeyEvent evt) {
 
     switch(evt.getID()) {
     case KeyEvent.KEY_TYPED:
-      //if ((editorListener != null) && !editorListener.keyTyped(evt)) {
-      inputHandler.keyTyped(evt);
+      if ((editorListener != null) && !editorListener.keyTyped(evt)) {
+        inputHandler.keyTyped(evt);
+      }
       break;
     case KeyEvent.KEY_PRESSED:
       if ((editorListener != null) && !editorListener.keyPressed(evt)) {

File: app/src/processing/app/Preferences.java
Patch:
@@ -74,9 +74,9 @@ public class Preferences {
 
   /**
    * Standardized width for buttons. Mac OS X 10.3 wants 70 as its default,
-   * Windows XP needs 66, and Linux needs 76, so 76 seems proper.
+   * Windows XP needs 66, and my Ubuntu machine needs 80+, so 80 seems proper.
    */
-  static public int BUTTON_WIDTH  = 76;
+  static public int BUTTON_WIDTH  = 80;
 
   /**
    * Standardized button height. Mac OS X 10.3 (Java 1.4) wants 29,
@@ -431,6 +431,7 @@ public void actionPerformed(ActionEvent actionEvent) {
         }
       };
     Base.registerWindowCloseKeys(dialog.getRootPane(), disposer);
+    Base.setIcon(dialog);
 
     Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
     dialog.setLocation((screen.width - wide) / 2,

File: app/src/processing/app/FindReplace.java
Patch:
@@ -206,6 +206,7 @@ public void actionPerformed(ActionEvent actionEvent) {
           handleClose();
         }
       });
+    Base.setIcon(this);
 
     // hack to to get first field to focus properly on osx
     addWindowListener(new WindowAdapter() {

File: app/src/processing/app/tools/ColorSelector.java
Patch:
@@ -123,6 +123,7 @@ public void actionPerformed(ActionEvent actionEvent) {
           frame.setVisible(false);
         }
       });
+    Base.setIcon(frame);
 
     hueField.getDocument().addDocumentListener(this);
     saturationField.getDocument().addDocumentListener(this);

File: app/src/processing/app/tools/CreateFont.java
Patch:
@@ -199,7 +199,7 @@ public void actionPerformed(ActionEvent e) {
     JButton cancelButton = new JButton("Cancel");
     cancelButton.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          setVisible(false); 
+          setVisible(false);
         }
       });
     okButton = new JButton("OK");
@@ -222,6 +222,7 @@ public void actionPerformed(ActionEvent actionEvent) {
         }
       };
     Base.registerWindowCloseKeys(root, disposer);
+    Base.setIcon(this);
 
     pack();
 

File: core/src/processing/core/PConstants.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-06 Ben Fry and Casey Reas
+  Copyright (c) 2004-07 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or

File: core/src/processing/core/PFont.java
Patch:
@@ -3,8 +3,8 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-06 Ben Fry & Casey Reas
-  Portions Copyright (c) 2001-04 Massachusetts Institute of Technology
+  Copyright (c) 2004-07 Ben Fry & Casey Reas
+  Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: core/src/processing/core/PGraphics2D.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2006 Ben Fry and Casey Reas
+  Copyright (c) 2006-07 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005-06 Ben Fry and Casey Reas
+  Copyright (c) 2005-07 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: core/src/processing/core/PImage.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-06 Ben Fry and Casey Reas
+  Copyright (c) 2004-07 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or

File: core/src/processing/core/PMatrix.java
Patch:
@@ -1,9 +1,9 @@
 /* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
-  Part of the Processing project - http://Proce55ing.net
+  Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005-06 Ben Fry and Casey Reas
+  Copyright (c) 2005-07 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: core/src/processing/core/PShape.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2006 Ben Fry and Casey Reas
+  Copyright (c) 2006-07 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: app/src/antlr/TokenStreamCopyingHiddenTokenFilter.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 package antlr;
 //package processing.app.preproc;

File: app/src/processing/app/Base.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: app/src/processing/app/Compiler.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Compiler - default compiler class that connects to jikes
@@ -29,7 +29,7 @@
 import java.io.*;
 import java.util.*;
 import java.util.zip.*;
-import javax.swing.*;
+
 
 public class Compiler implements MessageConsumer {
   static final String BUGS_URL =
@@ -69,7 +69,7 @@ public boolean compile(Sketch sketch, String buildPath)
     this.buildPath = buildPath;
 
     // the pms object isn't used for anything but storage
-    MessageStream pms = new MessageStream(this);
+    /*MessageStream pms =*/ new MessageStream(this);
 
     String baseCommand[] = new String[] {
       // user.dir is folder containing P5 (and therefore jikes)

File: app/src/processing/app/Editor.java
Patch:
@@ -161,7 +161,7 @@ public void windowActivated(WindowEvent e) {
         }
       });
 
-    PdeKeywords keywords = new PdeKeywords();
+    //PdeKeywords keywords = new PdeKeywords();
     sketchbook = new Sketchbook(this);
 
     JMenuBar menubar = new JMenuBar();
@@ -691,7 +691,7 @@ else if (jalopy.getState() == Jalopy.State.ERROR)
     item = new JMenuItem("Create Font...");
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          new CreateFont(Editor.this).show();
+          new CreateFont(Editor.this).setVisible(true);
         }
       });
     menu.add(item);
@@ -896,7 +896,7 @@ public void actionPerformed(ActionEvent e) {
             find = new FindReplace(Editor.this);
           }
           //new FindReplace(Editor.this).show();
-          find.show();
+          find.setVisible(true);
           //find.setVisible(true);
         }
       });

File: app/src/processing/app/EditorConsole.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: app/src/processing/app/EditorHeader.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org
@@ -25,10 +25,8 @@
 
 import java.awt.*;
 import java.awt.event.*;
-import java.io.*;
 
 import javax.swing.*;
-import javax.swing.event.*;
 
 
 /**

File: app/src/processing/app/EditorStatus.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: app/src/processing/app/FindReplace.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org
@@ -211,7 +211,7 @@ public void actionPerformed(ActionEvent actionEvent) {
     addWindowListener(new WindowAdapter() {
         public void windowActivated(WindowEvent e) {
           //System.out.println("activating");
-          boolean ok = findField.requestFocusInWindow();
+          /*boolean ok =*/ findField.requestFocusInWindow();
           //System.out.println("got " + ok);
           findField.selectAll();
         }
@@ -225,7 +225,7 @@ public void handleClose() {
     replaceString = replaceField.getText();
 
     // this object should eventually become dereferenced
-    hide();
+    setVisible(false);
   }
 
 

File: app/src/processing/app/MessageConsumer.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: app/src/processing/app/MessageSiphon.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: app/src/processing/app/MessageStream.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: app/src/processing/app/PresentMode.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: app/src/processing/app/RunnerClassLoader.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Based on Simple1.2ClassLoader.java - simple Java 1.2 class loader
@@ -21,7 +21,6 @@
 import java.io.*;
 import java.net.*;
 import java.util.*;
-import java.util.jar.*;
 
 
 /**

File: app/src/processing/app/RunnerException.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: app/src/processing/app/Sketch.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org
@@ -27,7 +27,6 @@
 import processing.core.*;
 
 import java.awt.*;
-import java.awt.event.WindowEvent;
 import java.io.*;
 import java.util.*;
 import java.util.zip.*;
@@ -815,7 +814,7 @@ public boolean saveAs() throws IOException {
     }
     fd.setFile(folder.getName());
 
-    fd.show();
+    fd.setVisible(true);
     String newParentDir = fd.getDirectory();
     String newName = fd.getFile();
 

File: app/src/processing/app/SketchCode.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   SketchCode - data class for a single file inside a sketch
@@ -26,7 +26,6 @@
 import processing.app.syntax.*;
 
 import java.io.*;
-import javax.swing.text.*;
 import javax.swing.undo.*;
 
 

File: app/src/processing/app/SketchHistory.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   SketchHistory - handler for storing history information about a project

File: app/src/processing/app/Sketchbook.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org
@@ -325,7 +325,7 @@ public boolean accept(File dir, String name) {
       });
 
     // gimme some money
-    fd.show();
+    fd.setVisible(true);
 
     // what in the hell yu want, boy?
     String directory = fd.getDirectory();
@@ -476,7 +476,7 @@ public JMenu getOpenMenu() {
   public void addSketchbookMenu(JMenu menu) {
     try {
       JMenu smenu = new JMenu("Sketchbook");
-      boolean sketches = addSketches(smenu, new File(getSketchbookPath()));
+      /*boolean sketches =*/ addSketches(smenu, new File(getSketchbookPath()));
       menu.add(smenu);
     } catch (IOException e) {
       e.printStackTrace();

File: app/src/processing/app/preproc/PdePreprocessor.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   PdePreprocessor - wrapper for default ANTLR-generated parser

File: app/src/processing/app/syntax/JEditTextArea.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
  * JEditTextArea.java - jEdit's text component

File: app/src/processing/app/syntax/PdeKeywords.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   PdeKeywords - handles text coloring and links to html reference

File: app/src/processing/app/syntax/PdeTextAreaDefaults.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   PdeTextAreaDefaults - grabs font/color settings for the editor

File: app/src/processing/app/syntax/TextAreaPainter.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
  * TextAreaPainter.java - Paints the text area

File: app/src/processing/app/tools/Archiver.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Archiver - plugin tool for archiving sketches
@@ -102,7 +102,7 @@ public void show() {
       new FileDialog(editor, "Archive sketch as:", FileDialog.SAVE);
     fd.setDirectory(parent.getAbsolutePath());
     fd.setFile(newbie.getName());
-    fd.show();
+    fd.setVisible(true);
 
     String directory = fd.getDirectory();
     String filename = fd.getFile();

File: app/src/processing/app/tools/ExportFolder.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   ExportFolder - tool to export all sketches within a certain folder
@@ -26,9 +26,7 @@
 import processing.app.*;
 
 import java.io.*;
-import java.text.*;
 import java.util.*;
-import java.util.zip.*;
 
 import javax.swing.*;
 

File: app/src/processing/app/tools/format/src/AutoFormat.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PApplet.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PConstants.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PFont.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PGraphics2D.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PGraphics3D.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PImage.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PLine.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PMatrix.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://Proce55ing.net

File: core/src/processing/core/PPolygon.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PShape.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: core/src/processing/core/PTriangle.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: dxf/src/processing/dxf/RawDXF.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
  * RawDXF - Code to write DXF files with beginRaw/endRaw

File: net/src/processing/net/Client.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   PClient - basic network client implementation

File: net/src/processing/net/Server.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   PServer - basic network server implementation

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: serial/src/processing/serial/Serial.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   PSerial - class for serial port goodness

File: video/src/processing/video/Capture.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: video/src/processing/video/Movie.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: video/src/processing/video/MovieMaker.java
Patch:
@@ -1,4 +1,4 @@
-/* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
+/* -*- mode: java; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
   Part of the Processing project - http://processing.org

File: app/src/antlr/ExtendedCommonASTWithHiddenTokens.java
Patch:
@@ -8,9 +8,9 @@
  */
 
 import java.io.*;
-import antlr.*;
+//import antlr.*;
 import antlr.collections.*;
-import antlr.collections.impl.*;
+//import antlr.collections.impl.*;
 
 /** A CommonAST whose initialization copies hidden token
  *  information from the Token used to create a node.

File: app/src/processing/app/Runner.java
Patch:
@@ -248,8 +248,8 @@ public void startInternal(Point windowLocation) throws Exception {
 
     window = new Frame(sketch.name); // use ugly window
     ((Frame)window).setResizable(false);
-    if (editor.icon != null) {
-      ((Frame)window).setIconImage(editor.icon);
+    if (Editor.icon != null) {
+      ((Frame)window).setIconImage(Editor.icon);
     }
     window.pack(); // to get a peer, size set later, need for insets
 

File: app/src/processing/app/preproc/PdeEmitter.java
Patch:
@@ -28,7 +28,7 @@ public class PdeEmitter implements PdeTokenTypes
 {
   private PrintStream out = System.out;
   private PrintStream debug = System.err;
-  private static int ALL = -1;
+  //private static int ALL = -1;
   private java.util.Stack stack = new java.util.Stack();
   private static String[] tokenNames;
   private final static int ROOT_ID = 0;

File: app/src/processing/app/preproc/PdePreprocessor.java
Patch:
@@ -34,7 +34,7 @@
 
 import antlr.*;
 import antlr.collections.*;
-import antlr.collections.impl.*;
+//import antlr.collections.impl.*;
 
 import com.oroinc.text.regex.*;
 

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -166,7 +166,7 @@ public void endDraw() {
     if (!mainDrawingSurface) {
       loadPixels();
     }
-
+    modified = true;
     insideDraw = false;
   }
 

File: video/src/processing/video/Movie.java
Patch:
@@ -1,10 +1,9 @@
 /* -*- mode: jde; c-basic-offset: 2; indent-tabs-mode: nil -*- */
 
 /*
-  PMovie - reading from video files
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-06 Ben Fry
+  Copyright (c) 2004-07 Ben Fry and Casey Reas
   The previous version of this code was developed by Hernando Barragan
 
   This library is free software; you can redistribute it and/or

File: core/src/processing/core/PApplet.java
Patch:
@@ -721,7 +721,7 @@ public void add(Object object, Method method) {
 
   public void registerSize(Object o) {
     Class methodArgs[] = new Class[] { Integer.TYPE, Integer.TYPE };
-    registerWithArgs(preMethods, "size", o, methodArgs);
+    registerWithArgs(sizeMethods, "size", o, methodArgs);
   }
 
   public void registerPre(Object o) {

File: core/src/processing/core/PImage.java
Patch:
@@ -347,6 +347,7 @@ public PImage get(int x, int y, int w, int h) {
     if (y + h > height) h = height - y;
 
     PImage newbie = new PImage(w, h, format);
+    newbie.parent = parent;
 
     int index = y*width + x;
     int index2 = 0;

File: core/src/processing/core/PConstants.java
Patch:
@@ -237,9 +237,9 @@ public interface PConstants {
 
   // stroke modes
 
-  static final int SQUARE   = 1 << 0;
+  static final int SQUARE   = 1 << 0;  // called 'butt' in the svg spec
   static final int ROUND    = 1 << 1;
-  static final int PROJECT  = 1 << 2;
+  static final int PROJECT  = 1 << 2;  // called 'square' in the svg spec
   static final int MITER    = 1 << 3;
   static final int BEVEL    = 1 << 5;
 

File: core/src/processing/core/PImage.java
Patch:
@@ -504,6 +504,7 @@ public void filter(int kind) {
             int col = 255 - pixels[i];
             pixels[i] = 0xff000000 | (col << 16) | (col << 8) | col;
           }
+          format = RGB;
 
         } else {
           // Converts RGB image data into grayscale using

File: core/src/processing/core/PApplet.java
Patch:
@@ -5508,7 +5508,7 @@ static public String[] split(String what, char delim) {
   /**
    * FIXME this is only temporary
    */
-  static public String split(String what, String delim) {
+  static public String[] split(String what, String delim) {
     return what.split(delim);
   }
 

File: app/preproc/PdeEmitter.java
Patch:
@@ -635,6 +635,7 @@ public void print (AST ast) throws RunnerException {
     case CHAR_LITERAL:
     case STRING_LITERAL:
     case NUM_FLOAT:
+    case NUM_LONG:
       out.print(ast.getText());
       dumpHiddenAfter(ast);
       break;

File: app/Sketch.java
Patch:
@@ -1275,6 +1275,9 @@ public boolean handleRun() throws RunnerException {
       //handleOpen(sketch);
       //history.lastRecorded = historySaved;
 
+      // set current to null so that the tab gets updated
+      // http://dev.processing.org/bugs/show_bug.cgi?id=515
+      current = null;
       // nuke previous files and settings, just get things loaded
       load();
     }

File: core/src/processing/core/PConstants.java
Patch:
@@ -114,7 +114,9 @@ public interface PConstants {
   static final int ERODE     = 17;
   static final int DILATE    = 18;
 
+
   // blend mode keyword definitions
+  // @see processing.core.PImage#blendColor(int,int,int)
 
   public final static int REPLACE    = 0;
   public final static int BLEND      = 1 << 0;

File: dxf/src/processing/dxf/RawDXF.java
Patch:
@@ -231,7 +231,9 @@ private void writeFooter() {
    */
   public void write(String cmd, float val) {
     writer.println(cmd);
-    writer.println(PApplet.nf(val, 0, 4));
+    // don't format, will cause trouble on systems that aren't en-us
+    // http://dev.processing.org/bugs/show_bug.cgi?id=495
+    writer.println(val);
   }
 
 

File: core/src/processing/core/PImage.java
Patch:
@@ -1095,9 +1095,9 @@ public void copy(PImage src,
    *     <TT>C = max(A*factor, B)</TT>.
    *     Illustrator calls this "Lighten".
    *
-   * <LI>DIFFERENCE -
+   * <LI>DIFFERENCE - subtract colors from underlying image.
    *
-   * <LI>EXCLUSION -
+   * <LI>EXCLUSION - similar to DIFFERENCE, but less extreme.
    *
    * <LI>MULTIPLY - Multiply the colors, result will always be darker.
    *
@@ -1116,7 +1116,7 @@ public void copy(PImage src,
    *
    * <LI>BURN - Darker areas are applied, increasing contrast, ignores lights.
    *     Called "Color Burn" in Illustrator and Photoshop.
-   * </PRE>
+   * </UL>
    */
   static public int blendColor(int c1, int c2, int mode) {
     switch (mode) {

File: app/Editor.java
Patch:
@@ -819,7 +819,7 @@ public void actionPerformed(ActionEvent e) {
               if (referenceFile == null) {
                 message("No reference available for \"" + text + "\"");
               } else {
-                Base.showReference(referenceFile);
+                Base.showReference(referenceFile + ".html");
               }
             }
           }
@@ -2079,7 +2079,7 @@ public void message(String msg) {
    * Returns the edit popup menu.
    */
   class TextAreaPopup extends JPopupMenu {
-    String currentDir = System.getProperty("user.dir");
+    //String currentDir = System.getProperty("user.dir");
     String referenceFile = null;
 
     JMenuItem cutItem, copyItem;
@@ -2128,7 +2128,7 @@ public void actionPerformed(ActionEvent e) {
       referenceItem = new JMenuItem("Find in Reference");
       referenceItem.addActionListener(new ActionListener() {
           public void actionPerformed(ActionEvent e) {
-            Base.showReference(referenceFile);
+            Base.showReference(referenceFile + ".html");
           }
         });
       this.add(referenceItem);

File: app/syntax/JEditTextArea.java
Patch:
@@ -1643,9 +1643,8 @@ public void processKeyEvent(KeyEvent evt) {
 
     switch(evt.getID()) {
     case KeyEvent.KEY_TYPED:
-      if ((editorListener != null) && !editorListener.keyTyped(evt)) {
-        inputHandler.keyTyped(evt);
-      }
+      //if ((editorListener != null) && !editorListener.keyTyped(evt)) {
+      inputHandler.keyTyped(evt);
       break;
     case KeyEvent.KEY_PRESSED:
       if ((editorListener != null) && !editorListener.keyPressed(evt)) {

File: core/src/processing/core/PApplet.java
Patch:
@@ -1048,7 +1048,7 @@ static protected PGraphics createGraphics(int iwidth, int iheight,
                                             String irenderer, String ipath,
                                             PApplet applet) {
     if (irenderer.equals(OPENGL)) {
-      if (PApplet.platform = WINDOWS) {
+      if (PApplet.platform == WINDOWS) {
         String s = System.getProperty("java.version");
         if (s != null) {
           if (s.equals("1.5.0_10")) {
@@ -1057,6 +1057,7 @@ static protected PGraphics createGraphics(int iwidth, int iheight,
                                "/bugs/show_bug.cgi?id=513 for more info.");
             throw new RuntimeException("Please update your Java " +
                                        "installation (see bug #512)");
+          }
         }
       }
     }

File: app/Editor.java
Patch:
@@ -684,6 +684,7 @@ synchronized public void actionPerformed(ActionEvent e) {
           jalopy.setInput(getText(), sketch.current.file.getAbsolutePath());
           StringBuffer buffer = new StringBuffer();
           jalopy.setOutput(buffer);
+          jalopy.setInspect(false);
           jalopy.format();
           setText(buffer.toString(), 0, 0);
 

File: core/src/processing/core/PApplet.java
Patch:
@@ -1047,10 +1047,13 @@ public PGraphics createGraphics(int iwidth, int iheight,
   static protected PGraphics createGraphics(int iwidth, int iheight,
                                             String irenderer, String ipath,
                                             PApplet applet) {
+    /*
     if (irenderer.equals(P2D)) {
       throw new RuntimeException("P2D is not yet implemented, " +
                                  "use JAVA2D or P3D instead.");
     }
+    */
+
     /*
     // ok when calling size, but not really with createGraphics()
     if (renderer.equals(OPENGL)) {

File: core/src/processing/core/PApplet.java
Patch:
@@ -190,7 +190,8 @@ public class PApplet extends Applet
    * Message of the Exception thrown when size() is called the first time.
    * <P>
    * This is used internally so that setup() is forced to run twice
-   * when the renderer is changed. Reason being that the
+   * when the renderer is changed. This is the only way for us to handle
+   * invoking the new renderer while also in the midst of rendering.
    */
   static final String NEW_RENDERER = "new renderer";
 

File: app/Editor.java
Patch:
@@ -2045,7 +2045,7 @@ public void error(Exception e) {
 
 
   public void error(RunnerException e) {
-    //System.out.println("ERORROOROROR 2");
+    //System.out.println("file and line is " + e.file + " " + e.line);
     if (e.file >= 0) sketch.setCurrent(e.file);
     if (e.line >= 0) highlightLine(e.line);
 

File: core/src/processing/core/PGraphics.java
Patch:
@@ -153,7 +153,7 @@ public abstract class PGraphics extends PImage implements PConstants {
   // ........................................................
 
   /** Last background color that was set, zero if an image */
-  public int backgroundColor = 0xffC0C0C0;
+  public int backgroundColor = 0xffCCCCCC;
 
   protected boolean backgroundAlpha;
   protected float backgroundR, backgroundG, backgroundB, backgroundA;

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -1108,7 +1108,8 @@ public void smooth() {
     g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                         RenderingHints.VALUE_ANTIALIAS_ON);
     g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
-                        RenderingHints.VALUE_INTERPOLATION_BICUBIC);
+                        RenderingHints.VALUE_INTERPOLATION_QUALITY);
+                        //RenderingHints.VALUE_INTERPOLATION_BICUBIC);
   }
 
 

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -746,7 +746,7 @@ public void update(boolean tint, int tintColor) {
           //             source.pixels, 0, source.width);
           WritableRaster raster = ((BufferedImage) image).getRaster();
           raster.setDataElements(0, 0, source.width, source.height,
-                                 tintedPixels);
+                                 source.pixels);
         }
 
       } else if (source.format == ALPHA) {

File: video/src/processing/video/Capture.java
Patch:
@@ -491,6 +491,7 @@ public void settings() {
    */
   static public String[] list() {
     try {
+      QTSession.open();
       SequenceGrabber grabber = new SequenceGrabber();
       SGVideoChannel channel = new SGVideoChannel(grabber);
 
@@ -501,6 +502,7 @@ static public String[] list() {
       }
       // properly shut down the channel so the app can use it again
       grabber.disposeChannel(channel);
+      QTSession.close();
       return listing;
 
     } catch (QTException qte) {

File: app/Sketchbook.java
Patch:
@@ -129,6 +129,7 @@ public Sketchbook(Editor editor) {
 
       //System.out.println("resetting sketchbook path");
       File sketchbookFolder = Base.getDefaultSketchbookFolder();
+      //System.out.println("default is " + sketchbookFolder);
       Preferences.set("sketchbook.path",
                       sketchbookFolder.getAbsolutePath());
 

File: core/src/processing/core/PGraphics.java
Patch:
@@ -665,11 +665,9 @@ public void defaults() {  // ignore
   }
 
 
-  /*
   protected void flush() {
     // no-op, mostly for P3D to write sorted stuff
   }
-  */
 
 
 
@@ -4119,7 +4117,7 @@ public void beginRaw(PGraphics raw) {
   public void endRaw() {
     if (raw != null) {
       // for 3D, need to flush any geometry that's been stored for sorting
-      //raw.flush();  // this should be called by endDraw() instead
+      raw.flush();  // this should be called by endDraw() instead
 
       // just like beginDraw, this will have to be called because
       // endDraw() will be happening outside of draw()

File: core/src/processing/core/PTriangle.java
Patch:
@@ -359,11 +359,14 @@ public void setTexture(PImage image) {
     }
 
     //if (parent.hints[SMOOTH_IMAGES]) {
+    /*
     if (parent.smooth) {
       m_bilinear = true;
     } else {
       m_bilinear = false;
     }
+    */
+    m_bilinear = true;
   }
 
   /**

File: video/src/processing/video/Capture.java
Patch:
@@ -507,11 +507,11 @@ static public String[] list() {
       int errorCode = qte.errorCode();
       if (errorCode == Errors.couldntGetRequiredComponent) {
         throw new RuntimeException("Couldn't find any capture devices, " +
-                                   "check the FAQ for more info.");
+                                   "read the video reference for more info.");
       } else {
         qte.printStackTrace();
         throw new RuntimeException("Problem listing capture devices, " +
-                                   "check the FAQ for more info.");
+                                   "read the video reference for more info.");
       }
     }
     //return null;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -657,6 +657,7 @@ public void defaults() {  // ignore
     // a gray background (when just a transparent surface or an empty pdf
     // is what's desired)
     if (mainDrawingSurface) {
+      //System.out.println("main drawing surface");
       background(backgroundColor);
     }
 

File: core/src/processing/core/PGraphics2D.java
Patch:
@@ -107,7 +107,8 @@ protected void allocate() {
       image = Toolkit.getDefaultToolkit().createImage(mis);
     }
 
-    defaultsInited = false;
+    // can't un-set this because this may be only a resize (Bug #463)
+    //defaultsInited = false;
   }
 
 

File: core/src/processing/core/PGraphics3D.java
Patch:
@@ -322,7 +322,8 @@ protected void allocate() {
     line = new PLine(this);
     triangle = new PTriangle(this);
 
-    defaultsInited = false;
+    // can't un-set this because this may be only a resize (Bug #463)
+    //defaultsInited = false;
     //System.out.println(this + " done allocating");
   }
 

File: core/src/processing/core/PGraphicsJava2D.java
Patch:
@@ -131,7 +131,8 @@ public void resize(int iwidth, int iheight) {  // ignore
   protected void allocate() {
     image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
     g2 = (Graphics2D) image.getGraphics();
-    defaultsInited = false;
+    // can't un-set this because this may be only a resize (Bug #463)
+    //defaultsInited = false;
   }
 
 

File: core/src/processing/core/PGraphics.java
Patch:
@@ -46,7 +46,7 @@ public abstract class PGraphics extends PImage implements PConstants {
   public int pixelCount;
 
   /// true if defaults() has been called a first time
-  boolean defaultsInited;
+  protected boolean defaultsInited;
 
   /// true if in-between beginDraw() and endDraw()
   protected boolean insideDraw;

File: core/src/processing/core/PGraphics3D.java
Patch:
@@ -322,6 +322,7 @@ protected void allocate() {
     line = new PLine(this);
     triangle = new PTriangle(this);
 
+    defaultsInited = false;
     //System.out.println(this + " done allocating");
   }
 

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -836,6 +836,7 @@ public ImageCache(PImage image) {
      * Generate a texture ID and do the necessary bitshifting for the image.
      */
     public void rebind(PImage source) {
+      //System.out.println("rebinding texture for " + source);
       if (tindex != -1) {
         // free up the old memory
         gl.glDeleteTextures(1, new int[] { tindex }, 0);

File: candy/src/processing/candy/SVG.java
Patch:
@@ -148,7 +148,7 @@ public class SVG {
     /**
      * Initializes a new SVG Object with the given filename.
      */
-    public SVG(String filename, PApplet parent){
+    public SVG(PApplet parent, String filename){
         this.parent = parent;        
         //this.filename = filename;
 

File: candy/src/processing/candy/SVG.java
Patch:
@@ -362,7 +362,7 @@ protected abstract class VectorObject extends BaseObject {
 
         boolean stroke;
         int strokeColor; // = transValue;
-        float strokeWeight = Float.NaN; // none
+        float strokeWeight; // default is 1
         Gradient strokeGradient; 
         Paint strokeGradientPaint;
         String strokeName;  // id of another object, gradients only?
@@ -489,7 +489,7 @@ protected void getColors(XMLElement properties){
             //if (properties.hasAttribute("stroke-width")){
             //strokeWeight = properties.getFloatAttribute("stroke-width");
             //}
-            strokeWeight = properties.getFloatAttribute("stroke-width", Float.NaN);
+            strokeWeight = properties.getFloatAttribute("stroke-width", 1);
         }
 
         

File: app/syntax/InputHandler.java
Patch:
@@ -135,8 +135,9 @@ public static String getActionName(ActionListener listener)
                 {
                         String name = (String)en.nextElement();
                         ActionListener _listener = getAction(name);
-                        if(_listener == listener)
+                        if(_listener == listener) {
                                 return name;
+                        }
                 }
                 return null;
         }

File: app/syntax/JEditTextArea.java
Patch:
@@ -1643,7 +1643,9 @@ public void processKeyEvent(KeyEvent evt) {
 
     switch(evt.getID()) {
     case KeyEvent.KEY_TYPED:
-      inputHandler.keyTyped(evt);
+      if ((editorListener != null) && !editorListener.keyTyped(evt)) {
+        inputHandler.keyTyped(evt);
+      }
       break;
     case KeyEvent.KEY_PRESSED:
       if ((editorListener != null) && !editorListener.keyPressed(evt)) {

File: app/Runner.java
Patch:
@@ -174,6 +174,7 @@ public void startExternalRuntime(Point windowLocation) throws Exception {
 
     //params.add("-Xint"); // interpreted mode
     //params.add("-Xprof");  // profiler
+    //params.add("-Xaprof");  // allocation profiler
     //params.add("-Xrunhprof:cpu=samples");  // old-style profiler
 
     String options = Preferences.get("run.options");

File: core/src/processing/core/PApplet.java
Patch:
@@ -3033,7 +3033,7 @@ public final void randomSeed(long what) {
   // new vars needed due to recent change of cos table in PGraphics
   int perlin_TWOPI, perlin_PI;
   float[] perlin_cosTable;
-  float perlin[];
+  float[] perlin;
 
   Random perlinRandom;
 
@@ -3147,6 +3147,8 @@ public void noiseDetail(int lod, float falloff) {
   public void noiseSeed(long what) {
     if (perlinRandom == null) perlinRandom = new Random();
     perlinRandom.setSeed(what);
+    // force table reset after changing the random number seed [0122]
+    perlin = null;
   }
 
 

File: opengl/src/processing/opengl/PGraphicsOpenGL.java
Patch:
@@ -1772,9 +1772,9 @@ public void background(PImage image) {
 
 
   public void clear() {
-    float backgroundR = (float) ((backgroundColor >> 16) & 0xff) / 255.0f;
-    float backgroundG = (float) ((backgroundColor >> 8) & 0xff) / 255.0f;
-    float backgroundB = (float) (backgroundColor & 0xff) / 255.0f;
+    //float backgroundR = (float) ((backgroundColor >> 16) & 0xff) / 255.0f;
+    //float backgroundG = (float) ((backgroundColor >> 8) & 0xff) / 255.0f;
+    //float backgroundB = (float) (backgroundColor & 0xff) / 255.0f;
 
     gl.glClearColor(backgroundR, backgroundG, backgroundB, 1);
     gl.glClear(GL.GL_COLOR_BUFFER_BIT | GL.GL_DEPTH_BUFFER_BIT);

File: core/src/processing/core/PGraphics.java
Patch:
@@ -1078,7 +1078,7 @@ protected void splineVertex(float x, float y, float z, boolean bezier) {
     }
 
     // when the coords are Float.MAX_VALUE, then treat as a 2D curve
-    int dimensions = (x == Float.MAX_VALUE) ? 2 : 3;
+    int dimensions = (z == Float.MAX_VALUE) ? 2 : 3;
 
     if (dimensions == 3) {
       vertex[MZ] = z;

File: app/Editor.java
Patch:
@@ -1395,7 +1395,6 @@ protected void checkModified(int checkModifiedMode) {
         checkModified2();  // though this may just quit
 
       } else if (result == JOptionPane.CANCEL_OPTION) {
-        System.out.println("canceled");
         // ignored
       }
     }

File: app/tools/CreateFont.java
Patch:
@@ -111,7 +111,7 @@ public CreateFont(Editor editor) {
     int index = 0;
     for (int i = 0; i < fonts.length; i++) {
       String psname = fonts[i].getPSName();
-      if (psname == null) System.err.println("ps name is null");
+      //if (psname == null) System.err.println("ps name is null");
 
       flist[index++] = fonts[i].getPSName();
       table.put(fonts[i].getPSName(), fonts[i]);

File: core/src/processing/core/PGraphics3D.java
Patch:
@@ -1844,7 +1844,7 @@ private void copy_vertex_color_to_triangle(int triIndex,
       min(1, v[EG] + v[AG] * lightContribution[LIGHT_AMBIENT_G] +
           v[DG] * lightContribution[LIGHT_DIFFUSE_G]);
     triColor[TRI_DIFFUSE_B] =
-      min(1, v[EB] + v[AB] * lightContribution[LIGHT_AMBIENT_R] +
+      min(1, v[EB] + v[AB] * lightContribution[LIGHT_AMBIENT_B] +
           v[DB] * lightContribution[LIGHT_DIFFUSE_B]);
     triColor[TRI_DIFFUSE_A] = min(1, v[DA]);
 

File: app/Sketch.java
Patch:
@@ -182,7 +182,7 @@ public void load() {
         base = base.substring(0, base.length() - 4);
       }
       if (base.endsWith(".java")) {
-        base = base.substring(0, base.length() - 4);
+        base = base.substring(0, base.length() - 5);
       }
 
       if (list[i].startsWith(".")) {

File: app/preproc/PdeEmitter.java
Patch:
@@ -868,7 +868,7 @@ public void print (AST ast) throws RunnerException {
 
       //out.print("(");
       String pooType = terminalTypeNode.getText();
-      out.print("PApplet.to" +
+      out.print("PApplet.parse" +
                 Character.toUpperCase(pooType.charAt(0)) +
                 pooType.substring(1));
       dumpHiddenAfter(terminalTypeNode);  // the left paren

File: core/src/processing/core/PApplet.java
Patch:
@@ -48,7 +48,7 @@
  * be returning Java 1.1 support, which does not include Swing (without an
  * additional, sizable, download), and 2) Swing is a bloated piece of crap.
  * A Processing applet is a heavyweight AWT component, and can be used the
- * same as any other AWT component.
+ * same as any other AWT component, with or without Swing.
  * <p/>
  * Similarly, Processing runs in a Frame and not a JFrame. However, there's
  * nothing to prevent you from embedding a PApplet into a JFrame, it's just

File: app/Runner.java
Patch:
@@ -214,7 +214,7 @@ public void startExternalRuntime(Point windowLocation) throws Exception {
 
     String command[] = new String[params.size()];
     params.copyInto(command);
-    PApplet.println(command);
+    //PApplet.println(command);
 
     process = Runtime.getRuntime().exec(command);
     processInput = new SystemOutSiphon(process.getInputStream());

File: dxf/src/processing/dxf/RawDXF.java
Patch:
@@ -171,7 +171,7 @@ public boolean displayable() {
   // ..............................................................
 
 
-  public void beginFrame() {
+  public void beginDraw() {
     // have to create file object here, because the name isn't yet
     // available in allocate()
     if (writer == null) {
@@ -185,7 +185,7 @@ public void beginFrame() {
   }
 
 
-  public void endFrame() {
+  public void endDraw() {
     // nothing done here
   }
 

File: core/src/processing/core/PFont.java
Patch:
@@ -731,7 +731,7 @@ public PFont(Font font, boolean smooth, char charset[]) {
       //PApplet.printarr(renderingHintsClass.getFields());
 
       Field antialiasingKeyField =
-        renderingHintsClass.getDeclaredField("KEY_TEXT_ANTIALIASING");
+        renderingHintsClass.getField("KEY_TEXT_ANTIALIASING");
       Object antialiasingKey =
         antialiasingKeyField.get(renderingHintsClass);
 

File: core/src/processing/core/PConstants.java
Patch:
@@ -283,6 +283,7 @@ public interface PConstants {
 
   //static final int SCALE_STROKE_WIDTH      = 0;
   //static final int LIGHTING_AFFECTS_STROKE = 1;
+  static final int DISABLE_NATIVE_FONTS    = 2;
   static final int DISABLE_TEXT_SMOOTH     = 3;
   //static final int DISABLE_SMOOTH_HACK     = 4;
   static final int DISABLE_DEPTH_TEST      = 5;

File: core/src/processing/core/PGraphics.java
Patch:
@@ -2113,7 +2113,9 @@ public float textDescent() {
   public void textFont(PFont which) {
     if (which != null) {
       textFont = which;
-      textFontNative = which.font;
+      if (!hints[DISABLE_NATIVE_FONTS]) {
+        textFontNative = which.font;
+      }
       //textFontNativeMetrics = null;
       // changed for rev 0104 for textMode(SHAPE) in opengl
       if (textFontNative != null) {

File: video/Movie.java
Patch:
@@ -284,6 +284,7 @@ public void read() {
       // this happens later (found by hernando)
       //raw.copyToArray(0, image.pixels, 0, image.width * image.height);
 
+      beginPixels();
       // this is identical to a chunk of code inside PCamera
       // this might be a candidate to move up to PVideo or something
       if (borderImage != null) {  // need to remove borders
@@ -303,7 +304,8 @@ public void read() {
 
       // ready to rock
       //System.out.println("updating pixels");
-      updatePixels();  // mark as modified
+      //updatePixels();  // mark as modified
+      endPixels();
 
     } catch (QTException qte) {
       qte.printStackTrace();

File: app/Runner.java
Patch:
@@ -122,7 +122,7 @@ public void startPresenting() throws Exception {
 
     params.add(PApplet.ARGS_EXTERNAL);
     params.add(PApplet.ARGS_PRESENT);
-    params.add(PApplet.ARGS_PRESENT_STOP_COLOR + "=" +
+    params.add(PApplet.ARGS_STOP_COLOR + "=" +
                Preferences.get("run.present.stop.color"));
     params.add(PApplet.ARGS_BGCOLOR + "=" +
                Preferences.get("run.present.bgcolor"));

File: core/PConstants.java
Patch:
@@ -44,7 +44,7 @@ public interface PConstants {
   static final String JAVA2D = "processing.core.PGraphics2";
   static final String OPENGL = "processing.opengl.PGraphicsGL";
   static final String PDF    = "processing.pdf.PGraphicsPDF";
-  //static final String DXF    = "processing.dxf.RawDXF";
+  static final String DXF    = "processing.dxf.RawDXF";
   //static final String SVG    = "processing.dxf.PGraphicsSVG";
 
 

File: dxf/RawDXF.java
Patch:
@@ -59,7 +59,7 @@
  *
  * void draw() {
  *   if (record) {
- *     beginRaw("processing.dxf.RawDXF", "output.dxf");
+ *     beginRaw(DXF, "output.dxf");
  *   }
  *
  *   // do all your drawing here
@@ -88,7 +88,7 @@
  *
  * void draw() {
  *   if (record) {
- *     dxf = (RawDXF) createGraphics("processing.dxf.RawDXF", "output.dxf");
+ *     dxf = (RawDXF) createGraphics(DXF, "output.dxf");
  *     beginRaw(dxf);
  *   }
  *

File: dxf/RawDXF.java
Patch:
@@ -315,7 +315,9 @@ protected void writeTriangle() {
   public void beginShape(int kind) {
     shape = kind;
 
-    if ((shape != LINES) && (shape != TRIANGLES)) {
+    if ((shape != LINES) &&
+        (shape != LINE_STRIP) &&
+        (shape != TRIANGLES)) {
       String err =
         "RawDXF should only be used with beginRaw(), " +
         "as it only supports lines and triangles";

File: app/Sketchbook.java
Patch:
@@ -544,6 +544,8 @@ public void actionPerformed(ActionEvent e) {
         String packages[] =
           Compiler.packageListFromClassPath(libraryClassPath);
         for (int k = 0; k < packages.length; k++) {
+          //System.out.println(packages[k] + " -> " + exported);
+          //String already = (String) importToLibraryTable.get(packages[k]);
           importToLibraryTable.put(packages[k], exported);
         }
 

File: video/Capture.java
Patch:
@@ -143,9 +143,9 @@ public Capture(PApplet parent, String name,
       // workaround for bug with the intel macs
       QDGraphics qdgraphics = null; //new QDGraphics(qdrect);
       if (quicktime.util.EndianOrder.isNativeLittleEndian()) {
-        graphics = new QDGraphics(QDConstants.k32BGRAPixelFormat, qdrect);
+        qdgraphics = new QDGraphics(QDConstants.k32BGRAPixelFormat, qdrect);
       } else {
-        graphics = new QDGraphics(QDGraphics.kDefaultPixelFormat, qdrect);
+        qdgraphics = new QDGraphics(QDGraphics.kDefaultPixelFormat, qdrect);
       }
 
       capture = new SequenceGrabber();

File: app/Base.java
Patch:
@@ -50,8 +50,8 @@
  * files and images, etc) that comes from that.
  */
 public class Base {
-  static final int VERSION = 114;
-  static final String VERSION_NAME = "0114 Beta";
+  static final int VERSION = 115;
+  static final String VERSION_NAME = "0115 Beta";
 
   /**
    * Path of filename opened on the command line,

File: core/PGraphics2.java
Patch:
@@ -1214,10 +1214,10 @@ public void blend(PImage src, int sx1, int sy1, int sx2, int sy2,
 
 
   public void save(String filename) {
-    System.out.println("start load");
+    //System.out.println("start load");
     loadPixels();
-    System.out.println("end load, start save");
+    //System.out.println("end load, start save");
     super.save(filename);
-    System.out.println("done with save");
+    //System.out.println("done with save");
   }
 }

File: opengl/PGraphicsGL.java
Patch:
@@ -1766,9 +1766,9 @@ public void loadPixels() {
     pixelBuffer.get(pixels);
     pixelBuffer.rewind();
 
-    for (int i = 0; i < 5; i++) {
-      System.out.println(PApplet.hex(pixels[i]));
-    }
+    //for (int i = 0; i < 5; i++) {
+    //System.out.println(PApplet.hex(pixels[i]));
+    //}
 
     /*
     int temp[] = new int[width];

File: app/Sketch.java
Patch:
@@ -2438,7 +2438,7 @@ protected Hashtable readSettings(File inputFile) {
     for (int i = 0; i < lines.length; i++) {
       int hash = lines[i].indexOf('#');
       String line = (hash == -1) ?
-        lines[i].trim() : lines[i].substring(hash + 1).trim();
+        lines[i].trim() : lines[i].substring(0, hash).trim();
       if (line.length() == 0) continue;
 
       int equals = line.indexOf('=');

File: opengl/PGraphicsGL.java
Patch:
@@ -2186,6 +2186,7 @@ public void set(int x, int y, int argb) {
         ((argb >> 16) & 0xff);
     }
     getsetBuffer.put(0, getset);
+    getsetBuffer.rewind();
     gl.glRasterPos2f(x + EPSILON, y + EPSILON);
     gl.glDrawPixels(1, 1, GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, getsetBuffer);
   }
@@ -2216,6 +2217,7 @@ public void set(int x, int y, PImage source) {
 
     IntBuffer setBuffer = BufferUtil.newIntBuffer(source.pixels.length);
     setBuffer.put(source.pixels);
+    setBuffer.rewind();
     gl.glRasterPos2f(x + EPSILON, (height - y) - EPSILON);
     gl.glDrawPixels(source.width, source.height,
                     GL.GL_RGBA, GL.GL_UNSIGNED_BYTE, setBuffer);

File: app/tools/ExportFolder.java
Patch:
@@ -74,6 +74,7 @@ public void show() {
         editor.message("Exporting sketch " + (++counter) +
                        " of " + sketches.size());
         String path = (String) en.nextElement();
+        //System.out.println("handling " + path);
         editor.handleOpen(path);
         // success may not be that useful, usually an ex is thrown
         success = editor.sketch.exportApplet();
@@ -97,6 +98,8 @@ protected void addSketches(Vector sketches, File folder) throws IOException {
     // skip .DS_Store files, etc
     if (!folder.isDirectory()) return; // false;
 
+    System.out.println(folder.getAbsolutePath());
+
     String list[] = folder.list();
     // if a bad folder or something like that, this might come back null
     if (list == null) return; // false;

File: app/tools/ColorPicker.java
Patch:
@@ -93,7 +93,7 @@ public ColorPicker(Editor editor) {
 
     frame.getContentPane().add(box, BorderLayout.CENTER);
     frame.pack();
-    //frame.setResizable(false);
+    frame.setResizable(false);
 
     Dimension size = frame.getSize();
     Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();

File: core/PApplet.java
Patch:
@@ -2933,8 +2933,8 @@ public PSound loadSound(String filename) {
   Hashtable imageTable;
 
   /**
-   * Draw an image based on its filename. This is less than efficient
-   * than using loadImage because there's no way to unload it from memory,
+   * Draw an image based on its filename. This is less efficient than
+   * using loadImage because there's no way to unload it from memory,
    * but it's useful for beginners.
    */
   public void image(String filename, float x, float y) {

File: video/Capture.java
Patch:
@@ -449,7 +449,10 @@ public void format(int which) {
    */
   public void settings() {
     try {
+      // fix for crash here submitted by hansi (stop/startPreview lines)
+	  capture.stop(); 
       channel.settingsDialog();
+	  capture.startPreview(); 
     } catch (StdQTException qte) {
       int errorCode = qte.errorCode();
       if (errorCode != Errors.userCanceledErr) {

File: app/Compiler.java
Patch:
@@ -4,7 +4,7 @@
   Compiler - default compiler class that connects to jikes
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/EditorButtons.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/EditorConsole.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/EditorHeader.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/EditorLineStatus.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005 Ben Fry and Casey Reas
+  Copyright (c) 2005-06 Ben Fry and Casey Reas
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/EditorListener.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/EditorStatus.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/FindReplace.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/MessageConsumer.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/MessageSiphon.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/MessageStream.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/Preferences.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/PresentMode.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005- Ben Fry and Casey Reas
+  Copyright (c) 2005-06 Ben Fry and Casey Reas
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/Runner.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/RunnerException.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/Sketch.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/SketchCode.java
Patch:
@@ -4,7 +4,7 @@
   SketchCode - data class for a single file inside a sketch
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/SketchHistory.java
Patch:
@@ -4,7 +4,7 @@
   SketchHistory - handler for storing history information about a project
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/Sketchbook.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/UpdateCheck.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005 Ben Fry and Casey Reas
+  Copyright (c) 2005-06 Ben Fry and Casey Reas
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/syntax/PdeKeywords.java
Patch:
@@ -4,7 +4,7 @@
   PdeKeywords - handles text coloring and links to html reference
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/syntax/PdeTextAreaDefaults.java
Patch:
@@ -4,7 +4,7 @@
   PdeTextAreaDefaults - grabs font/color settings for the editor
   Part of the Processing project - http://Proce55ing.net
 
-  Except where noted, code is written by Ben Fry
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/tools/Archiver.java
Patch:
@@ -4,7 +4,7 @@
   Archiver - plugin tool for archiving sketches
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/tools/AutoFormat.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005 Ben Fry and Casey Reas
+  Copyright (c) 2005-06 Ben Fry and Casey Reas
   Copyright (c) 2003 Martin Gomez, Ateneo de Manila University
 
   This program is free software; you can redistribute it and/or modify

File: app/tools/CreateFont.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/tools/ExportFolder.java
Patch:
@@ -4,7 +4,7 @@
   ExportFolder - tool to export all sketches within a certain folder
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005- Ben Fry and Casey Reas
+  Copyright (c) 2005-06 Ben Fry and Casey Reas
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: core/PConstants.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or

File: core/PFont.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry & Casey Reas
+  Copyright (c) 2004-06 Ben Fry & Casey Reas
   Portions Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or

File: core/PGraphics.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or

File: core/PGraphics2.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005 Ben Fry and Casey Reas
+  Copyright (c) 2005-06 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: core/PGraphics3.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or

File: core/PLine.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or

File: core/PMatrix.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2005 Ben Fry and Casey Reas
+  Copyright (c) 2005-06 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: core/PPolygon.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or

File: core/PSound.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005 Ben Fry and Casey Reas
+  Copyright (c) 2005-06 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: core/PSound2.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2005 Ben Fry and Casey Reas
+  Copyright (c) 2005-06 Ben Fry and Casey Reas
 
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public

File: core/PTriangle.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This library is free software; you can redistribute it and/or

File: app/Base.java
Patch:
@@ -3,7 +3,7 @@
 /*
   Part of the Processing project - http://processing.org
 
-  Copyright (c) 2004-05 Ben Fry and Casey Reas
+  Copyright (c) 2004-06 Ben Fry and Casey Reas
   Copyright (c) 2001-04 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/EditorListener.java
Patch:
@@ -114,7 +114,7 @@ public boolean keyPressed(KeyEvent event) {
     if (!editor.sketch.modified) {
       if ((code == KeyEvent.VK_BACK_SPACE) || (code == KeyEvent.VK_TAB) ||
           (code == KeyEvent.VK_ENTER) || ((c >= 32) && (c < 128))) {
-        editor.sketch.setModified();
+        editor.sketch.setModified(true);
       }
     }
 

File: app/FindReplace.java
Patch:
@@ -329,7 +329,7 @@ public void replace() {
     editor.textarea.setSelectedText(replaceField.getText());
     //editor.setSketchModified(true);
     //editor.sketch.setCurrentModified(true);
-    editor.sketch.setModified();
+    editor.sketch.setModified(true);
 
     // don't allow a double replace
     replaceButton.setEnabled(false);

File: app/tools/AutoFormat.java
Patch:
@@ -919,7 +919,7 @@ else if(tabs > 0)
         // replace with new bootiful text
         // selectionEnd hopefully at least in the neighborhood
         editor.setText(formattedText, selectionEnd, selectionEnd);
-        editor.sketch.setModified();
+        editor.sketch.setModified(true);
 
         // warn user if there are too many parens in either direction
         if (paren != 0) {

File: app/Editor.java
Patch:
@@ -1586,6 +1586,7 @@ public void handleSave(boolean force) {
     } else {
       SwingUtilities.invokeLater(new Runnable() {
           public void run() {
+            handleSave2();
           }
         });
     }

File: app/EditorButtons.java
Patch:
@@ -357,7 +357,7 @@ public void componentHidden(ComponentEvent e) {
       break;
 
     case SAVE:
-      editor.handleSave();
+      editor.handleSave(false);
       break;
 
     case EXPORT:

File: app/EditorStatus.java
Patch:
@@ -416,7 +416,7 @@ public void actionPerformed(ActionEvent e) {
     } else if (e.getSource() == yesButton) {
       // answer was in response to "save changes?"
       unprompt();
-      editor.handleSave();
+      editor.handleSave(true);
       editor.checkModified2();
 
     } else if (e.getSource() == cancelButton) {

File: app/Sketch.java
Patch:
@@ -2254,8 +2254,10 @@ public boolean exportApplication(int exportPlatform) throws Exception {
       // isn't used when exporting for unix
       ps.print("#!/bin/sh\n\n");
       ps.print("APPDIR=`dirname $0`\n");
-      ps.print("LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$APPDIR\n");
+      // another fix for bug #234
+      //ps.print("LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$APPDIR\n");
       ps.print("java " + Preferences.get("run.options") +
+               " -Djava.library.path=$APPDIR" +
                " -cp " + exportClassPath +
                " " + this.name + "\n");
 

File: core/PGraphics.java
Patch:
@@ -2430,8 +2430,8 @@ public void rotateY(float angle) {
 
 
   /**
-   * Rotate around the z axis. rotate() and rotateZ() are the same,
-   * it's just that it make sense to have rotate() and then rotateX()
+   * Rotate around the z axis. The functions rotate() and rotateZ() are
+   * the same, it's just that it make sense to have rotate() and then rotateX()
    * and rotateY() when running in 3D; nor does it make sense to use
    * a function called rotateZ() if you're only doing things in 2D.
    * so we just decided to have them both be the same.

File: core/PImage.java
Patch:
@@ -799,6 +799,7 @@ else if (format == ARGB)
 
 
   /**
+   * Optimized code for building the blur kernel.
    * further optimized blur code (approx. 15% for radius=20)
    * bigger speed gains for larger radii (~30%)
    * added support for various image types (ALPHA, RGB, ARGB)

File: core/PGraphics.java
Patch:
@@ -594,6 +594,7 @@ public void endFrame() {  // ignore
    */
   public void defaults() {  // ignore
     //System.out.println("PGraphics.defaults() " + width + " " + height);
+
     colorMode(RGB, TFF);
     fill(TFF);
     stroke(0);

File: core/PApplet.java
Patch:
@@ -534,6 +534,9 @@ public void stop() {
     if (thread == null) return;
     thread = null;
 
+    // call to shut down renderer, in case it needs it (pdf does)
+    if (g != null) g.dispose();
+
     disposeMethods.handle();
   }
 
@@ -1175,9 +1178,6 @@ synchronized public void paint(Graphics screen) {
       }
 
     } catch (Exception e) {
-      // formerly in kjcapplet, now just checks to see
-      // if someone wants to leech off errors
-
       // note that this will not catch errors inside setup()
       // those are caught by the PdeRuntime
 

File: app/tools/Archiver.java
Patch:
@@ -35,7 +35,7 @@ public class Archiver {
   Editor editor;
 
   // someday these will be settable
-  boolean useDate = false;
+  boolean useDate = true; //false;
   int digits = 3;
 
   NumberFormat numberFormat;

File: core/PApplet.java
Patch:
@@ -878,7 +878,8 @@ public void size(int iwidth, int iheight, String renderer) {
 
     // if the default renderer is just being resized,
     // restore it to its default values
-    g.defaults();
+    //g.defaults();
+    // no, otherwise fonts that were set in setup() will go away
 
     Object methodArgs[] =
       new Object[] { new Integer(width), new Integer(height) };

File: app/Base.java
Patch:
@@ -315,7 +315,8 @@ static public File getBuildFolder() {
       } else {
         //File folder = new File(getTempFolder(), "build");
         //if (!folder.exists()) folder.mkdirs();
-        buildFolder = getTempFolder("build");
+        buildFolder = createTempFolder("build");
+        buildFolder.deleteOnExit();
       }
     }
     return buildFolder;
@@ -329,7 +330,7 @@ static public File getBuildFolder() {
    * Modified for revision 0094 to actually make the folder randomized
    * to avoid conflicts in multi-user environments. (Bug 177)
    */
-  static public File getTempFolder(String name) {
+  static public File createTempFolder(String name) {
     try {
       File folder = File.createTempFile(name, null);
       //String tempPath = ignored.getParent();

File: core/PApplet.java
Patch:
@@ -2951,8 +2951,8 @@ public PFont loadFont(String filename) {
       return new PFont(input);
 
     } catch (Exception e) {
-      die("Could not load font " + filename + "\n" +
-          "Make sure that the font has been copied\n" +
+      die("Could not load font " + filename + ". " +
+          "Make sure that the font has been copied " +
           "to the data folder of your sketch.", e);
     }
     return null;

File: app/Base.java
Patch:
@@ -119,6 +119,9 @@ public Base() {
       e.printStackTrace();
     }
 
+    // use native popups so they don't look so crappy on osx
+    JPopupMenu.setDefaultLightWeightPopupEnabled(false);
+
     // build the editor object
     editor = new Editor();
 

File: app/Runner.java
Patch:
@@ -302,7 +302,9 @@ public void keyPressed(KeyEvent e) {
     applet.setBounds((windowW - applet.width)/2,
                      insets.top + (usableH - applet.height) / 2,
                      applet.width, applet.height);
-                     //windowW, windowH);
+
+    // handle frame resizing events
+    applet.setupFrameResizeListener();
 
     applet.setVisible(true);  // no effect
     if (windowLocation != null) {

File: app/EditorStatus.java
Patch:
@@ -373,6 +373,7 @@ protected void setButtonBounds() {
     int noLeft     = cancelLeft - eachButton;
     int yesLeft    = noLeft     - eachButton;
 
+    System.out.println("setting button height to " + Preferences.BUTTON_HEIGHT);
     yesButton.setLocation(yesLeft, top);
     noButton.setLocation(noLeft, top);
     cancelButton.setLocation(cancelLeft, top);

File: app/Preferences.java
Patch:
@@ -72,8 +72,9 @@ public class Preferences extends JComponent {
   static final String PROMPT_BROWSE  = "Browse";
 
   // mac needs it to be 70, windows needs 66, linux needs 76
-
   static int BUTTON_WIDTH  = 76;
+
+  //
   static int BUTTON_HEIGHT = 24;
 
   // value for the size bars, buttons, etc
@@ -374,6 +375,7 @@ public void actionPerformed(ActionEvent e) {
     pain.add(button);
     d2 = button.getPreferredSize();
     BUTTON_HEIGHT = d2.height;
+    System.out.println("changing button height to " + BUTTON_HEIGHT);
 
     // smoosh up to the line before
     //top -= BUTTON_HEIGHT;

File: app/Runner.java
Patch:
@@ -297,7 +297,8 @@ public void keyPressed(KeyEvent e) {
     int usableH = windowH - insets.top - insets.bottom;
     applet.setBounds((windowW - applet.width)/2,
                      insets.top + (usableH - applet.height) / 2,
-                     windowW, windowH);
+                     applet.width, applet.height);
+                     //windowW, windowH);
 
     applet.setVisible(true);  // no effect
     if (windowLocation != null) {

File: app/Editor.java
Patch:
@@ -633,7 +633,7 @@ protected JMenu buildToolsMenu() {
 
     item = newJMenuItem("Auto Format", 'T', false);
     item.addActionListener(new ActionListener() {
-        public void actionPerformed(ActionEvent e) {
+        synchronized public void actionPerformed(ActionEvent e) {
           new AutoFormat(Editor.this).show();
           //handleBeautify();
         }

File: app/tools/AutoFormat.java
Patch:
@@ -194,7 +194,7 @@ public void comment() {
     c = string[j++] = getchr(); // extra char
     while (done == 0) {
       c = string[j++] = getchr();
-      while(c != '/') {
+      while ((c != '/') && (j < string.length)) {
         if(c == '\n' || c == '\r') {
           lineNumber++;
           putcoms();
@@ -1008,4 +1008,4 @@ public int lookup_com (String keyword)
     }
     return (1);
   }
-}
\ No newline at end of file
+}

File: app/Sketch.java
Patch:
@@ -2193,7 +2193,7 @@ public boolean exportApplication(int exportPlatform) throws Exception {
     } else {
       for (int i = 0; i < jarList.length; i++) {
         if (i != 0) exportClassPath.append(":");
-        exportClassPath.append("lib/" + jarList[i]);
+        exportClassPath.append("$APPDIR/lib/" + jarList[i]);
       }
     }
 
@@ -2248,6 +2248,8 @@ public boolean exportApplication(int exportPlatform) throws Exception {
       // do the newlines explicitly so that windows CRLF
       // isn't used when exporting for unix
       ps.print("#!/bin/sh\n\n");
+      ps.print("APPDIR=`dirname $0`\n");
+      ps.print("LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$APPDIR\n");
       ps.print("java " + Preferences.get("run.options") +
                " -cp " + exportClassPath +
                " " + this.name + "\n");

File: app/Runner.java
Patch:
@@ -234,7 +234,8 @@ public void startInternal(Point windowLocation) throws Exception {
     applet.init();
     //applet.start();
 
-    while ((applet.width == 0) && !applet.finished) {
+    //while ((applet.width == 0) && !applet.finished) {
+    while ((applet.defaultSize) && !applet.finished) {
       try {
         if (applet.exception != null) {
           throw new RunnerException(applet.exception.getMessage());

File: core/PGraphics.java
Patch:
@@ -2166,6 +2166,7 @@ public void text(String str, float x1, float y1, float x2, float y2) {
         }
         lineStart = index + 1;
         wordStart = lineStart;
+        runningX = x1;  // fix for bug 188
         currentY += textLeading;
         //if (currentY > boxY2) return;  // box is now full
         if (currentY > y2) return;  // box is now full

File: core/PPolygon.java
Patch:
@@ -177,7 +177,7 @@ public void render() {
     pixels = parent.pixels;
     //zbuffer = parent.zbuffer;
 
-    noDepthTest = parent.hints[NO_DEPTH_TEST]; //!parent.depthTest;
+    noDepthTest = parent.hints[DISABLE_DEPTH_TEST];
     smooth = parent.smooth;
 
     // by default, text turns on smooth for the textures

File: core/PTriangle.java
Patch:
@@ -232,7 +232,7 @@ public void reset() {
     m_stencil = parent.stencil;
     m_zbuffer = parent.zbuffer;
 
-    noDepthTest = parent.hints[NO_DEPTH_TEST];
+    noDepthTest = parent.hints[DISABLE_DEPTH_TEST];
 
     // other things to reset
 

File: app/Runner.java
Patch:
@@ -228,7 +228,7 @@ public void startInternal(Point windowLocation) throws Exception {
 
     applet.leechErr = leechErr;
     //applet.folder = sketch.folder.getAbsolutePath();
-    applet.path = sketch.folder.getAbsolutePath();
+    applet.sketchPath = sketch.folder.getAbsolutePath();
     applet.frame = (Frame) window;
 
     applet.init();

File: app/Base.java
Patch:
@@ -50,8 +50,8 @@
  * files and images, etc) that comes from that.
  */
 public class Base {
-  static final int VERSION = 95;
-  static final String VERSION_NAME = "0095 Beta";
+  static final int VERSION = 96;
+  static final String VERSION_NAME = "0096 Beta";
 
   /**
    * Path of filename opened on the command line,

File: core/PImage.java
Patch:
@@ -1990,7 +1990,7 @@ static public boolean saveTGA(OutputStream output, int pixels[],
    * Save this image to disk. This method will save to the "current"
    * folder, which when running inside the PDE will be the location
    * of the Processing application, not the sketch folder. To save
-   * inside the sketch folder, use the variable savePath from PApplet,
+   * inside the sketch folder, use the function savePath from PApplet,
    * or use saveFrame() instead.
    */
   public void save(String filename) {

File: core/PApplet.java
Patch:
@@ -719,6 +719,7 @@ public void size(int iwidth, int iheight) {
       size(iwidth, iheight, g.getClass().getName());
 
     } else {
+      // create a JAVA2D renderer (the current default)
       if (PApplet.javaVersion >= 1.3f) {
         try {
           Class c = Class.forName(JAVA2D);
@@ -794,6 +795,7 @@ public void size(int iwidth, int iheight, String renderer) {
 
       this.width = iwidth;
       this.height = iheight;
+      defaultSize = false;
 
       // make the applet itself larger.. it's a subclass of Component,
       // so this is important for when it's embedded inside another app.

File: core/PApplet.java
Patch:
@@ -3478,7 +3478,7 @@ public String savePath(String where) {
    * Return a full path to an item in the data folder.
    */
   public String dataPath(String where) {
-    return path + File.separator + "data" + where;
+    return path + File.separator + "data" + File.separator + where;
   }
 
 

File: opengl/PGraphicsGL.java
Patch:
@@ -1593,13 +1593,15 @@ public void smooth() {
     gl.glEnable(GL.GL_POINT_SMOOTH);
     gl.glEnable(GL.GL_LINE_SMOOTH);
     gl.glEnable(GL.GL_POLYGON_SMOOTH);
+    smooth = true;
   }
 
 
   public void noSmooth() {
     gl.glDisable(GL.GL_POINT_SMOOTH);
     gl.glDisable(GL.GL_LINE_SMOOTH);
     gl.glDisable(GL.GL_POLYGON_SMOOTH);
+    smooth = false;
   }
 
 

File: app/Runner.java
Patch:
@@ -227,7 +227,8 @@ public void startInternal(Point windowLocation) throws Exception {
     window.pack(); // to get a peer, size set later, need for insets
 
     applet.leechErr = leechErr;
-    applet.folder = sketch.folder.getAbsolutePath();
+    //applet.folder = sketch.folder.getAbsolutePath();
+    applet.path = sketch.folder.getAbsolutePath();
     applet.frame = (Frame) window;
 
     applet.init();

File: app/Sketchbook.java
Patch:
@@ -23,8 +23,6 @@
 
 package processing.app;
 
-//import processing.core.PApplet;
-
 import java.awt.*;
 import java.awt.event.*;
 import java.io.*;

File: core/PImage.java
Patch:
@@ -290,7 +290,9 @@ public void updatePixels() {
   /**
    * Mark the pixels in this region as needing an update.
    * <P>
-   * This doesn't take into account
+   * This is not currently used by any of the renderers, however the api
+   * is structured this way in the hope of being able to use this to
+   * speed things up in the future.
    * <P>
    * Note that when using imageMode(CORNERS),
    * the x2 and y2 positions are non-inclusive.

File: video/Movie.java
Patch:
@@ -133,7 +133,8 @@ public Movie(PApplet parent, String filename, int ifps) {
     try {
       try {
         // look inside the sketch folder (if set)
-        String location = parent.folder + File.separator + "data";
+        //String location = parent.path + File.separator + "data";
+        String location = parent.dataPath("data");
         File file = new File(location, filename);
         if (file.exists()) {
           movie = fromDataRef(new DataRef(new QTFile(file)));

File: core/PGraphics.java
Patch:
@@ -1736,8 +1736,9 @@ public float textDescent() {
   public void textFont(PFont which) {
     if (which != null) {
       textFont = which;
-      textSize(which.size);
       textFontNative = which.font;
+      textFontNativeMetrics = null;
+      textSize(which.size);
 
     } else {
       throw new RuntimeException("a null PFont was passed to textFont()");

File: app/Base.java
Patch:
@@ -50,8 +50,8 @@
  * files and images, etc) that comes from that.
  */
 public class Base {
-  static final int VERSION = 93;
-  static final String VERSION_NAME = "0093 Beta";
+  static final int VERSION = 94;
+  static final String VERSION_NAME = "0094 Beta";
 
   /**
    * Path of filename opened on the command line,

File: opengl/PGraphicsGL.java
Patch:
@@ -939,8 +939,9 @@ protected float textWidthImpl(char buffer[], int start, int stop) {
    */
   protected void textCharImpl(char ch, float x, float y) {
     if ((textMode == SHAPE) && (textFontNative == null)) {
-      System.err.println("textMode(SHAPE) is disabled because the font " +
-                         "\"" + textFont.name + "\" is not available.");
+      throw new RuntimeException("textMode(SHAPE) is disabled " +
+                                 "because the font \"" + textFont.name +
+                                 "\" is not available.");
     }
     if ((textMode != SHAPE) || (textFontNative == null)) {
       super.textCharImpl(ch, x, y);

File: core/PConstants.java
Patch:
@@ -113,6 +113,9 @@ public interface PConstants {
   static final int POSTERIZE = 15;
   static final int THRESHOLD = 16;
 
+  // [toxi20050728] added 2 new filter types for CV tasks
+  static final int ERODE     = 17;
+  static final int DILATE    = 18;
 
   // blend mode keyword definitions
 

File: core/PApplet.java
Patch:
@@ -832,7 +832,7 @@ public PGraphics createGraphics(int iwidth, int iheight, String renderer) {
     if (renderer.equals(OPENGL)) {
       throw new RuntimeException("createGraphics() with OPENGL is not " +
                                  "supported. Use P3D instead.");
-  }
+    }
 
     PGraphics outgoing;
     try {

File: core/PGraphics.java
Patch:
@@ -2004,7 +2004,7 @@ public void text(String str, float x1, float y1, float x2, float y2) {
     float spaceWidth = textWidth(' ');
     float runningX = x1; //boxX1;
     float currentY = y1; //boxY1;
-    float boxWidth = x2 - x2; //boxX2 - boxX1;
+    float boxWidth = x2 - x1; //boxX2 - boxX1;
 
     // lineX is the position where the text starts, which is adjusted
     // to left/center/right based on the current textAlign

File: core/PImage.java
Patch:
@@ -975,7 +975,7 @@ private void blit_resize(PImage img,
     if (srcX1 < 0) srcX1 = 0;
     if (srcY1 < 0) srcY1 = 0;
     if (srcX2 >= img.width) srcX2 = img.width - 1;
-    if (srcY2 >= img.width) srcY2 = img.height - 1;
+    if (srcY2 >= img.height) srcY2 = img.height - 1;
 
     int srcW = srcX2 - srcX1;
     int srcH = srcY2 - srcY1;

File: opengl/PGraphicsGL.java
Patch:
@@ -1057,8 +1057,8 @@ public void fill(float x, float y, float z, float a) {
   }
   */
 
-  protected void colorFill() {
-    super.colorFill();
+  protected void fillFromCalc() {
+    super.fillFromCalc();
     gl.glMaterialfv(GL.GL_FRONT_AND_BACK, GL.GL_AMBIENT_AND_DIFFUSE,
                     new float[] { calcR, calcG, calcB, calcA });
   }

File: core/PApplet.java
Patch:
@@ -5289,8 +5289,8 @@ static public void main(String args[]) {
       String folder = System.getProperty("user.dir");
       String name = null;
       boolean present = false;
-      Color backgroundColor = Color.BLACK;
-      Color stopColor = Color.GRAY;
+      Color backgroundColor = Color.black; //BLACK;
+      Color stopColor = Color.gray; //GRAY;
       GraphicsDevice displayDevice = null;
 
       String param = null, value = null;
@@ -5484,7 +5484,7 @@ public void mousePressed(MouseEvent e) {
         frame.setLayout(null);
         frame.add(applet);
 
-        if (backgroundColor == Color.BLACK) {
+        if (backgroundColor == Color.black) {  //BLACK) {
           // this means no bg color unless specified
           backgroundColor = SystemColor.control;
         }

File: core/PGraphics2.java
Patch:
@@ -99,7 +99,7 @@ public void resize(int iwidth, int iheight) {  // ignore
     allocate();
 
     // clear the screen with the old background color
-    background(backgroundColor);
+    //background(backgroundColor);
   }
 
 

File: core/PApplet.java
Patch:
@@ -738,7 +738,7 @@ public void size(int iwidth, int iheight, String renderer) {
     }
 
     String openglError =
-      "Before using OpenGL, you must first select " +
+      "Before using OpenGL, first select " +
       "Import Library > opengl from the Sketch menu.";
 
     try {

File: app/tools/CreateFont.java
Patch:
@@ -412,7 +412,7 @@ public void build() {
     try {
       Font instance = (Font) table.get(list[selection]);
       font = instance.deriveFont(Font.PLAIN, fontsize);
-      PFont f = new PFont(font, all ? null : PFont.DEFAULT_CHARSET, smooth);
+      PFont f = new PFont(font, smooth, all ? null : PFont.DEFAULT_CHARSET);
 
       // make sure the 'data' folder exists
       if (!targetFolder.exists()) targetFolder.mkdirs();

File: app/Preferences.java
Patch:
@@ -154,7 +154,7 @@ static public void init() {
     //File home = new File(System.getProperty("user.home"));
     //File processingHome = new File(home, "Processing");
     //preferencesFile = new File(home, PREFS_FILE);
-    preferencesFile = Base.getProcessingDataFile(PREFS_FILE);
+    preferencesFile = Base.getSettingsFile(PREFS_FILE);
 
     if (!preferencesFile.exists()) {
       // create a new preferences file if none exists

File: app/Compiler.java
Patch:
@@ -124,7 +124,7 @@ public boolean compile(Sketch sketch, String buildPath)
       command[baseCommand.length + i] =
         buildPath + File.separator + preprocNames[i];
     }
-    //PApplet.printarr(command);
+    //PApplet.println(command);
 
     /*
     String command[] = new String[baseCommand.length + sketch.codeCount];

File: app/Editor.java
Patch:
@@ -304,7 +304,7 @@ public void restorePreferences() {
                 windowW, windowH);
       // this will be invalid as well, so grab the new value
       Preferences.setInteger("last.divider.location",
-                                splitPane.getDividerLocation());
+                             splitPane.getDividerLocation());
     } else {
       setBounds(Preferences.getInteger("last.window.x"),
                 Preferences.getInteger("last.window.y"),

File: app/Runner.java
Patch:
@@ -122,6 +122,8 @@ public void startPresenting() throws Exception {
 
     params.add(PApplet.ARGS_EXTERNAL);
     params.add(PApplet.ARGS_PRESENT);
+    params.add(PApplet.ARGS_PRESENT_STOP_COLOR + "=" +
+               Preferences.get("run.present.stop.color"));
     params.add(PApplet.ARGS_BGCOLOR + "=" +
                Preferences.get("run.present.bgcolor"));
     params.add(PApplet.ARGS_DISPLAY + "=" +

File: app/Runner.java
Patch:
@@ -122,7 +122,7 @@ public void startPresenting() throws Exception {
 
     params.add(PApplet.ARGS_EXTERNAL);
     params.add(PApplet.ARGS_PRESENT);
-    params.add(PApplet.ARGS_PRESENT_BGCOLOR + "=" +
+    params.add(PApplet.ARGS_BGCOLOR + "=" +
                Preferences.get("run.present.bgcolor"));
     params.add(PApplet.ARGS_DISPLAY + "=" +
                Preferences.get("run.display"));

File: core/PGraphics2.java
Patch:
@@ -290,6 +290,8 @@ public void curveVertex(float x, float y) {
                        splineVertices[0], 0, VERTEX_FIELD_COUNT);
       System.arraycopy(splineVertices[DEFAULT_SPLINE_VERTICES - 2], 0,
                        splineVertices[1], 0, VERTEX_FIELD_COUNT);
+      System.arraycopy(splineVertices[DEFAULT_SPLINE_VERTICES - 1], 0,
+                       splineVertices[2], 0, VERTEX_FIELD_COUNT);
       splineVertexCount = 3;
     }
 

File: app/EditorHeader.java
Patch:
@@ -301,6 +301,9 @@ public void actionPerformed(ActionEvent e) {
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
           editor.sketch.renameCode();
+          if (editor.sketch.current == editor.sketch.code[0]) {
+            editor.sketchbook.rebuildMenus();
+          }
         }
       });
     menu.add(item);

File: app/Editor.java
Patch:
@@ -237,6 +237,7 @@ public void windowClosing(WindowEvent e) {
     document.addUndoableEditListener(new UndoableEditListener() {
         public void undoableEditHappened(UndoableEditEvent e) {
           if (undo != null) {
+            //System.out.println(e.getEdit());
             undo.addEdit(e.getEdit());
             undoAction.updateUndoState();
             redoAction.updateRedoState();
@@ -951,6 +952,7 @@ public void setText(String what, int selectionStart, int selectionEnd) {
   public void setText(String currentProgram,
                       int selectionStart, int selectionEnd,
                       UndoManager currentUndo) {
+    //System.out.println("setting text, changing undo");
     this.undo = null;
 
     //if (discardUndo) undo.discardAllEdits();

File: app/syntax/JEditTextArea.java
Patch:
@@ -1165,8 +1165,7 @@ public void select(int start, int end)
         painter.invalidateLineRange(selectionStartLine,selectionEndLine);
         painter.invalidateLineRange(newStartLine,newEndLine);
 
-        document.addUndoableEdit(new CaretUndo(
-                                               selectionStart,selectionEnd));
+        document.addUndoableEdit(new CaretUndo(selectionStart,selectionEnd));
 
         selectionStart = newStart;
         selectionEnd = newEnd;

File: app/Base.java
Patch:
@@ -51,7 +51,7 @@
  */
 public class Base {
   static final int VERSION = 87;
-  static final String VERSION_NAME = "0087 Beta";
+  static final String VERSION_NAME = "0088 Beta";
 
   /**
    * Path of filename opened on the command line,

File: app/Sketch.java
Patch:
@@ -298,7 +298,9 @@ public void renameCode() {
     renamingCode = true;
     String prompt = (current == code[0]) ?
       "New name for sketch:" : "New name for file:";
-    editor.status.edit(prompt, current.name);
+    String oldName =
+      (current.flavor == PDE) ? current.name : current.name + ".java";
+    editor.status.edit(prompt, oldName);
   }
 
 

File: app/Compiler.java
Patch:
@@ -260,14 +260,14 @@ public void message(String s) {
       if (fileIndex == 0) {  // main class, figure out which tab
         for (int i = 1; i < sketch.codeCount; i++) {
           if (sketch.code[i].flavor == Sketch.PDE) {
-            if (sketch.code[i].lineOffset < lineNumber) {
+            if (sketch.code[i].preprocOffset < lineNumber) {
               fileIndex = i;
               //System.out.println("i'm thinkin file " + i);
             }
           }
         }
         if (fileIndex != 0) {  // if found another culprit
-          lineNumber -= sketch.code[fileIndex].lineOffset;
+          lineNumber -= sketch.code[fileIndex].preprocOffset;
           //System.out.println("i'm sayin line " + lineNumber);
         }
       }

File: app/SketchCode.java
Patch:
@@ -43,7 +43,7 @@ public class SketchCode {
   //SketchHistory history;  // TODO add history information
 
   String preprocName;  // name of .java file after preproc
-  int lineOffset;  // where this code starts relative to the concat'd code
+  int preprocOffset;  // where this code starts relative to the concat'd code
 
 
   public SketchCode(String name, File file, int flavor) {

File: app/Runner.java
Patch:
@@ -469,7 +469,8 @@ synchronized public void message(String s) {
               // this may have a paren on the end, if so need to strip
               // down to just the digits
               int lastNumberIndex = colonIndex + 1;
-              while (Character.isDigit(fileAndLine.charAt(lastNumberIndex))) {
+              while ((lastNumberIndex < fileAndLine.length()) &&
+                     Character.isDigit(fileAndLine.charAt(lastNumberIndex))) {
                 lastNumberIndex++;
               }
               // lineIndex is 1-indexed, but editor wants zero-indexed

File: core/PGraphics.java
Patch:
@@ -2199,7 +2199,7 @@ public float screenZ(float x, float y, float z) {
    * coordinates of a shape.
    */
   public float modelX(float x, float y, float z) {
-    depthErrorXYZ("modelX");
+    depthError("modelX");
     return 0;
   }
 
@@ -2208,7 +2208,7 @@ public float modelX(float x, float y, float z) {
    * Returns the model space y value for an x, y, z coordinate.
    */
   public float modelY(float x, float y, float z) {
-    depthErrorXYZ("modelY");
+    depthError("modelY");
     return 0;
   }
 
@@ -2217,7 +2217,7 @@ public float modelY(float x, float y, float z) {
    * Returns the model space z value for an x, y, z coordinate.
    */
   public float modelZ(float x, float y, float z) {
-    depthErrorXYZ("modelZ");
+    depthError("modelZ");
     return 0;
   }
 

File: app/MessageSiphon.java
Patch:
@@ -77,6 +77,8 @@ public void run() {
         //if (e.getMessage().indexOf("Bad file descriptor") == -1) {
         //System.err.println("MessageSiphon err " + e);
         //e.printStackTrace();
+      } else {
+        e.printStackTrace();
       }
       thread = null;
     }

File: app/Sketch.java
Patch:
@@ -320,7 +320,8 @@ public void nameCode(String newName) {
       newFlavor = PDE;
 
     } else if (newName.endsWith(".java")) {
-      if (code[0] == current) {
+      // don't show this error if creating a new tab
+      if (renamingCode && (code[0] == current)) {
         Base.showWarning("Problem with rename",
                          "The main .pde file cannot be .java file.\n" +
                          "(It may be time for your to graduate to a\n" +

File: core/PGraphics.java
Patch:
@@ -2178,7 +2178,7 @@ public float modelZ(float x, float y, float z) {
 
 
   public void colorMode(int mode) {
-    colorMode = mode;
+    colorMode(mode, colorModeX, colorModeY, colorModeZ, colorModeA);
   }
 
 

File: app/EditorHeader.java
Patch:
@@ -325,7 +325,8 @@ public void actionPerformed(ActionEvent e) {
     JMenu unhide = new JMenu("Unhide");
     ActionListener unhideListener = new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          editor.sketch.unhideCode((String) (e.getActionCommand()));
+          String which = (String) e.getActionCommand();
+          editor.sketch.unhideCode(which);
           rebuildMenu();
         }
       };

File: core/PApplet.java
Patch:
@@ -6351,7 +6351,7 @@ public void pointLight(float red, float green, float blue,
 
   public void spotLight(float red, float green, float blue,
                         float x, float y, float z,
-                        float nx, float ny, float nz, 
+                        float nx, float ny, float nz,
                         float angle, float concentration) {
     if (recorder != null) recorder.spotLight(red, green, blue, x, y, z, nx, ny, nz, angle, concentration);
     g.spotLight(red, green, blue, x, y, z, nx, ny, nz, angle, concentration);

File: core/PGraphics.java
Patch:
@@ -425,7 +425,8 @@ public void defaults() {  // ignore
     stroke(0);
 
     strokeWeight(ONE);
-    strokeCap(SQUARE);
+    //strokeCap(SQUARE);
+    strokeCap(ROUND);
     strokeJoin(MITER);
 
     background(204);
@@ -2568,7 +2569,7 @@ public void pointLight(float red, float green, float blue,
 
   public void spotLight(float red, float green, float blue,
                         float x, float y, float z,
-                        float nx, float ny, float nz, 
+                        float nx, float ny, float nz,
                         float angle, float concentration) {
     depthError("spotLight");
   }

File: app/tools/CreateFont.java
Patch:
@@ -415,7 +415,7 @@ public void build() {
       // make sure the 'data' folder exists
       if (!targetFolder.exists()) targetFolder.mkdirs();
 
-      f.write(new FileOutputStream(new File(targetFolder, filename)));
+      f.save(new FileOutputStream(new File(targetFolder, filename)));
 
     } catch (IOException e) {
       JOptionPane.showMessageDialog(this,

File: net/Client.java
Patch:
@@ -129,6 +129,7 @@ public void dispose() {
     } catch (Exception e) {
       e.printStackTrace();
     }
+    thread = null;
     input = null;
     output = null;
 
@@ -145,7 +146,8 @@ public void dispose() {
   public void run() {
     while (Thread.currentThread() == thread) {
       try {
-        while (input.available() > 0) {  // this will block
+        while ((input != null) &&
+               (input.available() > 0)) {  // this will block
           synchronized (buffer) {
             if (bufferLast == buffer.length) {
               byte temp[] = new byte[bufferLast << 1];

File: app/Base.java
Patch:
@@ -50,8 +50,8 @@
  * files and images, etc) that comes from that.
  */
 public class Base {
-  static final int VERSION = 83;
-  static final String VERSION_NAME = "0083 Alpha";
+  static final int VERSION = 84;
+  static final String VERSION_NAME = "0084 Alpha";
 
   /**
    * Path of filename opened on the command line,

File: core/PGraphics.java
Patch:
@@ -2568,7 +2568,8 @@ public void pointLight(float red, float green, float blue,
 
   public void spotLight(float red, float green, float blue,
                         float x, float y, float z,
-                        float nx, float ny, float nz, float angle) {
+                        float nx, float ny, float nz, 
+                        float angle, float concentration) {
     depthError("spotLight");
   }
 

File: opengl/PGraphicsGL.java
Patch:
@@ -879,8 +879,9 @@ public void pointLight(float r, float g, float b,
 
   public void spotLight(float r, float g, float b,
                         float x, float y, float z,
-                        float nx, float ny, float nz, float angle) {
-    super.spotLight(r, g, b, x, y, z, nx, ny, nz, angle);
+                        float nx, float ny, float nz, 
+                        float angle, float concentration) {
+    super.spotLight(r, g, b, x, y, z, nx, ny, nz, angle, concentration);
     //int num = super.internalCreateSpotLight(lr, lg, lb, x, y, z, nx, ny, nz, angle);
     glLightNoAmbient(lightCount - 1);
     glLightPosition(lightCount - 1);

File: core/PApplet.java
Patch:
@@ -4706,7 +4706,8 @@ static final public String hex(int what, int digits) {
   }
 
   static final public int unhex(String what) {
-    return Integer.parseInt(what, 16);
+    // has to parse as a Long so that it'll work for numbers bigger than 2^31
+    return (int) (Long.parseLong(what, 16));
   }
 
   //

File: app/PdeSketch.java
Patch:
@@ -669,8 +669,8 @@ public boolean saveAs() throws IOException {
     // make sure the paths aren't the same
     if (newFolder.equals(folder)) {
       PdeBase.showWarning("You can't fool me",
-                          "The new sketch name and location are the same\n" +
-                          "as the old. I ain't not doin nuthin'.", null);
+                          "The new sketch name and location are the same as\n" +
+                          "the old. I ain't not doin nuthin' not now.", null);
       return false;
     }
 

File: core/PGraphics.java
Patch:
@@ -1789,7 +1789,7 @@ public void rotateZ(float angle) {
 
   public void rotate(float angle, float vx, float vy, float vz) {
     throw new RuntimeException("rotate(angle, x, y, z) " +
-                               "can only be used with depth()");
+                               "can only be used with P3D or OPENGL");
   }
 
 
@@ -1877,7 +1877,7 @@ public void applyMatrix(float n00, float n01, float n02, float n03,
                           float n20, float n21, float n22, float n23,
                           float n30, float n31, float n32, float n33) {
     throw new RuntimeException("applyMatrix() with a 4x4 matrix " +
-                               "can only be used with depth()");
+                               "can only be used with OPENGL or P3D");
   }
 
 

File: core/PMethods.java
Patch:
@@ -281,6 +281,8 @@ public void lookat(float eyeX, float eyeY, float eyeZ,
 
   public void printCamera();
 
+  public void printProjection();
+
   //
 
   public float screenX(float x, float y);

File: opengl/PGraphicsGL.java
Patch:
@@ -85,6 +85,7 @@ public void reshape(GLDrawable drawable,
 
     //System.out.println("creating PGraphicsGL 5");
 
+    //System.out.println("adding canvas listeners");
     canvas.addMouseListener(applet);
     canvas.addMouseMotionListener(applet);
     canvas.addKeyListener(applet);

File: opengl/PGraphicsGL.java
Patch:
@@ -136,7 +136,7 @@ public void requestDisplay(PApplet parent) {
       canvas.setNoAutoRedrawMode(true);
 
       // maybe this will help?
-      canvas.requestFocus();
+      //canvas.requestFocus();
 
       // done with this business
       displayed = true;
@@ -204,8 +204,8 @@ private void syncMatrices()
   }
 
 
-  protected void resetLights() {
-    super.resetLights();
+  public void clearLights() {
+    super.clearLights();
     for (int i = 0; i < MAX_LIGHTS; i++) {
       lightDisable(i);
     }

File: core/PApplet.java
Patch:
@@ -4852,7 +4852,6 @@ public void windowClosing(WindowEvent e) {
       }
 
       //System.out.println("showing frame");
-
       //System.out.println("applet requesting focus");
       applet.requestFocus(); // ask for keydowns
       //System.out.println("exiting main()");

File: opengl/PGraphicsGL.java
Patch:
@@ -135,6 +135,9 @@ public void requestDisplay(PApplet parent) {
       // updates.
       canvas.setNoAutoRedrawMode(true);
 
+      // maybe this will help?
+      canvas.requestFocus();
+
       // done with this business
       displayed = true;
     }

File: app/PdeMessageSiphon.java
Patch:
@@ -52,8 +52,11 @@ public void run() {
       String currentLine;
       while ((currentLine = streamReader.readLine()) != null) {
         // \n is added again because readLine() strips it out
+        //PdeEditorConsole.systemOut.println("messaging in");
         consumer.message(currentLine + "\n");
+        //PdeEditorConsole.systemOut.println("messaging out");
       }
+      //PdeEditorConsole.systemOut.println("messaging thread done");
       thread = null;
 
     } catch (NullPointerException npe) {

File: core/PGraphics2.java
Patch:
@@ -1015,6 +1015,7 @@ public void background(PImage image) {
    * even if noDepth() was called before draw() exited.
    */
   public void clear() {
+    //System.out.println("clearing " + PApplet.hex(backgroundColor));
     g2.setColor(new Color(backgroundColor));
     g2.fillRect(0, 0, width, height);
   }

File: core/PApplet.java
Patch:
@@ -1657,8 +1657,9 @@ public void saveFrame() {
     }
 
     //File file = new File(folder, "screen-" + nf(frame, 4) + ".tif");
-    save(savePath("screen-" + nf(frameCount, 4) + ".tif"));
+    //save(savePath("screen-" + nf(frameCount, 4) + ".tif"));
     //save("screen-" + nf(frame, 4) + ".tif");
+    save("screen-" + nf(frameCount, 4) + ".tif");
   }
 
 

File: app/PdeCompiler.java
Patch:
@@ -74,7 +74,7 @@ public boolean compile(PdeSketch sketch, String buildPath)
       // user.dir is folder containing P5 (and therefore jikes)
       // macosx needs the extra path info. linux doesn't like it, though
       // windows doesn't seem to care. write once, headache anywhere.
-      ((PdeBase.platform != PdeBase.MACOSX) ? "jikes" :
+      ((!PdeBase.isMacOS()) ? "jikes" :
        System.getProperty("user.dir") + File.separator + "jikes"),
 
       // this doesn't help much.. also java 1.4 seems to not support
@@ -359,7 +359,7 @@ public void message(String s) {
   static public String calcBootClassPath() {
     if (bootClassPath == null) {
       String additional = "";
-      if (PdeBase.platform == PdeBase.MACOSX) {
+      if (PdeBase.isMacOS()) {
         additional =
           contentsToClassPath(new File("/System/Library/Java/Extensions/"));
       }

File: app/PdeEditorConsole.java
Patch:
@@ -145,7 +145,7 @@ public PdeEditorConsole(PdeEditor editor) {
 
     // to fix ugliness.. normally macosx java 1.3 puts an
     // ugly white border around this object, so turn it off.
-    if (PdeBase.platform == PdeBase.MACOSX) {
+    if (PdeBase.isMacOS()) {
       setBorder(null);
     }
   }

File: app/PdeEditorFind.java
Patch:
@@ -94,8 +94,7 @@ public void actionPerformed(ActionEvent e) {
     buttons.setLayout(new FlowLayout());
 
     // ordering is different on mac versus pc
-    if ((PdeBase.platform == PdeBase.MACOSX) ||
-        (PdeBase.platform == PdeBase.MACOS9)) {
+    if (PdeBase.isMacOS()) {
       buttons.add(replaceButton = new JButton("Replace"));
       buttons.add(replaceAllButton = new JButton("Replace All"));
       buttons.add(findButton = new JButton("Find"));
@@ -112,7 +111,8 @@ public void actionPerformed(ActionEvent e) {
 
     // to fix ugliness.. normally macosx java 1.3 puts an
     // ugly white border around this object, so turn it off.
-    if (PdeBase.platform == PdeBase.MACOSX) {
+    //if (PdeBase.platform == PdeBase.MACOSX) {
+    if (PdeBase.isMacOS()) {
       buttons.setBorder(null);
     }
 

File: app/PdeEditorHeader.java
Patch:
@@ -366,14 +366,14 @@ public Dimension getPreferredSize() {
   }
 
   public Dimension getMinimumSize() {
-    if (PdeBase.platform == PdeBase.MACOSX) {
+    if (PdeBase.isMacOS()) {
       return new Dimension(300, PdePreferences.GRID_SIZE);
     }
     return new Dimension(300, PdePreferences.GRID_SIZE - 1);
   }
 
   public Dimension getMaximumSize() {
-    if (PdeBase.platform == PdeBase.MACOSX) {
+    if (PdeBase.isMacOS()) {
       return new Dimension(3000, PdePreferences.GRID_SIZE);
     }
     return new Dimension(3000, PdePreferences.GRID_SIZE - 1);

File: app/PdeEditorStatus.java
Patch:
@@ -239,7 +239,7 @@ protected void setup() {
 
       // !@#(* aqua ui #($*(( that turtle-neck wearing #(** (#$@)(
       // os9 seems to work if bg of component is set, but x still a bastard
-      if (PdeBase.platform == PdeBase.MACOSX) {
+      if (PdeBase.isMacOS()) {
         yesButton.setBackground(bgcolor[PROMPT]);
         noButton.setBackground(bgcolor[PROMPT]);
         cancelButton.setBackground(bgcolor[PROMPT]);

File: app/PdeSketch.java
Patch:
@@ -1153,9 +1153,9 @@ protected String build(String buildPath, String suggestedClassName)
     }
 
     // if running in opengl mode, this is gonna be external
-    if (PdePreferences.get("renderer").equals("opengl")) {
-      externalRuntime = true;
-    }
+    //if (PdePreferences.get("renderer").equals("opengl")) {
+    //externalRuntime = true;
+    //}
 
     // 2. run preproc on that code using the sugg class name
     //    to create a single .java file and write to buildpath

File: app/PdeSketchbook.java
Patch:
@@ -199,8 +199,7 @@ public String handleNew(boolean noPrompt,
 
     // jdk13 on osx, or jdk11
     // though apparently still available for 1.4
-    if ((PdeBase.platform == PdeBase.MACOS9) ||
-        (PdeBase.platform == PdeBase.MACOSX)) {
+    if (PdeBase.isMacOS()) {
       MRJFileUtils.setFileTypeAndCreator(newbieFile,
                                          MRJOSType.kTypeTEXT,
                                          new MRJOSType("Pde1"));

File: app/PdeBase.java
Patch:
@@ -45,7 +45,7 @@
  * files and images, etc) that comes from that.
  */
 public class PdeBase {
-  static final String VERSION = "0079 Alpha";
+  static final String VERSION = "0080 Alpha";
 
   static String openedAtStartup;
 

File: core/PApplet.java
Patch:
@@ -495,7 +495,7 @@ public void noLoop() {
       fpsLastMillis = 0;
 
       if (thread != null) {
-        //thread.interrupt();  // wake from sleep
+        thread.interrupt();  // wake from sleep
       }
     }
   }
@@ -576,7 +576,8 @@ public void paint(Graphics screen) {
     if (THREAD_DEBUG) println(Thread.currentThread().getName() +
                               "     5b enter paint sync");
 
-    synchronized (g) {
+    //synchronized (g) {
+    synchronized (glock) {
       if (THREAD_DEBUG) println(Thread.currentThread().getName() +
                                 "     5c inside paint sync");
       //System.out.println("5b paint has sync");

File: core/PFont.java
Patch:
@@ -530,7 +530,7 @@ protected void textImpl(char c, float x, float y, float z, PGraphics parent) {
       */
 
     } else {  // SCREEN_SPACE
-      parent.loadPixels();
+      //parent.loadPixels();
 
       int xx = (int) x + leftExtent[glyph];;
       int yy = (int) y - topExtent[glyph];
@@ -585,7 +585,7 @@ protected void textImpl(char c, float x, float y, float z, PGraphics parent) {
              (( a1 * fb + a2 * ( p2        & 0xff)) >> 8));
         }
       }
-      parent.updatePixels();
+      //parent.updatePixels();
     }
   }
 

File: core/PFont.java
Patch:
@@ -530,6 +530,8 @@ protected void textImpl(char c, float x, float y, float z, PGraphics parent) {
       */
 
     } else {  // SCREEN_SPACE
+      parent.loadPixels();
+
       int xx = (int) x + leftExtent[glyph];;
       int yy = (int) y - topExtent[glyph];
 
@@ -583,6 +585,7 @@ protected void textImpl(char c, float x, float y, float z, PGraphics parent) {
              (( a1 * fb + a2 * ( p2        & 0xff)) >> 8));
         }
       }
+      parent.updatePixels();
     }
   }
 

File: core/PLine.java
Patch:
@@ -94,10 +94,10 @@ public class PLine implements PConstants
   private float db;
   private float da;
 
-  private PGraphics parent;
+  private PGraphics3 parent;
 
 
-  public PLine(PGraphics g) {
+  public PLine(PGraphics3 g) {
     INTERPOLATE_Z = false;
 
     x_array = new float[2];

File: core/PTriangle.java
Patch:
@@ -182,7 +182,7 @@ public class PTriangle implements PConstants
   private int m_index;
 
   /** */
-  private PGraphics parent;
+  private PGraphics3 parent;
 
   /** */
   private boolean   m_culling;
@@ -193,7 +193,7 @@ public class PTriangle implements PConstants
   /** */
   private boolean   m_bilinear;
 
-  public PTriangle(PGraphics g) {
+  public PTriangle(PGraphics3 g) {
     //SCREEN_WIDTH = g.width;
     //SCREEN_HEIGHT = g.height;
     //SCREEN_WIDTH1 = SCREEN_WIDTH-1;

File: core/PSound.java
Patch:
@@ -49,7 +49,7 @@ public class PSound {
 
   //int length;
   int position;
-  int data[];
+  int data[];  // 16 bit, from -32768 to +32767
 
 
   public PSound() { }  // for 1.3 subclass

File: app/PdeSketch.java
Patch:
@@ -1576,11 +1576,11 @@ public boolean exportApplet(/*boolean replaceHtml*/) throws Exception {
     // if a file called 'export.txt' is in there, it contains
     // a list of the files that should be exported.
     // otherwise, all files are exported.
-    Enumeration enum = importedLibraries.elements();
-    while (enum.hasMoreElements()) {
+    Enumeration en = importedLibraries.elements();
+    while (en.hasMoreElements()) {
       // in the list is a File object that points the
       // library sketch's "library" folder
-      File libraryFolder = (File)enum.nextElement();
+      File libraryFolder = (File)en.nextElement();
       //System.out.println("exporting files from " + libFolder);
       File exportSettings = new File(libraryFolder, "export.txt");
       String exportList[] = null;

File: core/PFont.java
Patch:
@@ -1213,10 +1213,9 @@ public PFont(Font font, boolean all, boolean smooth) {
 
       for (int y = minY; y <= maxY; y++) {
         for (int x = minX; x <= maxX; x++) {
-          int value = 255 - (samples[y * mbox3 + x] & 0xff);
-          //int value = 255 - raster.getSample(x, y, 0);
+          int val = 255 - (samples[y * mbox3 + x] & 0xff);
           int pindex = (y - minY) * width[index] + (x - minX);
-          bitmaps[index].pixels[pindex] = value;
+          bitmaps[index].pixels[pindex] = val;
         }
       }
       index++;

File: app/PdeBase.java
Patch:
@@ -49,7 +49,7 @@ public class PdeBase {
 
   static String openedAtStartup;
 
-  static ClassLoader loader;
+  //static ClassLoader loader;
 
   PdeEditor editor;
 
@@ -144,7 +144,7 @@ public PdeBase() {
 
 
     // maybe?
-    loader = new PdeClassLoader();
+    //loader = new PdeClassLoader();
   }
 
 

File: core/PGraphics.java
Patch:
@@ -478,7 +478,7 @@ public void resize(int iwidth, int iheight) {  // ignore
     lightSpecularB = new float[MAX_LIGHTS];
 
     // reset the cameraMode if PERSPECTIVE or ORTHOGRAPHIC
-    // otherwise just hose the user if it's custom
+    // will just be ignored if CUSTOM, the user's hosed anyways
     if (depth) cameraMode(this.cameraMode);
   }
 
@@ -545,6 +545,8 @@ public void defaults() {
     textFont = null;
     //text_mode    = ALIGN_LEFT;
     //text_space   = OBJECT_SPACE;
+
+    noDepth();  // actually has effect of calling depth() on opengl
   }
 
 

File: core/PApplet.java
Patch:
@@ -767,6 +767,7 @@ public void run() {
             if (frameCount == 0) {
               //initGraphics();
               //createGraphics();
+              defaults();
               setup();
 
               this.pixels = g.pixels;

File: core/PGraphics.java
Patch:
@@ -425,7 +425,7 @@ public PGraphics(int iwidth, int iheight) {
     resize(iwidth, iheight);
 
     // init color/stroke/fill
-    defaults();
+    //defaults();
 
     // clear geometry for loading later
     //circleX = null;  // so that bagel knows to init these

File: app/PdeRuntime.java
Patch:
@@ -123,6 +123,7 @@ public void start(Point windowLocation) throws PdeException {
         processInput = new SystemOutSiphon(process.getInputStream());
         processError = new PdeMessageSiphon(process.getErrorStream(), this);
         processOutput = process.getOutputStream();
+
         //processOutput.write(' ');
         //processOutput.flush();
 
@@ -375,7 +376,7 @@ public void message(String s) {
     // this is PApplet sending a message (via System.out.println)
     // that signals that the applet has been quit.
     if (s.indexOf(PApplet.EXTERNAL_QUIT) == 0) {
-      System.out.println("external: quit");
+      //System.out.println("external: quit");
       editor.doClose();
       return;
     }
@@ -388,7 +389,7 @@ public void message(String s) {
       int left = Integer.parseInt(nums.substring(0, space));
       int top = Integer.parseInt(nums.substring(space + 1));
       editor.appletLocation = new Point(left, top);
-      System.out.println("external: move to " + left + " " + top);
+      //System.out.println("external: move to " + left + " " + top);
       return;
     }
 

File: core/PApplet.java
Patch:
@@ -202,7 +202,7 @@ public void init() {
     //loopMethod = true;
     looping = true;
     redraw = true;  // draw this guy once
-    firstMouseEvent = true;
+    //firstMouseEvent = true;
 
     /*
     // call setup for changed params

File: core/PApplet.java
Patch:
@@ -4029,6 +4029,7 @@ public void run() {
             }
             try {
               Thread.sleep(250);
+              //Thread.sleep(100);  // kick up latency for 0075?
             } catch (InterruptedException e) { }
           }
         }

File: app/PdeEditorHeader.java
Patch:
@@ -171,7 +171,7 @@ public void paintComponent(Graphics screen) {
     // disable rename on the first tab
     renameItem.setEnabled(sketch.current != sketch.code[0]);
 
-    int x = PdePreferences.GUI_SMALL;
+    int x = 0; //PdePreferences.GUI_SMALL;
     for (int i = 0; i < sketch.codeCount; i++) {
       PdeCode code = sketch.code[i];
 
@@ -364,10 +364,10 @@ public Dimension getPreferredSize() {
   }
 
   public Dimension getMinimumSize() {
-    return new Dimension(300, PdePreferences.GRID_SIZE - 1);
+    return new Dimension(300, PdePreferences.GRID_SIZE); // - 1);
   }
 
   public Dimension getMaximumSize() {
-    return new Dimension(3000, PdePreferences.GRID_SIZE - 1);
+    return new Dimension(3000, PdePreferences.GRID_SIZE); // - 1);
   }
 }

File: core/PApplet.java
Patch:
@@ -4112,10 +4112,10 @@ static public void main(String args[]) {
       applet.args = new String[argc];
       System.arraycopy(args, argc, applet.args, 0, argc);
 
-      System.out.println("calling applet.init");
+      //System.out.println("calling applet.init");
       applet.init();
       //applet.start();
-      System.out.println("done calling applet.init");
+      //System.out.println("done calling applet.init");
 
       Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
 

File: core/PGraphics.java
Patch:
@@ -405,7 +405,7 @@ public PGraphics(int iwidth, int iheight) {
    * Note that this will nuke any cameraMode() settings.
    */
   public void resize(int iwidth, int iheight) {  // ignore
-    System.out.println("resize " + iwidth + " " + iheight);
+    //System.out.println("resize " + iwidth + " " + iheight);
 
     width = iwidth;
     height = iheight;

File: core/PGraphics.java
Patch:
@@ -1187,6 +1187,7 @@ protected final void add_line(int a, int b) {
     lines[lineCount][INDEX] = -1;
 
     lines[lineCount][STROKE_MODE] = strokeCap | strokeJoin;
+    lines[lineCount][STROKE_WEIGHT] = (int) (strokeWeight + 0.5f); // hmm
     lineCount++;
 
     // mark this piece as being part of the current path

File: core/PImage.java
Patch:
@@ -163,6 +163,8 @@ public void modified() {
     if ((width2 == width) && (height2 == height)) {
       // image can be used by itself as the texture image
       tpixels = pixels;
+      twidth = width;
+      theight = height;
 
     } else {
       if ((width2 > twidth) || (height2 > theight)) {

File: core/PFont.java
Patch:
@@ -1047,13 +1047,13 @@ public PFont(Font font, boolean all, boolean smooth) {
       //PApplet.printarr(renderingHintsClass.getFields());
 
       Field antialiasingKeyField =
-        renderingHintsClass.getDeclaredField("KEY_ANTIALIASING");
+        renderingHintsClass.getDeclaredField("KEY_TEXT_ANTIALIASING");
       Object antialiasingKey =
         antialiasingKeyField.get(renderingHintsClass);
 
       Field antialiasField = smooth ?
-        renderingHintsClass.getField("VALUE_ANTIALIAS_ON") :
-        renderingHintsClass.getField("VALUE_ANTIALIAS_OFF");
+        renderingHintsClass.getField("VALUE_TEXT_ANTIALIAS_ON") :
+        renderingHintsClass.getField("VALUE_TEXT_ANTIALIAS_OFF");
       Object antialiasState =
         antialiasField.get(renderingHintsClass);
 

File: core/PFont.java
Patch:
@@ -609,8 +609,7 @@ public void text(String str, float boxX1, float boxY1, float boxZ,
         // boundary of a word
         float wordWidth = calcWidth(textBuffer, wordStart, index);
         if (runningX + wordWidth > boxX2) {
-          if ((runningX == boxX1) &&
-              (wordWidth > boxWidth)) {
+          if (runningX == boxX1) {
             // if this is the first word, and its width is
             // greater than the width of the text box,
             // then break the word where at the max width,
@@ -634,7 +633,7 @@ public void text(String str, float boxX1, float boxY1, float boxZ,
             // because multiple spaces don't count for shit when they're
             // at the end of a line like this.
 
-            //index = wordStop + 1;  // back that ass up
+            index = wordStop;  // back that ass up
             while ((index < length) &&
                    (textBuffer[index] == ' ')) {
               index++;

File: core/PApplet.java
Patch:
@@ -4546,8 +4546,8 @@ public void text(String s, float x, float y, float w, float h) {
   }
 
 
-  public void text(String s, float x, float y, float z, float w, float h) {
-     g.text(s, x, y, z, w, h);
+  public void text(String s, float x1, float y1, float z, float x2, float y2) {
+     g.text(s, x1, y1, z, x2, y2);
   }
 
 

File: core/PMethods.java
Patch:
@@ -189,7 +189,7 @@ public void image(PImage image,
 
   public void text(String s, float x, float y, float w, float h);
 
-  public void text(String s, float x, float y, float z, float w, float h);
+  public void text(String s, float x1, float y1, float z, float x2, float y2);
 
   public void text(int num, float x, float y);
 

File: app/PdeRuntime.java
Patch:
@@ -576,7 +576,9 @@ public void run() {
 
         } catch (Exception e) {
           //System.out.println("SystemOutSiphon: i just died in your arms tonight");
-          e.printStackTrace();
+          // on mac os x, this will spew a "Bad File Descriptor" ex
+          // each time an external app is shut down.
+          //e.printStackTrace();
           thread = null;
           //System.out.println("");
         }

File: app/PdePreferences.java
Patch:
@@ -261,6 +261,7 @@ public void actionPerformed(ActionEvent e) {
 
     exportLibraryBox = new JCheckBox("Enable advanced \"Library\" features" + 
                                      " (requires restart)");
+    exportLibraryBox.setEnabled(false);
     pain.add(exportLibraryBox);
     d = exportLibraryBox.getPreferredSize();
     exportLibraryBox.setBounds(left, top, d.width, d.height);

File: app/PdeRuntime.java
Patch:
@@ -90,8 +90,7 @@ public void start(Point windowLocation) throws PdeException {
            windowLocation.x + "," + windowLocation.y) :
           (PApplet.EXT_LOCATION + x1 + "," + y1);
 
-        System.out.println("library path is " + sketch.libraryPath);
-
+        //System.out.println("library path is " + sketch.libraryPath);
         String command[] = new String[] {
           //"cmd", "/c", "start", 
 

File: app/PdePreferences.java
Patch:
@@ -296,14 +296,14 @@ public void actionPerformed(ActionEvent e) {
     pain.add(textarea);
     */
     label = new JLabel("More preferences can be edited directly in the file");
-    label.setForeground(Color.GRAY);
+    label.setForeground(Color.gray);
     pain.add(label);
     d = label.getPreferredSize();
     label.setBounds(left, top, d.width, d.height);
     top += d.height; // + GUI_SMALL;
 
     label = new JLabel(preferencesFile.getAbsolutePath());
-    label.setForeground(Color.GRAY);
+    label.setForeground(Color.gray);
     pain.add(label);
     d = label.getPreferredSize();
     label.setBounds(left, top, d.width, d.height);

File: app/PdeRuntime.java
Patch:
@@ -381,9 +381,10 @@ public void message(String s) {
       return;
     }
 
+    // these are used for debugging, in case there are concerns
+    // that som errors aren't coming through properly
     //System.err.println("message " + s.length() + ":" + s);
-    // is this only for debugging, or?
-    if (s.length() > 2) System.err.println(s);
+    //if (s.length() > 2) System.err.println(s);
 
     // this is PApplet sending a message saying "i'm about to spew 
     // a stack trace because an error occurred during PApplet.run()"

File: app/PdeSketchbook.java
Patch:
@@ -322,6 +322,9 @@ public void rebuildMenus() {
       if (addLibraries(importMenu, new File(getSketchbookPath()))) {
         importMenu.addSeparator();
       }
+      if (addLibraries(importMenu, examplesFolder)) {
+        importMenu.addSeparator();
+      }
       addLibraries(importMenu, librariesFolder);
       //System.out.println("libraries cp is now " + librariesClassPath);
 

File: app/PdeFontBuilder.java
Patch:
@@ -27,10 +27,7 @@
 import java.awt.*;
 import java.awt.event.*;
 import java.io.*;
-//import java.net.*;
-//import java.text.*;
 import java.util.*;
-//import java.util.zip.*;
 
 import javax.swing.*;
 import javax.swing.border.*;

File: app/PdeSketchbook.java
Patch:
@@ -314,8 +314,8 @@ public void rebuildMenus() {
       buildMenu(popupMenu);
 
       // rebuild the "import library" menu
-      importMenu.removeAll();
       librariesClassPath = "";
+      importMenu.removeAll();
       if (addLibraries(importMenu, new File(getSketchbookPath()))) {
         importMenu.addSeparator();
       }

File: core/PApplet.java
Patch:
@@ -601,7 +601,6 @@ protected void handleMouseEvent(MouseEvent event) {
       mousePressed();
       break;
     case MouseEvent.MOUSE_RELEASED:
-      System.out.println("mouse released");
       mousePressed = false;
       mouseReleased();
       break;

File: core/PImage.java
Patch:
@@ -292,8 +292,7 @@ public void filter(int kind, float param) {
   public int get(int x, int y) {
     if ((x < 0) || (y < 0) || (x >= width) || (y >= height)) return 0;
     return (format == RGB) ? 
-      (pixels[y*width + x] & 0x00ffffff) : pixels[y*width + x];
-      //(pixels[y*width + x] & 0xff000000) : pixels[y*width + x];
+      (pixels[y*width + x] | 0xff000000) : pixels[y*width + x];
   }
 
 

File: core/PApplet.java
Patch:
@@ -539,9 +539,6 @@ public void nextFrame() {
     //finished = true;
     //}
 
-    pmouseX = mouseX;
-    pmouseY = mouseY;
-
     // internal frame counter
     frame++;
   }
@@ -583,6 +580,9 @@ protected void dequeueMouseEvents() {
    * overloaded to do something more useful.
    */
   protected void handleMouseEvent(MouseEvent event) {
+    pmouseX = mouseX;
+    pmouseY = mouseY;
+
     mouseX = event.getX();
     mouseY = event.getY();
     mouseEvent = event;

File: core/PGraphics.java
Patch:
@@ -89,9 +89,9 @@ public class PGraphics extends PImage
 
   // fill color
   boolean _fill, fill_alpha;
-  float fillR, fillG, fillB, fillA;
-  int fillRi, fillGi, fillBi, fillAi;
-  int fill;
+  public float fillR, fillG, fillB, fillA;
+  public int fillRi, fillGi, fillBi, fillAi;
+  public int fill;
 
   // stroke color
   boolean _stroke, stroke_alpha;

File: app/PdeCode.java
Patch:
@@ -35,6 +35,7 @@ public class PdeCode {
   //PdeHistory history;  // TODO add history information
 
   String preprocName;  // name of .java file after preproc
+  int lineOffset;  // where this code starts relative to the concat'd code
 
 
   public PdeCode(String name, File file, int flavor) {

File: app/PdeMessageSiphon.java
Patch:
@@ -39,7 +39,9 @@ public PdeMessageSiphon(InputStream stream, PdeMessageConsumer consumer) {
     this.consumer = consumer;
 
     thread = new Thread(this);
-    thread.setPriority(Thread.MIN_PRIORITY);
+    // don't set priority too low, otherwise exceptions won't
+    // bubble up in time (i.e. compile errors)
+    //thread.setPriority(Thread.MIN_PRIORITY);
     thread.start();
   }
 

File: app/PdeEditor.java
Patch:
@@ -988,7 +988,8 @@ class RunButtonWatcher implements Runnable {
     Thread thread;
 
     public RunButtonWatcher() {
-      thread = new Thread(this);
+      thread = new Thread(this, "run button watcher");
+      thread.setPriority(Thread.MIN_PRIORITY);
       thread.start();
     }
 

File: core/PGraphics.java
Patch:
@@ -2093,7 +2093,8 @@ public void endShape() {
         vertexCount++; // since it had already been read above
 
         v1[X] = v0[X]; v1[Y] = v0[Y]; v1[Z] = v0[Z];
-        v1[SR] = v0[SR]; v1[SG] = v0[SG]; v1[SB] = v0[SB];
+        v1[SR] = v0[SR]; v1[SG] = v0[SG]; 
+        v1[SB] = v0[SB]; v1[SA] = v0[SA];
       }
 
       // increment by two for individual lines

File: core/PPolygon.java
Patch:
@@ -142,9 +142,9 @@ public boolean redundantVertex(float x, float y, float z) {
 
     // vertexCount-1 is the current vertex that would be used
     // vertexCount-2 would be the previous feller
-    if ((Math.abs(vertices[vertexCount-2][MX] - x) < 0.0001f) &&
-        (Math.abs(vertices[vertexCount-2][MY] - y) < 0.0001f) &&
-        (Math.abs(vertices[vertexCount-2][MZ] - z) < 0.0001f)) {
+    if ((Math.abs(vertices[vertexCount-2][MX] - x) < EPSILON) &&
+        (Math.abs(vertices[vertexCount-2][MY] - y) < EPSILON) &&
+        (Math.abs(vertices[vertexCount-2][MZ] - z) < EPSILON)) {
       vertexCount--;
       return true;
     }

File: app/PdeRuntime.java
Patch:
@@ -400,7 +400,8 @@ public void message(String s) {
         //    "     at javatest.<init>(javatest.java:5)"
         // -> "javatest.<init>(javatest.java:5)"
         int afterAt = s.indexOf("at") + 3;
-        if (afterAt == -1) {
+        //if (afterAt == -1) {
+        if (afterAt == 2) {  // means indexOf was -1
           System.err.println(s);
           return;
         }

File: app/PdeSketch.java
Patch:
@@ -985,7 +985,8 @@ protected String build(String buildPath, String suggestedClassName)
     }
 
     // if 'data' folder is large, set to external runtime
-    if (PdeBase.calcFolderSize(dataFolder) > 768 * 1024) {  // if > 768k
+    if (dataFolder.exists() &&
+        PdeBase.calcFolderSize(dataFolder) > 768 * 1024) {  // if > 768k
       externalRuntime = true;
     }
 

File: app/PdePreprocessor.java
Patch:
@@ -81,7 +81,8 @@ public String write(String program, String buildPath, String name,
                       String extraImports[]) throws java.lang.Exception {
     // if the program ends with no CR or LF an OutOfMemoryError will happen.
     // not gonna track down the bug now, so here's a hack for it:
-    if (program.charAt(program.length()-1) != '\n') {
+    if ((program.length() > 0) &&
+        program.charAt(program.length()-1) != '\n') {
       program += "\n";
     }
 

File: app/PdeRuntime.java
Patch:
@@ -335,7 +335,7 @@ public void close() {
 
 
   public void message(String s) {
-    System.err.println("M" + s.length() + ":" + s);
+    //System.err.println("M" + s.length() + ":" + s);
     // this is PApplet sending a message (via System.out.println)
     // that signals that the applet has been quit.
     if (s.indexOf(PApplet.EXTERNAL_QUIT) == 0) {

File: app/PdeSketchbook.java
Patch:
@@ -248,7 +248,7 @@ public String handleOpen() {
     // TODO this doesn't seem to ever be used. AWESOME.
     fd.setFilenameFilter(new FilenameFilter() {
         public boolean accept(File dir, String name) {
-          System.out.println("check filter on " + dir + " " + name);
+          //System.out.println("check filter on " + dir + " " + name);
           return name.endsWith(".pde");
         }
       });

File: core/PGraphics.java
Patch:
@@ -3815,7 +3815,7 @@ private void curve_mode(int segments, float s) {
         c[i][j] /= 2f;
       }
     }
-    setup_spline_forward(detail, curve_forward);
+    setup_spline_forward(segments, curve_forward);
 
     // multiply the basis and forward diff matrices together
     // saves much time since this needn't be done for each curve

File: core/PApplet.java
Patch:
@@ -829,7 +829,7 @@ void cursor(PImage image, int hotspotX, int hotspotY) {
       createImage(new MemoryImageSource(image.width, image.height,
                                         image.pixels, 0, image.width));
 
-    Toolkit tk = Toolkit.getDefaultToolkit();
+    //Toolkit tk = Toolkit.getDefaultToolkit();
     Point hotspot = new Point(hotspotX, hotspotY);
     try {
       Method mCustomCursor = 

File: app/PdeEditor.java
Patch:
@@ -510,6 +510,7 @@ public void actionPerformed(ActionEvent e) {
           handleExport();
         }
       });
+    menu.add(item);
 
     menu.addSeparator();
 

File: app/PdeSketchbook.java
Patch:
@@ -332,6 +332,9 @@ protected boolean addSketches(JMenu menu, File folder) throws IOException {
     if (!folder.isDirectory()) return false;
 
     String list[] = folder.list();
+    // if a bad folder or something like that, this might come back null
+    if (list == null) return false;
+
     // alphabetize list, since it's not always alpha order
     // use cheapie bubble-style sort which should be fine
     // since not a tone of files, and things will mostly be sorted

File: app/PdeSketchbook.java
Patch:
@@ -239,7 +239,7 @@ static public String sanitizedName(String origName) {
   public String handleOpen() {
     // swing's file choosers are ass ugly, so we use the
     // native (awt peered) dialogs instead
-    FileDialog fd = new FileDialog(new Frame(), 
+    FileDialog fd = new FileDialog(editor, //new Frame(), 
                                    "Open a Processing sketch...", 
                                    FileDialog.LOAD);
     //if (handleOpenDirectory == null) {
@@ -249,8 +249,10 @@ public String handleOpen() {
     fd.setDirectory(PdePreferences.get("sketchbook.path"));
 
     // only show .pde files as eligible bachelors
+    // TODO this doesn't seem to ever be used. AWESOME.
     fd.setFilenameFilter(new FilenameFilter() {
         public boolean accept(File dir, String name) {
+          System.out.println("check filter on " + dir + " " + name);
           return name.endsWith(".pde");
         }
       });

File: app/PdeEditorButtons.java
Patch:
@@ -340,7 +340,7 @@ public void mouseReleased(MouseEvent e) {
       case RUN:    editor.handleRun(e.isShiftDown()); break;
       case STOP:   setState(RUN, INACTIVE, true); editor.handleStop(); break;
       case OPEN:   setState(OPEN, INACTIVE, true); break;
-      case NEW:    editor.handleNew(); break;
+      case NEW:    editor.handleNew(e.isShiftDown()); break;
       case SAVE:   editor.handleSave(); break;
       case EXPORT: editor.handleExport(); break;
     }

File: app/PdePreprocessor.java
Patch:
@@ -188,8 +188,8 @@ public String write(String program, String buildPath, String name,
     // output the code
     //
     PdeEmitter emitter = new PdeEmitter();
-    PrintStream stream = new PrintStream(
-      new FileOutputStream(buildPath + File.separator + name + ".java"));
+    File streamFile = new File(buildPath, name + ".java");
+    PrintStream stream = new PrintStream(new FileOutputStream(streamFile));
 
     writeHeader(stream, extraImports, name);
 

File: app/PdeEditor.java
Patch:
@@ -760,7 +760,7 @@ public void actionPerformed(ActionEvent e) {
         public void actionPerformed(ActionEvent e) {
           // TODO find next should only be enabled after a 
           // search has actually taken place
-          find.find();
+          find.find(true);
         }
       });
     menu.add(item);

File: app/PdeSketchbook.java
Patch:
@@ -114,7 +114,7 @@ public String handleNew(boolean startup) throws IOException {
     if (!startup) {
       // prompt for the filename and location for the new sketch
 
-      FileDialog fd = new FileDialog(new Frame(), 
+      FileDialog fd = new FileDialog(editor, //new Frame(), 
                                      //"Create new sketch named", 
                                      "Create sketch folder named:", 
                                      FileDialog.SAVE);

File: app/PdeCompiler.java
Patch:
@@ -183,8 +183,9 @@ public boolean compile(PdeSketch sketch, String buildPath)
    * and line number, which is then reported back to PdeEditor.
    */
   public void message(String s) {
-    //System.err.println("MSG: " + s);
-    System.err.print(s);
+    // This receives messages as full lines, so a newline needs 
+    // to be added as they're printed to the console.
+    System.err.println(s);
 
     // ignore cautions
     if (s.indexOf("Caution") != -1) return;

File: app/PdeCode.java
Patch:
@@ -73,9 +73,9 @@ public void save() throws IOException {
     //history.record(s, PdeHistory.SAVE);
 
     try {
-      System.out.println("saving to " + file);
-      System.out.println("stuff to save: " + program);
-      System.out.println("-------");
+      //System.out.println("saving to " + file);
+      //System.out.println("stuff to save: " + program);
+      //System.out.println("-------");
       PdeBase.saveFile(program, file);
 
     } catch (Exception e) {

File: app/PdeEditorHeader.java
Patch:
@@ -276,7 +276,7 @@ public void paintComponent(Graphics screen) {
    * Called when a new sketch is opened.
    */
   public void rebuild() {
-    System.out.println("rebuilding editor header");
+    //System.out.println("rebuilding editor header");
     rebuildMenu(); 
     repaint();
   }

File: app/PdeSketch.java
Patch:
@@ -227,7 +227,7 @@ public void load() {
   //public void setCurrentModified(boolean what) {
   //public void setModified(boolean what) {
   public void setModified() {
-    System.out.println("setting modified for " + current.program);
+    //System.out.println("setting modified for " + current.program);
     //modified = true;
     current.modified = true;
     //editor.header.repaint();

File: app/PdeEditorButtons.java
Patch:
@@ -71,7 +71,7 @@ public class PdeEditorButtons extends JComponent implements MouseInputListener {
   JPopupMenu popup;
 
   int buttonCount;
-  int state[];
+  int state[] = new int[BUTTON_COUNT];
   Image stateImage[];
   int which[]; // mapping indices to implementation
 
@@ -142,7 +142,7 @@ public void paintComponent(Graphics screen) {
       rollover = new Image[BUTTON_COUNT];
       active   = new Image[BUTTON_COUNT];
 
-      state = new int[BUTTON_COUNT];
+      //state = new int[BUTTON_COUNT];
 
       for (int i = 0; i < BUTTON_COUNT; i++) {
         inactive[i] = createImage(BUTTON_WIDTH, BUTTON_HEIGHT);

File: app/PdeEditorFind.java
Patch:
@@ -151,7 +151,7 @@ public void actionPerformed(ActionEvent e) {
 
     setBounds((screen.width - wide) / 2,
 	      (screen.height - high) / 2, wide, high);
-    show();
+    //show();
   }
 
 

File: app/PdeEditorHeader.java
Patch:
@@ -91,7 +91,7 @@ public class PdeEditorHeader extends JComponent /*implements MouseListener*/ {
   public PdeEditorHeader(PdeEditor eddie) { 
     this.editor = eddie; // weird name for listener
 
-    pieces = new Image[2][3];
+    pieces = new Image[STATUS.length][WHERE.length];
     for (int i = 0; i < 2; i++) {
       for (int j = 0; j < 4; j++) {
         pieces[i][j] = PdeBase.getImage("tab-" + STATUS[i] + "-" + 

File: app/PdeEditor.java
Patch:
@@ -562,15 +562,15 @@ protected JMenu buildSketchMenu() {
     item = newJMenuItem("Run", 'R');
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          doRun(false);
+          handleRun(false);
         }
       });
     menu.add(item);
 
     item = newJMenuItem("Present", 'R', true);
     item.addActionListener(new ActionListener() {
         public void actionPerformed(ActionEvent e) {
-          doRun(true);
+          handleRun(true);
         }
       });
     menu.add(item);
@@ -945,7 +945,7 @@ public void setText(String what, boolean discardUndo) {
   }
 
 
-  public void doRun(boolean present) {
+  public void handleRun(boolean present) {
     doClose();
     running = true;
     buttons.run();

File: app/PdeEditorStatus.java
Patch:
@@ -285,7 +285,7 @@ public void keyTyped(KeyEvent event) {
             int c = event.getKeyChar();
 
             if (c == KeyEvent.VK_ENTER) {  // accept the input
-              editor.skSaveAs2(editField.getText());
+              editor.handleSaveAs2(editField.getText());
               unedit();
               event.consume();
 

File: app/PdeRuntime.java
Patch:
@@ -80,7 +80,7 @@ public void start(Point windowLocation) throws PdeException {
         // using something like --external=e30,20 where the e stands for
         // exact. otherwise --external=x,y for just the regular positioning.
         String location = (windowLocation != null) ? 
-          (BApplet.EXACT_LOCATION + 
+          (BApplet.EXTERNAL_EXACT_LOCATION + 
            windowLocation.x + "," + windowLocation.y) : 
           (x1 + "," + y1);      
 
@@ -100,7 +100,8 @@ public void start(Point windowLocation) throws PdeException {
         processOutput = process.getOutputStream();
 
       } else {
-        Class c = Class.forName(className);
+        //Class c = Class.forName(className);
+        Class c = Class.forName(sketch.mainClassName);
         applet = (BApplet) c.newInstance();
 
         // replaces setRuntime with BApplet having leechErr [fry]

File: app/PdeSketch.java
Patch:
@@ -697,7 +697,7 @@ public boolean exportApplet(boolean replaceHtml) throws Exception {
 
     boolean writeHtml = true;
     if (appletDir.exists()) {
-      File htmlFile = new new File(appletDir, "index.html");
+      File htmlFile = new File(appletDir, "index.html");
       if (htmlFile.exists() && !replaceHtml) {
         writeHtml = false;
       }

File: app/PdeSketchbook.java
Patch:
@@ -240,7 +240,8 @@ public JMenu rebuildMenu() {
     menu.removeAll();
 
     try {
-      addSketches(menu, sketchbookFolder);
+      //addSketches(menu, new File(PdePreferences.get("sketchbook.path")));
+      addSketches(menu, new File(PdePreferences.get("sketchbook.path")));
       menu.addSeparator();
       addSketches(menu, examplesFolder);
 
@@ -255,7 +256,7 @@ public JMenu rebuildMenu() {
   }
 
 
-  protected boolean addSketches(File folder) throws IOException {
+  protected boolean addSketches(JMenu menu, File folder) throws IOException {
     // skip .DS_Store files, etc
     if (!folder.isDirectory()) return false;
 

File: app/PdeEditorFind.java
Patch:
@@ -121,7 +121,7 @@ public PdeEditorFind(PdeEditor editor) {
 
     setBounds((screen.width - wide) / 2,
 	      (screen.height - high) / 2, wide, high);
-    show();
+    //show();  // done byte PdeEditor instead
   }
 
 
@@ -151,7 +151,8 @@ public void find() {
     found = false;
 
     String search = findField.getText();
-    if (search.length() == 0) return;
+    // this will catch "find next" being called when no search yet
+    if (search.length() == 0) return;  
 
     String text = editor.textarea.getText();
 

File: app/PdeEditorHeader.java
Patch:
@@ -148,10 +148,12 @@ public void mousePressed(MouseEvent e) {
   }
 
 
+  /*
   public void reset() {
     sketchLeft = 0;
     repaint();
   }
+  */
 
 
   public void paintComponent(Graphics screen) {

File: app/PdeBase.java
Patch:
@@ -399,7 +399,8 @@ static public void saveFile(String contents, File location)
   }
 
 
-  static public void copyDir(File sourceDir, File targetDir) {
+  static public void copyDir(File sourceDir, 
+                             File targetDir) throws IOException {
     String files[] = sourceDir.list();
     for (int i = 0; i < files.length; i++) {
       if (files[i].equals(".") || files[i].equals("..")) continue;

File: app/PdeEditor.java
Patch:
@@ -122,7 +122,7 @@ public class PdeEditor extends JFrame
 
   // 
 
-  PdeHistory history;
+  //PdeHistory history;
   PdeSketchbook sketchbook;
   PdePreferences preferences;
   PdeEditorFind find;
@@ -827,7 +827,7 @@ static public JMenuItem newJMenuItem(String title,
     JMenuItem menuItem = new JMenuItem(title);
     int modifiers = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
     if (shift) modifiers |= ActionEvent.SHIFT_MASK;
-    menuItem.setAccelerator(KeyStroke.getKeyStroke(what, modifiers);
+    menuItem.setAccelerator(KeyStroke.getKeyStroke(what, modifiers));
     return menuItem;
   }
 

File: app/PdeBase.java
Patch:
@@ -4,9 +4,8 @@
   PdeBase - base class for the main processing application
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeCompiler.java
Patch:
@@ -4,9 +4,8 @@
   PdeCompiler - default compiler class that connects to jikes
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeCompilerJavac.java
Patch:
@@ -4,9 +4,8 @@
   PdeCompilerJavac - compiler interface to kjc.. someday this will go away
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeCompilerKjc.java
Patch:
@@ -4,9 +4,8 @@
   PdeCompilerKjc - compiler interface to kjc.. someday this will go away
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeEditorButtons.java
Patch:
@@ -4,9 +4,8 @@
   PdeEditorButtons - run/stop/etc buttons for the ide
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeEditorConsole.java
Patch:
@@ -4,9 +4,8 @@
   PdeEditorConsole - message console that sits below the program area
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeEditorHeader.java
Patch:
@@ -4,9 +4,8 @@
   PdeEditorHeader - panel that containing the sketch title
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeEditorStatus.java
Patch:
@@ -4,9 +4,8 @@
   PdeEditorStatus - panel containing status messages
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeException.java
Patch:
@@ -4,9 +4,8 @@
   PdeException - an exception with a line number attached
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeFontBuilder.java
Patch:
@@ -4,6 +4,7 @@
   PdeFontBuilder - gui interface to font creation heaven/hell
   Part of the Processing project - http://Proce55ing.net
 
+  Except where noted, code is written by Ben Fry and
   Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify

File: app/PdeKeywords.java
Patch:
@@ -4,9 +4,8 @@
   PdeKeywords - handles text coloring and links to html reference
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeMessageConsumer.java
Patch:
@@ -4,9 +4,8 @@
   PdeMessageConsumer - interface for dealing with parser/compiler output
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeMessageSiphon.java
Patch:
@@ -4,9 +4,8 @@
   PdeMessageSiphon - slurps up messages from compiler
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeMessageStream.java
Patch:
@@ -4,9 +4,8 @@
   PdeMessageStream - outputstream to handle stdout/stderr messages
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdePreferences.java
Patch:
@@ -4,9 +4,8 @@
   PdePreferences - controls user preferences and environment settings
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdePreprocessor.java
Patch:
@@ -4,9 +4,8 @@
   PdePreprocessor - default ANTLR-generated parser
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdePreprocessorOro.java
Patch:
@@ -4,9 +4,8 @@
   PdePreprocessorOro - current oro-based preprocessor (soon to be gone)
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeRuntime.java
Patch:
@@ -4,9 +4,8 @@
   PdeRuntime - runs compiled java applet
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeUpdater.java
Patch:
@@ -4,9 +4,8 @@
   PdeUpdater - self-updater code.. when was the last this worked?
   Part of the Processing project - http://Proce55ing.net
 
-  Copyright (c) 2001-03 
-  Ben Fry, Massachusetts Institute of Technology and 
-  Casey Reas, Interaction Design Institute Ivrea
+  Except where noted, code is written by Ben Fry and
+  Copyright (c) 2001-03 Massachusetts Institute of Technology
 
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by

File: app/PdeMessageSiphon.java
Patch:
@@ -55,6 +55,9 @@ public void run() {
         consumer.message(currentLine);
         //System.err.println(currentLine);
       }
+    } catch (NullPointerException npe) {
+      // ignore this guy, since it's prolly just shutting down
+
     } catch (Exception e) { 
       // on linux, a "bad file descriptor" message comes up when
       // closing an applet that's being run externally.

File: app/PdeEditor.java
Patch:
@@ -461,7 +461,7 @@ public void makeHistory(String program, int mode) {
       //JMenuItem menuItem = new JMenuItem(modeStr + " - " + readableDate);
       MenuItem menuItem = new MenuItem(modeStr + " - " + readableDate);
       menuItem.addActionListener(base.historyMenuListener);
-      base.historyMenu.insert(menuItem, 0);
+      base.historyMenu.insert(menuItem, 2);
 
       historyWriter.flush();
       historyWriter.close();

File: app/PdeRuntime.java
Patch:
@@ -130,10 +130,11 @@ public void start(Point windowLocation, PrintStream leechErr)
         // until it's finished rendering, otherwise the width/height
         // may not have been properly set.
         if (drawMode) {
+          //System.out.println("draw mode");
           while ((applet.frame != 1) && (!applet.finished)) {
             try {
               //System.out.println("waiting to complete drawing");
-              Thread.sleep(5);
+              Thread.sleep(100);
             } catch (InterruptedException e) { }
           }
         }

File: app/PdePreprocessor.java
Patch:
@@ -32,12 +32,14 @@ public class PdePreprocessor {
 
   static final String applet_imports[] = {
     "java.applet", "java.awt", "java.awt.image", "java.awt.event",
-    "java.io", "java.net", "java.text", "java.util", "java.util.zip"
+    "java.io", "java.net", "java.text", "java.util", "java.util.zip",
+    "netscape.javascript"
   };
 
   static final String application_imports[] = {
     "java.applet", "java.awt", "java.awt.image", "java.awt.event",
     "java.io", "java.net", "java.text", "java.util", "java.util.zip",
+    "netscape.javascript",
 #ifndef RXTX
     "javax.comm",
 #else

File: app/PdeRuntime.java
Patch:
@@ -298,7 +298,7 @@ public void keyPressed(KeyEvent e) {
       // this handles errors that happen inside setup()
 
       // mod by fry for removal of KjcEngine
-      //newMessage = true;
+      applet.finished = true;
       leechErr.println(BApplet.LEECH_WAKEUP);
       e.printStackTrace(this.leechErr);
     }

File: app/PdeRuntime.java
Patch:
@@ -130,7 +130,7 @@ public void start(Point windowLocation, PrintStream leechErr)
         // until it's finished rendering, otherwise the width/height
         // may not have been properly set.
         if (drawMode) {
-          while (applet.frame != 1) {
+          while ((applet.frame != 1) && (!applet.finished)) {
             try {
               //System.out.println("waiting to complete drawing");
               Thread.sleep(5);
@@ -395,6 +395,7 @@ public void message(String s) {
     if (s.length() > 2) System.err.println(s);
 
     if (s.indexOf(BApplet.LEECH_WAKEUP) == 0) {
+      //System.err.println("got wakeup");
       newMessage = true;
       return;  // this line ignored
     }

File: app/PdeEditor.java
Patch:
@@ -711,6 +711,8 @@ public void doRun(boolean present) {
     //System.out.println("RUNNING");
     buttons.run();
 
+    for (int i = 0; i < 10; i++) System.out.println();
+
     if (externalEditor) {
       // history gets screwed by the open..
       String historySaved = historyLast;

File: app/PdeEditorButtons.java
Patch:
@@ -243,6 +243,9 @@ public void paint(Graphics screen) {
   }
 
   public void mouseMoved(MouseEvent e) {
+    // mouse events before paint();
+    if (state == null) return; 
+
     if (state[OPEN] != INACTIVE) {
       // avoid flicker, since there will probably be an update event
       setState(OPEN, INACTIVE, false);

File: app/PdeFontBuilder.java
Patch:
@@ -141,6 +141,9 @@ public void valueChanged(ListSelectionEvent e) {
             font = new Font(list[selection], Font.PLAIN, fontsize);
             //System.out.println("setting font to " + font);
             sample.setFont(font);
+
+            String filenameSuggestion = list[selection].replace(' ', '_');
+            filenameField.setText(filenameSuggestion);
           }
         }
       });

File: app/PdeEditorConsole.java
Patch:
@@ -93,7 +93,7 @@ public void paintComponent(Graphics g) {
     Color fgColorOut = PdeBase.getColor("editor.console.fgcolor.output", 
                                         new Color(0xcc, 0xcc, 0xbb));
     Color fgColorErr = PdeBase.getColor("editor.console.fgcolor.error", 
-                                        new Color(0xff, 0xcc, 0x00));
+                                        new Color(0xff, 0x30, 0x00));
     Font font = PdeBase.getFont("editor.console.font", 
                                 new Font("Monospaced", Font.PLAIN, 11));
 

File: app/PdeEditor.java
Patch:
@@ -1313,8 +1313,7 @@ protected void handleExport(File appletDir, String exportSketchName,
           try {
             wide = Integer.parseInt(result.group(1).toString());
             high = Integer.parseInt(result.group(2).toString());
-
-            System.out.println("width " + wide + " high " + high);
+            //System.out.println("width " + wide + " high " + high);
 
           } catch (NumberFormatException e) {
 

File: app/PdePreprocessor.java
Patch:
@@ -175,7 +175,9 @@ public String writeJava(String name, boolean extendsNormal,
       stream.println("<?xml version=\"1.0\"?>");
       stream.println("<document>");
       OutputStreamWriter writer = new OutputStreamWriter(stream);
-      ((CommonAST)parserAST).xmlSerialize(writer);
+      if (parserAST != null) {
+        ((CommonAST)parserAST).xmlSerialize(writer);
+      }
       writer.flush();
       stream.println("</document>");
       writer.close();

File: app/PdeRuntime.java
Patch:
@@ -275,6 +275,8 @@ public void close() {
 
   public void message(String s) {
     //System.err.println("message " + s.length() + ":" + s);
+    if (s.length() > 2) System.err.println(s);
+
     if (s.indexOf(BApplet.LEECH_WAKEUP) == 0) {
       newMessage = true;
       return;  // this line ignored

File: app/PdePreprocessor.java
Patch:
@@ -164,7 +164,7 @@ public String writeJava(String name, boolean extendsNormal,
     writeFooter(stream);
     stream.close();
 
-    final boolean debug = true;
+    final boolean debug = false; //true;
 
     // if we're debugging, serialize the parse tree to an XML file.  can
     // be viewed usefully with Mozilla or IE

File: app/PdePreprocessor.java
Patch:
@@ -106,6 +106,7 @@ public String writeJava(String name, boolean extendsNormal,
 
     // create the filter for hidden tokens and specify which tokens to 
     // hide and which to copy to the hidden text
+    //
     filter = new TokenStreamCopyingHiddenTokenFilter(lexer);
     filter.hide(PdeRecognizer.SL_COMMENT);
     filter.hide(PdeRecognizer.ML_COMMENT);
@@ -129,7 +130,7 @@ public String writeJava(String name, boolean extendsNormal,
 
     // start parsing at the compilationUnit non-terminal
     //
-    parser.compilationUnit();
+    parser.pdeProgram();
 
     // get ready to traverse the AST
     //

File: app/PdeBase.java
Patch:
@@ -249,6 +249,8 @@ public void windowClosing(WindowEvent e) {
     menu.add(saveMenuItem);
     menu.add(saveAsMenuItem);
     menu.add(new MenuItem("Rename..."));
+    menu.addSeparator();
+
     menu.add(new MenuItem("Export to Web", new MenuShortcut('E')));
     item = new MenuItem("Export Application", new MenuShortcut('E', true));
     item.setEnabled(false);

File: app/PdePreprocessorOro.java
Patch:
@@ -33,6 +33,7 @@ public class PdePreprocessorOro extends PdePreprocessor {
 
   public PdePreprocessorOro(String program, String buildPath) {
     super(program, buildPath);
+    this.program = program;
   }
 
   // writes .java file into buildPath

File: app/PdeBase.java
Patch:
@@ -347,6 +347,7 @@ public void actionPerformed(ActionEvent e) {
 
     normalItem = new CheckboxMenuItem("Normal");
     rendererMenu.add(normalItem);
+    normalItem.setState(true);
     normalItem.addItemListener(new ItemListener() {
 	public void itemStateChanged(ItemEvent e) {
 	  openglItem.setState(false);

File: app/KjcEngine.java
Patch:
@@ -200,8 +200,9 @@ public String writeJava(String name, boolean kjc) {
       if (PdeBase.getBoolean("compiler.inline_web_colors", true)) {
 	// convert "= #cc9988" into "= 0xffcc9988"
 	//program = substipoot(program, "(=\\s*)\\#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])", "$1 0xff$2$3$4");
-	program = substipoot(program, "#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([;\\s])", "0xff$1$2$3$4");
-	program = substipoot(program, "#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([;\\s])", "0x$4$1$2$3$5");
+	//program = substipoot(program, "#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([;\\s])", "0xff$1$2$3$4");
+	//program = substipoot(program, "#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([;\\s])", "0x$4$1$2$3$5");
+	program = substipoot(program, "#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])", "0xff$1$2$3");
       }
 
       if ((program.indexOf("void setup()") != -1) ||

File: app/KjcApplet.java
Patch:
@@ -13,8 +13,8 @@ public void run() {
       super.run();
 
     } catch (Exception e) {
-      System.out.println("ex found in run");
-      //e.printStackTrace();
+      //System.out.println("ex found in run");
+      e.printStackTrace();
       //engine.error(e);
       engine.newMessage = true;
       e.printStackTrace(engine.leechErr);

File: app/PdeEditor.java
Patch:
@@ -1409,7 +1409,7 @@ protected void handleExport(File appletDir, String exportSketchName,
       ps.println("      <td>&nbsp;</td>");
       ps.println("    </tr>");
       ps.println("    <tr>");
-      ps.println("      <td><applet code=\"" + exportSketchName + " archive=\"" + exportSketchName + ".jar width=" + wide + " height=" + high + ">");
+      ps.println("      <td><applet code=\"" + exportSketchName + "\" archive=\"" + exportSketchName + ".jar\" width=" + wide + " height=" + high + ">");
       ps.println("        </applet></td>");
       ps.println("    </tr>");
       ps.println("    <tr>");

File: app/PdeEditor.java
Patch:
@@ -1539,7 +1539,7 @@ protected void doQuit2() {
 	String urlstr = url.getFile();
 	urlstr = urlstr.substring(0, urlstr.lastIndexOf("/") + 1) +
 	  "sketch.properties";
-	output = new FileOutputStream(urlstr);
+	output = new FileOutputStream(URLDecoder.decode(urlstr));
       }
 
       //url = new URL(urlstr + "sketch.properties");

File: app/PdeEditorHeader.java
Patch:
@@ -64,7 +64,7 @@ public void mousePressed(MouseEvent e) {
 	  //System.out.println("got mouse");
 	  if ((sketchRight != 0) &&
 	      (e.getX() > sketchLeft) && (e.getX() < sketchRight)) {
-	    editor.skSaveAs();
+	    editor.skSaveAs(true);
 	  }
 	}
       });

File: app/PdeEditorStatus.java
Patch:
@@ -156,8 +156,9 @@ public void edit(String message, String dflt /*, boolean rename*/) {
     response = 0;
     okButton.setVisible(true);
     cancelButton.setVisible(true);
-    editField.setText(dflt);
     editField.setVisible(true);
+    editField.setText(dflt);
+    editField.selectAll();
     editField.requestFocus();
 
     update();

File: app/PdeBase.java
Patch:
@@ -538,6 +538,7 @@ protected void buildSerialMenu() {
 	}
       }
     } catch (Exception e) {
+      System.out.println("exception building serial menu");
       e.printStackTrace();
     }
   }

File: app/PdeEditorConsole.java
Patch:
@@ -218,7 +218,7 @@ public void paint(Graphics screen) {
       //int ii = (firstLine + i) % maxLineCount;
       int ii = (firstLine + i) + scrollOffset;
       while (ii < 0) ii += maxLineCount;
-      if (ii > maxLineCount) ii = ii % maxLineCount;
+      if (ii >= maxLineCount) ii = ii % maxLineCount;
 
       g.setColor(isError[ii] ? fgColorErr : fgColorOut);
       //System.out.println(leading);

File: app/PdeEditorListener.java
Patch:
@@ -32,6 +32,9 @@ public PdeEditorListener(PdeEditor editor) {
 
 
   public void keyPressed(KeyEvent event) {
+    // don't do things if the textarea isn't editable
+    if (editor.externalEditor) return;
+
     // only works with TextArea, because it needs 'insert'
     //TextComponent tc = (TextComponent) event.getSource();
     tc = (TextArea) event.getSource();

File: app/KjcEngine.java
Patch:
@@ -673,6 +673,7 @@ public void keyPressed(KeyEvent e) {
 	} else {
 	  window = new Frame(); // gonna use ugly windows instead
 	  ((Frame)window).setResizable(false);
+	  if (PdeBase.icon != null) ((Frame)window).setIconImage(PdeBase.icon);
 	  window.pack(); // to get a peer, size set later, need for insets
 
 	  window.addWindowListener(new WindowAdapter() {
@@ -749,6 +750,7 @@ public void keyPressed(KeyEvent e) {
 	window.show();
 	applet.requestFocus();  // necessary for key events
       }
+      //System.out.println("KJC RUNNING");
       running = true;
 
       //need to parse this code to give a decent error message
@@ -803,6 +805,7 @@ protected void cleanup() {
 
   public void stop() {  // part of PdeEngine
     //System.out.println("PdeEngine.stop");
+    //System.out.println("KJC NOT RUNNING");
     running = false;
 
     //System.out.println();

File: app/PdeEditor.java
Patch:
@@ -1076,7 +1076,8 @@ protected void handleExport(File appletDir, String exportSketchName,
       }
 
       // files to include
-      if (dataDir != null) {
+      //if (dataDir != null) {
+      if ((dataDir != null) && (dataDir.exists())) {
 	String datafiles[] = dataDir.list();
 	for (int i = 0; i < datafiles.length; i++) {
 	  if (datafiles[i].equals(".") || datafiles[i].equals("..")) {

File: app/PdeEditor.java
Patch:
@@ -292,7 +292,9 @@ public void focusGained(FocusEvent e) {
 	    //System.out.println("pwindow activated");
 	    // editor doesn't necessarily have to be on top
 	    //presentationWindow.toBack();
-	    if (frame != null) frame.toFront();
+
+	    // don't move the editor window to the front after all
+	    //if (frame != null) frame.toFront();
 	    try {
 	      //((KjcEngine)(runner.engine)).window.toFront();
 	      engine.front();

File: app/KjcEngine.java
Patch:
@@ -215,7 +215,8 @@ public String writeJava(String name, boolean kjc) {
 
       if (PdeBase.getBoolean("compiler.inline_web_colors", true)) {
 	// convert "= #cc9988" into "= 0xffcc9988"
-	program = substipoot(program, "(=\\s*)\\#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])", "$1 0xff$2$3$4");
+	//program = substipoot(program, "(=\\s*)\\#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])", "$1 0xff$2$3$4");
+	program = substipoot(program, "#([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])", "0xff$1$2$3");
       }
 
       if ((program.indexOf("void setup()") != -1) ||

File: app/PdeEditorHeader.java
Patch:
@@ -122,7 +122,6 @@ public void paint(Graphics screen) {
 
     Graphics g = offscreen.getGraphics();
     if (font == null) {
-      //font = new Font("SansSerif", Font.PLAIN, 12);
       font = PdeBase.getFont("editor.header.font",
 			       new Font("SansSerif", Font.PLAIN, 12));
       g.setFont(font);
@@ -158,6 +157,7 @@ public void paint(Graphics screen) {
 
     boolean boringUser = editor.userName.equals("default");
 
+    g.setFont(font); // needs to be set each time
     g.setColor(secondaryColor);
     g.drawString(SKETCH_TITLER, sketchTitleLeft, baseline);
     if (sketchModified) g.drawString("\u00A7", modifiedLeft, baseline);

File: app/PdeEditorListener.java
Patch:
@@ -23,11 +23,11 @@ public class PdeEditorListener extends KeyAdapter implements FocusListener {
   public PdeEditorListener(PdeEditor editor) {
     this.editor = editor;
 
-    expandTabs = PdeBase.getBoolean("editor.expandTabs", false);
+    expandTabs = PdeBase.getBoolean("editor.expandTabs", true);
     tabSize = PdeBase.getInteger("editor.tabSize", 2);
     tabString = spaces.substring(0, tabSize);
-    autoIndent = PdeBase.getBoolean("editor.autoIndent", false);
-    balanceParens = PdeBase.getBoolean("editor.balanceParens", false);
+    autoIndent = PdeBase.getBoolean("editor.autoIndent", true);
+    balanceParens = PdeBase.getBoolean("editor.balanceParens", true);
   }
 
 

File: app/PdeEditorStatus.java
Patch:
@@ -318,7 +318,7 @@ public void keyPressed(KeyEvent event) {
     Graphics g = offscreen.getGraphics();
     if (font == null) {
       font = PdeBase.getFont("editor.status.font",
-			       new Font("SansSerif", Font.PLAIN, 10));
+			       new Font("SansSerif", Font.PLAIN, 12));
       g.setFont(font);
       metrics = g.getFontMetrics();
       ascent = metrics.getAscent();

File: app/PdeEditorStatus.java
Patch:
@@ -372,7 +372,7 @@ public void actionPerformed(ActionEvent e) {
       unedit();
 
     } else if (e.getSource() == editField) {
-      System.out.println("editfield: " + e);
+      //System.out.println("editfield: " + e);
     }
   }
 }

File: app/PdeEditorConsole.java
Patch:
@@ -44,8 +44,8 @@ public class PdeEditorConsole extends Component {
   static PrintStream systemOut;
   static PrintStream systemErr;
 
-  PrintStream consoleOut;
-  PrintStream consoleErr;
+  static PrintStream consoleOut;
+  static PrintStream consoleErr;
 
 
   public PdeEditorConsole(PdeEditor editor) {

File: app/PdeEditor.java
Patch:
@@ -56,7 +56,7 @@ public PdeEditor(PdeApplet app, String program) {
     leftPanel.setLayout(new BorderLayout());
 
     Color buttonBgColor = 
-      PdeApplet.getColor("editor.button_bgcolor", new Color(153, 0, 0));
+      PdeApplet.getColor("editor.buttons.bgcolor", new Color(153, 0, 0));
     buttons = new PdeEditorButtons(this);
     buttons.setBackground(buttonBgColor);
     leftPanel.add("North", buttons);

File: app/PdeEditor.java
Patch:
@@ -287,11 +287,12 @@ public void handleSave(boolean promptUser) {
 
       lastDirectory = directory;
       lastFile = filename;
-      message("Done saving file.");
+      message("Done saving " + filename + ".");
 
     } catch (IOException e) {
       e.printStackTrace();
-      message("Did not write file.");
+      //message("Did not write file.");
+      message("Could not write " + filename + ".");
     }
     buttons.clear();
   }

File: app/PdeApplication.java
Patch:
@@ -11,7 +11,9 @@ public class PdeApplication extends PdeApplet
 implements ActionListener
 #endif
 {
-  Frame frame;
+  // made static so that toFront() can be called by 
+  // full screen code in editor
+  static Frame frame;
   WindowAdapter windowListener;
 
   static public void main(String args[]) {

File: app/PdeEditorButtons.java
Patch:
@@ -286,7 +286,7 @@ public boolean mouseDown(Event e, int x, int y) {
     case CLOSE: editor.doClose(); break;
 
     case OPEN: editor.doOpen(); break;
-    case SAVE: editor.doSave(); break;
+    case SAVE: editor.doSaveAs(); break;
     case EXPORT: editor.doExport(); break;
     case PRINT: editor.doPrint(); break;
     case BEAUTIFY: editor.doBeautify(); break;

