File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -400,12 +400,12 @@ public void onCompleted(Exception e, AsyncHttpRequest result) {
                     AsyncServer.post(Ion.mainHandler, new Runnable() {
                         @Override
                         public void run() {
-                            invokeLoadRequest(request, ret);
+                            invokeLoadRequest(result, ret);
                         }
                     });
                     return;
                 }
-                invokeLoadRequest(request, ret);
+                invokeLoadRequest(result, ret);
             }
         });
     }

File: ion/src/com/koushikdutta/ion/loader/MediaFile.java
Patch:
@@ -142,14 +142,14 @@ public static class MediaFileType {
     static void addFileType(String extension, int fileType, String mimeType) {
         sFileTypeMap.put(extension, new MediaFileType(fileType, mimeType));
         sMimeTypeMap.put(mimeType, Integer.valueOf(fileType));
+        sMimeTypeToExtensionMap.put(mimeType, extension);
     }
 
     static void addFileType(String extension, int fileType, String mimeType, int mtpFormatCode) {
         addFileType(extension, fileType, mimeType);
         sFileTypeToFormatMap.put(extension, Integer.valueOf(mtpFormatCode));
         sMimeTypeToFormatMap.put(mimeType, Integer.valueOf(mtpFormatCode));
         sFormatToMimeTypeMap.put(mtpFormatCode, mimeType);
-        sMimeTypeToExtensionMap.put(mimeType, extension);
     }
 
     /*

File: ion-sample/src/com/koushikdutta/ion/sample/Twitter.java
Patch:
@@ -115,7 +115,7 @@ private void load() {
             return;
 
         // load the tweets
-        String url = "https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=BestAt&count=20";
+        String url = "https://api.twitter.com/1.1/statuses/user_timeline.json?screen_name=dog_rates&count=20";
         if (tweetAdapter.getCount() > 0) {
             // load from the "last" id
             JsonObject last = tweetAdapter.getItem(tweetAdapter.getCount() - 1);

File: ion/src/com/koushikdutta/ion/loader/ResourceLoader.java
Patch:
@@ -106,7 +106,7 @@ public void run() {
 
     @Override
     public Future<DataEmitter> load(final Ion ion, final AsyncHttpRequest request, final FutureCallback<LoaderEmitter> callback) {
-        if (!request.getUri().getScheme().startsWith("android.resource:/"))
+        if (!request.getUri().getScheme().equals("android.resource"))
             return null;
 
         final InputStreamDataEmitterFuture ret = new InputStreamDataEmitterFuture();

File: ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
Patch:
@@ -121,7 +121,7 @@ public void put(URI uri, Headers headers) {
 
             Headers dump = new Headers();
             for (HttpCookie cookie: cookies) {
-                dump.add("Set-Cookie", cookie.getName() + "=" + cookie.getValue());
+                dump.add("Set-Cookie", cookie.getName() + "=" + cookie.getValue() + "; path=" + cookie.getPath());
             }
 
             String key = uri.getScheme() + "://" + uri.getAuthority();

File: ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
Patch:
@@ -121,7 +121,7 @@ public void put(URI uri, Headers headers) {
 
             Headers dump = new Headers();
             for (HttpCookie cookie: cookies) {
-                dump.add("Set-Cookie", cookie.getName() + "=" + cookie.getValue());
+                dump.add("Set-Cookie", cookie.getName() + "=" + cookie.getValue() + "; path=" + cookie.getPath());
             }
 
             String key = uri.getScheme() + "://" + uri.getAuthority();

File: ion-sample/src/com/koushikdutta/ion/sample/Samples.java
Patch:
@@ -49,11 +49,11 @@ public void onClick(View v) {
             }
         });
 
-        Button googleImageSearch = (Button)findViewById(R.id.google_image_search);
-        googleImageSearch.setOnClickListener(new View.OnClickListener() {
+        Button imageSearch = (Button)findViewById(R.id.image_search);
+        imageSearch.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                startActivity(new Intent(Samples.this, GoogleImageSearch.class));
+                startActivity(new Intent(Samples.this, ImageSearch.class));
             }
         });
 

File: ion/src/com/koushikdutta/ion/ImageViewFutureImpl.java
Patch:
@@ -56,14 +56,13 @@ protected void transform(IonDrawable result) throws Exception {
         }
 
         // retrigger the intrinsic dimension check on the drawable
-        imageView.setImageDrawable(null);
-        imageView.setImageDrawable(result);
         BitmapInfo info = result.getBitmapInfo();
         if (info != null && info.exception == null) {
             applyScaleMode(imageView, scaleMode);
         }
         IonBitmapRequestBuilder.doAnimation(imageView, inAnimation, inAnimationResource);
-
+        imageView.setImageDrawable(null);
+        imageView.setImageDrawable(result);
         setComplete(imageView);
     }
 

File: ion/src/com/koushikdutta/ion/IonDrawable.java
Patch:
@@ -204,6 +204,9 @@ public void run() {
         };
 
         long getDelay() {
+            // error case?
+            if (currentFrame == null)
+                return 1000 / 10;
             long delay = currentFrame.delay;
             if (delay == 0)
                 delay = 1000 / 10;

File: ion/src/com/koushikdutta/ion/gson/GsonSerializer.java
Patch:
@@ -10,20 +10,19 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.TransformFuture;
-import com.koushikdutta.async.parser.AsyncParserBase;
+import com.koushikdutta.async.parser.AsyncParser;
 import com.koushikdutta.async.parser.ByteBufferListParser;
 import com.koushikdutta.async.stream.ByteBufferListInputStream;
 
 import java.io.ByteArrayOutputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStreamWriter;
-import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 
 /**
  * Created by koush on 6/1/13.
  */
-public class GsonSerializer<T> extends AsyncParserBase<T> {
+public class GsonSerializer<T> implements AsyncParser<T> {
     Gson gson;
     Type type;
     public GsonSerializer(Gson gson, Class<T> clazz) {

File: ion/src/com/koushikdutta/ion/mock/MockLoader.java
Patch:
@@ -30,7 +30,7 @@ private MockLoader(MockRequestHandler requestHandler) {
     public <T> ResponseFuture<T> load(Ion ion, AsyncHttpRequest request, Type type) {
         T result = (T)requestHandler.request(request.getUri().toString());
         if (result != null) {
-            MockResponseFuture<T> ret = new MockResponseFuture<>(request);
+            MockResponseFuture<T> ret = new MockResponseFuture<T>(request);
             ret.setComplete(result);
             return ret;
         }

File: ion/src/com/koushikdutta/ion/InputStreamParser.java
Patch:
@@ -6,7 +6,7 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.TransformFuture;
-import com.koushikdutta.async.parser.AsyncParser;
+import com.koushikdutta.async.parser.AsyncParserBase;
 import com.koushikdutta.async.parser.ByteBufferListParser;
 import com.koushikdutta.async.stream.ByteBufferListInputStream;
 
@@ -15,7 +15,7 @@
 /**
  * Created by koush on 11/3/13.
  */
-class InputStreamParser implements AsyncParser<InputStream> {
+class InputStreamParser extends AsyncParserBase<InputStream> {
     @Override
     public Future<InputStream> parse(DataEmitter emitter) {
         return new ByteBufferListParser().parse(emitter)

File: ion/src/com/koushikdutta/ion/TransformBitmap.java
Patch:
@@ -67,7 +67,7 @@ public void run() {
                             throw new Exception("failed to transform bitmap");
                     }
                     info = new BitmapInfo(key, result.mimeType, bitmap, result.originalSize);
-                    info.loadedFrom = result.loadedFrom;
+                    info.servedFrom = result.servedFrom;
 
                     if (postProcess != null) {
                         for (PostProcess p: postProcess) {

File: ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
Patch:
@@ -5,6 +5,7 @@
 import android.graphics.Point;
 
 import com.koushikdutta.async.util.UntypedHashtable;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.gif.GifDecoder;
 
 import java.io.File;
@@ -25,7 +26,7 @@ public BitmapInfo(String key, String mimeType, Bitmap bitmap, Point originalSize
     public long loadTime = System.currentTimeMillis();
     public long drawTime;
     final public String key;
-    public int loadedFrom;
+    public ResponseServedFrom servedFrom;
     final public Bitmap bitmap;
     public Exception exception;
     public GifDecoder gifDecoder;

File: ion/src/com/koushikdutta/ion/gson/GsonParser.java
Patch:
@@ -10,19 +10,18 @@
 import com.koushikdutta.async.callback.CompletedCallback;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.TransformFuture;
-import com.koushikdutta.async.parser.AsyncParser;
+import com.koushikdutta.async.parser.AsyncParserBase;
 import com.koushikdutta.async.parser.ByteBufferListParser;
 import com.koushikdutta.async.parser.StringParser;
 import com.koushikdutta.async.stream.ByteBufferListInputStream;
-import com.koushikdutta.async.util.Charsets;
 
 import java.io.InputStreamReader;
 import java.nio.charset.Charset;
 
 /**
  * Created by koush on 5/27/13.
  */
-public abstract class GsonParser<T extends JsonElement> implements AsyncParser<T> {
+public abstract class GsonParser<T extends JsonElement> extends AsyncParserBase<T> {
     Charset forcedCharset;
     Class<? extends JsonElement> clazz;
     public GsonParser(Class<? extends T> clazz) {

File: ion/src/com/koushikdutta/ion/loader/AssetLoader.java
Patch:
@@ -9,6 +9,7 @@
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.stream.InputStreamDataEmitter;
 import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
 import java.io.InputStream;
@@ -46,7 +47,7 @@ public void run() {
                     int available = stream.available();
                     InputStreamDataEmitter emitter = new InputStreamDataEmitter(ion.getHttpClient().getServer(), stream);
                     ret.setComplete(emitter);
-                    callback.onCompleted(null, new LoaderEmitter(emitter, available, LoaderEmitter.LOADED_FROM_CACHE, null, null));
+                    callback.onCompleted(null, new LoaderEmitter(emitter, available, ResponseServedFrom.LOADED_FROM_CACHE, null, null));
                 }
                 catch (Exception e) {
                     ret.setComplete(e);

File: ion/src/com/koushikdutta/ion/loader/ContentLoader.java
Patch:
@@ -9,6 +9,7 @@
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.stream.InputStreamDataEmitter;
 import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
 import java.io.InputStream;
@@ -47,7 +48,7 @@ public void run() {
                     InputStreamDataEmitter emitter = new InputStreamDataEmitter(ion.getHttpClient().getServer(), stream);
                     ret.setComplete(emitter);
                     callback.onCompleted(null,
-                        new LoaderEmitter(emitter, available, LoaderEmitter.LOADED_FROM_CACHE, null, null));
+                        new LoaderEmitter(emitter, available, ResponseServedFrom.LOADED_FROM_CACHE, null, null));
                 }
                 catch (Exception e) {
                     ret.setComplete(e);

File: ion/src/com/koushikdutta/ion/loader/FileLoader.java
Patch:
@@ -14,7 +14,7 @@
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.util.StreamUtility;
 import com.koushikdutta.ion.Ion;
-import com.koushikdutta.ion.Loader;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 import com.koushikdutta.ion.bitmap.IonBitmapCache;
 
@@ -66,7 +66,7 @@ public void run() {
                             throw new Exception("Bitmap failed to load");
                         info = new BitmapInfo(key, options.outMimeType, bitmap, size);
                     }
-                    info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
                 catch (OutOfMemoryError e) {
@@ -111,7 +111,7 @@ public void run() {
                 File file = new File(URI.create(request.getUri().toString()));
                 FileDataEmitter emitter = new FileDataEmitter(ion.getHttpClient().getServer(), file);
                 ret.setComplete(emitter);
-                callback.onCompleted(null, new LoaderEmitter(emitter, (int)file.length(), LoaderEmitter.LOADED_FROM_CACHE, null, request));
+                callback.onCompleted(null, new LoaderEmitter(emitter, (int)file.length(), ResponseServedFrom.LOADED_FROM_CACHE, null, request));
             }
         });
         return ret;

File: ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
Patch:
@@ -10,7 +10,7 @@
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.ion.Ion;
-import com.koushikdutta.ion.Loader;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
 import java.net.URI;
@@ -36,7 +36,7 @@ public void run() {
                     if (bmp == null)
                         throw new Exception("package icon failed to load");
                     BitmapInfo info = new BitmapInfo(key, null, bmp, new Point(bmp.getWidth(), bmp.getHeight()));
-                    info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
                 catch (Exception e) {

File: ion/src/com/koushikdutta/ion/loader/ResourceLoader.java
Patch:
@@ -17,6 +17,7 @@
 import com.koushikdutta.async.util.StreamUtility;
 import com.koushikdutta.ion.Ion;
 import com.koushikdutta.ion.Loader;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 import com.koushikdutta.ion.bitmap.IonBitmapCache;
 
@@ -88,7 +89,7 @@ public void run() {
                             throw new Exception("Bitmap failed to load");
                         info = new BitmapInfo(key, options.outMimeType, bitmap, size);
                     }
-                    info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
                 catch (OutOfMemoryError e) {
@@ -120,7 +121,7 @@ public void run() {
                     int available = stream.available();
                     InputStreamDataEmitter emitter = new InputStreamDataEmitter(ion.getHttpClient().getServer(), stream);
                     ret.setComplete(emitter);
-                    callback.onCompleted(null, new LoaderEmitter(emitter, available, LoaderEmitter.LOADED_FROM_CACHE, null, null));
+                    callback.onCompleted(null, new LoaderEmitter(emitter, available, ResponseServedFrom.LOADED_FROM_CACHE, null, null));
                 }
                 catch (Exception e) {
                     ret.setComplete(e);

File: ion/src/com/koushikdutta/ion/loader/StreamLoader.java
Patch:
@@ -11,6 +11,7 @@
 import com.koushikdutta.async.util.StreamUtility;
 import com.koushikdutta.ion.Ion;
 import com.koushikdutta.ion.Loader;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 import com.koushikdutta.ion.bitmap.IonBitmapCache;
 import com.koushikdutta.ion.gif.GifDecoder;
@@ -60,7 +61,7 @@ public void run() {
                             throw new Exception("Bitmap failed to load");
                         info = new BitmapInfo(key, options.outMimeType, bitmap, size);
                     }
-                    info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
                 catch (OutOfMemoryError e) {

File: ion/src/com/koushikdutta/ion/loader/VideoLoader.java
Patch:
@@ -13,6 +13,7 @@
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.ion.Ion;
+import com.koushikdutta.ion.ResponseServedFrom;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
 
 import java.io.File;
@@ -79,7 +80,7 @@ public void run() {
                             bmp = Bitmap.createScaledBitmap(bmp, (int) (bmp.getWidth() * ratio), (int) (bmp.getHeight() * ratio), true);
                     }
                     BitmapInfo info = new BitmapInfo(key, type.mimeType, bmp, originalSize);
-                    info.loadedFrom = LoaderEmitter.LOADED_FROM_CACHE;
+                    info.servedFrom = ResponseServedFrom.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }
                 catch (OutOfMemoryError e) {

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -659,7 +659,7 @@ public ResponseFuture<String> asString() {
 
     @Override
     public ResponseFuture<String> asString(Charset charset) {
-        return execute(new StringParser());
+        return execute(new StringParser(charset));
     }
 
     @Override

File: ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
Patch:
@@ -16,8 +16,9 @@
 public class ImageViewSample extends Activity {
     public void loadCenterCrop() {
         Ion.with(this)
-        .load("http://data.qa.rithm.me/emojis/dougie/GIF/Transparent/300/dougie.gif")
+        .load("http://media.salon.com/2013/05/original.jpg")
         .withBitmap()
+        .centerCrop()
         .intoImageView(imageView);
     }
 

File: ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
Patch:
@@ -16,9 +16,8 @@
 public class ImageViewSample extends Activity {
     public void loadCenterCrop() {
         Ion.with(this)
-        .load("http://media.salon.com/2013/05/original.jpg")
+        .load("http://data.qa.rithm.me/emojis/dougie/GIF/Transparent/300/dougie.gif")
         .withBitmap()
-        .centerCrop()
         .intoImageView(imageView);
     }
 

File: ion/src/com/koushikdutta/ion/gif/GifFrame.java
Patch:
@@ -10,5 +10,4 @@ public GifFrame(Bitmap im, int del) {
 	
     public Bitmap image;
     public int delay;
-    public GifFrame nextFrame = null;
 }

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -540,7 +540,7 @@ public void disableProxy() {
          * Disable routing of https requests through a previous provided proxy
          */
         public void disableSecureProxy() {
-            httpClient.getSocketMiddleware().disableProxy();
+            httpClient.getSSLSocketMiddleware().disableProxy();
         }
 
         /**

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -540,7 +540,7 @@ public void disableProxy() {
          * Disable routing of https requests through a previous provided proxy
          */
         public void disableSecureProxy() {
-            httpClient.getSocketMiddleware().disableProxy();
+            httpClient.getSSLSocketMiddleware().disableProxy();
         }
 
         /**

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -396,7 +396,7 @@ static class FutureSet extends WeakHashMap<Future, Boolean> {
     WeakHashMap<Object, FutureSet> inFlight = new WeakHashMap<Object, FutureSet>();
 
     private void addCookieMiddleware() {
-        httpClient.insertMiddleware(cookieMiddleware = new CookieMiddleware(context, name));
+        httpClient.insertMiddleware(cookieMiddleware = new CookieMiddleware(this));
     }
 
     /**

File: ion/test/src/com/koushikdutta/ion/test/CookieTests.java
Patch:
@@ -61,7 +61,7 @@ public void testReinit() throws Exception {
         headers.set("Set-Cookie", "foo=goop");
         middleware.put(uri, headers);
 
-        middleware.reinit(getContext(), Ion.getDefault(getContext()).getName());
+        middleware.reinit();
         CookieManager manager = middleware.getCookieManager();
 
         Headers newHeaders = new Headers();

File: ion/test/src/com/koushikdutta/ion/test/HttpTests.java
Patch:
@@ -146,7 +146,7 @@ public void testCookie() throws Exception {
         }
         assertTrue(ion.getCookieMiddleware().getCookieManager().get(URI.create("http://www.google.com/test/path"), new Multimap()).size() > 0);
 
-        CookieMiddleware deserialize = new CookieMiddleware(getContext(), ion.getDefault(getContext()).getName());
+        CookieMiddleware deserialize = new CookieMiddleware(ion);
         assertTrue(deserialize.getCookieManager().get(URI.create("http://www.google.com/test/path"), new Multimap()).size() > 0);
     }
 

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -154,7 +154,7 @@ private Ion(Context context, String name) {
 
         httpClient = new AsyncHttpClient(new AsyncServer("ion-" + name));
         httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
-//        httpClient.getSSLSocketMiddleware().setSpdyEnabled(true);
+        httpClient.getSSLSocketMiddleware().setSpdyEnabled(true);
         httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware()));
 
         File ionCacheDir = new File(context.getCacheDir(), name);

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -146,6 +146,8 @@ public IonRequestBuilder addHeader(String name, String value) {
 
     @Override
     public IonRequestBuilder addHeaders(Map<String, List<String>> params) {
+        if (params == null)
+            return this;
         Headers headers = getHeaders();
         for (Map.Entry<String, List<String>> entry: params.entrySet()) {
             headers.addAll(entry.getKey(), entry.getValue());

File: ion/src/com/koushikdutta/ion/loader/AssetLoader.java
Patch:
@@ -19,15 +19,15 @@
 public class AssetLoader extends StreamLoader {
     @Override
     public Future<BitmapInfo> loadBitmap(final Context context, final Ion ion, final String key, final String uri, final int resizeWidth, final int resizeHeight, final boolean animateGif) {
-        if (!uri.startsWith("file://android_asset/"))
+        if (!uri.startsWith("file:///android_asset/"))
             return null;
 
         return super.loadBitmap(context, ion, key, uri, resizeWidth, resizeHeight, animateGif);
     }
 
     @Override
     protected InputStream getInputStream(Context context, String uri) throws Exception {
-        return context.getAssets().open(Uri.parse(uri).getPath().substring(1));
+        return context.getAssets().open(Uri.parse(uri).getPath().replaceFirst("^/android_asset/", ""));
     }
 
     @Override

File: ion/test/src/com/koushikdutta/ion/test/AssetTests.java
Patch:
@@ -11,7 +11,7 @@
 public class AssetTests extends AndroidTestCase {
     public void testAsset() throws Exception {
         Bitmap bitmap = Ion.with(getContext())
-        .load("file://android_asset/exif.jpg")
+        .load("file:///android_asset/exif.jpg")
         .asBitmap()
         .get();
 

File: ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
Patch:
@@ -31,7 +31,6 @@
 public class IonBitmapCache {
     public static final long DEFAULT_ERROR_CACHE_DURATION = 30000L;
 
-    Resources resources;
     DisplayMetrics metrics;
     LruBitmapCache cache;
     Ion ion;
@@ -52,7 +51,6 @@ public IonBitmapCache(Ion ion) {
         ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE))
                 .getDefaultDisplay().getMetrics(metrics);
         final AssetManager mgr = context.getAssets();
-        resources = new Resources(mgr, metrics, context.getResources().getConfiguration());
         cache = new LruBitmapCache(getHeapSize(context) / 7);
     }
 
@@ -128,7 +126,7 @@ private BitmapFactory.Options prepareBitmapOptions(BitmapFactory.Options o, int
         if (o.outWidth < 0 || o.outHeight < 0)
             throw new BitmapDecodeException(o.outWidth, o.outHeight);
         Point target = computeTarget(minx, miny);
-        int scale = Math.max(o.outWidth / target.x, o.outHeight / target.y);
+        int scale = Math.min(o.outWidth / target.x, o.outHeight / target.y);
         BitmapFactory.Options ret = new BitmapFactory.Options();
         ret.inSampleSize = scale;
         ret.outWidth = o.outWidth;

File: ion/test/src/com/koushikdutta/ion/test/GifTests.java
Patch:
@@ -3,7 +3,6 @@
 import android.test.AndroidTestCase;
 
 import com.koushikdutta.ion.Ion;
-import com.koushikdutta.ion.gif.GifAction;
 import com.koushikdutta.ion.gif.GifDecoder;
 import com.koushikdutta.ion.gif.GifFrame;
 

File: ion/src/com/koushikdutta/ion/IonImageViewRequestBuilder.java
Patch:
@@ -78,7 +78,9 @@ IonImageViewRequestBuilder withImageView(ImageView imageView) {
     }
 
     private IonDrawable setIonDrawable(ImageView imageView, BitmapFetcher bitmapFetcher, int loadedFrom) {
-        BitmapInfo info = bitmapFetcher.info;
+        BitmapInfo info = null;
+        if (bitmapFetcher != null)
+            info = bitmapFetcher.info;
         if (info != null)
             bitmapFetcher = null;
 

File: ion/src/com/koushikdutta/ion/ImageViewFutureImpl.java
Patch:
@@ -102,6 +102,8 @@ public ImageViewFutureImpl setScaleMode(ScaleMode scaleMode) {
     }
 
     public static void applyScaleMode(ImageView imageView, ScaleMode scaleMode) {
+        if (scaleMode == null)
+            return;
         switch (scaleMode) {
             case CenterCrop:
                 imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);

File: ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
Patch:
@@ -125,6 +125,9 @@ public void addDefaultTransform() {
                 transforms = new ArrayList<Transform>();
             transforms.add(0, new DefaultTransform(resizeWidth, resizeHeight, scaleMode));
         }
+        else if (scaleMode != null) {
+            throw new IllegalStateException("Must call resize when using " + scaleMode);
+        }
     }
 
     public String computeBitmapKey(String decodeKey) {

File: ion/src/com/koushikdutta/ion/LoadBitmap.java
Patch:
@@ -56,8 +56,6 @@ public void run() {
                     Bitmap[] bitmaps;
                     int[] delays;
                     BitmapFactory.Options options = ion.bitmapCache.prepareBitmapOptions(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), resizeWidth, resizeHeight);
-                    if (options == null)
-                        throw new Exception("BitmapFactory.Options failed to load");
                     final Point size = new Point(options.outWidth, options.outHeight);
                     if (animateGif && TextUtils.equals("image/gif", options.outMimeType)) {
                         GifDecoder decoder = new GifDecoder(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), new GifAction() {

File: ion/src/com/koushikdutta/ion/LoadDeepZoom.java
Patch:
@@ -58,8 +58,6 @@ public void run() {
                         file = tempFile;
                     }
                     BitmapFactory.Options options = ion.getBitmapCache().prepareBitmapOptions(file, 0, 0);
-                    if (options == null)
-                        throw new Exception("BitmapFactory.Options failed to load");
                     final Point size = new Point(options.outWidth, options.outHeight);
                     if (animateGif && TextUtils.equals("image/gif", options.outMimeType)) {
                         fin = fileCache.get(key);

File: ion/src/com/koushikdutta/ion/loader/FileLoader.java
Patch:
@@ -51,8 +51,6 @@ public void run() {
                 try {
                     File file = new File(URI.create(uri));
                     BitmapFactory.Options options = ion.getBitmapCache().prepareBitmapOptions(file, resizeWidth, resizeHeight);
-                    if (options == null)
-                        throw new Exception("BitmapFactory.Options failed to load");
                     Point size = new Point(options.outWidth, options.outHeight);
                     BitmapInfo info;
                     if (animateGif && TextUtils.equals("image/gif", options.outMimeType)) {

File: ion/src/com/koushikdutta/ion/loader/ResourceLoader.java
Patch:
@@ -75,8 +75,6 @@ public void run() {
                 try {
                     Resource res = lookupResource(context, uri);
                     BitmapFactory.Options options = ion.getBitmapCache().prepareBitmapOptions(res.res, res.id, resizeWidth, resizeHeight);
-                    if (options == null)
-                        throw new Exception("BitmapFactory.Options failed to load");
                     Point size = new Point(options.outWidth, options.outHeight);
                     BitmapInfo info;
                     if (animateGif && TextUtils.equals("image/gif", options.outMimeType)) {

File: ion/src/com/koushikdutta/ion/loader/StreamLoader.java
Patch:
@@ -63,8 +63,6 @@ public void run() {
                 try {
                     in = getInputStream(context, uri);
                     BitmapFactory.Options options = ion.getBitmapCache().prepareBitmapOptions(in, resizeWidth, resizeHeight);
-                    if (options == null)
-                        throw new Exception("BitmapFactory.Options failed to load");
                     StreamUtility.closeQuietly(in);
                     Point size = new Point(options.outWidth, options.outHeight);
                     BitmapInfo info;

File: ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java
Patch:
@@ -46,7 +46,6 @@ public View getView(int position, View convertView, ViewGroup parent) {
 
             // select the image view
             Ion.with(iv)
-            .resize(256, 256)
             .centerCrop()
             .placeholder(R.drawable.placeholder)
             .error(R.drawable.error)

File: ion/src/com/koushikdutta/ion/ImageViewFutureImpl.java
Patch:
@@ -106,6 +106,9 @@ public static void applyScaleMode(ImageView imageView, ScaleMode scaleMode) {
             case CenterCrop:
                 imageView.setScaleType(ImageView.ScaleType.CENTER_CROP);
                 break;
+            case FitCenter:
+                imageView.setScaleType(ImageView.ScaleType.FIT_CENTER);
+                break;
             case CenterInside:
                 imageView.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
                 break;

File: ion/src/com/koushikdutta/ion/IonDrawable.java
Patch:
@@ -693,6 +693,8 @@ static IonDrawable getOrCreateIonDrawable(ImageView imageView) {
         // invalidate self doesn't seem to trigger the dimension check to be called by imageview.
         // are drawable dimensions supposed to be immutable?
         imageView.setImageDrawable(null);
+        ret.unscheduleSelf(ret.invalidate);
+        ret.invalidateScheduled = false;
         return ret;
     }
 }
\ No newline at end of file

File: ion/src/com/koushikdutta/ion/ScaleMode.java
Patch:
@@ -3,5 +3,6 @@
 enum ScaleMode {
     FitXY,
     CenterCrop,
-    CenterInside
+    FitCenter,
+    CenterInside,
 }
\ No newline at end of file

File: ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
Patch:
@@ -61,7 +61,7 @@ public void loadGifResource() {
 
     public void loadExifRotated() {
         Ion.with(this)
-        .load("https://raw.github.com/koush/ion/master/ion-test/testdata/exif.jpg")
+        .load("https://raw.githubusercontent.com/koush/ion/master/ion/test/assets/exif.jpg")
         .intoImageView(imageView);
     }
 

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -155,8 +155,8 @@ private Ion(Context context, String name) {
 
         httpClient = new AsyncHttpClient(new AsyncServer("ion-" + name));
         httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
-        httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware()));
         httpClient.insertMiddleware(spdyMiddleware = new SpdyMiddleware(httpClient));
+        httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware(), spdyMiddleware));
 
         File ionCacheDir = new File(context.getCacheDir(), name);
         try {

File: ion/src/com/koushikdutta/ion/LoadBitmap.java
Patch:
@@ -56,8 +56,6 @@ public void run() {
                     Bitmap[] bitmaps;
                     int[] delays;
                     BitmapFactory.Options options = ion.bitmapCache.prepareBitmapOptions(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), resizeWidth, resizeHeight);
-                    if (options == null)
-                        throw new Exception("BitmapFactory.Options failed to load");
                     final Point size = new Point(options.outWidth, options.outHeight);
                     if (animateGif && TextUtils.equals("image/gif", options.outMimeType)) {
                         GifDecoder decoder = new GifDecoder(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), new GifAction() {

File: ion/src/com/koushikdutta/ion/LoadDeepZoom.java
Patch:
@@ -58,8 +58,6 @@ public void run() {
                         file = tempFile;
                     }
                     BitmapFactory.Options options = ion.getBitmapCache().prepareBitmapOptions(file, 0, 0);
-                    if (options == null)
-                        throw new Exception("BitmapFactory.Options failed to load");
                     final Point size = new Point(options.outWidth, options.outHeight);
                     if (animateGif && TextUtils.equals("image/gif", options.outMimeType)) {
                         fin = fileCache.get(key);

File: ion/src/com/koushikdutta/ion/loader/FileLoader.java
Patch:
@@ -51,8 +51,6 @@ public void run() {
                 try {
                     File file = new File(URI.create(uri));
                     BitmapFactory.Options options = ion.getBitmapCache().prepareBitmapOptions(file, resizeWidth, resizeHeight);
-                    if (options == null)
-                        throw new Exception("BitmapFactory.Options failed to load");
                     Point size = new Point(options.outWidth, options.outHeight);
                     BitmapInfo info;
                     if (animateGif && TextUtils.equals("image/gif", options.outMimeType)) {

File: ion/src/com/koushikdutta/ion/loader/ResourceLoader.java
Patch:
@@ -75,8 +75,6 @@ public void run() {
                 try {
                     Resource res = lookupResource(context, uri);
                     BitmapFactory.Options options = ion.getBitmapCache().prepareBitmapOptions(res.res, res.id, resizeWidth, resizeHeight);
-                    if (options == null)
-                        throw new Exception("BitmapFactory.Options failed to load");
                     Point size = new Point(options.outWidth, options.outHeight);
                     BitmapInfo info;
                     if (animateGif && TextUtils.equals("image/gif", options.outMimeType)) {

File: ion/src/com/koushikdutta/ion/loader/StreamLoader.java
Patch:
@@ -63,8 +63,6 @@ public void run() {
                 try {
                     in = getInputStream(context, uri);
                     BitmapFactory.Options options = ion.getBitmapCache().prepareBitmapOptions(in, resizeWidth, resizeHeight);
-                    if (options == null)
-                        throw new Exception("BitmapFactory.Options failed to load");
                     StreamUtility.closeQuietly(in);
                     Point size = new Point(options.outWidth, options.outHeight);
                     BitmapInfo info;

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -482,7 +482,7 @@ public void run() {
             // hook up data progress callbacks
             final long total = emitter.length();
             DataTrackingEmitter tracker;
-            if (!(emitter instanceof DataTrackingEmitter)) {
+            if (!(this.emitter instanceof DataTrackingEmitter)) {
                 tracker = new FilteredDataEmitter();
                 tracker.setDataEmitter(this.emitter);
             }

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -482,7 +482,7 @@ public void run() {
             // hook up data progress callbacks
             final long total = emitter.length();
             DataTrackingEmitter tracker;
-            if (!(emitter instanceof DataTrackingEmitter)) {
+            if (!(this.emitter instanceof DataTrackingEmitter)) {
                 tracker = new FilteredDataEmitter();
                 tracker.setDataEmitter(this.emitter);
             }

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -816,7 +816,7 @@ public IonImageViewRequestBuilder withBitmap() {
 
     @Override
     public ImageViewFuture intoImageView(ImageView imageView) {
-        return new IonImageViewRequestBuilder(this).intoImageView(imageView);
+        return new IonImageViewRequestBuilder(this).withImageView(imageView).intoImageView(imageView);
     }
 
     @Override

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -816,7 +816,7 @@ public IonImageViewRequestBuilder withBitmap() {
 
     @Override
     public ImageViewFuture intoImageView(ImageView imageView) {
-        return new IonImageViewRequestBuilder(this).intoImageView(imageView);
+        return new IonImageViewRequestBuilder(this).withImageView(imageView).intoImageView(imageView);
     }
 
     @Override

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -174,7 +174,7 @@ private Ion(Context context, String name) {
 
         httpClient = new AsyncHttpClient(new AsyncServer("ion-" + name));
         httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
-//        httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware()));
+        httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware()));
 
         File ionCacheDir = new File(context.getCacheDir(), name);
         try {

File: ion/src/com/koushikdutta/ion/conscrypt/ConscryptMiddleware.java
Patch:
@@ -68,6 +68,9 @@ public ConscryptMiddleware(Context context, AsyncSSLSocketMiddleware middleware)
 
     @Override
     public Cancellable getSocket(GetSocketData data) {
+        if (!enabled) {
+            return null;
+        }
         // initialize here vs the constructor, or this will potentially block the ui thread.
         initialize();
         return super.getSocket(data);

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -174,7 +174,7 @@ private Ion(Context context, String name) {
 
         httpClient = new AsyncHttpClient(new AsyncServer("ion-" + name));
         httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
-//        httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware()));
+        httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware()));
 
         File ionCacheDir = new File(context.getCacheDir(), name);
         try {

File: ion/src/com/koushikdutta/ion/conscrypt/ConscryptMiddleware.java
Patch:
@@ -68,6 +68,9 @@ public ConscryptMiddleware(Context context, AsyncSSLSocketMiddleware middleware)
 
     @Override
     public Cancellable getSocket(GetSocketData data) {
+        if (!enabled) {
+            return null;
+        }
         // initialize here vs the constructor, or this will potentially block the ui thread.
         initialize();
         return super.getSocket(data);

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -155,8 +155,8 @@ private Ion(Context context, String name) {
 
         httpClient = new AsyncHttpClient(new AsyncServer("ion-" + name));
         httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
-//        httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware()));
-//        httpClient.insertMiddleware(spdyMiddleware = new SpdyMiddleware(httpClient));
+        httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware()));
+        httpClient.insertMiddleware(spdyMiddleware = new SpdyMiddleware(httpClient));
 
         File ionCacheDir = new File(context.getCacheDir(), name);
         try {

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -155,8 +155,8 @@ private Ion(Context context, String name) {
 
         httpClient = new AsyncHttpClient(new AsyncServer("ion-" + name));
         httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
-        httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware()));
-        httpClient.insertMiddleware(spdyMiddleware = new SpdyMiddleware(httpClient));
+//        httpClient.insertMiddleware(conscryptMiddleware = new ConscryptMiddleware(context, httpClient.getSSLSocketMiddleware()));
+//        httpClient.insertMiddleware(spdyMiddleware = new SpdyMiddleware(httpClient));
 
         File ionCacheDir = new File(context.getCacheDir(), name);
         try {

File: ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
Patch:
@@ -89,7 +89,7 @@ public void onRequest(OnRequestData data) {
     }
 
     @Override
-    public void onHeadersReceived(OnHeadersReceivedData data) {
+    public void onHeadersReceived(OnHeadersReceivedDataOnRequestSentData data) {
         try {
             put(URI.create(data.request.getUri().toString()), data.response.headers());
         }

File: ion/test/src/com/koushikdutta/ion/test/Issues.java
Patch:
@@ -128,7 +128,7 @@ public void testIssue253() throws Exception {
         String b64 = Base64.encodeToString(random, 0);
 
         String uploadUrl = Ion.with(getContext())
-        .load("http://ion-test.appspot.com/upload_url")
+        .load("https://ion-test.appspot.com/upload_url")
         .asString()
         .get();
 

File: ion/src/com/koushikdutta/ion/IonImageViewRequestBuilder.java
Patch:
@@ -107,6 +107,8 @@ public ImageViewFuture intoImageView(ImageView imageView) {
             return FUTURE_IMAGEVIEW_NULL_URI;
         }
 
+        withImageView(imageView);
+
         // executeCache the request, see if we get a bitmap from cache.
         BitmapFetcher bitmapFetcher = executeCache();
         if (bitmapFetcher.info != null) {

File: ion/src/com/koushikdutta/ion/IonImageViewRequestBuilder.java
Patch:
@@ -107,6 +107,8 @@ public ImageViewFuture intoImageView(ImageView imageView) {
             return FUTURE_IMAGEVIEW_NULL_URI;
         }
 
+        withImageView(imageView);
+
         // executeCache the request, see if we get a bitmap from cache.
         BitmapFetcher bitmapFetcher = executeCache();
         if (bitmapFetcher.info != null) {

File: ion/test/src/com/koushikdutta/ion/test/BitmapTests.java
Patch:
@@ -69,7 +69,7 @@ public void onCompleted(Exception e, Bitmap result) {
 
     public void testCropping() throws Exception {
         Bitmap result = Ion.with(getContext())
-        .load("https://raw.githubusercontent.com/koush/ion/master/ion-test/assets/exif.jpg")
+        .load("https://raw.githubusercontent.com/koush/ion/master/ion/test/assets/exif.jpg")
         .withBitmap()
         .resize(1080, 1845)
         .centerCrop()

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -37,6 +37,8 @@
 import com.koushikdutta.ion.loader.ResourceLoader;
 import com.koushikdutta.ion.loader.VideoLoader;
 
+import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
+
 import java.io.File;
 import java.io.IOException;
 import java.net.URI;
@@ -167,6 +169,7 @@ public static Builders.IV.F<? extends Builders.IV.F<?>> with(ImageView imageView
 
     private Ion(Context context, String name) {
         httpClient = new AsyncHttpClient(new AsyncServer("ion-" + name));
+        httpClient.getSSLSocketMiddleware().setHostnameVerifier(new BrowserCompatHostnameVerifier());
         this.context = context = context.getApplicationContext();
         this.name = name;
 

File: ion/test/src/com/koushikdutta/ion/test/ExifTests.java
Patch:
@@ -11,7 +11,7 @@
 public class ExifTests extends AndroidTestCase {
     public void testRotated() throws Exception {
         Bitmap bitmap = Ion.with(getContext())
-        .load("https://raw.github.com/koush/ion/master/ion-test/assets/exif.jpg")
+        .load("https://raw.githubusercontent.com/koush/ion/master/ion/test/assets/exif.jpg")
         .asBitmap()
         .get();
 

File: ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
Patch:
@@ -251,7 +251,7 @@ public ImageViewFuture intoImageView(ImageView imageView) {
 
         // no uri? just set a placeholder and bail
         if (builder.uri == null) {
-            setIonDrawable(imageView, null, 0).cancel();
+            setIonDrawable(imageView, null, 0).unregister();
             return FUTURE_IMAGEVIEW_NULL_URI;
         }
 
@@ -260,7 +260,7 @@ public ImageViewFuture intoImageView(ImageView imageView) {
         if (bitmapFetcher.info != null) {
             doAnimation(imageView, null, 0);
             IonDrawable drawable = setIonDrawable(imageView, bitmapFetcher.info, Loader.LoaderEmitter.LOADED_FROM_MEMORY);
-            drawable.cancel();
+            drawable.unregister();
             IonDrawable.ImageViewFutureImpl imageViewFuture = drawable.getFuture();
             imageViewFuture.reset();
             imageViewFuture.setComplete(bitmapFetcher.info.exception, imageView);

File: ion-test/src/com/koushikdutta/ion/test/BitmapTests.java
Patch:
@@ -69,7 +69,7 @@ public void onCompleted(Exception e, Bitmap result) {
 
     public void testCropping() throws Exception {
         Bitmap result = Ion.with(getContext())
-        .load("https://raw.github.com/koush/ion/master/ion-test/testdata/exif.jpg")
+        .load("https://raw.githubusercontent.com/koush/ion/master/ion-test/assets/exif.jpg")
         .withBitmap()
         .resize(1080, 1845)
         .centerCrop()

File: ion-test/src/com/koushikdutta/ion/test/ExifTests.java
Patch:
@@ -11,7 +11,7 @@
 public class ExifTests extends AndroidTestCase {
     public void testRotated() throws Exception {
         Bitmap bitmap = Ion.with(getContext())
-        .load("https://raw.github.com/koush/ion/master/ion-test/testdata/exif.jpg")
+        .load("https://raw.github.com/koush/ion/master/ion-test/assets/exif.jpg")
         .asBitmap()
         .get();
 

File: ion/src/com/koushikdutta/ion/loader/AssetLoader.java
Patch:
@@ -27,7 +27,7 @@ public Future<BitmapInfo> loadBitmap(final Context context, final Ion ion, final
 
     @Override
     protected InputStream getInputStream(Context context, String uri) throws Exception {
-        return context.getAssets().open(Uri.parse(uri).getPath());
+        return context.getAssets().open(Uri.parse(uri).getPath().substring(1));
     }
 
     @Override

File: ion/src/com/koushikdutta/ion/loader/StreamLoader.java
Patch:
@@ -68,7 +68,7 @@ public void run() {
                     StreamUtility.closeQuietly(in);
                     Point size = new Point(options.outWidth, options.outHeight);
                     BitmapInfo info;
-                    in = ion.getContext().getContentResolver().openInputStream(Uri.parse(uri));
+                    in = getInputStream(context, uri);
                     if (animateGif && TextUtils.equals("image/gif", options.outMimeType)) {
                         info = loadGif(key, size, in, options);
                     }

File: ion-test/src/com/koushikdutta/ion/test/AuthTests.java
Patch:
@@ -47,6 +47,7 @@ public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse re
                     response.send(json.toString());
                 }
                 catch (Exception e) {
+                    e.printStackTrace();
                     fail();
                 }
             }

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -33,6 +33,7 @@
 import com.koushikdutta.ion.loader.FileLoader;
 import com.koushikdutta.ion.loader.HttpLoader;
 import com.koushikdutta.ion.loader.PackageIconLoader;
+import com.koushikdutta.ion.loader.ResourceLoader;
 import com.koushikdutta.ion.loader.VideoLoader;
 
 import java.io.File;
@@ -146,6 +147,7 @@ public static Builders.IV.F<? extends Builders.IV.F<?>> with(ImageView imageView
     FileCache storeCache;
     HttpLoader httpLoader;
     ContentLoader contentLoader;
+    ResourceLoader resourceLoader;
     VideoLoader videoLoader;
     PackageIconLoader packageIconLoader;
     FileLoader fileLoader;
@@ -197,6 +199,7 @@ private Ion(Context context, String name) {
                 .addLoader(packageIconLoader = new PackageIconLoader())
                 .addLoader(httpLoader = new HttpLoader())
                 .addLoader(contentLoader = new ContentLoader())
+                .addLoader(resourceLoader = new ResourceLoader())
                 .addLoader(fileLoader = new FileLoader());
     }
 

File: ion/src/com/koushikdutta/ion/LoadBitmap.java
Patch:
@@ -10,6 +10,7 @@
 import com.koushikdutta.async.ByteBufferList;
 import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.bitmap.IonBitmapCache;
 import com.koushikdutta.ion.gif.GifAction;
 import com.koushikdutta.ion.gif.GifDecoder;
 
@@ -78,7 +79,7 @@ public boolean parseOk(boolean parseStatus, int frameIndex) {
                         }
                     }
                     else {
-                        Bitmap bitmap = ion.bitmapCache.loadBitmap(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), options);
+                        Bitmap bitmap = IonBitmapCache.loadBitmap(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), options);
                         if (bitmap == null)
                             throw new Exception("failed to load bitmap");
                         bitmaps = new Bitmap[] { bitmap };

File: ion/src/com/koushikdutta/ion/LoadBitmapRegion.java
Patch:
@@ -6,6 +6,7 @@
 import android.graphics.Rect;
 
 import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.bitmap.IonBitmapCache;
 
 /**
  * Created by koush on 1/29/14.
@@ -18,7 +19,7 @@ public LoadBitmapRegion(final Ion ion, final String key, final BitmapRegionDecod
             @Override
             public void run() {
                 try {
-                    Bitmap bitmap = ion.bitmapCache.loadRegion(decoder, region, inSampleSize);
+                    Bitmap bitmap = IonBitmapCache.loadRegion(decoder, region, inSampleSize);
                     if (bitmap == null)
                         throw new Exception("failed to load bitmap region");
                     BitmapInfo info = new BitmapInfo(key, null, new Bitmap[] { bitmap }, new Point(bitmap.getWidth(), bitmap.getHeight()));

File: ion/src/com/koushikdutta/ion/TransformBitmap.java
Patch:
@@ -6,6 +6,7 @@
 import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.util.FileCache;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.bitmap.IonBitmapCache;
 import com.koushikdutta.ion.bitmap.Transform;
 
 import java.io.File;
@@ -30,7 +31,7 @@ public void run() {
 
                 try {
                     File file = ion.responseCache.getFileCache().getFile(transformKey);
-                    Bitmap bitmap = ion.getBitmapCache().loadBitmap(file, null);
+                    Bitmap bitmap = IonBitmapCache.loadBitmap(file, null);
                     if (bitmap == null)
                         throw new Exception("Bitmap failed to load");
                     Point size = new Point(bitmap.getWidth(), bitmap.getHeight());

File: ion/src/com/koushikdutta/ion/loader/FileLoader.java
Patch:
@@ -16,6 +16,7 @@
 import com.koushikdutta.ion.Ion;
 import com.koushikdutta.ion.Loader;
 import com.koushikdutta.ion.bitmap.BitmapInfo;
+import com.koushikdutta.ion.bitmap.IonBitmapCache;
 import com.koushikdutta.ion.gif.GifAction;
 import com.koushikdutta.ion.gif.GifDecoder;
 
@@ -77,7 +78,7 @@ public boolean parseOk(boolean parseStatus, int frameIndex) {
                         }
                     }
                     else {
-                        Bitmap bitmap = ion.getBitmapCache().loadBitmap(file, options);
+                        Bitmap bitmap = IonBitmapCache.loadBitmap(file, options);
                         if (bitmap == null)
                             throw new Exception("Bitmap failed to load");
                         bitmaps = new Bitmap[] { bitmap };

File: ion/src/com/koushikdutta/ion/IonDrawable.java
Patch:
@@ -55,9 +55,8 @@ public Drawable getCurrentDrawable() {
             if (placeholderResource != 0)
                 return resources.getDrawable(placeholderResource);
         }
-        if (info.bitmaps != null) {
+        if (info != null && info.bitmaps != null)
             return new BitmapDrawable(resources, info.bitmaps[0]);
-        }
         if (errorResource != 0)
             return resources.getDrawable(errorResource);
         return null;

File: ion/src/com/koushikdutta/ion/loader/MediaFile.java
Patch:
@@ -214,6 +214,7 @@ private static boolean isWMVEnabled() {
         addFileType("MPEG", FILE_TYPE_MP4, "video/mpeg", MtpConstants.FORMAT_MPEG);
         addFileType("MPG", FILE_TYPE_MP4, "video/mpeg", MtpConstants.FORMAT_MPEG);
         addFileType("MP4", FILE_TYPE_MP4, "video/mp4", MtpConstants.FORMAT_MPEG);
+        addFileType("MPEG4", FILE_TYPE_MP4, "video/mpeg4", MtpConstants.FORMAT_MPEG);
         addFileType("M4V", FILE_TYPE_M4V, "video/m4v", MtpConstants.FORMAT_MPEG);
         addFileType("3GP", FILE_TYPE_3GPP, "video/3gpp",  MtpConstants.FORMAT_3GP_CONTAINER);
         addFileType("3GPP", FILE_TYPE_3GPP, "video/3gpp", MtpConstants.FORMAT_3GP_CONTAINER);

File: ion/src/com/koushikdutta/ion/loader/MediaFile.java
Patch:
@@ -214,6 +214,7 @@ private static boolean isWMVEnabled() {
         addFileType("MPEG", FILE_TYPE_MP4, "video/mpeg", MtpConstants.FORMAT_MPEG);
         addFileType("MPG", FILE_TYPE_MP4, "video/mpeg", MtpConstants.FORMAT_MPEG);
         addFileType("MP4", FILE_TYPE_MP4, "video/mp4", MtpConstants.FORMAT_MPEG);
+        addFileType("MP4", FILE_TYPE_MP4, "video/mpeg4", MtpConstants.FORMAT_MPEG);
         addFileType("M4V", FILE_TYPE_M4V, "video/m4v", MtpConstants.FORMAT_MPEG);
         addFileType("3GP", FILE_TYPE_3GPP, "video/3gpp",  MtpConstants.FORMAT_3GP_CONTAINER);
         addFileType("3GPP", FILE_TYPE_3GPP, "video/3gpp", MtpConstants.FORMAT_3GP_CONTAINER);

File: ion-test/src/com/koushikdutta/ion/test/StoreTests.java
Patch:
@@ -38,7 +38,8 @@ public void testJson() throws Exception {
 
         Ion.getDefault(getContext())
         .store("foo")
-        .putJsonObject(json);
+        .putJsonObject(json)
+        .get(1000, TimeUnit.MILLISECONDS);
 
         JsonObject result = Ion.getDefault(getContext())
         .store("foo")

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -956,8 +956,9 @@ public Builders.Any.F setStreamBody(InputStream inputStream, int length) {
 
     @Override
     public Builders.Any.B setHeader(NameValuePair... header) {
+        RawHeaders headers = getHeaders();
         for (NameValuePair h: header) {
-            this.headers.set(h.getName(), h.getValue());
+            headers.set(h.getName(), h.getValue());
         }
         return this;
     }

File: ion/src/com/koushikdutta/ion/TransformBitmap.java
Patch:
@@ -88,8 +88,9 @@ public void run() {
                     Point size = null;
                     Bitmap bitmaps[] = new Bitmap[result.bitmaps.length];
                     for (int i = 0; i < result.bitmaps.length; i++) {
+                        bitmaps[i] = result.bitmaps[i];
                         for (Transform transform : transforms) {
-                            Bitmap bitmap = transform.transform(result.bitmaps[i]);
+                            Bitmap bitmap = transform.transform(bitmaps[i]);
                             if (bitmap == null)
                                 throw new Exception("failed to transform bitmap");
                             bitmaps[i] = bitmap;

File: ion/src/com/koushikdutta/ion/BitmapFetcher.java
Patch:
@@ -48,7 +48,7 @@ private boolean fastLoad(String uri) {
         boolean put = !hasTransforms;
 
         for (Loader loader: ion.configure().getLoaders()) {
-            Future<BitmapInfo> future = loader.loadBitmap(ion, downloadKey, uri, resizeWidth, resizeHeight, animateGif);
+            Future<BitmapInfo> future = loader.loadBitmap(builder.context.get(), ion, downloadKey, uri, resizeWidth, resizeHeight, animateGif);
             if (future != null) {
                 final BitmapCallback callback = new LoadBitmapBase(ion, downloadKey, put);
                 future.setCallback(new FutureCallback<BitmapInfo>() {

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -415,7 +415,7 @@ <T> void loadRequest(AsyncHttpRequest request, final EmitterTransform<T> ret) {
     <T> Future<AsyncHttpRequest> resolveRequest(AsyncHttpRequest request, final EmitterTransform<T> ret) {
         // first attempt to resolve the url
         for (Loader loader: ion.loaders) {
-            Future<AsyncHttpRequest> resolved = loader.resolve(ion, request);
+            Future<AsyncHttpRequest> resolved = loader.resolve(context.get(), ion, request);
             if (resolved != null)
                 return resolved;
 

File: ion/src/com/koushikdutta/ion/loader/FileLoader.java
Patch:
@@ -1,5 +1,6 @@
 package com.koushikdutta.ion.loader;
 
+import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Point;
@@ -34,7 +35,7 @@ private static final class FileFuture extends SimpleFuture<DataEmitter> {
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, final int resizeWidth, final int resizeHeight,
+    public Future<BitmapInfo> loadBitmap(final Context context, final Ion ion, final String key, final String uri, final int resizeWidth, final int resizeHeight,
                                          final boolean animateGif) {
         if (uri == null || !uri.startsWith("file:/"))
             return null;

File: ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
Patch:
@@ -1,6 +1,7 @@
 package com.koushikdutta.ion.loader;
 
 
+import android.content.Context;
 import android.content.pm.PackageManager;
 import android.graphics.Bitmap;
 import android.graphics.Point;
@@ -19,7 +20,7 @@
  */
 public class PackageIconLoader extends SimpleLoader {
     @Override
-    public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
+    public Future<BitmapInfo> loadBitmap(Context context, final Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         if (uri == null || !uri.startsWith("package:"))
             return null;
 

File: ion/src/com/koushikdutta/ion/loader/VideoLoader.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.annotation.TargetApi;
 import android.content.ContentResolver;
+import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.Point;
 import android.media.MediaMetadataRetriever;
@@ -34,7 +35,7 @@ public static Bitmap createVideoThumbnail(String filePath) throws Exception {
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
+    public Future<BitmapInfo> loadBitmap(Context context, Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         if (!uri.startsWith(ContentResolver.SCHEME_FILE))
             return null;
 

File: ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
Patch:
@@ -19,7 +19,7 @@
  */
 public class PackageIconLoader extends SimpleLoader {
     @Override
-    public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight) {
+    public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         if (uri == null || !uri.startsWith("package:"))
             return null;
 

File: ion/src/com/koushikdutta/ion/loader/VideoLoader.java
Patch:
@@ -34,7 +34,7 @@ public static Bitmap createVideoThumbnail(String filePath) throws Exception {
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight) {
+    public Future<BitmapInfo> loadBitmap(Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         if (!uri.startsWith(ContentResolver.SCHEME_FILE))
             return null;
 

File: ion/src/com/koushikdutta/ion/loader/SimpleLoader.java
Patch:
@@ -25,7 +25,7 @@ public Future<DataEmitter> load(Ion ion, AsyncHttpRequest request, FutureCallbac
     }
 
     @Override
-    public Future<BitmapInfo> loadBitmap(Ion ion, String key, String uri, int resizeWidth, int resizeHeight) {
+    public Future<BitmapInfo> loadBitmap(Ion ion, String key, String uri, int resizeWidth, int resizeHeight, boolean animateGif) {
         return null;
     }
 

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -97,6 +97,8 @@ public IonRequestBuilder load(String url) {
 
     private IonRequestBuilder loadInternal(String method, String url) {
         this.method = method;
+        if (!TextUtils.isEmpty(url) && url.startsWith("/"))
+            url = new File(url).toURI().toString();
         this.uri = url;
         return this;
     }

File: ion-sample/src/com/koushikdutta/ion/sample/DeepZoomSample.java
Patch:
@@ -30,7 +30,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         // this is going to load a 30mb download...
         Ion.with(this)
-        .load("https://raw2.github.com/koush/ion/master/ion-sample/telescope.jpg")
+        .load("http://www.julianjm.es/public/asturias-pano.jpg")
         .progressDialog(dlg)
         .withBitmap()
         .deepZoom()

File: ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
Patch:
@@ -20,15 +20,15 @@
 public class PackageIconLoader extends SimpleLoader {
     @Override
     public Future<BitmapInfo> loadBitmap(final Ion ion, final String key, final String uri, int resizeWidth, int resizeHeight) {
-        final URI request = URI.create(uri);
-        if (request == null || request.getScheme() == null || !request.getScheme().startsWith("package"))
+        if (uri == null || !uri.startsWith("package:"))
             return null;
 
         final SimpleFuture<BitmapInfo> ret = new SimpleFuture<BitmapInfo>();
         Ion.getBitmapLoadExecutorService().execute(new Runnable() {
             @Override
             public void run() {
                 try {
+                    final URI request = URI.create(uri);
                     String pkg = request.getHost();
                     PackageManager pm = ion.getContext().getPackageManager();
                     Bitmap bmp = ((BitmapDrawable)pm.getPackageInfo(pkg, 0).applicationInfo.loadIcon(pm)).getBitmap();

File: ion/src/com/koushikdutta/ion/BitmapCallback.java
Patch:
@@ -38,7 +38,7 @@ public void run() {
                 BitmapInfo result = info;
                 if (result == null) {
                     // cache errors
-                    result = new BitmapInfo(key, null, new Point());
+                    result = new BitmapInfo(key, null, null, new Point());
                     result.exception = e;
                     ion.getBitmapCache().put(result);
                 } else if (put()) {

File: ion/src/com/koushikdutta/ion/LoadBitmap.java
Patch:
@@ -89,7 +89,7 @@ public boolean parseOk(boolean parseStatus, int frameIndex) {
                         delays = null;
                     }
 
-                    BitmapInfo info = new BitmapInfo(key, bitmaps, size);
+                    BitmapInfo info = new BitmapInfo(key, options.outMimeType, bitmaps, size);
                     info.delays = delays;
                     if (emitterTransform != null)
                         info.loadedFrom = emitterTransform.loadedFrom();

File: ion/src/com/koushikdutta/ion/LoadBitmapRegion.java
Patch:
@@ -21,7 +21,7 @@ public void run() {
                     Bitmap bitmap = ion.bitmapCache.loadRegion(decoder, region, inSampleSize);
                     if (bitmap == null)
                         throw new Exception("failed to load bitmap region");
-                    BitmapInfo info = new BitmapInfo(key, new Bitmap[] { bitmap }, new Point(bitmap.getWidth(), bitmap.getHeight()));
+                    BitmapInfo info = new BitmapInfo(key, null, new Bitmap[] { bitmap }, new Point(bitmap.getWidth(), bitmap.getHeight()));
                     report(null, info);
                 }
                 catch (Exception e) {

File: ion/src/com/koushikdutta/ion/LoadDeepZoom.java
Patch:
@@ -79,7 +79,7 @@ public boolean parseOk(boolean parseStatus, int frameIndex) {
                             if (size == null)
                                 size = new Point(bitmap.getWidth(), bitmap.getHeight());
                         }
-                        BitmapInfo info = new BitmapInfo(key, bitmaps, size);
+                        BitmapInfo info = new BitmapInfo(key, options.outMimeType, bitmaps, size);
                         info.delays = delays;
                         if (emitterTransform != null)
                             info.loadedFrom = emitterTransform.loadedFrom();
@@ -96,8 +96,9 @@ public boolean parseOk(boolean parseStatus, int frameIndex) {
                         throw new Exception("unable to load decoder");
                     Bitmap[] bitmaps = new Bitmap[] { bitmap };
 
-                    BitmapInfo info = new BitmapInfo(key, bitmaps, size);
+                    BitmapInfo info = new BitmapInfo(key, options.outMimeType, bitmaps, size);
                     info.decoder = decoder;
+                    info.decoderFile = file;
                     info.loadedFrom = Loader.LoaderEmitter.LOADED_FROM_NETWORK;
                     report(null, info);
                 } catch (Exception e) {

File: ion/src/com/koushikdutta/ion/TransformBitmap.java
Patch:
@@ -38,7 +38,7 @@ public void run() {
                     if (bitmap == null)
                         throw new Exception("Bitmap failed to load");
                     Point size = new Point(bitmap.getWidth(), bitmap.getHeight());
-                    BitmapInfo info = new BitmapInfo(transformKey, new Bitmap[] { bitmap }, size);
+                    BitmapInfo info = new BitmapInfo(transformKey, "image/jpeg", new Bitmap[] { bitmap }, size);
                     info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
                     callback.report(null, info);
                 }
@@ -97,7 +97,7 @@ public void run() {
                                 size = new Point(bitmap.getWidth(), bitmap.getHeight());
                         }
                     }
-                    info = new BitmapInfo(key, bitmaps, size);
+                    info = new BitmapInfo(key, result.mimeType, bitmaps, size);
                     info.delays = result.delays;
                     info.loadedFrom = result.loadedFrom;
                     report(null, info);

File: ion/src/com/koushikdutta/ion/loader/FileLoader.java
Patch:
@@ -53,7 +53,7 @@ public void run() {
                     Bitmap bitmap = ion.getBitmapCache().loadBitmap(file, options);
                     if (bitmap == null)
                         throw new Exception("Bitmap failed to load");
-                    BitmapInfo info = new BitmapInfo(key, new Bitmap[] { bitmap }, size);
+                    BitmapInfo info = new BitmapInfo(key, options.outMimeType, new Bitmap[] { bitmap }, size);
                     info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }

File: ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
Patch:
@@ -34,7 +34,7 @@ public void run() {
                     Bitmap bmp = ((BitmapDrawable)pm.getPackageInfo(pkg, 0).applicationInfo.loadIcon(pm)).getBitmap();
                     if (bmp == null)
                         throw new Exception("package icon failed to load");
-                    BitmapInfo info = new BitmapInfo(key, new Bitmap[] { bmp }, new Point(bmp.getWidth(), bmp.getHeight()));
+                    BitmapInfo info = new BitmapInfo(key, null, new Bitmap[] { bmp }, new Point(bmp.getWidth(), bmp.getHeight()));
                     info.loadedFrom =  Loader.LoaderEmitter.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 }

File: ion/src/com/koushikdutta/ion/loader/VideoLoader.java
Patch:
@@ -83,7 +83,7 @@ public Future<BitmapInfo> loadBitmap(Ion ion, final String key, String uri, int
 
         final File file = new File(URI.create(uri));
 
-        MediaFile.MediaFileType type = MediaFile.getFileType(file.getAbsolutePath());
+        final MediaFile.MediaFileType type = MediaFile.getFileType(file.getAbsolutePath());
         if (type == null || !MediaFile.isVideoFileType(type.fileType))
             return null;
 
@@ -99,7 +99,7 @@ public void run() {
                     Bitmap bmp = createVideoThumbnail(file.getAbsolutePath());
                     if (bmp == null)
                         throw new Exception("video bitmap failed to load");
-                    BitmapInfo info = new BitmapInfo(key, new Bitmap[] { bmp }, new Point(bmp.getWidth(), bmp.getHeight()));
+                    BitmapInfo info = new BitmapInfo(key, type.mimeType, new Bitmap[] { bmp }, new Point(bmp.getWidth(), bmp.getHeight()));
                     info.loadedFrom = LoaderEmitter.LOADED_FROM_CACHE;
                     ret.setComplete(info);
                 } catch (Exception e) {

File: ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
Patch:
@@ -18,9 +18,8 @@ public void loadCenterCrop() {
         Ion.with(this)
         .load("http://media.salon.com/2013/05/original.jpg")
         .withBitmap()
-//        .resize(512, 512)
-//        .centerCrop()
-        .mipmap()
+        .resize(512, 512)
+        .centerCrop()
         .intoImageView(imageView);
     }
 

File: ion/src/com/koushikdutta/ion/BitmapFetcher.java
Patch:
@@ -93,7 +93,6 @@ void executeNetwork() {
         // Perform a download as necessary.
         if (ion.bitmapsPending.tag(downloadKey) == null && !fastLoad()) {
             builder.setHandler(null);
-            // if we cancel, gotta remove any waiters.
             IonRequestBuilder.EmitterTransform<ByteBufferList> emitterTransform = builder.execute(new ByteBufferListParser(), new Runnable() {
                 @Override
                 public void run() {

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -627,7 +627,7 @@ public <F extends OutputStream> ResponseFuture<F> write(F outputStream) {
     }
 
     @Override
-    public ResponseFuture<File> write(final File file) {
+    public EmitterTransform<File> write(final File file) {
         try {
             return execute(new OutputStreamDataSink(ion.getServer(), new FileOutputStream(file)), true, file, new Runnable() {
                 @Override

File: ion/src/com/koushikdutta/ion/BitmapCallback.java
Patch:
@@ -9,11 +9,11 @@
 
 import java.util.ArrayList;
 
-class BitmapCallback {
+abstract class BitmapCallback {
     String key;
     Ion ion;
 
-    public BitmapCallback(Ion ion, String key, boolean put) {
+    protected BitmapCallback(Ion ion, String key, boolean put) {
         this.key = key;
         this.put = put;
         this.ion = ion;

File: ion/src/com/koushikdutta/ion/LoadBitmap.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 
-class LoadBitmap extends BitmapCallback implements FutureCallback<ByteBufferList> {
+class LoadBitmap extends LoadBitmapBase implements FutureCallback<ByteBufferList> {
     int resizeWidth;
     int resizeHeight;
     IonRequestBuilder.EmitterTransform<ByteBufferList> emitterTransform;

File: ion/src/com/koushikdutta/ion/TransformBitmap.java
Patch:
@@ -22,7 +22,7 @@ public static void getBitmapSnapshot(final Ion ion, final String transformKey) {
         // don't do this if this is already loading
         if (ion.bitmapsPending.tag(transformKey) != null)
             return;
-        final BitmapCallback callback = new BitmapCallback(ion, transformKey, true);
+        final BitmapCallback callback = new LoadBitmapBase(ion, transformKey, true);
         Ion.getBitmapLoadExecutorService().execute(new Runnable() {
             @Override
             public void run() {

File: ion/src/com/koushikdutta/ion/loader/FileLoader.java
Patch:
@@ -94,7 +94,7 @@ public void run() {
                 File file = new File(request.getUri());
                 FileDataEmitter emitter = new FileDataEmitter(ion.getHttpClient().getServer(), file);
                 ret.setComplete(emitter);
-                callback.onCompleted(null, new LoaderEmitter(emitter, (int)file.length(), LoaderEmitter.LOADED_FROM_CACHE, null, null));
+                callback.onCompleted(null, new LoaderEmitter(emitter, (int)file.length(), LoaderEmitter.LOADED_FROM_CACHE, null, request));
             }
         });
         return ret;

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -379,6 +379,7 @@ public void onCompleted(Exception e, T result) {
                     ret.setComplete(e, null);
                 }
             });
+            ret.setParent(this);
             return ret;
         }
 

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -379,6 +379,7 @@ public void onCompleted(Exception e, T result) {
                     ret.setComplete(e, null);
                 }
             });
+            ret.setParent(this);
             return ret;
         }
 

File: ion/src/com/koushikdutta/ion/loader/FileLoader.java
Patch:
@@ -47,6 +47,9 @@ public void run() {
                     fin.close();
                     ret.setComplete(info);
                 }
+                catch (OutOfMemoryError e) {
+                    ret.setComplete(new Exception(e), null);
+                }
                 catch (Exception e) {
                     ret.setComplete(e);
                 }

File: ion/src/com/koushikdutta/ion/LoadBitmapStream.java
Patch:
@@ -43,7 +43,7 @@ public void onCompleted(Exception e, final InputStream result) {
             return;
         }
 
-        ion.getServer().getExecutorService().execute(new Runnable() {
+        Ion.getBitmapLoadExecutorService().execute(new Runnable() {
             @Override
             public void run() {
                 loadInputStream(result);

File: ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
Patch:
@@ -140,7 +140,7 @@ public Bitmap loadBitmap(InputStream stream, int minx, int miny) {
         if (targetHeight <= 0)
             targetHeight = Integer.MAX_VALUE;
 
-        int rotation = 0;
+        int rotation;
         try {
             byte[] bytes = new byte[50000];
             stream.mark(Integer.MAX_VALUE);
@@ -149,7 +149,7 @@ public Bitmap loadBitmap(InputStream stream, int minx, int miny) {
             stream.reset();
         }
         catch (Exception e) {
-            return null;
+            rotation = 0;
         }
 
         BitmapFactory.Options o = null;

File: ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
Patch:
@@ -15,7 +15,6 @@ public class BitmapInfo {
     public Bitmap[] bitmaps;
     public int[] delays;
     public Exception exception;
-    public WeakReference<Bitmap> bitmapRef;
 
     public int sizeOf() {
         if (bitmaps == null)

File: ion/src/com/koushikdutta/ion/loader/VideoLoader.java
Patch:
@@ -92,7 +92,7 @@ public Future<BitmapInfo> loadBitmap(Ion ion, String uri) {
         final File file = new File(URI.create(uri));
 
         MediaFile.MediaFileType type = MediaFile.getFileType(file.getAbsolutePath());
-        if (!MediaFile.isVideoFileType(type.fileType))
+        if (type == null || !MediaFile.isVideoFileType(type.fileType))
             return null;
 
         final SimpleFuture<BitmapInfo> ret = new SimpleFuture<BitmapInfo>();

File: ion/src/com/koushikdutta/ion/DefaultTransform.java
Patch:
@@ -38,7 +38,7 @@ public Bitmap transform(Bitmap b) {
             float postHeight = b.getHeight() * ratio;
             float transx = (resizeWidth - postWidth) / 2;
             float transy = (resizeHeight - postHeight) / 2;
-            destination.set(transx, transy, transx + postWidth, transy + postHeight);
+            destination.set(transx, transy, resizeWidth - transx, resizeHeight - transy);
         }
 
         canvas.drawBitmap(b, null, destination, null);

File: ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
Patch:
@@ -69,18 +69,18 @@ public void onProgress(int downloaded, int total) {
                         public void onCompleted(Exception e, File result) {
                             resetDownload();
                             if (e != null) {
-                                Toast.makeText(ProgressBarDownload.this, "Error downloading file", Toast.LENGTH_LONG).show();
+                                Toast.makeText(ProgressBarDownload.this, "Error uploading file", Toast.LENGTH_LONG).show();
                                 return;
                             }
-                            Toast.makeText(ProgressBarDownload.this, "File download complete", Toast.LENGTH_LONG).show();
+                            Toast.makeText(ProgressBarDownload.this, "File upload complete", Toast.LENGTH_LONG).show();
                         }
                     });
             }
         });
     }
 
     void resetDownload() {
-        // cancel any pending download
+        // cancel any pending upload
         downloading.cancel();
         downloading = null;
 

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -304,7 +304,7 @@ private <T> void getLoaderEmitter(final EmitterTransform<T> ret) {
                 public void onProgress(final int downloaded, final int total) {
                     assert Thread.currentThread() != Looper.getMainLooper().getThread();
 
-                    int percent = (int)((float)total / total * 100f);
+                    final int percent = (int)((float)downloaded / total * 100f);
 
                     if (uploadProgressBar != null)
                         uploadProgressBar.setProgress(percent);

File: ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
Patch:
@@ -69,10 +69,12 @@ public BitmapInfo get(String key) {
 
         // see if the the bitmap got evicted and put into a weak ref
         if (ret.bitmapsRef != null) {
-            ret.bitmaps = ret.bitmapsRef.get();
+            Bitmap[] bitmaps = ret.bitmapsRef.get();
             // see if we successfully repopulated from the weak ref
             if (ret.bitmaps != null) {
                 cache.remove(key);
+                ret.bitmaps = bitmaps;
+                ret.bitmapsRef = null;
                 cache.put(key, ret);
                 System.out.println("===== SUCCESSFULLY GRABBED FROM WEAK REF CACHE! ====");
                 return ret;

File: ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
Patch:
@@ -72,6 +72,8 @@ public BitmapInfo get(String key) {
             ret.bitmaps = ret.bitmapsRef.get();
             // see if we successfully repopulated from the weak ref
             if (ret.bitmaps != null) {
+                cache.remove(key);
+                cache.put(key, ret);
                 System.out.println("===== SUCCESSFULLY GRABBED FROM WEAK REF CACHE! ====");
                 return ret;
             }

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -442,9 +442,10 @@ public void setGson(Gson gson) {
         AsyncHttpRequestFactory asyncHttpRequestFactory = new AsyncHttpRequestFactory() {
             @Override
             public AsyncHttpRequest createAsyncHttpRequest(URI uri, String method, RawHeaders headers) {
+                AsyncHttpRequest request = new AsyncHttpRequest(uri, method, headers);
                 if (!TextUtils.isEmpty(userAgent))
-                    headers.set("User-Agent", userAgent);
-                return new AsyncHttpRequest(uri, method, headers);
+                    request.getHeaders().setUserAgent(userAgent);
+                return request;
             }
         };
 

File: ion/src/com/koushikdutta/ion/cookie/CookieMiddleware.java
Patch:
@@ -67,7 +67,7 @@ else if (!TextUtils.isEmpty(line)) {
     @Override
     public void onSocket(OnSocketData data) {
         try {
-            Map<String, List<String>> cookies =  manager.get (data.request.getUri(), data.request.getHeaders().getHeaders().toMultimap());
+            Map<String, List<String>> cookies = manager.get (data.request.getUri(), data.request.getHeaders().getHeaders().toMultimap());
             data.request.getHeaders().addCookies(cookies);
         }
         catch (Exception e) {

File: ion/src/com/koushikdutta/ion/loader/PackageIconLoader.java
Patch:
@@ -35,7 +35,7 @@ public Future<DataEmitter> load(Ion ion, AsyncHttpRequest request, FutureCallbac
     @Override
     public Future<BitmapInfo> loadBitmap(final Ion ion, final String uri) {
         final URI request = URI.create(uri);
-        if (!request.getScheme().startsWith("package"))
+        if (request == null || request.getScheme() == null || !request.getScheme().startsWith("package"))
             return null;
 
         final SimpleFuture<BitmapInfo> ret = new SimpleFuture<BitmapInfo>();

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -44,7 +44,8 @@
  */
 public class Ion {
     static final Handler mainHandler = new Handler(Looper.getMainLooper());
-    static ExecutorService singleExecutorService  = Runtime.getRuntime().availableProcessors() < 2 ? null : Executors.newFixedThreadPool(1);
+    static int availableProcessors = Runtime.getRuntime().availableProcessors();
+    static ExecutorService singleExecutorService  = availableProcessors > 2 ? null : Executors.newFixedThreadPool(1);
     static HashMap<String, Ion> instances = new HashMap<String, Ion>();
 
     /**

File: ion/src/com/koushikdutta/ion/LoadBitmap.java
Patch:
@@ -71,7 +71,8 @@ public void run() {
                     else {
                         GifDecoder decoder = new GifDecoder(bb.array(), bb.arrayOffset() + bb.position(), bb.remaining(), new GifAction() {
                             @Override
-                            public void parseOk(boolean parseStatus, int frameIndex) {
+                            public boolean parseOk(boolean parseStatus, int frameIndex) {
+                                return frameIndex < 100;
                             }
                         });
                         decoder.run();

File: ion/src/com/koushikdutta/ion/gif/GifAction.java
Patch:
@@ -1,5 +1,5 @@
 package com.koushikdutta.ion.gif;
 
 public interface GifAction {
-    public void parseOk(boolean parseStatus, int frameIndex);
+    public boolean parseOk(boolean parseStatus, int frameIndex);
 }

File: ion-test/src/com/koushikdutta/ion/test/HttpTests.java
Patch:
@@ -35,7 +35,7 @@ public class HttpTests extends AndroidTestCase {
     @Override
     protected void setUp() throws Exception {
         super.setUp();
-        Ion.getDefault(getContext()).setLogging("HttpTests", Log.DEBUG);
+        Ion.getDefault(getContext()).configure().setLogging("HttpTests", Log.DEBUG);
     }
 
     public void testString() throws Exception {

File: ion-test/src/com/koushikdutta/ion/test/Issue74.java
Patch:
@@ -10,7 +10,7 @@
  */
 public class Issue74 extends AndroidTestCase {
     public void testIssue() throws Exception {
-        Ion.getDefault(getContext()).getResponseCache().clear();
+        Ion.getDefault(getContext()).configure().getResponseCache().clear();
 
         String data = Ion.with(getContext(), "https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
         .setLogging("MyLogs", Log.VERBOSE)

File: ion-test/src/com/koushikdutta/ion/test/RedirectTests.java
Patch:
@@ -16,7 +16,7 @@
 public class RedirectTests extends AndroidTestCase {
     public void testFinalLocation() throws Exception {
         try {
-            Ion.getDefault(getContext()).setLogging("redirect", Log.VERBOSE);
+            Ion.getDefault(getContext()).configure().setLogging("redirect", Log.VERBOSE);
             AsyncHttpServer server = new AsyncHttpServer();
             server.listen(Ion.getDefault(getContext()).getServer(), 5555);
             server.get("/", new HttpServerRequestCallback() {

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -44,7 +44,8 @@
  */
 public class Ion {
     static final Handler mainHandler = new Handler(Looper.getMainLooper());
-    static ExecutorService singleExecutorService  = Runtime.getRuntime().availableProcessors() < 2 ? null : Executors.newFixedThreadPool(1);
+    static int availableProcessors = Runtime.getRuntime().availableProcessors();
+    static ExecutorService singleExecutorService  = availableProcessors > 2 ? null : Executors.newFixedThreadPool(1);
     static HashMap<String, Ion> instances = new HashMap<String, Ion>();
 
     /**

File: ion-sample/src/com/koushikdutta/ion/sample/GallerySample.java
Patch:
@@ -60,7 +60,7 @@ public void onCreate(Bundle savedInstanceState) {
 //        .build());
         super.onCreate(savedInstanceState);
 
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         setContentView(R.layout.gallery);
 

File: ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java
Patch:
@@ -98,7 +98,7 @@ public void onCreate(Bundle savedInstanceState) {
 //        .build());
         super.onCreate(savedInstanceState);
 
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         setContentView(R.layout.google_image_search);
 

File: ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
Patch:
@@ -30,7 +30,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         // Enable global Ion logging
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         setContentView(R.layout.progress);
 

File: ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
Patch:
@@ -46,7 +46,7 @@ public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         // Enable global Ion logging
-        Ion.getDefault(this).setLogging("ion-sample", Log.DEBUG);
+        Ion.getDefault(this).configure().setLogging("ion-sample", Log.DEBUG);
 
         // create a tweet adapter for our list view
         tweetAdapter = new ArrayAdapter<Tweet>(this, 0) {

File: ion-test/src/com/koushikdutta/ion/test/Issue74.java
Patch:
@@ -10,8 +10,6 @@
  */
 public class Issue74 extends AndroidTestCase {
     public void testIssue() throws Exception {
-        Ion.getDefault(getContext()).getResponseCache().clear();
-
         String data = Ion.with(getContext(), "https://raw.github.com/koush/AndroidAsync/master/AndroidAsyncTest/testdata/test.json")
         .setLogging("MyLogs", Log.VERBOSE)
         .asString().get();

File: ion-test/src/com/koushikdutta/ion/test/RedirectTests.java
Patch:
@@ -16,7 +16,6 @@
 public class RedirectTests extends AndroidTestCase {
     public void testFinalLocation() throws Exception {
         try {
-            Ion.getDefault(getContext()).setLogging("redirect", Log.VERBOSE);
             AsyncHttpServer server = new AsyncHttpServer();
             server.listen(Ion.getDefault(getContext()).getServer(), 5555);
             server.get("/", new HttpServerRequestCallback() {

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -55,7 +55,6 @@ public ExecutorService getBitmapLoadExecutorService() {
         return executorService;
     }
 
-
     /**
      * Get the default Ion object instance and begin building a request
      * with the given uri

File: ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
Patch:
@@ -120,11 +120,11 @@ public Bitmap loadBitmap(InputStream stream, int minx, int miny) {
         assert Thread.currentThread() != Looper.getMainLooper().getThread();
         int targetWidth = minx;
         int targetHeight = miny;
-        if (targetWidth <= 0)
+        if (targetWidth == 0)
             targetWidth = metrics.widthPixels;
         if (targetWidth <= 0)
             targetWidth = Integer.MAX_VALUE;
-        if (targetHeight <= 0)
+        if (targetHeight == 0)
             targetHeight = metrics.heightPixels;
         if (targetHeight <= 0)
             targetHeight = Integer.MAX_VALUE;

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -353,7 +353,7 @@ public void onCompleted(Exception e, T result) {
                         response.request = finalRequest;
                         response.result = result;
                         response.exception = e;
-                        ret.setComplete(e, response);
+                        ret.setComplete(response);
                         return;
                     }
                     ret.setComplete(e, null);

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -353,7 +353,7 @@ public void onCompleted(Exception e, T result) {
                         response.request = finalRequest;
                         response.result = result;
                         response.exception = e;
-                        ret.setComplete(response);
+                        ret.setComplete(e, response);
                         return;
                     }
                     ret.setComplete(e, null);

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -353,7 +353,7 @@ public void onCompleted(Exception e, T result) {
                         response.request = finalRequest;
                         response.result = result;
                         response.exception = e;
-                        ret.setComplete(response);
+                        ret.setComplete(e, response);
                         return;
                     }
                     ret.setComplete(e, null);

File: ion/src/com/koushikdutta/ion/BitmapCallback.java
Patch:
@@ -35,6 +35,7 @@ public void run() {
                     result = new BitmapInfo();
                     result.bitmaps = null;
                     result.key = key;
+                    result.exception = e;
                     ion.getBitmapCache().put(result);
                 } else if (put()) {
                     ion.getBitmapCache().put(result);

File: ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
Patch:
@@ -240,7 +240,8 @@ public Future<Bitmap> asBitmap() {
         BitmapInfo info = execute();
         if (info != null) {
             SimpleFuture<Bitmap> ret = new SimpleFuture<Bitmap>();
-            ret.setComplete(info.bitmaps[0]);
+            Bitmap bitmap = info.bitmaps == null ? null : info.bitmaps[0];
+            ret.setComplete(info.exception, bitmap);
             return ret;
         }
 

File: ion/src/com/koushikdutta/ion/bitmap/BitmapInfo.java
Patch:
@@ -12,6 +12,7 @@ public class BitmapInfo {
     public int loadedFrom;
     public Bitmap[] bitmaps;
     public int[] delays;
+    public Exception exception;
 
     public int sizeOf() {
         if (bitmaps == null)

File: ion-test/src/com/koushikdutta/ion/test/StreamTests.java
Patch:
@@ -30,6 +30,7 @@ protected void setUp() throws Exception {
         server.get("/", new HttpServerRequestCallback() {
             @Override
             public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
+                response.responseCode(200);
                 ByteBuffer b = ByteBufferList.obtain(random.length);
                 b.put(random);
                 b.flip();

File: ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
Patch:
@@ -98,7 +98,7 @@ public void onCompleted(Exception e, BitmapInfo result) {
     String bitmapKey;
     BitmapInfo execute() {
         final String downloadKey = ResponseCacheMiddleware.toKeyString(builder.uri);
-        assert Thread.currentThread() == Looper.getMainLooper().getThread();
+        assert Thread.currentThread() == Looper.getMainLooper().getThread() || imageViewPostRef == null;
         assert downloadKey != null;
 
         if (resizeHeight != 0 || resizeWidth != 0) {

File: ion/src/com/koushikdutta/ion/bitmap/IonBitmapCache.java
Patch:
@@ -58,7 +58,6 @@ public void put(BitmapInfo info) {
     public BitmapInfo get(String key) {
         if (key == null)
             return null;
-        assert Thread.currentThread() == Looper.getMainLooper().getThread();
         BitmapInfo ret = cache.get(key);
         if (ret == null || ret.bitmaps != null)
             return ret;

File: ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
Patch:
@@ -105,7 +105,7 @@ BitmapInfo execute() {
         // bitmaps that were transformed are put into the DiskLruCache to prevent
         // subsequent retransformation. See if we can retrieve the bitmap from the disk cache.
         // See BitmapToBitmapInfo for where the cache is populated.
-        DiskLruCache diskLruCache = ion.getResponseCache().getDiskLruCache();
+       DiskLruCache diskLruCache = ion.getResponseCache().getDiskLruCache();
         if (!builder.noCache && hasTransforms && diskLruCache.containsKey(bitmapKey)) {
             BitmapToBitmapInfo.getBitmapSnapshot(ion, bitmapKey);
             return null;
@@ -158,6 +158,7 @@ public void run() {
     private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loadedFrom) {
         IonDrawable ret = IonDrawable.getOrCreateIonDrawable(imageView);
         ret.setBitmap(info, loadedFrom);
+        ret.setSize(resizeWidth, resizeHeight);
         ret.setError(errorResource, errorDrawable);
         ret.setPlaceholder(placeholderResource, placeholderDrawable);
         ret.setInAnimation(inAnimation, inAnimationResource);

File: ion/src/com/koushikdutta/ion/IonDrawable.java
Patch:
@@ -208,6 +208,7 @@ public int getIntrinsicHeight() {
         @Override
         public void run() {
             invalidateScheduled = false;
+            currentFrame++;
             invalidateSelf();
         }
     };
@@ -248,9 +249,10 @@ public void draw(Canvas canvas) {
             canvas.drawBitmap(info.bitmaps[currentFrame % info.bitmaps.length], null, getBounds(), paint);
             paint.setAlpha(0xFF);
             if (info.delays != null) {
-                int delay = info.delays[currentFrame++ % info.delays.length];
+                int delay = info.delays[currentFrame % info.delays.length];
                 if (!invalidateScheduled) {
                     invalidateScheduled = true;
+                    unscheduleSelf(invalidate);
                     scheduleSelf(invalidate, SystemClock.uptimeMillis() + Math.max(delay, 100));
                 }
             }

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -308,7 +308,7 @@ public void onProgress(final int downloaded, final int total) {
                             public void run() {
                                 if (ret.isCancelled() || ret.isDone())
                                     return;
-                                progressHandler.onProgress(downloaded, total);
+                                uploadProgressHandler.onProgress(downloaded, total);
                             }
                         });
                     }

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -771,7 +771,7 @@ public Builders.Any.F setFileBody(File file) {
     }
 
     @Override
-    public Builders.Any.F setStreamBody(InputStream inputStream, int length, String contentType) {
+    public Builders.Any.F setStreamBody(InputStream inputStream, int length) {
         setBody(new StreamBody(inputStream, length));
         return this;
     }

File: ion/src/com/koushikdutta/ion/builder/RequestBuilder.java
Patch:
@@ -229,8 +229,7 @@ public interface RequestBuilder<F, R extends RequestBuilder, M extends Multipart
      * provided in the load call, the default HTTP method, POST, is used.
      * @param inputStream InputStream to send with the request
      * @param length length of the input stream (in bytes) to read
-     * @param contentType MIME type to declare
      * @return
      */
-    public Builders.Any.F setStreamBody(InputStream inputStream, int length, String contentType);
+    public Builders.Any.F setStreamBody(InputStream inputStream, int length);
 }

File: ion/src/com/koushikdutta/ion/IonDrawable.java
Patch:
@@ -94,7 +94,7 @@ public void onCompleted(Exception e, BitmapInfo result) {
             drawable.setBitmap(result, result.loadedFrom);
             imageView.setImageDrawable(drawable);
             IonBitmapRequestBuilder.doAnimation(imageView, inAnimation, inAnimationResource);
-            imageViewFuture.setComplete(imageView);
+            imageViewFuture.setComplete(e, imageView);
 
         }
     }

File: ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
Patch:
@@ -26,7 +26,7 @@ public static void getBitmapSnapshot(final Ion ion, final String transformKey) {
         ion.getServer().getExecutorService().execute(new Runnable() {
             @Override
             public void run() {
-                final LoadBitmap callback = new LoadBitmap(ion, transformKey, true, 0, 0, Loader.LoaderEmitter.LOADED_FROM_CACHE);
+                final LoadBitmap callback = new LoadBitmap(ion, transformKey, true, -1, -1, Loader.LoaderEmitter.LOADED_FROM_CACHE);
 
                 try {
                     DiskLruCache.Snapshot snapshot = ion.getResponseCache().getDiskLruCache().get(transformKey);

File: ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
Patch:
@@ -107,7 +107,7 @@ BitmapInfo execute() {
         // subsequent retransformation. See if we can retrieve the bitmap from the disk cache.
         // See BitmapToBitmapInfo for where the cache is populated.
         DiskLruCache diskLruCache = ion.getResponseCache().getDiskLruCache();
-        if (diskLruCache.containsKey(bitmapKey)) {
+        if (hasTransforms && diskLruCache.containsKey(bitmapKey)) {
             BitmapToBitmapInfo.getBitmapSnapshot(ion, bitmapKey);
             return null;
         }

File: ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
Patch:
@@ -16,7 +16,7 @@
 public class ImageViewSample extends Activity {
     public void loadCenterCrop() {
         Ion.with(this)
-        .load("http://media.salon.com/2013/05/original.jpg")
+        .load("https://lh5.googleusercontent.com/-34_lgJ3dywU/UjDLR2h1W1I/AAAAAAAALok/0bfYkzdbzaI/s144/IMG_20130911_124914.jpg")
         .withBitmap()
         .resize(512, 512)
         .centerCrop()
@@ -25,7 +25,7 @@ public void loadCenterCrop() {
 
     public void loadCenterInside() {
         Ion.with(this)
-        .load("http://media.salon.com/2013/05/original.jpg")
+        .load("https://lh5.googleusercontent.com/-34_lgJ3dywU/UjDLR2h1W1I/AAAAAAAALok/0bfYkzdbzaI/s144/IMG_20130911_124914.jpg")
         .withBitmap()
         .resize(512, 512)
         .centerInside()

File: ion/src/com/koushikdutta/ion/BitmapToBitmapInfo.java
Patch:
@@ -85,7 +85,7 @@ public void run() {
                         return;
                     try {
                         for (int i = 1; i < ResponseCacheMiddleware.ENTRY_COUNT; i++) {
-                            editor.set(0, key);
+                            editor.set(i, key);
                         }
                         OutputStream out = editor.newOutputStream(0);
                         Bitmap.CompressFormat format = info.bitmap.hasAlpha() ? Bitmap.CompressFormat.PNG : Bitmap.CompressFormat.JPEG;

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -443,6 +443,7 @@ public void run() {
                             }
                         });
                     }
+                    lastPercent = percent;
 
                     if (progress != null)
                         progress.onProgress(totalBytesRead, total);

File: ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
Patch:
@@ -373,8 +373,8 @@ public String key() {
     private boolean disableFadeIn;
 
     @Override
-    public IonBitmapRequestBuilder disableFadeIn(){
-        this.disableFadeIn=true;
+    public IonBitmapRequestBuilder disableFadeIn() {
+        this.disableFadeIn = true;
         return this;
     }
 
@@ -394,7 +394,7 @@ void reset() {
         scaleMode = ScaleMode.FitXY;
         resizeWidth = 0;
         resizeHeight = 0;
-        disableFadeIn=false;
+        disableFadeIn = false;
         builder = null;
     }
 }

File: ion/src/com/koushikdutta/ion/IonDrawable.java
Patch:
@@ -220,8 +220,8 @@ public void draw(Canvas canvas) {
 
         long destAlpha = 0xFF;
 
-        if(!disableFadeIn){
-            destAlpha=((SystemClock.uptimeMillis() - info.drawTime) << 8) / FADE_DURATION;
+        if(!disableFadeIn) {
+            destAlpha = ((SystemClock.uptimeMillis() - info.drawTime) << 8) / FADE_DURATION;
             destAlpha = Math.min(destAlpha, 0xFF);
         }
 

File: ion-test/src/com/koushikdutta/ion/test/ProgressTests.java
Patch:
@@ -57,7 +57,7 @@ public void onCompleted(Exception e, ByteArrayOutputStream result) {
     public void testUpload() throws Exception {
         AsyncHttpServer httpServer = new AsyncHttpServer();
         try {
-            httpServer.listen(AsyncServer.getDefault(), 5000);
+            httpServer.listen(Ion.getDefault(getContext()).getServer(), 5000);
             httpServer.post("/", new HttpServerRequestCallback() {
                 @Override
                 public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
@@ -93,7 +93,7 @@ public void onProgress(int downloaded, int total) {
             assertTrue(semaphore.tryAcquire());
         }
         finally {
-            AsyncServer.getDefault().stop();
+            Ion.getDefault(getContext()).getServer().stop();
         }
     }
 }

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -33,6 +33,7 @@
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.http.body.AsyncHttpRequestBody;
 import com.koushikdutta.async.http.Multimap;
+import com.koushikdutta.async.http.body.DocumentBody;
 import com.koushikdutta.async.http.body.MultipartFormDataBody;
 import com.koushikdutta.async.http.body.StringBody;
 import com.koushikdutta.async.http.body.UrlEncodedFormBody;
@@ -715,7 +716,7 @@ public Builders.Any.B onHeaders(HeadersCallback callback) {
 
     @Override
     public Builders.Any.F setDocumentBody(Document document) {
-        setBody(new )
+        setBody(new DocumentBody(document));
         return this;
     }
 

File: ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
Patch:
@@ -395,6 +395,6 @@ void reset() {
         resizeWidth = 0;
         resizeHeight = 0;
         disableFadeIn=false;
-	builder = null;
+        builder = null;
     }
 }

File: ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
Patch:
@@ -150,7 +150,7 @@ private IonDrawable setIonDrawable(ImageView imageView, BitmapInfo info, int loa
         ret.setPlaceholder(placeholderResource, placeholderDrawable);
         ret.setInAnimation(inAnimation, inAnimationResource);
         ret.setDisableFadeIn(disableFadeIn);
-	imageView.setImageDrawable(ret);
+        imageView.setImageDrawable(ret);
         return ret;
     }
 

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -124,7 +124,7 @@ public IonRequestBuilder addQuery(String name, String value) {
         return this;
     }
 
-    int timeoutMilliseconds;
+    int timeoutMilliseconds = AsyncHttpRequest.DEFAULT_TIMEOUT;
     @Override
     public IonRequestBuilder setTimeout(int timeoutMilliseconds) {
         this.timeoutMilliseconds = timeoutMilliseconds;

File: ion/src/com/koushikdutta/ion/gson/GsonBody.java
Patch:
@@ -9,6 +9,7 @@
 import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.http.AsyncHttpRequest;
 import com.koushikdutta.async.http.AsyncHttpRequestBody;
+import com.koushikdutta.async.http.JSONObjectBody;
 import com.koushikdutta.ion.Ion;
 
 import java.io.ByteArrayOutputStream;
@@ -47,7 +48,7 @@ public void write(AsyncHttpRequest request, DataSink sink, final CompletedCallba
 
     @Override
     public String getContentType() {
-        return "application/json";
+        return CONTENT_TYPE;
     }
 
     @Override
@@ -62,7 +63,7 @@ public int length() {
         return mBodyBytes.length;
     }
 
-    public static final String CONTENT_TYPE = "application/json";
+    public static final String CONTENT_TYPE = JSONObjectBody.CONTENT_TYPE;
 
     @Override
     public T get() {

File: ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
Patch:
@@ -5,7 +5,6 @@
 import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.animation.AnimationUtils;
 import android.widget.ArrayAdapter;
 import android.widget.ImageView;
 import android.widget.ListView;

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -127,7 +127,7 @@ public IonRequestBuilder addQuery(String name, String value) {
     int timeoutMilliseconds;
     @Override
     public IonRequestBuilder setTimeout(int timeoutMilliseconds) {
-        this.timeoutMilliseconds = AsyncHttpRequest.DEFAULT_TIMEOUT;
+        this.timeoutMilliseconds = timeoutMilliseconds;
         return this;
     }
 

File: ion/src/com/koushikdutta/ion/gson/GsonParser.java
Patch:
@@ -30,7 +30,7 @@ public Future<T> parse(DataEmitter emitter) {
             protected void transform(ByteBufferList result) throws Exception {
                 JsonParser parser = new JsonParser();
                 T parsed = (T)parser.parse(new JsonReader(new InputStreamReader(new ByteBufferListInputStream(result))));
-                if (parsed.isJsonNull())
+                if (parsed.isJsonNull() || parsed.isJsonPrimitive())
                     throw new JsonParseException("unable to parse json");
                 setComplete(null, parsed);
             }

File: ion/src/com/koushikdutta/ion/IonBitmapRequestBuilder.java
Patch:
@@ -162,7 +162,7 @@ public Future<ImageView> intoImageView(ImageView imageView) {
         // no uri? just set a placeholder and bail
         if (builder.uri == null) {
             bitmapKey = null;
-            setIonDrawable(imageView, null, 0);
+            setIonDrawable(imageView, null, 0).cancel();
             return FUTURE_IMAGEVIEW_NULL_URI;
         }
 
@@ -171,6 +171,7 @@ public Future<ImageView> intoImageView(ImageView imageView) {
         if (info != null) {
             doAnimation(imageView, null, 0);
             IonDrawable drawable = setIonDrawable(imageView, info, Loader.LoaderEmitter.LOADED_FROM_MEMORY);
+            drawable.cancel();
             SimpleFuture<ImageView> imageViewFuture = drawable.getFuture();
             imageViewFuture.reset();
             imageViewFuture.setComplete(imageView);

File: ion/src/com/koushikdutta/ion/builder/Builders.java
Patch:
@@ -14,7 +14,7 @@ public interface Any {
         public interface IF<A extends IF<?>> extends ImageViewBuilder<A>, ImageViewFutureBuilder {
         }
 
-        public interface BF<A extends BF<?>> extends BitmapBuilder<A>, BitmapFutureBuilder, IF<IF<?>> {
+        public interface BF<A extends BF<?>> extends BitmapBuilder<A>, BitmapFutureBuilder, IF<A> {
         }
 
         public interface F extends FutureBuilder, ImageViewFutureBuilder {

File: ion-sample/src/com/koushikdutta/ion/sample/GoogleImageSearch.java
Patch:
@@ -61,7 +61,8 @@ void loadMore() {
             return;
 
         // query googles image search api
-        loading = Ion.with(GoogleImageSearch.this, String.format("https://ajax.googleapis.com/ajax/services/search/images?v=1.0&q=%s&start=%d&imgsz=large", Uri.encode(searchText.getText().toString()), mAdapter.getCount()))
+        loading = Ion.with(GoogleImageSearch.this)
+        .load(String.format("https://ajax.googleapis.com/ajax/services/search/images?v=1.0&q=%s&start=%d&imgsz=medium", Uri.encode(searchText.getText().toString()), mAdapter.getCount()))
         // get the results as json
         .asJsonObject()
         .setCallback(new FutureCallback<JsonObject>() {

File: ion-sample/src/com/koushikdutta/ion/sample/Twitter.java
Patch:
@@ -65,8 +65,6 @@ public View getView(int position, View convertView, ViewGroup parent) {
                 Ion.with(imageView)
                 // use a placeholder google_image if it needs to load from the network
                 .placeholder(R.drawable.twitter)
-                // use a fade in animation when it finishes loading
-                .animateIn(R.anim.fadein)
                 // load the url
                 .load(imageUrl);
 

File: ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
Patch:
@@ -74,8 +74,6 @@ public View getView(int position, View convertView, ViewGroup parent) {
                 Ion.with(imageView)
                 // use a placeholder google_image if it needs to load from the network
                 .placeholder(R.drawable.twitter)
-                // use a fade in animation when it finishes loading
-                .animateIn(R.anim.fadein)
                 // load the url
                 .load(tweet.user.imageUrl);
 

File: ion/src/com/koushikdutta/ion/bitmap/LruBitmapCache.java
Patch:
@@ -19,6 +19,8 @@ public LruBitmapCache(int maxSize) {
     @Override
     protected int sizeOf(String key, BitmapInfo info) {
         Bitmap value = info.bitmap;
+        if (value == null)
+            return 0;
         return value.getRowBytes() * value.getHeight();
     }
 }

File: ion-test/src/com/koushikdutta/ion/test/AuthTests.java
Patch:
@@ -3,6 +3,7 @@
 import android.test.AndroidTestCase;
 import android.util.Base64;
 import com.google.gson.JsonObject;
+import com.koushikdutta.async.AsyncServer;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
 import com.koushikdutta.async.http.server.AsyncHttpServerResponse;
@@ -26,6 +27,7 @@ protected void setUp() throws Exception {
     protected void tearDown() throws Exception {
         super.tearDown();
         httpServer.stop();
+        AsyncServer.getDefault().stop();
     }
 
     public void testBasicAuth() throws Exception {

File: ion-test/src/com/koushikdutta/ion/test/GsonTests.java
Patch:
@@ -6,6 +6,7 @@
 import com.google.gson.JsonParseException;
 import com.google.gson.annotations.SerializedName;
 import com.google.gson.reflect.TypeToken;
+import com.koushikdutta.async.AsyncServer;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.http.server.AsyncHttpServer;
 import com.koushikdutta.async.http.server.AsyncHttpServerRequest;
@@ -58,6 +59,7 @@ public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerRespo
         }
         finally {
             httpServer.stop();
+            AsyncServer.getDefault().stop();
         }
     }
 }

File: ion-test/src/com/koushikdutta/ion/test/HttpTests.java
Patch:
@@ -197,8 +197,8 @@ public void onCompleted(Exception e, List<Dummy> result) {
     public void testProxy() throws Exception {
         wasProxied = false;
         final AsyncServer proxyServer = new AsyncServer();
+        AsyncHttpServer httpServer = new AsyncHttpServer();
         try {
-            AsyncHttpServer httpServer = new AsyncHttpServer();
             httpServer.get(".*", new HttpServerRequestCallback() {
                 @Override
                 public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerResponse response) {
@@ -228,6 +228,7 @@ public void onCompleted(Exception e, AsyncHttpResponse source, String result) {
             assertTrue(wasProxied);
         }
         finally {
+            httpServer.stop();
             proxyServer.stop();
         }
     }
@@ -249,6 +250,7 @@ public void onRequest(AsyncHttpServerRequest request, final AsyncHttpServerRespo
             });
 
             httpServer.listen(5555);
+            Thread.sleep(1000);
 
             Future<String> ret = Ion.with(getContext())
                     .load("PUT", "http://localhost:5555/")

File: ion-sample/src/com/koushikdutta/ion/sample/ImageViewSample.java
Patch:
@@ -16,12 +16,14 @@
 public class ImageViewSample extends Activity {
     public void loadCenterCrop() {
         Ion.with(imageView)
+                .resize(512, 512)
                 .centerCrop()
                 .load("http://media.salon.com/2013/05/original.jpg");
     }
 
     public void loadCenterInside() {
         Ion.with(imageView)
+                .resize(512, 512)
                 .centerInside()
                 .load("http://media.salon.com/2013/05/original.jpg");
     }

File: ion-test/src/com/koushikdutta/ion/test/AuthTests.java
Patch:
@@ -34,7 +34,7 @@ public void testBasicAuth() throws Exception {
             public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {
                 try {
                     JsonObject json = new JsonObject();
-                    String authorization = request.getHeaders().getHeaders().get("Authorization");
+                    String authorization = request.getHeaders().getHeaders().get("Authorization").replace("Basic ", "");
                     authorization = new String(Base64.decode(authorization, Base64.DEFAULT));
                     String[] parts = authorization.split(":");
                     assertTrue(parts.length == 2);

File: ion/src/com/koushikdutta/ion/builder/BitmapFutureBuilder.java
Patch:
@@ -7,7 +7,7 @@
 /**
 * Created by koush on 5/30/13.
 */
-public interface IonBitmapFutureRequestBuilder {
+public interface BitmapFutureBuilder {
     /**
      * Perform the request and get the result as a Bitmap
      * @return

File: ion/src/com/koushikdutta/ion/builder/FutureBuilder.java
Patch:
@@ -11,7 +11,7 @@
 /**
 * Created by koush on 5/30/13.
 */ // get the result, transformed to how you want it
-public interface IonFutureRequestBuilder extends IonBitmapFutureRequestBuilder, IonBitmapImageViewFutureRequestBuilder {
+public interface FutureBuilder extends BitmapFutureBuilder, ImageViewFutureBuilder {
     /**
      * Execute the request and get the result as a String
      * @return
@@ -34,7 +34,7 @@ public interface IonFutureRequestBuilder extends IonBitmapFutureRequestBuilder,
      * Use the request as a Bitmap which can then be modified and/or applied to an ImageView.
      * @return
      */
-    public IonMutableBitmapRequestPreLoadBuilder withBitmap();
+    public BitmapBuilder withBitmap();
 
     /**
      * Execute the request and write it to the given OutputStream.
@@ -81,5 +81,5 @@ public interface IonFutureRequestBuilder extends IonBitmapFutureRequestBuilder,
      * @param groupKey
      * @return
      */
-    public IonFutureRequestBuilder group(Object groupKey);
+    public FutureBuilder group(Object groupKey);
 }

File: ion/src/com/koushikdutta/ion/builder/ImageViewFutureBuilder.java
Patch:
@@ -7,7 +7,7 @@
 /**
 * Created by koush on 5/30/13.
 */
-public interface IonBitmapImageViewFutureRequestBuilder {
+public interface ImageViewFutureBuilder {
     /**
      * Perform the request and get the result as a Bitmap, which will then be loaded
      * into the given ImageView

File: ion/src/com/koushikdutta/ion/builder/MultipartBodyBuilder.java
Patch:
@@ -5,15 +5,15 @@
 /**
 * Created by koush on 5/30/13.
 */ // set additional body parameters for multipart/form-data
-public interface IonFormMultipartBodyRequestBuilder extends IonFutureRequestBuilder {
+public interface MultipartBodyBuilder<M extends MultipartBodyBuilder> {
     /**
      * Specify a multipart/form-data parameter to send to the HTTP server. If no HTTP method was explicitly
      * provided in the load call, the default HTTP method, POST, is used.
      * @param name Multipart name
      * @param value Multipart String value
      * @return
      */
-    public IonFormMultipartBodyRequestBuilder setMultipartParameter(String name, String value);
+    public M setMultipartParameter(String name, String value);
 
     /**
      * Specify a multipart/form-data file to send to the HTTP server. If no HTTP method was explicitly
@@ -22,5 +22,5 @@ public interface IonFormMultipartBodyRequestBuilder extends IonFutureRequestBuil
      * @param file Multipart file to send
      * @return
      */
-    public IonFormMultipartBodyRequestBuilder setMultipartFile(String name, File file);
+    public M setMultipartFile(String name, File file);
 }

File: ion/src/com/koushikdutta/ion/builder/UrlEncodedBuilder.java
Patch:
@@ -3,13 +3,13 @@
 /**
 * Created by koush on 5/30/13.
 */ // set additional body parameters for url form encoded
-public interface IonUrlEncodedBodyRequestBuilder extends IonFutureRequestBuilder {
+public interface UrlEncodedBuilder<U extends UrlEncodedBuilder> {
     /**
      * Specify a application/x-www-form-urlencoded name and value pair to send to the HTTP server.
      * If no HTTP method was explicitly provided in the load call, the default HTTP method, POST, is used.
      * @param name Form field name
      * @param value Form field String value
      * @return
      */
-    public IonUrlEncodedBodyRequestBuilder setBodyParameter(String name, String value);
+    public U setBodyParameter(String name, String value);
 }

File: ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
Patch:
@@ -75,7 +75,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
                     // use a placeholder google_image if it needs to load from the network
                     .placeholder(R.drawable.twitter)
                     // use a fade in animation when it finishes loading
-                    .animateIn(AnimationUtils.loadAnimation(getContext(), R.anim.fadein))
+                    .animateIn(R.anim.fadein)
                     // load the url
                     .load(imageUrl);
 

File: ion/src/com/koushikdutta/ion/builder/IonBitmapImageViewFutureRequestBuilder.java
Patch:
@@ -1,6 +1,5 @@
 package com.koushikdutta.ion.builder;
 
-import android.graphics.Bitmap;
 import android.widget.ImageView;
 
 import com.koushikdutta.async.future.Future;
@@ -15,5 +14,5 @@ public interface IonBitmapImageViewFutureRequestBuilder {
      * @param imageView ImageView to set once the request completes
      * @return
      */
-    public Future<Bitmap> intoImageView(ImageView imageView);
+    public Future<ImageView> intoImageView(ImageView imageView);
 }

File: ion/src/com/koushikdutta/ion/builder/IonImageViewRequestPostLoadBuilder.java
Patch:
@@ -3,6 +3,7 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
 import android.view.animation.Animation;
+import android.widget.ImageView;
 
 import com.koushikdutta.async.future.Future;
 
@@ -36,13 +37,13 @@ public interface IonImageViewRequestPostLoadBuilder extends IonImageViewRequestB
      * @param uri Uri to load. This may be a http(s), file, or content uri.
      * @return
      */
-    public Future<Bitmap> load(String uri);
+    public Future<ImageView> load(String uri);
 
     /**
      * Load a uri for the ImageView using the given an HTTP method such as GET or POST.
      * @param method HTTP method such as GET or POST.
      * @param uri Uri to load.
      * @return
      */
-    public Future<Bitmap> load(String method, String uri);
+    public Future<ImageView> load(String method, String uri);
 }

File: ion-test/src/com/koushikdutta/ion/test/AuthTests.java
Patch:
@@ -29,7 +29,6 @@ protected void tearDown() throws Exception {
     }
 
     public void testBasicAuth() throws Exception {
-
         httpServer.get("/", new HttpServerRequestCallback() {
             @Override
             public void onRequest(AsyncHttpServerRequest request, AsyncHttpServerResponse response) {

File: ion/src/com/koushikdutta/ion/HashList.java
Patch:
@@ -6,8 +6,8 @@
 /**
  * Created by koush on 5/27/13.
  */
-class Multimap<T> extends Hashtable<String, ArrayList<T>> {
-    public Multimap() {
+class HashList<T> extends Hashtable<String, ArrayList<T>> {
+    public HashList() {
     }
 
     public boolean contains(String key) {

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -17,7 +17,6 @@
 import com.koushikdutta.async.AsyncServer;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.FutureCallback;
-import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.http.AsyncHttpClient;
 import com.koushikdutta.async.http.ResponseCacheMiddleware;
 import com.koushikdutta.ion.builder.IonBodyParamsRequestBuilder;
@@ -331,12 +330,12 @@ public Config configure() {
         return config;
     }
 
-    // map an ImageView to the url being downloaded for it.
+    // map an ImageView to the uri being downloaded for it.
     // but don't hold references to the ImageView...
     WeakHashMap<ImageView, String> pendingViews = new WeakHashMap<ImageView, String>();
     ExecutorService executorService = Executors.newFixedThreadPool(3);
 
-    Multimap<FutureCallback<Bitmap>> bitmapsPending = new Multimap<FutureCallback<Bitmap>>();
+    HashList<FutureCallback<Bitmap>> bitmapsPending = new HashList<FutureCallback<Bitmap>>();
 
     IonBitmapCache bitmapCache;
     /**

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -75,6 +75,8 @@ public IonRequestBuilder(Context context, Ion ion) {
 
     @Override
     public IonBodyParamsRequestBuilder load(String url) {
+        if (url == null)
+            return this;
         return loadInternal(AsyncHttpGet.METHOD, url);
     }
 

File: ion-sample/src/com/koushikdutta/ion/sample/Twitter.java
Patch:
@@ -55,11 +55,11 @@ public View getView(int position, View convertView, ViewGroup parent) {
 
                 ImageView imageView = (ImageView)convertView.findViewById(R.id.image);
 
-                // Use Ion's builder set the image on an ImageView from a URL
+                // Use Ion's builder set the google_image on an ImageView from a URL
 
                 // start with the ImageView
                 Ion.with(imageView)
-                    // use a placeholder image if it needs to load from the network
+                    // use a placeholder google_image if it needs to load from the network
                     .placeholder(R.drawable.twitter)
                     // use a fade in animation when it finishes loading
                     .animateIn(AnimationUtils.loadAnimation(getContext(), R.anim.fadein))

File: ion-sample/src/com/koushikdutta/ion/sample/TwitterGson.java
Patch:
@@ -68,11 +68,11 @@ public View getView(int position, View convertView, ViewGroup parent) {
 
                 ImageView imageView = (ImageView)convertView.findViewById(R.id.image);
 
-                // Use Ion's builder set the image on an ImageView from a URL
+                // Use Ion's builder set the google_image on an ImageView from a URL
 
                 // start with the ImageView
                 Ion.with(imageView)
-                    // use a placeholder image if it needs to load from the network
+                    // use a placeholder google_image if it needs to load from the network
                     .placeholder(R.drawable.twitter)
                     // use a fade in animation when it finishes loading
                     .animateIn(AnimationUtils.loadAnimation(getContext(), R.anim.fadein))

File: ion/src/com/koushikdutta/ion/IonBitmapCache.java
Patch:
@@ -7,6 +7,7 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.drawable.BitmapDrawable;
+import android.os.Looper;
 import android.text.TextUtils;
 import android.util.DisplayMetrics;
 import android.view.WindowManager;
@@ -48,6 +49,7 @@ ZombieDrawable put(String key, Bitmap bitmap) {
 
     boolean useBitmapScaling = true;
     Bitmap loadBitmapFromStream(InputStream in) throws IOException {
+        assert Thread.currentThread() != Looper.getMainLooper().getThread();
         final int tw = mMetrics.widthPixels;
         final int th = mMetrics.heightPixels;
         final int targetWidth = tw <= 0 ? Integer.MAX_VALUE : tw;

File: ion/src/com/koushikdutta/ion/loader/HttpLoader.java
Patch:
@@ -19,6 +19,7 @@ public class HttpLoader implements Loader {
     public Future<DataEmitter> load(Ion ion, AsyncHttpRequest request, final FutureCallback<LoaderEmitter> callback) {
         if (!request.getUri().getScheme().startsWith("http"))
             return null;
+        assert request.getHandler() == null;
         return (Future< DataEmitter >)(Future)ion.getHttpClient().execute(request, new HttpConnectCallback() {
             @Override
             public void onConnectCompleted(Exception ex, AsyncHttpResponse response) {

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -286,7 +286,7 @@ public void onData(final int totalBytesRead) {
                         request.getHandler().post(new Runnable() {
                             @Override
                             public void run() {
-                                if (isCancelled())
+                                if (isCancelled() || isDone())
                                     return;
                                 progressHandler.onProgress(totalBytesRead, total);
                             }

File: ion-sample/src/com/koushikdutta/ion/sample/ProgressBarDownload.java
Patch:
@@ -86,7 +86,7 @@ void resetDownload() {
 
         // reset the ui
         download.setText("Download");
-        downloadCount.setText("");
+        downloadCount.setText(null);
         progressBar.setProgress(0);
     }
 }

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -286,6 +286,8 @@ public void onData(final int totalBytesRead) {
                         request.getHandler().post(new Runnable() {
                             @Override
                             public void run() {
+                                if (isCancelled())
+                                    return;
                                 progressHandler.onProgress(totalBytesRead, total);
                             }
                         });

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -7,8 +7,8 @@
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.http.AsyncHttpClient;
 import com.koushikdutta.async.http.ResponseCacheMiddleware;
-import com.koushikdutta.ion.IonRequestBuilderStages.IonLoadRequestBuilder;
-import com.koushikdutta.ion.IonRequestBuilderStages.IonMutableBitmapRequestPostLoadBuilder;
+import com.koushikdutta.ion.builder.IonLoadRequestBuilder;
+import com.koushikdutta.ion.builder.IonMutableBitmapRequestPostLoadBuilder;
 import com.koushikdutta.ion.cookie.CookieMiddleware;
 import com.koushikdutta.ion.loader.ContentLoader;
 import com.koushikdutta.ion.loader.FileLoader;

File: ion/src/com/koushikdutta/ion/Ion.java
Patch:
@@ -99,7 +99,6 @@ public Config configure() {
     // but don't hold references to the ImageView...
     WeakHashMap<ImageView, String> pendingViews = new WeakHashMap<ImageView, String>();
 
-
     // track the downloads and transforms that are pending.
     // but don't maintain a reference.
     // The reference stays alive because the reference chain looks as follows:

File: ion/src/com/koushikdutta/ion/Loader.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.koushikdutta.async.DataEmitter;
 import com.koushikdutta.async.future.Future;
+import com.koushikdutta.async.future.FutureCallback;
 import com.koushikdutta.async.http.AsyncHttpRequest;
 
 /**
@@ -10,5 +11,5 @@
 public interface Loader {
     // returns a Future if this loader can handle a request
     // otherwise it returns null, and Ion continues to the next loader.
-    public Future<DataEmitter> load(Ion ion, AsyncHttpRequest request);
+    public Future<DataEmitter> load(Ion ion, AsyncHttpRequest request, FutureCallback<DataEmitter> callback);
 }

File: ion/src/com/koushikdutta/ion/IonRequestBuilder.java
Patch:
@@ -13,7 +13,6 @@
 import com.koushikdutta.async.callback.DataParser;
 import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.future.FutureCallback;
-import com.koushikdutta.async.future.FutureDataEmitter;
 import com.koushikdutta.async.future.SimpleFuture;
 import com.koushikdutta.async.http.*;
 import com.koushikdutta.async.stream.OutputStreamDataCallback;
@@ -175,7 +174,7 @@ public void onCompleted(Exception ex) {
     <T> Future<T> execute(final DataParser<T> parser) {
         final SimpleFuture<T> ret = new SimpleFuture<T>();
         for (Loader loader: ion.config.loaders) {
-            FutureDataEmitter emitter = loader.load(ion, request);
+            Future<DataEmitter> emitter = loader.load(ion, request);
             if (emitter != null) {
                 emitter.setCallback(new FutureCallback<DataEmitter>() {
                     @Override

File: ion/src/com/koushikdutta/ion/Loader.java
Patch:
@@ -1,6 +1,7 @@
 package com.koushikdutta.ion;
 
-import com.koushikdutta.async.future.FutureDataEmitter;
+import com.koushikdutta.async.DataEmitter;
+import com.koushikdutta.async.future.Future;
 import com.koushikdutta.async.http.AsyncHttpRequest;
 
 /**
@@ -9,5 +10,5 @@
 public interface Loader {
     // returns a Future if this loader can handle a request
     // otherwise it returns null, and Ion continues to the next loader.
-    public FutureDataEmitter load(Ion ion, AsyncHttpRequest request);
+    public Future<DataEmitter> load(Ion ion, AsyncHttpRequest request);
 }

