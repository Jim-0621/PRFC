File: xutils/src/main/java/org/xutils/db/DbModelSelector.java
Patch:
@@ -212,8 +212,9 @@ public String toString() {
         }
         List<Selector.OrderBy> orderByList = selector.getOrderByList();
         if (orderByList != null && orderByList.size() > 0) {
-            for (int i = 0; i < orderByList.size(); i++) {
-                result.append(" ORDER BY ").append(orderByList.get(i).toString()).append(',');
+            result.append(" ORDER BY ");
+            for (Selector.OrderBy orderBy : orderByList) {
+                result.append(orderBy.toString()).append(',');
             }
             result.deleteCharAt(result.length() - 1);
         }

File: xutils/src/main/java/org/xutils/http/app/DefaultParamsBuilder.java
Patch:
@@ -90,7 +90,7 @@ public static SSLSocketFactory getTrustAllSSLSocketFactory() {
                     TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {
                         @Override
                         public X509Certificate[] getAcceptedIssuers() {
-                            return null;
+                            return new X509Certificate[0];
                         }
 
                         @Override

File: xutils/src/main/java/org/xutils/http/BaseParams.java
Patch:
@@ -143,7 +143,7 @@ public void addQueryStringParameter(String name, Object value) {
             for (int i = 0; i < len; i++) {
                 this.queryStringParams.add(new ArrayItem(name, array.opt(i)));
             }
-        } else if (value.getClass().isArray()) {
+        } else if (value != null && value.getClass().isArray()) {
             int len = Array.getLength(value);
             for (int i = 0; i < len; i++) {
                 this.queryStringParams.add(new ArrayItem(name, Array.get(value, i)));
@@ -197,7 +197,7 @@ public void addBodyParameter(String name, Object value, String contentType, Stri
                 }
             } else if (value instanceof byte[]) {
                 this.bodyParams.add(new KeyValue(name, value));
-            } else if (value.getClass().isArray()) {
+            } else if (value != null && value.getClass().isArray()) {
                 int len = Array.getLength(value);
                 for (int i = 0; i < len; i++) {
                     this.bodyParams.add(new ArrayItem(name, Array.get(value, i)));

File: xutils/src/main/java/org/xutils/http/request/AssetsRequest.java
Patch:
@@ -22,8 +22,7 @@ public AssetsRequest(RequestParams params, Type loadType) throws Throwable {
     public InputStream getInputStream() throws IOException {
         if (inputStream == null) {
             Context context = params.getContext();
-            String assetsPath = queryUrl.substring("assets:".length());
-            assetsPath = assetsPath.replace("/", "");
+            String assetsPath = queryUrl.replace("assets://", "");
             inputStream = context.getResources().getAssets().open(assetsPath);
             contentLength = inputStream.available();
         }

File: xutils/src/main/java/org/xutils/db/Selector.java
Patch:
@@ -74,7 +74,7 @@ public Selector<T> or(String columnName, String op, Object value) {
         return this;
     }
 
-    public Selector or(WhereBuilder where) {
+    public Selector<T> or(WhereBuilder where) {
         this.whereBuilder.or(where);
         return this;
     }

File: xutils/src/main/java/org/xutils/image/GifDrawable.java
Patch:
@@ -72,6 +72,7 @@ public void start() {
     @Override
     public void stop() {
         if (isRunning()) {
+            running = false;
             this.unscheduleSelf(this);
         }
     }

File: xutils/src/main/java/org/xutils/http/BaseParams.java
Patch:
@@ -126,7 +126,7 @@ public void addHeader(String name, String value) {
     public void addParameter(String name, Object value) {
         if (value == null) return;
 
-        if (method == null || HttpMethod.permitsRequestBody(method)) {
+        if (HttpMethod.permitsRequestBody(method)) {
             if (!TextUtils.isEmpty(name)) {
                 if (value instanceof File
                         || value instanceof InputStream

File: xutils/src/main/java/org/xutils/http/HttpMethod.java
Patch:
@@ -37,7 +37,8 @@ public static boolean permitsCache(HttpMethod method) {
     }
 
     public static boolean permitsRequestBody(HttpMethod method) {
-        return method == POST
+        return method == null
+                || method == POST
                 || method == PUT
                 || method == PATCH
                 || method == DELETE;

File: xutils/src/main/java/org/xutils/view/ViewInjectorImpl.java
Patch:
@@ -120,7 +120,7 @@ public View inject(Object fragment, LayoutInflater inflater, ViewGroup container
      * 从父类获取注解View
      */
     private static ContentView findContentView(Class<?> thisCls) {
-        if (thisCls == null || IGNORED.contains(thisCls) || thisCls.getName().startsWith("andriodx.")) {
+        if (thisCls == null || IGNORED.contains(thisCls) || thisCls.getName().startsWith("androidx.")) {
             return null;
         }
         ContentView contentView = thisCls.getAnnotation(ContentView.class);
@@ -133,7 +133,7 @@ private static ContentView findContentView(Class<?> thisCls) {
     @SuppressWarnings("ConstantConditions")
     private static void injectObject(Object handler, Class<?> handlerType, ViewFinder finder) {
 
-        if (handlerType == null || IGNORED.contains(handlerType) || handlerType.getName().startsWith("andriodx.")) {
+        if (handlerType == null || IGNORED.contains(handlerType) || handlerType.getName().startsWith("androidx.")) {
             return;
         }
 

File: xutils/src/main/java/org/xutils/http/request/UriRequestFactory.java
Patch:
@@ -30,10 +30,10 @@ public static UriRequest getUriRequest(RequestParams params, Type loadType) thro
         String scheme = null;
         String uri = params.getUri();
         int index = uri.indexOf(":");
-        if (index > 0) {
-            scheme = uri.substring(0, index);
-        } else if (uri.startsWith("/")) {
+        if (uri.startsWith("/")) {
             scheme = "file";
+        } else if (index > 0) {
+            scheme = uri.substring(0, index);
         }
 
         // get UriRequest

File: xutils/src/main/java/org/xutils/common/Callback.java
Patch:
@@ -31,7 +31,7 @@ public interface ProxyCacheCallback<ResultType> extends CacheCallback<ResultType
     }
 
     public interface PrepareCallback<PrepareType, ResultType> extends CommonCallback<ResultType> {
-        ResultType prepare(PrepareType rawData);
+        ResultType prepare(PrepareType rawData) throws Throwable;
     }
 
     public interface ProgressCallback<ResultType> extends CommonCallback<ResultType> {

File: xutils/src/main/java/org/xutils/http/body/InputStreamBody.java
Patch:
@@ -76,7 +76,7 @@ public void writeTo(OutputStream out) throws IOException {
             out.flush();
 
             if (callBackHandler != null) {
-                callBackHandler.updateProgress(total, total, true);
+                callBackHandler.updateProgress(total, current, true);
             }
         } finally {
             IOUtil.closeQuietly(content);

File: xutils/src/main/java/org/xutils/http/body/MultipartBody.java
Patch:
@@ -104,7 +104,7 @@ public void writeTo(OutputStream out) throws IOException {
         out.flush();
 
         if (callBackHandler != null) {
-            callBackHandler.updateProgress(total, total, true);
+            callBackHandler.updateProgress(total, current, true);
         }
     }
 

File: xutils/src/main/java/org/xutils/http/body/UrlEncodedParamsBody.java
Patch:
@@ -1,12 +1,12 @@
 package org.xutils.http.body;
 
-import android.net.Uri;
 import android.text.TextUtils;
 
 import org.xutils.common.util.KeyValue;
 
 import java.io.IOException;
 import java.io.OutputStream;
+import java.net.URLEncoder;
 import java.util.List;
 
 /**
@@ -31,9 +31,9 @@ public UrlEncodedParamsBody(List<KeyValue> params, String charset) throws IOExce
                     if (contentSb.length() > 0) {
                         contentSb.append("&");
                     }
-                    contentSb.append(Uri.encode(name, this.charset))
+                    contentSb.append(URLEncoder.encode(name, this.charset).replaceAll("\\+","%20"))
                             .append("=")
-                            .append(Uri.encode(value, this.charset));
+                            .append(URLEncoder.encode(value, this.charset).replaceAll("\\+","%20"));
                 }
             }
         }

File: xutils/src/main/java/org/xutils/http/request/UriRequest.java
Patch:
@@ -36,7 +36,7 @@ public abstract class UriRequest implements Closeable {
     }
 
     // build query
-    protected String buildQueryUrl(RequestParams params) {
+    protected String buildQueryUrl(RequestParams params) throws IOException {
         return params.getUri();
     }
 

File: xutils/src/main/java/org/xutils/http/body/FileBody.java
Patch:
@@ -1,7 +1,10 @@
 package org.xutils.http.body;
 
+import android.net.Uri;
 import android.text.TextUtils;
 
+import org.xutils.common.util.LogUtil;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;

File: xutils/src/main/java/org/xutils/http/loader/FileLoader.java
Patch:
@@ -78,8 +78,8 @@ public File load(final InputStream in) throws Throwable {
             }
             if (!targetFile.exists()) {
                 File dir = targetFile.getParentFile();
-                if (dir.exists() || dir.mkdirs()) {
-                    targetFile.createNewFile();
+                if (!dir.exists() && !dir.mkdirs()) {
+                    throw new IOException("can not create dir: " + dir.getAbsolutePath());
                 }
             }
 

File: xutils/src/main/java/org/xutils/http/BaseParams.java
Patch:
@@ -445,7 +445,7 @@ public String toString() {
         return sb.toString();
     }
 
-    private void checkBodyParams() {
+    private synchronized void checkBodyParams() {
         if (bodyParams.isEmpty()) return;
 
         if (!HttpMethod.permitsRequestBody(method)

File: xutils/src/main/java/org/xutils/http/loader/FileLoader.java
Patch:
@@ -97,6 +97,8 @@ public File load(final InputStream in) throws Throwable {
                             IOUtil.closeQuietly(fis); // 先关闭文件流, 否则文件删除会失败.
                             IOUtil.deleteFileOrDir(targetFile);
                             throw new RuntimeException("need retry");
+                        } else {
+                            contentLength -= CHECK_SIZE;
                         }
                     } else {
                         IOUtil.deleteFileOrDir(targetFile);

File: xutils/src/main/java/org/xutils/http/loader/ObjectLoader.java
Patch:
@@ -40,7 +40,7 @@ public ObjectLoader(Type objectType) {
                 objectClass = (Class<?>) ((ParameterizedType) objectType).getRawType();
             } else if (objectType instanceof TypeVariable) {
                 throw new IllegalArgumentException(
-                        "not support callback type" + objectType.toString());
+                        "not support callback type " + objectType.toString());
             } else {
                 objectClass = (Class<?>) objectType;
             }
@@ -53,7 +53,7 @@ public ObjectLoader(Type objectType) {
                 itemClass = (Class<?>) ((ParameterizedType) itemType).getRawType();
             } else if (itemType instanceof TypeVariable) {
                 throw new IllegalArgumentException(
-                        "not support callback type" + itemType.toString());
+                        "not support callback type " + itemType.toString());
             } else {
                 itemClass = (Class<?>) itemType;
             }

File: xutils/src/main/java/org/xutils/http/HttpTask.java
Patch:
@@ -174,7 +174,7 @@ private void checkDownloadTask() {
                             entryItr = DOWNLOAD_TASK.entrySet().iterator();
                     while (entryItr.hasNext()) {
                         Map.Entry<String, WeakReference<HttpTask<?>>> next = entryItr.next();
-                        if (next.getValue() == null && next.getValue().get() == null) {
+                        if (next.getValue() == null || next.getValue().get() == null) {
                             entryItr.remove();
                         }
                     }

File: xutils/src/main/java/org/xutils/http/app/HttpRetryHandler.java
Patch:
@@ -21,11 +21,11 @@
  * Author: wyouflf
  * Time: 2014/05/30
  */
-public final class HttpRetryHandler {
+public class HttpRetryHandler {
 
     protected int maxRetryCount = 2;
 
-    private static HashSet<Class<?>> blackList = new HashSet<Class<?>>();
+    protected static HashSet<Class<?>> blackList = new HashSet<Class<?>>();
 
     static {
         blackList.add(HttpException.class);

File: xutils/src/main/java/org/xutils/common/Callback.java
Patch:
@@ -19,7 +19,7 @@ public interface CommonCallback<ResultType> extends Callback {
     }
 
     public interface TypedCallback<ResultType> extends CommonCallback<ResultType> {
-        Type getResultType();
+        Type getLoadType();
     }
 
     public interface CacheCallback<ResultType> extends CommonCallback<ResultType> {

File: xutils/src/main/java/org/xutils/http/HttpManagerImpl.java
Patch:
@@ -82,7 +82,7 @@ public DefaultSyncCallback(Class<T> resultType) {
         }
 
         @Override
-        public Type getResultType() {
+        public Type getLoadType() {
             return resultType;
         }
 

File: xutils/src/main/java/org/xutils/http/HttpTask.java
Patch:
@@ -121,7 +121,7 @@ public HttpTask(RequestParams params, Callback.Cancelable cancelHandler,
     private void resolveLoadType() {
         Class<?> callBackType = callback.getClass();
         if (callback instanceof Callback.TypedCallback) {
-            loadType = ((Callback.TypedCallback) callback).getResultType();
+            loadType = ((Callback.TypedCallback) callback).getLoadType();
         } else if (callback instanceof Callback.PrepareCallback) {
             loadType = ParameterizedTypeUtil.getParameterizedType(callBackType, Callback.PrepareCallback.class, 0);
         } else {

File: xutils/src/main/java/org/xutils/image/AsyncDrawable.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
+import android.graphics.PixelFormat;
 import android.graphics.PorterDuff;
 import android.graphics.Rect;
 import android.graphics.Region;
@@ -63,7 +64,7 @@ public void setColorFilter(ColorFilter colorFilter) {
 
     @Override
     public int getOpacity() {
-        return baseDrawable == null ? Byte.MAX_VALUE : baseDrawable.getOpacity();
+        return baseDrawable == null ? PixelFormat.TRANSLUCENT : baseDrawable.getOpacity();
     }
 
     @Override

File: xutils/src/main/java/org/xutils/http/request/AssetsRequest.java
Patch:
@@ -85,6 +85,7 @@ public InputStream getInputStream() throws IOException {
     @Override
     public void close() throws IOException {
         IOUtil.closeQuietly(inputStream);
+        inputStream = null;
     }
 
     @Override

File: xutils/src/main/java/org/xutils/http/request/HttpRequest.java
Patch:
@@ -302,9 +302,11 @@ public InputStream getInputStream() throws IOException {
     public void close() throws IOException {
         if (inputStream != null) {
             IOUtil.closeQuietly(inputStream);
+            inputStream = null;
         }
         if (connection != null) {
             connection.disconnect();
+            //connection = null;
         }
     }
 

File: xutils/src/main/java/org/xutils/http/request/LocalFileRequest.java
Patch:
@@ -84,6 +84,7 @@ public InputStream getInputStream() throws IOException {
     @Override
     public void close() throws IOException {
         IOUtil.closeQuietly(inputStream);
+        inputStream = null;
     }
 
     @Override

File: xutils/src/main/java/org/xutils/http/body/MultipartBody.java
Patch:
@@ -214,7 +214,7 @@ private static byte[] buildContentType(Object value, String contentType, String
         StringBuilder result = new StringBuilder("Content-Type: ");
         if (TextUtils.isEmpty(contentType)) {
             if (value instanceof String) {
-                contentType = "text/plain; charset:" + charset;
+                contentType = "text/plain; charset=" + charset;
             } else {
                 contentType = "application/octet-stream";
             }

File: xutils/src/main/java/org/xutils/http/body/MultipartBody.java
Patch:
@@ -214,7 +214,7 @@ private static byte[] buildContentType(Object value, String contentType, String
         StringBuilder result = new StringBuilder("Content-Type: ");
         if (TextUtils.isEmpty(contentType)) {
             if (value instanceof String) {
-                contentType = "text/plain; charset:" + charset;
+                contentType = "text/plain; charset=" + charset;
             } else {
                 contentType = "application/octet-stream";
             }

File: xutils/src/main/java/org/xutils/image/ImageDecoder.java
Patch:
@@ -88,7 +88,7 @@ static Drawable decodeFileWithLock(final File file,
                 movie = decodeGif(file, options, cancelable);
             }
             if (movie != null) {
-                result = new ReusableGifDrawable(movie, (int) file.length());
+                result = new GifDrawable(movie, (int) file.length());
             }
         } else {
             Bitmap bitmap = null;

File: xutils/src/main/java/org/xutils/image/ImageLoader.java
Patch:
@@ -198,7 +198,7 @@ static Cancelable doBind(final ImageView view,
                 }
             }
         } else if (oldDrawable instanceof ReusableDrawable) {
-            MemCacheKey oldKey = ((ReusableBitmapDrawable) oldDrawable).getMemCacheKey();
+            MemCacheKey oldKey = ((ReusableDrawable) oldDrawable).getMemCacheKey();
             if (oldKey != null && oldKey.equals(key)) {
                 MEM_CACHE.put(key, oldDrawable);
             }
@@ -363,8 +363,8 @@ public Drawable prepare(File rawData) {
             if (result != null) {
                 if (result instanceof ReusableDrawable) {
                     ((ReusableDrawable) result).setMemCacheKey(key);
+                    MEM_CACHE.put(key, result);
                 }
-                MEM_CACHE.put(key, result);
             }
             return result;
         } catch (IOException ex) {

File: xutils/src/main/java/org/xutils/http/RequestParams.java
Patch:
@@ -364,7 +364,9 @@ public void setRedirectHandler(RedirectHandler redirectHandler) {
      * @param value
      */
     public void setHeader(String name, String value) {
-        this.headers.add(new Header(name, value, true));
+        Header header = new Header(name, value, true);
+        this.headers.remove(header);
+        this.headers.add(header);
     }
 
     /**

File: xutils/src/main/java/org/xutils/http/loader/FileLoader.java
Patch:
@@ -202,7 +202,7 @@ public File load(final UriRequest request) throws Throwable {
                     }
                 }
                 // retry 时需要覆盖RANGE参数
-                params.addHeader("RANGE", "bytes=" + range + "-");
+                params.setHeader("RANGE", "bytes=" + range + "-");
             }
 
             if (progressHandler != null && !progressHandler.updateProgress(0, 0, false)) {

File: xutils/src/main/java/org/xutils/http/request/HttpRequest.java
Patch:
@@ -188,7 +188,7 @@ public void sendRequest() throws IOException {
         if (code >= 300) {
             HttpException httpException = new HttpException(code, this.getResponseMessage());
             try {
-                httpException.setResult(IOUtil.readStr(connection.getInputStream(), params.getCharset()));
+                httpException.setResult(IOUtil.readStr(connection.getErrorStream(), params.getCharset()));
             } catch (Throwable ignored) {
             }
             LogUtil.e(httpException.toString() + ", url: " + queryUrl);

File: xutils/src/main/java/org/xutils/db/DbManagerImpl.java
Patch:
@@ -66,10 +66,10 @@ public synchronized static DbManager getInstance(DaoConfig daoConfig) {
             daoConfig = new DaoConfig();
         }
 
-        DbManagerImpl dao = daoMap.get(daoConfig.getDbName());
+        DbManagerImpl dao = daoMap.get(daoConfig.toString());
         if (dao == null) {
             dao = new DbManagerImpl(daoConfig);
-            daoMap.put(daoConfig.getDbName(), dao);
+            daoMap.put(daoConfig.toString(), dao);
         } else {
             dao.daoConfig = daoConfig;
         }

File: xutils/src/main/java/org/xutils/http/body/FileBody.java
Patch:
@@ -15,7 +15,7 @@ public class FileBody extends InputStreamBody {
     private File file;
     private String contentType;
 
-    public FileBody(ContentTypeWrapper<File> wrapper) throws IOException {
+    public FileBody(BodyEntityWrapper<File> wrapper) throws IOException {
         this(wrapper.getObject(), wrapper.getContentType());
     }
 
@@ -48,7 +48,7 @@ public static String getFileContentType(File file) {
         if (TextUtils.isEmpty(contentType)) {
             contentType = "application/octet-stream";
         } else {
-            contentType.replaceFirst("\\/jpg$", "/jpeg");
+            contentType = contentType.replaceFirst("\\/jpg$", "/jpeg");
         }
         return contentType;
     }

File: xutils/src/main/java/org/xutils/http/body/InputStreamBody.java
Patch:
@@ -24,7 +24,7 @@ public class InputStreamBody implements ProgressBody {
 
     private ProgressHandler callBackHandler;
 
-    public InputStreamBody(ContentTypeWrapper<InputStream> wrapper) {
+    public InputStreamBody(BodyEntityWrapper<InputStream> wrapper) {
         this(wrapper.getObject(), wrapper.getContentType());
     }
 

File: library/src/main/java/org/xutils/DbManager.java
Patch:
@@ -86,7 +86,7 @@ public interface DbUpgradeListener {
     }
 
     public static class DaoConfig {
-        private String dbName = "youlin.db"; // default db name
+        private String dbName = "xUtils.db"; // default db name
         private int dbVersion = 1;
         private boolean allowTransaction = true;
         private DbUpgradeListener dbUpgradeListener;

File: library/src/main/java/org/xutils/cache/LruDiskCache.java
Patch:
@@ -34,7 +34,7 @@ public final class LruDiskCache {
     private static final long LIMIT_SIZE = 1024L * 1024L * 100L; // 限制最多100M文件
 
     private static final int LOCK_WAIT = 1000 * 3; // 3s
-    private static final String CACHE_DIR_NAME = "yl_cache";
+    private static final String CACHE_DIR_NAME = "xUtils_cache";
     private static final String TEMP_FILE_SUFFIX = ".tmp";
     private static final Executor trimExecutor = new PriorityExecutor(1);
 

File: library/src/main/java/org/xutils/image/ImageDecoder.java
Patch:
@@ -48,7 +48,7 @@ public final class ImageDecoder {
     private final static byte[] WEBP_HEADER = new byte[]{'W', 'E', 'B', 'P'};
 
     private final static Executor THUMB_CACHE_EXECUTOR = new PriorityExecutor(1);
-    private final static LruDiskCache THUMB_CACHE = LruDiskCache.getDiskCache("yl_img_thumb");
+    private final static LruDiskCache THUMB_CACHE = LruDiskCache.getDiskCache("xUtils_img_thumb");
 
     static {
         int cpuCount = Runtime.getRuntime().availableProcessors();

File: library/src/main/java/org/xutils/image/ImageLoader.java
Patch:
@@ -55,7 +55,7 @@
     private Callback.CacheCallback<Drawable> cacheCallback;
     private Callback.ProgressCallback<Drawable> progressCallback;
 
-    private final static String DISK_CACHE_DIR_NAME = "yl_img";
+    private final static String DISK_CACHE_DIR_NAME = "xUtils_img";
     private final static Executor EXECUTOR = new PriorityExecutor(10);
     private final static int MEM_CACHE_MIN_SIZE = 1024 * 1024 * 4; // 4M
     private final static LruCache<MemCacheKey, Drawable> MEM_CACHE =

File: library/src/main/java/org/xutils/http/UriRequest.java
Patch:
@@ -307,7 +307,8 @@ public InputStream getInputStream() throws IOException {
                 inputStream = connection.getInputStream();
             } else {
                 if (callingClassLoader != null && buildUri.startsWith("assets://")) {
-                    inputStream = callingClassLoader.getResourceAsStream(buildUri);
+                    String assetsPath = "assets/" + buildUri.substring(9);
+                    inputStream = callingClassLoader.getResourceAsStream(assetsPath);
                 } else {
                     File file = getFile();
                     if (file != null && file.exists()) {

