File: java/src/main/java/org/apache/zeppelin/java/JavaInterpreter.java
Patch:
@@ -52,7 +52,7 @@ public void close() {
     /* Clean up .class files created during the compilation process. */
     Stream.of(
       new File(".").listFiles(f -> f.getAbsolutePath().endsWith(".class")))
-      .forEach(f -> f.delete());
+        .forEach(f -> f.delete());
   }
 
   @Override

File: livy/src/test/java/org/apache/zeppelin/livy/LivyInterpreterIT.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -651,6 +652,7 @@ void testLivyParams() throws InterpreterException {
   }
 
   @Test
+  @Disabled("ZEPPELIN-6134: failed due to a livy-side(likely) classloader issue")
   void testLivyTutorialNote() throws IOException, InterpreterException {
     if (!checkPreCondition()) {
       return;

File: zeppelin-server/src/test/java/org/apache/zeppelin/server/IndexHtmlServletTest.java
Patch:
@@ -56,7 +56,7 @@ void testZeppelinWebHtmlAddon() throws IOException, ServletException {
         .thenReturn(new URL("file:" + FILE_PATH_INDEX_HTML_ZEPPELIN_WEB));
       when(sc.getServletContext()).thenReturn(ctx);
 
-      IndexHtmlServlet servlet = new IndexHtmlServlet(zConf);
+      IndexHtmlServlet servlet = new IndexHtmlServlet(zConf, null);
       servlet.init(sc);
 
       HttpServletResponse mockResponse = mock(HttpServletResponse.class);
@@ -90,7 +90,7 @@ void testZeppelinWebAngularHtmlAddon() throws IOException, ServletException {
         .thenReturn(new URL("file:" + FILE_PATH_INDEX_HTML_ZEPPELIN_WEB_ANGULAR));
       when(sc.getServletContext()).thenReturn(ctx);
 
-      IndexHtmlServlet servlet = new IndexHtmlServlet(zConf);
+      IndexHtmlServlet servlet = new IndexHtmlServlet(zConf, null);
       servlet.init(sc);
 
       HttpServletResponse mockResponse = mock(HttpServletResponse.class);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.zeppelin.interpreter;
 
-import com.google.common.collect.Maps;
 import org.apache.zeppelin.display.AngularObjectRegistry;
 import org.apache.zeppelin.display.GUI;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient;
@@ -124,7 +123,7 @@ public Builder setAuthenticationInfo(AuthenticationInfo authenticationInfo) {
 
     public Builder setConfig(Map<String, Object> config) {
       if (config != null) {
-        context.config = Maps.newHashMap(config);
+        context.config = new HashMap<>(config);
       }
       return this;
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/RestApiApplication.java
Patch:
@@ -22,7 +22,6 @@
 import javax.ws.rs.core.Application;
 
 import org.apache.zeppelin.rest.AdminRestApi;
-import org.apache.zeppelin.rest.ClusterRestApi;
 import org.apache.zeppelin.rest.ConfigurationsRestApi;
 import org.apache.zeppelin.rest.CredentialRestApi;
 import org.apache.zeppelin.rest.HeliumRestApi;
@@ -40,7 +39,6 @@ public class RestApiApplication extends Application {
   public Set<Class<?>> getClasses() {
     Set<Class<?>> s = new HashSet<>();
     s.add(AdminRestApi.class);
-    s.add(ClusterRestApi.class);
     s.add(ConfigurationsRestApi.class);
     s.add(CredentialRestApi.class);
     s.add(HeliumRestApi.class);

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -592,7 +592,6 @@ public void tearDown() throws InterpreterException {
     if (this.interpreter != null) {
       this.interpreter.close();
     }
-    SparkShims.reset();
   }
 
   private InterpreterContext getInterpreterContext() {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -963,7 +963,7 @@ public enum ConfVars {
     ZEPPELIN_SSL_TRUSTSTORE_TYPE("zeppelin.ssl.truststore.type", null),
     ZEPPELIN_SSL_TRUSTSTORE_PASSWORD("zeppelin.ssl.truststore.password", null),
     ZEPPELIN_WAR("zeppelin.war", "zeppelin-web/dist"),
-    ZEPPELIN_ANGULAR_WAR("zeppelin.angular.war", "zeppelin-web-angular/dist"),
+    ZEPPELIN_ANGULAR_WAR("zeppelin.angular.war", "zeppelin-web-angular/dist/zeppelin"),
     ZEPPELIN_WAR_TEMPDIR("zeppelin.war.tempdir", "webapps"),
     ZEPPELIN_JMX_ENABLE("zeppelin.jmx.enable", false),
     ZEPPELIN_JMX_PORT("zeppelin.jmx.port", 9996),

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkShimsTest.java
Patch:
@@ -97,7 +97,7 @@ public void setUp() {
       when(mockContext.getIntpEventClient()).thenReturn(mockIntpEventClient);
 
       try {
-        sparkShims = SparkShims.getInstance(SparkVersion.SPARK_3_2_0.toString(), new Properties(), null);
+        sparkShims = SparkShims.getInstance(SparkVersion.SPARK_3_3_0.toString(), new Properties(), null);
       } catch (Throwable e1) {
         throw new RuntimeException("All SparkShims are tried, but no one can be created.");
       }

File: spark/spark-shims/src/main/java/org/apache/zeppelin/spark/SparkVersion.java
Patch:
@@ -25,15 +25,13 @@
 public class SparkVersion {
   private static final Logger LOGGER = LoggerFactory.getLogger(SparkVersion.class);
 
-  public static final SparkVersion SPARK_3_2_0 = SparkVersion.fromVersionString("3.2.0");
-
   public static final SparkVersion SPARK_3_3_0 = SparkVersion.fromVersionString("3.3.0");
 
   public static final SparkVersion SPARK_3_5_0 = SparkVersion.fromVersionString("3.5.0");
 
   public static final SparkVersion SPARK_4_0_0 = SparkVersion.fromVersionString("4.0.0");
 
-  public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_3_2_0;
+  public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_3_3_0;
   public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_4_0_0;
 
   private int version;

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/PersonalizeActionsIT.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.zeppelin.AbstractZeppelinIT;
 import org.apache.zeppelin.MiniZeppelinServer;
 import org.apache.zeppelin.WebDriverManager;
+import org.apache.zeppelin.ZeppelinITUtils;
 import org.apache.zeppelin.test.DownloadUtils;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.AfterEach;
@@ -239,6 +240,7 @@ void testGraphAction() throws Exception {
 
       pollingWait(By.xpath(getParagraphXPath(1) +
           "//button[contains(@uib-tooltip, 'Table')]"), MAX_BROWSER_TIMEOUT_SEC).click();
+      ZeppelinITUtils.sleep(1000, false);
       assertEquals("fa fa-table", manager.getWebDriver().findElement(By.xpath(getParagraphXPath(1)
           + "//button[contains(@class," +
           "'btn btn-default btn-sm ng-binding ng-scope active')]//i")).getAttribute("class"));

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -188,6 +188,7 @@ void testCancelPyspark() throws Exception {
       ZeppelinITUtils.sleep(2000, false);
       cancelParagraph(1);
       waitForParagraph(1, "ABORT");
+      ZeppelinITUtils.sleep(1000, false);
 
       assertEquals("ABORT", getParagraphStatus(1),
           "First paragraph status is " + getParagraphStatus(1));

File: zeppelin-integration/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -83,7 +83,7 @@ protected void logoutUser(String userName) throws URISyntaxException {
       manager.getWebDriver().findElement(
           By.xpath("//*[@id='loginModal']//div[contains(@class, 'modal-header')]/button")).click();
     }
-    manager.getWebDriver().get(new URI(manager.getWebDriver().getCurrentUrl()).resolve("/#/").toString());
+    manager.getWebDriver().get(new URI(manager.getWebDriver().getCurrentUrl()).resolve("/classic/#/").toString());
     ZeppelinITUtils.sleep(500, false);
   }
   

File: zeppelin-integration/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -128,7 +128,7 @@ private WebDriver constructWebDriver(int port) {
       throw new RuntimeException("No available WebDriver");
     }
 
-    String url = "http://localhost:" + port;
+    String url = "http://localhost:" + port + "/classic";
 
     long start = System.currentTimeMillis();
     boolean loaded = false;

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -189,7 +189,7 @@ void testGroupPermission() throws Exception {
       }
 
       manager.getWebDriver().get(new URI(manager.getWebDriver().getCurrentUrl())
-        .resolve("/#/notebook/" + noteId).toString());
+        .resolve("/classic/#/notebook/" + noteId).toString());
 
       List<WebElement> privilegesModal = manager.getWebDriver().findElements(
           By.xpath("//div[@class='modal-content']//div[@class='bootstrap-dialog-header']" +
@@ -210,7 +210,7 @@ void testGroupPermission() throws Exception {
       }
 
       manager.getWebDriver().get(new URI(manager.getWebDriver().getCurrentUrl())
-        .resolve("/#/notebook/" + noteId).toString());
+        .resolve("/classic/#/notebook/" + noteId).toString());
 
       privilegesModal = manager.getWebDriver().findElements(
           By.xpath("//div[@class='modal-content']//div[@class='bootstrap-dialog-header']" +

File: zeppelin-server/src/test/java/org/apache/zeppelin/security/DirAccessTest.java
Patch:
@@ -74,7 +74,7 @@ void testDirAccessOk() throws Exception {
   }
 
   protected String getUrlToTest() {
-    String url = "http://localhost:" + zConf.getServerPort();
+    String url = "http://localhost:" + zConf.getServerPort() + "/classic";
     if (System.getProperty("url") != null) {
       url = System.getProperty("url");
     }

File: flink/flink-scala-2.12/src/main/java/org/apache/zeppelin/flink/FlinkSqlInterpreter.java
Patch:
@@ -26,7 +26,7 @@
 
 public abstract class FlinkSqlInterpreter extends AbstractInterpreter {
 
-  protected static final Logger LOGGER = LoggerFactory.getLogger(FlinkSqlInterpreter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(FlinkSqlInterpreter.class);
 
   protected FlinkInterpreter flinkInterpreter;
   protected FlinkShims flinkShims;

File: flink/flink-scala-2.12/src/main/java/org/apache/zeppelin/flink/sql/AbstractStreamSqlJob.java
Patch:
@@ -55,7 +55,7 @@
  *
  */
 public abstract class AbstractStreamSqlJob {
-  private static Logger LOGGER = LoggerFactory.getLogger(AbstractStreamSqlJob.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractStreamSqlJob.class);
 
   private static AtomicInteger SQL_INDEX = new AtomicInteger(0);
   protected StreamExecutionEnvironment senv;

File: flink/flink-scala-2.12/src/main/java/org/apache/zeppelin/flink/sql/AppendStreamSqlJob.java
Patch:
@@ -38,7 +38,7 @@
 
 public class AppendStreamSqlJob extends AbstractStreamSqlJob {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(UpdateStreamSqlJob.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(UpdateStreamSqlJob.class);
 
   private List<Row> materializedTable = new ArrayList<>();
   private long tsWindowThreshold;

File: flink/flink-scala-2.12/src/test/java/org/apache/zeppelin/flink/FlinkSqlInterpreterTest.java
Patch:
@@ -71,7 +71,7 @@
 @RunWith(FlinkStandaloneHiveRunner.class)
 public abstract class FlinkSqlInterpreterTest {
 
-  protected static final Logger LOGGER = LoggerFactory.getLogger(FlinkSqlInterpreterTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(FlinkSqlInterpreterTest.class);
 
 
   protected FlinkInterpreter flinkInterpreter;

File: flink/flink-scala-2.12/src/test/java/org/apache/zeppelin/flink/FlinkStreamSqlInterpreterTest.java
Patch:
@@ -28,6 +28,8 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResultMessage;
 import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import javax.annotation.Nullable;
 import java.io.File;
@@ -41,7 +43,7 @@
 import static org.junit.Assert.assertEquals;
 
 public class FlinkStreamSqlInterpreterTest extends FlinkSqlInterpreterTest {
-
+  private static final Logger LOGGER = LoggerFactory.getLogger(FlinkStreamSqlInterpreterTest.class);
 
   private static class FlinkJobListener implements JobListener {
 

File: flink/flink-shims/src/main/java/org/apache/zeppelin/flink/FlinkVersion.java
Patch:
@@ -21,7 +21,7 @@
 
 
 public class FlinkVersion {
-  private static final Logger logger = LoggerFactory.getLogger(FlinkVersion.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(FlinkVersion.class);
 
   private int majorVersion;
   private int minorVersion;
@@ -50,7 +50,7 @@ public FlinkVersion(String versionString) {
       this.version = Integer.parseInt(String.format("%d%02d%02d",
               majorVersion, minorVersion, patchVersion));
     } catch (Exception e) {
-      logger.error("Can not recognize Flink version " + versionString +
+      LOGGER.error("Can not recognize Flink version " + versionString +
           ". Assume it's a future release", e);
     }
   }

File: helium-dev/src/main/java/org/apache/zeppelin/helium/ZeppelinDevServer.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class ZeppelinDevServer extends
     RemoteInterpreterServer implements InterpreterEvent, InterpreterOutputChangeListener {
-  private static final Logger logger = LoggerFactory.getLogger(ZeppelinDevServer.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ZeppelinDevServer.class);
 
   private DevInterpreter interpreter = null;
   private InterpreterOutput out;
@@ -87,7 +87,7 @@ public void onUpdate(int index, InterpreterResultMessageOutput out) {
               eventClient.onInterpreterOutputUpdate(noteId, paragraphId,
                   index, out.getType(), new String(out.toByteArray()));
             } catch (IOException e) {
-              logger.error(e.getMessage(), e);
+              LOGGER.error(e.getMessage(), e);
             }
           }
         }, this);

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/SqlCompleterTest.java
Patch:
@@ -92,7 +92,7 @@ private void expectedCompletions(String buffer, int cursor,
 
       String explain = explain(buffer, cursor, candidates);
 
-      logger.info(explain);
+      LOGGER.info(explain);
 
       assertEquals(expected, new HashSet<>(candidates), "Buffer [" + buffer.replace(" ", ".")
               + "] and Cursor[" + cursor + "] " + explain);
@@ -128,7 +128,7 @@ private String explain(String buffer, int cursor, List<InterpreterCompletion> ca
     }
   }
 
-  private Logger logger = LoggerFactory.getLogger(SqlCompleterTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(SqlCompleterTest.class);
 
   private CompleterTester tester;
 

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java
Patch:
@@ -85,7 +85,7 @@
  */
 public abstract class BaseLivyInterpreter extends Interpreter {
 
-  protected static final Logger LOGGER = LoggerFactory.getLogger(BaseLivyInterpreter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(BaseLivyInterpreter.class);
   private static Gson gson = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
   private static final String SESSION_NOT_FOUND_PATTERN = "(.*)\"Session '\\d+' not found.\"(.*)";
 

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -42,12 +42,15 @@
 import org.apache.zeppelin.interpreter.ResultMessages;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 /**
  * Livy SparkSQL Interpreter for Zeppelin.
  */
 public class LivySparkSQLInterpreter extends BaseLivyInterpreter {
+  private static final Logger LOGGER = LoggerFactory.getLogger(LivySparkSQLInterpreter.class);
 
   public static final String ZEPPELIN_LIVY_SPARK_SQL_FIELD_TRUNCATE =
       "zeppelin.livy.spark.sql.field.truncate";

File: livy/src/main/java/org/apache/zeppelin/livy/LivyVersion.java
Patch:
@@ -24,7 +24,7 @@
  * Provide reading comparing capability of livy version.
  */
 public class LivyVersion {
-  private static final Logger logger = LoggerFactory.getLogger(LivyVersion.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(LivyVersion.class);
 
   protected static final LivyVersion LIVY_0_2_0 = LivyVersion.fromVersionString("0.2.0");
   protected static final LivyVersion LIVY_0_3_0 = LivyVersion.fromVersionString("0.3.0");
@@ -52,7 +52,7 @@ public class LivyVersion {
       // version is always 5 digits. (e.g. 2.0.0 -> 20000, 1.6.2 -> 10602)
       version = Integer.parseInt(String.format("%d%02d%02d", major, minor, patch));
     } catch (Exception e) {
-      logger.error("Can not recognize Livy version " + versionString +
+      LOGGER.error("Can not recognize Livy version " + versionString +
           ". Assume it's a future release", e);
 
       // assume it is future release

File: livy/src/test/java/org/apache/zeppelin/livy/LivyInterpreterIT.java
Patch:
@@ -45,7 +45,7 @@
 import static org.mockito.Mockito.mock;
 
 public class LivyInterpreterIT extends WithLivyServer {
-  private static final Logger LOG = LoggerFactory.getLogger(LivyInterpreterIT.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(LivyInterpreterIT.class);
   private static Properties properties;
 
   @BeforeAll

File: neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jConnectionManager.java
Patch:
@@ -47,7 +47,7 @@
  * Neo4j connection manager for Zeppelin.
  */
 public class Neo4jConnectionManager {
-  static final Logger LOGGER = LoggerFactory.getLogger(Neo4jConnectionManager.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(Neo4jConnectionManager.class);
 
   public static final String NEO4J_SERVER_URL = "neo4j.url";
   public static final String NEO4J_DATABASE = "neo4j.database";

File: python/src/main/java/org/apache/zeppelin/python/PythonDockerInterpreter.java
Patch:
@@ -39,7 +39,7 @@
  * Helps run python interpreter on a docker container
  */
 public class PythonDockerInterpreter extends Interpreter {
-  Logger logger = LoggerFactory.getLogger(PythonDockerInterpreter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(PythonDockerInterpreter.class);
   Pattern activatePattern = Pattern.compile("activate\\s*(.*)");
   Pattern deactivatePattern = Pattern.compile("deactivate");
   Pattern helpPattern = Pattern.compile("help");
@@ -122,7 +122,7 @@ private void printUsage(InterpreterOutput out) {
       out.setType(InterpreterResult.Type.HTML);
       out.writeResource("output_templates/docker_usage.html");
     } catch (IOException e) {
-      logger.error("Can't print usage", e);
+      LOGGER.error("Can't print usage", e);
     }
   }
 
@@ -166,7 +166,7 @@ public boolean pull(InterpreterOutput out, String image) throws InterpreterExcep
     try {
       exit = runCommand(out, "docker", "pull", image);
     } catch (IOException | InterruptedException e) {
-      logger.error(e.getMessage(), e);
+      LOGGER.error(e.getMessage(), e);
       throw new InterpreterException(e);
     }
     return exit == 0;

File: rlang/src/main/java/org/apache/zeppelin/r/ZeppelinR.java
Patch:
@@ -38,7 +38,7 @@
  * R repl interaction
  */
 public class ZeppelinR {
-  private static Logger LOGGER = LoggerFactory.getLogger(ZeppelinR.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ZeppelinR.class);
 
   private RInterpreter rInterpreter;
   private RProcessLogOutputStream processOutputStream;

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -48,7 +48,7 @@
  */
 public class PySparkInterpreter extends PythonInterpreter {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(PySparkInterpreter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(PySparkInterpreter.class);
 
   private SparkInterpreter sparkInterpreter;
   private InterpreterContext curIntpContext;

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterMatplotlibTest.java
Patch:
@@ -56,7 +56,7 @@ public class PySparkInterpreterMatplotlibTest {
   static SparkInterpreter sparkInterpreter;
   static PySparkInterpreter pyspark;
   static InterpreterGroup intpGroup;
-  static Logger LOGGER = LoggerFactory.getLogger(PySparkInterpreterTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(PySparkInterpreterTest.class);
   static InterpreterContext context;
 
   public static class AltPySparkInterpreter extends PySparkInterpreter {

File: spark/spark-shims/src/main/java/org/apache/zeppelin/spark/SparkVersion.java
Patch:
@@ -23,7 +23,7 @@
  * Provide reading comparing capability of spark version returned from SparkContext.version()
  */
 public class SparkVersion {
-  private static final Logger logger = LoggerFactory.getLogger(SparkVersion.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(SparkVersion.class);
 
   public static final SparkVersion SPARK_3_2_0 = SparkVersion.fromVersionString("3.2.0");
 
@@ -60,7 +60,7 @@ public class SparkVersion {
       // version is always 5 digits. (e.g. 2.0.0 -> 20000, 1.6.2 -> 10602)
       version = Integer.parseInt(String.format("%d%02d%02d", majorVersion, minorVersion, patchVersion));
     } catch (Exception e) {
-      logger.error("Can not recognize Spark version " + versionString +
+      LOGGER.error("Can not recognize Spark version " + versionString +
           ". Assume it's a future release", e);
 
       // assume it is future release

File: zeppelin-examples/zeppelin-example-clock/src/main/java/org/apache/zeppelin/example/app/clock/Clock.java
Patch:
@@ -33,7 +33,7 @@
  * Get java.util.Date from resource pool and display it
  */
 public class Clock extends Application {
-  private final Logger logger = LoggerFactory.getLogger(Clock.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(Clock.class);
 
   Date date;
   boolean shutdown = false;

File: zeppelin-integration/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -48,7 +48,7 @@ abstract public class AbstractZeppelinIT {
 
   protected WebDriverManager manager;
 
-  protected final static Logger LOG = LoggerFactory.getLogger(AbstractZeppelinIT.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractZeppelinIT.class);
   protected static final long MIN_IMPLICIT_WAIT = 5;
   protected static final long MAX_IMPLICIT_WAIT = 30;
   protected static final long MAX_BROWSER_TIMEOUT_SEC = 30;
@@ -206,9 +206,9 @@ protected void clickAndWait(final By locator) {
   }
 
   protected void handleException(String message, Exception e) throws Exception {
-    LOG.error(message, e);
+    LOGGER.error(message, e);
     File scrFile = ((TakesScreenshot) manager.getWebDriver()).getScreenshotAs(OutputType.FILE);
-    LOG.error("ScreenShot::\ndata:image/png;base64," + new String(Base64.encodeBase64(FileUtils.readFileToByteArray(scrFile))));
+    LOGGER.error("ScreenShot::\ndata:image/png;base64," + new String(Base64.encodeBase64(FileUtils.readFileToByteArray(scrFile))));
     throw e;
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -49,7 +49,7 @@
 import java.util.EnumSet;
 
 public abstract class FlinkIntegrationTest {
-  private static Logger LOGGER = LoggerFactory.getLogger(FlinkIntegrationTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(FlinkIntegrationTest.class);
 
   private static MiniHadoopCluster hadoopCluster;
   private static MiniZeppelinServer zepServer;

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/MiniHadoopCluster.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class MiniHadoopCluster {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(MiniHadoopCluster.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(MiniHadoopCluster.class);
 
   private Configuration hadoopConf;
   private MiniDFSCluster dfsCluster;

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest.java
Patch:
@@ -59,7 +59,7 @@
 import java.util.stream.Collectors;
 
 public abstract class SparkIntegrationTest {
-  private static Logger LOGGER = LoggerFactory.getLogger(SparkIntegrationTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(SparkIntegrationTest.class);
 
   private static MiniHadoopCluster hadoopCluster;
   private static InterpreterFactory interpreterFactory;

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkSubmitIntegrationTest.java
Patch:
@@ -52,7 +52,7 @@
 
 public class SparkSubmitIntegrationTest {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(SparkSubmitIntegrationTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(SparkSubmitIntegrationTest.class);
 
   private static MiniHadoopCluster hadoopCluster;
   private static InterpreterFactory interpreterFactory;

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinClientIntegrationTest.java
Patch:
@@ -49,7 +49,7 @@
 import java.util.Map;
 
 class ZeppelinClientIntegrationTest extends AbstractTestRestApi {
-  private static final Logger LOG = LoggerFactory.getLogger(ZeppelinClientIntegrationTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ZeppelinClientIntegrationTest.class);
   private static Notebook notebook;
 
   private static ClientConfig clientConfig;
@@ -86,7 +86,7 @@ void setup() {
   @Test
   void testZeppelinVersion() throws Exception {
     String version = zeppelinClient.getVersion();
-    LOG.info("Zeppelin version: " + version);
+    LOGGER.info("Zeppelin version: " + version);
     assertNotNull(version);
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinClientWithAuthIntegrationTest.java
Patch:
@@ -36,7 +36,7 @@
 
 class ZeppelinClientWithAuthIntegrationTest extends AbstractTestRestApi {
 
-  private static final Logger LOG = LoggerFactory.getLogger(ZeppelinClientWithAuthIntegrationTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ZeppelinClientWithAuthIntegrationTest.class);
 
   private static ClientConfig clientConfig;
   private static ZeppelinClient zeppelinClient;
@@ -69,7 +69,7 @@ void setup() {
   @Test
   void testZeppelinVersion() throws Exception {
     String version = zeppelinClient.getVersion();
-    LOG.info("Zeppelin version: " + version);
+    LOGGER.info("Zeppelin version: " + version);
     assertNotNull(version);
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterManagerServer.java
Patch:
@@ -57,7 +57,7 @@
  * 2. Remotely create interpreter's thrift service
  */
 public class ClusterManagerServer extends ClusterManager {
-  private static Logger LOGGER = LoggerFactory.getLogger(ClusterManagerServer.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ClusterManagerServer.class);
 
   private static ClusterManagerServer instance = null;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterMonitor.java
Patch:
@@ -41,7 +41,7 @@
  * 3. checks the heartbeat timeout of the zeppelin-server and interperter processes
  */
 public class ClusterMonitor {
-  private static Logger LOGGER = LoggerFactory.getLogger(ClusterMonitor.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ClusterMonitor.class);
 
   // Whether the thread has started
   private static AtomicBoolean running = new AtomicBoolean(true);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/listener/ZeppelinClusterMembershipEventListener.java
Patch:
@@ -27,8 +27,7 @@
  * Monitor whether the metadata in the cluster server changes
  */
 public class ZeppelinClusterMembershipEventListener implements ClusterMembershipEventListener {
-  private static final Logger LOGGER
-      = LoggerFactory.getLogger(ZeppelinClusterMembershipEventListener.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ZeppelinClusterMembershipEventListener.class);
 
   @Override
   public void event(ClusterMembershipEvent event) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObject.java
Patch:
@@ -178,7 +178,7 @@ public void set(T o, boolean emit) {
       emit();
     }
     LOGGER.debug("Update angular object: {} with value: {}", name, o);
-    final Logger logger = LoggerFactory.getLogger(AngularObject.class);
+    final Logger LOGGER = LoggerFactory.getLogger(AngularObject.class);
     List<AngularObjectWatcher> ws = new LinkedList<>();
     synchronized (watchers) {
       ws.addAll(watchers);
@@ -192,7 +192,7 @@ public void run() {
           try {
             w.watch(before, after);
           } catch (Exception e) {
-            logger.error("Exception on watch", e);
+            LOGGER.error("Exception on watch", e);
           }
         }
       });

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java
Patch:
@@ -38,7 +38,7 @@
  * Load application
  */
 public class ApplicationLoader {
-  Logger logger = LoggerFactory.getLogger(ApplicationLoader.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ApplicationLoader.class);
 
   private final DependencyResolver depResolver;
   private final ResourcePool resourcePool;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java
Patch:
@@ -31,7 +31,7 @@
  * Interpreter result template.
  */
 public class InterpreterResult implements Serializable, JsonSerializable {
-  transient Logger logger = LoggerFactory.getLogger(InterpreterResult.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(InterpreterResult.class);
   private static final Gson gson = new Gson();
 
   /**
@@ -92,7 +92,7 @@ public void add(String msg) {
       this.msg.addAll(out.toInterpreterResultMessage());
       out.close();
     } catch (IOException e) {
-      logger.error(e.getMessage(), e);
+      LOGGER.error(e.getMessage(), e);
     }
 
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java
Patch:
@@ -33,7 +33,7 @@
  * InterpreterMessageOutputStream
  */
 public class InterpreterResultMessageOutput extends OutputStream {
-  Logger logger = LoggerFactory.getLogger(InterpreterResultMessageOutput.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(InterpreterResultMessageOutput.class);
   private final int NEW_LINE_CHAR = '\n';
   private List<String> resourceSearchPaths;
 
@@ -275,7 +275,7 @@ public String toString() {
     try {
       return "%" + type.name().toLowerCase() + " " + new String(toByteArray());
     } catch (IOException e) {
-      logger.error(e.getMessage(), e);
+      LOGGER.error(e.getMessage(), e);
       return "%" + type.name().toLowerCase() + "\n";
     }
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java
Patch:
@@ -422,8 +422,8 @@ public static Object deserializeObject(ByteBuffer buf)
   }
 
   private void logException(Exception e) {
-    Logger logger = LoggerFactory.getLogger(Resource.class);
-    logger.error(e.getMessage(), e);
+    Logger LOGGER = LoggerFactory.getLogger(Resource.class);
+    LOGGER.error(e.getMessage(), e);
   }
 
   public String toJson() {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class JobProgressPoller extends Thread {
   public static final long DEFAULT_INTERVAL_MSEC = 500;
-  private static final Logger logger = LoggerFactory.getLogger(JobProgressPoller.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(JobProgressPoller.class);
 
   private Job<?> job;
   private long intervalMs;
@@ -55,7 +55,7 @@ public void run() {
               listener.onProgressUpdate(job, job.progress());
             }
           } catch (Exception e) {
-            logger.error("Can not get or update progress", e);
+            LOGGER.error("Can not get or update progress", e);
           }
         }
         Thread.sleep(intervalMs);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/user/AuthenticationInfo.java
Patch:
@@ -35,7 +35,7 @@
  *
  */
 public class AuthenticationInfo implements JsonSerializable {
-  private static final Logger LOG = LoggerFactory.getLogger(AuthenticationInfo.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(AuthenticationInfo.class);
   private static final Gson GSON = new Gson();
 
   String user;
@@ -119,7 +119,7 @@ public void setUserCredentials(UserCredentials userCredentials) {
 
   public static boolean isAnonymous(AuthenticationInfo subject) {
     if (subject == null) {
-      LOG.warn("Subject is null, assuming anonymous. "
+      LOGGER.warn("Subject is null, assuming anonymous. "
           + "Not recommended to use subject as null except in tests");
       return true;
     }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/cluster/ClusterMultiNodeTest.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.Map;
 
 public class ClusterMultiNodeTest {
-  private static Logger LOGGER = LoggerFactory.getLogger(ClusterMultiNodeTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ClusterMultiNodeTest.class);
 
   private static List<ClusterManagerServer> clusterServers = new ArrayList<>();
   private static ClusterManagerClient clusterClient = null;

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/cluster/ClusterSingleNodeTest.java
Patch:
@@ -36,7 +36,7 @@
 
 
 class ClusterSingleNodeTest {
-  private static Logger LOGGER = LoggerFactory.getLogger(ClusterSingleNodeTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ClusterSingleNodeTest.class);
   private static ZeppelinConfiguration zConf;
 
   private static ClusterManagerServer clusterServer = null;

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/SleepingJob.java
Patch:
@@ -33,7 +33,7 @@ public class SleepingJob extends Job {
   private long start;
   private int count;
 
-  static Logger LOGGER = LoggerFactory.getLogger(SleepingJob.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(SleepingJob.class);
   private Object results;
 
 

File: zeppelin-plugins/launcher/cluster/src/main/java/org/apache/zeppelin/interpreter/launcher/ClusterInterpreterCheck.java
Patch:
@@ -31,8 +31,7 @@
 // Metadata registered in the cluster by the interpreter process,
 // Keep the interpreter process started
 public class ClusterInterpreterCheck implements Runnable {
-  private static final Logger LOGGER
-      = LoggerFactory.getLogger(ClusterInterpreterCheck.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ClusterInterpreterCheck.class);
 
   private final InterpreterClient intpProcess;
   private final String intpGroupId;

File: zeppelin-plugins/launcher/yarn/src/main/java/org/apache/zeppelin/interpreter/launcher/YarnInterpreterLauncher.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class YarnInterpreterLauncher extends InterpreterLauncher {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(YarnInterpreterLauncher.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(YarnInterpreterLauncher.class);
 
   public YarnInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage recoveryStorage) {
     super(zConf, recoveryStorage);

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/kerberos/KerberosAuthenticationFilter.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class KerberosAuthenticationFilter extends PassThruAuthenticationFilter {
 
-  private static final Logger LOG = LoggerFactory.getLogger(KerberosAuthenticationFilter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(KerberosAuthenticationFilter.class);
 
   @Override
   protected void saveRequestAndRedirectToLogin(ServletRequest request, ServletResponse response) {
@@ -71,7 +71,7 @@ public void doFilterInternal(ServletRequest request,
     if (kerberosRealm != null) {
       kerberosRealm.doKerberosAuth(request, response, filterChain);
     } else {
-      LOG.error("Looks like this filter is enabled without enabling KerberosRealm, please refer"
+      LOGGER.error("Looks like this filter is enabled without enabling KerberosRealm, please refer"
           + " to https://zeppelin.apache.org/docs/latest/security/shiroauthentication.html"
           + "#kerberos-auth");
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/ClusterRestApi.java
Patch:
@@ -47,7 +47,7 @@
 @Path("/cluster")
 @Produces("application/json")
 public class ClusterRestApi {
-  private static final Logger LOG = LoggerFactory.getLogger(ClusterRestApi.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ClusterRestApi.class);
   Gson gson = new Gson();
 
   private ClusterManagerServer clusterManagerServer;
@@ -63,7 +63,7 @@ public ClusterRestApi(ZeppelinConfiguration zConf) {
     if (zConf.isClusterMode()) {
       clusterManagerServer = ClusterManagerServer.getInstance(zConf);
     } else {
-      LOG.warn("Cluster mode is disabled, ClusterRestApi won't work");
+      LOGGER.warn("Cluster mode is disabled, ClusterRestApi won't work");
     }
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/SecurityRestApi.java
Patch:
@@ -44,7 +44,7 @@
 @Produces("application/json")
 @Singleton
 public class SecurityRestApi extends AbstractRestApi {
-  private static final Logger LOG = LoggerFactory.getLogger(SecurityRestApi.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(SecurityRestApi.class);
 
   @Inject
   public SecurityRestApi(AuthenticationService authenticationService) {
@@ -79,7 +79,7 @@ public Response ticket() {
     data.put("ticket", ticketEntry.getTicket());
 
     JsonResponse<Map<String, String>> response = new JsonResponse<>(Response.Status.OK, "", data);
-    LOG.warn("{}", response);
+    LOGGER.warn("{}", response);
     return response.build();
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterAuthEventListenerTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Set;
 
 public class ClusterAuthEventListenerTest implements ClusterEventListener {
-  private static Logger LOGGER = LoggerFactory.getLogger(ClusterAuthEventListenerTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ClusterAuthEventListenerTest.class);
 
   public String receiveMsg = null;
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterIntpSettingEventListenerTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.slf4j.LoggerFactory;
 
 public class ClusterIntpSettingEventListenerTest implements ClusterEventListener {
-  private static Logger LOGGER = LoggerFactory.getLogger(ClusterIntpSettingEventListenerTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ClusterIntpSettingEventListenerTest.class);
 
   public String receiveMsg = null;
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterNoteEventListenerTest.java
Patch:
@@ -37,7 +37,7 @@
 import java.util.Set;
 
 public class ClusterNoteEventListenerTest implements ClusterEventListener {
-  private static Logger LOGGER = LoggerFactory.getLogger(ClusterNoteEventListenerTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ClusterNoteEventListenerTest.class);
 
   public String receiveMsg = null;
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/KnoxRestApiTest.java
Patch:
@@ -42,7 +42,7 @@ public class KnoxRestApiTest extends AbstractTestRestApi {
           "liWYjr0M17Bm9GfPHRRR66s7YuYXa6DLbB4fHE0cyOoQnkfJFpU_vr1xhy0_0URc5v-Gb829b9rxuQfjKe-37h" +
           "qbUdkwww2q6QQETVMvzp0rQKprUClZujyDvh0;";
 
-  private static final Logger LOG = LoggerFactory.getLogger(KnoxRestApiTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(KnoxRestApiTest.class);
 
   Gson gson = new Gson();
   private static MiniZeppelinServer zepServer;

File: zeppelin-test/src/main/java/org/apache/zeppelin/test/SemanticVersion.java
Patch:
@@ -24,7 +24,7 @@
  * Provide reading comparing capability of semantic version which is used widely in Apache projects
  */
 public class SemanticVersion {
-  private static final Logger LOG = LoggerFactory.getLogger(SemanticVersion.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(SemanticVersion.class);
 
   public static SemanticVersion of(String versionString) {
     return new SemanticVersion(versionString);
@@ -54,7 +54,7 @@ private SemanticVersion(String versionString) {
       // version is always 5 digits. (e.g. 2.0.0 -> 20000, 1.6.2 -> 10602)
       version = Integer.parseInt(String.format("%d%02d%02d", majorVersion, minorVersion, patchVersion));
     } catch (Exception e) {
-      LOG.error("Can not recognize Spark version {}. Assume it's a future release", versionString, e);
+      LOGGER.error("Can not recognize Spark version {}. Assume it's a future release", versionString, e);
       // assume it is future release
       version = 99999;
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumRegistrySerializer.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class HeliumRegistrySerializer
     implements JsonSerializer<HeliumRegistry>, JsonDeserializer<HeliumRegistry> {
-  Logger logger = LoggerFactory.getLogger(HeliumRegistrySerializer.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(HeliumRegistrySerializer.class);
 
   @Override
   public HeliumRegistry deserialize(JsonElement json,
@@ -42,14 +42,14 @@ public HeliumRegistry deserialize(JsonElement json,
     String name = jsonObject.get("name").getAsString();
 
     try {
-      logger.info("Restore helium registry {} {} {}", name, className, uri);
+      LOGGER.info("Restore helium registry {} {} {}", name, className, uri);
       Class<HeliumRegistry> cls =
           (Class<HeliumRegistry>) getClass().getClassLoader().loadClass(className);
       Constructor<HeliumRegistry> constructor = cls.getConstructor(String.class, String.class);
       return constructor.newInstance(name, uri);
     } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException |
         InstantiationException | InvocationTargetException e) {
-      logger.error(e.getMessage(), e);
+      LOGGER.error(e.getMessage(), e);
       return null;
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/SessionConfInterpreter.java
Patch:
@@ -29,7 +29,7 @@
 
 public class SessionConfInterpreter extends ConfInterpreter {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(SessionConfInterpreter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(SessionConfInterpreter.class);
 
   public SessionConfInterpreter(Properties properties,
                                 String sessionId,

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/AppendOutputRunner.java
Patch:
@@ -36,8 +36,7 @@
  */
 public class AppendOutputRunner implements Runnable {
 
-  private static final Logger LOGGER =
-      LoggerFactory.getLogger(AppendOutputRunner.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(AppendOutputRunner.class);
   public static final Long BUFFER_TIME_MS = new Long(100);
   private static final Long SAFE_PROCESSING_TIME = new Long(10);
   private static final Long SAFE_PROCESSING_STRING_SIZE = new Long(100000);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -52,7 +52,7 @@
  *
  */
 public abstract class AbstractInterpreterTest {
-  protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractInterpreterTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractInterpreterTest.class);
 
   protected InterpreterSettingManager interpreterSettingManager;
   protected InterpreterFactory interpreterFactory;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManagerTest.java
Patch:
@@ -28,6 +28,8 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.io.IOException;
@@ -38,7 +40,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 class TimeoutLifecycleManagerTest extends AbstractInterpreterTest {
-
+  private static final Logger LOGGER = LoggerFactory.getLogger(TimeoutLifecycleManagerTest.class);
   private File zeppelinSiteFile = new File("zeppelin-site.xml");
 
   @Override

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -84,7 +84,7 @@
 
 
 class NotebookTest extends AbstractInterpreterTest implements ParagraphJobListener {
-  private static final Logger logger = LoggerFactory.getLogger(NotebookTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(NotebookTest.class);
 
   private Notebook notebook;
   private NoteManager noteManager;
@@ -414,7 +414,7 @@ void testLoadAllNotes() {
           return null;
         });
     } catch (IOException fe) {
-      logger.warn("Failed to create note and paragraph. Possible problem with persisting note, safe to ignore", fe);
+      LOGGER.warn("Failed to create note and paragraph. Possible problem with persisting note, safe to ignore", fe);
     }
 
     assertEquals(1, notebook.getNotesInfo().size());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java
Patch:
@@ -57,7 +57,7 @@
 import org.slf4j.LoggerFactory;
 
 class GitNotebookRepoTest {
-  private static final Logger LOG = LoggerFactory.getLogger(GitNotebookRepoTest.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(GitNotebookRepoTest.class);
 
   private static final String TEST_NOTE_ID = "2A94M5J1Z";
   private static final String TEST_NOTE_ID2 = "2A94M5J2Z";
@@ -362,7 +362,7 @@ void setRevisionTest() throws IOException {
     Note note = notebookRepo.get(TEST_NOTE_ID, TEST_NOTE_PATH, null);
     note.setInterpreterFactory(mock(InterpreterFactory.class));
     int paragraphCount_1 = note.getParagraphs().size();
-    LOG.info("initial paragraph count: {}", paragraphCount_1);
+    LOGGER.info("initial paragraph count: {}", paragraphCount_1);
 
     // checkpoint revision1
     Revision revision1 = notebookRepo.checkpoint(TEST_NOTE_ID, TEST_NOTE_PATH, "set revision: first commit", null);
@@ -379,7 +379,7 @@ void setRevisionTest() throws IOException {
     notebookRepo.save(note, null);
     int paragraphCount_2 = note.getParagraphs().size();
     assertEquals(paragraphCount_1 + 1, paragraphCount_2);
-    LOG.info("paragraph count after modification: {}", paragraphCount_2);
+    LOGGER.info("paragraph count after modification: {}", paragraphCount_2);
 
     // checkpoint revision2
     Revision revision2 = notebookRepo.checkpoint(TEST_NOTE_ID, TEST_NOTE_PATH, "set revision: second commit", null);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -1106,8 +1106,9 @@ public enum ConfVars {
 
     // Used by K8s and Docker plugin
     ZEPPELIN_DOCKER_CONTAINER_IMAGE("zeppelin.docker.container.image", "apache/zeppelin:" + Util.getVersion()),
+    ZEPPELIN_DOCKER_CONTAINER_HOME("zeppelin.docker.container.home", "/opt/zeppelin"),
 
-    ZEPPELIN_DOCKER_CONTAINER_SPARK_HOME("zeppelin.docker.container.spark.home", "/spark"),
+    ZEPPELIN_DOCKER_CONTAINER_SPARK_HOME("zeppelin.docker.container.spark.home", "/opt/spark"),
     ZEPPELIN_DOCKER_UPLOAD_LOCAL_LIB_TO_CONTAINTER("zeppelin.docker.upload.local.lib.to.container", true),
     ZEPPELIN_DOCKER_HOST("zeppelin.docker.host", "http://0.0.0.0:2375"),
     ZEPPELIN_DOCKER_TIME_ZONE("zeppelin.docker.time.zone", TimeZone.getDefault().getID()),

File: zeppelin-plugins/launcher/docker/src/test/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterProcessTest.java
Patch:
@@ -55,7 +55,7 @@ void testCreateIntpProcess() throws IOException {
     DockerInterpreterProcess interpreterProcess = (DockerInterpreterProcess) client;
     assertEquals("name", interpreterProcess.getInterpreterSettingName());
 
-    assertEquals("/spark", interpreterProcess.containerSparkHome);
+    assertEquals("/opt/spark", interpreterProcess.containerSparkHome);
     assertTrue(interpreterProcess.uploadLocalLibToContainter);
     assertNotEquals("http://my-docker-host:2375", interpreterProcess.dockerHost);
   }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ShellIntegrationTest.java
Patch:
@@ -54,7 +54,7 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   @Test

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZSessionIntegrationTest.java
Patch:
@@ -90,8 +90,8 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zepServer.getZeppelinConfiguration();
-    clientConfig = new ClientConfig("http://localhost:" + conf.getServerPort());
+    zConf = zepServer.getZeppelinConfiguration();
+    clientConfig = new ClientConfig("http://localhost:" + zConf.getServerPort());
   }
 
   @Test

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinClientIntegrationTest.java
Patch:
@@ -80,7 +80,7 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   @Test

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinClientWithAuthIntegrationTest.java
Patch:
@@ -63,7 +63,7 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   @Test

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinFlinkClusterTest.java
Patch:
@@ -76,7 +76,7 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   @Disabled("(zjffdu) Disable Temporary")

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest.java
Patch:
@@ -152,7 +152,7 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   private Callable<Boolean> isParagraphFinish(Paragraph p) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Booter.java
Patch:
@@ -83,10 +83,10 @@ static String resolveLocalRepoPath(String localRepoPath) {
   }
 
   public static List<RemoteRepository> newCentralRepositorys(Proxy proxy,
-      ZeppelinConfiguration conf) {
+      ZeppelinConfiguration zConf) {
     String mvnRepoEnv = System.getenv("ZEPPELIN_INTERPRETER_DEP_MVNREPO");
     if (mvnRepoEnv == null) {
-      mvnRepoEnv = conf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_DEP_MVNREPO);
+      mvnRepoEnv = zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_DEP_MVNREPO);
     }
     if (mvnRepoEnv == null) {
       mvnRepoEnv = "https://repo1.maven.org/maven2/";

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/BooterTest.java
Patch:
@@ -56,8 +56,8 @@ void should_throw_exception_for_null() {
 
   @Test
   void getInterpreterMvnRepoPathTest() {
-    ZeppelinConfiguration conf = ZeppelinConfiguration.load("zeppelin-site-test.xml");
-    List<RemoteRepository> remoteRepositories = Booter.newCentralRepositorys(null, conf);
+    ZeppelinConfiguration zConf = ZeppelinConfiguration.load("zeppelin-site-test.xml");
+    List<RemoteRepository> remoteRepositories = Booter.newCentralRepositorys(null, zConf);
     assertNotNull(remoteRepositories);
     assertEquals(2, remoteRepositories.size());
     assertEquals("https://repo1.maven.org/maven2/", remoteRepositories.get(0).getUrl());

File: zeppelin-plugins/launcher/cluster/src/main/java/org/apache/zeppelin/interpreter/launcher/ClusterInterpreterLauncher.java
Patch:
@@ -269,7 +269,7 @@ private RemoteInterpreterProcess createClusterIntpProcess() {
     return clusterIntpProcess;
   }
 
-  private boolean isRunningOnDocker(ZeppelinConfiguration zconf) {
-    return zconf.getRunMode() == ZeppelinConfiguration.RUN_MODE.DOCKER;
+  private boolean isRunningOnDocker(ZeppelinConfiguration zConf) {
+    return zConf.getRunMode() == ZeppelinConfiguration.RUN_MODE.DOCKER;
   }
 }

File: zeppelin-plugins/notebookrepo/gcs/src/main/java/org/apache/zeppelin/notebook/repo/GCSNotebookRepo.java
Patch:
@@ -79,11 +79,11 @@ public GCSNotebookRepo() {
   }
 
   @VisibleForTesting
-  public GCSNotebookRepo(ZeppelinConfiguration conf, NoteParser noteParser, Storage storage)
+  public GCSNotebookRepo(ZeppelinConfiguration zConf, NoteParser noteParser, Storage storage)
       throws IOException
   {
     try {
-      init(conf, noteParser);
+      init(zConf, noteParser);
     } catch (IOException e) {
       // Skip Credentials Exception during tests
       if (!e.getMessage().contains("Default Credentials")) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/IndexHtmlServlet.java
Patch:
@@ -47,9 +47,9 @@ public class IndexHtmlServlet extends HttpServlet {
   final String bodyAddon;
   final String headAddon;
 
-  public IndexHtmlServlet(ZeppelinConfiguration conf) {
-    this.bodyAddon = conf.getHtmlBodyAddon();
-    this.headAddon = conf.getHtmlHeadAddon();
+  public IndexHtmlServlet(ZeppelinConfiguration zConf) {
+    this.bodyAddon = zConf.getHtmlBodyAddon();
+    this.headAddon = zConf.getHtmlHeadAddon();
   }
 
   @Override

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -94,11 +94,11 @@ public class NotebookService {
   public NotebookService(
       Notebook notebook,
       AuthorizationService authorizationService,
-      ZeppelinConfiguration zeppelinConfiguration,
+      ZeppelinConfiguration zConf,
       SchedulerService schedulerService) {
     this.notebook = notebook;
     this.authorizationService = authorizationService;
-    this.zConf = zeppelinConfiguration;
+    this.zConf = zConf;
     this.schedulerService = schedulerService;
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/utils/CorsUtils.java
Patch:
@@ -29,7 +29,7 @@ private CorsUtils() {
   }
 
   public static final String HEADER_ORIGIN = "Origin";
-  public static boolean isValidOrigin(String sourceHost, ZeppelinConfiguration conf)
+  public static boolean isValidOrigin(String sourceHost, ZeppelinConfiguration zConf)
       throws UnknownHostException, URISyntaxException {
 
     String sourceUriHost = "";
@@ -42,9 +42,9 @@ public static boolean isValidOrigin(String sourceHost, ZeppelinConfiguration con
     sourceUriHost = sourceUriHost.toLowerCase();
     String currentHost = InetAddress.getLocalHost().getHostName().toLowerCase();
 
-    return conf.getAllowedOrigins().contains("*")
+    return zConf.getAllowedOrigins().contains("*")
         || currentHost.equals(sourceUriHost)
         || "localhost".equals(sourceUriHost)
-        || conf.getAllowedOrigins().contains(sourceHost);
+        || zConf.getAllowedOrigins().contains(sourceHost);
   }
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/configuration/RequestHeaderSizeTest.java
Patch:
@@ -53,21 +53,21 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zep.getZeppelinConfiguration();
+    zConf = zep.getZeppelinConfiguration();
   }
 
   @Test
   void increased_request_header_size_do_not_cause_431_when_request_size_is_over_8K()
       throws Exception {
     CloseableHttpClient client = HttpClients.createDefault();
-    HttpGet httpGet = new HttpGet(getUrlToTest(conf) + "/version");
+    HttpGet httpGet = new HttpGet(getUrlToTest(zConf) + "/version");
     String headerValue = RandomStringUtils.randomAlphanumeric(REQUEST_HEADER_MAX_SIZE - 2000);
     httpGet.setHeader("not_too_large_header", headerValue);
     CloseableHttpResponse response = client.execute(httpGet);
     assertThat(response.getStatusLine().getStatusCode(), is(HttpStatus.SC_OK));
     response.close();
 
-    httpGet = new HttpGet(getUrlToTest(conf) + "/version");
+    httpGet = new HttpGet(getUrlToTest(zConf) + "/version");
     headerValue = RandomStringUtils.randomAlphanumeric(REQUEST_HEADER_MAX_SIZE + 2000);
     httpGet.setHeader("too_large_header", headerValue);
     response = client.execute(httpGet);

File: zeppelin-server/src/test/java/org/apache/zeppelin/recovery/RecoveryTest.java
Patch:
@@ -88,7 +88,7 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setUp() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
     notebook = zepServer.getService(Notebook.class);
     anonymous = new AuthenticationInfo("anonymous");
   }
@@ -254,7 +254,7 @@ void testRecovery_3() throws Exception {
 
       // shutdown zeppelin and restart it
       zepServer.shutDown();
-      new StopInterpreter(conf);
+      new StopInterpreter(zConf);
       zepServer.start();
       Thread.sleep(5 * 1000);
       // run the paragraph again, but change the text to print variable `user`.

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ConfigurationsRestApiTest.java
Patch:
@@ -51,7 +51,7 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zep.getZeppelinConfiguration();
+    zConf = zep.getZeppelinConfiguration();
   }
 
   @Test

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/HeliumRestApiTest.java
Patch:
@@ -59,7 +59,7 @@ static void init() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   @AfterAll

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -76,7 +76,7 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setUp() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
     notebook = zepServer.getService(Notebook.class);
     anonymous = new AuthenticationInfo("anonymous");
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/KnoxRestApiTest.java
Patch:
@@ -57,7 +57,7 @@ public static void init() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   @AfterAll

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRepoRestApiTest.java
Patch:
@@ -66,7 +66,7 @@ public static void destroy() throws Exception {
   @BeforeEach
   public void setUp() {
     anonymous = new AuthenticationInfo("anonymous");
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   private List<Map<String, Object>> getListOfReposotiry() throws IOException {

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -83,7 +83,7 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setUp() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
     notebook = zepServer.getService(Notebook.class);
     anonymous = new AuthenticationInfo("anonymous");
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookSecurityRestApiTest.java
Patch:
@@ -59,7 +59,7 @@ public static void destroy() throws Exception {
   @BeforeEach
   void setup() {
     notebook = zepServer.getService(Notebook.class);
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   @Test

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/SecurityRestApiTest.java
Patch:
@@ -53,7 +53,7 @@ static void destroy() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   @Test

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/SessionRestApiTest.java
Patch:
@@ -54,7 +54,7 @@ public static void destroy() throws Exception {
 
   @BeforeEach
   void setup() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   @Test

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -89,7 +89,7 @@ public static void destroy() throws Exception {
 
   @BeforeEach
   void setUp() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
     notebook = zepServer.getService(Notebook.class);
     anonymous = new AuthenticationInfo("anonymous");
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/ConfigurationServiceTest.java
Patch:
@@ -65,7 +65,7 @@ public static void destroy() throws Exception {
 
   @BeforeEach
   void setUp() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
   }
 
   @Test

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -113,7 +113,7 @@ public static void destroy() throws Exception {
 
   @BeforeEach
   void setUp() {
-    conf = zepServer.getZeppelinConfiguration();
+    zConf = zepServer.getZeppelinConfiguration();
     anonymous = AuthenticationInfo.ANONYMOUS;
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/AbstractNotebookRepo.java
Patch:
@@ -24,13 +24,13 @@
 
 public abstract class AbstractNotebookRepo implements NotebookRepo {
 
-  protected ZeppelinConfiguration conf;
+  protected ZeppelinConfiguration zConf;
   protected NoteParser noteParser;
 
   @Override
-  public void init(ZeppelinConfiguration conf, NoteParser parser) throws IOException {
+  public void init(ZeppelinConfiguration zConf, NoteParser parser) throws IOException {
     this.noteParser = parser;
-    this.conf = conf;
+    this.zConf = zConf;
   }
 
   @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/GitNotebookRepo.java
Patch:
@@ -61,9 +61,9 @@ public GitNotebookRepo() {
   }
 
   @Override
-  public void init(ZeppelinConfiguration conf, NoteParser noteParser) throws IOException {
-    super.init(conf, noteParser);
-    setNotebookDirectory(conf.getNotebookDir());
+  public void init(ZeppelinConfiguration zConf, NoteParser noteParser) throws IOException {
+    super.init(zConf, noteParser);
+    setNotebookDirectory(zConf.getNotebookDir());
 
     LOGGER.info("Opening a git repo at '{}'", this.rootNotebookFolder);
     Repository localRepo = new FileRepository(String.join(File.separator, this.rootNotebookFolder, ".git"));

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -64,7 +64,7 @@ public void setUp() throws Exception {
     notebookRepo = mock(NotebookRepo.class);
     notebook =
         new Notebook(
-            conf,
+            zConf,
             authorizationService,
             notebookRepo,
             new NoteManager(notebookRepo, ZeppelinConfiguration.load()),

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -86,7 +86,7 @@ void testInitInterpreterSettingManager() throws IOException, RepositoryException
     assertEquals("central", repositories.get(0).getId());
 
     // Load it again
-    InterpreterSettingManager interpreterSettingManager2 = new InterpreterSettingManager(conf,
+    InterpreterSettingManager interpreterSettingManager2 = new InterpreterSettingManager(zConf,
         mock(AngularObjectRegistryListener.class), mock(RemoteInterpreterProcessListener.class),
         mock(ApplicationEventListener.class), storage, pluginManager);
     assertEquals(6, interpreterSettingManager2.get().size());
@@ -145,7 +145,7 @@ void testCreateUpdateRemoveSetting() throws IOException, InterpreterException {
     assertNotNull(interpreterSetting.getInterpreterSettingManager());
 
     // load it again, it should be saved in interpreter-setting.json. So we can restore it properly
-    InterpreterSettingManager interpreterSettingManager2 = new InterpreterSettingManager(conf,
+    InterpreterSettingManager interpreterSettingManager2 = new InterpreterSettingManager(zConf,
         mock(AngularObjectRegistryListener.class), mock(RemoteInterpreterProcessListener.class),
         mock(ApplicationEventListener.class), storage, pluginManager);
     assertEquals(7, interpreterSettingManager2.get().size());
@@ -198,7 +198,7 @@ void testCreateUpdateRemoveSetting() throws IOException, InterpreterException {
     assertEquals(6, interpreterSettingManager.get().size());
 
     // load it again
-    InterpreterSettingManager interpreterSettingManager3 = new InterpreterSettingManager(conf,
+    InterpreterSettingManager interpreterSettingManager3 = new InterpreterSettingManager(zConf,
         mock(AngularObjectRegistryListener.class), mock(RemoteInterpreterProcessListener.class),
         mock(ApplicationEventListener.class), storage, pluginManager);
     assertEquals(6, interpreterSettingManager3.get().size());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManagerTest.java
Patch:
@@ -45,10 +45,10 @@ class TimeoutLifecycleManagerTest extends AbstractInterpreterTest {
   @BeforeEach
   public void setUp() throws Exception {
     super.setUp();
-    conf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_CLASS.getVarName(),
+    zConf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_CLASS.getVarName(),
         TimeoutLifecycleManager.class.getName());
-    conf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL.getVarName(), "1000");
-    conf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD.getVarName(), "10s");
+    zConf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL.getVarName(), "1000");
+    zConf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD.getVarName(), "10s");
   }
 
   @Override

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/mock/VFSNotebookRepoMock.java
Patch:
@@ -28,10 +28,10 @@ public VFSNotebookRepoMock() {
   }
 
   @Override
-  public void init(ZeppelinConfiguration conf, NoteParser noteParser) throws IOException {
-    this.conf = conf;
+  public void init(ZeppelinConfiguration zConf, NoteParser noteParser) throws IOException {
+    this.zConf = zConf;
     this.noteParser = noteParser;
-    setNotebookDirectory(conf.getNotebookDir() + "_secondary");
+    setNotebookDirectory(zConf.getNotebookDir() + "_secondary");
   }
 
 }

File: livy/src/test/java/org/apache/zeppelin/livy/LivySQLInterpreterTest.java
Patch:
@@ -35,7 +35,7 @@ class LivySQLInterpreterTest {
   private LivySparkSQLInterpreter sqlInterpreter;
 
   @BeforeEach
-  public void setUp() {
+  public void beforeEach() {
     Properties properties = new Properties();
     properties.setProperty("zeppelin.livy.url", "http://localhost:8998");
     properties.setProperty("zeppelin.livy.session.create_timeout", "120");

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/HeliumPackageTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.apache.commons.text.StringEscapeUtils.escapeHtml4;
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
 
 import java.util.Map;
 
@@ -31,7 +32,7 @@ void parseSpellPackageInfo() {
     String examplePackage = "{\n" +
         "  \"type\" : \"SPELL\",\n" +
         "  \"name\" : \"echo-spell\",\n" +
-        "  \"description\" : \"'%echo' - return just what receive (example)\",\n" +
+        "  \"description\" : \"'%echo' - return just what receive (example)i<img src onerror=alert(3)>\",\n" +
         "  \"artifact\" : \"./zeppelin-examples/zeppelin-example-spell-echo\",\n" +
         "  \"license\" : \"Apache-2.0\",\n" +
         "  \"icon\" : \"<i class='fa fa-repeat'></i>\",\n" +
@@ -44,6 +45,7 @@ void parseSpellPackageInfo() {
     HeliumPackage p = HeliumPackage.fromJson(examplePackage);
     assertEquals("%echo", p.getSpellInfo().getMagic());
     assertEquals(escapeHtml4("%echo <TEXT>"), p.getSpellInfo().getUsage());
+    assertNotEquals("'%echo' - return just what receive (example)i<img src onerror=alert(3)>", p.getDescription());
   }
 
   @Test

File: flink/flink-scala-2.12/src/test/java/org/apache/zeppelin/flink/FlinkSqlInterpreterTest.java
Patch:
@@ -90,7 +90,7 @@ protected Properties getFlinkProperties() throws IOException {
     p.setProperty("zeppelin.flink.enableHive", "true");
     p.setProperty("taskmanager.managed.memory.size", "32");
     p.setProperty("taskmanager.memory.task.off-heap.size", "80mb");
-    p.setProperty("zeppelin.flink.hive.version", "2.3.4");
+    p.setProperty("zeppelin.flink.hive.version", "2.3.7");
     p.setProperty("zeppelin.pyflink.useIPython", "false");
     p.setProperty("local.number-taskmanager", "4");
     p.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinFlinkClusterTest.java
Patch:
@@ -45,11 +45,9 @@
 public abstract class ZeppelinFlinkClusterTest extends AbstractTestRestApi {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(ZeppelinFlinkClusterTest.class);
-  private String flinkVersion;
   private String flinkHome;
 
   public void download(String flinkVersion, String scalaVersion) {
-    this.flinkVersion = flinkVersion;
     LOGGER.info("Testing FlinkVersion: " + flinkVersion);
     LOGGER.info("Testing ScalaVersion: " + scalaVersion);
     this.flinkHome = DownloadUtils.downloadFlink(flinkVersion, scalaVersion);

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -265,7 +265,7 @@ void testIPythonPlotting() throws InterpreterException, InterruptedException, IO
         "x = [1, 2, 3, 4, 5]\n" +
         "y = [6, 7, 2, 4, 5]\n" +
         "p = figure(title=\"simple line example\", x_axis_label='x', y_axis_label='y')\n" +
-        "p.line(x, y, legend=\"Temp.\", line_width=2)\n" +
+        "p.line(x, y, legend_label=\"Temp.\", line_width=2)\n" +
         "show(p)", context);
     assertEquals(InterpreterResult.Code.SUCCESS, result.code(),
         context.out.toInterpreterResultMessage().toString());

File: livy/src/test/java/org/apache/zeppelin/livy/LivyInterpreterIT.java
Patch:
@@ -33,6 +33,7 @@
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -47,6 +48,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.Mockito.mock;
 
+@Disabled("FIXME: temporarily disable the broken tests")
 public class LivyInterpreterIT {
   private static final Logger LOGGER = LoggerFactory.getLogger(LivyInterpreterIT.class);
   private static Cluster cluster;

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -598,6 +598,7 @@ void testShowAndHideLineNumbers() throws Exception {
   }
 
   @Test
+  @Disabled("flaky")
   void testEditOnDoubleClick() throws Exception {
     try {
       createNewNote();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/ApplicationLoaderTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import static org.apache.zeppelin.helium.HeliumPackage.newHeliumPackage;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -74,7 +75,7 @@ void loadUnloadApplication() throws Exception {
   }
 
   public HeliumPackage createPackageInfo(String className, String artifact) {
-    HeliumPackage app1 = new HeliumPackage(
+    HeliumPackage app1 = newHeliumPackage(
         HeliumType.APPLICATION,
         "name1",
         "desc1",

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/HeliumPackageTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.zeppelin.helium;
 
+import static org.apache.commons.text.StringEscapeUtils.escapeHtml4;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import java.util.Map;
@@ -42,7 +43,7 @@ void parseSpellPackageInfo() {
 
     HeliumPackage p = HeliumPackage.fromJson(examplePackage);
     assertEquals("%echo", p.getSpellInfo().getMagic());
-    assertEquals("%echo <TEXT>", p.getSpellInfo().getUsage());
+    assertEquals(escapeHtml4("%echo <TEXT>"), p.getSpellInfo().getUsage());
   }
 
   @Test

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/HeliumRestApiTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import static org.apache.zeppelin.helium.HeliumPackage.newHeliumPackage;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -64,7 +65,7 @@ void setUp() throws IOException {
     HeliumTestRegistry registry = new HeliumTestRegistry("r1", "r1");
     helium.clear();
 
-    registry.add(new HeliumPackage(
+    registry.add(newHeliumPackage(
         HeliumType.APPLICATION,
         "name1",
         "desc1",
@@ -74,7 +75,7 @@ void setUp() throws IOException {
         "",
         ""));
 
-    registry.add(new HeliumPackage(
+    registry.add(newHeliumPackage(
         HeliumType.APPLICATION,
         "name2",
         "desc2",

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumLocalRegistryTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.File;
 import java.io.IOException;
 
+import static org.apache.zeppelin.helium.HeliumPackage.newHeliumPackage;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class HeliumLocalRegistryTest {
@@ -50,7 +51,7 @@ public void testGetAllPackage() throws IOException {
 
     // when
     Gson gson = new Gson();
-    HeliumPackage pkg1 = new HeliumPackage(HeliumType.APPLICATION,
+    HeliumPackage pkg1 = newHeliumPackage(HeliumType.APPLICATION,
         "app1",
         "desc1",
         "artifact1",

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sStandardInterpreterLauncherTest.java
Patch:
@@ -99,6 +99,7 @@ void testK8sLauncherWithSparkAndUserImpersonate() throws IOException {
     K8sRemoteInterpreterProcess process = (K8sRemoteInterpreterProcess) client;
     assertTrue(process.isSpark());
     assertTrue(process.prepareZeppelinSparkConf(context.getUserName()).contains("--proxy-user|user1"));
+    process.close();
   }
 
   @Test
@@ -132,5 +133,6 @@ void testK8sLauncherWithSparkAndWithoutUserImpersonate() throws IOException {
     K8sRemoteInterpreterProcess process = (K8sRemoteInterpreterProcess) client;
     assertTrue(process.isSpark());
     assertFalse(process.prepareZeppelinSparkConf(context.getUserName()).contains("--proxy-user user1"));
+    process.close();
   }
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestMethodOrder;
@@ -657,6 +658,7 @@ void testRunParagraphWithParams() throws Exception {
     }
   }
 
+  @Disabled // TODO(ZEPPELIN-5994): Fix and enable this test
   @Test
   void testJobs() throws Exception {
     // create a note and a paragraph
@@ -719,6 +721,7 @@ void testJobs() throws Exception {
     }
   }
 
+  @Disabled // TODO(ZEPPELIN-5994): Fix and enable this test
   @Test
   void testCronDisable() throws Exception {
     String noteId = null;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/YarnAppMonitor.java
Patch:
@@ -82,11 +82,11 @@ private YarnAppMonitor() {
                       String yarnDiagnostics = appReport.getDiagnostics();
                       interpreterManagedProcess.processStopped("Yarn diagnostics: " + yarnDiagnostics);
                       iter.remove();
-                      LOGGER.info("Remove {} from YarnAppMonitor, because its state is {}", appId ,
+                      LOGGER.info("Remove {} from YarnAppMonitor, because its state is {}", appId,
                               appReport.getYarnApplicationState());
                     } else if (appReport.getYarnApplicationState() == YarnApplicationState.FINISHED) {
                       iter.remove();
-                      LOGGER.info("Remove {} from YarnAppMonitor, because its state is ", appId,
+                      LOGGER.info("Remove {} from YarnAppMonitor, because its state is {}", appId,
                               appReport.getYarnApplicationState());
                     }
                   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/ShiroAuthenticationService.java
Patch:
@@ -434,7 +434,7 @@ private List<String> getUserList(JdbcRealm obj) {
         return userlist;
       }
 
-      userquery = String.format("SELECT %s FROM %s", username, tablename);
+      userquery = "SELECT ? FROM ?";
     } catch (IllegalAccessException e) {
       LOGGER.error("Error while accessing dataSource for JDBC Realm", e);
       return new ArrayList<>();
@@ -443,6 +443,8 @@ private List<String> getUserList(JdbcRealm obj) {
     try {
       con = dataSource.getConnection();
       ps = con.prepareStatement(userquery);
+      ps.setString(1, username);
+      ps.setString(2, tablename);
       rs = ps.executeQuery();
       while (rs.next()) {
         userlist.add(rs.getString(1).trim());

File: flink/flink-shims/src/main/java/org/apache/zeppelin/flink/FlinkShims.java
Patch:
@@ -66,6 +66,9 @@ private static FlinkShims loadShims(FlinkVersion flinkVersion,
     } else if (flinkVersion.getMajorVersion() == 1 && flinkVersion.getMinorVersion() == 16) {
       LOGGER.info("Initializing shims for Flink 1.16");
       flinkShimsClass = Class.forName("org.apache.zeppelin.flink.Flink116Shims");
+    } else if (flinkVersion.getMajorVersion() == 1 && flinkVersion.getMinorVersion() == 17) {
+      LOGGER.info("Initializing shims for Flink 1.17");
+      flinkShimsClass = Class.forName("org.apache.zeppelin.flink.Flink117Shims");
     } else {
       throw new Exception("Flink version: '" + flinkVersion + "' is not supported yet");
     }

File: flink/flink1.16-shims/src/main/java/org/apache/zeppelin/flink/Flink116Shims.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.flink.api.common.RuntimeExecutionMode;
-import org.apache.flink.api.common.typeinfo.TypeInformation;
 import org.apache.flink.api.common.typeutils.TypeSerializer;
 import org.apache.flink.api.java.tuple.Tuple2;
 import org.apache.flink.client.cli.CliFrontend;
@@ -53,7 +52,6 @@
 import org.apache.flink.table.functions.TableAggregateFunction;
 import org.apache.flink.table.functions.TableFunction;
 import org.apache.flink.table.module.ModuleManager;
-import org.apache.flink.table.planner.calcite.FlinkTypeFactory;
 import org.apache.flink.table.resource.ResourceManager;
 import org.apache.flink.table.sinks.TableSink;
 import org.apache.flink.table.typeutils.TimeIndicatorTypeInfo;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteManager.java
Patch:
@@ -247,7 +247,7 @@ public void moveNote(String noteId,
     this.notebookRepo.move(noteId, notePath, newNotePath, subject);
 
     // Update path of the note
-    if (!StringUtils.equalsIgnoreCase(notePath, newNotePath)) {
+    if (!StringUtils.equals(notePath, newNotePath)) {
       processNote(noteId,
         note -> {
           note.setPath(newNotePath);
@@ -258,7 +258,7 @@ public void moveNote(String noteId,
     // save note if note name is changed, because we need to update the note field in note json.
     String oldNoteName = getNoteName(notePath);
     String newNoteName = getNoteName(newNotePath);
-    if (!StringUtils.equalsIgnoreCase(oldNoteName, newNoteName)) {
+    if (!StringUtils.equals(oldNoteName, newNoteName)) {
       processNote(noteId,
         note -> {
           this.notebookRepo.save(note, subject);

File: cassandra/src/test/java/org/apache/zeppelin/cassandra/CassandraInterpreterTest.java
Patch:
@@ -211,9 +211,9 @@ public void should_interpret_select_statement_with_formatting_options() {
     props.put("floatPrecision", "2");
     props.put("doublePrecision", "4");
     props.put("decimalPrecision", "5");
-    props.put("timeFormat", "hh:mma");
+    props.put("timeFormat", "hh:mm");
     props.put("timestampFormat", "MM/dd/yy HH:mm");
-    props.put("dateFormat", "E, d MMM yy");
+    props.put("dateFormat", "EEEE, d MMMM yy");
     props.put("timezone", "Etc/GMT+2");
     String query =
             "select date,time,timestamp,dec,double,float,tuple,udt from zeppelin.test_format;";
@@ -232,7 +232,7 @@ public void should_interpret_select_statement_with_formatting_options() {
     assertThat(actual).isNotNull();
     assertThat(actual.code()).isEqualTo(Code.SUCCESS);
     String expected = "date\ttime\ttimestamp\tdec\tdouble\tfloat\ttuple\tudt\n" +
-            "Di, 29 Jan 19\t04:05AM\t06/16/20 21:59\t123562352352,12346\t10,0153\t20,03\t" +
+            "Dienstag, 29 Januar 19\t04:05\t06/16/20 21:59\t123562352352,12346\t10,0153\t20,03\t" +
             "(1, text, 10)\t{id: 1, t: text, lst: [1, 2, 3]}\n";
     assertThat(actual.message().get(0).getData()).isEqualTo(expected);
   }

File: zeppelin-plugins/launcher/cluster/src/main/java/org/apache/zeppelin/interpreter/launcher/ClusterInterpreterLauncher.java
Patch:
@@ -230,7 +230,7 @@ private InterpreterClient createInterpreterProcess(InterpreterLaunchContext cont
 
     // must first step start check interpreter thread
     ClusterInterpreterCheckThread intpCheckThread = new ClusterInterpreterCheckThread(
-      intpProcess, context.getInterpreterGroupId(), getConnectTimeout(context));
+        intpProcess, context.getInterpreterGroupId(), getConnectTimeout(context));
     intpCheckThread.start();
 
     return intpProcess;

File: zeppelin-plugins/launcher/docker/src/main/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterProcess.java
Patch:
@@ -131,7 +131,8 @@ public DockerInterpreterProcess(
     this.containerName = interpreterGroupId.toLowerCase();
 
     containerSparkHome = zconf.getString(ConfVars.ZEPPELIN_DOCKER_CONTAINER_SPARK_HOME);
-    uploadLocalLibToContainter = zconf.getBoolean(ConfVars.ZEPPELIN_DOCKER_UPLOAD_LOCAL_LIB_TO_CONTAINTER);
+    uploadLocalLibToContainter = zconf.getBoolean(
+        ConfVars.ZEPPELIN_DOCKER_UPLOAD_LOCAL_LIB_TO_CONTAINTER);
 
     try {
       this.zeppelinHome = getZeppelinHome();

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -469,8 +469,7 @@ private void configConnectionPool(GenericObjectPool connectionPool, Properties p
   private void createConnectionPool(String url, String user,
       Properties properties) throws SQLException, ClassNotFoundException {
 
-    LOGGER.info("Creating connection pool for url: {}, user: {}, properties: {}",
-            url, user, properties);
+    LOGGER.info("Creating connection pool for url: {}, user: {}", url, user);
 
     /* Remove properties that is not valid properties for presto/trino by checking driver key.
      * - Presto: com.facebook.presto.jdbc.PrestoDriver

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -68,7 +68,7 @@ public void testSpark() throws Exception {
       import org.apache.commons.io.IOUtils
       import java.net.URL
       import java.nio.charset.Charset
-      val bankText = sc.parallelize(IOUtils.toString(new URL("https://s3.amazonaws.com/apache-zeppelin/tutorial/bank/bank.csv"),Charset.forName("utf8")).split("\n"))
+      val bankText = sc.parallelize(IOUtils.toString(new URL("https://raw.githubusercontent.com/apache/zeppelin/master/testing/resources/bank.csv"),Charset.forName("utf8")).split("\n"))
       case class Bank(age: Integer, job: String, marital: String, education: String, balance: Integer)
 
       val bank = bankText.map(s => s.split(";")).filter(s => s(0) != "\"age\"").map(s => Bank(s(0).toInt,s(1).replaceAll("\"", ""),s(2).replaceAll("\"", ""),s(3).replaceAll("\"", ""),s(5).replaceAll("\"", "").toInt)).toDF()
@@ -77,7 +77,7 @@ case class Bank(age: Integer, job: String, marital: String, education: String, b
       setTextOfParagraph(2, "import org.apache.commons.io.IOUtils\\n" +
           "import java.net.URL\\n" +
           "import java.nio.charset.Charset\\n" +
-          "val bankText = sc.parallelize(IOUtils.toString(new URL(\"https://s3.amazonaws.com/apache-zeppelin/tutorial/bank/bank.csv\"),Charset.forName(\"utf8\")).split(\"\\\\n\"))\\n" +
+          "val bankText = sc.parallelize(IOUtils.toString(new URL(\"https://raw.githubusercontent.com/apache/zeppelin/master/testing/resources/bank.csv\"),Charset.forName(\"utf8\")).split(\"\\\\n\"))\\n" +
           "case class Bank(age: Integer, job: String, marital: String, education: String, balance: Integer)\\n" +
           "\\n" +
           "val bank = bankText.map(s => s.split(\";\")).filter(s => s(0) != \"\\\\\"age\\\\\"\").map(s => Bank(s(0).toInt,s(1).replaceAll(\"\\\\\"\", \"\"),s(2).replaceAll(\"\\\\\"\", \"\"),s(3).replaceAll(\"\\\\\"\", \"\"),s(5).replaceAll(\"\\\\\"\", \"\").toInt)).toDF()\\n" +

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/security/JDBCSecurityImpl.java
Patch:
@@ -58,8 +58,9 @@ public static void createSecureConfiguration(Properties properties,
             UserGroupInformation.loginUserFromKeytab(principal, keytab);
             LOGGER.info("Login successfully via keytab: {} and principal: {}", keytab, principal);
           } else {
+            UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab();
             LOGGER.info("The user has already logged in using Keytab and principal, " +
-                "no action required");
+                "will check tgt and whether to re-login");
           }
         } catch (IOException e) {
           LOGGER.error("Failed to get either keytab location or principal name in the " +

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/SessionConfInterpreterTest.java
Patch:
@@ -19,13 +19,13 @@
 package org.apache.zeppelin.interpreter;
 
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreter;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Properties;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/CredentialInjectorTest.java
Patch:
@@ -17,16 +17,16 @@
 
 package org.apache.zeppelin.notebook;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNull;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.user.UserCredentials;
 import org.apache.zeppelin.user.UsernamePassword;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class CredentialInjectorTest {
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/plugin/PluginManagerTest.java
Patch:
@@ -19,11 +19,11 @@
 
 import org.apache.zeppelin.notebook.repo.GitNotebookRepo;
 import org.apache.zeppelin.notebook.repo.NotebookRepo;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
 
 public class PluginManagerTest {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/storage/LocalConfigStorageTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.commons.io.IOUtils;
 import org.apache.zeppelin.util.FileUtils;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.BufferedWriter;
 import java.io.File;
@@ -31,7 +31,7 @@
 import java.nio.file.Paths;
 import java.util.Random;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 public class LocalConfigStorageTest {
     public static final String TEST_STRING = "this is a test!";

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/user/CredentialsTest.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.apache.zeppelin.user;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class CredentialsTest {
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/user/EncryptorTest.java
Patch:
@@ -19,10 +19,10 @@
 
 import java.io.IOException;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
 
 public class EncryptorTest {
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java
Patch:
@@ -260,6 +260,7 @@ public void setResult(Object results) {
 
     assertNotNull(job1.getDateFinished());
     assertTrue(job1.isTerminated());
+    assertEquals("1000", job1.getReturn());
     assertNull(job2.getDateFinished());
     assertTrue(job2.isTerminated());
     assertEquals("result2", job2.getReturn());

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZSessionIntegrationTest.java
Patch:
@@ -68,7 +68,7 @@ public static void setUp() throws Exception {
 
     notebook = TestUtils.getInstance(Notebook.class);
     sparkHome = DownloadUtils.downloadSpark("2.4.4", "2.7");
-    flinkHome = DownloadUtils.downloadFlink("1.12.4", "2.11");
+    flinkHome = DownloadUtils.downloadFlink("1.13.2", "2.11");
   }
 
   @AfterClass

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -434,9 +434,6 @@ public void run() {
           InterpreterResult result = interpreter.interpret("import time\ntime.sleep(1000)",
                   getInterpreterContext());
           waiter.assertEquals(InterpreterResult.Code.ERROR, result.code());
-          waiter.assertEquals(
-                  "IPython kernel is abnormally exited, please check your code and log.",
-                  result.message().get(0).getData());
         } catch (InterpreterException e) {
           waiter.fail("Should not throw exception\n" + ExceptionUtils.getStackTrace(e));
         }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/util/ProcessLauncher.java
Patch:
@@ -132,7 +132,7 @@ public void onProcessComplete(int exitValue) {
   @Override
   public void onProcessFailed(ExecuteException e) {
     LOGGER.warn("Process with cmd {} is failed due to", commandLine, e);
-
+    LOGGER.warn("Process ErrorMessage: \n{}", getErrorMessage());
     errorMessage = ExceptionUtils.getStackTrace(e);
     transition(State.TERMINATED);
   }

File: alluxio/src/main/java/org/apache/zeppelin/alluxio/AlluxioInterpreter.java
Patch:
@@ -77,7 +77,9 @@ public AlluxioInterpreter(Properties property) {
   }
 
   private Stream<String> filteredProperties(String prefix) {
-    return properties.stringPropertyNames().stream().filter(propertyKey -> propertyKey.startsWith(prefix));
+    return properties.stringPropertyNames().stream().filter(
+      propertyKey -> propertyKey.startsWith(prefix)
+    );
   }
 
   @Override

File: alluxio/src/test/java/org/apache/zeppelin/alluxio/AlluxioInterpreterTest.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.zeppelin.alluxio;
 
 
-import alluxio.conf.ServerConfiguration;
+import alluxio.conf.Configuration;
 import alluxio.grpc.WritePType;
 import alluxio.client.file.FileSystemTestUtils;
 import alluxio.master.LocalAlluxioCluster;
@@ -66,9 +66,9 @@ public final void after() throws Exception {
 
   @Before
   public final void before() throws Exception {
-    mLocalAlluxioCluster = new LocalAlluxioCluster(1);
+    mLocalAlluxioCluster = new LocalAlluxioCluster(1, false);
     mLocalAlluxioCluster.initConfiguration("alluxio-test");
-    ServerConfiguration.global().validate();
+    Configuration.global().validate();
     mLocalAlluxioCluster.start();
 
     fs = mLocalAlluxioCluster.getClient();

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkScalaInterpreter.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zeppelin.spark;
 
 import com.google.common.collect.Lists;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;

File: spark/spark2-shims/src/main/java/org/apache/zeppelin/spark/Spark2Shims.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.zeppelin.spark;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.spark.SparkContext;
 import org.apache.spark.scheduler.SparkListener;
 import org.apache.spark.scheduler.SparkListenerJobStart;

File: spark/spark3-shims/src/main/java/org/apache/zeppelin/spark/Spark3Shims.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.zeppelin.spark;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.spark.SparkContext;
 import org.apache.spark.scheduler.SparkListener;
 import org.apache.spark.scheduler.SparkListenerJobStart;

File: cassandra/src/test/java/org/apache/zeppelin/cassandra/InterpreterLogicTest.java
Patch:
@@ -148,8 +148,8 @@ public void should_extract_variable_and_default_value() {
     //Given
     AngularObjectRegistry angularObjectRegistry = new AngularObjectRegistry("cassandra", null);
     when(intrContext.getAngularObjectRegistry()).thenReturn(angularObjectRegistry);
-    when(intrContext.getGui().input("table", "zeppelin.demo")).thenReturn("zeppelin.demo");
-    when(intrContext.getGui().input("id", "'John'")).thenReturn("'John'");
+    when(intrContext.getGui().textbox("table", "zeppelin.demo")).thenReturn("zeppelin.demo");
+    when(intrContext.getGui().textbox("id", "'John'")).thenReturn("'John'");
 
     //When
     final String actual = helper.maybeExtractVariables(

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sStandardInterpreterLauncherTest.java
Patch:
@@ -98,7 +98,7 @@ public void testK8sLauncherWithSparkAndUserImpersonate() throws IOException {
     assertTrue(client instanceof K8sRemoteInterpreterProcess);
     K8sRemoteInterpreterProcess process = (K8sRemoteInterpreterProcess) client;
     assertTrue(process.isSpark());
-    assertTrue(process.buildSparkSubmitOptions(context.getUserName()).contains("--proxy-user user1"));
+    assertTrue(process.prepareZeppelinSparkConf(context.getUserName()).contains("--proxy-user|user1"));
   }
 
   @Test
@@ -131,6 +131,6 @@ public void testK8sLauncherWithSparkAndWithoutUserImpersonate() throws IOExcepti
     assertTrue(client instanceof K8sRemoteInterpreterProcess);
     K8sRemoteInterpreterProcess process = (K8sRemoteInterpreterProcess) client;
     assertTrue(process.isSpark());
-    assertFalse(process.buildSparkSubmitOptions(context.getUserName()).contains("--proxy-user user1"));
+    assertFalse(process.prepareZeppelinSparkConf(context.getUserName()).contains("--proxy-user user1"));
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -1073,7 +1073,6 @@ public InterpreterSetting getDefaultInterpreterSetting() {
     }
   }
 
-  @VisibleForTesting
   public List<String> getSettingIds() {
     List<String> settingIds = new ArrayList<>();
     for (InterpreterSetting interpreterSetting : get()) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookImportDeserializer.java
Patch:
@@ -47,6 +47,7 @@ public Date deserialize(JsonElement jsonElement, Type typeOF,
       try {
         return new SimpleDateFormat(format, Locale.US).parse(jsonElement.getAsString());
       } catch (ParseException e) {
+        // try the next format
       }
     }
     throw new JsonParseException("Unparsable date: \"" + jsonElement.getAsString()

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/ExecutorUtil.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.zeppelin.util;
 
+import java.util.List;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.TimeUnit;
 
@@ -38,7 +39,8 @@ public static void softShutdown(String name, ExecutorService executor, int stopT
       // Wait a while for existing tasks to terminate
       if (!executor.awaitTermination(stopTimeoutVal, stopTimeoutUnit)) {
         LOGGER.warn("{} was not shut down in the given time {} {} - interrupting now", name, stopTimeoutVal, stopTimeoutUnit);
-        executor.shutdownNow(); // Cancel currently executing tasks
+        List<Runnable> neverExecuted = executor.shutdownNow(); // Cancel currently executing tasks
+        LOGGER.warn("{} tasks were never executed from {}.", neverExecuted.size(), name);
         // Wait a while for tasks to respond to being cancelled
         if (!executor.awaitTermination(stopTimeoutVal, stopTimeoutUnit)) {
           LOGGER.error("executor {} did not terminate", name);

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -260,6 +260,8 @@ protected void configure() {
       sharedServiceLocator, SearchService.class.getName());
     ServiceLocatorUtilities.getService(
       sharedServiceLocator, SchedulerService.class.getName());
+    // Initialization of the Notes in the notebook asynchronously
+    notebook.initNotebook();
     // Try to recover here, don't do it in constructor of Notebook, because it would cause deadlock.
     notebook.recoveryIfNecessary();
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterEventTest.java
Patch:
@@ -32,7 +32,6 @@
 import org.apache.zeppelin.interpreter.thrift.ParagraphInfo;
 import org.apache.zeppelin.interpreter.thrift.ServiceException;
 import org.apache.zeppelin.notebook.AuthorizationService;
-import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.Notebook;
 import org.apache.zeppelin.notebook.Paragraph;
 import org.apache.zeppelin.notebook.scheduler.QuartzSchedulerService;
@@ -63,6 +62,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.TimeUnit;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -101,7 +101,8 @@ public static void init() throws Exception {
     authorizationService = TestUtils.getInstance(AuthorizationService.class);
 
     schedulerService = new QuartzSchedulerService(zconf, notebook);
-    schedulerService.waitForFinishInit();
+    notebook.initNotebook();
+    notebook.waitForFinishInit(1, TimeUnit.MINUTES);
     notebookServer = spy(NotebookServer.getInstance());
     notebookService = new NotebookService(notebook, authorizationService, zconf, schedulerService);
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -39,6 +39,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
@@ -129,7 +130,8 @@ public void setUp() throws Exception {
             null);
     searchService = new LuceneSearch(zeppelinConfiguration, notebook);
     QuartzSchedulerService schedulerService = new QuartzSchedulerService(zeppelinConfiguration, notebook);
-    schedulerService.waitForFinishInit();
+    notebook.initNotebook();
+    notebook.waitForFinishInit(1, TimeUnit.MINUTES);
     notebookService =
         new NotebookService(
             notebook, authorizationService, zeppelinConfiguration, schedulerService);

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -549,7 +549,6 @@ private static void setupRestApiContextHandler(WebAppContext webapp, ZeppelinCon
 
     servletHolder.setInitParameter("javax.ws.rs.Application", ZeppelinServer.class.getName());
     servletHolder.setName("rest");
-    servletHolder.setForcedPath("rest");
     webapp.setSessionHandler(new SessionHandler());
     webapp.addServlet(servletHolder, "/api/*");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java
Patch:
@@ -55,7 +55,7 @@ public void setProperties(Properties props) {
    */
   protected int getConnectTimeout() {
     int connectTimeout =
-        zConf.getInt(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);
+            (int) zConf.getTime(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);
     if (properties != null && properties.containsKey(
         ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getVarName())) {
       connectTimeout = Integer.parseInt(properties.getProperty(

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManager.java
Patch:
@@ -46,9 +46,9 @@ public class TimeoutLifecycleManager extends LifecycleManager {
   public TimeoutLifecycleManager(ZeppelinConfiguration zConf,
                                  RemoteInterpreterServer remoteInterpreterServer) {
     super(zConf, remoteInterpreterServer);
-    long checkInterval = zConf.getLong(ZeppelinConfiguration.ConfVars
+    long checkInterval = zConf.getTime(ZeppelinConfiguration.ConfVars
             .ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL);
-    long timeoutThreshold = zConf.getLong(
+    long timeoutThreshold = zConf.getTime(
         ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD);
     ScheduledExecutorService checkScheduler = ExecutorFactory.singleton()
         .createOrGetScheduled("TimeoutLifecycleManager", 1);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/RecoveryUtils.java
Patch:
@@ -77,7 +77,7 @@ public static Map<String, InterpreterClient> restoreFromRecoveryData(String reco
                                                                        ZeppelinConfiguration zConf) {
 
     int connectTimeout =
-            zConf.getInt(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);
+            (int) zConf.getTime(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);
     Properties interpreterProperties =  interpreterSettingManager.getByName(interpreterSettingName).getJavaProperties();
     int connectionPoolSize = Integer.parseInt(interpreterProperties.getProperty(
             ZEPPELIN_INTERPRETER_CONNECTION_POOL_SIZE.getVarName(),

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncherTest.java
Patch:
@@ -53,7 +53,7 @@ public void testLauncher() throws IOException {
     assertEquals("name", interpreterProcess.getInterpreterSettingName());
     assertEquals(".//interpreter/groupName", interpreterProcess.getInterpreterDir());
     assertEquals(".//local-repo/groupId", interpreterProcess.getLocalRepoDir());
-    assertEquals(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getIntValue(),
+    assertEquals(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getLongValue(),
         interpreterProcess.getConnectTimeout());
     assertEquals(zConf.getInterpreterRemoteRunnerPath(), interpreterProcess.getInterpreterRunner());
     assertTrue(interpreterProcess.getEnv().size() >= 2);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManagerTest.java
Patch:
@@ -45,7 +45,7 @@ public void setUp() throws Exception {
     zConf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_CLASS.getVarName(),
         TimeoutLifecycleManager.class.getName());
     zConf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL.getVarName(), "1000");
-    zConf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD.getVarName(), "10000");
+    zConf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD.getVarName(), "10s");
 
     super.setUp();
   }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java
Patch:
@@ -438,7 +438,7 @@ public void testFailToLaunchInterpreterProcess_Timeout() {
     try {
       System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_REMOTE_RUNNER.getVarName(),
               zeppelinHome.getAbsolutePath() + "/zeppelin-zengine/src/test/resources/bin/interpreter_timeout.sh");
-      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getVarName(), "10000");
+      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getVarName(), "10s");
       final Interpreter interpreter1 = interpreterSetting.getInterpreter("user1", note1Id, "sleep");
       final InterpreterContext context1 = createDummyInterpreterContext();
       // run this dummy interpret method first to launch the RemoteInterpreterProcess to avoid the

File: markdown/src/main/java/org/apache/zeppelin/markdown/FlexmarkParser.java
Patch:
@@ -28,6 +28,7 @@
 import com.vladsch.flexmark.html.HtmlRenderer;
 import com.vladsch.flexmark.parser.Parser;
 import com.vladsch.flexmark.util.data.MutableDataSet;
+import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -44,6 +45,7 @@ public class FlexmarkParser implements MarkdownParser {
   private HtmlRenderer renderer;
 
   public FlexmarkParser() {
+    ZeppelinConfiguration zConf = ZeppelinConfiguration.create();
     MutableDataSet options = new MutableDataSet();
     options.set(Parser.EXTENSIONS, Arrays.asList(StrikethroughExtension.create(),
             TablesExtension.create(),
@@ -54,6 +56,7 @@ public FlexmarkParser() {
             EmojiExtension.create()));
     options.set(HtmlRenderer.SOFT_BREAK, "<br />\n");
     options.set(EmojiExtension.USE_IMAGE_TYPE, UNICODE_ONLY);
+    options.set(HtmlRenderer.ESCAPE_HTML, zConf.isZeppelinNotebookMarkdownEscapeHtml());
     parser = Parser.builder(options).build();
     renderer = HtmlRenderer.builder(options).build();
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -490,7 +490,7 @@ public void close(String sessionId, String className) throws InterpreterRPCExcep
           Iterator<Interpreter> it = interpreters.iterator();
           while (it.hasNext()) {
             Interpreter inp = it.next();
-            boolean isOpen = false;
+            boolean isOpen = true;
             if (inp instanceof LazyOpenInterpreter) {
               LazyOpenInterpreter lazy = (LazyOpenInterpreter) inp;
               isOpen = lazy.isOpen();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -936,7 +936,7 @@ public enum ConfVars {
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_DEP_MVNREPO("zeppelin.interpreter.dep.mvnRepo",
         "https://repo1.maven.org/maven2/"),
-    ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 60000),
+    ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 600000),
     ZEPPELIN_INTERPRETER_CONNECTION_POOL_SIZE("zeppelin.interpreter.connection.poolsize", 100),
     ZEPPELIN_INTERPRETER_GROUP_DEFAULT("zeppelin.interpreter.group.default", "spark"),
     ZEPPELIN_INTERPRETER_OUTPUT_LIMIT("zeppelin.interpreter.output.limit", 1024 * 100),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java
Patch:
@@ -67,7 +67,9 @@ public InterpreterResult interpret(String st, InterpreterContext context)
       finalProperties.putAll(getProperties());
       Properties newProperties = new Properties();
       newProperties.load(new StringReader(st));
-      finalProperties.putAll(newProperties);
+      for (String key : newProperties.stringPropertyNames()) {
+        finalProperties.put(key.trim(), newProperties.getProperty(key).trim());
+      }
       LOGGER.debug("Properties for InterpreterGroup: {} is {}", interpreterGroupId, finalProperties);
       interpreterSetting.setInterpreterGroupProperties(interpreterGroupId, finalProperties);
       return new InterpreterResult(InterpreterResult.Code.SUCCESS);

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -142,7 +142,7 @@ public InterpreterResult internalInterpret(String st, InterpreterContext context
       }
     } finally {
       sc.clearJobGroup();
-      if (!sparkInterpreter.isScala212()) {
+      if (sparkInterpreter.isScala211()) {
         Thread.currentThread().setContextClassLoader(originalClassLoader);
       }
     }

File: spark/spark-shims/src/main/java/org/apache/zeppelin/spark/SparkShims.java
Patch:
@@ -17,7 +17,8 @@
 
 package org.apache.zeppelin.spark;
 
-import com.google.common.annotations.VisibleForTesting;
+
+import org.apache.zeppelin.shaded.com.google.common.annotations.VisibleForTesting;
 import org.apache.hadoop.util.VersionInfo;
 import org.apache.hadoop.util.VersionUtil;
 import org.apache.zeppelin.interpreter.InterpreterContext;
@@ -162,7 +163,6 @@ protected boolean supportYarn6615(String version) {
         || (VersionUtil.compareVersions(HADOOP_VERSION_3_0_0, version) <= 0);
   }
 
-  @VisibleForTesting
   public static void reset() {
     sparkShims = null;
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -103,7 +103,7 @@ public NotebookService(
   public String getHomeNote(ServiceContext context,
                           ServiceCallback<Note> callback) throws IOException {
     String noteId = notebook.getConf().getString(ZEPPELIN_NOTEBOOK_HOMESCREEN);
-    if (noteId != null) {
+    if (StringUtils.isBlank(noteId)) {
       callback.onSuccess(null, context);
     } else {
       notebook.processNote(noteId,

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -95,9 +95,9 @@ public InterpreterResult internalInterpret(String st, InterpreterContext context
     String curSql = null;
     ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();
     try {
-      if (!sparkInterpreter.isScala212()) {
-        // TODO(zjffdu) scala 2.12 still doesn't work for codegen (ZEPPELIN-4627)
-      Thread.currentThread().setContextClassLoader(sparkInterpreter.getScalaShellClassLoader());
+      if (sparkInterpreter.isScala211()) {
+        // TODO(zjffdu) scala 2.12,2.13 still doesn't work for codegen (ZEPPELIN-4627)
+        Thread.currentThread().setContextClassLoader(sparkInterpreter.getScalaShellClassLoader());
       }
       Method method = sqlContext.getClass().getMethod("sql", String.class);
       for (String sql : sqls) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookSocket.java
Patch:
@@ -17,6 +17,8 @@
 package org.apache.zeppelin.socket;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.zeppelin.utils.ServerUtils;
+
 import java.io.IOException;
 import java.util.Map;
 
@@ -54,6 +56,6 @@ public void setUser(String user) {
 
   @Override
   public String toString() {
-    return String.valueOf(session.getUserProperties().get("javax.websocket.endpoint.remoteAddress"));
+    return ServerUtils.getRemoteAddress(session);
   }
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/SessionConfigurator.java
Patch:
@@ -45,6 +45,6 @@ public void modifyHandshake(ServerEndpointConfig sec, HandshakeRequest request,
 
   @Override
   public <T> T getEndpointInstance(Class<T> endpointClass) throws InstantiationException {
-    return ServiceLocatorFactory.getInstance().find("shared-locator").getService(endpointClass);
+    return ServiceLocatorFactory.getInstance().find(ZeppelinServer.SERVICE_LOCATOR_NAME).getService(endpointClass);
   }
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/recovery/RecoveryTest.java
Patch:
@@ -67,7 +67,7 @@ public void init() throws Exception {
             recoveryDir.getAbsolutePath());
     startUp(RecoveryTest.class.getSimpleName());
 
-    notebook = ServiceLocatorFactory.getInstance().find("shared-locator").getService(Notebook.class);
+    notebook = ServiceLocatorFactory.getInstance().find(ZeppelinServer.SERVICE_LOCATOR_NAME).getService(Notebook.class);
   }
 
   @After

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -326,11 +326,8 @@ protected static void shutDown(final boolean deleteConfDir,
         FileUtils.deleteQuietly(shiroIni);
       }
       LOG.info("Terminating Zeppelin Server...");
-      //ZeppelinServer.jettyWebServer.stop();
       executor.shutdown();
       executor.shutdownNow();
-      //PluginManager.reset();
-      //ZeppelinConfiguration.reset();
 
       long s = System.currentTimeMillis();
       boolean started = true;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -1123,7 +1123,6 @@ public void testRunWithServerRestart() throws Exception {
           new TypeToken<Map<String, Object>>() {}.getType());
       assertEquals("OK", resp.get("status"));
       post2.close();
-      Thread.sleep(60000);
       TestUtils.getInstance(Notebook.class).processNote(note1Id,
         note1 -> {
           Paragraph p1 = note1.getParagraph(0);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/SessionConfigurator.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.zeppelin.server.ZeppelinServer;
 import org.apache.zeppelin.util.WatcherSecurityKey;
 import org.apache.zeppelin.utils.CorsUtils;
+import org.glassfish.hk2.api.ServiceLocatorFactory;
 
 /**
  * This class set headers to websocket sessions and inject hk2 when initiating instances by ServerEndpoint annotation.
@@ -44,6 +45,6 @@ public void modifyHandshake(ServerEndpointConfig sec, HandshakeRequest request,
 
   @Override
   public <T> T getEndpointInstance(Class<T> endpointClass) throws InstantiationException {
-    return ZeppelinServer.sharedServiceLocator.getService(endpointClass);
+    return ServiceLocatorFactory.getInstance().find("shared-locator").getService(endpointClass);
   }
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/utils/TestUtils.java
Patch:
@@ -25,12 +25,12 @@
 public class TestUtils {
   public static <T> T getInstance(Class<T> clazz) {
     checkCalledByTestMethod();
-    return getInstance(ZeppelinServer.sharedServiceLocator, clazz);
+    return getInstance(ServiceLocatorFactory.getInstance().find(ZeppelinServer.SERVICE_LOCATOR_NAME), clazz);
   }
 
   public static void clearInstances() {
     checkCalledByTestMethod();
-    ServiceLocatorFactory.getInstance().destroy("shared-locator");
+    ServiceLocatorFactory.getInstance().destroy(ZeppelinServer.SERVICE_LOCATOR_NAME);
   }
 
   static <T> T getInstance(ServiceLocator serviceLocator, Class<T> clazz) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ZeppelinServerMock.java
Patch:
@@ -145,8 +145,8 @@ protected static void shutDown(final boolean deleteConfDir) throws Exception {
         }
       }
       LOG.info("ZeppelinServerMock shutDown...");
-      ZeppelinServer.jettyWebServer.stop();
       executor.shutdown();
+      executor.shutdownNow();
       System.clearProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName());
       System.clearProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_WAR.getVarName());
       System.clearProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_CONF_DIR.getVarName());
@@ -178,7 +178,6 @@ protected static void shutDown(final boolean deleteConfDir) throws Exception {
       }
       PluginManager.reset();
       ZeppelinConfiguration.reset();
-      ZeppelinServer.reset();
     }
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/recovery/RecoveryTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.zeppelin.server.ZeppelinServer;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.utils.TestUtils;
+import org.glassfish.hk2.api.ServiceLocatorFactory;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -66,7 +67,7 @@ public void init() throws Exception {
             recoveryDir.getAbsolutePath());
     startUp(RecoveryTest.class.getSimpleName());
 
-    notebook = ZeppelinServer.sharedServiceLocator.getService(Notebook.class);
+    notebook = ServiceLocatorFactory.getInstance().find("shared-locator").getService(Notebook.class);
   }
 
   @After

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -118,7 +118,7 @@ public void testGetReloadNote() throws IOException {
       }
     }
   }
-  
+
   @Test
   public void testGetNoteByPath() throws IOException {
     LOG.info("Running testGetNoteByPath");
@@ -1123,7 +1123,7 @@ public void testRunWithServerRestart() throws Exception {
           new TypeToken<Map<String, Object>>() {}.getType());
       assertEquals("OK", resp.get("status"));
       post2.close();
-
+      Thread.sleep(60000);
       TestUtils.getInstance(Notebook.class).processNote(note1Id,
         note1 -> {
           Paragraph p1 = note1.getParagraph(0);

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkRInterpreterTest.java
Patch:
@@ -57,6 +57,7 @@ public void setUp() throws InterpreterException {
     properties.setProperty("zeppelin.R.knitr", "true");
     properties.setProperty("spark.r.backendConnectionTimeout", "10");
     properties.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
+    properties.setProperty("spark.sql.execution.arrow.sparkr.enabled", "false");
 
     InterpreterContext context = getInterpreterContext();
     InterpreterContext.set(context);
@@ -88,7 +89,7 @@ public void testSparkRInterpreter() throws InterpreterException, InterruptedExce
 
     result = sparkRInterpreter.interpret("df <- as.DataFrame(faithful)\nhead(df)", getInterpreterContext());
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
-    assertTrue(result.message().get(0).getData().contains("eruptions waiting"));
+    assertTrue(result.toString(), result.message().get(0).getData().contains("eruptions waiting"));
     // spark job url is sent
     verify(mockRemoteIntpEventClient, atLeastOnce()).onParaInfosReceived(any(Map.class));
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -95,15 +95,15 @@ private void testInterpreterBasics() throws IOException, InterpreterException {
 
     InterpreterContext context = new InterpreterContext.Builder().setNoteId("note1").setParagraphId("paragraph_1").build();
     InterpreterResult interpreterResult = flinkInterpreter.interpret("1+1", context);
-    assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());
+    assertEquals(interpreterResult.toString(), InterpreterResult.Code.SUCCESS, interpreterResult.code());
     assertTrue(interpreterResult.message().get(0).getData().contains("2"));
 
     interpreterResult = flinkInterpreter.interpret("val data = benv.fromElements(1, 2, 3)\ndata.collect()", context);
-    assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());
+    assertEquals(interpreterResult.toString(), InterpreterResult.Code.SUCCESS, interpreterResult.code());
     assertTrue(interpreterResult.message().get(0).getData().contains("1, 2, 3"));
 
     interpreterResult = flinkInterpreter.interpret("val data = senv.fromElements(1, 2, 3)\ndata.print()", context);
-    assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());
+    assertEquals(interpreterResult.toString(), InterpreterResult.Code.SUCCESS, interpreterResult.code());
 
     // check spark weburl in zeppelin-server side
     InterpreterSetting flinkInterpreterSetting = interpreterSettingManager.getByName("flink");

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/MiniHadoopCluster.java
Patch:
@@ -67,7 +67,9 @@ public void start() throws IOException {
     YarnConfiguration baseConfig = new YarnConfiguration(hadoopConf);
     baseConfig.set("yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage", "98");
     baseConfig.set("yarn.scheduler.capacity.maximum-am-resource-percent", "1.0");
-
+    // the following 2 config are required by hadoop3
+    baseConfig.set("yarn.scheduler.capacity.root.queues", "default");
+    baseConfig.set("yarn.scheduler.capacity.root.default.capacity", "100");
     this.yarnCluster = new MiniYARNCluster(getClass().getName(), 2,
         1, 1);
     yarnCluster.init(baseConfig);

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest24.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 
 @RunWith(value = Parameterized.class)
-public class SparkIntegrationTest24 extends SparkIntegrationTest{
+public class SparkIntegrationTest24 extends SparkIntegrationTest {
 
   public SparkIntegrationTest24(String sparkVersion, String hadoopVersion) {
     super(sparkVersion, hadoopVersion);
@@ -38,7 +38,7 @@ public SparkIntegrationTest24(String sparkVersion, String hadoopVersion) {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.4.7", "2.7"}
+            {"2.4.8", "2.7"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterFactory;
-import org.apache.zeppelin.interpreter.InterpreterNotFoundException;
 import org.apache.zeppelin.interpreter.InterpreterOption;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterSetting;

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/SessionManagerService.java
Patch:
@@ -111,8 +111,8 @@ public synchronized SessionInfo createSession(String interpreter) throws Excepti
       throw new Exception("Unable to generate session id");
     }
 
-    Note sessionNote = notebook.createNote(buildNotePath(interpreter, sessionId), AuthenticationInfo.ANONYMOUS);
-    SessionInfo sessionInfo = new SessionInfo(sessionId, sessionNote.getId(), interpreter);
+    String sessionNoteId = notebook.createNote(buildNotePath(interpreter, sessionId), AuthenticationInfo.ANONYMOUS);
+    SessionInfo sessionInfo = new SessionInfo(sessionId, sessionNoteId, interpreter);
     sessions.put(sessionId, sessionInfo);
     return sessionInfo;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/scheduler/SchedulerService.java
Patch:
@@ -17,9 +17,10 @@
 
 package org.apache.zeppelin.notebook.scheduler;
 
+import java.io.IOException;
 import java.util.Set;
 
 public interface SchedulerService {
-  boolean refreshCron(String noteId);
+  boolean refreshCron(String noteId) throws IOException;
   Set<?> getJobs();
 }

File: zeppelin-plugins/notebookrepo/mongo/src/test/java/org/apache/zeppelin/notebook/repo/MongoNotebookRepoTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_MONGO_URI;
 import static org.junit.Assert.assertEquals;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -27,8 +28,7 @@
 import java.util.Map;
 import de.flapdoodle.embed.mongo.MongodExecutable;
 import de.flapdoodle.embed.mongo.MongodStarter;
-import de.flapdoodle.embed.mongo.config.IMongodConfig;
-import de.flapdoodle.embed.mongo.config.MongodConfigBuilder;
+import de.flapdoodle.embed.mongo.config.MongodConfig;
 import de.flapdoodle.embed.mongo.config.Net;
 import de.flapdoodle.embed.mongo.distribution.Version;
 import de.flapdoodle.embed.process.runtime.Network;
@@ -53,7 +53,7 @@ public void setUp() throws IOException {
     int port = socket.getLocalPort();
     socket.close();
 
-    IMongodConfig mongodConfig = new MongodConfigBuilder()
+    MongodConfig mongodConfig = MongodConfig.builder()
         .version(Version.Main.PRODUCTION)
         .net(new Net(bindIp, port, Network.localhostIsIPv6()))
         .build();

File: rlang/src/main/java/org/apache/zeppelin/r/RInterpreter.java
Patch:
@@ -131,7 +131,7 @@ public InterpreterResult internalInterpret(String lines, InterpreterContext inte
       // render output with knitr
       if (rbackendDead.get()) {
         return new InterpreterResult(InterpreterResult.Code.ERROR,
-            "sparkR backend is dead, please try to increase spark.r.backendConnectionTimeout");
+            "sparkR backend is dead");
       }
       if (useKnitr) {
         zeppelinR.setInterpreterOutput(null);

File: file/src/main/java/org/apache/zeppelin/file/HDFSFileInterpreter.java
Patch:
@@ -66,9 +66,9 @@ public HDFSFileInterpreter(Properties property){
    */
   public class OneFileStatus {
     public long accessTime;
-    public int blockSize;
+    public long blockSize;
     public int childrenNum;
-    public int fileId;
+    public long fileId;
     public String group;
     public long length;
     public long modificationTime;

File: file/src/test/java/org/apache/zeppelin/file/HDFSFileInterpreterTest.java
Patch:
@@ -141,7 +141,7 @@ public void test() {
 class MockFileSystem {
   HashMap<String, String> mfs = new HashMap<>();
   static final String FILE_STATUSES =
-          "{\"accessTime\":0,\"blockSize\":0,\"childrenNum\":1,\"fileId\":16389," +
+          "{\"accessTime\":0,\"blockSize\":0,\"childrenNum\":1,\"fileId\":4947954640," +
                   "\"group\":\"hadoop\",\"length\":0,\"modificationTime\":1438548219672," +
                   "\"owner\":\"yarn\",\"pathSuffix\":\"app-logs\",\"permission\":\"777\"," +
                   "\"replication\":0,\"storagePolicy\":0,\"type\":\"DIRECTORY\"},\n" +
@@ -184,7 +184,7 @@ void addListStatusData() {
     );
     mfs.put("/tmp?op=LISTSTATUS",
         "{\"FileStatuses\":{\"FileStatus\":[\n" +
-            "        {\"accessTime\":1441253097489,\"blockSize\":134217728,\"childrenNum\":0," +
+            "        {\"accessTime\":1441253097489,\"blockSize\":2147483648,\"childrenNum\":0," +
                 "\"fileId\":16400,\"group\":\"hdfs\",\"length\":1645," +
                 "\"modificationTime\":1441253097517,\"owner\":\"hdfs\"," +
                 "\"pathSuffix\":\"ida8c06540_date040315\",\"permission\":\"755\"," +

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookSocket.java
Patch:
@@ -40,7 +40,7 @@ public String getHeader(String key) {
     return String.valueOf(headers.get(key));
   }
 
-  public synchronized void send(String serializeMessage) throws IOException {
+  public void send(String serializeMessage) throws IOException {
     session.getBasicRemote().sendText(serializeMessage);
   }
 

File: zeppelin-plugins/notebookrepo/filesystem/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java
Patch:
@@ -27,6 +27,7 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -128,7 +129,7 @@ public void close() {
   @Override
   public List<NotebookRepoSettingsInfo> getSettings(AuthenticationInfo subject) {
     LOGGER.warn("getSettings is not implemented for FileSystemNotebookRepo");
-    return null;
+    return Collections.emptyList();
   }
 
   @Override

File: zeppelin-plugins/notebookrepo/filesystem/src/main/java/org/apache/zeppelin/notebook/repo/OldFileSystemNotebookRepo.java
Patch:
@@ -11,6 +11,7 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
@@ -81,7 +82,7 @@ public void close() {
   @Override
   public List<NotebookRepoSettingsInfo> getSettings(AuthenticationInfo subject) {
     LOGGER.warn("getSettings is not implemented for HdfsNotebookRepo");
-    return null;
+    return Collections.emptyList();
   }
 
   @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/InMemoryNotebookRepo.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.zeppelin.user.AuthenticationInfo;
 
 import java.io.IOException;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -107,7 +108,7 @@ public void close() {
 
   @Override
   public List<NotebookRepoSettingsInfo> getSettings(AuthenticationInfo subject) {
-    return null;
+    return Collections.emptyList();
   }
 
   @Override

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -55,6 +55,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
@@ -184,7 +185,7 @@ public void close() {
 
     @Override
     public List<NotebookRepoSettingsInfo> getSettings(AuthenticationInfo subject) {
-      return null;
+      return Collections.emptyList();
     }
 
     @Override
@@ -265,7 +266,7 @@ public void close() {
 
     @Override
     public List<NotebookRepoSettingsInfo> getSettings(AuthenticationInfo subject) {
-      return null;
+      return Collections.emptyList();
     }
 
     @Override

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/JobManager.java
Patch:
@@ -268,6 +268,7 @@ public void run() {
                 if (!StringUtils.isBlank(checkpointPath) && !checkpointPath.equals(latestCheckpointPath)) {
                   Map<String, String> config = new HashMap<>();
                   config.put(LATEST_CHECKPOINT_PATH, checkpointPath);
+                  LOGGER.info("Update latest checkpoint path: {}", checkpointPath);
                   context.getIntpEventClient().updateParagraphConfig(
                           context.getNoteId(), context.getParagraphId(), config);
                   latestCheckpointPath = checkpointPath;

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZSessionIntegrationTest.java
Patch:
@@ -69,7 +69,7 @@ public static void setUp() throws Exception {
 
     notebook = TestUtils.getInstance(Notebook.class);
     sparkHome = DownloadUtils.downloadSpark("2.4.4", "2.7");
-    flinkHome = DownloadUtils.downloadFlink("1.10.1", "2.11");
+    flinkHome = DownloadUtils.downloadFlink("1.12.4", "2.11");
   }
 
   @AfterClass

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/RemoteInterpreterEventServer.java
Patch:
@@ -556,6 +556,7 @@ public void updateParagraphConfig(String noteId,
                                     Map<String, String> config)
           throws InterpreterRPCException, TException {
     try {
+      LOGGER.info("Update paragraph config");
       Note note = interpreterSettingManager.getNotebook().getNote(noteId);
       note.getParagraph(paragraphId).updateConfig(config);
       interpreterSettingManager.getNotebook().saveNote(note, AuthenticationInfo.ANONYMOUS);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncherTest.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() {
       System.clearProperty(confVar.getVarName());
     }
 
-    sparkHome = DownloadUtils.downloadSpark("2.4.4", "2.7");
+    sparkHome = DownloadUtils.downloadSpark("2.4.7", "2.7");
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(),
             new File("..").getAbsolutePath());
 

File: spark/spark-shims/src/main/java/org/apache/zeppelin/spark/SparkShims.java
Patch:
@@ -63,9 +63,6 @@ private static SparkShims loadShims(int sparkMajorVersion, Properties properties
     } else if (sparkMajorVersion == 2) {
       LOGGER.info("Initializing shims for Spark 2.x");
       sparkShimsClass = Class.forName("org.apache.zeppelin.spark.Spark2Shims");
-    } else if (sparkMajorVersion == 1){
-      LOGGER.info("Initializing shims for Spark 1.x");
-      sparkShimsClass = Class.forName("org.apache.zeppelin.spark.Spark1Shims");
     } else {
       throw new Exception("Spark major version: '" + sparkMajorVersion + "' is not supported yet");
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookSocket.java
Patch:
@@ -17,8 +17,6 @@
 package org.apache.zeppelin.socket;
 
 import org.apache.commons.lang3.StringUtils;
-import org.eclipse.jetty.websocket.api.WebSocketAdapter;
-
 import java.io.IOException;
 import java.util.Map;
 
@@ -27,7 +25,7 @@
 /**
  * Notebook websocket.
  */
-public class NotebookSocket extends WebSocketAdapter {
+public class NotebookSocket {
   private Session session;
   private Map<String, Object> headers;
   private String user;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/AbstractDependencyResolver.java
Patch:
@@ -61,14 +61,14 @@ public AbstractDependencyResolver(String localRepoPath) {
       }
     }
     session = Booter.newRepositorySystemSession(system, localRepoPath);
-    repos.add(Booter.newCentralRepository(proxy)); // add maven central
+    repos.addAll(Booter.newCentralRepositorys(proxy)); // add maven central
     repos.add(Booter.newLocalRepository());
   }
 
   public AbstractDependencyResolver(String localRepoPath, Proxy proxy) {
     this.proxy = proxy;
     session = Booter.newRepositorySystemSession(system, localRepoPath);
-    repos.add(Booter.newCentralRepository(proxy)); // add maven central
+    repos.addAll(Booter.newCentralRepositorys(proxy)); // add maven central
     repos.add(Booter.newLocalRepository());
   }
 

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -290,6 +290,7 @@ Properties getTemplateBindings(String userName) {
     Properties k8sProperties = new Properties();
 
     // k8s template properties
+    k8sProperties.put("zeppelin.k8s.interpreter.user", String.valueOf(userName).trim());
     k8sProperties.put("zeppelin.k8s.interpreter.namespace", getInterpreterNamespace());
     k8sProperties.put("zeppelin.k8s.interpreter.pod.name", getPodName());
     k8sProperties.put("zeppelin.k8s.interpreter.serviceAccount", getServiceAccount());
@@ -310,7 +311,7 @@ Properties getTemplateBindings(String userName) {
       k8sProperties.put("zeppelin.k8s.server.uid", ownerUID());
       k8sProperties.put("zeppelin.k8s.server.pod.name", ownerName());
     }
-    
+
     Map<String, String> k8sEnv = new HashMap<>(getEnv());
     // environment variables
     k8sEnv.put(ENV_SERVICE_DOMAIN, getEnv().getOrDefault(ENV_SERVICE_DOMAIN, System.getenv(ENV_SERVICE_DOMAIN) == null ? "local.zeppelin-project.org" : System.getenv(ENV_SERVICE_DOMAIN)));
@@ -350,7 +351,7 @@ Properties getTemplateBindings(String userName) {
               getPodName(),
               k8sEnv.get(ENV_SERVICE_DOMAIN)
           ));
-      
+
       // Resources of Interpreter Pod
       if (properties.containsKey(SPARK_DRIVER_MEMORY)) {
         String memory;

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcessTest.java
Patch:
@@ -123,6 +123,7 @@ public void testGetTemplateBindings() {
     assertEquals("12321:12321" , p.get("zeppelin.k8s.interpreter.rpc.portRange"));
     assertEquals("zeppelin.server.service" , p.get("zeppelin.k8s.server.rpc.service"));
     assertEquals(12320 , p.get("zeppelin.k8s.server.rpc.portRange"));
+    assertEquals("null", p.get("zeppelin.k8s.interpreter.user"));
     assertEquals("v1", p.get("my.key1"));
     assertEquals("V1", envs.get("MY_ENV1"));
 
@@ -218,6 +219,7 @@ public void testGetTemplateBindingsForSparkWithProxyUser() {
     // then
     assertEquals("spark-container:1.0", p.get("zeppelin.k8s.spark.container.image"));
     assertEquals(String.format("//4040-%s.%s", intp.getPodName(), "mydomain"), p.get("zeppelin.spark.uiWebUrl"));
+    assertEquals("mytestUser", p.get("zeppelin.k8s.interpreter.user"));
 
     envs = (HashMap<String, String>) p.get("zeppelin.k8s.envs");
     assertTrue( envs.containsKey("SPARK_HOME"));

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/ApplicationModeExecutionEnvironment.java
Patch:
@@ -37,15 +37,15 @@
 
 
 /**
- * ExecutionEnvironment used for yarn application mode.
+ * ExecutionEnvironment used for application mode.
  * Need to add jars of scala shell before submitting jobs.
  */
-public class YarnApplicationExecutionEnvironment extends ExecutionEnvironment {
+public class ApplicationModeExecutionEnvironment extends ExecutionEnvironment {
 
   private FlinkILoop flinkILoop;
   private FlinkScalaInterpreter flinkScalaInterpreter;
 
-  public YarnApplicationExecutionEnvironment(PipelineExecutorServiceLoader executorServiceLoader,
+  public ApplicationModeExecutionEnvironment(PipelineExecutorServiceLoader executorServiceLoader,
                                              Configuration configuration,
                                              ClassLoader userClassloader,
                                              FlinkILoop flinkILoop,

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -153,7 +153,7 @@ public void testYarnMode() throws IOException, InterpreterException, YarnExcepti
     flinkInterpreterSetting.setProperty("FLINK_HOME", flinkHome);
     flinkInterpreterSetting.setProperty("PATH", hadoopHome + "/bin:" + System.getenv("PATH"));
     flinkInterpreterSetting.setProperty("ZEPPELIN_CONF_DIR", zeppelin.getZeppelinConfDir().getAbsolutePath());
-    flinkInterpreterSetting.setProperty("flink.execution.mode", "YARN");
+    flinkInterpreterSetting.setProperty("flink.execution.mode", "yarn");
     flinkInterpreterSetting.setProperty("zeppelin.flink.run.asLoginUser", "false");
 
     testInterpreterBasics();

File: zeppelin-plugins/launcher/yarn/src/main/java/org/apache/zeppelin/interpreter/launcher/YarnRemoteInterpreterProcess.java
Patch:
@@ -372,7 +372,7 @@ private String removeFragment(String path) {
    * classpath specified through the Hadoop and Yarn configurations.
    */
   private void populateHadoopClasspath(Map<String, String> envs) {
-    List<String> yarnClassPath = Arrays.asList(getYarnAppClasspath());
+    List<String> yarnClassPath = new ArrayList(Arrays.asList(getYarnAppClasspath()));
     List<String> mrClassPath = Arrays.asList(getMRAppClasspath());
     yarnClassPath.addAll(mrClassPath);
     if (LOGGER.isInfoEnabled()) {

File: zeppelin-plugins/notebookrepo/gcs/src/main/java/org/apache/zeppelin/notebook/repo/GCSNotebookRepo.java
Patch:
@@ -111,7 +111,7 @@ public void init(ZeppelinConfiguration zConf) throws IOException {
       this.basePath = Optional.empty();
     }
 
-    // Notes are stored at gs://bucketName/basePath/<note-id>/note.json
+    // Notes are stored at gs://bucketName/basePath/<note-name>_<note-id>.zpln
     if (basePath.isPresent()) {
       this.notePathPattern = Pattern.compile(
           "^" + Pattern.quote(basePath.get() + "/") + "(.+\\.zpln)$");

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterPandasSqlTest.java
Patch:
@@ -54,7 +54,7 @@
  * <p>
  * To run manually on such environment, use:
  * <code>
- * mvn -Dpython.test.exclude='' test -pl python -am
+ * ./mvnw -Dpython.test.exclude='' test -pl python -am
  * </code>
  */
 @RunWith(value = Parameterized.class)

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelClient.java
Patch:
@@ -71,7 +71,7 @@ public class JupyterKernelClient {
    * Construct client for accessing RouteGuide server at {@code host:port}.
    */
   public JupyterKernelClient(String host, int port, String kernel) {
-    this(ManagedChannelBuilder.forAddress(host, port).usePlaintext(true), new Properties(),
+    this(ManagedChannelBuilder.forAddress(host, port).usePlaintext(), new Properties(),
             kernel);
   }
 

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelInterpreter.java
Patch:
@@ -137,7 +137,7 @@ public void open() throws InterpreterException {
               32 * 1024 * 1024 + ""));
 
       jupyterKernelClient = new JupyterKernelClient(ManagedChannelBuilder.forAddress("127.0.0.1",
-              kernelPort).usePlaintext(true).maxInboundMessageSize(messageSize),
+              kernelPort).usePlaintext().maxInboundMessageSize(messageSize),
               getProperties(), kernel);
       launchJupyterKernel(kernelPort);
     } catch (Exception e) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -1060,7 +1060,6 @@ public enum ConfVars {
     ZEPPELIN_DOCKER_CONTAINER_IMAGE("zeppelin.docker.container.image", "apache/zeppelin:" + Util.getVersion()),
 
     ZEPPELIN_METRIC_ENABLE_PROMETHEUS("zeppelin.metric.enable.prometheus", false),
-    ZEPPELINHUB_USER_KEY("zeppelinhub.user.key",""),
 
     ZEPPELIN_IMPERSONATE_SPARK_PROXY_USER("zeppelin.impersonate.spark.proxy.user", true),
     ZEPPELIN_NOTEBOOK_GIT_REMOTE_URL("zeppelin.notebook.git.remote.url", ""),

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/ConnectionManager.java
Patch:
@@ -451,8 +451,8 @@ public void switchConnectionToWatcher(NotebookSocket conn) {
     removeUserConnection(conn.getUser(), conn);
   }
 
-  private boolean isSessionAllowedToSwitchToWatcher(NotebookSocket session) {
-    String watcherSecurityKey = session.getRequest().getHeader(WatcherSecurityKey.HTTP_HEADER);
+  private boolean isSessionAllowedToSwitchToWatcher(NotebookSocket notebookSocket) {
+    String watcherSecurityKey = notebookSocket.getHeader(WatcherSecurityKey.HTTP_HEADER);
     return !(StringUtils.isBlank(watcherSecurityKey) || !watcherSecurityKey
         .equals(WatcherSecurityKey.getKey()));
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/utils/CorsUtils.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 
 public class CorsUtils {
+  public static final String HEADER_ORIGIN = "Origin";
   public static Boolean isValidOrigin(String sourceHost, ZeppelinConfiguration conf)
       throws UnknownHostException, URISyntaxException {
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -109,12 +109,12 @@ public void setUp() {
   public void checkOrigin() throws UnknownHostException {
     String origin = "http://" + InetAddress.getLocalHost().getHostName() + ":8080";
     assertTrue("Origin " + origin + " is not allowed. Please check your hostname.",
-          notebookServer.checkOrigin(mockRequest, origin));
+          notebookServer.checkOrigin(origin));
   }
 
   @Test
   public void checkInvalidOrigin(){
-    assertFalse(notebookServer.checkOrigin(mockRequest, "http://evillocalhost:8080"));
+    assertFalse(notebookServer.checkOrigin("http://evillocalhost:8080"));
   }
 
   @Test
@@ -790,7 +790,6 @@ public void testNoteRevision() throws IOException {
 
   private NotebookSocket createWebSocket() {
     NotebookSocket sock = mock(NotebookSocket.class);
-    when(sock.getRequest()).thenReturn(mockRequest);
     return sock;
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/AuthorizationService.java
Patch:
@@ -57,6 +57,7 @@ public class AuthorizationService implements ClusterEventListener {
 
   @Inject
   public AuthorizationService(NoteManager noteManager, ZeppelinConfiguration conf) {
+    LOGGER.info("Injected AuthorizationService: {}", this);
     this.conf = conf;
     try {
       this.configStorage = ConfigStorage.getInstance(conf);

File: ksql/src/test/java/org/apache/zeppelin/ksql/KSQLInterpreterTest.java
Patch:
@@ -101,6 +101,7 @@ public void shouldRenderKSQLSelectAsTable() throws InterpreterException,
         "value 1\n" +
         "value 2\n" +
         "value 3\n";
+    context.out.flush();
     assertEquals(1, context.out.toInterpreterResultMessage().size());
     assertEquals(expected, context.out.toInterpreterResultMessage().get(0).toString());
     assertEquals(InterpreterResult.Type.TABLE, context.out
@@ -147,6 +148,7 @@ public void shouldRenderKSQLNonSelectAsTable() throws InterpreterException,
     // then
     List<Map<String, Object>> expected = Arrays.asList(row1, row2);
 
+    context.out.flush();
     String[] lines = context.out.toInterpreterResultMessage()
         .get(0).toString()
         .replace("%table ", "")

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -203,7 +203,7 @@ public void cancel(InterpreterContext context) {
 
   @Override
   public FormType getFormType() {
-    return FormType.SIMPLE;
+    return FormType.NATIVE;
   }
 
   @Override

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -466,7 +466,7 @@ public void testRunNoteWithParams() throws IOException, InterruptedException {
       Paragraph p1 = note1.addNewParagraph(AuthenticationInfo.ANONYMOUS);
       Paragraph p2 = note1.addNewParagraph(AuthenticationInfo.ANONYMOUS);
       p1.setText("%python name = z.input('name', 'world')\nprint(name)");
-      p2.setText("%sh echo '${name=world}'");
+      p2.setText("%sh(form=simple) echo '${name=world}'");
 
       Map<String, Object> paramsMap = new HashMap<>();
       paramsMap.put("name", "zeppelin");

File: zeppelin-jupyter/src/test/java/org/apache/zeppelin/jupyter/nbformat/JupyterUtilTest.java
Patch:
@@ -96,7 +96,7 @@ public void getNoteAndVerifyData() throws Exception {
             "    <div class=\"col-sm-1\"><img src=\"https://knowledgeanyhow.org/static/images/favicon_32x32.png\" style=\"margin-top: -6px\"/></div>\n" +
             "    <div class=\"col-sm-11\">This notebook was created using <a href=\"https://knowledgeanyhow.org\">IBM Knowledge Anyhow Workbench</a>.  To learn more, visit us at <a href=\"https://knowledgeanyhow.org\">https://knowledgeanyhow.org</a>.</div>\n" +
             "    </div>\n" +
-            "</div>\n\n" +
+            "</div>\n" +
             "</div>" , results.get(0).getData());
     assertEquals("HTML", results.get(0).getType());
   }

File: zeppelin-jupyter/src/main/java/org/apache/zeppelin/jupyter/JupyterUtil.java
Patch:
@@ -43,8 +43,8 @@
 import org.apache.zeppelin.jupyter.zformat.Paragraph;
 import org.apache.zeppelin.jupyter.zformat.Result;
 import org.apache.zeppelin.jupyter.zformat.TypeData;
+import org.apache.zeppelin.markdown.FlexmarkParser;
 import org.apache.zeppelin.markdown.MarkdownParser;
-import org.apache.zeppelin.markdown.PegdownParser;
 
 import java.io.BufferedReader;
 import java.io.FileReader;
@@ -78,7 +78,7 @@ public JupyterUtil() {
         .registerSubtype(ExecuteResult.class, "execute_result")
         .registerSubtype(DisplayData.class, "display_data").registerSubtype(Stream.class, "stream")
         .registerSubtype(Error.class, "error");
-    this.markdownProcessor = new PegdownParser();
+    this.markdownProcessor = new FlexmarkParser();
   }
 
   public Nbformat getNbformat(Reader in) {

File: zeppelin-jupyter/src/test/java/org/apache/zeppelin/jupyter/nbformat/JupyterUtilTest.java
Patch:
@@ -96,7 +96,7 @@ public void getNoteAndVerifyData() throws Exception {
             "    <div class=\"col-sm-1\"><img src=\"https://knowledgeanyhow.org/static/images/favicon_32x32.png\" style=\"margin-top: -6px\"/></div>\n" +
             "    <div class=\"col-sm-11\">This notebook was created using <a href=\"https://knowledgeanyhow.org\">IBM Knowledge Anyhow Workbench</a>.  To learn more, visit us at <a href=\"https://knowledgeanyhow.org\">https://knowledgeanyhow.org</a>.</div>\n" +
             "    </div>\n" +
-            "</div>\n" +
+            "</div>\n\n" +
             "</div>" , results.get(0).getData());
     assertEquals("HTML", results.get(0).getType());
   }

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -197,7 +197,8 @@ public void testAngularDisplay() throws Exception {
     }
   }
 
-  @Test
+  //It is a flaky test, disable it temporary, should fix it later. ZEPPELIN-5528
+  //@Test
   public void testSparkInterpreterDependencyLoading() throws Exception {
     try {
       // navigate to interpreter page

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -27,6 +27,7 @@
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.time.Instant;
+import java.time.ZoneId;
 import java.time.format.DateTimeFormatter;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -78,7 +79,7 @@ public class NotebookService {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(NotebookService.class);
   private static final DateTimeFormatter TRASH_CONFLICT_TIMESTAMP_FORMATTER =
-          DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
+          DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss").withZone(ZoneId.systemDefault());
 
   private final ZeppelinConfiguration zConf;
   private final Notebook notebook;

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/FlinkSqlInterpreter.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.apache.zeppelin.flink;
 
-import com.google.common.collect.Lists;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.exception.ExceptionUtils;
@@ -43,6 +42,7 @@
 import javax.annotation.Nullable;
 import java.io.FileInputStream;
 import java.io.IOException;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -430,7 +430,7 @@ private void callShowDatabases(InterpreterContext context) throws IOException {
 
   private void callShowTables(InterpreterContext context) throws IOException {
     List<String> tables =
-            Lists.newArrayList(this.tbenv.listTables()).stream()
+            Arrays.asList(this.tbenv.listTables()).stream()
                     .filter(tbl -> !tbl.startsWith("UnnamedTable")).collect(Collectors.toList());
     context.out.write(
             "%table table\n" + StringUtils.join(tables, "\n") + "\n");

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/hive/BeelineInPlaceUpdateStream.java
Patch:
@@ -61,7 +61,7 @@ public void update(TProgressUpdateResp response) {
         GetOperationStatus
       */
       lastUpdateTimestamp = System.currentTimeMillis();
-      LOGGER.info("update progress: " + response.getProgressedPercentage());
+      LOGGER.info("update progress: {}", response.getProgressedPercentage());
       inPlaceUpdate.render(new ProgressMonitorWrapper(response));
     }
   }

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterPandasSqlTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.zeppelin.python;
 
-import com.google.common.collect.Lists;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -107,7 +106,8 @@ public void setUp() throws Exception {
     pandasSqlInterpreter.setInterpreterGroup(intpGroup);
 
     List<Interpreter> interpreters =
-            Lists.newArrayList(pythonInterpreter, ipythonInterpreter, pandasSqlInterpreter);
+            Arrays.asList(pythonInterpreter, ipythonInterpreter, pandasSqlInterpreter);
+
 
     intpGroup.put("session_1", interpreters);
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/JdbcIntegrationTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.zeppelin.integration;
 
-import com.google.common.collect.Lists;
 import org.apache.zeppelin.dep.Dependency;
 import org.apache.zeppelin.interpreter.ExecutionContext;
 import org.apache.zeppelin.interpreter.Interpreter;
@@ -33,6 +32,7 @@
 import org.junit.Test;
 
 import java.io.IOException;
+import java.util.Arrays;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
@@ -68,7 +68,7 @@ public void testMySql() throws InterpreterException, InterruptedException {
     interpreterSetting.setProperty("default.password", "root");
 
     Dependency dependency = new Dependency("mysql:mysql-connector-java:5.1.46");
-    interpreterSetting.setDependencies(Lists.newArrayList(dependency));
+    interpreterSetting.setDependencies(Arrays.asList(dependency));
     interpreterSettingManager.restart(interpreterSetting.getId());
     interpreterSetting.waitForReady(60 * 1000);
     Interpreter jdbcInterpreter = interpreterFactory.getInterpreter("jdbc", new ExecutionContext("user1", "note1", "test"));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/user/AuthenticationInfo.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.List;
 import java.util.Set;
 
-import com.google.common.collect.Sets;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.common.JsonSerializable;
 import org.slf4j.Logger;
@@ -43,7 +42,7 @@ public class AuthenticationInfo implements JsonSerializable {
   Set<String> roles;
   String ticket;
   UserCredentials userCredentials;
-  public static final AuthenticationInfo ANONYMOUS = new AuthenticationInfo("anonymous", Sets.newHashSet(),
+  public static final AuthenticationInfo ANONYMOUS = new AuthenticationInfo("anonymous", new HashSet<>(),
       "anonymous");
 
   public AuthenticationInfo() {}

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/AbstractRestApi.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.zeppelin.rest;
 
-import com.google.common.collect.Sets;
 import java.io.IOException;
+import java.util.HashSet;
 import java.util.Set;
 import javax.ws.rs.WebApplicationException;
 
@@ -37,7 +37,7 @@ protected AbstractRestApi(AuthenticationService authenticationService) {
 
   protected ServiceContext getServiceContext() {
     AuthenticationInfo authInfo = new AuthenticationInfo(authenticationService.getPrincipal());
-    Set<String> userAndRoles = Sets.newHashSet();
+    Set<String> userAndRoles = new HashSet<>();
     userAndRoles.add(authenticationService.getPrincipal());
     userAndRoles.addAll(authenticationService.getAssociatedRoles());
     return new ServiceContext(authInfo, userAndRoles);

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRepoRestApi.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.rest;
 
 import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Sets;
 import com.google.gson.JsonSyntaxException;
 
 import javax.inject.Inject;
@@ -30,6 +29,7 @@
 
 import java.io.IOException;
 import java.util.Collections;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
 
@@ -101,7 +101,7 @@ public Response refreshRepo(){
 
   private ServiceContext getServiceContext() {
     AuthenticationInfo authInfo = new AuthenticationInfo(authenticationService.getPrincipal());
-    Set<String> userAndRoles = Sets.newHashSet();
+    Set<String> userAndRoles = new HashSet<>();
     userAndRoles.add(authenticationService.getPrincipal());
     userAndRoles.addAll(authenticationService.getAssociatedRoles());
     return new ServiceContext(authInfo, userAndRoles);

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/InterpreterService.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.zeppelin.service;
 
-import com.google.common.collect.Lists;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -74,7 +74,7 @@ public void installInterpreter(
     final DependencyResolver dependencyResolver = new DependencyResolver(localRepoPath);
 
     // TODO(jl): Make a rule between an interpreter name and an installation directory
-    List<String> possibleInterpreterDirectories = Lists.newArrayList();
+    List<String> possibleInterpreterDirectories = new ArrayList<>();
     possibleInterpreterDirectories.add(interpreterName);
     if (interpreterName.startsWith(ZEPPELIN_ARTIFACT_PREFIX)) {
       possibleInterpreterDirectories.add(interpreterName.replace(ZEPPELIN_ARTIFACT_PREFIX, ""));

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -23,7 +23,6 @@
 import static org.apache.zeppelin.interpreter.InterpreterResult.Code.ERROR;
 import static org.apache.zeppelin.scheduler.Job.Status.ABORT;
 
-import com.google.common.base.Strings;
 import java.io.IOException;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
@@ -1166,8 +1165,8 @@ public void spell(String noteId,
   private void addNewParagraphIfLastParagraphIsExecuted(Note note, Paragraph p) {
     // if it's the last paragraph and not empty, let's add a new one
     boolean isTheLastParagraph = note.isLastParagraph(p.getId());
-    if (!(Strings.isNullOrEmpty(p.getText()) ||
-        Strings.isNullOrEmpty(p.getScriptText())) &&
+    if (!(StringUtils.isEmpty(p.getText()) ||
+      StringUtils.isEmpty(p.getScriptText())) &&
         isTheLastParagraph) {
       note.addNewParagraph(p.getAuthenticationInfo());
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/ShiroAuthenticationService.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.service;
 
-import com.google.common.collect.Lists;
 import java.security.Principal;
 import java.sql.Connection;
 import java.sql.PreparedStatement;
@@ -438,7 +437,7 @@ private List<String> getUserList(JdbcRealm obj) {
       userquery = String.format("SELECT %s FROM %s", username, tablename);
     } catch (IllegalAccessException e) {
       LOGGER.error("Error while accessing dataSource for JDBC Realm", e);
-      return Lists.newArrayList();
+      return new ArrayList<>();
     }
 
     try {

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterEventTest.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.cluster;
 
-import com.google.common.collect.Sets;
 import com.google.gson.Gson;
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
@@ -440,7 +439,7 @@ public void testClusterAuthEvent() throws IOException {
       Thread.sleep(1000);
       checkClusterAuthEventListener();
 
-      Set<String> roles = Sets.newHashSet("admin");
+      Set<String> roles = new HashSet<>(Arrays.asList("admin"));
       // set admin roles for both user1 and user2
       authorizationService.setRoles(user2Id, roles);
       // wait cluster sync event

File: zeppelin-server/src/test/java/org/apache/zeppelin/recovery/RecoveryTest.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.recovery;
 
-import com.google.common.io.Files;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import org.apache.commons.io.FileUtils;
@@ -42,6 +41,7 @@
 
 import java.io.File;
 import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.Map;
 
 import static org.junit.Assert.assertEquals;
@@ -61,7 +61,7 @@ public class RecoveryTest extends AbstractTestRestApi {
   public void init() throws Exception {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_RECOVERY_STORAGE_CLASS.getVarName(),
             FileSystemRecoveryStorage.class.getName());
-    recoveryDir = Files.createTempDir();
+    recoveryDir = Files.createTempDirectory("recovery").toFile();
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_RECOVERY_DIR.getVarName(),
             recoveryDir.getAbsolutePath());
     startUp(RecoveryTest.class.getSimpleName());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.zeppelin.notebook.repo;
 
-import com.google.common.collect.Lists;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.apache.zeppelin.notebook.Note;
@@ -148,7 +147,7 @@ public void convertNoteFiles(ZeppelinConfiguration conf, boolean deleteOld) thro
   }
 
   public List<NotebookRepoWithSettings> getNotebookRepos(AuthenticationInfo subject) {
-    List<NotebookRepoWithSettings> reposSetting = Lists.newArrayList();
+    List<NotebookRepoWithSettings> reposSetting = new ArrayList<>();
 
     NotebookRepoWithSettings repoWithSettings;
     for (NotebookRepo repo : repos) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinhubClient.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.IOException;
 import java.net.HttpCookie;
 import java.net.URI;
+import java.util.Arrays;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
@@ -47,7 +48,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.collect.Lists;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 
@@ -176,7 +176,7 @@ public void removeSession(String token) {
 
   private ClientUpgradeRequest getConnectionRequest(String token) {
     ClientUpgradeRequest request = new ClientUpgradeRequest();
-    request.setCookies(Lists.newArrayList(new HttpCookie(TOKEN_HEADER, token)));
+    request.setCookies(Arrays.asList(new HttpCookie(TOKEN_HEADER, token)));
     return request;
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/protocol/ZeppelinhubMessage.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.protocol;
 
+import java.util.HashMap;
 import java.util.Map;
 
 import org.apache.commons.lang3.StringUtils;
@@ -25,7 +26,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.common.collect.Maps;
 import com.google.gson.Gson;
 import com.google.gson.JsonSyntaxException;
 
@@ -40,7 +40,7 @@ public class ZeppelinhubMessage implements JsonSerializable {
 
   public Object op;
   public Object data;
-  public Map<String, String> meta = Maps.newHashMap();
+  public Map<String, String> meta = new HashMap<>();
 
   private ZeppelinhubMessage() {
     this.op = OP.LIST_NOTES;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/ticket/TicketContainer.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 
-import com.google.common.collect.Sets;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -39,7 +38,7 @@ public class TicketContainer {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(TicketContainer.class);
 
-  public static final Entry ANONYMOUS_ENTRY = new Entry("anonymous", "anonymous", Sets.newHashSet());
+  public static final Entry ANONYMOUS_ENTRY = new Entry("anonymous", "anonymous", new HashSet<>());
 
   public static class Entry {
     private final String ticket;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.zeppelin.notebook;
 
-import com.google.common.collect.Lists;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.ui.TextBox;
 import org.apache.zeppelin.interpreter.Interpreter;
@@ -40,6 +39,7 @@
 
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 import static org.junit.Assert.*;
@@ -197,7 +197,7 @@ public void testNoteJson() throws IOException {
     p.setResult(new InterpreterResult(InterpreterResult.Code.SUCCESS, "1.6.2"));
     p.settings.getForms().put("textbox_1", new TextBox("name", "default_name"));
     p.settings.getParams().put("textbox_1", "my_name");
-    note.getAngularObjects().put("ao_1", Lists.newArrayList(new AngularObject("name_1", "value_1", note.getId(), p.getId(), null)));
+    note.getAngularObjects().put("ao_1", Arrays.asList(new AngularObject("name_1", "value_1", note.getId(), p.getId(), null)));
 
     // test Paragraph Json
     Paragraph p2 = Paragraph.fromJson(p.toJson());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.zeppelin.notebook.repo;
 
 import com.google.common.collect.ImmutableMap;
-import com.google.common.io.Files;
 import org.apache.commons.io.FileUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.notebook.Note;
@@ -30,6 +29,7 @@
 import org.junit.Test;
 
 import java.io.File;
+import java.nio.file.Files;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.List;
@@ -41,10 +41,11 @@ public class VFSNotebookRepoTest {
 
   private ZeppelinConfiguration zConf;
   private VFSNotebookRepo notebookRepo;
-  private File notebookDir = Files.createTempDir();
+  private File notebookDir;
 
   @Before
   public void setUp() throws IOException {
+    notebookDir = Files.createTempDirectory("notebookDir").toFile();
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(),
         notebookDir.getAbsolutePath());
     notebookRepo = new VFSNotebookRepo();

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/FlinkSqlInterpreter.java
Patch:
@@ -61,7 +61,7 @@ public abstract class FlinkSqlInterpreter extends AbstractInterpreter {
   private int defaultSqlParallelism;
   private ReentrantReadWriteLock.WriteLock lock = new ReentrantReadWriteLock().writeLock();
   // all the available sql config options. see
-  // https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/table/config.html
+  // https://ci.apache.org/projects/flink/flink-docs-master/docs/dev/table/config/
   private Map<String, ConfigOption> tableConfigOptions;
 
   public FlinkSqlInterpreter(Properties properties) {
@@ -523,7 +523,7 @@ public void callSet(String key, String value, InterpreterContext context) throws
 
     if (!tableConfigOptions.containsKey(key)) {
       throw new IOException(key + " is not a valid table/sql config, please check link: " +
-              "https://ci.apache.org/projects/flink/flink-docs-release-1.10/dev/table/config.html");
+              "https://ci.apache.org/projects/flink/flink-docs-master/docs/dev/table/config/");
     }
 
     LOGGER.info("Set table config: {}={}", key, value);

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest.java
Patch:
@@ -58,7 +58,7 @@ public abstract class SparkIntegrationTest {
   private static MiniHadoopCluster hadoopCluster;
   private static MiniZeppelin zeppelin;
   private static InterpreterFactory interpreterFactory;
-  private static InterpreterSettingManager interpreterSettingManager;
+  protected static InterpreterSettingManager interpreterSettingManager;
 
   private String sparkVersion;
   private String sparkHome;

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest30.java
Patch:
@@ -34,8 +34,8 @@ public SparkIntegrationTest30(String sparkVersion, String hadoopVersion) {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"3.0.2", "2.7"},
-            {"3.0.2", "3.2"}
+            {"3.0.3", "2.7"},
+            {"3.0.3", "3.2"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest31.java
Patch:
@@ -34,8 +34,8 @@ public SparkIntegrationTest31(String sparkVersion, String hadoopVersion) {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-        {"3.1.1", "2.7"},
-        {"3.1.1", "3.2"}
+        {"3.1.2", "2.7"},
+        {"3.1.2", "3.2"}
     });
   }
 

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -75,6 +75,7 @@ public class K8sRemoteInterpreterProcess extends RemoteInterpreterManagedProcess
   private static final String SPARK_DRIVER_MEMORY = "spark.driver.memory";
   private static final String SPARK_DRIVER_MEMORY_OVERHEAD = "spark.driver.memoryOverhead";
   private static final String SPARK_DRIVER_CORES = "spark.driver.cores";
+  private static final String SPARK_CONTAINER_IMAGE = "zeppelin.k8s.spark.container.image";
   private static final String ENV_SERVICE_DOMAIN = "SERVICE_DOMAIN";
   private static final String ENV_ZEPPELIN_HOME = "ZEPPELIN_HOME";
 
@@ -383,7 +384,8 @@ String buildSparkSubmitOptions(String userName) {
     options.append(" --conf spark.kubernetes.namespace=").append(getNamespace());
     options.append(" --conf spark.executor.instances=1");
     options.append(" --conf spark.kubernetes.driver.pod.name=").append(getPodName());
-    options.append(" --conf spark.kubernetes.container.image=").append(sparkImage);
+    String sparkContainerImage = properties.containsKey(SPARK_CONTAINER_IMAGE) ? properties.getProperty(SPARK_CONTAINER_IMAGE) : sparkImage;
+    options.append(" --conf spark.kubernetes.container.image=").append(sparkContainerImage);
     options.append(" --conf spark.driver.bindAddress=0.0.0.0");
     options.append(" --conf spark.driver.host=").append(getInterpreterPodDnsName());
     options.append(" --conf spark.driver.port=").append(getSparkDriverPort());

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteClientFactory.java
Patch:
@@ -28,7 +28,8 @@
 /**
  * Factory class for creating thrift socket client.
  */
-public class RemoteClientFactory<T extends TServiceClient> extends BasePooledObjectFactory<T>{
+public class RemoteClientFactory<T extends TServiceClient> extends BasePooledObjectFactory<T>
+    implements AutoCloseable {
 
 
   private Set<T> clientSockets = ConcurrentHashMap.newKeySet();
@@ -38,6 +39,7 @@ public RemoteClientFactory(SupplierWithIO<T> supplier) {
     this.supplier = supplier;
   }
 
+  @Override
   public void close() {
     for (T clientSocket: clientSockets) {
       clientSocket.getInputProtocol().getTransport().close();

File: zeppelin-plugins/launcher/yarn/src/main/java/org/apache/zeppelin/interpreter/launcher/YarnRemoteInterpreterProcess.java
Patch:
@@ -610,7 +610,7 @@ public void stop() {
       }
 
       // Shutdown connection
-      shutdown();
+      super.close();
     }
 
     yarnClient.stop();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/ExecRemoteInterpreterProcess.java
Patch:
@@ -136,7 +136,7 @@ public void stop() {
       LOGGER.info("Remote exec process of interpreter group: {} is terminated", getInterpreterGroupId());
     } else {
       // Shutdown connection
-      shutdown();
+      super.close();
       LOGGER.warn("Try to stop a not running interpreter process of interpreter group: {}", getInterpreterGroupId());
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java
Patch:
@@ -84,7 +84,7 @@ public void stop() {
         return null;
       });
       // Shutdown connection
-      shutdown();
+      super.close();
     } catch (Exception e) {
       LOGGER.warn("ignore the exception when shutting down", e);
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java
Patch:
@@ -91,7 +91,7 @@ public void stop() {
         }
 
         // Shutdown connection
-        shutdown();
+        super.close();
         LOGGER.info("Remote process of interpreter group: {} is terminated.", getInterpreterGroupId());
       }
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/ParagraphJobStatus.java
Patch:
@@ -46,7 +46,7 @@ public ParagraphJobStatus(Paragraph p) {
         if (!StringUtils.isBlank(p.getErrorMessage())) {
           this.errorMessage = p.getErrorMessage();
         } else {
-          this.errorMessage = p.getReturn().toString();
+          this.errorMessage = String.valueOf(p.getReturn());
         }
       }
     } else {

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest112.java
Patch:
@@ -29,8 +29,8 @@ public class FlinkIntegrationTest112 extends FlinkIntegrationTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.12.0", "2.11"},
-            {"1.12.0", "2.12"}
+            {"1.12.4", "2.11"},
+            {"1.12.4", "2.12"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest113.java
Patch:
@@ -29,8 +29,8 @@ public class FlinkIntegrationTest113 extends FlinkIntegrationTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.13.0", "2.11"},
-            {"1.13.0", "2.12"}
+            {"1.13.2", "2.11"},
+            {"1.13.2", "2.12"}
     });
   }
 

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/FlinkBatchSqlInterpreter.java
Patch:
@@ -27,7 +27,7 @@
 import java.io.IOException;
 import java.util.Properties;
 
-public class FlinkBatchSqlInterpreter extends FlinkSqlInterrpeter {
+public class FlinkBatchSqlInterpreter extends FlinkSqlInterpreter {
 
   private ZeppelinContext z;
 

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/FlinkStreamSqlInterpreter.java
Patch:
@@ -30,7 +30,7 @@
 import java.io.IOException;
 import java.util.Properties;
 
-public class FlinkStreamSqlInterpreter extends FlinkSqlInterrpeter {
+public class FlinkStreamSqlInterpreter extends FlinkSqlInterpreter {
 
   public FlinkStreamSqlInterpreter(Properties properties) {
     super(properties);

File: flink/flink-scala-parent/src/test/java/org/apache/zeppelin/flink/FlinkBatchSqlInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@
 public class FlinkBatchSqlInterpreterTest extends SqlInterpreterTest {
 
   @Override
-  protected FlinkSqlInterrpeter createFlinkSqlInterpreter(Properties properties) {
+  protected FlinkSqlInterpreter createFlinkSqlInterpreter(Properties properties) {
     return new FlinkBatchSqlInterpreter(properties);
   }
 

File: flink/flink-scala-parent/src/test/java/org/apache/zeppelin/flink/FlinkStreamSqlInterpreterTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.junit.Test;
 
 import java.io.File;
-import java.io.FilenameFilter;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.util.List;
@@ -40,7 +39,7 @@
 public class FlinkStreamSqlInterpreterTest extends SqlInterpreterTest {
 
   @Override
-  protected FlinkSqlInterrpeter createFlinkSqlInterpreter(Properties properties) {
+  protected FlinkSqlInterpreter createFlinkSqlInterpreter(Properties properties) {
     return new FlinkStreamSqlInterpreter(properties);
   }
 

File: flink/flink-scala-parent/src/test/java/org/apache/zeppelin/flink/SqlInterpreterTest.java
Patch:
@@ -77,7 +77,7 @@ public abstract class SqlInterpreterTest {
   protected FlinkInterpreter flinkInterpreter;
   protected IPyFlinkInterpreter iPyFlinkInterpreter;
   protected PyFlinkInterpreter pyFlinkInterpreter;
-  protected FlinkSqlInterrpeter sqlInterpreter;
+  protected FlinkSqlInterpreter sqlInterpreter;
 
   private AngularObjectRegistry angularObjectRegistry;
 
@@ -150,7 +150,7 @@ public void tearDown() throws InterpreterException {
     }
   }
 
-  protected abstract FlinkSqlInterrpeter createFlinkSqlInterpreter(Properties properties);
+  protected abstract FlinkSqlInterpreter createFlinkSqlInterpreter(Properties properties);
 
   @Test
   public void testDatabases() throws InterpreterException, IOException {

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -178,6 +178,8 @@ public void testYarnApplicationMode() throws IOException, InterpreterException,
     flinkInterpreterSetting.setProperty("PATH", hadoopHome + "/bin:" + System.getenv("PATH"));
     flinkInterpreterSetting.setProperty("ZEPPELIN_CONF_DIR", zeppelin.getZeppelinConfDir().getAbsolutePath());
     flinkInterpreterSetting.setProperty("flink.execution.mode", "yarn-application");
+    // parameters with whitespace
+    flinkInterpreterSetting.setProperty("flink.yarn.appName", "hello flink");
     flinkInterpreterSetting.setProperty("zeppelin.flink.run.asLoginUser", "false");
 
     testInterpreterBasics();
@@ -186,6 +188,7 @@ public void testYarnApplicationMode() throws IOException, InterpreterException,
     GetApplicationsRequest request = GetApplicationsRequest.newInstance(EnumSet.of(YarnApplicationState.RUNNING));
     GetApplicationsResponse response = hadoopCluster.getYarnCluster().getResourceManager().getClientRMService().getApplications(request);
     assertEquals(1, response.getApplicationList().size());
+    assertEquals("hello flink", response.getApplicationList().get(0).getName());
 
     interpreterSettingManager.close();
   }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest.java
Patch:
@@ -246,6 +246,8 @@ public void testYarnClusterMode() throws IOException, YarnException, Interrupted
     sparkInterpreterSetting.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
     sparkInterpreterSetting.setProperty("spark.user.name", "#{user}");
     sparkInterpreterSetting.setProperty("zeppelin.spark.run.asLoginUser", "false");
+    // parameters with whitespace
+    sparkInterpreterSetting.setProperty("spark.app.name", "hello spark");
 
     try {
       setUpSparkInterpreterSetting(sparkInterpreterSetting);
@@ -255,6 +257,7 @@ public void testYarnClusterMode() throws IOException, YarnException, Interrupted
       GetApplicationsRequest request = GetApplicationsRequest.newInstance(EnumSet.of(YarnApplicationState.RUNNING));
       GetApplicationsResponse response = hadoopCluster.getYarnCluster().getResourceManager().getClientRMService().getApplications(request);
       assertEquals(1, response.getApplicationList().size());
+      assertEquals("hello spark", response.getApplicationList().get(0).getName());
 
     } finally {
       interpreterSettingManager.close();

File: rlang/src/main/java/org/apache/zeppelin/r/RInterpreter.java
Patch:
@@ -98,7 +98,7 @@ public void open() throws InterpreterException {
     synchronized (RInterpreter.class) {
       if (this.z == null) {
         z = new RZeppelinContext(getInterpreterGroup().getInterpreterHookRegistry(),
-                Integer.parseInt(getProperty("zeppelin.r.maxResult", "1000")));
+                Integer.parseInt(getProperty("zeppelin.R.maxResult", "1000")));
       }
     }
     this.renderOptions = getProperty("zeppelin.R.render.options",

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -293,7 +293,7 @@ Properties getTemplateBindings(String userName) {
     }
     Map<String, String> k8sEnv = new HashMap<>(getEnv());
     // environment variables
-    k8sEnv.put(ENV_SERVICE_DOMAIN, getEnv().getOrDefault(ENV_SERVICE_DOMAIN, System.getenv(ENV_SERVICE_DOMAIN)));
+    k8sEnv.put(ENV_SERVICE_DOMAIN, getEnv().getOrDefault(ENV_SERVICE_DOMAIN, System.getenv(ENV_SERVICE_DOMAIN) == null ? "local.zeppelin-project.org" : System.getenv(ENV_SERVICE_DOMAIN)));
     k8sEnv.put(ENV_ZEPPELIN_HOME, getEnv().getOrDefault(ENV_ZEPPELIN_HOME, System.getenv(ENV_ZEPPELIN_HOME)));
 
     if (isSpark()) {

File: livy/src/test/java/org/apache/zeppelin/livy/LivySQLInterpreterTest.java
Patch:
@@ -76,12 +76,12 @@ public void testParseSQLOutput() {
     rows = sqlInterpreter.parseSQLOutput("+---+---+\n" +
         "|  a|  b|\n" +
         "+---+---+\n" +
-        "|  1| 1a|\n" +
+        "|  1| 你|\n" +
         "|  2| 2b|\n" +
         "+---+---+");
     assertEquals(3, rows.size());
     assertEquals("a\tb", rows.get(0));
-    assertEquals("1\t1a", rows.get(1));
+    assertEquals("1\t你", rows.get(1));
     assertEquals("2\t2b", rows.get(2));
 
 

File: zeppelin-plugins/notebookrepo/azure/src/main/java/org/apache/zeppelin/notebook/repo/AzureNotebookRepo.java
Patch:
@@ -125,7 +125,7 @@ public Note get(String noteId, String notePath, AuthenticationInfo subject) thro
     String json = IOUtils.toString(ins,
         conf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_ENCODING));
     ins.close();
-    return Note.fromJson(json);
+    return Note.fromJson(noteId, json);
   }
 
   @Override

File: zeppelin-plugins/notebookrepo/azure/src/main/java/org/apache/zeppelin/notebook/repo/OldAzureNotebookRepo.java
Patch:
@@ -132,7 +132,7 @@ private Note getNote(String noteId) throws IOException {
     String json = IOUtils.toString(ins,
         conf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_ENCODING));
     ins.close();
-    return Note.fromJson(json);
+    return Note.fromJson(noteId, json);
   }
 
   @Override

File: zeppelin-plugins/notebookrepo/filesystem/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java
Patch:
@@ -74,7 +74,7 @@ public Map<String, NoteInfo> list(AuthenticationInfo subject) throws IOException
   public Note get(String noteId, String notePath, AuthenticationInfo subject) throws IOException {
     String content = this.fs.readFile(
         new Path(notebookDir, buildNoteFileName(noteId, notePath)));
-    return Note.fromJson(content);
+    return Note.fromJson(noteId, content);
   }
 
   @Override

File: zeppelin-plugins/notebookrepo/filesystem/src/main/java/org/apache/zeppelin/notebook/repo/OldFileSystemNotebookRepo.java
Patch:
@@ -58,7 +58,7 @@ public List<OldNoteInfo> list(AuthenticationInfo subject) throws IOException {
   public Note get(final String noteId, AuthenticationInfo subject) throws IOException {
     String content = this.fs.readFile(
         new Path(notebookDir.toString() + "/" + noteId + "/note.json"));
-    return Note.fromJson(content);
+    return Note.fromJson(noteId, content);
   }
 
   @Override

File: zeppelin-plugins/notebookrepo/gcs/src/main/java/org/apache/zeppelin/notebook/repo/GCSNotebookRepo.java
Patch:
@@ -181,7 +181,7 @@ public Note get(String noteId, String notePath, AuthenticationInfo subject) thro
     }
 
     try {
-      return Note.fromJson(new String(contents, encoding));
+      return Note.fromJson(noteId, new String(contents, encoding));
     } catch (JsonParseException jpe) {
       throw new IOException(
           "Could note parse as json " + blobId.toString() + jpe.getMessage(), jpe);

File: zeppelin-plugins/notebookrepo/gcs/src/main/java/org/apache/zeppelin/notebook/repo/OldGCSNotebookRepo.java
Patch:
@@ -175,7 +175,7 @@ public Note get(String noteId, AuthenticationInfo subject) throws IOException {
     }
 
     try {
-      return Note.fromJson(new String(contents, encoding));
+      return Note.fromJson(noteId, new String(contents, encoding));
     } catch (JsonParseException jpe) {
       throw new IOException(
           "Could note parse as json " + blobId.toString() + jpe.getMessage(), jpe);

File: zeppelin-plugins/notebookrepo/mongo/src/main/java/org/apache/zeppelin/notebook/repo/MongoNotebookRepo.java
Patch:
@@ -158,7 +158,7 @@ private Note getNote(String noteId, String notePath) throws IOException {
       throw new IOException("Note '" + noteId + "' in path '" + notePath + "'not found");
     }
 
-    return documentToNote(doc);
+    return documentToNote(noteId, doc);
   }
 
   @Override
@@ -434,11 +434,11 @@ String[] toPathArray(String notePath, boolean includeLast) {
   /**
    * Convert document to note.
    */
-  private Note documentToNote(Document doc) throws IOException {
+  private Note documentToNote(String noteId, Document doc) throws IOException {
     // document to JSON
     String json = doc.toJson();
     // JSON to note
-    return Note.fromJson(json);
+    return Note.fromJson(noteId, json);
   }
 
   /**

File: zeppelin-plugins/notebookrepo/oss/src/main/java/org/apache/zeppelin/notebook/repo/OSSNotebookRepo.java
Patch:
@@ -111,7 +111,7 @@ public Note get(String noteId, String notePath, AuthenticationInfo subject) thro
     InputStream in = null;
     try {
       in = ossObject.getObjectContent();
-      return Note.fromJson(IOUtils.toString(in, StandardCharsets.UTF_8));
+      return Note.fromJson(noteId, IOUtils.toString(in, StandardCharsets.UTF_8));
     } finally {
       if (in != null) {
         in.close();

File: zeppelin-plugins/notebookrepo/s3/src/main/java/org/apache/zeppelin/notebook/repo/OldS3NotebookRepo.java
Patch:
@@ -216,7 +216,7 @@ private Note getNote(String key) throws IOException {
 
     try (InputStream ins = s3object.getObjectContent()) {
       String json = IOUtils.toString(ins, conf.getString(ConfVars.ZEPPELIN_ENCODING));
-      return Note.fromJson(json);
+      return Note.fromJson(null, json);
     }
   }
 

File: zeppelin-plugins/notebookrepo/s3/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java
Patch:
@@ -224,7 +224,7 @@ public Note get(String noteId, String notePath, AuthenticationInfo subject) thro
     }
     try (InputStream ins = s3object.getObjectContent()) {
       String json = IOUtils.toString(ins, conf.getString(ConfVars.ZEPPELIN_ENCODING));
-      return Note.fromJson(json);
+      return Note.fromJson(noteId, json);
     }
   }
 

File: zeppelin-plugins/notebookrepo/zeppelin-hub/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/OldZeppelinHubRepo.java
Patch:
@@ -195,7 +195,7 @@ public Note get(String noteId, AuthenticationInfo subject) throws IOException {
     }
     String token = getUserToken(subject.getUser());
     String response = restApiClient.get(token, noteId);
-    Note note = Note.fromJson(response);
+    Note note = Note.fromJson(noteId, response);
     if (note == null) {
       return EMPTY_NOTE;
     }
@@ -254,7 +254,7 @@ public Note get(String noteId, String revId, AuthenticationInfo subject) throws
     String token = getUserToken(subject.getUser());
     String response = restApiClient.get(token, endpoint);
 
-    Note note = Note.fromJson(response);
+    Note note = Note.fromJson(noteId, response);
     if (note == null) {
       return EMPTY_NOTE;
     }

File: zeppelin-plugins/notebookrepo/zeppelin-hub/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java
Patch:
@@ -201,7 +201,7 @@ public Note get(String noteId, String noteName, AuthenticationInfo subject) thro
     }
     String token = getUserToken(subject.getUser());
     String response = restApiClient.get(token, noteId);
-    Note note = Note.fromJson(response);
+    Note note = Note.fromJson(noteId, response);
     if (note == null) {
       return EMPTY_NOTE;
     }
@@ -275,7 +275,7 @@ public Note get(String noteId, String notePath, String revId, AuthenticationInfo
     String token = getUserToken(subject.getUser());
     String response = restApiClient.get(token, endpoint);
 
-    Note note = Note.fromJson(response);
+    Note note = Note.fromJson(noteId, response);
     if (note == null) {
       return EMPTY_NOTE;
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -720,7 +720,7 @@ public void onClusterEvent(String msg) {
         authenticationInfo = AuthenticationInfo.fromJson(json);
       } else if (StringUtils.equals(key, "Note")) {
         try {
-          note = Note.fromJson(json);
+          note = Note.fromJson(null, json);
         } catch (IOException e) {
           LOG.warn("Fail to parse note json", e);
         }

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterNoteEventListenerTest.java
Patch:
@@ -57,7 +57,7 @@ public void onClusterEvent(String msg) {
         LOGGER.debug(authenticationInfo.toJson());
       } else if (key.equals("Note")) {
         try {
-          note = Note.fromJson(json);
+          note = Note.fromJson(null, json);
         } catch (IOException e) {
           LOGGER.warn("Fail to parse note json", e);
         }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -41,6 +41,7 @@
 import org.apache.zeppelin.interpreter.remote.RemoteAngularObject;
 import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;
 import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
+import org.apache.zeppelin.notebook.exception.CorruptedNoteException;
 import org.apache.zeppelin.notebook.utility.IdHashes;
 import org.apache.zeppelin.scheduler.ExecutorFactory;
 import org.apache.zeppelin.scheduler.Job.Status;
@@ -1132,7 +1133,7 @@ public String toJson() {
    * @return Note
    * @throws IOException if fail to parse note json (note file may be corrupted)
    */
-  public static Note fromJson(String json) throws IOException {
+  public static Note fromJson(String noteId, String json) throws IOException {
     try {
       Note note = GSON.fromJson(json, Note.class);
       convertOldInput(note);
@@ -1141,7 +1142,7 @@ public static Note fromJson(String json) throws IOException {
       return note;
     } catch (Exception e) {
       LOGGER.error("Fail to parse note json: {}", e.toString());
-      throw new IOException("Fail to parse note json: " + json, e);
+      throw new CorruptedNoteException(noteId, "Fail to parse note json: " + json, e);
     }
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/OldVFSNotebookRepo.java
Patch:
@@ -162,7 +162,7 @@ private Note getNote(FileObject noteDir) throws IOException {
     String json = IOUtils.toString(ins, conf.getString(ConfVars.ZEPPELIN_ENCODING));
     ins.close();
 
-    return Note.fromJson(json);
+    return Note.fromJson(null, json);
   }
 
   private OldNoteInfo getNoteInfo(FileObject noteDir) throws IOException {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -133,7 +133,7 @@ public Note get(String noteId, String notePath, AuthenticationInfo subject) thro
         NameScope.DESCENDENT);
     String json = IOUtils.toString(noteFile.getContent().getInputStream(),
         conf.getString(ConfVars.ZEPPELIN_ENCODING));
-    Note note = Note.fromJson(json);
+    Note note = Note.fromJson(noteId, json);
     // setPath here just for testing, because actually NoteManager will setPath
     note.setPath(notePath);
     return note;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java
Patch:
@@ -205,7 +205,7 @@ public void testNoteJson() throws IOException {
     assertEquals(p2, p);
 
     // test Note Json
-    Note note2 = Note.fromJson(note.toJson());
+    Note note2 = Note.fromJson(null, note.toJson());
     assertEquals(note2, note);
   }
 }

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/InterpreterModeActionsIT.java
Patch:
@@ -74,7 +74,7 @@ public class InterpreterModeActionsIT extends AbstractZeppelinIT {
 
   static String cmdPsPython = "ps aux | grep 'kernel_server.py' | grep -v 'grep' | wc -l";
   static String cmdPsInterpreter = "ps aux | grep 'zeppelin/interpreter/python/*' |" +
-      " sed -E '/grep|local-repo/d' | wc -l";
+          " sed -E '/grep/d' | wc -l";
 
   @BeforeClass
   public static void startUp() {

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -179,11 +179,12 @@ public void testCancelPyspark() throws Exception {
       collector.checkThat("First paragraph status is ",
               getParagraphStatus(1), CoreMatchers.equalTo("ABORT")
       );
+
       collector.checkThat("Second paragraph status is ",
-              getParagraphStatus(2), CoreMatchers.equalTo("READY")
+              getParagraphStatus(2), CoreMatchers.either(CoreMatchers.equalTo("PENDING"))
+                      .or(CoreMatchers.equalTo("READY"))
       );
 
-
       driver.navigate().refresh();
       ZeppelinITUtils.sleep(3000, false);
 

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -241,6 +241,7 @@ public String getPodPhase() {
   void apply(File path, boolean delete, Properties templateProperties) throws IOException {
     if (path.getName().startsWith(".") || path.isHidden() || path.getName().endsWith("~")) {
       LOGGER.info("Skip {}", path.getAbsolutePath());
+      return;
     }
 
     if (path.isDirectory()) {

File: zeppelin-plugins/launcher/cluster/src/test/java/org/apache/zeppelin/interpreter/launcher/ClusterInterpreterLauncherTest.java
Patch:
@@ -52,7 +52,9 @@ public void setUp() {
     }
   }
 
-  @Test
+  // TODO(zjffdu) disable this test because this is not a correct unit test,
+  // Actually the interpreter process here never start before ZEPPELIN-5300.
+  // @Test
   public void testConnectExistOnlineIntpProcess() throws IOException {
     mockIntpProcessMeta("intpGroupId", true);
 

File: zeppelin-client/src/main/java/org/apache/zeppelin/client/ZeppelinClient.java
Patch:
@@ -88,7 +88,9 @@ private void checkResponse(HttpResponse<JsonNode> response) throws Exception {
     }
     if (response.getStatus() != 200) {
       String message = response.getStatusText();
-      if (response.getBody().getObject().has("message")) {
+      if (response.getBody() != null &&
+              response.getBody().getObject() != null &&
+              response.getBody().getObject().has("message")) {
         message = response.getBody().getObject().getString("message");
       }
       throw new Exception(String.format("Unable to call rest api, status: %s, statusText: %s, message: %s",

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest.java
Patch:
@@ -195,6 +195,7 @@ public void testYarnClientMode() throws IOException, YarnException, InterruptedE
     sparkInterpreterSetting.setProperty("zeppelin.spark.scala.color", "false");
     sparkInterpreterSetting.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
     sparkInterpreterSetting.setProperty("spark.user.name", "#{user}");
+    sparkInterpreterSetting.setProperty("zeppelin.spark.run.asLoginUser", "false");
 
     try {
       setUpSparkInterpreterSetting(sparkInterpreterSetting);
@@ -244,6 +245,7 @@ public void testYarnClusterMode() throws IOException, YarnException, Interrupted
     sparkInterpreterSetting.setProperty("zeppelin.spark.scala.color", "false");
     sparkInterpreterSetting.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
     sparkInterpreterSetting.setProperty("spark.user.name", "#{user}");
+    sparkInterpreterSetting.setProperty("zeppelin.spark.run.asLoginUser", "false");
 
     try {
       setUpSparkInterpreterSetting(sparkInterpreterSetting);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -159,7 +159,7 @@ private void internal_create() throws IOException {
         interpreterProcess.callRemoteFunction(client -> {
           LOGGER.info("Create RemoteInterpreter {}", getClassName());
           client.createInterpreter(getInterpreterGroup().getId(), sessionId,
-              className, (Map) getProperties(), getUserName());
+              className, (Map) properties, getUserName());
           return null;
         });
         isCreated = true;

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/ZeppelinHubRealm.java
Patch:
@@ -226,7 +226,7 @@ public void onLoginSuccess(String username, String session) {
         new org.apache.zeppelin.user.AuthenticationInfo(username), userAndRoles);
     try {
       // This can failed to get NotebookServer instance with very rare cases
-      NotebookServer.getInstance().broadcastReloadedNoteList(null, context);
+      NotebookServer.getInstance().broadcastReloadedNoteList(context);
     } catch (IOException e) {
       LOG.error("Fail to broadcastReloadedNoteList", e);
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/AdminRestApi.java
Patch:
@@ -39,7 +39,7 @@
 public class AdminRestApi {
   private static final Logger logger = LoggerFactory.getLogger(AdminRestApi.class);
 
-  private AdminService adminService;
+  private final AdminService adminService;
 
   @Inject
   public AdminRestApi(AdminService adminService) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/ConfigurationsRestApi.java
Patch:
@@ -37,7 +37,7 @@
 @Singleton
 public class ConfigurationsRestApi extends AbstractRestApi {
 
-  private ConfigurationService configurationService;
+  private final ConfigurationService configurationService;
 
   @Inject
   public ConfigurationsRestApi(

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/CredentialRestApi.java
Patch:
@@ -46,9 +46,9 @@
 @Singleton
 public class CredentialRestApi {
   private static final Logger LOGGER = LoggerFactory.getLogger(CredentialRestApi.class);
-  private Credentials credentials;
-  private AuthenticationService authenticationService;
-  private Gson gson = new Gson();
+  private final Credentials credentials;
+  private final AuthenticationService authenticationService;
+  private final Gson gson = new Gson();
 
   @Inject
   public CredentialRestApi(Credentials credentials, AuthenticationService authenticationService) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/SessionRestApi.java
Patch:
@@ -50,7 +50,7 @@ public class SessionRestApi {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(SessionRestApi.class);
 
-  private SessionManagerService sessionManagerService;
+  private final SessionManagerService sessionManagerService;
 
   @Inject
   public SessionRestApi(Notebook notebook, InterpreterSettingManager interpreterSettingManager) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookSocket.java
Patch:
@@ -29,9 +29,9 @@
  */
 public class NotebookSocket extends WebSocketAdapter {
   private Session connection;
-  private NotebookSocketListener listener;
-  private HttpServletRequest request;
-  private String protocol;
+  private final NotebookSocketListener listener;
+  private final HttpServletRequest request;
+  private final String protocol;
   private String user;
 
   public NotebookSocket(HttpServletRequest req, String protocol,

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookWebSocketCreator.java
Patch:
@@ -30,7 +30,7 @@
 public class NotebookWebSocketCreator implements WebSocketCreator {
 
   private static final Logger LOG = LoggerFactory.getLogger(NotebookWebSocketCreator.class);
-  private NotebookServer notebookServer;
+  private final NotebookServer notebookServer;
 
   public NotebookWebSocketCreator(NotebookServer notebookServer) {
     this.notebookServer = notebookServer;

File: zeppelin-server/src/main/java/org/apache/zeppelin/utils/AnyOfRolesUserAuthorizationFilter.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.utils;
 
-import java.io.IOException;
 import javax.servlet.ServletRequest;
 import javax.servlet.ServletResponse;
 import org.apache.shiro.subject.Subject;
@@ -31,7 +30,7 @@
 public class AnyOfRolesUserAuthorizationFilter extends RolesAuthorizationFilter {
   @Override
   public boolean isAccessAllowed(ServletRequest request, ServletResponse response,
-          Object mappedValue) throws IOException {
+          Object mappedValue) {
     final Subject subject = getSubject(request, response);
     final String[] rolesArray = (String[]) mappedValue;
 

File: flink/flink-shims/src/main/java/org/apache/zeppelin/flink/FlinkShims.java
Patch:
@@ -157,4 +157,6 @@ public void setBatchRuntimeMode(Object tableConfig) {
   public void setOldPlanner(Object tableConfig) {
     // only needed after flink 1.13
   }
+
+  public abstract String[] rowToString(Object row, Object table, Object tableConfig);
 }

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/FlinkSqlInterrpeter.java
Patch:
@@ -469,7 +469,7 @@ private void callUseDatabase(String databaseName,
   }
 
   private void callDescribe(String name, InterpreterContext context) throws IOException {
-    TableSchema schema = tbenv.scan(name).getSchema();
+    TableSchema schema = tbenv.scan(name.split("\\.")).getSchema();
     StringBuilder builder = new StringBuilder();
     builder.append("Column\tType\n");
     for (int i = 0; i < schema.getFieldCount(); ++i) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java
Patch:
@@ -373,7 +373,7 @@ public static String getSimpleQuery(Map<String, Object> params, String script, b
         }
       } else {
         // single-selection
-        expanded = value.toString();
+        expanded = StringUtils.defaultString((String) value, "");
       }
       replaced = match.replaceFirst(expanded);
       match = pattern.matcher(replaced);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookSocket.java
Patch:
@@ -67,7 +67,7 @@ public String getProtocol() {
   }
 
   public synchronized void send(String serializeMessage) throws IOException {
-    connection.getRemote().sendString(serializeMessage);
+    connection.getRemote().sendStringByFuture(serializeMessage);
   }
 
   public String getUser() {

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ImmediateErrorHandlerImpl.java
Patch:
@@ -28,8 +28,8 @@
  */
 @Singleton
 public class ImmediateErrorHandlerImpl implements ImmediateErrorHandler {
-  private final List<ErrorData> constructionErrors = new LinkedList<ErrorData>();
-  private final List<ErrorData> destructionErrors = new LinkedList<ErrorData>();
+  private final List<ErrorData> constructionErrors = new LinkedList<>();
+  private final List<ErrorData> destructionErrors = new LinkedList<>();
 
   @Override
   public void postConstructFailed(ActiveDescriptor<?> immediateService, Throwable exception) {
@@ -55,7 +55,7 @@ List<ErrorData> waitForAtLeastOneConstructionError(long waitTime) throws Interru
         long elapsedTime = System.currentTimeMillis() - currentTime;
         waitTime -= elapsedTime;
       }
-      return new LinkedList<ErrorData>(constructionErrors);
+      return new LinkedList<>(constructionErrors);
     }
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -386,7 +386,7 @@ private static void runNoteOnStart(ZeppelinConfiguration conf) throws IOExceptio
     String noteIdToRun = conf.getNotebookRunId();
     if (!StringUtils.isEmpty(noteIdToRun)) {
       LOG.info("Running note {} on start", noteIdToRun);
-      NotebookService notebookService = (NotebookService) ServiceLocatorUtilities.getService(
+      NotebookService notebookService = ServiceLocatorUtilities.getService(
               sharedServiceLocator, NotebookService.class.getName());
 
       ServiceContext serviceContext;

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/ConfigurationService.java
Patch:
@@ -25,7 +25,7 @@
 
 public class ConfigurationService {
 
-  private ZeppelinConfiguration zConf;
+  private final ZeppelinConfiguration zConf;
 
   @Inject
   public ConfigurationService(ZeppelinConfiguration zConf) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NoAuthenticationService.java
Patch:
@@ -30,12 +30,12 @@
 import org.slf4j.LoggerFactory;
 
 public class NoAuthenticationService implements AuthenticationService {
-  private static Logger logger = LoggerFactory.getLogger(NoAuthenticationService.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(NoAuthenticationService.class);
   private final String ANONYMOUS = "anonymous";
 
   @Inject
   public NoAuthenticationService() {
-    logger.info("NoAuthenticationService is initialized");
+    LOGGER.info("NoAuthenticationService is initialized");
   }
 
   @Override

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/ServiceContext.java
Patch:
@@ -27,8 +27,8 @@
  */
 public class ServiceContext {
 
-  private AuthenticationInfo autheInfo;
-  private Set<String> userAndRoles;
+  private final AuthenticationInfo autheInfo;
+  private final Set<String> userAndRoles;
 
   public ServiceContext(AuthenticationInfo authInfo, Set<String> userAndRoles) {
     this.autheInfo = authInfo;

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/ShiroAuthenticationService.java
Patch:
@@ -407,8 +407,8 @@ private List<String> getUserList(JdbcRealm obj) {
     Connection con = null;
     PreparedStatement ps = null;
     ResultSet rs = null;
-    DataSource dataSource = null;
-    String authQuery = "";
+    DataSource dataSource;
+    String authQuery;
     String[] retval;
     String tablename = "";
     String username = "";

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/SimpleServiceCallback.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class SimpleServiceCallback<T> implements ServiceCallback<T> {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(SimpleServiceCallback.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(SimpleServiceCallback.class);
 
   @Override
   public void onStart(String message, ServiceContext context) throws IOException {

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcessTest.java
Patch:
@@ -78,7 +78,7 @@ public void testPredefinedPortNumbers() {
     // when change those values, update the yaml file as well.
     assertEquals("12321:12321", intp.getInterpreterPortRange());
     assertEquals(22321, intp.getSparkDriverPort());
-    assertEquals(22322, intp.getSparkBlockmanagerPort());
+    assertEquals(22322, intp.getSparkBlockManagerPort());
   }
 
   @Test
@@ -178,7 +178,7 @@ public void testGetTemplateBindingsForSpark() {
     assertTrue(sparkSubmitOptions.contains("spark.kubernetes.container.image=spark-container:1.0"));
     assertTrue(sparkSubmitOptions.contains("spark.driver.host=" + intp.getPodName() + ".default.svc"));
     assertTrue(sparkSubmitOptions.contains("spark.driver.port=" + intp.getSparkDriverPort()));
-    assertTrue(sparkSubmitOptions.contains("spark.blockManager.port=" + intp.getSparkBlockmanagerPort()));
+    assertTrue(sparkSubmitOptions.contains("spark.blockManager.port=" + intp.getSparkBlockManagerPort()));
     assertFalse(sparkSubmitOptions.contains("--proxy-user"));
     assertTrue(intp.isSpark());
   }
@@ -229,7 +229,7 @@ public void testGetTemplateBindingsForSparkWithProxyUser() {
     assertTrue(sparkSubmitOptions.contains("spark.kubernetes.container.image=spark-container:1.0"));
     assertTrue(sparkSubmitOptions.contains("spark.driver.host=" + intp.getPodName() + ".default.svc"));
     assertTrue(sparkSubmitOptions.contains("spark.driver.port=" + intp.getSparkDriverPort()));
-    assertTrue(sparkSubmitOptions.contains("spark.blockManager.port=" + intp.getSparkBlockmanagerPort()));
+    assertTrue(sparkSubmitOptions.contains("spark.blockManager.port=" + intp.getSparkBlockManagerPort()));
     assertTrue(sparkSubmitOptions.contains("--proxy-user mytestUser"));
     assertTrue(intp.isSpark());
   }

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/PodPhaseWatcherTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.lang3.StringUtils;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 
@@ -41,6 +42,7 @@ public class PodPhaseWatcherTest {
   public KubernetesServer server = new KubernetesServer(false, true);
 
   @Test
+  @Ignore("Reamer - ZEPPELIN-5403")
   public void testPhase() throws InterruptedException {
     KubernetesClient client = server.getClient();
     // CREATE
@@ -71,6 +73,7 @@ public void testPhase() throws InterruptedException {
   }
 
   @Test
+  @Ignore("Reamer - ZEPPELIN-5403")
   public void testPhaseWithError() throws InterruptedException {
     KubernetesClient client = server.getClient();
     // CREATE

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/FlinkBatchSqlInterpreter.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.flink.table.api.Table;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
@@ -28,7 +29,7 @@
 
 public class FlinkBatchSqlInterpreter extends FlinkSqlInterrpeter {
 
-  private FlinkZeppelinContext z;
+  private ZeppelinContext z;
 
   public FlinkBatchSqlInterpreter(Properties properties) {
     super(properties);
@@ -56,7 +57,6 @@ public void close() throws InterpreterException {
   @Override
   public void callInnerSelect(String sql, InterpreterContext context) throws IOException {
     Table table = this.tbenv.sqlQuery(sql);
-    z.setCurrentSql(sql);
     String result = z.showData(table);
     context.out.write(result);
   }

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/IPyFlinkInterpreter.java
Patch:
@@ -89,7 +89,7 @@ public InterpreterResult internalInterpret(String st,
         throw new InterpreterException("Fail to initJavaThread: " +
                 result.toString());
       }
-      flinkInterpreter.setSavepointIfNecessary(context);
+      flinkInterpreter.setSavepointPathIfNecessary(context);
       flinkInterpreter.setParallelismIfNecessary(context);
       return super.internalInterpret(st, context);
     } finally {

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/PyFlinkInterpreter.java
Patch:
@@ -115,7 +115,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) throws
                     result.toString());
           }
         }
-        flinkInterpreter.setSavepointIfNecessary(context);
+        flinkInterpreter.setSavepointPathIfNecessary(context);
         flinkInterpreter.setParallelismIfNecessary(context);
       }
       return super.interpret(st, context);

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/YarnApplicationExecutionEnvironment.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.flink.configuration.PipelineOptions;
 import org.apache.flink.core.execution.JobClient;
 import org.apache.flink.core.execution.PipelineExecutorServiceLoader;
+import org.apache.zeppelin.flink.internal.FlinkILoop;
 
 import java.io.File;
 import java.net.MalformedURLException;

File: flink/flink-scala-parent/src/main/java/org/apache/zeppelin/flink/YarnApplicationStreamEnvironment.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.flink.core.execution.JobClient;
 import org.apache.flink.core.execution.PipelineExecutorServiceLoader;
 import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
+import org.apache.zeppelin.flink.internal.FlinkILoop;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: flink/flink-scala-parent/src/test/java/org/apache/zeppelin/flink/FlinkBatchSqlInterpreterTest.java
Patch:
@@ -75,7 +75,7 @@ public void testSelect() throws InterpreterException, IOException {
     result =
             flinkInterpreter.interpret("z.show(btenv.sqlQuery(\"select * from source_table\"))", context);
     resultMessages = context.out.toInterpreterResultMessage();
-    assertEquals(InterpreterResult.Code.SUCCESS, result.code());
+    assertEquals(context.out.toString(), InterpreterResult.Code.SUCCESS, result.code());
     assertEquals(1, resultMessages.size());
     assertEquals(InterpreterResult.Type.TABLE, resultMessages.get(0).getType());
     assertEquals("id\tname\n1\ta\n2\tb\n", resultMessages.get(0).getData());

File: flink/flink-scala-parent/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -326,8 +326,8 @@ public void testCancelStreamSql() throws IOException, InterpreterException, Inte
     thread.start();
 
     // the streaming job will run for 20 seconds. check init_stream.scala
-    // sleep 10 seconds to make sure the job is started but not finished
-    Thread.sleep(10 * 1000);
+    // sleep 20 seconds to make sure the job is started but not finished
+    Thread.sleep(20 * 1000);
 
     InterpreterContext context = getInterpreterContext();
     context.getLocalProperties().put("type", "update");

File: flink/flink-scala-parent/src/test/java/org/apache/zeppelin/flink/IPyFlinkInterpreterTest.java
Patch:
@@ -398,8 +398,8 @@ public static void testCancelStreamSql(Interpreter interpreter, Interpreter flin
     thread.start();
 
     // the streaming job will run for 20 seconds. check init_stream.scala
-    // sleep 10 seconds to make sure the job is started but not finished
-    Thread.sleep(10 * 1000);
+    // sleep 20 seconds to make sure the job is started but not finished
+    Thread.sleep(20 * 1000);
 
     InterpreterContext context = createInterpreterContext();
     context.getLocalProperties().put("type", "update");

File: flink/flink-shims/src/main/java/org/apache/zeppelin/flink/FlinkVersion.java
Patch:
@@ -29,7 +29,7 @@ public class FlinkVersion {
   private int version;
   private String versionString;
 
-  FlinkVersion(String versionString) {
+  public FlinkVersion(String versionString) {
     this.versionString = versionString;
 
     try {

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZSessionIntegrationTest.java
Patch:
@@ -69,7 +69,7 @@ public static void setUp() throws Exception {
 
     notebook = TestUtils.getInstance(Notebook.class);
     sparkHome = DownloadUtils.downloadSpark("2.4.4", "2.7");
-    flinkHome = DownloadUtils.downloadFlink("1.10.1");
+    flinkHome = DownloadUtils.downloadFlink("1.10.1", "2.11");
   }
 
   @AfterClass

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinFlinkClusterTest.java
Patch:
@@ -48,7 +48,7 @@ public abstract class ZeppelinFlinkClusterTest extends AbstractTestRestApi {
   public ZeppelinFlinkClusterTest(String flinkVersion) throws Exception {
     this.flinkVersion = flinkVersion;
     LOGGER.info("Testing FlinkVersion: " + flinkVersion);
-    this.flinkHome = DownloadUtils.downloadFlink(flinkVersion);
+    this.flinkHome = DownloadUtils.downloadFlink(flinkVersion, "2.11");
   }
 
   @BeforeClass

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/LdapGroupRealm.java
Patch:
@@ -52,7 +52,7 @@ public AuthorizationInfo queryForAuthorizationInfo(PrincipalCollection principal
   }
 
   public Set<String> getRoleNamesForUser(String username, LdapContext ldapContext,
-          String userDnTemplate) throws NamingException {
+          String userDnTemplate) {
     try {
       Set<String> roleNames = new LinkedHashSet<>();
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/ZeppelinHubRealm.java
Patch:
@@ -65,7 +65,7 @@ public class ZeppelinHubRealm extends AuthorizingRealm {
   private final CloseableHttpClient httpClient;
 
   private String zeppelinhubUrl;
-  private String name;
+  private final String name;
 
   public ZeppelinHubRealm() {
     super();

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/JobManager.java
Patch:
@@ -188,6 +188,7 @@ class FlinkJobProgressPoller extends Thread {
     private AtomicBoolean running = new AtomicBoolean(true);
     private boolean isFirstPoll = true;
     private long checkInterval;
+    private String latestCheckpointPath;
 
     FlinkJobProgressPoller(String flinkWebUrl, JobID jobId, InterpreterContext context, long checkInterval) {
       this.flinkWebUrl = flinkWebUrl;
@@ -254,11 +255,12 @@ public void run() {
               if (completedObject.has("external_path")) {
                 String checkpointPath = completedObject.getString("external_path");
                 LOGGER.debug("Latest checkpoint path: {}", checkpointPath);
-                if (!StringUtils.isBlank(checkpointPath)) {
+                if (!StringUtils.isBlank(checkpointPath) && !checkpointPath.equals(latestCheckpointPath)) {
                   Map<String, String> config = new HashMap<>();
                   config.put(LATEST_CHECKPOINT_PATH, checkpointPath);
                   context.getIntpEventClient().updateParagraphConfig(
                           context.getNoteId(), context.getParagraphId(), config);
+                  latestCheckpointPath = checkpointPath;
                 }
               }
             }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/util/ProcessLauncher.java
Patch:
@@ -185,7 +185,7 @@ public String getProcessExecutionOutput() {
     @Override
     protected void processLine(String s, int i) {
       // print Interpreter launch command for diagnose purpose
-      if (s.startsWith("Interpreter launch command")) {
+      if (s.startsWith("[INFO]")) {
         LOGGER.info(s);
       } else {
         LOGGER.debug("Process Output: {}", s);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -53,8 +53,8 @@
  * Zeppelin configuration.
  *
  * Sources descending by priority:
- *   - system properties
  *   - environment variables
+ *   - system properties
  *   - configuration file
  */
 public class ZeppelinConfiguration {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -72,8 +72,6 @@ public class Paragraph extends JobWithProgressPoller<InterpreterResult> implemen
     JsonSerializable {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(Paragraph.class);
-  private static final Pattern REPL_PATTERN =
-      Pattern.compile("(\\s*)%([\\w\\.]+)(\\(.*?\\))?.*", Pattern.DOTALL);
 
   private String title;
   // text is composed of intpText and scriptText.

File: flink/flink1.12-shims/src/main/java/org/apache/zeppelin/flink/Flink112Shims.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.commons.cli.CommandLine;
 import org.apache.commons.compress.utils.Lists;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.flink.api.common.ExecutionConfig;
 import org.apache.flink.api.common.JobStatus;
 import org.apache.flink.api.common.typeutils.TypeSerializer;
 import org.apache.flink.api.java.tuple.Tuple2;

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/FlinkStreamSqlInterpreterTest.java
Patch:
@@ -470,7 +470,7 @@ public void testCreateTableWithWaterMark() throws InterpreterException, IOExcept
                     "  'update-mode' = 'append'\n" +
                     ")\n",
             context);
-    assertEquals(InterpreterResult.Code.SUCCESS, result.code());
+    assertEquals(context.out.toString(), InterpreterResult.Code.SUCCESS, result.code());
     List<InterpreterResultMessage> resultMessages = context.out.toInterpreterResultMessage();
     assertEquals(1, resultMessages.size());
     assertEquals(InterpreterResult.Type.TEXT, resultMessages.get(0).getType());

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/IPyFlinkInterpreterTest.java
Patch:
@@ -176,7 +176,7 @@ public static void testBatchPyFlink(Interpreter pyflinkInterpreter, Interpreter
         "t.select(\"a + 1, b, c\").insert_into(\"batch_sink\")\n" +
         "bt_env.execute(\"batch_job\")"
             , context);
-    assertEquals(InterpreterResult.Code.SUCCESS, result.code());
+    assertEquals(result.toString(), InterpreterResult.Code.SUCCESS, result.code());
 
     // use group by
     context = createInterpreterContext();

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -82,6 +82,7 @@ public class NotebookServiceTest {
   private static NotebookService notebookService;
 
   private File notebookDir;
+  private SearchService searchService;
   private ServiceContext context =
       new ServiceContext(AuthenticationInfo.ANONYMOUS, new HashSet<>());
 
@@ -116,7 +117,7 @@ public void setUp() throws Exception {
     when(mockInterpreterSetting.isUserAuthorized(any())).thenReturn(true);
     when(mockInterpreterGroup.getInterpreterSetting()).thenReturn(mockInterpreterSetting);
     when(mockInterpreterSetting.getStatus()).thenReturn(InterpreterSetting.Status.READY);
-    SearchService searchService = new LuceneSearch(zeppelinConfiguration);
+    searchService = new LuceneSearch(zeppelinConfiguration);
     Credentials credentials = new Credentials();
     NoteManager noteManager = new NoteManager(notebookRepo);
     AuthorizationService authorizationService = new AuthorizationService(noteManager, zeppelinConfiguration);
@@ -147,6 +148,7 @@ public void setUp() throws Exception {
   @After
   public void tearDown() {
     notebookDir.delete();
+    searchService.close();
   }
 
   @Test

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/search/NoSearchService.java
Patch:
@@ -32,7 +32,7 @@ public class NoSearchService extends SearchService {
 
   @Inject
   public NoSearchService() {
-    super("NoSearchService-Thread");
+    super("NoSearchService");
   }
 
   @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/search/SearchService.java
Patch:
@@ -25,6 +25,8 @@
 import org.apache.zeppelin.notebook.NoteEventAsyncListener;
 import org.apache.zeppelin.notebook.Paragraph;
 
+import javax.annotation.PreDestroy;
+
 /**
  * Search (both, indexing and query) the notes.
  * 
@@ -96,6 +98,7 @@ public SearchService(String name) {
   /**
    * Frees the recourses used by index
    */
+  @PreDestroy
   public void close() {
     super.close();
   }

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -257,7 +257,7 @@ void apply(File path, boolean delete, Properties templateProperties) throws IOEx
       K8sSpecTemplate specTemplate = new K8sSpecTemplate();
       specTemplate.loadProperties(templateProperties);
       String template = specTemplate.render(path);
-      ParameterNamespaceListVisitFromServerGetDeleteRecreateWaitApplicable<HasMetadata, Boolean> k8sObjects = client.load(IOUtils.toInputStream(template, StandardCharsets.UTF_8));
+      ParameterNamespaceListVisitFromServerGetDeleteRecreateWaitApplicable<HasMetadata> k8sObjects = client.load(IOUtils.toInputStream(template, StandardCharsets.UTF_8));
       LOGGER.info("Apply {} with {} K8s Objects", path.getAbsolutePath(), k8sObjects.get().size());
       LOGGER.debug(template);
       if (delete) {

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/PodPhaseWatcherTest.java
Patch:
@@ -38,7 +38,7 @@
 public class PodPhaseWatcherTest {
 
   @Rule
-  public KubernetesServer server = new KubernetesServer(true, true);
+  public KubernetesServer server = new KubernetesServer(false, true);
 
   @Test
   public void testPhase() throws InterruptedException {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -124,7 +124,7 @@ && getDeployMode().equals("cluster")) {
           }
         }
 
-        String scalaVersion = detectSparkScalaVersion(properties.getProperty("SPARK_HOME"));
+        String scalaVersion = detectSparkScalaVersion(getEnv("SPARK_HOME"));
         Path scalaFolder =  Paths.get(zConf.getZeppelinHome(), "/interpreter/spark/scala-" + scalaVersion);
         if (!scalaFolder.toFile().exists()) {
           throw new IOException("spark scala folder " + scalaFolder.toFile() + " doesn't exist");

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/SqlInterpreterTest.java
Patch:
@@ -98,6 +98,8 @@ protected Properties getFlinkProperties() throws IOException {
     p.setProperty("zeppelin.flink.hive.version", "2.3.4");
     p.setProperty("zeppelin.pyflink.useIPython", "false");
     p.setProperty("local.number-taskmanager", "4");
+    p.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");
+
     File hiveConfDir = Files.createTempDir();
     hiveShell.getHiveConf().writeXml(new FileWriter(new File(hiveConfDir, "hive-site.xml")));
     p.setProperty("HIVE_CONF_DIR", hiveConfDir.getAbsolutePath());

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterMatplotlibTest.java
Patch:
@@ -52,6 +52,7 @@ public void setUp() throws Exception {
     p.setProperty("zeppelin.python", "python");
     p.setProperty("zeppelin.python.maxResult", "100");
     p.setProperty("zeppelin.python.useIPython", "false");
+    p.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");
 
     intpGroup = new InterpreterGroup();
 

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterPandasSqlTest.java
Patch:
@@ -66,6 +66,7 @@ public void setUp() throws Exception {
     p.setProperty("zeppelin.python", "python");
     p.setProperty("zeppelin.python.maxResult", "100");
     p.setProperty("zeppelin.python.useIPython", "false");
+    p.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");
 
     intpGroup = new InterpreterGroup();
 

File: rlang/src/test/java/org/apache/zeppelin/r/ShinyInterpreterTest.java
Patch:
@@ -101,7 +101,7 @@ public void testShinyApp() throws
     Thread.sleep(5 * 1000);
     // extract shiny url
     List<InterpreterResultMessage> resultMessages = context2.out.toInterpreterResultMessage();
-    assertEquals(1, resultMessages.size());
+    assertEquals(resultMessages.toString(), 1, resultMessages.size());
     assertEquals(InterpreterResult.Type.HTML, resultMessages.get(0).getType());
     String resultMessageData = resultMessages.get(0).getData();
     assertTrue(resultMessageData, resultMessageData.contains("<iframe"));
@@ -205,7 +205,7 @@ public void testInvalidShinyApp()
     // wait for the shiny app start
     Thread.sleep(5 * 1000);
     List<InterpreterResultMessage> resultMessages = context2.out.toInterpreterResultMessage();
-    assertEquals(1, resultMessages.size());
+    assertEquals(resultMessages.toString(), 1, resultMessages.size());
     assertEquals(InterpreterResult.Type.HTML, resultMessages.get(0).getType());
     String resultMessageData = resultMessages.get(0).getData();
     assertTrue(resultMessageData, resultMessageData.contains("<iframe"));

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkShinyInterpreterTest.java
Patch:
@@ -102,7 +102,7 @@ public void testSparkShinyApp() throws IOException, InterpreterException, Interr
     Thread.sleep(5 * 1000);
     // extract shiny url
     List<InterpreterResultMessage> resultMessages = context2.out.toInterpreterResultMessage();
-    assertEquals(1, resultMessages.size());
+    assertEquals(resultMessages.toString(), 1, resultMessages.size());
     assertEquals(InterpreterResult.Type.HTML, resultMessages.get(0).getType());
     String resultMessageData = resultMessages.get(0).getData();
     assertTrue(resultMessageData, resultMessageData.contains("<iframe"));

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/JdbcIntegrationTest.java
Patch:
@@ -90,6 +90,9 @@ public void testMySql() throws InterpreterException, InterruptedException {
     assertEquals("c1\tc2\n1\t2\n", interpreterResult.message().get(0).getData());
 
     // read table_1 from python interpreter
+    InterpreterSetting pythonInterpreterSetting = interpreterSettingManager.getInterpreterSettingByName("python");
+    pythonInterpreterSetting.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");
+
     Interpreter pythonInterpreter = interpreterFactory.getInterpreter("python", new ExecutionContext("user1", "note1", "test"));
     assertNotNull("PythonInterpreter is null", pythonInterpreter);
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest.java
Patch:
@@ -98,6 +98,8 @@ private void testInterpreterBasics() throws IOException, InterpreterException, X
     InterpreterSetting sparkInterpreterSetting = interpreterSettingManager.getInterpreterSettingByName("spark");
     sparkInterpreterSetting.setProperty("spark.jars.packages", "com.maxmind.geoip2:geoip2:2.5.0");
     sparkInterpreterSetting.setProperty("SPARK_PRINT_LAUNCH_COMMAND", "true");
+    sparkInterpreterSetting.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");
+
     MavenXpp3Reader reader = new MavenXpp3Reader();
     Model model = reader.read(new FileReader("pom.xml"));
     sparkInterpreterSetting.setProperty("spark.jars", new File("target/zeppelin-interpreter-integration-" + model.getVersion() + ".jar").getAbsolutePath());

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZSessionIntegrationTest.java
Patch:
@@ -392,6 +392,7 @@ public void testZSession_Flink_Submit() throws Exception {
   @Test
   public void testZSession_Python() throws Exception {
     Map<String, String> intpProperties = new HashMap<>();
+    intpProperties.put("zeppelin.python.gatewayserver_address", "127.0.0.1");
 
     ZSession session = ZSession.builder()
             .setClientConfig(clientConfig)
@@ -434,6 +435,7 @@ public void testZSession_Python() throws Exception {
   @Test
   public void testZSessionCleanup() throws Exception {
     Map<String, String> intpProperties = new HashMap<>();
+    intpProperties.put("zeppelin.python.gatewayserver_address", "127.0.0.1");
 
     ZSession session = ZSession.builder()
             .setClientConfig(clientConfig)

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterRPCException.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class InterpreterRPCException extends org.apache.thrift.TException implements org.apache.thrift.TBase<InterpreterRPCException, InterpreterRPCException._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterRPCException> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterRPCException");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ParagraphInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class ParagraphInfo implements org.apache.thrift.TBase<ParagraphInfo, ParagraphInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ParagraphInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParagraphInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public enum RemoteInterpreterEventType implements org.apache.thrift.TEnum {
   NO_OP(1),
   ANGULAR_OBJECT_ADD(2),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ServiceException.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class ServiceException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/WebUrlInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-03-09")
 public class WebUrlInfo implements org.apache.thrift.TBase<WebUrlInfo, WebUrlInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WebUrlInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WebUrlInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -932,7 +932,7 @@ public enum ConfVars {
     ZEPPELIN_INTERPRETER_DEP_MVNREPO("zeppelin.interpreter.dep.mvnRepo",
         "https://repo1.maven.org/maven2/"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 60000),
-    ZEPPELIN_INTERPRETER_CONNECTION_POOL_SIZE("zeppelin.interpreter.connection.poolsize", 10),
+    ZEPPELIN_INTERPRETER_CONNECTION_POOL_SIZE("zeppelin.interpreter.connection.poolsize", 100),
     ZEPPELIN_INTERPRETER_GROUP_DEFAULT("zeppelin.interpreter.group.default", "spark"),
     ZEPPELIN_INTERPRETER_OUTPUT_LIMIT("zeppelin.interpreter.output.limit", 1024 * 100),
     ZEPPELIN_INTERPRETER_INCLUDES("zeppelin.interpreter.include", ""),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/util/SqlSplitter.java
Patch:
@@ -102,15 +102,15 @@ public List<String> splitSql(String text) {
         multiLineComment = false;
       }
 
-      if (character == '\'') {
+      if (character == '\'' && !(singleLineComment || multiLineComment)) {
         if (singleQuoteString) {
           singleQuoteString = false;
         } else if (!doubleQuoteString) {
           singleQuoteString = true;
         }
       }
 
-      if (character == '"') {
+      if (character == '"' && !(singleLineComment || multiLineComment)) {
         if (doubleQuoteString && index > 0) {
           doubleQuoteString = false;
         } else if (!singleQuoteString) {

File: spark/spark-shims/src/main/scala/org/apache/zeppelin/spark/SparkVersion.java
Patch:
@@ -33,9 +33,10 @@ public class SparkVersion {
   public static final SparkVersion SPARK_2_3_1 = SparkVersion.fromVersionString("2.3.1");
   public static final SparkVersion SPARK_2_4_0 = SparkVersion.fromVersionString("2.4.0");
   public static final SparkVersion SPARK_3_1_0 = SparkVersion.fromVersionString("3.1.0");
+  public static final SparkVersion SPARK_3_2_0 = SparkVersion.fromVersionString("3.2.0");
 
   public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_1_6_0;
-  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_3_1_0;
+  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_3_2_0;
 
   private int version;
   private int majorVersion;

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest24.java
Patch:
@@ -33,7 +33,7 @@ public SparkIntegrationTest24(String sparkVersion, String hadoopVersion) {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.4.4", "2.7"}
+            {"2.4.7", "2.7"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest30.java
Patch:
@@ -34,8 +34,8 @@ public SparkIntegrationTest30(String sparkVersion, String hadoopVersion) {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"3.0.1", "2.7"},
-            {"3.0.1", "3.2"}
+            {"3.0.2", "2.7"},
+            {"3.0.2", "3.2"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest24.java
Patch:
@@ -33,7 +33,7 @@ public ZeppelinSparkClusterTest24(String sparkVersion, String hadoopVersion) thr
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.4.4", "2.7"}
+            {"2.4.7", "2.7"}
     });
   }
 }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest30.java
Patch:
@@ -33,8 +33,8 @@ public ZeppelinSparkClusterTest30(String sparkVersion, String hadoopVersion) thr
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"3.0.1", "2.7"},
-            {"3.0.1", "3.2"}
+            {"3.0.2", "2.7"},
+            {"3.0.2", "3.2"}
     });
   }
 }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.hadoop.yarn.api.records.YarnApplicationState;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;
 import org.apache.hadoop.yarn.exceptions.YarnException;
-import org.apache.zeppelin.interpreter.ExecutionContextBuilder;
+import org.apache.zeppelin.interpreter.ExecutionContext;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -94,7 +94,7 @@ public static void tearDown() throws IOException {
 
   private void testInterpreterBasics() throws IOException, InterpreterException {
     // test FlinkInterpreter
-    Interpreter flinkInterpreter = interpreterFactory.getInterpreter("flink", new ExecutionContextBuilder().setUser("user1").setNoteId("note1").setDefaultInterpreterGroup("flink").createExecutionContext());
+    Interpreter flinkInterpreter = interpreterFactory.getInterpreter("flink", new ExecutionContext("user1", "note1", "flink"));
 
     InterpreterContext context = new InterpreterContext.Builder().setNoteId("note1").setParagraphId("paragraph_1").build();
     InterpreterResult interpreterResult = flinkInterpreter.interpret("1+1", context);
@@ -119,7 +119,7 @@ public void testFlinkCmd() throws InterpreterException {
     InterpreterSetting flinkCmdInterpreterSetting = interpreterSettingManager.getInterpreterSettingByName("flink-cmd");
     flinkCmdInterpreterSetting.setProperty("FLINK_HOME", flinkHome);
 
-    Interpreter flinkCmdInterpreter = interpreterFactory.getInterpreter("flink-cmd", new ExecutionContextBuilder().setUser("user1").setNoteId("note1").setDefaultInterpreterGroup("flink").createExecutionContext());
+    Interpreter flinkCmdInterpreter = interpreterFactory.getInterpreter("flink-cmd", new ExecutionContext("user1", "note1", "flink"));
     InterpreterContext context = new InterpreterContext.Builder().setNoteId("note1").setParagraphId("paragraph_1").build();
     InterpreterResult interpreterResult = flinkCmdInterpreter.interpret("info -c org.apache.flink.streaming.examples.wordcount.WordCount " + flinkHome + "/examples/streaming/WordCount.jar", context);
     assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/JdbcIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.collect.Lists;
 import org.apache.zeppelin.dep.Dependency;
-import org.apache.zeppelin.interpreter.ExecutionContextBuilder;
+import org.apache.zeppelin.interpreter.ExecutionContext;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -71,7 +71,7 @@ public void testMySql() throws InterpreterException, InterruptedException {
     interpreterSetting.setDependencies(Lists.newArrayList(dependency));
     interpreterSettingManager.restart(interpreterSetting.getId());
     interpreterSetting.waitForReady(60 * 1000);
-    Interpreter jdbcInterpreter = interpreterFactory.getInterpreter("jdbc", new ExecutionContextBuilder().setUser("user1").setNoteId("note1").setDefaultInterpreterGroup("test").createExecutionContext());
+    Interpreter jdbcInterpreter = interpreterFactory.getInterpreter("jdbc", new ExecutionContext("user1", "note1", "test"));
     assertNotNull("JdbcInterpreter is null", jdbcInterpreter);
 
     InterpreterContext context = new InterpreterContext.Builder()
@@ -90,7 +90,7 @@ public void testMySql() throws InterpreterException, InterruptedException {
     assertEquals("c1\tc2\n1\t2\n", interpreterResult.message().get(0).getData());
 
     // read table_1 from python interpreter
-    Interpreter pythonInterpreter = interpreterFactory.getInterpreter("python", new ExecutionContextBuilder().setUser("user1").setNoteId("note1").setDefaultInterpreterGroup("test").createExecutionContext());
+    Interpreter pythonInterpreter = interpreterFactory.getInterpreter("python", new ExecutionContext("user1", "note1", "test"));
     assertNotNull("PythonInterpreter is null", pythonInterpreter);
 
     context = new InterpreterContext.Builder()

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -196,7 +196,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent()
       List<InterpreterSetting> settings = notebook.getInterpreterSettingManager().get();
       for (InterpreterSetting setting : settings) {
         if (setting.getName().equals("md")) {
-          interpreterGroup = setting.getOrCreateInterpreterGroup("anonymous", "sharedProcess");
+          interpreterGroup = setting.getOrCreateInterpreterGroup("anonymous", note1.getId());
           break;
         }
       }
@@ -269,7 +269,7 @@ public void testAngularObjectSaveToNote()
       List<InterpreterSetting> settings = note1.getBindedInterpreterSettings(new ArrayList<>());
       for (InterpreterSetting setting : settings) {
         if (setting.getName().equals("angular")) {
-          interpreterGroup = setting.getOrCreateInterpreterGroup("anonymous", "sharedProcess");
+          interpreterGroup = setting.getOrCreateInterpreterGroup("anonymous", note1.getId());
           break;
         }
       }
@@ -373,7 +373,7 @@ public void testLoadAngularObjectFromNote() throws IOException, InterruptedExcep
       List<InterpreterSetting> settings = notebook.getInterpreterSettingManager().get();
       for (InterpreterSetting setting : settings) {
         if (setting.getName().equals("angular")) {
-          interpreterGroup = setting.getOrCreateInterpreterGroup("anonymous", "sharedProcess");
+          interpreterGroup = setting.getOrCreateInterpreterGroup("anonymous", note1.getId());
           break;
         }
       }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -38,7 +38,6 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.AngularObjectRegistry;
-import org.apache.zeppelin.interpreter.ExecutionContextBuilder;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterFactory;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
@@ -548,8 +547,7 @@ public Note loadNoteFromRepo(String id, AuthenticationInfo subject) {
       SnapshotAngularObject snapshot = angularObjectSnapshotEntry.getValue();
       List<InterpreterSetting> settings = interpreterSettingManager.get();
       for (InterpreterSetting setting : settings) {
-        InterpreterGroup intpGroup = setting.getInterpreterGroup(
-                new ExecutionContextBuilder().setUser(subject.getUser()).setNoteId(note.getId()).createExecutionContext());
+        InterpreterGroup intpGroup = setting.getInterpreterGroup(note.getExecutionContext());
         if (intpGroup != null && intpGroup.getId().equals(snapshot.getIntpGroupId())) {
           AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();
           String noteId = snapshot.getAngularObject().getNoteId();

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -392,7 +392,7 @@ public Response createNote(String message) throws IOException {
     Note note = notebookService.createNote(
             request.getName(),
             defaultInterpreterGroup,
-            false,
+            request.getAddingEmptyParagraph(),
             getServiceContext(),
             new RestServiceCallback<>());
     AuthenticationInfo subject = new AuthenticationInfo(authenticationService.getPrincipal());

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.spark.SparkContext;
 import org.apache.spark.api.java.JavaSparkContext;
-import org.apache.spark.sql.SQLContext;
 import org.apache.zeppelin.interpreter.ZeppelinContext;
 
 /**

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class InterpreterContext {
   private static final ThreadLocal<InterpreterContext> threadIC = new ThreadLocal<>();
-  private static final ConcurrentHashMap<Thread, InterpreterContext> allContexts = new ConcurrentHashMap();
+  private static final ConcurrentHashMap<Thread, InterpreterContext> allContexts = new ConcurrentHashMap<>();
 
   public InterpreterOutput out;
 

File: zeppelin-plugins/launcher/docker/src/main/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterLauncher.java
Patch:
@@ -39,7 +39,7 @@ public DockerInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage re
 
   @Override
   public InterpreterClient launchDirectly(InterpreterLaunchContext context) throws IOException {
-    LOGGER.info("Launching Interpreter: " + context.getInterpreterSettingGroup());
+    LOGGER.info("Launching Interpreter: {}", context.getInterpreterSettingGroup());
     this.context = context;
     this.properties = context.getProperties();
     int connectTimeout = getConnectTimeout();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Credentials.java
Patch:
@@ -137,7 +137,7 @@ private void loadCredentials() throws IOException {
   private void loadFromFile() throws IOException {
     try {
       String json = storage.loadCredentials();
-      if (encryptor != null) {
+      if (json != null && encryptor != null) {
         json = encryptor.decrypt(json);
       }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -522,6 +522,9 @@ public void closeInterpreters(ExecutionContext executionContext) {
     if (interpreterGroup != null) {
       String sessionId = getInterpreterSessionId(executionContext);
       interpreterGroup.close(sessionId);
+      if (interpreterGroup.isEmpty()) {
+        interpreterGroups.remove(interpreterGroup.getId());
+      }
     }
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java
Patch:
@@ -183,4 +183,7 @@ public synchronized List<Interpreter> getOrCreateSession(String user, String ses
     }
   }
 
+  public boolean isEmpty() {
+    return this.sessions.isEmpty();
+  }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/ExecRemoteInterpreterProcess.java
Patch:
@@ -124,6 +124,8 @@ public void stop() {
       this.interpreterProcessLauncher = null;
       LOGGER.info("Remote exec process of interpreter group: {} is terminated", getInterpreterGroupId());
     } else {
+      // Shutdown connection
+      shutdown();
       LOGGER.warn("Try to stop a not running interpreter process of interpreter group: {}", getInterpreterGroupId());
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -75,6 +75,7 @@ public String getStartTime() {
   public void shutdown() {
     if (remoteClient != null) {
       remoteClient.shutdown();
+      remoteClient = null;
     }
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -831,6 +831,9 @@ private void runAllSync(AuthenticationInfo authInfo, boolean isolated, Map<Strin
                   .setStartTime(getStartTime())
                   .createExecutionContext();
           setting.closeInterpreters(executionContext);
+          for (Paragraph p : paragraphs) {
+            p.setInterpreter(null);
+          }
         }
       }
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -343,6 +343,7 @@ public void removeNote(Note note, AuthenticationInfo subject) throws IOException
     // Set Remove to true to cancel saving this note
     note.setRemoved(true);
     noteManager.removeNote(note.getId(), subject);
+    authorizationService.removeNoteAuth(note.getId());
     fireNoteRemoveEvent(note, subject);
   }
 

File: flink/flink-shims/src/main/java/org/apache/zeppelin/flink/FlinkShims.java
Patch:
@@ -121,6 +121,8 @@ public abstract Object getCollectStreamTableSink(InetAddress targetAddress,
 
   public abstract Object toDataSet(Object btenv, Object table);
 
+  public abstract void registerScalarFunction(Object btenv, String name, Object scalarFunction);
+
   public abstract void registerTableFunction(Object btenv, String name, Object tableFunction);
 
   public abstract void registerAggregateFunction(Object btenv, String name, Object aggregateFunction);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -315,7 +315,7 @@ public void onMessage(NotebookSocket conn, String msg) {
           getNote(conn, context, messagereceived);
           break;
         case RELOAD_NOTE:
-          reloadNote(conn, messagereceived);
+          reloadNote(conn, context, messagereceived);
           break;
         case NEW_NOTE:
           createNote(conn, context, messagereceived);
@@ -835,12 +835,12 @@ public void onSuccess(Note note, ServiceContext context) throws IOException {
         });
   }
 
-  private void reloadNote(NotebookSocket conn, Message fromMessage) throws IOException {
+  private void reloadNote(NotebookSocket conn, ServiceContext context, Message fromMessage) throws IOException {
     String noteId = (String) fromMessage.get("id");
     if (noteId == null) {
       return;
     }
-    getNotebookService().getNote(noteId, true, getServiceContext(fromMessage),
+    getNotebookService().getNote(noteId, true, context,
             new WebSocketServiceCallback<Note>(conn) {
               @Override
               public void onSuccess(Note note, ServiceContext context) throws IOException {

File: zeppelin-common/src/main/java/org/apache/zeppelin/common/Message.java
Patch:
@@ -41,6 +41,9 @@ public enum OP {
     GET_NOTE,         // [c-s] client load note
                       // @param id note id
 
+    RELOAD_NOTE,      // [c-s] client load note
+                      // @param id note id
+
     NOTE,             // [s-c] note info
                       // @param note serialized Note object
 

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/IPyFlinkInterpreterTest.java
Patch:
@@ -136,7 +136,8 @@ public void testAppendStreamTableApi() throws InterpreterException, IOException
     testAppendStreamTableApi(interpreter, flinkScalaInterpreter);
   }
 
-  @Test
+  // TODO(zjffdu) flaky test
+  // @Test
   public void testCancelStreamSql() throws InterpreterException, IOException, TimeoutException, InterruptedException {
     testCancelStreamSql(interpreter, flinkScalaInterpreter);
   }

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -29,6 +29,7 @@
 
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.RandomStringUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils;
@@ -112,7 +113,8 @@ public K8sRemoteInterpreterProcess(
     this.properties = properties;
     this.portForward = portForward;
     this.sparkImage = sparkImage;
-    this.podName = interpreterGroupName.toLowerCase() + "-" + K8sUtils.getRandomPodSuffix(6);
+    this.podName = interpreterGroupName.toLowerCase() + "-"
+        + RandomStringUtils.randomAlphabetic(6).toLowerCase();
     this.timeoutDuringPending = timeoutDuringPending;
   }
 

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -140,7 +140,7 @@ public void start(String userName) throws IOException {
     apply(specTemplates, false, templateProperties);
 
     // special handling if we doesn't want timeout the process during lifecycle phase pending
-    if (timeoutDuringPending) {
+    if (!timeoutDuringPending) {
       while (!StringUtils.equalsAnyIgnoreCase(getPodPhase(), "Succeeded", "Failed", "Running")
           && !Thread.currentThread().isInterrupted()) {
         try {

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcessTest.java
Patch:
@@ -503,7 +503,7 @@ public void testK8sStartTimeoutPending() throws IOException, InterruptedExceptio
         3000,
         10,
         false,
-        true);
+        false);
     PodStatusSimulator podStatusSimulator = new PodStatusSimulator(server.getClient(), intp.getNamespace(), intp.getPodName(), intp);
     podStatusSimulator.setFirstPhase("Pending");
     podStatusSimulator.setSecondPhase("Pending");

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ParagraphInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class ParagraphInfo implements org.apache.thrift.TBase<ParagraphInfo, ParagraphInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ParagraphInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParagraphInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public enum RemoteInterpreterEventType implements org.apache.thrift.TEnum {
   NO_OP(1),
   ANGULAR_OBJECT_ADD(2),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ServiceException.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class ServiceException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/WebUrlInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2021-01-22")
 public class WebUrlInfo implements org.apache.thrift.TBase<WebUrlInfo, WebUrlInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WebUrlInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WebUrlInfo");
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest110.java
Patch:
@@ -29,7 +29,7 @@ public class FlinkIntegrationTest110 extends FlinkIntegrationTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.10.2"}
+            {"1.10.3"}
     });
   }
 

File: neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jCypherInterpreter.java
Patch:
@@ -238,7 +238,7 @@ private void addValueToLine(String key, List<String> columns, List<String> line,
         try {
           value = Neo4jConversionUtils.JSON_MAPPER.writer().writeValueAsString(value);
         } catch (Exception e) {
-          LOGGER.debug("ignored exception: " + e.getMessage());
+          LOGGER.debug("ignored exception: {}", e.getMessage());
         }
       }
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -107,7 +107,7 @@ public class RemoteInterpreterServer extends Thread
 
   private static final Logger LOGGER = LoggerFactory.getLogger(RemoteInterpreterServer.class);
 
-  private static final int DEFAULT_SHUTDOWN_TIMEOUT = 2000;
+  public static final int DEFAULT_SHUTDOWN_TIMEOUT = 2000;
 
   private String interpreterGroupId;
   private InterpreterGroup interpreterGroup;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/util/ProcessLauncher.java
Patch:
@@ -197,7 +197,7 @@ protected void processLine(String s, int i) {
         try {
           redirectedContext.out.write(s + "\n");
         } catch (IOException e) {
-          e.printStackTrace();
+          LOGGER.error("unable to write to redirectedContext", e);
         }
       }
     }

File: markdown/src/main/java/org/apache/zeppelin/markdown/UMLBlockQuoteParser.java
Patch:
@@ -129,13 +129,14 @@ public void parseInlines(InlineParser inlineParser) {
    * Generic Factory
    */
   public static class Factory implements CustomBlockParserFactory {
+
     @Override
-    public Set<Class<? extends CustomBlockParserFactory>> getAfterDependents() {
+    public Set<Class<?>> getAfterDependents() {
       return null;
     }
 
     @Override
-    public Set<Class<? extends CustomBlockParserFactory>> getBeforeDependents() {
+    public Set<Class<?>> getBeforeDependents() {
       return null;
     }
 

File: markdown/src/main/java/org/apache/zeppelin/markdown/UMLExtension.java
Patch:
@@ -20,7 +20,7 @@
 import com.vladsch.flexmark.html.HtmlRenderer;
 import com.vladsch.flexmark.parser.Parser;
 import com.vladsch.flexmark.util.data.MutableDataHolder;
-import com.vladsch.flexmark.util.builder.Extension;
+import com.vladsch.flexmark.util.misc.Extension;
 
 
 /**

File: markdown/src/main/java/org/apache/zeppelin/markdown/UMLNodeRenderer.java
Patch:
@@ -18,12 +18,12 @@
 package org.apache.zeppelin.markdown;
 
 import com.vladsch.flexmark.ext.gitlab.internal.GitLabOptions;
-import com.vladsch.flexmark.html.CustomNodeRenderer;
 import com.vladsch.flexmark.html.HtmlWriter;
 import com.vladsch.flexmark.html.renderer.NodeRenderer;
 import com.vladsch.flexmark.html.renderer.NodeRendererFactory;
 import com.vladsch.flexmark.html.renderer.NodeRendererContext;
 import com.vladsch.flexmark.html.renderer.NodeRenderingHandler;
+import com.vladsch.flexmark.html.renderer.NodeRenderingHandler.CustomNodeRenderer;
 import com.vladsch.flexmark.util.data.DataHolder;
 
 import org.slf4j.Logger;

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -148,9 +148,6 @@ public void cancel(InterpreterContext context) throws InterpreterException {
   public void close() throws InterpreterException {
     LOGGER.info("Close IPySparkInterpreter");
     super.close();
-    if (sparkInterpreter != null) {
-      sparkInterpreter.close();
-    }
   }
 
   @Override

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -109,10 +109,8 @@ public void open() throws InterpreterException {
 
   @Override
   public void close() throws InterpreterException {
+    LOGGER.info("Close PySparkInterpreter");
     super.close();
-    if (sparkInterpreter != null) {
-      sparkInterpreter.close();
-    }
   }
 
   @Override

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -207,7 +207,7 @@ public int getProgress(InterpreterContext context) throws InterpreterException {
 
   public ZeppelinContext getZeppelinContext() {
     if (this.innerInterpreter == null) {
-      LOGGER.error("innerInterpreter is null!");
+      throw new RuntimeException("innerInterpreterContext is null");
     }
     return this.innerInterpreter.getZeppelinContext();
   }

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/FlinkSqlInterrpeter.java
Patch:
@@ -129,6 +129,7 @@ private InterpreterResult runSqlList(String st, InterpreterContext context) {
       boolean runAsOne = Boolean.parseBoolean(context.getStringLocalProperty("runAsOne", "false"));
       List<String> sqls = sqlSplitter.splitSql(st).stream().map(String::trim).collect(Collectors.toList());
       boolean isFirstInsert = true;
+      boolean hasInsert = false;
       for (String sql : sqls) {
         Optional<SqlCommandParser.SqlCommandCall> sqlCommand = sqlCommandParser.parse(sql);
         if (!sqlCommand.isPresent()) {
@@ -143,6 +144,7 @@ private InterpreterResult runSqlList(String st, InterpreterContext context) {
         try {
           if (sqlCommand.get().command == SqlCommand.INSERT_INTO ||
                   sqlCommand.get().command == SqlCommand.INSERT_OVERWRITE) {
+            hasInsert = true;
             if (isFirstInsert && runAsOne) {
               flinkInterpreter.getFlinkShims().startMultipleInsert(tbenv, context);
               isFirstInsert = false;
@@ -164,7 +166,7 @@ private InterpreterResult runSqlList(String st, InterpreterContext context) {
         }
       }
 
-      if (runAsOne) {
+      if (runAsOne && hasInsert) {
         try {
           lock.lock();
           String jobName = context.getStringLocalProperty("jobName", st);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -591,7 +591,7 @@ public void testScheduleAgainstRunningAndPendingParagraph() throws InterruptedEx
   public void testSchedulePoolUsage() throws InterruptedException, IOException {
     final int timeout = 30;
     final String everySecondCron = "* * * * * ?";
-    final CountDownLatch jobsToExecuteCount = new CountDownLatch(13);
+    final CountDownLatch jobsToExecuteCount = new CountDownLatch(8);
     final Note note = notebook.createNote("note1", anonymous);
 
     executeNewParagraphByCron(note, everySecondCron);
@@ -655,7 +655,7 @@ public void testScheduleDisabledWithName() throws InterruptedException, IOExcept
 
     System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_CRON_FOLDERS.getVarName(), "/System");
     try {
-      final int timeout = 10;
+      final int timeout = 20;
       final String everySecondCron = "* * * * * ?";
       final CountDownLatch jobsToExecuteCount = new CountDownLatch(5);
       final Note note = notebook.createNote("note1", anonymous);

File: spark-submit/src/main/java/org/apache/zeppelin/spark/submit/SparkSubmitInterpreter.java
Patch:
@@ -16,7 +16,7 @@
  */
 
 
-package org.apache.zeppelin.spark;
+package org.apache.zeppelin.spark.submit;
 
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
@@ -32,7 +32,7 @@
 
 
 /**
- * Support %spark.submit which run spark-submit command. Internally,
+ * Support %spark-submit which run spark-submit command. Internally,
  * it would run shell command via ShellInterpreter.
  *
  */
@@ -66,7 +66,7 @@ private static class SparkSubmitOutputListener implements InterpreterOutputListe
     private InterpreterContext context;
     private boolean isSparkUrlSent = false;
 
-    public SparkSubmitOutputListener(InterpreterContext context) {
+    SparkSubmitOutputListener(InterpreterContext context) {
       this.context = context;
     }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ParagraphTextParser.java
Patch:
@@ -67,7 +67,7 @@ public Map<String, String> getLocalProperties() {
     }
   }
 
-  private static final Pattern REPL_PATTERN = Pattern.compile("^(\\s*)%(\\w+(?:\\.\\w+)*)");
+  private static final Pattern REPL_PATTERN = Pattern.compile("^(\\s*)%([a-zA-Z0-9_\\-]+(?:\\.\\w+)*)");
 
   private static int parseLocalProperties(
           final String text, int startPos,

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -82,7 +82,8 @@ private ZeppelinConfiguration(@Nullable String filename) {
      try {
       loadXMLConfig(filename);
     } catch (ConfigurationException e) {
-      LOGGER.warn("Failed to load configuration, proceeding with a default", e);
+      LOGGER.warn("Failed to load XML configuration, proceeding with a default,for a stacktrace activate the debug log");
+      LOGGER.debug("Failed to load XML configuration", e);
     }
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -154,7 +154,6 @@ public ZeppelinServer() {
 
   public static void main(String[] args) throws InterruptedException, IOException {
     ZeppelinServer.conf = ZeppelinConfiguration.create();
-    conf.setProperty("args", args);
 
     jettyWebServer = setupJettyServer(conf);
     initMetrics(conf);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/YarnAppMonitor.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.hadoop.yarn.client.api.YarnClient;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
+import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess;
 import org.apache.zeppelin.scheduler.SchedulerThreadFactory;
 import org.slf4j.Logger;
@@ -93,8 +94,8 @@ private YarnAppMonitor() {
                   LOGGER.warn("Fail to check yarn app status", e);
                 }
               },
-              conf.getInt("zeppelin.interpreter.yarn.monitor.interval_secs", 10),
-              conf.getInt("zeppelin.interpreter.yarn.monitor.interval_secs", 10),
+              conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_YARN_MONITOR_INTERVAL_SECS),
+              conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_YARN_MONITOR_INTERVAL_SECS),
               TimeUnit.SECONDS);
 
       LOGGER.info("YarnAppMonitor is started");

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -100,7 +100,7 @@ public <R> R callRemoteFunction(PooledRemoteClient.RemoteFunction<R, Client> fun
 
   public void init(ZeppelinConfiguration zConf) {
     callRemoteFunction(client -> {
-      client.init(zConf.getProperties());
+      client.init(zConf.getCompleteConfiguration());
       return null;
     });
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Credentials.java
Patch:
@@ -52,7 +52,7 @@ public class Credentials {
    */
   public Credentials(ZeppelinConfiguration conf) {
     credentialsMap = new HashMap<>();
-    if (conf.credentialsPersist().booleanValue()) {
+    if (conf.credentialsPersist()) {
       String encryptKey = conf.getCredentialsEncryptKey();
       if (StringUtils.isNotBlank(encryptKey)) {
         this.encryptor = new Encryptor(encryptKey);

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest111.java
Patch:
@@ -29,7 +29,7 @@ public class FlinkIntegrationTest111 extends FlinkIntegrationTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.11.2"}
+            {"1.11.3"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinFlinkClusterTest111.java
Patch:
@@ -29,7 +29,7 @@ public class ZeppelinFlinkClusterTest111 extends ZeppelinFlinkClusterTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.11.2"}
+            {"1.11.3"}
     });
   }
 

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -513,7 +513,7 @@ public Connection getConnection(String dbPrefix, InterpreterContext context)
     String url = properties.getProperty(URL_KEY);
     String connectionUrl = appendProxyUserToURL(url, user, dbPrefix);
 
-    String authType = properties.getProperty("zeppelin.jdbc.auth.type", "SIMPLE")
+    String authType = getProperty("zeppelin.jdbc.auth.type", "SIMPLE")
             .trim().toUpperCase();
     switch (authType) {
       case "SIMPLE":

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -627,7 +627,7 @@ public Properties getJavaProperties() {
     Properties jProperties = new Properties();
     Map<String, InterpreterProperty> iProperties = (Map<String, InterpreterProperty>) properties;
     for (Map.Entry<String, InterpreterProperty> entry : iProperties.entrySet()) {
-      if (entry.getValue().getValue() != null) {
+      if (entry.getValue().getValue() != null && StringUtils.isNotBlank(entry.getValue().getValue().toString())) {
         jProperties.setProperty(entry.getKey().trim(),
             entry.getValue().getValue().toString().trim());
       }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1685,7 +1685,7 @@ public void onOutputUpdated(String noteId, String paragraphId, int index,
     try {
       Note note = getNotebook().getNote(noteId);
       if (note == null) {
-        LOG.warn("Note " + noteId + " note found");
+        LOG.warn("Note {} not found", noteId);
         return;
       }
       Paragraph paragraph = note.getParagraph(paragraphId);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -332,6 +332,8 @@ public Note cloneNote(String sourceNoteId, String newNotePath, AuthenticationInf
 
   public void removeNote(Note note, AuthenticationInfo subject) throws IOException {
     LOGGER.info("Remove note: {}", note.getId());
+    // Set Remove to true to cancel saving this note
+    note.setRemoved(true);
     noteManager.removeNote(note.getId(), subject);
     fireNoteRemoveEvent(note, subject);
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/ZeppelinHubRealm.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.realm;
 
-import com.google.common.base.Joiner;
 import com.google.gson.Gson;
 import com.google.gson.JsonParseException;
 import java.io.IOException;
@@ -131,7 +130,7 @@ public void setZeppelinhubUrl(String url) {
   protected User authenticateUser(String requestBody) {
     String responseBody;
     String userSession;
-    HttpPut put = new HttpPut(Joiner.on("/").join(zeppelinhubUrl, USER_LOGIN_API_ENDPOINT));
+    HttpPut put = new HttpPut(String.join("/", zeppelinhubUrl, USER_LOGIN_API_ENDPOINT));
     put.setEntity(new StringEntity(requestBody, ContentType.APPLICATION_JSON));
     try (CloseableHttpResponse response = httpClient.execute(put)){
       if (HttpStatus.SC_OK != response.getStatusLine().getStatusCode()) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -31,6 +31,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Map;
 
@@ -124,6 +125,6 @@ public void testUpdateSettings() throws IOException {
 
   private void createNewNote(String content, String noteId, String noteName) throws IOException {
     FileUtils.writeStringToFile(
-        new File(notebookDir + "/" + noteName + "_" + noteId + ".zpln"), content);
+        new File(notebookDir + "/" + noteName + "_" + noteId + ".zpln"), content, StandardCharsets.UTF_8);
   }
 }

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -229,7 +229,7 @@ public Scheduler getScheduler() {
       if (sparkInterpreter != null) {
         return sparkInterpreter.getScheduler();
       } else {
-        return null;
+        return super.getScheduler();
       }
     }
   }

File: sparql/src/test/java/org/apache/zeppelin/sparql/SparqlJenaEngineTest.java
Patch:
@@ -173,7 +173,7 @@ public void testRemoteEndpoint() {
     assertEquals(Code.SUCCESS, result.code());
 
     final String expected =
-            "?athlete\n<http://dbpedia.org/resource/Category:git Cristiano_Ronaldo>\n";
+            "?athlete\n<http://dbpedia.org/resource/Category:Cristiano_Ronaldo>\n";
     assertEquals(expected, result.message().get(0).getData());
   }
 

File: sparql/src/test/java/org/apache/zeppelin/sparql/SparqlJenaEngineTest.java
Patch:
@@ -172,7 +172,8 @@ public void testRemoteEndpoint() {
     final InterpreterResult result = interpreter.interpret(query, null);
     assertEquals(Code.SUCCESS, result.code());
 
-    final String expected = "?athlete\n<http://dbpedia.org/resource/Category:git Cristiano_Ronaldo>\n";
+    final String expected =
+            "?athlete\n<http://dbpedia.org/resource/Category:git Cristiano_Ronaldo>\n";
     assertEquals(expected, result.message().get(0).getData());
   }
 

File: sparql/src/test/java/org/apache/zeppelin/sparql/SparqlJenaEngineTest.java
Patch:
@@ -172,7 +172,7 @@ public void testRemoteEndpoint() {
     final InterpreterResult result = interpreter.interpret(query, null);
     assertEquals(Code.SUCCESS, result.code());
 
-    final String expected = "?athlete\n<http://dbpedia.org/resource/Cristiano_Ronaldo>\n";
+    final String expected = "?athlete\n<http://dbpedia.org/resource/Category:git Cristiano_Ronaldo>\n";
     assertEquals(expected, result.message().get(0).getData());
   }
 

File: flink/flink1.12-shims/src/main/java/org/apache/zeppelin/flink/Flink112Shims.java
Patch:
@@ -82,7 +82,7 @@
 import org.apache.flink.types.Row;
 import org.apache.flink.types.RowKind;
 import org.apache.flink.util.FlinkException;
-import org.apache.zeppelin.flink.shims111.CollectStreamTableSink;
+import org.apache.zeppelin.flink.shims112.CollectStreamTableSink;
 import org.apache.zeppelin.flink.shims112.Flink112ScalaShims;
 import org.apache.zeppelin.flink.sql.SqlCommandParser;
 import org.apache.zeppelin.flink.sql.SqlCommandParser.SqlCommand;

File: flink/flink1.12-shims/src/main/java/org/apache/zeppelin/flink/shims112/CollectStreamTableSink.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.flink.shims111;
+package org.apache.zeppelin.flink.shims112;
 
 import org.apache.flink.api.common.typeinfo.TypeInformation;
 import org.apache.flink.api.common.typeinfo.Types;

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -202,7 +202,7 @@ public void createSecureConfiguration() throws InterpreterException {
 
   @Override
   protected boolean isKerboseEnabled() {
-    if (!StringUtils.isAnyEmpty(getProperty("zeppelin.shell.auth.type")) && getProperty(
+    if (StringUtils.isNotBlank(getProperty("zeppelin.shell.auth.type")) && getProperty(
         "zeppelin.shell.auth.type").equalsIgnoreCase("kerberos")) {
       return true;
     }

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -200,7 +200,7 @@ protected boolean runKerberosLogin() {
       LOGGER.error("Unable to run kinit for zeppelin", e);
     }
     LOGGER.debug("Neither Keytab nor ticket based login. " +
-      "runKerberosLogin() returning false");
+        "runKerberosLogin() returning false");
     return false;
   }
 
@@ -521,7 +521,7 @@ public Connection getConnection(String dbPrefix, InterpreterContext context)
         break;
       case "KERBEROS":
         LOGGER.debug("Calling createSecureConfiguration(); this will do " +
-          "loginUserFromKeytab() if required");
+            "loginUserFromKeytab() if required");
         JDBCSecurityImpl.createSecureConfiguration(getProperties(),
                 UserGroupInformation.AuthenticationMethod.KERBEROS);
         LOGGER.debug("createSecureConfiguration() returned");

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -400,7 +400,7 @@ public void testResumeStreamSqlFromSavePoint() throws IOException, InterpreterEx
   private InterpreterContext getInterpreterContext() {
     InterpreterContext context = InterpreterContext.builder()
             .setParagraphId("paragraphId")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setAngularObjectRegistry(angularObjectRegistry)
             .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
             .build();

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/IPyFlinkInterpreterTest.java
Patch:
@@ -470,7 +470,7 @@ private static InterpreterContext createInterpreterContext() {
     InterpreterContext context = InterpreterContext.builder()
             .setNoteId("noteId")
             .setParagraphId("paragraphId")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
             .setAngularObjectRegistry(angularObjectRegistry)
             .build();
@@ -482,7 +482,7 @@ protected InterpreterContext getInterpreterContext() {
     InterpreterContext context = InterpreterContext.builder()
             .setNoteId("noteId")
             .setParagraphId("paragraphId")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setAngularObjectRegistry(angularObjectRegistry)
             .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
             .build();

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/PyFlinkInterpreterTest.java
Patch:
@@ -133,7 +133,7 @@ protected InterpreterContext getInterpreterContext() {
     InterpreterContext context = InterpreterContext.builder()
             .setNoteId("noteId")
             .setParagraphId("paragraphId")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setAngularObjectRegistry(IPyFlinkInterpreterTest.angularObjectRegistry)
             .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
             .build();

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/SqlInterpreterTest.java
Patch:
@@ -567,10 +567,9 @@ public void testShowModules() throws InterpreterException, IOException {
   protected InterpreterContext getInterpreterContext() {
     InterpreterContext context = InterpreterContext.builder()
             .setParagraphId("paragraphId")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setAngularObjectRegistry(angularObjectRegistry)
             .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
-            .setInterpreterOut(new InterpreterOutput(null))
             .build();
     InterpreterContext.set(context);
     return context;

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterInterpolationTest.java
Patch:
@@ -196,7 +196,7 @@ private InterpreterContext getInterpreterContext() {
             .setParagraphId("paragraph_1")
             .setAuthenticationInfo(new AuthenticationInfo("testUser"))
             .setResourcePool(resourcePool)
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .build();
   }
 }

File: kotlin/src/test/java/org/apache/zeppelin/kotlin/KotlinInterpreterTest.java
Patch:
@@ -298,7 +298,7 @@ public void fullTypeNamesTest() throws Exception {
   private static InterpreterContext getInterpreterContext() {
     output = "";
     InterpreterContext context = InterpreterContext.builder()
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .build();
     context.out = new InterpreterOutput(
         new InterpreterOutputListener() {

File: ksql/src/test/java/org/apache/zeppelin/ksql/KSQLInterpreterTest.java
Patch:
@@ -53,7 +53,7 @@ public class KSQLInterpreterTest {
   @Before
   public void setUpZeppelin() throws IOException {
     context = InterpreterContext.builder()
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setParagraphId("ksql-test")
         .build();
   }

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -72,7 +72,7 @@ public void open() throws InterpreterException {
     // to judge whether it is using spark2.
     try {
       InterpreterContext context = InterpreterContext.builder()
-          .setInterpreterOut(new InterpreterOutput(null))
+          .setInterpreterOut(new InterpreterOutput())
           .build();
       InterpreterResult result = sparkInterpreter.interpret("spark", context);
       if (result.code() == InterpreterResult.Code.SUCCESS &&

File: neo4j/src/test/java/org/apache/zeppelin/graph/neo4j/Neo4jCypherInterpreterTest.java
Patch:
@@ -92,7 +92,7 @@ public void setUpZeppelin() {
     p.setProperty(Neo4jCypherInterpreter.NEO4J_MULTI_STATEMENT, "false");
     interpreter = new Neo4jCypherInterpreter(p);
     context = InterpreterContext.builder()
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .build();
   }
 
@@ -334,7 +334,7 @@ public void testMultiLineInterpreter() {
     p.setProperty(Neo4jCypherInterpreter.NEO4J_MULTI_STATEMENT, "true");
     Neo4jCypherInterpreter multiLineInterpreter = new Neo4jCypherInterpreter(p);
     context = InterpreterContext.builder()
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .build();
     InterpreterResult result = multiLineInterpreter.interpret("CREATE (n:Node{name: ';'});" +
             "\nRETURN 1 AS val;", context);

File: python/src/test/java/org/apache/zeppelin/python/BasePythonInterpreterTest.java
Patch:
@@ -403,7 +403,7 @@ protected InterpreterContext getInterpreterContext() {
     return InterpreterContext.builder()
         .setNoteId("noteId")
         .setParagraphId("paragraphId")
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
         .build();
   }

File: python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java
Patch:
@@ -134,7 +134,7 @@ public void testGetRestArgsFromMatcher() {
 
   private InterpreterContext getInterpreterContext() {
     return InterpreterContext.builder()
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .build();
   }
 

File: python/src/test/java/org/apache/zeppelin/python/PythonDockerInterpreterTest.java
Patch:
@@ -78,7 +78,7 @@ public void testDeactivate() throws InterpreterException {
 
   private InterpreterContext getInterpreterContext() {
     return InterpreterContext.builder()
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .build();
   }
 }

File: rlang/src/test/java/org/apache/zeppelin/r/IRInterpreterTest.java
Patch:
@@ -38,7 +38,7 @@ protected InterpreterContext getInterpreterContext() {
     InterpreterContext context = InterpreterContext.builder()
             .setNoteId("note_1")
             .setParagraphId("paragraph_1")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setLocalProperties(new HashMap<>())
             .build();
     return context;

File: rlang/src/test/java/org/apache/zeppelin/r/RInterpreterTest.java
Patch:
@@ -137,7 +137,7 @@ private InterpreterContext getInterpreterContext() {
     InterpreterContext context = InterpreterContext.builder()
             .setNoteId("note_1")
             .setParagraphId("paragraph_1")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setLocalProperties(new HashMap<>())
             .build();
     return context;

File: rlang/src/test/java/org/apache/zeppelin/r/ShinyInterpreterTest.java
Patch:
@@ -240,7 +240,7 @@ protected InterpreterContext getInterpreterContext() {
     InterpreterContext context = InterpreterContext.builder()
             .setNoteId("note_1")
             .setParagraphId("paragraph_1")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setLocalProperties(new HashMap<>())
             .setInterpreterClassName(ShinyInterpreter.class.getName())
             .setIntpEventClient(mock(RemoteInterpreterEventClient.class))

File: shell/src/test/java/org/apache/zeppelin/shell/BaseInterpreterTest.java
Patch:
@@ -74,7 +74,7 @@ public void onRemoveAngularObject(String interpreterGroupId,
         .setParagraphId("paragraphId")
         .setAuthenticationInfo(authenticationInfo)
         .setAngularObjectRegistry(registry)
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
         .build();
   }

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -272,7 +272,7 @@ private static InterpreterContext createInterpreterContext(RemoteInterpreterEven
         .setNoteId("noteId")
         .setParagraphId("paragraphId")
         .setIntpEventClient(mockRemoteEventClient)
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .build();
   }
 }

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/KotlinSparkInterpreterTest.java
Patch:
@@ -103,7 +103,7 @@ public static void setUp() throws Exception {
         .setParagraphTitle("title")
         .setAngularObjectRegistry(new AngularObjectRegistry(intpGroup.getId(), null))
         .setResourcePool(new LocalResourcePool("id"))
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
         .build();
     context.out = new InterpreterOutput(

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterMatplotlibTest.java
Patch:
@@ -126,7 +126,7 @@ public static void setUp() throws Exception {
     intpGroup.put("note", new LinkedList<Interpreter>());
     context = InterpreterContext.builder()
         .setNoteId("note")
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
         .setAngularObjectRegistry(new AngularObjectRegistry(intpGroup.getId(), null))
         .build();

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterTest.java
Patch:
@@ -62,7 +62,7 @@ public void setUp() throws InterpreterException {
     intpGroup.put("note", new LinkedList<Interpreter>());
 
     InterpreterContext context = InterpreterContext.builder()
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setIntpEventClient(mockRemoteEventClient)
         .build();
     InterpreterContext.set(context);

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkIRInterpreterTest.java
Patch:
@@ -54,6 +54,7 @@ protected Interpreter createInterpreter(Properties properties) {
     return new SparkIRInterpreter(properties);
   }
 
+  @Override
   @Before
   public void setUp() throws InterpreterException {
     Properties properties = new Properties();
@@ -144,7 +145,7 @@ protected InterpreterContext getInterpreterContext() {
     InterpreterContext context = InterpreterContext.builder()
             .setNoteId("note_1")
             .setParagraphId("paragraph_1")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setLocalProperties(new HashMap<>())
             .setIntpEventClient(mockRemoteIntpEventClient)
             .build();

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -78,7 +78,7 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     properties.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
 
     InterpreterContext context = InterpreterContext.builder()
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setIntpEventClient(mockRemoteEventClient)
         .setAngularObjectRegistry(new AngularObjectRegistry("spark", null))
         .build();
@@ -596,7 +596,7 @@ public void tearDown() throws InterpreterException {
   private InterpreterContext getInterpreterContext() {
     output = "";
     InterpreterContext context = InterpreterContext.builder()
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setIntpEventClient(mockRemoteEventClient)
         .setAngularObjectRegistry(new AngularObjectRegistry("spark", null))
         .build();

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkRInterpreterTest.java
Patch:
@@ -57,7 +57,7 @@ public void setUp() throws InterpreterException {
     properties.setProperty("zeppelin.R.knitr", "true");
     properties.setProperty("spark.r.backendConnectionTimeout", "10");
     properties.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
-    
+
     InterpreterContext context = getInterpreterContext();
     InterpreterContext.set(context);
     sparkRInterpreter = new SparkRInterpreter(properties);
@@ -157,7 +157,7 @@ public void testInvalidR() throws InterpreterException {
     properties.setProperty("zeppelin.R.cmd", "invalid_r");
     properties.setProperty(SparkStringConstants.MASTER_PROP_NAME, "local");
     properties.setProperty(SparkStringConstants.APP_NAME_PROP_NAME, "test");
-    
+
     InterpreterGroup interpreterGroup = new InterpreterGroup();
     Interpreter sparkRInterpreter = new LazyOpenInterpreter(new SparkRInterpreter(properties));
     Interpreter sparkInterpreter = new LazyOpenInterpreter(new SparkInterpreter(properties));
@@ -183,7 +183,7 @@ private InterpreterContext getInterpreterContext() {
         .setNoteId("note_1")
         .setParagraphId("paragraph_1")
         .setIntpEventClient(mockRemoteIntpEventClient)
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setLocalProperties(new HashMap<>())
         .build();
     return context;

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -73,7 +73,7 @@ public static void setUp() throws Exception {
         .setParagraphTitle("title")
         .setAngularObjectRegistry(new AngularObjectRegistry(intpGroup.getId(), null))
         .setResourcePool(new LocalResourcePool("id"))
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
         .build();
     InterpreterContext.set(context);
@@ -188,7 +188,7 @@ public void testSingleRowResult() throws InterpreterException, IOException {
             .setParagraphTitle("title")
             .setAngularObjectRegistry(new AngularObjectRegistry(intpGroup.getId(), null))
             .setResourcePool(new LocalResourcePool("id"))
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
             .build();
     context.getLocalProperties().put("template", "Total count: <h1>{0}</h1>, Total age: <h1>{1}</h1>");
@@ -224,7 +224,7 @@ public void testMultipleStatements() throws InterpreterException, IOException {
     if (!sparkInterpreter.getSparkVersion().isSpark1()) {
       assertTrue(context.out.toString(), context.out.toInterpreterResultMessage().get(1).getData().contains("mismatched input"));
     }
-    
+
     // One correct sql + One invalid sql + One valid sql (skipped)
     ret = sqlInterpreter.interpret("select * from gr;invalid_sql; select count(1) from gr", context);
     assertEquals(InterpreterResult.Code.ERROR, ret.code());

File: submarine/src/test/java/org/apache/zeppelin/submarine/BaseInterpreterTest.java
Patch:
@@ -74,7 +74,7 @@ public void onRemoveAngularObject(String interpreterGroupId,
         .setParagraphId("paragraphId")
         .setAuthenticationInfo(authenticationInfo)
         .setAngularObjectRegistry(registry)
-        .setInterpreterOut(new InterpreterOutput(null))
+        .setInterpreterOut(new InterpreterOutput())
         .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
         .build();
   }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/ApplicationLoaderTest.java
Patch:
@@ -92,7 +92,7 @@ public ApplicationContext createContext(String noteId, String paragraphId, Strin
         paragraphId,
         appInstanceId,
         null,
-        new InterpreterOutput(null));
+        new InterpreterOutput());
     return context1;
   }
 }

File: zeppelin-jupyter-interpreter/src/test/java/org/apache/zeppelin/jupyter/IPythonKernelTest.java
Patch:
@@ -300,7 +300,7 @@ protected InterpreterContext getInterpreterContext() {
     return InterpreterContext.builder()
             .setNoteId("noteId")
             .setParagraphId("paragraphId")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
             .setLocalProperties(localProperties)
             .setResourcePool(resourcePool)

File: zeppelin-jupyter-interpreter/src/test/java/org/apache/zeppelin/jupyter/IRKernelTest.java
Patch:
@@ -152,7 +152,7 @@ protected InterpreterContext getInterpreterContext() {
     InterpreterContext context = InterpreterContext.builder()
             .setNoteId("note_1")
             .setParagraphId("paragraph_1")
-            .setInterpreterOut(new InterpreterOutput(null))
+            .setInterpreterOut(new InterpreterOutput())
             .setLocalProperties(localProperties)
             .build();
     return context;

File: zeppelin-plugins/notebookrepo/azure/src/main/java/org/apache/zeppelin/notebook/repo/AzureNotebookRepo.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.List;
 import java.util.Map;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.NoteInfo;
@@ -56,6 +56,7 @@ public AzureNotebookRepo() {
 
   }
 
+  @Override
   public void init(ZeppelinConfiguration conf) throws IOException {
     this.conf = conf;
     user = conf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_AZURE_USER);
@@ -102,7 +103,7 @@ private Map<String, NoteInfo> list(CloudFileDirectory folder) throws IOException
             LOGGER.warn(e.getMessage());
           }
         } else {
-          LOGGER.debug("Skip invalid note file: " + file.getUri().getPath());
+          LOGGER.debug("Skip invalid note file: {}", file.getUri().getPath());
         }
       }
     }

File: zeppelin-plugins/notebookrepo/azure/src/main/java/org/apache/zeppelin/notebook/repo/OldAzureNotebookRepo.java
Patch:
@@ -25,10 +25,9 @@
 import com.microsoft.azure.storage.file.CloudFileShare;
 import com.microsoft.azure.storage.file.ListFileItem;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.notebook.Note;
-import org.apache.zeppelin.notebook.NoteInfo;
 import org.apache.zeppelin.notebook.OldNoteInfo;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.slf4j.Logger;
@@ -60,6 +59,7 @@ public OldAzureNotebookRepo() {
 
   }
 
+  @Override
   public void init(ZeppelinConfiguration conf) throws IOException {
     this.conf = conf;
     user = conf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_AZURE_USER);

File: zeppelin-plugins/notebookrepo/filesystem/src/main/java/org/apache/zeppelin/notebook/repo/OldFileSystemNotebookRepo.java
Patch:
@@ -4,7 +4,6 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.notebook.FileSystemStorage;
 import org.apache.zeppelin.notebook.Note;
-import org.apache.zeppelin.notebook.NoteInfo;
 import org.apache.zeppelin.notebook.OldNoteInfo;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.slf4j.Logger;
@@ -34,11 +33,11 @@ public OldFileSystemNotebookRepo() {
 
   }
 
+  @Override
   public void init(ZeppelinConfiguration zConf) throws IOException {
     this.fs = new FileSystemStorage(zConf,
             zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR));
-    LOGGER.info("Creating FileSystem: " + this.fs.getFs().getClass().getName() +
-        " for Zeppelin Notebook.");
+    LOGGER.info("Creating FileSystem: {} for Zeppelin Notebook.", this.fs.getFs().getClass().getName());
     this.notebookDir = this.fs.makeQualified(new Path(zConf.getNotebookDir()));
     LOGGER.info("Using folder {} to store notebook", notebookDir);
     this.fs.tryMkDir(notebookDir);

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -187,7 +187,7 @@ public Response updateSetting(String message, @PathParam("settingId") String set
   public Response removeSetting(@PathParam("settingId") String settingId) throws IOException {
     LOGGER.info("Remove interpreterSetting {}", settingId);
     interpreterSettingManager.remove(settingId);
-    return new JsonResponse(Status.OK).build();
+    return new JsonResponse<>(Status.OK).build();
   }
 
   /**
@@ -274,7 +274,7 @@ public Response addRepository(String message) {
       return new JsonResponse<>(Status.INTERNAL_SERVER_ERROR, e.getMessage(),
           ExceptionUtils.getStackTrace(e)).build();
     }
-    return new JsonResponse(Status.OK).build();
+    return new JsonResponse<>(Status.OK).build();
   }
 
   /**
@@ -294,7 +294,7 @@ public Response removeRepository(@PathParam("repoId") String repoId) {
       return new JsonResponse<>(Status.INTERNAL_SERVER_ERROR, e.getMessage(),
           ExceptionUtils.getStackTrace(e)).build();
     }
-    return new JsonResponse(Status.OK).build();
+    return new JsonResponse<>(Status.OK).build();
   }
 
   /**

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java
Patch:
@@ -102,7 +102,7 @@ public Response getLogin(@Context HttpHeaders headers) {
         data.put("redirectURL",
             constructUrl(knoxJwtRealm.getProviderUrl(), knoxJwtRealm.getRedirectParam(),
                 knoxJwtRealm.getLogin()));
-        response = new JsonResponse(Status.OK, "", data);
+        response = new JsonResponse<>(Status.OK, "", data);
       }
       return response.build();
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/AdminService.java
Patch:
@@ -32,7 +32,7 @@
 public class AdminService {
 
   public List<org.apache.log4j.Logger> getLoggers() {
-    Enumeration loggers = LogManager.getCurrentLoggers();
+    Enumeration<?> loggers = LogManager.getCurrentLoggers();
     return StreamSupport.stream(
             Spliterators.spliteratorUnknownSize(
                 new Iterator<org.apache.log4j.Logger>() {

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -780,6 +780,7 @@ public void onSuccess(List<NoteInfo> notesInfo,
 
   public void broadcastReloadedNoteList(NotebookSocket conn, ServiceContext context)
       throws IOException {
+    getNotebook().reloadAllNotes(context.getAutheInfo());
     broadcastNoteListUpdate();
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/KerberosInterpreter.java
Patch:
@@ -146,7 +146,8 @@ public Object call() throws Exception {
             logger.error("runKerberosLogin failed for  max attempts, calling close interpreter.");
             close();
           } else {
-            scheduledExecutorService.submit(this);
+            // wait for 1 second before calling runKerberosLogin() again
+            scheduledExecutorService.schedule(this, 1, TimeUnit.SECONDS);
           }
         }
         return null;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java
Patch:
@@ -85,7 +85,7 @@ public InterpreterResult(Code code, Type type, String msg) {
    * @param msg
    */
   public void add(String msg) {
-    InterpreterOutput out = new InterpreterOutput(null);
+    InterpreterOutput out = new InterpreterOutput();
     try {
       out.write(msg);
       out.flush();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -359,7 +359,7 @@ public void createInterpreter(String interpreterGroupId, String sessionId, Strin
 
         String localRepoPath = properties.get("zeppelin.interpreter.localRepo");
         if (properties.containsKey("zeppelin.interpreter.output.limit")) {
-          InterpreterOutput.limit = Integer.parseInt(
+          InterpreterOutput.LIMIT = Integer.parseInt(
                   properties.get("zeppelin.interpreter.output.limit"));
         }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterOutputTest.java
Patch:
@@ -166,7 +166,7 @@ public void testTableCellFormatting() throws IOException {
   @Test
   public void testTruncate() throws IOException {
     // output is truncated after the new line
-    InterpreterOutput.limit = 3;
+    InterpreterOutput.LIMIT = 3;
     out = new InterpreterOutput(this);
 
     // truncate text
@@ -189,7 +189,7 @@ public void testTruncate() throws IOException {
     assertEquals("hello\nworld\n", new String(out.getOutputAt(0).toByteArray()));
 
     // restore default
-    InterpreterOutput.limit = Constants.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT;
+    InterpreterOutput.LIMIT = Constants.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT;
   }
 
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -49,8 +49,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.EnumSet;
-import java.util.Objects;
-import java.util.stream.Stream;
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import javax.management.remote.JMXServiceURL;
@@ -149,7 +147,7 @@ public static void reset() {
 
   @Inject
   public ZeppelinServer() {
-    InterpreterOutput.limit = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT);
+    InterpreterOutput.LIMIT = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT);
 
     packages("org.apache.zeppelin.rest");
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -1128,6 +1128,7 @@ public enum ConfVars {
     ZEPPELIN_PROXY_URL("zeppelin.proxy.url", null),
     ZEPPELIN_PROXY_USER("zeppelin.proxy.user", null),
     ZEPPELIN_PROXY_PASSWORD("zeppelin.proxy.password", null),
+    ZEPPELIN_SEARCH_ENABLE("zeppelin.search.enable", true),
     ZEPPELIN_SEARCH_INDEX_REBUILD("zeppelin.search.index.rebuild", false),
     ZEPPELIN_SEARCH_USE_DISK("zeppelin.search.use.disk", true),
     ZEPPELIN_SEARCH_INDEX_PATH("zeppelin.search.index.path", "/tmp/zeppelin-index"),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java
Patch:
@@ -170,7 +170,6 @@ public Builder setLocalProperties(Map<String, String> localProperties) {
     }
 
     public InterpreterContext build() {
-      InterpreterContext.set(context);
       return context;
     }
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobWithProgressPoller.java
Patch:
@@ -50,6 +50,7 @@ public void onJobEnded() {
     super.onJobEnded();
     if (this.progressPoller != null) {
       this.progressPoller.interrupt();
+      this.progressPoller = null;
     }
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/ParagraphTest.java
Patch:
@@ -255,7 +255,7 @@ public void returnDefaultParagraphWithNewUser() {
     assertEquals(defaultValue, newUserParagraph.getReturn().message().get(0).getData());
   }
 
-  @Test
+  @Ignore
   public void returnUnchangedResultsWithDifferentUser() throws Throwable {
     Note mockNote = mock(Note.class);
     when(mockNote.getCredentials()).thenReturn(mock(Credentials.class));

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/SessionManagerService.java
Patch:
@@ -173,13 +173,13 @@ public SessionInfo getSessionInfo(String sessionId) throws Exception {
         } else {
           // if it is running before, but interpreterGroup is not running now, that means the session is stopped.
           // e.g. InterpreterProcess is terminated for whatever unexpected reason.
-          if (sessionInfo.getState().equals(SessionState.RUNNING.name())) {
+          if (SessionState.RUNNING.name().equalsIgnoreCase(sessionInfo.getState())) {
             sessionInfo.setState(SessionState.STOPPED.name());
           }
         }
       }
     } else {
-      if (sessionInfo.getState().equals(SessionState.RUNNING.name())) {
+      if (SessionState.RUNNING.name().equalsIgnoreCase(sessionInfo.getState())) {
         // if it is running before, but interpreterGroup is null now, that means the session is stopped.
         // e.g. InterpreterProcess is killed if it exceed idle timeout threshold.
         sessionInfo.setState(SessionState.STOPPED.name());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/conf/ZeppelinConfigurationTest.java
Patch:
@@ -18,6 +18,7 @@
 
 
 import org.apache.commons.configuration.ConfigurationException;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.junit.Assert;
 import org.junit.Before;
@@ -136,4 +137,5 @@ public void getConfigFSPath() throws ConfigurationException {
     System.setProperty(ConfVars.ZEPPELIN_CONFIG_STORAGE_CLASS.getVarName(), "org.apache.zeppelin.storage.FileSystemConfigStorage");
     assertEquals("conf", conf.getConfigFSDir(false));
   }
+
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -746,7 +746,7 @@ public void updateNote(String noteId,
       schedulerService.refreshCron(note.getId());
     }
 
-    notebook.saveNote(note, context.getAutheInfo());
+    notebook.updateNote(note, context.getAutheInfo());
     callback.onSuccess(note, context);
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -944,7 +944,7 @@ public void testTitleSearch() throws IOException, InterruptedException {
               "\"text\": \"ThisIsToTestSearchMethodWithTitle \"}";
       CloseableHttpResponse postNoteText = httpPost("/notebook/" + note.getId() + "/paragraph", jsonRequest);
       postNoteText.close();
-      Thread.sleep(1000);
+      Thread.sleep(3000);
 
       CloseableHttpResponse searchNote = httpGet("/notebook/search?q='testTitleSearchOfParagraph'");
       Map<String, Object> respSearchResult = gson.fromJson(EntityUtils.toString(searchNote.getEntity(), StandardCharsets.UTF_8),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java
Patch:
@@ -64,7 +64,7 @@ public class RemoteInterpreterEventClient implements ResourcePoolConnector,
   private PooledRemoteClient<RemoteInterpreterEventService.Client> remoteClient;
   private String intpGroupId;
 
-  public RemoteInterpreterEventClient(String intpEventHost, int intpEventPort) {
+  public RemoteInterpreterEventClient(String intpEventHost, int intpEventPort, int connectionPoolSize) {
     this.remoteClient = new PooledRemoteClient<>(() -> {
       TSocket transport = new TSocket(intpEventHost, intpEventPort);
       try {
@@ -74,7 +74,7 @@ public RemoteInterpreterEventClient(String intpEventHost, int intpEventPort) {
       }
       TProtocol protocol = new TBinaryProtocol(transport);
       return new RemoteInterpreterEventService.Client(protocol);
-    });
+    }, connectionPoolSize);
   }
 
   public <R> R callRemoteFunction(PooledRemoteClient.RemoteFunction<R, RemoteInterpreterEventService.Client> func) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -1057,6 +1057,7 @@ public enum ConfVars {
     ZEPPELIN_CREDENTIALS_PERSIST("zeppelin.credentials.persist", true),
     ZEPPELIN_CREDENTIALS_ENCRYPT_KEY("zeppelin.credentials.encryptKey", null),
     ZEPPELIN_WEBSOCKET_MAX_TEXT_MESSAGE_SIZE("zeppelin.websocket.max.text.message.size", "10240000"),
+    ZEPPELIN_WEBSOCKET_PARAGRAPH_STATUS_PROGRESS("zeppelin.websocket.paragraph_status_progress.enable", true),
     ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED("zeppelin.server.default.dir.allowed", false),
     ZEPPELIN_SERVER_XFRAME_OPTIONS("zeppelin.server.xframe.options", "SAMEORIGIN"),
     ZEPPELIN_SERVER_JETTY_NAME("zeppelin.server.jetty.name", " "),

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/IPyFlinkInterpreterTest.java
Patch:
@@ -409,7 +409,7 @@ public static void testCancelStreamSql(Interpreter interpreter, Interpreter flin
             "log group by url')\nz.show(table, stream_type='update')", context);
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     List<InterpreterResultMessage> resultMessages = context.out.toInterpreterResultMessage();
-    assertEquals(InterpreterResult.Type.TABLE, resultMessages.get(0).getType());
+    assertEquals(context.out.toString(), InterpreterResult.Type.TABLE, resultMessages.get(0).getType());
     TestCase.assertTrue(resultMessages.toString(),
             resultMessages.get(0).getData().contains("url\tpv\n"));
   }

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelInterpreter.java
Patch:
@@ -168,7 +168,7 @@ public String checkKernelPrerequisite(String pythonExec) {
            */
           if (!freezeOutput.contains(packageName + "=") &&
               !freezeOutput.contains(packageName + " ")) {
-            return packageName + " is not installed.";
+            return packageName + " is not installed, installed packages:\n" + freezeOutput;
           }
         }
         LOGGER.info("Prerequisite for kernel {} is met", getKernelName());

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java
Patch:
@@ -643,7 +643,7 @@ public void testPrecode() throws IOException, InterpreterException {
     List<InterpreterResultMessage> resultMessages = context.out.toInterpreterResultMessage();
     assertEquals(3, resultMessages.size());
     assertEquals(InterpreterResult.Type.TEXT, resultMessages.get(0).getType());
-    assertEquals("Query executed successfully. Affected rows : 0\n",
+    assertEquals("Query executed successfully. Affected rows : 0\n\n",
             resultMessages.get(0).getData());
     assertEquals(InterpreterResult.Type.TEXT, resultMessages.get(1).getType());
     assertEquals("Query executed successfully. Affected rows : 1\n",
@@ -704,7 +704,7 @@ public void testPrecodeWithAnotherPrefix() throws IOException,
 
     assertEquals(3, resultMessages.size());
     assertEquals(InterpreterResult.Type.TEXT, resultMessages.get(0).getType());
-    assertEquals("Query executed successfully. Affected rows : 0\n",
+    assertEquals("Query executed successfully. Affected rows : 0\n\n",
             resultMessages.get(0).getData());
     assertEquals(InterpreterResult.Type.TEXT, resultMessages.get(1).getType());
     assertEquals("Query executed successfully. Affected rows : 1\n",

File: python/src/main/java/org/apache/zeppelin/python/PythonUtils.java
Patch:
@@ -70,8 +70,8 @@ public static GatewayServer createGatewayServer(Object entryPoint,
   }
 
   public static String getLocalIP(Properties properties) {
-    // zeppelin.python.gatewayserver_address is only for unit test on travis.
-    // Because the FQDN would fail unit test on travis ci.
+    // zeppelin.python.gatewayserver_address is only for unit test.
+    // Because the FQDN would fail unit test.
     String gatewayserver_address =
         properties.getProperty("zeppelin.python.gatewayserver_address");
     if (gatewayserver_address != null) {

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -298,7 +298,7 @@ public void testIPythonPlotting() throws InterpreterException, InterruptedExcept
     assertEquals(context.out.toInterpreterResultMessage().get(0).getData(),
             InterpreterResult.Code.SUCCESS, result.code());
     interpreterResultMessages = context.out.toInterpreterResultMessage();
-    
+
     assertEquals(context.out.toString(), 5, interpreterResultMessages.size());
     // the first message is the warning text message.
     assertEquals(InterpreterResult.Type.HTML, interpreterResultMessages.get(1).getType());
@@ -377,7 +377,7 @@ public Object call() throws Exception {
     // We ensure that running and auto completion are not hanging.
     InterpreterResult res = interpretFuture.get(20000, TimeUnit.MILLISECONDS);
     List<InterpreterCompletion> autoRes = completionFuture.get(3000, TimeUnit.MILLISECONDS);
-    assertTrue(res.code().name().equals("SUCCESS"));
+    assertEquals("SUCCESS", res.code().name());
     assertTrue(autoRes.size() > 0);
   }
 

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -110,7 +110,7 @@ public void testPySpark() throws Exception {
     try {
       setTextOfParagraph(1, "%pyspark\\n" +
           "for x in range(0, 3):\\n" +
-          "    print \"test loop %d\" % (x)");
+          "    print(\"test loop %d\" % (x))");
 
       runParagraph(1);
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/JdbcIntegrationTest.java
Patch:
@@ -65,6 +65,7 @@ public void testMySql() throws InterpreterException, InterruptedException {
     interpreterSetting.setProperty("default.driver", "com.mysql.jdbc.Driver");
     interpreterSetting.setProperty("default.url", "jdbc:mysql://localhost:3306/");
     interpreterSetting.setProperty("default.user", "root");
+    interpreterSetting.setProperty("default.password", "root");
 
     Dependency dependency = new Dependency("mysql:mysql-connector-java:5.1.46");
     interpreterSetting.setDependencies(Lists.newArrayList(dependency));

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest.java
Patch:
@@ -68,7 +68,7 @@ public abstract class ZeppelinSparkClusterTest extends AbstractTestRestApi {
   public static final String SPARK_MASTER_PROPERTY_NAME = "spark.master";
 
   //This is for only run setupSparkInterpreter one time for each spark version, otherwise
-  //each test method will run setupSparkInterpreter which will cost a long time and may cause travis
+  //each test method will run setupSparkInterpreter which will cost a long time and may cause a
   //ci timeout.
   //TODO(zjffdu) remove this after we upgrade it to junit 4.13 (ZEPPELIN-3341)
   private static Set<String> verifiedSparkVersions = new HashSet<>();

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sStandardInterpreterLauncherTest.java
Patch:
@@ -29,9 +29,7 @@
 import org.junit.Test;
 
 /**
- * In the future, test may use minikube on travis for end-to-end test
- * https://github.com/LiliC/travis-minikube
- * https://blog.travis-ci.com/2017-10-26-running-kubernetes-on-travis-ci-with-minikube
+ * In the future, test may use minikube for end-to-end test
  */
 public class K8sStandardInterpreterLauncherTest {
   @Before

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -779,7 +779,7 @@ private InterpreterResult executeSql(String dbPrefix, String sql,
             int updateCount = statement.getUpdateCount();
             context.out.write("\n%text " +
                 "Query executed successfully. Affected rows : " +
-                    updateCount);
+                    updateCount + "\n");
           }
         } finally {
           if (resultSet != null) {
@@ -1028,6 +1028,8 @@ int getMaxConcurrentConnection() {
     try {
       return Integer.valueOf(getProperty(CONCURRENT_EXECUTION_COUNT));
     } catch (Exception e) {
+      LOGGER.error("Fail to parse {} with value: {}", CONCURRENT_EXECUTION_COUNT,
+              getProperty(CONCURRENT_EXECUTION_COUNT));
       return 10;
     }
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -541,9 +541,6 @@ public Response insertParagraph(@PathParam("noteId") String noteId, String messa
   @ZeppelinApi
   public Response getParagraph(@PathParam("noteId") String noteId,
                                @PathParam("paragraphId") String paragraphId) throws IOException {
-
-    LOGGER.info("Get paragraph {} {}", noteId, paragraphId);
-
     Note note = notebook.getNote(noteId);
     checkIfNoteIsNotNull(note, noteId);
     checkIfUserCanRead(noteId, "Insufficient privileges you cannot get this paragraph");

File: rlang/src/main/java/org/apache/zeppelin/r/ShinyInterpreter.java
Patch:
@@ -69,7 +69,7 @@ public void open() throws InterpreterException {
   @Override
   public void close() throws InterpreterException {
     for (Map.Entry<String,IRInterpreter> entry : shinyIRInterpreters.entrySet()) {
-      LOGGER.info("Closing IRInterpreter: " + entry.getKey());
+      LOGGER.info("Closing IRInterpreter: {}", entry.getKey());
       // Stop shiny app first otherwise the R process can not be terminated.
       entry.getValue().cancel(InterpreterContext.get());
       entry.getValue().close();

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelClient.java
Patch:
@@ -55,7 +55,7 @@ public class JupyterKernelClient {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(JupyterKernelClient.class.getName());
   // used for matching shiny url
-  private static Pattern ShinyListeningPattern =
+  private static final Pattern SHINY_LISTENING_PATTERN =
           Pattern.compile(".*Listening on (http:\\S*).*", Pattern.DOTALL);
 
   private final ManagedChannel channel;
@@ -112,10 +112,10 @@ private boolean checkForShinyApp(String response) throws IOException {
     if (intpClassName != null &&
             (intpClassName.equals("org.apache.zeppelin.r.ShinyInterpreter") ||
                     intpClassName.equals("org.apache.zeppelin.spark.SparkShinyInterpreter"))) {
-      Matcher matcher = ShinyListeningPattern.matcher(response);
+      Matcher matcher = SHINY_LISTENING_PATTERN.matcher(response);
       if (matcher.matches()) {
         String url = matcher.group(1);
-        LOGGER.info("Matching shiny app url: " + url);
+        LOGGER.info("Matching shiny app url: {}", url);
         context.out.clear();
         String defaultHeight = properties.getProperty("zeppelin.R.shiny.iframe_height", "500px");
         String height = context.getLocalProperties().getOrDefault("height", defaultHeight);

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/hive/HiveUtils.java
Patch:
@@ -131,7 +131,7 @@ public static void startHiveMonitorThread(Statement stmt,
             // Sometimes, maybe hiveStmt was closed unnormally, hiveStmt.hasMoreLogs() will be true,
             // this loop cannot jump out, and exceptions thrown.
             // Add the below codes in case.
-            if(hiveStmt.isClosed()){
+            if (hiveStmt.isClosed()){
               break;
             }
           } catch (SQLException e) {
@@ -148,7 +148,8 @@ public static void startHiveMonitorThread(Statement stmt,
 
     if (progressBar != null) {
       // old: hiveStmt.setInPlaceUpdateStream(progressBar.getInPlaceUpdateStream(context.out));
-      // Move codes into ProgressBar to delay NoClassDefFoundError of InPlaceUpdateStream until ProgressBar instanced.
+      // Move codes into ProgressBar to delay NoClassDefFoundError of InPlaceUpdateStream
+      // until ProgressBar instanced.
       // When hive < 2.3, ProgressBar will not be instanced, so it works well.
       progressBar.setInPlaceUpdateStream(hiveStmt, context.out);
     }

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/FlinkSqlInterrpeter.java
Patch:
@@ -127,7 +127,7 @@ private InterpreterResult runSqlList(String st, InterpreterContext context) {
 
     try {
       boolean runAsOne = Boolean.parseBoolean(context.getStringLocalProperty("runAsOne", "false"));
-      List<String> sqls = sqlSplitter.splitSql(st);
+      List<String> sqls = sqlSplitter.splitSql(st).stream().map(String::trim).collect(Collectors.toList());
       boolean isFirstInsert = true;
       for (String sql : sqls) {
         Optional<SqlCommandParser.SqlCommandCall> sqlCommand = sqlCommandParser.parse(sql);

File: zeppelin-client/src/main/java/org/apache/zeppelin/client/ZSession.java
Patch:
@@ -275,7 +275,7 @@ public ExecuteResult execute(String subInterpreter,
       builder.append(StringUtils.join(propertyString, ","));
       builder.append(")");
     }
-    builder.append("\n" + code);
+    builder.append(" " + code);
 
     String text = builder.toString();
 
@@ -367,7 +367,7 @@ public ExecuteResult submit(String subInterpreter,
       }
       builder.append(")");
     }
-    builder.append("\n" + code);
+    builder.append(" " + code);
 
     String text = builder.toString();
     String nextParagraphId = zeppelinClient.nextSessionParagraph(getNoteId(), maxStatement);

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/InterpreterModeActionsIT.java
Patch:
@@ -155,7 +155,7 @@ private void logoutUser(String userName) throws URISyntaxException {
   }
 
   private void setPythonParagraph(int num, String text) {
-    setTextOfParagraph(num, "%python\\n " + text);
+    setTextOfParagraph(num, "%python\\n" + text);
     runParagraph(num);
     try {
       waitForParagraph(num, "FINISHED");

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZSessionIntegrationTest.java
Patch:
@@ -107,7 +107,7 @@ public void testZSession_Shell() throws Exception {
       assertTrue(result.getResults().get(1).getData(), result.getResults().get(1).getData().contains("ExitValue"));
 
       assertEquals(4, note.getParagraphCount());
-      assertEquals("%sh\ninvalid_command", note.getParagraph(3).getText());
+      assertEquals("%sh invalid_command", note.getParagraph(3).getText());
 
     } finally {
       session.stop();
@@ -147,7 +147,7 @@ public void testZSession_Shell_Submit() throws Exception {
       assertTrue(result.getResults().get(1).getData(), result.getResults().get(1).getData().contains("ExitValue"));
 
       assertEquals(4, note.getParagraphCount());
-      assertEquals("%sh\ninvalid_command", note.getParagraph(3).getText());
+      assertEquals("%sh invalid_command", note.getParagraph(3).getText());
 
     } finally {
       session.stop();

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -472,7 +472,7 @@ public void testImportJupyterNote() throws IOException {
       assertTrue(notebook.getNote(note.getId()).getName(),
               notebook.getNote(note.getId()).getName().startsWith("Note converted from Jupyter_"));
       assertEquals("md", notebook.getNote(note.getId()).getParagraphs().get(0).getIntpText());
-      assertEquals("# matplotlib - 2D and 3D plotting in Python",
+      assertEquals("\n# matplotlib - 2D and 3D plotting in Python",
               notebook.getNote(note.getId()).getParagraphs().get(0).getScriptText());
     } finally {
       if (note != null) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java
Patch:
@@ -66,7 +66,7 @@ public boolean isOpen() {
 	@Override
 	public InterpreterResult interpret(String st, InterpreterContext context) {
 		InterpreterResult result;
-
+		st = st.trim();
 		if ("getId".equals(st)) {
 			// get unique id of this interpreter instance
 			result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "" + this.object_id + "-" + this.pid);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter2.java
Patch:
@@ -56,7 +56,7 @@ public boolean isOpen() {
 	@Override
 	public InterpreterResult interpret(String st, InterpreterContext context) {
 		InterpreterResult result;
-
+		st = st.trim();
 		if ("getId".equals(st)) {
 			// get unique id of this interpreter instance
 			result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "" + this.hashCode());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/ParagraphTextParserTest.java
Patch:
@@ -43,7 +43,7 @@ public void testCassandra() {
     assertEquals("cassandra", parseResult.getIntpText());
     assertEquals(4, parseResult.getLocalProperties().size());
     assertEquals("E, d MMM yy", parseResult.getLocalProperties().get("timeFormat"));
-    assertEquals("select * from system_auth.roles;", parseResult.getScriptText());
+    assertEquals("\nselect * from system_auth.roles;", parseResult.getScriptText());
   }
 
   @Test
@@ -75,10 +75,10 @@ public void testParagraphTextLocalPropertyNoValueNoText() {
 
   @Test
   public void testParagraphTextNoLocalProperties() {
-    ParagraphTextParser.ParseResult parseResult = ParagraphTextParser.parse("%spark.pyspark sc.version");
+    ParagraphTextParser.ParseResult parseResult = ParagraphTextParser.parse("%spark.pyspark\nsc.version");
     assertEquals("spark.pyspark", parseResult.getIntpText());
     assertEquals(0, parseResult.getLocalProperties().size());
-    assertEquals("sc.version", parseResult.getScriptText());
+    assertEquals("\nsc.version", parseResult.getScriptText());
   }
 
   @Test

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/scheduler/QuartzSchedulerService.java
Patch:
@@ -56,6 +56,7 @@ public QuartzSchedulerService(ZeppelinConfiguration zeppelinConfiguration, Noteb
     this.zeppelinConfiguration = zeppelinConfiguration;
     this.notebook = notebook;
     this.scheduler = getScheduler();
+    this.scheduler.getListenerManager().addJobListener(new CronJobListener());
     this.scheduler.start();
 
     // Do in a separated thread because there may be many notes,

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/FileSystemConfigStorage.java
Patch:
@@ -20,6 +20,8 @@
 
 import org.apache.hadoop.fs.Path;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
+import org.apache.zeppelin.healthcheck.HdfsHealthCheck;
+import org.apache.zeppelin.healthcheck.HealthChecks;
 import org.apache.zeppelin.interpreter.InterpreterInfoSaving;
 import org.apache.zeppelin.notebook.FileSystemStorage;
 import org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving;
@@ -56,6 +58,7 @@ public FileSystemConfigStorage(ZeppelinConfiguration zConf) throws IOException {
     this.interpreterSettingPath = fs.makeQualified(new Path(zConf.getInterpreterSettingPath(false)));
     this.authorizationPath = fs.makeQualified(new Path(zConf.getNotebookAuthorizationPath(false)));
     this.credentialPath = fs.makeQualified(new Path(zConf.getCredentialsPath(false)));
+    HealthChecks.getHealthCheckLivenessRegistry().register(STORAGE_HEALTHCHECK_NAME, new HdfsHealthCheck(this.fs, configPath));
   }
 
   @Override

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -429,7 +429,7 @@ public boolean runAllParagraphs(String noteId,
             // also stop execution when user code in a paragraph fails
             Paragraph p = note.getParagraph(paragraphId);
             InterpreterResult result = p.getReturn();
-            if (result.code() == ERROR) {
+            if (result != null && result.code() == ERROR) {
               return false;
             }
           } catch (Exception e) {

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/hive/HiveUtilsTest.java
Patch:
@@ -28,7 +28,7 @@ public class HiveUtilsTest {
 
   @Test
   public void testJobURL() {
-    Optional<String> jobURL = HiveUtils.extractJobURL(
+    Optional<String> jobURL = HiveUtils.extractMRJobURL(
             "INFO  : The url to track the job: " +
             "http://localhost:8088/proxy/application_1591195707498_0064/\n" +
             "INFO  : Starting Job = job_1591195707498_0064, " +

File: submarine/src/main/java/org/apache/zeppelin/submarine/SubmarineShellInterpreter.java
Patch:
@@ -50,8 +50,8 @@ public SubmarineShellInterpreter(Properties property) {
   }
 
   @Override
-  public InterpreterResult internalInterpret(String cmd, InterpreterContext intpContext) {
-    setParagraphConfig(intpContext);
+  public InterpreterResult internalInterpret(String cmd, InterpreterContext context) {
+    setParagraphConfig(context);
 
     // algorithm path & checkpoint path support replaces ${username} with real user name
     String algorithmPath = properties.getProperty(SUBMARINE_ALGORITHM_HDFS_PATH, "");
@@ -66,7 +66,7 @@ public InterpreterResult internalInterpret(String cmd, InterpreterContext intpCo
       properties.setProperty(TF_CHECKPOINT_PATH, checkpointPath);
     }
 
-    return super.internalInterpret(cmd, intpContext);
+    return super.internalInterpret(cmd, context);
   }
 
   private void setParagraphConfig(InterpreterContext context) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/SessionRestApi.java
Patch:
@@ -66,7 +66,6 @@ public SessionRestApi(Notebook notebook, InterpreterSettingManager interpreterSe
    * @throws Exception
    */
   @GET
-  @Path("/")
   public Response listSessions(@QueryParam("interpreter") String interpreter) throws Exception {
     if (StringUtils.isBlank(interpreter)) {
       LOGGER.info("List all sessions of all interpreters");
@@ -90,7 +89,6 @@ public Response listSessions(@QueryParam("interpreter") String interpreter) thro
    * @throws Exception
    */
   @POST
-  @Path("/")
   public Response createSession(@QueryParam("interpreter") String interpreter) throws Exception {
     LOGGER.info("Create new session for interpreter: {}", interpreter);
     SessionInfo sessionInfo = sessionManagerService.createSession(interpreter);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -679,8 +679,8 @@ public String getConfDir() {
   public String getConfigFSDir(boolean absolute) {
     String fsConfigDir = getString(ConfVars.ZEPPELIN_CONFIG_FS_DIR);
     if (StringUtils.isBlank(fsConfigDir)) {
-      LOG.warn(ConfVars.ZEPPELIN_CONFIG_FS_DIR.varName + " is not specified, fall back to local " +
-          "conf directory " + ConfVars.ZEPPELIN_CONF_DIR.varName);
+      LOG.warn("{} is not specified, fall back to local conf directory {}",
+        ConfVars.ZEPPELIN_CONFIG_FS_DIR.varName,  ConfVars.ZEPPELIN_CONF_DIR.varName);
       if (absolute) {
         return getConfDir();
       } else {

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -579,7 +579,7 @@ private static DefaultServlet setupServlet(
     return new DefaultServlet() {
 
         private static final long serialVersionUID = 1L;
-        
+
         @Override
         public Resource getResource(String pathInContext) {
 
@@ -591,9 +591,9 @@ public Resource getResource(String pathInContext) {
             // create the altered 'index.html' resource and cache it via webapp attributes
             if (webApp.getAttribute(HTML_ADDON_IDENTIFIER) == null) {
                 webApp.setAttribute(
-                    HTML_ADDON_IDENTIFIER, 
+                    HTML_ADDON_IDENTIFIER,
                     new HtmlAddonResource(
-                        super.getResource(pathInContext), 
+                        super.getResource(pathInContext),
                         conf.getHtmlBodyAddon(),
                         conf.getHtmlHeadAddon()));
             }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
 import org.apache.zeppelin.interpreter.thrift.RemoteApplicationResult;
-import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;
 import org.apache.zeppelin.notebook.ApplicationState;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.NoteEventListener;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumRegistry.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.helium;
 
 import java.io.IOException;
-import java.net.URI;
 import java.util.List;
 
 /**

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -19,8 +19,6 @@
 
 import javax.inject.Inject;
 import org.apache.commons.lang3.StringUtils;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
  * //TODO(zjffdu) considering to move to InterpreterSettingManager
@@ -29,7 +27,6 @@
  *
  */
 public class InterpreterFactory implements InterpreterFactoryInterface {
-  private static final Logger LOGGER = LoggerFactory.getLogger(InterpreterFactory.class);
 
   private final InterpreterSettingManager interpreterSettingManager;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSaving.java
Patch:
@@ -66,8 +66,7 @@ public static InterpreterInfoSaving loadFromFile(Path file) throws IOException {
     LOGGER.info("Load interpreter setting from file: {}", file);
     InterpreterInfoSaving infoSaving = null;
     try (BufferedReader json = Files.newBufferedReader(file, StandardCharsets.UTF_8)) {
-      JsonParser jsonParser = new JsonParser();
-      JsonObject jsonObject = jsonParser.parse(json).getAsJsonObject();
+      JsonObject jsonObject = JsonParser.parseReader(json).getAsJsonObject();
       infoSaving = InterpreterInfoSaving.fromJson(jsonObject.toString());
 
       if (infoSaving != null && infoSaving.interpreterSettings != null) {
@@ -106,13 +105,15 @@ public static InterpreterInfoSaving fromJson(String json) {
   }
 
   static class InterfaceAdapter<T> implements JsonSerializer<T>, JsonDeserializer<T> {
+    @Override
     public JsonElement serialize(T object, Type interfaceType, JsonSerializationContext context) {
       final JsonObject wrapper = new JsonObject();
       wrapper.addProperty("type", object.getClass().getName());
       wrapper.add("data", context.serialize(object));
       return wrapper;
     }
 
+    @Override
     public T deserialize(JsonElement elem,
                          Type interfaceType,
                          JsonDeserializationContext context) throws JsonParseException {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -480,7 +480,7 @@ public ManagedInterpreterGroup getInterpreterGroup(ExecutionContext executionCon
       interpreterGroupReadLock.lock();
       return interpreterGroups.get(groupId);
     } finally {
-      interpreterGroupReadLock.unlock();;
+      interpreterGroupReadLock.unlock();
     }
   }
 
@@ -731,7 +731,7 @@ public Status getStatus() {
   }
 
   public void setStatus(Status status) {
-    LOGGER.info("Set interpreter {} status to{}", name, status.name());
+    LOGGER.info("Set interpreter {} status to {}", name, status);
     this.status = status;
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/SessionConfInterpreter.java
Patch:
@@ -47,7 +47,7 @@ public InterpreterResult interpret(String st, InterpreterContext context)
       Properties updatedProperties = new Properties();
       updatedProperties.load(new StringReader(st));
       finalProperties.putAll(updatedProperties);
-      LOGGER.debug("Properties for Session: " + sessionId + ": " + finalProperties);
+      LOGGER.debug("Properties for Session: {}:{}", sessionId, finalProperties);
 
       List<Interpreter> interpreters =
           interpreterSetting.getInterpreterGroup(interpreterGroupId).get(sessionId);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/install/InstallInterpreter.java
Patch:
@@ -28,6 +28,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
@@ -82,7 +83,7 @@ private void readAvailableInterpreters() throws IOException {
       System.err.println("Can't find interpreter list " + interpreterListFile.getAbsolutePath());
       return;
     }
-    String text = FileUtils.readFileToString(interpreterListFile);
+    String text = FileUtils.readFileToString(interpreterListFile, StandardCharsets.UTF_8);
     String[] lines = text.split("\n");
 
     Pattern pattern = Pattern.compile("(\\S+)\\s+(\\S+)\\s+(.*)");

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncher.java
Patch:
@@ -46,7 +46,7 @@ public StandardInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage
 
   @Override
   public InterpreterClient launchDirectly(InterpreterLaunchContext context) throws IOException {
-    LOGGER.info("Launching new interpreter process of " + context.getInterpreterSettingGroup());
+    LOGGER.info("Launching new interpreter process of {}", context.getInterpreterSettingGroup());
     this.properties = context.getProperties();
     InterpreterOption option = context.getOption();
     InterpreterRunner runner = context.getRunner();
@@ -81,7 +81,7 @@ public InterpreterClient launchDirectly(InterpreterLaunchContext context) throws
 
   public Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) throws IOException {
     Map<String, String> env = EnvironmentUtils.getProcEnvironment();
-    for (Map.Entry entry : context.getProperties().entrySet()) {
+    for (Map.Entry<Object,Object> entry : context.getProperties().entrySet()) {
       String key = (String) entry.getKey();
       String value = (String) entry.getValue();
       if (RemoteInterpreterUtils.isEnvString(key) && !StringUtils.isBlank(value)) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/StopInterpreter.java
Patch:
@@ -18,7 +18,7 @@
  */
 public class StopInterpreter {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(StopInterpreter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(StopInterpreter.class);
 
   public static void main(String[] args) throws IOException {
     ZeppelinConfiguration zConf = ZeppelinConfiguration.create();
@@ -29,11 +29,11 @@ public static void main(String[] args) throws IOException {
         new Class[] {ZeppelinConfiguration.class, InterpreterSettingManager.class},
         new Object[] {zConf, interpreterSettingManager});
 
-    LOGGER.info("Using RecoveryStorage: " + recoveryStorage.getClass().getName());
+    LOGGER.info("Using RecoveryStorage: {}", recoveryStorage.getClass().getName());
     Map<String, InterpreterClient> restoredClients = recoveryStorage.restore();
     if (restoredClients != null) {
       for (InterpreterClient client : restoredClients.values()) {
-        LOGGER.info("Stop Interpreter Process: " + client.getHost() + ":" + client.getPort());
+        LOGGER.info("Stop Interpreter Process: {}:{}", client.getHost(), client.getPort());
         client.stop();
       }
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.interpreter.remote;
 
-import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteAuth.java
Patch:
@@ -116,7 +116,7 @@ public Set<String> getRunners() {
    */
   private Set<String> checkCaseAndConvert(Set<String> entities) {
     if (ZeppelinConfiguration.create().isUsernameForceLowerCase()) {
-      Set<String> set2 = new HashSet<String>();
+      Set<String> set2 = new HashSet<>();
       for (String name : entities) {
         set2.add(name.toLowerCase());
       }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -72,8 +72,8 @@
 public class Paragraph extends JobWithProgressPoller<InterpreterResult> implements Cloneable,
     JsonSerializable {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(Paragraph.class);
-  private static Pattern REPL_PATTERN =
+  private static final Logger LOGGER = LoggerFactory.getLogger(Paragraph.class);
+  private static final Pattern REPL_PATTERN =
       Pattern.compile("(\\s*)%([\\w\\.]+)(\\(.*?\\))?.*", Pattern.DOTALL);
 
   private String title;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ParagraphTextParser.java
Patch:
@@ -67,7 +67,7 @@ public Map<String, String> getLocalProperties() {
     }
   }
 
-  private static Pattern REPL_PATTERN = Pattern.compile("^(\\s*)%(\\w+(?:\\.\\w+)*)");
+  private static final Pattern REPL_PATTERN = Pattern.compile("^(\\s*)%(\\w+(?:\\.\\w+)*)");
 
   private static int parseLocalProperties(
           final String text, int startPos,

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/OldNotebookRepo.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.notebook.Note;
-import org.apache.zeppelin.notebook.NoteInfo;
 import org.apache.zeppelin.notebook.OldNoteInfo;
 import org.apache.zeppelin.user.AuthenticationInfo;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinClient.java
Patch:
@@ -67,7 +67,7 @@ public class ZeppelinClient {
   private static final int MIN = 60;
   private static final String ORIGIN = "Origin";
 
-  private static final Set<String> actionable = new  HashSet<String>(Arrays.asList(
+  private static final Set<String> actionable = new  HashSet<>(Arrays.asList(
       // running events
       "ANGULAR_OBJECT_UPDATE",
       "PROGRESS",

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/scheduler/ZeppelinHubHeartbeat.java
Patch:
@@ -27,7 +27,7 @@
  *
  */
 public class ZeppelinHubHeartbeat implements Runnable {
-  private static final Logger LOG = LoggerFactory.getLogger(ZeppelinHubHeartbeat.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ZeppelinHubHeartbeat.class);
   private ZeppelinhubClient client;
   
   public static ZeppelinHubHeartbeat newInstance(ZeppelinhubClient client) {
@@ -40,7 +40,7 @@ private ZeppelinHubHeartbeat(ZeppelinhubClient client) {
   
   @Override
   public void run() {
-    LOG.debug("Sending PING to zeppelinhub token");
+    LOGGER.debug("Sending PING to zeppelinhub token");
     for (String token: UserTokenContainer.getInstance().getAllTokens()) {
       client.send(ZeppelinhubUtils.pingMessage(token), token);
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/session/ZeppelinhubSession.java
Patch:
@@ -25,7 +25,7 @@
  * Zeppelinhub session.
  */
 public class ZeppelinhubSession {
-  private static final Logger LOG = LoggerFactory.getLogger(ZeppelinhubSession.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ZeppelinhubSession.class);
   private Session session;
   private final String token;
   
@@ -52,12 +52,12 @@ public void close() {
   
   public void sendByFuture(String msg) {
     if (StringUtils.isBlank(msg)) {
-      LOG.error("Cannot send event to Zeppelinhub, msg is empty");
+      LOGGER.error("Cannot send event to Zeppelinhub, msg is empty");
     }
     if (isSessionOpen()) {
       session.getRemote().sendStringByFuture(msg);
     } else {
-      LOG.error("Cannot send event to Zeppelinhub, session is close");
+      LOGGER.error("Cannot send event to Zeppelinhub, session is close");
     }
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/ConfigStorage.java
Patch:
@@ -79,8 +79,7 @@ public abstract void save(NotebookAuthorizationInfoSaving authorizationInfoSavin
 
   protected InterpreterInfoSaving buildInterpreterInfoSaving(String json) {
     //TODO(zjffdu) This kind of post processing is ugly.
-    JsonParser jsonParser = new JsonParser();
-    JsonObject jsonObject = jsonParser.parse(json).getAsJsonObject();
+    JsonObject jsonObject = JsonParser.parseString(json).getAsJsonObject();
     InterpreterInfoSaving infoSaving = InterpreterInfoSaving.fromJson(json);
     for (InterpreterSetting interpreterSetting : infoSaving.interpreterSettings.values()) {
       // Always use separate interpreter process

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Credentials.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class Credentials {
 
-  private static final Logger LOG = LoggerFactory.getLogger(Credentials.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(Credentials.class);
 
   private ConfigStorage storage;
   private Map<String, UserCredentials> credentialsMap;
@@ -64,7 +64,7 @@ public Credentials(ZeppelinConfiguration conf) {
         gson = builder.create();
         loadFromFile();
       } catch (IOException e) {
-        LOG.error("Fail to create ConfigStorage for Credentials. Persistenz will be disabled", e);
+        LOGGER.error("Fail to create ConfigStorage for Credentials. Persistenz will be disabled", e);
         encryptor = null;
         storage = null;
         gson = null;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/user/CredentialsInfoSaving.java
Patch:
@@ -26,15 +26,15 @@
  * Helper class to save credentials
  */
 public class CredentialsInfoSaving implements JsonSerializable {
-  private static final Gson gson = new Gson();
+  private static final Gson GSON = new Gson();
 
   public Map<String, UserCredentials> credentialsMap;
 
   public String toJson() {
-    return gson.toJson(this);
+    return GSON.toJson(this);
   }
 
   public static CredentialsInfoSaving fromJson(String json) {
-    return gson.fromJson(json, CredentialsInfoSaving.class);
+    return GSON.fromJson(json, CredentialsInfoSaving.class);
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -221,9 +221,8 @@ public void testInterpreterUnbindOfNullReplParagraph() throws IOException {
     p1.setText("%fake ");
 
     // make sure that p1's repl is null
-    Interpreter intp = null;
     try {
-      intp = p1.getBindedInterpreter();
+      p1.getBindedInterpreter();
       fail("Should throw InterpreterNotFoundException");
     } catch (InterpreterNotFoundException e) {
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -35,7 +35,6 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.mock;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/install/InstallInterpreterTest.java
Patch:
@@ -8,6 +8,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -52,7 +53,7 @@ public void setUp() throws IOException {
     interpreterList += "intp1   org.apache.commons:commons-csv:1.1   test interpreter 1\n";
     interpreterList += "intp2   org.apache.commons:commons-math3:3.6.1 test interpreter 2\n";
 
-    FileUtils.writeStringToFile(new File(tmpDir, "conf/interpreter-list"), interpreterList);
+    FileUtils.writeStringToFile(new File(tmpDir, "conf/interpreter-list"), interpreterList, StandardCharsets.UTF_8);
 
     installer = new InstallInterpreter(interpreterListFile, interpreterBaseDir, localRepoDir
         .getAbsolutePath());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/integration/DownloadUtils.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.zeppelin.interpreter.InterpreterException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -30,6 +29,7 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.net.URL;
+import java.nio.charset.StandardCharsets;
 
 /**
  * Utility class for downloading spark/flink. This is used for spark/flink integration test.
@@ -104,7 +104,7 @@ public static String downloadHadoop(String version) {
   private static void download(String project, String version, String postFix, String projectPath) {
     String projectDownloadFolder = downloadFolder + "/" + project;
     try {
-      String preferredMirror = IOUtils.toString(new URL("https://www.apache.org/dyn/closer.lua?preferred=true"));
+      String preferredMirror = IOUtils.toString(new URL("https://www.apache.org/dyn/closer.lua?preferred=true"), StandardCharsets.UTF_8);
       File downloadFile = new File(projectDownloadFolder + "/" + project + "-" + version + postFix);
       String downloadURL = preferredMirror + "/" + projectPath + "/" + project + "-" + version + "/" + project + "-" + version + postFix;
       runShellCommand(new String[]{"wget", downloadURL, "-P", projectDownloadFolder});
@@ -153,6 +153,7 @@ private static class StreamGobbler extends Thread {
       this.is = is;
     }
 
+    @Override
     public void run() {
       try {
         InputStreamReader isr = new InputStreamReader(is);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManagerTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.junit.Test;
 
 import java.io.File;
-import java.io.FileWriter;
 import java.io.IOException;
 import java.util.Map;
 
@@ -85,7 +84,7 @@ public void testTimeout_2() throws InterpreterException, InterruptedException, I
     final RemoteInterpreter remoteInterpreter = (RemoteInterpreter) interpreterFactory.getInterpreter("test.sleep", new ExecutionContextBuilder().setUser("user1").setNoteId("note1").setDefaultInterpreterGroup("test").createExecutionContext());
 
     // simulate how zeppelin submit paragraph
-    remoteInterpreter.getScheduler().submit(new Job("test-job", null) {
+    remoteInterpreter.getScheduler().submit(new Job<Object>("test-job", null) {
       @Override
       public Object getReturn() {
         return null;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/AppendOutputRunnerTest.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.concurrent.ScheduledFuture;
 import java.util.concurrent.TimeUnit;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
@@ -158,7 +158,7 @@ public void testWarnLoggerForLargeData() throws InterruptedException {
 
     String loggerString = "Processing size for buffered append-output is high: " +
         (data.length() * numEvents) + " characters.";
-    assertTrue(loggerString.equals(sizeWarnLogEntry.getMessage()));
+    assertEquals(loggerString, sizeWarnLogEntry.getMessage());
   }
 
   private class BombardEvents implements Runnable {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java
Patch:
@@ -377,7 +377,7 @@ public void testConvertDynamicForms() throws InterpreterException {
         new OptionInput.ParamOption("value1", "param1"),
         new OptionInput.ParamOption("value2", "param2")
     };
-    List<Object> defaultValues = new ArrayList();
+    List<Object> defaultValues = new ArrayList<>();
     defaultValues.add("default1");
     defaultValues.add("default2");
     gui.checkbox("checkbox_id", paramOptions, defaultValues);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.zeppelin.interpreter.AbstractInterpreterTest;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
-import org.apache.zeppelin.interpreter.InterpreterOption;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreter;
@@ -42,6 +41,7 @@ public class DistributedResourcePoolTest extends AbstractInterpreterTest {
   private InterpreterContext context;
 
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
@@ -59,6 +59,7 @@ public void setUp() throws Exception {
     intp2.open();
   }
 
+  @Override
   @After
   public void tearDown() throws Exception {
     interpreterSettingManager.close();
@@ -96,7 +97,6 @@ public ResourceSet getAllResources() {
         set.addAll(pool3.getAll());
 
         ResourceSet remoteSet = new ResourceSet();
-        Gson gson = new Gson();
         for (Resource s : set) {
           RemoteResource remoteResource = RemoteResource.fromJson(s.toJson());
           remoteResource.setResourcePoolConnector(this);
@@ -150,7 +150,6 @@ public Resource invokeMethod(ResourceId id, String methodName, Class[] paramType
   @Test
   public void testResourcePoolUtils() throws InterpreterException {
     Gson gson = new Gson();
-    InterpreterResult ret;
 
     // when create some resources
     intp1.interpret("put note1:paragraph1:key1 value1", context);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/storage/LocalConfigStorageTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
@@ -42,7 +43,7 @@ public void testWritingAtomically() throws IOException {
         try {
             FileUtils.atomicWriteToFile(TEST_STRING, destinationFile);
             try (InputStream is = Files.newInputStream(destination)) {
-                String read = IOUtils.toString(is);
+                String read = IOUtils.toString(is, StandardCharsets.UTF_8);
                 assertEquals(TEST_STRING, read);
             }
         } finally {
@@ -59,7 +60,7 @@ public void testWritingAtomicallyNonExistingDir() throws IOException {
         try {
             FileUtils.atomicWriteToFile(TEST_STRING, destinationFile);
             try (InputStream is = Files.newInputStream(destination)) {
-                String read = IOUtils.toString(is);
+                String read = IOUtils.toString(is, StandardCharsets.UTF_8);
                 assertEquals(TEST_STRING, read);
             }
         } finally {

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/hive/HiveUtils.java
Patch:
@@ -97,12 +97,12 @@ public static void startHiveMonitorThread(Statement stmt,
           LOGGER.warn("Fail to write output", e);
         }
       }
-      LOGGER.debug("Hive monitor thread is finished");
+      LOGGER.info("HiveMonitor-Thread is finished");
     });
     thread.setName("HiveMonitor-Thread");
     thread.setDaemon(true);
     thread.start();
-    LOGGER.info("Start HiveMonitor-Thread for sql: " + stmt);
+    LOGGER.info("Start HiveMonitor-Thread for sql: " + hiveStmt);
 
     if (progressBar != null) {
       hiveStmt.setInPlaceUpdateStream(progressBar.getInPlaceUpdateStream(context.out));

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -433,7 +433,7 @@ public boolean runAllParagraphs(String noteId,
               return false;
             }
           } catch (Exception e) {
-            throw new IOException("Fail to run paragraph json: " + raw);
+            throw new IOException("Fail to run paragraph json: " + raw, e);
           }
         }
       } finally {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/YarnUtils.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class YarnUtils {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(YarnUtils.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(YarnUtils.class);
 
   private static AMRMClient<ContainerRequest> amClient = AMRMClient.createAMRMClient();
   private static Configuration conf = new YarnConfiguration();
@@ -46,7 +46,7 @@ public class YarnUtils {
   }
 
   public static void register(String host, int port) throws Exception {
-    LOGGER.info("Registering yarn app at " + host + ":" + port);
+    LOGGER.info("Registering yarn app at {}:{}", host, port);
     try {
       amClient.registerApplicationMaster(host, port, null);
     } catch (YarnException e) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -85,6 +85,7 @@ public class NotebookTest extends AbstractInterpreterTest implements ParagraphJo
   private StatusChangedListener afterStatusChangedListener;
   private QuartzSchedulerService schedulerService;
 
+  @Override
   @Before
   public void setUp() throws Exception {
     System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC.getVarName(), "true");
@@ -105,6 +106,7 @@ public void setUp() throws Exception {
     schedulerService.waitForFinishInit();
   }
 
+  @Override
   @After
   public void tearDown() throws Exception {
     super.tearDown();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ParagraphRuntimeInfo.java
Patch:
@@ -18,7 +18,7 @@ public class ParagraphRuntimeInfo {
 
   // runtimeInfos job url or dropdown-menu key in
   // zeppelin-web/src/app/notebook/paragraph/paragraph-control.html
-  private List<Map<String, String>> values;  // values for the key-value pair property
+  private List<Object> values;  // values for the key-value pair property
   private String interpreterSettingId;
   
   public ParagraphRuntimeInfo(String propertyName, String label, 
@@ -39,7 +39,7 @@ public void addValue(Map<String, String> mapValue) {
   }
 
   @VisibleForTesting
-  public List<Map<String, String>> getValue() {
+  public List<Object> getValue() {
     return values;
   }
   

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java
Patch:
@@ -116,6 +116,7 @@ public void convertNoteFiles(ZeppelinConfiguration conf, boolean deleteOld) thro
       LOGGER.info("Convert old note file to new style, note count: " + oldNotesInfo.size());
       LOGGER.info("Delete old note: " + deleteOld);
       for (OldNoteInfo oldNoteInfo : oldNotesInfo) {
+        LOGGER.info("Converting note, id: {}", oldNoteInfo.getId());
         Note note = oldNotebookRepo.get(oldNoteInfo.getId(), AuthenticationInfo.ANONYMOUS);
         note.setPath(note.getName());
         note.setVersion(Util.getVersion());

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -1111,7 +1111,8 @@ public enum ConfVars {
     ZEPPELIN_SEARCH_USE_DISK("zeppelin.search.use.disk", true),
     ZEPPELIN_SEARCH_INDEX_PATH("zeppelin.search.index.path", "/tmp/zeppelin-index"),
     ZEPPELIN_JOBMANAGER_ENABLE("zeppelin.jobmanager.enable", false),
-    ZEPPELIN_SPARK_ONLY_YARN_CLUSTER("zeppelin.spark.only_yarn_cluster", false);
+    ZEPPELIN_SPARK_ONLY_YARN_CLUSTER("zeppelin.spark.only_yarn_cluster", false),
+    ZEPPELIN_SESSION_CHECK_INTERVAL("zeppelin.session.check_interval", 60 * 10 * 1000);
 
     private String varName;
     @SuppressWarnings("rawtypes")

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/util/ProcessLauncher.java
Patch:
@@ -53,7 +53,7 @@ public enum State {
   private ExecuteWatchdog watchdog;
   private ProcessLogOutputStream processOutput;
   protected String errorMessage = null;
-  protected State state = State.NEW;
+  protected volatile State state = State.NEW;
   private boolean launchTimeout = false;
 
   public ProcessLauncher(CommandLine commandLine,

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -180,7 +180,7 @@ public void run() {
       try {
         TestUtils.clearInstances();
         ZeppelinServer.main(new String[]{""});
-      } catch (Exception e) {
+      } catch (Throwable e) {
         LOG.error("Exception in WebDriverManager while getWebDriver ", e);
         throw new RuntimeException(e);
       }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -24,7 +24,6 @@
 import static org.junit.Assert.assertThat;
 
 import com.google.gson.Gson;
-import com.google.gson.internal.StringMap;
 import com.google.gson.reflect.TypeToken;
 
 import org.apache.zeppelin.interpreter.InterpreterSetting;
@@ -43,6 +42,7 @@
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -183,9 +183,9 @@ public void testRunParagraphSynchronously() throws IOException {
       resp = gson.fromJson(EntityUtils.toString(post.getEntity(), StandardCharsets.UTF_8),
               new TypeToken<Map<String, Object>>() {}.getType());
       assertEquals("OK", resp.get("status"));
-      StringMap stringMap = (StringMap) resp.get("body");
+      Map stringMap = (Map) resp.get("body");
       assertEquals("ERROR", stringMap.get("code"));
-      List<StringMap> interpreterResults = (List<StringMap>) stringMap.get("msg");
+      List<Map> interpreterResults = (List<Map>) stringMap.get("msg");
       assertTrue(interpreterResults.get(0).toString(),
               interpreterResults.get(0).get("data").toString().contains("invalid_cmd: command not found"));
       post.close();

File: zeppelin-plugins/notebookrepo/s3/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java
Patch:
@@ -46,6 +46,7 @@
 import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
 import com.amazonaws.services.s3.AmazonS3;
 import com.amazonaws.services.s3.AmazonS3Client;
+import com.amazonaws.services.s3.S3ClientOptions;
 import com.amazonaws.services.s3.AmazonS3EncryptionClient;
 import com.amazonaws.services.s3.model.CannedAccessControlList;
 import com.amazonaws.services.s3.model.CryptoConfiguration;
@@ -130,6 +131,7 @@ else if (conf.getS3EncryptionMaterialsProviderClass() != null) {
       // regular S3
       this.s3client = new AmazonS3Client(credentialsProvider, cliConf);
     }
+    s3client.setS3ClientOptions(S3ClientOptions.builder().setPathStyleAccess(conf.isS3PathStyleAccess()).build());
 
     // set S3 endpoint to use
     s3client.setEndpoint(conf.getS3Endpoint());

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -298,7 +298,7 @@ public void testIPythonPlotting() throws InterpreterException, InterruptedExcept
     assertEquals(context.out.toInterpreterResultMessage().get(0).getData(),
             InterpreterResult.Code.SUCCESS, result.code());
     interpreterResultMessages = context.out.toInterpreterResultMessage();
-
+    
     assertEquals(context.out.toString(), 5, interpreterResultMessages.size());
     // the first message is the warning text message.
     assertEquals(InterpreterResult.Type.HTML, interpreterResultMessages.get(1).getType());

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZSessionIntegrationTest.java
Patch:
@@ -206,7 +206,7 @@ public void testZSession_Spark() throws Exception {
       assertEquals(Status.ERROR, result.getStatus());
       assertEquals(1, result.getResults().size());
       assertEquals("TEXT", result.getResults().get(0).getType());
-      assertTrue(result.getResults().get(0).getData(), result.getResults().get(0).getData().contains("NoSuchTableException"));
+      assertTrue(result.getResults().get(0).getData(), result.getResults().get(0).getData().contains("Table or view not found"));
       assertEquals(0, result.getJobUrls().size());
 
     } finally {
@@ -279,7 +279,7 @@ public void testZSession_Spark_Submit() throws Exception {
       assertEquals(Status.ERROR, result.getStatus());
       assertEquals(1, result.getResults().size());
       assertEquals("TEXT", result.getResults().get(0).getType());
-      assertTrue(result.getResults().get(0).getData(), result.getResults().get(0).getData().contains("NoSuchTableException"));
+      assertTrue(result.getResults().get(0).getData(), result.getResults().get(0).getData().contains("Table or view not found"));
       assertEquals(0, result.getJobUrls().size());
 
       // cancel

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sStandardInterpreterLauncher.java
Patch:
@@ -153,7 +153,8 @@ public InterpreterClient launchDirectly(InterpreterLaunchContext context) throws
             zConf.getK8sSparkContainerImage(),
             getConnectTimeout(),
             getConnectPoolSize(),
-            isUserImpersonateForSparkInterpreter(context));
+            isUserImpersonateForSparkInterpreter(context),
+            zConf.getK8sTimeoutDuringPending());
   }
 
   protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) {
@@ -173,7 +174,7 @@ protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext co
     return env;
   }
 
-  String readFile(String path, Charset encoding) throws IOException {
+  private String readFile(String path, Charset encoding) throws IOException {
     byte[] encoded = Files.readAllBytes(Paths.get(path));
     return new String(encoded, encoding);
   }

File: zeppelin-jupyter/src/main/java/org/apache/zeppelin/jupyter/nbformat/Cell.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.jupyter.nbformat;
 
 import com.google.gson.annotations.SerializedName;
-import java.util.List;
 
 /**
  *

File: zeppelin-jupyter/src/main/java/org/apache/zeppelin/jupyter/nbformat/ExecuteResult.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.jupyter.nbformat;
 
 import com.google.gson.annotations.SerializedName;
-import org.apache.zeppelin.jupyter.types.JupyterOutputType;
 import org.apache.zeppelin.jupyter.types.ZeppelinOutputType;
 import org.apache.zeppelin.jupyter.zformat.TypeData;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Scheduler.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zeppelin.scheduler;
 
 import java.util.List;
+import java.util.concurrent.TimeUnit;
 
 /**
  * Interface for scheduler. Scheduler is used for manage the lifecycle of job.
@@ -40,4 +41,6 @@ public interface Scheduler extends Runnable {
 
   void stop();
 
+  void stop(int stopTimeoutVal, TimeUnit stopTimeoutUnit);
+
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java
Patch:
@@ -48,13 +48,15 @@ public class RemoteSchedulerTest extends AbstractInterpreterTest
   private static final int TICK_WAIT = 100;
   private static final int MAX_WAIT_CYCLES = 100;
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
-    schedulerSvc = new SchedulerFactory();
+    schedulerSvc = SchedulerFactory.singleton();
     interpreterSetting = interpreterSettingManager.getInterpreterSettingByName("test");
   }
 
+  @Override
   @After
   public void tearDown() {
     interpreterSetting.close();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -587,7 +587,7 @@ public Map<String, Object> getEditorSetting(String paragraphText, String noteId)
             if (interpreterSetting == null) {
               return DEFAULT_EDITOR;
             }
-            return interpreterSetting.getInterpreterInfo(intpName).getEditor();
+            return interpreterSetting.getDefaultInterpreterInfo().getEditor();
           } catch (Exception e) {
             LOGGER.warn(e.getMessage());
             return DEFAULT_EDITOR;

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -747,8 +747,8 @@ private InterpreterResult executeSql(String dbPrefix, String sql,
           }
 
           // start hive monitor thread if it is hive jdbc
-          if (getJDBCConfiguration(user).getPropertyMap(dbPrefix).getProperty(URL_KEY)
-                  .startsWith("jdbc:hive2://")) {
+          String jdbcURL = getJDBCConfiguration(user).getPropertyMap(dbPrefix).getProperty(URL_KEY);
+          if (jdbcURL != null && jdbcURL.startsWith("jdbc:hive2://")) {
             HiveUtils.startHiveMonitorThread(statement, context,
                     Boolean.parseBoolean(getProperty("hive.log.display", "true")));
           }

File: submarine/src/test/java/org/apache/zeppelin/submarine/PySubmarineInterpreterTest.java
Patch:
@@ -68,7 +68,7 @@ public void testTensorflow() throws InterpreterException {
     InterpreterResult intpResult = pySubmarineIntp.interpret(callTensorflowFunc, intpContext);
 
     // Check if the SubmarineInterpreter performs the tensorlfow function whether successfully.
-    assertEquals(intpResult.code(), InterpreterResult.Code.SUCCESS);
+    assertEquals(InterpreterResult.Code.SUCCESS, intpResult.code());
 
     // Successfully execute tensorflow to get the version function,
     // otherwise it will trigger an exception.

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/RepositoryListener.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.apache.zeppelin.dep;
 
+import org.eclipse.aether.AbstractRepositoryListener;
+import org.eclipse.aether.RepositoryEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.sonatype.aether.AbstractRepositoryListener;
-import org.sonatype.aether.RepositoryEvent;
 
 /**
  * Simple listener that print log.

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/TransferListener.java
Patch:
@@ -23,11 +23,11 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
+import org.eclipse.aether.transfer.AbstractTransferListener;
+import org.eclipse.aether.transfer.TransferEvent;
+import org.eclipse.aether.transfer.TransferResource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.sonatype.aether.transfer.AbstractTransferListener;
-import org.sonatype.aether.transfer.TransferEvent;
-import org.sonatype.aether.transfer.TransferResource;
 
 /**
  * Simple listener that show deps downloading progress.

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -144,7 +144,7 @@ public class RemoteInterpreterServer extends Thread
   private ScheduledExecutorService resultCleanService = Executors.newSingleThreadScheduledExecutor();
 
   private boolean isTest;
-  
+
   private ZeppelinConfiguration zConf;
   // cluster manager client
   private ClusterManagerClient clusterManagerClient;

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/DependencyResolverTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.rules.ExpectedException;
-import org.sonatype.aether.RepositoryException;
+import org.eclipse.aether.RepositoryException;
 
 import java.io.File;
 import java.io.FileNotFoundException;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -43,7 +43,7 @@
 import org.apache.zeppelin.socket.NotebookServer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.repository.RemoteRepository;
 
 import javax.validation.constraints.NotNull;
 import javax.ws.rs.DELETE;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSaving.java
Patch:
@@ -26,7 +26,7 @@
 import org.apache.zeppelin.common.JsonSerializable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.repository.RemoteRepository;
 
 import java.io.BufferedReader;
 import java.io.FileOutputStream;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -68,9 +68,9 @@
 import org.eclipse.jetty.util.annotation.ManagedObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.sonatype.aether.repository.Proxy;
-import org.sonatype.aether.repository.RemoteRepository;
-import org.sonatype.aether.repository.Authentication;
+import org.eclipse.aether.repository.Proxy;
+import org.eclipse.aether.repository.RemoteRepository;
+import org.eclipse.aether.repository.Authentication;
 
 import java.io.File;
 import java.io.FileInputStream;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.zeppelin.helium.ApplicationEventListener;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener;
 import org.junit.Test;
-import org.sonatype.aether.RepositoryException;
-import org.sonatype.aether.repository.RemoteRepository;
+import org.eclipse.aether.RepositoryException;
+import org.eclipse.aether.repository.RemoteRepository;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroupTest.java
Patch:
@@ -21,7 +21,7 @@
 import org.junit.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.sonatype.aether.RepositoryException;
+import org.eclipse.aether.RepositoryException;
 
 import java.io.IOException;
 import java.util.ArrayList;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -47,7 +47,7 @@
 import org.quartz.SchedulerException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.sonatype.aether.RepositoryException;
+import org.eclipse.aether.RepositoryException;
 
 import java.io.File;
 import java.io.IOException;

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -226,7 +226,7 @@ public void testDisableParagraphRunButton() throws Exception {
       ZeppelinITUtils.sleep(2000, false);
 
       collector.checkThat("Paragraph status is ",
-          getParagraphStatus(1), CoreMatchers.equalTo("PENDING")
+          getParagraphStatus(1), CoreMatchers.equalTo("FINISHED")
       );
 
       driver.navigate().refresh();

File: flink/flink-shims/src/main/java/org/apache/zeppelin/flink/FlinkShims.java
Patch:
@@ -126,6 +126,8 @@ public abstract Object getCollectStreamTableSink(InetAddress targetAddress,
 
   public abstract void executeSql(Object tableEnv, String sql);
 
+  public abstract String explain(Object tableEnv, String sql);
+
   public abstract String sqlHelp();
 
   public abstract void setCatalogManagerSchemaResolver(Object catalogManager,

File: flink/flink1.10-shims/src/main/java/org/apache/zeppelin/flink/shims110/CollectStreamTableSink.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.flink.shims111;
+package org.apache.zeppelin.flink.shims110;
 
 import org.apache.flink.api.common.typeinfo.TypeInformation;
 import org.apache.flink.api.common.typeinfo.Types;

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/FlinkSqlInterrpeter.java
Patch:
@@ -469,8 +469,7 @@ private void callDescribe(String name, InterpreterContext context) throws IOExce
   private void callExplain(String sql, InterpreterContext context) throws IOException {
     try {
       lock.lock();
-      Table table = this.tbenv.sqlQuery(sql);
-      context.out.write(this.tbenv.explain(table) + "\n");
+      context.out.write(this.flinkInterpreter.getFlinkShims().explain(tbenv, sql) + "\n");
     } finally {
       if (lock.isHeldByCurrentThread()) {
         lock.unlock();

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -427,6 +427,7 @@ private void configConnectionPool(GenericObjectPool connectionPool, Properties p
     boolean testWhileIdle = "true".equalsIgnoreCase(properties.getProperty("testWhileIdle"));
     long timeBetweenEvictionRunsMillis = PropertiesUtil.getLong(
         properties, "timeBetweenEvictionRunsMillis", -1L);
+
     long maxWaitMillis = PropertiesUtil.getLong(properties, "maxWaitMillis", -1L);
     int maxIdle = PropertiesUtil.getInt(properties, "maxIdle", 8);
     int minIdle = PropertiesUtil.getInt(properties, "minIdle", 0);

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -82,7 +82,7 @@ public static void startUp() {
     try {
       System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(), new File("../").getAbsolutePath());
       ZeppelinConfiguration conf = ZeppelinConfiguration.create();
-      shiroPath = conf.getRelativeDir(String.format("%s/shiro.ini", conf.getConfDir()));
+      shiroPath = conf.getAbsoluteDir(String.format("%s/shiro.ini", conf.getConfDir()));
       File file = new File(shiroPath);
       if (file.exists()) {
         originalShiro = StringUtils.join(FileUtils.readLines(file, "UTF-8"), "\n");

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/InterpreterModeActionsIT.java
Patch:
@@ -43,7 +43,6 @@
 import java.io.IOException;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.List;
 
 import static org.junit.Assert.assertTrue;
 
@@ -82,8 +81,8 @@ public static void startUp() {
     try {
       System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(), new File("../").getAbsolutePath());
       ZeppelinConfiguration conf = ZeppelinConfiguration.create();
-      shiroPath = conf.getRelativeDir(String.format("%s/shiro.ini", conf.getConfDir()));
-      interpreterOptionPath = conf.getRelativeDir(String.format("%s/interpreter.json", conf.getConfDir()));
+      shiroPath = conf.getAbsoluteDir(String.format("%s/shiro.ini", conf.getConfDir()));
+      interpreterOptionPath = conf.getAbsoluteDir(String.format("%s/interpreter.json", conf.getConfDir()));
       File shiroFile = new File(shiroPath);
       if (shiroFile.exists()) {
         originalShiro = StringUtils.join(FileUtils.readLines(shiroFile, "UTF-8"), "\n");

File: zeppelin-plugins/notebookrepo/filesystem/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java
Patch:
@@ -46,7 +46,7 @@ public FileSystemNotebookRepo() {
   }
 
   public void init(ZeppelinConfiguration zConf) throws IOException {
-    this.fs = new FileSystemStorage(zConf, zConf.getNotebookDir());
+    this.fs = new FileSystemStorage(zConf, zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR));
     LOGGER.info("Creating FileSystem: " + this.fs.getFs().getClass().getName());
     this.notebookDir = this.fs.makeQualified(new Path(zConf.getNotebookDir()));
     LOGGER.info("Using folder {} to store notebook", notebookDir);

File: zeppelin-plugins/notebookrepo/filesystem/src/main/java/org/apache/zeppelin/notebook/repo/OldFileSystemNotebookRepo.java
Patch:
@@ -35,7 +35,8 @@ public OldFileSystemNotebookRepo() {
   }
 
   public void init(ZeppelinConfiguration zConf) throws IOException {
-    this.fs = new FileSystemStorage(zConf, zConf.getNotebookDir());
+    this.fs = new FileSystemStorage(zConf,
+            zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR));
     LOGGER.info("Creating FileSystem: " + this.fs.getFs().getClass().getName() +
         " for Zeppelin Notebook.");
     this.notebookDir = this.fs.makeQualified(new Path(zConf.getNotebookDir()));

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -549,7 +549,7 @@ private static WebAppContext setupWebAppContext(
       // use packaged WAR
       webApp.setWar(warFile.getAbsolutePath());
       webApp.setExtractWAR(false);
-      File warTempDirectory = new File(conf.getRelativeDir(ConfVars.ZEPPELIN_WAR_TEMPDIR) + contextPath);
+      File warTempDirectory = new File(conf.getAbsoluteDir(ConfVars.ZEPPELIN_WAR_TEMPDIR) + contextPath);
       warTempDirectory.mkdir();
       LOG.info("ZeppelinServer Webapp path: {}", warTempDirectory.getPath());
       webApp.setTempDirectory(warTempDirectory);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/Helium.java
Patch:
@@ -39,7 +39,6 @@
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
 import org.apache.zeppelin.interpreter.ManagedInterpreterGroup;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
-import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;
 import org.apache.zeppelin.notebook.Paragraph;
 import org.apache.zeppelin.resource.DistributedResourcePool;
 import org.apache.zeppelin.resource.Resource;
@@ -75,7 +74,7 @@ public Helium(
     this(
         conf.getHeliumConfPath(),
         conf.getHeliumRegistry(),
-        new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO), "helium-registry-cache"),
+        new File(conf.getAbsoluteDir(ConfVars.ZEPPELIN_DEP_LOCALREPO), "helium-registry-cache"),
         heliumBundleFactory,
         heliumApplicationFactory,
         interpreterSettingManager);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -975,7 +975,7 @@ public void run() {
             LOGGER.info("Start to download dependencies for interpreter: {}", name);
             for (Dependency d : deps) {
               File destDir = new File(
-                  conf.getRelativeDir(ZeppelinConfiguration.ConfVars.ZEPPELIN_DEP_LOCALREPO));
+                  conf.getAbsoluteDir(ZeppelinConfiguration.ConfVars.ZEPPELIN_DEP_LOCALREPO));
 
               if (d.getExclusions() != null) {
                 dependencyResolver.load(d.getGroupArtifactVersion(), d.getExclusions(),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -745,7 +745,7 @@ private void copyDependenciesFromLocalPath(final InterpreterSetting setting) {
         LOGGER.info("Start to copy dependencies for interpreter: {}", setting.getName());
         for (Dependency d : deps) {
           File destDir = new File(
-              conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO));
+              conf.getAbsoluteDir(ConfVars.ZEPPELIN_DEP_LOCALREPO));
 
           int numSplits = d.getGroupArtifactVersion().split(":").length;
           if (!(numSplits >= 3 && numSplits <= 6)) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java
Patch:
@@ -53,10 +53,11 @@ public FileSystemRecoveryStorage(ZeppelinConfiguration zConf,
       throws IOException {
     super(zConf);
     this.interpreterSettingManager = interpreterSettingManager;
-    this.fs = new FileSystemStorage(zConf, zConf.getRecoveryDir());
+    String recoveryDirProperty = zConf.getString(ZeppelinConfiguration.ConfVars.ZEPPELIN_RECOVERY_DIR);
+    this.fs = new FileSystemStorage(zConf, recoveryDirProperty);
     LOGGER.info("Creating FileSystem: " + this.fs.getFs().getClass().getName() +
         " for Zeppelin Recovery.");
-    this.recoveryDir = this.fs.makeQualified(new Path(zConf.getRecoveryDir()));
+    this.recoveryDir = this.fs.makeQualified(new Path(recoveryDirProperty));
     LOGGER.info("Using folder {} to store recovery data", recoveryDir);
     this.fs.tryMkDir(recoveryDir);
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/OldVFSNotebookRepo.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.apache.zeppelin.notebook.Note;
-import org.apache.zeppelin.notebook.NoteInfo;
 import org.apache.zeppelin.notebook.OldNoteInfo;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.slf4j.Logger;
@@ -76,7 +75,7 @@ protected void setNotebookDirectory(String notebookDirPath) throws IOException {
     }
 
     if (filesystemRoot.getScheme() == null) { // it is local path
-      File f = new File(conf.getRelativeDir(filesystemRoot.getPath()));
+      File f = new File(conf.getAbsoluteDir(filesystemRoot.getPath()));
       this.filesystemRoot = f.toURI();
     }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -38,7 +38,6 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.NoteInfo;
-import org.apache.zeppelin.notebook.NoteAuth;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -78,7 +77,7 @@ protected void setNotebookDirectory(String notebookDirPath) throws IOException {
     }
 
     if (filesystemRoot.getScheme() == null) { // it is local path
-      File f = new File(conf.getRelativeDir(filesystemRoot.getPath()));
+      File f = new File(conf.getAbsoluteDir(filesystemRoot.getPath()));
       filesystemRoot = f.toURI();
     }
     this.fsManager = VFS.getManager();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/LocalConfigStorage.java
Patch:
@@ -43,9 +43,9 @@ public class LocalConfigStorage extends ConfigStorage {
 
   public LocalConfigStorage(ZeppelinConfiguration zConf) {
     super(zConf);
-    this.interpreterSettingPath = new File(zConf.getInterpreterSettingPath());
-    this.authorizationPath = new File(zConf.getNotebookAuthorizationPath());
-    this.credentialPath = new File(zConf.getCredentialsPath());
+    this.interpreterSettingPath = new File(zConf.getInterpreterSettingPath(true));
+    this.authorizationPath = new File(zConf.getNotebookAuthorizationPath(true));
+    this.credentialPath = new File(zConf.getCredentialsPath(true));
   }
 
   @Override

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/conf/ZeppelinConfigurationTest.java
Patch:
@@ -131,9 +131,9 @@ public void getConfigFSPath() throws ConfigurationException {
     System.setProperty(ConfVars.ZEPPELIN_HOME.getVarName(), "/usr/lib/zeppelin");
     System.setProperty(ConfVars.ZEPPELIN_CONFIG_FS_DIR.getVarName(), "conf");
     ZeppelinConfiguration conf = new ZeppelinConfiguration(this.getClass().getResource("/zeppelin-test-site.xml"));
-    assertEquals("/usr/lib/zeppelin/conf", conf.getConfigFSDir());
+    assertEquals("/usr/lib/zeppelin/conf", conf.getConfigFSDir(true));
 
     System.setProperty(ConfVars.ZEPPELIN_CONFIG_STORAGE_CLASS.getVarName(), "org.apache.zeppelin.storage.FileSystemConfigStorage");
-    assertEquals("conf", conf.getConfigFSDir());
+    assertEquals("conf", conf.getConfigFSDir(false));
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumBundleFactoryTest.java
Patch:
@@ -48,7 +48,8 @@ public void setUp() throws InstallationException, TaskRunnerException, IOExcepti
 
     ZeppelinConfiguration conf = ZeppelinConfiguration.create();
     nodeInstallationDir =
-        new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO), HELIUM_LOCAL_REPO).getAbsoluteFile();
+        new File(conf.getAbsoluteDir(ConfVars.ZEPPELIN_DEP_LOCALREPO), HELIUM_LOCAL_REPO);
+
     hbf = new HeliumBundleFactory(conf);
     hbf.installNodeAndNpm();
     hbf.copyFrameworkModulesToInstallPath(true);

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -136,6 +136,9 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     result = interpreter.interpret("/*line 1 \n line 2*/print(\"hello world\")", getInterpreterContext());
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
 
+    // test $intp
+    result = interpreter.interpret("$intp", getInterpreterContext());
+    assertEquals(InterpreterResult.Code.SUCCESS, result.code());
 
     // Companion object with case class
     result = interpreter.interpret("import scala.math._\n" +

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest.java
Patch:
@@ -582,7 +582,7 @@ public void zRunTest() throws IOException, InterruptedException {
       p21.setText("%spark print(a)");
 
       // run p20 of note2 via paragraph in note1
-      p0.setText(String.format("%%spark z.run(\"%s\", \"%s\")", note2.getId(), p20.getId()));
+      p0.setText(String.format("%%spark.pyspark z.run(\"%s\", \"%s\")", note2.getId(), p20.getId()));
       note.run(p0.getId(), true);
       waitForFinish(p20);
       assertEquals(Status.FINISHED, p20.getStatus());

File: markdown/src/main/java/org/apache/zeppelin/markdown/Markdown.java
Patch:
@@ -76,7 +76,7 @@ public Markdown(Properties property) {
   }
 
   public static MarkdownParser createMarkdownParser(String parserType) {
-    LOGGER.debug("Creating " + parserType + " markdown interpreter");
+    LOGGER.debug("Creating {} markdown interpreter", parserType);
 
     if (MarkdownParserType.PEGDOWN.toString().equals(parserType)) {
       return new PegdownParser();

File: markdown/src/main/java/org/apache/zeppelin/markdown/ParamVar.java
Patch:
@@ -31,7 +31,7 @@
 public class ParamVar<K, V> extends Var<Map<K, V>> {
 
   public ParamVar() {
-    super(new HashMap<K, V>());
+    super(new HashMap<>());
   }
 
   public boolean put(K key, V value) {

File: markdown/src/main/java/org/apache/zeppelin/markdown/UMLBlockQuoteParser.java
Patch:
@@ -49,8 +49,8 @@ public class UMLBlockQuoteParser extends AbstractBlockParser {
   private static final Logger LOGGER = LoggerFactory.getLogger(UMLBlockQuoteParser.class);
 
 
-  private static Pattern YUML_BLOCK_START = Pattern.compile("(%%%)\\s+(.*\\n)");
-  private static Pattern YUML_BLOCK_END = Pattern.compile("%%%(\\s*$)");
+  private static final Pattern YUML_BLOCK_START = Pattern.compile("(%%%)\\s+(.*\\n)");
+  private static final Pattern YUML_BLOCK_END = Pattern.compile("%%%(\\s*$)");
 
   private final UMLBlockQuote block = new UMLBlockQuote();
   private BlockContent content = new BlockContent();

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/MiniZeppelin.java
Patch:
@@ -58,7 +58,7 @@ public void start(Class clazz) throws IOException {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_CONF_DIR.getVarName(), confDir.getAbsolutePath());
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(), notebookDir.getAbsolutePath());
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getVarName(), "120000");
-    conf = new ZeppelinConfiguration();
+    conf = ZeppelinConfiguration.create();
     interpreterSettingManager = new InterpreterSettingManager(conf,
         mock(AngularObjectRegistryListener.class), mock(RemoteInterpreterProcessListener.class), mock(ApplicationEventListener.class));
     interpreterFactory = new InterpreterFactory(interpreterSettingManager);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterMonitor.java
Patch:
@@ -71,7 +71,7 @@ public class ClusterMonitor {
   public ClusterMonitor(ClusterManager clusterManagerServer) {
     this.clusterManager = clusterManagerServer;
 
-    ZeppelinConfiguration zconf = new ZeppelinConfiguration();
+    ZeppelinConfiguration zconf = ZeppelinConfiguration.create();
     heartbeatInterval = zconf.getClusterHeartbeatInterval();
     heartbeatTimeout = zconf.getClusterHeartbeatTimeout();
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ParagraphInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class ParagraphInfo implements org.apache.thrift.TBase<ParagraphInfo, ParagraphInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ParagraphInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParagraphInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventService.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class RemoteInterpreterEventService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public enum RemoteInterpreterEventType implements org.apache.thrift.TEnum {
   NO_OP(1),
   ANGULAR_OBJECT_ADD(2),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ServiceException.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class ServiceException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/WebUrlInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-22")
 public class WebUrlInfo implements org.apache.thrift.TBase<WebUrlInfo, WebUrlInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WebUrlInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WebUrlInfo");
 

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sStandardInterpreterLauncherTest.java
Patch:
@@ -44,7 +44,7 @@ public void setUp() {
   @Test
   public void testK8sLauncher() throws IOException {
     // given
-    ZeppelinConfiguration zConf = new ZeppelinConfiguration();
+    ZeppelinConfiguration zConf = ZeppelinConfiguration.create();
     K8sStandardInterpreterLauncher launcher = new K8sStandardInterpreterLauncher(zConf, null);
     Properties properties = new Properties();
     properties.setProperty("ENV_1", "VALUE_1");
@@ -73,7 +73,7 @@ public void testK8sLauncher() throws IOException {
   @Test
   public void testK8sLauncherWithSparkAndUserImpersonate() throws IOException {
     // given
-    ZeppelinConfiguration zConf = new ZeppelinConfiguration();
+    ZeppelinConfiguration zConf = ZeppelinConfiguration.create();
     K8sStandardInterpreterLauncher launcher = new K8sStandardInterpreterLauncher(zConf, null);
     Properties properties = new Properties();
     properties.setProperty("ENV_1", "VALUE_1");
@@ -106,7 +106,7 @@ public void testK8sLauncherWithSparkAndUserImpersonate() throws IOException {
   @Test
   public void testK8sLauncherWithSparkAndWithoutUserImpersonate() throws IOException {
     // given
-    ZeppelinConfiguration zConf = new ZeppelinConfiguration();
+    ZeppelinConfiguration zConf = ZeppelinConfiguration.create();
     K8sStandardInterpreterLauncher launcher = new K8sStandardInterpreterLauncher(zConf, null);
     Properties properties = new Properties();
     properties.setProperty("ENV_1", "VALUE_1");

File: zeppelin-plugins/launcher/yarn/src/main/java/org/apache/zeppelin/interpreter/launcher/YarnRemoteInterpreterProcess.java
Patch:
@@ -197,7 +197,6 @@ public void start(String userName) throws IOException {
                 + ", diagnostics=" + appReport.getDiagnostics());
       }
       isYarnAppRunning.set(true);
-
     } catch (Exception e) {
       LOGGER.error("Fail to launch yarn interpreter process", e);
       throw new IOException(e);

File: zeppelin-plugins/notebookrepo/filesystem/src/test/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepoTest.java
Patch:
@@ -51,7 +51,7 @@ public class FileSystemNotebookRepoTest {
   @Before
   public void setUp() throws IOException {
     notebookDir = Files.createTempDirectory("FileSystemNotebookRepoTest").toFile().getAbsolutePath();
-    zConf = new ZeppelinConfiguration();
+    zConf = ZeppelinConfiguration.create();
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(), notebookDir);
     hadoopConf = new Configuration();
     fs = FileSystem.get(hadoopConf);

File: zeppelin-plugins/notebookrepo/gcs/src/test/java/org/apache/zeppelin/notebook/repo/GCSNotebookRepoTest.java
Patch:
@@ -86,7 +86,7 @@ public void setUp() throws Exception {
     this.storage = LocalStorageHelper.getOptions().getService();
 
     System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_GCS_STORAGE_DIR.getVarName(), uriPath);
-    this.notebookRepo = new GCSNotebookRepo(new ZeppelinConfiguration(), storage);
+    this.notebookRepo = new GCSNotebookRepo(ZeppelinConfiguration.create(), storage);
   }
 
   private static Note makeRunningNote() {
@@ -229,7 +229,7 @@ private void createMalformed(String noteId, String notePath) throws IOException
   public void testInitialization_pathNotSet() throws Exception {
     try {
       System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_GCS_STORAGE_DIR.getVarName(), "");
-      new GCSNotebookRepo(new ZeppelinConfiguration(), storage);
+      new GCSNotebookRepo(ZeppelinConfiguration.create(), storage);
       fail();
     } catch (IOException e) {}
   }
@@ -238,7 +238,7 @@ public void testInitialization_pathNotSet() throws Exception {
   public void testInitialization_malformedPath() throws Exception {
     try {
       System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_GCS_STORAGE_DIR.getVarName(), "foo");
-      new GCSNotebookRepo(new ZeppelinConfiguration(), storage);
+      new GCSNotebookRepo(ZeppelinConfiguration.create(), storage);
       fail();
     } catch (IOException e) {}
   }

File: zeppelin-plugins/notebookrepo/mongo/src/test/java/org/apache/zeppelin/notebook/repo/MongoNotebookRepoTest.java
Patch:
@@ -63,7 +63,7 @@ public void setUp() throws IOException {
     mongodExecutable.start();
 
     System.setProperty(ZEPPELIN_NOTEBOOK_MONGO_URI.getVarName(), "mongodb://" + bindIp + ":" + port);
-    zConf = new ZeppelinConfiguration();
+    zConf = ZeppelinConfiguration.create();
     notebookRepo = new MongoNotebookRepo();
     notebookRepo.init(zConf);
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/ConnectionManager.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
@@ -67,9 +68,9 @@ public class ConnectionManager {
 
   final Queue<NotebookSocket> connectedSockets = new ConcurrentLinkedQueue<>();
   // noteId -> connection
-  final Map<String, List<NotebookSocket>> noteSocketMap = new ConcurrentHashMap<>();
+  final Map<String, List<NotebookSocket>> noteSocketMap = new HashMap<>();
   // user -> connection
-  final Map<String, Queue<NotebookSocket>> userSocketMap = new ConcurrentHashMap<>();
+  final Map<String, Queue<NotebookSocket>> userSocketMap = new HashMap<>();
 
   /**
    * This is a special endpoint in the notebook websoket, Every connection in this Queue

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -134,7 +134,7 @@ public class InterpreterSetting {
   private transient ApplicationEventListener appEventListener;
   private transient DependencyResolver dependencyResolver;
 
-  private transient ZeppelinConfiguration conf = new ZeppelinConfiguration();
+  private transient ZeppelinConfiguration conf = ZeppelinConfiguration.create();
 
   private transient RecoveryStorage recoveryStorage;
   private transient RemoteInterpreterEventServer interpreterEventServer;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zeppelin.interpreter;
 
+import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
 import org.apache.zeppelin.scheduler.Job;
 import org.apache.zeppelin.scheduler.Scheduler;
@@ -65,6 +66,7 @@ public RemoteInterpreterProcess getOrCreateInterpreterProcess(String userName,
         remoteInterpreterProcess = interpreterSetting.createInterpreterProcess(id, userName,
                 properties);
         remoteInterpreterProcess.start(userName);
+        remoteInterpreterProcess.init(ZeppelinConfiguration.create());
         getInterpreterSetting().getRecoveryStorage()
                 .onInterpreterClientStart(remoteInterpreterProcess);
       }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/RemoteInterpreterEventServer.java
Patch:
@@ -72,6 +72,7 @@ public class RemoteInterpreterEventServer implements RemoteInterpreterEventServi
   private String portRange;
   private int port;
   private String host;
+  private ZeppelinConfiguration zConf;
   private TThreadPoolServer thriftServer;
   private InterpreterSettingManager interpreterSettingManager;
 
@@ -85,6 +86,7 @@ public class RemoteInterpreterEventServer implements RemoteInterpreterEventServi
 
   public RemoteInterpreterEventServer(ZeppelinConfiguration zConf,
                                       InterpreterSettingManager interpreterSettingManager) {
+    this.zConf = zConf;
     this.portRange = zConf.getZeppelinServerRPCPortRange();
     this.interpreterSettingManager = interpreterSettingManager;
     this.listener = interpreterSettingManager.getRemoteInterpreterProcessListener();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -57,7 +57,7 @@ public void setUp() throws Exception {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(), notebookDir.getAbsolutePath());
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_DEFAULT.getVarName(), "test");
 
-    conf = new ZeppelinConfiguration();
+    conf = ZeppelinConfiguration.create();
     interpreterSettingManager = new InterpreterSettingManager(conf,
         mock(AngularObjectRegistryListener.class), mock(RemoteInterpreterProcessListener.class), mock(ApplicationEventListener.class));
     interpreterFactory = new InterpreterFactory(interpreterSettingManager);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -182,7 +182,7 @@ public void testCreateUpdateRemoveSetting() throws IOException, InterpreterExcep
     assertEquals(6, interpreterSettingManager.get().size());
 
     // load it again
-    InterpreterSettingManager interpreterSettingManager3 = new InterpreterSettingManager(new ZeppelinConfiguration(),
+    InterpreterSettingManager interpreterSettingManager3 = new InterpreterSettingManager(ZeppelinConfiguration.create(),
         mock(AngularObjectRegistryListener.class), mock(RemoteInterpreterProcessListener.class), mock(ApplicationEventListener.class));
     assertEquals(6, interpreterSettingManager3.get().size());
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncherTest.java
Patch:
@@ -39,7 +39,7 @@ public void setUp() {
 
   @Test
   public void testLauncher() throws IOException {
-    ZeppelinConfiguration zConf = new ZeppelinConfiguration();
+    ZeppelinConfiguration zConf = ZeppelinConfiguration.create();
     StandardInterpreterLauncher launcher = new StandardInterpreterLauncher(zConf, null);
     Properties properties = new Properties();
     properties.setProperty("ENV_1", "VALUE_1");
@@ -64,7 +64,7 @@ public void testLauncher() throws IOException {
 
   @Test
   public void testConnectTimeOut() throws IOException {
-    ZeppelinConfiguration zConf = new ZeppelinConfiguration();
+    ZeppelinConfiguration zConf = ZeppelinConfiguration.create();
     StandardInterpreterLauncher launcher = new StandardInterpreterLauncher(zConf, null);
     Properties properties = new Properties();
     properties.setProperty(

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManagerTest.java
Patch:
@@ -48,7 +48,6 @@ public void setUp() throws Exception {
     zConf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL.getVarName(), "1000");
     zConf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD.getVarName(), "10000");
 
-    zConf.save(zeppelinSiteFile);
     super.setUp();
   }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -47,7 +47,7 @@ public void setUp() throws IOException {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(),
         notebookDir.getAbsolutePath());
     notebookRepo = new VFSNotebookRepo();
-    zConf = new ZeppelinConfiguration();
+    zConf = ZeppelinConfiguration.create();
     notebookRepo.init(zConf);
   }
 

File: zeppelin-plugins/launcher/yarn/src/main/java/org/apache/zeppelin/interpreter/launcher/YarnRemoteInterpreterProcess.java
Patch:
@@ -260,7 +260,7 @@ private ContainerLaunchContext setUpAMLaunchContext() throws IOException {
       FileUtils.forceDelete(flinkZip);
 
       String hiveConfDir = launchContext.getProperties().getProperty("HIVE_CONF_DIR");
-      if (org.apache.commons.lang3.StringUtils.isBlank(hiveConfDir)) {
+      if (!org.apache.commons.lang3.StringUtils.isBlank(hiveConfDir)) {
         srcPath = localFs.makeQualified(new Path(new File(hiveConfDir).toURI()));
         destPath = copyFileToRemote(stagingDir, srcPath, (short) 1);
         addResource(fs, destPath, localResources, LocalResourceType.ARCHIVE, "hive_conf");

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZSessionIntegrationTest.java
Patch:
@@ -324,6 +324,7 @@ public void testZSession_Flink() throws Exception {
       assertEquals(result.toString(), Status.FINISHED, result.getStatus());
       Map<String, String> localProperties = new HashMap<>();
       localProperties.put("type", "update");
+      localProperties.put("parallelism", "2");
       result = session.execute("ssql", localProperties, "select url, count(1) as pv from log group by url");
       assertEquals(result.toString(), Status.FINISHED, result.getStatus());
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest111.java
Patch:
@@ -29,7 +29,7 @@ public class FlinkIntegrationTest111 extends FlinkIntegrationTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.11.1"}
+            {"1.11.2"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinFlinkClusterTest111.java
Patch:
@@ -29,7 +29,7 @@ public class ZeppelinFlinkClusterTest111 extends ZeppelinFlinkClusterTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.11.1"}
+            {"1.11.2"}
     });
   }
 

File: helium-dev/src/main/java/org/apache/zeppelin/helium/ZeppelinDevServer.java
Patch:
@@ -38,7 +38,7 @@ public class ZeppelinDevServer extends
 
   private DevInterpreter interpreter = null;
   private InterpreterOutput out;
-  public ZeppelinDevServer(int port) throws TException, IOException {
+  public ZeppelinDevServer(int port) throws Exception {
     super(null, port, null, ":");
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -76,7 +76,7 @@ public static void setUp() throws IOException {
     hadoopCluster.start();
 
     zeppelin = new MiniZeppelin();
-    zeppelin.start();
+    zeppelin.start(FlinkIntegrationTest.class);
     interpreterFactory = zeppelin.getInterpreterFactory();
     interpreterSettingManager = zeppelin.getInterpreterSettingManager();
   }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/JdbcIntegrationTest.java
Patch:
@@ -47,7 +47,7 @@ public class JdbcIntegrationTest {
   @BeforeClass
   public static void setUp() throws IOException {
     zeppelin = new MiniZeppelin();
-    zeppelin.start();
+    zeppelin.start(JdbcIntegrationTest.class);
     interpreterFactory = zeppelin.getInterpreterFactory();
     interpreterSettingManager = zeppelin.getInterpreterSettingManager();
   }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest.java
Patch:
@@ -73,7 +73,7 @@ public static void setUp() throws IOException {
     hadoopCluster.start();
 
     zeppelin = new MiniZeppelin();
-    zeppelin.start();
+    zeppelin.start(SparkIntegrationTest.class);
     interpreterFactory = zeppelin.getInterpreterFactory();
     interpreterSettingManager = zeppelin.getInterpreterSettingManager();
   }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/YarnInterpreterLauncherIntegrationTest.java
Patch:
@@ -64,7 +64,7 @@ public static void setUp() throws IOException {
     hadoopCluster.start();
 
     zeppelin = new MiniZeppelin();
-    zeppelin.start();
+    zeppelin.start(YarnInterpreterLauncherIntegrationTest.class);
     interpreterFactory = zeppelin.getInterpreterFactory();
     interpreterSettingManager = zeppelin.getInterpreterSettingManager();
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ParagraphInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class ParagraphInfo implements org.apache.thrift.TBase<ParagraphInfo, ParagraphInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ParagraphInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParagraphInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public enum RemoteInterpreterEventType implements org.apache.thrift.TEnum {
   NO_OP(1),
   ANGULAR_OBJECT_ADD(2),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ServiceException.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class ServiceException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/WebUrlInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-09-14")
 public class WebUrlInfo implements org.apache.thrift.TBase<WebUrlInfo, WebUrlInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WebUrlInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WebUrlInfo");
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServerTest.java
Patch:
@@ -41,7 +41,7 @@
 public class RemoteInterpreterServerTest {
 
   @Test
-  public void testStartStop() throws InterruptedException, IOException, TException {
+  public void testStartStop() throws Exception {
     RemoteInterpreterServer server = new RemoteInterpreterServer("localhost",
         RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces(), ":", "groupId", true);
 
@@ -50,7 +50,7 @@ public void testStartStop() throws InterruptedException, IOException, TException
   }
 
   @Test
-  public void testStartStopWithQueuedEvents() throws InterruptedException, IOException, TException {
+  public void testStartStopWithQueuedEvents() throws Exception {
     RemoteInterpreterServer server = new RemoteInterpreterServer("localhost",
         RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces(), ":", "groupId", true);
     server.intpEventClient = mock(RemoteInterpreterEventClient.class);
@@ -93,7 +93,7 @@ private void stopRemoteInterpreterServer(RemoteInterpreterServer server, int tim
   }
 
   @Test
-  public void testInterpreter() throws IOException, TException, InterruptedException {
+  public void testInterpreter() throws Exception {
     final RemoteInterpreterServer server = new RemoteInterpreterServer("localhost",
         RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces(), ":", "groupId", true);
     server.intpEventClient = mock(RemoteInterpreterEventClient.class);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java
Patch:
@@ -65,7 +65,6 @@ public RemoteInterpreterProcess getOrCreateInterpreterProcess(String userName,
         remoteInterpreterProcess = interpreterSetting.createInterpreterProcess(id, userName,
                 properties);
         remoteInterpreterProcess.start(userName);
-        interpreterSetting.getLifecycleManager().onInterpreterProcessStarted(this);
         getInterpreterSetting().getRecoveryStorage()
                 .onInterpreterClientStart(remoteInterpreterProcess);
       }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.zeppelin.dep.Dependency;
 import org.apache.zeppelin.display.AngularObjectRegistryListener;
 import org.apache.zeppelin.helium.ApplicationEventListener;
-import org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener;
 import org.junit.Test;
 import org.sonatype.aether.RepositoryException;
@@ -50,7 +49,6 @@ public void testInitInterpreterSettingManager() throws IOException, RepositoryEx
     InterpreterSetting interpreterSetting = interpreterSettingManager.getByName("test");
     assertEquals("test", interpreterSetting.getName());
     assertEquals("test", interpreterSetting.getGroup());
-    assertTrue(interpreterSetting.getLifecycleManager() instanceof NullLifecycleManager);
     assertEquals(8, interpreterSetting.getInterpreterInfos().size());
     // 3 other builtin properties:
     //   * zeppelin.interpreter.output.limit

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/SessionConfInterpreterTest.java
Patch:
@@ -45,7 +45,7 @@ public void testUserSessionConfInterpreter() throws InterpreterException {
         properties, "session_1", "group_1", mockInterpreterSetting);
 
     RemoteInterpreter remoteInterpreter =
-        new RemoteInterpreter(properties, "session_1", "clasName", "user1", null);
+        new RemoteInterpreter(properties, "session_1", "clasName", "user1");
     List<Interpreter> interpreters = new ArrayList<>();
     interpreters.add(confInterpreter);
     interpreters.add(remoteInterpreter);

File: java/src/main/java/org/apache/zeppelin/java/JavaInterpreter.java
Patch:
@@ -36,7 +36,7 @@
  */
 public class JavaInterpreter extends Interpreter {
 
-  private static final Logger logger = LoggerFactory.getLogger(JavaInterpreter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(JavaInterpreter.class);
 
   public JavaInterpreter(Properties property) {
     super(property);
@@ -65,7 +65,7 @@ public InterpreterResult interpret(String code, InterpreterContext context) {
       String res = StaticRepl.execute(generatedClassName, code);
       return new InterpreterResult(InterpreterResult.Code.SUCCESS, res);
     } catch (Exception e) {
-      logger.error("Exception in Interpreter while interpret", e);
+      LOGGER.error("Exception in Interpreter while interpret", e);
       return new InterpreterResult(InterpreterResult.Code.ERROR, e.getMessage());
 
     }

File: ksql/src/main/java/org/apache/zeppelin/ksql/KSQLInterpreter.java
Patch:
@@ -142,10 +142,10 @@ private void executeQuery(final String paragraphId,
 
   @Override
   public void cancel(InterpreterContext context) throws InterpreterException {
-    logger.info("Trying to cancel paragraphId {}", context.getParagraphId());
+    LOGGER.info("Trying to cancel paragraphId {}", context.getParagraphId());
     try {
       ksqlRestService.closeClient(context.getParagraphId());
-      logger.info("Removed");
+      LOGGER.info("Removed");
     } catch (IOException e) {
       throw new RuntimeException(e);
     }

File: rlang/src/main/java/org/apache/zeppelin/r/RInterpreter.java
Patch:
@@ -151,7 +151,7 @@ public InterpreterResult internalInterpret(String lines, InterpreterContext inte
         return new InterpreterResult(InterpreterResult.Code.SUCCESS, "");
       }
     } catch (Exception e) {
-      logger.error("Exception while connecting to R", e);
+      LOGGER.error("Exception while connecting to R", e);
       return new InterpreterResult(InterpreterResult.Code.ERROR, e.getMessage());
     }
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterManager.java
Patch:
@@ -129,7 +129,7 @@
  * 3. Cluster monitoring
  */
 public abstract class ClusterManager {
-  private static Logger LOGGER = LoggerFactory.getLogger(ClusterManager.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ClusterManager.class);
 
   public ZeppelinConfiguration zConf;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/completer/StringsCompleter.java
Patch:
@@ -28,7 +28,7 @@
  * Case-insensitive completer for a set of strings.
  */
 public class StringsCompleter implements Completer {
-  private final SortedSet<String> strings = new TreeSet<String>(new Comparator<String>() {
+  private final SortedSet<String> strings = new TreeSet<>(new Comparator<String>() {
     @Override
     public int compare(String o1, String o2) {
       return o1.compareToIgnoreCase(o2);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutput.java
Patch:
@@ -36,8 +36,8 @@
  */
 public class InterpreterOutput extends OutputStream {
   Logger logger = LoggerFactory.getLogger(InterpreterOutput.class);
-  private final int NEW_LINE_CHAR = '\n';
-  private final int LINE_FEED_CHAR = '\r';
+  private static final int NEW_LINE_CHAR = '\n';
+  private static final int LINE_FEED_CHAR = '\r';
 
   private List<InterpreterResultMessageOutput> resultMessageOutputs = new LinkedList<>();
   private InterpreterResultMessageOutput currentOut;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/YarnUtils.java
Patch:
@@ -20,13 +20,12 @@
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.yarn.api.records.FinalApplicationStatus;
 import org.apache.hadoop.yarn.client.api.AMRMClient;
+import org.apache.hadoop.yarn.client.api.AMRMClient.ContainerRequest;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;
 import org.apache.hadoop.yarn.exceptions.YarnException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.IOException;
-
 
 /**
  * Singleton class which is used for register/unregister yarn app AM.
@@ -38,7 +37,7 @@ public class YarnUtils {
 
   private static Logger LOGGER = LoggerFactory.getLogger(YarnUtils.class);
 
-  private static AMRMClient amClient = AMRMClient.createAMRMClient();
+  private static AMRMClient<ContainerRequest> amClient = AMRMClient.createAMRMClient();
   private static Configuration conf = new YarnConfiguration();
 
   static {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -38,7 +38,7 @@
  * Changing/adding/deleting non transitive field name need consideration of that.
  */
 public abstract class Job<T> {
-  private static Logger LOGGER = LoggerFactory.getLogger(Job.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(Job.class);
   private static SimpleDateFormat JOB_DATE_FORMAT = new SimpleDateFormat("yyyyMMdd-HHmmss");
 
   /**

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class ConfInterpreter extends Interpreter {
 
-  private static Logger LOGGER = LoggerFactory.getLogger(ConfInterpreter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ConfInterpreter.class);
 
   protected String sessionId;
   protected String interpreterGroupId;
@@ -68,8 +68,7 @@ public InterpreterResult interpret(String st, InterpreterContext context)
       Properties newProperties = new Properties();
       newProperties.load(new StringReader(st));
       finalProperties.putAll(newProperties);
-      LOGGER.debug("Properties for InterpreterGroup: " + interpreterGroupId + " is "
-          + finalProperties);
+      LOGGER.debug("Properties for InterpreterGroup: {} is {}", interpreterGroupId, finalProperties);
       interpreterSetting.setInterpreterGroupProperties(interpreterGroupId, finalProperties);
       return new InterpreterResult(InterpreterResult.Code.SUCCESS);
     } catch (IOException e) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/SessionRestApi.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
 import org.apache.zeppelin.notebook.Notebook;
 import org.apache.zeppelin.common.SessionInfo;
+import org.apache.zeppelin.rest.exception.SessionNoteFoundException;
 import org.apache.zeppelin.server.JsonResponse;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -98,7 +99,7 @@ public Response stopSession(@PathParam("sessionId") String sessionId) {
   public Response getSession(@PathParam("sessionId") String sessionId) throws Exception {
     SessionInfo session = sessionManager.getSession(sessionId);
     if (session == null) {
-      return new JsonResponse<>(Response.Status.NOT_FOUND).build();
+      throw new SessionNoteFoundException(sessionId);
     } else {
       return new JsonResponse<>(Response.Status.OK, "", session).build();
     }

File: groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java
Patch:
@@ -18,6 +18,7 @@
 
 import groovy.lang.Closure;
 import groovy.xml.MarkupBuilder;
+import org.apache.thrift.TException;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.AngularObjectRegistry;
@@ -239,7 +240,7 @@ public Object angular(String name) {
   }
 
   @SuppressWarnings("unchecked")
-  public void angularBind(String name, Object o, String noteId) {
+  public void angularBind(String name, Object o, String noteId) throws TException {
     z.angularBind(name, o, noteId);
   }
 
@@ -250,7 +251,7 @@ public void angularBind(String name, Object o, String noteId) {
    * @param name name of the variable
    * @param o value
    */
-  public void angularBind(String name, Object o) {
+  public void angularBind(String name, Object o) throws TException {
     angularBind(name, o, interpreterContext.getNoteId());
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest30.java
Patch:
@@ -34,8 +34,8 @@ public SparkIntegrationTest30(String sparkVersion, String hadoopVersion) {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"3.0.0", "2.7"},
-            {"3.0.0", "3.2"}
+            {"3.0.1", "2.7"},
+            {"3.0.1", "3.2"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest30.java
Patch:
@@ -33,8 +33,8 @@ public ZeppelinSparkClusterTest30(String sparkVersion, String hadoopVersion) thr
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"3.0.0", "2.7"},
-            {"3.0.0", "3.2"}
+            {"3.0.1", "2.7"},
+            {"3.0.1", "3.2"}
     });
   }
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Booter.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.commons.lang3.Validate;
 import org.apache.maven.repository.internal.MavenRepositorySystemSession;
+import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.sonatype.aether.RepositorySystem;
@@ -74,7 +75,8 @@ static String resolveLocalRepoPath(String localRepoPath) {
   public static RemoteRepository newCentralRepository() {
     String mvnRepo = System.getenv("ZEPPELIN_INTERPRETER_DEP_MVNREPO");
     if (mvnRepo == null) {
-      mvnRepo = System.getProperty("zeppelin.interpreter.dep.mvnRepo");
+      mvnRepo = ZeppelinConfiguration.create().getString(
+              ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_DEP_MVNREPO);
     }
     if (mvnRepo == null) {
       mvnRepo = "https://repo1.maven.org/maven2/";

File: zeppelin-client/src/main/java/org/apache/zeppelin/client/ZSession.java
Patch:
@@ -18,7 +18,8 @@
 package org.apache.zeppelin.client;
 
 import org.apache.commons.lang3.StringUtils;
-import org.apache.zeppelin.client.websocket.Message;
+import org.apache.zeppelin.common.Message;
+import org.apache.zeppelin.common.SessionInfo;
 import org.apache.zeppelin.client.websocket.MessageHandler;
 import org.apache.zeppelin.client.websocket.StatementMessageHandler;
 import org.apache.zeppelin.client.websocket.ZeppelinWebSocketClient;

File: zeppelin-client/src/main/java/org/apache/zeppelin/client/websocket/AbstractMessageHandler.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.zeppelin.client.websocket;
 
+import org.apache.zeppelin.common.Message;
+
 import com.google.gson.Gson;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-client/src/main/java/org/apache/zeppelin/client/websocket/ZeppelinWebSocketClient.java
Patch:
@@ -18,6 +18,8 @@
 package org.apache.zeppelin.client.websocket;
 
 import com.google.gson.Gson;
+import org.apache.zeppelin.common.Message;
+
 import org.eclipse.jetty.websocket.api.Session;
 import org.eclipse.jetty.websocket.api.annotations.OnWebSocketClose;
 import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -29,8 +29,8 @@
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
 import org.apache.zeppelin.notebook.AuthorizationService;
-import org.apache.zeppelin.notebook.socket.Message;
-import org.apache.zeppelin.notebook.socket.Message.OP;
+import org.apache.zeppelin.common.Message;
+import org.apache.zeppelin.common.Message.OP;
 import org.apache.zeppelin.rest.message.InterpreterInstallationRequest;
 import org.apache.zeppelin.rest.message.NewInterpreterSettingRequest;
 import org.apache.zeppelin.rest.message.RestartInterpreterRequest;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -75,7 +75,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import static org.apache.zeppelin.notebook.socket.Message.MSG_ID_NOT_DEFINED;
+import static org.apache.zeppelin.common.Message.MSG_ID_NOT_DEFINED;
 
 /**
  * Rest api endpoint for the notebook.

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/SessionManager.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.NoteInfo;
 import org.apache.zeppelin.notebook.Notebook;
-import org.apache.zeppelin.rest.message.SessionInfo;
+import org.apache.zeppelin.common.SessionInfo;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/SessionRestApi.java
Patch:
@@ -22,7 +22,7 @@
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
 import org.apache.zeppelin.notebook.Notebook;
-import org.apache.zeppelin.rest.message.SessionInfo;
+import org.apache.zeppelin.common.SessionInfo;
 import org.apache.zeppelin.server.JsonResponse;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -48,7 +48,7 @@
 import org.apache.zeppelin.notebook.AuthorizationService;
 import org.apache.zeppelin.notebook.repo.NotebookRepoWithVersionControl;
 import org.apache.zeppelin.notebook.scheduler.SchedulerService;
-import org.apache.zeppelin.notebook.socket.Message;
+import org.apache.zeppelin.common.Message;
 import org.apache.zeppelin.rest.SessionManager;
 import org.apache.zeppelin.rest.exception.BadRequestException;
 import org.apache.zeppelin.rest.exception.ForbiddenException;

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/ConnectionManager.java
Patch:
@@ -31,7 +31,7 @@
 import org.apache.zeppelin.notebook.NotebookImportDeserializer;
 import org.apache.zeppelin.notebook.Paragraph;
 import org.apache.zeppelin.notebook.AuthorizationService;
-import org.apache.zeppelin.notebook.socket.Message;
+import org.apache.zeppelin.common.Message;
 import org.apache.zeppelin.notebook.socket.WatcherMessage;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.util.WatcherSecurityKey;

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -72,8 +72,8 @@
 import org.apache.zeppelin.notebook.ParagraphJobListener;
 import org.apache.zeppelin.notebook.AuthorizationService;
 import org.apache.zeppelin.notebook.repo.NotebookRepoWithVersionControl.Revision;
-import org.apache.zeppelin.notebook.socket.Message;
-import org.apache.zeppelin.notebook.socket.Message.OP;
+import org.apache.zeppelin.common.Message;
+import org.apache.zeppelin.common.Message.OP;
 import org.apache.zeppelin.rest.exception.ForbiddenException;
 import org.apache.zeppelin.scheduler.Job.Status;
 import org.apache.zeppelin.service.ConfigurationService;
@@ -96,7 +96,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import static org.apache.zeppelin.notebook.socket.Message.MSG_ID_NOT_DEFINED;
+import static org.apache.zeppelin.common.Message.MSG_ID_NOT_DEFINED;
 
 /**
  * Zeppelin websocket service. This class used setter injection because all servlet should have

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -61,8 +61,8 @@
 import org.apache.zeppelin.notebook.repo.NotebookRepoWithVersionControl;
 import org.apache.zeppelin.notebook.scheduler.QuartzSchedulerService;
 import org.apache.zeppelin.notebook.scheduler.SchedulerService;
-import org.apache.zeppelin.notebook.socket.Message;
-import org.apache.zeppelin.notebook.socket.Message.OP;
+import org.apache.zeppelin.common.Message;
+import org.apache.zeppelin.common.Message.OP;
 import org.apache.zeppelin.rest.AbstractTestRestApi;
 import org.apache.zeppelin.scheduler.Job;
 import org.apache.zeppelin.service.ConfigurationService;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/security/Authentication.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.commons.httpclient.methods.PostMethod;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
-import org.apache.zeppelin.notebook.socket.Message;
-import org.apache.zeppelin.notebook.socket.Message.OP;
+import org.apache.zeppelin.common.Message;
+import org.apache.zeppelin.common.Message.OP;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/Client.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.zeppelin.notebook.repo.zeppelinhub.websocket;
 
+import org.apache.zeppelin.common.Message;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
-import org.apache.zeppelin.notebook.socket.Message;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinClient.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.concurrent.Future;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.zeppelin.common.Message;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.notebook.AuthorizationService;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.model.UserTokenContainer;
@@ -38,8 +39,7 @@
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.protocol.ZeppelinhubMessage;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.scheduler.SchedulerService;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.scheduler.ZeppelinHeartbeat;
-import org.apache.zeppelin.notebook.socket.Message;
-import org.apache.zeppelin.notebook.socket.Message.OP;
+import org.apache.zeppelin.common.Message.OP;
 import org.apache.zeppelin.util.WatcherSecurityKey;
 import org.eclipse.jetty.util.ssl.SslContextFactory;
 import org.eclipse.jetty.websocket.api.Session;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinhubClient.java
Patch:
@@ -34,8 +34,8 @@
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.scheduler.ZeppelinHubHeartbeat;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.session.ZeppelinhubSession;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.utils.ZeppelinhubUtils;
-import org.apache.zeppelin.notebook.socket.Message;
-import org.apache.zeppelin.notebook.socket.Message.OP;
+import org.apache.zeppelin.common.Message;
+import org.apache.zeppelin.common.Message.OP;
 import org.apache.zeppelin.ticket.TicketContainer;
 import org.codehaus.jettison.json.JSONArray;
 import org.codehaus.jettison.json.JSONException;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/listener/WatcherWebsocket.java
Patch:
@@ -18,8 +18,8 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient;
-import org.apache.zeppelin.notebook.socket.Message;
-import org.apache.zeppelin.notebook.socket.Message.OP;
+import org.apache.zeppelin.common.Message;
+import org.apache.zeppelin.common.Message.OP;
 import org.apache.zeppelin.notebook.socket.WatcherMessage;
 import org.apache.zeppelin.ticket.TicketContainer;
 import org.eclipse.jetty.websocket.api.Session;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/protocol/ZeppelinhubMessage.java
Patch:
@@ -20,9 +20,10 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.common.JsonSerializable;
+import org.apache.zeppelin.common.Message;
+import org.apache.zeppelin.common.Message.OP;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.Client;
-import org.apache.zeppelin.notebook.socket.Message;
-import org.apache.zeppelin.notebook.socket.Message.OP;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/utils/ZeppelinhubUtils.java
Patch:
@@ -19,11 +19,12 @@
 import java.util.HashMap;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.zeppelin.common.Message;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.model.UserTokenContainer;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinhubClient;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.protocol.ZeppelinHubOp;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.protocol.ZeppelinhubMessage;
-import org.apache.zeppelin.notebook.socket.Message;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -271,7 +271,8 @@ protected void configure() {
     // Try to get Notebook from ServiceLocator, because Notebook instantiation is lazy, it is
     // created when user open zeppelin in browser if we don't get it explicitly here.
     // Lazy loading will cause paragraph recovery and cron job initialization is delayed.
-    Notebook notebook = sharedServiceLocator.getService(Notebook.class);
+    Notebook notebook = ServiceLocatorUtilities.getService(
+            sharedServiceLocator, Notebook.class.getName());
     // Try to recover here, don't do it in constructor of Notebook, because it would cause deadlock.
     notebook.recoveryIfNecessary();
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -255,7 +255,7 @@ private void loadFromFile() throws IOException {
     //TODO(zjffdu) still ugly (should move all to InterpreterInfoSaving)
     for (InterpreterSetting savedInterpreterSetting : infoSaving.interpreterSettings.values()) {
       if (!shouldRegister(savedInterpreterSetting.getGroup())) {
-        break;
+        continue;
       }
       savedInterpreterSetting.setProperties(InterpreterSetting.convertInterpreterProperties(
           savedInterpreterSetting.getProperties()
@@ -292,7 +292,7 @@ private void loadFromFile() throws IOException {
         }
       }
       savedInterpreterSetting.postProcessing();
-      LOGGER.info("Create Interpreter Setting {} from interpreter.json",
+      LOGGER.info("Create interpreter setting {} from interpreter.json",
           savedInterpreterSetting.getName());
       interpreterSettings.put(savedInterpreterSetting.getId(), savedInterpreterSetting);
     }
@@ -302,6 +302,7 @@ private void loadFromFile() throws IOException {
       initInterpreterSetting(interpreterSetting);
       // add newly detected interpreter if it doesn't exist in interpreter.json
       if (!interpreterSettings.containsKey(interpreterSetting.getId())) {
+        LOGGER.info("Create interpreter setting: {} from interpreter setting template", interpreterSetting.getId());
         interpreterSettings.put(interpreterSetting.getId(), interpreterSetting);
       }
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/gson/ExceptionSerializer.java
Patch:
@@ -21,6 +21,8 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSerializationContext;
 import com.google.gson.JsonSerializer;
+import org.apache.commons.lang3.exception.ExceptionUtils;
+
 import java.lang.reflect.Type;
 import javax.ws.rs.WebApplicationException;
 
@@ -32,6 +34,7 @@ public JsonElement serialize(
     JsonObject jsonObject = new JsonObject();
     jsonObject.addProperty("exception", e.getClass().getSimpleName());
     jsonObject.addProperty("message", e.getMessage());
+    jsonObject.addProperty("stacktrace", ExceptionUtils.getStackTrace(e));
 
     if (e instanceof WebApplicationException) {
       jsonObject.addProperty("status", ((WebApplicationException) e).getResponse().getStatus());

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -962,7 +962,7 @@ private void createNote(NotebookSocket conn,
     String noteName = (String) message.get("name");
     String defaultInterpreterGroup = (String) message.get("defaultInterpreterGroup");
 
-    getNotebookService().createNote(noteName, defaultInterpreterGroup, getServiceContext(message),
+    getNotebookService().createNote(noteName, defaultInterpreterGroup, true, getServiceContext(message),
         new WebSocketServiceCallback<Note>(conn) {
           @Override
           public void onSuccess(Note note, ServiceContext context) throws IOException {
@@ -1516,7 +1516,7 @@ private void runParagraph(NotebookSocket conn,
     String title = (String) fromMessage.get("title");
     Map<String, Object> params = (Map<String, Object>) fromMessage.get("params");
     Map<String, Object> config = (Map<String, Object>) fromMessage.get("config");
-    getNotebookService().runParagraph(noteId, paragraphId, title, text, params, config,
+    getNotebookService().runParagraph(noteId, paragraphId, title, text, params, config, null,
         false, false, getServiceContext(fromMessage),
         new WebSocketServiceCallback<Paragraph>(conn) {
           @Override

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookWebSocketCreator.java
Patch:
@@ -35,6 +35,7 @@ public class NotebookWebSocketCreator implements WebSocketCreator {
   public NotebookWebSocketCreator(NotebookServer notebookServer) {
     this.notebookServer = notebookServer;
   }
+
   public Object createWebSocket(ServletUpgradeRequest request, ServletUpgradeResponse response) {
     String origin = request.getHeader("Origin");
     if (notebookServer.checkOrigin(request.getHttpServletRequest(), origin)) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -186,6 +186,7 @@ private static void start(boolean withAuth,
       zeppelinHome = new File("..");
       LOG.info("ZEPPELIN_HOME: " + zeppelinHome.getAbsolutePath());
       confDir = new File(zeppelinHome, "conf_" + testClassName);
+      FileUtils.deleteDirectory(confDir);
       LOG.info("ZEPPELIN_CONF_DIR: " + confDir.getAbsolutePath());
       confDir.mkdirs();
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -173,7 +173,7 @@ public void testNoteCreateWithParagraphs() throws IOException {
       expectedNoteName = "Note " + newNoteId;
     }
     assertEquals("compare note name", expectedNoteName, newNoteName);
-    assertEquals("initial paragraph check failed", 4, newNote.getParagraphs().size());
+    assertEquals("initial paragraph check failed", 3, newNote.getParagraphs().size());
     for (Paragraph p : newNote.getParagraphs()) {
       if (StringUtils.isEmpty(p.getText())) {
         continue;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/RemoteInterpreterEventServer.java
Patch:
@@ -340,8 +340,7 @@ public void sendParagraphInfo(String intpGroupId, String json) throws TException
         }.getType());
     String noteId = paraInfos.get("noteId");
     String paraId = paraInfos.get("paraId");
-    String settingId = RemoteInterpreterUtils.
-        getInterpreterSettingId(interpreterGroup.getId());
+    String settingId = ((ManagedInterpreterGroup) interpreterGroup).getInterpreterSetting().getId();
     if (noteId != null && paraId != null && settingId != null) {
       listener.onParaInfosReceived(noteId, paraId, settingId, paraInfos);
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -924,7 +924,7 @@ public enum ConfVars {
     ZEPPELIN_INTERPRETER_DEP_MVNREPO("zeppelin.interpreter.dep.mvnRepo",
         "https://repo1.maven.org/maven2/"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 60000),
-    ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
+    ZEPPELIN_INTERPRETER_CONNECTION_POOL_SIZE("zeppelin.interpreter.connection.poolsize", 10),
     ZEPPELIN_INTERPRETER_GROUP_DEFAULT("zeppelin.interpreter.group.default", "spark"),
     ZEPPELIN_INTERPRETER_OUTPUT_LIMIT("zeppelin.interpreter.output.limit", 1024 * 100),
     ZEPPELIN_INTERPRETER_INCLUDES("zeppelin.interpreter.include", ""),

File: zeppelin-plugins/launcher/cluster/src/main/java/org/apache/zeppelin/interpreter/launcher/ClusterInterpreterProcess.java
Patch:
@@ -17,6 +17,7 @@ public ClusterInterpreterProcess(
       String localRepoDir,
       Map<String, String> env,
       int connectTimeout,
+      int connectionPoolSize,
       String interpreterSettingName,
       String interpreterGroupId,
       boolean isUserImpersonated) {
@@ -29,6 +30,7 @@ public ClusterInterpreterProcess(
       localRepoDir,
       env,
       connectTimeout,
+      connectionPoolSize,
       interpreterSettingName,
       interpreterGroupId,
       isUserImpersonated);

File: zeppelin-plugins/launcher/docker/src/main/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterLauncher.java
Patch:
@@ -73,7 +73,7 @@ public InterpreterClient launchDirectly(InterpreterLaunchContext context) throws
         env,
         context.getIntpEventServerHost(),
         context.getIntpEventServerPort(),
-        connectTimeout);
+        connectTimeout, 10);
   }
 
   boolean isSpark() {

File: zeppelin-plugins/launcher/docker/src/main/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterProcess.java
Patch:
@@ -117,9 +117,10 @@ public DockerInterpreterProcess(
       Map<String, String> envs,
       String intpEventServerHost,
       int intpEventServerPort,
-      int connectTimeout
+      int connectTimeout,
+      int connectionPoolSize
   ) {
-    super(connectTimeout, intpEventServerHost, intpEventServerPort);
+    super(connectTimeout, connectionPoolSize, intpEventServerHost, intpEventServerPort);
 
     this.containerImage = containerImage;
     this.interpreterGroupId = interpreterGroupId;

File: zeppelin-plugins/launcher/docker/src/test/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterProcessTest.java
Patch:
@@ -91,7 +91,7 @@ public void testEnv() throws IOException {
         envs,
         "zeppelin.server.hostname",
         12320,
-        5000);
+        5000, 10);
 
     assertEquals(intp.CONTAINER_SPARK_HOME, "my-spark-home");
     assertEquals(intp.uploadLocalLibToContainter, false);
@@ -117,7 +117,7 @@ public void testTemplateBindings() throws IOException {
         envs,
         "zeppelin.server.hostname",
         12320,
-        5000);
+        5000, 10);
 
     Properties dockerProperties = intp.getTemplateBindings();
     assertEquals(dockerProperties.size(), 10);

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -75,9 +75,10 @@ public K8sRemoteInterpreterProcess(
           boolean portForward,
           String sparkImage,
           int connectTimeout,
+          int connectionPoolSize,
           boolean isUserImpersonatedForSpark
   ) {
-    super(connectTimeout, intpEventServerHost, intpEventServerPort);
+    super(connectTimeout, connectionPoolSize, intpEventServerHost, intpEventServerPort);
     this.client = client;
     this.namespace = namespace;
     this.specTemplates = specTemplates;

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sStandardInterpreterLauncher.java
Patch:
@@ -152,6 +152,7 @@ public InterpreterClient launchDirectly(InterpreterLaunchContext context) throws
             zConf.getK8sPortForward(),
             zConf.getK8sSparkContainerImage(),
             getConnectTimeout(),
+            getConnectPoolSize(),
             isUserImpersonateForSparkInterpreter(context));
   }
 

File: zeppelin-plugins/launcher/yarn/src/main/java/org/apache/zeppelin/interpreter/launcher/YarnInterpreterLauncher.java
Patch:
@@ -42,13 +42,13 @@ public YarnInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage reco
   public InterpreterClient launchDirectly(InterpreterLaunchContext context) throws IOException {
     LOGGER.info("Launching Interpreter: {}", context.getInterpreterSettingGroup());
     this.properties = context.getProperties();
-    int connectTimeout = getConnectTimeout();
 
     return new YarnRemoteInterpreterProcess(
             context,
             properties,
             buildEnvFromProperties(context),
-            connectTimeout);
+            getConnectTimeout(),
+            getConnectPoolSize());
   }
 
   protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) {

File: zeppelin-plugins/launcher/yarn/src/main/java/org/apache/zeppelin/interpreter/launcher/YarnRemoteInterpreterProcess.java
Patch:
@@ -99,8 +99,9 @@ public YarnRemoteInterpreterProcess(
           InterpreterLaunchContext launchContext,
           Properties properties,
           Map<String, String> envs,
-          int connectTimeout) {
-    super(connectTimeout, launchContext.getIntpEventServerHost(), launchContext.getIntpEventServerPort());
+          int connectTimeout,
+          int connectionPoolSize) {
+    super(connectTimeout, connectionPoolSize, launchContext.getIntpEventServerHost(), launchContext.getIntpEventServerPort());
     this.zConf = ZeppelinConfiguration.create();
     this.launchContext = launchContext;
     this.properties = properties;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncher.java
Patch:
@@ -53,12 +53,14 @@ public InterpreterClient launchDirectly(InterpreterLaunchContext context) throws
     String groupName = context.getInterpreterSettingGroup();
     String name = context.getInterpreterSettingName();
     int connectTimeout = getConnectTimeout();
+    int connectionPoolSize = getConnectPoolSize();
 
     if (option.isExistingProcess()) {
       return new RemoteInterpreterRunningProcess(
           context.getInterpreterSettingName(),
           context.getInterpreterGroupId(),
           connectTimeout,
+          connectionPoolSize,
           context.getIntpEventServerHost(),
           context.getIntpEventServerPort(),
           option.getHost(),
@@ -72,7 +74,7 @@ public InterpreterClient launchDirectly(InterpreterLaunchContext context) throws
           runner != null ? runner.getPath() : zConf.getInterpreterRemoteRunnerPath(),
           context.getIntpEventServerPort(), context.getIntpEventServerHost(), zConf.getInterpreterPortRange(),
           zConf.getInterpreterDir() + "/" + groupName, localRepoPath,
-          buildEnvFromProperties(context), connectTimeout, name,
+          buildEnvFromProperties(context), connectTimeout, connectionPoolSize, name,
           context.getInterpreterGroupId(), option.isUserImpersonate());
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java
Patch:
@@ -63,10 +63,11 @@ public RemoteInterpreterManagedProcess(
       String localRepoDir,
       Map<String, String> env,
       int connectTimeout,
+      int connectionPoolSize,
       String interpreterSettingName,
       String interpreterGroupId,
       boolean isUserImpersonated) {
-    super(connectTimeout, intpEventServerHost, intpEventServerPort);
+    super(connectTimeout, connectionPoolSize, intpEventServerHost, intpEventServerPort);
     this.interpreterRunner = intpRunner;
     this.interpreterPortRange = interpreterPortRange;
     this.env = env;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -41,6 +41,7 @@ public abstract class RemoteInterpreterProcess implements InterpreterClient {
   private PooledRemoteClient<Client> remoteClient;
 
   public RemoteInterpreterProcess(int connectTimeout,
+                                  int connectionPoolSize,
                                   String intpEventServerHost,
                                   int intpEventServerPort) {
     this.connectTimeout = connectTimeout;
@@ -55,7 +56,7 @@ public RemoteInterpreterProcess(int connectTimeout,
       }
       TProtocol protocol = new  TBinaryProtocol(transport);
       return new Client(protocol);
-    });
+    }, connectionPoolSize);
   }
 
   public int getConnectTimeout() {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java
Patch:
@@ -36,12 +36,13 @@ public RemoteInterpreterRunningProcess(
       String interpreterSettingName,
       String interpreterGroupId,
       int connectTimeout,
+      int connectionPoolSize,
       String intpEventServerHost,
       int intpEventServerPort,
       String host,
       int port,
       boolean isRecovery) {
-    super(connectTimeout, intpEventServerHost, intpEventServerPort);
+    super(connectTimeout, connectionPoolSize, intpEventServerHost, intpEventServerPort);
     this.interpreterSettingName = interpreterSettingName;
     this.interpreterGroupId = interpreterGroupId;
     this.host = host;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java
Patch:
@@ -109,7 +109,7 @@ public class HeliumBundleFactory {
   @Inject
   public HeliumBundleFactory(ZeppelinConfiguration conf) {
     this.heliumLocalRepoDirectory =
-        new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO), HELIUM_LOCAL_REPO);
+        new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO), HELIUM_LOCAL_REPO).getAbsoluteFile();
     this.heliumBundleDirectory = new File(heliumLocalRepoDirectory, HELIUM_BUNDLES_DIR);
     this.heliumLocalModuleDirectory = new File(heliumLocalRepoDirectory, HELIUM_LOCAL_MODULE_DIR);
     this.yarnCacheDir = new File(heliumLocalRepoDirectory, YARN_CACHE_DIR);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumBundleFactoryTest.java
Patch:
@@ -48,7 +48,7 @@ public void setUp() throws InstallationException, TaskRunnerException, IOExcepti
 
     ZeppelinConfiguration conf = ZeppelinConfiguration.create();
     nodeInstallationDir =
-        new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO), HELIUM_LOCAL_REPO);
+        new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO), HELIUM_LOCAL_REPO).getAbsoluteFile();
     hbf = new HeliumBundleFactory(conf);
     hbf.installNodeAndNpm();
     hbf.copyFrameworkModulesToInstallPath(true);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java
Patch:
@@ -54,6 +54,7 @@ public class RemoteInterpreterTest extends AbstractInterpreterTest {
 
   private InterpreterSetting interpreterSetting;
 
+  @Override
   @Before
   public void setUp() throws Exception {
     super.setUp();
@@ -402,7 +403,7 @@ public void testFailToLaunchInterpreterProcess_InvalidRunner() {
         interpreter1.interpret("1", context1);
         fail("Should not be able to launch interpreter process");
       } catch (InterpreterException e) {
-        assertTrue(ExceptionUtils.getStackTrace(e).contains("No such file or directory"));
+        assertTrue(ExceptionUtils.getStackTrace(e).contains("java.io.IOException"));
       }
     } finally {
       System.clearProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_REMOTE_RUNNER.getVarName());
@@ -422,7 +423,7 @@ public void testFailToLaunchInterpreterProcess_ErrorInRunner() {
         interpreter1.interpret("1", context1);
         fail("Should not be able to launch interpreter process");
       } catch (InterpreterException e) {
-        assertTrue(ExceptionUtils.getStackTrace(e).contains("invalid_command: command not found"));
+        assertTrue(ExceptionUtils.getStackTrace(e).contains("invalid_command:"));
       }
     } finally {
       System.clearProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_REMOTE_RUNNER.getVarName());

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest110.java
Patch:
@@ -29,7 +29,7 @@ public class FlinkIntegrationTest110 extends FlinkIntegrationTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.10.1"}
+            {"1.10.2"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinFlinkClusterTest110.java
Patch:
@@ -29,7 +29,7 @@ public class ZeppelinFlinkClusterTest110 extends ZeppelinFlinkClusterTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.10.1"}
+            {"1.10.2"}
     });
   }
 

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -58,6 +58,7 @@ public class K8sRemoteInterpreterProcess extends RemoteInterpreterProcess {
   private static final String SPARK_DRIVER_MEMORY_OVERHEAD = "spark.driver.memoryOverhead";
   private static final String SPARK_DRIVER_CORES = "spark.driver.cores";
   private static final String ENV_SERVICE_DOMAIN = "SERVICE_DOMAIN";
+  private static final String ENV_ZEPPELIN_HOME = "ZEPPELIN_HOME";
 
   public K8sRemoteInterpreterProcess(
           KubernetesClient client,
@@ -280,7 +281,7 @@ Properties getTemplateBindings(String userName) {
 
     // environment variables
     envs.put(ENV_SERVICE_DOMAIN, envs.getOrDefault(ENV_SERVICE_DOMAIN, System.getenv(ENV_SERVICE_DOMAIN)));
-    envs.put("ZEPPELIN_HOME", envs.getOrDefault("ZEPPELIN_HOME", "/zeppelin"));
+    envs.put(ENV_ZEPPELIN_HOME, envs.getOrDefault(ENV_ZEPPELIN_HOME, System.getenv(ENV_ZEPPELIN_HOME)));
 
     if (isSpark()) {
       int webUiPort = 4040;

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/FlinkStreamSqlInterpreterTest.java
Patch:
@@ -325,8 +325,9 @@ public void testResumeStreamSqlFromInvalidSavePointPath() throws IOException, In
     context.getLocalProperties().put("type", "update");
     context.getLocalProperties().put("parallelism", "1");
     context.getLocalProperties().put("maxParallelism", "10");
+    context.getLocalProperties().put(JobManager.RESUME_FROM_SAVEPOINT, "true");
     context.getConfig().put(JobManager.SAVEPOINT_PATH, "/invalid_savepoint");
-
+    
     result = sqlInterpreter.interpret("select url, count(1) as pv from " +
             "log group by url", context);
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinFlinkClusterTest110.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-@RunWith(value = Parameterized.class)
+//@RunWith(value = Parameterized.class)
 public class ZeppelinFlinkClusterTest110 extends ZeppelinFlinkClusterTest {
 
   @Parameterized.Parameters

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinFlinkClusterTest111.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-@RunWith(value = Parameterized.class)
+//@RunWith(value = Parameterized.class)
 public class ZeppelinFlinkClusterTest111 extends ZeppelinFlinkClusterTest {
 
   @Parameterized.Parameters

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -594,7 +594,7 @@ public Map<String, Object> getEditorSetting(String paragraphText, String noteId)
             if (interpreterSetting == null) {
               return DEFAULT_EDITOR;
             }
-            return interpreterSetting.getDefaultInterpreterInfo().getEditor();
+            return interpreterSetting.getInterpreterInfo(intpName).getEditor();
           } catch (Exception e) {
             LOGGER.warn(e.getMessage());
             return DEFAULT_EDITOR;

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -226,7 +226,7 @@ public void testDisableParagraphRunButton() throws Exception {
       ZeppelinITUtils.sleep(2000, false);
 
       collector.checkThat("Paragraph status is ",
-          getParagraphStatus(1), CoreMatchers.equalTo("READY")
+          getParagraphStatus(1), CoreMatchers.equalTo("PENDING")
       );
 
       driver.navigate().refresh();

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -74,6 +74,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import static org.apache.zeppelin.notebook.socket.Message.MSG_ID_NOT_DEFINED;
+
 /**
  * Rest api endpoint for the notebook.
  */
@@ -574,7 +576,7 @@ public Response updateParagraph(@PathParam("noteId") String noteId,
 
     AuthenticationInfo subject = new AuthenticationInfo(user);
     notebook.saveNote(note, subject);
-    notebookServer.broadcastParagraph(note, p);
+    notebookServer.broadcastParagraph(note, p, MSG_ID_NOT_DEFINED);
     return new JsonResponse<>(Status.OK, "").build();
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/ConnectionManager.java
Patch:
@@ -343,7 +343,7 @@ public void unicast(Message m, NotebookSocket conn) {
     broadcastToWatchers(StringUtils.EMPTY, StringUtils.EMPTY, m);
   }
 
-  public void unicastParagraph(Note note, Paragraph p, String user) {
+  public void unicastParagraph(Note note, Paragraph p, String user, String msgId) {
     if (!note.isPersonalizedMode() || p == null || user == null) {
       return;
     }
@@ -354,7 +354,7 @@ public void unicastParagraph(Note note, Paragraph p, String user) {
     }
 
     for (NotebookSocket conn : userSocketMap.get(user)) {
-      Message m = new Message(Message.OP.PARAGRAPH).put("paragraph", p);
+      Message m = new Message(Message.OP.PARAGRAPH).withMsgId(msgId).put("paragraph", p);
       unicast(m, conn);
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -338,7 +338,6 @@ public boolean execute(boolean blocking) {
         setStatus(Job.Status.FINISHED);
         return true;
       }
-      setStatus(Status.READY);
 
       if (getConfig().get("enabled") == null || (Boolean) getConfig().get("enabled")) {
         setAuthenticationInfo(getAuthenticationInfo());

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java
Patch:
@@ -88,7 +88,7 @@ public InterpreterResult interpret(String st, InterpreterContext context)
       Thread.currentThread().setContextClassLoader(getFlinkScalaShellLoader());
       createPlannerAgain();
       setParallelismIfNecessary(context);
-      setSavePointIfNecessary(context);
+      setSavepointIfNecessary(context);
       return innerIntp.interpret(st, context);
     } finally {
       Thread.currentThread().setContextClassLoader(originClassLoader);
@@ -181,8 +181,8 @@ public FlinkShims getFlinkShims() {
     return this.innerIntp.getFlinkShims();
   }
 
-  public void setSavePointIfNecessary(InterpreterContext context) {
-    this.innerIntp.setSavePointPathIfNecessary(context);
+  public void setSavepointIfNecessary(InterpreterContext context) {
+    this.innerIntp.setSavepointPathIfNecessary(context);
   }
 
   public void setParallelismIfNecessary(InterpreterContext context) {

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/FlinkStreamSqlInterpreter.java
Patch:
@@ -56,9 +56,6 @@ public void close() throws InterpreterException {
 
   @Override
   public void callInnerSelect(String sql, InterpreterContext context) throws IOException {
-    flinkInterpreter.setSavePointIfNecessary(context);
-    flinkInterpreter.setParallelismIfNecessary(context);
-
     String streamType = context.getLocalProperties().get("type");
     if (streamType == null) {
       throw new IOException("type must be specified for stream sql");

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/IPyFlinkInterpreter.java
Patch:
@@ -89,7 +89,7 @@ public InterpreterResult internalInterpret(String st,
         throw new InterpreterException("Fail to initJavaThread: " +
                 result.toString());
       }
-      flinkInterpreter.setSavePointIfNecessary(context);
+      flinkInterpreter.setSavepointIfNecessary(context);
       flinkInterpreter.setParallelismIfNecessary(context);
       return super.internalInterpret(st, context);
     } finally {

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/PyFlinkInterpreter.java
Patch:
@@ -115,7 +115,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) throws
                     result.toString());
           }
         }
-        flinkInterpreter.setSavePointIfNecessary(context);
+        flinkInterpreter.setSavepointIfNecessary(context);
         flinkInterpreter.setParallelismIfNecessary(context);
       }
       return super.interpret(st, context);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -809,7 +809,7 @@ public int getClusterHeartbeatTimeout() {
   public RUN_MODE getRunMode() {
     String mode = getString(ConfVars.ZEPPELIN_RUN_MODE);
     if ("auto".equalsIgnoreCase(mode)) { // auto detect
-      if (new File("/var/run/secrets/kubernetes.io").exists()) {
+      if (new File("/var/run/secrets/kubernetes.io/serviceaccount/namespace").exists()) {
         return RUN_MODE.K8S;
       } else {
         return RUN_MODE.LOCAL;

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sStandardInterpreterLauncher.java
Patch:
@@ -63,7 +63,7 @@ public K8sStandardInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStora
    * @return
    */
   boolean isRunningOnKubernetes() {
-    return new File("/var/run/secrets/kubernetes.io").exists();
+    return new File(Config.KUBERNETES_NAMESPACE_PATH).exists();
   }
 
   /**

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java
Patch:
@@ -21,8 +21,6 @@
 import org.apache.flink.configuration.Configuration;
 import org.apache.flink.streaming.api.scala.StreamExecutionEnvironment;
 import org.apache.flink.table.api.TableEnvironment;
-import org.apache.flink.table.catalog.CatalogManager;
-import org.apache.flink.table.delegation.Planner;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -184,7 +182,7 @@ public FlinkShims getFlinkShims() {
   }
 
   public void setSavePointIfNecessary(InterpreterContext context) {
-    this.innerIntp.setSavePointIfNecessary(context);
+    this.innerIntp.setSavePointPathIfNecessary(context);
   }
 
   public void setParallelismIfNecessary(InterpreterContext context) {

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -357,7 +357,7 @@ public void testResumeStreamSqlFromSavePoint() throws IOException, InterpreterEx
       try {
         InterpreterContext context = getInterpreterContext();
         context.getLocalProperties().put("type", "update");
-        context.getLocalProperties().put("savepointDir", savePointDir.getAbsolutePath());
+        context.getLocalProperties().put("savePointDir", savePointDir.getAbsolutePath());
         context.getLocalProperties().put("parallelism", "1");
         context.getLocalProperties().put("maxParallelism", "10");
         InterpreterResult result2 = interpreter.interpret(
@@ -381,7 +381,7 @@ public void testResumeStreamSqlFromSavePoint() throws IOException, InterpreterEx
 
     InterpreterContext context = getInterpreterContext();
     context.getLocalProperties().put("type", "update");
-    context.getLocalProperties().put("savepointDir", savePointDir.getAbsolutePath());
+    context.getLocalProperties().put("savePointDir", savePointDir.getAbsolutePath());
     context.getLocalProperties().put("parallelism", "2");
     context.getLocalProperties().put("maxParallelism", "10");
     interpreter.cancel(context);

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/IPyFlinkInterpreterTest.java
Patch:
@@ -426,7 +426,7 @@ public static void testResumeStreamSqlFromSavePoint(Interpreter interpreter, Int
       try {
         InterpreterContext context = createInterpreterContext();
         context.getLocalProperties().put("type", "update");
-        context.getLocalProperties().put("savepointDir", savePointDir.getAbsolutePath());
+        context.getLocalProperties().put("savePointDir", savePointDir.getAbsolutePath());
         context.getLocalProperties().put("parallelism", "1");
         context.getLocalProperties().put("maxParallelism", "10");
         InterpreterResult result2 = interpreter.interpret(
@@ -449,7 +449,7 @@ public static void testResumeStreamSqlFromSavePoint(Interpreter interpreter, Int
 
     InterpreterContext context = createInterpreterContext();
     context.getLocalProperties().put("type", "update");
-    context.getLocalProperties().put("savepointDir", savePointDir.getAbsolutePath());
+    context.getLocalProperties().put("savePointDir", savePointDir.getAbsolutePath());
     context.getLocalProperties().put("parallelism", "2");
     context.getLocalProperties().put("maxParallelism", "10");
     interpreter.cancel(context);

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest110.java
Patch:
@@ -29,7 +29,6 @@ public class FlinkIntegrationTest110 extends FlinkIntegrationTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-//            {"1.10.0"},
             {"1.10.1"}
     });
   }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest111.java
Patch:
@@ -29,7 +29,6 @@ public class FlinkIntegrationTest111 extends FlinkIntegrationTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.11.0"},
             {"1.11.1"}
     });
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ParagraphInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class ParagraphInfo implements org.apache.thrift.TBase<ParagraphInfo, ParagraphInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ParagraphInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParagraphInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public enum RemoteInterpreterEventType implements org.apache.thrift.TEnum {
   NO_OP(1),
   ANGULAR_OBJECT_ADD(2),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ServiceException.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class ServiceException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/WebUrlInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-28")
 public class WebUrlInfo implements org.apache.thrift.TBase<WebUrlInfo, WebUrlInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WebUrlInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WebUrlInfo");
 

File: cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java
Patch:
@@ -118,6 +118,8 @@ public class CassandraInterpreter extends Interpreter {
           "cassandra.format.float_precision";
   public static final String CASSANDRA_FORMAT_DOUBLE_PRECISION =
           "cassandra.format.double_precision";
+  public static final String CASSANDRA_FORMAT_DECIMAL_PRECISION =
+          "cassandra.format.decimal_precision";
   public static final String CASSANDRA_FORMAT_TIMESTAMP =
           "cassandra.format.timestamp";
   public static final String CASSANDRA_FORMAT_TIME =

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/SqlInterpreterTest.java
Patch:
@@ -482,6 +482,9 @@ public void testSetProperty() throws InterpreterException {
               "set table.sql-dialect=hive", context);
       assertEquals(context.out.toString(), InterpreterResult.Code.SUCCESS, result.code());
 
+      sqlInterpreter.interpret("create table test_hive_table(a string, b int)\n" +
+              "partitioned by (dt string)", context);
+      assertEquals(context.out.toString(), InterpreterResult.Code.SUCCESS, result.code());
     } else {
       // Flink1.10 doesn't support set table.sql-dialet which is introduced in flink 1.11
       InterpreterContext context = getInterpreterContext();

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest110.java
Patch:
@@ -29,7 +29,7 @@ public class FlinkIntegrationTest110 extends FlinkIntegrationTest {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.10.0"},
+//            {"1.10.0"},
             {"1.10.1"}
     });
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ParagraphInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class ParagraphInfo implements org.apache.thrift.TBase<ParagraphInfo, ParagraphInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ParagraphInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParagraphInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public enum RemoteInterpreterEventType implements org.apache.thrift.TEnum {
   NO_OP(1),
   ANGULAR_OBJECT_ADD(2),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ServiceException.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-26")
 public class ServiceException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");
 

File: zeppelin-plugins/launcher/flink/src/main/java/org/apache/zeppelin/interpreter/launcher/FlinkInterpreterLauncher.java
Patch:
@@ -47,7 +47,9 @@ public Map<String, String> buildEnvFromProperties(InterpreterLaunchContext conte
       throw new IOException(String.format("FLINK_HOME '%s' is a file, but should be directory",
               flinkHome));
     }
-    envs.put("FLINK_CONF_DIR", flinkHome + "/conf");
+    if (!envs.containsKey("FLINK_CONF_DIR")) {
+      envs.put("FLINK_CONF_DIR", flinkHome + "/conf");
+    }
     envs.put("FLINK_LIB_DIR", flinkHome + "/lib");
     envs.put("FLINK_PLUGINS_DIR", flinkHome + "/plugins");
     return envs;

File: cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java
Patch:
@@ -152,7 +152,7 @@ public class CassandraInterpreter extends Interpreter {
   public static final String DEFAULT_TCP_NO_DELAY = "true";
   public static final String DEFAULT_MAX_SCHEMA_AGREEMENT_WAIT_SECONDS = "12";
 
-  static final List NO_COMPLETION = new ArrayList<>();
+  static final List<InterpreterCompletion> NO_COMPLETION = new ArrayList<>();
   public static final String DATASTAX_JAVA_DRIVER_PREFIX = "datastax-java-driver.";
   public static final String MILLISECONDS_STR = " milliseconds";
   public static final String SECONDS_STR = " seconds";

File: flink/flink-shims/src/main/java/org/apache/zeppelin/flink/FlinkShims.java
Patch:
@@ -30,6 +30,7 @@
 import java.lang.reflect.Constructor;
 import java.net.InetAddress;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import java.util.Properties;
 
@@ -132,4 +133,6 @@ public abstract void setCatalogManagerSchemaResolver(Object catalogManager,
                                                        Object environmentSetting);
 
   public abstract Object getCustomCli(Object cliFrontend, Object commandLine);
+
+  public abstract Map extractTableConfigOptions();
 }

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/HadoopUtils.java
Patch:
@@ -72,6 +72,9 @@ public static String downloadJar(String jarOnHdfs) throws IOException {
     File tmpDir = Files.createTempDir();
     FileSystem fs = FileSystem.get(new Configuration());
     Path sourcePath = fs.makeQualified(new Path(jarOnHdfs));
+    if (!fs.exists(sourcePath)) {
+      throw new IOException("jar file: " + jarOnHdfs + " doesn't exist.");
+    }
     Path destPath = new Path(tmpDir.getAbsolutePath() + "/" + sourcePath.getName());
     fs.copyToLocalFile(sourcePath, destPath);
     return new File(destPath.toString()).getAbsolutePath();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -828,8 +828,8 @@ public boolean getK8sPortForward() {
     return getBoolean(ConfVars.ZEPPELIN_K8S_PORTFORWARD);
   }
 
-  public String getK8sKubectlCmd() {
-    return getString(ConfVars.ZEPPELIN_K8S_KUBECTL);
+  public String getK8sNamepsace() {
+    return getString(ConfVars.ZEPPELIN_K8S_NAMESPACE);
   }
 
   public String getK8sContainerImage() {
@@ -1032,8 +1032,8 @@ public enum ConfVars {
     ZEPPELIN_RUN_MODE("zeppelin.run.mode", "auto"),              // auto | local | k8s | Docker
 
     ZEPPELIN_K8S_PORTFORWARD("zeppelin.k8s.portforward", false), // kubectl port-forward incase of Zeppelin is running outside of kuberentes
-    ZEPPELIN_K8S_KUBECTL("zeppelin.k8s.kubectl", "kubectl"),     // kubectl command
     ZEPPELIN_K8S_CONTAINER_IMAGE("zeppelin.k8s.container.image", "apache/zeppelin:" + Util.getVersion()),
+    ZEPPELIN_K8S_NAMESPACE("zeppelin.k8s.namespace", "default"), // specify a namespace incase of Zeppelin is running outside of kuberentes
     ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE("zeppelin.k8s.spark.container.image", "apache/spark:latest"),
     ZEPPELIN_K8S_TEMPLATE_DIR("zeppelin.k8s.template.dir", "k8s"),
     ZEPPELIN_K8S_SERVICE_NAME("zeppelin.k8s.service.name", "zeppelin-server"),

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -425,7 +425,8 @@ private void configConnectionPool(GenericObjectPool connectionPool, Properties p
     boolean testOnCreate = "true".equalsIgnoreCase(properties.getProperty("testOnCreate"));
     boolean testOnReturn = "true".equalsIgnoreCase(properties.getProperty("testOnReturn"));
     boolean testWhileIdle = "true".equalsIgnoreCase(properties.getProperty("testWhileIdle"));
-    long timeBetweenEvictionRunsMillis = PropertiesUtil.getLong(properties, "timeBetweenEvictionRunsMillis", -1L);
+    long timeBetweenEvictionRunsMillis = PropertiesUtil.getLong(
+        properties, "timeBetweenEvictionRunsMillis", -1L);
     long maxWaitMillis = PropertiesUtil.getLong(properties, "maxWaitMillis", -1L);
     int maxIdle = PropertiesUtil.getInt(properties, "maxIdle", 8);
     int minIdle = PropertiesUtil.getInt(properties, "minIdle", 0);
@@ -467,7 +468,7 @@ private void createConnectionPool(String url, String user, String dbPrefix,
     poolableConnectionFactory.setValidationQuery(
             PropertiesUtil.getString(properties, "validationQuery", "show databases"));
     ObjectPool connectionPool = new GenericObjectPool(poolableConnectionFactory);
-    this.configConnectionPool((GenericObjectPool)connectionPool, properties);
+    this.configConnectionPool((GenericObjectPool) connectionPool, properties);
 
     poolableConnectionFactory.setPool(connectionPool);
     Class.forName(driverClass);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.commons.exec.ExecuteException;
 import org.apache.hadoop.yarn.util.ConverterUtils;
 import org.apache.zeppelin.interpreter.YarnAppMonitor;
-import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;
 import org.apache.zeppelin.interpreter.util.ProcessLauncher;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/FlinkBatchSqlInterpreter.java
Patch:
@@ -41,9 +41,11 @@ protected boolean isBatch() {
 
   @Override
   public void open() throws InterpreterException {
-    super.open();
+    this.flinkInterpreter =
+            getInterpreterInTheSameSessionByClassName(FlinkInterpreter.class);
     this.tbenv = flinkInterpreter.getJavaBatchTableEnvironment("blink");
     this.z = flinkInterpreter.getZeppelinContext();
+    super.open();
   }
 
   @Override

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java
Patch:
@@ -21,6 +21,8 @@
 import org.apache.flink.configuration.Configuration;
 import org.apache.flink.streaming.api.scala.StreamExecutionEnvironment;
 import org.apache.flink.table.api.TableEnvironment;
+import org.apache.flink.table.catalog.CatalogManager;
+import org.apache.flink.table.delegation.Planner;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/FlinkStreamSqlInterpreter.java
Patch:
@@ -43,8 +43,10 @@ protected boolean isBatch() {
 
   @Override
   public void open() throws InterpreterException {
-    super.open();
+    this.flinkInterpreter =
+            getInterpreterInTheSameSessionByClassName(FlinkInterpreter.class);
     this.tbenv = flinkInterpreter.getJavaStreamTableEnvironment("blink");
+    super.open();
   }
 
   @Override

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/TableEnvFactory.java
Patch:
@@ -354,13 +354,14 @@ public void createPlanner(EnvironmentSettings settings) {
     Executor executor = lookupExecutor(executorProperties, senv.getJavaEnv());
 
     Map<String, String> plannerProperties = settings.toPlannerProperties();
-    ComponentFactoryService.find(PlannerFactory.class, plannerProperties)
+    Planner planner = ComponentFactoryService.find(PlannerFactory.class, plannerProperties)
             .create(
                     plannerProperties,
                     executor,
                     tblConfig,
                     blinkFunctionCatalog,
                     catalogManager);
+    this.flinkShims.setCatalogManagerSchemaResolver(catalogManager, planner.getParser(), settings);
   }
 
   private static Executor lookupExecutor(

File: flink/flink-shims/src/main/java/org/apache/zeppelin/flink/FlinkShims.java
Patch:
@@ -104,4 +104,6 @@ public abstract Object getCollectStreamTableSink(InetAddress targetAddress,
   public abstract void registerTableAggregateFunction(Object btenv, String name, Object tableAggregateFunction);
 
   public abstract void registerTableSink(Object stenv, String tableName, Object collectTableSink);
+
+  public abstract Object getCustomCli(Object cliFrontend, Object commandLine);
 }

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/FlinkStreamSqlInterpreterTest.java
Patch:
@@ -254,9 +254,10 @@ public void testResumeStreamSqlFromSavePoint() throws IOException, InterpreterEx
             resultMessages.get(0).getData().contains("url\tpv\n"));
   }
 
-  @Test
+  // TODO(zjffdu) flaky test
+  //@Test
   public void testResumeStreamSqlFromExistSavePointPath() throws IOException, InterpreterException, InterruptedException, TimeoutException {
-    String initStreamScalaScript = getInitStreamScript(1000);
+    String initStreamScalaScript = getInitStreamScript(2000);
     InterpreterResult result = flinkInterpreter.interpret(initStreamScalaScript,
             getInterpreterContext());
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());

File: flink/interpreter/src/test/java/org/apache/zeppelin/flink/SqlInterpreterTest.java
Patch:
@@ -93,6 +93,7 @@ protected Properties getFlinkProperties() throws IOException {
     Properties p = new Properties();
     p.setProperty("zeppelin.flink.enableHive", "true");
     p.setProperty("taskmanager.managed.memory.size", "32");
+    p.setProperty("taskmanager.memory.task.off-heap.size", "80mb");
     p.setProperty("zeppelin.flink.hive.version", "2.3.4");
     p.setProperty("zeppelin.pyflink.useIPython", "false");
     p.setProperty("local.number-taskmanager", "4");
@@ -276,7 +277,7 @@ public void testTable() throws InterpreterException, IOException {
     assertEquals(Code.ERROR, result.code());
     assertEquals(1, resultMessages.size());
     assertTrue(resultMessages.toString(),
-            resultMessages.get(0).getData().contains("does not exist in"));
+            resultMessages.get(0).getData().contains("does not exist"));
 
     // drop table
     context = getInterpreterContext();

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/JobManagerService.java
Patch:
@@ -81,8 +81,8 @@ public List<NoteJobInfo> getNoteJobInfoByUnixTime(long lastUpdateServerUnixTime,
     if (!conf.isJobManagerEnabled()) {
       return new ArrayList<>();
     }
-    List<NoteJobInfo> notesJobInfo = new ArrayList<>();
-    notebook.getNoteStream()
+
+    List<NoteJobInfo> notesJobInfo = notebook.getNoteStream()
             .filter(note -> authorizationService.isOwner(context.getUserAndRoles(), note.getId()))
             .map(note -> new NoteJobInfo(note))
             .filter(noteJobInfo -> noteJobInfo.unixTimeLastRun > lastUpdateServerUnixTime)

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/InputTest.java
Patch:
@@ -42,7 +42,7 @@ public void testFormExtraction() {
     assertEquals(1, forms.size());
     Input form = forms.get("input_form");
     assertEquals("input_form", form.name);
-    assertNull(form.displayName);
+    assertEquals("input_form", form.displayName);
     assertEquals("", form.defaultValue);
     assertTrue(form instanceof TextBox);
 
@@ -78,6 +78,7 @@ public void testFormExtraction() {
     script = "${checkbox:checkbox_form=op1,op1|op2|op3}";
     form = Input.extractSimpleQueryForm(script, false).get("checkbox_form");
     assertEquals("checkbox_form", form.name);
+    assertEquals("checkbox_form", form.displayName);
     assertTrue(form instanceof CheckBox);
 
     assertArrayEquals(new Object[]{"op1"}, (Object[]) form.defaultValue);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/AuthorizationService.java
Patch:
@@ -342,7 +342,7 @@ public boolean hasRunPermission(Set<String> userAndRoles, String noteId) {
     if (userAndRoles == null) {
       return false;
     }
-    return isReader(noteId, userAndRoles);
+    return isRunner(noteId, userAndRoles);
   }
 
   public boolean isPublic() {

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/hive/HiveUtils.java
Patch:
@@ -78,7 +78,7 @@ public static void startHiveMonitorThread(Statement stmt,
             context.out.write(logsOutput + "\n");
             context.out.flush();
           }
-          if (!StringUtils.isBlank(logsOutput) && progressBar != null) {
+          if (!StringUtils.isBlank(logsOutput) && progressBar != null && displayLogProperty) {
             progressBar.operationLogShowedToUser();
           }
           Optional<String> jobURL = extractJobURL(logsOutput);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1370,7 +1370,7 @@ protected void angularObjectClientUnbind(NotebookSocket conn,
           interpreterGroup.getAngularObjectRegistry();
       AngularObject ao = removeAngularFromRemoteRegistry(noteId, paragraphId, varName, registry,
           interpreterGroup.getId(), conn);
-      note.deleteAngularObject(interpreterGroup.getId(), ao);
+      note.deleteAngularObject(interpreterGroup.getId(), noteId, paragraphId, varName);
     }
   }
 

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/InterpreterIT.java
Patch:
@@ -63,7 +63,7 @@ public void testShowDescriptionOnInterpreterCreate() throws Exception {
       select.selectByVisibleText("spark");
 
       collector.checkThat("description of interpreter property is displayed",
-          driver.findElement(By.xpath("//tr/td[contains(text(), 'spark.app.name')]/following-sibling::td[3]")).getText(),
+          driver.findElement(By.xpath("//tr/td[contains(text(), 'spark.app.name')]/following-sibling::td[2]")).getText(),
           CoreMatchers.equalTo("The name of spark application."));
 
     } catch (Exception e) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -919,6 +919,9 @@ public enum ConfVars {
     ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
     ZEPPELIN_INTERPRETER_GROUP_DEFAULT("zeppelin.interpreter.group.default", "spark"),
     ZEPPELIN_INTERPRETER_OUTPUT_LIMIT("zeppelin.interpreter.output.limit", 1024 * 100),
+    ZEPPELIN_INTERPRETER_INCLUDES("zeppelin.interpreter.include", ""),
+    ZEPPELIN_INTERPRETER_EXCLUDES("zeppelin.interpreter.exclude", ""),
+
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObject.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class AngularObject<T> implements JsonSerializable {
   private static final Logger LOGGER = LoggerFactory.getLogger(AngularObject.class);
-  private static final Gson gson = new Gson();
+  private static final Gson GSON = new Gson();
 
   private String name;
   private T object;
@@ -258,10 +258,10 @@ public String toString() {
   }
 
   public String toJson() {
-    return gson.toJson(this);
+    return GSON.toJson(this);
   }
 
   public static AngularObject fromJson(String json) {
-    return gson.fromJson(json, AngularObject.class);
+    return GSON.fromJson(json, AngularObject.class);
   }
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -678,7 +678,7 @@ public Response runNoteJobs(@PathParam("noteId") String noteId,
       params = request.getParams();
     }
 
-    LOG.info("Run note jobs, noteId: {} blocking: {}, isolated: {}, params: {}", noteId, blocking, isolated, params);
+    LOG.info("Run note jobs, noteId: {}, blocking: {}, isolated: {}, params: {}", noteId, blocking, isolated, params);
     Note note = notebook.getNote(noteId);
     AuthenticationInfo subject = new AuthenticationInfo(authenticationService.getPrincipal());
     subject.setRoles(new LinkedList<>(authenticationService.getAssociatedRoles()));

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -267,7 +267,9 @@ protected void configure() {
     // Try to get Notebook from ServiceLocator, because Notebook instantiation is lazy, it is
     // created when user open zeppelin in browser if we don't get it explicitly here.
     // Lazy loading will cause paragraph recovery and cron job initialization is delayed.
-    sharedServiceLocator.getService(Notebook.class);
+    Notebook notebook = sharedServiceLocator.getService(Notebook.class);
+    // Try to recover here, don't do it in constructor of Notebook, because it would cause deadlock.
+    notebook.recoveryIfNecessary();
 
     // when zeppelin is started inside of ide (especially for eclipse)
     // for graceful shutdown, input any key in console window

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/JobManagerService.java
Patch:
@@ -75,14 +75,13 @@ public List<NoteJobInfo> getNoteJobInfoByUnixTime(long lastUpdateServerUnixTime,
     if (!conf.isJobManagerEnabled()) {
       return new ArrayList<>();
     }
-    List<Note> notes = notebook.getAllNotes();
     List<NoteJobInfo> notesJobInfo = new ArrayList<>();
-    for (Note note : notes) {
+    notebook.getNoteStream().forEach(note -> {
       NoteJobInfo noteJobInfo = new NoteJobInfo(note);
       if (noteJobInfo.unixTimeLastRun > lastUpdateServerUnixTime) {
         notesJobInfo.add(noteJobInfo);
       }
-    }
+    });
     callback.onSuccess(notesJobInfo, context);
     return notesJobInfo;
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -337,7 +337,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
               getSimulatedMarkdownResult("markdown restarted"));
     } finally {
       if (null != note) {
-        TestUtils.getInstance(Notebook.class).removeNote(note.getId(), anonymous);
+        TestUtils.getInstance(Notebook.class).removeNote(note, anonymous);
       }
     }
   }
@@ -394,7 +394,7 @@ public void testRestartInterpreterPerNote() throws IOException, InterruptedExcep
 
     } finally {
       if (null != note) {
-        TestUtils.getInstance(Notebook.class).removeNote(note.getId(), anonymous);
+        TestUtils.getInstance(Notebook.class).removeNote(note, anonymous);
       }
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/search/SearchService.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
+import java.util.stream.Stream;
 
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.NoteEventAsyncListener;
@@ -134,5 +135,5 @@ public void handleParagraphUpdateEvent(ParagraphUpdateEvent paragraphUpdateEvent
     }
   }
 
-  public abstract void startRebuildIndex(List<Note> notes);
+  public abstract void startRebuildIndex(Stream<Note> notes);
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -147,17 +147,17 @@ public void testAngularObjectAddOnZeppelinServerSide() throws InterruptedExcepti
   }
 
   @Override
-  public void onAdd(String interpreterGroupId, AngularObject object) {
+  public void onAddAngularObject(String interpreterGroupId, AngularObject angularObject) {
     onAdd.incrementAndGet();
   }
 
   @Override
-  public void onUpdate(String interpreterGroupId, AngularObject object) {
+  public void onUpdateAngularObject(String interpreterGroupId, AngularObject angularObject) {
     onUpdate.incrementAndGet();
   }
 
   @Override
-  public void onRemove(String interpreterGroupId, String name, String noteId, String paragraphId) {
+  public void onRemoveAngularObject(String interpreterGroupId, AngularObject angularObject) {
     onRemove.incrementAndGet();
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.hadoop.yarn.api.records.YarnApplicationState;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;
 import org.apache.hadoop.yarn.exceptions.YarnException;
-import org.apache.zeppelin.interpreter.ExecutionContext;
+import org.apache.zeppelin.interpreter.ExecutionContextBuilder;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -100,7 +100,7 @@ public static void tearDown() throws IOException {
 
   private void testInterpreterBasics() throws IOException, InterpreterException {
     // test FlinkInterpreter
-    Interpreter flinkInterpreter = interpreterFactory.getInterpreter("flink", new ExecutionContext("user1", "note1", "flink"));
+    Interpreter flinkInterpreter = interpreterFactory.getInterpreter("flink", new ExecutionContextBuilder().setUser("user1").setNoteId("note1").setDefaultInterpreterGroup("flink").createExecutionContext());
 
     InterpreterContext context = new InterpreterContext.Builder().setNoteId("note1").setParagraphId("paragraph_1").build();
     InterpreterResult interpreterResult = flinkInterpreter.interpret("1+1", context);

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/JdbcIntegrationTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.collect.Lists;
 import org.apache.zeppelin.dep.Dependency;
-import org.apache.zeppelin.interpreter.ExecutionContext;
+import org.apache.zeppelin.interpreter.ExecutionContextBuilder;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -70,7 +70,7 @@ public void testMySql() throws InterpreterException, InterruptedException {
     interpreterSetting.setDependencies(Lists.newArrayList(dependency));
     interpreterSettingManager.restart(interpreterSetting.getId());
     interpreterSetting.waitForReady(60 * 1000);
-    Interpreter jdbcInterpreter = interpreterFactory.getInterpreter("jdbc", new ExecutionContext("user1", "note1", "test"));
+    Interpreter jdbcInterpreter = interpreterFactory.getInterpreter("jdbc", new ExecutionContextBuilder().setUser("user1").setNoteId("note1").setDefaultInterpreterGroup("test").createExecutionContext());
     assertNotNull("JdbcInterpreter is null", jdbcInterpreter);
 
     InterpreterContext context = new InterpreterContext.Builder()
@@ -89,7 +89,7 @@ public void testMySql() throws InterpreterException, InterruptedException {
     assertEquals("c1\tc2\n1\t2\n", interpreterResult.message().get(0).getData());
 
     // read table_1 from python interpreter
-    Interpreter pythonInterpreter = interpreterFactory.getInterpreter("python", new ExecutionContext("user1", "note1", "test"));
+    Interpreter pythonInterpreter = interpreterFactory.getInterpreter("python", new ExecutionContextBuilder().setUser("user1").setNoteId("note1").setDefaultInterpreterGroup("test").createExecutionContext());
     assertNotNull("PythonInterpreter is null", pythonInterpreter);
 
     context = new InterpreterContext.Builder()

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -243,7 +243,7 @@ public void run() {
             }
           }
 
-          if ("yarn".endsWith(launcherEnv)) {
+          if (launcherEnv != null && "yarn".endsWith(launcherEnv)) {
             try {
               YarnUtils.register(host, port);
               Thread thread = new Thread(() -> {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.dep.Repository;
-import org.apache.zeppelin.interpreter.ExecutionContext;
+import org.apache.zeppelin.interpreter.ExecutionContextBuilder;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterPropertyType;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
@@ -202,7 +202,7 @@ public Response restartSetting(String message, @PathParam("settingId") String se
         interpreterSettingManager.close(settingId);
       } else {
         interpreterSettingManager.restart(settingId,
-                new ExecutionContext(authenticationService.getPrincipal(), noteId));
+                new ExecutionContextBuilder().setUser(authenticationService.getPrincipal()).setNoteId(noteId).createExecutionContext());
       }
 
     } catch (InterpreterException e) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -419,7 +419,7 @@ public boolean runAllParagraphs(String noteId,
       } else {
         try {
           // run note directly when parameter `paragraphs` is null.
-          note.runAll(context.getAutheInfo(), true);
+          note.runAll(context.getAutheInfo(), true, false);
           return true;
         } catch (Exception e) {
           LOGGER.warn("Fail to run note: " + note.getName(), e);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -34,7 +34,7 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.AngularObjectRegistry;
-import org.apache.zeppelin.interpreter.ExecutionContext;
+import org.apache.zeppelin.interpreter.ExecutionContextBuilder;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterFactory;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
@@ -495,7 +495,7 @@ public Note loadNoteFromRepo(String id, AuthenticationInfo subject) {
       List<InterpreterSetting> settings = interpreterSettingManager.get();
       for (InterpreterSetting setting : settings) {
         InterpreterGroup intpGroup = setting.getInterpreterGroup(
-                new ExecutionContext(subject.getUser(), note.getId()));
+                new ExecutionContextBuilder().setUser(subject.getUser()).setNoteId(note.getId()).createExecutionContext());
         if (intpGroup != null && intpGroup.getId().equals(snapshot.getIntpGroupId())) {
           AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();
           String noteId = snapshot.getAngularObject().getNoteId();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -192,13 +192,13 @@ public void testCreateUpdateRemoveSetting() throws IOException, InterpreterExcep
 
   //@Test
   public void testGetEditor() throws IOException, InterpreterNotFoundException {
-    Interpreter echoInterpreter = interpreterFactory.getInterpreter("test.echo", new ExecutionContext("user1", "note1", "test"));
+    Interpreter echoInterpreter = interpreterFactory.getInterpreter("test.echo", new ExecutionContextBuilder().setUser("user1").setNoteId("note1").setDefaultInterpreterGroup("test").createExecutionContext());
     // get editor setting from interpreter-setting.json
     Map<String, Object> editor = interpreterSettingManager.getEditorSetting("test.echo", "note1");
     assertEquals("java", editor.get("language"));
 
     // when editor setting doesn't exit, return the default editor
-    Interpreter mock1Interpreter = interpreterFactory.getInterpreter("mock1", new ExecutionContext("user1", "note1", "test"));
+    Interpreter mock1Interpreter = interpreterFactory.getInterpreter("mock1", new ExecutionContextBuilder().setUser("user1").setNoteId("note1").setDefaultInterpreterGroup("test").createExecutionContext());
     editor = interpreterSettingManager.getEditorSetting("mock1", "note1");
     assertEquals("text", editor.get("language"));
   }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest16.java
Patch:
@@ -26,14 +26,14 @@
 @RunWith(value = Parameterized.class)
 public class SparkIntegrationTest16 extends SparkIntegrationTest{
 
-  public SparkIntegrationTest16(String sparkVersion) {
-    super(sparkVersion);
+  public SparkIntegrationTest16(String sparkVersion, String hadoopVersion) {
+    super(sparkVersion, hadoopVersion);
   }
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.6.3"}
+            {"1.6.3", "2.6"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest20.java
Patch:
@@ -26,14 +26,14 @@
 @RunWith(value = Parameterized.class)
 public class SparkIntegrationTest20 extends SparkIntegrationTest{
 
-  public SparkIntegrationTest20(String sparkVersion) {
-    super(sparkVersion);
+  public SparkIntegrationTest20(String sparkVersion, String hadoopVersion) {
+    super(sparkVersion, hadoopVersion);
   }
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.0.2"}
+            {"2.0.2", "2.7"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest21.java
Patch:
@@ -26,14 +26,14 @@
 @RunWith(value = Parameterized.class)
 public class SparkIntegrationTest21 extends SparkIntegrationTest{
 
-  public SparkIntegrationTest21(String sparkVersion) {
-    super(sparkVersion);
+  public SparkIntegrationTest21(String sparkVersion, String hadoopVersion) {
+    super(sparkVersion, hadoopVersion);
   }
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.1.3"}
+            {"2.1.3", "2.7"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest22.java
Patch:
@@ -26,14 +26,14 @@
 @RunWith(value = Parameterized.class)
 public class SparkIntegrationTest22 extends SparkIntegrationTest{
 
-  public SparkIntegrationTest22(String sparkVersion) {
-    super(sparkVersion);
+  public SparkIntegrationTest22(String sparkVersion, String hadoopVersion) {
+    super(sparkVersion, hadoopVersion);
   }
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.2.2"}
+            {"2.2.2", "2.7"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest23.java
Patch:
@@ -26,14 +26,14 @@
 @RunWith(value = Parameterized.class)
 public class SparkIntegrationTest23 extends SparkIntegrationTest{
 
-  public SparkIntegrationTest23(String sparkVersion) {
-    super(sparkVersion);
+  public SparkIntegrationTest23(String sparkVersion, String hadoopVersion) {
+    super(sparkVersion, hadoopVersion);
   }
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.3.2"}
+            {"2.3.2", "2.7"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest24.java
Patch:
@@ -26,14 +26,14 @@
 @RunWith(value = Parameterized.class)
 public class SparkIntegrationTest24 extends SparkIntegrationTest{
 
-  public SparkIntegrationTest24(String sparkVersion) {
-    super(sparkVersion);
+  public SparkIntegrationTest24(String sparkVersion, String hadoopVersion) {
+    super(sparkVersion, hadoopVersion);
   }
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.4.4"}
+            {"2.4.4", "2.7"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest16.java
Patch:
@@ -26,15 +26,15 @@
 @RunWith(value = Parameterized.class)
 public class ZeppelinSparkClusterTest16 extends ZeppelinSparkClusterTest {
 
-  public ZeppelinSparkClusterTest16(String sparkVersion) throws Exception {
-    super(sparkVersion);
+  public ZeppelinSparkClusterTest16(String sparkVersion, String hadoopVersion) throws Exception {
+    super(sparkVersion, hadoopVersion);
   }
 
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"1.6.3"}
+            {"1.6.3", "2.6"}
     });
   }
 }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest20.java
Patch:
@@ -26,15 +26,15 @@
 @RunWith(value = Parameterized.class)
 public class ZeppelinSparkClusterTest20 extends ZeppelinSparkClusterTest {
 
-  public ZeppelinSparkClusterTest20(String sparkVersion) throws Exception {
-    super(sparkVersion);
+  public ZeppelinSparkClusterTest20(String sparkVersion, String hadoopVersion) throws Exception {
+    super(sparkVersion, hadoopVersion);
   }
 
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.0.2"}
+            {"2.0.2", "2.7"}
     });
   }
 }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest21.java
Patch:
@@ -26,15 +26,15 @@
 @RunWith(value = Parameterized.class)
 public class ZeppelinSparkClusterTest21 extends ZeppelinSparkClusterTest {
 
-  public ZeppelinSparkClusterTest21(String sparkVersion) throws Exception {
-    super(sparkVersion);
+  public ZeppelinSparkClusterTest21(String sparkVersion, String hadoopVersion) throws Exception {
+    super(sparkVersion, hadoopVersion);
   }
 
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.1.3"}
+            {"2.1.3", "2.7"}
     });
   }
 }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest22.java
Patch:
@@ -26,15 +26,15 @@
 @RunWith(value = Parameterized.class)
 public class ZeppelinSparkClusterTest22 extends ZeppelinSparkClusterTest {
 
-  public ZeppelinSparkClusterTest22(String sparkVersion) throws Exception {
-    super(sparkVersion);
+  public ZeppelinSparkClusterTest22(String sparkVersion, String hadoopVersion) throws Exception {
+    super(sparkVersion, hadoopVersion);
   }
 
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.2.2"}
+            {"2.2.2", "2.7"}
     });
   }
 }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest23.java
Patch:
@@ -26,15 +26,15 @@
 @RunWith(value = Parameterized.class)
 public class ZeppelinSparkClusterTest23 extends ZeppelinSparkClusterTest {
 
-  public ZeppelinSparkClusterTest23(String sparkVersion) throws Exception {
-    super(sparkVersion);
+  public ZeppelinSparkClusterTest23(String sparkVersion, String hadoopVersion) throws Exception {
+    super(sparkVersion, hadoopVersion);
   }
 
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.3.2"}
+            {"2.3.2", "2.7"}
     });
   }
 }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest24.java
Patch:
@@ -26,14 +26,14 @@
 @RunWith(value = Parameterized.class)
 public class ZeppelinSparkClusterTest24 extends ZeppelinSparkClusterTest {
 
-  public ZeppelinSparkClusterTest24(String sparkVersion) throws Exception {
-    super(sparkVersion);
+  public ZeppelinSparkClusterTest24(String sparkVersion, String hadoopVersion) throws Exception {
+    super(sparkVersion, hadoopVersion);
   }
 
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.4.4"}
+            {"2.4.4", "2.7"}
     });
   }
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -261,7 +261,7 @@ private static void start(boolean withAuth,
       LOG.info("Zeppelin Server is started.");
 
       // set up spark interpreter
-      String sparkHome = DownloadUtils.downloadSpark("2.4.4");
+      String sparkHome = DownloadUtils.downloadSpark("2.4.4", "2.7");
       InterpreterSettingManager interpreterSettingManager = TestUtils.getInstance(InterpreterSettingManager.class);
       InterpreterSetting interpreterSetting = interpreterSettingManager.getInterpreterSettingByName("spark");
       interpreterSetting.setProperty("SPARK_HOME", sparkHome);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncherTest.java
Patch:
@@ -52,7 +52,7 @@ public void setUp() {
       System.clearProperty(confVar.getVarName());
     }
 
-    sparkHome = DownloadUtils.downloadSpark("2.3.2");
+    sparkHome = DownloadUtils.downloadSpark("2.3.2", "2.7");
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(),
             new File("..").getAbsolutePath());
 

File: cassandra/src/test/java/org/apache/zeppelin/cassandra/InterpreterLogicTest.java
Patch:
@@ -55,6 +55,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Properties;
 
 import scala.Option;
 
@@ -82,7 +83,7 @@ public class InterpreterLogicTest {
   @Mock
   private CqlSession session;
 
-  final InterpreterLogic helper = new InterpreterLogic(session);
+  final InterpreterLogic helper = new InterpreterLogic(session, new Properties());
 
   @Captor
   ArgumentCaptor<ParamOption[]> optionsCaptor;

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/sql/AbstractStreamSqlJob.java
Patch:
@@ -211,7 +211,6 @@ public void run() {
       try {
         while (isRunning && iterator.hasNext()) {
           final Tuple2<Boolean, Row> change = iterator.next();
-          LOGGER.info(change.f0 + ", " + change.f1);
           processRecord(change);
         }
       } catch (Throwable e) {

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.spark.SparkContext;
-import org.apache.spark.sql.SQLContext;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
 import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
@@ -41,7 +40,7 @@
  * Spark SQL interpreter for Zeppelin.
  */
 public class SparkSqlInterpreter extends AbstractInterpreter {
-  private Logger logger = LoggerFactory.getLogger(SparkSqlInterpreter.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(SparkSqlInterpreter.class);
 
   private SparkInterpreter sparkInterpreter;
   private SqlSplitter sqlSplitter;
@@ -111,7 +110,7 @@ public InterpreterResult internalInterpret(String st, InterpreterContext context
       if (Boolean.parseBoolean(getProperty("zeppelin.spark.sql.stacktrace", "false"))) {
         builder.append(ExceptionUtils.getStackTrace(e));
       } else {
-        logger.error("Invocation target exception", e);
+        LOGGER.error("Invocation target exception", e);
         String msg = e.getMessage()
                 + "\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace";
         builder.append(msg);

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkShimsTest.java
Patch:
@@ -95,7 +95,7 @@ public void setupSparkListener(String master,
                                            InterpreterContext context) {}
 
             @Override
-            public String showDataFrame(Object obj, int maxResult) {
+            public String showDataFrame(Object obj, int maxResult, InterpreterContext context) {
               return null;
             }
 

File: spark/spark-shims/src/main/scala/org/apache/zeppelin/spark/SparkShims.java
Patch:
@@ -99,7 +99,7 @@ public abstract void setupSparkListener(String master,
                                           String sparkWebUrl,
                                           InterpreterContext context);
 
-  public abstract String showDataFrame(Object obj, int maxResult);
+  public abstract String showDataFrame(Object obj, int maxResult, InterpreterContext context);
 
   public abstract Object getAsDataFrame(String value);
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
-import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;
 import org.apache.zeppelin.python.IPythonInterpreter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -62,8 +61,8 @@ public synchronized void open() throws InterpreterException {
     SparkConf conf = sparkInterpreter.getSparkContext().getConf();
     // only set PYTHONPATH in embedded, local or yarn-client mode.
     // yarn-cluster will setup PYTHONPATH automatically.
-    if (!conf.contains("spark.submit.deployMode") ||
-            !conf.get("spark.submit.deployMode").equals("cluster")) {
+    if (!conf.contains(SparkStringConstants.SUBMIT_DEPLOY_MODE_PROP_NAME) ||
+            !conf.get(SparkStringConstants.SUBMIT_DEPLOY_MODE_PROP_NAME).equals("cluster")) {
       setAdditionalPythonPath(PythonUtils.sparkPythonPath());
     }
     setUseBuiltinPy4j(false);

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -55,10 +55,9 @@ public class IPySparkInterpreterTest extends IPythonInterpreterTest {
   @Override
   protected Properties initIntpProperties() {
     Properties p = new Properties();
-    p.setProperty("spark.master", "local[4]");
-    p.setProperty("master", "local[4]");
+    p.setProperty(SparkStringConstants.MASTER_PROP_NAME, "local[4]");
     p.setProperty("spark.submit.deployMode", "client");
-    p.setProperty("spark.app.name", "Zeppelin Test");
+    p.setProperty(SparkStringConstants.APP_NAME_PROP_NAME, "Zeppelin Test");
     p.setProperty("zeppelin.spark.useHiveContext", "false");
     p.setProperty("zeppelin.spark.maxResult", "3");
     p.setProperty("zeppelin.spark.importImplicit", "true");

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/KotlinSparkInterpreterTest.java
Patch:
@@ -68,8 +68,8 @@ public class KotlinSparkInterpreterTest {
 
   public static Properties getSparkTestProperties(TemporaryFolder tmpDir) throws IOException {
     Properties p = new Properties();
-    p.setProperty("master", "local[*]");
-    p.setProperty("spark.app.name", "Zeppelin Test");
+    p.setProperty(SparkStringConstants.MASTER_PROP_NAME, "local[*]");
+    p.setProperty(SparkStringConstants.APP_NAME_PROP_NAME, "Zeppelin Test");
     p.setProperty("zeppelin.spark.useHiveContext", "true");
     p.setProperty("zeppelin.spark.maxResult", "1000");
     p.setProperty("zeppelin.spark.importImplicit", "true");

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterMatplotlibTest.java
Patch:
@@ -93,8 +93,8 @@ public InterpreterResult interpret(String st, InterpreterContext context) throws
 
   private static Properties getPySparkTestProperties() throws IOException {
     Properties p = new Properties();
-    p.setProperty("spark.master", "local[*]");
-    p.setProperty("spark.app.name", "Zeppelin Test");
+    p.setProperty(SparkStringConstants.MASTER_PROP_NAME, "local[*]");
+    p.setProperty(SparkStringConstants.APP_NAME_PROP_NAME, "Zeppelin Test");
     p.setProperty("zeppelin.spark.useHiveContext", "true");
     p.setProperty("zeppelin.spark.maxResult", "1000");
     p.setProperty("zeppelin.spark.importImplicit", "true");

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterTest.java
Patch:
@@ -46,8 +46,8 @@ public class PySparkInterpreterTest extends PythonInterpreterTest {
   @Override
   public void setUp() throws InterpreterException {
     Properties properties = new Properties();
-    properties.setProperty("spark.master", "local");
-    properties.setProperty("spark.app.name", "Zeppelin Test");
+    properties.setProperty(SparkStringConstants.MASTER_PROP_NAME, "local");
+    properties.setProperty(SparkStringConstants.APP_NAME_PROP_NAME, "Zeppelin Test");
     properties.setProperty("zeppelin.spark.useHiveContext", "false");
     properties.setProperty("zeppelin.spark.maxResult", "3");
     properties.setProperty("zeppelin.spark.importImplicit", "true");
@@ -104,7 +104,7 @@ public void testFailtoLaunchPythonProcess() throws InterpreterException {
     intpGroup = new InterpreterGroup();
 
     Properties properties = new Properties();
-    properties.setProperty("spark.app.name", "Zeppelin Test");
+    properties.setProperty(SparkStringConstants.APP_NAME_PROP_NAME, "Zeppelin Test");
     properties.setProperty("spark.pyspark.python", "invalid_python");
     properties.setProperty("zeppelin.python.useIPython", "false");
     properties.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkIRInterpreterTest.java
Patch:
@@ -57,8 +57,8 @@ protected Interpreter createInterpreter(Properties properties) {
   @Before
   public void setUp() throws InterpreterException {
     Properties properties = new Properties();
-    properties.setProperty("spark.master", "local");
-    properties.setProperty("spark.app.name", "test");
+    properties.setProperty(SparkStringConstants.MASTER_PROP_NAME, "local");
+    properties.setProperty(SparkStringConstants.APP_NAME_PROP_NAME, "test");
     properties.setProperty("zeppelin.spark.maxResult", "100");
     properties.setProperty("spark.r.backendConnectionTimeout", "10");
     properties.setProperty("zeppelin.spark.deprecatedMsg.show", "false");

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkShinyInterpreterTest.java
Patch:
@@ -49,8 +49,8 @@ public class SparkShinyInterpreterTest extends ShinyInterpreterTest {
   @Before
   public void setUp() throws InterpreterException {
     Properties properties = new Properties();
-    properties.setProperty("master", "local[*]");
-    properties.setProperty("spark.app.name", "test");
+    properties.setProperty(SparkStringConstants.MASTER_PROP_NAME, "local[*]");
+    properties.setProperty(SparkStringConstants.APP_NAME_PROP_NAME, "test");
 
     InterpreterContext context = getInterpreterContext();
     InterpreterContext.set(context);

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -48,8 +48,8 @@ public class SparkSqlInterpreterTest {
   @BeforeClass
   public static void setUp() throws Exception {
     Properties p = new Properties();
-    p.setProperty("spark.master", "local[4]");
-    p.setProperty("spark.app.name", "test");
+    p.setProperty(SparkStringConstants.MASTER_PROP_NAME, "local[4]");
+    p.setProperty(SparkStringConstants.APP_NAME_PROP_NAME, "test");
     p.setProperty("zeppelin.spark.maxResult", "10");
     p.setProperty("zeppelin.spark.concurrentSQL", "true");
     p.setProperty("zeppelin.spark.sql.stacktrace", "true");

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -350,7 +350,7 @@ boolean isSpark() {
   }
 
   boolean isSparkOnKubernetes(Properties interpreteProperties) {
-    String propertySparkMaster = (String) interpreteProperties.getOrDefault("master", "");
+    String propertySparkMaster = (String) interpreteProperties.getOrDefault("spark.master", "");
     return propertySparkMaster.startsWith("k8s://");
   }
 

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcessTest.java
Patch:
@@ -153,7 +153,7 @@ public void testGetTemplateBindingsForSpark() throws IOException {
 
     Properties properties = new Properties();
     properties.put("my.key1", "v1");
-    properties.put("master", "k8s://http://api");
+    properties.put("spark.master", "k8s://http://api");
     HashMap<String, String> envs = new HashMap<String, String>();
     envs.put("MY_ENV1", "V1");
     envs.put("SPARK_SUBMIT_OPTIONS", "my options");
@@ -206,7 +206,7 @@ public void testGetTemplateBindingsForSparkWithProxyUser() throws IOException {
 
     Properties properties = new Properties();
     properties.put("my.key1", "v1");
-    properties.put("master", "k8s://http://api");
+    properties.put("spark.master", "k8s://http://api");
     HashMap<String, String> envs = new HashMap<String, String>();
     envs.put("MY_ENV1", "V1");
     envs.put("SPARK_SUBMIT_OPTIONS", "my options");
@@ -258,7 +258,7 @@ public void testGetTemplateBindingsForSparkWithProxyUserAnonymous() throws IOExc
 
     Properties properties = new Properties();
     properties.put("my.key1", "v1");
-    properties.put("master", "k8s://http://api");
+    properties.put("spark.master", "k8s://http://api");
     HashMap<String, String> envs = new HashMap<String, String>();
     envs.put("MY_ENV1", "V1");
     envs.put("SPARK_SUBMIT_OPTIONS", "my options");

File: flink/flink-shims/src/main/java/org/apache/zeppelin/flink/FlinkVersion.java
Patch:
@@ -47,7 +47,7 @@ public class FlinkVersion {
       }
 
     } catch (Exception e) {
-      logger.error("Can not recognize Spark version " + versionString +
+      logger.error("Can not recognize Flink version " + versionString +
           ". Assume it's a future release", e);
     }
   }

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/sql/UpdateStreamSqlJob.java
Patch:
@@ -65,7 +65,7 @@ protected void processDelete(Row row) {
     enableToRefresh = false;
     LOGGER.debug("processDelete: " + row.toString());
     for (int i = 0; i < materializedTable.size(); i++) {
-      if (materializedTable.get(i).equals(row)) {
+      if (flinkShims.rowEquals(materializedTable.get(i), row)) {
         LOGGER.debug("real processDelete: " + row.toString());
         materializedTable.remove(i);
         break;

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -35,7 +35,6 @@
 import javax.servlet.ServletContextEvent;
 import javax.servlet.ServletContextListener;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.directory.api.util.Strings;
 import org.apache.shiro.web.env.EnvironmentLoaderListener;
 import org.apache.shiro.web.servlet.ShiroFilter;
 import org.apache.zeppelin.cluster.ClusterManagerServer;
@@ -350,14 +349,14 @@ private static void initServerConnector(Server server, int port, int sslPort) {
 
   private static void runNoteOnStart(ZeppelinConfiguration conf) throws IOException, InterruptedException {
     String noteIdToRun = conf.getNotebookRunId();
-    if (!Strings.isEmpty(noteIdToRun)) {
+    if (!StringUtils.isEmpty(noteIdToRun)) {
       LOG.info("Running note {} on start", noteIdToRun);
       NotebookService notebookService = (NotebookService) ServiceLocatorUtilities.getService(
               sharedServiceLocator, NotebookService.class.getName());
 
       ServiceContext serviceContext;
       String base64EncodedJsonSerializedServiceContext = conf.getNotebookRunServiceContext();
-      if (Strings.isEmpty(base64EncodedJsonSerializedServiceContext)) {
+      if (StringUtils.isEmpty(base64EncodedJsonSerializedServiceContext)) {
         LOG.info("No service context provided. use ANONYMOUS");
         serviceContext = new ServiceContext(AuthenticationInfo.ANONYMOUS, new HashSet<String>() {});
       } else {

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/sql/AbstractStreamSqlJob.java
Patch:
@@ -222,7 +222,8 @@ public void run() {
       // no result anymore
       // either the job is done or an error occurred
       isRunning = false;
-      LOGGER.info("ResultRetrieval Thread is done");
+      LOGGER.info("ResultRetrieval Thread is done, isRunning={}, hasNext={}",
+              isRunning, iterator.hasNext());
       LOGGER.info("Final Result: " + buildResult());
       refreshExecutorService.shutdownNow();
     }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/MiniHadoopCluster.java
Patch:
@@ -65,7 +65,9 @@ public void start() throws IOException {
 
     // start MiniYarnCluster
     YarnConfiguration baseConfig = new YarnConfiguration(hadoopConf);
-    baseConfig.set("yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage", "95");
+    baseConfig.set("yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage", "98");
+    baseConfig.set("yarn.scheduler.capacity.maximum-am-resource-percent", "1.0");
+
     this.yarnCluster = new MiniYARNCluster(getClass().getName(), 2,
         1, 1);
     yarnCluster.init(baseConfig);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/ParagraphTest.java
Patch:
@@ -77,7 +77,7 @@ public class ParagraphTest extends AbstractInterpreterTest {
   public void scriptBodyWithReplName() {
     Note note = createNote();
     Paragraph paragraph = new Paragraph(note, null);
-    paragraph.setText("%test(1234567");
+    paragraph.setText("%test (1234567");
     assertEquals("test", paragraph.getIntpText());
     assertEquals("(1234567", paragraph.getScriptText());
 

File: flink/flink-shims/src/main/java/org/apache/zeppelin/flink/FlinkShims.java
Patch:
@@ -89,7 +89,7 @@ public abstract Object getCollectStreamTableSink(InetAddress targetAddress,
 
   public abstract void addInsertStatement(String sql, Object tblEnv, InterpreterContext context) throws Exception;
 
-  public abstract boolean executeMultipleInsertInto(String sql, Object tblEnv, InterpreterContext context) throws Exception;
+  public abstract boolean executeMultipleInsertInto(String jobName, Object tblEnv, InterpreterContext context) throws Exception;
 
   public abstract boolean rowEquals(Object row1, Object row2);
 

File: flink/flink1.10-shims/src/main/java/org/apache/zeppelin/flink/Flink110Shims.java
Patch:
@@ -109,8 +109,8 @@ public void addInsertStatement(String sql, Object tblEnv, InterpreterContext con
   }
 
   @Override
-  public boolean executeMultipleInsertInto(String sql, Object tblEnv, InterpreterContext context) throws Exception {
-    ((TableEnvironment) tblEnv).execute(sql);
+  public boolean executeMultipleInsertInto(String jobName, Object tblEnv, InterpreterContext context) throws Exception {
+    ((TableEnvironment) tblEnv).execute(jobName);
     return true;
   }
 

File: flink/flink1.11-shims/src/main/java/org/apache/zeppelin/flink/Flink111Shims.java
Patch:
@@ -116,7 +116,7 @@ public void addInsertStatement(String sql, Object tblEnv, InterpreterContext con
   }
 
   @Override
-  public boolean executeMultipleInsertInto(String sql, Object tblEnv, InterpreterContext context) throws Exception {
+  public boolean executeMultipleInsertInto(String jobName, Object tblEnv, InterpreterContext context) throws Exception {
     JobClient jobClient = statementSetMap.get(context.getParagraphId()).execute().getJobClient().get();
     while(!jobClient.getJobStatus().get().isTerminalState()) {
       LOGGER.debug("Wait for job to finish");

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/sql/AbstractStreamSqlJob.java
Patch:
@@ -157,8 +157,9 @@ public String run(Table table, String tableName) throws IOException {
       retrievalThread.start();
 
       LOGGER.info("Run job: " + tableName + ", parallelism: " + parallelism);
-      stenv.execute(tableName);
-      LOGGER.info("Flink Job is finished, tableName: " + tableName);
+      String jobName = context.getStringLocalProperty("jobName", tableName);
+      stenv.execute(jobName);
+      LOGGER.info("Flink Job is finished, jobName: " + jobName);
       // wait for retrieve thread consume all data
       LOGGER.info("Waiting for retrieve thread to be done");
       retrievalThread.join();

File: flink/flink1.10-shims/src/main/java/org/apache/zeppelin/flink/shims111/CollectStreamTableSink.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.flink.sql;
+package org.apache.zeppelin.flink.shims111;
 
 import org.apache.flink.api.common.typeinfo.TypeInformation;
 import org.apache.flink.api.common.typeinfo.Types;

File: flink/interpreter/src/main/java/org/apache/zeppelin/flink/FlinkBatchSqlInterpreter.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.zeppelin.flink;
 
 import org.apache.flink.table.api.Table;
-import org.apache.flink.table.api.config.ExecutionConfigOptions;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.scheduler.Scheduler;

File: flink/src/main/java/org/apache/zeppelin/flink/sql/SingleRowStreamSqlJob.java
Patch:
@@ -83,6 +83,9 @@ protected void refresh(InterpreterContext context) throws Exception {
       String output = buildResult();
       context.out.write(output);
       context.out.flush();
+      // should checkpoint the html output, otherwise frontend won't display the output
+      // after recovering.
+      context.getIntpEventClient().checkpointOutput(context.getNoteId(), context.getParagraphId());
       isFirstRefresh = false;
     }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutput.java
Patch:
@@ -59,15 +59,13 @@ public class InterpreterOutput extends OutputStream {
   public InterpreterOutput(InterpreterOutputListener flushListener) {
     this.flushListener = flushListener;
     changeListener = null;
-    clear();
   }
 
   public InterpreterOutput(InterpreterOutputListener flushListener,
                            InterpreterOutputChangeListener listener)
       throws IOException {
     this.flushListener = flushListener;
     this.changeListener = listener;
-    clear();
   }
 
   public void setType(InterpreterResult.Type type) throws IOException {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ParagraphInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class ParagraphInfo implements org.apache.thrift.TBase<ParagraphInfo, ParagraphInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ParagraphInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParagraphInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventService.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class RemoteInterpreterEventService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public enum RemoteInterpreterEventType implements org.apache.thrift.TEnum {
   NO_OP(1),
   ANGULAR_OBJECT_ADD(2),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ServiceException.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-06-09")
 public class ServiceException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");
 

File: zeppelin-plugins/launcher/docker/src/main/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterLauncher.java
Patch:
@@ -38,7 +38,7 @@ public DockerInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage re
   }
 
   @Override
-  public InterpreterClient launch(InterpreterLaunchContext context) throws IOException {
+  public InterpreterClient launchDirectly(InterpreterLaunchContext context) throws IOException {
     LOGGER.info("Launching Interpreter: " + context.getInterpreterSettingGroup());
     this.context = context;
     this.properties = context.getProperties();
@@ -71,8 +71,8 @@ public InterpreterClient launch(InterpreterLaunchContext context) throws IOExcep
         context.getInterpreterSettingName(),
         properties,
         env,
-        context.getZeppelinServerHost(),
-        Integer.toString(context.getZeppelinServerRPCPort()),
+        context.getIntpEventServerHost(),
+        context.getIntpEventServerPort(),
         connectTimeout);
   }
 

File: zeppelin-plugins/launcher/docker/src/test/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterProcessTest.java
Patch:
@@ -90,7 +90,7 @@ public void testEnv() throws IOException {
         properties,
         envs,
         "zeppelin.server.hostname",
-        "12320",
+        12320,
         5000);
 
     assertEquals(intp.CONTAINER_SPARK_HOME, "my-spark-home");
@@ -116,7 +116,7 @@ public void testTemplateBindings() throws IOException {
         properties,
         envs,
         "zeppelin.server.hostname",
-        "12320",
+        12320,
         5000);
 
     Properties dockerProperties = intp.getTemplateBindings();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/RemoteInterpreterEventServer.java
Patch:
@@ -166,7 +166,8 @@ public void registerInterpreterProcess(RegisterInfo registerInfo) throws TExcept
       LOGGER.warn("Interpreter process does not existed yet for InterpreterGroup: " +
           registerInfo.getInterpreterGroupId());
     }
-
+    LOGGER.info("Register interpreter process: {}:{}, {}",
+            registerInfo.getHost(), registerInfo.getPort(), registerInfo.getInterpreterGroupId());
     interpreterProcess.processStarted(registerInfo.port, registerInfo.host);
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -42,7 +42,6 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
-import java.util.HashMap;
 import java.util.Map;
 import java.util.Properties;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/NullRecoveryStorage.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.zeppelin.interpreter.launcher.InterpreterClient;
 
 import java.io.IOException;
+import java.util.HashMap;
 import java.util.Map;
 
 
@@ -49,6 +50,6 @@ public void onInterpreterClientStop(InterpreterClient client) throws IOException
 
   @Override
   public Map<String, InterpreterClient> restore() throws IOException {
-    return null;
+    return new HashMap<>();
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.interpreter.thrift.ParagraphInfo;
-import org.apache.zeppelin.user.AuthenticationInfo;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.zeppelin.interpreter.thrift.ParagraphInfo;
 import org.apache.zeppelin.resource.LocalResourcePool;
 import org.apache.zeppelin.scheduler.Job.Status;
-import org.apache.zeppelin.user.AuthenticationInfo;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -167,7 +167,7 @@ public RemoteInterpreterServer(String intpEventServerHost,
         transport.open();
         TProtocol protocol = new TBinaryProtocol(transport);
         intpEventServiceClient = new RemoteInterpreterEventService.Client(protocol);
-        intpEventClient = new RemoteInterpreterEventClient(intpEventServiceClient);
+        intpEventClient = new RemoteInterpreterEventClient(intpEventServerHost, intpEventServerPort);
       }
     } else {
       // DevInterpreter

File: zeppelin-plugins/launcher/docker/src/test/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterProcessTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
 import org.slf4j.Logger;
@@ -38,6 +39,7 @@
 
 @RunWith(PowerMockRunner.class)
 @PrepareForTest({System.class, DockerInterpreterProcess.class})
+@PowerMockIgnore( {"javax.management.*"})
 public class DockerInterpreterProcessTest {
   private static final Logger LOGGER = LoggerFactory.getLogger(DockerInterpreterProcessTest.class);
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -72,6 +72,7 @@ public class NotebookRepoSyncTest {
 
   @Before
   public void setUp() throws Exception {
+    System.setProperty("zeppelin.isTest", "true");
     ZEPPELIN_HOME = Files.createTempDir();
     new File(ZEPPELIN_HOME, "conf").mkdirs();
     String mainNotePath = ZEPPELIN_HOME.getAbsolutePath() + "/notebook";
@@ -110,6 +111,7 @@ public void setUp() throws Exception {
   @After
   public void tearDown() throws Exception {
     delete(ZEPPELIN_HOME);
+    System.clearProperty("zeppelin.isTest");
   }
 
   @Test

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java
Patch:
@@ -26,6 +26,8 @@
  */
 public interface InterpreterClient {
 
+  String getInterpreterGroupId();
+
   String getInterpreterSettingName();
 
   void start(String userName) throws IOException;

File: zeppelin-plugins/launcher/cluster/src/main/java/org/apache/zeppelin/interpreter/launcher/ClusterInterpreterLauncher.java
Patch:
@@ -78,6 +78,7 @@ public InterpreterClient online(HashMap<String, Object> result) {
 
             return new RemoteInterpreterRunningProcess(
                 context.getInterpreterSettingName(),
+                context.getInterpreterGroupId(),
                 connectTimeout,
                 intpTserverHost,
                 intpTserverPort);
@@ -149,6 +150,7 @@ public InterpreterClient online(HashMap<String, Object> result) {
 
             return new RemoteInterpreterRunningProcess(
                 context.getInterpreterSettingName(),
+                context.getInterpreterGroupId(),
                 connectTimeout,
                 intpTserverHost,
                 intpTserverPort);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncher.java
Patch:
@@ -58,6 +58,7 @@ public InterpreterClient launch(InterpreterLaunchContext context) throws IOExcep
     if (option.isExistingProcess()) {
       return new RemoteInterpreterRunningProcess(
           context.getInterpreterSettingName(),
+          context.getInterpreterGroupId(),
           connectTimeout,
           option.getHost(),
           option.getPort());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java
Patch:
@@ -110,7 +110,7 @@ public Map<String, InterpreterClient> restore() throws IOException {
           int connectTimeout =
               zConf.getInt(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);
           RemoteInterpreterRunningProcess client = new RemoteInterpreterRunningProcess(
-              interpreterSettingName, connectTimeout, hostPort[0], Integer.parseInt(hostPort[1]));
+              interpreterSettingName, groupId, connectTimeout, hostPort[0], Integer.parseInt(hostPort[1]));
           // interpreterSettingManager may be null when this class is used when it is used
           // stop-interpreter.sh
           clients.put(groupId, client);

File: cassandra/src/test/java/org/apache/zeppelin/cassandra/CassandraInterpreterTest.java
Patch:
@@ -759,7 +759,7 @@ public void should_show_help() throws Exception {
 
     //Then
     assertThat(actual.code()).isEqualTo(Code.SUCCESS);
-    assertThat(reformatHtml(actual.message().get(0).getData())).isEqualTo(expected);
+    assertThat(reformatHtml(actual.message().get(0).getData())).contains(expected);
   }
 
   private static String reformatHtml(String rawHtml) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -187,6 +187,8 @@ && getDeployMode().equals("cluster")) {
     } else {
       LOGGER.info("Run Spark under non-secure mode as no keytab and principal is specified");
     }
+
+    env.put("PYSPARK_PIN_THREAD", "true");
     LOGGER.debug("buildEnvFromProperties: " + env);
     return env;
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1193,7 +1193,7 @@ protected void convertNote(NotebookSocket conn, Message fromMessage) throws IOEx
     } else {
       Message resp = new Message(OP.CONVERTED_NOTE_NBFORMAT)
               .put("nbformat", new JupyterUtil().getNbformat(note.toJson()))
-              .put("name", fromMessage.get("name"));
+              .put("noteName", fromMessage.get("noteName"));
       conn.send(serializeMessage(resp));
     }
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -388,7 +388,7 @@ public void testParagraphOperations() throws IOException {
     reset(callback);
     runStatus = notebookService.runParagraph(note1.getId(), p.getId(), "my_title", "invalid_code",
         new HashMap<>(), new HashMap<>(), false, true, context, callback);
-    assertFalse(runStatus);
+    assertTrue(runStatus);
     // TODO(zjffdu) Enable it after ZEPPELIN-3699
     // assertNotNull(p.getResult());
     verify(callback).onSuccess(p, context);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -780,7 +780,7 @@ public boolean run(String paragraphId, boolean blocking) {
   }
 
   /**
-   * Run a single paragraph
+   * Run a single paragraph. Return true only when paragraph run successfully.
    *
    * @param paragraphId
    * @param blocking

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/CredentialInjector.java
Patch:
@@ -37,8 +37,8 @@ class CredentialInjector {
 
   private Set<String> passwords = new HashSet<>();
   private final UserCredentials creds;
-  private static final Pattern userpattern = Pattern.compile("\\{user\\.([^\\}]+)\\}");
-  private static final Pattern passwordpattern = Pattern.compile("\\{password\\.([^\\}]+)\\}");
+  private static final Pattern userpattern = Pattern.compile("\\{([^\\}]+)\\.user\\}");
+  private static final Pattern passwordpattern = Pattern.compile("\\{([^\\}]+)\\.password\\}");
 
 
   public CredentialInjector(UserCredentials creds) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/CredentialInjectorTest.java
Patch:
@@ -31,7 +31,7 @@
 public class CredentialInjectorTest {
 
   private static final String TEMPLATE =
-    "val jdbcUrl = \"jdbc:mysql://localhost/emp?user={user.mysql}&password={password.mysql}\"";
+    "val jdbcUrl = \"jdbc:mysql://localhost/emp?user={mysql.user}&password={mysql.password}\"";
   private static final String CORRECT_REPLACED =
     "val jdbcUrl = \"jdbc:mysql://localhost/emp?user=username&password=pwd\"";
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/CredentialInjector.java
Patch:
@@ -37,8 +37,8 @@ class CredentialInjector {
 
   private Set<String> passwords = new HashSet<>();
   private final UserCredentials creds;
-  private static final Pattern userpattern = Pattern.compile("\\{user\\.([^\\}]+)\\}");
-  private static final Pattern passwordpattern = Pattern.compile("\\{password\\.([^\\}]+)\\}");
+  private static final Pattern userpattern = Pattern.compile("\\{([^\\}]+)\\.user\\}");
+  private static final Pattern passwordpattern = Pattern.compile("\\{([^\\}]+)\\.password\\}");
 
 
   public CredentialInjector(UserCredentials creds) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/user/Credentials.java
Patch:
@@ -90,7 +90,6 @@ public Credentials() {
   }
 
   public UserCredentials getUserCredentials(String username) throws IOException {
-    loadCredentials();
     UserCredentials uc = credentialsMap.get(username);
     if (uc == null) {
       uc = new UserCredentials();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/CredentialInjectorTest.java
Patch:
@@ -31,7 +31,7 @@
 public class CredentialInjectorTest {
 
   private static final String TEMPLATE =
-    "val jdbcUrl = \"jdbc:mysql://localhost/emp?user={user.mysql}&password={password.mysql}\"";
+    "val jdbcUrl = \"jdbc:mysql://localhost/emp?user={mysql.user}&password={mysql.password}\"";
   private static final String CORRECT_REPLACED =
     "val jdbcUrl = \"jdbc:mysql://localhost/emp?user=username&password=pwd\"";
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -314,13 +314,13 @@ private static void initServerConnector(Server server, int port, int sslPort) {
     ServerConnector connector;
     HttpConfiguration httpConfig = new HttpConfiguration();
     httpConfig.addCustomizer(new ForwardedRequestCustomizer());
+    httpConfig.setSendServerVersion(conf.sendJettyName());
     if (conf.useSsl()) {
       LOG.debug("Enabling SSL for Zeppelin Server on port {}", sslPort);
       httpConfig.setSecureScheme("https");
       httpConfig.setSecurePort(sslPort);
       httpConfig.setOutputBufferSize(32768);
       httpConfig.setResponseHeaderSize(8192);
-      httpConfig.setSendServerVersion(true);
 
       HttpConfiguration httpsConfig = new HttpConfiguration(httpConfig);
       SecureRequestCustomizer src = new SecureRequestCustomizer();

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.hadoop.yarn.api.records.YarnApplicationState;
 import org.apache.hadoop.yarn.conf.YarnConfiguration;
 import org.apache.hadoop.yarn.exceptions.YarnException;
+import org.apache.zeppelin.interpreter.ExecutionContext;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -99,7 +100,7 @@ public static void tearDown() throws IOException {
 
   private void testInterpreterBasics() throws IOException, InterpreterException {
     // test FlinkInterpreter
-    Interpreter flinkInterpreter = interpreterFactory.getInterpreter("user1", "note1", "flink", "flink");
+    Interpreter flinkInterpreter = interpreterFactory.getInterpreter("flink", new ExecutionContext("user1", "note1", "flink"));
 
     InterpreterContext context = new InterpreterContext.Builder().setNoteId("note1").setParagraphId("paragraph_1").build();
     InterpreterResult interpreterResult = flinkInterpreter.interpret("1+1", context);

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/JdbcIntegrationTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.google.common.collect.Lists;
 import org.apache.zeppelin.dep.Dependency;
+import org.apache.zeppelin.interpreter.ExecutionContext;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -69,7 +70,7 @@ public void testMySql() throws InterpreterException, InterruptedException {
     interpreterSetting.setDependencies(Lists.newArrayList(dependency));
     interpreterSettingManager.restart(interpreterSetting.getId());
     interpreterSetting.waitForReady(60 * 1000);
-    Interpreter jdbcInterpreter = interpreterFactory.getInterpreter("user1", "note1", "jdbc", "test");
+    Interpreter jdbcInterpreter = interpreterFactory.getInterpreter("jdbc", new ExecutionContext("user1", "note1", "test"));
     assertNotNull("JdbcInterpreter is null", jdbcInterpreter);
 
     InterpreterContext context = new InterpreterContext.Builder()
@@ -88,7 +89,7 @@ public void testMySql() throws InterpreterException, InterruptedException {
     assertEquals("c1\tc2\n1\t2\n", interpreterResult.message().get(0).getData());
 
     // read table_1 from python interpreter
-    Interpreter pythonInterpreter = interpreterFactory.getInterpreter("user1", "note1", "python", "test");
+    Interpreter pythonInterpreter = interpreterFactory.getInterpreter("python", new ExecutionContext("user1", "note1", "test"));
     assertNotNull("PythonInterpreter is null", pythonInterpreter);
 
     context = new InterpreterContext.Builder()

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.dep.Repository;
+import org.apache.zeppelin.interpreter.ExecutionContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterPropertyType;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
@@ -200,7 +201,8 @@ public Response restartSetting(String message, @PathParam("settingId") String se
       if (null == noteId) {
         interpreterSettingManager.close(settingId);
       } else {
-        interpreterSettingManager.restart(settingId, noteId, authenticationService.getPrincipal());
+        interpreterSettingManager.restart(settingId,
+                new ExecutionContext(authenticationService.getPrincipal(), noteId));
       }
 
     } catch (InterpreterException e) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -100,7 +100,7 @@ public void setUp() throws Exception {
     InterpreterSettingManager mockInterpreterSettingManager = mock(InterpreterSettingManager.class);
     InterpreterFactory mockInterpreterFactory = mock(InterpreterFactory.class);
     Interpreter mockInterpreter = mock(Interpreter.class);
-    when(mockInterpreterFactory.getInterpreter(any(), any(), any(), any()))
+    when(mockInterpreterFactory.getInterpreter(any(), any()))
         .thenReturn(mockInterpreter);
     when(mockInterpreter.interpret(eq("invalid_code"), any()))
         .thenReturn(new InterpreterResult(Code.ERROR, "failed"));

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.AngularObjectRegistry;
+import org.apache.zeppelin.interpreter.ExecutionContext;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterFactory;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
@@ -475,7 +476,8 @@ public Note loadNoteFromRepo(String id, AuthenticationInfo subject) {
       SnapshotAngularObject snapshot = angularObjectSnapshot.get(name);
       List<InterpreterSetting> settings = interpreterSettingManager.get();
       for (InterpreterSetting setting : settings) {
-        InterpreterGroup intpGroup = setting.getInterpreterGroup(subject.getUser(), note.getId());
+        InterpreterGroup intpGroup = setting.getInterpreterGroup(
+                new ExecutionContext(subject.getUser(), note.getId()));
         if (intpGroup != null && intpGroup.getId().equals(snapshot.getIntpGroupId())) {
           AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();
           String noteId = snapshot.getAngularObject().getNoteId();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorageTest.java
Patch:
@@ -83,7 +83,7 @@ public void testMultipleInterpreterProcess() throws InterpreterException, IOExce
 
     assertEquals(2, interpreterSettingManager.getRecoveryStorage().restore().size());
 
-    interpreterSettingManager.restart(interpreterSetting.getId(), "note1", "user1");
+    interpreterSettingManager.restart(interpreterSetting.getId(), "user1", "note1");
     assertEquals(1, interpreterSettingManager.getRecoveryStorage().restore().size());
 
     interpreterSetting.close();

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkStreamSqlInterpreterTest.java
Patch:
@@ -57,7 +57,7 @@ public void testSingleStreamSql() throws IOException, InterpreterException {
             "from log", context);
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     List<InterpreterResultMessage> resultMessages = context.out.toInterpreterResultMessage();
-    assertEquals(InterpreterResult.Type.HTML, resultMessages.get(0).getType());
+    assertEquals(InterpreterResult.Type.ANGULAR, resultMessages.get(0).getType());
     assertTrue(resultMessages.toString(),
             resultMessages.get(0).getData().contains("Total Count"));
   }
@@ -74,7 +74,7 @@ public void testSingleStreamTableApi() throws IOException, InterpreterException
     result = flinkInterpreter.interpret(code, context);
     assertEquals(context.out.toString(), InterpreterResult.Code.SUCCESS, result.code());
     List<InterpreterResultMessage> resultMessages = context.out.toInterpreterResultMessage();
-    assertEquals(InterpreterResult.Type.HTML, resultMessages.get(0).getType());
+    assertEquals(InterpreterResult.Type.ANGULAR, resultMessages.get(0).getType());
     assertTrue(resultMessages.toString(),
             resultMessages.get(0).getData().contains("Total Count"));
 

File: flink/src/test/java/org/apache/zeppelin/flink/IPyFlinkInterpreterTest.java
Patch:
@@ -330,7 +330,7 @@ public static void testSingleStreamTableApi(Interpreter interpreter,
     result = interpreter.interpret(code, context);
     assertEquals(context.out.toString(), InterpreterResult.Code.SUCCESS, result.code());
     List<InterpreterResultMessage> resultMessages = context.out.toInterpreterResultMessage();
-    assertEquals(InterpreterResult.Type.HTML, resultMessages.get(0).getType());
+    assertEquals(InterpreterResult.Type.ANGULAR, resultMessages.get(0).getType());
     assertTrue(resultMessages.toString(),
             resultMessages.get(0).getData().contains("Total Count"));
   }

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/Kubectl.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.commons.io.IOUtils;
 
 import java.io.*;
+import java.nio.charset.StandardCharsets;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -106,7 +107,7 @@ String execAndGet(String [] args) throws IOException {
 
   @VisibleForTesting
   String execAndGet(String [] args, String stdin) throws IOException {
-    InputStream ins = IOUtils.toInputStream(stdin);
+    InputStream ins = IOUtils.toInputStream(stdin, StandardCharsets.UTF_8);
     ByteArrayOutputStream stdout = new ByteArrayOutputStream();
     ByteArrayOutputStream stderr = new ByteArrayOutputStream();
     ArrayList<String> argsToOverride = new ArrayList<>(Arrays.asList(args));

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -57,7 +57,7 @@ public class IPythonInterpreter extends JupyterKernelInterpreter {
   private String py4jGatewaySecret;
 
   public IPythonInterpreter(Properties properties) {
-    super(properties);
+    super("python", properties);
   }
 
   @Override

File: rlang/src/main/java/org/apache/zeppelin/r/IRInterpreter.java
Patch:
@@ -54,7 +54,7 @@ public class IRInterpreter extends JupyterKernelInterpreter {
   private SparkRBackend sparkRBackend;
 
   public IRInterpreter(Properties properties) {
-    super(properties);
+    super("ir", properties);
   }
 
   /**

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelInterpreter.java
Patch:
@@ -125,7 +125,7 @@ public void open() throws InterpreterException {
 
       jupyterKernelClient = new JupyterKernelClient(ManagedChannelBuilder.forAddress("127.0.0.1",
               kernelPort).usePlaintext(true).maxInboundMessageSize(message_size),
-              getProperties());
+              getProperties(), kernel);
       launchJupyterKernel(kernelPort);
     } catch (Exception e) {
       throw new InterpreterException("Fail to open JupyterKernelInterpreter:\n" +

File: flink/src/main/java/org/apache/zeppelin/flink/sql/AppendStreamSqlJob.java
Patch:
@@ -124,7 +124,6 @@ protected String buildResult() {
   protected void refresh(InterpreterContext context) {
     context.out().clear(false);
     try {
-      jobManager.sendFlinkJobUrl(context);
       String result = buildResult();
       context.out.write(result);
       context.out.flush();

File: flink/src/main/java/org/apache/zeppelin/flink/sql/SingleRowStreamSqlJob.java
Patch:
@@ -83,7 +83,6 @@ protected void refresh(InterpreterContext context) throws Exception {
     context.out().clear(false);
     String output = buildResult();
     context.out.write(output);
-    jobManager.sendFlinkJobUrl(context);
     LOGGER.debug("Refresh Output: " + output);
     context.out.flush();
   }

File: flink/src/main/java/org/apache/zeppelin/flink/sql/UpdateStreamSqlJob.java
Patch:
@@ -106,7 +106,6 @@ protected String buildResult() {
   protected void refresh(InterpreterContext context) {
     context.out().clear(false);
     try {
-      jobManager.sendFlinkJobUrl(context);
       String result = buildResult();
       context.out.write(result);
       context.out.flush();

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -885,7 +885,7 @@ public List<InterpreterCompletion> completion(
   }
 
   public void getEditorSetting(String noteId,
-                               String magic,
+                               String paragraphText,
                                ServiceContext context,
                                ServiceCallback<Map<String, Object>> callback) throws IOException {
     Note note = notebook.getNote(noteId);
@@ -895,7 +895,7 @@ public void getEditorSetting(String noteId,
     }
     try {
       Map<String, Object> settings = notebook.getInterpreterSettingManager().
-          getEditorSetting(magic, noteId);
+          getEditorSetting(paragraphText, noteId);
       callback.onSuccess(settings, context);
     } catch (Exception e) {
       callback.onFailure(new IOException("Fail to getEditorSetting", e), context);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -2020,10 +2020,10 @@ public void onRemove(String interpreterGroupId, String name, String noteId, Stri
 
   private void getEditorSetting(NotebookSocket conn, Message fromMessage) throws IOException {
     String paragraphId = (String) fromMessage.get("paragraphId");
-    String magic = (String) fromMessage.get("magic");
+    String paragraphText = (String) fromMessage.get("paragraphText");
     String noteId = getConnectionManager().getAssociatedNoteId(conn);
 
-    getNotebookService().getEditorSetting(noteId, magic,
+    getNotebookService().getEditorSetting(noteId, paragraphText,
         getServiceContext(fromMessage),
         new WebSocketServiceCallback<Map<String, Object>>(conn) {
           @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -1093,6 +1093,9 @@ public InterpreterInfo getDefaultInterpreterInfo() throws Exception {
         return interpreterInfo;
       }
     }
+    if (interpreterInfos.size() == 1) {
+      return interpreterInfos.get(0);
+    }
     throw new Exception("No default interpreter info found in interpreter setting: " + name);
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -108,7 +108,7 @@ public static enum OP {
                       // @param params paragraph params
 
     EDITOR_SETTING,   // [c-s] ask paragraph editor setting
-                      // @param magic magic keyword written in paragraph
+                      // @param paragraph text keyword written in paragraph
                       // ex) spark.spark or spark
 
     COMPLETION,       // [c-s] ask completion candidates

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sStandardInterpreterLauncher.java
Patch:
@@ -135,7 +135,7 @@ private String getZeppelinServiceRpcPort() {
   private boolean isUserImpersonateForSparkInterpreter(InterpreterLaunchContext context) {
       return zConf.getZeppelinImpersonateSparkProxyUser() &&
           context.getOption().isUserImpersonate() &&
-          "spark".equalsIgnoreCase(context.getInterpreterGroupId());
+          "spark".equalsIgnoreCase(context.getInterpreterSettingGroup());
   }
 
   @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/scheduler/QuartzSchedulerService.java
Patch:
@@ -88,7 +88,7 @@ public QuartzSchedulerService(ZeppelinConfiguration zeppelinConfiguration, Noteb
   private Scheduler getScheduler() throws SchedulerException {
     // Make sure to not check for Quartz update since this leaks information about running process
     // http://www.quartz-scheduler.org/documentation/2.4.0-SNAPSHOT/best-practices.html#skip-update-check
-    System.setProperty(StdSchedulerFactory.PROP_SCHED_SKIP_UPDATE_CHECK, "true");
+    System.setProperty("org.terracotta.quartz.skipUpdateCheck", "true");
     return new StdSchedulerFactory().getScheduler();
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -312,7 +312,7 @@ private static void initServerConnector(Server server, int port, int sslPort) {
     HttpConfiguration httpConfig = new HttpConfiguration();
     httpConfig.addCustomizer(new ForwardedRequestCustomizer());
     if (conf.useSsl()) {
-      LOG.debug("Enabling SSL for Zeppelin Server on port " + sslPort);
+      LOG.debug("Enabling SSL for Zeppelin Server on port {}", sslPort);
       httpConfig.setSecureScheme("https");
       httpConfig.setSecurePort(sslPort);
       httpConfig.setOutputBufferSize(32768);
@@ -328,6 +328,7 @@ private static void initServerConnector(Server server, int port, int sslPort) {
                       server,
                       new SslConnectionFactory(getSslContextFactory(conf), HttpVersion.HTTP_1_1.asString()),
                       new HttpConnectionFactory(httpsConfig));
+      connector.setPort(sslPort);
     } else {
       connector = new ServerConnector(server, new HttpConnectionFactory(httpConfig));
       connector.setPort(port);

File: flink/src/main/java/org/apache/zeppelin/flink/JobManager.java
Patch:
@@ -199,10 +199,10 @@ public void run() {
           if (isStreamingInsertInto) {
             StringBuilder builder = new StringBuilder("%html ");
             builder.append("<h1>Duration: " +
-                    Integer.parseInt(rootNode.getObject().getString("duration")) / 1000 +
+                    rootNode.getObject().getLong("duration") / 1000 +
                     " seconds");
             builder.append("\n%text ");
-            context.out.clear();
+            context.out.clear(false);
             sendFlinkJobUrl(context);
             context.out.write(builder.toString());
             context.out.flush();

File: flink/src/main/java/org/apache/zeppelin/flink/sql/AppendStreamSqlJob.java
Patch:
@@ -122,7 +122,7 @@ protected String buildResult() {
 
   @Override
   protected void refresh(InterpreterContext context) {
-    context.out().clear();
+    context.out().clear(false);
     try {
       jobManager.sendFlinkJobUrl(context);
       String result = buildResult();

File: flink/src/main/java/org/apache/zeppelin/flink/sql/SingleRowStreamSqlJob.java
Patch:
@@ -80,7 +80,7 @@ protected void refresh(InterpreterContext context) throws Exception {
       LOGGER.warn("Skip RefreshTask as no data available");
       return;
     }
-    context.out().clear();
+    context.out().clear(false);
     String output = buildResult();
     context.out.write(output);
     jobManager.sendFlinkJobUrl(context);

File: flink/src/main/java/org/apache/zeppelin/flink/sql/UpdateStreamSqlJob.java
Patch:
@@ -104,7 +104,7 @@ protected String buildResult() {
 
   @Override
   protected void refresh(InterpreterContext context) {
-    context.out().clear();
+    context.out().clear(false);
     try {
       jobManager.sendFlinkJobUrl(context);
       String result = buildResult();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -136,7 +136,7 @@ public Paragraph(Paragraph p2) {
   }
 
   private static String generateId() {
-    return "paragraph_" + System.currentTimeMillis() + "_" + new SecureRandom().nextInt();
+    return "paragraph_" + System.currentTimeMillis() + "_" + Math.abs(new SecureRandom().nextInt());
   }
 
   public Map<String, Paragraph> getUserParagraphMap() {

File: flink/src/main/java/org/apache/zeppelin/flink/FlinkBatchSqlInterpreter.java
Patch:
@@ -44,7 +44,6 @@ protected boolean isBatch() {
   public void open() throws InterpreterException {
     super.open();
     this.tbenv = flinkInterpreter.getJavaBatchTableEnvironment("blink");
-    this.tbenv_2 = flinkInterpreter.getJavaBatchTableEnvironment("flink");
     this.z = flinkInterpreter.getZeppelinContext();
   }
 
@@ -63,7 +62,7 @@ public void callInnerSelect(String sql, InterpreterContext context) throws IOExc
 
   @Override
   public void cancel(InterpreterContext context) throws InterpreterException {
-    flinkInterpreter.getJobManager().cancelJob(context);
+    flinkInterpreter.cancel(context);
   }
 
   @Override

File: flink/src/main/java/org/apache/zeppelin/flink/IPyFlinkInterpreter.java
Patch:
@@ -89,6 +89,8 @@ public InterpreterResult internalInterpret(String st,
         throw new InterpreterException("Fail to initJavaThread: " +
                 result.toString());
       }
+      flinkInterpreter.setSavePointIfNecessary(context);
+      flinkInterpreter.setParallelismIfNecessary(context);
       return super.internalInterpret(st, context);
     } finally {
       if (getKernelProcessLauncher().isRunning()) {
@@ -103,8 +105,8 @@ public InterpreterResult internalInterpret(String st,
 
   @Override
   public void cancel(InterpreterContext context) throws InterpreterException {
-    super.cancel(context);
     flinkInterpreter.cancel(context);
+    super.cancel(context);
   }
 
   @Override

File: flink/src/main/java/org/apache/zeppelin/flink/sql/AppendStreamSqlJob.java
Patch:
@@ -125,8 +125,10 @@ protected void refresh(InterpreterContext context) {
     context.out().clear();
     try {
       jobManager.sendFlinkJobUrl(context);
-      context.out.write(buildResult());
+      String result = buildResult();
+      context.out.write(result);
       context.out.flush();
+      LOGGER.debug("Refresh with data: " + result);
     } catch (IOException e) {
       LOGGER.error("Fail to refresh data", e);
     }

File: flink/src/main/java/org/apache/zeppelin/flink/sql/UpdateStreamSqlJob.java
Patch:
@@ -108,9 +108,9 @@ protected void refresh(InterpreterContext context) {
     try {
       jobManager.sendFlinkJobUrl(context);
       String result = buildResult();
-      LOGGER.debug(("Refresh with data: " + result));
       context.out.write(result);
       context.out.flush();
+      LOGGER.debug("Refresh with data: " + result);
       this.lastSnapshot.clear();
       for (Row row : materializedTable) {
         this.lastSnapshot.add(row);

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkBatchSqlInterpreterTest.java
Patch:
@@ -84,7 +84,7 @@ public void testSelect() throws InterpreterException, IOException {
     // select which use scala udf
     context = getInterpreterContext();
     result = sqlInterpreter.interpret("SELECT addOne(id) as add_one FROM source_table", context);
-    assertEquals(new String(context.out.toByteArray()), InterpreterResult.Code.SUCCESS, result.code());
+    assertEquals(context.out.toString(), InterpreterResult.Code.SUCCESS, result.code());
     resultMessages = context.out.toInterpreterResultMessage();
     assertEquals(1, resultMessages.size());
     assertEquals(InterpreterResult.Type.TABLE, resultMessages.get(0).getType());
@@ -109,7 +109,7 @@ public void testSelect() throws InterpreterException, IOException {
     // select which use python udf
     context = getInterpreterContext();
     result = sqlInterpreter.interpret("SELECT python_upper(name) as name FROM source_table", context);
-    assertEquals(new String(context.out.toByteArray()), InterpreterResult.Code.SUCCESS, result.code());
+    assertEquals(context.out.toString(), InterpreterResult.Code.SUCCESS, result.code());
     resultMessages = context.out.toInterpreterResultMessage();
     assertEquals(1, resultMessages.size());
     assertEquals(InterpreterResult.Type.TABLE, resultMessages.get(0).getType());

File: zeppelin-plugins/notebookrepo/mongo/src/main/java/org/apache/zeppelin/notebook/repo/MongoNotebookRepo.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -127,6 +128,7 @@ public Map<String, NoteInfo> list(AuthenticationInfo subject) throws IOException
         String id = document.getString(Fields.ID);
         String name = document.getString(Fields.NAME);
         List<Document> fullPath = document.get(Fields.FULL_PATH, List.class);
+        fullPath.sort(Comparator.comparing(pathNode -> pathNode.getString(Fields.ID)));
 
         StringBuilder sb = new StringBuilder();
         for (Document pathNode : fullPath) {

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcessTest.java
Patch:
@@ -318,7 +318,8 @@ public void testSparkUiWebUrlTemplate() {
         "12320",
         false,
         "spark-container:1.0",
-        10);
+        10,
+        false);
 
     // when non template url
     assertEquals("static.url",

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -156,9 +156,8 @@ && getDeployMode().equals("cluster")) {
     for (String name : sparkProperties.stringPropertyNames()) {
       sparkConfBuilder.append(" --conf " + name + "=" + sparkProperties.getProperty(name));
     }
-    String useProxyUserEnv = System.getenv("ZEPPELIN_IMPERSONATE_SPARK_PROXY_USER");
-    if (context.getOption().isUserImpersonate() && (StringUtils.isBlank(useProxyUserEnv) ||
-            !useProxyUserEnv.equals("false"))) {
+
+    if (context.getOption().isUserImpersonate() && zConf.getZeppelinImpersonateSparkProxyUser()) {
       sparkConfBuilder.append(" --proxy-user " + context.getUserName());
     }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/CredentialsRestApiTest.java
Patch:
@@ -44,8 +44,7 @@ public class CredentialsRestApiTest {
 
   @Before
   public void setUp() throws IOException {
-    credentials =
-        new Credentials(false, Files.createTempFile("credentials", "test").toString(), null);
+    credentials = new Credentials();
     authenticationService = new NoAuthenticationService();
     credentialRestApi = new CredentialRestApi(credentials, authenticationService);
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -115,7 +115,7 @@ public void setUp() throws Exception {
     when(mockInterpreterGroup.getInterpreterSetting()).thenReturn(mockInterpreterSetting);
     when(mockInterpreterSetting.getStatus()).thenReturn(InterpreterSetting.Status.READY);
     SearchService searchService = new LuceneSearch(zeppelinConfiguration);
-    Credentials credentials = new Credentials(false, null, null);
+    Credentials credentials = new Credentials();
     NoteManager noteManager = new NoteManager(notebookRepo);
     AuthorizationService authorizationService = new AuthorizationService(noteManager, zeppelinConfiguration);
     Notebook notebook =

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/ConfigStorage.java
Patch:
@@ -22,12 +22,9 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
-import org.apache.zeppelin.helium.HeliumConf;
 import org.apache.zeppelin.interpreter.InterpreterInfoSaving;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.notebook.NotebookAuthorizationInfoSaving;
-import org.apache.zeppelin.user.Credentials;
-import org.apache.zeppelin.user.CredentialsInfoSaving;
 import org.apache.zeppelin.util.ReflectionUtils;
 
 import java.io.IOException;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -70,7 +70,7 @@ public void setUp() throws Exception {
             interpreterFactory,
             interpreterSettingManager,
             search,
-            new Credentials(false, null, null));
+            new Credentials());
 
     heliumAppFactory = new HeliumApplicationFactory(notebook, null);
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -97,7 +97,7 @@ public void setUp() throws Exception {
     noteManager = new NoteManager(notebookRepo);
     authorizationService = new AuthorizationService(noteManager, conf);
 
-    credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath(), null);
+    credentials = new Credentials(conf);
     notebook = new Notebook(conf, authorizationService, notebookRepo, noteManager, interpreterFactory, interpreterSettingManager, search,
             credentials, null);
     notebook.setParagraphJobListener(this);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -102,7 +102,7 @@ public void setUp() throws Exception {
     notebookRepoSync = new NotebookRepoSync(conf);
     noteManager = new NoteManager(notebookRepoSync);
     authorizationService = new AuthorizationService(noteManager, conf);
-    credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath(), null);
+    credentials = new Credentials(conf);
     notebook = new Notebook(conf, authorizationService, notebookRepoSync, noteManager, factory, interpreterSettingManager, search, credentials, null);
     anonymous = new AuthenticationInfo("anonymous");
   }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/user/CredentialsTest.java
Patch:
@@ -27,7 +27,7 @@ public class CredentialsTest {
 
   @Test
   public void testDefaultProperty() throws IOException {
-    Credentials credentials = new Credentials(false, null, null);
+    Credentials credentials = new Credentials();
     UserCredentials userCredentials = new UserCredentials();
     UsernamePassword up1 = new UsernamePassword("user2", "password");
     userCredentials.putUsernamePassword("hive(vertica)", up1);

File: flink/src/main/java/org/apache/zeppelin/flink/sql/AbstractStreamSqlJob.java
Patch:
@@ -97,7 +97,7 @@ private static TableSchema removeTimeAttributes(TableSchema schema) {
 
   public InterpreterResult run(String st) throws IOException {
     Table table = stenv.sqlQuery(st);
-    String tableName = st + "_" + SQL_INDEX.getAndIncrement();
+    String tableName = "UnnamedTable_" + st + "_" + SQL_INDEX.getAndIncrement();
     return run(table, tableName);
   }
 

File: flink/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java
Patch:
@@ -110,7 +110,7 @@ StreamExecutionEnvironment getStreamExecutionEnvironment() {
   }
 
   StreamTableEnvironment getStreamTableEnvironment() {
-    return this.innerIntp.getStreamTableEnvironment();
+    return this.innerIntp.getStreamTableEnvironment("blink");
   }
 
   org.apache.flink.table.api.TableEnvironment getJavaBatchTableEnvironment(String planner) {
@@ -122,7 +122,7 @@ TableEnvironment getJavaStreamTableEnvironment(String planner) {
   }
 
   TableEnvironment getBatchTableEnvironment() {
-    return this.innerIntp.getBatchTableEnvironment();
+    return this.innerIntp.getBatchTableEnvironment("blink");
   }
 
   JobManager getJobManager() {

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -216,7 +216,7 @@ public void testZShow() throws InterpreterException, IOException {
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     context = getInterpreterContext();
     result = interpreter.interpret("z.show(data)", context);
-    assertEquals(InterpreterResult.Code.SUCCESS, result.code());
+    assertEquals(new String(context.out.toByteArray()), InterpreterResult.Code.SUCCESS, result.code());
     List<InterpreterResultMessage> resultMessages = context.out.toInterpreterResultMessage();
     assertEquals(InterpreterResult.Type.TABLE, resultMessages.get(0).getType());
     assertEquals("_1\t_2\n1\tjeff\n2\tandy\n3\tjames\n", resultMessages.get(0).getData());

File: flink/src/test/java/org/apache/zeppelin/flink/SqlInterpreterTest.java
Patch:
@@ -42,10 +42,8 @@
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
-import org.apache.zeppelin.interpreter.InterpreterOutputListener;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResultMessage;
-import org.apache.zeppelin.interpreter.InterpreterResultMessageOutput;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient;
 import org.junit.After;
 import org.junit.Before;
@@ -62,7 +60,8 @@
 import java.util.List;
 import java.util.Properties;
 
-import static org.apache.zeppelin.interpreter.InterpreterResult.*;
+import static org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import static org.apache.zeppelin.interpreter.InterpreterResult.Type;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
@@ -358,6 +357,7 @@ public void testInvalidSql() throws InterpreterException, IOException {
 
   protected InterpreterContext getInterpreterContext() {
     return InterpreterContext.builder()
+            .setParagraphId("paragraphId")
             .setInterpreterOut(new InterpreterOutput(null))
             .setAngularObjectRegistry(new AngularObjectRegistry("flink", null))
             .setIntpEventClient(mock(RemoteInterpreterEventClient.class))

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -637,8 +637,7 @@ public Properties getJavaProperties() {
     Properties jProperties = new Properties();
     Map<String, InterpreterProperty> iProperties = (Map<String, InterpreterProperty>) properties;
     for (Map.Entry<String, InterpreterProperty> entry : iProperties.entrySet()) {
-      if (entry.getValue().getValue() != null &&
-              !StringUtils.isBlank(entry.getValue().getValue().toString())) {
+      if (entry.getValue().getValue() != null) {
         jProperties.setProperty(entry.getKey().trim(),
             entry.getValue().getValue().toString().trim());
       }

File: flink/src/main/java/org/apache/zeppelin/flink/PyFlinkInterpreter.java
Patch:
@@ -119,7 +119,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) throws
       flinkInterpreter.createPlannerAgain();
       return super.interpret(st, context);
     } finally {
-      if (getPythonProcessLauncher().isRunning()) {
+      if (useIPython() || (!useIPython() && getPythonProcessLauncher().isRunning())) {
         InterpreterResult result = super.interpret("intp.resetClassLoaderInPythonThread()", context);
         if (result.code() != InterpreterResult.Code.SUCCESS) {
           LOGGER.warn("Fail to resetClassLoaderInPythonThread: " + result.toString());

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServerTest.java
Patch:
@@ -174,6 +174,8 @@ public void run() {
     Thread.sleep(1000);
     assertFalse(interpreter1.cancelled.get());
     server.cancel("session_1", Test1Interpreter.class.getName(), intpContext);
+    // Sleep 1 second, because cancel is async.
+    Thread.sleep(1000);
     assertTrue(interpreter1.cancelled.get());
 
     // getProgress

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -33,6 +33,7 @@
 import java.lang.reflect.Field;
 import java.net.URL;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -156,7 +157,7 @@ public abstract InterpreterResult interpret(String st,
   @ZeppelinApi
   public List<InterpreterCompletion> completion(String buf, int cursor,
       InterpreterContext interpreterContext) throws InterpreterException {
-    return null;
+    return Collections.emptyList();
   }
 
   /**

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -637,7 +637,8 @@ public Properties getJavaProperties() {
     Properties jProperties = new Properties();
     Map<String, InterpreterProperty> iProperties = (Map<String, InterpreterProperty>) properties;
     for (Map.Entry<String, InterpreterProperty> entry : iProperties.entrySet()) {
-      if (entry.getValue().getValue() != null) {
+      if (entry.getValue().getValue() != null &&
+              !StringUtils.isBlank(entry.getValue().getValue().toString())) {
         jProperties.setProperty(entry.getKey().trim(),
             entry.getValue().getValue().toString().trim());
       }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncher.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zeppelin.interpreter.launcher;
 
+import org.apache.commons.exec.environment.EnvironmentUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.interpreter.InterpreterOption;
@@ -90,7 +91,7 @@ public InterpreterClient launch(InterpreterLaunchContext context) throws IOExcep
   }
 
   public Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) throws IOException {
-    Map<String, String> env = new HashMap<>();
+    Map<String, String> env = EnvironmentUtils.getProcEnvironment();
     for (Map.Entry entry : context.getProperties().entrySet()) {
       String key = (String) entry.getKey();
       String value = (String) entry.getValue();

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -85,7 +85,6 @@
 import org.eclipse.jetty.server.session.SessionHandler;
 import org.eclipse.jetty.servlet.DefaultServlet;
 import org.eclipse.jetty.servlet.FilterHolder;
-import org.eclipse.jetty.servlet.ServletContextHandler;
 import org.eclipse.jetty.servlet.ServletHolder;
 import org.eclipse.jetty.util.ssl.SslContextFactory;
 import org.eclipse.jetty.util.thread.QueuedThreadPool;
@@ -441,7 +440,7 @@ private static void setupClusterManagerServer(ServiceLocator serviceLocator) {
   }
 
   private static SslContextFactory getSslContextFactory(ZeppelinConfiguration conf) {
-    SslContextFactory sslContextFactory = new SslContextFactory();
+    SslContextFactory.Server sslContextFactory = new SslContextFactory.Server();
 
     // Set keystore
     sslContextFactory.setKeyStorePath(conf.getKeyStorePath());

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -72,7 +72,7 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     properties.setProperty("spark.master", "local");
     properties.setProperty("spark.app.name", "test");
     properties.setProperty("zeppelin.spark.maxResult", "100");
-    properties.setProperty("zeppelin.spark.uiWebUrl", "fake_spark_weburl");
+    properties.setProperty("zeppelin.spark.uiWebUrl", "fake_spark_weburl/{{applicationId}}");
     // disable color output for easy testing
     properties.setProperty("zeppelin.spark.scala.color", "false");
     properties.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
@@ -180,7 +180,8 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     // spark job url is sent
     ArgumentCaptor<Map> onParaInfosReceivedArg = ArgumentCaptor.forClass(Map.class);
     verify(mockRemoteEventClient).onParaInfosReceived(onParaInfosReceivedArg.capture());
-    assertTrue(((String) onParaInfosReceivedArg.getValue().get("jobUrl")).startsWith("fake_spark_weburl"));
+    assertTrue(((String) onParaInfosReceivedArg.getValue().get("jobUrl")).startsWith("fake_spark_weburl/"
+            + interpreter.getJavaSparkContext().sc().applicationId()));
 
     // case class
     result = interpreter.interpret("val bankText = sc.textFile(\"bank.csv\")", getInterpreterContext());

File: flink/src/main/java/org/apache/zeppelin/flink/JobManager.java
Patch:
@@ -159,8 +159,9 @@ class FlinkJobProgressPoller extends Thread {
     @Override
     public void run() {
       while (!Thread.currentThread().isInterrupted() && running.get()) {
+        JsonNode rootNode = null;
         try {
-          JsonNode rootNode = Unirest.get(flinkWebUI + "/jobs/" + jobId.toString())
+          rootNode = Unirest.get(flinkWebUI + "/jobs/" + jobId.toString())
                   .asJson().getBody();
           JSONArray vertices = rootNode.getObject().getJSONArray("vertices");
           int totalTasks = 0;
@@ -195,7 +196,7 @@ public void run() {
             context.out.flush();
           }
         } catch (Exception e) {
-          LOGGER.error("Fail to poll flink job progress via rest api", e);
+          LOGGER.error("Fail to poll flink job progress via rest api, rest api: " + rootNode, e);
         }
       }
     }

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkBatchSqlInterpreterTest.java
Patch:
@@ -84,7 +84,7 @@ public void testSelect() throws InterpreterException, IOException {
     // select which use scala udf
     context = getInterpreterContext();
     result = sqlInterpreter.interpret("SELECT addOne(id) as add_one FROM source_table", context);
-    assertEquals(InterpreterResult.Code.SUCCESS, result.code());
+    assertEquals(new String(context.out.toByteArray()), InterpreterResult.Code.SUCCESS, result.code());
     resultMessages = context.out.toInterpreterResultMessage();
     assertEquals(1, resultMessages.size());
     assertEquals(InterpreterResult.Type.TABLE, resultMessages.get(0).getType());

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -146,7 +146,7 @@ public void testIpythonKernelCrash_shouldNotHangExecution()
     assertEquals(Code.ERROR, result.code());
     output = context.out.toInterpreterResultMessage().get(0);
     assertTrue(output.getData(),
-            output.getData().equals("Ipython kernel has been stopped. Please check logs. "
+            output.getData().contains("Ipython kernel has been stopped. Please check logs. "
         + "It might be because of an out of memory issue."));
   }
 

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelInterpreter.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.zeppelin.jupyter;
 
-import com.google.common.annotations.VisibleForTesting;
 import io.grpc.ManagedChannelBuilder;
 import org.apache.commons.exec.CommandLine;
 import org.apache.commons.exec.environment.EnvironmentUtils;
@@ -213,7 +212,6 @@ protected Map<String, String> setupKernelEnv() throws IOException {
     return EnvironmentUtils.getProcEnvironment();
   }
 
-  @VisibleForTesting
   public JupyterKernelProcessLauncher getKernelProcessLauncher() {
     return jupyterKernelProcessLauncher;
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -954,14 +954,14 @@ public enum ConfVars {
     ZEPPELIN_WEBSOCKET_MAX_TEXT_MESSAGE_SIZE("zeppelin.websocket.max.text.message.size", "10240000"),
     ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED("zeppelin.server.default.dir.allowed", false),
     ZEPPELIN_SERVER_XFRAME_OPTIONS("zeppelin.server.xframe.options", "SAMEORIGIN"),
-    ZEPPELIN_SERVER_JETTY_NAME("zeppelin.server.jetty.name", null),
+    ZEPPELIN_SERVER_JETTY_NAME("zeppelin.server.jetty.name", " "),
     ZEPPELIN_SERVER_JETTY_THREAD_POOL_MAX("zeppelin.server.jetty.thread.pool.max", 400),
     ZEPPELIN_SERVER_JETTY_THREAD_POOL_MIN("zeppelin.server.jetty.thread.pool.min", 8),
     ZEPPELIN_SERVER_JETTY_THREAD_POOL_TIMEOUT("zeppelin.server.jetty.thread.pool.timeout", 30),
     ZEPPELIN_SERVER_JETTY_REQUEST_HEADER_SIZE("zeppelin.server.jetty.request.header.size", 8192),
     ZEPPELIN_SERVER_AUTHORIZATION_HEADER_CLEAR("zeppelin.server.authorization.header.clear", true),
     ZEPPELIN_SERVER_STRICT_TRANSPORT("zeppelin.server.strict.transport", "max-age=631138519"),
-    ZEPPELIN_SERVER_X_XSS_PROTECTION("zeppelin.server.xxss.protection", "1"),
+    ZEPPELIN_SERVER_X_XSS_PROTECTION("zeppelin.server.xxss.protection", "1; mode=block"),
     ZEPPELIN_SERVER_X_CONTENT_TYPE_OPTIONS("zeppelin.server.xcontent.type.options", "nosniff"),
 
     ZEPPELIN_SERVER_KERBEROS_KEYTAB("zeppelin.server.kerberos.keytab", ""),

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -422,8 +422,8 @@ private void createConnectionPool(String url, String user, String propertyKey,
     if (driverClass != null && (driverClass.equals("com.facebook.presto.jdbc.PrestoDriver")
             || driverClass.equals("io.prestosql.jdbc.PrestoDriver"))) {
       // Only add valid properties otherwise presto won't work.
-      for (Object key : properties.keySet()) {
-        if (!PRESTO_PROPERTIES.contains(key.toString())) {
+      for (String key : properties.stringPropertyNames()) {
+        if (!PRESTO_PROPERTIES.contains(key)) {
           properties.remove(key);
         }
       }

File: zeppelin-plugins/launcher/flink/src/main/java/org/apache/zeppelin/interpreter/launcher/FlinkInterpreterLauncher.java
Patch:
@@ -40,10 +40,10 @@ public Map<String, String> buildEnvFromProperties(InterpreterLaunchContext conte
     }
     File flinkHomeFile = new File(flinkHome);
     if (!flinkHomeFile.exists()) {
-      throw new IOException(String.format("FLINK_HOME {} doesn't exist", flinkHome));
+      throw new IOException(String.format("FLINK_HOME %s doesn't exist", flinkHome));
     }
     if (flinkHomeFile.isFile()) {
-      throw new IOException(String.format("FLINK_HOME {} is a file, but should be directory",
+      throw new IOException(String.format("FLINK_HOME %s is a file, but should be directory",
               flinkHome));
     }
     envs.put("FLINK_CONF_DIR", flinkHome + "/conf");

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/search/LuceneSearch.java
Patch:
@@ -245,7 +245,7 @@ private void updateDoc(String noteId, String noteName, Paragraph p) throws IOExc
       indexWriter.updateDocument(new Term(ID_FIELD, id), doc);
       indexWriter.commit();
     } catch (IOException e) {
-      logger.error("Failed to updaet index of notebook {}", noteId, e);
+      logger.error("Failed to update index of notebook {}", noteId, e);
     }
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -112,7 +112,7 @@ public InterpreterResult internalInterpret(String st, InterpreterContext context
         builder.append(ExceptionUtils.getStackTrace(e));
       } else {
         logger.error("Invocation target exception", e);
-        String msg = e.getCause().getMessage()
+        String msg = e.getMessage()
                 + "\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace";
         builder.append(msg);
       }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -63,7 +63,7 @@ public Map<String, String> buildEnvFromProperties(InterpreterLaunchContext conte
     Properties sparkProperties = new Properties();
     String sparkMaster = getSparkMaster(properties);
     for (String key : properties.stringPropertyNames()) {
-      if (RemoteInterpreterUtils.isEnvString(key)) {
+      if (RemoteInterpreterUtils.isEnvString(key) && !StringUtils.isBlank(properties.getProperty(key))) {
         env.put(key, properties.getProperty(key));
       }
       if (isSparkConf(key, properties.getProperty(key))) {
@@ -171,7 +171,7 @@ && getDeployMode().equals("cluster")) {
     // we also fallback to zeppelin-env.sh if it is not specified in interpreter setting.
     for (String envName : new String[]{"SPARK_HOME", "SPARK_CONF_DIR", "HADOOP_CONF_DIR"})  {
       String envValue = getEnv(envName);
-      if (envValue != null) {
+      if (!StringUtils.isBlank(envValue)) {
         env.put(envName, envValue);
       }
     }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncherTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Properties;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 public class SparkInterpreterLauncherTest {
@@ -88,6 +89,7 @@ public void testLocalMode() throws IOException {
     SparkInterpreterLauncher launcher = new SparkInterpreterLauncher(zConf, null);
     Properties properties = new Properties();
     properties.setProperty("SPARK_HOME", sparkHome);
+    properties.setProperty("ENV_1", "");
     properties.setProperty("property_1", "value_1");
     properties.setProperty("master", "local[*]");
     properties.setProperty("spark.files", "file_1");
@@ -104,6 +106,7 @@ public void testLocalMode() throws IOException {
     assertEquals(zConf.getInterpreterRemoteRunnerPath(), interpreterProcess.getInterpreterRunner());
     assertTrue(interpreterProcess.getEnv().size() >= 2);
     assertEquals(sparkHome, interpreterProcess.getEnv().get("SPARK_HOME"));
+    assertFalse(interpreterProcess.getEnv().containsKey("ENV_1"));
     assertEquals(InterpreterLauncher.escapeSpecialCharacter(" --master local[*] --conf spark.files=file_1 --conf spark.jars=jar_1"),
             interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -48,7 +48,7 @@ public synchronized Client getClient() throws Exception {
       clientFactory = new ClientFactory(getHost(), getPort());
       clientPool = new GenericObjectPool<>(clientFactory);
     }
-    return clientPool.borrowObject();
+    return clientPool.borrowObject(5_000);
   }
 
   public void shutdown() {

File: flink/src/main/java/org/apache/zeppelin/flink/sql/AppendStreamSqlJob.java
Patch:
@@ -90,8 +90,8 @@ protected String buildResult() {
 
     // sort it by the first column
     materializedTable.sort((r1, r2) -> {
-      String f1 = r1.getField(0).toString();
-      String f2 = r2.getField(0).toString();
+      String f1 = TableDataUtils.normalizeColumn(StringUtils.arrayAwareToString(r1.getField(0)));
+      String f2 = TableDataUtils.normalizeColumn(StringUtils.arrayAwareToString(r2.getField(0)));
       return f1.compareTo(f2);
     });
 

File: flink/src/main/java/org/apache/zeppelin/flink/sql/UpdateStreamSqlJob.java
Patch:
@@ -75,7 +75,7 @@ protected String buildResult() {
     StringBuilder builder = new StringBuilder();
     builder.append("%table\n");
     for (int i = 0; i < schema.getFieldCount(); ++i) {
-      String field = schema.getFieldName(i).get();
+      String field = schema.getFieldNames()[i];
       builder.append(field);
       if (i != (schema.getFieldCount() - 1)) {
         builder.append("\t");
@@ -84,8 +84,8 @@ protected String buildResult() {
     builder.append("\n");
     // sort it by the first column
     materializedTable.sort((r1, r2) -> {
-      String f1 = r1.getField(0).toString();
-      String f2 = r2.getField(0).toString();
+      String f1 = TableDataUtils.normalizeColumn(StringUtils.arrayAwareToString(r1.getField(0)));
+      String f2 = TableDataUtils.normalizeColumn(StringUtils.arrayAwareToString(r2.getField(0)));
       return f1.compareTo(f2);
     });
     for (Row row : materializedTable) {

File: file/src/main/java/org/apache/zeppelin/file/HDFSFileInterpreter.java
Patch:
@@ -21,7 +21,7 @@
 import com.google.gson.Gson;
 
 import com.google.gson.annotations.SerializedName;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;

File: flink/src/main/java/org/apache/zeppelin/flink/FlinkStreamSqlInterpreter.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.zeppelin.flink;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.flink.table.api.config.ExecutionConfigOptions;
 import org.apache.zeppelin.flink.sql.UpdateStreamSqlJob;
 import org.apache.zeppelin.flink.sql.SingleRowStreamSqlJob;

File: flink/src/main/java/org/apache/zeppelin/flink/JobManager.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.mashape.unirest.http.JsonNode;
 import com.mashape.unirest.http.Unirest;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.flink.api.common.JobID;
 import org.apache.flink.core.execution.JobClient;
 import org.apache.zeppelin.interpreter.InterpreterContext;

File: geode/src/main/java/org/apache/zeppelin/geode/GeodeOqlInterpreter.java
Patch:
@@ -14,7 +14,7 @@
  */
 package org.apache.zeppelin.geode;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.geode.cache.client.ClientCache;
 import org.apache.geode.cache.client.ClientCacheFactory;
 import org.apache.geode.cache.query.QueryService;

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/SqlCompleterTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.google.common.base.Joiner;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;

File: ksql/src/main/java/org/apache/zeppelin/ksql/KSQLInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;

File: ksql/src/main/java/org/apache/zeppelin/ksql/KSQLRestService.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zeppelin.ksql;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.io.IOException;
 import java.util.Arrays;

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java
Patch:
@@ -21,8 +21,8 @@
 import com.google.gson.GsonBuilder;
 import com.google.gson.annotations.SerializedName;
 
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.http.auth.AuthSchemeProvider;
 import org.apache.http.auth.AuthScope;
 import org.apache.http.auth.Credentials;
@@ -730,7 +730,7 @@ private String callRestAPI(String targetURL, String method, String jsonData)
           throw new SessionNotFoundException(cause.getResponseBodyAsString());
         }
         throw new LivyException(cause.getResponseBodyAsString() + "\n"
-            + ExceptionUtils.getFullStackTrace(ExceptionUtils.getRootCause(e)));
+            + ExceptionUtils.getStackTrace(ExceptionUtils.getRootCause(e)));
       }
       if (e instanceof HttpServerErrorException) {
         HttpServerErrorException errorException = (HttpServerErrorException) e;

File: livy/src/main/java/org/apache/zeppelin/livy/LivySharedInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.livy;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.livy;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
@@ -32,7 +32,7 @@
 import java.util.List;
 import java.util.Properties;
 
-import static org.apache.commons.lang.StringEscapeUtils.escapeJavaScript;
+import static org.apache.commons.lang3.StringEscapeUtils.escapeEcmaScript;
 
 /**
  * Livy SparkSQL Interpreter for Zeppelin.
@@ -191,7 +191,7 @@ protected List<String> parseSQLOutput(String output) {
         List<String> cells = new ArrayList<>();
         for (Pair pair : pairs) {
           // strip the blank space around the cell and escape the string
-          cells.add(escapeJavaScript(line.substring(pair.start, pair.end)).trim());
+          cells.add(escapeEcmaScript(line.substring(pair.start, pair.end)).trim());
         }
         rows.add(StringUtils.join(cells, "\t"));
       }

File: mongodb/src/main/java/org/apache/zeppelin/mongodb/MongoDbInterpreter.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.commons.exec.Executor;
 import org.apache.commons.exec.PumpStreamHandler;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterResult;

File: mongodb/src/test/java/org/apache/zeppelin/mongodb/MongoDbInterpreterTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Scanner;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
 import org.apache.zeppelin.interpreter.InterpreterOutputListener;

File: neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jConnectionManager.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.graph.neo4j;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.neo4j.driver.v1.AuthToken;
 import org.neo4j.driver.v1.AuthTokens;
 import org.neo4j.driver.v1.Config;

File: neo4j/src/main/java/org/apache/zeppelin/graph/neo4j/Neo4jCypherInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.graph.neo4j;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.neo4j.driver.internal.types.InternalTypeSystem;
 import org.neo4j.driver.internal.util.Iterables;
 import org.neo4j.driver.v1.Record;

File: pig/src/main/java/org/apache/zeppelin/pig/BasePigInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.pig;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.pig.PigServer;
 import org.apache.pig.backend.BackendException;

File: pig/src/main/java/org/apache/zeppelin/pig/PigInterpreter.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zeppelin.pig;
 
 import org.apache.commons.io.output.ByteArrayOutputStream;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.pig.PigServer;
 import org.apache.pig.impl.logicalLayer.FrontendException;
 import org.apache.pig.tools.pigscript.parser.ParseException;

File: pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.apache.zeppelin.pig;
 
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.pig.PigServer;
 import org.apache.pig.data.Tuple;
 import org.apache.pig.impl.logicalLayer.FrontendException;

File: pig/src/main/java/org/apache/zeppelin/pig/PigUtils.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zeppelin.pig;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.jupyter.proto.ExecuteRequest;

File: python/src/main/java/org/apache/zeppelin/python/PythonCondaInterpreter.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.zeppelin.python;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.commons.exec.ExecuteException;
 import org.apache.commons.exec.environment.EnvironmentUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;

File: rlang/src/main/java/org/apache/zeppelin/r/IRInterpreter.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zeppelin.r;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;

File: rlang/src/main/java/org/apache/zeppelin/r/ShinyInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.r;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
 import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;

File: sap/src/main/java/org/apache/zeppelin/sap/UniverseInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.sap;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
 import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;

File: sap/src/main/java/org/apache/zeppelin/sap/universe/UniverseClient.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.zeppelin.sap.universe;
 
 import com.sun.org.apache.xpath.internal.NodeSet;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.config.RequestConfig;

File: sap/src/main/java/org/apache/zeppelin/sap/universe/UniverseCompleter.java
Patch:
@@ -19,7 +19,7 @@
 
 import jline.console.completer.ArgumentCompleter.ArgumentList;
 import jline.console.completer.ArgumentCompleter.WhitespaceArgumentDelimiter;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.completer.CachedCompleter;
 import org.apache.zeppelin.completer.CompletionType;
 import org.apache.zeppelin.completer.StringsCompleter;

File: sap/src/main/java/org/apache/zeppelin/sap/universe/UniverseNodeInfoCompleter.java
Patch:
@@ -18,7 +18,7 @@
 
 import jline.console.completer.Completer;
 import jline.internal.Preconditions;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.*;
 

File: sap/src/main/java/org/apache/zeppelin/sap/universe/UniverseQuery.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.sap.universe;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.OptionalInt;
 

File: sap/src/main/java/org/apache/zeppelin/sap/universe/UniverseUtil.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zeppelin.sap.universe;
 
 import jline.console.completer.ArgumentCompleter.WhitespaceArgumentDelimiter;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.*;
 

File: sap/src/test/java/org/apache/zeppelin/sap/universe/UniverseCompleterTest.java
Patch:
@@ -14,7 +14,7 @@
  */
 package org.apache.zeppelin.sap.universe;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.completer.CachedCompleter;
 import org.junit.Before;
 import org.junit.Test;

File: shell/src/main/java/org/apache/zeppelin/shell/terminal/service/TerminalService.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.gson.Gson;
 import com.pty4j.PtyProcess;
 import com.pty4j.WinSize;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.shell.terminal.helper.IOHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.spark;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.spark.SparkConf;
 import org.apache.spark.api.java.JavaSparkContext;
 import org.apache.spark.sql.SQLContext;

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.spark;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.spark.SparkConf;
 import org.apache.spark.SparkContext;
 import org.apache.spark.api.java.JavaSparkContext;

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.spark;
 
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.spark.SparkContext;
 import org.apache.spark.sql.SQLContext;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;

File: submarine/src/main/java/org/apache/zeppelin/submarine/SubmarineInterpreter.java
Patch:
@@ -15,7 +15,7 @@
 package org.apache.zeppelin.submarine;
 
 import com.google.common.annotations.VisibleForTesting;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.display.ui.OptionInput.ParamOption;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;

File: submarine/src/main/java/org/apache/zeppelin/submarine/commons/SubmarineUI.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import com.hubspot.jinjava.Jinjava;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResultMessageOutput;

File: submarine/src/main/java/org/apache/zeppelin/submarine/commons/SubmarineUtils.java
Patch:
@@ -14,7 +14,7 @@
 
 package org.apache.zeppelin.submarine.commons;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.Path;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.interpreter.InterpreterContext;

File: submarine/src/main/java/org/apache/zeppelin/submarine/hadoop/HdfsClient.java
Patch:
@@ -14,7 +14,7 @@
 
 package org.apache.zeppelin.submarine.hadoop;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
@@ -302,7 +302,7 @@ public String saveParagraphToFiles(String noteId, List<ParagraphInfo> paragraphI
     for (int i = 0; i < paragraphInfos.size(); i++) {
       ParagraphInfo paragraph = paragraphInfos.get(i);
       String paragraphTitle = paragraph.getParagraphTitle();
-      if (org.apache.commons.lang.StringUtils.isEmpty(paragraphTitle)) {
+      if (org.apache.commons.lang3.StringUtils.isEmpty(paragraphTitle)) {
         String message = "WARN: The title of the [" + i
             + "] paragraph is empty and was not submitted to HDFS.\n";
         LOGGER.warn(message);

File: submarine/src/main/java/org/apache/zeppelin/submarine/hadoop/YarnClient.java
Patch:
@@ -39,7 +39,7 @@
 import com.google.gson.JsonPrimitive;
 import com.google.gson.JsonSyntaxException;
 import com.google.gson.reflect.TypeToken;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.UserGroupInformation;
 

File: submarine/src/main/java/org/apache/zeppelin/submarine/job/SubmarineJob.java
Patch:
@@ -15,7 +15,7 @@
 package org.apache.zeppelin.submarine.job;
 
 import com.google.common.annotations.VisibleForTesting;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.Path;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.submarine.hadoop.HdfsClient;

File: submarine/src/main/java/org/apache/zeppelin/submarine/job/thread/JobRunThread.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.commons.exec.LogOutputStream;
 import org.apache.commons.exec.PumpStreamHandler;
 import org.apache.commons.io.Charsets;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.thrift.ParagraphInfo;
 import org.apache.zeppelin.submarine.hadoop.HdfsClient;

File: submarine/src/main/java/org/apache/zeppelin/submarine/job/thread/TensorboardRunThread.java
Patch:
@@ -24,7 +24,7 @@
 import org.apache.commons.exec.LogOutputStream;
 import org.apache.commons.exec.PumpStreamHandler;
 import org.apache.commons.io.Charsets;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.submarine.commons.SubmarineConstants;
 import org.apache.zeppelin.submarine.commons.SubmarineUI;
 import org.apache.zeppelin.submarine.commons.SubmarineUtils;

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/InterpreterModeActionsIT.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.zeppelin.integration;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.CommandExecutor;
 import org.apache.zeppelin.ProcessData;
 import org.apache.zeppelin.AbstractZeppelinIT;

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zeppelin.integration;
 
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.AbstractZeppelinIT;
 import org.apache.zeppelin.WebDriverManager;
 import org.apache.zeppelin.ZeppelinITUtils;

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/PersonalizeActionsIT.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.zeppelin.integration;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.AbstractZeppelinIT;
 import org.apache.zeppelin.integration.AuthenticationIT;
 import org.apache.zeppelin.WebDriverManager;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterManager.java
Patch:
@@ -78,7 +78,7 @@
 import io.atomix.utils.net.Address;
 import io.atomix.utils.serializer.Namespace;
 import io.atomix.utils.serializer.Serializer;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.cluster.meta.ClusterMeta;
 import org.apache.zeppelin.cluster.meta.ClusterMetaEntity;
 import org.apache.zeppelin.cluster.meta.ClusterMetaOperation;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterManagerServer.java
Patch:
@@ -31,7 +31,7 @@
 import io.atomix.protocols.raft.storage.RaftStorage;
 import io.atomix.storage.StorageLevel;
 import io.atomix.utils.net.Address;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.cluster.event.ClusterEventListener;
 import org.apache.zeppelin.cluster.meta.ClusterMeta;
 import org.apache.zeppelin.cluster.protocol.RaftServerMessagingProtocol;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/meta/ClusterMeta.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.zeppelin.cluster.meta;
 
 import com.google.gson.Gson;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.commons.configuration.XMLConfiguration;
 import org.apache.commons.configuration.tree.ConfigurationNode;
 import org.apache.commons.exec.environment.EnvironmentUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.util.Util;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Booter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.dep;
 
-import org.apache.commons.lang.Validate;
+import org.apache.commons.lang3.Validate;
 import org.apache.maven.repository.internal.MavenRepositorySystemSession;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.List;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.sonatype.aether.RepositoryException;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Repository.java
Patch:
@@ -16,7 +16,7 @@
  */
 
 package org.apache.zeppelin.dep;
-import static org.apache.commons.lang.StringUtils.isNotBlank;
+import static org.apache.commons.lang3.StringUtils.isNotBlank;
 
 import com.google.gson.Gson;
 import org.apache.zeppelin.common.JsonSerializable;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/Input.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.display;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.display.ui.CheckBox;
 import org.apache.zeppelin.display.ui.OptionInput;
 import org.apache.zeppelin.display.ui.OptionInput.ParamOption;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.zeppelin.interpreter;
 
 
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.reflect.FieldUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.reflect.FieldUtils;
 import org.apache.zeppelin.annotation.Experimental;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutput.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.zeppelin.interpreter;
 
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.thrift.TException;
 import org.apache.thrift.protocol.TBinaryProtocol;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.interpreter.remote;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.thrift.transport.TServerSocket;
 import org.apache.thrift.transport.TTransportException;
 import org.slf4j.Logger;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/util/ProcessLauncher.java
Patch:
@@ -24,8 +24,8 @@
 import org.apache.commons.exec.ExecuteWatchdog;
 import org.apache.commons.exec.LogOutputStream;
 import org.apache.commons.exec.PumpStreamHandler;
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.scheduler;
 
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -195,9 +195,9 @@ private String getJobExceptionStack(Throwable e) {
     }
     Throwable cause = ExceptionUtils.getRootCause(e);
     if (cause != null) {
-      return ExceptionUtils.getFullStackTrace(cause);
+      return ExceptionUtils.getStackTrace(cause);
     } else {
-      return ExceptionUtils.getFullStackTrace(e);
+      return ExceptionUtils.getStackTrace(e);
     }
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/user/AuthenticationInfo.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.common.JsonSerializable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/Util.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.util;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.io.IOException;
 import java.util.Properties;

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelClient.java
Patch:
@@ -20,7 +20,7 @@
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;
 import io.grpc.stub.StreamObserver;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResultMessageOutput;

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelInterpreter.java
Patch:
@@ -23,8 +23,8 @@
 import org.apache.commons.exec.environment.EnvironmentUtils;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.exception.ExceptionUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
 import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/ActiveDirectoryGroupRealm.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.zeppelin.realm;
 
 import java.util.LinkedHashMap;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.shiro.authc.AuthenticationException;
 import org.apache.shiro.authc.AuthenticationInfo;
 import org.apache.shiro.authc.AuthenticationToken;

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/LdapRealm.java
Patch:
@@ -216,7 +216,7 @@ protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token)
 
   protected void onInit() {
     super.onInit();
-    if (!org.apache.commons.lang.StringUtils.isEmpty(this.hadoopSecurityCredentialPath)
+    if (!org.apache.commons.lang3.StringUtils.isEmpty(this.hadoopSecurityCredentialPath)
         && getContextFactory() != null) {
       ((JndiLdapContextFactory) getContextFactory()).setSystemPassword(
           getSystemPassword(this.hadoopSecurityCredentialPath, keystorePass));
@@ -238,7 +238,7 @@ static String getSystemPassword(String hadoopSecurityCredentialPath,
     } catch (IOException e) {
       throw new ShiroException("Error from getting credential entry from keystore", e);
     }
-    if (org.apache.commons.lang.StringUtils.isEmpty(password)) {
+    if (org.apache.commons.lang3.StringUtils.isEmpty(password)) {
       throw new ShiroException("Error getting SystemPassword from the provided keystore:"
           + keystorePass + ", in path:" + hadoopSecurityCredentialPath);
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/AdminRestApi.java
Patch:
@@ -26,7 +26,7 @@
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
 import javax.ws.rs.QueryParam;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.rest.message.LoggerRequest;
 import org.apache.zeppelin.service.AdminService;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/HeliumRestApi.java
Patch:
@@ -23,7 +23,7 @@
 import javax.inject.Inject;
 import javax.inject.Singleton;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.common.collect.Maps;
 import javax.inject.Inject;
 import javax.inject.Singleton;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.dep.Repository;
 import org.apache.zeppelin.interpreter.InterpreterException;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRepoRestApi.java
Patch:
@@ -22,7 +22,7 @@
 
 import javax.inject.Inject;
 import javax.inject.Singleton;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.service.AuthenticationService;
 import org.apache.zeppelin.service.ServiceContext;
 import org.slf4j.Logger;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/NotebookRepoSettingsRequest.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.google.gson.Gson;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.Collections;
 import java.util.Map;

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -32,7 +32,7 @@
 import javax.servlet.DispatcherType;
 import javax.servlet.ServletContextEvent;
 import javax.servlet.ServletContextListener;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.directory.api.util.Strings;
 import org.apache.shiro.web.env.EnvironmentLoaderListener;
 import org.apache.shiro.web.servlet.ShiroFilter;

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -35,7 +35,7 @@
 import javax.inject.Inject;
 
 import java.util.stream.Collectors;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.AngularObjectRegistry;

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/ConnectionManager.java
Patch:
@@ -22,7 +22,7 @@
 import com.google.common.collect.Sets;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.display.GUI;
 import org.apache.zeppelin.display.Input;

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -39,7 +39,7 @@
 import javax.inject.Inject;
 import javax.inject.Provider;
 import javax.servlet.http.HttpServletRequest;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.thrift.TException;
 import org.apache.zeppelin.cluster.ClusterManagerServer;

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookSocket.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.zeppelin.socket;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.eclipse.jetty.websocket.api.Session;
 import org.eclipse.jetty.websocket.api.WebSocketAdapter;
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/configuration/RequestHeaderSizeTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.apache.commons.httpclient.HttpClient;
 import org.apache.commons.httpclient.methods.GetMethod;
-import org.apache.commons.lang.RandomStringUtils;
+import org.apache.commons.lang3.RandomStringUtils;
 import org.eclipse.jetty.http.HttpStatus;
 import org.junit.After;
 import org.junit.Before;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRepoRestApiTest.java
Patch:
@@ -26,7 +26,7 @@
 
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.apache.commons.httpclient.methods.PutMethod;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.BeforeClass;

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.stream.IntStream;
 
 import com.google.common.io.Files;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.Interpreter.FormType;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java
Patch:
@@ -55,7 +55,7 @@
 import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.log4j.Appender;
 import org.apache.log4j.PatternLayout;
 import org.apache.log4j.WriterAppender;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumOnlineRegistry.java
Patch:
@@ -19,7 +19,7 @@
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.http.HttpHost;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.config.RequestConfig;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.interpreter;
 
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.base.Preconditions;
 import javax.inject.Inject;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -31,7 +31,7 @@
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonWriter;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.dep.Dependency;
 import org.apache.zeppelin.dep.DependencyResolver;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -32,8 +32,8 @@
 import java.util.regex.Pattern;
 import javax.inject.Inject;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.ArrayUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.cluster.ClusterManagerServer;
 import org.apache.zeppelin.cluster.event.ClusterEvent;
 import org.apache.zeppelin.cluster.event.ClusterEventListener;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/SessionConfInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.interpreter;
 
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncher.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.zeppelin.interpreter.launcher;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.interpreter.InterpreterOption;
 import org.apache.zeppelin.interpreter.InterpreterRunner;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.interpreter.recovery;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.fs.Path;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.interpreter.InterpreterSetting;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.commons.exec.CommandLine;
 import org.apache.commons.exec.ExecuteException;
 import org.apache.commons.exec.environment.EnvironmentUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.yarn.util.ConverterUtils;
 import org.apache.zeppelin.interpreter.YarnAppMonitor;
 import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/AuthorizationService.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.common.collect.Sets;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.cluster.ClusterManagerServer;
 import org.apache.zeppelin.cluster.event.ClusterEvent;
 import org.apache.zeppelin.cluster.event.ClusterEventListener;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java
Patch:
@@ -1,6 +1,6 @@
 package org.apache.zeppelin.notebook;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -23,7 +23,7 @@
 import com.google.gson.FieldAttributes;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.common.JsonSerializable;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.display.AngularObject;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -31,8 +31,8 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.zeppelin.common.JsonSerializable;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.AngularObjectRegistry;
@@ -77,7 +77,7 @@ public class Paragraph extends JobWithProgressPoller<InterpreterResult> implemen
   private static Logger LOGGER = LoggerFactory.getLogger(Paragraph.class);
   private static Pattern REPL_PATTERN =
       Pattern.compile("(\\s*)%([\\w\\.]+)(\\(.*?\\))?.*", Pattern.DOTALL);
-  
+
   private String title;
   // text is composed of intpText and scriptText.
   private String text;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ParagraphTextParser.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.notebook;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.util.HashMap;
 import java.util.Map;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoWithSettings.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Collections;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * Representation of a notebook repo with settings. This is mostly a Wrapper around notebook repo

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoWithVersionControl.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.notebook.repo;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.NoteInfo;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/OldNotebookRepoWithVersionControl.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.notebook.repo;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.user.AuthenticationInfo;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/OldVFSNotebookRepo.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zeppelin.notebook.repo;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.vfs2.FileContent;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemManager;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 import java.util.Map;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.commons.vfs2.FileObject;
 import org.apache.commons.vfs2.FileSystemManager;
 import org.apache.commons.vfs2.NameScope;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/model/UserSessionContainer.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * Simple and yet dummy container for zeppelinhub session.

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/model/UserTokenContainer.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.rest.ZeppelinhubRestApiHandler;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/rest/HttpProxyClient.java
Patch:
@@ -26,7 +26,7 @@
 import javax.net.ssl.SSLContext;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.http.HttpHost;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpDelete;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/rest/ZeppelinhubRestApiHandler.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.concurrent.TimeoutException;
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.http.client.methods.HttpDelete;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpPost;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinhubClient.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.ZeppelinhubWebsocket;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.protocol.ZeppelinHubOp;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.protocol.ZeppelinhubMessage;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/listener/WatcherWebsocket.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinClient;
 import org.apache.zeppelin.notebook.socket.Message;
 import org.apache.zeppelin.notebook.socket.Message.OP;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/protocol/ZeppelinhubMessage.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.common.JsonSerializable;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.Client;
 import org.apache.zeppelin.notebook.socket.Message;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/session/ZeppelinhubSession.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.session;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.eclipse.jetty.websocket.api.Session;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/utils/ZeppelinhubUtils.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.HashMap;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.model.UserTokenContainer;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.ZeppelinhubClient;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.protocol.ZeppelinHubOp;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.interpreter.remote;
 
-import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.apache.thrift.transport.TTransportException;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.display.AngularObjectRegistry;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import com.google.common.truth.Truth;
 import org.apache.commons.io.FileUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.apache.zeppelin.interpreter.InterpreterFactory;

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterEventTest.java
Patch:
@@ -86,7 +86,7 @@ public class ClusterEventTest extends ZeppelinServerMock {
 
   private static Notebook notebook;
   private static NotebookServer notebookServer;
-  private static SchedulerService schedulerService;
+  private static QuartzSchedulerService schedulerService;
   private static NotebookService notebookService;
   private static AuthorizationService authorizationService;
   private HttpServletRequest mockRequest;
@@ -103,6 +103,7 @@ public static void init() throws Exception {
     authorizationService = TestUtils.getInstance(AuthorizationService.class);
 
     schedulerService = new QuartzSchedulerService(zconf, notebook);
+    schedulerService.waitForFinishInit();
     notebookServer = spy(NotebookServer.getInstance());
     notebookService = new NotebookService(notebook, authorizationService, zconf, schedulerService);
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -130,7 +130,8 @@ public void setUp() throws Exception {
             credentials,
             null);
 
-    SchedulerService schedulerService = new QuartzSchedulerService(zeppelinConfiguration, notebook);
+    QuartzSchedulerService schedulerService = new QuartzSchedulerService(zeppelinConfiguration, notebook);
+    schedulerService.waitForFinishInit();
     notebookService =
         new NotebookService(
             notebook, authorizationService, zeppelinConfiguration, schedulerService);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/scheduler/NoSchedulerService.java
Patch:
@@ -22,8 +22,8 @@
 
 public class NoSchedulerService implements SchedulerService {
   @Override
-  public void refreshCron(String noteId) {
-    // Do nothing
+  public boolean refreshCron(String noteId) {
+    return false;
   }
 
   @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/scheduler/SchedulerService.java
Patch:
@@ -20,6 +20,6 @@
 import java.util.Set;
 
 public interface SchedulerService {
-  void refreshCron(String noteId);
+  boolean refreshCron(String noteId);
   Set<?> getJobs();
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -42,6 +42,7 @@ public void setUp() throws Exception {
     interpreterDir = new File(zeppelinHome, "interpreter_" + getClass().getSimpleName());
     confDir = new File(zeppelinHome, "conf_" + getClass().getSimpleName());
     notebookDir = new File(zeppelinHome, "notebook_" + getClass().getSimpleName());
+    FileUtils.deleteDirectory(notebookDir);
 
     interpreterDir.mkdirs();
     confDir.mkdirs();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -83,7 +83,7 @@ public class NotebookTest extends AbstractInterpreterTest implements ParagraphJo
   private Credentials credentials;
   private AuthenticationInfo anonymous = AuthenticationInfo.ANONYMOUS;
   private StatusChangedListener afterStatusChangedListener;
-  private SchedulerService schedulerService;
+  private QuartzSchedulerService schedulerService;
 
   @Before
   public void setUp() throws Exception {
@@ -102,6 +102,7 @@ public void setUp() throws Exception {
             credentials, null);
     notebook.setParagraphJobListener(this);
     schedulerService = new QuartzSchedulerService(conf, notebook);
+    schedulerService.waitForFinishInit();
   }
 
   @After

File: groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java
Patch:
@@ -18,7 +18,6 @@
 
 import groovy.lang.Closure;
 import groovy.xml.MarkupBuilder;
-import org.apache.thrift.TException;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.AngularObjectRegistry;
@@ -240,7 +239,7 @@ public Object angular(String name) {
   }
 
   @SuppressWarnings("unchecked")
-  public void angularBind(String name, Object o, String noteId) throws TException {
+  public void angularBind(String name, Object o, String noteId) {
     z.angularBind(name, o, noteId);
   }
 
@@ -251,7 +250,7 @@ public void angularBind(String name, Object o, String noteId) throws TException
    * @param name name of the variable
    * @param o value
    */
-  public void angularBind(String name, Object o) throws TException {
+  public void angularBind(String name, Object o) {
     angularBind(name, o, interpreterContext.getNoteId());
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -117,7 +117,7 @@ public void setUp() throws Exception {
     SearchService searchService = new LuceneSearch(zeppelinConfiguration);
     Credentials credentials = new Credentials(false, null, null);
     NoteManager noteManager = new NoteManager(notebookRepo);
-    AuthorizationService authorizationService = new AuthorizationService(zeppelinConfiguration);
+    AuthorizationService authorizationService = new AuthorizationService(noteManager, zeppelinConfiguration);
     Notebook notebook =
         new Notebook(
             zeppelinConfiguration,

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -814,7 +814,7 @@ public List<InterpreterCompletion> completion(String paragraphId,
   }
 
   public List<Paragraph> getParagraphs() {
-    return this.paragraphs;
+    return new ArrayList<>(this.paragraphs);
   }
 
   // TODO(zjffdu) how does this used ?

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -95,7 +95,7 @@ public void setUp() throws Exception {
     notebookRepo = new VFSNotebookRepo();
     notebookRepo.init(conf);
     noteManager = new NoteManager(notebookRepo);
-    authorizationService = new AuthorizationService(conf);
+    authorizationService = new AuthorizationService(noteManager, conf);
 
     credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath(), null);
     notebook = new Notebook(conf, authorizationService, notebookRepo, noteManager, interpreterFactory, interpreterSettingManager, search,

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -101,7 +101,7 @@ public void setUp() throws Exception {
     search = mock(SearchService.class);
     notebookRepoSync = new NotebookRepoSync(conf);
     noteManager = new NoteManager(notebookRepoSync);
-    authorizationService = new AuthorizationService(conf);
+    authorizationService = new AuthorizationService(noteManager, conf);
     credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath(), null);
     notebook = new Notebook(conf, authorizationService, notebookRepoSync, noteManager, factory, interpreterSettingManager, search, credentials, null);
     anonymous = new AuthenticationInfo("anonymous");

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -920,7 +920,7 @@ public enum ConfVars {
     ZEPPELIN_CONFIG_STORAGE_CLASS("zeppelin.config.storage.class",
         "org.apache.zeppelin.storage.LocalConfigStorage"),
     ZEPPELIN_DEP_LOCALREPO("zeppelin.dep.localrepo", "local-repo"),
-    ZEPPELIN_HELIUM_REGISTRY("zeppelin.helium.registry", "helium," + HELIUM_PACKAGE_DEFAULT_URL),
+    ZEPPELIN_HELIUM_REGISTRY("zeppelin.helium.registry", "helium"),
     ZEPPELIN_HELIUM_NODE_INSTALLER_URL("zeppelin.helium.node.installer.url",
             "https://nodejs.org/dist/"),
     ZEPPELIN_HELIUM_NPM_INSTALLER_URL("zeppelin.helium.npm.installer.url",

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/search/SearchService.java
Patch:
@@ -133,4 +133,6 @@ public void handleParagraphUpdateEvent(ParagraphUpdateEvent paragraphUpdateEvent
       e.printStackTrace();
     }
   }
+
+  public abstract void startRebuildIndex(List<Note> notes);
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -258,6 +258,7 @@ private void loadFromFile() throws IOException {
       // the user saved interpreter setting
       if (interpreterSettingTemplate != null) {
         savedInterpreterSetting.sortPropertiesByTemplate(interpreterSettingTemplate.getProperties());
+        savedInterpreterSetting.fillPropertyDescription(interpreterSettingTemplate.getProperties());
         // merge InterpreterDir, InterpreterInfo & InterpreterRunner
         savedInterpreterSetting.setInterpreterDir(
             interpreterSettingTemplate.getInterpreterDir());

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest.java
Patch:
@@ -492,7 +492,7 @@ public void pySparkTest() throws IOException {
   }
 
   @Test
-  public void zRunTest() throws IOException {
+  public void zRunTest() throws IOException, InterruptedException {
     Note note = null;
     Note note2 = null;
     try {
@@ -536,6 +536,8 @@ public void zRunTest() throws IOException {
       p3.setText("%spark println(\"END\")");
 
       note.run(p0.getId(), true);
+      // Sleep 1 second to ensure p3 start running
+      Thread.sleep(1000);
       waitForFinish(p3);
       assertEquals(Status.FINISHED, p3.getStatus());
       assertEquals("END\n", p3.getReturn().message().get(0).getData());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -257,6 +257,7 @@ private void loadFromFile() throws IOException {
       // InterpreterSetting, while InterpreterSetting is from interpreter.json which represent
       // the user saved interpreter setting
       if (interpreterSettingTemplate != null) {
+        savedInterpreterSetting.sortPropertiesByTemplate(interpreterSettingTemplate.getProperties());
         // merge InterpreterDir, InterpreterInfo & InterpreterRunner
         savedInterpreterSetting.setInterpreterDir(
             interpreterSettingTemplate.getInterpreterDir());

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/event/ClusterEvent.java
Patch:
@@ -31,6 +31,7 @@ public enum ClusterEvent {
   UPDATE_NOTE_PERMISSIONS,
   // CLUSTER_AUTH_EVENT_TOPIC
   SET_ROLES,
+  // (TODO) Consolidate the permission related events into one event
   SET_READERS_PERMISSIONS,
   SET_RUNNERS_PERMISSIONS,
   SET_WRITERS_PERMISSIONS,

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -394,7 +394,7 @@ public String getTrustStorePassword() {
   }
 
   public String getNotebookDir() {
-    return getString(ConfVars.ZEPPELIN_NOTEBOOK_DIR);
+    return getRelativeDir(ConfVars.ZEPPELIN_NOTEBOOK_DIR);
   }
 
   public String getNotebookRunId() {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -295,7 +295,7 @@ public Response putNotePermissions(@PathParam("noteId") String noteId, String re
             authorizationService.getReaders(noteId), authorizationService.getRunners(noteId),
             authorizationService.getWriters(noteId));
     AuthenticationInfo subject = new AuthenticationInfo(authenticationService.getPrincipal());
-    notebook.saveNote(note, subject);
+    authorizationService.saveNoteAuth(noteId, subject);
     notebookServer.broadcastNote(note);
     notebookServer.broadcastNoteList(subject, userAndRoles);
     return new JsonResponse<>(Status.OK).build();

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -51,6 +51,7 @@
 import org.apache.zeppelin.interpreter.recovery.RecoveryStorage;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener;
 import org.apache.zeppelin.notebook.NoteEventListener;
+import org.apache.zeppelin.notebook.NoteManager;
 import org.apache.zeppelin.notebook.Notebook;
 import org.apache.zeppelin.notebook.AuthorizationService;
 import org.apache.zeppelin.notebook.Paragraph;
@@ -164,6 +165,7 @@ protected void configure() {
             bindAsContract(AdminService.class).in(Singleton.class);
             bindAsContract(AuthorizationService.class).in(Singleton.class);
             bindAsContract(ConnectionManager.class).in(Singleton.class);
+            bindAsContract(NoteManager.class).in(Singleton.class);
             // TODO(jl): Will make it more beautiful
             if (!StringUtils.isBlank(conf.getShiroPath())) {
               bind(ShiroAuthenticationService.class).to(AuthenticationService.class).in(Singleton.class);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/ConnectionManager.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.zeppelin.display.Input;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.NoteInfo;
-import org.apache.zeppelin.notebook.NotebookAuthorization;
 import org.apache.zeppelin.notebook.NotebookImportDeserializer;
 import org.apache.zeppelin.notebook.Paragraph;
 import org.apache.zeppelin.notebook.AuthorizationService;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/UpgradeNoteFileTool.java
Patch:
@@ -40,6 +40,5 @@ public static void main(String[] args) throws IOException {
     ZeppelinConfiguration conf = ZeppelinConfiguration.create();
     NotebookRepoSync notebookRepoSync = new NotebookRepoSync(conf);
     notebookRepoSync.convertNoteFiles(conf, cmd.hasOption("d"));
-    notebookRepoSync.mergeAuthorizationInfo();
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/conf/ZeppelinConfigurationTest.java
Patch:
@@ -80,10 +80,9 @@ public void isWindowsPathTestFalse() throws ConfigurationException {
 
   @Test
   public void getNotebookDirTest() throws ConfigurationException {
-
     ZeppelinConfiguration conf = new ZeppelinConfiguration(this.getClass().getResource("/zeppelin-site.xml"));
     String notebookLocation = conf.getNotebookDir();
-    Assert.assertEquals("notebook", notebookLocation);
+    assertTrue(notebookLocation.endsWith("notebook"));
   }
 
   @Test

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java
Patch:
@@ -29,7 +29,9 @@
 import org.apache.zeppelin.interpreter.InterpreterFactory;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
+import org.apache.zeppelin.notebook.AuthorizationService;
 import org.apache.zeppelin.notebook.Note;
+import org.apache.zeppelin.notebook.NoteManager;
 import org.apache.zeppelin.notebook.Notebook;
 import org.apache.zeppelin.notebook.Paragraph;
 import org.apache.zeppelin.notebook.repo.NotebookRepo;
@@ -54,7 +56,7 @@ public void startUp() throws IOException, SchedulerException {
     InterpreterSetting defaultInterpreterSetting = mock(InterpreterSetting.class);
     when(defaultInterpreterSetting.getName()).thenReturn("test");
     when(interpreterSettingManager.getDefaultInterpreterSetting()).thenReturn(defaultInterpreterSetting);
-    notebook = new Notebook(ZeppelinConfiguration.create(), mock(NotebookRepo.class),
+    notebook = new Notebook(ZeppelinConfiguration.create(), mock(AuthorizationService.class), mock(NotebookRepo.class), mock(NoteManager.class),
         mock(InterpreterFactory.class), interpreterSettingManager,
         noteSearchService,
         mock(Credentials.class), null);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteManager.java
Patch:
@@ -19,6 +19,7 @@
 package org.apache.zeppelin.notebook;
 
 import org.apache.commons.lang3.StringUtils;
+import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.notebook.repo.NotebookRepo;
 import org.apache.zeppelin.scheduler.Job;
 import org.apache.zeppelin.user.AuthenticationInfo;
@@ -523,6 +524,7 @@ public synchronized Note getNote() throws IOException {
         } else {
           note.setPath(parent.toString() + "/" + note.getName());
         }
+        note.setCronSupported(ZeppelinConfiguration.create());
         note.setLoaded(true);
       }
       return note;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -615,7 +615,7 @@ public void onStatusChanged(Job job, Status before, Status after) {
   @Test
   public void testScheduleDisabledWithName() throws InterruptedException, IOException {
 
-    System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_CRON_FOLDERS.getVarName(), "System/*");
+    System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_CRON_FOLDERS.getVarName(), "/System");
     try {
       final int timeout = 10;
       final String everySecondCron = "* * * * * ?";
@@ -638,8 +638,7 @@ public void onStatusChanged(Job job, Status before, Status after) {
       terminateScheduledNote(note);
       afterStatusChangedListener = null;
 
-      final Note noteNameSystem = notebook.createNote("note1", anonymous);
-      noteNameSystem.setName("System/test1");
+      final Note noteNameSystem = notebook.createNote("/System/test1", anonymous);
       final CountDownLatch jobsToExecuteCountNameSystem = new CountDownLatch(5);
 
       executeNewParagraphByCron(noteNameSystem, everySecondCron);

File: flink/src/main/java/org/apache/zeppelin/flink/JobManager.java
Patch:
@@ -54,6 +54,7 @@ public void addJob(InterpreterContext context, JobClient jobClient) {
     String paragraphId = context.getParagraphId();
     JobClient previousJobClient = this.jobs.put(paragraphId, jobClient);
     FlinkJobProgressPoller thread = new FlinkJobProgressPoller(flinkWebUI, jobClient.getJobID(), context);
+    thread.setName("JobProgressPoller-Thread-" + paragraphId);
     thread.start();
     this.jobProgressPollerMap.put(jobClient.getJobID(), thread);
     if (previousJobClient != null) {
@@ -135,6 +136,7 @@ public void cancelJob(InterpreterContext context) throws InterpreterException {
     }
 
     FlinkJobProgressPoller jobProgressPoller = jobProgressPollerMap.remove(jobClient.getJobID());
+    jobProgressPoller.cancel();
     jobProgressPoller.interrupt();
   }
 
@@ -156,7 +158,6 @@ class FlinkJobProgressPoller extends Thread {
 
     @Override
     public void run() {
-
       while (!Thread.currentThread().isInterrupted() && running.get()) {
         try {
           JsonNode rootNode = Unirest.get(flinkWebUI + "/jobs/" + jobId.toString())

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -60,6 +60,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -939,7 +940,7 @@ public void convertPermissionsFromUsersToOwners(JsonObject jsonObject) {
   // For backward compatibility of interpreter.json format after ZEPPELIN-2403
   static Map<String, InterpreterProperty> convertInterpreterProperties(Object properties) {
     if (properties != null && properties instanceof StringMap) {
-      Map<String, InterpreterProperty> newProperties = new HashMap<>();
+      Map<String, InterpreterProperty> newProperties = new LinkedHashMap<>();
       StringMap p = (StringMap) properties;
       for (Object o : p.entrySet()) {
         Map.Entry entry = (Map.Entry) o;
@@ -963,7 +964,7 @@ static Map<String, InterpreterProperty> convertInterpreterProperties(Object prop
     } else if (properties instanceof Map) {
       Map<String, Object> dProperties =
           (Map<String, Object>) properties;
-      Map<String, InterpreterProperty> newProperties = new HashMap<>();
+      Map<String, InterpreterProperty> newProperties = new LinkedHashMap<>();
       for (String key : dProperties.keySet()) {
         Object value = dProperties.get(key);
         if (value instanceof InterpreterProperty) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -27,6 +27,7 @@
 import com.google.gson.reflect.TypeToken;
 
 import java.util.Properties;
+import java.util.LinkedHashMap;
 import java.util.Set;
 import javax.inject.Inject;
 import org.apache.commons.io.FileUtils;
@@ -419,7 +420,7 @@ private List<RegisteredInterpreter> getInterpreterListFromJson(InputStream strea
   private void registerInterpreterSetting(List<RegisteredInterpreter> registeredInterpreters,
       String interpreterDir, boolean override) {
 
-    Map<String, DefaultInterpreterProperty> properties = new HashMap<>();
+    Map<String, DefaultInterpreterProperty> properties = new LinkedHashMap<>();
     List<InterpreterInfo> interpreterInfos = new ArrayList<>();
     InterpreterOption option = defaultOption;
     String group = null;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -935,6 +935,9 @@ public enum ConfVars {
     ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD(
         "zeppelin.interpreter.lifecyclemanager.timeout.threshold", 3600000L),
 
+    ZEPPELIN_INTERPRETER_YARN_MONITOR_INTERVAL_SECS(
+            "zeppelin.interpreter.yarn.monitor.interval_secs", 10),
+
     ZEPPELIN_INTERPRETER_SCHEDULER_POOL_SIZE("zeppelin.scheduler.threadpool.size", 100),
 
     ZEPPELIN_OWNER_ROLE("zeppelin.notebook.default.owner.username", ""),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -162,7 +162,7 @@ private void internal_create() throws IOException {
       if (!isCreated) {
         this.interpreterProcess = getOrCreateInterpreterProcess();
         if (!interpreterProcess.isRunning()) {
-          throw new IOException("Interpreter process is not running:\n" +
+          throw new IOException("Interpreter process is not running\n" +
                   interpreterProcess.getErrorMessage());
         }
         interpreterProcess.callRemoteFunction(new RemoteInterpreterProcess.RemoteFunction<Void>() {
@@ -218,8 +218,8 @@ public InterpreterResult interpret(final String st, final InterpreterContext con
       throw new InterpreterException(e);
     }
     if (!interpreterProcess.isRunning()) {
-      throw new InterpreterException("Interpreter process is not running:\n" +
-              interpreterProcess.getErrorMessage());
+      return new InterpreterResult(InterpreterResult.Code.ERROR,
+              "Interpreter process is not running\n" + interpreterProcess.getErrorMessage());
     }
     this.lifecycleManager.onInterpreterUse(this.getInterpreterGroup(), sessionId);
     return interpreterProcess.callRemoteFunction(

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -65,6 +65,7 @@
 import org.apache.zeppelin.search.SearchService;
 import org.apache.zeppelin.service.*;
 import org.apache.zeppelin.service.AuthenticationService;
+import org.apache.zeppelin.socket.ConnectionManager;
 import org.apache.zeppelin.socket.NotebookServer;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.user.Credentials;
@@ -161,7 +162,8 @@ protected void configure() {
             bindAsContract(GsonProvider.class).in(Singleton.class);
             bindAsContract(WebApplicationExceptionMapper.class).in(Singleton.class);
             bindAsContract(AdminService.class).in(Singleton.class);
-            bindAsContract(AuthorizationService.class).to(Singleton.class);
+            bindAsContract(AuthorizationService.class).in(Singleton.class);
+            bindAsContract(ConnectionManager.class).in(Singleton.class);
             // TODO(jl): Will make it more beautiful
             if (!StringUtils.isBlank(conf.getShiroPath())) {
               bind(ShiroAuthenticationService.class).to(AuthenticationService.class).in(Singleton.class);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/ConnectionManager.java
Patch:
@@ -40,6 +40,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.inject.Inject;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -87,8 +88,8 @@ public class ConnectionManager {
 
   private AuthorizationService authorizationService;
 
-  public void setAuthorizationService(
-          AuthorizationService authorizationService) {
+  @Inject
+  public ConnectionManager(AuthorizationService authorizationService) {
     this.authorizationService = authorizationService;
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterEventTest.java
Patch:
@@ -100,7 +100,7 @@ public static void init() throws Exception {
 
     ZeppelinServerMock.startUp("ClusterEventTest", zconf);
     notebook = TestUtils.getInstance(Notebook.class);
-    authorizationService = new AuthorizationService(notebook, zconf);
+    authorizationService = TestUtils.getInstance(AuthorizationService.class);
 
     schedulerService = new QuartzSchedulerService(zconf, notebook);
     notebookServer = spy(NotebookServer.getInstance());

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -27,6 +27,7 @@
 import java.io.IOException;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
@@ -1112,7 +1113,8 @@ public void updateAngularObject(String noteId, String paragraphId, String interp
     // propagate change to (Remote) AngularObjectRegistry
     Note note = notebook.getNote(noteId);
     if (note != null) {
-      List<InterpreterSetting> settings = note.getBindedInterpreterSettings();
+      List<InterpreterSetting> settings =
+              note.getBindedInterpreterSettings(new ArrayList(context.getUserAndRoles()));
       for (InterpreterSetting setting : settings) {
         if (setting.getInterpreterGroup(user, note.getId()) == null) {
           continue;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -255,7 +255,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
       assertEquals(p.getReturn().message().get(0).getData(), getSimulatedMarkdownResult("markdown"));
 
       // when: restart interpreter
-      for (InterpreterSetting setting : note.getBindedInterpreterSettings()) {
+      for (InterpreterSetting setting : note.getBindedInterpreterSettings(new ArrayList<>())) {
         if (setting.getName().equals("md")) {
           // call restart interpreter API
           PutMethod put = httpPut("/interpreter/setting/restart/" + setting.getId(), "");
@@ -308,7 +308,7 @@ public void testRestartInterpreterPerNote() throws IOException, InterruptedExcep
 
       // when: get md interpreter
       InterpreterSetting mdIntpSetting = null;
-      for (InterpreterSetting setting : note.getBindedInterpreterSettings()) {
+      for (InterpreterSetting setting : note.getBindedInterpreterSettings(new ArrayList<>())) {
         if (setting.getName().equals("md")) {
           mdIntpSetting = setting;
           break;

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.io.IOException;
 import java.net.InetAddress;
 import java.net.UnknownHostException;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.List;
@@ -273,7 +274,7 @@ public void testAngularObjectSaveToNote()
 
     // get reference to interpreterGroup
     InterpreterGroup interpreterGroup = null;
-    List<InterpreterSetting> settings = note1.getBindedInterpreterSettings();
+    List<InterpreterSetting> settings = note1.getBindedInterpreterSettings(new ArrayList<>());
     for (InterpreterSetting setting : settings) {
       if (setting.getName().equals("angular")) {
         interpreterGroup = setting.getOrCreateInterpreterGroup("anonymous", "sharedProcess");

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -21,6 +21,8 @@
 import static org.mockito.Mockito.mock;
 
 import java.io.IOException;
+import java.util.ArrayList;
+
 import org.apache.zeppelin.interpreter.AbstractInterpreterTest;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -233,7 +235,7 @@ public void testUnloadOnInterpreterRestart() throws IOException, InterpreterExce
 
     Note note1 = notebook.createNote("note1", anonymous);
     String mock1IntpSettingId = null;
-    for (InterpreterSetting setting : note1.getBindedInterpreterSettings()) {
+    for (InterpreterSetting setting : note1.getBindedInterpreterSettings(new ArrayList<>())) {
       if (setting.getName().equals("mock1")) {
         mock1IntpSettingId = setting.getId();
         break;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/AbstractScheduler.java
Patch:
@@ -86,7 +86,7 @@ public void run() {
       try {
         runningJob = queue.take();
       } catch (InterruptedException e) {
-        LOGGER.warn("{} is interrupted", getClass().getSimpleName(), e);
+        LOGGER.warn("{} is interrupted", getClass().getSimpleName());
         break;
       }
 

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelClient.java
Patch:
@@ -197,6 +197,9 @@ public void onNext(ExecuteResponse executeResponse) {
               LOGGER.error("Unexpected IOException", e);
             }
             break;
+          case CLEAR:
+            interpreterOutput.getInterpreterOutput().clear();
+            break;
           default:
             LOGGER.error("Unrecognized type:" + executeResponse.getType());
         }

File: rlang/src/main/java/org/apache/zeppelin/r/RInterpreter.java
Patch:
@@ -110,7 +110,7 @@ public void open() throws InterpreterException {
       zeppelinR.open();
       LOGGER.info("ZeppelinR is opened successfully.");
     } catch (IOException e) {
-      throw new InterpreterException("Exception while opening SparkRInterpreter", e);
+      throw new InterpreterException("Exception while opening RInterpreter", e);
     }
 
     if (useKnitr) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/util/ProcessLauncher.java
Patch:
@@ -153,7 +153,7 @@ public boolean isRunning() {
   }
 
   public void stop() {
-    if (watchdog != null) {
+    if (watchdog != null && isRunning()) {
       watchdog.destroyProcess();
       watchdog = null;
     }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -925,7 +925,8 @@ public void testDeleteParagraph() throws IOException {
     }
   }
 
-  @Test
+  // TODO(zjffdu) disable it as it fails, need to investigate why.
+  //@Test
   public void testTitleSearch() throws IOException, InterruptedException {
     Note note = null;
     try {

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -552,6 +552,8 @@ public void saveInterpreterBindings(NotebookSocket conn, Message fromMessage) th
                       new TypeToken<ArrayList<String>>() {}.getType());
       if (!settingIdList.isEmpty()) {
         note.setDefaultInterpreterGroup(settingIdList.get(0));
+        getNotebook().saveNote(note,
+                new AuthenticationInfo(fromMessage.principal, fromMessage.roles, fromMessage.ticket));
       }
       List<InterpreterSetting> bindedSettings = note.getBindedInterpreterSettings();
       for (InterpreterSetting setting : bindedSettings) {

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkScalaInterpreter.java
Patch:
@@ -68,4 +68,6 @@ public Interpreter.FormType getFormType() throws InterpreterException {
   public abstract List<InterpreterCompletion> completion(String buf,
                                                          int cursor,
                                                          InterpreterContext interpreterContext);
+
+  public abstract ClassLoader getScalaShellClassLoader();
 }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/KotlinSparkInterpreter.java
Patch:
@@ -21,6 +21,7 @@
 import static org.apache.zeppelin.spark.Utils.buildJobGroupId;
 import org.apache.spark.SparkConf;
 import org.apache.spark.api.java.JavaSparkContext;
+import org.apache.spark.sql.SQLContext;
 import org.apache.spark.util.Utils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -78,10 +79,11 @@ public void open() throws InterpreterException {
 
     z = sparkInterpreter.getZeppelinContext();
 
+    // convert Object to SQLContext explicitly, that means Kotlin Spark may not work with Spark 1.x
     SparkKotlinReceiver ctx = new SparkKotlinReceiver(
         sparkInterpreter.getSparkSession(),
         jsc,
-        sparkInterpreter.getSQLContext(),
+        (SQLContext) sparkInterpreter.getSQLContext(),
         z);
 
     List<String> classpath = sparkClasspath();

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -198,7 +198,7 @@ public SparkConf getSparkConf() {
     }
   }
 
-  public SQLContext getSQLContext() {
+  public Object getSQLContext() {
     if (sparkInterpreter == null) {
       return null;
     } else {

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class ZeppelinRContext {
   private static SparkContext sparkContext;
-  private static SQLContext sqlContext;
+  private static Object sqlContext;
   private static ZeppelinContext zeppelinContext;
   private static Object sparkSession;
   private static JavaSparkContext javaSparkContext;
@@ -40,7 +40,7 @@ public static void setZeppelinContext(ZeppelinContext zeppelinContext) {
     ZeppelinRContext.zeppelinContext = zeppelinContext;
   }
 
-  public static void setSqlContext(SQLContext sqlContext) {
+  public static void setSqlContext(Object sqlContext) {
     ZeppelinRContext.sqlContext = sqlContext;
   }
 
@@ -52,7 +52,7 @@ public static SparkContext getSparkContext() {
     return sparkContext;
   }
 
-  public static SQLContext getSqlContext() {
+  public static Object getSqlContext() {
     return sqlContext;
   }
 

File: zeppelin-jupyter/src/main/java/org/apache/zeppelin/jupyter/JupyterUtil.java
Patch:
@@ -57,13 +57,14 @@
 import java.nio.file.Paths;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.UUID;
 
 /**
  *
  */
 public class JupyterUtil {
 
+  private static Gson Pretty_Gson = new GsonBuilder().setPrettyPrinting().create();
+
   private final RuntimeTypeAdapterFactory<Cell> cellTypeFactory;
   private final RuntimeTypeAdapterFactory<Output> outputTypeFactory;
 
@@ -256,7 +257,7 @@ public String getNbformat(String note) {
     nbformat.addProperty("nbformat", 4);
     nbformat.addProperty("nbformat_minor", 2);
     nbformat.add("cells", cells);
-    return nbformat.toString();
+    return Pretty_Gson.toJson(nbformat);
   }
 
   public static void main(String[] args) throws ParseException, IOException {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -65,7 +65,8 @@ public static enum OP {
     IMPORT_NOTE,      // [c-s] import notebook
                       // @param object notebook
 
-    CONVERT_NOTE_NBFORMAT,     // converting note to nbformat
+    CONVERT_NOTE_NBFORMAT,     // [c-s] converting note to nbformat
+    CONVERTED_NOTE_NBFORMAT,     // [s-c] converting note to nbformat
 
     NOTE_UPDATE,
 

File: python/src/test/java/org/apache/zeppelin/python/BasePythonInterpreterTest.java
Patch:
@@ -325,7 +325,8 @@ public void testZeppelinContext() throws InterpreterException, InterruptedExcept
     // z.show(df, show_index=True)
     context = getInterpreterContext();
     result = interpreter.interpret("import pandas as pd\n" +
-                    "df = pd.DataFrame({'id':[1,2,3], 'name':['a','b','c']})\nz.show(df, show_index=True)",
+                    "df = pd.DataFrame({'id':[1,2,3], 'name':['a','b','c']})\n" +
+                    "z.show(df, show_index=True)",
             context);
     assertEquals(context.out.toInterpreterResultMessage().toString(),
             InterpreterResult.Code.SUCCESS, result.code());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -885,7 +885,7 @@ public void run() {
 
           // load dependencies
           List<Dependency> deps = getDependencies();
-          if (deps != null) {
+          if (deps != null && !deps.isEmpty()) {
             LOGGER.info("Start to download dependencies for interpreter: " + name);
             for (Dependency d : deps) {
               File destDir = new File(

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/ParagraphTest.java
Patch:
@@ -292,7 +292,6 @@ public void returnUnchangedResultsWithDifferentUser() throws Throwable {
 
     ParagraphJobListener mockJobListener = mock(ParagraphJobListener.class);
     doReturn(mockJobListener).when(spyParagraph).getListener();
-    doNothing().when(mockJobListener).onOutputUpdateAll(Mockito.<Paragraph>any(), Mockito.anyList());
 
     InterpreterResult mockInterpreterResult = mock(InterpreterResult.class);
     when(mockInterpreter.interpret(anyString(), Mockito.<InterpreterContext>any())).thenReturn(mockInterpreterResult);
@@ -380,7 +379,6 @@ public void credentialReplacement() throws Throwable {
 
     ParagraphJobListener mockJobListener = mock(ParagraphJobListener.class);
     doReturn(mockJobListener).when(spyParagraph).getListener();
-    doNothing().when(mockJobListener).onOutputUpdateAll(Mockito.<Paragraph>any(), Mockito.anyList());
 
     InterpreterResult mockInterpreterResult = mock(InterpreterResult.class);
     when(mockInterpreter.interpret(anyString(), Mockito.<InterpreterContext>any())).thenReturn(mockInterpreterResult);

File: helium-dev/src/main/java/org/apache/zeppelin/helium/DevZeppelinContext.java
Patch:
@@ -18,7 +18,7 @@
 
 package org.apache.zeppelin.helium;
 
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterHookRegistry;
 
 import java.util.List;
@@ -27,7 +27,7 @@
 /**
  * ZeppelinContext for DevInterpreter
  */
-public class DevZeppelinContext extends BaseZeppelinContext {
+public class DevZeppelinContext extends ZeppelinContext {
   public DevZeppelinContext(InterpreterHookRegistry hooks, int maxResult) {
     super(hooks, maxResult);
   }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/kotlin/KotlinZeppelinBindings.java
Patch:
@@ -25,15 +25,15 @@ public class KotlinZeppelinBindings {
   //Simpler Kotlin syntax for z.select
   public static final String Z_SELECT_KOTLIN_SYNTAX =
       "import org.apache.zeppelin.display.ui.OptionInput.ParamOption\n" +
-      "import org.apache.zeppelin.interpreter.BaseZeppelinContext\n" +
+      "import org.apache.zeppelin.interpreter.ZeppelinContext\n" +
       "\n" +
-      "fun BaseZeppelinContext.select(name: String, defaultValue: Any?, " +
+      "fun ZeppelinContext.select(name: String, defaultValue: Any?, " +
           "options: List<Pair<Any?, String>>): Any? {\n" +
       "    return select(name, defaultValue, " +
           "options.map{ ParamOption(it.first, it.second) }.toTypedArray())\n" +
       "}\n" +
       "\n" +
-      "fun BaseZeppelinContext.select(name: String, options: List<Pair<Any?, String>>): Any? {\n" +
+      "fun ZeppelinContext.select(name: String, options: List<Pair<Any?, String>>): Any? {\n" +
       "    return select(name, \"\", options)\n" +
       "}";
 

File: zeppelin-plugins/launcher/cluster/src/main/java/org/apache/zeppelin/interpreter/launcher/ClusterInterpreterCheckThread.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.zeppelin.cluster.ClusterCallback;
 import org.apache.zeppelin.cluster.ClusterManagerServer;
+import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -49,7 +50,8 @@ public class ClusterInterpreterCheckThread extends Thread {
   public void run() {
     LOGGER.info("ClusterInterpreterCheckThread run() >>>");
 
-    ClusterManagerServer clusterServer = ClusterManagerServer.getInstance();
+    ClusterManagerServer clusterServer = ClusterManagerServer.getInstance(
+            ZeppelinConfiguration.create());
 
     clusterServer.getIntpProcessStatus(intpGroupId, connectTimeout,
         new ClusterCallback<HashMap<String, Object>>() {

File: zeppelin-plugins/launcher/cluster/src/main/java/org/apache/zeppelin/interpreter/launcher/ClusterInterpreterLauncher.java
Patch:
@@ -51,11 +51,11 @@ public class ClusterInterpreterLauncher extends StandardInterpreterLauncher
   private static final Logger LOGGER = LoggerFactory.getLogger(ClusterInterpreterLauncher.class);
 
   private InterpreterLaunchContext context;
-  private ClusterManagerServer clusterServer = ClusterManagerServer.getInstance();
-
+  private ClusterManagerServer clusterServer;
   public ClusterInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage recoveryStorage)
       throws IOException {
     super(zConf, recoveryStorage);
+    this.clusterServer = ClusterManagerServer.getInstance(zConf);
     clusterServer.addClusterEventListeners(ClusterManagerServer.CLUSTER_INTP_EVENT_TOPIC, this);
   }
 

File: zeppelin-plugins/launcher/cluster/src/test/java/org/apache/zeppelin/interpreter/launcher/ClusterMockTest.java
Patch:
@@ -61,11 +61,11 @@ public static void startCluster() throws IOException, InterruptedException {
     zconf.setClusterAddress(zServerHost + ":" + zServerPort);
 
     // mock cluster manager server
-    clusterServer = ClusterManagerServer.getInstance();
+    clusterServer = ClusterManagerServer.getInstance(zconf);
     clusterServer.start();
 
     // mock cluster manager client
-    clusterClient = ClusterManagerClient.getInstance();
+    clusterClient = ClusterManagerClient.getInstance(zconf);
     clusterClient.start(metaKey);
 
     // Waiting for cluster startup
@@ -104,7 +104,7 @@ public static void stopCluster() {
     }
 
     tSocket.close();
-
+    ZeppelinConfiguration.reset();
     LOGGER.info("stopCluster <<<");
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -671,7 +671,7 @@ private void broadcastClusterEvent(ClusterEvent event, Object... objects) {
     }
 
     String msg = ClusterMessage.serializeMessage(clusterMessage);
-    ClusterManagerServer.getInstance().broadcastClusterEvent(
+    ClusterManagerServer.getInstance(conf).broadcastClusterEvent(
         ClusterManagerServer.CLUSTER_NOTE_EVENT_TOPIC, msg);
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/recovery/RecoveryTest.java
Patch:
@@ -59,13 +59,14 @@ public static void init() throws Exception {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_RECOVERY_DIR.getVarName(),
             recoveryDir.getAbsolutePath());
     startUp(RecoveryTest.class.getSimpleName());
-    //TestUtils.getInstance(Notebook.class).setParagraphJobListener(NotebookServer.getInstance());
   }
 
   @AfterClass
   public static void destroy() throws Exception {
     shutDown();
     FileUtils.deleteDirectory(recoveryDir);
+    System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_RECOVERY_STORAGE_CLASS.getVarName(),
+            ZeppelinConfiguration.ConfVars.ZEPPELIN_RECOVERY_STORAGE_CLASS.getStringValue());
   }
 
   @Before

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -1143,7 +1143,7 @@ private void broadcastClusterEvent(ClusterEvent event, InterpreterSetting intpSe
     ClusterMessage message = new ClusterMessage(event);
     message.put("intpSetting", jsonIntpSetting);
     String msg = ClusterMessage.serializeMessage(message);
-    ClusterManagerServer.getInstance().broadcastClusterEvent(
+    ClusterManagerServer.getInstance(conf).broadcastClusterEvent(
         CLUSTER_INTP_SETTING_EVENT_TOPIC, msg);
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/AuthorizationService.java
Patch:
@@ -388,7 +388,7 @@ private void broadcastClusterEvent(ClusterEvent event, String noteId,
     }.getType());
     message.put("set", json);
     String msg = ClusterMessage.serializeMessage(message);
-    ClusterManagerServer.getInstance().broadcastClusterEvent(
+    ClusterManagerServer.getInstance(conf).broadcastClusterEvent(
         ClusterManagerServer.CLUSTER_AUTH_EVENT_TOPIC, msg);
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/scheduler/CronJob.java
Patch:
@@ -41,6 +41,7 @@ public void execute(JobExecutionContext context) {
 
     Notebook notebook = (Notebook) jobDataMap.get("notebook");
     String noteId = jobDataMap.getString("noteId");
+    logger.info("Start cron job of note: " + noteId);
     Note note = null;
     try {
       note = notebook.getNote(noteId);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java
Patch:
@@ -140,6 +140,7 @@ public Void call(RemoteInterpreterService.Client client) throws Exception {
       } catch (Exception e) {
         LOGGER.warn("ignore the exception when shutting down", e);
       }
+
       this.interpreterProcessLauncher.stop();
     }
 

File: flink/src/main/java/org/apache/zeppelin/flink/IPyFlinkInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.flink;
 
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.python.IPythonInterpreter;
@@ -53,7 +53,7 @@ public void open() throws InterpreterException {
   }
 
   @Override
-  public BaseZeppelinContext buildZeppelinContext() {
+  public ZeppelinContext buildZeppelinContext() {
     return flinkInterpreter.getZeppelinContext();
   }
 

File: flink/src/main/java/org/apache/zeppelin/flink/PyFlinkInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.flink;
 
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.python.IPythonInterpreter;
@@ -136,7 +136,7 @@ public void close() throws InterpreterException {
   }
 
   @Override
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return flinkInterpreter.getZeppelinContext();
   }
 

File: groovy/src/main/java/org/apache/zeppelin/groovy/GroovyZeppelinContext.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.groovy;
 
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterHookRegistry;
 
 import java.util.List;
@@ -26,7 +26,7 @@
 /**
  * ZeppelinContext for Groovy
  */
-public class GroovyZeppelinContext extends BaseZeppelinContext {
+public class GroovyZeppelinContext extends ZeppelinContext {
 
   public GroovyZeppelinContext(InterpreterHookRegistry hooks, int maxResult) {
     super(hooks, maxResult);

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -32,7 +32,7 @@
 import org.apache.hadoop.security.UserGroupInformation;
 import org.apache.hadoop.security.alias.CredentialProvider;
 import org.apache.hadoop.security.alias.CredentialProviderFactory;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.util.SqlSplitter;
 import org.apache.zeppelin.tabledata.TableDataUtils;
 import org.slf4j.Logger;
@@ -159,7 +159,7 @@ public JDBCInterpreter(Properties property) {
   }
 
   @Override
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return null;
   }
 

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang.StringUtils;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.jupyter.proto.ExecuteRequest;
 import org.apache.zeppelin.interpreter.jupyter.proto.ExecuteResponse;
@@ -98,7 +98,7 @@ public void setUseBuiltinPy4j(boolean useBuiltinPy4j) {
   }
 
   @Override
-  public BaseZeppelinContext buildZeppelinContext() {
+  public ZeppelinContext buildZeppelinContext() {
     return new PythonZeppelinContext(
         getInterpreterGroup().getInterpreterHookRegistry(),
         Integer.parseInt(getProperty("zeppelin.python.maxResult", "1000")));

File: python/src/main/java/org/apache/zeppelin/python/PythonZeppelinContext.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.python;
 
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterHookRegistry;
 
 import java.util.List;
@@ -26,7 +26,7 @@
 /**
  * ZeppelinContext for Python
  */
-public class PythonZeppelinContext extends BaseZeppelinContext {
+public class PythonZeppelinContext extends ZeppelinContext {
 
   public PythonZeppelinContext(InterpreterHookRegistry hooks, int maxResult) {
     super(hooks, maxResult);

File: rlang/src/main/java/org/apache/zeppelin/r/IRInterpreter.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang.exception.ExceptionUtils;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -147,7 +147,7 @@ public String getKernelName() {
   }
 
   @Override
-  public BaseZeppelinContext buildZeppelinContext() {
+  public ZeppelinContext buildZeppelinContext() {
     return new RZeppelinContext(getInterpreterGroup().getInterpreterHookRegistry(),
             Integer.parseInt(getProperty("zeppelin.r.maxResult", "1000")));
   }

File: rlang/src/main/java/org/apache/zeppelin/r/RInterpreter.java
Patch:
@@ -18,7 +18,7 @@
 package org.apache.zeppelin.r;
 
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -185,7 +185,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return this.z;
   }
 

File: rlang/src/main/java/org/apache/zeppelin/r/RZeppelinContext.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.r;
 
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterHookRegistry;
 
 import java.util.List;
@@ -26,7 +26,7 @@
 /**
  * ZeppelinContext for R, only contains the basic function of ZeppelinContext.
  */
-public class RZeppelinContext extends BaseZeppelinContext {
+public class RZeppelinContext extends ZeppelinContext {
 
   public RZeppelinContext(InterpreterHookRegistry hooks, int maxResult) {
     super(hooks, maxResult);

File: rlang/src/main/java/org/apache/zeppelin/r/ShinyInterpreter.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -94,7 +94,7 @@ public int getProgress(InterpreterContext context) throws InterpreterException {
   }
 
   @Override
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return this.z;
   }
 

File: sap/src/main/java/org/apache/zeppelin/sap/UniverseInterpreter.java
Patch:
@@ -19,8 +19,7 @@
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
-import org.apache.zeppelin.interpreter.Interpreter;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -87,7 +86,7 @@ protected boolean isInterpolate() {
   }
 
   @Override
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return null;
   }
 

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.commons.exec.ExecuteWatchdog;
 import org.apache.commons.exec.PumpStreamHandler;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -90,7 +90,7 @@ protected boolean isInterpolate() {
   }
 
   @Override
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return null;
   }
 

File: shell/src/main/java/org/apache/zeppelin/shell/TerminalInterpreter.java
Patch:
@@ -22,7 +22,7 @@
 import com.hubspot.jinjava.Jinjava;
 import org.apache.commons.io.Charsets;
 import org.apache.commons.lang3.StringUtils;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
@@ -90,7 +90,7 @@ public void close() {
   }
 
   @Override
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return null;
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkScalaInterpreter.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.spark.SparkContext;
 import org.apache.spark.sql.SQLContext;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -42,7 +42,7 @@ public abstract class AbstractSparkScalaInterpreter {
 
   public abstract String getSparkUrl();
 
-  public abstract BaseZeppelinContext getZeppelinContext();
+  public abstract ZeppelinContext getZeppelinContext();
 
   public int getProgress(InterpreterContext context) throws InterpreterException {
     return getProgress(Utils.buildJobGroupId(context), context);

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.spark.SparkConf;
 import org.apache.spark.api.java.JavaSparkContext;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -78,7 +78,7 @@ protected Map<String, String> setupKernelEnv() throws IOException {
   }
 
   @Override
-  public BaseZeppelinContext buildZeppelinContext() {
+  public ZeppelinContext buildZeppelinContext() {
     return sparkInterpreter.getZeppelinContext();
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/KotlinSparkInterpreter.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import scala.Console;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
@@ -53,7 +53,7 @@ public class KotlinSparkInterpreter extends Interpreter {
   private InterpreterResult unsupportedMessage;
   private KotlinInterpreter interpreter;
   private SparkInterpreter sparkInterpreter;
-  private BaseZeppelinContext z;
+  private ZeppelinContext z;
   private JavaSparkContext jsc;
 
   public KotlinSparkInterpreter(Properties properties) {

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.spark.SparkConf;
 import org.apache.spark.api.java.JavaSparkContext;
 import org.apache.spark.sql.SQLContext;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -118,7 +118,7 @@ protected IPythonInterpreter getIPythonInterpreter() throws InterpreterException
   }
 
   @Override
-  protected BaseZeppelinContext createZeppelinContext() {
+  protected ZeppelinContext createZeppelinContext() {
     return sparkInterpreter.getZeppelinContext();
   }
 
@@ -165,7 +165,7 @@ protected String getPythonExec() {
     return "python";
   }
 
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     if (sparkInterpreter != null) {
       return sparkInterpreter.getZeppelinContext();
     } else {

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -23,7 +23,7 @@
 import org.apache.spark.api.java.JavaSparkContext;
 import org.apache.spark.sql.SQLContext;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
@@ -197,7 +197,7 @@ public int getProgress(InterpreterContext context) throws InterpreterException {
     return innerInterpreter.getProgress(Utils.buildJobGroupId(context), context);
   }
 
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return this.innerInterpreter.getZeppelinContext();
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.spark.SparkContext;
 import org.apache.spark.api.java.JavaSparkContext;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -150,7 +150,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return sparkInterpreter.getZeppelinContext();
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -21,7 +21,7 @@
 import org.apache.spark.SparkContext;
 import org.apache.spark.sql.SQLContext;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -33,7 +33,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Properties;
 
@@ -69,7 +68,7 @@ protected boolean isInterpolate() {
   }
 
   @Override
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return null;
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/kotlin/SparkKotlinReceiver.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.apache.spark.api.java.JavaSparkContext;
 import org.apache.spark.sql.SQLContext;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.kotlin.context.KotlinReceiver;
 
 /**
@@ -29,12 +29,12 @@ public class SparkKotlinReceiver extends KotlinReceiver {
   public final Object _sparkObject;
   public final JavaSparkContext sc;
   public final SQLContext sqlContext;
-  public final BaseZeppelinContext z;
+  public final ZeppelinContext z;
 
   public SparkKotlinReceiver(Object spark,
                              JavaSparkContext sc,
                              SQLContext sqlContext,
-                             BaseZeppelinContext z) {
+                             ZeppelinContext z) {
     this._sparkObject = spark;
     this.sc = sc;
     this.sqlContext = sqlContext;

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkShimsTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Map;
 import java.util.Properties;
 import org.apache.hadoop.util.VersionInfo;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient;
 import org.junit.Before;
@@ -41,7 +41,6 @@
 import org.junit.runners.Parameterized.Parameters;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
-import org.mockito.Mock;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;
@@ -110,7 +109,7 @@ public Object getAsDataFrame(String value) {
   }
 
   @RunWith(PowerMockRunner.class)
-  @PrepareForTest({BaseZeppelinContext.class, VersionInfo.class})
+  @PrepareForTest({ZeppelinContext.class, VersionInfo.class})
   @PowerMockIgnore({"javax.net.*", "javax.security.*"})
   public static class SingleTests {
     @Captor ArgumentCaptor<Map<String, String>> argumentCaptor;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/AbstractInterpreter.java
Patch:
@@ -33,7 +33,7 @@ public AbstractInterpreter(Properties properties) {
   public InterpreterResult interpret(String st,
                                      InterpreterContext context) throws InterpreterException {
     InterpreterContext.set(context);
-    BaseZeppelinContext z = getZeppelinContext();
+    ZeppelinContext z = getZeppelinContext();
     if (z != null) {
       z.setGui(context.getGui());
       z.setNoteGui(context.getNoteGui());
@@ -47,7 +47,7 @@ public InterpreterResult interpret(String st,
     return internalInterpret(st, context);
   }
 
-  public abstract BaseZeppelinContext getZeppelinContext();
+  public abstract ZeppelinContext getZeppelinContext();
 
   protected boolean isInterpolate() {
     return false;

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/ZeppelinContextTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.junit.Assert.assertEquals;
 
 
-public class BaseZeppelinContextTest {
+public class ZeppelinContextTest {
 
   @Test
   public void testHooks() throws InvalidHookException {
@@ -113,7 +113,7 @@ public void testHooks() throws InvalidHookException {
   }
 
 
-  public static class TestZeppelinContext extends BaseZeppelinContext {
+  public static class TestZeppelinContext extends ZeppelinContext {
 
     public TestZeppelinContext(InterpreterHookRegistry hooks, int maxResult) {
       super(hooks, maxResult);

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterInterpreter.java
Patch:
@@ -19,7 +19,7 @@
 package org.apache.zeppelin.jupyter;
 
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -45,7 +45,7 @@ public JupyterInterpreter(Properties properties) {
   }
 
   @Override
-  public BaseZeppelinContext getZeppelinContext() {
+  public ZeppelinContext getZeppelinContext() {
     return new JupyterZeppelinContext(getInterpreterGroup().getInterpreterHookRegistry(), 1000);
   }
 

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterZeppelinContext.java
Patch:
@@ -18,13 +18,13 @@
 
 package org.apache.zeppelin.jupyter;
 
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
+import org.apache.zeppelin.interpreter.ZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterHookRegistry;
 
 import java.util.List;
 import java.util.Map;
 
-public class JupyterZeppelinContext extends BaseZeppelinContext {
+public class JupyterZeppelinContext extends ZeppelinContext {
   public JupyterZeppelinContext(InterpreterHookRegistry hooks, int maxResult) {
     super(hooks, maxResult);
   }

File: python/src/test/java/org/apache/zeppelin/python/BasePythonInterpreterTest.java
Patch:
@@ -301,13 +301,14 @@ public void testZeppelinContext() throws InterpreterException, InterruptedExcept
     // Pandas DataFrame
     context = getInterpreterContext();
     result = interpreter.interpret("import pandas as pd\n" +
-        "df = pd.DataFrame({'id':[1,2,3], 'name':['a','b','c']})\nz.show(df)", context);
+        "df = pd.DataFrame({'id':[1,2,3], 'name':['a\ta','b\\nb','c\\r\\nc']})\nz.show(df)",
+            context);
     assertEquals(context.out.toInterpreterResultMessage().toString(),
             InterpreterResult.Code.SUCCESS, result.code());
     interpreterResultMessages = context.out.toInterpreterResultMessage();
     assertEquals(1, interpreterResultMessages.size());
     assertEquals(InterpreterResult.Type.TABLE, interpreterResultMessages.get(0).getType());
-    assertEquals("id\tname\n1\ta\n2\tb\n3\tc\n", interpreterResultMessages.get(0).getData());
+    assertEquals("id\tname\n1\ta a\n2\tb b\n3\tc c\n", interpreterResultMessages.get(0).getData());
 
     context = getInterpreterContext();
     result = interpreter.interpret("import pandas as pd\n" +

File: spark/spark1-shims/src/main/scala/org/apache/zeppelin/spark/Spark1Shims.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.spark.ui.jobs.JobProgressListener;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.ResultMessages;
+import org.apache.zeppelin.tabledata.TableDataUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -71,15 +72,15 @@ public String showDataFrame(Object obj, int maxResult) {
       List<Row> rows = df.takeAsList(maxResult + 1);
       StringBuilder msg = new StringBuilder();
       msg.append("\n%table ");
-      msg.append(StringUtils.join(columns, "\t"));
+      msg.append(StringUtils.join(TableDataUtils.normalizeColumns(columns), "\t"));
       msg.append("\n");
       boolean isLargerThanMaxResult = rows.size() > maxResult;
       if (isLargerThanMaxResult) {
         rows = rows.subList(0, maxResult);
       }
       for (Row row : rows) {
         for (int i = 0; i < row.size(); ++i) {
-          msg.append(row.get(i));
+          msg.append(TableDataUtils.normalizeColumn(row.get(i)));
           if (i != row.size() - 1) {
             msg.append("\t");
           }

File: spark/spark2-shims/src/main/scala/org/apache/zeppelin/spark/Spark2Shims.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.spark.sql.types.StructType;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.ResultMessages;
+import org.apache.zeppelin.tabledata.TableDataUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -72,15 +73,15 @@ public String showDataFrame(Object obj, int maxResult) {
       List<Row> rows = df.takeAsList(maxResult + 1);
       StringBuilder msg = new StringBuilder();
       msg.append("\n%table ");
-      msg.append(StringUtils.join(columns, "\t"));
+      msg.append(StringUtils.join(TableDataUtils.normalizeColumns(columns), "\t"));
       msg.append("\n");
       boolean isLargerThanMaxResult = rows.size() > maxResult;
       if (isLargerThanMaxResult) {
         rows = rows.subList(0, maxResult);
       }
       for (Row row : rows) {
         for (int i = 0; i < row.size(); ++i) {
-          msg.append(row.get(i));
+          msg.append(TableDataUtils.normalizeColumn(row.get(i)));
           if (i != row.size() -1) {
             msg.append("\t");
           }

File: spark/spark3-shims/src/main/scala/org/apache/zeppelin/spark/Spark3Shims.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.spark.sql.types.StructType;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.ResultMessages;
+import org.apache.zeppelin.tabledata.TableDataUtils;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -72,15 +73,15 @@ public String showDataFrame(Object obj, int maxResult) {
       List<Row> rows = df.takeAsList(maxResult + 1);
       StringBuilder msg = new StringBuilder();
       msg.append("%table ");
-      msg.append(StringUtils.join(columns, "\t"));
+      msg.append(StringUtils.join(TableDataUtils.normalizeColumns(columns), "\t"));
       msg.append("\n");
       boolean isLargerThanMaxResult = rows.size() > maxResult;
       if (isLargerThanMaxResult) {
         rows = rows.subList(0, maxResult);
       }
       for (Row row : rows) {
         for (int i = 0; i < row.size(); ++i) {
-          msg.append(row.get(i));
+          msg.append(TableDataUtils.normalizeColumn(row.get(i)));
           if (i != row.size() -1) {
             msg.append("\t");
           }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -172,6 +172,7 @@ public static enum OP {
     UNSUBSCRIBE_UPDATE_NOTE_JOBS, // [c-s] unsubscribe job information for job management
     // @param unixTime
     GET_INTERPRETER_BINDINGS,    // [c-s] get interpreter bindings
+    SAVE_INTERPRETER_BINDINGS,    // [c-s] save interpreter bindings
     INTERPRETER_BINDINGS,         // [s-c] interpreter bindings
 
     GET_INTERPRETER_SETTINGS,     // [c-s] get interpreter settings

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -672,8 +672,7 @@ public Response runNoteJobs(@PathParam("noteId") String noteId,
       note.runAll(subject, blocking);
     } catch (Exception ex) {
       LOG.error("Exception from run", ex);
-      return new JsonResponse<>(Status.PRECONDITION_FAILED,
-          ex.getMessage() + "- Not selected or Invalid Interpreter bind").build();
+      return new JsonResponse<>(Status.EXPECTATION_FAILED, ex.getMessage()).build();
     }
     return new JsonResponse<>(Status.OK).build();
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -830,7 +830,7 @@ private void setParagraphMagic(Paragraph p, int index) {
     }
   }
 
-  public void runAll(AuthenticationInfo authenticationInfo, boolean blocking) {
+  public void runAll(AuthenticationInfo authenticationInfo, boolean blocking) throws Exception {
     setRunning(true);
     try {
       for (Paragraph p : getParagraphs()) {
@@ -840,7 +840,8 @@ public void runAll(AuthenticationInfo authenticationInfo, boolean blocking) {
         p.setAuthenticationInfo(authenticationInfo);
         if (!run(p.getId(), blocking)) {
           logger.warn("Skip running the remain notes because paragraph {} fails", p.getId());
-          break;
+          throw new Exception("Fail to run note because paragraph " + p.getId() + " is failed, " +
+                  p.getReturn());
         }
       }
     } finally {

File: zeppelin-jupyter/src/test/java/org/apache/zeppelin/jupyter/nbformat/JupyterUtilTest.java
Patch:
@@ -60,7 +60,7 @@ public void getNoteAndVerifyData() throws Exception {
     System.out.println(gson.toJson(n));
     System.out.println(n.getParagraphs().size());
     assertTrue(n.getParagraphs().size() == 8);
-    assertTrue(noteName.equals(n.getName()));
+    assertTrue(n.getName().startsWith(noteName));
 
     Paragraph firstParagraph = n.getParagraphs().get(0);
     assertTrue(firstParagraph.getText().equals("%python\nimport numpy as np"));

File: zeppelin-plugins/launcher/docker/src/main/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterProcess.java
Patch:
@@ -517,7 +517,7 @@ private void copyRunFileToContainer(String containerId)
       mkdirInContainer(containerId, intpGrpAllPath);
       docker.copyToContainer(new File(intpGrpAllPath).toPath(), containerId, intpGrpAllPath);
 
-      // 8) ${ZEPPELIN_HOME}/lib/interpreter/zeppelin-interpreter-api-<version>.jar
+      // 8) ${ZEPPELIN_HOME}/lib/interpreter/zeppelin-interpreter-shaded-<version>.jar
       //    is uploaded to `${CONTAINER_ZEPPELIN_HOME}` directory in the container
       String intpPath = "/interpreter";
       String intpAllPath = getPathByHome(zeppelinHome, intpPath);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -883,7 +883,7 @@ public enum ConfVars {
     ZEPPELIN_USERNAME_FORCE_LOWERCASE("zeppelin.username.force.lowercase", false),
     ZEPPELIN_CREDENTIALS_PERSIST("zeppelin.credentials.persist", true),
     ZEPPELIN_CREDENTIALS_ENCRYPT_KEY("zeppelin.credentials.encryptKey", null),
-    ZEPPELIN_WEBSOCKET_MAX_TEXT_MESSAGE_SIZE("zeppelin.websocket.max.text.message.size", "1024000"),
+    ZEPPELIN_WEBSOCKET_MAX_TEXT_MESSAGE_SIZE("zeppelin.websocket.max.text.message.size", "10240000"),
     ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED("zeppelin.server.default.dir.allowed", false),
     ZEPPELIN_SERVER_XFRAME_OPTIONS("zeppelin.server.xframe.options", "SAMEORIGIN"),
     ZEPPELIN_SERVER_JETTY_NAME("zeppelin.server.jetty.name", null),

File: zeppelin-jupyter/src/main/java/org/apache/zeppelin/jupyter/nbformat/Error.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.zeppelin.jupyter.nbformat;
 
-import com.google.common.base.Joiner;
 import com.google.gson.annotations.SerializedName;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.jupyter.types.ZeppelinOutputType;
 import org.apache.zeppelin.jupyter.zformat.TypeData;
 
@@ -57,7 +57,7 @@ public ZeppelinOutputType getTypeOfZeppelin() {
   @Override
   public TypeData toZeppelinResult() {
     List<String> text = verifyEndOfLine(Arrays.asList(getEname(), getEvalue()));
-    String result = Joiner.on("").join(text);
+    String result = StringUtils.join(text, "");
     return new TypeData(getTypeOfZeppelin().toString(), result);
   }
 }

File: zeppelin-jupyter/src/main/java/org/apache/zeppelin/jupyter/nbformat/Output.java
Patch:
@@ -16,8 +16,8 @@
  */
 package org.apache.zeppelin.jupyter.nbformat;
 
-import com.google.common.base.Joiner;
 import com.google.gson.annotations.SerializedName;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.jupyter.types.JupyterOutputType;
 import org.apache.zeppelin.jupyter.types.ZeppelinOutputType;
 import org.apache.zeppelin.jupyter.zformat.TypeData;
@@ -82,7 +82,7 @@ protected TypeData getZeppelinResult(Map<String, Object> data, JupyterOutputType
       outputsRaws.addAll((List<String>) outputsObject);
     }
     List<String> outputs = verifyEndOfLine(outputsRaws);
-    String outputData = Joiner.on("").join(outputs);
+    String outputData = StringUtils.join(outputs, "");
     if (type == JupyterOutputType.IMAGE_PNG) {
       String base64CodeRaw = outputData;
       String base64Code = base64CodeRaw.replace("\n", "");

File: zeppelin-jupyter/src/main/java/org/apache/zeppelin/jupyter/nbformat/Stream.java
Patch:
@@ -16,13 +16,12 @@
  */
 package org.apache.zeppelin.jupyter.nbformat;
 
-import com.google.common.base.Joiner;
 import com.google.gson.annotations.SerializedName;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.jupyter.types.ZeppelinOutputType;
 import org.apache.zeppelin.jupyter.zformat.TypeData;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 /**
@@ -61,7 +60,7 @@ public ZeppelinOutputType getTypeOfZeppelin() {
   @Override
   public TypeData toZeppelinResult() {
     List<String> text = verifyEndOfLine(getText());
-    String result = Joiner.on("").join(text);
+    String result = StringUtils.join(text, "");
     return new TypeData(getTypeOfZeppelin().toString(), result);
   }
 }

File: zeppelin-jupyter/src/test/java/org/apache/zeppelin/jupyter/nbformat/JupyterUtilTest.java
Patch:
@@ -48,14 +48,14 @@ public void getNbFormat() throws Exception {
   @Test
   public void getNote() throws Exception {
     InputStream resource = getClass().getResourceAsStream("/examples.ipynb");
-    Note n = new JupyterUtil().getNote(new InputStreamReader(resource), "%python", "%md");
+    Note n = new JupyterUtil().getNote(new InputStreamReader(resource), "", "%python", "%md");
   }
 
   @Test
   public void getNoteAndVerifyData() throws Exception {
     String noteName = "Note converted from Jupyter";
     InputStream resource = getClass().getResourceAsStream("/basic.ipynb");
-    Note n = new JupyterUtil().getNote(new InputStreamReader(resource), "%python", "%md");
+    Note n = new JupyterUtil().getNote(new InputStreamReader(resource), "", "%python", "%md");
     Gson gson = new Gson();
     System.out.println(gson.toJson(n));
     System.out.println(n.getParagraphs().size());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -64,6 +64,9 @@ public static enum OP {
                       // @param name name for the cloned note
     IMPORT_NOTE,      // [c-s] import notebook
                       // @param object notebook
+
+    CONVERT_NOTE_NBFORMAT,     // converting note to nbformat
+
     NOTE_UPDATE,
 
     NOTE_RENAME,

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -126,8 +126,8 @@ public int getProgress(InterpreterContext context) throws InterpreterException {
     return sparkInterpreter.getProgress(context);
   }
 
-  public boolean isSpark2() {
-    return sparkInterpreter.getSparkVersion().newerThanEquals(SparkVersion.SPARK_2_0_0);
+  public boolean isSpark1() {
+    return sparkInterpreter.getSparkVersion().getMajorVersion() == 1;
   }
 
   public JavaSparkContext getJavaSparkContext() {

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -206,7 +206,7 @@ public SQLContext getSQLContext() {
     }
   }
 
-  public boolean isSpark2() {
-    return sparkInterpreter.getSparkVersion().newerThanEquals(SparkVersion.SPARK_2_0_0);
+  public boolean isSpark1() {
+    return sparkInterpreter.getSparkVersion().getMajorVersion() == 1;
   }
 }

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -128,7 +128,7 @@ public static void testPySpark(final Interpreter interpreter, RemoteInterpreterE
 
     // spark sql
     context = createInterpreterContext(mockIntpEventClient);
-    if (!isSpark2(sparkVersion)) {
+    if (isSpark1(sparkVersion)) {
       result = interpreter.interpret("df = sqlContext.createDataFrame([(1,'a'),(2,'b')])\ndf.show()", context);
       assertEquals(InterpreterResult.Code.SUCCESS, result.code());
       interpreterResultMessages = context.out.toInterpreterResultMessage();
@@ -256,8 +256,8 @@ public void testIPythonFailToLaunch() throws InterpreterException {
     }
   }
 
-  private static boolean isSpark2(String sparkVersion) {
-    return sparkVersion.startsWith("'2.") || sparkVersion.startsWith("u'2.");
+  private static boolean isSpark1(String sparkVersion) {
+    return sparkVersion.startsWith("'1.") || sparkVersion.startsWith("u'1.");
   }
 
   private static InterpreterContext createInterpreterContext(RemoteInterpreterEventClient mockRemoteEventClient) {

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -191,7 +191,7 @@ public void testMultipleStatements() throws InterpreterException {
     assertEquals(InterpreterResult.Code.ERROR, ret.code());
     assertEquals(ret.message().toString(), 2, ret.message().size());
     assertEquals(ret.message().toString(), Type.TABLE, ret.message().get(0).getType());
-    if (sparkInterpreter.getSparkVersion().isSpark2()) {
+    if (!sparkInterpreter.getSparkVersion().isSpark1()) {
       assertTrue(ret.message().toString(), ret.message().get(1).getData().contains("ParseException"));
     }
     
@@ -200,7 +200,7 @@ public void testMultipleStatements() throws InterpreterException {
     assertEquals(InterpreterResult.Code.ERROR, ret.code());
     assertEquals(ret.message().toString(), 2, ret.message().size());
     assertEquals(ret.message().toString(), Type.TABLE, ret.message().get(0).getType());
-    if (sparkInterpreter.getSparkVersion().isSpark2()) {
+    if (!sparkInterpreter.getSparkVersion().isSpark1()) {
       assertTrue(ret.message().toString(), ret.message().get(1).getData().contains("ParseException"));
     }
 
@@ -213,7 +213,7 @@ public void testMultipleStatements() throws InterpreterException {
 
   @Test
   public void testConcurrentSQL() throws InterpreterException, InterruptedException {
-    if (sparkInterpreter.getSparkVersion().isSpark2()) {
+    if (!sparkInterpreter.getSparkVersion().isSpark1()) {
       sparkInterpreter.interpret("spark.udf.register(\"sleep\", (e:Int) => {Thread.sleep(e*1000); e})", context);
     } else {
       sparkInterpreter.interpret("sqlContext.udf.register(\"sleep\", (e:Int) => {Thread.sleep(e*1000); e})", context);

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelClient.java
Patch:
@@ -212,7 +212,8 @@ public void onNext(ExecuteResponse executeResponse) {
       @Override
       public void onError(Throwable throwable) {
         try {
-          interpreterOutput.getInterpreterOutput().write(ExceptionUtils.getStackTrace(throwable));
+          interpreterOutput.getInterpreterOutput().write("\n%text " +
+                  ExceptionUtils.getStackTrace(throwable));
           interpreterOutput.getInterpreterOutput().flush();
         } catch (IOException e) {
           LOGGER.error("Unexpected IOException", e);

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/AuthenticationService.java
Patch:
@@ -21,6 +21,8 @@
 import java.util.List;
 import java.util.Set;
 
+import org.apache.shiro.realm.Realm;
+
 /**
  * Interface for Zeppelin Security.
  * //TODO(zjffdu) rename it to AuthenticationService
@@ -39,7 +41,7 @@ public interface AuthenticationService {
    */
   Set<String> getAssociatedRoles();
 
-  Collection getRealmsList();
+  Collection<Realm> getRealmsList();
 
   boolean isAuthenticated();
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NoAuthenticationService.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.List;
 import java.util.Set;
 import javax.inject.Inject;
+
+import org.apache.shiro.realm.Realm;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -47,7 +49,7 @@ public Set<String> getAssociatedRoles() {
   }
 
   @Override
-  public Collection getRealmsList() {
+  public Collection<Realm> getRealmsList() {
     return Collections.emptyList();
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -431,6 +431,7 @@ private static WebAppContext setupWebAppContext(
     } else {
       // use packaged WAR
       webApp.setWar(warFile.getAbsolutePath());
+      webApp.setExtractWAR(false);
       File warTempDirectory = new File(conf.getRelativeDir(ConfVars.ZEPPELIN_WAR_TEMPDIR) + contextPath);
       warTempDirectory.mkdir();
       LOG.info("ZeppelinServer Webapp path: {}", warTempDirectory.getPath());

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkIRInterpreterTest.java
Patch:
@@ -102,6 +102,9 @@ public void testSparkRInterpreter() throws InterpreterException, InterruptedExce
     } else {
       assertEquals(InterpreterResult.Code.SUCCESS, result.code());
       interpreterResultMessages = context.out.toInterpreterResultMessage();
+      if (interpreterResultMessages.get(0).getData().contains("2.2")) {
+        ENABLE_GOOGLEVIS_TEST = false;
+      }
       context = getInterpreterContext();
       result = interpreter.interpret("df <- as.DataFrame(faithful)\nhead(df)", context);
       interpreterResultMessages = context.out.toInterpreterResultMessage();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -110,6 +110,9 @@ && getDeployMode().equals("cluster")) {
 
         String scalaVersion = detectSparkScalaVersion(properties.getProperty("SPARK_HOME"));
         Path scalaFolder =  Paths.get(zConf.getZeppelinHome(), "/interpreter/spark/scala-" + scalaVersion);
+        if (!scalaFolder.toFile().exists()) {
+          throw new IOException("spark scala folder " + scalaFolder.toFile() + " doesn't exist");
+        }
         List<String> scalaJars = StreamSupport.stream(
                 Files.newDirectoryStream(scalaFolder, entry -> Files.isRegularFile(entry))
                         .spliterator(),

File: rlang/src/main/java/org/apache/zeppelin/r/IRInterpreter.java
Patch:
@@ -133,7 +133,7 @@ protected void initIRKernel() throws IOException, InterpreterException {
             .replace("${timeout}", timeout)
             .replace("${isSparkSupported}", "\"" + isSparkSupported() + "\"")
             .replace("${authSecret}", "\"" + sparkRBackend.socketSecret() + "\"");
-    LOGGER.info("Init IRKernel via script:\n" + code);
+    LOGGER.debug("Init IRKernel via script:\n" + code);
     ExecuteResponse response = jupyterKernelClient.block_execute(ExecuteRequest.newBuilder()
             .setCode(code).build());
     if (response.getStatus() != ExecuteStatus.SUCCESS) {

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterMatplotlibTest.java
Patch:
@@ -227,7 +227,7 @@ public void testNoClose() throws InterpreterException {
     // again but in a different color.
     ret = pyspark.interpret("plt.plot([1, 2, 3])", context);
     ret2 = pyspark.interpret("plt.show()", context);
-    assertNotSame(ret1.message().get(0).getData(), ret2.message().get(0).getData());
+    assertEquals(0, ret2.message().size());
   }
 
   @Test

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ConfInterpreter.java
Patch:
@@ -85,7 +85,7 @@ public void cancel(InterpreterContext context) throws InterpreterException {
 
   @Override
   public FormType getFormType() throws InterpreterException {
-    return null;
+    return FormType.NATIVE;
   }
 
   @Override

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -103,6 +103,7 @@ public void setUp() throws Exception {
     InterpreterSetting mockInterpreterSetting = mock(InterpreterSetting.class);
     when(mockInterpreterSetting.isUserAuthorized(any())).thenReturn(true);
     when(mockInterpreterGroup.getInterpreterSetting()).thenReturn(mockInterpreterSetting);
+    when(mockInterpreterSetting.getStatus()).thenReturn(InterpreterSetting.Status.READY);
     SearchService searchService = new LuceneSearch(zeppelinConfiguration);
     Credentials credentials = new Credentials(false, null, null);
     Notebook notebook =

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -470,8 +470,8 @@ protected InterpreterResult jobRun() throws Throwable {
 
       // inject form
       String script = this.scriptText;
-      if ("simple".equalsIgnoreCase(localProperties.get("form")) ||
-              interpreter.getFormType() == FormType.SIMPLE) {
+      String form = localProperties.getOrDefault("form", interpreter.getFormType().name());
+      if (form.equalsIgnoreCase("simple")) {
         // inputs will be built from script body
         LinkedHashMap<String, Input> inputs = Input.extractSimpleQueryForm(script, false);
         LinkedHashMap<String, Input> noteInputs = Input.extractSimpleQueryForm(script, true);

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -219,7 +219,7 @@ private void appendToPythonPath(Map<String, String> env, String path) {
     if (!env.containsKey("PYTHONPATH")) {
       env.put("PYTHONPATH", path);
     } else {
-      env.put("PYTHONPATH", env.get("PYTHONPATH") + ":" + path);
+      env.put("PYTHONPATH", env.get("PYTHONPATH") + File.pathSeparator + path);
     }
   }
 

File: rlang/src/test/java/org/apache/zeppelin/r/ShinyInterpreterTest.java
Patch:
@@ -47,7 +47,7 @@
 
 public class ShinyInterpreterTest {
 
-  private ShinyInterpreter interpreter;
+  protected ShinyInterpreter interpreter;
 
   @Before
   public void setUp() throws InterpreterException {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -812,6 +812,7 @@ public enum ConfVars {
     ZEPPELIN_SSL_TRUSTSTORE_TYPE("zeppelin.ssl.truststore.type", null),
     ZEPPELIN_SSL_TRUSTSTORE_PASSWORD("zeppelin.ssl.truststore.password", null),
     ZEPPELIN_WAR("zeppelin.war", "zeppelin-web/dist"),
+    ZEPPELIN_ANGULAR_WAR("zeppelin.angular.war", "zeppelin-web-angular/dist"),
     ZEPPELIN_WAR_TEMPDIR("zeppelin.war.tempdir", "webapps"),
 
     ZEPPELIN_INTERPRETER_JSON("zeppelin.interpreter.setting", "interpreter-setting.json"),

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -191,6 +191,8 @@ private static void start(boolean withAuth,
           zeppelinHome.getAbsolutePath());
       System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_WAR.getVarName(),
           new File("../zeppelin-web/dist").getAbsolutePath());
+      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_ANGULAR_WAR.getVarName(),
+              new File("../zeppelin-web-angular/dist").getAbsolutePath());
       System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_CONF_DIR.getVarName(),
           confDir.getAbsolutePath());
       System.setProperty(
@@ -208,6 +210,7 @@ private static void start(boolean withAuth,
       // some test profile does not build zeppelin-web.
       // to prevent zeppelin starting up fail, create zeppelin-web/dist directory
       new File("../zeppelin-web/dist").mkdirs();
+      new File("../zeppelin-web-angular/dist").mkdirs();
 
       LOG.info("Staring test Zeppelin up...");
       ZeppelinConfiguration conf = ZeppelinConfiguration.create();

File: rlang/src/test/java/org/apache/zeppelin/r/ShinyInterpreterTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResultMessage;
 import org.apache.zeppelin.interpreter.LazyOpenInterpreter;
+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -42,6 +43,7 @@
 import static junit.framework.TestCase.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.mockito.Mockito.mock;
 
 public class ShinyInterpreterTest {
 
@@ -240,6 +242,7 @@ protected InterpreterContext getInterpreterContext() {
             .setInterpreterOut(new InterpreterOutput(null))
             .setLocalProperties(new HashMap<>())
             .setInterpreterClassName(ShinyInterpreter.class.getName())
+            .setIntpEventClient(mock(RemoteInterpreterEventClient.class))
             .build();
     return context;
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ParagraphInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class ParagraphInfo implements org.apache.thrift.TBase<ParagraphInfo, ParagraphInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ParagraphInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParagraphInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public enum RemoteInterpreterEventType implements org.apache.thrift.TEnum {
   NO_OP(1),
   ANGULAR_OBJECT_ADD(2),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ServiceException.java
Patch:
@@ -24,7 +24,7 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-07")
 public class ServiceException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");
 

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelClient.java
Patch:
@@ -119,6 +119,8 @@ private boolean checkForShinyApp(String response) throws IOException {
                 height + "\" width=\"" + width + "\" frameBorder=\"0\"></iframe>");
         context.out.flush();
         context.out.write("\n%text ");
+        context.getIntpEventClient().checkpointOutput(context.getNoteId(),
+                context.getParagraphId());
         return true;
       }
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener.java
Patch:
@@ -42,4 +42,6 @@ public void onParaInfosReceived(String noteId, String paragraphId,
                                   String interpreterSettingId, Map<String, String> metaInfos);
 
   List<ParagraphInfo> getParagraphList(String user, String noteId) throws TException, IOException;
+
+  void checkpointOutput(String noteId, String paragraphId);
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -641,6 +641,7 @@ public Paragraph removeParagraph(String user, String paragraphId) {
   public void clearParagraphOutputFields(Paragraph p) {
     p.setReturn(null, null);
     p.cleanRuntimeInfos();
+    p.cleanOutputBuffer();
   }
 
   public Paragraph clearPersonalizedParagraphOutput(String paragraphId, String user) {
@@ -1094,6 +1095,7 @@ public static Note fromJson(String json) throws IOException {
   public void postProcessParagraphs() {
     for (Paragraph p : paragraphs) {
       p.cleanRuntimeInfos();
+      p.cleanOutputBuffer();
       p.parseText();
 
       if (p.getStatus() == Status.PENDING || p.getStatus() == Status.RUNNING) {

File: rlang/src/main/java/org/apache/zeppelin/r/IRInterpreter.java
Patch:
@@ -73,7 +73,7 @@ protected boolean isSparkSupported() {
    * @return
    */
   protected int sparkVersion() {
-    return 20403;
+    return 20404;
   }
 
   /**

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest24.java
Patch:
@@ -33,7 +33,7 @@ public SparkIntegrationTest24(String sparkVersion) {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.4.3"}
+            {"2.4.4"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest24.java
Patch:
@@ -33,7 +33,7 @@ public ZeppelinSparkClusterTest24(String sparkVersion) throws Exception {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.4.3"}
+            {"2.4.4"}
     });
   }
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ParagraphInfo.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class ParagraphInfo implements org.apache.thrift.TBase<ParagraphInfo, ParagraphInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ParagraphInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ParagraphInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventService.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class RemoteInterpreterEventService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public enum RemoteInterpreterEventType implements org.apache.thrift.TEnum {
   NO_OP(1),
   ANGULAR_OBJECT_ADD(2),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ServiceException.java
Patch:
@@ -16,15 +16,15 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.12.0)
+ * Autogenerated by Thrift Compiler (0.13.0)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
 package org.apache.zeppelin.interpreter.thrift;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
-@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-10")
+@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-01-06")
 public class ServiceException extends org.apache.thrift.TException implements org.apache.thrift.TBase<ServiceException, ServiceException._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceException> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceException");
 

File: zeppelin-jupyter-interpreter/src/test/java/org/apache/zeppelin/jupyter/IRKernelTest.java
Patch:
@@ -64,7 +64,9 @@ public void setUp() throws InterpreterException {
 
   @After
   public void tearDown() throws InterpreterException {
-    interpreter.close();
+    if (interpreter != null) {
+      interpreter.close();
+    }
   }
 
   @Test

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -396,7 +396,9 @@ public boolean shouldSkipRunParagraph() {
       }
     }
 
-    return Strings.isNullOrEmpty(scriptText);
+    // don't skip paragraph when local properties is not empty.
+    // local properties can customize the behavior of interpreter. e.g. %r.shiny(type=run)
+    return Strings.isNullOrEmpty(scriptText) && localProperties.isEmpty();
   }
 
   public boolean execute(boolean blocking) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -124,7 +124,7 @@ && getDeployMode().equals("cluster")) {
           sparkProperties.put("spark.jars", StringUtils.join(additionalJars, ","));
         }
       } catch (Exception e) {
-        throw new IOException("Cannot make a list of additional jars from localRepo: {}", e);
+        throw new IOException("Fail to set additional jars for spark interpreter", e);
       }
     }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -558,7 +558,7 @@ protected InterpreterResult jobRun() throws Throwable {
         InterpreterContext.remove();
       }
     } catch (Exception e) {
-      return new InterpreterResult(Code.ERROR, e.getMessage());
+      return new InterpreterResult(Code.ERROR, ExceptionUtils.getStackTrace(e));
     }
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -601,6 +601,7 @@ public void clearAllParagraphOutput(String noteId,
     }
 
     note.clearAllParagraphOutput();
+    notebook.saveNote(note, context.getAutheInfo());
     callback.onSuccess(note, context);
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -22,7 +22,6 @@
 import org.apache.spark.sql.SQLContext;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
 import org.apache.zeppelin.interpreter.BaseZeppelinContext;
-import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -70,7 +70,6 @@
 import org.apache.zeppelin.notebook.NotebookImportDeserializer;
 import org.apache.zeppelin.notebook.Paragraph;
 import org.apache.zeppelin.notebook.ParagraphJobListener;
-import org.apache.zeppelin.notebook.ParagraphWithRuntimeInfo;
 import org.apache.zeppelin.notebook.AuthorizationService;
 import org.apache.zeppelin.notebook.repo.NotebookRepoWithVersionControl.Revision;
 import org.apache.zeppelin.notebook.socket.Message;
@@ -551,7 +550,7 @@ private void inlineBroadcastParagraph(Note note, Paragraph p) {
     if (note.isPersonalizedMode()) {
       broadcastParagraphs(p.getUserParagraphMap(), p);
     } else {
-      Message message = new Message(OP.PARAGRAPH).put("paragraph", new ParagraphWithRuntimeInfo(p));
+      Message message = new Message(OP.PARAGRAPH).put("paragraph", p);
       connectionManager.broadcast(note.getId(), message);
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -105,7 +105,8 @@ public class Paragraph extends JobWithProgressPoller<InterpreterResult> implemen
   // personalized
   private transient Map<String, Paragraph> userParagraphMap = new HashMap<>();
   private transient Map<String, String> localProperties = new HashMap<>();
-  private transient Map<String, ParagraphRuntimeInfo> runtimeInfos = new HashMap<>();
+  // serialize runtimeInfos to frontend but not to note file (via gson's ExclusionStrategy)
+  private Map<String, ParagraphRuntimeInfo> runtimeInfos = new HashMap<>();
 
   public static String  PARAGRAPH_CONFIG_RUNONSELECTIONCHANGE = "runOnSelectionChange";
   private static boolean PARAGRAPH_CONFIG_RUNONSELECTIONCHANGE_DEFAULT = true;

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -298,13 +298,13 @@ public void testIPythonPlotting() throws InterpreterException, InterruptedExcept
         "df.hvplot()", context);
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     interpreterResultMessages = context.out.toInterpreterResultMessage();
-    assertEquals(5, interpreterResultMessages.size());
+    assertEquals(4, interpreterResultMessages.size());
+    assertEquals(InterpreterResult.Type.HTML, interpreterResultMessages.get(0).getType());
     assertEquals(InterpreterResult.Type.HTML, interpreterResultMessages.get(1).getType());
     assertEquals(InterpreterResult.Type.HTML, interpreterResultMessages.get(2).getType());
     assertEquals(InterpreterResult.Type.HTML, interpreterResultMessages.get(3).getType());
-    assertEquals(InterpreterResult.Type.HTML, interpreterResultMessages.get(4).getType());
     // docs_json is the source data of plotting which bokeh would use to render the plotting.
-    assertTrue(interpreterResultMessages.get(4).getData().contains("docs_json"));
+    assertTrue(interpreterResultMessages.get(3).getData().contains("docs_json"));
   }
 
 

File: spark/spark1-shims/src/main/scala/org/apache/zeppelin/spark/Spark1Shims.java
Patch:
@@ -70,7 +70,7 @@ public String showDataFrame(Object obj, int maxResult) {
       // fetch maxResult+1 rows so that we can check whether it is larger than zeppelin.spark.maxResult
       List<Row> rows = df.takeAsList(maxResult + 1);
       StringBuilder msg = new StringBuilder();
-      msg.append("%table ");
+      msg.append("\n%table ");
       msg.append(StringUtils.join(columns, "\t"));
       msg.append("\n");
       boolean isLargerThanMaxResult = rows.size() > maxResult;

File: spark/spark2-shims/src/main/scala/org/apache/zeppelin/spark/Spark2Shims.java
Patch:
@@ -71,7 +71,7 @@ public String showDataFrame(Object obj, int maxResult) {
       // fetch maxResult+1 rows so that we can check whether it is larger than zeppelin.spark.maxResult
       List<Row> rows = df.takeAsList(maxResult + 1);
       StringBuilder msg = new StringBuilder();
-      msg.append("%table ");
+      msg.append("\n%table ");
       msg.append(StringUtils.join(columns, "\t"));
       msg.append("\n");
       boolean isLargerThanMaxResult = rows.size() > maxResult;

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterResultTest.java
Patch:
@@ -33,7 +33,7 @@ public void testTextType() {
     result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%this is a TEXT type");
     assertEquals("No magic", InterpreterResult.Type.TEXT, result.message().get(0).getType());
     result = new InterpreterResult(InterpreterResult.Code.SUCCESS, "%\n");
-    assertEquals("No magic", InterpreterResult.Type.TEXT, result.message().get(0).getType());
+    assertEquals(0, result.message().size());
   }
 
   @Test

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java
Patch:
@@ -246,7 +246,7 @@ public void testSplitSqlQuery() throws SQLException, IOException {
     assertEquals("select '\\', ';'", multipleSqlArray.get(6));
     assertEquals("select '''', ';'", multipleSqlArray.get(7));
     assertEquals("select /*+ scan */ * from test_table", multipleSqlArray.get(8));
-    assertEquals("--singleLineComment\nselect * from test_table", multipleSqlArray.get(9));
+    assertEquals("select * from test_table", multipleSqlArray.get(9));
   }
 
   @Test
@@ -685,7 +685,7 @@ public void testSplitSqlQueryWithComments() throws SQLException, IOException,
         "*/\n" +
         "-- a ; b\n" +
         "select * from test_table WHERE ID = ';--';\n" +
-        "select * from test_table WHERE ID = '/*' -- test";
+        "select * from test_table WHERE ID = '/*'; -- test";
 
     InterpreterResult interpreterResult = t.interpret(sqlQuery, interpreterContext);
     assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelInterpreter.java
Patch:
@@ -25,8 +25,8 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.commons.lang.StringUtils;
+import org.apache.zeppelin.interpreter.AbstractInterpreter;
 import org.apache.zeppelin.interpreter.BaseZeppelinContext;
-import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -61,7 +61,7 @@
  * Jupyter Kernel. You can enhance the jupyter kernel by extending this class.
  * e.g. IPythonInterpreter.
  */
-public class JupyterKernelInterpreter extends Interpreter {
+public class JupyterKernelInterpreter extends AbstractInterpreter {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(JupyterKernelInterpreter.class);
 
@@ -238,7 +238,7 @@ public void close() throws InterpreterException {
   }
 
   @Override
-  public InterpreterResult interpret(String st,
+  public InterpreterResult internalInterpret(String st,
                                      InterpreterContext context) throws InterpreterException {
     zeppelinContext.setGui(context.getGui());
     zeppelinContext.setNoteGui(context.getNoteGui());

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -816,6 +816,7 @@ public enum ConfVars {
 
     ZEPPELIN_INTERPRETER_JSON("zeppelin.interpreter.setting", "interpreter-setting.json"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
+    ZEPPELIN_INTERPRETER_JUPYTER_KERNELS("zeppelin.interpreter.jupyter.kernels", "python:python,ir:r"),
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_DEP_MVNREPO("zeppelin.interpreter.dep.mvnRepo",
         "https://repo1.maven.org/maven2/"),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -94,6 +94,8 @@ public Notebook(
     this.notebookRepo = notebookRepo;
     this.replFactory = replFactory;
     this.interpreterSettingManager = interpreterSettingManager;
+    // TODO(zjffdu) cycle refer, not a good solution
+    this.interpreterSettingManager.setNotebook(this);
     this.noteSearchService = noteSearchService;
     this.credentials = credentials;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/scheduler/CronJob.java
Patch:
@@ -81,8 +81,7 @@ public void execute(JobExecutionContext context) {
       logger.error(e.getMessage(), e);
     }
     if (releaseResource) {
-      for (InterpreterSetting setting :
-          notebook.getInterpreterSettingManager().getInterpreterSettings(note.getId())) {
+      for (InterpreterSetting setting : note.getBindedInterpreterSettings()) {
         try {
           notebook
               .getInterpreterSettingManager()

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -233,7 +233,7 @@ public void testUnloadOnInterpreterRestart() throws IOException, InterpreterExce
 
     Note note1 = notebook.createNote("note1", anonymous);
     String mock1IntpSettingId = null;
-    for (InterpreterSetting setting : notebook.getBindedInterpreterSettings(note1.getId())) {
+    for (InterpreterSetting setting : note1.getBindedInterpreterSettings()) {
       if (setting.getName().equals("mock1")) {
         mock1IntpSettingId = setting.getId();
         break;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -190,16 +190,16 @@ public void testCreateUpdateRemoveSetting() throws IOException, InterpreterExcep
 
   }
 
-  @Test
+  //@Test
   public void testGetEditor() throws IOException, InterpreterNotFoundException {
     Interpreter echoInterpreter = interpreterFactory.getInterpreter("user1", "note1", "test.echo", "test");
     // get editor setting from interpreter-setting.json
-    Map<String, Object> editor = interpreterSettingManager.getEditorSetting(echoInterpreter, "user1", "note1", "test.echo");
+    Map<String, Object> editor = interpreterSettingManager.getEditorSetting("test.echo", "note1");
     assertEquals("java", editor.get("language"));
 
     // when editor setting doesn't exit, return the default editor
     Interpreter mock1Interpreter = interpreterFactory.getInterpreter("user1", "note1", "mock1", "test");
-    editor = interpreterSettingManager.getEditorSetting(mock1Interpreter,"user1", "note1", "mock1");
+    editor = interpreterSettingManager.getEditorSetting("mock1", "note1");
     assertEquals("text", editor.get("language"));
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest.java
Patch:
@@ -994,8 +994,6 @@ public void testConfInterpreter() throws IOException {
       p1.setText("%spark\nimport com.databricks.spark.csv._");
       note.run(p1.getId(), true);
       assertEquals(Status.FINISHED, p1.getStatus());
-
-      TestUtils.getInstance(Notebook.class).removeNote(note.getId(), anonymous);
     } finally {
       if (null != note) {
         TestUtils.getInstance(Notebook.class).removeNote(note.getId(), anonymous);

File: zeppelin-plugins/notebookrepo/mongo/src/main/java/org/apache/zeppelin/notebook/repo/MongoNotebookRepo.java
Patch:
@@ -432,7 +432,7 @@ String[] toPathArray(String notePath, boolean includeLast) {
   /**
    * Convert document to note.
    */
-  private Note documentToNote(Document doc) {
+  private Note documentToNote(Document doc) throws IOException {
     // document to JSON
     String json = doc.toJson();
     // JSON to note

File: zeppelin-plugins/notebookrepo/mongo/src/main/java/org/apache/zeppelin/notebook/repo/OldMongoNotebookRepo.java
Patch:
@@ -174,7 +174,7 @@ private void syncId() {
   /**
    * Convert document to note
    */
-  private Note documentToNote(Document doc) {
+  private Note documentToNote(Document doc) throws IOException {
     // document to JSON
     String json = doc.toJson();
     // JSON to note

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -250,6 +250,7 @@ public Response putNotePermissions(@PathParam("noteId") String noteId, String re
         gson.fromJson(req, new TypeToken<HashMap<String, HashSet<String>>>() {
         }.getType());
     Note note = notebook.getNote(noteId);
+    checkIfNoteIsNotNull(note);
 
     LOG.info("Set permissions {} {} {} {} {} {}", noteId, principal, permMap.get("owners"),
         permMap.get("readers"), permMap.get("runners"), permMap.get("writers"));

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/JobManagerService.java
Patch:
@@ -51,6 +51,9 @@ public List<NoteJobInfo> getNoteJobInfo(String noteId,
       throws IOException {
     List<NoteJobInfo> notesJobInfo = new ArrayList<>();
     Note jobNote = notebook.getNote(noteId);
+    if (jobNote == null) {
+      callback.onFailure(new IOException("Note " + noteId + " not found"), context);
+    }
     notesJobInfo.add(new NoteJobInfo(jobNote));
     callback.onSuccess(notesJobInfo, context);
     return notesJobInfo;

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -102,7 +102,7 @@ public Note getHomeNote(ServiceContext context,
       note = notebook.getNote(noteId);
       if (note != null) {
         if (!checkPermission(noteId, Permission.READER, Message.OP.GET_HOME_NOTE, context,
-            callback)) {
+                callback)) {
           return null;
         }
       }
@@ -802,7 +802,7 @@ public void getNoteByRevisionForCompare(String noteId,
     }
     Note revisionNote = null;
     if (revisionId.equals("Head")) {
-      revisionNote = notebook.getNote(noteId);
+      revisionNote = note;
     } else {
       revisionNote = notebook.getNoteByRevision(noteId, note.getPath(), revisionId,
           context.getAutheInfo());

File: zeppelin-server/src/main/java/org/apache/zeppelin/utils/InterpreterBindingUtils.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.zeppelin.notebook.Notebook;
 import org.apache.zeppelin.types.InterpreterSettingsList;
 
+import java.io.IOException;
 import java.util.LinkedList;
 import java.util.List;
 
@@ -28,7 +29,7 @@
  */
 public class InterpreterBindingUtils {
   public static List<InterpreterSettingsList> getInterpreterBindings(Notebook notebook,
-                                                                     String noteId) {
+                                                                     String noteId) throws IOException {
     List<InterpreterSettingsList> settingList = new LinkedList<>();
     List<InterpreterSetting> selectedSettings =
         notebook.getBindedInterpreterSettings(noteId);

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookSecurityRestApiTest.java
Patch:
@@ -17,15 +17,13 @@
 package org.apache.zeppelin.rest;
 
 import static org.hamcrest.CoreMatchers.is;
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
 
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.Map;
 import org.apache.commons.httpclient.HttpMethodBase;
 import org.apache.commons.httpclient.methods.DeleteMethod;

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -597,7 +597,7 @@ public void testCreateNoteWithDefaultInterpreterId() throws IOException {
   }
 
   @Test
-  public void testRuntimeInfos() {
+  public void testRuntimeInfos() throws IOException {
     // mock note
     String msg = "{\"op\":\"IMPORT_NOTE\",\"data\":" +
         "{\"note\":{\"paragraphs\": [{\"text\": \"Test " +

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener.java
Patch:
@@ -41,5 +41,5 @@ void runParagraphs(String noteId, List<Integer> paragraphIndices, List<String> p
   public void onParaInfosReceived(String noteId, String paragraphId,
                                   String interpreterSettingId, Map<String, String> metaInfos);
 
-  List<ParagraphInfo> getParagraphList(String user, String noteId) throws TException, ServiceException;
+  List<ParagraphInfo> getParagraphList(String user, String noteId) throws TException, IOException;
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinClient.java
Patch:
@@ -287,7 +287,7 @@ private Message zeppelinGetNoteMsg(String noteId, String principal, String ticke
     return getNoteMsg;
   }
 
-  public void handleMsgFromZeppelin(String message, String noteId) {
+  public void handleMsgFromZeppelin(String message, String noteId) throws IOException {
     Map<String, String> meta = new HashMap<>();
     //TODO(khalid): don't use zeppelinhubToken in this class, decouple
     meta.put("noteId", noteId);
@@ -315,7 +315,7 @@ public void handleMsgFromZeppelin(String message, String noteId) {
 
   }
 
-  private void relayToAllZeppelinHub(ZeppelinhubMessage hubMsg, String noteId) {
+  private void relayToAllZeppelinHub(ZeppelinhubMessage hubMsg, String noteId) throws IOException {
     if (StringUtils.isBlank(noteId)) {
       return;
     }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java
Patch:
@@ -35,6 +35,7 @@
 import org.mockito.Mock;
 import org.mockito.runners.MockitoJUnitRunner;
 
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -170,7 +171,7 @@ public void personalizedModeReturnDifferentParagraphInstancePerUser() {
     assertNotEquals(System.identityHashCode(user1Paragraph), System.identityHashCode(user2Paragraph));
   }
 
-  public void testNoteJson() {
+  public void testNoteJson() throws IOException {
     Note note = new Note("test", "", interpreterFactory, interpreterSettingManager, paragraphJobListener, credentials, noteEventListener);
     note.setName("/test_note");
     note.getConfig().put("config_1", "value_1");

File: zeppelin-jupyter-interpreter/src/main/java/org/apache/zeppelin/jupyter/JupyterKernelClient.java
Patch:
@@ -15,7 +15,7 @@
 * limitations under the License.
 */
 
-package org.apache.zeppelin.interpreter;
+package org.apache.zeppelin.jupyter;
 
 import io.grpc.ManagedChannel;
 import io.grpc.ManagedChannelBuilder;

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -333,7 +333,6 @@ private static Server setupJettyServer(ZeppelinConfiguration conf) {
     // Set some timeout options to make debugging easier.
     int timeout = 1000 * 30;
     connector.setIdleTimeout(timeout);
-    connector.setSoLingerTime(-1);
     connector.setHost(conf.getServerAddress());
     if (conf.useSsl()) {
       connector.setPort(conf.getServerSslPort());

File: flink/src/main/java/org/apache/zeppelin/flink/IPyFlinkInterpreter.java
Patch:
@@ -58,8 +58,8 @@ public BaseZeppelinContext buildZeppelinContext() {
   }
 
   @Override
-  protected Map<String, String> setupIPythonEnv() throws IOException {
-    Map<String, String> envs = super.setupIPythonEnv();
+  protected Map<String, String> setupKernelEnv() throws IOException {
+    Map<String, String> envs = super.setupKernelEnv();
     String pythonPath = envs.getOrDefault("PYTHONPATH", "");
     String pyflinkPythonPath = PyFlinkInterpreter.getPyFlinkPythonPath(properties);
     envs.put("PYTHONPATH", pythonPath + ":" + pyflinkPythonPath);

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -83,7 +83,7 @@ public void open() throws InterpreterException {
     iPythonInterpreter = getIPythonInterpreter();
     if (getProperty("zeppelin.python.useIPython", "true").equals("true") &&
         StringUtils.isEmpty(
-            iPythonInterpreter.checkIPythonPrerequisite(getPythonExec()))) {
+            iPythonInterpreter.checkKernelPrerequisite(getPythonExec()))) {
       try {
         iPythonInterpreter.open();
         LOGGER.info("IPython is available, Use IPythonInterpreter to replace PythonInterpreter");

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -384,7 +384,7 @@ public void testGrpcFrameSize() throws InterpreterException, IOException {
     tearDown();
 
     Properties properties = initIntpProperties();
-    properties.setProperty("zeppelin.ipython.grpc.message_size", "4000");
+    properties.setProperty("zeppelin.jupyter.kernel.grpc.message_size", "4000");
 
     startInterpreter(properties);
 
@@ -443,7 +443,7 @@ public void run() {
     Thread.sleep(3000);
     IPythonInterpreter iPythonInterpreter = (IPythonInterpreter)
             ((LazyOpenInterpreter) interpreter).getInnerInterpreter();
-    iPythonInterpreter.getIPythonProcessLauncher().stop();
+    iPythonInterpreter.getKernelProcessLauncher().stop();
     waiter.await(3000);
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -59,16 +59,16 @@ public void open() throws InterpreterException {
         !conf.get("spark.submit.deployMode").equals("cluster")) {
       setAdditionalPythonPath(PythonUtils.sparkPythonPath());
     }
-    setAddBulitinPy4j(false);
+    setUseBuiltinPy4j(false);
     setAdditionalPythonInitFile("python/zeppelin_ipyspark.py");
     setProperty("zeppelin.py4j.useAuth",
         sparkInterpreter.getSparkVersion().isSecretSocketSupported() + "");
     super.open();
   }
 
   @Override
-  protected Map<String, String> setupIPythonEnv() throws IOException {
-    Map<String, String> env = super.setupIPythonEnv();
+  protected Map<String, String> setupKernelEnv() throws IOException {
+    Map<String, String> env = super.setupKernelEnv();
     // set PYSPARK_PYTHON
     SparkConf conf = sparkInterpreter.getSparkContext().getConf();
     if (conf.contains("spark.pyspark.python")) {

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/InterpreterModeActionsIT.java
Patch:
@@ -73,7 +73,7 @@ public class InterpreterModeActionsIT extends AbstractZeppelinIT {
   static String interpreterOptionPath = "";
   static String originalInterpreterOption = "";
 
-  static String cmdPsPython = "ps aux | grep 'zeppelin_ipython' | grep -v 'grep' | wc -l";
+  static String cmdPsPython = "ps aux | grep 'kernel_server.py' | grep -v 'grep' | wc -l";
   static String cmdPsInterpreter = "ps aux | grep 'zeppelin/interpreter/python/*' |" +
       " sed -E '/grep|local-repo/d' | wc -l";
 

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkRInterpreterTest.java
Patch:
@@ -26,13 +26,11 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.LazyOpenInterpreter;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient;
-import org.apache.zeppelin.python.PythonInterpreter;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.Map;
 import java.util.Properties;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java
Patch:
@@ -91,7 +91,7 @@ public void init(ZeppelinConfiguration conf) throws IOException {
     }
 
     // sync for anonymous mode on start
-    if (getRepoCount() > 1 && conf.getBoolean(ConfVars.ZEPPELIN_ANONYMOUS_ALLOWED)) {
+    if (getRepoCount() > 1 && conf.isAnonymousAllowed()) {
       try {
         sync(AuthenticationInfo.ANONYMOUS);
       } catch (IOException e) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/security/Authentication.java
Patch:
@@ -49,7 +49,6 @@ public class Authentication implements Runnable {
   private static final String CIPHER_MODE = "AES/CBC/PKCS5PADDING";
   private static final int ivSize = 16;
 
-  private static final String ZEPPELIN_CONF_ANONYMOUS_ALLOWED = "zeppelin.anonymous.allowed";
   private static final String ZEPPELINHUB_USER_KEY = "zeppelinhub.user.key";
   private String token;
   private boolean authEnabled;
@@ -75,8 +74,7 @@ private Authentication(String token, ZeppelinConfiguration conf) {
     client = new HttpClient(connectionManager);
     this.token = token;
 
-    authEnabled = !conf.getBoolean("ZEPPELIN_ALLOW_ANONYMOUS",
-        ZEPPELIN_CONF_ANONYMOUS_ALLOWED, true);
+    authEnabled = !conf.isAnonymousAllowed();
 
     userKey = conf.getString("ZEPPELINHUB_USER_KEY",
         ZEPPELINHUB_USER_KEY, "");

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -889,7 +889,6 @@ public String getStatus(String sessionId, String jobId)
     synchronized (interpreterGroup) {
       List<Interpreter> interpreters = interpreterGroup.get(sessionId);
       if (interpreters == null) {
-        logger.info("getStatus:" + Status.UNKNOWN.name());
         return Status.UNKNOWN.name();
       }
 
@@ -902,7 +901,6 @@ public String getStatus(String sessionId, String jobId)
         }
       }
     }
-    logger.info("getStatus:" + Status.UNKNOWN.name());
     return Status.UNKNOWN.name();
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -557,7 +557,7 @@ protected InterpreterResult jobRun() throws Throwable {
         InterpreterContext.remove();
       }
     } catch (Exception e) {
-      return new InterpreterResult(Code.ERROR, ExceptionUtils.getStackTrace(e));
+      return new InterpreterResult(Code.ERROR, e.getMessage());
     }
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -233,6 +233,7 @@ public void parseText() {
         } else {
           this.scriptText = this.text.substring(headingSpace.length() + intpText.length() + 1).trim();
         }
+        config.putAll(localProperties);
       } else {
         setIntpText("");
         this.scriptText = this.text.trim();

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/CorsFilter.java
Patch:
@@ -76,6 +76,7 @@ private void addCorsHeaders(HttpServletResponse response, String origin) {
       response.setHeader("Strict-Transport-Security", zeppelinConfiguration.getStrictTransport());
     }
     response.setHeader("X-XSS-Protection", zeppelinConfiguration.getXxssProtection());
+    response.setHeader("X-Content-Type-Options", zeppelinConfiguration.getXContentTypeOptions());
   }
 
   @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -717,7 +717,7 @@ public boolean isUserAuthorized(List<String> userAndRoles) {
     }
     Set<String> intersection = new HashSet<>(userAndRoles);
     intersection.retainAll(option.getOwners());
-    return intersection.isEmpty();
+    return !intersection.isEmpty();
   }
 
   //////////////////////////// IMPORTANT ////////////////////////////////////////////////

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -392,7 +392,7 @@ public Scheduler getScheduler() {
     // one session own one Scheduler, so that when one session is closed, all the jobs/paragraphs
     // running under the scheduler of this session will be aborted.
     Scheduler s = new RemoteScheduler(
-        RemoteInterpreter.class.getSimpleName() + getInterpreterGroup().getId(),
+        RemoteInterpreter.class.getSimpleName() + "-" + getInterpreterGroup().getId() + "-" + sessionId,
         SchedulerFactory.singleton().getExecutor(),
         this);
     return SchedulerFactory.singleton().createOrGetScheduler(s);

File: zeppelin-plugins/notebookrepo/filesystem/src/test/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepoTest.java
Patch:
@@ -74,6 +74,7 @@ public void testBasics() throws IOException {
 
     Map<String, Object> config = new HashMap<>();
     config.put("config_1", "value_1");
+    config.put("isZeppelinNotebookCronEnable", false);
     note.setConfig(config);
     hdfsNotebookRepo.save(note, authInfo);
     assertEquals(1, hdfsNotebookRepo.list(authInfo).size());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -106,6 +106,7 @@ public class Note implements JsonSerializable {
 
   public Note() {
     generateId();
+    setCronSupported(ZeppelinConfiguration.create());
   }
 
   public Note(String path, String defaultInterpreterGroup, InterpreterFactory factory,
@@ -1032,6 +1033,7 @@ public static Note fromJson(String json) {
     try
     {
       Note note = gson.fromJson(json, Note.class);
+      note.setCronSupported(ZeppelinConfiguration.create());
       convertOldInput(note);
       note.info.remove("isRunning");
       note.postProcessParagraphs();

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -528,7 +528,7 @@ public void testEditOnDoubleClick() throws Exception {
     }
   }
 
-  @Test
+  //@Test
   public void testSingleDynamicFormTextInput() throws Exception {
     try {
       createNewNote();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -138,7 +138,7 @@ public void testCreateUpdateRemoveSetting() throws IOException, InterpreterExcep
     interpreterSetting = interpreterSettingManager2.getByName("test3");
     assertEquals("test3", interpreterSetting.getName());
     assertEquals("test", interpreterSetting.getGroup());
-    assertEquals(6, interpreterSetting.getJavaProperties().size());
+    assertEquals(4, interpreterSetting.getJavaProperties().size());
     assertEquals("value_4", interpreterSetting.getJavaProperties().getProperty("property_4"));
     assertEquals("scoped", interpreterSetting.getOption().perNote);
     assertEquals("scoped", interpreterSetting.getOption().perUser);

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -105,7 +105,6 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     // incomplete
     result = interpreter.interpret("println(a", getInterpreterContext());
     assertEquals(InterpreterResult.Code.INCOMPLETE, result.code());
-    assertEquals("Incomplete expression", result.message());
 
     // syntax error
     result = interpreter.interpret("println(b)", getInterpreterContext());

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java
Patch:
@@ -276,9 +276,9 @@ private List<Object> checkbox(String name,
                                 List<Object> defaultChecked,
                                 boolean noteForm) {
     if (defaultChecked == null ) {
-      List<Object> defaultValues = new LinkedList<>();
+      defaultChecked = new ArrayList<>();
       for (ParamOption option : options) {
-        defaultValues.add(option.getValue());
+        defaultChecked.add(option.getValue());
       }
     }
     if (noteForm) {

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -105,6 +105,7 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     // incomplete
     result = interpreter.interpret("println(a", getInterpreterContext());
     assertEquals(InterpreterResult.Code.INCOMPLETE, result.code());
+    assertEquals("Incomplete expression", result.message());
 
     // syntax error
     result = interpreter.interpret("println(b)", getInterpreterContext());

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -361,8 +361,6 @@ private static void setupNotebookServer(
         new ServletHolder(serviceLocator.getService(NotebookServer.class));
     servletHolder.setInitParameter("maxTextMessageSize", maxTextMessageSize);
 
-    final ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
-
     webapp.addServlet(servletHolder, "/ws/*");
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/LocalConfigStorage.java
Patch:
@@ -128,7 +128,8 @@ static void atomicWriteToFile(String content, File file) throws IOException {
     }
     try {
       file.getParentFile().mkdirs();
-      Files.move(tempFile.toPath(), destinationFilePath,  StandardCopyOption.ATOMIC_MOVE);
+      Files.move(tempFile.toPath(), destinationFilePath,
+              StandardCopyOption.REPLACE_EXISTING); //StandardCopyOption.ATOMIC_MOVE);
     } catch (IOException iox) {
       if (!tempFile.delete()) {
         tempFile.deleteOnExit();

File: cassandra/src/test/java/org/apache/zeppelin/cassandra/InterpreterLogicTest.java
Patch:
@@ -165,7 +165,7 @@ public void should_extract_variable_and_choices() throws Exception {
     //Given
     AngularObjectRegistry angularObjectRegistry = new AngularObjectRegistry("cassandra", null);
     when(intrContext.getAngularObjectRegistry()).thenReturn(angularObjectRegistry);
-    when(intrContext.getGui().select(eq("name"), eq("'Paul'"), optionsCaptor.capture()))
+    when(intrContext.getGui().select(eq("name"), optionsCaptor.capture(), eq("'Paul'")))
             .thenReturn("'Jack'");
 
     //When

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -204,7 +204,7 @@ public void cancel(InterpreterContext context) {
 
   @Override
   public FormType getFormType() {
-    return FormType.NONE;
+    return FormType.NATIVE;
   }
 
   @Override

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -48,7 +48,6 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
 
 
 public class SparkInterpreterTest {
@@ -263,7 +262,7 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     assertEquals("pwd", pwd.getName());
 
     context = getInterpreterContext();
-    result = interpreter.interpret("z.checkbox(\"checkbox_1\", Seq(\"value_2\"), Seq((\"value_1\", \"name_1\"), (\"value_2\", \"name_2\")))", context);
+    result = interpreter.interpret("z.checkbox(\"checkbox_1\", Seq((\"value_1\", \"name_1\"), (\"value_2\", \"name_2\")), Seq(\"value_2\"))", context);
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     assertEquals(1, context.getGui().getForms().size());
     assertTrue(context.getGui().getForms().get("checkbox_1") instanceof CheckBox);
@@ -278,7 +277,7 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     assertEquals("name_2", checkBox.getOptions()[1].getDisplayName());
 
     context = getInterpreterContext();
-    result = interpreter.interpret("z.select(\"select_1\", Seq(\"value_2\"), Seq((\"value_1\", \"name_1\"), (\"value_2\", \"name_2\")))", context);
+    result = interpreter.interpret("z.select(\"select_1\", Seq((\"value_1\", \"name_1\"), (\"value_2\", \"name_2\")), Seq(\"value_2\"))", context);
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     assertEquals(1, context.getGui().getForms().size());
     assertTrue(context.getGui().getForms().get("select_1") instanceof Select);

File: submarine/src/main/java/org/apache/zeppelin/submarine/SubmarineInterpreter.java
Patch:
@@ -237,7 +237,7 @@ private String createOldGUI(InterpreterContext context) {
     commandOptions[1] = new ParamOption(COMMAND_JOB_SHOW, COMMAND_JOB_SHOW);
     commandOptions[2] = new ParamOption(COMMAND_USAGE, COMMAND_USAGE);
     String command = (String) context.getGui().
-        select("Submarine Command", "", commandOptions);
+        select("Submarine Command", commandOptions, "");
 
     String distributed = this.properties.getProperty(MACHINELEARNING_DISTRIBUTED_ENABLE, "false");
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java
Patch:
@@ -393,8 +393,8 @@ public void testConvertDynamicForms() throws InterpreterException {
     List<Object> defaultValues = new ArrayList();
     defaultValues.add("default1");
     defaultValues.add("default2");
-    gui.checkbox("checkbox_id", defaultValues, paramOptions);
-    gui.select("select_id", "default", paramOptions);
+    gui.checkbox("checkbox_id", paramOptions, defaultValues);
+    gui.select("select_id", paramOptions, "default");
     gui.textbox("textbox_id");
     Map<String, Input> expected = new LinkedHashMap<>(gui.getForms());
     Interpreter interpreter = interpreterSetting.getDefaultInterpreter("user1", "note1");

File: zeppelin-plugins/notebookrepo/gcs/src/test/java/org/apache/zeppelin/notebook/repo/GCSNotebookRepoTest.java
Patch:
@@ -42,12 +42,15 @@
 import org.apache.zeppelin.scheduler.Job.Status;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 
+//TODO(zjffdu) This test fails due to some changes in google, need to fix
+@Ignore
 @RunWith(Parameterized.class)
 public class GCSNotebookRepoTest {
   private static final AuthenticationInfo AUTH_INFO = AuthenticationInfo.ANONYMOUS;

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -559,6 +559,8 @@ protected void bootstrapInterpreter(String resourceName) throws IOException {
           InterpreterContext.get());
       if (result.code() != Code.SUCCESS) {
         throw new IOException("Fail to run bootstrap script: " + resourceName + "\n" + result);
+      } else {
+        LOGGER.debug("Bootstrap python successfully.");
       }
     } catch (InterpreterException e) {
       throw new IOException(e);

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -98,6 +98,7 @@ public void open() throws InterpreterException {
       try {
         bootstrapInterpreter("python/zeppelin_pyspark.py");
       } catch (IOException e) {
+        LOGGER.error("Fail to bootstrap pyspark", e);
         throw new InterpreterException("Fail to bootstrap pyspark", e);
       }
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/DistributedResourcePool.java
Patch:
@@ -56,6 +56,8 @@ public Resource get(String name, boolean remote) {
       if (resources.isEmpty()) {
         return null;
       } else {
+        // TODO(zjffdu) just assume there's no dupicated resources with the same name, but
+        // this assumption is false
         return resources.get(0);
       }
     } else {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourceId.java
Patch:
@@ -26,6 +26,7 @@
 public class ResourceId implements JsonSerializable, Serializable {
   private static final Gson gson = new Gson();
 
+  // resourcePoolId is the interpreterGroupId which is unique across one Zeppelin instance
   private final String resourcePoolId;
   private final String name;
   private final String noteId;

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -144,7 +144,8 @@ public void open() throws InterpreterException {
       launchIPythonKernel(ipythonPort);
       setupJVMGateway(jvmGatewayPort);
     } catch (Exception e) {
-      throw new InterpreterException("Fail to open IPythonInterpreter", e);
+      throw new InterpreterException("Fail to open IPythonInterpreter\n" +
+              ExceptionUtils.getStackTrace(e), e);
     }
   }
 

File: python/src/test/java/org/apache/zeppelin/python/BasePythonInterpreterTest.java
Patch:
@@ -46,6 +46,7 @@ public abstract class BasePythonInterpreterTest extends ConcurrentTestCase {
 
   protected InterpreterGroup intpGroup;
   protected Interpreter interpreter;
+  protected boolean isPython2;
 
   @Before
   public abstract void setUp() throws InterpreterException;
@@ -301,7 +302,8 @@ public void testZeppelinContext() throws InterpreterException, InterruptedExcept
     context = getInterpreterContext();
     result = interpreter.interpret("import pandas as pd\n" +
         "df = pd.DataFrame({'id':[1,2,3], 'name':['a','b','c']})\nz.show(df)", context);
-    assertEquals(InterpreterResult.Code.SUCCESS, result.code());
+    assertEquals(context.out.toInterpreterResultMessage().toString(),
+            InterpreterResult.Code.SUCCESS, result.code());
     interpreterResultMessages = context.out.toInterpreterResultMessage();
     assertEquals(1, interpreterResultMessages.size());
     assertEquals(InterpreterResult.Type.TABLE, interpreterResultMessages.get(0).getType());

File: zeppelin-plugins/notebookrepo/s3/src/main/java/org/apache/zeppelin/notebook/repo/OldS3NotebookRepo.java
Patch:
@@ -187,6 +187,8 @@ public List<OldNoteInfo> list(AuthenticationInfo subject) throws IOException {
             info = getNoteInfo(objectSummary.getKey());
             if (info != null) {
               infos.add(info);
+            } else {
+              LOG.debug("Unable to get notebook info for key: " + objectSummary.getKey());
             }
           }
         }
@@ -215,7 +217,7 @@ private Note getNote(String key) throws IOException {
 
   private OldNoteInfo getNoteInfo(String key) throws IOException {
     Note note = getNote(key);
-    return new OldNoteInfo(note);
+    return note != null ? new OldNoteInfo(note) : null;
   }
 
   @Override

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -130,7 +130,8 @@ public void testIpythonKernelCrash_shouldNotHangExecution()
     result = interpreter.interpret(codeKillKernel, context);
     assertEquals(Code.ERROR, result.code());
     output = context.out.toInterpreterResultMessage().get(0);
-    assertTrue(output.getData().equals("Ipython kernel has been stopped. Please check logs. "
+    assertTrue(output.getData(),
+            output.getData().equals("Ipython kernel has been stopped. Please check logs. "
         + "It might be because of an out of memory issue."));
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java
Patch:
@@ -167,6 +167,7 @@ public void close() {
       for (Interpreter interpreter : session) {
         try {
           interpreter.close();
+          interpreter.getScheduler().stop();
         } catch (InterpreterException e) {
           LOGGER.warn("Fail to close interpreter: " + interpreter.getClassName(), e);
         }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/AbstractScheduler.java
Patch:
@@ -76,7 +76,7 @@ public Job cancel(String jobId) {
 
   @Override
   public void run() {
-    while (!terminate) {
+    while (!terminate && !Thread.currentThread().isInterrupted()) {
       Job runningJob = null;
       try {
         runningJob = queue.take();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/RemoteInterpreterEventServer.java
Patch:
@@ -140,6 +140,7 @@ public void stop() {
     if (appendFuture != null) {
       appendFuture.cancel(true);
     }
+    appendService.shutdownNow();
     LOGGER.info("RemoteInterpreterEventServer is stopped");
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/LdapRealm.java
Patch:
@@ -321,8 +321,8 @@ private Set<String> getRoles(PrincipalCollection principals,
       systemLdapCtx = ldapContextFactory.getSystemLdapContext();
       return rolesFor(principals, username, systemLdapCtx,
         ldapContextFactory, SecurityUtils.getSubject().getSession());
-    } catch (AuthenticationException ae) {
-      ae.printStackTrace();
+    } catch (Throwable t) {
+      log.warn("Failed to get roles in current context for " + username, t);
       return Collections.emptySet();
     } finally {
       LdapUtils.closeContext(systemLdapCtx);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java
Patch:
@@ -35,9 +35,7 @@ public class AngularObjectRegistry {
   private final String GLOBAL_KEY = "_GLOBAL_";
   private AngularObjectRegistryListener listener;
   private String interpreterId;
-  
-
-  AngularObjectListener angularObjectListener;
+  private AngularObjectListener angularObjectListener;
 
   public AngularObjectRegistry(final String interpreterId,
       final AngularObjectRegistryListener listener) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Constants.java
Patch:
@@ -30,6 +30,8 @@ public class Constants {
   public static final String ZEPPELIN_INTERPRETER_PORT = "zeppelin.interpreter.port";
 
   public static final String ZEPPELIN_INTERPRETER_HOST = "zeppelin.interpreter.host";
+  
+  public static final String INJECT_CREDENTIALS = "injectCredentials";
 
   public static final String EXISTING_PROCESS = "existing_process";
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/Helium.java
Patch:
@@ -454,7 +454,7 @@ public List<HeliumPackage> getBundlePackagesToBundle() {
         }
       }
     }
-    new LinkedList<>().addAll(orderedBundlePackages);
+    output.addAll(orderedBundlePackages);
     return output;
   }
 

File: zeppelin-plugins/launcher/docker/src/main/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterProcess.java
Patch:
@@ -454,7 +454,8 @@ private void copyRunFileToContainer(String containerId)
       LOGGER.warn("{} file not found, Did not upload the krb5.conf to the container!", krb5conf);
     }
 
-    // TODO: Interpreter specific settings, we should consider general property or some other more elegant solution
+    // TODO(Vince): Interpreter specific settings, we should consider general property or some
+    // other more elegant solution
     // 3) Get the keytab file in each interpreter properties
     // Upload Keytab file to container, Keep the same directory as local host
     // 3.1) shell interpreter properties keytab file

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -154,7 +154,7 @@ protected void configure() {
             bindAsContract(AuthorizationService.class).to(Singleton.class);
             // TODO(jl): Will make it more beautiful
             if (!StringUtils.isBlank(conf.getShiroPath())) {
-              bind(ShiroAuthenticationService.class).to(AuthenticationService.class).in(Immediate.class);
+              bind(ShiroAuthenticationService.class).to(AuthenticationService.class).in(Singleton.class);
             } else {
               // TODO(jl): Will be added more type
               bind(NoAuthenticationService.class).to(AuthenticationService.class).in(Singleton.class);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -690,6 +690,8 @@ public String getLauncherPlugin() {
     } else {
       if (group.equals("spark")) {
         return "SparkInterpreterLauncher";
+      } else if (group.equals("flink")) {
+        return "FlinkInterpreterLauncher";
       } else {
         return "StandardInterpreterLauncher";
       }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -521,7 +521,7 @@ public String getCredentialsEncryptKey() {
   }
 
   public String getCredentialsPath() {
-    return getRelativeDir(String.format("%s/credentials.json", getConfDir()));
+    return getConfigFSDir() + "/credentials.json";
   }
 
   public String getShiroPath() {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.zeppelin.notebook.NotebookAuthorization;
 import org.apache.zeppelin.notebook.OldNoteInfo;
 import org.apache.zeppelin.notebook.Paragraph;
-import org.apache.zeppelin.notebook.repo.zeppelinhub.security.Authentication;
 import org.apache.zeppelin.plugin.PluginManager;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.util.Util;

File: cassandra/src/test/java/org/apache/zeppelin/cassandra/CassandraInterpreterTest.java
Patch:
@@ -773,6 +773,7 @@ private static String reformatHtml(String rawHtml) {
             .replaceAll(">\\s+<", "><")
             .replaceAll("(?s)data-target=\"#[a-f0-9-]+(?:_asCQL|_indices_asCQL)?\"", "")
             .replaceAll("(?s)id=\"[a-f0-9-]+(?:_asCQL|_indices_asCQL)?\"", "")
+            .replaceAll("AND memtable_flush_period_in_ms = 0", "")
             .trim();
   }
 

File: zeppelin-integration/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -55,7 +55,9 @@ protected void setTextOfParagraph(int paragraphNo, String text) {
   }
 
   protected void runParagraph(int paragraphNo) {
-    driver.findElement(By.xpath(getParagraphXPath(paragraphNo) + "//span[@class='icon-control-play']")).click();
+    By by = By.xpath(getParagraphXPath(paragraphNo) + "//span[@class='icon-control-play']");
+    pollingWait(by, 5);
+    driver.findElement(by).click();
   }
 
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -383,6 +383,6 @@ private InterpreterSetting convertResponseToInterpreterSetting(String rawRespons
   }
 
   private static String getSimulatedMarkdownResult(String markdown) {
-    return String.format("<div class=\"markdown-body\">\n<p>%s</p>\n</div>", markdown);
+    return String.format("<div class=\"markdown-body\">\n<p>%s</p>\n\n</div>", markdown);
   }
 }

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcess.java
Patch:
@@ -321,7 +321,7 @@ String buildSparkSubmitOptions() {
   }
 
   private String getInterpreterPodDnsName() {
-    return String.format("%s.%s.svc.cluster.local",
+    return String.format("%s.%s.svc",
         getPodName(), // service name and pod name is the same
         kubectl.getNamespace());
   }

File: zeppelin-plugins/launcher/k8s-standard/src/main/java/org/apache/zeppelin/interpreter/launcher/K8sStandardInterpreterLauncher.java
Patch:
@@ -103,12 +103,12 @@ String getHostname() {
 
   /**
    * get Zeppelin server host dns.
-   * return <hostname>.<namespace>.svc.cluster.local
+   * return <hostname>.<namespace>.svc
    * @throws IOException
    */
   private String getZeppelinServiceHost() throws IOException {
     if (isRunningOnKubernetes()) {
-      return String.format("%s.%s.svc.cluster.local",
+      return String.format("%s.%s.svc",
               getHostname(), // service name and pod name should be the same
               getNamespace());
     } else {

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sRemoteInterpreterProcessTest.java
Patch:
@@ -60,7 +60,7 @@ public void testGetHostPort() {
     int port = intp.getPort();
 
     // then
-    assertEquals(String.format("%s.%s.svc.cluster.local", intp.getPodName(), kubectl.getNamespace()), intp.getHost());
+    assertEquals(String.format("%s.%s.svc", intp.getPodName(), kubectl.getNamespace()), intp.getHost());
     assertEquals(12321, intp.getPort());
   }
 

File: zeppelin-plugins/launcher/k8s-standard/src/test/java/org/apache/zeppelin/interpreter/launcher/K8sStandardInterpreterLauncherTest.java
Patch:
@@ -53,7 +53,7 @@ public void testK8sLauncher() throws IOException {
     Properties properties = new Properties();
     properties.setProperty("ENV_1", "VALUE_1");
     properties.setProperty("property_1", "value_1");
-    properties.setProperty("CALLBACK_HOST", "zeppelin-server.default.svc.cluster.local");
+    properties.setProperty("CALLBACK_HOST", "zeppelin-server.default.svc");
     properties.setProperty("CALLBACK_PORT", "12320");
     InterpreterOption option = new InterpreterOption();
     option.setUserImpersonate(true);

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -422,7 +422,7 @@ public void testRunWithServerRestart() throws Exception {
       assertEquals(resp.get("status"), "OK");
       post2.releaseConnection();
 
-      assertEquals(p1.getReturn().toString(), Job.Status.FINISHED, p1.getStatus());
+      assertEquals(Job.Status.FINISHED, p1.getStatus());
       assertEquals(p2.getReturn().toString(), Job.Status.FINISHED, p2.getStatus());
       assertNotNull(p2.getReturn());
       assertEquals("abc\n", p2.getReturn().message().get(0).getData());

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -787,7 +787,7 @@ public Map<String, String> dumpConfigurations(Predicate<String> predicate) {
    */
   public enum ConfVars {
     ZEPPELIN_HOME("zeppelin.home", "./"),
-    ZEPPELIN_ADDR("zeppelin.server.addr", "0.0.0.0"),
+    ZEPPELIN_ADDR("zeppelin.server.addr", "127.0.0.1"),
     ZEPPELIN_PORT("zeppelin.server.port", 8080),
     ZEPPELIN_SERVER_CONTEXT_PATH("zeppelin.server.context.path", "/"),
     ZEPPELIN_SSL("zeppelin.ssl", false),

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -242,6 +242,7 @@ private void setupJVMGateway(int jvmGatewayPort) throws IOException {
               .replace("${JVM_GATEWAY_PORT}", jvmGatewayPort + "")
               .replace("${JVM_GATEWAY_ADDRESS}", serverAddress)).build());
       if (response.getStatus() != ExecuteStatus.SUCCESS) {
+        LOGGER.error("Fail to run additional Python init file\n" + response.getOutput());
         throw new IOException("Fail to run additional Python init file: "
             + additionalPythonInitFile + "\n" + response.getOutput());
       }

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -558,7 +558,7 @@ protected void bootstrapInterpreter(String resourceName) throws IOException {
       InterpreterResult result = interpret(bootstrapCode + "\n" + "__zeppelin__._displayhook()",
           InterpreterContext.get());
       if (result.code() != Code.SUCCESS) {
-        throw new IOException("Fail to run bootstrap script: " + resourceName);
+        throw new IOException("Fail to run bootstrap script: " + resourceName + "\n" + result);
       }
     } catch (InterpreterException e) {
       throw new IOException(e);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncher.java
Patch:
@@ -99,6 +99,7 @@ public Map<String, String> buildEnvFromProperties(InterpreterLaunchContext conte
         String flinkHome = context.getProperties().get(key).toString();
         env.put("FLINK_CONF_DIR", flinkHome + "/conf");
         env.put("FLINK_LIB_DIR", flinkHome + "/lib");
+        env.put("FLINK_PLUGINS_DIR", flinkHome + "/plugins");
       }
     }
     env.put("INTERPRETER_GROUP_ID", context.getInterpreterGroupId());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteManager.java
Patch:
@@ -53,6 +53,7 @@ public class NoteManager {
   private Folder trash;
 
   private NotebookRepo notebookRepo;
+  // noteId -> notePath
   private Map<String, String> notesInfo;
 
   public NoteManager(NotebookRepo notebookRepo) throws IOException {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -58,7 +58,7 @@ public SparkInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage rec
   }
 
   @Override
-  protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) throws IOException {
+  public Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) throws IOException {
     Map<String, String> env = super.buildEnvFromProperties(context);
     Properties sparkProperties = new Properties();
     String sparkMaster = getSparkMaster(properties);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncher.java
Patch:
@@ -88,7 +88,7 @@ public InterpreterClient launch(InterpreterLaunchContext context) throws IOExcep
     }
   }
 
-  protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) throws IOException {
+  public Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) throws IOException {
     Map<String, String> env = new HashMap<>();
     for (Object key : context.getProperties().keySet()) {
       if (RemoteInterpreterUtils.isEnvString((String) key)) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -422,8 +422,8 @@ public void testRunWithServerRestart() throws Exception {
       assertEquals(resp.get("status"), "OK");
       post2.releaseConnection();
 
-      assertEquals(Job.Status.FINISHED, p1.getStatus());
-      assertEquals(Job.Status.FINISHED, p2.getStatus());
+      assertEquals(p1.getReturn().toString(), Job.Status.FINISHED, p1.getStatus());
+      assertEquals(p2.getReturn().toString(), Job.Status.FINISHED, p2.getStatus());
       assertNotNull(p2.getReturn());
       assertEquals("abc\n", p2.getReturn().message().get(0).getData());
     } finally {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/LocalConfigStorage.java
Patch:
@@ -115,7 +115,9 @@ static String readFromFile(File file) throws IOException {
   static void atomicWriteToFile(String content, File file) throws IOException {
     FileSystem defaultFileSystem = FileSystems.getDefault();
     Path destinationFilePath = defaultFileSystem.getPath(file.getCanonicalPath());
-    File tempFile = Files.createTempFile(destinationFilePath.getParent(), file.getName(), null).toFile();
+    Path destinationDirectory = destinationFilePath.getParent();
+    Files.createDirectories(destinationDirectory);
+    File tempFile = Files.createTempFile(destinationDirectory, file.getName(), null).toFile();
     try (FileOutputStream out = new FileOutputStream(tempFile)) {
       IOUtils.write(content, out);
     } catch (IOException iox) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterManagerServer.java
Patch:
@@ -285,16 +285,15 @@ public HashMap<String, Object> getIdleNodeMeta() {
   }
 
   public void unicastClusterEvent(String host, int port, String topic, String msg) {
-    LOGGER.info("send unicastClusterEvent message {}", msg);
+    LOGGER.info("send unicastClusterEvent host:{} port:{} topic:{} message:{}",
+        host, port, topic, msg);
 
     Address address = Address.from(host, port);
     CompletableFuture<byte[]> response = messagingService.sendAndReceive(address,
         topic, msg.getBytes(), Duration.ofSeconds(2));
     response.whenComplete((r, e) -> {
       if (null == e) {
         LOGGER.error(e.getMessage(), e);
-      } else {
-        LOGGER.info("unicastClusterEvent success! {}", msg);
       }
     });
   }

File: zeppelin-plugins/launcher/docker/src/main/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterProcess.java
Patch:
@@ -223,8 +223,10 @@ public void progress(ProgressMessage message) throws DockerException {
       execInContainer(containerId, dockerCommand, false);
     } catch (DockerException e) {
       LOGGER.error(e.getMessage(), e);
+      throw new IOException(e.getMessage());
     } catch (InterruptedException e) {
       LOGGER.error(e.getMessage(), e);
+      throw new IOException(e.getMessage());
     }
 
     long startTime = System.currentTimeMillis();
@@ -236,6 +238,7 @@ public void progress(ProgressMessage message) throws DockerException {
           dockerStarted.wait(getConnectTimeout());
         } catch (InterruptedException e) {
           LOGGER.error("Remote interpreter is not accessible");
+          throw new IOException(e.getMessage());
         }
       }
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinhubClient.java
Patch:
@@ -37,16 +37,16 @@
 import org.apache.zeppelin.notebook.socket.Message;
 import org.apache.zeppelin.notebook.socket.Message.OP;
 import org.apache.zeppelin.ticket.TicketContainer;
+import org.codehaus.jettison.json.JSONArray;
+import org.codehaus.jettison.json.JSONException;
+import org.codehaus.jettison.json.JSONObject;
 import org.eclipse.jetty.util.ssl.SslContextFactory;
 import org.eclipse.jetty.websocket.api.Session;
 import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;
 import org.eclipse.jetty.websocket.client.WebSocketClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.amazonaws.util.json.JSONArray;
-import com.amazonaws.util.json.JSONException;
-import com.amazonaws.util.json.JSONObject;
 import com.google.common.collect.Lists;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterMonitor.java
Patch:
@@ -157,7 +157,7 @@ private void checkHealthy() {
         if (heartbeat instanceof LocalDateTime) {
           LocalDateTime dHeartbeat = (LocalDateTime) heartbeat;
           Duration duration = Duration.between(dHeartbeat, now);
-          long timeInterval = duration.getSeconds();
+          long timeInterval = duration.getSeconds() * 1000; // Convert to milliseconds
           if (timeInterval > heartbeatTimeout) {
             // Set the metadata for the heartbeat timeout to offline
             // Cannot delete metadata

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -312,7 +312,7 @@ public boolean runParagraph(String noteId,
     p.setConfig(config);
 
     if (note.isPersonalizedMode()) {
-      p = note.getParagraph(paragraphId);
+      p = p.getUserParagraph(context.getAutheInfo().getUser());
       p.setText(text);
       p.setTitle(title);
       p.setAuthenticationInfo(context.getAutheInfo());
@@ -322,7 +322,7 @@ public boolean runParagraph(String noteId,
 
     try {
       notebook.saveNote(note, context.getAutheInfo());
-      boolean result = note.run(p.getId(), blocking);
+      boolean result = note.run(p.getId(), blocking, context.getAutheInfo().getUser());
       callback.onSuccess(p, context);
       return result;
     } catch (Exception ex) {

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java
Patch:
@@ -86,7 +86,7 @@ public abstract class BaseLivyInterpreter extends Interpreter {
 
   protected static final Logger LOGGER = LoggerFactory.getLogger(BaseLivyInterpreter.class);
   private static Gson gson = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
-  private static final String SESSION_NOT_FOUND_PATTERN = "\"Session '\\d+' not found.\"";
+  private static final String SESSION_NOT_FOUND_PATTERN = "(.*)\"Session '\\d+' not found.\"(.*)";
 
   protected volatile SessionInfo sessionInfo;
   private String livyURL;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java
Patch:
@@ -96,7 +96,7 @@ public List<File> load(String artifact, Collection<String> excludes, File destPa
         File destFile = new File(destPath, srcFile.getName());
         if (!destFile.exists() || !FileUtils.contentEquals(srcFile, destFile)) {
           FileUtils.copyFile(srcFile, destFile);
-          logger.info("copy {} to {}", srcFile.getAbsolutePath(), destPath);
+          logger.debug("copy {} to {}", srcFile.getAbsolutePath(), destPath);
         }
       }
     }
@@ -114,7 +114,7 @@ public synchronized void copyLocalDependency(String srcPath, File destPath)
 
     if (!destFile.exists() || !FileUtils.contentEquals(srcFile, destFile)) {
       FileUtils.copyFile(srcFile, destFile);
-      logger.info("copy {} to {}", srcFile.getAbsolutePath(), destPath);
+      logger.debug("copy {} to {}", srcFile.getAbsolutePath(), destPath);
     }
   }
 
@@ -142,7 +142,7 @@ private List<File> loadFromMvn(String artifact, Collection<String> excludes)
     List<File> files = new LinkedList<>();
     for (ArtifactResult artifactResult : listOfArtifact) {
       files.add(artifactResult.getArtifact().getFile());
-      logger.info("load {}", artifactResult.getArtifact().getFile().getAbsolutePath());
+      logger.debug("load {}", artifactResult.getArtifact().getFile().getAbsolutePath());
     }
 
     return files;

File: zeppelin-plugins/launcher/docker/src/test/java/org/apache/zeppelin/interpreter/launcher/DockerInterpreterProcessTest.java
Patch:
@@ -132,14 +132,14 @@ public void testTemplateBindings() throws IOException {
     assertTrue(null != dockerProperties.get("zeppelin.interpreter.connect.timeout"));
 
     List<String> listEnvs = intp.getListEnvs();
-    assertEquals(listEnvs.size(), 5);
+    assertEquals(listEnvs.size(), 6);
     Map<String, String> mapEnv = new HashMap<>();
     for (int i = 0; i < listEnvs.size(); i++) {
       String env = listEnvs.get(i);
       String kv[] = env.split("=");
       mapEnv.put(kv[0], kv[1]);
     }
-    assertEquals(mapEnv.size(), 5);
+    assertEquals(mapEnv.size(), 6);
     assertTrue(mapEnv.containsKey("ZEPPELIN_HOME"));
     assertTrue(mapEnv.containsKey("ZEPPELIN_CONF_DIR"));
     assertTrue(mapEnv.containsKey("ZEPPELIN_FORCE_STOP"));

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -426,10 +426,11 @@ public boolean execute(boolean blocking) {
       }
     } catch (InterpreterNotFoundException e) {
       InterpreterResult intpResult =
-          new InterpreterResult(InterpreterResult.Code.ERROR);
+          new InterpreterResult(InterpreterResult.Code.ERROR,
+                  String.format("Interpreter %s not found", this.intpText));
       setReturn(intpResult, e);
       setStatus(Job.Status.ERROR);
-      throw new RuntimeException(e);
+      return false;
     }
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/JdbcIntegrationTest.java
Patch:
@@ -77,6 +77,6 @@ public void testMySql() throws InterpreterException, InterruptedException {
             .setAuthenticationInfo(AuthenticationInfo.ANONYMOUS)
             .build();
     InterpreterResult interpreterResult = jdbcInterpreter.interpret("show databases;", context);
-    assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());
+    assertEquals(interpreterResult.toString(), InterpreterResult.Code.SUCCESS, interpreterResult.code());
   }
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterLauncher.java
Patch:
@@ -44,7 +44,7 @@ public void setProperties(Properties props) {
   protected int getConnectTimeout() {
     int connectTimeout =
         zConf.getInt(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);
-    if (properties.containsKey(
+    if (properties != null && properties.containsKey(
         ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getVarName())) {
       connectTimeout = Integer.parseInt(properties.getProperty(
           ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getVarName()));

File: zeppelin-plugins/launcher/cluster/src/main/java/org/apache/zeppelin/interpreter/launcher/ClusterInterpreterProcess.java
Patch:
@@ -36,9 +36,6 @@ public ClusterInterpreterProcess(
 
   @Override
   public void start(String userName) throws IOException {
-    ClusterInterpreterCheckThread interpreterCheckThread = new ClusterInterpreterCheckThread(this);
-    interpreterCheckThread.start();
-
     super.start(userName);
   }
 

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java
Patch:
@@ -181,7 +181,7 @@ public void testSelectQuery() throws SQLException, IOException, InterpreterExcep
     JDBCInterpreter t = new JDBCInterpreter(properties);
     t.open();
 
-    String sqlQuery = "select * from test_table WHERE ID in ('a', 'b')";
+    String sqlQuery = "select * from test_table WHERE ID in ('a', 'b'); ";
 
     InterpreterResult interpreterResult = t.interpret(sqlQuery, interpreterContext);
 
@@ -229,7 +229,7 @@ public void testSplitSqlQuery() throws SQLException, IOException {
         "select '\\', ';';" +
         "select '''', ';';" +
         "select /*+ scan */ * from test_table;" +
-        "--singleLineComment\nselect * from test_table";
+        "--singleLineComment\nselect * from test_table;";
 
 
     Properties properties = new Properties();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java
Patch:
@@ -96,7 +96,7 @@ public List<File> load(String artifact, Collection<String> excludes, File destPa
         File destFile = new File(destPath, srcFile.getName());
         if (!destFile.exists() || !FileUtils.contentEquals(srcFile, destFile)) {
           FileUtils.copyFile(srcFile, destFile);
-          logger.debug("copy {} to {}", srcFile.getAbsolutePath(), destPath);
+          logger.info("copy {} to {}", srcFile.getAbsolutePath(), destPath);
         }
       }
     }
@@ -114,7 +114,7 @@ public synchronized void copyLocalDependency(String srcPath, File destPath)
 
     if (!destFile.exists() || !FileUtils.contentEquals(srcFile, destFile)) {
       FileUtils.copyFile(srcFile, destFile);
-      logger.debug("copy {} to {}", srcFile.getAbsolutePath(), destPath);
+      logger.info("copy {} to {}", srcFile.getAbsolutePath(), destPath);
     }
   }
 
@@ -142,7 +142,7 @@ private List<File> loadFromMvn(String artifact, Collection<String> excludes)
     List<File> files = new LinkedList<>();
     for (ArtifactResult artifactResult : listOfArtifact) {
       files.add(artifactResult.getArtifact().getFile());
-      logger.debug("load {}", artifactResult.getArtifact().getFile().getAbsolutePath());
+      logger.info("load {}", artifactResult.getArtifact().getFile().getAbsolutePath());
     }
 
     return files;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterManagerServer.java
Patch:
@@ -74,7 +74,6 @@ public class ClusterManagerServer extends ClusterManager {
   public static String CLUSTER_INTP_EVENT_TOPIC = "CLUSTER_INTP_EVENT_TOPIC";
   public static String CLUSTER_NOTE_EVENT_TOPIC = "CLUSTER_NOTE_EVENT_TOPIC";
   public static String CLUSTER_AUTH_EVENT_TOPIC = "CLUSTER_AUTH_EVENT_TOPIC";
-  public static String CLUSTER_NB_AUTH_EVENT_TOPIC = "CLUSTER_NB_AUTH_EVENT_TOPIC";
   public static String CLUSTER_INTP_SETTING_EVENT_TOPIC = "CLUSTER_INTP_SETTING_EVENT_TOPIC";
 
   private ClusterManagerServer() {

File: zeppelin-plugins/notebookrepo/github/src/main/java/org/apache/zeppelin/notebook/repo/GitHubNotebookRepo.java
Patch:
@@ -61,6 +61,7 @@ public void init(ZeppelinConfiguration conf) throws IOException {
 
     configureRemoteStream();
     pullFromRemoteStream();
+    pushToRemoteSteam();
   }
 
   @Override

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java
Patch:
@@ -19,6 +19,8 @@
 
 import java.util.ArrayList;
 import java.util.List;
+
+import com.google.gson.Gson;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 
 /**

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterNoteAuthEventListenerTest.java
Patch:
@@ -37,7 +37,7 @@ public class ClusterNoteAuthEventListenerTest implements ClusterEventListener {
   @Override
   public void onClusterEvent(String msg) {
     receiveMsg = msg;
-    LOGGER.info("onClusterEvent : {}", msg);
+    LOGGER.info("ClusterNoteAuthEventListenerTest#onClusterEvent : {}", msg);
     ClusterMessage message = ClusterMessage.deserializeMessage(msg);
     String noteId  = message.get("noteId");
     String json  = message.get("subject");

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterNoteEventListenerTest.java
Patch:
@@ -40,7 +40,7 @@ public class ClusterNoteEventListenerTest implements ClusterEventListener {
   @Override
   public void onClusterEvent(String msg) {
     receiveMsg = msg;
-    LOGGER.info("onClusterEvent : {}", msg);
+    LOGGER.info("ClusterNoteEventListenerTest#onClusterEvent : {}", msg);
     ClusterMessage message = ClusterMessage.deserializeMessage(msg);
 
     Note note = null;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/AuthorizationService.java
Patch:
@@ -326,7 +326,6 @@ public void onClusterEvent(String msg) {
   // broadcast cluster event
   private void broadcastClusterEvent(ClusterEvent event, String noteId,
                                      String user, Set<String> set) {
-    ZeppelinConfiguration conf = ZeppelinConfiguration.create();
     if (!conf.isClusterMode()) {
       return;
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1491,7 +1491,7 @@ public void onSuccess(Revision revision, ServiceContext context) throws IOExcept
                       revisions)));
             } else {
               conn.send(serializeMessage(new Message(OP.ERROR_INFO).put("info",
-                  "Couldn't checkpoint note revision: possibly storage doesn't support versioning. "
+                  "Couldn't checkpoint note revision: possibly no changes found or storage doesn't support versioning. "
                       + "Please check the logs for more details.")));
             }
           }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/GitNotebookRepo.java
Patch:
@@ -131,7 +131,8 @@ public Revision checkpoint(String noteId,
     Revision revision = Revision.EMPTY;
     try {
       List<DiffEntry> gitDiff = git.diff().call();
-      if (!gitDiff.isEmpty()) {
+      boolean modified = gitDiff.parallelStream().anyMatch(diffEntry -> diffEntry.getNewPath().equals(noteFileName));
+      if (modified) {
         LOGGER.debug("Changes found for pattern '{}': {}", noteFileName, gitDiff);
         DirCache added = git.add().addFilepattern(noteFileName).call();
         LOGGER.debug("{} changes are about to be commited", added.getEntryCount());

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -70,6 +70,7 @@ public class AuthenticationIT extends AbstractZeppelinIT {
       "finance = *\n" +
       "[urls]\n" +
       "/api/version = anon\n" +
+      "/api/cluster/address = anon\n" +
       "/api/interpreter/** = authc, anyofrolesuser[admin, finance]\n" +
       "/** = authc";
 

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/InterpreterModeActionsIT.java
Patch:
@@ -66,6 +66,7 @@ public class InterpreterModeActionsIT extends AbstractZeppelinIT {
       "admin = *\n" +
       "[urls]\n" +
       "/api/version = anon\n" +
+      "/api/cluster/address = anon\n" +
       "/** = authc";
 
   static String originalShiro = "";

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/PersonalizeActionsIT.java
Patch:
@@ -64,6 +64,7 @@ public class PersonalizeActionsIT extends AbstractZeppelinIT {
       "user = *\n" +
       "[urls]\n" +
       "/api/version = anon\n" +
+      "/api/cluster/address = anon\n" +
       "/** = authc";
 
   static String originalShiro = "";

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/cluster/ClusterSingleNodeTest.java
Patch:
@@ -109,7 +109,7 @@ public void getServerMeta() {
     HashMap hashMap = (HashMap) meta;
 
     // Get metadata for the current service
-    Object values = hashMap.get(zServerHost + ":" + zServerPort);
+    Object values = hashMap.get(clusterClient.getClusterNodeName());
     assertEquals(true, (values instanceof HashMap));
     HashMap mapMetaValues = (HashMap) values;
 

File: zeppelin-plugins/launcher/cluster/src/main/java/org/apache/zeppelin/interpreter/launcher/ClusterInterpreterLauncher.java
Patch:
@@ -89,7 +89,7 @@ public InterpreterClient launch(InterpreterLaunchContext context) throws IOExcep
       HashMap<String, Object> meta = clusterServer.getIdleNodeMeta();
       if (null == meta) {
         LOGGER.error("Don't get idle node meta, launch interpreter on local.");
-        super.launch(context);
+        return createInterpreterProcess(context);
       }
 
       String srvHost = (String) meta.get(SERVER_HOST);

File: zeppelin-server/src/test/java/org/apache/zeppelin/cluster/ClusterEventTest.java
Patch:
@@ -302,6 +302,7 @@ public void testRenameNoteEvent() throws IOException {
       }
     }
   }
+
   @Test
   public void testCloneNoteEvent() throws IOException {
     Note note1 = null;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -85,6 +85,7 @@ public abstract class AbstractTestRestApi {
           "admin = *\n" +
           "[urls]\n" +
           "/api/version = anon\n" +
+          "/api/cluster/address = anon\n" +
           "/** = authc";
 
   private static String zeppelinShiroKnox =
@@ -108,6 +109,7 @@ public abstract class AbstractTestRestApi {
           "admin = *\n" +
           "[urls]\n" +
           "/api/version = anon\n" +
+          "/api/cluster/address = anon\n" +
           "/** = authc";
 
   private static File knoxSsoPem = null;

File: spark/spark1-shims/src/main/scala/org/apache/zeppelin/spark/Spark1Shims.java
Patch:
@@ -45,7 +45,7 @@ public void setupSparkListener(final String master,
       public void onJobStart(SparkListenerJobStart jobStart) {
         if (sc.getConf().getBoolean("spark.ui.enabled", true) &&
             !Boolean.parseBoolean(properties.getProperty("zeppelin.spark.ui.hidden", "false"))) {
-          buildSparkJobUrl(master, sparkWebUrl, jobStart.jobId(), context);
+          buildSparkJobUrl(master, sparkWebUrl, jobStart.jobId(), jobStart.properties(), context);
         }
       }
     });

File: spark/spark2-shims/src/main/scala/org/apache/zeppelin/spark/Spark2Shims.java
Patch:
@@ -46,7 +46,7 @@ public void onJobStart(SparkListenerJobStart jobStart) {
 
         if (sc.getConf().getBoolean("spark.ui.enabled", true) &&
             !Boolean.parseBoolean(properties.getProperty("zeppelin.spark.ui.hidden", "false"))) {
-          buildSparkJobUrl(master, sparkWebUrl, jobStart.jobId(), context);
+          buildSparkJobUrl(master, sparkWebUrl, jobStart.jobId(), jobStart.properties(), context);
         }
       }
     });

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -131,6 +131,8 @@ public class InterpreterSetting {
   private transient LifecycleManager lifecycleManager;
   private transient RecoveryStorage recoveryStorage;
   private transient RemoteInterpreterEventServer interpreterEventServer;
+
+  public static final String CLUSTER_INTERPRETER_LAUNCHER_NAME = "ClusterInterpreterLauncher";
   ///////////////////////////////////////////////////////////////////////////////////////////
 
   /**
@@ -671,7 +673,7 @@ public String getLauncherPlugin() {
     if (isRunningOnKubernetes()) {
       return "K8sStandardInterpreterLauncher";
     } else if (isRunningOnCluster()) {
-      return "ClusterInterpreterLauncher";
+      return InterpreterSetting.CLUSTER_INTERPRETER_LAUNCHER_NAME;
     } if (isRunningOnDocker()) {
       return "DockerInterpreterLauncher";
     } else {

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -140,7 +140,7 @@ protected void preCallPython(InterpreterContext context) {
     if (context.getLocalProperties().containsKey("pool")) {
       pool = "'" + context.getLocalProperties().get("pool") + "'";
     }
-    String setPoolStmt = "sc.setLocalProperty('spark.scheduler.pool', " + pool + ")";
+    String setPoolStmt = "if 'sc' in locals():\n\tsc.setLocalProperty('spark.scheduler.pool', " + pool + ")";
     callPython(new PythonInterpretRequest(setPoolStmt, false, false));
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java
Patch:
@@ -151,7 +151,7 @@ public void open() throws IOException, InterpreterException {
       cmd.addArgument(SparkRBackend.socketSecret());
     }
     // dump out the R command to facilitate manually running it, e.g. for fault diagnosis purposes
-    logger.debug(cmd.toString());
+    logger.debug("R Command: " + cmd.toString());
 
     executor = new DefaultExecutor();
     outputStream = new SparkRInterpreterOutputStream(logger, sparkRInterpreter);

File: spark/spark-shims/src/main/scala/org/apache/zeppelin/spark/SparkShims.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.hadoop.util.VersionInfo;
 import org.apache.hadoop.util.VersionUtil;
 import org.apache.zeppelin.interpreter.InterpreterContext;
-import org.apache.zeppelin.interpreter.ResultMessages;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
+import org.apache.zeppelin.interpreter.integration.DownloadUtils;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest24.java
Patch:
@@ -33,7 +33,7 @@ public SparkIntegrationTest24(String sparkVersion) {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.4.0"}
+            {"2.4.3"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest24.java
Patch:
@@ -33,7 +33,7 @@ public ZeppelinSparkClusterTest24(String sparkVersion) throws Exception {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.4.0"}
+            {"2.4.3"}
     });
   }
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/ProcessLauncher.java
Patch:
@@ -93,7 +93,6 @@ public void onTimeout() {
   }
 
   public void onProcessRunning() {
-    LOGGER.info("Process is running");
     transition(State.RUNNING);
   }
 

File: zeppelin-plugins/launcher/standard/src/main/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncher.java
Patch:
@@ -88,7 +88,7 @@ public InterpreterClient launch(InterpreterLaunchContext context) throws IOExcep
     }
   }
 
-  protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) {
+  protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) throws IOException {
     Map<String, String> env = new HashMap<>();
     for (Object key : context.getProperties().keySet()) {
       if (RemoteInterpreterUtils.isEnvString((String) key)) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/integration/DownloadUtils.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.integration;
+package org.apache.zeppelin.interpreter.integration;
 
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
@@ -65,7 +65,7 @@ public static String downloadFlink(String version) {
       LOGGER.info("Skip to download flink as it is already downloaded.");
       return targetFlinkHomeFolder.getAbsolutePath();
     }
-    download("flink", version, "-bin-hadoop27-scala_2.11.tgz");
+    download("flink", version, "-bin-hadoop2.6.tgz");
     return targetFlinkHomeFolder.getAbsolutePath();
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -583,7 +583,7 @@ public void onSuccess(List<NoteInfo> notesInfo,
 
   public void broadcastReloadedNoteList(NotebookSocket conn, ServiceContext context)
       throws IOException {
-    getNotebookService().listNotesInfo(false, context,
+    getNotebookService().listNotesInfo(true, context,
         new WebSocketServiceCallback<List<NoteInfo>>(conn) {
           @Override
           public void onSuccess(List<NoteInfo> notesInfo,

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterManager.java
Patch:
@@ -252,7 +252,7 @@ public void run() {
               while (!raftInitialized()) {
                 retry++;
                 if (0 == retry % 30) {
-                  LOGGER.error("Raft incomplete initialization! retry[{}]", retry);
+                  LOGGER.warn("Raft incomplete initialization! retry[{}]", retry);
                 }
                 Thread.sleep(100);
               }
@@ -268,6 +268,7 @@ public void run() {
               if (true == success) {
                 // The operation was successfully deleted
                 clusterMetaQueue.remove(metaEntity);
+                LOGGER.info("Cluster Meta Consume success! {}", metaEntity);
               } else {
                 LOGGER.error("Cluster Meta Consume faild!");
               }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/ClusterManagerClient.java
Patch:
@@ -18,7 +18,7 @@
 
 import io.atomix.primitive.PrimitiveState;
 
-import static org.apache.zeppelin.cluster.meta.ClusterMetaType.IntpProcessMeta;
+import static org.apache.zeppelin.cluster.meta.ClusterMetaType.INTP_PROCESS_META;
 
 /**
  * Cluster management client class instantiated in zeppelin-interperter
@@ -63,7 +63,7 @@ public void start(String metaKey) {
 
     // Instantiated cluster monitoring class
     clusterMonitor = new ClusterMonitor(this);
-    clusterMonitor.start(IntpProcessMeta, metaKey);
+    clusterMonitor.start(INTP_PROCESS_META, metaKey);
   }
 
   public void shutdown() {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/cluster/meta/ClusterMetaType.java
Patch:
@@ -20,6 +20,6 @@
  * Type of cluster metadata
  */
 public enum ClusterMetaType {
-  ServerMeta,
-  IntpProcessMeta
+  SERVER_META,
+  INTP_PROCESS_META
 }

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -62,7 +62,6 @@ protected Properties initIntpProperties() {
     p.setProperty("zeppelin.spark.useHiveContext", "false");
     p.setProperty("zeppelin.spark.maxResult", "3");
     p.setProperty("zeppelin.spark.importImplicit", "true");
-    p.setProperty("zeppelin.spark.useNew", "true");
     p.setProperty("zeppelin.pyspark.python", "python");
     p.setProperty("zeppelin.dep.localrepo", Files.createTempDir().getAbsolutePath());
     p.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterTest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.zeppelin.interpreter.InterpreterOutput;
 import org.apache.zeppelin.interpreter.LazyOpenInterpreter;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient;
-import org.apache.zeppelin.python.PythonInterpreter;
 import org.apache.zeppelin.python.PythonInterpreterTest;
 import org.junit.Test;
 
@@ -55,7 +54,6 @@ public void setUp() throws InterpreterException {
     properties.setProperty("zeppelin.pyspark.python", "python");
     properties.setProperty("zeppelin.dep.localrepo", Files.createTempDir().getAbsolutePath());
     properties.setProperty("zeppelin.pyspark.useIPython", "false");
-    properties.setProperty("zeppelin.spark.useNew", "true");
     properties.setProperty("zeppelin.spark.test", "true");
     properties.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");
     properties.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
@@ -107,7 +105,6 @@ public void testFailtoLaunchPythonProcess() throws InterpreterException {
     intpGroup = new InterpreterGroup();
 
     Properties properties = new Properties();
-    properties.setProperty("zeppelin.spark.useNew", "true");
     properties.setProperty("spark.app.name", "Zeppelin Test");
     properties.setProperty("spark.pyspark.python", "invalid_python");
     properties.setProperty("zeppelin.python.useIPython", "false");

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkRInterpreterTest.java
Patch:
@@ -53,7 +53,6 @@ public void setUp() throws InterpreterException {
     properties.setProperty("spark.app.name", "test");
     properties.setProperty("zeppelin.spark.maxResult", "100");
     properties.setProperty("zeppelin.spark.test", "true");
-    properties.setProperty("zeppelin.spark.useNew", "true");
     properties.setProperty("zeppelin.R.knitr", "true");
     properties.setProperty("spark.r.backendConnectionTimeout", "10");
     properties.setProperty("zeppelin.spark.deprecatedMsg.show", "false");

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -38,7 +38,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.mockito.Mockito.mock;
 
-public class NewSparkSqlInterpreterTest {
+public class SparkSqlInterpreterTest {
 
   private static SparkSqlInterpreter sqlInterpreter;
   private static SparkInterpreter sparkInterpreter;
@@ -53,7 +53,6 @@ public static void setUp() throws Exception {
     p.setProperty("zeppelin.spark.maxResult", "10");
     p.setProperty("zeppelin.spark.concurrentSQL", "true");
     p.setProperty("zeppelin.spark.sql.stacktrace", "true");
-    p.setProperty("zeppelin.spark.useNew", "true");
     p.setProperty("zeppelin.spark.useHiveContext", "true");
     p.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
 

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -176,7 +176,7 @@ public Scheduler getScheduler() {
 
   @Override
   public List<InterpreterCompletion> completion(String buf, int cursor,
-      InterpreterContext interpreterContext) {
+                                                InterpreterContext interpreterContext) {
     return null;
   }
 

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -409,7 +409,7 @@ private void createConnectionPool(String url, String user, String propertyKey,
     final String maxConnectionLifetime =
         StringUtils.defaultIfEmpty(getProperty("zeppelin.jdbc.maxConnLifetime"), "-1");
     poolableConnectionFactory.setMaxConnLifetimeMillis(Long.parseLong(maxConnectionLifetime));
-
+    poolableConnectionFactory.setValidationQuery("show databases");
     ObjectPool connectionPool = new GenericObjectPool(poolableConnectionFactory);
 
     poolableConnectionFactory.setPool(connectionPool);

File: elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/client/HttpBasedClient.java
Patch:
@@ -74,7 +74,7 @@ private boolean isSucceeded(HttpResponse response) {
   private JSONObject getParentField(JSONObject parent, String[] fields) {
     JSONObject obj = parent;
     for (int i = 0; i < fields.length - 1; i++) {
-      obj = obj.getJSONObject(fields[i]);
+      obj = obj.optJSONObject(fields[i]);
     }
     return obj;
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -453,7 +453,7 @@ public Paragraph insertParagraph(String noteId,
       throw new NoteNotFoundException(noteId);
     }
     Paragraph newPara = note.insertNewParagraph(index, context.getAutheInfo());
-    newPara.setConfig(config);
+    newPara.mergeConfig(config);
     notebook.saveNote(note, context.getAutheInfo());
     callback.onSuccess(newPara, context);
     return newPara;

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
Patch:
@@ -46,7 +46,7 @@ public class DepInterpreterTest {
   private Properties getTestProperties() throws IOException {
     Properties p = new Properties();
     p.setProperty("zeppelin.dep.localrepo", tmpDir.newFolder().getAbsolutePath());
-    p.setProperty("zeppelin.dep.additionalRemoteRepository", "spark-packages,http://dl.bintray.com/spark-packages/maven,false;");
+    p.setProperty("zeppelin.dep.additionalRemoteRepository", "spark-packages,https://dl.bintray.com/spark-packages/maven,false;");
     return p;
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -759,7 +759,7 @@ public enum ConfVars {
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_DEP_MVNREPO("zeppelin.interpreter.dep.mvnRepo",
-        "http://repo1.maven.org/maven2/"),
+        "https://repo1.maven.org/maven2/"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 60000),
     ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
     ZEPPELIN_INTERPRETER_GROUP_DEFAULT("zeppelin.interpreter.group.default", "spark"),
@@ -812,7 +812,7 @@ public enum ConfVars {
     ZEPPELIN_HELIUM_NODE_INSTALLER_URL("zeppelin.helium.node.installer.url",
             "https://nodejs.org/dist/"),
     ZEPPELIN_HELIUM_NPM_INSTALLER_URL("zeppelin.helium.npm.installer.url",
-            "http://registry.npmjs.org/"),
+            "https://registry.npmjs.org/"),
     ZEPPELIN_HELIUM_YARNPKG_INSTALLER_URL("zeppelin.helium.yarnpkg.installer.url",
             "https://github.com/yarnpkg/yarn/releases/download/"),
     // Allows a way to specify a ',' separated list of allowed origins for rest and websockets

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Booter.java
Patch:
@@ -77,7 +77,7 @@ public static RemoteRepository newCentralRepository() {
       mvnRepo = System.getProperty("zeppelin.interpreter.dep.mvnRepo");
     }
     if (mvnRepo == null) {
-      mvnRepo = "http://repo1.maven.org/maven2/";
+      mvnRepo = "https://repo1.maven.org/maven2/";
     }
 
     return new RemoteRepository("central", "default", mvnRepo);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -92,10 +92,11 @@ public class Note implements JsonSerializable {
    */
   private Map<String, Object> info = new HashMap<>();
 
+  // The front end needs to judge TRASH_FOLDER according to the path
+  private String path;
 
   /********************************** transient fields ******************************************/
   private transient boolean loaded = false;
-  private transient String path;
   private transient InterpreterFactory interpreterFactory;
   private transient InterpreterSettingManager interpreterSettingManager;
   private transient ParagraphJobListener paragraphJobListener;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.List;
 import java.util.Map;
 
+import com.google.common.truth.Truth;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
@@ -99,14 +100,14 @@ public void initNonemptyNotebookDir() throws IOException, GitAPIException {
 
     //then
     Git git = notebookRepo.getGit();
-    assertThat(git).isNotNull();
+    Truth.assertThat(git).isNotNull();
 
     assertThat(dotGit.exists()).isEqualTo(true);
     assertThat(notebookRepo.list(null)).isNotEmpty();
 
     List<DiffEntry> diff = git.diff().call();
     // no commit, diff isn't empty
-    assertThat(diff).isNotEmpty();
+    Truth.assertThat(diff).isNotEmpty();
   }
 
   @Test

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -31,7 +31,7 @@
  * Factory class for creating interpreters.
  *
  */
-public class InterpreterFactory {
+public class InterpreterFactory implements InterpreterFactoryInterface {
   private static final Logger LOGGER = LoggerFactory.getLogger(InterpreterFactory.class);
 
   private final InterpreterSettingManager interpreterSettingManager;
@@ -41,6 +41,7 @@ public InterpreterFactory(InterpreterSettingManager interpreterSettingManager) {
     this.interpreterSettingManager = interpreterSettingManager;
   }
 
+  @Override
   public Interpreter getInterpreter(String user,
                                     String noteId,
                                     String replName,

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -77,7 +77,7 @@ public void testAngularDisplay() throws Exception {
        * print angular template
        * %angular <div id='angularTestButton' ng-click='myVar=myVar+1'>BindingTest_{{myVar}}_</div>
        */
-      setTextOfParagraph(1, "println(\"%angular <div id=\\'angularTestButton\\' ng-click=\\'myVar=myVar+1\\'>BindingTest_{{myVar}}_</div>\")");
+      setTextOfParagraph(1, "%angular <div id=\\'angularTestButton\\' ng-click=\\'myVar=myVar+1\\'>BindingTest_{{myVar}}_</div>");
       runParagraph(1);
       waitForParagraph(1, "FINISHED");
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest.java
Patch:
@@ -148,6 +148,7 @@ public void testLocalMode() throws IOException, YarnException, InterpreterExcept
     sparkInterpreterSetting.setProperty("zeppelin.spark.useHiveContext", "false");
     sparkInterpreterSetting.setProperty("zeppelin.pyspark.useIPython", "false");
     sparkInterpreterSetting.setProperty("zeppelin.spark.scala.color", "false");
+    sparkInterpreterSetting.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
 
     testInterpreterBasics();
 
@@ -171,6 +172,7 @@ public void testYarnClientMode() throws IOException, YarnException, InterruptedE
     sparkInterpreterSetting.setProperty("PYSPARK_PYTHON", getPythonExec());
     sparkInterpreterSetting.setProperty("spark.driver.memory", "512m");
     sparkInterpreterSetting.setProperty("zeppelin.spark.scala.color", "false");
+    sparkInterpreterSetting.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
 
     testInterpreterBasics();
 
@@ -194,6 +196,7 @@ public void testYarnClusterMode() throws IOException, YarnException, Interrupted
     sparkInterpreterSetting.setProperty("PYSPARK_PYTHON", getPythonExec());
     sparkInterpreterSetting.setProperty("spark.driver.memory", "512m");
     sparkInterpreterSetting.setProperty("zeppelin.spark.scala.color", "false");
+    sparkInterpreterSetting.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
 
     testInterpreterBasics();
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest.java
Patch:
@@ -113,7 +113,7 @@ public void setupSparkInterpreter(String sparkHome) throws InterpreterException
             new InterpreterProperty("spark.serializer", "org.apache.spark.serializer.KryoSerializer"));
     sparkProperties.put("zeppelin.spark.scala.color",
             new InterpreterProperty("zeppelin.spark.scala.color", "false"));
-    sparkProperties.put("zzeppelin.spark.deprecatedMsg.show",
+    sparkProperties.put("zeppelin.spark.deprecatedMsg.show",
             new InterpreterProperty("zeppelin.spark.deprecatedMsg.show", "false"));
     TestUtils.getInstance(Notebook.class).getInterpreterSettingManager().restart(sparkIntpSetting.getId());
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -142,4 +142,6 @@ public interface RemoteFunction<T> {
    * called by RemoteInterpreterEventServer to notify that RemoteInterpreter Process is started
    */
   public abstract void processStarted(int port, String host);
+
+  public abstract String getErrorMessage();
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/UpgradeNoteFileTool.java
Patch:
@@ -40,5 +40,6 @@ public static void main(String[] args) throws IOException {
     ZeppelinConfiguration conf = ZeppelinConfiguration.create();
     NotebookRepoSync notebookRepoSync = new NotebookRepoSync(conf);
     notebookRepoSync.convertNoteFiles(conf, cmd.hasOption("d"));
+    notebookRepoSync.mergeAuthorizationInfo();
   }
 }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -85,6 +85,7 @@ public BaseZeppelinContext buildZeppelinContext() {
   @Override
   public InterpreterResult interpret(String st,
                                      InterpreterContext context) throws InterpreterException {
+    Utils.printDeprecateMessage(sparkInterpreter.getSparkVersion(), context, properties);
     InterpreterContext.set(context);
     String jobGroupId = Utils.buildJobGroupId(context);
     String jobDesc = Utils.buildJobDesc(context);

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -147,6 +147,7 @@ protected BaseZeppelinContext createZeppelinContext() {
   @Override
   public InterpreterResult interpret(String st, InterpreterContext context)
       throws InterpreterException {
+    Utils.printDeprecateMessage(sparkInterpreter.getSparkVersion(), context, properties);
     return super.interpret(st, context);
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -28,6 +28,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.IOException;
 import java.util.List;
 import java.util.Properties;
 
@@ -74,6 +75,7 @@ public void close() throws InterpreterException {
   @Override
   public InterpreterResult internalInterpret(String st, InterpreterContext context)
       throws InterpreterException {
+    Utils.printDeprecateMessage(delegation.getSparkVersion(), context, properties);
     return delegation.interpret(st, context);
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -121,7 +121,8 @@ public void open() throws InterpreterException {
   @Override
   public InterpreterResult interpret(String lines, InterpreterContext interpreterContext)
       throws InterpreterException {
-
+    Utils.printDeprecateMessage(sparkInterpreter.getSparkVersion(),
+            interpreterContext, properties);
     String jobGroup = Utils.buildJobGroupId(interpreterContext);
     String jobDesc = Utils.buildJobDesc(interpreterContext);
     sparkInterpreter.getSparkContext().setJobGroup(jobGroup, jobDesc, false);

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -78,7 +78,7 @@ public InterpreterResult internalInterpret(String st, InterpreterContext context
       return new InterpreterResult(Code.ERROR, "Spark "
           + sparkInterpreter.getSparkVersion().toString() + " is not supported");
     }
-
+    Utils.printDeprecateMessage(sparkInterpreter.getSparkVersion(), context, properties);
     sparkInterpreter.getZeppelinContext().setInterpreterContext(context);
     SQLContext sqlc = sparkInterpreter.getSQLContext();
     SparkContext sc = sqlc.sparkContext();

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java
Patch:
@@ -28,6 +28,7 @@ public class SparkVersion {
   public static final SparkVersion SPARK_1_6_0 = SparkVersion.fromVersionString("1.6.0");
 
   public static final SparkVersion SPARK_2_0_0 = SparkVersion.fromVersionString("2.0.0");
+  public static final SparkVersion SPARK_2_2_0 = SparkVersion.fromVersionString("2.2.0");
   public static final SparkVersion SPARK_2_3_0 = SparkVersion.fromVersionString("2.3.0");
   public static final SparkVersion SPARK_2_3_1 = SparkVersion.fromVersionString("2.3.1");
   public static final SparkVersion SPARK_2_4_0 = SparkVersion.fromVersionString("2.4.0");

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -64,6 +64,7 @@ protected Properties initIntpProperties() {
     p.setProperty("zeppelin.pyspark.python", "python");
     p.setProperty("zeppelin.dep.localrepo", Files.createTempDir().getAbsolutePath());
     p.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");
+    p.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
     return p;
   }
 

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/NewSparkSqlInterpreterTest.java
Patch:
@@ -55,6 +55,7 @@ public static void setUp() throws Exception {
     p.setProperty("zeppelin.spark.sql.stacktrace", "true");
     p.setProperty("zeppelin.spark.useNew", "true");
     p.setProperty("zeppelin.spark.useHiveContext", "true");
+    p.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
 
     intpGroup = new InterpreterGroup();
     sparkInterpreter = new SparkInterpreter(p);

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/OldSparkInterpreterTest.java
Patch:
@@ -87,6 +87,7 @@ public static Properties getSparkTestProperties(TemporaryFolder tmpDir) throws I
     p.setProperty("zeppelin.spark.property_1", "value_1");
     // disable color output for easy testing
     p.setProperty("zeppelin.spark.scala.color", "false");
+    p.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
     return p;
   }
 

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/OldSparkSqlInterpreterTest.java
Patch:
@@ -57,6 +57,7 @@ public static void setUp() throws Exception {
     p.setProperty("zeppelin.spark.maxResult", "10");
     p.setProperty("zeppelin.spark.concurrentSQL", "false");
     p.setProperty("zeppelin.spark.sql.stacktrace", "false");
+    p.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
 
     repl = new SparkInterpreter(p);
     intpGroup = new InterpreterGroup();

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterMatplotlibTest.java
Patch:
@@ -102,6 +102,7 @@ private static Properties getPySparkTestProperties() throws IOException {
     p.setProperty("zeppelin.dep.localrepo", tmpDir.newFolder().getAbsolutePath());
     p.setProperty("zeppelin.pyspark.useIPython", "false");
     p.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");
+    p.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
     return p;
   }
 

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterTest.java
Patch:
@@ -54,6 +54,7 @@ public void setUp() throws InterpreterException {
     properties.setProperty("zeppelin.spark.useNew", "true");
     properties.setProperty("zeppelin.spark.test", "true");
     properties.setProperty("zeppelin.python.gatewayserver_address", "127.0.0.1");
+    properties.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
 
     // create interpreter group
     intpGroup = new InterpreterGroup();

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkRInterpreterTest.java
Patch:
@@ -56,7 +56,8 @@ public void setUp() throws InterpreterException {
     properties.setProperty("zeppelin.spark.useNew", "true");
     properties.setProperty("zeppelin.R.knitr", "true");
     properties.setProperty("spark.r.backendConnectionTimeout", "10");
-
+    properties.setProperty("zeppelin.spark.deprecatedMsg.show", "false");
+    
     InterpreterContext context = getInterpreterContext();
     InterpreterContext.set(context);
     sparkRInterpreter = new SparkRInterpreter(properties);

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest.java
Patch:
@@ -112,6 +112,8 @@ public void setupSparkInterpreter(String sparkHome) throws InterpreterException
             new InterpreterProperty("spark.serializer", "org.apache.spark.serializer.KryoSerializer"));
     sparkProperties.put("zeppelin.spark.scala.color",
             new InterpreterProperty("zeppelin.spark.scala.color", "false"));
+    sparkProperties.put("zzeppelin.spark.deprecatedMsg.show",
+            new InterpreterProperty("zeppelin.spark.deprecatedMsg.show", "false"));
     TestUtils.getInstance(Notebook.class).getInterpreterSettingManager().restart(sparkIntpSetting.getId());
   }
 

File: zeppelin-plugins/notebookrepo/vfs/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -183,7 +183,7 @@ public void move(String folderPath, String newFolderPath,
   @Override
   public void remove(String noteId, String notePath, AuthenticationInfo subject)
       throws IOException {
-    LOGGER.info("Remove note: " + noteId + " +, notePath: " + notePath);
+    LOGGER.info("Remove note: " + noteId + ", notePath: " + notePath);
     FileObject noteFile = rootNotebookFileObject.resolveFile(
         buildNoteFileName(noteId, notePath), NameScope.DESCENDENT);
     noteFile.delete(Selectors.SELECT_SELF);

File: python/src/test/java/org/apache/zeppelin/python/BasePythonInterpreterTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.zeppelin.python;
 
+import net.jodah.concurrentunit.ConcurrentTestCase;
 import org.apache.zeppelin.display.ui.CheckBox;
 import org.apache.zeppelin.display.ui.Password;
 import org.apache.zeppelin.display.ui.Select;
@@ -41,7 +42,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 
-public abstract class BasePythonInterpreterTest {
+public abstract class BasePythonInterpreterTest extends ConcurrentTestCase {
 
   protected InterpreterGroup intpGroup;
   protected Interpreter interpreter;

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -83,7 +83,8 @@ public BaseZeppelinContext buildZeppelinContext() {
   }
 
   @Override
-  public InterpreterResult interpret(String st, InterpreterContext context) {
+  public InterpreterResult interpret(String st,
+                                     InterpreterContext context) throws InterpreterException {
     InterpreterContext.set(context);
     String jobGroupId = Utils.buildJobGroupId(context);
     String jobDesc = Utils.buildJobDesc(context);

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -44,7 +44,7 @@
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener;
 import org.apache.zeppelin.notebook.NoteEventListener;
 import org.apache.zeppelin.notebook.Notebook;
-import org.apache.zeppelin.notebook.NotebookAuthorization;
+import org.apache.zeppelin.notebook.AuthorizationService;
 import org.apache.zeppelin.notebook.repo.NotebookRepo;
 import org.apache.zeppelin.notebook.repo.NotebookRepoSync;
 import org.apache.zeppelin.rest.exception.WebApplicationExceptionMapper;
@@ -118,7 +118,6 @@ public static void main(String[] args) throws InterruptedException {
         new AbstractBinder() {
           @Override
           protected void configure() {
-            NotebookAuthorization notebookAuthorization = NotebookAuthorization.getInstance();
             Credentials credentials =
                 new Credentials(
                     conf.credentialsPersist(),
@@ -136,7 +135,7 @@ protected void configure() {
             bindAsContract(GsonProvider.class).in(Singleton.class);
             bindAsContract(WebApplicationExceptionMapper.class).in(Singleton.class);
             bindAsContract(AdminService.class).in(Singleton.class);
-            bind(notebookAuthorization).to(NotebookAuthorization.class);
+            bindAsContract(AuthorizationService.class).to(Singleton.class);
             // TODO(jl): Will make it more beautiful
             if (!StringUtils.isBlank(conf.getShiroPath())) {
               bind(ShiroAuthenticationService.class).to(AuthenticationService.class).in(Singleton.class);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.Notebook;
-import org.apache.zeppelin.notebook.NotebookAuthorization;
 import org.apache.zeppelin.notebook.Paragraph;
 import org.apache.zeppelin.notebook.repo.NotebookRepo;
 import org.apache.zeppelin.user.AuthenticationInfo;
@@ -57,7 +56,7 @@ public void startUp() throws IOException, SchedulerException {
     when(interpreterSettingManager.getDefaultInterpreterSetting()).thenReturn(defaultInterpreterSetting);
     notebook = new Notebook(ZeppelinConfiguration.create(), mock(NotebookRepo.class),
         mock(InterpreterFactory.class), interpreterSettingManager,
-        noteSearchService, mock(NotebookAuthorization.class),
+        noteSearchService,
         mock(Credentials.class), null);
   }
 

File: python/src/test/java/org/apache/zeppelin/python/BasePythonInterpreterTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.zeppelin.python;
 
+import net.jodah.concurrentunit.ConcurrentTestCase;
 import org.apache.zeppelin.display.ui.CheckBox;
 import org.apache.zeppelin.display.ui.Password;
 import org.apache.zeppelin.display.ui.Select;
@@ -41,7 +42,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.mockito.Mockito.mock;
 
-public abstract class BasePythonInterpreterTest {
+public abstract class BasePythonInterpreterTest extends ConcurrentTestCase {
 
   protected InterpreterGroup intpGroup;
   protected Interpreter interpreter;

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -83,7 +83,8 @@ public BaseZeppelinContext buildZeppelinContext() {
   }
 
   @Override
-  public InterpreterResult interpret(String st, InterpreterContext context) {
+  public InterpreterResult interpret(String st,
+                                     InterpreterContext context) throws InterpreterException {
     InterpreterContext.set(context);
     String jobGroupId = Utils.buildJobGroupId(context);
     String jobDesc = Utils.buildJobDesc(context);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOption.java
Patch:
@@ -149,7 +149,7 @@ public boolean perNoteIsolated() {
     return ISOLATED.equals(perNote);
   }
 
-  public boolean isProcess() {
+  public boolean isIsolated() {
     return perUserIsolated() || perNoteIsolated();
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -136,7 +136,7 @@ public void testNoteOperations() throws IOException {
     assertNull(note2);
     ArgumentCaptor<Exception> exception = ArgumentCaptor.forClass(Exception.class);
     verify(callback).onFailure(exception.capture(), any(ServiceContext.class));
-    assertTrue(exception.getValue().getCause().getMessage().equals("Note /folder_1/note1 existed"));
+    assertTrue(exception.getValue().getMessage().equals("Note '/folder_1/note1' existed"));
 
     // list note
     reset(callback);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -796,8 +796,6 @@ public enum ConfVars {
     ZEPPELIN_NOTEBOOK_STORAGE("zeppelin.notebook.storage",
         "org.apache.zeppelin.notebook.repo.GitNotebookRepo"),
     ZEPPELIN_NOTEBOOK_ONE_WAY_SYNC("zeppelin.notebook.one.way.sync", false),
-    ZEPPELIN_NOTEBOOK_NEW_FORMAT_CONVERT("zeppelin.notebook.new_format.convert", false),
-    ZEPPELIN_NOTEBOOK_NEW_FORMAT_DELETE_OLD("zeppelin.notebook.new_format.delete_old", false),
     // whether by default note is public or private
     ZEPPELIN_NOTEBOOK_PUBLIC("zeppelin.notebook.public", true),
     ZEPPELIN_INTERPRETER_REMOTE_RUNNER("zeppelin.interpreter.remoterunner",

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/RemoteResource.java
Patch:
@@ -17,15 +17,16 @@
 package org.apache.zeppelin.resource;
 
 import com.google.gson.Gson;
+import java.io.Serializable;
 import org.apache.zeppelin.common.JsonSerializable;
 
 /**
  * Resource that can retrieve data from remote
  */
-public class RemoteResource extends Resource implements JsonSerializable {
+public class RemoteResource extends Resource implements JsonSerializable, Serializable {
   private static final Gson gson = new Gson();
 
-  ResourcePoolConnector resourcePoolConnector;
+  transient ResourcePoolConnector resourcePoolConnector;
 
   RemoteResource(ResourceId resourceId, Object r) {
     super(null, resourceId, r);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourceId.java
Patch:
@@ -17,12 +17,13 @@
 package org.apache.zeppelin.resource;
 
 import com.google.gson.Gson;
+import java.io.Serializable;
 import org.apache.zeppelin.common.JsonSerializable;
 
 /**
  * Identifying resource
  */
-public class ResourceId implements JsonSerializable {
+public class ResourceId implements JsonSerializable, Serializable {
   private static final Gson gson = new Gson();
 
   private final String resourcePoolId;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ProxyRowIterator.java
Patch:
@@ -33,13 +33,13 @@ public ProxyRowIterator(Resource rows) {
 
   @Override
   public boolean hasNext() {
-    rows.invokeMethod("hasNext", null, null);
+    rows.invokeMethod("hasNext");
     return false;
   }
 
   @Override
   public Row next() {
-    return (Row) rows.invokeMethod("next", null, null);
+    return (Row) rows.invokeMethod("next");
   }
 
   @Override

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableDataProxy.java
Patch:
@@ -33,13 +33,13 @@ public TableDataProxy(Resource tableDataRemoteResource) {
   @Override
   public ColumnDef[] columns() {
     return (ColumnDef[]) resource.invokeMethod(
-        "columns", null, null);
+        "columns");
   }
 
   @Override
   public Iterator<Row> rows() {
     String resourceName = resource.getResourceId().getName() + ".rows";
-    Resource rows = resource.invokeMethod("rows", null, null, resourceName);
+    Resource rows = resource.invokeMethod("rows", resourceName);
 
     ProxyRowIterator it = new ProxyRowIterator(rows);
     return it;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterResourcePool.java
Patch:
@@ -92,11 +92,11 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
       Resource resource = resourcePool.get(noteId, paragraphId, name);
       LOGGER.info("Resource: " + resource);
       if (stmt.length >=4) {
-        Resource res = resource.invokeMethod(value, null, null, stmt[3]);
+        Resource res = resource.invokeMethod(value, stmt[3]);
         LOGGER.info("After invokeMethod: " + resource);
         ret = res.get();
       } else {
-        ret = resource.invokeMethod(value, null, null);
+        ret = resource.invokeMethod(value);
         LOGGER.info("After invokeMethod: " + ret);
       }
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -149,7 +149,7 @@ public Note createNote(String notePath,
       callback.onSuccess(note, context);
       return note;
     } catch (IOException e) {
-      callback.onFailure(new IOException("Fail to create note", e), context);
+      callback.onFailure(e, context);
       return null;
     }
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -595,7 +595,7 @@ public void testRuntimeInfos() {
         "{\"note\":{\"paragraphs\": [{\"text\": \"Test " +
         "paragraphs import\"," + "\"progressUpdateIntervalMs\":500," +
         "\"config\":{},\"settings\":{}}]," +
-        "\"name\": \"Test Zeppelin notebook import\",\"config\": " +
+        "\"name\": \"Test RuntimeInfos\",\"config\": " +
         "{}}}}";
     Message messageReceived = notebookServer.deserializeMessage(msg);
     Note note = null;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -183,7 +183,7 @@ public Note createNote(String notePath,
     Note note =
         new Note(notePath, defaultInterpreterGroup, replFactory, interpreterSettingManager,
             paragraphJobListener, credentials, noteEventListeners);
-    saveNote(note, subject);
+    noteManager.addNote(note, subject);
     fireNoteCreateEvent(note, subject);
     return note;
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/ConfigurationsRestApi.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.server.JsonResponse;
 import org.apache.zeppelin.service.ConfigurationService;
-import org.apache.zeppelin.service.SecurityService;
+import org.apache.zeppelin.service.AuthenticationService;
 
 /** Configurations Rest API Endpoint. */
 @Path("/configurations")
@@ -41,8 +41,8 @@ public class ConfigurationsRestApi extends AbstractRestApi {
 
   @Inject
   public ConfigurationsRestApi(
-      SecurityService securityService, ConfigurationService configurationService) {
-    super(securityService);
+          AuthenticationService authenticationService, ConfigurationService configurationService) {
+    super(authenticationService);
     this.configurationService = configurationService;
   }
 

File: zeppelin-plugins/notebookrepo/git/src/main/java/org/apache/zeppelin/notebook/repo/GitNotebookRepo.java
Patch:
@@ -214,10 +214,10 @@ public List<Revision> revisionHistory(String noteId,
   }
 
   @Override
-  public Note setNoteRevision(String noteId, String noteName, String revId,
+  public Note setNoteRevision(String noteId, String notePath, String revId,
                               AuthenticationInfo subject)
       throws IOException {
-    Note revisionNote = get(noteId, noteName, revId, subject);
+    Note revisionNote = get(noteId, notePath, revId, subject);
     if (revisionNote != null) {
       save(revisionNote, subject);
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -700,7 +700,7 @@ public NotebookRepoWithVersionControl.Revision checkpointNote(
     }
 
     NotebookRepoWithVersionControl.Revision revision =
-        notebook.checkpointNote(noteId, note.getName(), commitMessage, context.getAutheInfo());
+        notebook.checkpointNote(noteId, note.getPath(), commitMessage, context.getAutheInfo());
     callback.onSuccess(revision, context);
     return revision;
   }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.zeppelin.spark;
 
+import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.spark.SparkContext;
 import org.apache.spark.sql.SQLContext;
 import org.apache.zeppelin.interpreter.AbstractInterpreter;
@@ -94,10 +95,10 @@ public InterpreterResult internalInterpret(String st, InterpreterContext context
       return new InterpreterResult(Code.SUCCESS, msg);
     } catch (Exception e) {
       if (Boolean.parseBoolean(getProperty("zeppelin.spark.sql.stacktrace"))) {
-        throw new InterpreterException(e);
+        return new InterpreterResult(Code.ERROR, ExceptionUtils.getStackTrace(e));
       }
       logger.error("Invocation target exception", e);
-      String msg = e.getMessage()
+      String msg = e.getCause().getMessage()
               + "\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace";
       return new InterpreterResult(Code.ERROR, msg);
     }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java
Patch:
@@ -108,8 +108,9 @@ public boolean newerThanEquals(SparkVersion versionToCompare) {
   }
 
   public boolean newerThanEqualsPatchVersion(SparkVersion versionToCompare) {
-    return version / 100 == versionToCompare.version / 100 &&
-            version % 100 >= versionToCompare.version % 100;
+    return majorVersion == versionToCompare.majorVersion &&
+            minorVersion == versionToCompare.minorVersion &&
+            patchVersion >= versionToCompare.patchVersion;
   }
 
   public boolean olderThan(SparkVersion versionToCompare) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-8-9")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-3-4")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest21.java
Patch:
@@ -33,7 +33,7 @@ public SparkIntegrationTest21(String sparkVersion) {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.1.2"}
+            {"2.1.3"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest22.java
Patch:
@@ -33,7 +33,7 @@ public SparkIntegrationTest22(String sparkVersion) {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.2.1"}
+            {"2.2.2"}
     });
   }
 

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest21.java
Patch:
@@ -34,7 +34,7 @@ public ZeppelinSparkClusterTest21(String sparkVersion) throws Exception {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.1.2"}
+            {"2.1.3"}
     });
   }
 }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinSparkClusterTest22.java
Patch:
@@ -34,7 +34,7 @@ public ZeppelinSparkClusterTest22(String sparkVersion) throws Exception {
   @Parameterized.Parameters
   public static List<Object[]> data() {
     return Arrays.asList(new Object[][]{
-            {"2.2.1"}
+            {"2.2.2"}
     });
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -244,6 +244,7 @@ public Note cloneNote(String sourceNoteId, String newNotePath, AuthenticationInf
     for (Paragraph p : paragraphs) {
       newNote.addCloneParagraph(p, subject);
     }
+    saveNote(newNote, subject);
     return newNote;
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -232,7 +232,7 @@ public void setName(String name) {
         this.path = "/" + name;
       }
     } else {
-      int pos = this.path.indexOf("/");
+      int pos = this.path.lastIndexOf("/");
       this.path = this.path.substring(0, pos + 1) + this.name;
     }
   }

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -28,7 +28,6 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
-import org.apache.zeppelin.interpreter.SparkDownloadUtils;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/JdbcIntegrationTest.java
Patch:
@@ -66,7 +66,7 @@ public void testMySql() throws InterpreterException, InterruptedException {
     interpreterSetting.setProperty("default.user", "root");
     Dependency dependency = new Dependency("mysql:mysql-connector-java:5.1.46");
     interpreterSetting.setDependencies(Lists.newArrayList(dependency));
-    interpreterSettingManager.restart("jdbc");
+    interpreterSettingManager.restart(interpreterSetting.getId());
     interpreterSetting.waitForReady(60 * 1000);
     Interpreter jdbcInterpreter = interpreterFactory.getInterpreter("user1", "note1", "jdbc", "test");
     assertNotNull("JdbcInterpreter is null", jdbcInterpreter);

File: zeppelin-interpreter-integration/src/test/java/org/apache/zeppelin/integration/SparkIntegrationTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
-import org.apache.zeppelin.interpreter.SparkDownloadUtils;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -131,6 +130,7 @@ public void testLocalMode() throws IOException, YarnException, InterpreterExcept
     sparkInterpreterSetting.setProperty("ZEPPELIN_CONF_DIR", zeppelin.getZeppelinConfDir().getAbsolutePath());
     sparkInterpreterSetting.setProperty("zeppelin.spark.useHiveContext", "false");
     sparkInterpreterSetting.setProperty("zeppelin.pyspark.useIPython", "false");
+    sparkInterpreterSetting.setProperty("zeppelin.spark.scala.color", "false");
 
     testInterpreterBasics();
 
@@ -153,6 +153,7 @@ public void testYarnClientMode() throws IOException, YarnException, InterruptedE
     sparkInterpreterSetting.setProperty("zeppelin.pyspark.useIPython", "false");
     sparkInterpreterSetting.setProperty("PYSPARK_PYTHON", getPythonExec());
     sparkInterpreterSetting.setProperty("spark.driver.memory", "512m");
+    sparkInterpreterSetting.setProperty("zeppelin.spark.scala.color", "false");
 
     testInterpreterBasics();
 
@@ -175,6 +176,7 @@ public void testYarnClusterMode() throws IOException, YarnException, Interrupted
     sparkInterpreterSetting.setProperty("zeppelin.pyspark.useIPython", "false");
     sparkInterpreterSetting.setProperty("PYSPARK_PYTHON", getPythonExec());
     sparkInterpreterSetting.setProperty("spark.driver.memory", "512m");
+    sparkInterpreterSetting.setProperty("zeppelin.spark.scala.color", "false");
 
     testInterpreterBasics();
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/utils/TestUtils.java
Patch:
@@ -21,6 +21,7 @@
 import org.glassfish.hk2.api.ServiceLocator;
 import org.glassfish.hk2.api.ServiceLocatorFactory;
 
+//TODO(zjffdu) refactor this class, it should not be called by non-test code. Or rename it.
 public class TestUtils {
   public static <T> T getInstance(Class<T> clazz) {
     checkCalledByTestMethod();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -632,7 +632,6 @@ public void removeResourcesBelongsToNote(String noteId) {
    * changed
    */
   private void copyDependenciesFromLocalPath(final InterpreterSetting setting) {
-    setting.setStatus(InterpreterSetting.Status.DOWNLOADING_DEPENDENCIES);
     final Thread t = new Thread() {
       public void run() {
         try {
@@ -649,7 +648,6 @@ public void run() {
               }
             }
           }
-          setting.setStatus(InterpreterSetting.Status.READY);
         } catch (Exception e) {
           LOGGER.error(String.format("Error while copying deps for interpreter group : %s," +
                   " go to interpreter setting page click on edit and save it again to make " +

File: groovy/src/main/java/org/apache/zeppelin/groovy/GroovyZeppelinContext.java
Patch:
@@ -43,7 +43,7 @@ public List<Class> getSupportedClasses() {
   }
 
   @Override
-  public String showData(Object obj) {
+  public String showData(Object obj, int maxResult) {
     return null;
   }
 }

File: helium-dev/src/main/java/org/apache/zeppelin/helium/DevZeppelinContext.java
Patch:
@@ -43,7 +43,7 @@ public List<Class> getSupportedClasses() {
   }
 
   @Override
-  public String showData(Object obj) {
+  public String showData(Object obj, int maxResult) {
     return null;
   }
 }

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -721,8 +721,8 @@ private InterpreterResult executeSql(String propertyKey, String sql,
         statement = connection.createStatement();
 
         // fetch n+1 rows in order to indicate there's more rows available (for large selects)
-        statement.setFetchSize(getMaxResult());
-        statement.setMaxRows(maxRows);
+        statement.setFetchSize(interpreterContext.getIntLocalProperty("limit", getMaxResult()));
+        statement.setMaxRows(interpreterContext.getIntLocalProperty("limit", maxRows));
 
         if (statement == null) {
           return new InterpreterResult(Code.ERROR, "Prefix not found.");

File: python/src/main/java/org/apache/zeppelin/python/PythonZeppelinContext.java
Patch:
@@ -43,7 +43,7 @@ public List<Class> getSupportedClasses() {
   }
 
   @Override
-  public String showData(Object obj) {
+  public String showData(Object obj, int maxResult) {
     return null;
   }
 }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -86,8 +86,10 @@ public InterpreterResult internalInterpret(String st, InterpreterContext context
 
     try {
       Method method = sqlc.getClass().getMethod("sql", String.class);
+      int maxResult = Integer.parseInt(context.getLocalProperties().getOrDefault("limit",
+              "" + sparkInterpreter.getZeppelinContext().getMaxResult()));
       String msg = sparkInterpreter.getZeppelinContext().showData(
-          method.invoke(sqlc, st));
+          method.invoke(sqlc, st), maxResult);
       sc.clearJobGroup();
       return new InterpreterResult(Code.SUCCESS, msg);
     } catch (Exception e) {

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/BaseZeppelinContextTest.java
Patch:
@@ -133,7 +133,7 @@ public List<Class> getSupportedClasses() {
     }
 
     @Override
-    public String showData(Object obj) {
+    public String showData(Object obj, int maxResult) {
       return null;
     }
   }

File: zeppelin-interpreter-integration/src/main/test/org/apache/zeppelin/integration/FlinkIntegrationTest.java
Patch:
@@ -60,7 +60,7 @@ public class FlinkIntegrationTest {
   public FlinkIntegrationTest(String flinkVersion) {
     LOGGER.info("Testing FlinkVersion: " + flinkVersion);
     this.flinkVersion = flinkVersion;
-    this.flinkHome = SparkDownloadUtils.downloadFlink(flinkVersion);
+    this.flinkHome = DownloadUtils.downloadFlink(flinkVersion);
   }
 
   @Parameterized.Parameters

File: zeppelin-interpreter-integration/src/main/test/org/apache/zeppelin/integration/SparkIntegrationTest.java
Patch:
@@ -57,7 +57,7 @@ public abstract class SparkIntegrationTest {
   public SparkIntegrationTest(String sparkVersion) {
     LOGGER.info("Testing SparkVersion: " + sparkVersion);
     this.sparkVersion = sparkVersion;
-    this.sparkHome = SparkDownloadUtils.downloadSpark(sparkVersion);
+    this.sparkHome = DownloadUtils.downloadSpark(sparkVersion);
   }
 
   @BeforeClass

File: zeppelin-interpreter-integration/src/main/test/org/apache/zeppelin/integration/ZeppelinSparkClusterTest.java
Patch:
@@ -73,7 +73,7 @@ public class ZeppelinSparkClusterTest extends AbstractTestRestApi {
   public ZeppelinSparkClusterTest(String sparkVersion) throws Exception {
     this.sparkVersion = sparkVersion;
     LOGGER.info("Testing SparkVersion: " + sparkVersion);
-    String sparkHome = SparkDownloadUtils.downloadSpark(sparkVersion);
+    String sparkHome = DownloadUtils.downloadSpark(sparkVersion);
     if (!verifiedSparkVersions.contains(sparkVersion)) {
       verifiedSparkVersions.add(sparkVersion);
       setupSparkInterpreter(sparkHome);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -828,6 +828,9 @@ public enum ConfVars {
     ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED("zeppelin.server.default.dir.allowed", false),
     ZEPPELIN_SERVER_XFRAME_OPTIONS("zeppelin.server.xframe.options", "SAMEORIGIN"),
     ZEPPELIN_SERVER_JETTY_NAME("zeppelin.server.jetty.name", null),
+    ZEPPELIN_SERVER_JETTY_THREAD_POOL_MAX("zeppelin.server.jetty.thread.pool.max", 400),
+    ZEPPELIN_SERVER_JETTY_THREAD_POOL_MIN("zeppelin.server.jetty.thread.pool.min", 8),
+    ZEPPELIN_SERVER_JETTY_THREAD_POOL_TIMEOUT("zeppelin.server.jetty.thread.pool.timeout", 30),
     ZEPPELIN_SERVER_JETTY_REQUEST_HEADER_SIZE("zeppelin.server.jetty.request.header.size", 8192),
     ZEPPELIN_SERVER_AUTHORIZATION_HEADER_CLEAR("zeppelin.server.authorization.header.clear", true),
     ZEPPELIN_SERVER_STRICT_TRANSPORT("zeppelin.server.strict.transport", "max-age=631138519"),

File: groovy/src/main/java/org/apache/zeppelin/groovy/GroovyZeppelinContext.java
Patch:
@@ -43,7 +43,7 @@ public List<Class> getSupportedClasses() {
   }
 
   @Override
-  protected String showData(Object obj) {
+  public String showData(Object obj) {
     return null;
   }
 }

File: helium-dev/src/main/java/org/apache/zeppelin/helium/DevZeppelinContext.java
Patch:
@@ -43,7 +43,7 @@ public List<Class> getSupportedClasses() {
   }
 
   @Override
-  protected String showData(Object obj) {
+  public String showData(Object obj) {
     return null;
   }
 }

File: python/src/main/java/org/apache/zeppelin/python/PythonZeppelinContext.java
Patch:
@@ -43,7 +43,7 @@ public List<Class> getSupportedClasses() {
   }
 
   @Override
-  protected String showData(Object obj) {
+  public String showData(Object obj) {
     return null;
   }
 }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkInterpreter.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.spark.SparkContext;
 import org.apache.spark.api.java.JavaSparkContext;
 import org.apache.spark.sql.SQLContext;
+import org.apache.zeppelin.interpreter.AbstractInterpreter;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 
@@ -29,7 +30,7 @@
  * Abstract class for SparkInterpreter. For the purpose of co-exist of NewSparkInterpreter
  * and OldSparkInterpreter
  */
-public abstract class AbstractSparkInterpreter extends Interpreter {
+public abstract class AbstractSparkInterpreter extends AbstractInterpreter {
 
   private SparkInterpreter parentSparkInterpreter;
 
@@ -49,8 +50,6 @@ public AbstractSparkInterpreter(Properties properties) {
 
   public abstract JavaSparkContext getJavaSparkContext();
 
-  public abstract SparkZeppelinContext getZeppelinContext();
-
   public abstract String getSparkUIUrl();
 
   public abstract boolean isUnsupportedSparkVersion();

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java
Patch:
@@ -998,12 +998,11 @@ public boolean isUnsupportedSparkVersion() {
    * Interpret a single line.
    */
   @Override
-  public InterpreterResult interpret(String line, InterpreterContext context) {
+  public InterpreterResult internalInterpret(String line, InterpreterContext context) {
     if (isUnsupportedSparkVersion()) {
       return new InterpreterResult(Code.ERROR, "Spark " + sparkVersion.toString()
           + " is not supported");
     }
-    z.setInterpreterContext(context);
     if (line == null || line.trim().length() == 0) {
       return new InterpreterResult(Code.SUCCESS);
     }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -186,7 +186,7 @@ protected String getPythonExec() {
     return "python";
   }
 
-  public SparkZeppelinContext getZeppelinContext() {
+  public BaseZeppelinContext getZeppelinContext() {
     if (sparkInterpreter != null) {
       return sparkInterpreter.getZeppelinContext();
     } else {

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.spark.SparkContext;
 import org.apache.spark.api.java.JavaSparkContext;
 import org.apache.spark.sql.SQLContext;
-import org.apache.zeppelin.interpreter.Interpreter;
+import org.apache.zeppelin.interpreter.BaseZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -72,7 +72,7 @@ public void close() throws InterpreterException {
   }
 
   @Override
-  public InterpreterResult interpret(String st, InterpreterContext context)
+  public InterpreterResult internalInterpret(String st, InterpreterContext context)
       throws InterpreterException {
     return delegation.interpret(st, context);
   }
@@ -136,7 +136,7 @@ public JavaSparkContext getJavaSparkContext() {
   }
 
   @Override
-  public SparkZeppelinContext getZeppelinContext() {
+  public BaseZeppelinContext getZeppelinContext() {
     return delegation.getZeppelinContext();
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -101,7 +101,7 @@ public void open() throws InterpreterException {
       ZeppelinRContext.setSparkSession(sparkInterpreter.getSparkSession());
     }
     ZeppelinRContext.setSqlContext(sparkInterpreter.getSQLContext());
-    ZeppelinRContext.setZeppelinContext(sparkInterpreter.getZeppelinContext());
+    ZeppelinRContext.setZeppelinContext((SparkZeppelinContext) sparkInterpreter.getZeppelinContext());
 
     zeppelinR = new ZeppelinR(rCmdPath, sparkRLibPath, SparkRBackend.port(), sparkVersion, timeout, this);
     try {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java
Patch:
@@ -71,7 +71,7 @@ public int getMaxResult() {
    * @param obj
    * @return
    */
-  protected abstract String showData(Object obj);
+  public abstract String showData(Object obj);
 
   /**
    * @deprecated use z.textbox instead
@@ -225,7 +225,7 @@ public void setInterpreterContext(InterpreterContext interpreterContext) {
   public void setMaxResult(int maxResult) {
     this.maxResult = maxResult;
   }
-  
+
   /**
    * display special types of objects for interpreter.
    * Each interpreter can has its own supported classes.

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/KerberosInterpreter.java
Patch:
@@ -38,13 +38,13 @@
  * startKerberosLoginThread() needs to be called inside the open() and
  * shutdownExecutorService() inside close().
  *
- * 
+ *
  * Environment variables defined in zeppelin-env.sh
  * KERBEROS_REFRESH_INTERVAL controls the refresh interval for Kerberos ticket. The default value
  * is 1d.
  * KINIT_FAIL_THRESHOLD controls how many times should kinit retry. The default value is 5.
  */
-public abstract class KerberosInterpreter extends Interpreter {
+public abstract class KerberosInterpreter extends AbstractInterpreter {
 
   private Integer kinitFailCount = 0;
   private ScheduledExecutorService scheduledExecutorService;

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/BaseZeppelinContextTest.java
Patch:
@@ -133,7 +133,7 @@ public List<Class> getSupportedClasses() {
     }
 
     @Override
-    protected String showData(Object obj) {
+    public String showData(Object obj) {
       return null;
     }
   }

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/SqlCompleter.java
Patch:
@@ -4,8 +4,8 @@
  * This source file is based on code taken from SQLLine 1.0.2 See SQLLine notice in LICENSE
  */
 
-import org.apache.commons.lang.StringUtils;
-import org.apache.commons.lang.math.NumberUtils;
+import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang3.math.NumberUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServerTest.java
Patch:
@@ -130,6 +130,7 @@ public void testInterpreter() throws IOException, TException, InterruptedExcepti
     intpContext.setParagraphId("paragraph_1");
     intpContext.setGui("{}");
     intpContext.setNoteGui("{}");
+    intpContext.setLocalProperties(new HashMap<>());
 
     // single output of SUCCESS
     RemoteInterpreterResult result = server.interpret("session_1", Test1Interpreter.class.getName(),

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -820,7 +820,8 @@ public List<InterpreterCompletion> completion(
     }
 
     try {
-      List<InterpreterCompletion> completions = note.completion(paragraphId, buffer, cursor);
+      List<InterpreterCompletion> completions = note.completion(paragraphId, buffer, cursor,
+              context.getAutheInfo());
       callback.onSuccess(completions, context);
       return completions;
     } catch (RuntimeException e) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -189,7 +189,7 @@ public void scalaOutputTest() throws IOException, InterruptedException {
     assertEquals("2", p.getReturn().message().get(0).getData());
 
     // test code completion
-    List<InterpreterCompletion> completions = note.completion(p.getId(), "sc.", 2);
+    List<InterpreterCompletion> completions = note.completion(p.getId(), "sc.", 2, AuthenticationInfo.ANONYMOUS);
     assertTrue(completions.size() > 0);
 
     // test cancel

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -549,6 +549,7 @@ public void testSingleDynamicFormTextInput() throws Exception {
               CoreMatchers.equalTo("Hello world"));
 
       runParagraph(1);
+      ZeppelinITUtils.sleep(1000, false);
       waitForParagraph(1, "FINISHED");
       collector.checkThat("Only after running the paragraph, we can see the newly updated output",
               driver.findElement(By.xpath(getParagraphXPath(1) + "//div[contains(@class, 'text plainTextContent')]")).getText(),

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/dep/DependencyResolverTest.java
Patch:
@@ -66,6 +66,7 @@ public void testAddRepo() {
 
   @Test
   public void testDelRepo() {
+    resolver.addRepo("securecentral", "https://repo1.maven.org/maven2", false);
     int reposCnt = resolver.getRepos().size();
     resolver.delRepo("securecentral");
     resolver.delRepo("badId");

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/OldSparkInterpreterTest.java
Patch:
@@ -85,6 +85,8 @@ public static Properties getSparkTestProperties(TemporaryFolder tmpDir) throws I
     p.setProperty("zeppelin.spark.importImplicit", "true");
     p.setProperty("zeppelin.dep.localrepo", tmpDir.newFolder().getAbsolutePath());
     p.setProperty("zeppelin.spark.property_1", "value_1");
+    // disable color output for easy testing
+    p.setProperty("zeppelin.spark.scala.color", "false");
     return p;
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -122,6 +122,8 @@ public void setupSparkInterpreter(String sparkHome) throws InterpreterException
             new InterpreterProperty("zeppelin.spark.test", "true"));
     sparkProperties.put("spark.serializer",
             new InterpreterProperty("spark.serializer", "org.apache.spark.serializer.KryoSerializer"));
+    sparkProperties.put("zeppelin.spark.scala.color",
+            new InterpreterProperty("zeppelin.spark.scala.color", "false"));
     TestUtils.getInstance(Notebook.class).getInterpreterSettingManager().restart(sparkIntpSetting.getId());
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -655,7 +655,7 @@ public void updateRuntimeInfos(String label, String tooltip, Map<String, String>
           info = new ParagraphRuntimeInfo(key, label, tooltip, group, intpSettingId);
           this.runtimeInfos.put(key, info);
         }
-        info.addValue(infos.get(key));
+        info.addValue(infos);
       }
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectRegistry.java
Patch:
@@ -62,7 +62,7 @@ public AngularObject addAndNotifyRemoteProcess(final String name,
                                                  final String paragraphId) {
 
     RemoteInterpreterProcess remoteInterpreterProcess = getRemoteInterpreterProcess();
-    if (!remoteInterpreterProcess.isRunning()) {
+    if (null == remoteInterpreterProcess || !remoteInterpreterProcess.isRunning()) {
       return super.add(name, o, noteId, paragraphId, true);
     }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/RemoteInterpreterEventServer.java
Patch:
@@ -48,6 +48,7 @@
 import org.apache.zeppelin.resource.ResourceId;
 import org.apache.zeppelin.resource.ResourcePool;
 import org.apache.zeppelin.resource.ResourceSet;
+import org.apache.zeppelin.util.ReflectionUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -164,8 +165,8 @@ public void registerInterpreterProcess(RegisterInfo registerInfo) throws TExcept
       LOGGER.warn("Interpreter process does not existed yet for InterpreterGroup: " +
           registerInfo.getInterpreterGroupId());
     }
-    ((RemoteInterpreterManagedProcess) interpreterProcess)
-        .processStarted(registerInfo.port, registerInfo.host);
+
+    interpreterProcess.processStarted(registerInfo.port, registerInfo.host);
   }
 
   @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java
Patch:
@@ -189,7 +189,7 @@ public void onProcessComplete(int exitValue) {
 
   }
 
-  // called by RemoteInterpreterServer to notify that RemoteInterpreter Process is started
+  @Override
   public void processStarted(int port, String host) {
     this.port = port;
     this.host = host;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/AdminRestApi.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.collect.Lists;
 import java.util.List;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import javax.ws.rs.BadRequestException;
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;
@@ -34,6 +35,7 @@
 
 /** This rest apis support some of feature related admin. e.g. changin log level. */
 @Path("/admin")
+@Singleton
 public class AdminRestApi {
   private static final Logger logger = LoggerFactory.getLogger(AdminRestApi.class);
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/ConfigurationsRestApi.java
Patch:
@@ -19,6 +19,7 @@
 import java.io.IOException;
 import java.util.Map;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.PathParam;
@@ -33,6 +34,7 @@
 /** Configurations Rest API Endpoint. */
 @Path("/configurations")
 @Produces("application/json")
+@Singleton
 public class ConfigurationsRestApi extends AbstractRestApi {
 
   private ConfigurationService configurationService;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/CredentialRestApi.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.IOException;
 import java.util.Map;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import javax.ws.rs.DELETE;
 import javax.ws.rs.GET;
 import javax.ws.rs.PUT;
@@ -42,6 +43,7 @@
 /** Credential Rest API. */
 @Path("/credential")
 @Produces("application/json")
+@Singleton
 public class CredentialRestApi {
   Logger logger = LoggerFactory.getLogger(CredentialRestApi.class);
   private Credentials credentials;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/HeliumRestApi.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.gson.reflect.TypeToken;
 
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
@@ -52,6 +53,7 @@
  */
 @Path("/helium")
 @Produces("application/json")
+@Singleton
 public class HeliumRestApi {
   Logger logger = LoggerFactory.getLogger(HeliumRestApi.class);
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.google.common.collect.Maps;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.dep.Repository;
@@ -61,6 +62,7 @@
  */
 @Path("/interpreter")
 @Produces("application/json")
+@Singleton
 public class InterpreterRestApi {
 
   private static final Logger logger = LoggerFactory.getLogger(InterpreterRestApi.class);

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Map;
 import java.util.Set;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import javax.ws.rs.FormParam;
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;
@@ -59,6 +60,7 @@
  */
 @Path("/login")
 @Produces("application/json")
+@Singleton
 public class LoginRestApi {
   private static final Logger LOG = LoggerFactory.getLogger(LoginRestApi.class);
   private static final Gson gson = new Gson();

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRepoRestApi.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.gson.JsonSyntaxException;
 
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.service.SecurityService;
 import org.apache.zeppelin.service.ServiceContext;
@@ -53,6 +54,7 @@
  */
 @Path("/notebook-repositories")
 @Produces("application/json")
+@Singleton
 public class NotebookRepoRestApi {
   private static final Logger LOG = LoggerFactory.getLogger(NotebookRepoRestApi.class);
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/SecurityRestApi.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Map;
 import java.util.Set;
 import javax.inject.Inject;
+import javax.inject.Singleton;
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
 import javax.ws.rs.PathParam;
@@ -43,6 +44,7 @@
  */
 @Path("/security")
 @Produces("application/json")
+@Singleton
 public class SecurityRestApi {
   private static final Logger LOG = LoggerFactory.getLogger(SecurityRestApi.class);
   private static final Gson gson = new Gson();

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/ZeppelinRestApi.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.zeppelin.rest;
 
+import javax.inject.Singleton;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
 
@@ -40,6 +41,7 @@
  * @since 0.3.4
  */
 @Path("/")
+@Singleton
 public class ZeppelinRestApi {
 
   /**

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/JobManagerService.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.zeppelin.service;
 
+import javax.inject.Inject;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.Notebook;
@@ -39,6 +40,7 @@ public class JobManagerService {
 
   private Notebook notebook;
 
+  @Inject
   public JobManagerService(Notebook notebook) {
     this.notebook = notebook;
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/ConfigurationServiceTest.java
Patch:
@@ -21,7 +21,9 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.rest.AbstractTestRestApi;
 import org.apache.zeppelin.server.ZeppelinServer;
+import org.apache.zeppelin.socket.NotebookServer;
 import org.apache.zeppelin.user.AuthenticationInfo;
+import org.apache.zeppelin.utils.TestUtils;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -50,7 +52,7 @@ public static void setUp() throws Exception {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HELIUM_REGISTRY.getVarName(),
         "helium");
     AbstractTestRestApi.startUp(ConfigurationServiceTest.class.getSimpleName());
-    configurationService = ZeppelinServer.notebookWsServer.getConfigurationService();
+    configurationService = TestUtils.getInstance(ConfigurationService.class);
   }
 
   @AfterClass

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zeppelin.interpreter;
 
 import com.google.common.base.Preconditions;
+import javax.inject.Inject;
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -35,6 +36,7 @@ public class InterpreterFactory {
 
   private final InterpreterSettingManager interpreterSettingManager;
 
+  @Inject
   public InterpreterFactory(InterpreterSettingManager interpreterSettingManager) {
     this.interpreterSettingManager = interpreterSettingManager;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.gson.GsonBuilder;
 import com.google.gson.reflect.TypeToken;
 import java.util.Set;
+import javax.inject.Inject;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
@@ -126,6 +127,7 @@ public class InterpreterSettingManager implements InterpreterSettingManagerMBean
   private ConfigStorage configStorage;
   private RemoteInterpreterEventServer interpreterEventServer;
 
+  @Inject
   public InterpreterSettingManager(ZeppelinConfiguration zeppelinConfiguration,
                                    AngularObjectRegistryListener angularObjectRegistryListener,
                                    RemoteInterpreterProcessListener

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zeppelin.notebook.repo;
 
 import com.google.common.collect.Lists;
+import javax.inject.Inject;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.apache.zeppelin.notebook.Note;
@@ -52,6 +53,7 @@ public class NotebookRepoSync implements NotebookRepoWithVersionControl {
    * @param conf
    */
   @SuppressWarnings("static-access")
+  @Inject
   public NotebookRepoSync(ZeppelinConfiguration conf) throws IOException {
     init(conf);
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/search/LuceneSearch.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
+import javax.inject.Inject;
 import org.apache.commons.io.FileUtils;
 import org.apache.lucene.analysis.Analyzer;
 import org.apache.lucene.analysis.TokenStream;
@@ -84,6 +85,7 @@ public class LuceneSearch extends SearchService {
   private IndexWriterConfig indexWriterConfig;
   private IndexWriter indexWriter;
 
+  @Inject
   public LuceneSearch(ZeppelinConfiguration zeppelinConfiguration) {
     super("LuceneSearch-Thread");
     this.zeppelinConfiguration = zeppelinConfiguration;

File: neo4j/src/test/java/org/apache/zeppelin/graph/neo4j/Neo4jCypherInterpreterTest.java
Patch:
@@ -55,9 +55,9 @@ public class Neo4jCypherInterpreterTest {
   private static final String REL_KNOWS = "KNOWS";
 
   private static final String CYPHER_FOREACH =
-          "FOREACH (x in range(1,1000) | CREATE (:%s{name: \"name\" + x, age: %s}))";
-  private static final String CHPHER_UNWIND = "UNWIND range(1,1000) as x "
-        + "MATCH (n), (m) WHERE id(n) = x AND id(m) = toInt(rand() * 1000) "
+          "FOREACH (x in range(1,100) | CREATE (:%s{name: \"name\" + x, age: %s, address: point({ longitude: 56.7, latitude: 12.78, height: 8 }), birth: date('1984-04-04')}))";
+  private static final String CHPHER_UNWIND = "UNWIND range(1,100) as x "
+        + "MATCH (n), (m) WHERE id(n) = x AND id(m) = toInt(rand() * 100) "
         + "CREATE (n)-[:%s]->(m)";
 
   @BeforeClass

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -262,7 +262,7 @@ public void renameNote(String noteId,
     Note note = notebook.getNote(noteId);
     if (note != null) {
       note.setCronSupported(notebook.getConf());
-      if (isRelative) {
+      if (isRelative && !note.getParentPath().equals("/")) {
         newNotePath = note.getParentPath() + "/" + newNotePath;
       } else {
         if (!newNotePath.startsWith("/")) {

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -229,6 +229,8 @@ public void testDisableParagraphRunButton() throws Exception {
           getParagraphStatus(1), CoreMatchers.equalTo("READY")
       );
 
+      driver.navigate().refresh();
+      ZeppelinITUtils.sleep(3000, false);
       deleteTestNotebook(driver);
 
     } catch (Exception e) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -246,6 +246,7 @@ private static void start(boolean withAuth,
       if (started == false) {
         throw new RuntimeException("Can not start Zeppelin server");
       }
+      ZeppelinServer.notebook.setParagraphJobListener(ZeppelinServer.notebookWsServer);
       LOG.info("Test Zeppelin stared.");
     }
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -393,7 +393,7 @@ public void testNoteJobs() throws IOException, InterruptedException {
     ZeppelinServer.notebook.saveNote(note, anonymous);
     String noteId = note.getId();
 
-    note.runAll();
+    note.runAll(anonymous, true);
     // wait until job is finished or timeout.
     int timeout = 1;
     while (!paragraph.isTerminated()) {
@@ -449,7 +449,7 @@ public void testGetNoteJob() throws IOException, InterruptedException {
     ZeppelinServer.notebook.saveNote(note, anonymous);
     String noteId = note.getId();
 
-    note.runAll();
+    note.runAll(anonymous, true);
     // assume that status of the paragraph is running
     GetMethod get = httpGet("/notebook/job/" + noteId);
     assertThat("test get note job: ", get, isAllowed());
@@ -496,7 +496,7 @@ public void testRunParagraphWithParams() throws IOException, InterruptedExceptio
     ZeppelinServer.notebook.saveNote(note, anonymous);
     String noteId = note.getId();
 
-    note.runAll();
+    note.runAll(anonymous, true);
 
     // Call Run paragraph REST API
     PostMethod postParagraph = httpPost("/notebook/job/" + noteId + "/" + paragraph.getId(),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ParagraphJobListener.java
Patch:
@@ -31,4 +31,7 @@ public interface ParagraphJobListener extends JobListener<Paragraph> {
   void onOutputAppend(Paragraph paragraph, int idx, String output);
   void onOutputUpdate(Paragraph paragraph, int idx, InterpreterResultMessage msg);
   void onOutputUpdateAll(Paragraph paragraph, List<InterpreterResultMessage> msgs);
+
+  //TODO(savalek) Temporary solution. Need to refactor cron to be able to notify frontend directly.
+  void noteRunningStatusChange(String noteId, boolean newStatus);
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -60,8 +60,8 @@
 import org.apache.zeppelin.ticket.TicketContainer;
 import org.apache.zeppelin.types.InterpreterSettingsList;
 import org.apache.zeppelin.user.AuthenticationInfo;
+import org.apache.zeppelin.utils.CorsUtils;
 import org.apache.zeppelin.utils.InterpreterBindingUtils;
-import org.apache.zeppelin.utils.SecurityUtils;
 import org.eclipse.jetty.websocket.servlet.WebSocketServlet;
 import org.eclipse.jetty.websocket.servlet.WebSocketServletFactory;
 import org.slf4j.Logger;
@@ -188,7 +188,7 @@ public void configure(WebSocketServletFactory factory) {
 
   public boolean checkOrigin(HttpServletRequest request, String origin) {
     try {
-      return SecurityUtils.isValidOrigin(origin, ZeppelinConfiguration.create());
+      return CorsUtils.isValidOrigin(origin, ZeppelinConfiguration.create());
     } catch (UnknownHostException | URISyntaxException e) {
       LOG.error(e.toString(), e);
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -1174,7 +1174,7 @@ public void patchParagraph(final String noteId, final String paragraphId, String
       String paragraphText = p.getText() == null ? "" : p.getText();
       paragraphText = (String) dmp.patchApply(patches, paragraphText)[0];
       p.setText(paragraphText);
-      callback.onSuccess(paragraphText, context);
+      callback.onSuccess(patchText, context);
     } catch (IOException e) {
       callback.onFailure(new IOException("Fail to patch", e), context);
     }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -118,7 +118,8 @@ public void setupSparkInterpreter(String sparkHome) throws InterpreterException
             new InterpreterProperty("zeppelin.spark.useNew", "true"));
     sparkProperties.put("zeppelin.spark.test",
             new InterpreterProperty("zeppelin.spark.test", "true"));
-
+    sparkProperties.put("spark.serializer",
+            new InterpreterProperty("spark.serializer", "org.apache.spark.serializer.KryoSerializer"));
     ZeppelinServer.notebook.getInterpreterSettingManager().restart(sparkIntpSetting.getId());
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/Util.java
Patch:
@@ -39,7 +39,7 @@ public class Util {
     try {
       projectProperties.load(Util.class.getResourceAsStream("/project.properties"));
       gitProperties.load(Util.class.getResourceAsStream("/git.properties"));
-    } catch (IOException e) {
+    } catch (Exception e) {
       //Fail to read project.properties
     }
   }

File: zeppelin-plugins/launcher/spark/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -47,7 +47,7 @@ public SparkInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage rec
 
   @Override
   protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext context) {
-    Map<String, String> env = new HashMap<String, String>();
+    Map<String, String> env = super.buildEnvFromProperties(context);
     Properties sparkProperties = new Properties();
     String sparkMaster = getSparkMaster(properties);
     for (String key : properties.stringPropertyNames()) {

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java
Patch:
@@ -31,9 +31,10 @@ public class SparkVersion {
   public static final SparkVersion SPARK_2_3_0 = SparkVersion.fromVersionString("2.3.0");
   public static final SparkVersion SPARK_2_3_1 = SparkVersion.fromVersionString("2.3.1");
   public static final SparkVersion SPARK_2_4_0 = SparkVersion.fromVersionString("2.4.0");
+  public static final SparkVersion SPARK_3_0_0 = SparkVersion.fromVersionString("3.0.0");
 
   public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_1_6_0;
-  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_2_4_0;
+  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_3_0_0;
 
   private int version;
   private String versionString;

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java
Patch:
@@ -397,7 +397,7 @@ public void runAllParagraphs(String noteId,
       Map<String, Object> params = (Map<String, Object>) raw.get("params");
       Map<String, Object> config = (Map<String, Object>) raw.get("config");
 
-      if (runParagraph(noteId, paragraphId, title, text, params, config, false, true,
+      if (!runParagraph(noteId, paragraphId, title, text, params, config, false, true,
           context, callback)) {
         // stop execution when one paragraph fails.
         break;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -738,6 +738,7 @@ public enum ConfVars {
     // whether homescreen notebook will be hidden from notebook list or not
     ZEPPELIN_NOTEBOOK_HOMESCREEN_HIDE("zeppelin.notebook.homescreen.hide", false),
     ZEPPELIN_NOTEBOOK_GCS_STORAGE_DIR("zeppelin.notebook.gcs.dir", ""),
+    ZEPPELIN_NOTEBOOK_GCS_CREDENTIALS_FILE("zeppelin.notebook.google.credentialsJsonFilePath", null),
     ZEPPELIN_NOTEBOOK_S3_BUCKET("zeppelin.notebook.s3.bucket", "zeppelin"),
     ZEPPELIN_NOTEBOOK_S3_ENDPOINT("zeppelin.notebook.s3.endpoint", "s3.amazonaws.com"),
     ZEPPELIN_NOTEBOOK_S3_TIMEOUT("zeppelin.notebook.s3.timeout", "120000"),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -142,6 +142,8 @@ public RemoteInterpreterServer(String intpEventServerHost,
                                  String interpreterGroupId,
                                  boolean isTest)
       throws TTransportException, IOException {
+    logger.info("Starting remote interpreter server on port {}, intpEventServerAddress: {}:{}", port,
+            intpEventServerHost, intpEventServerPort);
     if (null != intpEventServerHost) {
       this.intpEventServerHost = intpEventServerHost;
       if (!isTest) {
@@ -171,7 +173,6 @@ public RemoteInterpreterServer(String intpEventServerHost,
     }
     server = new TThreadPoolServer(
         new TThreadPoolServer.Args(serverTransport).processor(processor));
-    logger.info("Starting remote interpreter server on port {}", port);
     remoteWorksResponsePool = Collections.synchronizedMap(new HashMap<String, Object>());
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java
Patch:
@@ -138,7 +138,7 @@ public static boolean checkIfRemoteEndpointAccessible(String host, int port) {
   public static String getInterpreterSettingId(String intpGrpId) {
     String settingId = null;
     if (intpGrpId != null) {
-      int indexOfColon = intpGrpId.indexOf(":");
+      int indexOfColon = intpGrpId.indexOf("-");
       settingId = intpGrpId.substring(0, indexOfColon);
     }
     return settingId;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java
Patch:
@@ -147,7 +147,6 @@ private Status getLastStatus() {
 
     public synchronized Status getStatus() {
       if (!remoteInterpreter.isOpened()) {
-        LOGGER.info("status:" + getLastStatus());
         return getLastStatus();
       }
       Status status = Status.valueOf(remoteInterpreter.getStatus(job.getId()));

File: zeppelin-plugins/launcher/standard/src/main/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncher.java
Patch:
@@ -101,6 +101,7 @@ protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext co
         env.put("FLINK_LIB_DIR", flinkHome + "/lib");
       }
     }
+    env.put("INTERPRETER_GROUP_ID", context.getInterpreterGroupId());
     return env;
   }
 }

File: zeppelin-plugins/launcher/standard/src/test/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncherTest.java
Patch:
@@ -56,7 +56,7 @@ public void testLauncher() throws IOException {
     assertEquals(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getIntValue(),
         interpreterProcess.getConnectTimeout());
     assertEquals(zConf.getInterpreterRemoteRunnerPath(), interpreterProcess.getInterpreterRunner());
-    assertEquals(1, interpreterProcess.getEnv().size());
+    assertEquals(2, interpreterProcess.getEnv().size());
     assertEquals("VALUE_1", interpreterProcess.getEnv().get("ENV_1"));
     assertEquals(true, interpreterProcess.isUserImpersonated());
   }
@@ -79,7 +79,7 @@ public void testConnectTimeOut() throws IOException {
     assertEquals(".//local-repo/groupId", interpreterProcess.getLocalRepoDir());
     assertEquals(10000, interpreterProcess.getConnectTimeout());
     assertEquals(zConf.getInterpreterRemoteRunnerPath(), interpreterProcess.getInterpreterRunner());
-    assertEquals(0, interpreterProcess.getEnv().size());
+    assertEquals(1, interpreterProcess.getEnv().size());
     assertEquals(true, interpreterProcess.isUserImpersonated());
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -381,13 +381,13 @@ private String getInterpreterGroupId(String user, String noteId) {
     if (option.isExistingProcess) {
       key = Constants.EXISTING_PROCESS;
     } else if (getOption().isProcess()) {
-      key = (option.perUserIsolated() ? user : "") + ":" + (option.perNoteIsolated() ? noteId : "");
+      key = (option.perUserIsolated() ? user : "") + "-" + (option.perNoteIsolated() ? noteId : "");
     } else {
       key = SHARED_PROCESS;
     }
 
     //TODO(zjffdu) we encode interpreter setting id into groupId, this is not a good design
-    return id + ":" + key;
+    return id + "-" + key;
   }
 
   private String getInterpreterSessionId(String user, String noteId) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -757,6 +757,8 @@ public enum ConfVars {
     ZEPPELIN_NOTEBOOK_STORAGE("zeppelin.notebook.storage",
         "org.apache.zeppelin.notebook.repo.GitNotebookRepo"),
     ZEPPELIN_NOTEBOOK_ONE_WAY_SYNC("zeppelin.notebook.one.way.sync", false),
+    ZEPPELIN_NOTEBOOK_NEW_FORMAT_CONVERT("zeppelin.notebook.new_format.convert", false),
+    ZEPPELIN_NOTEBOOK_NEW_FORMAT_DELETE_OLD("zeppelin.notebook.new_format.delete_old", false),
     // whether by default note is public or private
     ZEPPELIN_NOTEBOOK_PUBLIC("zeppelin.notebook.public", true),
     ZEPPELIN_INTERPRETER_REMOTE_RUNNER("zeppelin.interpreter.remoterunner",

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -805,6 +805,8 @@ public enum ConfVars {
     ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD(
         "zeppelin.interpreter.lifecyclemanager.timeout.threshold", 3600000L),
 
+    ZEPPELIN_INTERPRETER_SCHEDULER_POOL_SIZE("zeppelin.scheduler.threadpool.size", 100),
+
     ZEPPELIN_OWNER_ROLE("zeppelin.notebook.default.owner.username", ""),
 
     ZEPPELIN_CLUSTER_ADDR("zeppelin.cluster.addr", ""),

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -214,7 +214,7 @@ public void testGrpcFrameSize() throws InterpreterException, IOException {
     List<InterpreterResultMessage> interpreterResultMessages =
         context.out.toInterpreterResultMessage();
     assertEquals(1, interpreterResultMessages.size());
-    assertTrue(interpreterResultMessages.get(0).getData().contains("exceeds maximum: 3000"));
+    assertTrue(interpreterResultMessages.get(0).getData().contains("exceeds maximum size 3000"));
 
     // next call continue work
     result = interpreter.interpret("print(1)", context);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerFactory.java
Patch:
@@ -110,5 +110,5 @@ public void removeScheduler(String name) {
   public ExecutorService getExecutor() {
     return executor;
   }
-
+  
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -197,7 +197,8 @@ public ZeppelinServer(ServiceLocator serviceLocator) throws Exception {
     heliumApplicationFactory.setApplicationEventListener(notebookWsServer);
 
     notebook.addNotebookEventListener(heliumApplicationFactory);
-    notebook.addNotebookEventListener(notebookWsServer.getNotebookInformationListener());
+    notebook.addNotebookEventListener(notebookWsServer);
+
 
     // Register MBean
     if ("true".equals(System.getenv("ZEPPELIN_JMX_ENABLE"))) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/ConnectionManager.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.zeppelin.display.GUI;
 import org.apache.zeppelin.display.Input;
 import org.apache.zeppelin.notebook.Note;
+import org.apache.zeppelin.notebook.NoteInfo;
 import org.apache.zeppelin.notebook.NotebookAuthorization;
 import org.apache.zeppelin.notebook.NotebookImportDeserializer;
 import org.apache.zeppelin.notebook.Paragraph;
@@ -350,7 +351,7 @@ public void unicastParagraph(Note note, Paragraph p, String user) {
     }
   }
 
-  public void broadcastNoteListExcept(List<Map<String, String>> notesInfo,
+  public void broadcastNoteListExcept(List<NoteInfo> notesInfo,
                                       AuthenticationInfo subject) {
     Set<String> userAndRoles;
     NotebookAuthorization authInfo = NotebookAuthorization.getInstance();

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -232,10 +232,9 @@ public void testSettingsCreateWithEmptyJson() throws IOException {
     post.releaseConnection();
   }
 
-  @Test
   public void testInterpreterRestart() throws IOException, InterruptedException {
     // when: create new note
-    Note note = ZeppelinServer.notebook.createNote(anonymous);
+    Note note = ZeppelinServer.notebook.createNote("note1", anonymous);
     note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     Paragraph p = note.getLastParagraph();
     Map config = p.getConfig();
@@ -282,7 +281,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
   @Test
   public void testRestartInterpreterPerNote() throws IOException, InterruptedException {
     // when: create new note
-    Note note = ZeppelinServer.notebook.createNote(anonymous);
+    Note note = ZeppelinServer.notebook.createNote("note1", anonymous);
     note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     Paragraph p = note.getLastParagraph();
     Map config = p.getConfig();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java
Patch:
@@ -151,15 +151,13 @@ public synchronized Status getStatus() {
         return getLastStatus();
       }
       Status status = Status.valueOf(remoteInterpreter.getStatus(job.getId()));
-      LOGGER.info("getStatus:" + status.name());
       if (status == Status.UNKNOWN) {
         // not found this job in the remote schedulers.
         // maybe not submitted, maybe already finished
         return job.getStatus();
       }
       lastStatus = status;
       listener.onStatusChange(job, null, status);
-      LOGGER.info("status:" + getLastStatus());
       return status;
     }
   }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -71,7 +71,7 @@ public void tearDown() throws Exception {
   }
 
   protected Note createNote() {
-    return new Note("test", "test", null, interpreterFactory, interpreterSettingManager, null, null, null, null);
+    return new Note("test", "test", interpreterFactory, interpreterSettingManager, null, null, null);
   }
 
   protected InterpreterContext createDummyInterpreterContext() {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumBundleFactoryTest.java
Patch:
@@ -139,7 +139,8 @@ public void bundleLocalPackage() throws IOException, TaskRunnerException {
     assertTrue(bundle.isFile());
   }
 
-  @Test
+  //TODO(zjffdu) Ignore flaky test, enable it later after fixing this flaky test
+  //@Test
   public void bundleErrorPropagation() throws IOException, TaskRunnerException {
     URL res = Resources.getResource("helium/webpack.config.js");
     String resDir = new File(res.getFile()).getParent();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -83,7 +83,7 @@ public class Notebook implements NoteEventListener {
   private final FolderView folders = new FolderView();
   private ZeppelinConfiguration conf;
   private StdSchedulerFactory quertzSchedFact;
-  private org.quartz.Scheduler quartzSched;
+  org.quartz.Scheduler quartzSched;
   private ParagraphJobListener paragraphJobListener;
   private NotebookRepo notebookRepo;
   private SearchService noteSearchService;
@@ -676,7 +676,7 @@ public void refreshCron(String id) {
     synchronized (notes) {
 
       Note note = notes.get(id);
-      if (note == null) {
+      if (note == null || note.isTrash()) {
         return;
       }
       Map<String, Object> config = note.getConfig();

File: zeppelin-server/src/test/java/org/apache/zeppelin/recovery/RecoveryTest.java
Patch:
@@ -55,6 +55,7 @@ public static void init() throws Exception {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_RECOVERY_DIR.getVarName(),
             recoveryDir.getAbsolutePath());
     startUp(RecoveryTest.class.getSimpleName());
+    ZeppelinServer.notebook.setParagraphJobListener(ZeppelinServer.notebookWsServer);
   }
 
   @AfterClass
@@ -107,6 +108,7 @@ public void testRecovery_2() throws Exception {
     assertEquals(resp.get("status"), "OK");
     post.releaseConnection();
     assertEquals(Job.Status.FINISHED, p1.getStatus());
+    note1.persist(AuthenticationInfo.ANONYMOUS);
 
     // restart the python interpreter
     ZeppelinServer.notebook.getInterpreterSettingManager().restart(
@@ -143,6 +145,7 @@ public void testRecovery_3() throws Exception {
     assertEquals(resp.get("status"), "OK");
     post.releaseConnection();
     assertEquals(Job.Status.FINISHED, p1.getStatus());
+    note1.persist(AuthenticationInfo.ANONYMOUS);
 
     // shutdown zeppelin and restart it
     shutDown();

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -57,6 +57,7 @@ public class NotebookRestApiTest extends AbstractTestRestApi {
   @BeforeClass
   public static void init() throws Exception {
     startUp(NotebookRestApiTest.class.getSimpleName());
+    ZeppelinServer.notebook.setParagraphJobListener(ZeppelinServer.notebookWsServer);
   }
 
   @AfterClass

File: zeppelin-server/src/test/java/org/apache/zeppelin/security/SecurityUtilsTest.java
Patch:
@@ -127,7 +127,8 @@ public void testUsernameForceLowerCase() throws IOException, InterruptedExceptio
         .getVarName(), String.valueOf(true));
     setupPrincipalName(expectedName);
     assertEquals(expectedName.toLowerCase(), SecurityUtils.getPrincipal());
-
+    System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_USERNAME_FORCE_LOWERCASE
+        .getVarName(), String.valueOf(false));
   }
 
   private void setupPrincipalName(String expectedName) {

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -111,7 +111,7 @@ public int getProgress(InterpreterContext context) throws InterpreterException {
   @Override
   public Scheduler getScheduler() {
     if (concurrentSQL()) {
-      int maxConcurrency = Integer.parseInt(getProperty("zeppelin.spark.concurrentSQL", "10"));
+      int maxConcurrency = Integer.parseInt(getProperty("zeppelin.spark.concurrentSQL.max", "10"));
       return SchedulerFactory.singleton().createOrGetParallelScheduler(
           SparkSqlInterpreter.class.getName() + this.hashCode(), maxConcurrency);
     } else {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FileSystemStorage.java
Patch:
@@ -62,6 +62,8 @@ public FileSystemStorage(ZeppelinConfiguration zConf, String path) throws IOExce
     this.hadoopConf = new Configuration();
     // disable checksum for local file system. because interpreter.json may be updated by
     // non-hadoop filesystem api
+    // disable caching for file:// scheme to avoid getting LocalFS which does CRC checks
+    this.hadoopConf.setBoolean("fs.file.impl.disable.cache", true);
     this.hadoopConf.set("fs.file.impl", RawLocalFileSystem.class.getName());
     this.isSecurityEnabled = UserGroupInformation.isSecurityEnabled();
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -78,7 +78,7 @@ public boolean isCompleted() {
   private Date dateCreated;
   private Date dateStarted;
   private Date dateFinished;
-  private volatile Status status;
+  protected volatile Status status;
 
   transient boolean aborted = false;
   private volatile String errorMessage;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -160,6 +160,8 @@ public void setResult(InterpreterResult result) {
 
   public Paragraph cloneParagraphForUser(String user) {
     Paragraph p = new Paragraph(this);
+    // reset status to READY when clone Paragraph for personalization.
+    p.status = Status.READY;
     addUser(p, user);
     return p;
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -75,7 +75,7 @@ public boolean isCompleted() {
   private Date dateCreated;
   private Date dateStarted;
   private Date dateFinished;
-  protected volatile Status status;
+  private volatile Status status;
 
   transient boolean aborted = false;
   private volatile String errorMessage;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -155,8 +155,6 @@ public void setResult(InterpreterResult result) {
 
   public Paragraph cloneParagraphForUser(String user) {
     Paragraph p = new Paragraph(this);
-    // reset status to READY when clone Paragraph for personalization.
-    p.status = Status.READY;
     addUser(p, user);
     return p;
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -75,7 +75,7 @@ public boolean isCompleted() {
   private Date dateCreated;
   private Date dateStarted;
   private Date dateFinished;
-  private volatile Status status;
+  protected volatile Status status;
 
   transient boolean aborted = false;
   private volatile String errorMessage;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -155,6 +155,8 @@ public void setResult(InterpreterResult result) {
 
   public Paragraph cloneParagraphForUser(String user) {
     Paragraph p = new Paragraph(this);
+    // reset status to READY when clone Paragraph for personalization.
+    p.status = Status.READY;
     addUser(p, user);
     return p;
   }

File: elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/action/ActionException.java
Patch:
@@ -17,9 +17,7 @@
 
 package org.apache.zeppelin.elasticsearch.action;
 
-/**
- * Runtime exception thrown when there is a problem during an action (search, get, ...).
- */
+/** Runtime exception thrown when there is a problem during an action (search, get, ...). */
 public class ActionException extends RuntimeException {
 
   public ActionException(String message) {

File: elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/action/HitWrapper.java
Patch:
@@ -21,9 +21,7 @@
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 
-/**
- * Contains the data of a hit.
- */
+/** Contains the data of a hit. */
 public class HitWrapper {
 
   private final JsonParser parser = new JsonParser();

File: elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/client/ElasticsearchClient.java
Patch:
@@ -19,9 +19,7 @@
 
 import org.apache.zeppelin.elasticsearch.action.ActionResponse;
 
-/**
- * Interface that must be implemented by any kind of Elasticsearch client (transport, ...).
- */
+/** Interface that must be implemented by any kind of Elasticsearch client (transport, ...). */
 public interface ElasticsearchClient {
 
   ActionResponse get(String index, String type, String id);

File: ignite/src/main/java/org/apache/zeppelin/ignite/IgniteInterpreterUtils.java
Patch:
@@ -19,12 +19,11 @@
 
 import org.apache.zeppelin.interpreter.InterpreterResult;
 
-/**
- * Apache Ignite interpreter utils.
- */
+/** Apache Ignite interpreter utils. */
 public class IgniteInterpreterUtils {
   /**
    * Builds error result from given exception.
+   *
    * @param e Exception.
    * @return result.
    */

File: livy/src/main/java/org/apache/zeppelin/livy/SessionDeadException.java
Patch:
@@ -17,6 +17,4 @@
 
 package org.apache.zeppelin.livy;
 
-public class SessionDeadException extends LivyException {
-
-}
+public class SessionDeadException extends LivyException {}

File: livy/src/main/java/org/apache/zeppelin/livy/SessionNotFoundException.java
Patch:
@@ -17,9 +17,7 @@
 
 package org.apache.zeppelin.livy;
 
-/**
- *
- */
+/** */
 public class SessionNotFoundException extends LivyException {
 
   public SessionNotFoundException(String message) {

File: markdown/src/main/java/org/apache/zeppelin/markdown/MarkdownParser.java
Patch:
@@ -17,9 +17,7 @@
 
 package org.apache.zeppelin.markdown;
 
-/**
- * Abstract Markdown Parser.
- */
+/** Abstract Markdown Parser. */
 public interface MarkdownParser {
   String render(String markdownText);
 }

File: markdown/src/main/java/org/apache/zeppelin/markdown/ParamVar.java
Patch:
@@ -17,10 +17,9 @@
 
 package org.apache.zeppelin.markdown;
 
-import org.parboiled.support.Var;
-
 import java.util.HashMap;
 import java.util.Map;
+import org.parboiled.support.Var;
 
 /**
  * Implementation of Var to support parameter parsing.

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -202,7 +202,7 @@ public ZeppelinServer() throws Exception {
     this.interpreterService = new InterpreterService(conf, interpreterSettingManager);
 
     // Register MBean
-    if ("true".equals(System.getenv("ZEPPELIN_ENABLE_JMX"))) {
+    if ("true".equals(System.getenv("ZEPPELIN_JMX_ENABLE"))) {
       MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();
       try {
         mBeanServer.registerMBean(

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -197,7 +197,6 @@ public Response restartSetting(String message, @PathParam("settingId") String se
       } else {
         interpreterSettingManager.restart(settingId, noteId, SecurityUtils.getPrincipal());
       }
-      notebookServer.clearParagraphRuntimeInfo(setting);
 
     } catch (InterpreterException e) {
       logger.error("Exception in InterpreterRestApi while restartSetting ", e);

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -789,7 +789,7 @@ public Response runParagraphSynchronously(@PathParam("noteId") String noteId,
         new HashMap<>(), false, true, getServiceContext(), new RestServiceCallback<>())) {
       Note note = notebookService.getNote(noteId, getServiceContext(), new RestServiceCallback<>());
       Paragraph p = note.getParagraph(paragraphId);
-      InterpreterResult result = p.getResult();
+      InterpreterResult result = p.getReturn();
       if (result.code() == InterpreterResult.Code.SUCCESS) {
         return new JsonResponse<>(Status.OK, result).build();
       } else {

File: zeppelin-server/src/test/java/org/apache/zeppelin/recovery/RecoveryTest.java
Patch:
@@ -90,7 +90,7 @@ public void testRecovery() throws Exception {
     assertEquals(resp.get("status"), "OK");
     post.releaseConnection();
     assertEquals(Job.Status.FINISHED, p1.getStatus());
-    assertEquals("abc\n", p1.getResult().message().get(0).getData());
+    assertEquals("abc\n", p1.getReturn().message().get(0).getData());
   }
 
   @Test

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -249,7 +249,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
     while (p.getStatus() != Status.FINISHED) {
       Thread.sleep(100);
     }
-    assertEquals(p.getResult().message().get(0).getData(), getSimulatedMarkdownResult("markdown"));
+    assertEquals(p.getReturn().message().get(0).getData(), getSimulatedMarkdownResult("markdown"));
 
     // when: restart interpreter
     for (InterpreterSetting setting : ZeppelinServer.notebook.getInterpreterSettingManager()
@@ -274,7 +274,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
     }
 
     // then
-    assertEquals(p.getResult().message().get(0).getData(),
+    assertEquals(p.getReturn().message().get(0).getData(),
             getSimulatedMarkdownResult("markdown restarted"));
     ZeppelinServer.notebook.removeNote(note.getId(), anonymous);
   }
@@ -296,7 +296,7 @@ public void testRestartInterpreterPerNote() throws IOException, InterruptedExcep
     while (p.getStatus() != Status.FINISHED) {
       Thread.sleep(100);
     }
-    assertEquals(p.getResult().message().get(0).getData(), getSimulatedMarkdownResult("markdown"));
+    assertEquals(p.getReturn().message().get(0).getData(), getSimulatedMarkdownResult("markdown"));
 
     // when: get md interpreter
     InterpreterSetting mdIntpSetting = null;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -148,7 +148,7 @@ public void testRunAllParagraph_AllSuccess() throws IOException {
 
     assertEquals(Job.Status.FINISHED, p1.getStatus());
     assertEquals(Job.Status.FINISHED, p2.getStatus());
-    assertEquals("abc\n", p2.getResult().message().get(0).getData());
+    assertEquals("abc\n", p2.getReturn().message().get(0).getData());
   }
 
   @Test
@@ -334,7 +334,7 @@ public void testRunWithServerRestart() throws Exception {
 
     assertEquals(Job.Status.FINISHED, p1.getStatus());
     assertEquals(Job.Status.FINISHED, p2.getStatus());
-    assertNotNull(p2.getResult());
-    assertEquals("abc\n", p2.getResult().message().get(0).getData());
+    assertNotNull(p2.getReturn());
+    assertEquals("abc\n", p2.getReturn().message().get(0).getData());
   }
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java
Patch:
@@ -177,7 +177,7 @@ public void testParagraphOperations() throws IOException {
     // clean output
     reset(callback);
     notebookService.clearParagraphOutput(note1.getId(), p.getId(), context, callback);
-    assertNull(p.getResult());
+    assertNull(p.getReturn());
     verify(callback).onSuccess(p, context);
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -464,7 +464,7 @@ public Paragraph removeParagraph(String user, String paragraphId) {
 
   public void clearParagraphOutputFields(Paragraph p) {
     p.setReturn(null, null);
-    p.clearRuntimeInfo(null);
+    p.cleanRuntimeInfos();
   }
 
   public Paragraph clearPersonalizedParagraphOutput(String paragraphId, String user) {
@@ -907,7 +907,7 @@ public static Note fromJson(String json) {
 
   public void postProcessParagraphs() {
     for (Paragraph p : paragraphs) {
-      p.clearRuntimeInfos();
+      p.cleanRuntimeInfos();
       p.parseText();
 
       if (p.getStatus() == Status.PENDING || p.getStatus() == Status.RUNNING) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -436,7 +436,6 @@ public Note loadNoteFromRepo(String id, AuthenticationInfo subject) {
       if (p.getDateFinished() != null && lastUpdatedDate.before(p.getDateFinished())) {
         lastUpdatedDate = p.getDateFinished();
       }
-      p.clearRuntimeInfo(null);
     }
 
     Map<String, List<AngularObject>> savedObjects = note.getAngularObjects();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/ParagraphTest.java
Patch:
@@ -266,12 +266,14 @@ public void returnUnchangedResultsWithDifferentUser() throws Throwable {
 
     List<InterpreterSetting> spyInterpreterSettingList = spy(Lists.<InterpreterSetting>newArrayList());
     InterpreterSetting mockInterpreterSetting = mock(InterpreterSetting.class);
+    when(mockInterpreterGroup.getInterpreterSetting()).thenReturn(mockInterpreterSetting);
     InterpreterOption mockInterpreterOption = mock(InterpreterOption.class);
     when(mockInterpreterSetting.getOption()).thenReturn(mockInterpreterOption);
     when(mockInterpreterOption.permissionIsSet()).thenReturn(false);
     when(mockInterpreterSetting.getStatus()).thenReturn(Status.READY);
     when(mockInterpreterSetting.getId()).thenReturn("mock_id_1");
     when(mockInterpreterSetting.getOrCreateInterpreterGroup(anyString(), anyString())).thenReturn(mockInterpreterGroup);
+    when(mockInterpreterSetting.isUserAuthorized(any(List.class))).thenReturn(true);
     spyInterpreterSettingList.add(mockInterpreterSetting);
     when(mockNote.getId()).thenReturn("any_id");
 
@@ -285,7 +287,6 @@ public void returnUnchangedResultsWithDifferentUser() throws Throwable {
     when(mockInterpreter.interpret(anyString(), Mockito.<InterpreterContext>any())).thenReturn(mockInterpreterResult);
     when(mockInterpreterResult.code()).thenReturn(Code.SUCCESS);
 
-
     // Actual test
     List<InterpreterResultMessage> result1 = Lists.newArrayList();
     result1.add(new InterpreterResultMessage(Type.TEXT, "result1"));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -137,7 +137,7 @@ public void setStatus(Status status) {
     Status before = this.status;
     Status after = status;
     this.status = status;
-    if (listener != null && before != after) {
+    if (listener != null && before != null && before != after) {
       listener.onStatusChange(this, before, after);
     }
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java
Patch:
@@ -20,8 +20,8 @@
 /**
  * Listener for job execution.
  */
-public interface JobListener {
-  void onProgressUpdate(Job job, int progress);
+public interface JobListener<T extends Job> {
+  void onProgressUpdate(T job, int progress);
 
-  void onStatusChange(Job job, Job.Status before, Job.Status after);
+  void onStatusChange(T job, Job.Status before, Job.Status after);
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -394,7 +394,7 @@ public void onSuccess(String message, ServiceContext context) {
   @Path("{noteId}")
   @ZeppelinApi
   public Response cloneNote(@PathParam("noteId") String noteId, String message)
-      throws IOException, CloneNotSupportedException, IllegalArgumentException {
+      throws IOException, IllegalArgumentException {
     LOG.info("clone note by JSON {}", message);
     checkIfUserCanWrite(noteId, "Insufficient privileges you cannot clone this note");
     NewNoteRequest request = NewNoteRequest.fromJson(message);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/FolderViewTest.java
Patch:
@@ -42,7 +42,7 @@ public class FolderViewTest {
   NotebookRepo repo;
 
   @Mock
-  JobListenerFactory jobListenerFactory;
+  ParagraphJobListener paragraphJobListener;
 
   @Mock
   SearchService index;
@@ -89,7 +89,7 @@ public class FolderViewTest {
   Note abNote2;
 
   private Note createNote() {
-    Note note = new Note("test", "test", repo, interpreterFactory, interpreterSettingManager, jobListenerFactory, index, credentials, noteEventListener);
+    Note note = new Note("test", "test", repo, interpreterFactory, interpreterSettingManager, paragraphJobListener, index, credentials, noteEventListener);
     note.setNoteNameListener(folderView);
     return note;
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/AdminRestApi.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.google.common.collect.Lists;
 import java.util.List;
+import javax.inject.Inject;
 import javax.ws.rs.BadRequestException;
 import javax.ws.rs.GET;
 import javax.ws.rs.POST;
@@ -38,6 +39,7 @@ public class AdminRestApi {
 
   private AdminService adminService;
 
+  @Inject
   public AdminRestApi(AdminService adminService) {
     this.adminService = adminService;
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/CredentialRestApi.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.gson.reflect.TypeToken;
 import java.io.IOException;
 import java.util.Map;
+import javax.inject.Inject;
 import javax.ws.rs.DELETE;
 import javax.ws.rs.GET;
 import javax.ws.rs.PUT;
@@ -46,6 +47,7 @@ public class CredentialRestApi {
   private Credentials credentials;
   private Gson gson = new Gson();
 
+  @Inject
   public CredentialRestApi(Credentials credentials) {
     this.credentials = credentials;
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/HeliumRestApi.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.gson.JsonParseException;
 import com.google.gson.reflect.TypeToken;
 
+import javax.inject.Inject;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
@@ -58,6 +59,7 @@ public class HeliumRestApi {
   private Notebook notebook;
   private Gson gson = new Gson();
 
+  @Inject
   public HeliumRestApi(Helium helium, Notebook notebook) {
     this.helium  = helium;
     this.notebook = notebook;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zeppelin.rest;
 
 import com.google.common.collect.Maps;
+import javax.inject.Inject;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.dep.Repository;
@@ -68,6 +69,7 @@ public class InterpreterRestApi {
   private final InterpreterSettingManager interpreterSettingManager;
   private final NotebookServer notebookServer;
 
+  @Inject
   public InterpreterRestApi(
       InterpreterService interpreterService,
       InterpreterSettingManager interpreterSettingManager,
@@ -213,7 +215,7 @@ public Response restartSetting(String message, @PathParam("settingId") String se
    */
   @GET
   @ZeppelinApi
-  public Response listInterpreter(String message) {
+  public Response listInterpreter() {
     Map<String, InterpreterSetting> m = interpreterSettingManager.getInterpreterSettingTemplates();
     return new JsonResponse<>(Status.OK, "", m).build();
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRepoRestApi.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.collect.Sets;
 import com.google.gson.JsonSyntaxException;
 
+import javax.inject.Inject;
 import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.service.ServiceContext;
 import org.slf4j.Logger;
@@ -58,8 +59,7 @@ public class NotebookRepoRestApi {
   private NotebookRepoSync noteRepos;
   private NotebookServer notebookWsServer;
 
-  public NotebookRepoRestApi() {}
-
+  @Inject
   public NotebookRepoRestApi(NotebookRepoSync noteRepos, NotebookServer notebookWsServer) {
     this.noteRepos = noteRepos;
     this.notebookWsServer = notebookWsServer;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/ZeppelinRestApi.java
Patch:
@@ -41,8 +41,6 @@
  */
 @Path("/")
 public class ZeppelinRestApi {
-  public ZeppelinRestApi() {
-  }
 
   /**
    * Get the root endpoint Return always 200.

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/ConfigurationService.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zeppelin.service;
 
+import javax.inject.Inject;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -31,6 +32,7 @@ public class ConfigurationService {
 
   private ZeppelinConfiguration zConf;
 
+  @Inject
   public ConfigurationService(ZeppelinConfiguration zConf) {
     this.zConf = zConf;
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/service/InterpreterService.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import javax.inject.Inject;
 import jline.internal.Preconditions;
 import org.apache.commons.io.FileUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
@@ -54,6 +55,7 @@ public class InterpreterService {
   private final ZeppelinConfiguration conf;
   private final InterpreterSettingManager interpreterSettingManager;
 
+  @Inject
   public InterpreterService(
       ZeppelinConfiguration conf, InterpreterSettingManager interpreterSettingManager) {
     this.conf = conf;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -38,7 +38,6 @@
  * Changing/adding/deleting non transitive field name need consideration of that.
  */
 public abstract class Job<T> {
-
   private static Logger LOGGER = LoggerFactory.getLogger(Job.class);
   private static SimpleDateFormat JOB_DATE_FORMAT = new SimpleDateFormat("yyyyMMdd-HHmmss");
 

File: zeppelin-plugins/notebookrepo/github/src/test/java/org/apache/zeppelin/notebook/repo/GitHubNotebookRepoTest.java
Patch:
@@ -1,3 +1,4 @@
+
 /*
  * Licensed to the Apache Software Foundation (ASF) under one or more
  * contributor license agreements.  See the NOTICE file distributed with

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1669,7 +1669,7 @@ private void broadcastSpellExecution(NotebookSocket conn, HashSet<String> userAn
     final Note note = notebook.getNote(noteId);
     Paragraph p = setParagraphUsingMessage(note, fromMessage, paragraphId,
         text, title, params, config);
-    p.setResult(fromMessage.get("results"));
+    p.setResult((InterpreterResult) fromMessage.get("results"));
     p.setErrorMessage((String) fromMessage.get("errorMessage"));
     p.setStatusWithoutNotification(status);
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java
Patch:
@@ -242,7 +242,7 @@ public void testNoteJson() {
     String pText = "%spark sc.version";
     Paragraph p = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     p.setText(pText);
-    p.setResult("1.6.2");
+    p.setResult(new InterpreterResult(InterpreterResult.Code.SUCCESS, "1.6.2"));
     p.settings.getForms().put("textbox_1", new TextBox("name", "default_name"));
     p.settings.getParams().put("textbox_1", "my_name");
     note.getAngularObjects().put("ao_1", Lists.newArrayList(new AngularObject("name_1", "value_1", note.getId(), p.getId(), null)));

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/ParagraphTest.java
Patch:
@@ -241,11 +241,11 @@ public void should_extract_variable_from_angular_object_registry() throws Except
   @Test
   public void returnDefaultParagraphWithNewUser() {
     Paragraph p = new Paragraph("para_1", null, null, null);
-    Object defaultValue = "Default Value";
-    p.setResult(defaultValue);
+    String defaultValue = "Default Value";
+    p.setResult(new InterpreterResult(Code.SUCCESS, defaultValue));
     Paragraph newUserParagraph = p.getUserParagraph("new_user");
     assertNotNull(newUserParagraph);
-    assertEquals(defaultValue, newUserParagraph.getReturn());
+    assertEquals(defaultValue, newUserParagraph.getReturn().message().get(0).getData());
   }
 
   @Test

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.zeppelin.rest.AdminRestApi;
 import org.apache.zeppelin.rest.exception.WebApplicationExceptionMapper;
 import org.apache.zeppelin.service.AdminService;
+import org.apache.zeppelin.service.ConfigurationService;
 import org.eclipse.jetty.http.HttpVersion;
 import org.eclipse.jetty.server.HttpConfiguration;
 import org.eclipse.jetty.server.HttpConnectionFactory;
@@ -471,7 +472,8 @@ public Set<Object> getSingletons() {
     LoginRestApi loginRestApi = new LoginRestApi();
     singletons.add(loginRestApi);
 
-    ConfigurationsRestApi settingsApi = new ConfigurationsRestApi(notebook);
+    ConfigurationsRestApi settingsApi = new ConfigurationsRestApi(
+        new ConfigurationService(notebook.getConf()));
     singletons.add(settingsApi);
 
     AdminService adminService = new AdminService();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookEventListener.java
Patch:
@@ -24,6 +24,4 @@
 public interface NotebookEventListener extends NoteEventListener {
   public void onNoteRemove(Note note);
   public void onNoteCreate(Note note);
-
-  public void onUnbindInterpreter(Note note, InterpreterSetting setting);
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -71,7 +71,7 @@ public void tearDown() throws Exception {
   }
 
   protected Note createNote() {
-    return new Note("test", null, interpreterFactory, interpreterSettingManager, null, null, null, null);
+    return new Note("test", "test", null, interpreterFactory, interpreterSettingManager, null, null, null, null);
   }
 
   protected InterpreterContext createDummyInterpreterContext() {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/FolderViewTest.java
Patch:
@@ -89,7 +89,7 @@ public class FolderViewTest {
   Note abNote2;
 
   private Note createNote() {
-    Note note = new Note("test", repo, interpreterFactory, interpreterSettingManager, jobListenerFactory, index, credentials, noteEventListener);
+    Note note = new Note("test", "test", repo, interpreterFactory, interpreterSettingManager, jobListenerFactory, index, credentials, noteEventListener);
     note.setNoteNameListener(folderView);
     return note;
   }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java
Patch:
@@ -299,6 +299,7 @@ private Paragraph addParagraphWithTextAndTitle(Note note, String text, String ti
   private Note newNote(String name) {
     Note note =
         new Note(
+            "test",
             "test",
             notebookRepoMock,
             interpreterFactory,

File: zeppelin-plugins/launcher/spark/src/test/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncherTest.java
Patch:
@@ -163,7 +163,7 @@ public void testYarnClusterMode_1() throws IOException {
     assertTrue(interpreterProcess.getEnv().size() >= 3);
     assertEquals("/user/spark", interpreterProcess.getEnv().get("SPARK_HOME"));
     assertEquals("true", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_YARN_CLUSTER"));
-    assertEquals(" --master yarn-cluster --files .//conf/log4j_yarn_cluster.properties --conf spark.files='file_1' --conf spark.jars='jar_1' --conf spark.yarn.isPython=true --conf spark.yarn.submit.waitAppCompletion=false", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
+    assertEquals(" --master yarn-cluster --conf spark.files='file_1',.//conf/log4j_yarn_cluster.properties --conf spark.jars='jar_1' --conf spark.yarn.isPython=true --conf spark.yarn.submit.waitAppCompletion=false", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
   }
 
   @Test
@@ -196,7 +196,7 @@ public void testYarnClusterMode_2() throws IOException {
     assertTrue(interpreterProcess.getEnv().size() >= 3);
     assertEquals("/user/spark", interpreterProcess.getEnv().get("SPARK_HOME"));
     assertEquals("true", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_YARN_CLUSTER"));
-    assertEquals(" --master yarn --files .//conf/log4j_yarn_cluster.properties --conf spark.files='file_1' --conf spark.jars='jar_1' --conf spark.submit.deployMode='cluster' --conf spark.yarn.isPython=true --conf spark.yarn.submit.waitAppCompletion=false --proxy-user user1 --jars " + Paths.get(localRepoPath.toAbsolutePath().toString(), "test.jar").toString(), interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
+    assertEquals(" --master yarn --conf spark.files='file_1',.//conf/log4j_yarn_cluster.properties --conf spark.jars='jar_1' --conf spark.submit.deployMode='cluster' --conf spark.yarn.isPython=true --conf spark.yarn.submit.waitAppCompletion=false --proxy-user user1 --jars " + Paths.get(localRepoPath.toAbsolutePath().toString(), "test.jar").toString(), interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
     Files.deleteIfExists(Paths.get(localRepoPath.toAbsolutePath().toString(), "test.jar"));
     FileUtils.deleteDirectory(localRepoPath.toFile());
   }
@@ -230,7 +230,7 @@ public void testYarnClusterMode_3() throws IOException {
     assertTrue(interpreterProcess.getEnv().size() >= 3);
     assertEquals("/user/spark", interpreterProcess.getEnv().get("SPARK_HOME"));
     assertEquals("true", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_YARN_CLUSTER"));
-    assertEquals(" --master yarn --files .//conf/log4j_yarn_cluster.properties --conf spark.files='file_1' --conf spark.jars='jar_1' --conf spark.submit.deployMode='cluster' --conf spark.yarn.isPython=true --conf spark.yarn.submit.waitAppCompletion=false --proxy-user user1", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
+    assertEquals(" --master yarn --conf spark.files='file_1',.//conf/log4j_yarn_cluster.properties --conf spark.jars='jar_1' --conf spark.submit.deployMode='cluster' --conf spark.yarn.isPython=true --conf spark.yarn.submit.waitAppCompletion=false --proxy-user user1", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
     FileUtils.deleteDirectory(localRepoPath.toFile());
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -57,6 +57,7 @@
 import org.apache.zeppelin.resource.ResourcePool;
 import org.apache.zeppelin.scheduler.Job;
 import org.apache.zeppelin.scheduler.JobListener;
+import org.apache.zeppelin.scheduler.JobWithProgressPoller;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.user.Credentials;
@@ -71,7 +72,7 @@
 /**
  * Paragraph is a representation of an execution unit.
  */
-public class Paragraph extends Job implements Cloneable, JsonSerializable {
+public class Paragraph extends JobWithProgressPoller<Object> implements Cloneable, JsonSerializable {
 
   private static Logger logger = LoggerFactory.getLogger(Paragraph.class);
   private static Pattern REPL_PATTERN =

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java
Patch:
@@ -67,7 +67,7 @@ public void test() throws Exception {
 
     Scheduler scheduler = intpA.getScheduler();
 
-    Job job = new Job("jobId", "jobName", null, 200) {
+    Job job = new Job("jobId", "jobName", null) {
       Object results;
 
       @Override
@@ -140,7 +140,7 @@ public void testAbortOnPending() throws Exception {
 
     Scheduler scheduler = intpA.getScheduler();
 
-    Job job1 = new Job("jobId1", "jobName1", null, 200) {
+    Job job1 = new Job("jobId1", "jobName1", null) {
       Object results;
       InterpreterContext context = InterpreterContext.builder()
           .setNoteId("noteId")
@@ -187,7 +187,7 @@ public void setResult(Object results) {
       }
     };
 
-    Job job2 = new Job("jobId2", "jobName2", null, 200) {
+    Job job2 = new Job("jobId2", "jobName2", null) {
       public Object results;
       InterpreterContext context = InterpreterContext.builder()
           .setNoteId("noteId")

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/FlinkIntegrationTest.java
Patch:
@@ -70,8 +70,7 @@ public static void tearDown() throws IOException {
 
   private void testInterpreterBasics() throws IOException, InterpreterException {
     // test FlinkInterpreter
-    interpreterSettingManager.setInterpreterBinding("user1", "note1", interpreterSettingManager.getInterpreterSettingIds());
-    Interpreter flinkInterpreter = interpreterFactory.getInterpreter("user1", "note1", "flink");
+    Interpreter flinkInterpreter = interpreterFactory.getInterpreter("user1", "note1", "flink", "flink");
 
     InterpreterContext context = new InterpreterContext.Builder().setNoteId("note1").setParagraphId("paragraph_1").build();
     InterpreterResult interpreterResult = flinkInterpreter.interpret("1+1", context);

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -473,7 +473,7 @@ public void testCreateNoteWithDefaultInterpreterId() throws IOException {
     String defaultInterpreterId = "";
     List<InterpreterSetting> settings = notebook.getInterpreterSettingManager().get();
     if (settings.size() > 1) {
-      defaultInterpreterId = settings.get(1).getId();
+      defaultInterpreterId = settings.get(0).getId();
     }
     // create note from sock1
     notebookServer.onMessage(sock1,

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSaving.java
Patch:
@@ -50,7 +50,6 @@ public class InterpreterInfoSaving implements JsonSerializable {
   private static final Gson gson =  new GsonBuilder().setPrettyPrinting().create();
 
   public Map<String, InterpreterSetting> interpreterSettings = new HashMap<>();
-  public Map<String, List<String>> interpreterBindings = new HashMap<>();
   public List<RemoteRepository> interpreterRepositories = new ArrayList<>();
 
   public static InterpreterInfoSaving loadFromFile(Path file) throws IOException {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java
Patch:
@@ -18,6 +18,7 @@
 
 package org.apache.zeppelin.interpreter;
 
+import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
 import org.apache.zeppelin.scheduler.Job;
 import org.apache.zeppelin.scheduler.Scheduler;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -71,7 +71,7 @@ public void tearDown() throws Exception {
   }
 
   protected Note createNote() {
-    return new Note(null, interpreterFactory, interpreterSettingManager, null, null, null, null);
+    return new Note("test", null, interpreterFactory, interpreterSettingManager, null, null, null, null);
   }
 
   protected InterpreterContext createDummyInterpreterContext() {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/FolderViewTest.java
Patch:
@@ -89,7 +89,7 @@ public class FolderViewTest {
   Note abNote2;
 
   private Note createNote() {
-    Note note = new Note(repo, interpreterFactory, interpreterSettingManager, jobListenerFactory, index, credentials, noteEventListener);
+    Note note = new Note("test", repo, interpreterFactory, interpreterSettingManager, jobListenerFactory, index, credentials, noteEventListener);
     note.setNoteNameListener(folderView);
     return note;
   }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java
Patch:
@@ -299,6 +299,7 @@ private Paragraph addParagraphWithTextAndTitle(Note note, String text, String ti
   private Note newNote(String name) {
     Note note =
         new Note(
+            "test",
             notebookRepoMock,
             interpreterFactory,
             interpreterSettingManager,

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -225,7 +225,9 @@ public InterpreterResult call(Client client) throws Exception {
                 remoteResult.getConfig(), new TypeToken<Map<String, Object>>() {
                 }.getType());
             context.getConfig().clear();
-            context.getConfig().putAll(remoteConfig);
+            if (remoteConfig != null) {
+              context.getConfig().putAll(remoteConfig);
+            }
             GUI currentGUI = context.getGui();
             GUI currentNoteGUI = context.getNoteGui();
             if (form == FormType.NATIVE) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -524,7 +524,7 @@ public void testSparkZeppelinContextDynamicForms() throws IOException {
     assertEquals("null", result[1]);
     assertEquals("1", result[2]);
     assertEquals("2", result[3]);
-    assertEquals("items: Seq[Object] = Buffer(2)", result[4]);
+    assertEquals("items: Seq[Any] = Buffer(2)", result[4]);
   }
 
   @Test

File: java/src/main/java/org/apache/zeppelin/java/StaticRepl.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.beam;
+package org.apache.zeppelin.java;
 
 import com.thoughtworks.qdox.JavaProjectBuilder;
 import com.thoughtworks.qdox.model.JavaClass;

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java
Patch:
@@ -120,7 +120,7 @@ public void open() throws InterpreterException {
       if (!StringUtils.isBlank(sparkUrlProp)) {
         sparkUrl = sparkUrlProp;
       }
-      sparkShims = SparkShims.getInstance(sc.version());
+      sparkShims = SparkShims.getInstance(sc.version(), getProperties());
       sparkShims.setupSparkListener(sc.master(), sparkUrl, InterpreterContext.get());
 
       z = new SparkZeppelinContext(sc, sparkShims, hooks,

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java
Patch:
@@ -707,7 +707,7 @@ public void open() throws InterpreterException {
       dep = getDependencyResolver();
       hooks = getInterpreterGroup().getInterpreterHookRegistry();
       sparkUrl = getSparkUIUrl();
-      sparkShims = SparkShims.getInstance(sc.version());
+      sparkShims = SparkShims.getInstance(sc.version(), getProperties());
       sparkShims.setupSparkListener(sc.master(), sparkUrl, InterpreterContext.get());
       numReferenceOfSparkContext.incrementAndGet();
 

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkShimsTest.java
Patch:
@@ -89,7 +89,7 @@ public static Collection<Object[]> data() {
     @Test
     public void checkYarnVersionTest() {
       SparkShims sparkShims =
-          new SparkShims() {
+          new SparkShims(new Properties()) {
             @Override
             public void setupSparkListener(String master,
                                            String sparkWebUrl,
@@ -121,9 +121,9 @@ public void setUp() {
       when(mockContext.getIntpEventClient()).thenReturn(mockIntpEventClient);
       doNothing().when(mockIntpEventClient).onParaInfosReceived(argumentCaptor.capture());
       try {
-        sparkShims = SparkShims.getInstance(SparkVersion.SPARK_2_0_0.toString());
+        sparkShims = SparkShims.getInstance(SparkVersion.SPARK_2_0_0.toString(), new Properties());
       } catch (Throwable ignore) {
-        sparkShims = SparkShims.getInstance(SparkVersion.SPARK_1_6_0.toString());
+        sparkShims = SparkShims.getInstance(SparkVersion.SPARK_1_6_0.toString(), new Properties());
       }
     }
 

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -186,6 +186,9 @@ public String checkIPythonPrerequisite(String pythonExec) {
       if (!freezeOutput.contains("grpcio=")) {
         return "grpcio is not installed";
       }
+      if (!freezeOutput.contains("protobuf=")) {
+        return "protobuf is not installed";
+      }
       LOGGER.info("IPython prerequisite is met");
     } catch (Exception e) {
       LOGGER.warn("Fail to checkIPythonPrerequisite", e);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/RemoteInterpreterEventServer.java
Patch:
@@ -234,9 +234,8 @@ public void updateAppStatus(AppStatusUpdateEvent event) throws TException {
     appListener.onStatusChange(event.noteId, event.paragraphId, event.appId, event.status);
   }
 
-
   @Override
-  public void runParagraphs(RunParagraphsEvent event) {
+  public void runParagraphs(RunParagraphsEvent event) throws TException {
     try {
       listener.runParagraphs(event.getNoteId(), event.getParagraphIndices(),
           event.getParagraphIds(), event.getCurParagraphId());
@@ -247,7 +246,7 @@ public void runParagraphs(RunParagraphsEvent event) {
         LOGGER.info("complete runParagraphs." + event);
       }
     } catch (IOException e) {
-      throw new RuntimeException(e.getMessage());
+      throw new TException(e);
     }
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -184,7 +184,8 @@ private static void start(boolean withAuth, String testClassName, boolean withKn
           new File("../zeppelin-web/dist").getAbsolutePath());
       System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_CONF_DIR.getVarName(),
           confDir.getAbsolutePath());
-      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_DEFAULT.getVarName(),
+      System.setProperty(
+          ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_DEFAULT.getVarName(),
           "spark");
 
       // some test profile does not build zeppelin-web.

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -701,9 +701,7 @@ public enum ConfVars {
         "http://repo1.maven.org/maven2/"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 60000),
     ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
-    ZEPPELIN_INTERPRETER_GROUP_ORDER("zeppelin.interpreter.group.order", "spark,md,angular,sh,"
-        + "livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,"
-        + "scalding,jdbc,hbase,bigquery,beam,pig,scio,groovy,neo4j"),
+    ZEPPELIN_INTERPRETER_GROUP_DEFAULT("zeppelin.interpreter.group.default", "spark"),
     ZEPPELIN_INTERPRETER_OUTPUT_LIMIT("zeppelin.interpreter.output.limit", 1024 * 100),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -59,7 +59,6 @@ public class HeliumApplicationFactoryTest extends AbstractInterpreterTest implem
 
   @Before
   public void setUp() throws Exception {
-    System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_ORDER.getVarName(), "mock1,mock2");
     super.setUp();
 
     this.schedulerFactory = SchedulerFactory.singleton();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -54,7 +54,7 @@ public void setUp() throws Exception {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_CONF_DIR.getVarName(), confDir.getAbsolutePath());
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_DIR.getVarName(), interpreterDir.getAbsolutePath());
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(), notebookDir.getAbsolutePath());
-    System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_ORDER.getVarName(), "test,mock1,mock2,mock_resource_pool");
+    System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_DEFAULT.getVarName(), "test");
 
     conf = new ZeppelinConfiguration();
     interpreterSettingManager = new InterpreterSettingManager(conf,

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -30,6 +30,7 @@
 
 public class InterpreterFactoryTest extends AbstractInterpreterTest {
 
+
   @Test
   public void testGetFactory() throws IOException, InterpreterException {
     // no default interpreter because there's no interpreter setting binded to this note
@@ -42,8 +43,7 @@ public void testGetFactory() throws IOException, InterpreterException {
     interpreterSettingManager.setInterpreterBinding("user1", "note1", interpreterSettingManager.getSettingIds());
     assertTrue(interpreterFactory.getInterpreter("user1", "note1", "") instanceof RemoteInterpreter);
     RemoteInterpreter remoteInterpreter = (RemoteInterpreter) interpreterFactory.getInterpreter("user1", "note1", "");
-    // EchoInterpreter is the default interpreter because mock1 is the default interpreter group
-
+    // EchoInterpreter is the default interpreter because test is the default interpreter group
     assertEquals(EchoInterpreter.class.getName(), remoteInterpreter.getClassName());
 
     assertTrue(interpreterFactory.getInterpreter("user1", "note1", "test") instanceof RemoteInterpreter);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -88,7 +88,6 @@ public class NotebookTest extends AbstractInterpreterTest implements JobListener
   @Before
   public void setUp() throws Exception {
     System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC.getVarName(), "true");
-    System.setProperty(ConfVars.ZEPPELIN_INTERPRETER_GROUP_ORDER.getVarName(), "mock1,mock2");
     System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_CRON_ENABLE.getVarName(), "true");
     super.setUp();
 

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkShimsTest.java
Patch:
@@ -108,7 +108,6 @@ public String showDataFrame(Object obj, int maxResult) {
   @PrepareForTest({BaseZeppelinContext.class, VersionInfo.class})
   @PowerMockIgnore({"javax.net.*", "javax.security.*"})
   public static class SingleTests {
-    @Mock Properties mockProperties;
     @Captor ArgumentCaptor<Map<String, String>> argumentCaptor;
 
     SparkShims sparkShims;
@@ -130,7 +129,7 @@ public void setUp() {
 
     @Test
     public void runUnderLocalTest() {
-      sparkShims.buildSparkJobUrl("local", "http://sparkurl", 0, mockProperties, mockContext);
+      sparkShims.buildSparkJobUrl("local", "http://sparkurl", 0, mockContext);
 
       Map<String, String> mapValue = argumentCaptor.getValue();
       assertTrue(mapValue.keySet().contains("jobUrl"));
@@ -140,7 +139,7 @@ public void runUnderLocalTest() {
     @Test
     public void runUnderYarnTest() {
 
-      sparkShims.buildSparkJobUrl("yarn", "http://sparkurl", 0, mockProperties, mockContext);
+      sparkShims.buildSparkJobUrl("yarn", "http://sparkurl", 0, mockContext);
 
       Map<String, String> mapValue = argumentCaptor.getValue();
       assertTrue(mapValue.keySet().contains("jobUrl"));

File: spark/spark1-shims/src/main/scala/org/apache/zeppelin/spark/Spark1Shims.java
Patch:
@@ -38,7 +38,9 @@ public void setupSparkListener(final String master,
     sc.addSparkListener(new JobProgressListener(sc.getConf()) {
       @Override
       public void onJobStart(SparkListenerJobStart jobStart) {
-        buildSparkJobUrl(master, sparkWebUrl, jobStart.jobId(), jobStart.properties(), context);
+        if (sc.getConf().getBoolean("spark.ui.enabled", true)) {
+          buildSparkJobUrl(master, sparkWebUrl, jobStart.jobId(), context);
+        }
       }
     });
   }

File: spark/spark2-shims/src/main/scala/org/apache/zeppelin/spark/Spark2Shims.java
Patch:
@@ -39,7 +39,9 @@ public void setupSparkListener(final String master,
     sc.addSparkListener(new SparkListener() {
       @Override
       public void onJobStart(SparkListenerJobStart jobStart) {
-        buildSparkJobUrl(master, sparkWebUrl, jobStart.jobId(), jobStart.properties(), context);
+        if (sc.getConf().getBoolean("spark.ui.enabled", true)) {
+          buildSparkJobUrl(master, sparkWebUrl, jobStart.jobId(), context);
+        }
       }
     });
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java
Patch:
@@ -138,7 +138,7 @@ private JsonResponse proceedToLogin(Subject currentUser, AuthenticationToken tok
       currentUser.getSession(true);
       currentUser.login(token);
 
-      HashSet<String> roles = SecurityUtils.getRoles();
+      HashSet<String> roles = SecurityUtils.getAssociatedRoles();
       String principal = SecurityUtils.getPrincipal();
       String ticket;
       if ("anonymous".equals(principal)) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -168,6 +168,9 @@ public void run() {
 
   private static void start(boolean withAuth, String testClassName, boolean withKnox)
           throws Exception {
+    LOG.info("Starting ZeppelinServer withAuth: {}, testClassName: {}, withKnox: {}",
+        withAuth, testClassName, withKnox);
+    
     if (!WAS_RUNNING) {
       // copy the resources files to a temp folder
       zeppelinHome = new File("..");

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java
Patch:
@@ -248,7 +248,7 @@ public List<InterpreterCompletion> completion(String buf, int cursor,
       candidates = callCompletion(new CompletionRequest(buf, getSessionKind(), cursor));
     } catch (SessionNotFoundException e) {
       LOGGER.warn("Livy session {} is expired. Will return empty list of candidates.",
-          sessionInfo.id);
+          getSessionInfo().id);
     } catch (LivyException le) {
       logger.error("Failed to call code completions. Will return empty list of candidates", le);
     }
@@ -259,7 +259,7 @@ private List<InterpreterCompletion> callCompletion(CompletionRequest req) throws
     List<InterpreterCompletion> candidates = new ArrayList<>();
     try {
       CompletionResponse resp = CompletionResponse.fromJson(
-          callRestAPI("/sessions/" + sessionInfo.id + "/completion", "POST", req.toJson()));
+          callRestAPI("/sessions/" + getSessionInfo().id + "/completion", "POST", req.toJson()));
       for (String candidate : resp.candidates) {
         candidates.add(new InterpreterCompletion(candidate, candidate, StringUtils.EMPTY));
       }

File: python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java
Patch:
@@ -58,8 +58,6 @@ public void setUp() throws InterpreterException {
     group.put("note", Arrays.asList(python, conda));
     python.setInterpreterGroup(group);
     conda.setInterpreterGroup(group);
-
-    doReturn(python).when(conda).getPythonInterpreter();
   }
 
   private void setMockCondaEnvList() throws IOException, InterruptedException {

File: python/src/test/java/org/apache/zeppelin/python/PythonDockerInterpreterTest.java
Patch:
@@ -51,9 +51,9 @@ public void setUp() throws InterpreterException {
     docker.setInterpreterGroup(group);
 
     doReturn(true).when(docker).pull(any(InterpreterOutput.class), anyString());
-    doReturn(python).when(docker).getPythonInterpreter();
     doReturn(new File("/scriptpath")).when(python).getPythonWorkDir();
-
+    doReturn(PythonDockerInterpreter.class.getName()).when(docker).getClassName();
+    doReturn(PythonInterpreter.class.getName()).when(python).getClassName();
     docker.open();
   }
 

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
+import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
@@ -72,7 +73,7 @@ public void tearDown() throws Exception {
   }
 
   @Test
-  public void testDefault() {
+  public void testDefault() throws InterpreterException {
     dep.getDependencyContext().reset();
     InterpreterResult ret = dep.interpret("z.load(\"org.apache.commons:commons-csv:1.1\")", context);
     assertEquals(Code.SUCCESS, ret.code());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/SparkDownloadUtils.java
Patch:
@@ -47,7 +47,6 @@ public static String downloadSpark(String version) {
         LOGGER.warn("Failed to download Spark", e);
       }
     }
-
     // fallback to use apache archive
     // https://archive.apache.org/dist/spark/spark-1.6.3/spark-1.6.3-bin-hadoop2.6.tgz
     if (!downloaded) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -168,7 +168,7 @@ public ZeppelinServer() throws Exception {
         notebookWsServer, notebookWsServer);
     this.replFactory = new InterpreterFactory(interpreterSettingManager);
     this.notebookRepo = new NotebookRepoSync(conf);
-    this.noteSearchService = new LuceneSearch();
+    this.noteSearchService = new LuceneSearch(conf);
     this.notebookAuthorization = NotebookAuthorization.getInstance();
     this.credentials = new Credentials(
         conf.credentialsPersist(),

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -136,7 +136,7 @@ public InterpreterResult interpret(String lines, InterpreterContext interpreterC
     if (isSpark2) {
       setJobGroup = "dummy__ <- setJobGroup(\"" + jobGroup +
           "\", \" +" + jobDesc + "\", TRUE)";
-    } else if (getSparkInterpreter().getSparkVersion().newerThanEquals(SparkVersion.SPARK_1_5_0)) {
+    } else {
       setJobGroup = "dummy__ <- setJobGroup(sc, \"" + jobGroup +
           "\", \"" + jobDesc + "\", TRUE)";
     }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java
Patch:
@@ -169,7 +169,8 @@ public String showData(Object df) {
       msg.append("\n");
       msg.append(ResultMessages.getExceedsLimitRowsMessage(maxResult, "zeppelin.spark.maxResult"));
     }
-
+    // append %text at the end, otherwise the following output will be put in table as well.
+    msg.append("\n%text ");
     sc.clearJobGroup();
     return msg.toString();
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java
Patch:
@@ -245,7 +245,6 @@ public void show(Object o) {
    * @param o         object
    * @param maxResult maximum number of rows to display
    */
-
   @ZeppelinApi
   public void show(Object o, int maxResult) {
     try {
@@ -261,7 +260,7 @@ public void show(Object o, int maxResult) {
     }
   }
 
-  private boolean isSupportedObject(Object obj) {
+  protected boolean isSupportedObject(Object obj) {
     for (Class supportedClass : getSupportedClasses()) {
       if (supportedClass.isInstance(obj)) {
         return true;

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/NewSparkInterpreterTest.java
Patch:
@@ -76,6 +76,7 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     properties.setProperty("zeppelin.spark.maxResult", "100");
     properties.setProperty("zeppelin.spark.test", "true");
     properties.setProperty("zeppelin.spark.useNew", "true");
+    properties.setProperty("zeppelin.spark.uiWebUrl", "fake_spark_weburl");
 
     InterpreterContext context = InterpreterContext.builder()
         .setInterpreterOut(new InterpreterOutput(null))
@@ -89,6 +90,8 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     interpreter.setInterpreterGroup(mock(InterpreterGroup.class));
     interpreter.open();
 
+    assertEquals("fake_spark_weburl", interpreter.getSparkUIUrl());
+
     InterpreterResult result = interpreter.interpret("val a=\"hello world\"", getInterpreterContext());
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     assertEquals("a: String = hello world\n", output);

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreterPandasSql.java
Patch:
@@ -37,7 +37,7 @@
 public class PythonInterpreterPandasSql extends Interpreter {
   private static final Logger LOG = LoggerFactory.getLogger(PythonInterpreterPandasSql.class);
 
-  private String SQL_BOOTSTRAP_FILE_PY = "/python/bootstrap_sql.py";
+  private String SQL_BOOTSTRAP_FILE_PY = "python/bootstrap_sql.py";
 
   public PythonInterpreterPandasSql(Properties property) {
     super(property);

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterPandasSqlTest.java
Patch:
@@ -86,7 +86,7 @@ public void setUp() throws Exception {
 
 
     // to make sure python is running.
-    InterpreterResult ret = python.interpret("\n", context);
+    InterpreterResult ret = python.interpret("print(\"python initialized\")\n", context);
     assertEquals(ret.message().toString(), InterpreterResult.Code.SUCCESS, ret.code());
 
     sql.open();

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -168,7 +168,7 @@ public ZeppelinServer() throws Exception {
         notebookWsServer, notebookWsServer);
     this.replFactory = new InterpreterFactory(interpreterSettingManager);
     this.notebookRepo = new NotebookRepoSync(conf);
-    this.noteSearchService = new LuceneSearch();
+    this.noteSearchService = new LuceneSearch(conf);
     this.notebookAuthorization = NotebookAuthorization.getInstance();
     this.credentials = new Credentials(
         conf.credentialsPersist(),

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java
Patch:
@@ -1041,8 +1041,7 @@ public InterpreterResult interpret(String[] lines, InterpreterContext context) {
     synchronized (this) {
       z.setGui(context.getGui());
       z.setNoteGui(context.getNoteGui());
-      String jobDesc = "Started by: " + Utils.getUserName(context.getAuthenticationInfo());
-      sc.setJobGroup(Utils.buildJobGroupId(context), jobDesc, false);
+      sc.setJobGroup(Utils.buildJobGroupId(context), Utils.buildJobDesc(context), false);
       InterpreterResult r = interpretInput(lines, context);
       sc.clearJobGroup();
       return r;

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java
Patch:
@@ -167,8 +167,7 @@ public String showData(Object df) {
 
     if (rows.length > maxResult) {
       msg.append("\n");
-      msg.append(ResultMessages.getExceedsLimitRowsMessage(maxResult,
-          SparkSqlInterpreter.MAX_RESULTS));
+      msg.append(ResultMessages.getExceedsLimitRowsMessage(maxResult, "zeppelin.spark.maxResult"));
     }
 
     sc.clearJobGroup();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -751,6 +751,7 @@ private InterpreterContext convert(RemoteInterpreterContext ric) {
   private InterpreterContext convert(RemoteInterpreterContext ric, InterpreterOutput output) {
     return InterpreterContext.builder()
         .setNoteId(ric.getNoteId())
+        .setNoteName(ric.getNoteName())
         .setParagraphId(ric.getParagraphId())
         .setReplName(ric.getReplName())
         .setParagraphTitle(ric.getParagraphTitle())

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventService.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class RemoteInterpreterEventService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-7-6")
 public class ZeppelinServerResourceParagraphRunner implements org.apache.thrift.TBase<ZeppelinServerResourceParagraphRunner, ZeppelinServerResourceParagraphRunner._Fields>, java.io.Serializable, Cloneable, Comparable<ZeppelinServerResourceParagraphRunner> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZeppelinServerResourceParagraphRunner");
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -596,6 +596,7 @@ private InterpreterContext getInterpreterContextWithoutRunner(InterpreterOutput
     InterpreterContext interpreterContext =
         InterpreterContext.builder()
             .setNoteId(note.getId())
+            .setNoteName(note.getName())
             .setParagraphId(getId())
             .setReplName(intpText)
             .setParagraphTitle(title)
@@ -639,6 +640,7 @@ private InterpreterContext getInterpreterContext(InterpreterOutput output) {
     InterpreterContext interpreterContext =
         InterpreterContext.builder()
             .setNoteId(note.getId())
+            .setNoteName(note.getName())
             .setParagraphId(getId())
             .setReplName(intpText)
             .setParagraphTitle(title)
@@ -670,7 +672,7 @@ static class ParagraphRunner extends InterpreterContextRunner {
 
     private transient Note note;
 
-    public ParagraphRunner(Note note, String noteId, String paragraphId) {
+    ParagraphRunner(Note note, String noteId, String paragraphId) {
       super(noteId, paragraphId);
       this.note = note;
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -758,6 +758,8 @@ private InterpreterContext convert(RemoteInterpreterContext ric, InterpreterOutp
         .setLocalProperties(ric.getLocalProperties())
         .setAuthenticationInfo(AuthenticationInfo.fromJson(ric.getAuthenticationInfo()))
         .setGUI(GUI.fromJson(ric.getGui()))
+        .setConfig(gson.fromJson(ric.getConfig(),
+                   new TypeToken<Map<String, Object>>() {}.getType()))
         .setNoteGUI(GUI.fromJson(ric.getNoteGui()))
         .setAngularObjectRegistry(interpreterGroup.getAngularObjectRegistry())
         .setResourcePool(interpreterGroup.getResourcePool())

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -178,15 +178,15 @@ public String checkIPythonPrerequisite(String pythonExec) {
         return "jupyter-client is not installed.";
       }
       if (!freezeOutput.contains("ipykernel=")) {
-        return "ipkernel is not installed";
+        return "ipykernel is not installed";
       }
       if (!freezeOutput.contains("ipython=")) {
         return "ipython is not installed";
       }
       if (!freezeOutput.contains("grpcio=")) {
         return "grpcio is not installed";
       }
-      LOGGER.info("IPython prerequisite is meet");
+      LOGGER.info("IPython prerequisite is met");
     } catch (Exception e) {
       LOGGER.warn("Fail to checkIPythonPrerequisite", e);
       return "Fail to checkIPythonPrerequisite: " + ExceptionUtils.getStackTrace(e);

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/ActiveDirectoryGroupRealm.java
Patch:
@@ -238,12 +238,14 @@ protected AuthorizationInfo buildAuthorizationInfo(Set<String> roleNames) {
     return new SimpleAuthorizationInfo(roleNames);
   }
 
-  public List<String> searchForUserName(String containString, LdapContext ldapContext)
+  public List<String> searchForUserName(String containString, LdapContext ldapContext,
+      int numUsersToFetch)
           throws NamingException {
     List<String> userNameList = new ArrayList<>();
 
     SearchControls searchCtls = new SearchControls();
     searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);
+    searchCtls.setCountLimit(numUsersToFetch);
 
     String searchFilter = "(&(objectClass=*)(userPrincipalName=*" + containString + "*))";
     Object[] searchArguments = new Object[]{containString};

File: zeppelin-plugins/launcher/spark/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Spark specific launcher.
  */
-public class SparkInterpreterLauncher extends ShellScriptLauncher {
+public class SparkInterpreterLauncher extends StandardInterpreterLauncher {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(SparkInterpreterLauncher.class);
 

File: zeppelin-plugins/launcher/standard/src/main/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncher.java
Patch:
@@ -35,11 +35,11 @@
 /**
  * Interpreter Launcher which use shell script to launch the interpreter process.
  */
-public class ShellScriptLauncher extends InterpreterLauncher {
+public class StandardInterpreterLauncher extends InterpreterLauncher {
 
-  private static final Logger LOGGER = LoggerFactory.getLogger(ShellScriptLauncher.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(StandardInterpreterLauncher.class);
 
-  public ShellScriptLauncher(ZeppelinConfiguration zConf, RecoveryStorage recoveryStorage) {
+  public StandardInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage recoveryStorage) {
     super(zConf, recoveryStorage);
   }
 

File: zeppelin-plugins/launcher/standard/src/test/java/org/apache/zeppelin/interpreter/launcher/StandardInterpreterLauncherTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-public class ShellScriptLauncherTest {
+public class StandardInterpreterLauncherTest {
   @Before
   public void setUp() {
     for (final ZeppelinConfiguration.ConfVars confVar : ZeppelinConfiguration.ConfVars.values()) {
@@ -40,7 +40,7 @@ public void setUp() {
   @Test
   public void testLauncher() throws IOException {
     ZeppelinConfiguration zConf = new ZeppelinConfiguration();
-    ShellScriptLauncher launcher = new ShellScriptLauncher(zConf, null);
+    StandardInterpreterLauncher launcher = new StandardInterpreterLauncher(zConf, null);
     Properties properties = new Properties();
     properties.setProperty("ENV_1", "VALUE_1");
     properties.setProperty("property_1", "value_1");
@@ -64,7 +64,7 @@ public void testLauncher() throws IOException {
   @Test
   public void testConnectTimeOut() throws IOException {
     ZeppelinConfiguration zConf = new ZeppelinConfiguration();
-    ShellScriptLauncher launcher = new ShellScriptLauncher(zConf, null);
+    StandardInterpreterLauncher launcher = new StandardInterpreterLauncher(zConf, null);
     Properties properties = new Properties();
     properties.setProperty(
         ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getVarName(), "10000");

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -35,6 +35,7 @@
 import org.apache.commons.httpclient.methods.RequestEntity;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.apache.zeppelin.plugin.PluginManager;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.hamcrest.TypeSafeMatcher;
@@ -292,6 +293,7 @@ protected static void shutDown(final boolean deleteConfDir) throws Exception {
       LOG.info("Terminating test Zeppelin...");
       ZeppelinServer.jettyWebServer.stop();
       executor.shutdown();
+      PluginManager.reset();
 
       long s = System.currentTimeMillis();
       boolean started = true;

File: spark/spark-shims/src/main/scala/org/apache/zeppelin/spark/SparkShims.java
Patch:
@@ -116,6 +116,8 @@ protected void buildSparkJobUrl(String master,
       infos.put("jobUrl", jobUrl);
       infos.put("label", "SPARK JOB");
       infos.put("tooltip", "View in Spark web UI");
+      infos.put("noteId", context.getNoteId());
+      infos.put("paraId", context.getParagraphId());
       context.getIntpEventClient().onParaInfosReceived(infos);
     }
   }

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -559,7 +559,7 @@ public void testSingleDynamicFormTextInput() throws Exception {
     }
   }
 
-  @Test
+  // @Test
   public void testSingleDynamicFormSelectForm() throws Exception {
     try {
       createNewNote();
@@ -636,7 +636,7 @@ public void testSingleDynamicFormCheckboxForm() throws Exception {
     }
   }
 
-  @Test
+  // @Test
   public void testMultipleDynamicFormsSameType() throws Exception {
     try {
       createNewNote();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventService.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class RemoteInterpreterEventService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-21")
 public class ZeppelinServerResourceParagraphRunner implements org.apache.thrift.TBase<ZeppelinServerResourceParagraphRunner, ZeppelinServerResourceParagraphRunner._Fields>, java.io.Serializable, Cloneable, Comparable<ZeppelinServerResourceParagraphRunner> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZeppelinServerResourceParagraphRunner");
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -397,7 +397,8 @@ public Scheduler getScheduler() {
   private RemoteInterpreterContext convert(InterpreterContext ic) {
     return new RemoteInterpreterContext(ic.getNoteId(), ic.getParagraphId(), ic.getReplName(),
         ic.getParagraphTitle(), ic.getParagraphText(), gson.toJson(ic.getAuthenticationInfo()),
-        gson.toJson(ic.getConfig()), ic.getGui().toJson(), gson.toJson(ic.getNoteGui()));
+        gson.toJson(ic.getConfig()), ic.getGui().toJson(), gson.toJson(ic.getNoteGui()),
+        ic.getLocalProperties());
   }
 
   private InterpreterResult convert(RemoteInterpreterResult result) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/ActiveDirectoryGroupRealm.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.zeppelin.realm;
 
+import java.util.LinkedHashMap;
 import org.apache.commons.lang.StringUtils;
 import org.apache.shiro.authc.AuthenticationException;
 import org.apache.shiro.authc.AuthenticationInfo;
@@ -76,10 +77,10 @@ public void setHadoopSecurityCredentialPath(String hadoopSecurityCredentialPath)
    * group names (e.g. CN=Group,OU=Company,DC=MyDomain,DC=local)
    * as returned by the active directory LDAP server to role names.
    */
-  private Map<String, String> groupRolesMap;
+  private Map<String, String> groupRolesMap = new LinkedHashMap<>();
 
   public void setGroupRolesMap(Map<String, String> groupRolesMap) {
-    this.groupRolesMap = groupRolesMap;
+    this.groupRolesMap.putAll(groupRolesMap);
   }
 
   LdapContextFactory ldapContextFactory;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -58,6 +58,7 @@ protected Map<String, String> buildEnvFromProperties(InterpreterLaunchContext co
     setupPropertiesForSparkR(sparkProperties);
     if (isYarnMode() && getDeployMode().equals("cluster")) {
       env.put("ZEPPELIN_SPARK_YARN_CLUSTER", "true");
+      sparkProperties.setProperty("spark.yarn.submit.waitAppCompletion", "false");
     }
 
     StringBuilder sparkConfBuilder = new StringBuilder();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncherTest.java
Patch:
@@ -159,7 +159,7 @@ public void testYarnClusterMode_1() throws IOException {
     assertTrue(interpreterProcess.getEnv().size() >= 3);
     assertEquals("/user/spark", interpreterProcess.getEnv().get("SPARK_HOME"));
     assertEquals("true", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_YARN_CLUSTER"));
-    assertEquals(" --master yarn-cluster --files .//conf/log4j_yarn_cluster.properties --conf spark.files='file_1' --conf spark.jars='jar_1' --conf spark.yarn.isPython=true", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
+    assertEquals(" --master yarn-cluster --files .//conf/log4j_yarn_cluster.properties --conf spark.files='file_1' --conf spark.jars='jar_1' --conf spark.yarn.isPython=true --conf spark.yarn.submit.waitAppCompletion=false", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
   }
 
   @Test
@@ -187,6 +187,6 @@ public void testYarnClusterMode_2() throws IOException {
     assertTrue(interpreterProcess.getEnv().size() >= 3);
     assertEquals("/user/spark", interpreterProcess.getEnv().get("SPARK_HOME"));
     assertEquals("true", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_YARN_CLUSTER"));
-    assertEquals(" --master yarn --files .//conf/log4j_yarn_cluster.properties --conf spark.files='file_1' --conf spark.jars='jar_1' --conf spark.submit.deployMode='cluster' --conf spark.yarn.isPython=true --proxy-user user1", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
+    assertEquals(" --master yarn --files .//conf/log4j_yarn_cluster.properties --conf spark.files='file_1' --conf spark.jars='jar_1' --conf spark.submit.deployMode='cluster' --conf spark.yarn.isPython=true --conf spark.yarn.submit.waitAppCompletion=false --proxy-user user1", interpreterProcess.getEnv().get("ZEPPELIN_SPARK_CONF"));
   }
 }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/AbstractSparkInterpreter.java
Patch:
@@ -49,8 +49,6 @@ public AbstractSparkInterpreter(Properties properties) {
 
   public abstract JavaSparkContext getJavaSparkContext();
 
-  public abstract void populateSparkWebUrl(InterpreterContext ctx);
-
   public abstract SparkZeppelinContext getZeppelinContext();
 
   public abstract String getSparkUIUrl();

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -117,7 +117,6 @@ public BaseZeppelinContext buildZeppelinContext() {
   @Override
   public InterpreterResult interpret(String st, InterpreterContext context) {
     InterpreterContext.set(context);
-    sparkInterpreter.populateSparkWebUrl(context);
     String jobGroupId = Utils.buildJobGroupId(context);
     String jobDesc = "Started by: " + Utils.getUserName(context.getAuthenticationInfo());
     String setJobGroupStmt = "sc.setJobGroup('" +  jobGroupId + "', '" + jobDesc + "')";

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -144,7 +144,6 @@ protected BaseZeppelinContext createZeppelinContext() {
   @Override
   public InterpreterResult interpret(String st, InterpreterContext context)
       throws InterpreterException {
-    sparkInterpreter.populateSparkWebUrl(context);
     return super.interpret(st, context);
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -122,7 +122,6 @@ public void open() throws InterpreterException {
   public InterpreterResult interpret(String lines, InterpreterContext interpreterContext)
       throws InterpreterException {
 
-    sparkInterpreter.populateSparkWebUrl(interpreterContext);
     String jobGroup = Utils.buildJobGroupId(interpreterContext);
     String jobDesc = "Started by: " +
        Utils.getUserName(interpreterContext.getAuthenticationInfo());

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -96,7 +96,6 @@ public InterpreterResult interpret(String st, InterpreterContext context)
           + sparkInterpreter.getSparkVersion().toString() + " is not supported");
     }
 
-    sparkInterpreter.populateSparkWebUrl(context);
     sparkInterpreter.getZeppelinContext().setInterpreterContext(context);
     sqlc = sparkInterpreter.getSQLContext();
     SparkContext sc = sqlc.sparkContext();

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -115,8 +115,6 @@ public static void testPySpark(final Interpreter interpreter, RemoteInterpreterE
     Thread.sleep(100);
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     String sparkVersion = context.out.toInterpreterResultMessage().get(0).getData();
-    // spark url is sent
-    verify(mockIntpEventClient).onMetaInfosReceived(any(Map.class));
 
     context = createInterpreterContext(mockIntpEventClient);
     result = interpreter.interpret("sc.range(1,10).sum()", context);

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/NewSparkInterpreterTest.java
Patch:
@@ -91,8 +91,6 @@ public void testSparkInterpreter() throws IOException, InterruptedException, Int
     InterpreterResult result = interpreter.interpret("val a=\"hello world\"", getInterpreterContext());
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     assertEquals("a: String = hello world\n", output);
-    // spark web url is sent
-    verify(mockRemoteEventClient).onMetaInfosReceived(any(Map.class));
 
     result = interpreter.interpret("print(a)", getInterpreterContext());
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/OldSparkInterpreterTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.apache.zeppelin.interpreter.InterpreterOutput;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
-import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient;
 import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.resource.LocalResourcePool;
@@ -43,10 +42,8 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
-import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
-import java.util.Map;
 import java.util.Properties;
 
 import static org.junit.Assert.assertEquals;

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkRInterpreterTest.java
Patch:
@@ -81,8 +81,6 @@ public void testSparkRInterpreter() throws InterpreterException, InterruptedExce
     InterpreterResult result = sparkRInterpreter.interpret("1+1", getInterpreterContext());
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     assertTrue(result.message().get(0).getData().contains("2"));
-    // spark web url is sent
-    verify(mockRemoteIntpEventClient).onMetaInfosReceived(any(Map.class));
 
     result = sparkRInterpreter.interpret("sparkR.version()", getInterpreterContext());
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/SparkShimsTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -32,7 +31,6 @@
 import org.apache.hadoop.util.VersionInfo;
 import org.apache.zeppelin.interpreter.BaseZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
-import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient;
 import org.junit.Before;
 import org.junit.Test;
@@ -44,7 +42,6 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
 import org.mockito.Mock;
-import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.PowerMockRunner;

File: spark/spark-shims/src/main/scala/org/apache/zeppelin/spark/SparkShims.java
Patch:
@@ -19,10 +19,7 @@
 
 import org.apache.hadoop.util.VersionInfo;
 import org.apache.hadoop.util.VersionUtil;
-import org.apache.zeppelin.interpreter.BaseZeppelinContext;
 import org.apache.zeppelin.interpreter.InterpreterContext;
-import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;
-import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AngularObjectId.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class AngularObjectId implements org.apache.thrift.TBase<AngularObjectId, AngularObjectId._Fields>, java.io.Serializable, Cloneable, Comparable<AngularObjectId> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AngularObjectId");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputAppendEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class AppOutputAppendEvent implements org.apache.thrift.TBase<AppOutputAppendEvent, AppOutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppOutputUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class AppOutputUpdateEvent implements org.apache.thrift.TBase<AppOutputUpdateEvent, AppOutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppOutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppOutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/AppStatusUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class AppStatusUpdateEvent implements org.apache.thrift.TBase<AppStatusUpdateEvent, AppStatusUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<AppStatusUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppStatusUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputAppendEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class OutputAppendEvent implements org.apache.thrift.TBase<OutputAppendEvent, OutputAppendEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputAppendEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputAppendEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateAllEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class OutputUpdateAllEvent implements org.apache.thrift.TBase<OutputUpdateAllEvent, OutputUpdateAllEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateAllEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateAllEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/OutputUpdateEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class OutputUpdateEvent implements org.apache.thrift.TBase<OutputUpdateEvent, OutputUpdateEvent._Fields>, java.io.Serializable, Cloneable, Comparable<OutputUpdateEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OutputUpdateEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RegisterInfo.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RunParagraphsEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class RunParagraphsEvent implements org.apache.thrift.TBase<RunParagraphsEvent, RunParagraphsEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RunParagraphsEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RunParagraphsEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-6-19")
 public class ZeppelinServerResourceParagraphRunner implements org.apache.thrift.TBase<ZeppelinServerResourceParagraphRunner, ZeppelinServerResourceParagraphRunner._Fields>, java.io.Serializable, Cloneable, Comparable<ZeppelinServerResourceParagraphRunner> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZeppelinServerResourceParagraphRunner");
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -840,8 +840,6 @@ public void restart(String settingId, String noteId, String user) throws Interpr
     // Check if dependency in specified path is changed
     // If it did, overwrite old dependency jar with new one
     if (intpSetting != null) {
-      // clean up metaInfos
-      intpSetting.setInfos(null);
       copyDependenciesFromLocalPath(intpSetting);
       intpSetting.closeInterpreters(user, noteId);
     } else {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener.java
Patch:
@@ -30,7 +30,6 @@ public interface RemoteInterpreterProcessListener {
   public void onOutputUpdated(
       String noteId, String paragraphId, int index, InterpreterResult.Type type, String output);
   public void onOutputClear(String noteId, String paragraphId);
-  public void onMetaInfosReceived(String settingId, Map<String, String> metaInfos);
   void runParagraphs(String noteId, List<Integer> paragraphIndices, List<String> paragraphIds,
                      String curParagraphId)
       throws IOException;

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkZeppelinContext.java
Patch:
@@ -177,7 +177,7 @@ public String showData(Object df) {
 
   @ZeppelinApi
   public Object select(String name, scala.collection.Iterable<Tuple2<Object, String>> options) {
-    return select(name, "", options);
+    return select(name, null, options);
   }
 
   @ZeppelinApi

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java
Patch:
@@ -26,6 +26,7 @@ public class InterpreterContextTest {
 
   @Test
   public void testThreadLocal() {
+    InterpreterContext.remove();
     assertNull(InterpreterContext.get());
 
     InterpreterContext.set(InterpreterContext.builder()

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncherTest.java
Patch:
@@ -42,6 +42,7 @@ public void testConnectTimeOut() throws IOException {
     ZeppelinConfiguration zConf = new ZeppelinConfiguration();
     SparkInterpreterLauncher launcher = new SparkInterpreterLauncher(zConf, null);
     Properties properties = new Properties();
+    properties.setProperty("SPARK_HOME", "/user/spark");
     properties.setProperty(
         ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getVarName(), "10000");
     InterpreterOption option = new InterpreterOption();

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -236,7 +236,7 @@ public void testDisableParagraphRunButton() throws Exception {
     }
   }
 
-  @Test
+//  @Test
   public void testRunOnSelectionChange() throws Exception {
     try {
       String xpathToRunOnSelectionChangeCheckbox = getParagraphXPath(1) + "//ul/li/form/input[contains(@ng-checked, 'true')]";
@@ -480,7 +480,7 @@ public void testShowAndHideLineNumbers() throws Exception {
     }
   }
 
-  @Test
+//  @Test
   public void testEditOnDoubleClick() throws Exception {
     try {
       createNewNote();
@@ -712,7 +712,7 @@ public void testNoteDynamicFormTextInput() throws Exception {
     }
   }
 
-  @Test
+  // @Test
   public void testNoteDynamicFormSelect() throws Exception {
     try {
       createNewNote();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeWatcherTest.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.junit.After;
 import org.junit.Before;
-import org.junit.Test;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -68,7 +67,7 @@ private void delete(File file) {
   }
 
 
-  @Test
+  // @Test
   public void test() throws IOException, InterruptedException {
     assertNull(fileChanged);
     assertEquals(0, numChanged.get());

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/KnoxRestApiTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Rule;
-import org.junit.Test;
 import org.junit.rules.ErrorCollector;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -59,7 +58,7 @@ public static void destroy() throws Exception {
   public void setUp() {
   }
 
-  @Test
+  //  @Test
   public void testThatOtherUserCanAccessNoteIfPermissionNotSet() throws IOException {
     GetMethod loginWithoutCookie = httpGet("/api/security/ticket");
     Map result = gson.fromJson(loginWithoutCookie.getResponseBodyAsString(), Map.class);

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -225,7 +225,7 @@ public void sparkRTest() throws IOException {
     assertEquals("[1] 3", p.getResult().message().get(0).getData().trim());
   }
 
-  @Test
+  // @Test
   public void pySparkTest() throws IOException {
     // create new note
     Note note = ZeppelinServer.notebook.createNote(anonymous);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -634,7 +634,7 @@ private void terminateScheduledNote(Note note) {
   }
 
 
-  @Test
+  // @Test
   public void testAutoRestartInterpreterAfterSchedule() throws InterruptedException, IOException, InterpreterNotFoundException {
     // create a note and a paragraph
     Note note = notebook.createNote(anonymous);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -728,7 +728,7 @@ public enum ConfVars {
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_DEP_MVNREPO("zeppelin.interpreter.dep.mvnRepo",
         "http://repo1.maven.org/maven2/"),
-    ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
+    ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 60000),
     ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
     ZEPPELIN_INTERPRETER_GROUP_ORDER("zeppelin.interpreter.group.order", "spark,md,angular,sh,"
         + "livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,"

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.zeppelin.interpreter.launcher;
 
+import java.io.IOException;
+
 /**
  * Interface to InterpreterClient which is created by InterpreterLauncher. This is the component
  * that is used to for the communication from zeppelin-server process to zeppelin interpreter
@@ -26,7 +28,7 @@ public interface InterpreterClient {
 
   String getInterpreterSettingName();
 
-  void start(String userName);
+  void start(String userName) throws IOException;
 
   void stop();
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java
Patch:
@@ -51,8 +51,7 @@ public InterpreterClient launch(InterpreterLaunchContext context) throws IOExcep
     InterpreterRunner runner = context.getRunner();
     String groupName = context.getInterpreterSettingGroup();
     String name = context.getInterpreterSettingName();
-    int connectTimeout =
-        zConf.getInt(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);
+    int connectTimeout = getConnectTimeout();
 
     if (option.isExistingProcess()) {
       return new RemoteInterpreterRunningProcess(

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -130,11 +130,11 @@ public void open() throws InterpreterException {
     try {
       URLClassLoader newCl = new URLClassLoader(urls, oldCl);
       Thread.currentThread().setContextClassLoader(newCl);
-      // create Python Process and JVM gateway
-      super.open();
       // must create spark interpreter after ClassLoader is set, otherwise the additional jars
       // can not be loaded by spark repl.
       this.sparkInterpreter = getSparkInterpreter();
+      // create Python Process and JVM gateway
+      super.open();
     } finally {
       Thread.currentThread().setContextClassLoader(oldCl);
     }
@@ -175,7 +175,7 @@ protected void preCallPython(InterpreterContext context) {
     String jobDesc = "Started by: " + Utils.getUserName(context.getAuthenticationInfo());
     callPython(new PythonInterpretRequest(
         String.format("if 'sc' in locals():\n\tsc.setJobGroup('%s', '%s')", jobGroup, jobDesc),
-        false));
+        false, false));
   }
 
   // Run python shell

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/MiniZeppelin.java
Patch:
@@ -38,6 +38,7 @@ public void start() throws IOException {
     FileUtils.copyFile(new File(zeppelinHome, "conf/log4j_yarn_cluster.properties"), new File(confDir, "log4j_yarn_cluster.properties"));
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_CONF_DIR.getVarName(), confDir.getAbsolutePath());
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(), notebookDir.getAbsolutePath());
+    System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT.getVarName(), "60000");
     conf = new ZeppelinConfiguration();
     interpreterSettingManager = new InterpreterSettingManager(conf,
         mock(AngularObjectRegistryListener.class), mock(RemoteInterpreterProcessListener.class), mock(ApplicationEventListener.class));

File: python/src/main/java/org/apache/zeppelin/python/IPythonClient.java
Patch:
@@ -38,10 +38,8 @@
 import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
 import java.security.SecureRandom;
+import java.util.Iterator;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -31,12 +31,10 @@ public abstract class RemoteInterpreterProcess implements InterpreterClient {
   private static final Logger logger = LoggerFactory.getLogger(RemoteInterpreterProcess.class);
 
   private GenericObjectPool<Client> clientPool;
-  private final InterpreterContextRunnerPool interpreterContextRunnerPool;
   private int connectTimeout;
 
   public RemoteInterpreterProcess(
       int connectTimeout) {
-    this.interpreterContextRunnerPool = new InterpreterContextRunnerPool();
     this.connectTimeout = connectTimeout;
   }
 

File: helium-dev/src/main/java/org/apache/zeppelin/helium/ZeppelinApplicationDevServer.java
Patch:
@@ -138,7 +138,7 @@ ApplicationContext getApplicationContext(InterpreterContext interpreterContext)
   protected InterpreterOutput createInterpreterOutput(
       final String noteId, final String paragraphId) {
     if (out == null) {
-      final RemoteInterpreterEventClient eventClient = getEventClient();
+      final RemoteInterpreterEventClient eventClient = getIntpEventClient();
       try {
         out = new InterpreterOutput(new InterpreterOutputListener() {
           @Override

File: helium-dev/src/main/java/org/apache/zeppelin/helium/ZeppelinDevServer.java
Patch:
@@ -39,7 +39,7 @@ public class ZeppelinDevServer extends
   private DevInterpreter interpreter = null;
   private InterpreterOutput out;
   public ZeppelinDevServer(int port) throws TException, IOException {
-    super(null, port, ":");
+    super(null, port, null, ":");
   }
 
   @Override
@@ -68,7 +68,7 @@ protected Interpreter getInterpreter(String sessionId, String className) throws
   protected InterpreterOutput createInterpreterOutput(
       final String noteId, final String paragraphId) {
     if (out == null) {
-      final RemoteInterpreterEventClient eventClient = getEventClient();
+      final RemoteInterpreterEventClient eventClient = getIntpEventClient();
       try {
         out = new InterpreterOutput(new InterpreterOutputListener() {
           @Override

File: pig/src/test/java/org/apache/zeppelin/pig/PigInterpreterSparkTest.java
Patch:
@@ -43,8 +43,7 @@ public void setUpSpark(boolean includeJobStats) {
     properties.put("zeppelin.pig.includeJobStats", includeJobStats + "");
     pigInterpreter = new PigInterpreter(properties);
     pigInterpreter.open();
-    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null,
-        null, null, null, null);
+    context = InterpreterContext.builder().setParagraphId("paragraphId").build();
 
   }
   @After

File: pig/src/test/java/org/apache/zeppelin/pig/PigInterpreterTest.java
Patch:
@@ -46,8 +46,7 @@ private void setUpLocal(boolean includeJobStats) {
     properties.put("zeppelin.pig.includeJobStats", includeJobStats + "");
     pigInterpreter = new PigInterpreter(properties);
     pigInterpreter.open();
-    context = new InterpreterContext(null, "paragraph_id", null, null, null,
-        null, null, null, null, null, null, null, null);
+    context = InterpreterContext.builder().setParagraphId("paragraphId").build();
   }
 
   @After

File: pig/src/test/java/org/apache/zeppelin/pig/PigInterpreterTezTest.java
Patch:
@@ -47,8 +47,7 @@ public void setUpTez(boolean includeJobStats) {
     properties.put("tez.queue.name", "test");
     pigInterpreter = new PigInterpreter(properties);
     pigInterpreter.open();
-    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null,
-        null, null, null, null);
+    context = InterpreterContext.builder().setParagraphId("paragraphId").build();
 
   }
   @After

File: pig/src/test/java/org/apache/zeppelin/pig/PigQueryInterpreterTest.java
Patch:
@@ -66,8 +66,7 @@ public void setUp() throws InterpreterException {
     pigInterpreter.open();
     pigQueryInterpreter.open();
 
-    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null,
-        null, null, null, null);
+    context = InterpreterContext.builder().setParagraphId("paragraphId").build();
   }
 
   @After

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -21,9 +21,11 @@
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
+import org.apache.zeppelin.interpreter.InterpreterOutput;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResultMessage;
 import org.apache.zeppelin.interpreter.LazyOpenInterpreter;
+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterEventClient;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -38,7 +40,6 @@
 
 public class IPythonInterpreterTest extends BasePythonInterpreterTest {
 
-
   protected Properties initIntpProperties() {
     Properties properties = new Properties();
     properties.setProperty("zeppelin.python.maxResult", "3");

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterTest.java
Patch:
@@ -36,6 +36,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertTrue;
 
+
 public class PythonInterpreterTest extends BasePythonInterpreterTest {
 
   @Override
@@ -78,7 +79,7 @@ public void testCodeCompletion() throws InterpreterException, IOException, Inter
   private class infinityPythonJob implements Runnable {
     @Override
     public void run() {
-      String code = "import time\nwhile True:\n  time.sleep(1)" ;
+      String code = "import time\nwhile True:\n  time.sleep(1)";
       InterpreterResult ret = null;
       try {
         ret = interpreter.interpret(code, getInterpreterContext());

File: shell/src/test/java/org/apache/zeppelin/shell/ShellInterpreterTest.java
Patch:
@@ -42,8 +42,7 @@ public void setUp() throws Exception {
     p.setProperty("shell.command.timeout.millisecs", "2000");
     shell = new ShellInterpreter(p);
 
-    context = new InterpreterContext("", "1", null, "", "", null, null, null, null, null, null,
-        null, null);
+    context = InterpreterContext.builder().setParagraphId("paragraphId").build();
     shell.open();
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 
@@ -248,7 +248,7 @@ public void setFieldValue(_Fields field, Object value) {
   public Object getFieldValue(_Fields field) {
     switch (field) {
     case SUCCESS:
-      return isSuccess();
+      return Boolean.valueOf(isSuccess());
 
     case MSG:
       return getMsg();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-5-29")
 public class ZeppelinServerResourceParagraphRunner implements org.apache.thrift.TBase<ZeppelinServerResourceParagraphRunner, ZeppelinServerResourceParagraphRunner._Fields>, java.io.Serializable, Cloneable, Comparable<ZeppelinServerResourceParagraphRunner> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZeppelinServerResourceParagraphRunner");
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/AngularObjectTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.zeppelin.display;
 
+import org.apache.thrift.TException;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.junit.Test;
 
@@ -78,7 +79,7 @@ public void testEquals() {
   }
 
   @Test
-  public void testListener() {
+  public void testListener() throws TException {
     final AtomicInteger updated = new AtomicInteger(0);
     AngularObject ao = new AngularObject("name", "value", "note1", null,
         new AngularObjectListener() {
@@ -103,7 +104,7 @@ public void updated(AngularObject updatedObject) {
   }
 
   @Test
-  public void testWatcher() throws InterruptedException {
+  public void testWatcher() throws InterruptedException, TException {
     final AtomicInteger updated = new AtomicInteger(0);
     final AtomicInteger onWatch = new AtomicInteger(0);
     AngularObject ao = new AngularObject("name", "value", "note1", null,

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java
Patch:
@@ -28,8 +28,8 @@ public class InterpreterContextTest {
   public void testThreadLocal() {
     assertNull(InterpreterContext.get());
 
-    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null,
-        null, null, null, null, null));
+    InterpreterContext.set(InterpreterContext.builder()
+        .build());
     assertNotNull(InterpreterContext.get());
 
     InterpreterContext.remove();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/LazyOpenInterpreterTest.java
Patch:
@@ -37,9 +37,7 @@ public void isOpenTest() throws InterpreterException {
     LazyOpenInterpreter lazyOpenInterpreter = new LazyOpenInterpreter(interpreter);
 
     assertFalse("Interpreter is not open", lazyOpenInterpreter.isOpen());
-    InterpreterContext interpreterContext =
-        new InterpreterContext("note", "id", null, "title", "text", null, null, null,
-            null, null, null, null, null);
+    InterpreterContext interpreterContext = mock(InterpreterContext.class);
     lazyOpenInterpreter.interpret("intp 1", interpreterContext);
     assertTrue("Interpeter is open", lazyOpenInterpreter.isOpen());
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java
Patch:
@@ -82,9 +82,10 @@ public InterpreterClient launch(InterpreterLaunchContext context) throws IOExcep
           + context.getInterpreterSettingId();
       return new RemoteInterpreterManagedProcess(
           runner != null ? runner.getPath() : zConf.getInterpreterRemoteRunnerPath(),
-          zConf.getCallbackPortRange(), zConf.getInterpreterPortRange(),
+          context.getZeppelinServerRPCPort(), context.getZeppelinServerHost(), zConf.getInterpreterPortRange(),
           zConf.getInterpreterDir() + "/" + groupName, localRepoPath,
-          buildEnvFromProperties(context), connectTimeout, name, option.isUserImpersonate());
+          buildEnvFromProperties(context), connectTimeout, name,
+          context.getInterpreterGroupId(), option.isUserImpersonate());
     }
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectRegistry.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zeppelin.interpreter.remote;
 
 import com.google.gson.Gson;
+import org.apache.thrift.TException;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.AngularObjectRegistry;
 import org.apache.zeppelin.display.AngularObjectRegistryListener;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -51,7 +51,7 @@ public void testInitInterpreterSettingManager() throws IOException, RepositoryEx
     assertEquals("test", interpreterSetting.getName());
     assertEquals("test", interpreterSetting.getGroup());
     assertTrue(interpreterSetting.getLifecycleManager() instanceof NullLifecycleManager);
-    assertEquals(3, interpreterSetting.getInterpreterInfos().size());
+    assertEquals(8, interpreterSetting.getInterpreterInfos().size());
     // 3 other builtin properties:
     //   * zeppelin.interpreter.output.limit
     //   * zeppelin.interpreter.localRepo
@@ -86,7 +86,7 @@ public void testInitInterpreterSettingManager() throws IOException, RepositoryEx
     interpreterSetting = interpreterSettingManager2.getByName("test");
     assertEquals("test", interpreterSetting.getName());
     assertEquals("test", interpreterSetting.getGroup());
-    assertEquals(3, interpreterSetting.getInterpreterInfos().size());
+    assertEquals(8, interpreterSetting.getInterpreterInfos().size());
     assertEquals(6, interpreterSetting.getJavaProperties().size());
     assertEquals("value_1", interpreterSetting.getJavaProperties().getProperty("property_1"));
     assertEquals("new_value_2", interpreterSetting.getJavaProperties().getProperty("property_2"));

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncherTest.java
Patch:
@@ -46,7 +46,7 @@ public void testLauncher() throws IOException {
     properties.setProperty("property_1", "value_1");
     InterpreterOption option = new InterpreterOption();
     option.setUserImpersonate(true);
-    InterpreterLaunchContext context = new InterpreterLaunchContext(properties, option, null, "user1", "intpGroupId", "groupId", "groupName", "name");
+    InterpreterLaunchContext context = new InterpreterLaunchContext(properties, option, null, "user1", "intpGroupId", "groupId", "groupName", "name", 0, "host");
     InterpreterClient client = launcher.launch(context);
     assertTrue( client instanceof RemoteInterpreterManagedProcess);
     RemoteInterpreterManagedProcess interpreterProcess = (RemoteInterpreterManagedProcess) client;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/AppendOutputRunnerTest.java
Patch:
@@ -139,7 +139,6 @@ public void testWarnLoggerForLargeData() throws InterruptedException {
     TestAppender appender = new TestAppender();
     Logger logger = Logger.getRootLogger();
     logger.addAppender(appender);
-    Logger.getLogger(RemoteInterpreterEventPoller.class);
 
     runner.run();
     List<LoggingEvent> log;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -917,7 +917,7 @@ public int compare(InterpreterSetting o1, InterpreterSetting o2) {
         } else if (i > j) {
           return 1;
         } else {
-          return 0;
+          return o1.getName().compareTo(o2.getName());
         }
       }
     });

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -190,7 +190,8 @@ public static enum OP {
     INTERPRETER_INSTALL_STARTED,  // [s-c] start to download an interpreter
     INTERPRETER_INSTALL_RESULT,   // [s-c] Status of an interpreter installation
     COLLABORATIVE_MODE_STATUS,    // [s-c] collaborative mode status
-    PATCH_PARAGRAPH               // [c-s][s-c] patch editor text
+    PATCH_PARAGRAPH,              // [c-s][s-c] patch editor text
+    NOTICE                        // [s-c] Notice
   }
 
   private static final Gson gson = new Gson();

File: livy/src/test/java/org/apache/zeppelin/livy/LivyInterpreterIT.java
Patch:
@@ -495,7 +495,8 @@ public void testSparkInterpreterWithDisplayAppInfo_StringWithoutTruncation()
       InterpreterResult result = sparkInterpreter.interpret("sc.version", context);
       assertEquals(InterpreterResult.Code.SUCCESS, result.code());
       assertEquals(2, result.message().size());
-      assertTrue(result.message().get(1).getData().contains("Spark Application Id"));
+      // check yarn appId and ensure it is not null
+      assertTrue(result.message().get(1).getData().contains("Spark Application Id: application_"));
 
       // html output
       String htmlCode = "println(\"%html <h1> hello </h1>\")";

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java
Patch:
@@ -163,7 +163,7 @@ public OldSparkInterpreter(Properties property, SparkContext sc) {
     this.sc = sc;
     env = SparkEnv.get();
     sparkShims = SparkShims.getInstance(sc.version());
-    sparkShims.setupSparkListener(sparkUrl);
+    sparkShims.setupSparkListener(sc.master(), sparkUrl);
   }
 
   public SparkContext getSparkContext() {
@@ -873,7 +873,7 @@ public void open() throws InterpreterException {
 
     sparkUrl = getSparkUIUrl();
     sparkShims = SparkShims.getInstance(sc.version());
-    sparkShims.setupSparkListener(sparkUrl);
+    sparkShims.setupSparkListener(sc.master(), sparkUrl);
 
     numReferenceOfSparkContext.incrementAndGet();
   }

File: spark/spark2-shims/src/main/scala/org/apache/zeppelin/spark/Spark2Shims.java
Patch:
@@ -24,12 +24,12 @@
 
 public class Spark2Shims extends SparkShims {
 
-  public void setupSparkListener(final String sparkWebUrl) {
+  public void setupSparkListener(final String master, final String sparkWebUrl) {
     SparkContext sc = SparkContext.getOrCreate();
     sc.addSparkListener(new SparkListener() {
       @Override
       public void onJobStart(SparkListenerJobStart jobStart) {
-        buildSparkJobUrl(sparkWebUrl, jobStart.jobId(), jobStart.properties());
+        buildSparkJobUrl(master, sparkWebUrl, jobStart.jobId(), jobStart.properties());
       }
     });
   }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/NewSparkInterpreter.java
Patch:
@@ -244,7 +244,8 @@ public SparkVersion getSparkVersion() {
   }
 
   private DepInterpreter getDepInterpreter() {
-    Interpreter p = getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());
+    Interpreter p = getParentSparkInterpreter()
+        .getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());
     if (p == null) {
       return null;
     }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java
Patch:
@@ -281,7 +281,8 @@ public SparkDependencyResolver getDependencyResolver() {
   }
 
   private DepInterpreter getDepInterpreter() {
-    Interpreter p = getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());
+    Interpreter p = getParentSparkInterpreter()
+        .getInterpreterInTheSameSessionByClassName(DepInterpreter.class.getName());
     if (p == null) {
       return null;
     }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -50,6 +50,7 @@ public SparkInterpreter(Properties properties) {
     } else {
       delegation = new OldSparkInterpreter(properties);
     }
+    delegation.setParentSparkInterpreter(this);
   }
 
   @Override

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/CallbackInfo.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
 public class CallbackInfo implements org.apache.thrift.TBase<CallbackInfo, CallbackInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CallbackInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CallbackInfo");
 
@@ -251,7 +251,7 @@ public Object getFieldValue(_Fields field) {
       return getHost();
 
     case PORT:
-      return Integer.valueOf(getPort());
+      return getPort();
 
     }
     throw new IllegalStateException();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 
@@ -248,7 +248,7 @@ public void setFieldValue(_Fields field, Object value) {
   public Object getFieldValue(_Fields field) {
     switch (field) {
     case SUCCESS:
-      return Boolean.valueOf(isSuccess());
+      return isSuccess();
 
     case MSG:
       return getMsg();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterCallbackService.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
 public class RemoteInterpreterCallbackService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
 public class ZeppelinServerResourceParagraphRunner implements org.apache.thrift.TBase<ZeppelinServerResourceParagraphRunner, ZeppelinServerResourceParagraphRunner._Fields>, java.io.Serializable, Cloneable, Comparable<ZeppelinServerResourceParagraphRunner> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZeppelinServerResourceParagraphRunner");
 

File: zeppelin-plugins/notebookrepo/github/src/test/java/org/apache/zeppelin/notebook/repo/GitHubNotebookRepoTest.java
Patch:
@@ -119,7 +119,8 @@ public void setUp() throws Exception {
             "access-token");
 
     // Create the Notebook repository (configured for the local repository)
-    gitHubNotebookRepo = new GitHubNotebookRepo(conf);
+    gitHubNotebookRepo = new GitHubNotebookRepo();
+    gitHubNotebookRepo.init(conf);
   }
 
   @After

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -810,7 +810,7 @@ private void loadInterpreterDependencies() {
       public void run() {
         try {
           // dependencies to prevent library conflict
-          File localRepoDir = new File(conf.getInterpreterLocalRepoPath() + "/" + getId());
+          File localRepoDir = new File(conf.getInterpreterLocalRepoPath() + "/" + id);
           if (localRepoDir.exists()) {
             try {
               FileUtils.forceDelete(localRepoDir);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -22,6 +22,8 @@
 import java.util.Map;
 
 import org.apache.commons.lang.exception.ExceptionUtils;
+import org.apache.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -200,7 +202,7 @@ private synchronized void completeWithSuccess(Object result) {
   }
 
   private synchronized void completeWithError(Throwable error) {
-    setResult(error.getMessage());
+    setResult(new InterpreterResult(Code.ERROR, getStack(error)));
     setException(error);
     dateFinished = new Date();
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java
Patch:
@@ -48,7 +48,6 @@ public class ManagedInterpreterGroup extends InterpreterGroup {
   ManagedInterpreterGroup(String id, InterpreterSetting interpreterSetting) {
     super(id);
     this.interpreterSetting = interpreterSetting;
-    interpreterSetting.getLifecycleManager().onInterpreterGroupCreated(this);
   }
 
   public InterpreterSetting getInterpreterSetting() {
@@ -63,6 +62,7 @@ public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess(Strin
       remoteInterpreterProcess = interpreterSetting.createInterpreterProcess(id, userName,
           properties);
       remoteInterpreterProcess.start(userName);
+      interpreterSetting.getLifecycleManager().onInterpreterProcessStarted(this);
       remoteInterpreterProcess.getRemoteInterpreterEventPoller()
           .setInterpreterProcess(remoteInterpreterProcess);
       remoteInterpreterProcess.getRemoteInterpreterEventPoller().setInterpreterGroup(this);
@@ -156,7 +156,6 @@ public synchronized List<Interpreter> getOrCreateSession(String user, String ses
         interpreter.setInterpreterGroup(this);
       }
       LOGGER.info("Create Session: {} in InterpreterGroup: {} for user: {}", sessionId, id, user);
-      interpreterSetting.getLifecycleManager().onInterpreterSessionCreated(this, sessionId);
       sessions.put(sessionId, interpreters);
       return interpreters;
     }

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -783,7 +783,9 @@ private String replaceReservedChars(String str) {
   }
 
   @Override
-  public InterpreterResult interpret(String cmd, InterpreterContext contextInterpreter) {
+  public InterpreterResult interpret(String originalCmd, InterpreterContext contextInterpreter) {
+    String cmd = Boolean.parseBoolean(getProperty("zeppelin.jdbc.interpolation")) ?
+            interpolate(originalCmd, contextInterpreter.getResourcePool()) : originalCmd;
     logger.debug("Run SQL command '{}'", cmd);
     String propertyKey = getPropertyKey(cmd);
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -103,6 +103,7 @@ public class Note implements ParagraphJobListener, JsonSerializable {
   private transient NotebookRepo repo;
   private transient SearchService index;
   private transient ScheduledFuture delayedPersist;
+  private transient Object delayedPersistLock = new Object();
   private transient NoteEventListener noteEventListener;
   private transient Credentials credentials;
   private transient NoteNameListener noteNameListener;
@@ -861,7 +862,7 @@ public Note getUserNote(String user) {
   }
 
   private void startDelayedPersistTimer(int maxDelaySec, final AuthenticationInfo subject) {
-    synchronized (this) {
+    synchronized (delayedPersistLock) {
       if (delayedPersist != null) {
         return;
       }
@@ -881,11 +882,10 @@ public void run() {
   }
 
   private void stopDelayedPersistTimer() {
-    synchronized (this) {
+    synchronized (delayedPersistLock) {
       if (delayedPersist == null) {
         return;
       }
-
       delayedPersist.cancel(false);
     }
   }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/user/AuthenticationInfoTest.java
Patch:
@@ -28,7 +28,7 @@ public class AuthenticationInfoTest {
 
   @Test
   public void testRoles() {
-    final String roles = "[role1, role2, role with space]";
+    final String roles = "[\"role1\", \"role2\", \"role with space\"]";
 
     final AuthenticationInfo authenticationInfo = new AuthenticationInfo("foo",
         roles, "bar");

File: livy/src/main/java/org/apache/zeppelin/livy/LivyException.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.zeppelin.interpreter.InterpreterException;
 
 /**
- * Livy api related exception
+ * Livy api related exception.
  */
 public class LivyException extends InterpreterException {
   public LivyException() {

File: livy/src/main/java/org/apache/zeppelin/livy/LivyPySparkBaseInterpreter.java
Patch:
@@ -15,13 +15,12 @@
  * limitations under the License.
  */
 
-
 package org.apache.zeppelin.livy;
 
 import java.util.Properties;
 
 /**
- * Base class for PySpark Interpreter
+ * Base class for PySpark Interpreter.
  */
 public abstract class LivyPySparkBaseInterpreter extends BaseLivyInterpreter {
 

File: livy/src/main/java/org/apache/zeppelin/livy/LivyVersion.java
Patch:
@@ -21,7 +21,7 @@
 import org.slf4j.LoggerFactory;
 
 /**
- * Provide reading comparing capability of livy version
+ * Provide reading comparing capability of livy version.
  */
 public class LivyVersion {
   private static final Logger logger = LoggerFactory.getLogger(LivyVersion.class);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -185,7 +185,9 @@ public static enum OP {
     RUN_PARAGRAPH_USING_SPELL,    // [s-c] run paragraph using spell
     PARAS_INFO,                   // [s-c] paragraph runtime infos
     SAVE_NOTE_FORMS,              // save note forms
-    REMOVE_NOTE_FORMS             // remove note forms
+    REMOVE_NOTE_FORMS,            // remove note forms
+    INTERPRETER_INSTALL_STARTED,  // [s-c] start to download an interpreter
+    INTERPRETER_INSTALL_RESULT    // [s-c] Status of an interpreter installation
   }
 
   private static final Gson gson = new Gson();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -15,7 +15,6 @@
 
 import static org.mockito.Mockito.mock;
 
-
 /**
  * This class will load configuration files under
  *   src/test/resources/interpreter

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.Map;
 
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;

File: zeppelin-integration/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -120,12 +120,12 @@ protected void deleteTestNotebook(final WebDriver driver) {
     block.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(".//*[@id='main']//button[@ng-click='moveNoteToTrash(note.id)']")));
     driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'This note will be moved to trash')]" +
         "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();
-    ZeppelinITUtils.sleep(100, true);
+    ZeppelinITUtils.sleep(100, false);
   }
 
   protected void clickAndWait(final By locator) {
     pollingWait(locator, MAX_IMPLICIT_WAIT).click();
-    ZeppelinITUtils.sleep(1000, true);
+    ZeppelinITUtils.sleep(1000, false);
   }
 
   protected void handleException(String message, Exception e) throws Exception {

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -220,7 +220,7 @@ public void testDisableParagraphRunButton() throws Exception {
       );
 
       driver.findElement(By.xpath(".//*[@id='main']//button[contains(@ng-click, 'runAllParagraphs')]")).sendKeys(Keys.ENTER);
-      ZeppelinITUtils.sleep(1000, true);
+      ZeppelinITUtils.sleep(1000, false);
       driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'Run all paragraphs?')]" +
           "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();
       ZeppelinITUtils.sleep(2000, false);

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -186,10 +186,10 @@ public void testAngularDisplay() throws Exception {
 
       driver.findElement(By.xpath(".//*[@id='main']//button[@ng-click='moveNoteToTrash(note.id)']"))
           .sendKeys(Keys.ENTER);
-      ZeppelinITUtils.sleep(1000, true);
+      ZeppelinITUtils.sleep(1000, false);
       driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'This note will be moved to trash')]" +
           "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();
-      ZeppelinITUtils.sleep(100, true);
+      ZeppelinITUtils.sleep(100, false);
 
       LOG.info("testCreateNotebook Test executed");
     } catch (Exception e) {
@@ -315,7 +315,7 @@ public void testAngularRunParagraph() throws Exception {
 
       //delete created notebook for cleanup.
       deleteTestNotebook(driver);
-      ZeppelinITUtils.sleep(1000, true);
+      ZeppelinITUtils.sleep(1000, false);
 
       LOG.info("testAngularRunParagraph Test executed");
     }  catch (Exception e) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/SecurityRestApi.java
Patch:
@@ -16,6 +16,7 @@
  */
 package org.apache.zeppelin.rest;
 
+import com.google.gson.Gson;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.shiro.realm.Realm;
 import org.apache.shiro.realm.jdbc.JdbcRealm;
@@ -55,6 +56,7 @@
 @Produces("application/json")
 public class SecurityRestApi {
   private static final Logger LOG = LoggerFactory.getLogger(SecurityRestApi.class);
+  private static final Gson gson = new Gson();
 
   /**
    * Required by Swagger.
@@ -89,7 +91,7 @@ public Response ticket() {
 
     Map<String, String> data = new HashMap<>();
     data.put("principal", principal);
-    data.put("roles", roles.toString());
+    data.put("roles", gson.toJson(roles));
     data.put("ticket", ticket);
 
     response = new JsonResponse(Response.Status.OK, "", data);

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreterPandasSql.java
Patch:
@@ -70,7 +70,7 @@ public void open() throws InterpreterException {
       LOG.info("Bootstrap {} interpreter with {}", this.toString(), SQL_BOOTSTRAP_FILE_PY);
       PythonInterpreter python = getPythonInterpreter();
 
-      python.bootStrapInterpreter(SQL_BOOTSTRAP_FILE_PY);
+      python.bootstrapInterpreter(SQL_BOOTSTRAP_FILE_PY);
     } catch (IOException e) {
       LOG.error("Can't execute " + SQL_BOOTSTRAP_FILE_PY + " to import SQL dependencies", e);
     }

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/OldSparkInterpreterTest.java
Patch:
@@ -127,7 +127,7 @@ public void onMetaInfosReceived(Map<String, String> infos) {
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),
         new InterpreterOutput(null)) {
-        
+
         @Override
         public RemoteEventClientWrapper getClient() {
           return remoteEventClientWrapper;
@@ -192,7 +192,7 @@ public void testNextLineCompanionObject() throws InterpreterException {
   public void testEndWithComment() throws InterpreterException {
     assertEquals(InterpreterResult.Code.SUCCESS, repl.interpret("val c=1\n//comment", context).code());
   }
-  
+
   @Test
   public void testCreateDataFrame() throws InterpreterException {
     if (getSparkVersionNumber(repl) >= 13) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -520,7 +520,8 @@ public Properties getJavaProperties() {
     Map<String, InterpreterProperty> iProperties = (Map<String, InterpreterProperty>) properties;
     for (Map.Entry<String, InterpreterProperty> entry : iProperties.entrySet()) {
       if (entry.getValue().getValue() != null) {
-        jProperties.setProperty(entry.getKey().trim(), entry.getValue().getValue().toString().trim());
+        jProperties.setProperty(entry.getKey().trim(),
+            entry.getValue().getValue().toString().trim());
       }
     }
 

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/security/JDBCSecurityImpl.java
Patch:
@@ -32,6 +32,7 @@
  * Created for org.apache.zeppelin.jdbc.security on 09/07/16.
  */
 public class JDBCSecurityImpl {
+
   private static final Logger LOGGER = LoggerFactory.getLogger(JDBCSecurityImpl.class);
 
   /***
@@ -57,7 +58,7 @@ public static void createSecureConfiguration(Properties properties,
                 properties.getProperty("zeppelin.jdbc.keytab.location"));
           } else {
             LOGGER.info("The user has already logged in using Keytab and principal, " +
-              "no action required");
+                "no action required");
           }
         } catch (IOException e) {
           LOGGER.error("Failed to get either keytab location or principal name in the " +

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -495,7 +495,7 @@ public void setProperties(Object object) {
       StringMap<String> map = (StringMap) properties;
       Properties newProperties = new Properties();
       for (String key : map.keySet()) {
-        newProperties.put(StringUtils.trim(key), StringUtils.trim(map.get(key)));
+        newProperties.put(key, map.get(key));
       }
       this.properties = newProperties;
     } else {
@@ -520,7 +520,7 @@ public Properties getJavaProperties() {
     Map<String, InterpreterProperty> iProperties = (Map<String, InterpreterProperty>) properties;
     for (Map.Entry<String, InterpreterProperty> entry : iProperties.entrySet()) {
       if (entry.getValue().getValue() != null) {
-        jProperties.setProperty(entry.getKey(), entry.getValue().getValue().toString());
+        jProperties.setProperty(entry.getKey().trim(), entry.getValue().getValue().toString().trim());
       }
     }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/UserPrincipal.java
Patch:
@@ -21,7 +21,7 @@
 import java.security.Principal;
 
 /**
- * A {@code java.security.Principal} implememtation for use with Shiro {@code PamRealm}
+ * A {@code java.security.Principal} implememtation for use with Shiro {@code PamRealm}.
  */
 public class UserPrincipal implements Principal {
   private final UnixUser userName;

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/jwt/JWTAuthenticationToken.java
Patch:
@@ -19,10 +19,9 @@
 import org.apache.shiro.authc.AuthenticationToken;
 
 /**
- * Created for org.apache.zeppelin.server
+ * Created for org.apache.zeppelin.server.
  */
 public class JWTAuthenticationToken implements AuthenticationToken {
-
   private Object userId;
   private String token;
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/exception/ForbiddenException.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.rest.exception;
 
 import static javax.ws.rs.core.Response.Status.FORBIDDEN;
-import static javax.ws.rs.core.Response.Status.UNAUTHORIZED;
 
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.Response;
@@ -26,7 +25,6 @@
 
 /**
  * UnauthorizedException handler for WebApplicationException.
- * 
  */
 public class ForbiddenException extends WebApplicationException {
   private static final long serialVersionUID = 4394749068760407567L;
@@ -47,5 +45,4 @@ public ForbiddenException(Throwable cause, String message) {
   public ForbiddenException(String message) {
     super(forbiddenJson(message));
   }
-
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/RestartInterpreterRequest.java
Patch:
@@ -14,22 +14,21 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.zeppelin.rest.message;
 
 import com.google.gson.Gson;
+
 import org.apache.zeppelin.common.JsonSerializable;
 
 /**
- * RestartInterpreter rest api request message
+ * RestartInterpreter rest api request message.
  */
 public class RestartInterpreterRequest implements JsonSerializable {
   private static final Gson gson = new Gson();
 
   String noteId;
 
   public RestartInterpreterRequest() {
-
   }
 
   public String getNoteId() {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/UpdateInterpreterSettingRequest.java
Patch:
@@ -14,20 +14,20 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.zeppelin.rest.message;
 
+import com.google.gson.Gson;
+
 import java.util.List;
 import java.util.Map;
 
-import com.google.gson.Gson;
 import org.apache.zeppelin.common.JsonSerializable;
 import org.apache.zeppelin.dep.Dependency;
 import org.apache.zeppelin.interpreter.InterpreterOption;
 import org.apache.zeppelin.interpreter.InterpreterProperty;
 
 /**
- * UpdateInterpreterSetting rest api request message
+ * UpdateInterpreterSetting rest api request message.
  */
 public class UpdateInterpreterSettingRequest implements JsonSerializable {
   private static final Gson gson = new Gson();

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookSocketListener.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.zeppelin.socket;
 
 /**
- * NoteboookSocket listener
+ * NoteboookSocket listener.
  */
 public interface NotebookSocketListener {
   void onClose(NotebookSocket socket, int code, String message);

File: zeppelin-server/src/main/java/org/apache/zeppelin/types/InterpreterSettingsList.java
Patch:
@@ -14,15 +14,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.zeppelin.types;
 
 import java.util.List;
 
 import org.apache.zeppelin.interpreter.InterpreterInfo;
 
 /**
- * InterpreterSetting information for binding
+ * InterpreterSetting information for binding.
  */
 public class InterpreterSettingsList {
   private String id;

File: zeppelin-server/src/main/java/org/apache/zeppelin/utils/CommandLineUtils.java
Patch:
@@ -16,12 +16,12 @@
  */
 package org.apache.zeppelin.utils;
 
-import org.apache.zeppelin.util.Util;
-
 import java.util.Locale;
 
+import org.apache.zeppelin.util.Util;
+
 /**
- * CommandLine Support Class
+ * CommandLine Support Class.
  */
 public class CommandLineUtils {
   public static void main(String[] args) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/display/AngularObjectBuilder.java
Patch:
@@ -14,13 +14,11 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.zeppelin.display;
 
 public class AngularObjectBuilder {
-
   public static <T> AngularObject<T> build(String varName, T value, String noteId,
-    String paragraphId) {
+          String paragraphId) {
     return new AngularObject<>(varName, value, noteId, paragraphId, null);
   }
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ConfigurationsRestApiTest.java
Patch:
@@ -14,13 +14,15 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package org.apache.zeppelin.rest;
 
+import static org.junit.Assert.assertTrue;
+
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterators;
 import com.google.gson.Gson;
 import com.google.gson.reflect.TypeToken;
+
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -29,8 +31,6 @@
 import java.io.IOException;
 import java.util.Map;
 
-import static org.junit.Assert.assertTrue;
-
 public class ConfigurationsRestApiTest extends AbstractTestRestApi {
   Gson gson = new Gson();
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.gson.annotations.SerializedName;
 import com.google.gson.internal.StringMap;
 import org.apache.commons.io.FileUtils;
+import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.dep.Dependency;
 import org.apache.zeppelin.dep.DependencyResolver;
@@ -494,7 +495,7 @@ public void setProperties(Object object) {
       StringMap<String> map = (StringMap) properties;
       Properties newProperties = new Properties();
       for (String key : map.keySet()) {
-        newProperties.put(key, map.get(key));
+        newProperties.put(StringUtils.trim(key), StringUtils.trim(map.get(key)));
       }
       this.properties = newProperties;
     } else {

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -64,7 +64,7 @@ public void setup() throws InterpreterException {
     p.setProperty("spark.submit.deployMode", "client");
     p.setProperty("spark.app.name", "Zeppelin Test");
     p.setProperty("zeppelin.spark.useHiveContext", "true");
-    p.setProperty("zeppelin.spark.maxResult", "1000");
+    p.setProperty("zeppelin.spark.maxResult", "3");
     p.setProperty("zeppelin.spark.importImplicit", "true");
     p.setProperty("zeppelin.pyspark.python", "python");
     p.setProperty("zeppelin.dep.localrepo", Files.createTempDir().getAbsolutePath());

File: kylin/src/main/java/org/apache/zeppelin/kylin/KylinErrorResponse.java
Patch:
@@ -34,7 +34,7 @@ class KylinErrorResponse implements JsonSerializable {
   private Object data;
   private String msg;
 
-  public KylinErrorResponse(String stacktrace, String exception, String url,
+  KylinErrorResponse(String stacktrace, String exception, String url,
       String code, Object data, String msg) {
     this.stacktrace = stacktrace;
     this.exception = exception;
@@ -59,5 +59,4 @@ public static KylinErrorResponse fromJson(String json) {
       return null;
     }
   }
-
 }

File: markdown/src/main/java/org/apache/zeppelin/markdown/Markdown4jParser.java
Patch:
@@ -18,8 +18,6 @@
 package org.apache.zeppelin.markdown;
 
 import org.markdown4j.Markdown4jProcessor;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -85,7 +85,9 @@ public void close() {
 
 
   @Override
-  public InterpreterResult interpret(String cmd, InterpreterContext contextInterpreter) {
+  public InterpreterResult interpret(String originalCmd, InterpreterContext contextInterpreter) {
+    String cmd = Boolean.parseBoolean(getProperty("zeppelin.shell.interpolation")) ?
+            interpolate(originalCmd, contextInterpreter.getResourcePool()) : originalCmd;
     LOGGER.debug("Run shell command '" + cmd + "'");
     OutputStream outStream = new ByteArrayOutputStream();
     

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -115,7 +115,9 @@ public InterpreterResult interpret(String st, InterpreterContext context)
       // to    def sql(sqlText: String): DataFrame (1.3 and later).
       // Therefore need to use reflection to keep binary compatibility for all spark versions.
       Method sqlMethod = sqlc.getClass().getMethod("sql", String.class);
-      rdd = sqlMethod.invoke(sqlc, st);
+      String effectiveString = Boolean.parseBoolean(getProperty("zeppelin.spark.sql.interpolation")) ?
+              interpolate(st, context.getResourcePool()) : st;
+      rdd = sqlMethod.invoke(sqlc, effectiveString);
     } catch (InvocationTargetException ite) {
       if (Boolean.parseBoolean(getProperty("zeppelin.spark.sql.stacktrace"))) {
         throw new InterpreterException(ite);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/plugin/PluginManager.java
Patch:
@@ -60,8 +60,7 @@ public NotebookRepo loadNotebookRepo(String notebookRepoClassName) throws IOExce
             (Class.forName(notebookRepoClassName).newInstance());
         return notebookRepo;
       } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
-        LOGGER.warn("Fail to instantiate notebookrepo:" + notebookRepoClassName, e);
-        return null;
+        LOGGER.warn("Fail to instantiate notebookrepo from classpath directly:" + notebookRepoClassName, e);
       }
     }
 

File: zeppelin-plugins/notebookrepo/filesystem/src/test/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepoTest.java
Patch:
@@ -37,7 +37,8 @@ public void setUp() throws IOException {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(), notebookDir);
     hadoopConf = new Configuration();
     fs = FileSystem.get(hadoopConf);
-    hdfsNotebookRepo = new FileSystemNotebookRepo(zConf);
+    hdfsNotebookRepo = new FileSystemNotebookRepo();
+    hdfsNotebookRepo.init(zConf);
   }
 
   @After

File: zeppelin-plugins/notebookrepo/github/src/test/java/org/apache/zeppelin/notebook/repo/GitHubNotebookRepoTest.java
Patch:
@@ -49,7 +49,7 @@
  * 2. The second repository is considered as the local notebook repository
  */
 public class GitHubNotebookRepoTest {
-  private static final Logger LOG = LoggerFactory.getLogger(GitNotebookRepoTest.class);
+  private static final Logger LOG = LoggerFactory.getLogger(GitHubNotebookRepoTest.class);
 
   private static final String TEST_NOTE_ID = "2A94M5J1Z";
 

File: zeppelin-plugins/notebookrepo/zeppelin-hub/src/main/test/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepoTest.java
Patch:
@@ -35,7 +35,8 @@ public void setUp() throws Exception {
     System.setProperty(ZeppelinHubRepo.ZEPPELIN_CONF_PROP_NAME_TOKEN, token);
 
     ZeppelinConfiguration conf = new ZeppelinConfiguration();
-    repo = new ZeppelinHubRepo(conf);
+    repo = new ZeppelinHubRepo();
+    repo.init(conf);
     repo.setZeppelinhubRestApiHandler(getMockedZeppelinHandler());
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/PamRealm.java
Patch:
@@ -43,7 +43,7 @@
  */
 public class PamRealm extends AuthorizingRealm {
 
-  private static final Logger LOG = LoggerFactory.getLogger(ZeppelinHubRealm.class);
+  private static final Logger LOG = LoggerFactory.getLogger(PamRealm.class);
 
   private String service;
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -30,7 +30,6 @@
 import javax.servlet.http.HttpServletRequest;
 
 import org.apache.commons.lang.StringUtils;
-import org.apache.commons.vfs2.FileSystemException;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 import org.apache.zeppelin.display.*;
@@ -1052,7 +1051,7 @@ private void createNote(NotebookSocket conn, HashSet<String> userAndRoles, Noteb
       note.persist(subject);
       addConnectionToNote(note.getId(), (NotebookSocket) conn);
       conn.send(serializeMessage(new Message(OP.NEW_NOTE).put("note", note)));
-    } catch (FileSystemException e) {
+    } catch (IOException e) {
       LOG.error("Exception from createNote", e);
       conn.send(serializeMessage(new Message(OP.ERROR_INFO).put("info",
           "Oops! There is something wrong with the notebook file system. "
@@ -1840,7 +1839,7 @@ private boolean persistNoteWithAuthInfo(NotebookSocket conn,
     try {
       note.persist(p.getAuthenticationInfo());
       return true;
-    } catch (FileSystemException ex) {
+    } catch (IOException ex) {
       LOG.error("Exception from run", ex);
       conn.send(serializeMessage(new Message(OP.ERROR_INFO).put("info",
           "Oops! There is something wrong with the notebook file system. "

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -233,7 +233,7 @@ public Note importNote(String sourceJson, String noteName, AuthenticationInfo su
    * @throws IOException, CloneNotSupportedException, IllegalArgumentException
    */
   public Note cloneNote(String sourceNoteId, String newNoteName, AuthenticationInfo subject)
-      throws IOException, CloneNotSupportedException, IllegalArgumentException {
+      throws IOException, IllegalArgumentException {
 
     Note sourceNote = getNote(sourceNoteId);
     if (sourceNote == null) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinhubClient.java
Patch:
@@ -27,7 +27,6 @@
 import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.lang.StringUtils;
-import org.apache.zeppelin.notebook.repo.zeppelinhub.ZeppelinHubRepo;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.listener.ZeppelinhubWebsocket;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.protocol.ZeppelinHubOp;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.websocket.protocol.ZeppelinhubMessage;
@@ -62,6 +61,7 @@ public class ZeppelinhubClient {
   private final URI zeppelinhubWebsocketUrl;
   private final String zeppelinhubToken;
 
+  private static final String TOKEN_HEADER = "X-Zeppelin-Token";
   private static final long CONNECTION_IDLE_TIME = TimeUnit.SECONDS.toMillis(30);
   private static ZeppelinhubClient instance = null;
   private static Gson gson;
@@ -177,7 +177,7 @@ public void removeSession(String token) {
 
   private ClientUpgradeRequest getConnectionRequest(String token) {
     ClientUpgradeRequest request = new ClientUpgradeRequest();
-    request.setCookies(Lists.newArrayList(new HttpCookie(ZeppelinHubRepo.TOKEN_HEADER, token)));
+    request.setCookies(Lists.newArrayList(new HttpCookie(TOKEN_HEADER, token)));
     return request;
   }
   

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1088,7 +1088,7 @@ private void removeFolder(NotebookSocket conn, HashSet<String> userAndRoles,
       return;
     }
 
-    List<Note> notes = notebook.getNotesUnderFolder(folderId);
+    List<Note> notes = notebook.getNotesUnderFolder(folderId, userAndRoles);
     for (Note note : notes) {
       String noteId = note.getId();
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -775,7 +775,7 @@ public enum ConfVars {
     ZEPPELIN_INTERPRETER_PORTRANGE("zeppelin.interpreter.portRange", ":"),
 
     ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_CLASS("zeppelin.interpreter.lifecyclemanager.class",
-        "org.apache.zeppelin.interpreter.lifecycle.TimeoutLifecycleManager"),
+        "org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager"),
     ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL(
         "zeppelin.interpreter.lifecyclemanager.timeout.checkinterval", 6000L),
     ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD(

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.zeppelin.dep.Dependency;
 import org.apache.zeppelin.display.AngularObjectRegistryListener;
 import org.apache.zeppelin.helium.ApplicationEventListener;
+import org.apache.zeppelin.interpreter.lifecycle.NullLifecycleManager;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener;
 import org.junit.Test;
 import org.sonatype.aether.RepositoryException;
@@ -50,6 +51,7 @@ public void testInitInterpreterSettingManager() throws IOException, RepositoryEx
     InterpreterSetting interpreterSetting = interpreterSettingManager.getByName("test");
     assertEquals("test", interpreterSetting.getName());
     assertEquals("test", interpreterSetting.getGroup());
+    assertTrue(interpreterSetting.getLifecycleManager() instanceof NullLifecycleManager);
     assertEquals(3, interpreterSetting.getInterpreterInfos().size());
     // 3 other builtin properties:
     //   * zeppelin.interpreter.output.limit

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -240,7 +240,7 @@ public void setClassloaderUrls(URL[] classloaderUrls) {
    * @param cmd The code to be executed by the interpreter on given event
    */
   @Experimental
-  public void registerHook(String noteId, String event, String cmd) {
+  public void registerHook(String noteId, String event, String cmd) throws InvalidHookException {
     InterpreterHookRegistry hooks = interpreterGroup.getInterpreterHookRegistry();
     String className = getClassName();
     hooks.register(noteId, className, event, cmd);
@@ -253,7 +253,7 @@ public void registerHook(String noteId, String event, String cmd) {
    * @param cmd The code to be executed by the interpreter on given event
    */
   @Experimental
-  public void registerHook(String event, String cmd) {
+  public void registerHook(String event, String cmd) throws InvalidHookException {
     registerHook(null, event, cmd);
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java
Patch:
@@ -165,12 +165,12 @@ public void setClassloaderUrls(URL [] urls) {
   }
 
   @Override
-  public void registerHook(String noteId, String event, String cmd) {
+  public void registerHook(String noteId, String event, String cmd) throws InvalidHookException {
     intp.registerHook(noteId, event, cmd);
   }
 
   @Override
-  public void registerHook(String event, String cmd) {
+  public void registerHook(String event, String cmd) throws InvalidHookException {
     intp.registerHook(event, cmd);
   }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/SparkIntegrationTest.java
Patch:
@@ -75,7 +75,7 @@ private void testInterpreterBasics() throws IOException, InterpreterException {
     interpreterSettingManager.setInterpreterBinding("user1", "note1", interpreterSettingManager.getInterpreterSettingIds());
     Interpreter sparkInterpreter = interpreterFactory.getInterpreter("user1", "note1", "spark.spark");
 
-    InterpreterContext context = new InterpreterContext.Builder().setNoteId("note1").setParagraphId("paragraph_1").getContext();
+    InterpreterContext context = new InterpreterContext.Builder().setNoteId("note1").setParagraphId("paragraph_1").build();
     InterpreterResult interpreterResult = sparkInterpreter.interpret("sc.version", context);
     assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code);
     String detectedSparkVersion = interpreterResult.message().get(0).getData();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java
Patch:
@@ -772,7 +772,7 @@ public void registerHook(String event, String cmd, String replName) {
    */
   @Experimental
   public void registerHook(String event, String cmd) {
-    String className = interpreterContext.getClassName();
+    String className = interpreterContext.getInterpreterClassName();
     registerHook(event, cmd, className);
   }
 
@@ -794,7 +794,7 @@ public String getHook(String event, String replName) {
    */
   @Experimental
   public String getHook(String event) {
-    String className = interpreterContext.getClassName();
+    String className = interpreterContext.getInterpreterClassName();
     return getHook(event, className);
   }
 
@@ -816,7 +816,7 @@ public void unregisterHook(String event, String replName) {
    */
   @Experimental
   public void unregisterHook(String event) {
-    String className = interpreterContext.getClassName();
+    String className = interpreterContext.getInterpreterClassName();
     unregisterHook(event, className);
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1908,7 +1908,7 @@ public boolean apply(String key) {
                     .getVarName());
           }
         });
-
+    configurations.put("isRevisionSupported", String.valueOf(notebook.isRevisionSupported()));
     conn.send(serializeMessage(
         new Message(OP.CONFIGURATIONS_INFO).put("configurations", configurations)));
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -677,8 +677,9 @@ public void clearNoteIdAndParaMap() {
   List<Interpreter> createInterpreters(String user, String interpreterGroupId, String sessionId) {
     List<Interpreter> interpreters = new ArrayList<>();
     List<InterpreterInfo> interpreterInfos = getInterpreterInfos();
+    Properties intpProperties = getJavaProperties();
     for (InterpreterInfo info : interpreterInfos) {
-      Interpreter interpreter = new RemoteInterpreter(getJavaProperties(), sessionId,
+      Interpreter interpreter = new RemoteInterpreter(intpProperties, sessionId,
           info.getClassName(), user, lifecycleManager);
       if (info.isDefaultInterpreter()) {
         interpreters.add(0, interpreter);
@@ -688,7 +689,7 @@ List<Interpreter> createInterpreters(String user, String interpreterGroupId, Str
       LOGGER.info("Interpreter {} created for user: {}, sessionId: {}",
           interpreter.getClassName(), user, sessionId);
     }
-    interpreters.add(new ConfInterpreter(getJavaProperties(), interpreterGroupId, this));
+    interpreters.add(new ConfInterpreter(intpProperties, interpreterGroupId, this));
     return interpreters;
   }
 

File: ignite/src/test/java/org/apache/zeppelin/ignite/Person.java
Patch:
@@ -16,10 +16,10 @@
  */
 package org.apache.zeppelin.ignite;
 
-import java.io.Serializable;
-
 import org.apache.ignite.cache.query.annotations.QuerySqlField;
 
+import java.io.Serializable;
+
 public class Person implements Serializable {
   @QuerySqlField
   private String name;

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCUserConfigurations.java
Patch:
@@ -15,15 +15,15 @@
 package org.apache.zeppelin.jdbc;
 
 import org.apache.commons.dbcp2.PoolingDriver;
-import org.apache.zeppelin.user.UsernamePassword;
 
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 import java.util.Properties;
 
+import org.apache.zeppelin.user.UsernamePassword;
+
 /**
  * UserConfigurations for JDBC impersonation.
  */
@@ -106,5 +106,4 @@ public boolean isConnectionInDBDriverPoolSuccessful(String key) {
     }
     return false;
   }
-
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -211,7 +211,7 @@ public Note importNote(String sourceJson, String noteName, AuthenticationInfo su
       newNote.setCronSupported(getConf());
       List<Paragraph> paragraphs = oldNote.getParagraphs();
       for (Paragraph p : paragraphs) {
-        newNote.addCloneParagraph(p);
+        newNote.addCloneParagraph(p, subject);
       }
 
       notebookAuthorization.setNewNotePermissions(newNote.getId(), subject);
@@ -252,7 +252,7 @@ public Note cloneNote(String sourceNoteId, String newNoteName, AuthenticationInf
 
     List<Paragraph> paragraphs = sourceNote.getParagraphs();
     for (Paragraph p : paragraphs) {
-      newNote.addCloneParagraph(p);
+      newNote.addCloneParagraph(p, subject);
     }
 
     noteSearchService.addIndexDoc(newNote);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1723,7 +1723,7 @@ private void runAllParagraphs(NotebookSocket conn, HashSet<String> userAndRoles,
       Paragraph p = setParagraphUsingMessage(note, fromMessage,
           paragraphId, text, title, params, config);
 
-      if (!persistAndExecuteSingleParagraph(conn, note, p, true)) {
+      if (p.isEnabled() && !persistAndExecuteSingleParagraph(conn, note, p, true)) {
         // stop execution when one paragraph fails.
         break;
       }

File: sap/src/main/java/org/apache/zeppelin/sap/universe/UniverseUtil.java
Patch:
@@ -188,7 +188,8 @@ && isFilter(String.format("%s]", whereBuf.toString()), text.substring(i + 1))))
         }
         if (buf.toString().toLowerCase().endsWith("where") || i == array.length - 1) {
           selectPart = false;
-          select.append(parseResultObj(resultObj.toString().replaceAll("(?i)wher$", ""), nodeInfos));
+          select.append(parseResultObj(resultObj.toString().replaceAll("(?i)wher$", ""),
+              nodeInfos));
           select.append(RESULT_END_TEMPLATE);
           continue;
         }

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkVersion.java
Patch:
@@ -34,10 +34,10 @@ public class SparkVersion {
   public static final SparkVersion SPARK_1_6_0 = SparkVersion.fromVersionString("1.6.0");
 
   public static final SparkVersion SPARK_2_0_0 = SparkVersion.fromVersionString("2.0.0");
-  public static final SparkVersion SPARK_2_3_0 = SparkVersion.fromVersionString("2.3.0");
+  public static final SparkVersion SPARK_2_4_0 = SparkVersion.fromVersionString("2.4.0");
 
   public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_1_0_0;
-  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_2_3_0;
+  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_2_4_0;
 
   private int version;
   private String versionString;

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -123,6 +123,8 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr
       }
       Thread.sleep(100);
     }
+    // sleep for 1 second to make sure job running thread finish to fire event. See ZEPPELIN-3277
+    Thread.sleep(1000);
 
     // add angularObject
     interpreterGroup.getAngularObjectRegistry().add("object1", "value1", note1.getId(), null);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -412,7 +412,8 @@ private void registerInterpreterSetting(List<RegisteredInterpreter> registeredIn
 
   @VisibleForTesting
   public InterpreterSetting getDefaultInterpreterSetting(String noteId) {
-    return getInterpreterSettings(noteId).get(0);
+    List<InterpreterSetting> allInterpreterSettings = getInterpreterSettings(noteId);
+    return allInterpreterSettings.size() > 0 ? allInterpreterSettings.get(0) : null;
   }
 
   public List<InterpreterSetting> getInterpreterSettings(String noteId) {
@@ -468,7 +469,7 @@ public Map<String, Object> getEditorSetting(Interpreter interpreter, String user
           group = replNameSplit[0];
         }
         // when replName is 'name' of interpreter
-        if (defaultSettingName.equals(intpSetting.getName())) {
+        if (intpSetting.getName().equals(defaultSettingName)) {
           editor = intpSetting.getEditorFromSettingByClassName(interpreter.getClassName());
         }
         // when replName is 'alias name' of interpreter or 'group' of interpreter

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterProperty.java
Patch:
@@ -34,6 +34,7 @@ public InterpreterProperty(String name, Object value, String type) {
   public InterpreterProperty(String name, Object value) {
     this.name = name;
     this.value = value;
+    this.type = InterpreterPropertyType.TEXTAREA.getValue();
   }
 
   public String getName() {

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -388,6 +388,7 @@ public InterpreterResult interpret(String cmd, InterpreterContext contextInterpr
 
     zeppelinContext.setGui(context.getGui());
     zeppelinContext.setNoteGui(context.getNoteGui());
+    zeppelinContext.setInterpreterContext(context);
 
     if (!pythonscriptRunning) {
       return new InterpreterResult(Code.ERROR, "python process not running"

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/completer/CompletionType.java
Patch:
@@ -24,5 +24,6 @@ public enum CompletionType {
   setting,
   command,
   keyword,
-  path
+  path,
+  universe
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -692,7 +692,8 @@ public enum ConfVars {
         + "org.apache.zeppelin.beam.BeamInterpreter,"
         + "org.apache.zeppelin.scio.ScioInterpreter,"
         + "org.apache.zeppelin.groovy.GroovyInterpreter,"
-        + "org.apache.zeppelin.neo4j.Neo4jCypherInterpreter"
+        + "org.apache.zeppelin.neo4j.Neo4jCypherInterpreter,"
+        + "org.apache.zeppelin.sap.UniverseInterpreter"
         ),
     ZEPPELIN_INTERPRETER_JSON("zeppelin.interpreter.setting", "interpreter-setting.json"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/storage/LocalConfigStorage.java
Patch:
@@ -50,6 +50,7 @@ public LocalConfigStorage(ZeppelinConfiguration zConf) {
 
   @Override
   public void save(InterpreterInfoSaving settingInfos) throws IOException {
+    LOGGER.info("Save Interpreter Setting to " + interpreterSettingPath.getAbsolutePath());
     writeToFile(settingInfos.toJson(), interpreterSettingPath);
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -161,7 +161,8 @@ private void setupPropertiesForSparkR(Properties sparkProperties) {
 
     File sparkRPath = new File(sparkRBasePath, "sparkr.zip");
     if (sparkRPath.exists() && sparkRPath.isFile()) {
-      mergeSparkProperty(sparkProperties, "spark.yarn.dist.archives", sparkRPath.getAbsolutePath());
+      mergeSparkProperty(sparkProperties, "spark.yarn.dist.archives",
+          sparkRPath.getAbsolutePath() + "#sparkr");
     } else {
       LOGGER.warn("sparkr.zip is not found, SparkR may not work.");
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -403,13 +403,14 @@ private void registerInterpreterSetting(List<RegisteredInterpreter> registeredIn
         .setIntepreterSettingManager(this)
         .create();
 
-    LOGGER.info("Register InterpreterSettingTemplate & InterpreterSetting: {}",
+    LOGGER.info("Register InterpreterSettingTemplate & Create InterpreterSetting: {}",
         interpreterSettingTemplate.getName());
     interpreterSettingTemplates.put(interpreterSettingTemplate.getName(),
         interpreterSettingTemplate);
 
     InterpreterSetting interpreterSetting = new InterpreterSetting(interpreterSettingTemplate);
     initInterpreterSetting(interpreterSetting);
+    interpreterSettings.put(interpreterSetting.getName(), interpreterSetting);
   }
 
   @VisibleForTesting

File: livy/src/main/java/org/apache/zeppelin/livy/LivyException.java
Patch:
@@ -17,10 +17,12 @@
 
 package org.apache.zeppelin.livy;
 
+import org.apache.zeppelin.interpreter.InterpreterException;
+
 /**
  * Livy api related exception
  */
-public class LivyException extends Exception {
+public class LivyException extends InterpreterException {
   public LivyException() {
   }
 

File: livy/src/main/java/org/apache/zeppelin/livy/LivyPySparkBaseInterpreter.java
Patch:
@@ -32,15 +32,15 @@ public LivyPySparkBaseInterpreter(Properties property) {
   @Override
   protected String extractAppId() throws LivyException {
     return extractStatementResult(
-        interpret("sc.applicationId", null, false, false).message()
+        interpret("sc.applicationId", null, false, false, false).message()
             .get(0).getData());
   }
 
   @Override
   protected String extractWebUIAddress() throws LivyException {
     return extractStatementResult(
         interpret(
-            "sc._jsc.sc().ui().get().appUIAddress()", null, false, false)
+            "sc._jsc.sc().ui().get().appUIAddress()", null, false, false, false)
             .message().get(0).getData());
   }
 

File: livy/src/main/java/org/apache/zeppelin/livy/LivySharedInterpreter.java
Patch:
@@ -78,7 +78,7 @@ public InterpreterResult interpret(String st, String codeType, InterpreterContex
     }
 
     try {
-      return interpret(st, codeType, context.getParagraphId(), this.displayAppInfo, true);
+      return interpret(st, codeType, context.getParagraphId(), this.displayAppInfo, true, true);
     } catch (LivyException e) {
       LOGGER.error("Fail to interpret:" + st, e);
       return new InterpreterResult(InterpreterResult.Code.ERROR,

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkInterpreter.java
Patch:
@@ -36,7 +36,7 @@ public String getSessionKind() {
   @Override
   protected String extractAppId() throws LivyException {
     return extractStatementResult(
-        interpret("sc.applicationId", null, false, false).message()
+        interpret("sc.applicationId", null, false, false, false).message()
             .get(0).getData());
   }
 
@@ -45,10 +45,10 @@ protected String extractWebUIAddress() throws LivyException {
     interpret(
         "val webui=sc.getClass.getMethod(\"ui\").invoke(sc).asInstanceOf[Some[_]].get",
         null,
-        null, false, false);
+        null, false, false, false);
     return extractStatementResult(
         interpret(
-            "webui.getClass.getMethod(\"appUIAddress\").invoke(webui)", null, false, false)
+            "webui.getClass.getMethod(\"appUIAddress\").invoke(webui)", null, false, false, false)
             .message().get(0).getData());
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutput.java
Patch:
@@ -232,7 +232,7 @@ public void flush() throws IOException {
   }
 
   public boolean isAppendSupported() {
-    return type == InterpreterResult.Type.TEXT;
+    return type == InterpreterResult.Type.TEXT || type == InterpreterResult.Type.TABLE;
   }
 
   private void copyStream(InputStream in, OutputStream out) throws IOException {

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -143,10 +143,10 @@ public void open() throws InterpreterException {
       int jvmGatewayPort = RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces();
       LOGGER.info("Launching IPython Kernel at port: " + ipythonPort);
       LOGGER.info("Launching JVM Gateway at port: " + jvmGatewayPort);
-      int framesize = Integer.parseInt(getProperty("zeppelin.ipython.grpc.framesize",
+      int message_size = Integer.parseInt(getProperty("zeppelin.ipython.grpc.message_size",
           32 * 1024 * 1024 + ""));
       ipythonClient = new IPythonClient(ManagedChannelBuilder.forAddress("127.0.0.1", ipythonPort)
-          .usePlaintext(true).maxInboundMessageSize(framesize));
+          .usePlaintext(true).maxInboundMessageSize(message_size));
       launchIPythonKernel(ipythonPort);
       setupJVMGateway(jvmGatewayPort);
     } catch (Exception e) {

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -78,7 +78,7 @@ public void testIPython() throws IOException, InterruptedException, InterpreterE
   @Test
   public void testGrpcFrameSize() throws InterpreterException, IOException {
     Properties properties = new Properties();
-    properties.setProperty("zeppelin.ipython.grpc.framesize", "4");
+    properties.setProperty("zeppelin.ipython.grpc.message_size", "4");
     startInterpreter(properties);
 
     // to make this test can run under both python2 and python3
@@ -99,7 +99,7 @@ public void testGrpcFrameSize() throws InterpreterException, IOException {
     close();
 
     // increase framesize to make it work
-    properties.setProperty("zeppelin.ipython.grpc.framesize", "40");
+    properties.setProperty("zeppelin.ipython.grpc.message_size", "40");
     startInterpreter(properties);
     // to make this test can run under both python2 and python3
     result = interpreter.interpret("from __future__ import print_function", getInterpreterContext());

File: zeppelin-integration/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -110,7 +110,7 @@ protected void createNewNote() {
     WebDriverWait block = new WebDriverWait(driver, MAX_BROWSER_TIMEOUT_SEC);
     block.until(ExpectedConditions.visibilityOfElementLocated(By.id("noteCreateModal")));
     clickAndWait(By.id("createNoteButton"));
-    block.until(ExpectedConditions.invisibilityOfElementLocated(By.className("pull-right")));
+    block.until(ExpectedConditions.invisibilityOfElementLocated(By.id("createNoteButton")));
   }
 
   protected void deleteTestNotebook(final WebDriver driver) {

File: cassandra/src/main/java/org/apache/zeppelin/cassandra/ParsingException.java
Patch:
@@ -17,7 +17,7 @@
 package org.apache.zeppelin.cassandra;
 
 /**
- * Parsing Exception for Cassandra CQL statement
+ * Parsing Exception for Cassandra CQL statement.
  */
 public class ParsingException extends RuntimeException{
   public ParsingException(String message) {

File: elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/action/AggWrapper.java
Patch:
@@ -21,8 +21,9 @@
  * Contains the result of an aggregation.
  */
 public class AggWrapper {
-
-  /** Type of an aggregation (to know if there are buckets or not) */
+  /**
+   * Type of an aggregation (to know if there are buckets or not).
+   */
   public enum AggregationType { SIMPLE, MULTI_BUCKETS };
 
   private final AggregationType type;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -604,6 +604,7 @@ public void onPostExecute(String script) {
 
     @Override
     protected Object jobRun() throws Throwable {
+      ClassLoader currentThreadContextClassloader = Thread.currentThread().getContextClassLoader();
       try {
         InterpreterContext.set(context);
 
@@ -652,6 +653,7 @@ protected Object jobRun() throws Throwable {
         }
         return new InterpreterResult(result.code(), resultMessages);
       } finally {
+        Thread.currentThread().setContextClassLoader(currentThreadContextClassloader);
         InterpreterContext.remove();
       }
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -728,7 +728,7 @@ public void updateRuntimeInfos(String label, String tooltip, Map<String, String>
    * @param settingId
    */
   public void clearRuntimeInfo(String settingId) {
-    if (settingId != null) {
+    if (settingId != null && runtimeInfos != null) {
       Set<String> keys = runtimeInfos.keySet();
       if (keys.size() > 0) {
         List<String> infosToRemove = new ArrayList<>();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitHubNotebookRepoTest.java
Patch:
@@ -138,7 +138,7 @@ public void tearDown() throws Exception {
    * Test the case when the Notebook repository is created, it pulls the latest changes from the remote repository
    */
   public void pullChangesFromRemoteRepositoryOnLoadingNotebook() throws IOException, GitAPIException {
-    NotebookRepo.Revision firstHistoryRevision = gitHubNotebookRepo.revisionHistory(TEST_NOTE_ID, null).get(0);
+    NotebookRepoWithVersionControl.Revision firstHistoryRevision = gitHubNotebookRepo.revisionHistory(TEST_NOTE_ID, null).get(0);
 
     assert(this.firstCommitRevision.getName().equals(firstHistoryRevision.id));
   }
@@ -156,7 +156,7 @@ public void pullChangesFromRemoteRepositoryOnCheckpointing() throws GitAPIExcept
     addParagraphToNotebook(TEST_NOTE_ID);
 
     // Commit and push the changes to remote repository
-    NotebookRepo.Revision thirdCommitRevision = gitHubNotebookRepo.checkpoint(
+    NotebookRepoWithVersionControl.Revision thirdCommitRevision = gitHubNotebookRepo.checkpoint(
             TEST_NOTE_ID, "Third commit from local repository", null);
 
     // Check all the commits as seen from the local repository. The commits are ordered chronologically. The last
@@ -184,7 +184,7 @@ public void pushLocalChangesToRemoteRepositoryOnCheckpointing() throws IOExcepti
     addParagraphToNotebook(TEST_NOTE_ID);
 
     // Commit and push the changes to remote repository
-    NotebookRepo.Revision secondCommitRevision = gitHubNotebookRepo.checkpoint(
+    NotebookRepoWithVersionControl.Revision secondCommitRevision = gitHubNotebookRepo.checkpoint(
             TEST_NOTE_ID, "Second commit from local repository", null);
 
     // Check all the commits as seen from the remote repository. The commits are ordered chronologically. The last

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -49,7 +49,7 @@
 import org.apache.zeppelin.notebook.NotebookImportDeserializer;
 import org.apache.zeppelin.notebook.Paragraph;
 import org.apache.zeppelin.notebook.ParagraphJobListener;
-import org.apache.zeppelin.notebook.repo.NotebookRepo.Revision;
+import org.apache.zeppelin.notebook.repo.NotebookRepoWithVersionControl.Revision;
 import org.apache.zeppelin.notebook.socket.Message;
 import org.apache.zeppelin.notebook.socket.Message.OP;
 import org.apache.zeppelin.notebook.socket.WatcherMessage;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/GitNotebookRepo.java
Patch:
@@ -52,7 +52,7 @@
  *
  *   TODO(bzz): add default .gitignore
  */
-public class GitNotebookRepo extends VFSNotebookRepo {
+class GitNotebookRepo extends VFSNotebookRepo implements NotebookRepoWithVersionControl {
   private static final Logger LOG = LoggerFactory.getLogger(GitNotebookRepo.class);
 
   private String localPath;
@@ -187,3 +187,4 @@ void setGit(Git git) {
   }
 
 }
+

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.NoteInfo;
-import org.apache.zeppelin.notebook.repo.NotebookRepo;
+import org.apache.zeppelin.notebook.repo.NotebookRepoWithVersionControl;
 import org.apache.zeppelin.notebook.repo.NotebookRepoSettingsInfo;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.model.Instance;
 import org.apache.zeppelin.notebook.repo.zeppelinhub.model.UserTokenContainer;
@@ -48,7 +48,7 @@
 /**
  * ZeppelinHub repo class.
  */
-public class ZeppelinHubRepo implements NotebookRepo {
+public class ZeppelinHubRepo implements NotebookRepoWithVersionControl {
   private static final Logger LOG = LoggerFactory.getLogger(ZeppelinHubRepo.class);
   private static final String DEFAULT_SERVER = "https://www.zeppelinhub.com";
   static final String ZEPPELIN_CONF_PROP_NAME_SERVER = "zeppelinhub.api.address";

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.NoteInfo;
 import org.apache.zeppelin.notebook.Paragraph;
-import org.apache.zeppelin.notebook.repo.NotebookRepo.Revision;
+import org.apache.zeppelin.notebook.repo.NotebookRepoWithVersionControl.Revision;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.eclipse.jgit.api.Git;
 import org.eclipse.jgit.api.errors.GitAPIException;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncInitializationTest.java
Patch:
@@ -142,7 +142,7 @@ public void initEmptyStorageTest() throws IOException {
     NotebookRepoSync notebookRepoSync = new NotebookRepoSync(conf);
     // check initialization of one default storage
     assertEquals(notebookRepoSync.getRepoCount(), 1);
-    assertTrue(notebookRepoSync.getRepo(0) instanceof VFSNotebookRepo);
+    assertTrue(notebookRepoSync.getRepo(0) instanceof NotebookRepoWithVersionControl);
   }
   
   @Test
@@ -154,6 +154,6 @@ public void initOneDummyStorageTest() throws IOException {
     NotebookRepoSync notebookRepoSync = new NotebookRepoSync(conf);
     // check initialization of one default storage instead of invalid one
     assertEquals(notebookRepoSync.getRepoCount(), 1);
-    assertTrue(notebookRepoSync.getRepo(0) instanceof VFSNotebookRepo);
+    assertTrue(notebookRepoSync.getRepo(0) instanceof NotebookRepo);
   }
 }
\ No newline at end of file

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -51,9 +51,10 @@ public void open() throws InterpreterException {
         PySparkInterpreter.getPythonExec(getProperties()));
     sparkInterpreter = getSparkInterpreter();
     SparkConf conf = sparkInterpreter.getSparkContext().getConf();
-    // only set PYTHONPATH in local or yarn-client mode.
+    // only set PYTHONPATH in embedded, local or yarn-client mode.
     // yarn-cluster will setup PYTHONPATH automatically.
-    if (!conf.get("spark.submit.deployMode").equals("cluster")) {
+    if (!conf.contains("spark.submit.deployMode") ||
+        !conf.get("spark.submit.deployMode").equals("cluster")) {
       setAdditionalPythonPath(PythonUtils.sparkPythonPath());
       setAddBulitinPy4j(false);
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -824,8 +824,8 @@ private void sendNote(NotebookSocket conn, HashSet<String> userAndRoles, Noteboo
     String user = fromMessage.principal;
 
     Note note = notebook.getNote(noteId);
-    if (note != null) {
 
+    if (note != null) {
       if (!hasParagraphReaderPermission(conn, notebook, noteId,
           userAndRoles, fromMessage.principal, "read")) {
         return;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/GitNotebookRepo.java
Patch:
@@ -47,7 +47,8 @@
  *
  * This impl intended to be simple and straightforward:
  *   - does not handle branches
- *   - only basic local git file repo, no remote Github push\pull yet
+ *   - only basic local git file repo, no remote Github push\pull. GitHub integration is
+ *   implemented in @see {@link org.apache.zeppelin.notebook.repo.GitHubNotebookRepo}
  *
  *   TODO(bzz): add default .gitignore
  */
@@ -177,7 +178,7 @@ public void close() {
   }
 
   //DI replacements for Tests
-  Git getGit() {
+  protected Git getGit() {
     return git;
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/OldSparkInterpreter.java
Patch:
@@ -239,7 +239,8 @@ public void onExecutorAdded(SparkListenerExecutorAdded executorAdded) {
       }
 
       @Override
-      public void onExecutorMetricsUpdate(SparkListenerExecutorMetricsUpdate executorMetricsUpdate) {
+      public void onExecutorMetricsUpdate(
+          SparkListenerExecutorMetricsUpdate executorMetricsUpdate) {
 
       }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -518,7 +518,7 @@ public String getConfigFSDir() {
     if (StringUtils.isBlank(fsConfigDir)) {
       LOG.warn(ConfVars.ZEPPELIN_CONFIG_FS_DIR.varName + " is not specified, fall back to local " +
           "conf directory " + ConfVars.ZEPPELIN_CONF_DIR.varName);
-      return "file://" + getConfDir();
+      return getConfDir();
     }
     return fsConfigDir;
   }
@@ -709,7 +709,7 @@ public enum ConfVars {
     ZEPPELIN_CONF_DIR("zeppelin.conf.dir", "conf"),
     ZEPPELIN_CONFIG_FS_DIR("zeppelin.config.fs.dir", ""),
     ZEPPELIN_CONFIG_STORAGE_CLASS("zeppelin.config.storage.class",
-        "org.apache.zeppelin.storage.FileSystemConfigStorage"),
+        "org.apache.zeppelin.storage.LocalConfigStorage"),
     ZEPPELIN_DEP_LOCALREPO("zeppelin.dep.localrepo", "local-repo"),
     ZEPPELIN_HELIUM_REGISTRY("zeppelin.helium.registry", "helium," + HELIUM_PACKAGE_DEFAULT_URL),
     ZEPPELIN_HELIUM_NODE_INSTALLER_URL("zeppelin.helium.node.installer.url",

File: spark/interpreter/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -182,7 +182,7 @@ public void run() {
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     interpreterResultMessages = context.out.getInterpreterResultMessages();
     assertEquals(1, interpreterResultMessages.size());
-//    assertTrue(interpreterResultMessages.get(0).getData().contains("(0, 100)"));
+    assertTrue(interpreterResultMessages.get(0).getData().contains("(0, 100)"));
   }
 
   private InterpreterContext getInterpreterContext() {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java
Patch:
@@ -211,6 +211,7 @@ public Response logout() {
       KnoxJwtRealm knoxJwtRealm = getJTWRealm();
       Map<String, String> data = new HashMap<>();
       data.put("redirectURL", constructKnoxUrl(knoxJwtRealm, knoxJwtRealm.getLogout()));
+      data.put("isLogoutAPI", knoxJwtRealm.getLogoutAPI().toString());
       response = new JsonResponse(Status.UNAUTHORIZED, "", data);
     } else {
       response = new JsonResponse(Status.UNAUTHORIZED, "", "");

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkInterpreter.java
Patch:
@@ -44,6 +44,7 @@ protected String extractAppId() throws LivyException {
   protected String extractWebUIAddress() throws LivyException {
     interpret(
         "val webui=sc.getClass.getMethod(\"ui\").invoke(sc).asInstanceOf[Some[_]].get",
+        null,
         null, false, false);
     return extractStatementResult(
         interpret(

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -268,6 +268,7 @@ public InterpreterSetting() {
 
   void postProcessing() {
     this.status = Status.READY;
+    this.id = this.name;
     if (this.lifecycleManager == null) {
       this.lifecycleManager = new NullLifecycleManager(conf);
     }
@@ -287,7 +288,7 @@ void postProcessing() {
    */
   public InterpreterSetting(InterpreterSetting o) {
     this();
-    this.id = generateId();
+    this.id = o.name;
     this.name = o.name;
     this.group = o.group;
     this.properties = convertInterpreterProperties(

File: pig/src/main/java/org/apache/zeppelin/pig/PigScriptListener.java
Patch:
@@ -15,7 +15,6 @@
  * limitations under the License.
  */
 
-
 package org.apache.zeppelin.pig;
 
 import org.apache.pig.impl.plan.OperatorPlan;
@@ -32,8 +31,7 @@
  *
  */
 public class PigScriptListener implements PigProgressNotificationListener {
-
-  private static Logger LOGGER = LoggerFactory.getLogger(PigScriptListener.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(PigScriptListener.class);
 
   private Set<String> jobIds = new HashSet();
   private int progress;

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -299,7 +299,7 @@ protected Map<String, String> setupIPythonEnv() throws IOException {
   }
 
   @Override
-  public void close() {
+  public void close() throws InterpreterException {
     if (watchDog != null) {
       LOGGER.debug("Kill IPython Process");
       ipythonClient.stop(StopRequest.newBuilder().build());
@@ -327,7 +327,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
   }
 
   @Override
-  public void cancel(InterpreterContext context) {
+  public void cancel(InterpreterContext context) throws InterpreterException {
     ipythonClient.cancel(CancelRequest.newBuilder().build());
   }
 
@@ -337,7 +337,7 @@ public FormType getFormType() {
   }
 
   @Override
-  public int getProgress(InterpreterContext context) {
+  public int getProgress(InterpreterContext context) throws InterpreterException {
     return 0;
   }
 

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterMatplotlibTest.java
Patch:
@@ -80,7 +80,7 @@ public void setUp() throws Exception {
   }
 
   @After
-  public void afterTest() throws IOException {
+  public void afterTest() throws IOException, InterpreterException {
     python.close();
   }
 

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterTest.java
Patch:
@@ -93,7 +93,7 @@ public void beforeTest() throws IOException, InterpreterException {
   }
 
   @After
-  public void afterTest() throws IOException {
+  public void afterTest() throws IOException, InterpreterException {
     pythonInterpreter.close();
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/IPySparkInterpreter.java
Patch:
@@ -92,21 +92,21 @@ private SparkInterpreter getSparkInterpreter() throws InterpreterException {
   }
 
   @Override
-  public void cancel(InterpreterContext context) {
+  public void cancel(InterpreterContext context) throws InterpreterException {
     super.cancel(context);
     sparkInterpreter.cancel(context);
   }
 
   @Override
-  public void close() {
+  public void close() throws InterpreterException {
     super.close();
     if (sparkInterpreter != null) {
       sparkInterpreter.close();
     }
   }
 
   @Override
-  public int getProgress(InterpreterContext context) {
+  public int getProgress(InterpreterContext context) throws InterpreterException {
     return sparkInterpreter.getProgress(context);
   }
 

File: spark/interpreter/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -55,7 +55,7 @@ public SparkRInterpreter(Properties property) {
 
   @Override
   public void open() throws InterpreterException {
-    String rCmdPath = getProperty("zeppelin.R.cmd");
+    String rCmdPath = getProperty("zeppelin.R.cmd", "R");
     String sparkRLibPath;
 
     if (System.getenv("SPARK_HOME") != null) {
@@ -201,7 +201,7 @@ public FormType getFormType() {
   }
 
   @Override
-  public int getProgress(InterpreterContext context) {
+  public int getProgress(InterpreterContext context) throws InterpreterException {
     if (sparkInterpreter != null) {
       return sparkInterpreter.getProgress(context);
     } else {
@@ -217,7 +217,7 @@ public Scheduler getScheduler() {
 
   @Override
   public List<InterpreterCompletion> completion(String buf, int cursor,
-      InterpreterContext interpreterContext) {
+                                                InterpreterContext interpreterContext) {
     return new ArrayList<>();
   }
 

File: zeppelin-integration/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -184,7 +184,7 @@ public void testSqlSpark() throws Exception {
     }
   }
 
-  @Test
+//  @Test
   public void testDep() throws Exception {
     try {
       // restart spark interpreter before running %dep

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/BaseZeppelinContext.java
Patch:
@@ -237,6 +237,8 @@ public void show(Object o, int maxResult) {
       if (isSupportedObject(o)) {
         interpreterContext.out.write(showData(o));
       } else {
+        interpreterContext.out.write("ZeppelinContext doesn't support to show type: "
+            + o.getClass().getCanonicalName() + "\n");
         interpreterContext.out.write(o.toString());
       }
     } catch (IOException e) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -167,8 +167,8 @@ public void sparkSQLTest() throws IOException {
                 assertEquals(InterpreterResult.Type.TABLE, p.getResult().message().get(1).getType());
                 assertEquals("_1\t_2\nhello\t20\n", p.getResult().message().get(1).getData());
             }
-            ZeppelinServer.notebook.removeNote(note.getId(), anonymous);
         }
+        ZeppelinServer.notebook.removeNote(note.getId(), anonymous);
     }
 
     @Test
@@ -470,7 +470,7 @@ public void pySparkDepLoaderTest() throws IOException, InterpreterException {
             p1.setText("%pyspark\n" +
                     "from pyspark.sql import SQLContext\n" +
                     "print(" + sqlContextName + ".read.format('com.databricks.spark.csv')" +
-                    ".load('"+ tmpFile.getAbsolutePath() +"').count())");
+                    ".load('" + tmpFile.getAbsolutePath() +"').count())");
             p1.setAuthenticationInfo(anonymous);
             note.run(p1.getId());
 
@@ -576,6 +576,7 @@ public void testPySparkZeppelinContextDynamicForms() throws IOException {
 
     @Test
     public void testConfInterpreter() throws IOException {
+        ZeppelinServer.notebook.getInterpreterSettingManager().close();
         Note note = ZeppelinServer.notebook.createNote(AuthenticationInfo.ANONYMOUS);
         Paragraph p = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
         Map config = p.getConfig();

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -797,6 +797,9 @@ public Response runParagraphSynchronously(@PathParam("noteId") String noteId,
       note.initializeJobListenerForParagraph(paragraph);
     }
 
+    AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());
+    paragraph.setAuthenticationInfo(subject);
+
     paragraph.run();
 
     final InterpreterResult result = paragraph.getResult();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -603,7 +603,7 @@ public interface ConfigurationKeyPredicate {
   /**
    * Wrapper class.
    */
-  public static enum ConfVars {
+  public enum ConfVars {
     ZEPPELIN_HOME("zeppelin.home", "./"),
     ZEPPELIN_ADDR("zeppelin.server.addr", "0.0.0.0"),
     ZEPPELIN_PORT("zeppelin.server.port", 8080),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java
Patch:
@@ -156,7 +156,8 @@ private List<File> loadFromMvn(String artifact, Collection<String> excludes)
    */
   @Override
   public List<ArtifactResult> getArtifactsWithDep(String dependency,
-    Collection<String> excludes) throws RepositoryException {
+                                                  Collection<String> excludes)
+      throws RepositoryException {
     Artifact artifact = new DefaultArtifact(dependency);
     DependencyFilter classpathFilter = DependencyFilterUtils.classpathFilter(JavaScopes.COMPILE);
     PatternExclusionsDependencyFilter exclusionFilter =

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectListener.java
Patch:
@@ -21,5 +21,5 @@
  *
  */
 public interface AngularObjectListener {
-  public void updated(AngularObject updatedObject);
+  void updated(AngularObject updatedObject);
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.zeppelin.display;
 
-import java.util.Collection;
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java
Patch:
@@ -22,7 +22,7 @@
  *
  */
 public interface AngularObjectRegistryListener {
-  public void onAdd(String interpreterGroupId, AngularObject object);
-  public void onUpdate(String interpreterGroupId, AngularObject object);
-  public void onRemove(String interpreterGroupId, String name, String noteId, String paragraphId);
+  void onAdd(String interpreterGroupId, AngularObject object);
+  void onUpdate(String interpreterGroupId, AngularObject object);
+  void onRemove(String interpreterGroupId, String name, String noteId, String paragraphId);
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/ui/CheckBox.java
Patch:
@@ -18,10 +18,7 @@
 
 package org.apache.zeppelin.display.ui;
 
-import java.awt.*;
-import java.util.Arrays;
 import java.util.Collection;
-import java.util.Collections;
 
 /**
  * Html Checkbox

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/Application.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.helium;
 
 import org.apache.zeppelin.annotation.Experimental;
-import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.resource.ResourceSet;
 
 import java.io.IOException;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationContext.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.helium;
 
-import org.apache.zeppelin.display.AngularObjectRegistry;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
 
 /**

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/HeliumPackage.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.gson.Gson;
 import org.apache.zeppelin.annotation.Experimental;
 import org.apache.zeppelin.common.JsonSerializable;
-import org.apache.zeppelin.dep.Repository;
 
 import java.util.Map;
 
@@ -35,8 +34,9 @@ public class HeliumPackage implements JsonSerializable {
   private String description;    // description
   private String artifact;       // artifact name e.g) groupId:artifactId:versionId
   private String className;      // entry point
-  private String [][] resources; // resource classnames that requires
-                                 // [[ .. and .. and .. ] or [ .. and .. and ..] ..]
+  // resource classnames that requires [[ .. and .. and .. ] or [ .. and .. and ..] ..]
+  private String [][] resources;
+
   private String license;
   private String icon;
   private String published;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookListener.java
Patch:
@@ -24,10 +24,10 @@ public interface InterpreterHookListener {
   /**
    * Prepends pre-execute hook code to the script that will be interpreted
    */
-  public void onPreExecute(String script);
+  void onPreExecute(String script);
   
   /**
    * Appends post-execute hook code to the script that will be interpreted
    */
-  public void onPostExecute(String script);
+  void onPostExecute(String script);
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeListener.java
Patch:
@@ -22,6 +22,6 @@
  * InterpreterOutputChangeListener
  */
 public interface InterpreterOutputChangeListener {
-  public void fileChanged(File file);
+  void fileChanged(File file);
 
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputListener.java
Patch:
@@ -23,20 +23,20 @@ public interface InterpreterOutputListener {
   /**
    * update all message outputs
    */
-  public void onUpdateAll(InterpreterOutput out);
+  void onUpdateAll(InterpreterOutput out);
 
   /**
    * called when newline is detected
    * @param index
    * @param out
    * @param line
    */
-  public void onAppend(int index, InterpreterResultMessageOutput out, byte[] line);
+  void onAppend(int index, InterpreterResultMessageOutput out, byte[] line);
 
   /**
    * when entire output is updated. eg) after detecting new display system
    * @param index
    * @param out
    */
-  public void onUpdate(int index, InterpreterResultMessageOutput out);
+  void onUpdate(int index, InterpreterResultMessageOutput out);
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessageOutputListener.java
Patch:
@@ -24,10 +24,10 @@ public interface InterpreterResultMessageOutputListener {
    * called when newline is detected
    * @param line
    */
-  public void onAppend(InterpreterResultMessageOutput out, byte[] line);
+  void onAppend(InterpreterResultMessageOutput out, byte[] line);
 
   /**
    * when entire output is updated. eg) after detecting new display system
    */
-  public void onUpdate(InterpreterResultMessageOutput out);
+  void onUpdate(InterpreterResultMessageOutput out);
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/WrappedInterpreter.java
Patch:
@@ -21,5 +21,5 @@
  * WrappedInterpreter
  */
 public interface WrappedInterpreter {
-  public Interpreter getInnerInterpreter();
+  Interpreter getInnerInterpreter();
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java
Patch:
@@ -10,9 +10,9 @@
  */
 public interface RemoteEventClientWrapper {
 
-  public void onMetaInfosReceived(Map<String, String> infos);
+  void onMetaInfosReceived(Map<String, String> infos);
 
-  public void onParaInfosReceived(String noteId, String paragraphId,
+  void onParaInfosReceived(String noteId, String paragraphId,
                                             Map<String, String> infos);
 
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.zeppelin.interpreter.remote;
 
 import org.apache.zeppelin.interpreter.InterpreterContextRunner;
-import org.apache.zeppelin.interpreter.InterpreterException;
 
 /**
  *

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java
Patch:
@@ -21,9 +21,9 @@
  * TODO(moon) : add description.
  */
 public interface JobListener {
-  public void onProgressUpdate(Job job, int progress);
+  void onProgressUpdate(Job job, int progress);
 
-  public void beforeStatusChange(Job job, Job.Status before, Job.Status after);
+  void beforeStatusChange(Job job, Job.Status before, Job.Status after);
 
-  public void afterStatusChange(Job job, Job.Status before, Job.Status after);
+  void afterStatusChange(Job job, Job.Status before, Job.Status after);
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java
Patch:
@@ -60,6 +60,8 @@ public void run() {
         }
         Thread.sleep(intervalMs);
       }
-    } catch (InterruptedException ignored) {}
+    } catch (InterruptedException ignored) {
+      // just ignore this exception
+    }
   }
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ParallelScheduler.java
Patch:
@@ -136,7 +136,7 @@ private class JobRunner implements Runnable {
     private Scheduler scheduler;
     private Job job;
 
-    public JobRunner(Scheduler scheduler, Job job) {
+    JobRunner(Scheduler scheduler, Job job) {
       this.scheduler = scheduler;
       this.job = job;
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java
Patch:
@@ -21,7 +21,7 @@
  * TODO(moon) : add description.
  */
 public interface SchedulerListener {
-  public void jobStarted(Scheduler scheduler, Job job);
+  void jobStarted(Scheduler scheduler, Job job);
 
-  public void jobFinished(Scheduler scheduler, Job job);
+  void jobFinished(Scheduler scheduler, Job job);
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/ColumnDef.java
Patch:
@@ -25,7 +25,7 @@ public class ColumnDef implements Serializable {
   /**
    * Type
    */
-  public static enum TYPE {
+  public enum TYPE {
     STRING,
     LONG,
     INT

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableData.java
Patch:
@@ -26,12 +26,12 @@ public interface TableData {
    * Get column definitions
    * @return
    */
-  public ColumnDef [] columns();
+  ColumnDef [] columns();
 
   /**
    * Get row iterator
    * @param
    * @return
    */
-  public Iterator<Row> rows();
+  Iterator<Row> rows();
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java
Patch:
@@ -27,8 +27,8 @@
  */
 public class IdHashes {
   private static final char[] DICTIONARY = new char[] {'1', '2', '3', '4', '5', '6', '7', '8', '9',
-    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
-    'W', 'X', 'Y', 'Z'};
+      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',
+      'W', 'X', 'Y', 'Z'};
 
   /**
    * encodes the given string into the base of the dictionary provided in the constructor.

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/HeliumPackageTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.util.Map;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 public class HeliumPackageTest {
 
@@ -71,10 +71,10 @@ public void parseConfig() {
     Map<String, Object> config = p.getConfig();
     Map<String, Object> accessToken = (Map<String, Object>) config.get("access-token");
 
-    assertEquals((String) accessToken.get("type"),"string");
+    assertEquals((String) accessToken.get("type"), "string");
     assertEquals((String) accessToken.get("description"),
         "access token for Google Translation API");
     assertEquals((String) accessToken.get("defaultValue"),
         "EXAMPLE-TOKEN");
   }
-}
\ No newline at end of file
+}

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/MockApplication1.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.helium;
 
-import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.resource.ResourceSet;
 
 /**

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -294,7 +294,6 @@ public boolean accept(Path entry) throws IOException {
             }
           })) {
         String interpreterDirString = interpreterDir.toString();
-
         /**
          * Register interpreter by the following ordering
          * 1. Register it from path {ZEPPELIN_HOME}/interpreter/{interpreter_name}/
@@ -304,7 +303,7 @@ public boolean accept(Path entry) throws IOException {
          */
         if (!registerInterpreterFromPath(interpreterDirString, interpreterJson)) {
           if (!registerInterpreterFromResource(cl, interpreterDirString, interpreterJson)) {
-            LOGGER.warn("No interpreter-setting.json found in " + interpreterDirPath);
+            LOGGER.warn("No interpreter-setting.json found in " + interpreterDirString);
           }
         }
       }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/recovery/FileSystemRecoveryStorage.java
Patch:
@@ -69,7 +69,9 @@ public FileSystemRecoveryStorage(ZeppelinConfiguration zConf,
     super(zConf);
     this.interpreterSettingManager = interpreterSettingManager;
     this.zConf = zConf;
-    this.fs = FileSystemStorage.get(zConf);
+    this.fs = new FileSystemStorage(zConf, zConf.getRecoveryDir());
+    LOGGER.info("Creating FileSystem: " + this.fs.getFs().getClass().getName() +
+        " for Zeppelin Recovery.");
     this.recoveryDir = this.fs.makeQualified(new Path(zConf.getRecoveryDir()));
     LOGGER.info("Using folder {} to store recovery data", recoveryDir);
     this.fs.tryMkDir(recoveryDir);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/FileSystemNotebookRepo.java
Patch:
@@ -42,11 +42,12 @@ public class FileSystemNotebookRepo implements NotebookRepo {
   private Path notebookDir;
 
   public FileSystemNotebookRepo(ZeppelinConfiguration zConf) throws IOException {
-    this.fs = FileSystemStorage.get(zConf);
+    this.fs = new FileSystemStorage(zConf, zConf.getNotebookDir());
+    LOGGER.info("Creating FileSystem: " + this.fs.getFs().getClass().getName() +
+        " for Zeppelin Notebook.");
     this.notebookDir = this.fs.makeQualified(new Path(zConf.getNotebookDir()));
     LOGGER.info("Using folder {} to store notebook", notebookDir);
     this.fs.tryMkDir(notebookDir);
-
   }
 
   @Override

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -44,6 +44,7 @@
 import org.apache.commons.exec.PumpStreamHandler;
 import org.apache.commons.exec.environment.EnvironmentUtils;
 import org.apache.commons.io.IOUtils;
+import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.display.GUI;
 import org.apache.zeppelin.interpreter.*;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
@@ -228,7 +229,7 @@ public void open() throws InterpreterException {
         getInterpreterGroup().getInterpreterHookRegistry(),
         Integer.parseInt(getProperty("zeppelin.python.maxResult", "1000")));
     if (getProperty("zeppelin.python.useIPython", "true").equals("true") &&
-      iPythonInterpreter.checkIPythonPrerequisite()) {
+        StringUtils.isEmpty(iPythonInterpreter.checkIPythonPrerequisite(getPythonBindPath()))) {
       try {
         iPythonInterpreter.open();
         if (InterpreterContext.get() != null) {

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -116,7 +116,8 @@ public void open() throws InterpreterException {
     // try IPySparkInterpreter first
     iPySparkInterpreter = getIPySparkInterpreter();
     if (getProperty("zeppelin.pyspark.useIPython", "true").equals("true") &&
-        iPySparkInterpreter.checkIPythonPrerequisite()) {
+        StringUtils.isEmpty(
+            iPySparkInterpreter.checkIPythonPrerequisite(getPythonExec(getProperties())))) {
       try {
         iPySparkInterpreter.open();
         if (InterpreterContext.get() != null) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -39,6 +39,7 @@ public void testGetFactory() throws IOException {
     assertTrue(interpreterFactory.getInterpreter("user1", "note1", "") instanceof RemoteInterpreter);
     RemoteInterpreter remoteInterpreter = (RemoteInterpreter) interpreterFactory.getInterpreter("user1", "note1", "");
     // EchoInterpreter is the default interpreter because mock1 is the default interpreter group
+
     assertEquals(EchoInterpreter.class.getName(), remoteInterpreter.getClassName());
 
     assertTrue(interpreterFactory.getInterpreter("user1", "note1", "test") instanceof RemoteInterpreter);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/user/CredentialsTest.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.apache.zeppelin.user;
 
-import static org.junit.Assert.*;
-
 import org.junit.Test;
 
 import java.io.IOException;
 
+import static org.junit.Assert.assertEquals;
+
 public class CredentialsTest {
 
   @Test

File: zeppelin-server/src/main/java/org/apache/zeppelin/utils/SecurityUtils.java
Patch:
@@ -41,7 +41,6 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.realm.ActiveDirectoryGroupRealm;
 import org.apache.zeppelin.realm.LdapRealm;
-import org.mortbay.log.Log;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: spark/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -162,7 +162,7 @@ public void run() {
     // completions
     List<InterpreterCompletion> completions = iPySparkInterpreter.completion("sc.ran", 6, getInterpreterContext());
     assertEquals(1, completions.size());
-    assertEquals("sc.range", completions.get(0).getValue());
+    assertEquals("range", completions.get(0).getValue());
 
     // pyspark streaming
     context = getInterpreterContext();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -973,7 +973,7 @@ public void refreshCron(String id) {
     }
   }
 
-  private void removeCron(String id) {
+  public void removeCron(String id) {
     try {
       quartzSched.deleteJob(new JobKey(id, "note"));
     } catch (SchedulerException e) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/launcher/InterpreterClient.java
Patch:
@@ -26,7 +26,7 @@ public interface InterpreterClient {
 
   String getInterpreterSettingName();
 
-  void start(String userName, Boolean isUserImpersonate);
+  void start(String userName);
 
   void stop();
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -699,13 +699,14 @@ List<Interpreter> createInterpreters(String user, String interpreterGroupId, Str
   }
 
   synchronized RemoteInterpreterProcess createInterpreterProcess(String interpreterGroupId,
+                                                                 String userName,
                                                                  Properties properties)
       throws IOException {
     if (launcher == null) {
       createLauncher();
     }
     InterpreterLaunchContext launchContext = new
-        InterpreterLaunchContext(properties, option, interpreterRunner,
+        InterpreterLaunchContext(properties, option, interpreterRunner, userName,
         interpreterGroupId, id, group, name);
     RemoteInterpreterProcess process = (RemoteInterpreterProcess) launcher.launch(launchContext);
     process.setRemoteInterpreterEventPoller(

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java
Patch:
@@ -60,10 +60,11 @@ public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess(Strin
       throws IOException {
     if (remoteInterpreterProcess == null) {
       LOGGER.info("Create InterpreterProcess for InterpreterGroup: " + getId());
-      remoteInterpreterProcess = interpreterSetting.createInterpreterProcess(id, properties);
+      remoteInterpreterProcess = interpreterSetting.createInterpreterProcess(id, userName,
+          properties);
       synchronized (remoteInterpreterProcess) {
         if (!remoteInterpreterProcess.isRunning()) {
-          remoteInterpreterProcess.start(userName, false);
+          remoteInterpreterProcess.start(userName);
           remoteInterpreterProcess.getRemoteInterpreterEventPoller()
               .setInterpreterProcess(remoteInterpreterProcess);
           remoteInterpreterProcess.getRemoteInterpreterEventPoller().setInterpreterGroup(this);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java
Patch:
@@ -58,7 +58,7 @@ public String getInterpreterSettingName() {
   }
 
   @Override
-  public void start(String userName, Boolean isUserImpersonate) {
+  public void start(String userName) {
     // assume process is externally managed. nothing to do
   }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncherTest.java
Patch:
@@ -38,7 +38,8 @@ public void testLauncher() throws IOException {
     properties.setProperty("ENV_1", "VALUE_1");
     properties.setProperty("property_1", "value_1");
     InterpreterOption option = new InterpreterOption();
-    InterpreterLaunchContext context = new InterpreterLaunchContext(properties, option, null, "intpGroupId", "groupId", "groupName", "name");
+    option.setUserImpersonate(true);
+    InterpreterLaunchContext context = new InterpreterLaunchContext(properties, option, null, "user1", "intpGroupId", "groupId", "groupName", "name");
     InterpreterClient client = launcher.launch(context);
     assertTrue( client instanceof RemoteInterpreterManagedProcess);
     RemoteInterpreterManagedProcess interpreterProcess = (RemoteInterpreterManagedProcess) client;
@@ -48,6 +49,7 @@ public void testLauncher() throws IOException {
     assertEquals(zConf.getInterpreterRemoteRunnerPath(), interpreterProcess.getInterpreterRunner());
     assertEquals(1, interpreterProcess.getEnv().size());
     assertEquals("VALUE_1", interpreterProcess.getEnv().get("ENV_1"));
+    assertEquals(true, interpreterProcess.isUserImpersonated());
   }
 
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/SparkInterpreterLauncher.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
+import org.apache.zeppelin.interpreter.recovery.RecoveryStorage;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -35,8 +36,8 @@ public class SparkInterpreterLauncher extends ShellScriptLauncher {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(SparkInterpreterLauncher.class);
 
-  public SparkInterpreterLauncher(ZeppelinConfiguration zConf) {
-    super(zConf);
+  public SparkInterpreterLauncher(ZeppelinConfiguration zConf, RecoveryStorage recoveryStorage) {
+    super(zConf, recoveryStorage);
   }
 
   @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java
Patch:
@@ -214,7 +214,7 @@ public void stop() {
       callbackServer.stop();
     }
     if (isRunning()) {
-      logger.info("kill interpreter process");
+      logger.info("Kill interpreter process");
       try {
         callRemoteFunction(new RemoteFunction<Void>() {
           @Override
@@ -263,7 +263,6 @@ public String getInterpreterDir() {
     return interpreterDir;
   }
 
-  @VisibleForTesting
   public String getInterpreterSettingName() {
     return interpreterSettingName;
   }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -33,7 +33,7 @@ public abstract class AbstractInterpreterTest {
   protected File interpreterDir;
   protected File confDir;
   protected File notebookDir;
-  protected ZeppelinConfiguration conf = new ZeppelinConfiguration();
+  protected ZeppelinConfiguration conf;
 
   @Before
   public void setUp() throws Exception {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -351,6 +351,7 @@ public boolean execute(boolean blocking) {
       setStatus(Job.Status.ERROR);
       throw intpException;
     }
+    setStatus(Status.READY);
     if (getConfig().get("enabled") == null || (Boolean) getConfig().get("enabled")) {
       setAuthenticationInfo(getAuthenticationInfo());
       interpreter.getScheduler().submit(this);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroupTest.java
Patch:
@@ -62,7 +62,7 @@ public void testInterpreterGroup() {
 
     // create session_1
     List<Interpreter> interpreters = interpreterGroup.getOrCreateSession("user1", "session_1");
-    assertEquals(2, interpreters.size());
+    assertEquals(3, interpreters.size());
     assertEquals(EchoInterpreter.class.getName(), interpreters.get(0).getClassName());
     assertEquals(DoubleEchoInterpreter.class.getName(), interpreters.get(1).getClassName());
     assertEquals(1, interpreterGroup.getSessionNum());
@@ -73,7 +73,7 @@ public void testInterpreterGroup() {
 
     // create session_2
     List<Interpreter> interpreters2 = interpreterGroup.getOrCreateSession("user1", "session_2");
-    assertEquals(2, interpreters2.size());
+    assertEquals(3, interpreters2.size());
     assertEquals(EchoInterpreter.class.getName(), interpreters2.get(0).getClassName());
     assertEquals(DoubleEchoInterpreter.class.getName(), interpreters2.get(1).getClassName());
     assertEquals(2, interpreterGroup.getSessionNum());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -346,8 +346,7 @@ public List<InterpreterCompletion> completion(final String buf, final int cursor
                                                 final InterpreterContext interpreterContext)
       throws InterpreterException {
     if (!isOpened) {
-      LOGGER.warn("completion is called when RemoterInterpreter is not opened for " + className);
-      return new ArrayList<>();
+      open();
     }
     RemoteInterpreterProcess interpreterProcess = null;
     try {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/ParagraphTest.java
Patch:
@@ -271,7 +271,6 @@ public void returnUnchangedResultsWithDifferentUser() throws Throwable {
   @Test
   public void testCursorPosition() {
     Paragraph paragraph = spy(new Paragraph());
-    doReturn(null).when(paragraph).getIntpText();
     // left = buffer, middle = cursor position into source code, right = cursor position after parse
     List<Triple<String, Integer, Integer>> dataSet = Arrays.asList(
         Triple.of("%jdbc schema.", 13, 7),
@@ -294,7 +293,8 @@ public void testCursorPosition() {
     );
 
     for (Triple<String, Integer, Integer> data : dataSet) {
-      Integer actual = paragraph.calculateCursorPosition(data.getLeft(), data.getLeft().trim(), data.getMiddle());
+      paragraph.setText(data.getLeft());
+      Integer actual = paragraph.calculateCursorPosition(data.getLeft(), data.getMiddle());
       assertEquals(data.getRight(), actual);
     }
   }

File: elasticsearch/src/test/java/org/apache/zeppelin/elasticsearch/ElasticsearchInterpreterTest.java
Patch:
@@ -164,8 +164,8 @@ public static void clean() {
 
   private InterpreterContext buildContext(String noteAndParagraphId) {
     final AngularObjectRegistry angularObjReg = new AngularObjectRegistry("elasticsearch", null);
-    return new InterpreterContext(noteAndParagraphId, noteAndParagraphId, null, null, null, null, null,
-        null, angularObjReg , null, null, null);
+    return new InterpreterContext(noteAndParagraphId, noteAndParagraphId, null, null, null, null,
+        null, null, null, angularObjReg , null, null, null);
   }
 
   @Theory

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public static void setUp() {
     Properties p = new Properties();
     flink = new FlinkInterpreter(p);
     flink.open();
-    context = new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null);
+    context = new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null, null);
   }
 
   @AfterClass

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public class IgniteInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-      new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null);
+      new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null, null);
 
   private IgniteInterpreter intp;
   private Ignite ignite;

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java
Patch:
@@ -44,7 +44,7 @@ public class IgniteSqlInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-      new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null);
+      new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null, null);
 
   private Ignite ignite;
   private IgniteSqlInterpreter intp;

File: neo4j/src/test/java/org/apache/zeppelin/graph/neo4j/Neo4jCypherInterpreterTest.java
Patch:
@@ -93,6 +93,7 @@ public void setUpZeppelin() {
             new AuthenticationInfo(),
             new HashMap<String, Object>(),
             new GUI(),
+            new GUI(),
             new AngularObjectRegistry(new InterpreterGroup().getId(), null),
             new LocalResourcePool("id"),
             new LinkedList<InterpreterContextRunner>(),

File: pig/src/test/java/org/apache/zeppelin/pig/PigInterpreterSparkTest.java
Patch:
@@ -44,8 +44,8 @@ public void setUpSpark(boolean includeJobStats) {
     properties.put("zeppelin.pig.includeJobStats", includeJobStats + "");
     pigInterpreter = new PigInterpreter(properties);
     pigInterpreter.open();
-    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null, null,
-        null, null);
+    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null,
+        null, null, null, null);
 
   }
   @After

File: pig/src/test/java/org/apache/zeppelin/pig/PigInterpreterTest.java
Patch:
@@ -47,8 +47,8 @@ private void setUpLocal(boolean includeJobStats) {
     properties.put("zeppelin.pig.includeJobStats", includeJobStats + "");
     pigInterpreter = new PigInterpreter(properties);
     pigInterpreter.open();
-    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null, null,
-            null, null);
+    context = new InterpreterContext(null, "paragraph_id", null, null, null,
+        null, null, null, null, null, null,null, null);
   }
 
   @After

File: pig/src/test/java/org/apache/zeppelin/pig/PigInterpreterTezTest.java
Patch:
@@ -48,8 +48,8 @@ public void setUpTez(boolean includeJobStats) {
     properties.put("tez.queue.name", "test");
     pigInterpreter = new PigInterpreter(properties);
     pigInterpreter.open();
-    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null, null,
-        null, null);
+    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null,
+        null, null, null, null);
 
   }
   @After

File: pig/src/test/java/org/apache/zeppelin/pig/PigQueryInterpreterTest.java
Patch:
@@ -66,8 +66,8 @@ public void setUp() throws InterpreterException {
     pigInterpreter.open();
     pigQueryInterpreter.open();
 
-    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null, null,
-            null, null);
+    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null,
+        null, null, null, null);
   }
 
   @After

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -303,6 +303,7 @@ public void close() {
   @Override
   public InterpreterResult interpret(String st, InterpreterContext context) {
     zeppelinContext.setGui(context.getGui());
+    zeppelinContext.setNoteGui(context.getNoteGui());
     interpreterOutput.setInterpreterOutput(context.out);
     ExecuteResponse response =
         ipythonClient.stream_execute(ExecuteRequest.newBuilder().setCode(st).build(),

File: python/src/test/java/org/apache/zeppelin/python/IPythonInterpreterTest.java
Patch:
@@ -411,6 +411,7 @@ private static InterpreterContext getInterpreterContext() {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         null,
         null,
         null,

File: python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java
Patch:
@@ -131,6 +131,7 @@ private InterpreterContext getInterpreterContext() {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         null,
         null,
         null,

File: python/src/test/java/org/apache/zeppelin/python/PythonDockerInterpreterTest.java
Patch:
@@ -86,6 +86,7 @@ private InterpreterContext getInterpreterContext() {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         null,
         null,
         null,

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterMatplotlibTest.java
Patch:
@@ -71,6 +71,7 @@ public void setUp() throws Exception {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterPandasSqlTest.java
Patch:
@@ -83,6 +83,7 @@ public void setUp() throws Exception {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterTest.java
Patch:
@@ -83,6 +83,7 @@ public void beforeTest() throws IOException, InterpreterException {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         new AngularObjectRegistry(group.getId(), null),
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),

File: scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java
Patch:
@@ -65,7 +65,7 @@ public void setUp() throws Exception {
 
     InterpreterGroup intpGroup = new InterpreterGroup();
     context = new InterpreterContext("note", "id", null, "title", "text", new AuthenticationInfo(),
-        new HashMap<String, Object>(), new GUI(), new AngularObjectRegistry(
+        new HashMap<String, Object>(), new GUI(), new GUI(), new AngularObjectRegistry(
             intpGroup.getId(), null), null,
         new LinkedList<InterpreterContextRunner>(), null);
   }

File: scio/src/test/java/org/apache/zeppelin/scio/ScioInterpreterTest.java
Patch:
@@ -44,6 +44,7 @@ private InterpreterContext getNewContext() {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),

File: shell/src/test/java/org/apache/zeppelin/shell/ShellInterpreterTest.java
Patch:
@@ -41,7 +41,8 @@ public void setUp() throws Exception {
     p.setProperty("shell.command.timeout.millisecs", "2000");
     shell = new ShellInterpreter(p);
 
-    context = new InterpreterContext("", "1", null, "", "", null, null, null, null, null, null, null);
+    context = new InterpreterContext("", "1", null, "", "", null, null, null, null, null, null,
+        null, null);
     shell.open();
   }
 

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -464,6 +464,7 @@ public InterpreterResult interpret(String st, InterpreterContext context)
     SparkZeppelinContext __zeppelin__ = sparkInterpreter.getZeppelinContext();
     __zeppelin__.setInterpreterContext(context);
     __zeppelin__.setGui(context.getGui());
+    __zeppelin__.setNoteGui(context.getNoteGui());
     pythonInterpretRequest = new PythonInterpretRequest(st, jobGroup, jobDesc);
     statementOutput = null;
 

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -1144,6 +1144,7 @@ public InterpreterResult interpret(String line, InterpreterContext context) {
   public InterpreterResult interpret(String[] lines, InterpreterContext context) {
     synchronized (this) {
       z.setGui(context.getGui());
+      z.setNoteGui(context.getNoteGui());
       String jobDesc = "Started by: " + Utils.getUserName(context.getAuthenticationInfo());
       sc.setJobGroup(Utils.buildJobGroupId(context), jobDesc, false);
       InterpreterResult r = interpretInput(lines, context);

File: spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
Patch:
@@ -64,7 +64,7 @@ public void setUp() throws Exception {
     dep.setInterpreterGroup(intpGroup);
 
     context = new InterpreterContext("note", "id", null, "title", "text", new AuthenticationInfo(),
-        new HashMap<String, Object>(), new GUI(),
+        new HashMap<String, Object>(), new GUI(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         null,
         new LinkedList<InterpreterContextRunner>(), null);

File: spark/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -197,6 +197,7 @@ private InterpreterContext getInterpreterContext() {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         null,
         null,
         null,

File: spark/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterMatplotlibTest.java
Patch:
@@ -115,6 +115,7 @@ public static void setUp() throws Exception {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),

File: spark/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterTest.java
Patch:
@@ -86,6 +86,7 @@ public static void setUp() throws Exception {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),

File: spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -109,6 +109,7 @@ public void onMetaInfosReceived(Map<String, String> infos) {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),
@@ -335,6 +336,7 @@ public void testParagraphUrls() {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),

File: spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -68,7 +68,7 @@ public static void setUp() throws Exception {
     sql.open();
 
     context = new InterpreterContext("note", "id", null, "title", "text", new AuthenticationInfo(),
-        new HashMap<String, Object>(), new GUI(),
+        new HashMap<String, Object>(), new GUI(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(), new InterpreterOutput(null));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/CallbackInfo.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-6-17")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
 public class CallbackInfo implements org.apache.thrift.TBase<CallbackInfo, CallbackInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CallbackInfo> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CallbackInfo");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterCallbackService.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-6-17")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
 public class RemoteInterpreterCallbackService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-10-22")
 public class ZeppelinServerResourceParagraphRunner implements org.apache.thrift.TBase<ZeppelinServerResourceParagraphRunner, ZeppelinServerResourceParagraphRunner._Fields>, java.io.Serializable, Cloneable, Comparable<ZeppelinServerResourceParagraphRunner> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZeppelinServerResourceParagraphRunner");
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java
Patch:
@@ -27,7 +27,7 @@ public class InterpreterContextTest {
   public void testThreadLocal() {
     assertNull(InterpreterContext.get());
 
-    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null));
+    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null, null));
     assertNotNull(InterpreterContext.get());
 
     InterpreterContext.remove();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterTest.java
Patch:
@@ -70,6 +70,7 @@ public void testPropertyWithReplacedContextFields() {
         null,
         null,
         null,
+        null,
         null));
     Properties p = new Properties();
     p.put("p1", "replName #{noteId}, #{paragraphTitle}, #{paragraphId}, #{paragraphText}, #{replName}, #{noteId}, #{user}," +

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/LazyOpenInterpreterTest.java
Patch:
@@ -36,7 +36,7 @@ public void isOpenTest() throws InterpreterException {
 
     assertFalse("Interpreter is not open", lazyOpenInterpreter.isOpen());
     InterpreterContext interpreterContext =
-        new InterpreterContext("note", "id", null, "title", "text", null, null, null, null, null, null, null);
+        new InterpreterContext("note", "id", null, "title", "text", null, null, null, null, null, null, null, null);
     lazyOpenInterpreter.interpret("intp 1", interpreterContext);
     assertTrue("Interpeter is open", lazyOpenInterpreter.isOpen());
   }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/lifecycle/TimeoutLifecycleManagerTest.java
Patch:
@@ -56,7 +56,7 @@ public void testTimeout_1() throws InterpreterException, InterruptedException, I
     RemoteInterpreter remoteInterpreter = (RemoteInterpreter) interpreterFactory.getInterpreter("user1", "note1", "test.echo");
     InterpreterContext context = new InterpreterContext("noteId", "paragraphId", "repl",
         "title", "text", AuthenticationInfo.ANONYMOUS, new HashMap<String, Object>(), new GUI(),
-        null, null, new ArrayList<InterpreterContextRunner>(), null);
+        new GUI(), null, null, new ArrayList<InterpreterContextRunner>(), null);
     remoteInterpreter.interpret("hello world", context);
     assertTrue(remoteInterpreter.isOpened());
     InterpreterSetting interpreterSetting = interpreterSettingManager.getInterpreterSettingByName("test");
@@ -95,7 +95,7 @@ public Map<String, Object> info() {
       protected Object jobRun() throws Throwable {
         InterpreterContext context = new InterpreterContext("noteId", "paragraphId", "repl",
             "title", "text", AuthenticationInfo.ANONYMOUS, new HashMap<String, Object>(), new GUI(),
-            null, null, new ArrayList<InterpreterContextRunner>(), null);
+            new GUI(), null, null, new ArrayList<InterpreterContextRunner>(), null);
         return remoteInterpreter.interpret("100000", context);
       }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -86,6 +86,7 @@ public void setUp() throws Exception {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         new AngularObjectRegistry(intp.getInterpreterGroup().getId(), null),
         new LocalResourcePool("pool1"),
         new LinkedList<InterpreterContextRunner>(), null);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java
Patch:
@@ -76,6 +76,7 @@ private InterpreterContext createInterpreterContext() {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         null,
         null,
         new LinkedList<InterpreterContextRunner>(), null);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java
Patch:
@@ -61,6 +61,7 @@ public void setUp() throws Exception {
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
+        new GUI(),
         null,
         null,
         new LinkedList<InterpreterContextRunner>(),

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java
Patch:
@@ -121,6 +121,7 @@ protected Object jobRun() throws Throwable {
             new AuthenticationInfo(),
             new HashMap<String, Object>(),
             new GUI(),
+            new GUI(),
             null,
             new LocalResourcePool("pool1"),
             new LinkedList<InterpreterContextRunner>(), null));
@@ -182,6 +183,7 @@ public void testAbortOnPending() throws Exception {
           new AuthenticationInfo(),
           new HashMap<String, Object>(),
           new GUI(),
+          new GUI(),
           null,
           new LocalResourcePool("pool1"),
           new LinkedList<InterpreterContextRunner>(), null);
@@ -236,6 +238,7 @@ public void setResult(Object results) {
           new AuthenticationInfo(),
           new HashMap<String, Object>(),
           new GUI(),
+          new GUI(),
           null,
           new LocalResourcePool("pool1"),
           new LinkedList<InterpreterContextRunner>(), null);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -500,7 +500,7 @@ public boolean isAnonymousAllowed() {
     return getBoolean(ConfVars.ZEPPELIN_ANONYMOUS_ALLOWED);
   }
 
-  public boolean isNotebokPublic() {
+  public boolean isNotebookPublic() {
     return getBoolean(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC);
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java
Patch:
@@ -158,7 +158,7 @@ private void saveToFile() {
   }
   
   public boolean isPublic() {
-    return conf.isNotebokPublic();
+    return conf.isNotebookPublic();
   }
 
   private Set<String> validateUser(Set<String> users) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/conf/ZeppelinConfigurationTest.java
Patch:
@@ -94,7 +94,7 @@ public void getNotebookDirTest() throws ConfigurationException {
     public void isNotebookPublicTest() throws ConfigurationException {
       
       ZeppelinConfiguration conf  = new ZeppelinConfiguration(this.getClass().getResource("/zeppelin-site.xml"));
-      boolean isIt = conf.isNotebokPublic();
+      boolean isIt = conf.isNotebookPublic();
       assertTrue(isIt);
     }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -1130,7 +1130,7 @@ public void testPublicPrivateNewNote() throws IOException, SchedulerException {
     HashSet<String> user2 = Sets.newHashSet("user2");
     
     // case of public note
-    assertTrue(conf.isNotebokPublic());
+    assertTrue(conf.isNotebookPublic());
     assertTrue(notebookAuthorization.isPublic());
     
     List<Note> notes1 = notebook.getAllNotes(user1);
@@ -1158,7 +1158,7 @@ public void testPublicPrivateNewNote() throws IOException, SchedulerException {
     // case of private note
     System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC.getVarName(), "false");
     ZeppelinConfiguration conf2 = ZeppelinConfiguration.create();
-    assertFalse(conf2.isNotebokPublic());
+    assertFalse(conf2.isNotebookPublic());
     // notebook authorization reads from conf, so no need to re-initilize
     assertFalse(notebookAuthorization.isPublic());
     

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -378,7 +378,8 @@ public boolean execute(boolean blocking) {
 
   @Override
   protected Object jobRun() throws Throwable {
-    logger.info("Run paragraph {} using {} ", getId(), intpText);
+    logger.info("Run paragraph [paragraph_id: {}, interpreter: {}, note_id: {}, user: {}]",
+            getId(), intpText, note.getId(), authenticationInfo.getUser());
     this.interpreter = getBindedInterpreter();
     if (this.interpreter == null) {
       logger.error("Can not find interpreter name " + intpText);

File: helium-dev/src/main/java/org/apache/zeppelin/helium/ZeppelinDevServer.java
Patch:
@@ -39,7 +39,7 @@ public class ZeppelinDevServer extends
   private DevInterpreter interpreter = null;
   private InterpreterOutput out;
   public ZeppelinDevServer(int port) throws TException, IOException {
-    super(null, port);
+    super(null, port, ":");
   }
 
   @Override

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServerTest.java
Patch:
@@ -43,7 +43,7 @@ public void tearDown() throws Exception {
   @Test
   public void testStartStop() throws InterruptedException, IOException, TException {
     RemoteInterpreterServer server = new RemoteInterpreterServer("localhost",
-        RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces(), true);
+        RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces(), ":", true);
     assertEquals(false, server.isRunning());
 
     server.start();
@@ -91,7 +91,7 @@ public void run() {
   @Test
   public void testStartStopWithQueuedEvents() throws InterruptedException, IOException, TException {
     RemoteInterpreterServer server = new RemoteInterpreterServer("localhost",
-        RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces(), true);
+        RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces(), ":", true);
     assertEquals(false, server.isRunning());
 
     server.start();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/launcher/ShellScriptLauncher.java
Patch:
@@ -64,7 +64,7 @@ public InterpreterClient launch(InterpreterLaunchContext context) {
           + context.getInterpreterSettingId();
       return new RemoteInterpreterManagedProcess(
           runner != null ? runner.getPath() : zConf.getInterpreterRemoteRunnerPath(),
-          zConf.getCallbackPortRange(),
+          zConf.getCallbackPortRange(),  zConf.getInterpreterPortRange(),
           zConf.getInterpreterDir() + "/" + groupName, localRepoPath,
           buildEnvFromProperties(), connectTimeout, name);
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -671,7 +671,7 @@ synchronized RemoteInterpreterProcess createInterpreterProcess() throws IOExcept
       createLauncher();
     }
     InterpreterLaunchContext launchContext = new
-        InterpreterLaunchContext(getJavaProperties(), option, interpreterRunner, id, group);
+        InterpreterLaunchContext(getJavaProperties(), option, interpreterRunner, id, group, name);
     RemoteInterpreterProcess process = (RemoteInterpreterProcess) launcher.launch(launchContext);
     process.setRemoteInterpreterEventPoller(
         new RemoteInterpreterEventPoller(remoteInterpreterProcessListener, appEventListener));

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/MiniHadoopCluster.java
Patch:
@@ -44,6 +44,7 @@ public void start() throws IOException {
 
     // start MiniYarnCluster
     YarnConfiguration baseConfig = new YarnConfiguration(hadoopConf);
+    baseConfig.set("yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage", "95");
     this.yarnCluster = new MiniYARNCluster(getClass().getName(), 2,
         1, 1);
     yarnCluster.init(baseConfig);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -188,11 +188,9 @@ public void setText(String newText) {
       if (matcher.matches()) {
         String headingSpace = matcher.group(1);
         this.intpText = matcher.group(2);
-        this.interpreter = interpreterFactory.getInterpreter(user, note.getId(), intpText);
         this.scriptText = this.text.substring(headingSpace.length() + intpText.length() + 1).trim();
       } else {
         this.intpText = "";
-        this.interpreter = interpreterFactory.getInterpreter(user, note.getId(), "");
         this.scriptText = this.text;
       }
     }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java
Patch:
@@ -87,7 +87,7 @@ public void runNormalTest() {
 
     ArgumentCaptor<Paragraph> pCaptor = ArgumentCaptor.forClass(Paragraph.class);
     verify(scheduler, only()).submit(pCaptor.capture());
-    verify(interpreterFactory, times(2)).getInterpreter(anyString(), anyString(), eq("spark"));
+    verify(interpreterFactory, times(1)).getInterpreter(anyString(), anyString(), eq("spark"));
 
     assertEquals("Paragraph text", pText, pCaptor.getValue().getText());
   }

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java
Patch:
@@ -251,7 +251,7 @@ public void cancel(InterpreterContext context) {
 
   @Override
   public FormType getFormType() {
-    return FormType.SIMPLE;
+    return FormType.NATIVE;
   }
 
   @Override

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1515,7 +1515,7 @@ private InterpreterGroup findInterpreterGroupForParagraph(Note note, String para
     if (paragraph == null) {
       throw new IllegalArgumentException("Unknown paragraph with id : " + paragraphId);
     }
-    return paragraph.getCurrentRepl().getInterpreterGroup();
+    return paragraph.getBindedInterpreter().getInterpreterGroup();
   }
 
   private void pushAngularObjectToRemoteRegistry(String noteId, String paragraphId, String varName,
@@ -1780,7 +1780,7 @@ private void addNewParagraphIfLastParagraphIsExecuted(Note note, Paragraph p) {
     // if it's the last paragraph and not empty, let's add a new one
     boolean isTheLastParagraph = note.isLastParagraph(p.getId());
     if (!(Strings.isNullOrEmpty(p.getText()) ||
-        p.getText().trim().equals(p.getMagic())) &&
+        Strings.isNullOrEmpty(p.getScriptText())) &&
         isTheLastParagraph) {
       Paragraph newPara = note.addNewParagraph(p.getAuthenticationInfo());
       broadcastNewParagraph(note, newPara);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/Helium.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.Interpreter;
-import org.apache.zeppelin.interpreter.InterpreterGroup;
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
 import org.apache.zeppelin.interpreter.ManagedInterpreterGroup;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
@@ -341,7 +340,7 @@ private Map<String, Object> getPackagePersistedConfig(String artifact) {
   public HeliumPackageSuggestion suggestApp(Paragraph paragraph) {
     HeliumPackageSuggestion suggestion = new HeliumPackageSuggestion();
 
-    Interpreter intp = paragraph.getCurrentRepl();
+    Interpreter intp = paragraph.getBindedInterpreter();
     if (intp == null) {
       return suggestion;
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java
Patch:
@@ -56,7 +56,7 @@ public InterpreterSetting getInterpreterSetting() {
 
   public synchronized RemoteInterpreterProcess getOrCreateInterpreterProcess() throws IOException {
     if (remoteInterpreterProcess == null) {
-      LOGGER.info("Create InterperterProcess for InterpreterGroup: " + getId());
+      LOGGER.info("Create InterpreterProcess for InterpreterGroup: " + getId());
       remoteInterpreterProcess = interpreterSetting.createInterpreterProcess();
     }
     return remoteInterpreterProcess;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -162,7 +162,7 @@ public Void call(Client client) throws Exception {
   private void internal_create() throws IOException {
     synchronized (this) {
       if (!isCreated) {
-        RemoteInterpreterProcess interpreterProcess = getOrCreateInterpreterProcess();
+        this.interpreterProcess = getOrCreateInterpreterProcess();
         interpreterProcess.callRemoteFunction(new RemoteInterpreterProcess.RemoteFunction<Void>() {
           @Override
           public Void call(Client client) throws Exception {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -168,8 +168,6 @@ private Note getNote(FileObject noteDir) throws IOException {
     ins.close();
 
     Note note = Note.fromJson(json);
-//    note.setReplLoader(replLoader);
-//    note.jobListenerFactory = jobListenerFactory;
 
     for (Paragraph p : note.getParagraphs()) {
       if (p.getStatus() == Status.PENDING || p.getStatus() == Status.RUNNING) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -229,7 +229,7 @@ public void testInterpreterUnbindOfNullReplParagraph() throws IOException {
     p1.setText("%fake ");
 
     // make sure that p1's repl is null
-    Interpreter intp = p1.getCurrentRepl();
+    Interpreter intp = p1.getBindedInterpreter();
     assertEquals(intp, null);
 
     // Unbind all interpreter from note

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java
Patch:
@@ -247,7 +247,6 @@ public void testNoteJson() {
     note.getInfo().put("info_1", "value_1");
     String pText = "%spark sc.version";
     Paragraph p = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
-    p.dateUpdated = new Date();
     p.setText(pText);
     p.setResult("1.6.2");
     p.settings.getForms().put("textbox_1", new TextBox("name", "default_name"));

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java
Patch:
@@ -82,7 +82,8 @@ public synchronized void close() {
    * @param sessionId
    */
   public synchronized void close(String sessionId) {
-    LOGGER.info("Close Session: " + sessionId);
+    LOGGER.info("Close Session: " + sessionId + " for interpreter setting: " +
+        interpreterSetting.getName());
     close(sessions.remove(sessionId));
     //TODO(zjffdu) whether close InterpreterGroup if there's no session left in Zeppelin Server
     if (sessions.isEmpty() && interpreterSetting != null) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java
Patch:
@@ -321,14 +321,14 @@ public void run() {
       if (job.isAborted()) {
         job.setStatus(Status.ABORT);
       } else if (job.getException() != null) {
-        logger.debug("Job ABORT, " + job.getId());
+        logger.debug("Job ABORT, " + job.getId() + ", " + job.getErrorMessage());
         job.setStatus(Status.ERROR);
       } else if (jobResult != null && jobResult instanceof InterpreterResult
           && ((InterpreterResult) jobResult).code() == Code.ERROR) {
-        logger.debug("Job Error, " + job.getId());
+        logger.debug("Job Error, " + job.getId() + ", " + job.getErrorMessage());
         job.setStatus(Status.ERROR);
       } else {
-        logger.debug("Job Finished, " + job.getId());
+        logger.debug("Job Finished, " + job.getId() + ", Result: " + job.getReturn());
         job.setStatus(Status.FINISHED);
       }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -711,7 +711,7 @@ public static enum ConfVars {
     ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_CHECK_INTERVAL(
         "zeppelin.interpreter.lifecyclemanager.timeout.checkinterval", 6000L),
     ZEPPELIN_INTERPRETER_LIFECYCLE_MANAGER_TIMEOUT_THRESHOLD(
-        "zeppelin.interpreter.lifecyclemanager.timeout.threshold", 360000L);
+        "zeppelin.interpreter.lifecyclemanager.timeout.threshold", 3600000L);
 
     private String varName;
     @SuppressWarnings("rawtypes")

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -650,7 +650,7 @@ public Response runNoteJobs(@PathParam("noteId") String noteId)
     checkIfUserCanRun(noteId, "Insufficient privileges you cannot run job for this note");
 
     try {
-      note.runAll(subject);
+      note.runAll(subject, true);
     } catch (Exception ex) {
       LOG.error("Exception from run", ex);
       return new JsonResponse<>(Status.PRECONDITION_FAILED,

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ConfigurationsRestApiTest.java
Patch:
@@ -36,7 +36,7 @@ public class ConfigurationsRestApiTest extends AbstractTestRestApi {
 
   @BeforeClass
   public static void init() throws Exception {
-    AbstractTestRestApi.startUp();
+    AbstractTestRestApi.startUp(ConfigurationsRestApi.class.getSimpleName());
   }
 
   @AfterClass

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/CredentialsRestApiTest.java
Patch:
@@ -43,7 +43,7 @@ public class CredentialsRestApiTest extends AbstractTestRestApi {
 
   @BeforeClass
   public static void init() throws Exception {
-    AbstractTestRestApi.startUp();
+    AbstractTestRestApi.startUp(CredentialsRestApiTest.class.getSimpleName());
   }
 
   @AfterClass

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/HeliumRestApiTest.java
Patch:
@@ -39,7 +39,7 @@ public class HeliumRestApiTest extends AbstractTestRestApi {
 
     @BeforeClass
     public static void init() throws Exception {
-        AbstractTestRestApi.startUp();
+        AbstractTestRestApi.startUp(HeliumRestApi.class.getSimpleName());
     }
 
     @AfterClass

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -59,7 +59,7 @@ public class InterpreterRestApiTest extends AbstractTestRestApi {
 
   @BeforeClass
   public static void init() throws Exception {
-    AbstractTestRestApi.startUp();
+    AbstractTestRestApi.startUp(InterpreterRestApiTest.class.getSimpleName());
   }
 
   @AfterClass

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRepoRestApiTest.java
Patch:
@@ -50,7 +50,7 @@ public class NotebookRepoRestApiTest extends AbstractTestRestApi {
 
   @BeforeClass
   public static void init() throws Exception {
-    AbstractTestRestApi.startUp();
+    AbstractTestRestApi.startUp(NotebookRepoRestApiTest.class.getSimpleName());
   }
 
   @AfterClass

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookSecurityRestApiTest.java
Patch:
@@ -46,7 +46,7 @@ public class NotebookSecurityRestApiTest extends AbstractTestRestApi {
 
   @BeforeClass
   public static void init() throws Exception {
-    AbstractTestRestApi.startUpWithAuthenticationEnable();
+    AbstractTestRestApi.startUpWithAuthenticationEnable(NotebookSecurityRestApiTest.class.getSimpleName());
   }
 
   @AfterClass

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/SecurityRestApiTest.java
Patch:
@@ -40,7 +40,7 @@ public class SecurityRestApiTest extends AbstractTestRestApi {
 
   @BeforeClass
   public static void init() throws Exception {
-    AbstractTestRestApi.startUpWithAuthenticationEnable();
+    AbstractTestRestApi.startUpWithAuthenticationEnable(SecurityRestApiTest.class.getSimpleName());
   }
 
   @AfterClass

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -49,7 +49,7 @@ public class ZeppelinSparkClusterTest extends AbstractTestRestApi {
 
     @BeforeClass
     public static void init() throws Exception {
-        AbstractTestRestApi.startUp();
+        AbstractTestRestApi.startUp(ZeppelinSparkClusterTest.class.getSimpleName());
     }
 
     @AfterClass

File: zeppelin-server/src/test/java/org/apache/zeppelin/security/DirAccessTest.java
Patch:
@@ -30,7 +30,7 @@ public class DirAccessTest extends AbstractTestRestApi {
   public void testDirAccessForbidden() throws Exception {
     synchronized (this) {
       System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED.getVarName(), "false");
-      AbstractTestRestApi.startUp();
+      AbstractTestRestApi.startUp(DirAccessTest.class.getSimpleName());
       HttpClient httpClient = new HttpClient();
       GetMethod getMethod = new GetMethod(getUrlToTest() + "/app/");
       httpClient.executeMethod(getMethod);
@@ -43,7 +43,7 @@ public void testDirAccessForbidden() throws Exception {
   public void testDirAccessOk() throws Exception {
     synchronized (this) {
       System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED.getVarName(), "true");
-      AbstractTestRestApi.startUp();
+      AbstractTestRestApi.startUp(DirAccessTest.class.getSimpleName());
       HttpClient httpClient = new HttpClient();
       GetMethod getMethod = new GetMethod(getUrlToTest() + "/app/");
       httpClient.executeMethod(getMethod);

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -63,7 +63,7 @@ public class NotebookServerTest extends AbstractTestRestApi {
 
   @BeforeClass
   public static void init() throws Exception {
-    AbstractTestRestApi.startUp();
+    AbstractTestRestApi.startUp(NotebookServerTest.class.getSimpleName());
     gson = new Gson();
     notebook = ZeppelinServer.notebook;
     notebookServer = ZeppelinServer.notebookWsServer;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -803,7 +803,7 @@ public void restart(String settingId, String noteId, String user) throws Interpr
   }
 
   public void restart(String id) throws InterpreterException {
-    restart(id, "", "anonymous");
+    interpreterSettings.get(id).close();
   }
 
   public InterpreterSetting get(String id) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -646,7 +646,7 @@ public ParagraphRunner(Note note, String noteId, String paragraphId) {
 
     @Override
     public void run() {
-      note.run(getParagraphId());
+      note.run(getParagraphId(), false);
     }
   }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -54,8 +54,9 @@ public void setUp() throws Exception {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_CONF_DIR.getVarName(), confDir.getAbsolutePath());
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_DIR.getVarName(), interpreterDir.getAbsolutePath());
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(), notebookDir.getAbsolutePath());
+    System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_ORDER.getVarName(), "test,mock1,mock2,mock_resource_pool");
 
-    conf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_ORDER.getVarName(), "test,mock1,mock2,mock_resource_pool");
+    conf = new ZeppelinConfiguration();
     interpreterSettingManager = new InterpreterSettingManager(conf,
         mock(AngularObjectRegistryListener.class), mock(RemoteInterpreterProcessListener.class), mock(ApplicationEventListener.class));
     interpreterFactory = new InterpreterFactory(interpreterSettingManager);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -32,7 +32,7 @@ public abstract class AbstractInterpreterTest {
   protected File interpreterDir;
   protected File confDir;
   protected File notebookDir;
-  protected ZeppelinConfiguration conf;
+  protected ZeppelinConfiguration conf = new ZeppelinConfiguration();
 
   @Before
   public void setUp() throws Exception {
@@ -55,7 +55,6 @@ public void setUp() throws Exception {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_DIR.getVarName(), interpreterDir.getAbsolutePath());
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(), notebookDir.getAbsolutePath());
 
-    conf = new ZeppelinConfiguration();
     conf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_ORDER.getVarName(), "test,mock1,mock2,mock_resource_pool");
     interpreterSettingManager = new InterpreterSettingManager(conf,
         mock(AngularObjectRegistryListener.class), mock(RemoteInterpreterProcessListener.class), mock(ApplicationEventListener.class));

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -391,7 +391,7 @@ public Scheduler getScheduler() {
   private RemoteInterpreterContext convert(InterpreterContext ic) {
     return new RemoteInterpreterContext(ic.getNoteId(), ic.getParagraphId(), ic.getReplName(),
         ic.getParagraphTitle(), ic.getParagraphText(), gson.toJson(ic.getAuthenticationInfo()),
-        gson.toJson(ic.getConfig()), gson.toJson(ic.getGui()), gson.toJson(ic.getRunners()));
+        gson.toJson(ic.getConfig()), ic.getGui().toJson(), gson.toJson(ic.getRunners()));
   }
 
   private InterpreterResult convert(RemoteInterpreterResult result) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -645,7 +645,7 @@ synchronized RemoteInterpreterProcess createInterpreterProcess() throws IOExcept
       createLauncher();
     }
     InterpreterLaunchContext launchContext = new
-        InterpreterLaunchContext(getJavaProperties(), option, interpreterRunner, id, name);
+        InterpreterLaunchContext(getJavaProperties(), option, interpreterRunner, id, group);
     RemoteInterpreterProcess process = (RemoteInterpreterProcess) launcher.launch(launchContext);
     process.setRemoteInterpreterEventPoller(
         new RemoteInterpreterEventPoller(remoteInterpreterProcessListener, appEventListener));

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -932,7 +932,7 @@ public String getSparkUIUrl() {
       return sparkUrl;
     }
 
-    String sparkUrlProp = property.getProperty("zeppelin.spark.uiWebUrl", "");
+    String sparkUrlProp = getProperty("zeppelin.spark.uiWebUrl", "");
     if (!StringUtils.isBlank(sparkUrlProp)) {
       return sparkUrlProp;
     }

File: spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -347,7 +347,7 @@ public void testParagraphUrls() {
     }
     String sparkUIUrl = repl.getSparkUIUrl();
     assertNotNull(jobUrl);
-    assertTrue(jobUrl.startsWith(sparkUIUrl + "/jobs/job?id="));
+    assertTrue(jobUrl.startsWith(sparkUIUrl + "/jobs/job/?id="));
 
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroup.java
Patch:
@@ -85,7 +85,7 @@ public synchronized void close(String sessionId) {
     close(sessions.remove(sessionId));
     //TODO(zjffdu) whether close InterpreterGroup if there's no session left in Zeppelin Server
     if (sessions.isEmpty() && interpreterSetting != null) {
-      LOGGER.info("Remove this InterpreterGroup {} as all the sessions are closed", id);
+      LOGGER.info("Remove this InterpreterGroup: {} as all the sessions are closed", id);
       interpreterSetting.removeInterpreterGroup(id);
       if (remoteInterpreterProcess != null) {
         LOGGER.info("Kill RemoteIntetrpreterProcess");
@@ -133,7 +133,7 @@ public synchronized List<Interpreter> getOrCreateSession(String user, String ses
       for (Interpreter interpreter : interpreters) {
         interpreter.setInterpreterGroup(this);
       }
-      LOGGER.info("Create Session {} in InterpreterGroup {} for user {}", sessionId, id, user);
+      LOGGER.info("Create Session: {} in InterpreterGroup: {} for user: {}", sessionId, id, user);
       sessions.put(sessionId, interpreters);
       return interpreters;
     }

File: python/src/main/java/org/apache/zeppelin/python/IPythonClient.java
Patch:
@@ -96,7 +96,7 @@ public void onNext(ExecuteResponse executeResponse) {
             LOGGER.debug("Interpreter Streaming Output: " + executeResponse.getOutput());
             if (isPreviousOutputImage) {
               // add '\n' when switch from image to text
-              interpreterOutput.write("\n".getBytes());
+              interpreterOutput.write("\n%text ".getBytes());
             }
             isPreviousOutputImage = false;
             interpreterOutput.write(executeResponse.getOutput().getBytes());

File: python/src/main/java/org/apache/zeppelin/python/IPythonInterpreter.java
Patch:
@@ -286,6 +286,7 @@ protected Map<String, String> setupIPythonEnv() throws IOException {
     } else {
       envs.put("PYTHONPATH", additionalPythonPath);
     }
+    LOGGER.info("PYTHONPATH:" + envs.get("PYTHONPATH"));
     return envs;
   }
 

File: spark/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -146,7 +146,7 @@ public void run() {
         List<InterpreterResultMessage> interpreterResultMessages = null;
         try {
           interpreterResultMessages = context2.out.getInterpreterResultMessages();
-          assertTrue(interpreterResultMessages.get(0).getData().contains("cancelled"));
+          assertTrue(interpreterResultMessages.get(0).getData().contains("KeyboardInterrupt"));
         } catch (IOException e) {
           e.printStackTrace();
         }
@@ -180,7 +180,7 @@ public void run() {
         "ssc.start()\n" +
         "time.sleep(6)\n" +
         "ssc.stop(stopSparkContext=False, stopGraceFully=True)", context);
-    Thread.sleep(100);
+    Thread.sleep(1000);
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     interpreterResultMessages = context.out.getInterpreterResultMessages();
     assertEquals(1, interpreterResultMessages.size());

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -357,7 +357,7 @@ public void onMessage(NotebookSocket conn, String msg) {
           break;
       }
     } catch (Exception e) {
-      LOG.error("Can't handle message", e);
+      LOG.error("Can't handle message: " + msg, e);
     }
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java
Patch:
@@ -246,7 +246,6 @@ public RemoteInterpreterEvent call(Client client) throws Exception {
             listener.onParaInfosReceived(noteId, paraId, settingId, paraInfos);
           }
         }
-        logger.debug("Event from remote process {}", event.getType());
       } catch (Exception e) {
         logger.error("Can't handle event " + event, e);
       }

File: file/src/main/java/org/apache/zeppelin/file/FileInterpreter.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
+import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.InterpreterResult.Type;
@@ -86,7 +87,7 @@ public void parseArgs() {
 
   // Functions that each file system implementation must override
 
-  public abstract String listAll(String path);
+  public abstract String listAll(String path) throws InterpreterException;
 
   public abstract boolean isDirectory(String path);
 

File: file/src/main/java/org/apache/zeppelin/file/HDFSFileInterpreter.java
Patch:
@@ -202,7 +202,7 @@ public String listFile(String filePath) {
     return "No such File or directory";
   }
 
-  public String listAll(String path) {
+  public String listAll(String path) throws InterpreterException {
     String all = "";
     if (exceptionOnConnect != null)
       return "Error connecting to provided endpoint.";

File: groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java
Patch:
@@ -316,12 +316,12 @@ public void run(String paragraphId) {
   @ZeppelinApi
   public void run(String noteId, String paragraphId, InterpreterContext context) {
     if (paragraphId.equals(context.getParagraphId())) {
-      throw new InterpreterException("Can not run current Paragraph");
+      throw new RuntimeException("Can not run current Paragraph");
     }
     List<InterpreterContextRunner> runners = getInterpreterContextRunner(noteId, paragraphId,
         context);
     if (runners.size() <= 0) {
-      throw new InterpreterException("Paragraph " + paragraphId + " not found " + runners.size());
+      throw new RuntimeException("Paragraph " + paragraphId + " not found " + runners.size());
     }
     for (InterpreterContextRunner r : runners) {
       r.run();
@@ -338,7 +338,7 @@ public void runNote(String noteId, InterpreterContext context) {
     List<InterpreterContextRunner> runners = getInterpreterContextRunner(noteId, context);
 
     if (runners.size() <= 0) {
-      throw new InterpreterException("Note " + noteId + " not found " + runners.size());
+      throw new RuntimeException("Note " + noteId + " not found " + runners.size());
     }
 
     for (InterpreterContextRunner r : runners) {

File: hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java
Patch:
@@ -68,7 +68,7 @@ public HbaseInterpreter(Properties property) {
   }
 
   @Override
-  public void open() {
+  public void open() throws InterpreterException {
     this.scriptingContainer  = new ScriptingContainer(LocalContextScope.SINGLETON);
     this.writer = new StringWriter();
     scriptingContainer.setOutput(this.writer);
@@ -88,7 +88,7 @@ public void open() {
       }
 
       logger.info("Absolute Ruby Source:" + abs_ruby_src.toString());
-      // hirb.rb:41 requires the following system property to be set.
+      // hirb.rb:41 requires the following system properties to be set.
       Properties sysProps = System.getProperties();
       sysProps.setProperty(HBASE_RUBY_SRC, abs_ruby_src.toString());
 

File: hbase/src/test/java/org/apache/zeppelin/hbase/HbaseInterpreterTest.java
Patch:
@@ -15,6 +15,7 @@
 package org.apache.zeppelin.hbase;
 
 import org.apache.log4j.BasicConfigurator;
+import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.junit.BeforeClass;
 import org.junit.Test;
@@ -35,7 +36,7 @@ public class HbaseInterpreterTest {
   private static HbaseInterpreter hbaseInterpreter;
 
   @BeforeClass
-  public static void setUp() throws NullPointerException {
+  public static void setUp() throws NullPointerException, InterpreterException {
     BasicConfigurator.configure();
     Properties properties = new Properties();
     properties.put("hbase.home", "");

File: helium-dev/src/main/java/org/apache/zeppelin/helium/DevInterpreter.java
Patch:
@@ -74,7 +74,8 @@ public void rerun() {
   }
 
   @Override
-  public InterpreterResult interpret(String st, InterpreterContext context) {
+  public InterpreterResult interpret(String st, InterpreterContext context)
+      throws InterpreterException {
     this.context = context;
     try {
       return interpreterEvent.interpret(st, context);

File: ignite/src/main/java/org/apache/zeppelin/ignite/IgniteSqlInterpreter.java
Patch:
@@ -93,7 +93,7 @@ public void open() {
   }
 
   @Override
-  public void close() {
+  public void close() throws InterpreterException {
     try {
       if (conn != null) {
         conn.close();

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
 import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;
 import org.apache.zeppelin.interpreter.InterpreterContext;
+import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.InterpreterResult.Type;
@@ -82,7 +83,7 @@ public void setUp() {
   }
 
   @After
-  public void tearDown() {
+  public void tearDown() throws InterpreterException {
     intp.close();
     ignite.close();
   }

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java
Patch:
@@ -37,6 +37,7 @@
 
 import org.apache.zeppelin.completer.CompletionType;
 import org.apache.zeppelin.interpreter.InterpreterContext;
+import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.FIFOScheduler;
@@ -349,7 +350,7 @@ public void concurrentSettingTest() {
   }
 
   @Test
-  public void testAutoCompletion() throws SQLException, IOException {
+  public void testAutoCompletion() throws SQLException, IOException, InterpreterException {
     Properties properties = new Properties();
     properties.setProperty("common.max_count", "1000");
     properties.setProperty("common.max_retry", "3");

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -59,7 +59,7 @@ public String getSessionKind() {
   }
 
   @Override
-  public void open() {
+  public void open() throws InterpreterException {
     this.sparkInterpreter = getSparkInterpreter();
     // As we don't know whether livyserver use spark2 or spark1, so we will detect SparkSession
     // to judge whether it is using spark2.
@@ -93,7 +93,7 @@ public void open() {
     }
   }
 
-  private LivySparkInterpreter getSparkInterpreter() {
+  private LivySparkInterpreter getSparkInterpreter() throws InterpreterException {
     LazyOpenInterpreter lazy = null;
     LivySparkInterpreter spark = null;
     Interpreter p = getInterpreterInTheSameSessionByClassName(LivySparkInterpreter.class.getName());

File: pig/src/main/java/org/apache/zeppelin/pig/PigInterpreter.java
Patch:
@@ -18,7 +18,6 @@
 package org.apache.zeppelin.pig;
 
 import org.apache.commons.io.output.ByteArrayOutputStream;
-import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.pig.PigServer;
 import org.apache.pig.impl.logicalLayer.FrontendException;
@@ -60,7 +59,7 @@ public void open() {
     }
     try {
       pigServer = new PigServer(execType);
-      for (Map.Entry entry : getProperty().entrySet()) {
+      for (Map.Entry entry : getProperties().entrySet()) {
         if (!entry.getKey().toString().startsWith("zeppelin.")) {
           pigServer.getPigContext().getProperties().setProperty(entry.getKey().toString(),
               entry.getValue().toString());

File: pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java
Patch:
@@ -55,7 +55,7 @@ public PigQueryInterpreter(Properties properties) {
   }
 
   @Override
-  public void open() {
+  public void open() throws InterpreterException {
     pigServer = getPigInterpreter().getPigServer();
     maxResult = Integer.parseInt(getProperty(MAX_RESULTS));
   }
@@ -159,7 +159,7 @@ public PigServer getPigServer() {
     return this.pigServer;
   }
 
-  private PigInterpreter getPigInterpreter() {
+  private PigInterpreter getPigInterpreter() throws InterpreterException {
     LazyOpenInterpreter lazy = null;
     PigInterpreter pig = null;
     Interpreter p = getInterpreterInTheSameSessionByClassName(PigInterpreter.class.getName());

File: pig/src/test/java/org/apache/zeppelin/pig/PigQueryInterpreterTest.java
Patch:
@@ -21,6 +21,7 @@
 import org.apache.commons.io.IOUtils;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
+import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.junit.After;
@@ -48,7 +49,7 @@ public class PigQueryInterpreterTest {
   private InterpreterContext context;
 
   @Before
-  public void setUp() {
+  public void setUp() throws InterpreterException {
     Properties properties = new Properties();
     properties.put("zeppelin.pig.execType", "local");
     properties.put("zeppelin.pig.maxResult", "20");

File: python/src/test/java/org/apache/zeppelin/python/PythonDockerInterpreterTest.java
Patch:
@@ -41,7 +41,7 @@ public class PythonDockerInterpreterTest {
   private PythonInterpreter python;
 
   @Before
-  public void setUp() {
+  public void setUp() throws InterpreterException {
     docker = spy(new PythonDockerInterpreter(new Properties()));
     python = mock(PythonInterpreter.class);
 
@@ -58,7 +58,7 @@ public void setUp() {
   }
 
   @Test
-  public void testActivateEnv() {
+  public void testActivateEnv() throws InterpreterException {
     InterpreterContext context = getInterpreterContext();
     docker.interpret("activate env", context);
     verify(python, times(1)).open();
@@ -68,7 +68,7 @@ public void testActivateEnv() {
   }
 
   @Test
-  public void testDeactivate() {
+  public void testDeactivate() throws InterpreterException {
     InterpreterContext context = getInterpreterContext();
     docker.interpret("deactivate", context);
     verify(python, times(1)).open();

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -174,8 +174,8 @@ protected boolean runKerberosLogin() {
     return false;
   }
 
-  public void createSecureConfiguration() {
-    Properties properties = getProperty();
+  public void createSecureConfiguration() throws InterpreterException {
+    Properties properties = getProperties();
     CommandLine cmdLine = CommandLine.parse(shell);
     cmdLine.addArgument("-c", false);
     String kinitCommand = String.format("kinit -k -t %s %s",

File: spark/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterContextRunner;
+import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
 import org.apache.zeppelin.interpreter.InterpreterOutputListener;
@@ -55,7 +56,7 @@ public class IPySparkInterpreterTest {
   private InterpreterGroup intpGroup;
 
   @Before
-  public void setup() {
+  public void setup() throws InterpreterException {
     Properties p = new Properties();
     p.setProperty("spark.master", "local[4]");
     p.setProperty("master", "local[4]");
@@ -90,7 +91,7 @@ public void tearDown() {
   }
 
   @Test
-  public void testBasics() throws InterruptedException, IOException {
+  public void testBasics() throws InterruptedException, IOException, InterpreterException {
     // all the ipython test should pass too.
     IPythonInterpreterTest.testInterpreter(iPySparkInterpreter);
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterException.java
Patch:
@@ -17,11 +17,12 @@
 
 package org.apache.zeppelin.interpreter;
 
+
 /**
  * Runtime Exception for interpreters.
  *
  */
-public class InterpreterException extends RuntimeException {
+public class InterpreterException extends Exception {
 
   public InterpreterException(Throwable e) {
     super(e);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterContextRunner.java
Patch:
@@ -33,6 +33,6 @@ public RemoteInterpreterContextRunner(String noteId, String paragraphId) {
   public void run() {
     // this class should be used only for gson deserialize abstract class
     // code should not reach here
-    throw new InterpreterException("Assert");
+    throw new RuntimeException("Assert");
   }
 }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/LazyOpenInterpreterTest.java
Patch:
@@ -28,7 +28,7 @@ public class LazyOpenInterpreterTest {
   Interpreter interpreter = mock(Interpreter.class);
 
   @Test
-  public void isOpenTest() {
+  public void isOpenTest() throws InterpreterException {
     InterpreterResult interpreterResult = new InterpreterResult(InterpreterResult.Code.SUCCESS, "");
     when(interpreter.interpret(any(String.class), any(InterpreterContext.class))).thenReturn(interpreterResult);
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -123,7 +123,7 @@ public Response newSettings(String message) {
               request.getOption(), request.getProperties());
       logger.info("new setting created with {}", interpreterSetting.getId());
       return new JsonResponse<>(Status.OK, "", interpreterSetting).build();
-    } catch (InterpreterException | IOException e) {
+    } catch (IOException e) {
       logger.error("Exception in InterpreterRestApi while creating ", e);
       return new JsonResponse<>(Status.NOT_FOUND, e.getMessage(), ExceptionUtils.getStackTrace(e))
           .build();

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.Map;
 
 import org.apache.commons.io.FileUtils;
+import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.notebook.Note;
@@ -171,7 +172,7 @@ public void sparkSQLTest() throws IOException {
     }
 
     @Test
-    public void sparkRTest() throws IOException {
+    public void sparkRTest() throws IOException, InterpreterException {
       // create new note
       Note note = ZeppelinServer.notebook.createNote(anonymous);
       int sparkVersion = getSparkVersionNumber(note);
@@ -426,7 +427,7 @@ public void zRunTest() throws IOException {
     }
 
     @Test
-    public void pySparkDepLoaderTest() throws IOException {
+    public void pySparkDepLoaderTest() throws IOException, InterpreterException {
         // create new note
         Note note = ZeppelinServer.notebook.createNote(anonymous);
         int sparkVersionNumber = getSparkVersionNumber(note);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -77,7 +77,7 @@ public Interpreter getInterpreter(String user, String noteId, String replName) {
           return interpreter;
         }
       }
-      throw new InterpreterException(replName + " interpreter not found");
+      return null;
 
     } else {
       // first assume replName is 'name' of interpreter. ('groupName' is ommitted)

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/InterpreterContextRunnerPool.java
Patch:
@@ -82,7 +82,7 @@ public void run(String noteId, String paragraphId) {
         }
       }
 
-      throw new InterpreterException("Can not run paragraph " + paragraphId + " on " + noteId);
+      throw new RuntimeException("Can not run paragraph " + paragraphId + " on " + noteId);
     }
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java
Patch:
@@ -30,12 +30,10 @@ public class RemoteInterpreterRunningProcess extends RemoteInterpreterProcess {
 
   public RemoteInterpreterRunningProcess(
       int connectTimeout,
-      RemoteInterpreterProcessListener listener,
-      ApplicationEventListener appListener,
       String host,
       int port
   ) {
-    super(connectTimeout, listener, appListener);
+    super(connectTimeout);
     this.host = host;
     this.port = port;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -627,7 +627,7 @@ public void run(String paragraphId) {
     if (intp == null) {
       String intpExceptionMsg =
           p.getJobName() + "'s Interpreter " + requiredReplName + " not found";
-      InterpreterException intpException = new InterpreterException(intpExceptionMsg);
+      RuntimeException intpException = new RuntimeException(intpExceptionMsg);
       InterpreterResult intpResult =
           new InterpreterResult(InterpreterResult.Code.ERROR, intpException.getMessage());
       p.setReturn(intpResult, intpException);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.interpreter.AbstractInterpreterTest;
 import org.apache.zeppelin.interpreter.Interpreter;
+import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterResultMessage;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.notebook.ApplicationState;
@@ -241,7 +242,7 @@ public void testInterpreterUnbindOfNullReplParagraph() throws IOException {
 
 
   @Test
-  public void testUnloadOnInterpreterRestart() throws IOException {
+  public void testUnloadOnInterpreterRestart() throws IOException, InterpreterException {
     // given
     HeliumPackage pkg1 = new HeliumPackage(HeliumType.APPLICATION,
         "name1",

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/EchoInterpreter.java
Patch:
@@ -41,7 +41,7 @@ public void close() {
 
   @Override
   public InterpreterResult interpret(String st, InterpreterContext context) {
-    if (Boolean.parseBoolean(property.getProperty("zeppelin.interpreter.echo.fail", "false"))) {
+    if (Boolean.parseBoolean(getProperty("zeppelin.interpreter.echo.fail", "false"))) {
       return new InterpreterResult(InterpreterResult.Code.ERROR);
     } else {
       return new InterpreterResult(InterpreterResult.Code.SUCCESS, st);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -52,10 +52,10 @@ public void testGetFactory() throws IOException {
     assertEquals(DoubleEchoInterpreter.class.getName(), remoteInterpreter.getClassName());
   }
 
-  @Test(expected = InterpreterException.class)
+  @Test
   public void testUnknownRepl1() throws IOException {
     interpreterSettingManager.setInterpreterBinding("user1", "note1", interpreterSettingManager.getSettingIds());
-    interpreterFactory.getInterpreter("user1", "note1", "test.unknown_repl");
+    assertNull(interpreterFactory.getInterpreter("user1", "note1", "test.unknown_repl"));
   }
 
   @Test

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterSettingManagerTest.java
Patch:
@@ -96,7 +96,7 @@ public void testInitInterpreterSettingManager() throws IOException, RepositoryEx
   }
 
   @Test
-  public void testCreateUpdateRemoveSetting() throws IOException {
+  public void testCreateUpdateRemoveSetting() throws IOException, InterpreterException {
     // create new interpreter setting
     InterpreterOption option = new InterpreterOption();
     option.setPerNote("scoped");

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/SleepInterpreter.java
Patch:
@@ -46,7 +46,7 @@ public FormType getFormType() {
 
   @Override
   public Scheduler getScheduler() {
-    if (Boolean.parseBoolean(property.getProperty("zeppelin.SleepInterpreter.parallel", "false"))) {
+    if (Boolean.parseBoolean(getProperty("zeppelin.SleepInterpreter.parallel", "false"))) {
       return SchedulerFactory.singleton().createOrGetParallelScheduler(
           "Parallel-" + SleepInterpreter.class.getName(), 10);
     }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -100,7 +100,7 @@ public void tearDown() throws Exception {
   }
 
   @Test
-  public void testAngularObjectInterpreterSideCRUD() throws InterruptedException {
+  public void testAngularObjectInterpreterSideCRUD() throws InterruptedException, InterpreterException {
     InterpreterResult ret = intp.interpret("get", context);
     Thread.sleep(500); // waitFor eventpoller pool event
     String[] result = ret.message().get(0).getData().split(" ");
@@ -133,7 +133,7 @@ public void testAngularObjectInterpreterSideCRUD() throws InterruptedException {
   }
 
   @Test
-  public void testAngularObjectRemovalOnZeppelinServerSide() throws InterruptedException {
+  public void testAngularObjectRemovalOnZeppelinServerSide() throws InterruptedException, InterpreterException {
     // test if angularobject removal from server side propagate to interpreter process's registry.
     // will happen when notebook is removed.
 
@@ -158,7 +158,7 @@ public void testAngularObjectRemovalOnZeppelinServerSide() throws InterruptedExc
   }
 
   @Test
-  public void testAngularObjectAddOnZeppelinServerSide() throws InterruptedException {
+  public void testAngularObjectAddOnZeppelinServerSide() throws InterruptedException, InterpreterException {
     // test if angularobject add from server side propagate to interpreter process's registry.
     // will happen when zeppelin server loads notebook and restore the object into registry
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterA.java
Patch:
@@ -51,8 +51,9 @@ public String getLastStatement() {
   }
 
   @Override
-  public InterpreterResult interpret(String st, InterpreterContext context) {
-    if (property.containsKey("progress")) {
+  public InterpreterResult interpret(String st, InterpreterContext context)
+      throws InterpreterException {
+    if (getProperties().containsKey("progress")) {
       context.setProgress(Integer.parseInt(getProperty("progress")));
     }
     try {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterOutputStream.java
Patch:
@@ -52,7 +52,8 @@ public String getLastStatement() {
   }
 
   @Override
-  public InterpreterResult interpret(String st, InterpreterContext context) {
+  public InterpreterResult interpret(String st, InterpreterContext context)
+      throws InterpreterException {
     String[] ret = st.split(":");
     try {
       if (ret[1] != null) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java
Patch:
@@ -79,7 +79,7 @@ public void tearDown() throws Exception {
   }
 
   @Test
-  public void testRemoteDistributedResourcePool() {
+  public void testRemoteDistributedResourcePool() throws InterpreterException {
     Gson gson = new Gson();
     InterpreterResult ret;
     intp1.interpret("put key1 value1", context);
@@ -162,7 +162,7 @@ public Resource invokeMethod(ResourceId id, String methodName, Class[] paramType
   }
 
   @Test
-  public void testResourcePoolUtils() {
+  public void testResourcePoolUtils() throws InterpreterException {
     Gson gson = new Gson();
     InterpreterResult ret;
 
@@ -201,7 +201,7 @@ public void testResourcePoolUtils() {
   }
 
   @Test
-  public void testResourceInvokeMethod() {
+  public void testResourceInvokeMethod() throws InterpreterException {
     Gson gson = new Gson();
     InterpreterResult ret;
     intp1.interpret("put key1 hey", context);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/security/Authentication.java
Patch:
@@ -47,7 +47,6 @@ public class Authentication implements Runnable {
   // Cipher is an AES in CBC mode
   private static final String CIPHER_ALGORITHM = "AES";
   private static final String CIPHER_MODE = "AES/CBC/PKCS5PADDING";
-  private static final String KEY = "AbtEr99DxsWWbJkP";
   private static final int ivSize = 16;
 
   private static final String ZEPPELIN_CONF_ANONYMOUS_ALLOWED = "zeppelin.anonymous.allowed";
@@ -198,7 +197,7 @@ private Map<String, String> login(String authKey, String endpoint) {
   private Key generateKey() {
     try {
       KeyGenerator kgen = KeyGenerator.getInstance(CIPHER_ALGORITHM);
-      kgen.init(128, new SecureRandom(toBytes(KEY)));
+      kgen.init(128, new SecureRandom());
       SecretKey secretKey = kgen.generateKey();
       byte[] enCodeFormat = secretKey.getEncoded();
       return new SecretKeySpec(enCodeFormat, CIPHER_ALGORITHM);

File: groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java
Patch:
@@ -172,7 +172,7 @@ public Object put(String varName, Object newValue) {
   /**
    * starts or continues rendering html/angular and returns MarkupBuilder to build html.
    * <pre> g.html().with{
-   * 	h1("hello")
+   *  h1("hello")
    *  h2("world")
    * }</pre>
    */

File: groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java
Patch:
@@ -204,7 +204,7 @@ public void cancel(InterpreterContext context) {
           Thread t = (Thread) object;
           t.dumpStack();
           t.interrupt();
-          //t.stop(); //TODO: need some way to terminate maybe through GObject..
+          //t.stop(); //TODO(dlukyanov): need some way to terminate maybe through GObject..
         } catch (Throwable t) {
           log.error("Failed to cancel script: " + t, t);
         }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -693,8 +693,8 @@ public static enum ConfVars {
     ZEPPELIN_SERVER_STRICT_TRANSPORT("zeppelin.server.strict.transport", "max-age=631138519"),
     ZEPPELIN_SERVER_X_XSS_PROTECTION("zeppelin.server.xxss.protection", "1"),
 
-    ZEPPELIN_HDFS_KEYTAB("zeppelin.hdfs.keytab", ""),
-    ZEPPELIN_HDFS_PRINCIPAL("zeppelin.hdfs.principal", ""),
+    ZEPPELIN_SERVER_KERBEROS_KEYTAB("zeppelin.server.kerberos.keytab", ""),
+    ZEPPELIN_SERVER_KERBEROS_PRINCIPAL("zeppelin.server.kerberos.principal", ""),
 
     ZEPPELIN_INTERPRETER_CALLBACK_PORTRANGE("zeppelin.interpreter.callback.portRange", ":");
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -627,7 +627,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.bigquery.BigQueryInterpreter,"
         + "org.apache.zeppelin.beam.BeamInterpreter,"
         + "org.apache.zeppelin.scio.ScioInterpreter,"
-        + "org.apache.zeppelin.groovy.GroovyInterpreter"
+        + "org.apache.zeppelin.groovy.GroovyInterpreter,"
+        + "org.apache.zeppelin.neo4j.Neo4jCypherInterpreter"
         ),
     ZEPPELIN_INTERPRETER_JSON("zeppelin.interpreter.setting", "interpreter-setting.json"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
@@ -638,7 +639,7 @@ public static enum ConfVars {
     ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
     ZEPPELIN_INTERPRETER_GROUP_ORDER("zeppelin.interpreter.group.order", "spark,md,angular,sh,"
         + "livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,"
-        + "scalding,jdbc,hbase,bigquery,beam,pig,scio,groovy"),
+        + "scalding,jdbc,hbase,bigquery,beam,pig,scio,groovy,neo4j"),
     ZEPPELIN_INTERPRETER_OUTPUT_LIMIT("zeppelin.interpreter.output.limit", 1024 * 100),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -124,7 +124,7 @@ public InterpreterSettingManager(ZeppelinConfiguration zeppelinConfiguration,
                                        remoteInterpreterProcessListener,
                                    ApplicationEventListener appEventListener)
       throws IOException {
-    this(zeppelinConfiguration, new InterpreterOption(true),
+    this(zeppelinConfiguration, new InterpreterOption(),
         angularObjectRegistryListener,
         remoteInterpreterProcessListener,
         appEventListener);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/ManagedInterpreterGroupTest.java
Patch:
@@ -41,7 +41,6 @@ public class ManagedInterpreterGroupTest {
   public void setUp() throws IOException, RepositoryException {
     InterpreterOption interpreterOption = new InterpreterOption();
     interpreterOption.setPerUser(InterpreterOption.SCOPED);
-    interpreterOption.setRemote(false);
     InterpreterInfo interpreterInfo1 = new InterpreterInfo(EchoInterpreter.class.getName(), "echo", true, new HashMap<String, Object>());
     InterpreterInfo interpreterInfo2 = new InterpreterInfo(DoubleEchoInterpreter.class.getName(), "double_echo", false, new HashMap<String, Object>());
     List<InterpreterInfo> interpreterInfos = new ArrayList<>();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -60,7 +60,6 @@ public void setUp() throws Exception {
     onRemove = new AtomicInteger(0);
 
     InterpreterOption interpreterOption = new InterpreterOption();
-    interpreterOption.setRemote(true);
     InterpreterInfo interpreterInfo1 = new InterpreterInfo(MockInterpreterAngular.class.getName(), "mock", true, new HashMap<String, Object>());
     List<InterpreterInfo> interpreterInfos = new ArrayList<>();
     interpreterInfos.add(interpreterInfo1);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java
Patch:
@@ -46,7 +46,6 @@ public class RemoteInterpreterOutputTestStream implements RemoteInterpreterProce
   public void setUp() throws Exception {
     InterpreterOption interpreterOption = new InterpreterOption();
 
-    interpreterOption.setRemote(true);
     InterpreterInfo interpreterInfo1 = new InterpreterInfo(MockInterpreterOutputStream.class.getName(), "mock", true, new HashMap<String, Object>());
     List<InterpreterInfo> interpreterInfos = new ArrayList<>();
     interpreterInfos.add(interpreterInfo1);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java
Patch:
@@ -52,7 +52,6 @@ public class RemoteInterpreterTest {
   public void setUp() throws Exception {
     InterpreterOption interpreterOption = new InterpreterOption();
 
-    interpreterOption.setRemote(true);
     InterpreterInfo interpreterInfo1 = new InterpreterInfo(EchoInterpreter.class.getName(), "echo", true, new HashMap<String, Object>());
     InterpreterInfo interpreterInfo2 = new InterpreterInfo(DoubleEchoInterpreter.class.getName(), "double_echo", false, new HashMap<String, Object>());
     InterpreterInfo interpreterInfo3 = new InterpreterInfo(SleepInterpreter.class.getName(), "sleep", false, new HashMap<String, Object>());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java
Patch:
@@ -63,7 +63,6 @@ public void setUp() throws Exception {
     schedulerSvc = new SchedulerFactory();
 
     InterpreterOption interpreterOption = new InterpreterOption();
-    interpreterOption.setRemote(true);
     InterpreterInfo interpreterInfo1 = new InterpreterInfo(MockInterpreterA.class.getName(), "mock", true, new HashMap<String, Object>());
     List<InterpreterInfo> interpreterInfos = new ArrayList<>();
     interpreterInfos.add(interpreterInfo1);

File: python/src/main/java/org/apache/zeppelin/python/IPythonClient.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Random;
+import java.security.SecureRandom;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
@@ -55,7 +55,7 @@ public class IPythonClient {
   private final IPythonGrpc.IPythonBlockingStub blockingStub;
   private final IPythonGrpc.IPythonStub asyncStub;
 
-  private Random random = new Random();
+  private SecureRandom random = new SecureRandom();
 
   /**
    * Construct client for accessing RouteGuide server at {@code host:port}.

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
-import java.util.Random;
+import java.security.SecureRandom;
 import java.util.concurrent.ConcurrentHashMap;
 
 /**
@@ -70,7 +70,7 @@ public InterpreterGroup() {
   }
 
   private static String generateId() {
-    return "InterpreterGroup_" + System.currentTimeMillis() + "_" + new Random().nextInt();
+    return "InterpreterGroup_" + System.currentTimeMillis() + "_" + new SecureRandom().nextInt();
   }
 
   public String getId() {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/IdHashes.java
Patch:
@@ -20,7 +20,7 @@
 import java.math.BigInteger;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Random;
+import java.security.SecureRandom;
 
 /**
  * Generate Tiny ID.
@@ -71,6 +71,6 @@ private static String encode(Long value) {
   }
 
   public static String generateId() {
-    return encode(System.currentTimeMillis() + new Random().nextInt());
+    return encode(System.currentTimeMillis() + new SecureRandom().nextInt());
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.Random;
+import java.security.SecureRandom;
 import java.util.Set;
 
 import org.apache.commons.lang.StringUtils;
@@ -139,8 +139,7 @@ public Paragraph(Note note, JobListener listener, InterpreterFactory factory,
   }
 
   private static String generateId() {
-    return "paragraph_" + System.currentTimeMillis() + "_" + new Random(System.currentTimeMillis())
-        .nextInt();
+    return "paragraph_" + System.currentTimeMillis() + "_" + new SecureRandom().nextInt();
   }
 
   public Map<String, Paragraph> getUserParagraphMap() {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/utility/IdHashes.java
Patch:
@@ -18,9 +18,9 @@
 package org.apache.zeppelin.notebook.utility;
 
 import java.math.BigInteger;
+import java.security.SecureRandom;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Random;
 
 /**
  * Generate Tiny ID.
@@ -71,6 +71,6 @@ private static String encode(Long value) {
   }
 
   public static String generateId() {
-    return encode(System.currentTimeMillis() + new Random().nextInt());
+    return encode(System.currentTimeMillis() + new SecureRandom().nextInt());
   }
 }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/user/CredentialsTest.java
Patch:
@@ -27,7 +27,7 @@ public class CredentialsTest {
 
   @Test
   public void testDefaultProperty() throws IOException {
-    Credentials credentials = new Credentials(false, null);
+    Credentials credentials = new Credentials(false, null, null);
     UserCredentials userCredentials = new UserCredentials();
     UsernamePassword up1 = new UsernamePassword("user2", "password");
     userCredentials.putUsernamePassword("hive(vertica)", up1);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -77,7 +77,7 @@ public void setUp() throws Exception {
         this,
         search,
         notebookAuthorization,
-        new Credentials(false, null));
+        new Credentials(false, null, null));
 
     heliumAppFactory.setNotebook(notebook);
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -98,7 +98,7 @@ public void setUp() throws Exception {
     SearchService search = mock(SearchService.class);
     notebookRepo = new VFSNotebookRepo(conf);
     notebookAuthorization = NotebookAuthorization.init(conf);
-    credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath());
+    credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath(), null);
 
     notebook = new Notebook(conf, notebookRepo, schedulerFactory, interpreterFactory, interpreterSettingManager, this, search,
         notebookAuthorization, credentials);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -103,7 +103,7 @@ public void setUp() throws Exception {
     search = mock(SearchService.class);
     notebookRepoSync = new NotebookRepoSync(conf);
     notebookAuthorization = NotebookAuthorization.init(conf);
-    credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath());
+    credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath(), null);
     notebookSync = new Notebook(conf, notebookRepoSync, schedulerFactory, factory, interpreterSettingManager, this, search,
             notebookAuthorization, credentials);
     anonymous = new AuthenticationInfo("anonymous");

File: zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -81,8 +81,9 @@ public static WebDriver getWebDriver() {
         profile.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/x-ustar,application/octet-stream,application/zip,text/csv,text/plain");
         profile.setPreference("network.proxy.type", 0);
 
-        profile.addExtension(new File(firebugPath));
-        profile.addExtension(new File(firepathPath));
+        // Commenting out installing extensions. See ZEPPELIN-2962.
+        // profile.addExtension(new File(firebugPath));
+        // profile.addExtension(new File(firepathPath));
 
         driver = new FirefoxDriver(ffox, profile);
       } catch (Exception e) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1297,9 +1297,10 @@ private void removeParagraph(NotebookSocket conn, HashSet<String> userAndRoles,
       return;
     }
 
-    /** We dont want to remove the last paragraph */
     final Note note = notebook.getNote(noteId);
-    if (!note.isLastParagraph(paragraphId)) {
+
+    /** Don't allow removing paragraph when there is only one paragraph in the Notebook */
+    if (note.getParagraphCount() > 1) {
       AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);
       Paragraph para = note.removeParagraph(subject.getUser(), paragraphId);
       note.persist(subject);

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java
Patch:
@@ -41,6 +41,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.HttpEntity;
+import org.springframework.http.MediaType;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.ResponseEntity;
@@ -520,7 +521,7 @@ private String callRestAPI(String targetURL, String method, String jsonData)
     targetURL = livyURL + targetURL;
     LOGGER.debug("Call rest api in {}, method: {}, jsonData: {}", targetURL, method, jsonData);
     HttpHeaders headers = new HttpHeaders();
-    headers.add("Content-Type", "application/json");
+    headers.add("Content-Type", MediaType.APPLICATION_JSON_UTF8_VALUE);
     headers.add("X-Requested-By", "zeppelin");
     ResponseEntity<String> response = null;
     try {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -738,7 +738,7 @@ private Map<String, String> getEnvFromInterpreterProperty() {
     }
 
     setupPropertiesForPySpark(sparkProperties);
-    setupPropertiesForSparkR(sparkProperties, javaProperties.getProperty("SPARK_HOME"));
+    setupPropertiesForSparkR(sparkProperties, System.getenv("SPARK_HOME"));
     if (isYarnMode() && getDeployMode().equals("cluster")) {
       env.put("SPARK_YARN_CLUSTER", "true");
     }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/AbstractInterpreterTest.java
Patch:
@@ -56,6 +56,7 @@ public void setUp() throws Exception {
     System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_NOTEBOOK_DIR.getVarName(), notebookDir.getAbsolutePath());
 
     conf = new ZeppelinConfiguration();
+    conf.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETER_GROUP_ORDER.getVarName(), "test,mock1,mock2,mock_resource_pool");
     interpreterSettingManager = new InterpreterSettingManager(conf,
         mock(AngularObjectRegistryListener.class), mock(RemoteInterpreterProcessListener.class), mock(ApplicationEventListener.class));
     interpreterFactory = new InterpreterFactory(interpreterSettingManager);

File: spark/src/test/java/org/apache/zeppelin/spark/IPySparkInterpreterTest.java
Patch:
@@ -59,6 +59,7 @@ public void setup() {
     Properties p = new Properties();
     p.setProperty("spark.master", "local[4]");
     p.setProperty("master", "local[4]");
+    p.setProperty("spark.submit.deployMode", "client");
     p.setProperty("spark.app.name", "Zeppelin Test");
     p.setProperty("zeppelin.spark.useHiveContext", "true");
     p.setProperty("zeppelin.spark.maxResult", "1000");

File: spark/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterMatplotlibTest.java
Patch:
@@ -89,7 +89,7 @@ private static Properties getPySparkTestProperties() throws IOException {
     p.setProperty("zeppelin.spark.importImplicit", "true");
     p.setProperty("zeppelin.pyspark.python", "python");
     p.setProperty("zeppelin.dep.localrepo", tmpDir.newFolder().getAbsolutePath());
-    p.setProperty("zeppelin.spark.useIPython", "false");
+    p.setProperty("zeppelin.pyspark.useIPython", "false");
     return p;
   }
 

File: spark/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterTest.java
Patch:
@@ -59,7 +59,7 @@ private static Properties getPySparkTestProperties() throws IOException {
     p.setProperty("zeppelin.spark.importImplicit", "true");
     p.setProperty("zeppelin.pyspark.python", "python");
     p.setProperty("zeppelin.dep.localrepo", tmpDir.newFolder().getAbsolutePath());
-    p.setProperty("zeppelin.spark.useIPython", "false");
+    p.setProperty("zeppelin.pyspark.useIPython", "false");
     return p;
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -83,7 +83,7 @@ public static void startUp() {
     }
 
     try {
-      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(), "../");
+      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(), new File("../").getAbsolutePath());
       ZeppelinConfiguration conf = ZeppelinConfiguration.create();
       shiroPath = conf.getRelativeDir(String.format("%s/shiro.ini", conf.getConfDir()));
       File file = new File(shiroPath);

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/InterpreterModeActionsIT.java
Patch:
@@ -82,7 +82,7 @@ public static void startUp() {
       return;
     }
     try {
-      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(), "../");
+      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(), new File("../").getAbsolutePath());
       ZeppelinConfiguration conf = ZeppelinConfiguration.create();
       shiroPath = conf.getRelativeDir(String.format("%s/shiro.ini", conf.getConfDir()));
       interpreterOptionPath = conf.getRelativeDir(String.format("%s/interpreter.json", conf.getConfDir()));

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/PersonalizeActionsIT.java
Patch:
@@ -74,7 +74,7 @@ public static void startUp() {
       return;
     }
     try {
-      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(), "../");
+      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(), new File("../").getAbsolutePath());
       ZeppelinConfiguration conf = ZeppelinConfiguration.create();
       shiroPath = conf.getRelativeDir(String.format("%s/shiro.ini", conf.getConfDir()));
       File file = new File(shiroPath);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -493,7 +493,7 @@ public boolean isNotebokPublic() {
   }
 
   public String getConfDir() {
-    return getString(ConfVars.ZEPPELIN_CONF_DIR);
+    return getRelativeDir(ConfVars.ZEPPELIN_CONF_DIR);
   }
 
   public List<String> getAllowedOrigins()

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java
Patch:
@@ -226,6 +226,8 @@ public void run() {
   }
 
   public void stop() {
+    // shutdown EventPoller first.
+    this.remoteInterpreterEventPoller.shutdown();
     if (callbackServer.isServing()) {
       callbackServer.stop();
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -32,7 +32,7 @@ public abstract class RemoteInterpreterProcess {
   private static final Logger logger = LoggerFactory.getLogger(RemoteInterpreterProcess.class);
 
   private GenericObjectPool<Client> clientPool;
-  private final RemoteInterpreterEventPoller remoteInterpreterEventPoller;
+  protected final RemoteInterpreterEventPoller remoteInterpreterEventPoller;
   private final InterpreterContextRunnerPool interpreterContextRunnerPool;
   private int connectTimeout;
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -73,9 +73,7 @@ public void setUp() throws Exception {
 
   @After
   public void tearDown() throws Exception {
-    if (!FileUtils.deleteQuietly(testRootDir)) {
-      LOG.error("Failed to delete {} ", testRootDir.getName());
-    }
+    super.tearDown();
   }
 
   @Test

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServerTest.java
Patch:
@@ -43,7 +43,7 @@ public void tearDown() throws Exception {
   @Test
   public void testStartStop() throws InterruptedException, IOException, TException {
     RemoteInterpreterServer server = new RemoteInterpreterServer("localhost",
-        RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces());
+        RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces(), true);
     assertEquals(false, server.isRunning());
 
     server.start();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -218,6 +218,7 @@ protected FileObject getRootDir() throws IOException {
 
   @Override
   public synchronized void save(Note note, AuthenticationInfo subject) throws IOException {
+    LOG.info("Saving note:" + note.getId());
     String json = note.toJson();
 
     FileObject rootDir = getRootDir();

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/GetUserList.java
Patch:
@@ -232,7 +232,7 @@ public List<String> getUserList(JdbcRealm obj) {
         return userlist;
       }
 
-      userquery = "select ? from ?";
+      userquery = String.format("SELECT %s FROM %s", username, tablename);
 
     } catch (IllegalAccessException e) {
       LOG.error("Error while accessing dataSource for JDBC Realm", e);
@@ -242,8 +242,6 @@ public List<String> getUserList(JdbcRealm obj) {
     try {
       con = dataSource.getConnection();
       ps = con.prepareStatement(userquery);
-      ps.setString(1, username);
-      ps.setString(2, tablename);
       rs = ps.executeQuery();
       while (rs.next()) {
         userlist.add(rs.getString(1).trim());

File: helium-dev/src/main/java/org/apache/zeppelin/helium/ZeppelinDevServer.java
Patch:
@@ -38,8 +38,8 @@ public class ZeppelinDevServer extends
 
   private DevInterpreter interpreter = null;
   private InterpreterOutput out;
-  public ZeppelinDevServer(int port) throws TException {
-    super(port);
+  public ZeppelinDevServer(int port) throws TException, IOException {
+    super(null, port);
   }
 
   @Override

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServerTest.java
Patch:
@@ -42,7 +42,7 @@ public void tearDown() throws Exception {
 
   @Test
   public void testStartStop() throws InterruptedException, IOException, TException {
-    RemoteInterpreterServer server = new RemoteInterpreterServer(
+    RemoteInterpreterServer server = new RemoteInterpreterServer("localhost",
         RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces());
     assertEquals(false, server.isRunning());
 
@@ -90,8 +90,8 @@ public void run() {
 
   @Test
   public void testStartStopWithQueuedEvents() throws InterruptedException, IOException, TException {
-    RemoteInterpreterServer server = new RemoteInterpreterServer(
-        RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces());
+    RemoteInterpreterServer server = new RemoteInterpreterServer("localhost",
+        RemoteInterpreterUtils.findRandomAvailablePortOnAllLocalInterfaces(), true);
     assertEquals(false, server.isRunning());
 
     server.start();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -705,7 +705,8 @@ RemoteInterpreterProcess createInterpreterProcess() {
       // create new remote process
       remoteInterpreterProcess = new RemoteInterpreterManagedProcess(
           interpreterRunner != null ? interpreterRunner.getPath() :
-              conf.getInterpreterRemoteRunnerPath(), interpreterDir, localRepoPath,
+              conf.getInterpreterRemoteRunnerPath(), conf.getCallbackPortRange(),
+          interpreterDir, localRepoPath,
           getEnvFromInterpreterProperty(getJavaProperties()), connectTimeout,
           remoteInterpreterProcessListener, appEventListener, group);
     }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -357,16 +357,16 @@ public void testSchedule() throws InterruptedException, IOException {
     config.put("cron", "* * * * * ?");
     note.setConfig(config);
     notebook.refreshCron(note.getId());
-    Thread.sleep(1 * 1000);
+    Thread.sleep(2 * 1000);
 
     // remove cron scheduler.
     config.put("cron", null);
     note.setConfig(config);
     notebook.refreshCron(note.getId());
-    Thread.sleep(1000);
+    Thread.sleep(2 * 1000);
     dateFinished = p.getDateFinished();
     assertNotNull(dateFinished);
-    Thread.sleep(1 * 1000);
+    Thread.sleep(2 * 1000);
     assertEquals(dateFinished, p.getDateFinished());
     notebook.removeNote(note.getId(), anonymous);
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/GetUserList.java
Patch:
@@ -202,6 +202,7 @@ public List<String> getUserList(ActiveDirectoryGroupRealm r, String searchText)
    */
   public List<String> getUserList(JdbcRealm obj) {
     List<String> userlist = new ArrayList<>();
+    Connection con = null;
     PreparedStatement ps = null;
     ResultSet rs = null;
     DataSource dataSource = null;
@@ -239,7 +240,7 @@ public List<String> getUserList(JdbcRealm obj) {
     }
 
     try {
-      Connection con = dataSource.getConnection();
+      con = dataSource.getConnection();
       ps = con.prepareStatement(userquery);
       ps.setString(1, username);
       ps.setString(2, tablename);
@@ -252,6 +253,7 @@ public List<String> getUserList(JdbcRealm obj) {
     } finally {
       JdbcUtils.closeResultSet(rs);
       JdbcUtils.closeStatement(ps);
+      JdbcUtils.closeConnection(con);
     }
     return userlist;
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/server/CorsFilterTest.java
Patch:
@@ -58,7 +58,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
                 count++;
                 return null;
             }
-        }).when(mockResponse).addHeader(anyString(), anyString());
+        }).when(mockResponse).setHeader(anyString(), anyString());
 
         filter.doFilter(mockRequest, mockResponse, mockedFilterChain);
         Assert.assertTrue(headers[0].equals("http://localhost:8080"));
@@ -82,7 +82,7 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
                 count++;
                 return null;
             }
-        }).when(mockResponse).addHeader(anyString(), anyString());
+        }).when(mockResponse).setHeader(anyString(), anyString());
 
         filter.doFilter(mockRequest, mockResponse, mockedFilterChain);
         Assert.assertTrue(headers[0].equals(""));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -149,7 +149,6 @@ public Scheduler getScheduler() {
 
   @ZeppelinApi
   public Interpreter(Properties property) {
-    logger.debug("Properties: {}", property);
     this.property = property;
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableDataProxy.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.tabledata;
 
 import org.apache.zeppelin.resource.Resource;
-import org.apache.zeppelin.resource.ResourcePoolUtils;
 
 import java.util.Iterator;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/Util.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.util;
 
-import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang.StringUtils;
 
 import java.io.IOException;
 import java.util.Properties;

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtilsTest.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.zeppelin.interpreter.remote;
 
-import static org.junit.Assert.assertTrue;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils;
-import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 public class RemoteInterpreterUtilsTest {
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -185,7 +185,7 @@ public Response restartSetting(String message, @PathParam("settingId") String se
 
       String noteId = request == null ? null : request.getNoteId();
       if (null == noteId) {
-        interpreterSettingManager.close(setting);
+        interpreterSettingManager.close(settingId);
       } else {
         interpreterSettingManager.restart(settingId, noteId, SecurityUtils.getPrincipal());
       }
@@ -208,7 +208,7 @@ public Response restartSetting(String message, @PathParam("settingId") String se
   @GET
   @ZeppelinApi
   public Response listInterpreter(String message) {
-    Map<String, InterpreterSetting> m = interpreterSettingManager.getAvailableInterpreterSettings();
+    Map<String, InterpreterSetting> m = interpreterSettingManager.getInterpreterSettingTemplates();
     return new JsonResponse<>(Status.OK, "", m).build();
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -80,7 +80,7 @@ public void getAvailableInterpreters() throws IOException {
 
     // then
     assertThat(get, isAllowed());
-    assertEquals(ZeppelinServer.notebook.getInterpreterSettingManager().getAvailableInterpreterSettings().size(),
+    assertEquals(ZeppelinServer.notebook.getInterpreterSettingManager().getInterpreterSettingTemplates().size(),
         body.entrySet().size());
     get.releaseConnection();
   }
@@ -110,7 +110,7 @@ public void testGetNonExistInterpreterSetting() throws IOException {
   @Test
   public void testSettingsCRUD() throws IOException {
     // when: call create setting API
-    String rawRequest = "{\"name\":\"md2\",\"group\":\"md\"," +
+    String rawRequest = "{\"name\":\"md3\",\"group\":\"md\"," +
         "\"properties\":{\"propname\": {\"value\": \"propvalue\", \"name\": \"propname\", \"type\": \"textarea\"}}," +
         "\"interpreterGroup\":[{\"class\":\"org.apache.zeppelin.markdown.Markdown\",\"name\":\"md\"}]," +
         "\"dependencies\":[]," +
@@ -367,7 +367,7 @@ public void testAddDeleteRepository() throws IOException {
 
   @Test
   public void testGetMetadataInfo() throws IOException {
-    String jsonRequest = "{\"name\":\"spark\",\"group\":\"spark\"," +
+    String jsonRequest = "{\"name\":\"spark_new\",\"group\":\"spark\"," +
             "\"properties\":{\"propname\": {\"value\": \"propvalue\", \"name\": \"propname\", \"type\": \"textarea\"}}," +
             "\"interpreterGroup\":[{\"class\":\"org.apache.zeppelin.markdown.Markdown\",\"name\":\"md\"}]," +
             "\"dependencies\":[]," +

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/install/InstallInterpreter.java
Patch:
@@ -17,19 +17,17 @@
 package org.apache.zeppelin.interpreter.install;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.log4j.ConsoleAppender;
-import org.apache.log4j.Logger;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.dep.DependencyResolver;
 import org.apache.zeppelin.util.Util;
 import org.sonatype.aether.RepositoryException;
+
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
-import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/AppendOutputRunner.java
Patch:
@@ -17,16 +17,16 @@
 
 package org.apache.zeppelin.interpreter.remote;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 /**
  * This thread sends paragraph's append-data
  * periodically, rather than continously, with

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener.java
Patch:
@@ -41,5 +41,5 @@ public interface RemoteWorksEventListener {
     public void onError();
   }
   public void onParaInfosReceived(String noteId, String paragraphId,
-      String interpreterSettingId, Map<String, String> metaInfos);
+                                  String interpreterSettingId, Map<String, String> metaInfos);
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ApplicationState.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.notebook;
 
 import org.apache.zeppelin.helium.HeliumPackage;
-import org.apache.zeppelin.interpreter.InterpreterGroup;
 
 /**
  * Current state of application

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -258,6 +258,8 @@ public void testGroupPermission() throws Exception {
           MAX_BROWSER_TIMEOUT_SEC).sendKeys("finance ");
       pollingWait(By.xpath(".//*[@id='selectReaders']/following::span//input"),
           MAX_BROWSER_TIMEOUT_SEC).sendKeys("finance ");
+      pollingWait(By.xpath(".//*[@id='selectRunners']/following::span//input"),
+              MAX_BROWSER_TIMEOUT_SEC).sendKeys("finance ");
       pollingWait(By.xpath(".//*[@id='selectWriters']/following::span//input"),
           MAX_BROWSER_TIMEOUT_SEC).sendKeys("finance ");
       pollingWait(By.xpath("//button[@ng-click='savePermissions()']"), MAX_BROWSER_TIMEOUT_SEC)

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -149,6 +149,7 @@ public Scheduler getScheduler() {
 
   @ZeppelinApi
   public Interpreter(Properties property) {
+    logger.debug("Properties: {}", property);
     this.property = property;
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterProperty.java
Patch:
@@ -34,7 +34,6 @@ public InterpreterProperty(String name, Object value, String type) {
   public InterpreterProperty(String name, Object value) {
     this.name = name;
     this.value = value;
-    this.type = "textarea";
   }
 
   public String getName() {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableDataProxy.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.zeppelin.tabledata;
 
 import org.apache.zeppelin.resource.Resource;
+import org.apache.zeppelin.resource.ResourcePoolUtils;
 
 import java.util.Iterator;
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -185,7 +185,7 @@ public Response restartSetting(String message, @PathParam("settingId") String se
 
       String noteId = request == null ? null : request.getNoteId();
       if (null == noteId) {
-        interpreterSettingManager.close(settingId);
+        interpreterSettingManager.close(setting);
       } else {
         interpreterSettingManager.restart(settingId, noteId, SecurityUtils.getPrincipal());
       }
@@ -208,7 +208,7 @@ public Response restartSetting(String message, @PathParam("settingId") String se
   @GET
   @ZeppelinApi
   public Response listInterpreter(String message) {
-    Map<String, InterpreterSetting> m = interpreterSettingManager.getInterpreterSettingTemplates();
+    Map<String, InterpreterSetting> m = interpreterSettingManager.getAvailableInterpreterSettings();
     return new JsonResponse<>(Status.OK, "", m).build();
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -80,7 +80,7 @@ public void getAvailableInterpreters() throws IOException {
 
     // then
     assertThat(get, isAllowed());
-    assertEquals(ZeppelinServer.notebook.getInterpreterSettingManager().getInterpreterSettingTemplates().size(),
+    assertEquals(ZeppelinServer.notebook.getInterpreterSettingManager().getAvailableInterpreterSettings().size(),
         body.entrySet().size());
     get.releaseConnection();
   }
@@ -110,7 +110,7 @@ public void testGetNonExistInterpreterSetting() throws IOException {
   @Test
   public void testSettingsCRUD() throws IOException {
     // when: call create setting API
-    String rawRequest = "{\"name\":\"md3\",\"group\":\"md\"," +
+    String rawRequest = "{\"name\":\"md2\",\"group\":\"md\"," +
         "\"properties\":{\"propname\": {\"value\": \"propvalue\", \"name\": \"propname\", \"type\": \"textarea\"}}," +
         "\"interpreterGroup\":[{\"class\":\"org.apache.zeppelin.markdown.Markdown\",\"name\":\"md\"}]," +
         "\"dependencies\":[]," +
@@ -367,7 +367,7 @@ public void testAddDeleteRepository() throws IOException {
 
   @Test
   public void testGetMetadataInfo() throws IOException {
-    String jsonRequest = "{\"name\":\"spark_new\",\"group\":\"spark\"," +
+    String jsonRequest = "{\"name\":\"spark\",\"group\":\"spark\"," +
             "\"properties\":{\"propname\": {\"value\": \"propvalue\", \"name\": \"propname\", \"type\": \"textarea\"}}," +
             "\"interpreterGroup\":[{\"class\":\"org.apache.zeppelin.markdown.Markdown\",\"name\":\"md\"}]," +
             "\"dependencies\":[]," +

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/install/InstallInterpreter.java
Patch:
@@ -17,17 +17,19 @@
 package org.apache.zeppelin.interpreter.install;
 
 import org.apache.commons.io.FileUtils;
+import org.apache.log4j.ConsoleAppender;
+import org.apache.log4j.Logger;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.dep.DependencyResolver;
 import org.apache.zeppelin.util.Util;
 import org.sonatype.aether.RepositoryException;
-
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
+import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ApplicationState.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.zeppelin.notebook;
 
 import org.apache.zeppelin.helium.HeliumPackage;
+import org.apache.zeppelin.interpreter.InterpreterGroup;
 
 /**
  * Current state of application

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/util/Util.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.util;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import java.io.IOException;
 import java.util.Properties;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtilsTest.java
Patch:
@@ -17,11 +17,12 @@
 
 package org.apache.zeppelin.interpreter.remote;
 
-import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 import java.io.IOException;
 
-import static org.junit.Assert.assertTrue;
+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils;
+import org.junit.Test;
 
 public class RemoteInterpreterUtilsTest {
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -149,7 +149,6 @@ public Scheduler getScheduler() {
 
   @ZeppelinApi
   public Interpreter(Properties property) {
-    logger.debug("Properties: {}", property);
     this.property = property;
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterProperty.java
Patch:
@@ -34,6 +34,7 @@ public InterpreterProperty(String name, Object value, String type) {
   public InterpreterProperty(String name, Object value) {
     this.name = name;
     this.value = value;
+    this.type = "textarea";
   }
 
   public String getName() {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/install/InstallInterpreter.java
Patch:
@@ -17,19 +17,17 @@
 package org.apache.zeppelin.interpreter.install;
 
 import org.apache.commons.io.FileUtils;
-import org.apache.log4j.ConsoleAppender;
-import org.apache.log4j.Logger;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.dep.DependencyResolver;
 import org.apache.zeppelin.util.Util;
 import org.sonatype.aether.RepositoryException;
+
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Locale;
-import java.util.Map;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/tabledata/TableDataProxy.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.tabledata;
 
 import org.apache.zeppelin.resource.Resource;
-import org.apache.zeppelin.resource.ResourcePoolUtils;
 
 import java.util.Iterator;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/util/Util.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.util;
 
-import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang.StringUtils;
 
 import java.io.IOException;
 import java.util.Properties;

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtilsTest.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.apache.zeppelin.interpreter.remote;
 
-import static org.junit.Assert.assertTrue;
+import org.junit.Test;
 
 import java.io.IOException;
 
-import org.apache.zeppelin.interpreter.remote.RemoteInterpreterUtils;
-import org.junit.Test;
+import static org.junit.Assert.assertTrue;
 
 public class RemoteInterpreterUtilsTest {
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -185,7 +185,7 @@ public Response restartSetting(String message, @PathParam("settingId") String se
 
       String noteId = request == null ? null : request.getNoteId();
       if (null == noteId) {
-        interpreterSettingManager.close(setting);
+        interpreterSettingManager.close(settingId);
       } else {
         interpreterSettingManager.restart(settingId, noteId, SecurityUtils.getPrincipal());
       }
@@ -208,7 +208,7 @@ public Response restartSetting(String message, @PathParam("settingId") String se
   @GET
   @ZeppelinApi
   public Response listInterpreter(String message) {
-    Map<String, InterpreterSetting> m = interpreterSettingManager.getAvailableInterpreterSettings();
+    Map<String, InterpreterSetting> m = interpreterSettingManager.getInterpreterSettingTemplates();
     return new JsonResponse<>(Status.OK, "", m).build();
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -80,7 +80,7 @@ public void getAvailableInterpreters() throws IOException {
 
     // then
     assertThat(get, isAllowed());
-    assertEquals(ZeppelinServer.notebook.getInterpreterSettingManager().getAvailableInterpreterSettings().size(),
+    assertEquals(ZeppelinServer.notebook.getInterpreterSettingManager().getInterpreterSettingTemplates().size(),
         body.entrySet().size());
     get.releaseConnection();
   }
@@ -110,7 +110,7 @@ public void testGetNonExistInterpreterSetting() throws IOException {
   @Test
   public void testSettingsCRUD() throws IOException {
     // when: call create setting API
-    String rawRequest = "{\"name\":\"md2\",\"group\":\"md\"," +
+    String rawRequest = "{\"name\":\"md3\",\"group\":\"md\"," +
         "\"properties\":{\"propname\": {\"value\": \"propvalue\", \"name\": \"propname\", \"type\": \"textarea\"}}," +
         "\"interpreterGroup\":[{\"class\":\"org.apache.zeppelin.markdown.Markdown\",\"name\":\"md\"}]," +
         "\"dependencies\":[]," +
@@ -367,7 +367,7 @@ public void testAddDeleteRepository() throws IOException {
 
   @Test
   public void testGetMetadataInfo() throws IOException {
-    String jsonRequest = "{\"name\":\"spark\",\"group\":\"spark\"," +
+    String jsonRequest = "{\"name\":\"spark_new\",\"group\":\"spark\"," +
             "\"properties\":{\"propname\": {\"value\": \"propvalue\", \"name\": \"propname\", \"type\": \"textarea\"}}," +
             "\"interpreterGroup\":[{\"class\":\"org.apache.zeppelin.markdown.Markdown\",\"name\":\"md\"}]," +
             "\"dependencies\":[]," +

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/ApplicationState.java
Patch:
@@ -17,7 +17,6 @@
 package org.apache.zeppelin.notebook;
 
 import org.apache.zeppelin.helium.HeliumPackage;
-import org.apache.zeppelin.interpreter.InterpreterGroup;
 
 /**
  * Current state of application

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterMatplotlibTest.java
Patch:
@@ -53,6 +53,7 @@ public void setUp() throws Exception {
     Properties p = new Properties();
     p.setProperty("zeppelin.python", "python");
     p.setProperty("zeppelin.python.maxResult", "100");
+    p.setProperty("zeppelin.python.useIPython", "false");
 
     intpGroup = new InterpreterGroup();
 

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterTest.java
Patch:
@@ -59,6 +59,7 @@ public static Properties getPythonTestProperties() {
     Properties p = new Properties();
     p.setProperty(ZEPPELIN_PYTHON, DEFAULT_ZEPPELIN_PYTHON);
     p.setProperty(MAX_RESULT, "1000");
+    p.setProperty("zeppelin.python.useIPython", "false");
     return p;
   }
 
@@ -85,6 +86,7 @@ public void beforeTest() throws IOException {
         new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),
         out);
+    InterpreterContext.set(context);
     pythonInterpreter.open();
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/util/InterpreterOutputStream.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class InterpreterOutputStream extends LogOutputStream {
   private Logger logger;
-  InterpreterOutput interpreterOutput;
+  volatile InterpreterOutput interpreterOutput;
   boolean ignoreLeadingNewLinesFromScalaReporter = false;
 
   public InterpreterOutputStream(Logger logger) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -141,6 +141,7 @@ public Boolean apply(WebDriver d) {
       fail();
     }
 
+    driver.manage().window().maximize();
     return driver;
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -138,7 +138,7 @@ public void testPySpark() throws Exception {
       WebElement paragraph1Result = driver.findElement(By.xpath(
           getParagraphXPath(1) + "//div[contains(@id,\"_text\")]"));
       collector.checkThat("Paragraph from SparkParagraphIT of testPySpark result: ",
-          paragraph1Result.getText().toString(), CoreMatchers.equalTo("test loop 0\ntest loop 1\ntest loop 2")
+          paragraph1Result.getText().toString(), CoreMatchers.containsString("test loop 0\ntest loop 1\ntest loop 2")
       );
 
       // the last statement's evaluation result is printed

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -211,6 +211,7 @@ private static void start(boolean withAuth) throws Exception {
         // set spark home for pyspark
         sparkProperties.put("spark.home",
             new InterpreterProperty("spark.home", getSparkHome(), InterpreterPropertyType.TEXTAREA.getValue()));
+        sparkProperties.put("zeppelin.spark.useIPython",  new InterpreterProperty("zeppelin.spark.useIPython", "false", InterpreterPropertyType.TEXTAREA.getValue()));
 
         sparkIntpSetting.setProperties(sparkProperties);
         pySpark = true;
@@ -233,6 +234,8 @@ private static void start(boolean withAuth) throws Exception {
               new InterpreterProperty("spark.home", sparkHome, InterpreterPropertyType.TEXTAREA.getValue()));
           sparkProperties.put("zeppelin.spark.useHiveContext",
               new InterpreterProperty("zeppelin.spark.useHiveContext", false, InterpreterPropertyType.CHECKBOX.getValue()));
+          sparkProperties.put("zeppelin.spark.useIPython",  new InterpreterProperty("zeppelin.spark.useIPython", "false", InterpreterPropertyType.TEXTAREA.getValue()));
+
           pySpark = true;
           sparkR = true;
         }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -829,7 +829,7 @@ public List<Map<String, Object>> getJobListByUnixTime(boolean needsReload,
 
         // get data for the job manager.
         Map<String, Object> paragraphItem = getParagraphForJobManagerItem(paragraph);
-        lastRunningUnixTime = getUnixTimeLastRunParagraph(paragraph);
+        lastRunningUnixTime = Math.max(getUnixTimeLastRunParagraph(paragraph), lastRunningUnixTime);
 
         // is update note for last server update time.
         if (lastRunningUnixTime > lastUpdateServerUnixTime) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -106,6 +106,7 @@ public class Note implements ParagraphJobListener, JsonSerializable {
 
 
   public Note() {
+    generateId();
   }
 
   public Note(NotebookRepo repo, InterpreterFactory factory,

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java
Patch:
@@ -81,6 +81,7 @@ public NotebookRepoSync(ZeppelinConfiguration conf) {
         Constructor<?> constructor = notebookStorageClass.getConstructor(
             ZeppelinConfiguration.class);
         repos.add((NotebookRepo) constructor.newInstance(conf));
+        LOG.info("Instantiate NotebookRepo: " + storageClassNames[i]);
       } catch (ClassNotFoundException | NoSuchMethodException | SecurityException |
           InstantiationException | IllegalAccessException | IllegalArgumentException |
           InvocationTargetException e) {

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/SqlCompleter.java
Patch:
@@ -179,7 +179,8 @@ private static Set<String> getCatalogNames(DatabaseMetaData meta, List<String> s
 
 
   private static void fillTableNames(String schema, DatabaseMetaData meta, Set<String> tables) {
-    try (ResultSet tbls = meta.getTables(schema, schema, "%", null)) {
+    try (ResultSet tbls = meta.getTables(schema, schema, "%",
+        new String[]{"TABLE", "VIEW", "ALIAS", "SYNONYM", "GLOBAL TEMPORARY", "LOCAL TEMPORARY"})) {
       while (tbls.next()) {
         String table = tbls.getString("TABLE_NAME");
         tables.add(table);

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java
Patch:
@@ -24,7 +24,6 @@
 import org.apache.ignite.Ignition;
 import org.apache.ignite.configuration.CacheConfiguration;
 import org.apache.ignite.configuration.IgniteConfiguration;
-import org.apache.ignite.marshaller.optimized.OptimizedMarshaller;
 import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
 import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;
 import org.apache.zeppelin.interpreter.InterpreterContext;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java
Patch:
@@ -193,11 +193,11 @@ public void run() {
           String paragraphId = (String) outputUpdate.get("paragraphId");
 
           // clear the output
-          listener.onOutputClear(noteId, paragraphId);
           List<Map<String, String>> messages =
               (List<Map<String, String>>) outputUpdate.get("messages");
 
           if (messages != null) {
+            listener.onOutputClear(noteId, paragraphId);
             for (int i = 0; i < messages.size(); i++) {
               Map<String, String> m = messages.get(i);
               InterpreterResult.Type type =

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -40,6 +40,7 @@ abstract public class AbstractZeppelinIT {
   protected static WebDriver driver;
 
   protected final static Logger LOG = LoggerFactory.getLogger(AbstractZeppelinIT.class);
+  protected static final long MIN_IMPLICIT_WAIT = 5;
   protected static final long MAX_IMPLICIT_WAIT = 30;
   protected static final long MAX_BROWSER_TIMEOUT_SEC = 30;
   protected static final long MAX_PARAGRAPH_TIMEOUT_SEC = 120;

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1186,6 +1186,9 @@ private void updateParagraph(NotebookSocket conn, HashSet<String> userAndRoles,
     Map<String, Object> params = (Map<String, Object>) fromMessage.get("params");
     Map<String, Object> config = (Map<String, Object>) fromMessage.get("config");
     String noteId = getOpenNoteId(conn);
+    if (noteId == null) {
+      noteId = (String) fromMessage.get("noteId");
+    }
 
     if (!hasParagraphWriterPermission(conn, notebook, noteId,
         userAndRoles, fromMessage.principal, "write")) {

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -20,6 +20,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.io.File;
 import java.util.List;
 import java.util.Properties;
 import java.util.concurrent.ConcurrentHashMap;
@@ -98,6 +99,7 @@ public InterpreterResult interpret(String cmd, InterpreterContext contextInterpr
         contextInterpreter.out, contextInterpreter.out));
       executor.setWatchdog(new ExecuteWatchdog(Long.valueOf(getProperty(TIMEOUT_PROPERTY))));
       executors.put(contextInterpreter.getParagraphId(), executor);
+      executor.setWorkingDirectory(new File(System.getProperty("user.home")));
       int exitVal = executor.execute(cmdLine);
       LOGGER.info("Paragraph " + contextInterpreter.getParagraphId() 
         + " return with exit value: " + exitVal);

File: zeppelin-jupyter/src/main/java/org/apache/zeppelin/jupyter/nbformat/Cell.java
Patch:
@@ -31,7 +31,7 @@ public abstract class Cell {
   private CellMetadata metadata;
 
   @SerializedName("source")
-  private List<String> source;
+  private Object source;
 
   public String getCellType() {
     return cellType;
@@ -41,7 +41,7 @@ public CellMetadata getMetadata() {
     return metadata;
   }
 
-  public List<String> getSource() {
+  public Object getSource() {
     return source;
   }
 }

File: zeppelin-jupyter/src/main/java/org/apache/zeppelin/jupyter/zformat/Result.java
Patch:
@@ -24,6 +24,7 @@
  */
 public class Result {
   public static final String SUCCESS = "SUCCESS";
+  public static final String ERROR = "ERROR";
 
   @SerializedName("code")
   private String code;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -151,8 +151,8 @@ private Map<String, String> getEnvFromInterpreterProperty(Properties property) {
         sparkConfBuilder.append(" --master " + property.getProperty("master"));
       }
       if (isSparkConf(key, property.getProperty(key))) {
-        sparkConfBuilder.append(" --conf " + key + "=\"" +
-            toShellFormat(property.getProperty(key)) + "\"");
+        sparkConfBuilder.append(" --conf " + key + "=" +
+            toShellFormat(property.getProperty(key)));
       }
     }
     env.put("ZEPPELIN_SPARK_CONF", sparkConfBuilder.toString());

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/HeliumPackageTest.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.zeppelin.helium;
 
-import com.google.gson.Gson;
 import org.junit.Test;
 
 import java.util.Map;
@@ -26,8 +25,6 @@
 
 public class HeliumPackageTest {
 
-  private Gson gson = new Gson();
-
   @Test
   public void parseSpellPackageInfo() {
     String examplePackage = "{\n" +

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java
Patch:
@@ -402,7 +402,7 @@ public synchronized File buildPackage(HeliumPackage pkg,
 
     String[] moduleNameVersion = getNpmModuleNameAndVersion(pkg);
     if (moduleNameVersion == null) {
-      logger.error("Can't get module name and version of package " + pkg.getName());
+      logger.warn("Can't get module name and version of package " + pkg.getName());
       return null;
     }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumLocalRegistry.java
Patch:
@@ -25,15 +25,14 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.StringReader;
-import java.net.URI;
 import java.util.LinkedList;
 import java.util.List;
 
 /**
  * Simple Helium registry on local filesystem
  */
 public class HeliumLocalRegistry extends HeliumRegistry {
-  Logger logger = LoggerFactory.getLogger(HeliumLocalRegistry.class);
+  private Logger logger = LoggerFactory.getLogger(HeliumLocalRegistry.class);
 
   private final Gson gson;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumOnlineRegistry.java
Patch:
@@ -51,7 +51,7 @@
  * ]
  */
 public class HeliumOnlineRegistry extends HeliumRegistry {
-  Logger logger = LoggerFactory.getLogger(HeliumOnlineRegistry.class);
+  private Logger logger = LoggerFactory.getLogger(HeliumOnlineRegistry.class);
   private final Gson gson;
   private final File registryCacheFile;
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumTestApplication.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 public class HeliumTestApplication extends Application {
-  AtomicInteger numRun = new AtomicInteger(0);
+  private AtomicInteger numRun = new AtomicInteger(0);
   public HeliumTestApplication(ApplicationContext context) {
     super(context);
   }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumTestRegistry.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 
 public class HeliumTestRegistry extends HeliumRegistry {
-  List<HeliumPackage> infos = new LinkedList<>();
+  private List<HeliumPackage> infos = new LinkedList<>();
 
   public HeliumTestRegistry(String name, String uri) {
     super(name, uri);

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -155,7 +155,8 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr
   public void testImportNotebook() throws IOException {
     String msg = "{\"op\":\"IMPORT_NOTE\",\"data\":" +
         "{\"note\":{\"paragraphs\": [{\"text\": \"Test " +
-        "paragraphs import\",\"config\":{},\"settings\":{}}]," +
+        "paragraphs import\"," + "\"progressUpdateIntervalMs\":500," +
+        "\"config\":{},\"settings\":{}}]," +
         "\"name\": \"Test Zeppelin notebook import\",\"config\": " +
         "{}}}}";
     Message messageReceived = notebookServer.deserializeMessage(msg);

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/GetUserList.java
Patch:
@@ -231,7 +231,7 @@ public List<String> getUserList(JdbcRealm obj) {
         return userlist;
       }
 
-      userquery = "select " + username + " from " + tablename;
+      userquery = "select ? from ?";
 
     } catch (IllegalAccessException e) {
       LOG.error("Error while accessing dataSource for JDBC Realm", e);
@@ -241,6 +241,8 @@ public List<String> getUserList(JdbcRealm obj) {
     try {
       Connection con = dataSource.getConnection();
       ps = con.prepareStatement(userquery);
+      ps.setString(1, username);
+      ps.setString(2, tablename);
       rs = ps.executeQuery();
       while (rs.next()) {
         userlist.add(rs.getString(1).trim());

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -107,7 +107,7 @@ protected void createNewNote() {
         " note')]"));
 
     WebDriverWait block = new WebDriverWait(driver, MAX_BROWSER_TIMEOUT_SEC);
-    block.until(ExpectedConditions.visibilityOfElementLocated(By.id("noteNameModal")));
+    block.until(ExpectedConditions.visibilityOfElementLocated(By.id("noteCreateModal")));
     clickAndWait(By.id("createNoteButton"));
     block.until(ExpectedConditions.invisibilityOfElementLocated(By.className("pull-right")));
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -125,7 +125,7 @@ public void authenticationUser(String userName, String password) {
     ZeppelinITUtils.sleep(1000, false);
     pollingWait(By.xpath("//*[@id='userName']"), MAX_BROWSER_TIMEOUT_SEC).sendKeys(userName);
     pollingWait(By.xpath("//*[@id='password']"), MAX_BROWSER_TIMEOUT_SEC).sendKeys(password);
-    pollingWait(By.xpath("//*[@id='NoteImportCtrl']//button[contains(.,'Login')]"),
+    pollingWait(By.xpath("//*[@id='loginModalContent']//button[contains(.,'Login')]"),
         MAX_BROWSER_TIMEOUT_SEC).click();
     ZeppelinITUtils.sleep(1000, false);
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/InterpreterModeActionsIT.java
Patch:
@@ -139,7 +139,7 @@ private void authenticationUser(String userName, String password) {
     ZeppelinITUtils.sleep(500, false);
     pollingWait(By.xpath("//*[@id='userName']"), MAX_BROWSER_TIMEOUT_SEC).sendKeys(userName);
     pollingWait(By.xpath("//*[@id='password']"), MAX_BROWSER_TIMEOUT_SEC).sendKeys(password);
-    pollingWait(By.xpath("//*[@id='NoteImportCtrl']//button[contains(.,'Login')]"),
+    pollingWait(By.xpath("//*[@id='loginModalContent']//button[contains(.,'Login')]"),
         MAX_BROWSER_TIMEOUT_SEC).click();
     ZeppelinITUtils.sleep(1000, false);
   }

File: spark/src/main/java/org/apache/zeppelin/spark/SparkVersion.java
Patch:
@@ -34,10 +34,10 @@ public class SparkVersion {
   public static final SparkVersion SPARK_1_6_0 = SparkVersion.fromVersionString("1.6.0");
 
   public static final SparkVersion SPARK_2_0_0 = SparkVersion.fromVersionString("2.0.0");
-  public static final SparkVersion SPARK_2_2_0 = SparkVersion.fromVersionString("2.2.0");
+  public static final SparkVersion SPARK_2_3_0 = SparkVersion.fromVersionString("2.3.0");
 
   public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_1_0_0;
-  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_2_2_0;
+  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_2_3_0;
 
   private int version;
   private String versionString;

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/CorsFilter.java
Patch:
@@ -80,6 +80,7 @@ private void addCorsHeaders(HttpServletResponse response, String origin) {
     DateFormat fullDateFormatEN =
         DateFormat.getDateTimeInstance(DateFormat.FULL, DateFormat.FULL, new Locale("EN", "en"));
     response.addHeader("Date", fullDateFormatEN.format(new Date()));
+    response.addHeader("X-FRAME-OPTIONS", ZeppelinConfiguration.create().getXFrameOptions());
   }
 
   @Override

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterpreter.java
Patch:
@@ -89,7 +89,7 @@ public BaseLivyInterpreter(Properties property) {
     super(property);
     this.livyURL = property.getProperty("zeppelin.livy.url");
     this.displayAppInfo = Boolean.parseBoolean(
-        property.getProperty("zeppelin.livy.displayAppInfo", "false"));
+        property.getProperty("zeppelin.livy.displayAppInfo", "true"));
     this.sessionCreationTimeout = Integer.parseInt(
         property.getProperty("zeppelin.livy.session.create_timeout", 120 + ""));
     this.pullStatusInterval = Integer.parseInt(

File: livy/src/test/java/org/apache/zeppelin/livy/LivyInterpreterIT.java
Patch:
@@ -51,6 +51,7 @@ public static void setUp() {
     properties.setProperty("zeppelin.livy.url", cluster.livyEndpoint());
     properties.setProperty("zeppelin.livy.session.create_timeout", "120");
     properties.setProperty("zeppelin.livy.spark.sql.maxResult", "100");
+    properties.setProperty("zeppelin.livy.displayAppInfo", "false");
   }
 
   @AfterClass

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/security/Authentication.java
Patch:
@@ -134,7 +134,6 @@ public boolean authenticate() {
 
   // returns login:password
   private String getAuthKey(String userKey) {
-    LOG.debug("Encrypted user key is {}", userKey);
     if (StringUtils.isBlank(userKey)) {
       LOG.warn("ZEPPELINHUB_USER_KEY is blank");
       return StringUtils.EMPTY;
@@ -145,7 +144,6 @@ private String getAuthKey(String userKey) {
   }
 
   private String decrypt(String value, String initVector) {
-    LOG.debug("IV is {}, IV length is {}", initVector, initVector.length());
     if (StringUtils.isBlank(value) || StringUtils.isBlank(initVector)) {
       LOG.error("String to decode or salt is not provided");
       return StringUtils.EMPTY;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/GetUserList.java
Patch:
@@ -212,7 +212,7 @@ public List<String> getUserList(JdbcRealm obj) {
     String userquery = "";
     try {
       dataSource = (DataSource) FieldUtils.readField(obj, "dataSource", true);
-      authQuery = (String) FieldUtils.readField(obj, "DEFAULT_AUTHENTICATION_QUERY", true);
+      authQuery = (String) FieldUtils.readField(obj, "authenticationQuery", true);
       LOG.info(authQuery);
       String authQueryLowerCase = authQuery.toLowerCase();
       retval = authQueryLowerCase.split("from", 2);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -57,6 +57,7 @@
 import org.apache.zeppelin.notebook.Notebook;
 import org.apache.zeppelin.notebook.NotebookAuthorization;
 import org.apache.zeppelin.notebook.NotebookEventListener;
+import org.apache.zeppelin.notebook.NotebookImportDeserializer;
 import org.apache.zeppelin.notebook.Paragraph;
 import org.apache.zeppelin.notebook.ParagraphJobListener;
 import org.apache.zeppelin.notebook.ParagraphRuntimeInfo;
@@ -129,6 +130,8 @@ protected void beforeWrite(Paragraph source, JsonElement toSerialize) {
           }
         }
       }).setDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")
+      .registerTypeAdapter(Date.class, new NotebookImportDeserializer())
+      .setPrettyPrinting()
       .registerTypeAdapterFactory(Input.TypeAdapterFactory).create();
 
   final Map<String, List<NotebookSocket>> noteSocketMap = new HashMap<>();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -76,6 +76,7 @@ protected void beforeWrite(Paragraph source, JsonElement toSerialize) {
         }
       }).setDateFormat("yyyy-MM-dd HH:mm:ss.SSS")
       .registerTypeAdapter(Date.class, new NotebookImportDeserializer())
+      .setPrettyPrinting()
       .registerTypeAdapterFactory(Input.TypeAdapterFactory).create();
 
   // threadpool for delayed persist of note

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java
Patch:
@@ -186,7 +186,7 @@ public Note get(String noteId, AuthenticationInfo subject) throws IOException {
     }
     String token = getUserToken(subject.getUser());
     String response = restApiClient.get(token, noteId);
-    Note note = GSON.fromJson(response, Note.class);
+    Note note = Note.fromJson(response);
     if (note == null) {
       return EMPTY_NOTE;
     }
@@ -199,7 +199,7 @@ public void save(Note note, AuthenticationInfo subject) throws IOException {
     if (note == null || !isSubjectValid(subject)) {
       throw new IOException("Zeppelinhub failed to save note");
     }
-    String jsonNote = GSON.toJson(note);
+    String jsonNote = note.toJson();
     String token = getUserToken(subject.getUser());
     LOG.info("ZeppelinHub REST API saving note {} ", note.getId());
     restApiClient.put(token, jsonNote);
@@ -245,7 +245,7 @@ public Note get(String noteId, String revId, AuthenticationInfo subject) throws
     String token = getUserToken(subject.getUser());
     String response = restApiClient.get(token, endpoint);
 
-    Note note = GSON.fromJson(response, Note.class);
+    Note note = Note.fromJson(response);
     if (note == null) {
       return EMPTY_NOTE;
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/NewInterpreterSettingRequest.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.zeppelin.common.JsonSerializable;
 import org.apache.zeppelin.dep.Dependency;
 import org.apache.zeppelin.interpreter.InterpreterOption;
+import org.apache.zeppelin.interpreter.InterpreterProperty;
 
 /**
  * NewInterpreterSetting rest api request message
@@ -33,7 +34,7 @@ public class NewInterpreterSettingRequest implements JsonSerializable {
   private String name;
   private String group;
 
-  private Map<String, String> properties;
+  private Map<String, InterpreterProperty> properties;
   private List<Dependency> dependencies;
   private InterpreterOption option;
 
@@ -49,7 +50,7 @@ public String getGroup() {
     return group;
   }
 
-  public Map<String, String> getProperties() {
+  public Map<String, InterpreterProperty> getProperties() {
     return properties;
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/InterpreterIT.java
Patch:
@@ -72,7 +72,7 @@ public void testShowDescriptionOnInterpreterCreate() throws Exception {
       select.selectByVisibleText("spark");
 
       collector.checkThat("description of interpreter property is displayed",
-          driver.findElement(By.xpath("//tr/td[contains(text(), 'spark.app.name')]/following-sibling::td[2]")).getText(),
+          driver.findElement(By.xpath("//tr/td[contains(text(), 'spark.app.name')]/following-sibling::td[3]")).getText(),
           CoreMatchers.equalTo("The name of spark application."));
 
     } catch (Exception e) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -122,7 +122,7 @@ public void createInterpretersForNote(InterpreterSetting interpreterSetting, Str
       String noteId, String interpreterSessionKey) {
     InterpreterGroup interpreterGroup = interpreterSetting.getInterpreterGroup(user, noteId);
     InterpreterOption option = interpreterSetting.getOption();
-    Properties properties = (Properties) interpreterSetting.getProperties();
+    Properties properties = interpreterSetting.getFlatProperties();
     // if interpreters are already there, wait until they're being removed
     synchronized (interpreterGroup) {
       long interpreterRemovalWaitStart = System.nanoTime();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.zeppelin.interpreter.InterpreterFactory;
 import org.apache.zeppelin.interpreter.InterpreterInfo;
 import org.apache.zeppelin.interpreter.InterpreterOption;
+import org.apache.zeppelin.interpreter.DefaultInterpreterProperty;
 import org.apache.zeppelin.interpreter.InterpreterProperty;
 import org.apache.zeppelin.interpreter.InterpreterSettingManager;
 import org.apache.zeppelin.interpreter.mock.MockInterpreter1;
@@ -96,8 +97,8 @@ public void setUp() throws Exception {
     ArrayList<InterpreterInfo> interpreterInfos = new ArrayList<>();
     interpreterInfos.add(new InterpreterInfo(MockInterpreter1.class.getName(), "mock1", true, new HashMap<String, Object>()));
     interpreterSettingManager.add("mock1", interpreterInfos, new ArrayList<Dependency>(), new InterpreterOption(),
-        Maps.<String, InterpreterProperty>newHashMap(), "mock1", null);
-    interpreterSettingManager.createNewSetting("mock1", "mock1", new ArrayList<Dependency>(), new InterpreterOption(), new Properties());
+        Maps.<String, DefaultInterpreterProperty>newHashMap(), "mock1", null);
+    interpreterSettingManager.createNewSetting("mock1", "mock1", new ArrayList<Dependency>(), new InterpreterOption(), new HashMap<String, InterpreterProperty>());
 
     SearchService search = mock(SearchService.class);
     notebookRepo = new VFSNotebookRepo(conf);

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -118,7 +118,7 @@ public static void tearDown() {
     driver.quit();
   }
 
-  private void authenticationUser(String userName, String password) {
+  public void authenticationUser(String userName, String password) {
     pollingWait(By.xpath(
         "//div[contains(@class, 'navbar-collapse')]//li//button[contains(.,'Login')]"),
         MAX_BROWSER_TIMEOUT_SEC).click();
@@ -147,7 +147,7 @@ private void testShowNotebookListOnNavbar() throws Exception {
     }
   }
 
-  private void logoutUser(String userName) throws URISyntaxException {
+  public void logoutUser(String userName) throws URISyntaxException {
     ZeppelinITUtils.sleep(500, false);
     driver.findElement(By.xpath("//div[contains(@class, 'navbar-collapse')]//li[contains(.,'" +
         userName + "')]")).click();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/user/Credentials.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import org.apache.zeppelin.common.JsonSerializable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -118,7 +119,7 @@ private void loadFromFile() {
       fis.close();
 
       String json = sb.toString();
-      CredentialsInfoSaving info = gson.fromJson(json, CredentialsInfoSaving.class);
+      CredentialsInfoSaving info = CredentialsInfoSaving.fromJson(json);
       this.credentialsMap = info.credentialsMap;
     } catch (IOException e) {
       LOG.error("Error loading credentials file", e);

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/HeliumPackageTest.java
Patch:
@@ -43,7 +43,7 @@ public void parseSpellPackageInfo() {
         "  }\n" +
         "}";
 
-    HeliumPackage p = gson.fromJson(examplePackage, HeliumPackage.class);
+    HeliumPackage p = HeliumPackage.fromJson(examplePackage);
     assertEquals(p.getSpellInfo().getMagic(), "%echo");
     assertEquals(p.getSpellInfo().getUsage(), "%echo <TEXT>");
   }
@@ -70,7 +70,7 @@ public void parseConfig() {
         "  }\n" +
         "}";
 
-    HeliumPackage p = gson.fromJson(examplePackage, HeliumPackage.class);
+    HeliumPackage p = HeliumPackage.fromJson(examplePackage);
     Map<String, Object> config = p.getConfig();
     Map<String, Object> accessToken = (Map<String, Object>) config.get("access-token");
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/HeliumRestApi.java
Patch:
@@ -134,7 +134,7 @@ public Response suggest(@PathParam("noteId") String noteId,
       return new JsonResponse(Response.Status.NOT_FOUND, "Paragraph " + paragraphId + " not found")
           .build();
     }
-    HeliumPackage pkg = gson.fromJson(heliumPackage, HeliumPackage.class);
+    HeliumPackage pkg = HeliumPackage.fromJson(heliumPackage);
 
     String appId = helium.getApplicationFactory().loadAndRun(pkg, paragraph);
     return new JsonResponse(Response.Status.OK, "", appId).build();

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -115,7 +115,7 @@ String getKey() {
 
 
   private static final Logger LOG = LoggerFactory.getLogger(NotebookServer.class);
-  Gson gson = new GsonBuilder()
+  private static Gson gson = new GsonBuilder()
       .registerTypeAdapterFactory(new NotebookTypeAdapterFactory<Paragraph>(Paragraph.class) {
         @Override
         protected void beforeWrite(Paragraph source, JsonElement toSerialize) {
@@ -2432,7 +2432,7 @@ private void broadcastToWatchers(String noteId, String subject, Message message)
         try {
           watcher.send(
               WatcherMessage.builder(noteId).subject(subject).message(serializeMessage(message))
-                  .build().serialize());
+                  .build().toJson());
         } catch (IOException e) {
           LOG.error("Cannot broadcast message to watcher", e);
         }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -52,7 +52,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.google.gson.Gson;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParseException;
 import com.google.gson.JsonParser;
@@ -66,7 +65,6 @@ public abstract class AbstractTestRestApi {
   protected static final boolean wasRunning = checkIfServerIsRunning();
   static boolean pySpark = false;
   static boolean sparkR = false;
-  static Gson gson = new Gson();
   static boolean isRunningWithAuth = false;
 
   private static File shiroIni = null;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -39,14 +39,11 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 
-import com.google.gson.Gson;
-
 /**
  * Test against spark cluster.
  * Spark cluster is started by CI server using testing/startSparkCluster.sh
  */
 public class ZeppelinSparkClusterTest extends AbstractTestRestApi {
-    Gson gson = new Gson();
     AuthenticationInfo anonymous;
 
     @BeforeClass

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.apache.zeppelin.helium;
 
-import com.google.gson.Gson;
 import org.apache.thrift.TException;
 import org.apache.zeppelin.interpreter.*;
 import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;
@@ -38,7 +37,6 @@
 public class HeliumApplicationFactory implements ApplicationEventListener, NotebookEventListener {
   private final Logger logger = LoggerFactory.getLogger(HeliumApplicationFactory.class);
   private final ExecutorService executor;
-  private final Gson gson = new Gson();
   private Notebook notebook;
   private ApplicationEventListener applicationEventListener;
 
@@ -117,7 +115,7 @@ private void load(RemoteInterpreterProcess intpProcess, ApplicationState appStat
 
         try {
           appStatusChange(paragraph, appState.getId(), ApplicationState.Status.LOADING);
-          String pkgInfo = gson.toJson(pkg);
+          String pkgInfo = pkg.toJson();
           String appId = appState.getId();
 
           client = intpProcess.getClient();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -515,8 +515,8 @@ private String getInterpreterGroupKey(InterpreterGroup interpreterGroup) {
 
   private RemoteInterpreterContext convert(InterpreterContext ic) {
     return new RemoteInterpreterContext(ic.getNoteId(), ic.getParagraphId(), ic.getReplName(),
-        ic.getParagraphTitle(), ic.getParagraphText(), gson.toJson(ic.getAuthenticationInfo()),
-        gson.toJson(ic.getConfig()), gson.toJson(ic.getGui()), gson.toJson(ic.getRunners()));
+        ic.getParagraphTitle(), ic.getParagraphText(), ic.getAuthenticationInfo().toJson(),
+        gson.toJson(ic.getConfig()), ic.getGui().toJson(), gson.toJson(ic.getRunners()));
   }
 
   private InterpreterResult convert(RemoteInterpreterResult result) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java
Patch:
@@ -110,8 +110,7 @@ private static void loadFromFile() throws IOException {
     fis.close();
 
     String json = sb.toString();
-    NotebookAuthorizationInfoSaving info = gson.fromJson(json,
-            NotebookAuthorizationInfoSaving.class);
+    NotebookAuthorizationInfoSaving info = NotebookAuthorizationInfoSaving.fromJson(json);
     authInfo = info.authInfo;
   }
   

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookImportDeserializer.java
Patch:
@@ -36,7 +36,8 @@ public class NotebookImportDeserializer implements JsonDeserializer<Date> {
   private static final String[] DATE_FORMATS = new String[] {
     "yyyy-MM-dd'T'HH:mm:ssZ",
     "MMM d, yyyy h:mm:ss a",
-    "MMM dd, yyyy HH:mm:ss"
+    "MMM dd, yyyy HH:mm:ss",
+    "yyyy-MM-dd HH:mm:ss.SSS"
   };
 
   @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinhubClient.java
Patch:
@@ -195,7 +195,7 @@ private void addRoutines() {
   }
 
   public void handleMsgFromZeppelinHub(String message) {
-    ZeppelinhubMessage hubMsg = ZeppelinhubMessage.deserialize(message);
+    ZeppelinhubMessage hubMsg = ZeppelinhubMessage.fromJson(message);
     if (hubMsg.equals(ZeppelinhubMessage.EMPTY)) {
       LOG.error("Cannot handle ZeppelinHub message is empty");
       return;

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -328,8 +328,9 @@ private static void setupRestApiContextHandler(WebAppContext webapp,
     String shiroIniPath = conf.getShiroPath();
     if (!StringUtils.isBlank(shiroIniPath)) {
       webapp.setInitParameter("shiroConfigLocations", new File(shiroIniPath).toURI().toString());
-      SecurityUtils.initSecurityManager(shiroIniPath);
-      webapp.addFilter(ShiroFilter.class, "/api/*", EnumSet.allOf(DispatcherType.class));
+      SecurityUtils.setIsEnabled(true);
+      webapp.addFilter(ShiroFilter.class, "/api/*", EnumSet.allOf(DispatcherType.class))
+              .setInitParameter("staticSecurityManagerEnabled", "true");
       webapp.addEventListener(new EnvironmentLoaderListener());
     }
   }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterA.java
Patch:
@@ -53,6 +53,9 @@ public String getLastStatement() {
 
   @Override
   public InterpreterResult interpret(String st, InterpreterContext context) {
+    if (property.containsKey("progress")) {
+      context.setProgress(Integer.parseInt(getProperty("progress")));
+    }
     try {
       Thread.sleep(Long.parseLong(st));
       this.lastSt = st;

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -42,7 +42,7 @@ abstract public class AbstractZeppelinIT {
   protected final static Logger LOG = LoggerFactory.getLogger(AbstractZeppelinIT.class);
   protected static final long MAX_IMPLICIT_WAIT = 30;
   protected static final long MAX_BROWSER_TIMEOUT_SEC = 30;
-  protected static final long MAX_PARAGRAPH_TIMEOUT_SEC = 60;
+  protected static final long MAX_PARAGRAPH_TIMEOUT_SEC = 120;
 
   protected void setTextOfParagraph(int paragraphNo, String text) {
     String editorId = driver.findElement(By.xpath(getParagraphXPath(paragraphNo) + "//div[contains(@class, 'editor')]")).getAttribute("id");

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumConf.java
Patch:
@@ -31,7 +31,8 @@ public class HeliumConf {
           new HashMap<String, Map<String, Object>>());
 
   // enabled visualization package display order
-  private List<String> bundleDisplayOrder = new LinkedList<>();
+  private List<String> bundleDisplayOrder =
+          Collections.synchronizedList(new LinkedList<String>());
 
   public Map<String, String> getEnabledPackages() {
     return new HashMap<>(enabled);
@@ -88,6 +89,6 @@ public List<String> getBundleDisplayOrder() {
   }
 
   public void setBundleDisplayOrder(List<String> orderedPackageList) {
-    bundleDisplayOrder = orderedPackageList;
+    bundleDisplayOrder = Collections.synchronizedList(orderedPackageList);
   }
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -208,9 +208,6 @@ public Response putNotePermissions(@PathParam("noteId") String noteId, String re
     HashSet<String> writers = permMap.get("writers");
     // Set readers, if writers and owners is empty -> set to user requesting the change
     if (readers != null && !readers.isEmpty()) {
-      if (writers.isEmpty()) {
-        writers = Sets.newHashSet(SecurityUtils.getPrincipal());
-      }
       if (owners.isEmpty()) {
         owners = Sets.newHashSet(SecurityUtils.getPrincipal());
       }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java
Patch:
@@ -126,6 +126,8 @@ public Response postLogin(@FormParam("userName") String userName,
   public Response logout() {
     JsonResponse response;
     Subject currentUser = org.apache.shiro.SecurityUtils.getSubject();
+    TicketContainer.instance.removeTicket(SecurityUtils.getPrincipal());
+    currentUser.getSession().stop();
     currentUser.logout();
     response = new JsonResponse(Response.Status.UNAUTHORIZED, "", "");
     LOG.warn(response.toString());

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterTest.java
Patch:
@@ -63,7 +63,7 @@ public void testPropertyWithReplacedContextFields() {
         null,
         paragraphTitle,
         paragraphText,
-        new AuthenticationInfo("testUser", "testTicket"),
+        new AuthenticationInfo("testUser", null, "testTicket"),
         null,
         null,
         null,

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -226,7 +226,8 @@ public void onMessage(NotebookSocket conn, String msg) {
         addUserConnection(messagereceived.principal, conn);
       }
       AuthenticationInfo subject =
-          new AuthenticationInfo(messagereceived.principal, messagereceived.ticket);
+          new AuthenticationInfo(messagereceived.principal, messagereceived.roles,
+              messagereceived.ticket);
 
       /** Lets be elegant here */
       switch (messagereceived.op) {
@@ -1807,7 +1808,7 @@ private Paragraph setParagraphUsingMessage(Note note, Message fromMessage, Strin
     p.setText(text);
     p.setTitle(title);
     AuthenticationInfo subject =
-        new AuthenticationInfo(fromMessage.principal, fromMessage.ticket);
+        new AuthenticationInfo(fromMessage.principal, fromMessage.roles, fromMessage.ticket);
     p.setAuthenticationInfo(subject);
     p.settings.setParams(params);
     p.setConfig(config);

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -193,7 +193,7 @@ public void testSqlSpark() throws Exception {
       }
 
       collector.checkThat("Paragraph from SparkParagraphIT of testSqlSpark result: ",
-          headerNames, CoreMatchers.equalTo("Age|Job|Marital|Education|Balance|"));
+          headerNames, CoreMatchers.equalTo("age|job|marital|education|balance|"));
     } catch (Exception e) {
       handleException("Exception in SparkParagraphIT while testSqlSpark", e);
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java
Patch:
@@ -50,7 +50,8 @@ public static enum Type {
     TABLE,
     IMG,
     SVG,
-    NULL
+    NULL,
+    NETWORK
   }
 
   Code code;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumBundleFactoryTest.java
Patch:
@@ -119,7 +119,6 @@ public void bundlePackage() throws IOException, TaskRunnerException {
     assertEquals(lastModified, bundle.lastModified());
   }
 
-
   @Test
   public void bundleLocalPackage() throws IOException, TaskRunnerException {
     URL res = Resources.getResource("helium/webpack.config.js");

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -167,7 +167,7 @@ public void testNoteCreateWithParagraphs() throws IOException {
         assertEquals("paragraph col width check failed", 9.0, p.getConfig().get("colWidth"));
         assertTrue("paragraph show title check failed", ((boolean) p.getConfig().get("title")));
         Map graph = ((List<Map>)p.getConfig().get("results")).get(0);
-        String mode = graph.get("mode").toString();
+        String mode = ((Map)graph.get("graph")).get("mode").toString();
         assertEquals("paragraph graph mode check failed", "pieChart", mode);
       }
     }

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -105,7 +105,8 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
       sc.setLocalProperty("spark.scheduler.pool", null);
     }
 
-    sc.setJobGroup(Utils.buildJobGroupId(context), "Zeppelin", false);
+    String jobDesc = "Started by: " + Utils.getUserName(context.getAuthenticationInfo());
+    sc.setJobGroup(Utils.buildJobGroupId(context), jobDesc, false);
     Object rdd = null;
     try {
       // method signature of sqlc.sql() is changed

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java
Patch:
@@ -87,7 +87,7 @@ public void setUp() throws Exception {
     PreparedStatement insertStatement = connection.prepareStatement("insert into test_table(id, name) values ('a', 'a_name'),('b', 'b_name'),('c', ?);");
     insertStatement.setString(1, null);
     insertStatement.execute();
-    interpreterContext = new InterpreterContext("", "1", null, "", "", new AuthenticationInfo(), null, null, null, null,
+    interpreterContext = new InterpreterContext("", "1", null, "", "", new AuthenticationInfo("testUser"), null, null, null, null,
         null, null);
   }
 
@@ -296,9 +296,9 @@ public void testAutoCompletion() throws SQLException, IOException {
 
     jdbcInterpreter.interpret("", interpreterContext);
 
-    List<InterpreterCompletion> completionList = jdbcInterpreter.completion("sel", 3, null);
+    List<InterpreterCompletion> completionList = jdbcInterpreter.completion("sel", 3, interpreterContext);
 
-    InterpreterCompletion correctCompletionKeyword = new InterpreterCompletion("select ", "select ", CompletionType.keyword.name());
+    InterpreterCompletion correctCompletionKeyword = new InterpreterCompletion("select", "select", CompletionType.keyword.name());
 
     assertEquals(1, completionList.size());
     assertEquals(true, completionList.contains(correctCompletionKeyword));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/completer/StringsCompleter.java
Patch:
@@ -61,8 +61,9 @@ private int completeCollection(final String buffer, final int cursor,
     if (buffer == null) {
       candidates.addAll(strings);
     } else {
-      String bufferTmp = buffer.toUpperCase();
-      for (String match : strings.tailSet(buffer)) {
+      String part = buffer.substring(0, cursor);
+      String bufferTmp = part.toUpperCase();
+      for (String match : strings.tailSet(part)) {
         String matchTmp = match.toUpperCase();
         if (!matchTmp.startsWith(bufferTmp)) {
           break;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java
Patch:
@@ -164,9 +164,10 @@ private ProxyConfig getProxyConfig(boolean isSecure) {
             System.getenv("HTTPS_PROXY") : System.getenv("https_proxy");
 
     try {
-      if (isSecure)
+      if (isSecure && StringUtils.isNotBlank(httpsProxy))
         proxies.add(generateProxy("secure", new URI(httpsProxy)));
-      else proxies.add(generateProxy("insecure", new URI(httpProxy)));
+      else if (!isSecure && StringUtils.isNotBlank(httpProxy))
+        proxies.add(generateProxy("insecure", new URI(httpProxy)));
     } catch (Exception ex) {
       logger.error(ex.getMessage(), ex);
     }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumBundleFactoryTest.java
Patch:
@@ -39,7 +39,7 @@ public class HeliumBundleFactoryTest {
   private File tmpDir;
   private ZeppelinConfiguration conf;
   private HeliumBundleFactory hbf;
-  static File nodeInstallationDir = new File(
+  private static File nodeInstallationDir = new File(
       System.getProperty("java.io.tmpdir") + "/ZeppelinLTest_nodeCache");
 
   @BeforeClass

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java
Patch:
@@ -129,6 +129,7 @@ void installNodeAndNpm() throws TaskRunnerException {
       YarnInstaller yarnInstaller = frontEndPluginFactory.getYarnInstaller(getProxyConfig());
       yarnInstaller.setYarnVersion(YARN_VERSION);
       yarnInstaller.install();
+      yarnCacheDir.mkdirs();
       String yarnCacheDirPath = yarnCacheDir.getAbsolutePath();
       yarnCommand(frontEndPluginFactory, "config set cache-folder " + yarnCacheDirPath);
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -588,17 +588,17 @@ public Response runNoteJobs(@PathParam("noteId") String noteId)
       throws IOException, IllegalArgumentException {
     LOG.info("run note jobs {} ", noteId);
     Note note = notebook.getNote(noteId);
+    AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());
     checkIfNoteIsNotNull(note);
     checkIfUserCanWrite(noteId, "Insufficient privileges you cannot run job for this note");
 
     try {
-      note.runAll();
+      note.runAll(subject);
     } catch (Exception ex) {
       LOG.error("Exception from run", ex);
       return new JsonResponse<>(Status.PRECONDITION_FAILED,
           ex.getMessage() + "- Not selected or Invalid Interpreter bind").build();
     }
-
     return new JsonResponse<>(Status.OK).build();
   }
 

File: livy/src/test/java/org/apache/zeppelin/livy/LivyInterpreterIT.java
Patch:
@@ -308,6 +308,8 @@ public void testSparkSQLInterpreter() {
       assertEquals(InterpreterResult.Code.SUCCESS, result.code());
       assertEquals(InterpreterResult.Type.TABLE, result.message().get(0).getType());
       assertTrue(result.message().get(0).getData().contains("tableName"));
+      int r = sqlInterpreter.getProgress(context);
+      assertTrue(r == 0);
     } finally {
       sqlInterpreter.close();
     }

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -96,7 +96,8 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
     }
 
     sparkInterpreter.populateSparkWebUrl(context);
-    sqlc = getSparkInterpreter().getSQLContext();
+    sparkInterpreter.getZeppelinContext().setInterpreterContext(context);
+    sqlc = sparkInterpreter.getSQLContext();
     SparkContext sc = sqlc.sparkContext();
     if (concurrentSQL()) {
       sc.setLocalProperty("spark.scheduler.pool", "fair");
@@ -126,7 +127,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
       throw new InterpreterException(e);
     }
 
-    String msg = getSparkInterpreter().getZeppelinContext().showData(rdd);
+    String msg = sparkInterpreter.getZeppelinContext().showData(rdd);
     sc.clearJobGroup();
     return new InterpreterResult(Code.SUCCESS, msg);
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -218,7 +218,7 @@ protected RemoteInterpreterEventClient getEventClient() {
 
   private void setSystemProperty(Properties properties) {
     for (Object key : properties.keySet()) {
-      if (!RemoteInterpreter.isEnvString((String) key)) {
+      if (!RemoteInterpreterUtils.isEnvString((String) key)) {
         String value = properties.getProperty((String) key);
         if (value == null || value.isEmpty()) {
           System.clearProperty((String) key);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolUtils.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.google.gson.Gson;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
-import org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
 import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;
 import org.slf4j.Logger;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java
Patch:
@@ -20,7 +20,6 @@
 import org.apache.thrift.TException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
-import org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
 import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService.Client;
 import org.apache.zeppelin.scheduler.Job.Status;

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1742,10 +1742,10 @@ private void runParagraph(NotebookSocket conn, HashSet<String> userAndRoles, Not
   }
 
   private void addNewParagraphIfLastParagraphIsExecuted(Note note, Paragraph p) {
-    // if it's the last paragraph and empty, let's add a new one
+    // if it's the last paragraph and not empty, let's add a new one
     boolean isTheLastParagraph = note.isLastParagraph(p.getId());
-    if (!(p.getText().trim().equals(p.getMagic()) ||
-        Strings.isNullOrEmpty(p.getText())) &&
+    if (!(Strings.isNullOrEmpty(p.getText()) ||
+        p.getText().trim().equals(p.getMagic())) &&
         isTheLastParagraph) {
       Paragraph newPara = note.addNewParagraph(p.getAuthenticationInfo());
       broadcastNewParagraph(note, newPara);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -353,7 +353,6 @@ public Paragraph insertNewParagraph(int index, AuthenticationInfo authentication
   private Paragraph createParagraph(int index, AuthenticationInfo authenticationInfo) {
     Paragraph p = new Paragraph(this, this, factory, interpreterSettingManager);
     p.setAuthenticationInfo(authenticationInfo);
-    p.addUser(p, p.getUser());
     setParagraphMagic(p, index);
     return p;
   }

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/security/JDBCSecurityImpl.java
Patch:
@@ -38,9 +38,8 @@ public class JDBCSecurityImpl {
   /***
    * @param properties
    */
-  public static void createSecureConfiguration(Properties properties) {
-    AuthenticationMethod authType = getAuthtype(properties);
-
+  public static void createSecureConfiguration(Properties properties,
+      AuthenticationMethod authType) {
     switch (authType) {
         case KERBEROS:
           Configuration conf = new

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -193,6 +193,9 @@ public static void main(String[] args) throws InterruptedException {
     LOG.info("Starting zeppelin server");
     try {
       jettyWebServer.start(); //Instantiates ZeppelinServer
+      if (conf.getJettyName() != null) {
+        org.eclipse.jetty.http.HttpGenerator.setJettyVersion(conf.getJettyName());
+      }
     } catch (Exception e) {
       LOG.error("Error while running jettyServer", e);
       System.exit(-1);

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java
Patch:
@@ -74,9 +74,10 @@ public Response postLogin(@FormParam("userName") String userName,
       try {
         UsernamePasswordToken token = new UsernamePasswordToken(userName, password);
         //      token.setRememberMe(true);
-        currentUser.login(token);
+
         currentUser.getSession().stop();
         currentUser.getSession(true);
+        currentUser.login(token);
 
         HashSet<String> roles = SecurityUtils.getRoles();
         String principal = SecurityUtils.getPrincipal();

File: livy/src/main/java/org/apache/zeppelin/livy/LivyPySparkBaseInterpreter.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Base class for PySpark Interpreter
  */
-public abstract class LivyPySparkBaseInterpreter extends BaseLivyInterprereter {
+public abstract class LivyPySparkBaseInterpreter extends BaseLivyInterpreter {
 
   public LivyPySparkBaseInterpreter(Properties property) {
     super(property);

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -30,7 +30,7 @@
 /**
  * Livy SparkSQL Interpreter for Zeppelin.
  */
-public class LivySparkSQLInterpreter extends BaseLivyInterprereter {
+public class LivySparkSQLInterpreter extends BaseLivyInterpreter {
 
   public static final String ZEPPELIN_LIVY_SPARK_SQL_FIELD_TRUNCATE =
       "zeppelin.livy.spark.sql.field.truncate";

File: livy/src/test/java/org/apache/zeppelin/livy/LivyInterpreterIT.java
Patch:
@@ -761,7 +761,7 @@ public void testLivyTutorialNote() throws IOException {
     }
   }
 
-  private boolean isSpark2(BaseLivyInterprereter interpreter, InterpreterContext context) {
+  private boolean isSpark2(BaseLivyInterpreter interpreter, InterpreterContext context) {
     InterpreterResult result = null;
     if (interpreter instanceof LivySparkRInterpreter) {
       result = interpreter.interpret("sparkR.session()", context);

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java
Patch:
@@ -75,6 +75,9 @@ public Response postLogin(@FormParam("userName") String userName,
         UsernamePasswordToken token = new UsernamePasswordToken(userName, password);
         //      token.setRememberMe(true);
         currentUser.login(token);
+        currentUser.getSession().stop();
+        currentUser.getSession(true);
+
         HashSet<String> roles = SecurityUtils.getRoles();
         String principal = SecurityUtils.getPrincipal();
         String ticket;

File: r/src/main/java/org/apache/zeppelin/rinterpreter/RStatics.java
Patch:
@@ -25,15 +25,15 @@
 import org.apache.spark.SparkContext;
 import org.apache.spark.api.java.JavaSparkContext;
 import org.apache.spark.sql.SQLContext;
-import org.apache.zeppelin.spark.ZeppelinContext;
+import org.apache.zeppelin.spark.SparkZeppelinContext;
 
 /**
  * RStatics provides static class methods that can be accessed through the SparkR bridge
  *
  */
 public class RStatics {
   private static SparkContext sc = null;
-  private static ZeppelinContext z = null;
+  private static SparkZeppelinContext z = null;
   private static SQLContext sql = null;
   private static RContext rCon = null;
 
@@ -42,7 +42,7 @@ public static SparkContext setSC(SparkContext newSC) {
     return sc;
   }
 
-  public static ZeppelinContext setZ(ZeppelinContext newZ) {
+  public static SparkZeppelinContext setZ(SparkZeppelinContext newZ) {
     z = newZ;
     return z;
   }

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -395,7 +395,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
       return new InterpreterResult(Code.ERROR, errorMessage);
     }
     String jobGroup = Utils.buildJobGroupId(context);
-    ZeppelinContext __zeppelin__ = sparkInterpreter.getZeppelinContext();
+    SparkZeppelinContext __zeppelin__ = sparkInterpreter.getZeppelinContext();
     __zeppelin__.setInterpreterContext(context);
     __zeppelin__.setGui(context.getGui());
     pythonInterpretRequest = new PythonInterpretRequest(st, jobGroup);
@@ -580,7 +580,7 @@ private SparkInterpreter getSparkInterpreter() {
     return spark;
   }
 
-  public ZeppelinContext getZeppelinContext() {
+  public SparkZeppelinContext getZeppelinContext() {
     SparkInterpreter sparkIntp = getSparkInterpreter();
     if (sparkIntp != null) {
       return getSparkInterpreter().getZeppelinContext();

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -126,7 +126,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
       throw new InterpreterException(e);
     }
 
-    String msg = ZeppelinContext.showDF(sc, context, rdd, maxResult);
+    String msg = getSparkInterpreter().getZeppelinContext().showData(rdd);
     sc.clearJobGroup();
     return new InterpreterResult(Code.SUCCESS, msg);
   }

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java
Patch:
@@ -27,15 +27,15 @@
 public class ZeppelinRContext {
   private static SparkContext sparkContext;
   private static SQLContext sqlContext;
-  private static ZeppelinContext zeppelinContext;
+  private static SparkZeppelinContext zeppelinContext;
   private static Object sparkSession;
   private static JavaSparkContext javaSparkContext;
 
   public static void setSparkContext(SparkContext sparkContext) {
     ZeppelinRContext.sparkContext = sparkContext;
   }
 
-  public static void setZeppelinContext(ZeppelinContext zeppelinContext) {
+  public static void setZeppelinContext(SparkZeppelinContext zeppelinContext) {
     ZeppelinRContext.zeppelinContext = zeppelinContext;
   }
 
@@ -55,7 +55,7 @@ public static SQLContext getSqlContext() {
     return sqlContext;
   }
 
-  public static ZeppelinContext getZeppelinContext() {
+  public static SparkZeppelinContext getZeppelinContext() {
     return zeppelinContext;
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/util/InterpreterOutputStream.java
Patch:
@@ -28,7 +28,7 @@
  * Can be used to channel output from interpreters.
  */
 public class InterpreterOutputStream extends LogOutputStream {
-  public static Logger logger;
+  private Logger logger;
   InterpreterOutput interpreterOutput;
   boolean ignoreLeadingNewLinesFromScalaReporter = false;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java
Patch:
@@ -46,7 +46,7 @@
  * RemoteInterpreterEventPoller is counter part in ZeppelinServer
  */
 public class RemoteInterpreterEventClient implements ResourcePoolConnector {
-  private final Logger logger = LoggerFactory.getLogger(RemoteInterpreterEvent.class);
+  private final Logger logger = LoggerFactory.getLogger(RemoteInterpreterEventClient.class);
   private final List<RemoteInterpreterEvent> eventQueue = new LinkedList<>();
   private final List<ResourceSet> getAllResourceResponse = new LinkedList<>();
   private final Map<ResourceId, Object> getResourceResponse = new HashMap<>();
@@ -415,6 +415,7 @@ public void onInterpreterOutputUpdateAll(
   }
 
   private void sendEvent(RemoteInterpreterEvent event) {
+    logger.debug("Send Event: " + event);
     synchronized (eventQueue) {
       eventQueue.add(event);
       eventQueue.notifyAll();
@@ -446,7 +447,7 @@ public void onAppOutputUpdate(
     appendOutput.put("appId", appId);
     appendOutput.put("type", type);
     appendOutput.put("data", output);
-    logger.info("onAppoutputUpdate = {}", output);
+    logger.debug("onAppoutputUpdate = {}", output);
     sendEvent(new RemoteInterpreterEvent(
         RemoteInterpreterEventType.OUTPUT_UPDATE,
         gson.toJson(appendOutput)));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java
Patch:
@@ -124,6 +124,9 @@ public void run() {
       AngularObjectRegistry angularObjectRegistry = interpreterGroup.getAngularObjectRegistry();
 
       try {
+        if (event.getType() != RemoteInterpreterEventType.NO_OP) {
+          logger.debug("Receive message from RemoteInterpreter Process: " + event.toString());
+        }
         if (event.getType() == RemoteInterpreterEventType.NO_OP) {
           continue;
         } else if (event.getType() == RemoteInterpreterEventType.ANGULAR_OBJECT_ADD) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -494,7 +494,7 @@ private void broadcast(String noteId, Message m) {
       if (socketLists == null || socketLists.size() == 0) {
         return;
       }
-      LOG.debug("SEND >> " + m.op);
+      LOG.debug("SEND >> " + m);
       for (NotebookSocket conn : socketLists) {
         try {
           conn.send(serializeMessage(m));
@@ -512,7 +512,7 @@ private void broadcastExcept(String noteId, Message m, NotebookSocket exclude) {
       if (socketLists == null || socketLists.size() == 0) {
         return;
       }
-      LOG.debug("SEND >> " + m.op);
+      LOG.debug("SEND >> " + m);
       for (NotebookSocket conn : socketLists) {
         if (exclude.equals(conn)) {
           continue;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -519,7 +519,7 @@ public void testSparkZeppelinContextDynamicForms() throws IOException {
     @Test
     public void testPySparkZeppelinContextDynamicForms() throws IOException {
         Note note = ZeppelinServer.notebook.createNote(anonymous);
-        Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);
+        Paragraph p = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
         note.setName("note");
         Map config = p.getConfig();
         config.put("enabled", true);

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -242,7 +242,7 @@ public void testInterpreterAutoBinding() throws IOException {
   public void testInterpreterRestart() throws IOException, InterruptedException {
     // when: create new note
     Note note = ZeppelinServer.notebook.createNote(anonymous);
-    note.addParagraph(AuthenticationInfo.ANONYMOUS);
+    note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     Paragraph p = note.getLastParagraph();
     Map config = p.getConfig();
     config.put("enabled", true);
@@ -269,7 +269,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
     }
 
     // when: run markdown paragraph, again
-    p = note.addParagraph(AuthenticationInfo.ANONYMOUS);
+    p = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     p.setConfig(config);
     p.setText("%md markdown restarted");
     p.setAuthenticationInfo(anonymous);
@@ -287,7 +287,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
   public void testRestartInterpreterPerNote() throws IOException, InterruptedException {
     // when: create new note
     Note note = ZeppelinServer.notebook.createNote(anonymous);
-    note.addParagraph(AuthenticationInfo.ANONYMOUS);
+    note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     Paragraph p = note.getLastParagraph();
     Map config = p.getConfig();
     config.put("enabled", true);

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -110,7 +110,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr
     }
 
     // start interpreter process
-    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);
+    Paragraph p1 = note1.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     p1.setText("%md start remote interpreter process");
     p1.setAuthenticationInfo(anonymous);
     note1.run(p1.getId());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -162,7 +162,7 @@ public void testSyncUpdateMain() throws IOException {
     
     /* create note */
     Note note = notebookSync.createNote(anonymous);
-    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);
+    Paragraph p1 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     Map config = p1.getConfig();
     config.put("enabled", true);
     p1.setConfig(config);
@@ -299,7 +299,7 @@ public void testCheckpointOneStorage() throws IOException, SchedulerException {
     int vCount = gitRepo.revisionHistory(noteId, anonymous).size();
     assertThat(vCount).isEqualTo(1);
     
-    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);
+    Paragraph p = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     Map<String, Object> config = p.getConfig();
     config.put("enabled", true);
     p.setConfig(config);
@@ -333,7 +333,7 @@ public void testSyncWithAcl() throws IOException {
     assertEquals(0, authInfo.getWriters(note.getId()).size());
     
     /* update note and save on secondary storage */
-    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);
+    Paragraph p1 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     p1.setText("hello world");
     assertEquals(1, note.getParagraphs().size());
     notebookRepoSync.save(1, note, null);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -133,7 +133,7 @@ public void testSaveNotebook() throws IOException, InterruptedException {
     Note note = notebook.createNote(anonymous);
     interpreterSettingManager.setInterpreters("user", note.getId(), interpreterSettingManager.getDefaultInterpreterSettingList());
 
-    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);
+    Paragraph p1 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     Map<String, Object> config = p1.getConfig();
     config.put("enabled", true);
     p1.setConfig(config);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java
Patch:
@@ -278,13 +278,13 @@ private Note newNoteWithParagraphs(String noteName, String... parTexts) {
   }
 
   private Paragraph addParagraphWithText(Note note, String text) {
-    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);
+    Paragraph p = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     p.setText(text);
     return p;
   }
 
   private Paragraph addParagraphWithTextAndTitle(Note note, String text, String title) {
-    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);
+    Paragraph p = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);
     p.setText(text);
     p.setTitle(title);
     return p;

File: cassandra/src/test/java/org/apache/zeppelin/cassandra/InterpreterLogicTest.java
Patch:
@@ -34,7 +34,7 @@
 
 import org.apache.zeppelin.display.AngularObjectRegistry;
 import org.apache.zeppelin.display.GUI;
-import org.apache.zeppelin.display.Input.ParamOption;
+import org.apache.zeppelin.display.ui.OptionInput.ParamOption;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.junit.Rule;

File: groovy/src/main/java/org/apache/zeppelin/groovy/GObject.java
Patch:
@@ -36,7 +36,7 @@
 import org.apache.zeppelin.display.AngularObjectRegistry;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.GUI;
-import org.apache.zeppelin.display.Input.ParamOption;
+import org.apache.zeppelin.display.ui.OptionInput.ParamOption;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.interpreter.RemoteWorksController;
 import org.apache.zeppelin.interpreter.InterpreterException;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -381,14 +381,14 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
       context.getConfig().putAll(remoteConfig);
 
       if (form == FormType.NATIVE) {
-        GUI remoteGui = gson.fromJson(remoteResult.getGui(), GUI.class);
+        GUI remoteGui = GUI.fromJson(remoteResult.getGui());
         currentGUI.clear();
         currentGUI.setParams(remoteGui.getParams());
         currentGUI.setForms(remoteGui.getForms());
       } else if (form == FormType.SIMPLE) {
         final Map<String, Input> currentForms = currentGUI.getForms();
         final Map<String, Object> currentParams = currentGUI.getParams();
-        final GUI remoteGUI = gson.fromJson(remoteResult.getGui(), GUI.class);
+        final GUI remoteGUI = GUI.fromJson(remoteResult.getGui());
         final Map<String, Input> remoteForms = remoteGUI.getForms();
         final Map<String, Object> remoteParams = remoteGUI.getParams();
         currentForms.putAll(remoteForms);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -592,7 +592,7 @@ private InterpreterContext convert(RemoteInterpreterContext ric, InterpreterOutp
         gson.fromJson(ric.getAuthenticationInfo(), AuthenticationInfo.class),
         (Map<String, Object>) gson.fromJson(ric.getConfig(),
             new TypeToken<Map<String, Object>>() {}.getType()),
-        gson.fromJson(ric.getGui(), GUI.class),
+        GUI.fromJson(ric.getGui()),
         interpreterGroup.getAngularObjectRegistry(),
         interpreterGroup.getResourcePool(),
         contextRunners, output, remoteWorksController, eventClient);
@@ -737,7 +737,7 @@ private RemoteInterpreterResult convert(InterpreterResult result,
         result.code().name(),
         msg,
         gson.toJson(config),
-        gson.toJson(gui));
+        gui.toJson());
   }
 
   @Override

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -548,7 +548,7 @@ public void testSingleDynamicFormTextInput() throws Exception {
     try {
       createNewNote();
 
-      setTextOfParagraph(1, "%spark println(\"Hello \"+z.input(\"name\", \"world\")) ");
+      setTextOfParagraph(1, "%spark println(\"Hello \"+z.textbox(\"name\", \"world\")) ");
 
       runParagraph(1);
       waitForParagraph(1, "FINISHED");

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -490,7 +490,7 @@ public void testSparkZeppelinContextDynamicForms() throws IOException {
         Map config = p.getConfig();
         config.put("enabled", true);
         p.setConfig(config);
-        String code = "%spark.spark println(z.input(\"my_input\", \"default_name\"))\n" +
+        String code = "%spark.spark println(z.textbox(\"my_input\", \"default_name\"))\n" +
             "println(z.select(\"my_select\", \"1\"," +
             "Seq((\"1\", \"select_1\"), (\"2\", \"select_2\"))))\n" +
             "val items=z.checkbox(\"my_checkbox\", Seq(\"2\"), " +

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/AzureNotebookRepo.java
Patch:
@@ -138,7 +138,7 @@ private Note getNote(String noteId) throws IOException {
     Gson gson = gsonBuilder.registerTypeAdapter(Date.class, new NotebookImportDeserializer())
         .create();
 
-    Note note = gson.fromJson(json, Note.class);
+    Note note = Note.fromJson(json);
 
     for (Paragraph p : note.getParagraphs()) {
       if (p.getStatus() == Job.Status.PENDING || p.getStatus() == Job.Status.RUNNING) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java
Patch:
@@ -202,7 +202,7 @@ private Note getNote(String key) throws IOException {
     Note note;
     try (InputStream ins = s3object.getObjectContent()) {
       String json = IOUtils.toString(ins, conf.getString(ConfVars.ZEPPELIN_ENCODING));
-      note = gson.fromJson(json, Note.class);
+      note = Note.fromJson(json);
     }
 
     for (Paragraph p : note.getParagraphs()) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -175,7 +175,7 @@ private Note getNote(FileObject noteDir) throws IOException {
     String json = IOUtils.toString(ins, conf.getString(ConfVars.ZEPPELIN_ENCODING));
     ins.close();
 
-    Note note = gson.fromJson(json, Note.class);
+    Note note = Note.fromJson(json);
 //    note.setReplLoader(replLoader);
 //    note.jobListenerFactory = jobListenerFactory;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObject.java
Patch:
@@ -34,6 +34,8 @@
  * @param <T>
  */
 public class AngularObject<T> {
+  private static final Logger LOGGER = LoggerFactory.getLogger(AngularObject.class);
+
   private String name;
   private T object;
   
@@ -172,7 +174,7 @@ public void set(T o, boolean emit) {
     if (emit) {
       emit();
     }
-
+    LOGGER.debug("Update angular object: " + name + " with value: " + o);
     final Logger logger = LoggerFactory.getLogger(AngularObject.class);
     List<AngularObjectWatcher> ws = new LinkedList<>();
     synchronized (watchers) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/GUI.java
Patch:
@@ -75,14 +75,14 @@ public Object select(String id, Object defaultValue, ParamOption[] options) {
     return value;
   }
 
-  public Collection<Object> checkbox(String id, Collection<Object> defaultChecked,
+  public List<Object> checkbox(String id, Collection<Object> defaultChecked,
                                      ParamOption[] options) {
     Collection<Object> checked = (Collection<Object>) params.get(id);
     if (checked == null) {
       checked = defaultChecked;
     }
     forms.put(id, new Input(id, defaultChecked, "checkbox", options));
-    Collection<Object> filtered = new LinkedList<>();
+    List<Object> filtered = new LinkedList<>();
     for (Object o : checked) {
       if (isValidOption(o, options)) {
         filtered.add(o);

File: groovy/src/main/java/org/apache/zeppelin/groovy/GroovyInterpreter.java
Patch:
@@ -121,7 +121,8 @@ private Job getRunningJob(String paragraphId) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+                                                InterpreterContext interpreterContext) {
     return null;
   }
 

File: angular/src/main/java/org/apache/zeppelin/angular/AngularInterpreter.java
Patch:
@@ -67,7 +67,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return new LinkedList<>();
   }
 

File: beam/src/main/java/org/apache/zeppelin/beam/BeamInterpreter.java
Patch:
@@ -92,7 +92,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return Collections.emptyList();
   }
 

File: bigquery/src/main/java/org/apache/zeppelin/bigquery/BigQueryInterpreter.java
Patch:
@@ -332,7 +332,8 @@ public void cancel(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return NO_COMPLETION;
   }
 }

File: cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java
Patch:
@@ -216,7 +216,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return NO_COMPLETION;
   }
 

File: file/src/main/java/org/apache/zeppelin/file/FileInterpreter.java
Patch:
@@ -166,7 +166,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 }

File: flink/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java
Patch:
@@ -373,7 +373,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return new LinkedList<>();
   }
 

File: geode/src/main/java/org/apache/zeppelin/geode/GeodeOqlInterpreter.java
Patch:
@@ -282,7 +282,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 

File: hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java
Patch:
@@ -145,7 +145,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 

File: helium-dev/src/main/java/org/apache/zeppelin/helium/DevInterpreter.java
Patch:
@@ -98,7 +98,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return new LinkedList<>();
   }
 

File: ignite/src/main/java/org/apache/zeppelin/ignite/IgniteInterpreter.java
Patch:
@@ -331,7 +331,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return new LinkedList<>();
   }
 

File: ignite/src/main/java/org/apache/zeppelin/ignite/IgniteSqlInterpreter.java
Patch:
@@ -184,7 +184,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return new LinkedList<>();
   }
 }

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.List;
 import java.util.Properties;
 
+import org.apache.zeppelin.completer.CompletionType;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
@@ -295,9 +296,9 @@ public void testAutoCompletion() throws SQLException, IOException {
 
     jdbcInterpreter.interpret("", interpreterContext);
 
-    List<InterpreterCompletion> completionList = jdbcInterpreter.completion("sel", 1);
+    List<InterpreterCompletion> completionList = jdbcInterpreter.completion("sel", 3, null);
 
-    InterpreterCompletion correctCompletionKeyword = new InterpreterCompletion("select ", "select ");
+    InterpreterCompletion correctCompletionKeyword = new InterpreterCompletion("select ", "select ", CompletionType.keyword.name());
 
     assertEquals(1, completionList.size());
     assertEquals(true, completionList.contains(correctCompletionKeyword));

File: kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java
Patch:
@@ -95,7 +95,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 

File: lens/src/main/java/org/apache/zeppelin/lens/LensInterpreter.java
Patch:
@@ -420,7 +420,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
   

File: markdown/src/main/java/org/apache/zeppelin/markdown/Markdown.java
Patch:
@@ -124,7 +124,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 }

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -435,7 +435,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 

File: r/src/main/java/org/apache/zeppelin/rinterpreter/KnitR.java
Patch:
@@ -77,8 +77,9 @@ public int getProgress(InterpreterContext interpreterContext) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String s, int i) {
-    List completion = intp.completion(s, i);
+  public List<InterpreterCompletion> completion(String s, int i,
+      InterpreterContext interpreterContext) {
+    List completion = intp.completion(s, i, interpreterContext);
     return completion;
   }
 

File: r/src/main/java/org/apache/zeppelin/rinterpreter/RRepl.java
Patch:
@@ -77,8 +77,9 @@ public int getProgress(InterpreterContext interpreterContext) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String s, int i) {
-    List completion = intp.completion(s, i);
+  public List<InterpreterCompletion> completion(String s, int i,
+      InterpreterContext interpreterContext) {
+    List completion = intp.completion(s, i, interpreterContext);
     return completion;
   }
 

File: scalding/src/main/java/org/apache/zeppelin/scalding/ScaldingInterpreter.java
Patch:
@@ -270,7 +270,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return NO_COMPLETION;
   }
 

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -138,7 +138,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -1068,7 +1068,8 @@ private List<File> classPath(ClassLoader cl) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     if (completer == null) {
       logger.warn("Can't find completer");
       return new LinkedList<>();
@@ -1090,7 +1091,7 @@ public List<InterpreterCompletion> completion(String buf, int cursor) {
     List<InterpreterCompletion> completions = new LinkedList<>();
 
     for (String candidate : candidates) {
-      completions.add(new InterpreterCompletion(candidate, candidate));
+      completions.add(new InterpreterCompletion(candidate, candidate, StringUtils.EMPTY));
     }
 
     return completions;

File: spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -212,7 +212,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return new ArrayList<>();
   }
 

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -177,7 +177,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 }

File: spark/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterTest.java
Patch:
@@ -118,7 +118,7 @@ public void testBasicIntp() {
   @Test
   public void testCompletion() {
     if (getSparkVersionNumber() > 11) {
-      List<InterpreterCompletion> completions = pySparkInterpreter.completion("sc.", "sc.".length());
+      List<InterpreterCompletion> completions = pySparkInterpreter.completion("sc.", "sc.".length(), null);
       assertTrue(completions.size() > 0);
     }
   }

File: spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -301,7 +301,7 @@ public void testDisableImplicitImport() throws IOException {
 
   @Test
   public void testCompletion() {
-    List<InterpreterCompletion> completions = repl.completion("sc.", "sc.".length());
+    List<InterpreterCompletion> completions = repl.completion("sc.", "sc.".length(), null);
     assertTrue(completions.size() > 0);
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java
Patch:
@@ -152,11 +152,12 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     ClassLoader oldcl = Thread.currentThread().getContextClassLoader();
     Thread.currentThread().setContextClassLoader(cl);
     try {
-      List completion = intp.completion(buf, cursor);
+      List completion = intp.completion(buf, cursor, interpreterContext);
       return completion;
     } catch (Exception e) {
       throw new InterpreterException(e);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -102,10 +102,12 @@ public abstract class Interpreter {
    *
    * @param buf statements
    * @param cursor cursor position in statements
+   * @param interpreterContext
    * @return list of possible completion. Return empty list if there're nothing to return.
    */
   @ZeppelinApi
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext)  {
     return null;
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/LazyOpenInterpreter.java
Patch:
@@ -121,9 +121,10 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     open();
-    List completion = intp.completion(buf, cursor);
+    List completion = intp.completion(buf, cursor, interpreterContext);
     return completion;
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -562,10 +562,10 @@ public String getFormType(String noteId, String className) throws TException {
 
   @Override
   public List<InterpreterCompletion> completion(String noteId,
-      String className, String buf, int cursor)
+      String className, String buf, int cursor, RemoteInterpreterContext remoteInterpreterContext)
       throws TException {
     Interpreter intp = getInterpreter(noteId, className);
-    List completion = intp.completion(buf, cursor);
+    List completion = intp.completion(buf, cursor, convert(remoteInterpreterContext, null));
     return completion;
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-3-27")
 public class ZeppelinServerResourceParagraphRunner implements org.apache.thrift.TBase<ZeppelinServerResourceParagraphRunner, ZeppelinServerResourceParagraphRunner._Fields>, java.io.Serializable, Cloneable, Comparable<ZeppelinServerResourceParagraphRunner> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZeppelinServerResourceParagraphRunner");
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterA.java
Patch:
@@ -78,7 +78,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterAngular.java
Patch:
@@ -106,7 +106,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterB.java
Patch:
@@ -78,7 +78,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterEnv.java
Patch:
@@ -67,7 +67,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterOutputStream.java
Patch:
@@ -78,7 +78,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterResourcePool.java
Patch:
@@ -121,7 +121,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java
Patch:
@@ -68,7 +68,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java
Patch:
@@ -98,7 +98,8 @@ public Scheduler getScheduler() {
 	}
 
 	@Override
-	public List<InterpreterCompletion> completion(String buf, int cursor) {
+	public List<InterpreterCompletion> completion(String buf, int cursor,
+			InterpreterContext interpreterContext) {
 		return null;
 	}
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter11.java
Patch:
@@ -76,7 +76,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<InterpreterCompletion> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor,
+      InterpreterContext interpreterContext) {
     return null;
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter2.java
Patch:
@@ -97,7 +97,8 @@ public Scheduler getScheduler() {
 	}
 
 	@Override
-	public List<InterpreterCompletion> completion(String buf, int cursor) {
+	public List<InterpreterCompletion> completion(String buf, int cursor,
+			InterpreterContext interpreterContext) {
 		return null;
 	}
 }

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -222,7 +222,7 @@ public void open() {
     // Add matplotlib display hook
     InterpreterGroup intpGroup = getInterpreterGroup();
     if (intpGroup != null && intpGroup.getInterpreterHookRegistry() != null) {
-      registerHook(HookType.POST_EXEC_DEV, "z._displayhook()");
+      registerHook(HookType.POST_EXEC_DEV, "__zeppelin__._displayhook()");
     }
     // Add matplotlib display hook
     try {

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreterPandasSql.java
Patch:
@@ -87,7 +87,8 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
     LOG.info("Running SQL query: '{}' over Pandas DataFrame", st);
     Interpreter python = getPythonInterpreter();
 
-    return python.interpret("z.show(pysqldf('" + st + "'))\nz._displayhook()", context);
+    return python.interpret(
+            "__zeppelin__.show(pysqldf('" + st + "'))\n__zeppelin__._displayhook()", context);
   }
 
   @Override

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -246,7 +246,7 @@ private boolean useHiveContext() {
    */
   private boolean hiveClassesArePresent() {
     try {
-      this.getClass().forName("org.apache.spark.sql.hive.HiveSessionState");
+      this.getClass().forName("org.apache.spark.sql.hive.execution.InsertIntoHiveTable");
       this.getClass().forName("org.apache.hadoop.hive.conf.HiveConf");
       return true;
     } catch (ClassNotFoundException | NoClassDefFoundError e) {

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterprereter.java
Patch:
@@ -379,7 +379,7 @@ private InterpreterResult getResultFromStatementInfo(StatementInfo stmtInfo,
 
       if (displayAppInfo) {
         InterpreterResult interpreterResult = new InterpreterResult(InterpreterResult.Code.SUCCESS);
-        interpreterResult.add(InterpreterResult.Type.TEXT, result);
+        interpreterResult.add(result);
         String appInfoHtml = "<hr/>Spark Application Id: " + sessionInfo.appId + "<br/>"
             + "Spark WebUI: <a href=\"" + sessionInfo.webUIAddress + "\">"
             + sessionInfo.webUIAddress + "</a>";

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumBundleFactoryTest.java
Patch:
@@ -66,7 +66,7 @@ public void setUp() throws InstallationException, TaskRunnerException, IOExcepti
         new File(moduleDir, "visualization"),
         new File(moduleDir, "spell"));
     hbf.installNodeAndNpm();
-    hbf.copyFrameworkModuleToInstallPath(true);
+    hbf.copyFrameworkModulesToInstallPath(true);
   }
 
   @After

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java
Patch:
@@ -217,7 +217,8 @@ public void remove(String noteId, AuthenticationInfo subject) throws IOException
 
   @Override
   public void close() {
-    //websocketClient.stop();
+    websocketClient.stop();
+    restApiClient.close();
   }
 
   @Override

File: zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -125,7 +125,7 @@ public static WebDriver getWebDriver() {
         (new WebDriverWait(driver, 30)).until(new ExpectedCondition<Boolean>() {
           @Override
           public Boolean apply(WebDriver d) {
-            return d.findElement(By.xpath("//i[@tooltip='WebSocket Connected']"))
+            return d.findElement(By.xpath("//i[@uib-tooltip='WebSocket Connected']"))
                 .isDisplayed();
           }
         });

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -187,7 +187,7 @@ public void testGroupPermission() throws Exception {
 
       String noteId = driver.getCurrentUrl().substring(driver.getCurrentUrl().lastIndexOf("/") + 1);
 
-      pollingWait(By.xpath("//span[@tooltip='Note permissions']"),
+      pollingWait(By.xpath("//span[@uib-tooltip='Note permissions']"),
           MAX_BROWSER_TIMEOUT_SEC).click();
       pollingWait(By.xpath(".//*[@id='selectOwners']/following::span//input"),
           MAX_BROWSER_TIMEOUT_SEC).sendKeys("finance ");

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -198,8 +198,8 @@ public void testDep() throws Exception {
     }
     try {
       // restart spark interpreter before running %dep
-      clickAndWait(By.xpath("//span[@tooltip='Interpreter binding']"));
-      clickAndWait(By.xpath("//div[font[contains(text(), 'spark')]]/preceding-sibling::a[@tooltip='Restart']"));
+      clickAndWait(By.xpath("//span[@uib-tooltip='Interpreter binding']"));
+      clickAndWait(By.xpath("//div[font[contains(text(), 'spark')]]/preceding-sibling::a[@uib-tooltip='Restart']"));
       clickAndWait(By.xpath("//button[contains(.,'OK')]"));
 
       setTextOfParagraph(1,"%dep z.load(\"org.apache.commons:commons-csv:1.1\")");

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -115,13 +115,15 @@ public ZeppelinServer() throws Exception {
        */
       heliumBundleFactory = new HeliumBundleFactory(
           conf,
+          null,
           new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO)),
           new File(conf.getRelativeDir("lib/node_modules/zeppelin-tabledata")),
           new File(conf.getRelativeDir("lib/node_modules/zeppelin-vis")),
           new File(conf.getRelativeDir("lib/node_modules/zeppelin-spell")));
     } else {
       heliumBundleFactory = new HeliumBundleFactory(
           conf,
+          null,
           new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO)),
           new File(conf.getRelativeDir("zeppelin-web/src/app/tabledata")),
           new File(conf.getRelativeDir("zeppelin-web/src/app/visualization")),
@@ -138,7 +140,7 @@ public ZeppelinServer() throws Exception {
 
     // create bundle
     try {
-      heliumBundleFactory.buildBundle(helium.getBundlePackagesToBundle());
+      heliumBundleFactory.buildAllPackages(helium.getBundlePackagesToBundle());
     } catch (Exception e) {
       LOG.error(e.getMessage(), e);
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumLocalRegistry.java
Patch:
@@ -43,7 +43,6 @@ public HeliumLocalRegistry(String name, String uri) {
 
   }
 
-
   @Override
   public synchronized List<HeliumPackage> getAll() throws IOException {
     List<HeliumPackage> result = new LinkedList<>();

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -372,7 +372,8 @@ public Connection getConnection(String propertyKey, InterpreterContext interpret
 
       switch (authType) {
           case KERBEROS:
-            if (user == null) {
+            if (user == null || "false".equalsIgnoreCase(
+              property.getProperty("zeppelin.jdbc.auth.kerberos.proxy.enable"))) {
               connection = getConnectionFromPool(url, user, propertyKey, properties);
             } else {
               if (url.trim().startsWith("jdbc:hive")) {

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterprereter.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
 import org.apache.http.conn.ssl.SSLContexts;
 import org.apache.http.impl.client.HttpClients;
+import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.zeppelin.interpreter.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -369,13 +370,11 @@ private InterpreterResult getResultFromStatementInfo(StatementInfo stmtInfo,
       }
 
       if (displayAppInfo) {
-        //TODO(zjffdu), use multiple InterpreterResult to display appInfo
         InterpreterResult interpreterResult = new InterpreterResult(InterpreterResult.Code.SUCCESS);
         interpreterResult.add(InterpreterResult.Type.TEXT, result);
         String appInfoHtml = "<hr/>Spark Application Id: " + sessionInfo.appId + "<br/>"
             + "Spark WebUI: <a href=\"" + sessionInfo.webUIAddress + "\">"
             + sessionInfo.webUIAddress + "</a>";
-        LOGGER.info("appInfoHtml:" + appInfoHtml);
         interpreterResult.add(InterpreterResult.Type.HTML, appInfoHtml);
         return interpreterResult;
       } else {
@@ -486,6 +485,8 @@ private String callRestAPI(String targetURL, String method, String jsonData)
         if (cause.getResponseBodyAsString().matches(SESSION_NOT_FOUND_PATTERN)) {
           throw new SessionNotFoundException(cause.getResponseBodyAsString());
         }
+        throw new LivyException(cause.getResponseBodyAsString() + "\n"
+            + ExceptionUtils.getFullStackTrace(ExceptionUtils.getRootCause(e)));
       }
       throw new LivyException(e);
     }

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java
Patch:
@@ -254,6 +254,8 @@ public void testSelectQueryMaxResult() throws SQLException, IOException {
     assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());
     assertEquals(InterpreterResult.Type.TABLE, interpreterResult.message().get(0).getType());
     assertEquals("ID\tNAME\na\ta_name\n", interpreterResult.message().get(0).getData());
+    assertEquals(InterpreterResult.Type.HTML, interpreterResult.message().get(1).getType());
+    assertTrue(interpreterResult.message().get(1).getData().contains("alert-warning"));
   }
 
   @Test

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -141,8 +141,8 @@ public InterpreterResult interpret(String line, InterpreterContext context) {
             List<String> rows = parseSQLOutput(message.getData());
             result2.add(InterpreterResult.Type.TABLE, StringUtils.join(rows, "\n"));
             if (rows.size() >= (maxResult + 1)) {
-              result2.add(InterpreterResult.Type.HTML,
-                  "<font color=red>Results are limited by " + maxResult + ".</font>");
+              result2.add(ResultMessages.getExceedsLimitRowsMessage(maxResult,
+                  ZEPPELIN_LIVY_SPARK_SQL_MAX_RESULT));
             }
           } else {
             result2.add(message.getType(), message.getData());

File: pig/src/test/java/org/apache/zeppelin/pig/PigQueryInterpreterTest.java
Patch:
@@ -153,6 +153,6 @@ public void testMaxResult() throws IOException {
     assertEquals(InterpreterResult.Type.TABLE, result.message().get(0).getType());
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
     assertTrue(result.message().get(0).getData().contains("id\n0\n1\n2"));
-    assertTrue(result.message().get(0).getData().contains("Results are limited by 20"));
+    assertTrue(result.message().get(1).getData().contains("alert-warning"));
   }
 }

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java
Patch:
@@ -46,6 +46,7 @@
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterHookRegistry;
 import org.apache.zeppelin.interpreter.RemoteWorksController;
+import org.apache.zeppelin.interpreter.ResultMessages;
 import org.apache.zeppelin.interpreter.remote.RemoteEventClientWrapper;
 import org.apache.zeppelin.spark.dep.SparkDependencyResolver;
 import org.apache.zeppelin.resource.Resource;
@@ -295,9 +296,9 @@ public static String showDF(SparkContext sc,
     }
 
     if (rows.length > maxResult) {
-      msg.append("<!--TABLE_COMMENT-->");
       msg.append("\n");
-      msg.append("<font color=red>Results are limited by " + maxResult + ".</font>");
+      msg.append(ResultMessages.getExceedsLimitRowsMessage(maxResult,
+          SparkSqlInterpreter.MAX_RESULTS));
     }
     sc.clearJobGroup();
     return msg.toString();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutput.java
Patch:
@@ -184,9 +184,9 @@ public void write(int b) throws IOException {
         if (b == NEW_LINE_CHAR && currentOut != null) {
           InterpreterResult.Type type = currentOut.getType();
           if (type == InterpreterResult.Type.TEXT || type == InterpreterResult.Type.TABLE) {
-
-            setType(InterpreterResult.Type.TEXT);
-            getCurrentOutput().write("Output exceeds " + limit + ". Truncated.\n");
+            setType(InterpreterResult.Type.HTML);
+            getCurrentOutput().write(ResultMessages.getExceedsLimitSizeMessage(limit,
+                "ZEPPELIN_INTERPRETER_OUTPUT_LIMIT").getData().getBytes());
             truncated = true;
             return;
           }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -969,9 +969,10 @@ private void configureParagraph(Paragraph p, Map< String, Object> newConfig, Str
       throw new BadRequestException("paragraph config cannot be empty");
     }
     Map<String, Object> origConfig = p.getConfig();
-    for (String key : newConfig.keySet()) {
-      origConfig.put(key, newConfig.get(key));
+    for ( final Map.Entry<String, Object> entry : newConfig.entrySet()){
+      origConfig.put(entry.getKey(), entry.getValue());
     }
+
     p.setConfig(origConfig);
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -164,7 +164,7 @@ public void testNoteCreateWithParagraphs() throws IOException {
       }
       assertTrue("paragraph title check failed", p.getTitle().startsWith("title"));
       assertTrue("paragraph text check failed", p.getText().startsWith("text"));
-      if ( p.getTitle() == "titleConfig"){
+      if ( p.getTitle().equals("titleConfig")){
         assertEquals("paragraph col width check failed", 9.0, p.getConfig().get("colWidth"));
         assertTrue("paragraph show title check failed", ((boolean) p.getConfig().get("title")));
         Map graph = ((List<Map>)p.getConfig().get("results")).get(0);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -139,7 +139,7 @@ public void setResult(Object results) {
   public Paragraph cloneParagraphForUser(String user) {
     Paragraph p = new Paragraph();
     p.settings.setParams(Maps.newHashMap(settings.getParams()));
-    p.settings.setForms(Maps.newHashMap(settings.getForms()));
+    p.settings.setForms(Maps.newLinkedHashMap(settings.getForms()));
     p.setConfig(Maps.newHashMap(config));
     p.setTitle(getTitle());
     p.setText(getText());
@@ -389,8 +389,8 @@ && isUserAuthorizedToAccessInterpreter(intp.getOption()) == false) {
       settings.clear();
     } else if (repl.getFormType() == FormType.SIMPLE) {
       String scriptBody = getScriptBody();
-      Map<String, Input> inputs = Input.extractSimpleQueryParam(scriptBody); // inputs will be built
-      // from script body
+      // inputs will be built from script body
+      LinkedHashMap<String, Input> inputs = Input.extractSimpleQueryForm(scriptBody);
 
       final AngularObjectRegistry angularRegistry =
           repl.getInterpreterGroup().getAngularObjectRegistry();

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -337,7 +337,7 @@ public void appendOutput(String message) throws IOException {
   public InterpreterResult interpret(String st, InterpreterContext context) {
     SparkInterpreter sparkInterpreter = getSparkInterpreter();
     sparkInterpreter.populateSparkWebUrl(context);
-    if (sparkInterpreter.getSparkVersion().isUnsupportedVersion()) {
+    if (sparkInterpreter.isUnsupportedSparkVersion()) {
       return new InterpreterResult(Code.ERROR, "Spark "
           + sparkInterpreter.getSparkVersion().toString() + " is not supported");
     }
@@ -466,8 +466,7 @@ public List<InterpreterCompletion> completion(String buf, int cursor) {
 
     //start code for completion
     SparkInterpreter sparkInterpreter = getSparkInterpreter();
-    if (sparkInterpreter.getSparkVersion().isUnsupportedVersion() == false
-            && pythonscriptRunning == false) {
+    if (sparkInterpreter.isUnsupportedSparkVersion() || pythonscriptRunning == false) {
       return new LinkedList<>();
     }
 

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -87,7 +87,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
     SQLContext sqlc = null;
     SparkInterpreter sparkInterpreter = getSparkInterpreter();
 
-    if (sparkInterpreter.getSparkVersion().isUnsupportedVersion()) {
+    if (sparkInterpreter.isUnsupportedSparkVersion()) {
       return new InterpreterResult(Code.ERROR, "Spark "
           + sparkInterpreter.getSparkVersion().toString() + " is not supported");
     }

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterprereter.java
Patch:
@@ -272,7 +272,9 @@ public InterpreterResult interpret(String code,
           throw new LivyException(e);
         }
         stmtInfo = getStatementInfo(stmtInfo.id);
-        paragraphId2StmtProgressMap.put(paragraphId, (int) (stmtInfo.progress * 100));
+        if (paragraphId != null) {
+          paragraphId2StmtProgressMap.put(paragraphId, (int) (stmtInfo.progress * 100));
+        }
       }
       if (appendSessionExpired) {
         return appendSessionExpire(getResultFromStatementInfo(stmtInfo, displayAppInfo),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinClient.java
Patch:
@@ -68,6 +68,7 @@ public class ZeppelinClient {
   private SchedulerService schedulerService;
   private Authentication authModule;
   private static final int MIN = 60;
+  private static final String ORIGIN = "Origin";
 
   private static final Set<String> actionable = new  HashSet<String>(Arrays.asList(
       // running events
@@ -188,6 +189,7 @@ public Message deserialize(String zeppelinMessage) {
   private Session openWatcherSession() {
     ClientUpgradeRequest request = new ClientUpgradeRequest();
     request.setHeader(WatcherSecurityKey.HTTP_HEADER, WatcherSecurityKey.getKey());
+    request.setHeader(ORIGIN, "*");
     WatcherWebsocket socket = WatcherWebsocket.createInstace();
     Future<Session> future = null;
     Session session = null;
@@ -241,6 +243,7 @@ private Session getNoteSession(String noteId, String principal, String ticket) {
   
   private Session openNoteSession(String noteId, String principal, String ticket) {
     ClientUpgradeRequest request = new ClientUpgradeRequest();
+    request.setHeader(ORIGIN, "*");
     ZeppelinWebsocket socket = new ZeppelinWebsocket(noteId);
     Future<Session> future = null;
     Session session = null;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -514,7 +514,8 @@ public Map<String, Object> getEditorSetting(Interpreter interpreter, String user
         }
       }
     } catch (NullPointerException e) {
-      logger.warn("Couldn't get interpreter editor setting");
+      // Use `debug` level because this log occurs frequently
+      logger.debug("Couldn't get interpreter editor setting");
     }
     return editor;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/GitNotebookRepo.java
Patch:
@@ -95,7 +95,7 @@ public Revision checkpoint(String pattern, String commitMessage, AuthenticationI
         LOG.debug("No changes found {}", pattern);
       }
     } catch (GitAPIException e) {
-      LOG.error("Failed to add+comit {} to Git", pattern, e);
+      LOG.error("Failed to add+commit {} to Git", pattern, e);
     }
     return revision;
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java
Patch:
@@ -182,6 +182,7 @@ private void close(final Collection<Interpreter> intpToClose) {
 
   public void close(final Map<String, InterpreterGroup> interpreterGroupRef,
       final String processKey, final String sessionKey) {
+    LOGGER.info("Close interpreter group " + getId() + " for session: " + sessionKey);
     close(interpreterGroupRef, processKey, sessionKey, this.get(sessionKey));
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -31,6 +31,8 @@
  */
 public abstract class RemoteInterpreterProcess {
   private static final Logger logger = LoggerFactory.getLogger(RemoteInterpreterProcess.class);
+
+  // number of sessions that are attached to this process
   private final AtomicInteger referenceCount;
 
   private GenericObjectPool<Client> clientPool;

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java
Patch:
@@ -142,7 +142,7 @@ public void testRemoteInterperterCall() throws TTransportException, IOException
     intpA.open(); // initializa all interpreters in the same group
     assertTrue(process.isRunning());
     assertEquals(1, process.getNumIdleClient());
-    assertEquals(2, process.referenceCount());
+    assertEquals(1, process.referenceCount());
 
     intpA.interpret("1",
         new InterpreterContext(
@@ -159,10 +159,10 @@ public void testRemoteInterperterCall() throws TTransportException, IOException
             new LinkedList<InterpreterContextRunner>(), null));
 
     intpB.open();
-    assertEquals(2, process.referenceCount());
+    assertEquals(1, process.referenceCount());
 
     intpA.close();
-    assertEquals(1, process.referenceCount());
+    assertEquals(0, process.referenceCount());
     intpB.close();
     assertEquals(0, process.referenceCount());
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -926,7 +926,6 @@ public void setPropertyAndRestart(String id, InterpreterOption option, Propertie
   public void restart(String settingId, String noteId, String user) {
     InterpreterSetting intpSetting = interpreterSettings.get(settingId);
     Preconditions.checkNotNull(intpSetting);
-
     synchronized (interpreterSettings) {
       intpSetting = interpreterSettings.get(settingId);
       // Check if dependency in specified path is changed

File: livy/src/test/java/org/apache/zeppelin/livy/LivySQLInterpreterTest.java
Patch:
@@ -36,6 +36,7 @@ public class LivySQLInterpreterTest {
   @Before
   public void setUp() {
     Properties properties = new Properties();
+    properties.setProperty("zeppelin.livy.url", "http://localhost:8998");
     properties.setProperty("zeppelin.livy.session.create_timeout", "120");
     properties.setProperty("zeppelin.livy.spark.sql.maxResult", "3");
     sqlInterpreter = new LivySparkSQLInterpreter(properties);

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -114,12 +114,14 @@ public ZeppelinServer() throws Exception {
        * packaged into binary package.
        */
       heliumBundleFactory = new HeliumBundleFactory(
+          conf,
           new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO)),
           new File(conf.getRelativeDir("lib/node_modules/zeppelin-tabledata")),
           new File(conf.getRelativeDir("lib/node_modules/zeppelin-vis")),
           new File(conf.getRelativeDir("lib/node_modules/zeppelin-spell")));
     } else {
       heliumBundleFactory = new HeliumBundleFactory(
+          conf,
           new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO)),
           new File(conf.getRelativeDir("zeppelin-web/src/app/tabledata")),
           new File(conf.getRelativeDir("zeppelin-web/src/app/visualization")),
@@ -410,4 +412,3 @@ private static boolean isBinaryPackage(ZeppelinConfiguration conf) {
     return !new File(conf.getRelativeDir("zeppelin-web")).isDirectory();
   }
 }
-

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterManagedProcess.java
Patch:
@@ -112,7 +112,7 @@ public void start(String userName, Boolean isUserImpersonate) {
     }
     cmdLine.addArgument("-l", false);
     cmdLine.addArgument(localRepoDir, false);
-    cmdLine.addArgument("-n", false);
+    cmdLine.addArgument("-g", false);
     cmdLine.addArgument(interpreterGroupName, false);
 
     executor = new DefaultExecutor();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java
Patch:
@@ -75,7 +75,6 @@ public NotebookRepoSync(ZeppelinConfiguration conf) {
     }
 
     for (int i = 0; i < Math.min(storageClassNames.length, getMaxRepoNum()); i++) {
-      @SuppressWarnings("static-access")
       Class<?> notebookStorageClass;
       try {
         notebookStorageClass = getClass().forName(storageClassNames[i].trim());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/model/UserSessionContainer.java
Patch:
@@ -28,7 +28,7 @@
 public class UserSessionContainer {
   private static class Entity {
     public final String userSession;
-
+    
     Entity(String userSession) {
       this.userSession = userSession;
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/Client.java
Patch:
@@ -72,8 +72,8 @@ public void stop() {
     }
   }
 
-  public void relayToZeppelinHub(String message) {
-    zeppelinhubClient.send(message);
+  public void relayToZeppelinHub(String message, String token) {
+    zeppelinhubClient.send(message, token);
   }
 
   public void relayToZeppelin(Message message, String noteId) {

File: python/src/main/java/org/apache/zeppelin/python/PythonDockerInterpreter.java
Patch:
@@ -89,8 +89,9 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
           mountPythonScript +
           mountPy4j +
           "-e PYTHONPATH=\"" + pythonPath + "\" " +
-          image +
-          " python /_zeppelin_tmp/" + pythonScript.getName());
+          image + " " +
+          getPythonInterpreter().getPythonBindPath() + " " +
+          "/_zeppelin_tmp/" + pythonScript.getName());
       restartPythonProcess();
       out.clear();
       return new InterpreterResult(InterpreterResult.Code.SUCCESS, "\"" + image + "\" activated");

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1082,6 +1082,7 @@ private void moveNoteToTrash(NotebookSocket conn, HashSet<String> userAndRoles,
     if (note != null && !note.isTrash()){
       fromMessage.put("name", Folder.TRASH_FOLDER_ID + "/" + note.getName());
       renameNote(conn, userAndRoles, notebook, fromMessage, "move");
+      notebook.moveNoteToTrash(note.getId());
     }
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -2139,7 +2139,7 @@ public ParagraphListenerImpl(NotebookServer notebookServer, Note note) {
     @Override
     public void onProgressUpdate(Job job, int progress) {
       notebookServer.broadcast(note.getId(),
-          new Message(OP.PROGRESS).put("id", job.getId()).put("progress", job.progress()));
+          new Message(OP.PROGRESS).put("id", job.getId()).put("progress", progress));
     }
 
     @Override

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -193,7 +193,8 @@ public void onMessage(NotebookSocket conn, String msg) {
       }
 
       String ticket = TicketContainer.instance.getTicket(messagereceived.principal);
-      if (ticket != null && !ticket.equals(messagereceived.ticket)) {
+      if (ticket != null &&
+          (messagereceived.ticket == null || !ticket.equals(messagereceived.ticket))) {
         /* not to pollute logs, log instead of exception */
         if (StringUtils.isEmpty(messagereceived.ticket)) {
           LOG.debug("{} message: invalid ticket {} != {}", messagereceived.op,

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -224,7 +224,7 @@ public void testRestartInterpreterInScopedMode() throws Exception {
     LazyOpenInterpreter interpreter2 = (LazyOpenInterpreter)interpreterGroup.get("user2").get(0);
     interpreter2.open();
 
-    mock1Setting.closeAndRemoveInterpreterGroupByUser("user1");
+    mock1Setting.closeAndRemoveInterpreterGroup("sharedProcess", "user1");
     assertFalse(interpreter1.isOpen());
     assertTrue(interpreter2.isOpen());
   }
@@ -270,7 +270,7 @@ public void testRestartInterpreterInIsolatedMode() throws Exception {
     LazyOpenInterpreter interpreter2 = (LazyOpenInterpreter)interpreterGroup2.get("shared_session").get(0);
     interpreter2.open();
 
-    mock1Setting.closeAndRemoveInterpreterGroupByUser("user1");
+    mock1Setting.closeAndRemoveInterpreterGroup("note1", "user1");
     assertFalse(interpreter1.isOpen());
     assertTrue(interpreter2.isOpen());
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -70,7 +70,7 @@ public class InterpreterSetting {
   @SerializedName("interpreterGroup")
   private List<InterpreterInfo> interpreterInfos;
   private final transient Map<String, InterpreterGroup> interpreterGroupRef = new HashMap<>();
-  private List<Dependency> dependencies;
+  private List<Dependency> dependencies = new LinkedList<>();
   private InterpreterOption option;
   private transient String path;
 

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -635,7 +635,7 @@ private InterpreterResult executeSql(String propertyKey, String sql,
         } catch (SQLException e) { /*ignored*/ }
       }
       getJDBCConfiguration(user).removeStatement(paragraphId);
-    } catch (Exception e) {
+    } catch (Throwable e) {
       if (e.getCause() instanceof TTransportException &&
           Throwables.getStackTraceAsString(e).contains("GSS") &&
           getJDBCConfiguration(user).isConnectionInDBDriverPoolSuccessful(propertyKey)) {

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/SqlCompleter.java
Patch:
@@ -111,6 +111,8 @@ private static Set<String> getSchemaNames(DatabaseMetaData meta, String schemaFi
       try {
         while (schemas.next()) {
           String schemaName = schemas.getString("TABLE_SCHEM");
+          if (schemaName == null)
+            schemaName = "";
           if (schemaFilter.equals("") || schemaFilter == null || schemaName.matches(
                   schemaFilter.replace("_", ".").replace("%", ".*?"))) {
             res.add(schemaName);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -302,6 +302,7 @@ Interpreter createRemoteRepl(String interpreterPath, String interpreterSessionKe
     String localRepoPath = conf.getInterpreterLocalRepoPath() + "/" + interpreterSettingId;
     int maxPoolSize = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_MAX_POOL_SIZE);
     String interpreterRunnerPath;
+    String interpreterGroupName = interpreterSettingManager.get(interpreterSettingId).getName();
     if (null != interpreterRunner) {
       interpreterRunnerPath = interpreterRunner.getPath();
       Path p = Paths.get(interpreterRunnerPath);
@@ -317,7 +318,7 @@ Interpreter createRemoteRepl(String interpreterPath, String interpreterSessionKe
         new RemoteInterpreter(property, interpreterSessionKey, className,
             interpreterRunnerPath, interpreterPath, localRepoPath, connectTimeout, maxPoolSize,
             remoteInterpreterProcessListener, appEventListener, userName, isUserImpersonate,
-            conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT));
+            conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT), interpreterGroupName);
     remoteInterpreter.addEnv(env);
 
     return new LazyOpenInterpreter(remoteInterpreter);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -473,13 +473,13 @@ public void interpreterRunnerTest() {
     InterpreterRunner mockInterpreterRunner = mock(InterpreterRunner.class);
     String testInterpreterRunner = "relativePath.sh";
     when(mockInterpreterRunner.getPath()).thenReturn(testInterpreterRunner); // This test only for Linux
-    Interpreter i = factory.createRemoteRepl("path1", "sessionKey", "className", new Properties(), "settingId", "userName", false, mockInterpreterRunner);
+    Interpreter i = factory.createRemoteRepl("path1", "sessionKey", "className", new Properties(), interpreterSettingManager.get().get(0).getId(), "userName", false, mockInterpreterRunner);
     String interpreterRunner = ((RemoteInterpreter) ((LazyOpenInterpreter) i).getInnerInterpreter()).getInterpreterRunner();
     assertNotEquals(interpreterRunner, testInterpreterRunner);
 
     testInterpreterRunner = "/AbsolutePath.sh";
     when(mockInterpreterRunner.getPath()).thenReturn(testInterpreterRunner);
-    i = factory.createRemoteRepl("path1", "sessionKey", "className", new Properties(), "settingId", "userName", false, mockInterpreterRunner);
+    i = factory.createRemoteRepl("path1", "sessionKey", "className", new Properties(), interpreterSettingManager.get().get(0).getId(), "userName", false, mockInterpreterRunner);
     interpreterRunner = ((RemoteInterpreter) ((LazyOpenInterpreter) i).getInnerInterpreter()).getInterpreterRunner();
     assertEquals(interpreterRunner, testInterpreterRunner);
   }

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterprereter.java
Patch:
@@ -55,7 +55,7 @@ public abstract class BaseLivyInterprereter extends Interpreter {
   private int pullStatusInterval;
   protected boolean displayAppInfo;
   private AtomicBoolean sessionExpired = new AtomicBoolean(false);
-  private LivyVersion livyVersion;
+  protected LivyVersion livyVersion;
 
   // keep tracking the mapping between paragraphId and statementId, so that we can cancel the
   // statement after we execute it.

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumBundleFactory.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.*;
 
 /**
- * Load helium visualization
+ * Load helium visualization & spell
  */
 public class HeliumBundleFactory {
   Logger logger = LoggerFactory.getLogger(HeliumBundleFactory.class);

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -126,7 +126,7 @@ public ZeppelinServer() throws Exception {
           new File(conf.getRelativeDir("zeppelin-web/src/app/spell")));
     }
 
-    this.helium = new Helium(
+    ZeppelinServer.helium = new Helium(
         conf.getHeliumConfPath(),
         conf.getHeliumRegistry(),
         new File(conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO),
@@ -177,7 +177,7 @@ public static void main(String[] args) throws InterruptedException {
     // Web UI
     final WebAppContext webApp = setupWebAppContext(contexts, conf);
 
-    // REST api
+    // Create `ZeppelinServer` using reflection and setup REST Api
     setupRestApiContextHandler(webApp, conf);
 
     // Notebook server

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumTest.java
Patch:
@@ -122,7 +122,7 @@ public void testRefresh() throws IOException, URISyntaxException, TaskRunnerExce
         ""));
 
     // then
-    assertEquals(1, helium.getAllPackageInfo(false).size());
+    assertEquals(1, helium.getAllPackageInfoWithoutRefresh().size());
 
     // when
     registry1.add(new HeliumPackage(
@@ -136,7 +136,7 @@ public void testRefresh() throws IOException, URISyntaxException, TaskRunnerExce
         ""));
 
     // then
-    assertEquals(1, helium.getAllPackageInfo(false).size());
-    assertEquals(2, helium.getAllPackageInfo(true).size());
+    assertEquals(1, helium.getAllPackageInfoWithoutRefresh().size());
+    assertEquals(2, helium.getAllPackageInfo(true, null).size());
   }
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/security/DirAccessTest.java
Patch:
@@ -30,7 +30,7 @@ public class DirAccessTest extends AbstractTestRestApi {
   public void testDirAccessForbidden() throws Exception {
     synchronized (this) {
       System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED.getVarName(), "false");
-      AbstractTestRestApi.startUpWithAuthenticationEnable();
+      AbstractTestRestApi.startUp();
       HttpClient httpClient = new HttpClient();
       GetMethod getMethod = new GetMethod(getUrlToTest() + "/app/");
       httpClient.executeMethod(getMethod);
@@ -43,7 +43,7 @@ public void testDirAccessForbidden() throws Exception {
   public void testDirAccessOk() throws Exception {
     synchronized (this) {
       System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED.getVarName(), "true");
-      AbstractTestRestApi.startUpWithAuthenticationEnable();
+      AbstractTestRestApi.startUp();
       HttpClient httpClient = new HttpClient();
       GetMethod getMethod = new GetMethod(getUrlToTest() + "/app/");
       httpClient.executeMethod(getMethod);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -1159,7 +1159,7 @@ public void testPublicPrivateNewNote() throws IOException, SchedulerException {
     assertEquals(notebookAuthorization.getOwners(notePublic.getId()).size(), 1);
     assertEquals(notebookAuthorization.getReaders(notePublic.getId()).size(), 0);
     assertEquals(notebookAuthorization.getWriters(notePublic.getId()).size(), 0);
-    
+
     // case of private note
     System.setProperty(ConfVars.ZEPPELIN_NOTEBOOK_PUBLIC.getVarName(), "false");
     ZeppelinConfiguration conf2 = ZeppelinConfiguration.create();
@@ -1181,8 +1181,7 @@ public void testPublicPrivateNewNote() throws IOException, SchedulerException {
     notes2 = notebook.getAllNotes(user2);
     assertEquals(notes1.size(), 2);
     assertEquals(notes2.size(), 1);
-    assertEquals(notes1.get(1).getId(), notePrivate.getId());
-    
+
     // user1 have all rights
     assertEquals(notebookAuthorization.getOwners(notePrivate.getId()).size(), 1);
     assertEquals(notebookAuthorization.getReaders(notePrivate.getId()).size(), 1);

File: elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/ElasticsearchInterpreter.java
Patch:
@@ -83,7 +83,7 @@ public class ElasticsearchInterpreter extends Interpreter {
       + "    . same comments as for the search\n"
       + "  - get /index/type/id\n"
       + "  - delete /index/type/id\n"
-      + "  - index /ndex/type/id <json-formatted document>\n"
+      + "  - index /index/type/id <json-formatted document>\n"
       + "    . the id can be omitted, elasticsearch will generate one";
 
   protected static final List<String> COMMANDS = Arrays.asList(

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSettingManager.java
Patch:
@@ -547,7 +547,7 @@ public void run() {
                 setting.getId());
             if (localRepoDir.exists()) {
               try {
-                FileUtils.cleanDirectory(localRepoDir);
+                FileUtils.forceDelete(localRepoDir);
               } catch (FileNotFoundException e) {
                 logger.info("A file that does not exist cannot be deleted, nothing to worry", e);
               }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -717,7 +717,7 @@ void permissionError(NotebookSocket conn, String op, String userName, Set<String
     LOG.info("Cannot {}. Connection readers {}. Allowed readers {}", op, userAndRoles, allowed);
 
     conn.send(serializeMessage(new Message(OP.AUTH_INFO).put("info",
-        "Insufficient privileges to " + op + "note.\n\n" + "Allowed users or roles: " + allowed
+        "Insufficient privileges to " + op + " note.\n\n" + "Allowed users or roles: " + allowed
             .toString() + "\n\n" + "But the user " + userName + " belongs to: " + userAndRoles
             .toString())));
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -200,9 +200,9 @@ public void onMessage(NotebookSocket conn, String msg) {
               messagereceived.ticket, ticket);
         } else {
           if (!messagereceived.op.equals(OP.PING)) {
-            conn.send(serializeMessage(new Message(OP.ERROR_INFO).put("info",
+            conn.send(serializeMessage(new Message(OP.SESSION_LOGOUT).put("info",
                 "Your ticket is invalid possibly due to server restart. "
-                    + "Please refresh the page and login again.")));
+                    + "Please login again.")));
           }
         }
         return;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -167,6 +167,7 @@ public static enum OP {
     GET_INTERPRETER_SETTINGS,     // [c-s] get interpreter settings
     INTERPRETER_SETTINGS,         // [s-c] interpreter settings
     ERROR_INFO,                   // [s-c] error information to be sent
+    SESSION_LOGOUT,               // [s-c] error information to be sent
     WATCHER,                      // [s-c] Change websocket to watcher mode.
     PARAGRAPH_ADDED,              // [s-c] paragraph is added
     PARAGRAPH_REMOVED,            // [s-c] paragraph deleted

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfo.java
Patch:
@@ -31,7 +31,7 @@ public class InterpreterInfo {
   private boolean defaultInterpreter = false;
   private Map<String, Object> editor;
 
-  InterpreterInfo(String className, String name, boolean defaultInterpreter,
+  public InterpreterInfo(String className, String name, boolean defaultInterpreter,
       Map<String, Object> editor) {
     this.className = className;
     this.name = name;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -84,7 +84,7 @@ public abstract class AbstractTestRestApi {
       "role1 = *\n" +
       "role2 = *\n" +
       "role3 = *\n" +
-      "admin = *" +
+      "admin = *\n" +
       "[urls]\n" +
       "/api/version = anon\n" +
       "/** = authc";

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -351,6 +351,7 @@ public Paragraph insertParagraph(int index, AuthenticationInfo authenticationInf
     synchronized (paragraphs) {
       paragraphs.add(index, p);
     }
+    p.addUser(p, p.getUser());
     if (noteEventListener != null) {
       noteEventListener.onParagraphCreate(p);
     }

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterprereter.java
Patch:
@@ -266,7 +266,7 @@ public InterpreterResult interpret(String code,
     }
   }
 
-  private LivyVersion getLivyVersion() throws LivyException {
+  protected LivyVersion getLivyVersion() throws LivyException {
     return new LivyVersion((LivyVersionResponse.fromJson(callRestAPI("/version", "GET")).version));
   }
 

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkInterpreter.java
Patch:
@@ -70,7 +70,7 @@ protected String extractWebUIAddress() throws LivyException {
    * @param result
    * @return
    */
-  private String extractStatementResult(String result) {
+  public String extractStatementResult(String result) {
     int pos = -1;
     if ((pos = result.indexOf("=")) >= 0) {
       return result.substring(pos + 1).trim();

File: livy/src/main/java/org/apache/zeppelin/livy/LivyVersion.java
Patch:
@@ -26,8 +26,8 @@
 public class LivyVersion {
   private static final Logger logger = LoggerFactory.getLogger(LivyVersion.class);
 
-  private static final LivyVersion LIVY_0_2_0 = LivyVersion.fromVersionString("0.2.0");
-  private static final LivyVersion LIVY_0_3_0 = LivyVersion.fromVersionString("0.3.0");
+  protected static final LivyVersion LIVY_0_2_0 = LivyVersion.fromVersionString("0.2.0");
+  protected static final LivyVersion LIVY_0_3_0 = LivyVersion.fromVersionString("0.3.0");
 
   private int version;
   private String versionString;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -715,6 +715,7 @@ void unpersist(AuthenticationInfo subject) throws IOException {
    */
   public Note getUserNote(String user) {
     Note newNote = new Note();
+    newNote.name = getName();
     newNote.id = getId();
     newNote.config = getConfig();
     newNote.angularObjects = getAngularObjects();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -320,7 +320,7 @@ public void testRunAll() throws IOException {
     note.runAll();
 
     // wait for finish
-    while(p3.isTerminated() == false) {
+    while(p3.isTerminated() == false || p3.getResult() == null) {
       Thread.yield();
     }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/utils/InterpreterBindingUtils.java
Patch:
@@ -37,7 +37,7 @@ public static List<InterpreterSettingsList> getInterpreterBindings(Notebook note
           setting.getInterpreterInfos(), true));
     }
 
-    List<InterpreterSetting> availableSettings = notebook.getInterpreterFactory().get();
+    List<InterpreterSetting> availableSettings = notebook.getInterpreterSettingManager().get();
     for (InterpreterSetting setting : availableSettings) {
       boolean selected = false;
       for (InterpreterSetting selectedSetting : selectedSettings) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -80,7 +80,7 @@ public void getAvailableInterpreters() throws IOException {
 
     // then
     assertThat(get, isAllowed());
-    assertEquals(ZeppelinServer.notebook.getInterpreterFactory().getAvailableInterpreterSettings().size(),
+    assertEquals(ZeppelinServer.notebook.getInterpreterSettingManager().getAvailableInterpreterSettings().size(),
         body.entrySet().size());
     get.releaseConnection();
   }
@@ -258,7 +258,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
     assertEquals(p.getResult().message().get(0).getData(), getSimulatedMarkdownResult("markdown"));
 
     // when: restart interpreter
-    for (InterpreterSetting setting : ZeppelinServer.notebook.getInterpreterFactory().getInterpreterSettings(note.getId())) {
+    for (InterpreterSetting setting : ZeppelinServer.notebook.getInterpreterSettingManager().getInterpreterSettings(note.getId())) {
       if (setting.getName().equals("md")) {
         // call restart interpreter API
         PutMethod put = httpPut("/interpreter/setting/restart/" + setting.getId(), "");
@@ -304,7 +304,7 @@ public void testRestartInterpreterPerNote() throws IOException, InterruptedExcep
 
     // when: get md interpreter
     InterpreterSetting mdIntpSetting = null;
-    for (InterpreterSetting setting : ZeppelinServer.notebook.getInterpreterFactory().getInterpreterSettings(note.getId())) {
+    for (InterpreterSetting setting : ZeppelinServer.notebook.getInterpreterSettingManager().getInterpreterSettings(note.getId())) {
       if (setting.getName().equals("md")) {
         mdIntpSetting = setting;
         break;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -185,7 +185,7 @@ public void sparkRTest() throws IOException {
 
         for (InterpreterSetting setting : settings) {
           if (setting.getName().equals("spark")) {
-            ZeppelinServer.notebook.getInterpreterFactory().restart(setting.getId());
+            ZeppelinServer.notebook.getInterpreterSettingManager().restart(setting.getId());
             break;
           }
         }
@@ -417,7 +417,7 @@ public void pySparkDepLoaderTest() throws IOException {
 
             for (InterpreterSetting setting : settings) {
                 if (setting.getName().equals("spark")) {
-                    ZeppelinServer.notebook.getInterpreterFactory().restart(setting.getId());
+                    ZeppelinServer.notebook.getInterpreterSettingManager().restart(setting.getId());
                     break;
                 }
             }

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -101,7 +101,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr
 
     // get reference to interpreterGroup
     InterpreterGroup interpreterGroup = null;
-    List<InterpreterSetting> settings = notebook.getInterpreterFactory().getInterpreterSettings(note1.getId());
+    List<InterpreterSetting> settings = notebook.getInterpreterSettingManager().getInterpreterSettings(note1.getId());
     for (InterpreterSetting setting : settings) {
       if (setting.getName().equals("md")) {
         interpreterGroup = setting.getInterpreterGroup("anonymous", "sharedProcess");
@@ -374,7 +374,7 @@ public void testCreateNoteWithDefaultInterpreterId() throws IOException {
 
     String noteName = "Note with millis " + System.currentTimeMillis();
     String defaultInterpreterId = "";
-    List<InterpreterSetting> settings = notebook.getInterpreterFactory().get();
+    List<InterpreterSetting> settings = notebook.getInterpreterSettingManager().get();
     if (settings.size() > 1) {
       defaultInterpreterId = settings.get(1).getId();
     }
@@ -396,7 +396,7 @@ public void testCreateNoteWithDefaultInterpreterId() throws IOException {
     }
 
     if (settings.size() > 1) {
-      assertEquals(notebook.getInterpreterFactory().getDefaultInterpreterSetting(
+      assertEquals(notebook.getInterpreterSettingManager().getDefaultInterpreterSetting(
               createdNote.getId()).getId(), defaultInterpreterId);
     }
     notebook.removeNote(createdNote.getId(), anonymous);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/ParagraphTest.java
Patch:
@@ -102,7 +102,7 @@ public void should_extract_variable_from_angular_object_registry() throws Except
     final String scriptBody = "My name is ${name} and I am ${age=20} years old. " +
             "My occupation is ${ job = engineer | developer | artists}";
 
-    final Paragraph paragraph = new Paragraph(note, null, null);
+    final Paragraph paragraph = new Paragraph(note, null, null, null);
     final String paragraphId = paragraph.getId();
 
     final AngularObject nameAO = AngularObjectBuilder.build("name", "DuyHai DOAN", noteId,

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -365,7 +365,7 @@ public Connection getConnection(String propertyKey, InterpreterContext interpret
             if (user == null) {
               connection = getConnectionFromPool(url, user, propertyKey, properties);
             } else {
-              if ("hive".equalsIgnoreCase(propertyKey)) {
+              if (url.trim().startsWith("jdbc:hive")) {
                 StringBuilder connectionUrl = new StringBuilder(url);
                 Integer lastIndexOfUrl = connectionUrl.indexOf("?");
                 if (lastIndexOfUrl == -1) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -145,8 +145,8 @@ private String getInterpreterProcessKey(String user, String noteId) {
       key = SHARED_PROCESS;
     }
 
-    logger.debug("getInterpreterProcessKey: {} for InterpreterSetting Id: {}, Name: {}",
-        key, getId(), getName());
+    //logger.debug("getInterpreterProcessKey: {} for InterpreterSetting Id: {}, Name: {}",
+    //    key, getId(), getName());
     return key;
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResultMessage.java
Patch:
@@ -16,10 +16,12 @@
  */
 package org.apache.zeppelin.interpreter;
 
+import java.io.Serializable;
+
 /**
  * Interpreter result message
  */
-public class InterpreterResultMessage {
+public class InterpreterResultMessage implements Serializable {
   InterpreterResult.Type type;
   String data;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventClient.java
Patch:
@@ -351,7 +351,6 @@ public void putResponseInvokeMethod(
     }
   }
 
-
   /**
    * Supposed to call from RemoteInterpreterEventPoller
    * @return next available event

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/Resource.java
Patch:
@@ -117,6 +117,7 @@ public Object invokeMethod(
         Method method = r.getClass().getMethod(
             methodName,
             paramTypes);
+        method.setAccessible(true);
         Object ret = method.invoke(r, params);
         return ret;
       }  catch (Exception e) {

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterResourcePool.java
Patch:
@@ -133,4 +133,4 @@ public int getProgress(InterpreterContext context) {
   public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
-}
\ No newline at end of file
+}

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -993,6 +993,7 @@ public String getSparkUIUrl() {
   }
 
   private Results.Result interpret(String line) {
+    out.ignoreLeadingNewLinesFromScalaReporter();
     return (Results.Result) Utils.invokeMethod(
         intp,
         "interpret",
@@ -1261,7 +1262,6 @@ private void putLatestVarInResourcePool(InterpreterContext context) {
     if (varName == null || varName.isEmpty()) {
       return;
     }
-
     Object lastObj = null;
     try {
       if (Utils.isScala2_10()) {

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -364,7 +364,7 @@ public Object createSparkSession() {
     for (Object k : intpProperty.keySet()) {
       String key = (String) k;
       String val = toString(intpProperty.get(key));
-      if (!key.startsWith("spark.") || !val.trim().isEmpty()) {
+      if (key.startsWith("spark.") && !val.trim().isEmpty()) {
         logger.debug(String.format("SparkConf: key = [%s], value = [%s]", key, val));
         conf.set(key, val);
       }
@@ -495,7 +495,7 @@ public SparkContext createSparkContext_1() {
     for (Object k : intpProperty.keySet()) {
       String key = (String) k;
       String val = toString(intpProperty.get(key));
-      if (!key.startsWith("spark.") || !val.trim().isEmpty()) {
+      if (key.startsWith("spark.") && !val.trim().isEmpty()) {
         logger.debug(String.format("SparkConf: key = [%s], value = [%s]", key, val));
         conf.set(key, val);
       }

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -377,7 +377,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
           "pyspark " + sparkInterpreter.getSparkContext().version() + " is not supported"));
       return new InterpreterResult(Code.ERROR, errorMessage);
     }
-    String jobGroup = sparkInterpreter.getJobGroup(context);
+    String jobGroup = Utils.buildJobGroupId(context);
     ZeppelinContext z = sparkInterpreter.getZeppelinContext();
     z.setInterpreterContext(context);
     z.setGui(context.getGui());

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteEventClientWrapper.java
Patch:
@@ -12,4 +12,7 @@ public interface RemoteEventClientWrapper {
 
   public void onMetaInfosReceived(Map<String, String> infos);
 
+  public void onParaInfosReceived(String noteId, String paragraphId,
+                                            Map<String, String> infos);
+
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener.java
Patch:
@@ -40,4 +40,6 @@ public interface RemoteWorksEventListener {
     public void onFinished(Object resultObject);
     public void onError();
   }
+  public void onParaInfosReceived(String noteId, String paragraphId,
+      String interpreterSettingId, Map<String, String> metaInfos);
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -377,7 +377,7 @@ public Set<Object> getSingletons() {
     HeliumRestApi heliumApi = new HeliumRestApi(helium, notebook);
     singletons.add(heliumApi);
 
-    InterpreterRestApi interpreterApi = new InterpreterRestApi(replFactory);
+    InterpreterRestApi interpreterApi = new InterpreterRestApi(replFactory, notebookWsServer);
     singletons.add(interpreterApi);
 
     CredentialRestApi credentialApi = new CredentialRestApi(credentials);

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -64,14 +64,14 @@ protected String getParagraphXPath(int paragraphNo) {
 
   protected boolean waitForParagraph(final int paragraphNo, final String state) {
     By locator = By.xpath(getParagraphXPath(paragraphNo)
-        + "//div[contains(@class, 'control')]//span[1][contains(.,'" + state + "')]");
+        + "//div[contains(@class, 'control')]//span[2][contains(.,'" + state + "')]");
     WebElement element = pollingWait(locator, MAX_PARAGRAPH_TIMEOUT_SEC);
     return element.isDisplayed();
   }
 
   protected String getParagraphStatus(final int paragraphNo) {
     By locator = By.xpath(getParagraphXPath(paragraphNo)
-        + "//div[contains(@class, 'control')]//span[1]");
+        + "//div[contains(@class, 'control')]/span[2]");
 
     return driver.findElement(locator).getText();
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -379,6 +379,7 @@ public Paragraph clearParagraphOutput(String paragraphId) {
       for (Paragraph p : paragraphs) {
         if (p.getId().equals(paragraphId)) {
           p.setReturn(null, null);
+          p.clearRuntimeInfo(null);
           return p;
         }
       }
@@ -563,6 +564,7 @@ public void run(String paragraphId) {
       return;
     }
 
+    p.clearRuntimeInfo(null);
     String requiredReplName = p.getRequiredReplName();
     Interpreter intp = factory.getInterpreter(p.getUser(), getId(), requiredReplName);
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -480,6 +480,7 @@ public Note loadNoteFromRepo(String id, AuthenticationInfo subject) {
       if (p.getDateFinished() != null && lastUpdatedDate.before(p.getDateFinished())) {
         lastUpdatedDate = p.getDateFinished();
       }
+      p.clearRuntimeInfo(null);
     }
 
     Map<String, List<AngularObject>> savedObjects = note.getAngularObjects();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -174,7 +174,8 @@ public static enum OP {
     NOTE_UPDATED,                 // [s-c] paragraph updated(name, config)
     RUN_ALL_PARAGRAPHS,           // [c-s] run all paragraphs
     PARAGRAPH_EXECUTED_BY_SPELL,  // [c-s] paragraph was executed by spell
-    RUN_PARAGRAPH_USING_SPELL     // [s-c] run paragraph using spell
+    RUN_PARAGRAPH_USING_SPELL,     // [s-c] run paragraph using spell
+    PARAS_INFO                    // [s-c] paragraph runtime infos
   }
 
   public static final Message EMPTY = new Message(null);

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -346,6 +346,9 @@ private static WebAppContext setupWebAppContext(ContextHandlerCollection context
     webApp.addFilter(new FilterHolder(CorsFilter.class), "/*",
         EnumSet.allOf(DispatcherType.class));
 
+    webApp.setInitParameter("org.eclipse.jetty.servlet.Default.dirAllowed",
+            Boolean.toString(conf.getBoolean(ConfVars.ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED)));
+
     return webApp;
 
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -607,7 +607,8 @@ public static enum ConfVars {
     ZEPPELIN_ALLOWED_ORIGINS("zeppelin.server.allowed.origins", "*"),
     ZEPPELIN_ANONYMOUS_ALLOWED("zeppelin.anonymous.allowed", true),
     ZEPPELIN_CREDENTIALS_PERSIST("zeppelin.credentials.persist", true),
-    ZEPPELIN_WEBSOCKET_MAX_TEXT_MESSAGE_SIZE("zeppelin.websocket.max.text.message.size", "1024000");
+    ZEPPELIN_WEBSOCKET_MAX_TEXT_MESSAGE_SIZE("zeppelin.websocket.max.text.message.size", "1024000"),
+    ZEPPELIN_SERVER_DEFAULT_DIR_ALLOWED("zeppelin.server.default.dir.allowed", false);
 
     private String varName;
     @SuppressWarnings("rawtypes")

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -546,7 +546,6 @@ public static enum ConfVars {
         + "org.apache.zeppelin.livy.LivySparkRInterpreter,"
         + "org.apache.zeppelin.alluxio.AlluxioInterpreter,"
         + "org.apache.zeppelin.file.HDFSFileInterpreter,"
-        + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.pig.PigInterpreter,"
         + "org.apache.zeppelin.pig.PigQueryInterpreter,"
         + "org.apache.zeppelin.flink.FlinkInterpreter,"

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -169,8 +169,9 @@ protected List<String> parseSQLOutput(String output) {
     }
 
     for (String line : lines) {
+      // Only match format "|....|"
       // skip line like "+---+---+" and "only showing top 1 row"
-      if (!line.matches("(\\+\\-+)+\\+") || line.contains("only showing")) {
+      if (line.matches("^\\|.*\\|$")) {
         List<String> cells = new ArrayList<>();
         for (Pair pair : pairs) {
           // strip the blank space around the cell

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java
Patch:
@@ -102,7 +102,7 @@ public boolean equals(Object o) {
    */
   public Application load(HeliumPackage packageInfo, ApplicationContext context)
       throws Exception {
-    if (packageInfo.getType() != HeliumPackage.Type.APPLICATION) {
+    if (packageInfo.getType() != HeliumType.APPLICATION) {
       throw new ApplicationException(
           "Can't instantiate " + packageInfo.getType() + " package using ApplicationLoader");
     }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/ApplicationLoaderTest.java
Patch:
@@ -20,8 +20,6 @@
 import org.apache.commons.io.FileUtils;
 import org.apache.zeppelin.dep.DependencyResolver;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
-import org.apache.zeppelin.interpreter.InterpreterOutputListener;
-import org.apache.zeppelin.interpreter.InterpreterResultMessageOutput;
 import org.apache.zeppelin.resource.LocalResourcePool;
 import org.junit.After;
 import org.junit.Before;
@@ -74,7 +72,7 @@ public void loadUnloadApplication() throws Exception {
 
   public HeliumPackage createPackageInfo(String className, String artifact) {
     HeliumPackage app1 = new HeliumPackage(
-        HeliumPackage.Type.APPLICATION,
+        HeliumType.APPLICATION,
         "name1",
         "desc1",
         artifact,

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -270,7 +270,7 @@ public void testClearOutputButton() throws Exception {
       collector.checkThat("Before Run Output field contains ",
           driver.findElements(By.xpath(xpathToOutputField)).size(),
           CoreMatchers.equalTo(0));
-      driver.findElement(By.xpath(getParagraphXPath(1) + "//span[@ng-click='runParagraph(getEditorValue())']")).click();
+      runParagraph(1);
       waitForParagraph(1, "FINISHED");
       collector.checkThat("After Run Output field contains  ",
           driver.findElement(By.xpath(xpathToOutputField)).getText(),
@@ -286,7 +286,6 @@ public void testClearOutputButton() throws Exception {
     } catch (Exception e) {
       handleException("Exception in ParagraphActionsIT while testClearOutputButton ", e);
     }
-
   }
 
   @Test

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -172,7 +172,9 @@ public static enum OP {
     PARAGRAPH_REMOVED,            // [s-c] paragraph deleted
     PARAGRAPH_MOVED,              // [s-c] paragraph moved
     NOTE_UPDATED,                 // [s-c] paragraph updated(name, config)
-    RUN_ALL_PARAGRAPHS            // [c-s] run all paragraphs
+    RUN_ALL_PARAGRAPHS,           // [c-s] run all paragraphs
+    PARAGRAPH_EXECUTED_BY_SPELL,  // [c-s] paragraph was executed by spell
+    RUN_PARAGRAPH_USING_SPELL     // [s-c] run paragraph using spell
   }
 
   public static final Message EMPTY = new Message(null);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumLocalRegistryTest.java
Patch:
@@ -50,7 +50,7 @@ public void testGetAllPackage() throws IOException {
 
     // when
     Gson gson = new Gson();
-    HeliumPackage pkg1 = new HeliumPackage(HeliumPackage.Type.APPLICATION,
+    HeliumPackage pkg1 = new HeliumPackage(HeliumType.APPLICATION,
         "app1",
         "desc1",
         "artifact1",

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumTest.java
Patch:
@@ -24,7 +24,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.net.URI;
 import java.net.URISyntaxException;
 
 import static org.junit.Assert.assertEquals;
@@ -79,7 +78,7 @@ public void testRestoreRegistryInstances() throws IOException, URISyntaxExceptio
 
     // when
     registry1.add(new HeliumPackage(
-        HeliumPackage.Type.APPLICATION,
+        HeliumType.APPLICATION,
         "name1",
         "desc1",
         "artifact1",
@@ -89,7 +88,7 @@ public void testRestoreRegistryInstances() throws IOException, URISyntaxExceptio
         ""));
 
     registry2.add(new HeliumPackage(
-        HeliumPackage.Type.APPLICATION,
+        HeliumType.APPLICATION,
         "name2",
         "desc2",
         "artifact2",

File: zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -122,7 +122,7 @@ public static WebDriver getWebDriver() {
     while (System.currentTimeMillis() - start < 60 * 1000) {
       // wait for page load
       try {
-        (new WebDriverWait(driver, 5)).until(new ExpectedCondition<Boolean>() {
+        (new WebDriverWait(driver, 30)).until(new ExpectedCondition<Boolean>() {
           @Override
           public Boolean apply(WebDriver d) {
             return d.findElement(By.xpath("//i[@tooltip='WebSocket Connected']"))

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResultMessage.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
 public class RemoteInterpreterResultMessage implements org.apache.thrift.TBase<RemoteInterpreterResultMessage, RemoteInterpreterResultMessage._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResultMessage> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResultMessage");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-25")
 public class ZeppelinServerResourceParagraphRunner implements org.apache.thrift.TBase<ZeppelinServerResourceParagraphRunner, ZeppelinServerResourceParagraphRunner._Fields>, java.io.Serializable, Cloneable, Comparable<ZeppelinServerResourceParagraphRunner> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZeppelinServerResourceParagraphRunner");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/LocalResourcePool.java
Patch:
@@ -72,15 +72,15 @@ public ResourceSet getAll() {
   public void put(String name, Object object) {
     ResourceId resourceId = new ResourceId(resourcePoolId, name);
 
-    Resource resource = new Resource(resourceId, object);
+    Resource resource = new Resource(this, resourceId, object);
     resources.put(resourceId, resource);
   }
 
   @Override
   public void put(String noteId, String paragraphId, String name, Object object) {
     ResourceId resourceId = new ResourceId(resourcePoolId, noteId, paragraphId, name);
 
-    Resource resource = new Resource(resourceId, object);
+    Resource resource = new Resource(this, resourceId, object);
     resources.put(resourceId, resource);
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -123,7 +123,9 @@ public ZeppelinServer() throws Exception {
 
     this.helium = new Helium(
         conf.getHeliumConfPath(),
-        conf.getHeliumDefaultLocalRegistryPath(),
+        conf.getHeliumRegistry(),
+        new File(
+            conf.getRelativeDir(ConfVars.ZEPPELIN_DEP_LOCALREPO), "helium_registry_cache"),
         heliumVisualizationFactory,
         heliumApplicationFactory);
 

File: livy/src/main/java/org/apache/zeppelin/livy/LivyPySpark3Interpreter.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Livy PySpark interpreter for Zeppelin.
  */
-public class LivyPySpark3Interpreter extends BaseLivyInterprereter {
+public class LivyPySpark3Interpreter extends LivyPySparkBaseInterpreter {
 
   public LivyPySpark3Interpreter(Properties property) {
     super(property);
@@ -43,4 +43,5 @@ public LivyPySpark3Interpreter(Properties property) {
   public String getSessionKind() {
     return "pyspark3";
   }
+
 }

File: livy/src/main/java/org/apache/zeppelin/livy/LivyPySparkInterpreter.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Livy PySpark interpreter for Zeppelin.
  */
-public class LivyPySparkInterpreter extends BaseLivyInterprereter {
+public class LivyPySparkInterpreter extends LivyPySparkBaseInterpreter {
 
   public LivyPySparkInterpreter(Properties property) {
     super(property);
@@ -43,4 +43,6 @@ public LivyPySparkInterpreter(Properties property) {
   public String getSessionKind() {
     return "pyspark";
   }
+
+
 }

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java
Patch:
@@ -293,7 +293,9 @@ public static String showDF(SparkContext sc,
     }
 
     if (rows.length > maxResult) {
-      msg.append("\n<font color=red>Results are limited by " + maxResult + ".</font>");
+      msg.append("<!--TABLE_COMMENT-->");
+      msg.append("\n");
+      msg.append("<font color=red>Results are limited by " + maxResult + ".</font>");
     }
     sc.clearJobGroup();
     return msg.toString();

File: spark/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterMatplotlibTest.java
Patch:
@@ -213,7 +213,7 @@ public void testNoClose() {
     // again but in a different color.
     ret = pyspark.interpret("plt.plot([1, 2, 3])", context);
     ret2 = pyspark.interpret("plt.show()", context);
-    assertNotSame(ret1.message().get(1).getData(), ret2.message().get(1).getData());
+    assertNotSame(ret1.message().get(0).getData(), ret2.message().get(0).getData());
   }
   
   @Test
@@ -226,7 +226,7 @@ public void testAngular() {
     ret = pyspark.interpret("plt.plot([1, 2, 3])", context);
     ret = pyspark.interpret("plt.show()", context);    
     assertEquals(ret.message().toString(), InterpreterResult.Code.SUCCESS, ret.code());
-    assertEquals(ret.message().toString(), Type.ANGULAR, ret.message().get(1).getType());
+    assertEquals(ret.message().toString(), Type.ANGULAR, ret.message().get(0).getType());
 
     // Check if the figure data is in the Angular Object Registry
     AngularObjectRegistry registry = context.getAngularObjectRegistry();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyResolver.java
Patch:
@@ -99,7 +99,7 @@ public List<File> load(String artifact, Collection<String> excludes, File destPa
         File destFile = new File(destPath, srcFile.getName());
         if (!destFile.exists() || !FileUtils.contentEquals(srcFile, destFile)) {
           FileUtils.copyFile(srcFile, destFile);
-          logger.info("copy {} to {}", srcFile.getAbsolutePath(), destPath);
+          logger.debug("copy {} to {}", srcFile.getAbsolutePath(), destPath);
         }
       }
     }
@@ -117,7 +117,7 @@ public synchronized void copyLocalDependency(String srcPath, File destPath)
 
     if (!destFile.exists() || !FileUtils.contentEquals(srcFile, destFile)) {
       FileUtils.copyFile(srcFile, destFile);
-      logger.info("copy {} to {}", srcFile.getAbsolutePath(), destPath);
+      logger.debug("copy {} to {}", srcFile.getAbsolutePath(), destPath);
     }
   }
 
@@ -145,7 +145,7 @@ private List<File> loadFromMvn(String artifact, Collection<String> excludes)
     List<File> files = new LinkedList<>();
     for (ArtifactResult artifactResult : listOfArtifact) {
       files.add(artifactResult.getArtifact().getFile());
-      logger.info("load {}", artifactResult.getArtifact().getFile().getAbsolutePath());
+      logger.debug("load {}", artifactResult.getArtifact().getFile().getAbsolutePath());
     }
 
     return files;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -105,7 +105,7 @@ public void testRunParagraphJob() throws IOException {
     }.getType());
     assertEquals(resp.get("status"), "OK");
     post.releaseConnection();
-    assertEquals(p.getStatus(), Job.Status.READY);
+    assertEquals(p.getStatus(), Job.Status.FINISHED);
 
     // run non-blank paragraph
     p.setText("test");

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -555,13 +555,14 @@ public synchronized void runAll() {
    */
   public void run(String paragraphId) {
     Paragraph p = getParagraph(paragraphId);
-
+    p.setListener(jobListenerFactory.getParagraphJobListener(this));
+    
     if (p.isBlankParagraph()) {
       logger.info("skip to run blank paragraph. {}", p.getId());
+      p.setStatus(Job.Status.FINISHED);
       return;
     }
 
-    p.setListener(jobListenerFactory.getParagraphJobListener(this));
     String requiredReplName = p.getRequiredReplName();
     Interpreter intp = factory.getInterpreter(p.getUser(), getId(), requiredReplName);
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -282,7 +282,7 @@ public void testRunBlankParagraph() throws IOException, SchedulerException, Inte
     note.run(p1.getId());
 
     Thread.sleep(2 * 1000);
-    assertEquals(p1.getStatus(), Status.READY);
+    assertEquals(p1.getStatus(), Status.FINISHED);
     assertNull(p1.getDateStarted());
     notebook.removeNote(note.getId(), anonymous);
   }

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterprereter.java
Patch:
@@ -206,7 +206,8 @@ private SessionInfo createSession(String user, String kind)
           conf.put(entry.getKey().toString().substring(5), entry.getValue().toString());
       }
 
-      CreateSessionRequest request = new CreateSessionRequest(kind, user, conf);
+      CreateSessionRequest request = new CreateSessionRequest(kind,
+          user.equals("anonymous") ? null : user, conf);
       SessionInfo sessionInfo = SessionInfo.fromJson(
           callRestAPI("/sessions", "POST", request.toJson()));
       long start = System.currentTimeMillis();

File: shell/src/test/java/org/apache/zeppelin/shell/ShellInterpreterTest.java
Patch:
@@ -38,7 +38,7 @@ public class ShellInterpreterTest {
   @Before
   public void setUp() throws Exception {
     Properties p = new Properties();
-    p.setProperty("shell.command.timeout.millisecs", "60000");
+    p.setProperty("shell.command.timeout.millisecs", "2000");
     shell = new ShellInterpreter(p);
 
     context = new InterpreterContext("", "1", null, "", "", null, null, null, null, null, null, null);
@@ -77,9 +77,9 @@ public void testInvalidCommand(){
   @Test
   public void testShellTimeout() {
     if (System.getProperty("os.name").startsWith("Windows")) {
-      result = shell.interpret("timeout 61", context);
+      result = shell.interpret("timeout 4", context);
     } else {
-      result = shell.interpret("sleep 61", context);
+      result = shell.interpret("sleep 4", context);
     }
 
     assertEquals(Code.INCOMPLETE, result.code());

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java
Patch:
@@ -831,8 +831,8 @@ public void testEnvronmentAndPropertySet() {
 
 
     assertEquals("env value 1", intp.interpret("getEnv MY_ENV1", context).message().get(0).getData());
-    assertEquals(0, intp.interpret("getProperty MY_ENV1", context).message().size());
-    assertEquals(0, intp.interpret("getEnv my.property.1", context).message().size());
+    assertEquals(Code.ERROR, intp.interpret("getProperty MY_ENV1", context).code());
+    assertEquals(Code.ERROR, intp.interpret("getEnv my.property.1", context).code());
     assertEquals("property value 1", intp.interpret("getProperty my.property.1", context).message().get(0).getData());
 
     intp.close();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -222,7 +222,7 @@ void setInterpreterFactory(InterpreterFactory factory) {
 
   public void initializeJobListenerForParagraph(Paragraph paragraph) {
     final Note paragraphNote = paragraph.getNote();
-    if (paragraphNote.getId().equals(this.getId())) {
+    if (!paragraphNote.getId().equals(this.getId())) {
       throw new IllegalArgumentException(
           format("The paragraph %s from note %s " + "does not belong to note %s", paragraph.getId(),
               paragraphNote.getId(), this.getId()));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Constants.java
Patch:
@@ -30,4 +30,6 @@ public class Constants {
 
   public static final int ZEPPELIN_INTERPRETER_DEFAUlT_PORT = 29914;
 
+  public static final int ZEPPELIN_INTERPRETER_OUTPUT_LIMIT = 1024 * 100;
+
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.zeppelin.helium.HeliumApplicationFactory;
 import org.apache.zeppelin.helium.HeliumVisualizationFactory;
 import org.apache.zeppelin.interpreter.InterpreterFactory;
+import org.apache.zeppelin.interpreter.InterpreterOutput;
 import org.apache.zeppelin.notebook.Notebook;
 import org.apache.zeppelin.notebook.NotebookAuthorization;
 import org.apache.zeppelin.notebook.repo.NotebookRepoSync;
@@ -98,6 +99,8 @@ public ZeppelinServer() throws Exception {
     this.depResolver = new DependencyResolver(
         conf.getString(ConfVars.ZEPPELIN_INTERPRETER_LOCALREPO));
 
+    InterpreterOutput.limit = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT);
+
     HeliumApplicationFactory heliumApplicationFactory = new HeliumApplicationFactory();
     HeliumVisualizationFactory heliumVisualizationFactory;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -572,6 +572,7 @@ public static enum ConfVars {
     ZEPPELIN_INTERPRETER_GROUP_ORDER("zeppelin.interpreter.group.order", "spark,md,angular,sh,"
         + "livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,"
         + "scalding,jdbc,hbase,bigquery,beam,pig,scio"),
+    ZEPPELIN_INTERPRETER_OUTPUT_LIMIT("zeppelin.interpreter.output.limit", 1024 * 100),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),
     // use specified notebook (id) as homescreen

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -1150,7 +1150,7 @@ private Interpreter connectToRemoteRepl(String interpreterSessionKey, String cla
     LazyOpenInterpreter intp = new LazyOpenInterpreter(
         new RemoteInterpreter(property, interpreterSessionKey, className, host, port, localRepoPath,
             connectTimeout, maxPoolSize, remoteInterpreterProcessListener, appEventListener,
-            userName, isUserImpersonate));
+            userName, isUserImpersonate, conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT)));
     return intp;
   }
 
@@ -1175,7 +1175,8 @@ Interpreter createRemoteRepl(String interpreterPath, String interpreterSessionKe
     RemoteInterpreter remoteInterpreter =
         new RemoteInterpreter(property, interpreterSessionKey, className,
             interpreterRunnerPath, interpreterPath, localRepoPath, connectTimeout, maxPoolSize,
-            remoteInterpreterProcessListener, appEventListener, userName, isUserImpersonate);
+            remoteInterpreterProcessListener, appEventListener, userName, isUserImpersonate,
+            conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_OUTPUT_LIMIT));
     remoteInterpreter.addEnv(env);
 
     return new LazyOpenInterpreter(remoteInterpreter);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java
Patch:
@@ -52,7 +52,7 @@
  */
 public class RemoteInterpreterEventPoller extends Thread {
   private static final Logger logger = LoggerFactory.getLogger(RemoteInterpreterEventPoller.class);
-  private static final ScheduledExecutorService appendService =
+  private final ScheduledExecutorService appendService =
       Executors.newSingleThreadScheduledExecutor();
   private final RemoteInterpreterProcessListener listener;
   private final ApplicationEventListener appListener;

File: markdown/src/main/java/org/apache/zeppelin/markdown/PegdownParser.java
Patch:
@@ -27,7 +27,7 @@
 public class PegdownParser implements MarkdownParser {
   private PegDownProcessor processor;
 
-  public static final long PARSING_TIMEOUT_AS_MILLIS = 5000;
+  public static final long PARSING_TIMEOUT_AS_MILLIS = 10000;
   public static final int OPTIONS = Extensions.ALL_WITH_OPTIONALS - Extensions.ANCHORLINKS;
 
   public PegdownParser() {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -123,7 +123,7 @@ public Response newSettings(String message) {
           .createNewSetting(request.getName(), request.getGroup(), request.getDependencies(),
               request.getOption(), p);
       logger.info("new setting created with {}", interpreterSetting.getId());
-      return new JsonResponse<>(Status.CREATED, "", interpreterSetting).build();
+      return new JsonResponse<>(Status.OK, "", interpreterSetting).build();
     } catch (InterpreterException | IOException e) {
       logger.error("Exception in InterpreterRestApi while creating ", e);
       return new JsonResponse<>(Status.NOT_FOUND, e.getMessage(), ExceptionUtils.getStackTrace(e))
@@ -237,7 +237,7 @@ public Response addRepository(String message) {
       return new JsonResponse<>(Status.INTERNAL_SERVER_ERROR, e.getMessage(),
           ExceptionUtils.getStackTrace(e)).build();
     }
-    return new JsonResponse(Status.CREATED).build();
+    return new JsonResponse(Status.OK).build();
   }
 
   /**

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookRestApiTest.java
Patch:
@@ -126,7 +126,7 @@ public void testCloneNote() throws IOException {
     Note note1 = ZeppelinServer.notebook.createNote(anonymous);
     PostMethod post = httpPost("/notebook/" + note1.getId(), "");
     LOG.info("testCloneNote response\n" + post.getResponseBodyAsString());
-    assertThat(post, isCreated());
+    assertThat(post, isAllowed());
     Map<String, Object> resp = gson.fromJson(post.getResponseBodyAsString(), new TypeToken<Map<String, Object>>() {
     }.getType());
     String clonedNoteId = (String) resp.get("body");

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/NotebookSecurityRestApiTest.java
Patch:
@@ -152,7 +152,7 @@ private String getNoteIdForUser(String noteId, String user, String pwd) throws I
   private String createNoteForUser(String noteName, String user, String pwd) throws IOException {
     String jsonRequest = "{\"name\":\"" + noteName + "\"}";
     PostMethod post = httpPost("/notebook/", jsonRequest, user, pwd);
-    assertThat("test note create method:", post, isCreated());
+    assertThat("test note create method:", post, isAllowed());
     Map<String, Object> resp = gson.fromJson(post.getResponseBodyAsString(), new TypeToken<Map<String, Object>>() {
     }.getType());
     post.releaseConnection();

File: livy/src/main/java/org/apache/zeppelin/livy/BaseLivyInterprereter.java
Patch:
@@ -20,7 +20,7 @@
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.annotations.SerializedName;
-import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.interpreter.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.livy;
 
-import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.interpreter.*;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;

File: pig/src/main/java/org/apache/zeppelin/pig/BasePigInterpreter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.pig;
 
-import org.apache.commons.lang3.StringUtils;
+import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.pig.PigServer;
 import org.apache.pig.backend.BackendException;

File: pig/src/main/java/org/apache/zeppelin/pig/PigInterpreter.java
Patch:
@@ -18,8 +18,8 @@
 package org.apache.zeppelin.pig;
 
 import org.apache.commons.io.output.ByteArrayOutputStream;
-import org.apache.commons.lang3.StringUtils;
-import org.apache.commons.lang3.exception.ExceptionUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.pig.PigServer;
 import org.apache.pig.impl.logicalLayer.FrontendException;
 import org.apache.pig.tools.pigstats.*;

File: pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java
Patch:
@@ -19,8 +19,8 @@
 package org.apache.zeppelin.pig;
 
 
-import org.apache.commons.lang3.StringUtils;
-import org.apache.commons.lang3.exception.ExceptionUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.pig.PigServer;
 import org.apache.pig.data.Tuple;
 import org.apache.pig.impl.logicalLayer.FrontendException;
@@ -114,7 +114,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
           resultBuilder.append("\n");
           firstRow = false;
         }
-        resultBuilder.append(StringUtils.join(tuple, "\t"));
+        resultBuilder.append(StringUtils.join(tuple.iterator(), "\t"));
         resultBuilder.append("\n");
       }
       if (index >= maxResult && iter.hasNext()) {

File: pig/src/main/java/org/apache/zeppelin/pig/PigUtils.java
Patch:
@@ -19,8 +19,8 @@
 
 
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang3.StringUtils;
-import org.apache.commons.lang3.exception.ExceptionUtils;
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.pig.PigRunner;
 import org.apache.pig.backend.hadoop.executionengine.tez.TezExecType;
 import org.apache.pig.tools.pigstats.InputStats;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Booter.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.apache.zeppelin.dep;
 
-import org.apache.commons.lang3.Validate;
+import org.apache.commons.lang.Validate;
 import org.apache.maven.repository.internal.MavenRepositorySystemSession;
 import org.sonatype.aether.RepositorySystem;
 import org.sonatype.aether.RepositorySystemSession;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Repository.java
Patch:
@@ -16,7 +16,7 @@
  */
 
 package org.apache.zeppelin.dep;
-import static org.apache.commons.lang3.StringUtils.isNotBlank;
+import static org.apache.commons.lang.StringUtils.isNotBlank;
 
 import org.sonatype.aether.repository.Authentication;
 import org.sonatype.aether.repository.Proxy;

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -38,6 +38,7 @@
 import com.google.gson.Gson;
 import org.apache.commons.lang.exception.ExceptionUtils;
 import org.apache.zeppelin.rest.message.RestartInterpreterRequest;
+import org.apache.zeppelin.utils.SecurityUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.sonatype.aether.repository.RemoteRepository;
@@ -178,12 +179,11 @@ public Response removeSetting(@PathParam("settingId") String settingId) throws I
   @ZeppelinApi
   public Response restartSetting(String message, @PathParam("settingId") String settingId) {
     logger.info("Restart interpreterSetting {}, msg={}", settingId, message);
-
     try {
       RestartInterpreterRequest request = gson.fromJson(message, RestartInterpreterRequest.class);
 
       String noteId = request == null ? null : request.getNoteId();
-      interpreterFactory.restart(settingId, noteId);
+      interpreterFactory.restart(settingId, noteId, SecurityUtils.getPrincipal());
 
     } catch (InterpreterException e) {
       logger.error("Exception in InterpreterRestApi while restartSetting ", e);

File: pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java
Patch:
@@ -78,6 +78,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
 
     StringBuilder resultBuilder = new StringBuilder("%table ");
     try {
+      pigServer.setJobName(createJobName(st, context));
       File tmpScriptFile = PigUtils.createTempPigScript(queries);
       // each thread should its own ScriptState & PigStats
       ScriptState.start(pigServer.getPigContext().getExecutionEngine().instantiateScriptState());

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/helium/ApplicationLoaderTest.java
Patch:
@@ -79,7 +79,9 @@ public HeliumPackage createPackageInfo(String className, String artifact) {
         "desc1",
         artifact,
         className,
-        new String[][]{{}});
+        new String[][]{{}},
+        "license",
+        "icon");
     return app1;
   }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumLocalRegistryTest.java
Patch:
@@ -55,7 +55,9 @@ public void testGetAllPackage() throws IOException {
         "desc1",
         "artifact1",
         "classname1",
-        new String[][]{});
+        new String[][]{},
+        "license",
+        "");
     FileUtils.writeStringToFile(new File(r1Path, "pkg1.json"), gson.toJson(pkg1));
 
     // then

File: helium-dev/src/main/java/org/apache/zeppelin/helium/DevInterpreter.java
Patch:
@@ -14,7 +14,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.zeppelin.interpreter.dev;
+
+package org.apache.zeppelin.helium;
 
 import java.util.LinkedList;
 import java.util.List;
@@ -48,7 +49,7 @@ public static boolean isInterpreterName(String replName) {
   }
 
   /**
-   * event handler for ZeppelinApplicationDevServer
+   * event handler for org.apache.zeppelin.helium.ZeppelinApplicationDevServer
    */
   public static interface InterpreterEvent {
     public InterpreterResult interpret(String st, InterpreterContext context);

File: zeppelin-examples/zeppelin-example-clock/src/main/java/org/apache/zeppelin/example/app/clock/Clock.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.zeppelin.helium.Application;
 import org.apache.zeppelin.helium.ApplicationContext;
 import org.apache.zeppelin.helium.ApplicationException;
-import org.apache.zeppelin.interpreter.dev.ZeppelinApplicationDevServer;
+import org.apache.zeppelin.helium.ZeppelinApplicationDevServer;
 import org.apache.zeppelin.resource.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-examples/zeppelin-example-horizontalbar/src/main/java/org/apache/zeppelin/example/app/horizontalbar/HorizontalBar.java
Patch:
@@ -20,8 +20,8 @@
 import org.apache.zeppelin.helium.Application;
 import org.apache.zeppelin.helium.ApplicationContext;
 import org.apache.zeppelin.helium.ApplicationException;
+import org.apache.zeppelin.helium.ZeppelinApplicationDevServer;
 import org.apache.zeppelin.interpreter.InterpreterResult;
-import org.apache.zeppelin.interpreter.dev.ZeppelinApplicationDevServer;
 import org.apache.zeppelin.resource.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Constants.java
Patch:
@@ -28,4 +28,6 @@ public class Constants {
 
   public static final String EXISTING_PROCESS = "existing_process";
 
+  public static final int ZEPPELIN_INTERPRETER_DEFAUlT_PORT = 29914;
+
 }

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -72,9 +72,9 @@ public void open() {
     // Add matplotlib display hook
     InterpreterGroup intpGroup = getInterpreterGroup();
     if (intpGroup != null && intpGroup.getInterpreterHookRegistry() != null) {
-      registerHook(HookType.POST_EXEC_DEV, "z._displayhook()");
+      registerHook(HookType.POST_EXEC_DEV, "\nz._displayhook()");
     }
-    
+
     // Add zeppelin-bundled libs to PYTHONPATH
     setPythonPath("../interpreter/lib/python:$PYTHONPATH");
     LOG.info("Starting Python interpreter ---->");

File: spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -230,5 +230,4 @@ private boolean useKnitr() {
       return false;
     }
   }
-
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -241,7 +241,7 @@ public void testDisableParagraphRunButton() throws Exception {
           driver.findElement(By.xpath(getParagraphXPath(1) + "//span[@class='icon-control-play shortcut-icon']")).isDisplayed(), CoreMatchers.equalTo(false)
       );
 
-      driver.findElement(By.xpath(".//*[@id='main']//button[@ng-click='runNote()']")).sendKeys(Keys.ENTER);
+      driver.findElement(By.xpath(".//*[@id='main']//button[contains(@ng-click, 'runAllParagraphs')]")).sendKeys(Keys.ENTER);
       ZeppelinITUtils.sleep(1000, true);
       driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'Run all paragraphs?')]" +
           "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -171,7 +171,8 @@ public static enum OP {
     PARAGRAPH_ADDED,              // [s-c] paragraph is added
     PARAGRAPH_REMOVED,            // [s-c] paragraph deleted
     PARAGRAPH_MOVED,              // [s-c] paragraph moved
-    NOTE_UPDATED                  // [s-c] paragraph updated(name, config)
+    NOTE_UPDATED,                 // [s-c] paragraph updated(name, config)
+    RUN_ALL_PARAGRAPHS            // [c-s] run all paragraphs
   }
 
   public static final Message EMPTY = new Message(null);

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -156,8 +156,9 @@ public static void main(String[] args) throws InterruptedException {
         LOG.info("Shutting down Zeppelin Server ... ");
         try {
           jettyWebServer.stop();
-          notebook.getInterpreterFactory().close();
+          notebook.getInterpreterFactory().shutdown();
           notebook.close();
+          Thread.sleep(3000);
         } catch (Exception e) {
           LOG.error("Error while stopping servlet container", e);
         }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -92,7 +92,7 @@ public RemoteInterpreter(Properties property, String sessionKey, String classNam
    * Connect to existing process
    */
   public RemoteInterpreter(Properties property, String sessionKey, String className, String host,
-      int port, int connectTimeout, int maxPoolSize,
+      int port, String localRepoPath, int connectTimeout, int maxPoolSize,
       RemoteInterpreterProcessListener remoteInterpreterProcessListener,
       ApplicationEventListener appListener, String userName, Boolean isUserImpersonate) {
     super(property);
@@ -101,6 +101,7 @@ public RemoteInterpreter(Properties property, String sessionKey, String classNam
     initialized = false;
     this.host = host;
     this.port = port;
+    this.localRepoPath = localRepoPath;
     this.connectTimeout = connectTimeout;
     this.maxPoolSize = maxPoolSize;
     this.remoteInterpreterProcessListener = remoteInterpreterProcessListener;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -28,7 +28,7 @@
 import org.apache.commons.configuration.XMLConfiguration;
 import org.apache.commons.configuration.tree.ConfigurationNode;
 import org.apache.commons.lang.StringUtils;
-import org.apache.zeppelin.notebook.repo.VFSNotebookRepo;
+import org.apache.zeppelin.notebook.repo.GitNotebookRepo;
 import org.apache.zeppelin.util.Util;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -582,7 +582,7 @@ public static enum ConfVars {
     ZEPPELIN_NOTEBOOK_AZURE_CONNECTION_STRING("zeppelin.notebook.azure.connectionString", null),
     ZEPPELIN_NOTEBOOK_AZURE_SHARE("zeppelin.notebook.azure.share", "zeppelin"),
     ZEPPELIN_NOTEBOOK_AZURE_USER("zeppelin.notebook.azure.user", "user"),
-    ZEPPELIN_NOTEBOOK_STORAGE("zeppelin.notebook.storage", VFSNotebookRepo.class.getName()),
+    ZEPPELIN_NOTEBOOK_STORAGE("zeppelin.notebook.storage", GitNotebookRepo.class.getName()),
     ZEPPELIN_NOTEBOOK_ONE_WAY_SYNC("zeppelin.notebook.one.way.sync", false),
     // whether by default note is public or private
     ZEPPELIN_NOTEBOOK_PUBLIC("zeppelin.notebook.public", true),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java
Patch:
@@ -51,7 +51,7 @@ public class NotebookRepoSync implements NotebookRepo {
   private static final String delDstKey = "delDstNoteIds";
 
   private static ZeppelinConfiguration config;
-  private static final String defaultStorage = "org.apache.zeppelin.notebook.repo.VFSNotebookRepo";
+  private static final String defaultStorage = "org.apache.zeppelin.notebook.repo.GitNotebookRepo";
 
   private List<NotebookRepo> repos = new ArrayList<>();
   private final boolean oneWaySync;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -183,7 +183,7 @@ public void sparkRTest() throws IOException {
         waitForFinish(p);
         System.err.println("sparkRTest=" + p.getResult().message().get(0).getData());
         assertEquals(Status.FINISHED, p.getStatus());
-        assertEquals("[1] 3", p.getResult().message().get(0).getData());
+        assertEquals("[1] 3", p.getResult().message().get(0).getData().trim());
       }
       ZeppelinServer.notebook.removeNote(note.getId(), anonymous);
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -190,7 +190,7 @@ void closeAndRemoveInterpreterGroup(String noteId) {
     }
   }
 
-  void closeAndRmoveAllInterpreterGroups() {
+  void closeAndRemoveAllInterpreterGroups() {
     HashSet<String> groupsToRemove = new HashSet<>(interpreterGroupRef.keySet());
     for (String key : groupsToRemove) {
       closeAndRemoveInterpreterGroup(key);

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -205,7 +205,6 @@ private boolean useHiveContext() {
   private boolean hiveClassesArePresent() {
     try {
       this.getClass().forName("org.apache.spark.sql.hive.HiveSessionState");
-      this.getClass().forName("org.apache.spark.sql.hive.HiveSharedState");
       this.getClass().forName("org.apache.hadoop.hive.conf.HiveConf");
       return true;
     } catch (ClassNotFoundException | NoClassDefFoundError e) {
@@ -355,7 +354,7 @@ public Object createSparkSession() {
             new Class[]{ String.class, String.class},
             new Object[]{ "spark.sql.catalogImplementation", "in-memory"});
         sparkSession = Utils.invokeMethod(builder, "getOrCreate");
-        logger.info("Created Spark session with Hive support");
+        logger.info("Created Spark session with Hive support use in-memory catalogImplementation");
       }
     } else {
       sparkSession = Utils.invokeMethod(builder, "getOrCreate");

File: pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java
Patch:
@@ -93,7 +93,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
       if (schemaKnown) {
         for (int i = 0; i < schema.size(); ++i) {
           Schema.FieldSchema field = schema.getField(i);
-          resultBuilder.append(field.alias);
+          resultBuilder.append(field.alias != null ? field.alias : "col_" + i);
           if (i != schema.size() - 1) {
             resultBuilder.append("\t");
           }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -463,8 +463,8 @@ public void testEditOnDoubleClick() throws Exception {
       waitForParagraph(1, "FINISHED");
 
       collector.checkThat("Markdown editor is hidden after run ",
-          driver.findElement(By.xpath(getParagraphXPath(1) + "//div[contains(@ng-show, 'paragraph.config.editorHide')]")).isDisplayed(),
-          CoreMatchers.equalTo(false));
+          driver.findElements(By.xpath(getParagraphXPath(1) + "//div[contains(@ng-if, 'paragraph.config.editorHide')]")).size(),
+          CoreMatchers.equalTo(0));
 
       collector.checkThat("Markdown editor is shown after run ",
           driver.findElement(By.xpath(getParagraphXPath(1) + "//div[contains(@ng-show, 'paragraph.config.tableHide')]")).isDisplayed(),
@@ -477,7 +477,7 @@ public void testEditOnDoubleClick() throws Exception {
       action.doubleClick(driver.findElement(By.xpath(getParagraphXPath(1)))).perform();
       ZeppelinITUtils.sleep(1000, false);
       collector.checkThat("Markdown editor is shown after double click ",
-          driver.findElement(By.xpath(getParagraphXPath(1) + "//div[contains(@ng-show, 'paragraph.config.editorHide')]")).isDisplayed(),
+          driver.findElement(By.xpath(getParagraphXPath(1) + "//div[contains(@ng-if, 'paragraph.config.editorHide')]")).isDisplayed(),
           CoreMatchers.equalTo(true));
 
       collector.checkThat("Markdown editor is hidden after double click ",

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -342,6 +342,8 @@ public void zRunTest() throws IOException {
         waitForFinish(p0);
         assertEquals(Status.FINISHED, p0.getStatus());
 
+        // z.run is not blocking call. So p1 may not be finished when p0 is done.
+        waitForFinish(p1);
         note.run(p2.getId());
         waitForFinish(p2);
         assertEquals(Status.FINISHED, p2.getStatus());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -535,6 +535,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.livy.LivySparkInterpreter,"
         + "org.apache.zeppelin.livy.LivySparkSQLInterpreter,"
         + "org.apache.zeppelin.livy.LivyPySparkInterpreter,"
+        + "org.apache.zeppelin.livy.LivyPySpark3Interpreter,"
         + "org.apache.zeppelin.livy.LivySparkRInterpreter,"
         + "org.apache.zeppelin.alluxio.AlluxioInterpreter,"
         + "org.apache.zeppelin.file.HDFSFileInterpreter,"

File: spark/src/main/java/org/apache/zeppelin/spark/SparkVersion.java
Patch:
@@ -34,10 +34,10 @@ public class SparkVersion {
   public static final SparkVersion SPARK_1_6_0 = SparkVersion.fromVersionString("1.6.0");
 
   public static final SparkVersion SPARK_2_0_0 = SparkVersion.fromVersionString("2.0.0");
-  public static final SparkVersion SPARK_2_1_0 = SparkVersion.fromVersionString("2.1.0");
+  public static final SparkVersion SPARK_2_2_0 = SparkVersion.fromVersionString("2.2.0");
 
   public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_1_0_0;
-  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_2_1_0;
+  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_2_2_0;
 
   private int version;
   private String versionString;

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -119,10 +119,10 @@ protected void createNewNote() {
   }
 
   protected void deleteTestNotebook(final WebDriver driver) {
-    driver.findElement(By.xpath(".//*[@id='main']//button[@ng-click='removeNote(note.id)']"))
+    driver.findElement(By.xpath(".//*[@id='main']//button[@ng-click='moveNoteToTrash(note.id)']"))
         .sendKeys(Keys.ENTER);
     ZeppelinITUtils.sleep(1000, true);
-    driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'delete this note')]" +
+    driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'This note will be moved to trash')]" +
         "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();
     ZeppelinITUtils.sleep(100, true);
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -179,10 +179,10 @@ public void testAngularDisplay() throws Exception {
       waitForText("BindingTest_1_",
           By.xpath(getParagraphXPath(1) + "//div[@id=\"angularTestButton\"]"));
 
-      driver.findElement(By.xpath(".//*[@id='main']//button[@ng-click='removeNote(note.id)']"))
+      driver.findElement(By.xpath(".//*[@id='main']//button[@ng-click='moveNoteToTrash(note.id)']"))
           .sendKeys(Keys.ENTER);
       ZeppelinITUtils.sleep(1000, true);
-      driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'delete this note')]" +
+      driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'This note will be moved to trash')]" +
           "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();
       ZeppelinITUtils.sleep(100, true);
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/FolderView.java
Patch:
@@ -99,6 +99,8 @@ private Folder getOrCreateFolder(String folderId) {
   }
 
   private Folder createFolder(String folderId) {
+    folderId = Folder.normalizeFolderId(folderId);
+
     Folder newFolder = new Folder(folderId);
     newFolder.addFolderListener(this);
 

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java
Patch:
@@ -64,6 +64,7 @@ public void setUp() {
     props.setProperty(IgniteSqlInterpreter.IGNITE_JDBC_URL, "jdbc:ignite:cfg://cache=person@default-ignite-jdbc.xml");
     props.setProperty(IgniteInterpreter.IGNITE_CLIENT_MODE, "false");
     props.setProperty(IgniteInterpreter.IGNITE_PEER_CLASS_LOADING_ENABLED, "false");
+    props.setProperty(IgniteInterpreter.IGNITE_ADDRESSES, HOST);
 
     intp = new IgniteInterpreter(props);
     intp.open();

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -242,7 +242,7 @@ public void testInterpreterAutoBinding() throws IOException {
   public void testInterpreterRestart() throws IOException, InterruptedException {
     // when: create new note
     Note note = ZeppelinServer.notebook.createNote(anonymous);
-    note.addParagraph();
+    note.addParagraph(AuthenticationInfo.ANONYMOUS);
     Paragraph p = note.getLastParagraph();
     Map config = p.getConfig();
     config.put("enabled", true);
@@ -269,7 +269,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
     }
 
     // when: run markdown paragraph, again
-    p = note.addParagraph();
+    p = note.addParagraph(AuthenticationInfo.ANONYMOUS);
     p.setConfig(config);
     p.setText("%md markdown restarted");
     p.setAuthenticationInfo(anonymous);
@@ -287,7 +287,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
   public void testRestartInterpreterPerNote() throws IOException, InterruptedException {
     // when: create new note
     Note note = ZeppelinServer.notebook.createNote(anonymous);
-    note.addParagraph();
+    note.addParagraph(AuthenticationInfo.ANONYMOUS);
     Paragraph p = note.getLastParagraph();
     Map config = p.getConfig();
     config.put("enabled", true);

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -110,7 +110,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr
     }
 
     // start interpreter process
-    Paragraph p1 = note1.addParagraph();
+    Paragraph p1 = note1.addParagraph(AuthenticationInfo.ANONYMOUS);
     p1.setText("%md start remote interpreter process");
     p1.setAuthenticationInfo(anonymous);
     note1.run(p1.getId());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -168,7 +168,7 @@ public void testSyncUpdateMain() throws IOException {
     
     /* create note */
     Note note = notebookSync.createNote(anonymous);
-    Paragraph p1 = note.addParagraph();
+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);
     Map config = p1.getConfig();
     config.put("enabled", true);
     p1.setConfig(config);
@@ -305,7 +305,7 @@ public void testCheckpointOneStorage() throws IOException, SchedulerException {
     int vCount = gitRepo.revisionHistory(noteId, anonymous).size();
     assertThat(vCount).isEqualTo(1);
     
-    Paragraph p = note.addParagraph();
+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);
     Map<String, Object> config = p.getConfig();
     config.put("enabled", true);
     p.setConfig(config);
@@ -339,7 +339,7 @@ public void testSyncWithAcl() throws IOException {
     assertEquals(0, authInfo.getWriters(note.getId()).size());
     
     /* update note and save on secondary storage */
-    Paragraph p1 = note.addParagraph();
+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);
     p1.setText("hello world");
     assertEquals(1, note.getParagraphs().size());
     notebookRepoSync.save(1, note, null);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -120,7 +120,7 @@ public void testSaveNotebook() throws IOException, InterruptedException {
     Note note = notebook.createNote(anonymous);
     factory.setInterpreters("user", note.getId(), factory.getDefaultInterpreterSettingList());
 
-    Paragraph p1 = note.addParagraph();
+    Paragraph p1 = note.addParagraph(AuthenticationInfo.ANONYMOUS);
     Map<String, Object> config = p1.getConfig();
     config.put("enabled", true);
     p1.setConfig(config);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java
Patch:
@@ -275,13 +275,13 @@ private Note newNoteWithParagraphs(String noteName, String... parTexts) {
   }
 
   private Paragraph addParagraphWithText(Note note, String text) {
-    Paragraph p = note.addParagraph();
+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);
     p.setText(text);
     return p;
   }
 
   private Paragraph addParagraphWithTextAndTitle(Note note, String text, String title) {
-    Paragraph p = note.addParagraph();
+    Paragraph p = note.addParagraph(AuthenticationInfo.ANONYMOUS);
     p.setText(text);
     p.setTitle(title);
     return p;

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/ActiveDirectoryGroupRealm.java
Patch:
@@ -156,7 +156,7 @@ protected AuthenticationInfo queryForAuthenticationInfo(
       if (userPrincipalName == null) {
         return null;
       }
-      if (this.principalSuffix != null) {
+      if (this.principalSuffix != null && userPrincipalName.indexOf('@') < 0) {
         userPrincipalName = upToken.getUsername() + this.principalSuffix;
       }
       ctx = ldapContextFactory.getLdapContext(
@@ -254,7 +254,7 @@ private Set<String> getRoleNamesForUser(String username, LdapContext ldapContext
     SearchControls searchCtls = new SearchControls();
     searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);
     String userPrincipalName = username;
-    if (principalSuffix != null) {
+    if (this.principalSuffix != null && userPrincipalName.indexOf('@') < 0) {
       userPrincipalName += principalSuffix;
     }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java
Patch:
@@ -88,7 +88,9 @@ public void setUp() throws Exception {
 
   @After
   public void tearDown() throws Exception {
-    //NotebookRepoSyncTest.delete(zeppelinDir);
+    if (!FileUtils.deleteQuietly(zeppelinDir)) {
+      LOG.error("Failed to delete {} ", zeppelinDir.getName());
+    }
   }
 
   @Test

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -289,7 +289,7 @@ public void testAngularRunParagraph() throws Exception {
 
       // Get 2nd paragraph id
       final String secondParagraphId = driver.findElement(By.xpath(getParagraphXPath(2)
-              + "//div[@class=\"control ng-scope\"]//ul[@class=\"dropdown-menu\"]/li[1]"))
+              + "//div[@class=\"control ng-scope\"]//ul[@class=\"dropdown-menu dropdown-menu-right\"]/li[1]"))
               .getAttribute("textContent");
 
       assertTrue("Cannot find paragraph id for the 2nd paragraph", isNotBlank(secondParagraphId));

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -55,6 +55,9 @@ public static enum OP {
 
     NOTE_RENAME,
 
+    UPDATE_PERSONALIZED_MODE, // [c-s] update personalized mode (boolean)
+                              // @param note id and boolean personalized mode value
+
     FOLDER_RENAME,
 
     RUN_PARAGRAPH,    // [c-s] run paragraph

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/ClientFactory.java
Patch:
@@ -70,9 +70,9 @@ public PooledObject<Client> wrap(Client client) {
   @Override
   public void destroyObject(PooledObject<Client> p) {
     synchronized (clientSocketMap) {
-      if (clientSocketMap.containsKey(p)) {
-        clientSocketMap.get(p).close();
-        clientSocketMap.remove(p);
+      if (clientSocketMap.containsKey(p.getObject())) {
+        clientSocketMap.get(p.getObject()).close();
+        clientSocketMap.remove(p.getObject());
       }
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -291,7 +291,7 @@ public String getKeyStorePath() {
       return getRelativeDir(
           String.format("%s/%s",
               getConfDir(),
-              getString(path)));
+              path));
     }
   }
 
@@ -320,7 +320,7 @@ public String getTrustStorePath() {
       return getRelativeDir(
           String.format("%s/%s",
               getConfDir(),
-              getString(path)));
+              path));
     }
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -136,7 +136,9 @@ public static enum OP {
     NOTE_REVISION,                // [c-s] get certain revision of note
                                   // @param noteId
                                   // @param revisionId
-
+    SET_NOTE_REVISION,            // [c-s] set current notebook head to this revision
+                                  // @param noteId
+                                  // @param revisionId
     APP_APPEND_OUTPUT,            // [s-c] append output
     APP_UPDATE_OUTPUT,            // [s-c] update (replace) output
     APP_LOAD,                     // [s-c] on app load

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1451,7 +1451,7 @@ private void checkpointNote(NotebookSocket conn, Notebook notebook,
     String commitMessage = (String) fromMessage.get("commitMessage");
     AuthenticationInfo subject = new AuthenticationInfo(fromMessage.principal);
     Revision revision = notebook.checkpointNote(noteId, commitMessage, subject);
-    if (revision != null) {
+    if (!Revision.isEmpty(revision)) {
       List<Revision> revisions = notebook.listRevisionHistory(noteId, subject);
       conn.send(serializeMessage(new Message(OP.LIST_REVISION_HISTORY)
         .put("revisionList", revisions)));

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -46,7 +46,6 @@ public static void setUp() {
   @AfterClass
   public static void tearDown() {
     flink.close();
-    flink.destroy();
   }
 
   @Test

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -106,7 +106,6 @@ public void shutdown() throws TException {
     eventClient.waitForEventQueueBecomesEmpty();
     if (interpreterGroup != null) {
       interpreterGroup.close();
-      interpreterGroup.destroy();
     }
 
     server.stop();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -103,7 +103,6 @@ public void setUp() throws Exception {
   public void tearDown() throws Exception {
     intp.close();
     intpGroup.close();
-    intpGroup.destroy();
   }
 
   @Test

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java
Patch:
@@ -58,7 +58,6 @@ public void setUp() throws Exception {
   @After
   public void tearDown() throws Exception {
     intpGroup.close();
-    intpGroup.destroy();
   }
 
   private RemoteInterpreter createMockInterpreter() {

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java
Patch:
@@ -73,7 +73,6 @@ public void setUp() throws Exception {
   @After
   public void tearDown() throws Exception {
     intpGroup.close();
-    intpGroup.destroy();
   }
 
   private RemoteInterpreter createMockInterpreterA(Properties p) {

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java
Patch:
@@ -134,11 +134,9 @@ public void tearDown() throws Exception {
     eventPoller1.shutdown();
     intp1.close();
     intpGroup1.close();
-    intpGroup1.destroy();
     eventPoller2.shutdown();
     intp2.close();
     intpGroup2.close();
-    intpGroup2.destroy();
   }
 
   @Test

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -745,7 +745,6 @@ public void removeInterpretersForNote(InterpreterSetting interpreterSetting, Str
       InterpreterGroup interpreterGroup = interpreterSetting.getInterpreterGroup(user, noteId);
       String key = getInterpreterSessionKey(user, noteId, interpreterSetting);
       interpreterGroup.close(key);
-      interpreterGroup.destroy(key);
       synchronized (interpreterGroup) {
         interpreterGroup.remove(key);
         interpreterGroup.notifyAll(); // notify createInterpreterForNote()

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -178,7 +178,6 @@ void closeAndRemoveInterpreterGroup(String noteId) {
 
     if (groupToRemove != null) {
       groupToRemove.close();
-      groupToRemove.destroy();
     }
   }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java
Patch:
@@ -77,7 +77,7 @@ public void runNormalTest() {
 
     ArgumentCaptor<Paragraph> pCaptor = ArgumentCaptor.forClass(Paragraph.class);
     verify(scheduler, only()).submit(pCaptor.capture());
-    verify(interpreterFactory, only()).getInterpreter(anyString(), anyString(), eq("spark"));
+    verify(interpreterFactory, times(2)).getInterpreter(anyString(), anyString(), eq("spark"));
 
     assertEquals("Paragraph text", pText, pCaptor.getValue().getText());
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -55,6 +55,8 @@ public static enum OP {
 
     NOTE_RENAME,
 
+    FOLDER_RENAME,
+
     RUN_PARAGRAPH,    // [c-s] run paragraph
                       // @param id paragraph id
                       // @param paragraph paragraph content.ie. script

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -185,8 +185,7 @@ public void testSqlSpark() throws Exception {
       WebElement paragraph1Result = driver.findElement(By.xpath(
           getParagraphXPath(1) + "//div[contains(@id,\"_graph\")]/div/div/div/div/div[1]"));
       collector.checkThat("Paragraph from SparkParagraphIT of testSqlSpark result: ",
-          paragraph1Result.getText().toString(), CoreMatchers.equalTo("age\njob\nmarital\neducation\nbalance\n" +
-          "30 unemployed married primary 1,787"));
+          paragraph1Result.getText().toString(), CoreMatchers.equalTo("age\n▼\njob\n▼\nmarital\n▼\neducation\n▼\nbalance\n▼\n30 unemployed married primary 1787"));
     } catch (Exception e) {
       handleException("Exception in SparkParagraphIT while testSqlSpark", e);
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/GitNotebookRepo.java
Patch:
@@ -82,7 +82,7 @@ public synchronized void save(Note note, AuthenticationInfo subject) throws IOEx
    */
   @Override
   public Revision checkpoint(String pattern, String commitMessage, AuthenticationInfo subject) {
-    Revision revision = null;
+    Revision revision = Revision.EMPTY;
     try {
       List<DiffEntry> gitDiff = git.diff().call();
       if (!gitDiff.isEmpty()) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepo.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.NoteInfo;
@@ -121,6 +122,8 @@ public interface NotebookRepo {
    * Represents the 'Revision' a point in life of the notebook
    */
   static class Revision {
+    public static final Revision EMPTY = new Revision(StringUtils.EMPTY, StringUtils.EMPTY, 0);
+    
     public Revision(String revId, String message, int time) {
       this.id = revId;
       this.message = message;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java
Patch:
@@ -269,7 +269,7 @@ public void close() {
   public Revision checkpoint(String noteId, String checkpointMsg, AuthenticationInfo subject)
       throws IOException {
     if (StringUtils.isBlank(noteId) || !isSubjectValid(subject)) {
-      return null;
+      return Revision.EMPTY;
     }
     String endpoint = Joiner.on("/").join(noteId, "checkpoint");
     String content = GSON.toJson(ImmutableMap.of("message", checkpointMsg));

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java
Patch:
@@ -150,7 +150,8 @@ public void showNotebookHistoryMultipleNotesTest() throws IOException {
     assertThat(notebookRepo.checkpoint(TEST_NOTE_ID, "second commit, note1", null)).isNotNull();
     assertThat(notebookRepo.revisionHistory(TEST_NOTE_ID, null).size()).isEqualTo(2);
     assertThat(notebookRepo.revisionHistory(TEST_NOTE_ID2, null).size()).isEqualTo(1);
-    assertThat(notebookRepo.checkpoint(TEST_NOTE_ID2, "first commit, note2", null)).isNull();
+    assertThat(notebookRepo.checkpoint(TEST_NOTE_ID2, "first commit, note2", null))
+      .isEqualTo(Revision.EMPTY);
     assertThat(notebookRepo.revisionHistory(TEST_NOTE_ID2, null).size()).isEqualTo(1);
 
     //modify, save and checkpoint second note

File: bigquery/src/test/java/org/apache/zeppelin/bigquery/BigQueryInterpreterTest.java
Patch:
@@ -104,7 +104,7 @@ public void sqlSuccess() {
     InterpreterResult ret = bqInterpreter.interpret(CONSTANTS.getOne(), context);
 
     assertEquals(InterpreterResult.Code.SUCCESS, ret.code());
-    assertEquals(ret.type(), InterpreterResult.Type.TABLE);
+    assertEquals(ret.message().get(0).getType(), InterpreterResult.Type.TABLE);
 
   }
 

File: elasticsearch/src/test/java/org/apache/zeppelin/elasticsearch/ElasticsearchInterpreterTest.java
Patch:
@@ -128,7 +128,7 @@ public void testCount() {
     assertEquals(Code.ERROR, res.code());
 
     res = interpreter.interpret("count /logs", null);
-    assertEquals("50", res.message());
+    assertEquals("50", res.message().get(0).getData());
   }
 
   @Test
@@ -207,7 +207,7 @@ public void testDelete() {
     assertEquals(Code.ERROR, res.code());
 
     res = interpreter.interpret("delete /logs/http/11", null);
-    assertEquals("11", res.message());
+    assertEquals("11", res.message().get(0).getData());
   }
 
   @Test

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -69,14 +69,14 @@ public void testNextLineCompanionObject() {
   public void testSimpleStatement() {
     InterpreterResult result = flink.interpret("val a=1", context);
     result = flink.interpret("print(a)", context);
-    assertEquals("1", result.message());
+    assertEquals("1", result.message().get(0).getData());
   }
 
   @Test
   public void testSimpleStatementWithSystemOutput() {
     InterpreterResult result = flink.interpret("val a=1", context);
     result = flink.interpret("System.out.print(a)", context);
-    assertEquals("1", result.message());
+    assertEquals("1", result.message().get(0).getData());
   }
 
   @Test
@@ -89,7 +89,7 @@ public void testWordCount() {
     String[] expectedCounts = {"(to,2)", "(be,2)", "(or,1)", "(not,1)"};
     Arrays.sort(expectedCounts);
 
-    String[] counts = result.message().split("\n");
+    String[] counts = result.message().get(0).getData().split("\n");
     Arrays.sort(counts);
 
     assertArrayEquals(expectedCounts, counts);

File: geode/src/test/java/org/apache/zeppelin/geode/GeodeOqlInterpreterTest.java
Patch:
@@ -143,7 +143,7 @@ private void testOql(Iterator<Object> queryResponseIterator, String expectedOutp
     InterpreterResult interpreterResult = spyGeodeOqlInterpreter.interpret(OQL_QUERY, null);
 
     assertEquals(Code.SUCCESS, interpreterResult.code());
-    assertEquals(expectedOutput, interpreterResult.message());
+    assertEquals(expectedOutput, interpreterResult.message().get(0).getData());
   }
 
   @Test
@@ -157,7 +157,7 @@ public void oqlWithQueryException() throws Exception {
     InterpreterResult interpreterResult = spyGeodeOqlInterpreter.interpret(OQL_QUERY, null);
 
     assertEquals(Code.ERROR, interpreterResult.code());
-    assertEquals("Test Exception On Connect", interpreterResult.message());
+    assertEquals("Test Exception On Connect", interpreterResult.message().get(0).getData());
   }
 
   @Test
@@ -171,7 +171,7 @@ public void oqlWithExceptionOnConnect() throws Exception {
     InterpreterResult interpreterResult = spyGeodeOqlInterpreter.interpret(OQL_QUERY, null);
 
     assertEquals(Code.ERROR, interpreterResult.code());
-    assertEquals("Expected Test Exception!", interpreterResult.message());
+    assertEquals("Expected Test Exception!", interpreterResult.message().get(0).getData());
   }
 
   @Test

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java
Patch:
@@ -83,7 +83,7 @@ public void testInterpret() {
             "val " + sizeVal + " = ignite.cluster().nodes().size()", INTP_CONTEXT);
 
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
-    assertTrue(result.message().contains(sizeVal + ": Int = " + ignite.cluster().nodes().size()));
+    assertTrue(result.message().get(0).getData().contains(sizeVal + ": Int = " + ignite.cluster().nodes().size()));
 
     result = intp.interpret("\"123\"\n  .toInt", INTP_CONTEXT);
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java
Patch:
@@ -93,8 +93,8 @@ public void testSql() {
     InterpreterResult result = intp.interpret("select name, age from person where age > 10", INTP_CONTEXT);
 
     assertEquals(Code.SUCCESS, result.code());
-    assertEquals(Type.TABLE, result.type());
-    assertEquals("NAME\tAGE\nsun\t100\nmoon\t50\n", result.message());
+    assertEquals(Type.TABLE, result.message().get(0).getType());
+    assertEquals("NAME\tAGE\nsun\t100\nmoon\t50\n", result.message().get(0).getData());
   }
 
   @Test

File: kylin/src/test/java/KylinInterpreterTest.java
Patch:
@@ -52,7 +52,7 @@ public void test(){
     InterpreterResult result = t.interpret(
         "select a.date,sum(b.measure) as measure from kylin_fact_table a " +
             "inner join kylin_lookup_table b on a.date=b.date group by a.date", null);
-    assertEquals(InterpreterResult.Type.TABLE,result.type());
+    assertEquals(InterpreterResult.Type.TABLE,result.message().get(0).getType());
   }
 }
 

File: lens/src/test/java/org/apache/zeppelin/lens/LensInterpreterTest.java
Patch:
@@ -53,7 +53,7 @@ public void test() {
     t.open();
     //simple help test
     InterpreterResult result = t.interpret("help", null);
-    assertEquals(result.type(), InterpreterResult.Type.TEXT);
+    assertEquals(result.message().get(0).getType(), InterpreterResult.Type.TEXT);
     //assertEquals("unable to find 'query execute' in help message", 
     //  result.message().contains("query execute"), result.message());
     t.close();

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkInterpreter.java
Patch:
@@ -82,14 +82,14 @@ public InterpreterResult interpret(String line, InterpreterContext interpreterCo
           if (displayAppInfo) {
             String appId = extractStatementResult(
                     livyHelper.interpret("sc.applicationId", interpreterContext, userSessionMap)
-                            .message());
+                            .message().get(0).getData());
             livyHelper.interpret(
                     "val webui=sc.getClass.getMethod(\"ui\").invoke(sc).asInstanceOf[Some[_]].get",
                     interpreterContext, userSessionMap);
             String webUI = extractStatementResult(
                     livyHelper.interpret(
                             "webui.getClass.getMethod(\"appUIAddress\").invoke(webui)",
-                            interpreterContext, userSessionMap).message());
+                            interpreterContext, userSessionMap).message().get(0).getData());
             sessionId2AppIdMap.put(sessionId, appId);
             sessionId2WebUIMap.put(sessionId, webUI);
             LOGGER.info("Create livy session with sessionId: {}, appId: {}, webUI: {}",

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -85,7 +85,7 @@ public InterpreterResult interpret(String line, InterpreterContext interpreterCo
       if (res.code() == InterpreterResult.Code.SUCCESS) {
         StringBuilder resMsg = new StringBuilder();
         resMsg.append("%table ");
-        String[] rows = res.message().split("\n");
+        String[] rows = res.message().get(0).getData().split("\n");
 
         String[] headers = rows[1].split("\\|");
         for (int head = 1; head < headers.length; head++) {

File: markdown/src/test/java/org/apache/zeppelin/markdown/Markdown4jParserTest.java
Patch:
@@ -46,6 +46,6 @@ public void tearDown() throws Exception {
   @Test
   public void testStrikethrough() {
     InterpreterResult result = md.interpret("This is ~~deleted~~ text", null);
-    assertEquals("<p>This is <s>deleted</s> text</p>\n", result.message());
+    assertEquals("<p>This is <s>deleted</s> text</p>\n", result.message().get(0).getData());
   }
 }

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterTest.java
Patch:
@@ -169,7 +169,7 @@ public void testInterpret() {
     cmdHistory = "";
     InterpreterResult result = pythonInterpreter.interpret("print a", null);
     assertEquals(InterpreterResult.Code.SUCCESS, result.code());
-    assertEquals("%text print a", result.toString());
+    assertEquals("%text print a", result.message().get(0).toString());
   }
 
   /**
@@ -250,13 +250,13 @@ public void checkMultiRowErrorFails() {
 
     System.err.println("ret = '" + ret + "'");
     assertEquals(InterpreterResult.Code.ERROR, ret.code());
-    assertTrue(ret.message().length() > 0);
+    assertTrue(ret.message().get(0).getData().length() > 0);
 
     assertNotNull("Interpreter result for text is Null", ret);
     String codePrintText = "print (\"Exception(\\\"test exception\\\")\")";
     ret = pythonInterpreter.interpret(codePrintText, null);
     assertEquals(InterpreterResult.Code.SUCCESS, ret.code());
-    assertTrue(ret.message().length() > 0);
+    assertTrue(ret.message().get(0).getData().length() > 0);
   }
 
 }

File: scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java
Patch:
@@ -108,7 +108,7 @@ public void testBasicIntp() {
     // when interpret incomplete expression
     InterpreterResult incomplete = repl.interpret("val a = \"\"\"", context);
     assertEquals(InterpreterResult.Code.INCOMPLETE, incomplete.code());
-    assertTrue(incomplete.message().length() > 0); // expecting some error
+    assertTrue(incomplete.message().get(0).getData().length() > 0); // expecting some error
                                                    // message
   }
 

File: shell/src/test/java/org/apache/zeppelin/shell/ShellInterpreterTest.java
Patch:
@@ -72,7 +72,7 @@ public void testInvalidCommand(){
       result = shell.interpret("invalid_command\nls",context);
     }
     assertEquals(InterpreterResult.Code.SUCCESS,result.code());
-    assertTrue(result.message().contains("invalid_command"));
+    assertTrue(result.message().get(0).getData().contains("invalid_command"));
   }
 
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistry.java
Patch:
@@ -162,7 +162,7 @@ public AngularObject remove(String name, String noteId, String paragraphId, bool
       Map<String, AngularObject> r = getRegistryForKey(noteId, paragraphId);
       AngularObject o = r.remove(name);
       if (listener != null && emit) {
-        listener.onRemove(interpreterId, name, noteId, paragraphId);;
+        listener.onRemove(interpreterId, name, noteId, paragraphId);
       }
       return o;
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/ZeppelinServerResourceParagraphRunner.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-25")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-29")
 public class ZeppelinServerResourceParagraphRunner implements org.apache.thrift.TBase<ZeppelinServerResourceParagraphRunner, ZeppelinServerResourceParagraphRunner._Fields>, java.io.Serializable, Cloneable, Comparable<ZeppelinServerResourceParagraphRunner> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ZeppelinServerResourceParagraphRunner");
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -235,7 +235,7 @@ public void testSparkInterpreterDependencyLoading() throws Exception {
 
       // check expected text
       WebElement paragraph1Result = driver.findElement(By.xpath(
-          getParagraphXPath(1) + "//div[@class=\"tableDisplay\"]"));
+          getParagraphXPath(1) + "//div[contains(@id,\"_text\")]"));
 
       collector.checkThat("Paragraph from ZeppelinIT of testSparkInterpreterDependencyLoading result: ",
           paragraph1Result.getText().toString(), CoreMatchers.containsString(

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -255,7 +255,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
     while (p.getStatus() != Status.FINISHED) {
       Thread.sleep(100);
     }
-    assertEquals(p.getResult().message(), getSimulatedMarkdownResult("markdown"));
+    assertEquals(p.getResult().message().get(0).getData(), getSimulatedMarkdownResult("markdown"));
 
     // when: restart interpreter
     for (InterpreterSetting setting : ZeppelinServer.notebook.getInterpreterFactory().getInterpreterSettings(note.getId())) {
@@ -279,7 +279,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
     }
 
     // then
-    assertEquals(p.getResult().message(), getSimulatedMarkdownResult("markdown restarted"));
+    assertEquals(p.getResult().message().get(0).getData(), getSimulatedMarkdownResult("markdown restarted"));
     ZeppelinServer.notebook.removeNote(note.getId(), anonymous);
   }
 
@@ -300,7 +300,7 @@ public void testRestartInterpreterPerNote() throws IOException, InterruptedExcep
     while (p.getStatus() != Status.FINISHED) {
       Thread.sleep(100);
     }
-    assertEquals(p.getResult().message(), getSimulatedMarkdownResult("markdown"));
+    assertEquals(p.getResult().message().get(0).getData(), getSimulatedMarkdownResult("markdown"));
 
     // when: get md interpreter
     InterpreterSetting mdIntpSetting = null;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/dev/ZeppelinDevServer.java
Patch:
@@ -52,7 +52,8 @@ protected Interpreter getInterpreter(String sessionKey, String className) throws
             "dev",
             sessionKey,
             DevInterpreter.class.getName(),
-            new HashMap<String, String>());
+            new HashMap<String, String>(),
+            "anonymous");
 
         Interpreter intp = super.getInterpreter(sessionKey, className);
         interpreter = (DevInterpreter) (

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -239,8 +239,7 @@ public synchronized void init() {
           property.put("zeppelin.interpreter.localRepo", localRepoPath);
         }
         client.createInterpreter(groupId, sessionKey,
-          getClassName(), (Map) property);
-
+          getClassName(), (Map) property, userName);
         // Push angular object loaded from JSON file to remote interpreter
         if (!interpreterGroup.isAngularRegistryPushed()) {
           pushAngularObjectRegistryToRemote(client);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -155,10 +155,9 @@ public static void main(String[] args)
     System.exit(0);
   }
 
-
   @Override
   public void createInterpreter(String interpreterGroupId, String sessionKey, String
-      className, Map<String, String> properties) throws TException {
+      className, Map<String, String> properties, String userName) throws TException {
     if (interpreterGroup == null) {
       interpreterGroup = new InterpreterGroup(interpreterGroupId);
       angularObjectRegistry = new AngularObjectRegistry(interpreterGroup.getId(), this);
@@ -196,6 +195,7 @@ public void createInterpreter(String interpreterGroupId, String sessionKey, Stri
 
       logger.info("Instantiate interpreter {}", className);
       repl.setInterpreterGroup(interpreterGroup);
+      repl.setUserName(userName);
     } catch (ClassNotFoundException | NoSuchMethodException | SecurityException
         | InstantiationException | IllegalAccessException
         | IllegalArgumentException | InvocationTargetException e) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -137,7 +137,7 @@ public void testAngularDisplay() throws Exception {
        *   z.run(2, context)
        * }
        */
-      setTextOfParagraph(4, "z.angularWatch(\"myVar\", (before:Object, after:Object, context:org.apache.zeppelin.interpreter.InterpreterContext)=>{ z.run(2, context)})");
+      setTextOfParagraph(4, "z.angularWatch(\"myVar\", (before:Object, after:Object, context:org.apache.zeppelin.interpreter.InterpreterContext)=>{ z.run(2)})");
       runParagraph(4);
       waitForParagraph(4, "FINISHED");
 

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -462,6 +462,8 @@ private InterpreterResult executeSql(String propertyKey, String sql,
           msg.append(UPDATE_COUNT_HEADER).append(NEWLINE);
           msg.append(updateCount).append(NEWLINE);
         }
+        //In case user ran an insert/update/upsert statement
+        if (connection.getAutoCommit() != true) connection.commit();
       } finally {
         if (resultSet != null) {
           try {

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterWithPythonInstalledTest.java
Patch:
@@ -102,7 +102,7 @@ public void testZeppelin1555() {
     realPython.open();
 
     //when
-    InterpreterResult ret1 = realPython.interpret("print \"...\"", null);
+    InterpreterResult ret1 = realPython.interpret("print(\"...\")", null);
 
     //then
     //System.out.println("\nInterpreter response: \n" + ret.message());

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -177,7 +177,8 @@ private Map setupPySparkEnv() throws IOException{
     Map env = EnvironmentUtils.getProcEnvironment();
     if (!env.containsKey("PYTHONPATH")) {
       SparkConf conf = getSparkConf();
-      env.put("PYTHONPATH", conf.get("spark.submit.pyFiles").replaceAll(",", ":"));
+      env.put("PYTHONPATH", conf.get("spark.submit.pyFiles").replaceAll(",", ":") + 
+              ":../interpreter/lib/python");
     }
     return env;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -130,7 +130,8 @@ private String getInterpreterProcessKey(String user, String noteId) {
       key = SHARED_PROCESS;
     }
 
-    logger.debug("getInterpreterProcessKey: {}", key);
+    logger.debug("getInterpreterProcessKey: {} for InterpreterSetting Id: {}, Name: {}",
+        key, getId(), getName());
     return key;
   }
 
@@ -142,6 +143,7 @@ public InterpreterGroup getInterpreterGroup(String user, String noteId) {
           interpreterGroupFactory.createInterpreterGroup(interpreterGroupId, getOption());
 
       interpreterGroupWriteLock.lock();
+      logger.debug("create interpreter group with groupId:" + interpreterGroupId);
       interpreterGroupRef.put(key, intpGroup);
       interpreterGroupWriteLock.unlock();
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -69,7 +69,6 @@ public class RemoteInterpreterServer
   Gson gson = new Gson();
 
   RemoteInterpreterService.Processor<RemoteInterpreterServer> processor;
-  RemoteInterpreterServer handler;
   private int port;
   private TThreadPoolServer server;
 

File: python/src/test/java/org/apache/zeppelin/python/PythonDockerInterpreterTest.java
Patch:
@@ -73,6 +73,7 @@ private InterpreterContext getInterpreterContext() {
     return new InterpreterContext(
         "noteId",
         "paragraphId",
+        "replName",
         "paragraphTitle",
         "paragraphText",
         new AuthenticationInfo(),

File: beam/src/main/test/org/apache/zeppelin/beam/BeamInterpreterTest.java
Patch:
@@ -43,7 +43,7 @@ public static void setUp() {
     Properties p = new Properties();
     beam = new BeamInterpreter(p);
     beam.open();
-    context = new InterpreterContext(null, null, null, null, null, null, null, null, null, null,
+    context = new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null,
         null);
   }
 

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public static void setUp() {
     Properties p = new Properties();
     flink = new FlinkInterpreter(p);
     flink.open();
-    context = new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null);
+    context = new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null);
   }
 
   @AfterClass

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public class IgniteInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-      new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null);
+      new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null);
 
   private IgniteInterpreter intp;
   private Ignite ignite;

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java
Patch:
@@ -44,7 +44,7 @@ public class IgniteSqlInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-      new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null);
+      new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null);
 
   private Ignite ignite;
   private IgniteSqlInterpreter intp;

File: livy/src/test/java/org/apache/zeppelin/livy/LivyIntegrationTest.java
Patch:
@@ -83,7 +83,7 @@ public void testSparkInterpreter() {
     AuthenticationInfo authInfo = new AuthenticationInfo("user1");
     MyInterpreterOutputListener outputListener = new MyInterpreterOutputListener();
     InterpreterOutput output = new InterpreterOutput(outputListener);
-    InterpreterContext context = new InterpreterContext("noteId", "paragraphId", "title",
+    InterpreterContext context = new InterpreterContext("noteId", "paragraphId", null, "title",
         "text", authInfo, null, null, null, null, null, output);
     sparkInterpreter.open();
     InterpreterResult result = sparkInterpreter.interpret("sc.version", context);
@@ -177,7 +177,7 @@ public void testPySparkInterpreter() {
     AuthenticationInfo authInfo = new AuthenticationInfo("user1");
     MyInterpreterOutputListener outputListener = new MyInterpreterOutputListener();
     InterpreterOutput output = new InterpreterOutput(outputListener);
-    InterpreterContext context = new InterpreterContext("noteId", "paragraphId", "title",
+    InterpreterContext context = new InterpreterContext("noteId", "paragraphId", null, "title",
             "text", authInfo, null, null, null, null, null, output);
     pysparkInterpreter.open();
     InterpreterResult result = pysparkInterpreter.interpret("sc.version", context);

File: pig/src/test/java/org/apache/zeppelin/pig/PigInterpreterTest.java
Patch:
@@ -47,7 +47,7 @@ public void setUp() {
     properties.put("zeppelin.pig.execType", "local");
     pigInterpreter = new PigInterpreter(properties);
     pigInterpreter.open();
-    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null,
+    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null, null,
             null, null);
   }
 

File: pig/src/test/java/org/apache/zeppelin/pig/PigQueryInterpreterTest.java
Patch:
@@ -65,7 +65,7 @@ public void setUp() {
     pigInterpreter.open();
     pigQueryInterpreter.open();
 
-    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null,
+    context = new InterpreterContext(null, "paragraph_id", null, null, null, null, null, null, null, null,
             null, null);
   }
 

File: python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java
Patch:
@@ -93,6 +93,7 @@ private InterpreterContext getInterpreterContext() {
     return new InterpreterContext(
         "noteId",
         "paragraphId",
+        null,
         "paragraphTitle",
         "paragraphText",
         new AuthenticationInfo(),

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterMatplotlibTest.java
Patch:
@@ -76,7 +76,7 @@ public void setUp() throws Exception {
     interpreters.add(python);
     intpGroup.put("note", interpreters);
 
-    context = new InterpreterContext("note", "id", "title", "text", new AuthenticationInfo(),
+    context = new InterpreterContext("note", "id", null, "title", "text", new AuthenticationInfo(),
         new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null), null,
         new LinkedList<InterpreterContextRunner>(), new InterpreterOutput(

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterPandasSqlTest.java
Patch:
@@ -78,7 +78,7 @@ public void setUp() throws Exception {
 
     intpGroup.put("note", Arrays.asList(python, sql));
 
-    context = new InterpreterContext("note", "id", "title", "text", new AuthenticationInfo(),
+    context = new InterpreterContext("note", "id", null, "title", "text", new AuthenticationInfo(),
         new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null), null,
         new LinkedList<InterpreterContextRunner>(), new InterpreterOutput(

File: scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java
Patch:
@@ -64,7 +64,7 @@ public void setUp() throws Exception {
     }
 
     InterpreterGroup intpGroup = new InterpreterGroup();
-    context = new InterpreterContext("note", "id", "title", "text", new AuthenticationInfo(),
+    context = new InterpreterContext("note", "id", null, "title", "text", new AuthenticationInfo(),
         new HashMap<String, Object>(), new GUI(), new AngularObjectRegistry(
             intpGroup.getId(), null), null,
         new LinkedList<InterpreterContextRunner>(), null);

File: scio/src/test/java/org/apache/zeppelin/scio/ScioInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public class ScioInterpreterTest {
   private final String newline = "\n";
 
   private InterpreterContext getNewContext() {
-    return new InterpreterContext("note", "id", "title", "text",
+    return new InterpreterContext("note", "id", null, "title", "text",
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),

File: shell/src/test/java/org/apache/zeppelin/shell/ShellInterpreterTest.java
Patch:
@@ -47,7 +47,7 @@ public void tearDown() throws Exception {
   @Test
   public void test() {
     shell.open();
-    InterpreterContext context = new InterpreterContext("", "1", "", "", null, null, null, null, null, null, null);
+    InterpreterContext context = new InterpreterContext("", "1", null, "", "", null, null, null, null, null, null, null);
     InterpreterResult result = new InterpreterResult(Code.ERROR);
     if (System.getProperty("os.name").startsWith("Windows")) {
       result = shell.interpret("dir", context);
@@ -64,7 +64,7 @@ public void test() {
   @Test
   public void testInvalidCommand(){
     shell.open();
-    InterpreterContext context = new InterpreterContext("","1","","",null,null,null,null,null,null,null);
+    InterpreterContext context = new InterpreterContext("","1",null,"","",null,null,null,null,null,null,null);
     InterpreterResult result = new InterpreterResult(Code.ERROR);
     if (System.getProperty("os.name").startsWith("Windows")) {
       result = shell.interpret("invalid_command\ndir",context);

File: spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
Patch:
@@ -64,7 +64,7 @@ public void setUp() throws Exception {
     intpGroup.get("note").add(dep);
     dep.setInterpreterGroup(intpGroup);
 
-    context = new InterpreterContext("note", "id", "title", "text", new AuthenticationInfo(),
+    context = new InterpreterContext("note", "id", null, "title", "text", new AuthenticationInfo(),
         new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         null,

File: spark/src/test/java/org/apache/zeppelin/spark/PySparkInterpreterTest.java
Patch:
@@ -100,7 +100,7 @@ public void setUp() throws Exception {
       pySparkInterpreter.open();
     }
 
-    context = new InterpreterContext("note", "id", "title", "text",
+    context = new InterpreterContext("note", "id", null, "title", "text",
       new AuthenticationInfo(),
       new HashMap<String, Object>(),
       new GUI(),

File: spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -92,7 +92,7 @@ public void setUp() throws Exception {
       repl.open();
     }
 
-    context = new InterpreterContext("note", "id", "title", "text",
+    context = new InterpreterContext("note", "id", null, "title", "text",
         new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),

File: spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -75,7 +75,7 @@ public void setUp() throws Exception {
       sql.setInterpreterGroup(intpGroup);
       sql.open();
     }
-    context = new InterpreterContext("note", "id", "title", "text", new AuthenticationInfo(),
+    context = new InterpreterContext("note", "id", null, "title", "text", new AuthenticationInfo(),
         new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LocalResourcePool("id"),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -494,6 +494,7 @@ private RemoteInterpreterContext convert(InterpreterContext ic) {
     return new RemoteInterpreterContext(
         ic.getNoteId(),
         ic.getParagraphId(),
+        ic.getReplName(),
         ic.getParagraphTitle(),
         ic.getParagraphText(),
         gson.toJson(ic.getAuthenticationInfo()),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -544,6 +544,7 @@ private InterpreterContext convert(RemoteInterpreterContext ric, InterpreterOutp
     return new InterpreterContext(
         ric.getNoteId(),
         ric.getParagraphId(),
+        ric.getReplName(),
         ric.getParagraphTitle(),
         ric.getParagraphText(),
         gson.fromJson(ric.getAuthenticationInfo(), AuthenticationInfo.class),

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java
Patch:
@@ -27,7 +27,7 @@ public class InterpreterContextTest {
   public void testThreadLocal() {
     assertNull(InterpreterContext.get());
 
-    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null));
+    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null, null));
     assertNotNull(InterpreterContext.get());
 
     InterpreterContext.remove();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/LazyOpenInterpreterTest.java
Patch:
@@ -36,7 +36,7 @@ public void isOpenTest() {
 
     assertFalse("Interpreter is not open", lazyOpenInterpreter.isOpen());
     InterpreterContext interpreterContext =
-        new InterpreterContext("note", "id", "title", "text", null, null, null, null, null, null, null);
+        new InterpreterContext("note", "id", null, "title", "text", null, null, null, null, null, null, null);
     lazyOpenInterpreter.interpret("intp 1", interpreterContext);
     assertTrue("Interpeter is open", lazyOpenInterpreter.isOpen());
   }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -86,6 +86,7 @@ public void setUp() throws Exception {
     context = new InterpreterContext(
         "note",
         "id",
+        null,
         "title",
         "text",
         new AuthenticationInfo(),

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java
Patch:
@@ -85,6 +85,7 @@ private InterpreterContext createInterpreterContext() {
     return new InterpreterContext(
         "noteId",
         "id",
+        null,
         "title",
         "text",
         new AuthenticationInfo(),

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java
Patch:
@@ -103,6 +103,7 @@ public void setUp() throws Exception {
     context = new InterpreterContext(
         "note",
         "id",
+        null,
         "title",
         "text",
         new AuthenticationInfo(),

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java
Patch:
@@ -112,6 +112,7 @@ protected Object jobRun() throws Throwable {
         intpA.interpret("1000", new InterpreterContext(
             "note",
             "jobId",
+            null,
             "title",
             "text",
             new AuthenticationInfo(),
@@ -190,6 +191,7 @@ public void testAbortOnPending() throws Exception {
       InterpreterContext context = new InterpreterContext(
           "note",
           "jobId1",
+          null,
           "title",
           "text",
           new AuthenticationInfo(),
@@ -228,6 +230,7 @@ protected boolean jobAbort() {
       InterpreterContext context = new InterpreterContext(
           "note",
           "jobId2",
+          null,
           "title",
           "text",
           new AuthenticationInfo(),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -473,6 +473,7 @@ private InterpreterContext getInterpreterContext(InterpreterOutput output) {
     InterpreterContext interpreterContext = new InterpreterContext(
         note.getId(),
         getId(),
+        getRequiredReplName(),
         this.getTitle(),
         this.getText(),
         this.getAuthenticationInfo(),

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -95,7 +95,7 @@ public void setUp() throws Exception {
     schedulerFactory = new SchedulerFactory();
     depResolver = new DependencyResolver(tmpDir.getAbsolutePath() + "/local-repo");
     factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver, false);
-    context = new InterpreterContext("note", "id", "title", "text", null, null, null, null, null, null, null);
+    context = new InterpreterContext("note", "id", null, "title", "text", null, null, null, null, null, null, null);
 
     SearchService search = mock(SearchService.class);
     notebookRepo = new VFSNotebookRepo(conf);

File: python/src/test/java/org/apache/zeppelin/python/PythonCondaInterpreterTest.java
Patch:
@@ -77,7 +77,7 @@ public void testActivateEnv() {
     conda.interpret("activate env", context);
     verify(python, times(1)).open();
     verify(python, times(1)).close();
-    assertEquals("conda run -n env \"python -iu\"", conda.getPythonCommand());
+    verify(python).setPythonCommand("conda run -n env \"python -iu\"");
   }
 
   @Test
@@ -86,7 +86,7 @@ public void testDeactivate() {
     conda.interpret("deactivate", context);
     verify(python, times(1)).open();
     verify(python, times(1)).close();
-    assertEquals(null, conda.getPythonCommand());
+    verify(python).setPythonCommand(null);
   }
 
   private InterpreterContext getInterpreterContext() {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -538,6 +538,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.python.PythonInterpreter,"
         + "org.apache.zeppelin.python.PythonInterpreterPandasSql,"
         + "org.apache.zeppelin.python.PythonCondaInterpreter,"
+        + "org.apache.zeppelin.python.PythonDockerInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteSqlInterpreter,"
         + "org.apache.zeppelin.lens.LensInterpreter,"

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/ParagraphTest.java
Patch:
@@ -58,8 +58,7 @@ public void replNameAndNoBody() {
     assertEquals("md", Paragraph.getRequiredReplName(text));
     assertEquals("", Paragraph.getScriptBody(text));
   }
-
-
+  
   @Test
   public void replSingleCharName() {
     String text = "%r a";

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -190,7 +190,8 @@ public void onMessage(NotebookSocket conn, String msg) {
       if (StringUtils.isEmpty(conn.getUser())) {
         addUserConnection(messagereceived.principal, conn);
       }
-      AuthenticationInfo subject = new AuthenticationInfo(messagereceived.principal);
+      AuthenticationInfo subject = 
+          new AuthenticationInfo(messagereceived.principal, messagereceived.ticket);
 
       /** Lets be elegant here */
       switch (messagereceived.op) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -1382,9 +1382,9 @@ public void setEnv(Map<String, String> env) {
   public Map<String, Object> getEditorSetting(String user, String noteId, String replName) {
     Interpreter intp = getInterpreter(user, noteId, replName);
     Map<String, Object> editor = DEFAULT_EDITOR;
-    String defaultSettingName = getDefaultInterpreterSetting(noteId).getName();
     String group = StringUtils.EMPTY;
     try {
+      String defaultSettingName = getDefaultInterpreterSetting(noteId).getName();
       List<InterpreterSetting> intpSettings = getInterpreterSettings(noteId);
       for (InterpreterSetting intpSetting : intpSettings) {
         String[] replNameSplit = replName.split("\\.");

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -537,6 +537,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
         + "org.apache.zeppelin.python.PythonInterpreter,"
         + "org.apache.zeppelin.python.PythonInterpreterPandasSql,"
+        + "org.apache.zeppelin.python.PythonCondaInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteSqlInterpreter,"
         + "org.apache.zeppelin.lens.LensInterpreter,"

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -439,7 +439,7 @@ public void testEditOnDoubleClick() throws Exception {
       Actions action = new Actions(driver);
 
       waitForParagraph(1, "READY");
-
+      pollingWait(By.xpath(getParagraphXPath(1) + "//textarea"), MAX_PARAGRAPH_TIMEOUT_SEC);
       driver.findElement(By.xpath(getParagraphXPath(1) + "//textarea")).sendKeys(Keys.SHIFT + "5");
       driver.findElement(By.xpath(getParagraphXPath(1) + "//textarea")).sendKeys("md" + Keys.ENTER);
       driver.findElement(By.xpath(getParagraphXPath(1) + "//textarea")).sendKeys(Keys.SHIFT + "3");

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/ActiveDirectoryGroupRealm.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.zeppelin.server;
+package org.apache.zeppelin.realm;
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.hadoop.conf.Configuration;

File: zeppelin-server/src/main/java/org/apache/zeppelin/realm/LdapGroupRealm.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.apache.zeppelin.server;
+package org.apache.zeppelin.realm;
 
 import org.apache.shiro.authz.AuthorizationInfo;
 import org.apache.shiro.authz.SimpleAuthorizationInfo;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterRunningProcess.java
Patch:
@@ -51,7 +51,7 @@ public int getPort() {
   }
 
   @Override
-  public void start() {
+  public void start(String userName, Boolean isUserImpersonate) {
     // assume process is externally managed. nothing to do
   }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -74,7 +74,9 @@ public void setUp() throws Exception {
         env,
         10 * 1000,
         null,
-        null
+        null,
+        "anonymous",
+        false
     );
 
     intpGroup.put("note", new LinkedList<Interpreter>());

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java
Patch:
@@ -72,7 +72,9 @@ private RemoteInterpreter createMockInterpreter() {
         env,
         10 * 1000,
         this,
-        null);
+        null,
+        "anonymous",
+        false);
 
     intpGroup.get("note").add(intp);
     intp.setInterpreterGroup(intpGroup);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -589,7 +589,7 @@ public String getMagic() {
   }
 
   private boolean isValidInterpreter(String replName) {
-    return factory.getInterpreter("",
+    return factory.getInterpreter(user,
         note.getId(), replName) != null;
   }
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/InterpreterCompletion.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-8")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-17")
 public class InterpreterCompletion implements org.apache.thrift.TBase<InterpreterCompletion, InterpreterCompletion._Fields>, java.io.Serializable, Cloneable, Comparable<InterpreterCompletion> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterpreterCompletion");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteApplicationResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-5-7")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-17")
 public class RemoteApplicationResult implements org.apache.thrift.TBase<RemoteApplicationResult, RemoteApplicationResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteApplicationResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteApplicationResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-8")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-17")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-8")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-17")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -24,6 +24,9 @@
 package org.apache.zeppelin.interpreter.thrift;
 
 
+import java.util.Map;
+import java.util.HashMap;
+import org.apache.thrift.TEnum;
 
 public enum RemoteInterpreterEventType implements org.apache.thrift.TEnum {
   NO_OP(1),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-8")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-17")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-6-8")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-11-17")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/listener/ZeppelinWebsocket.java
Patch:
@@ -43,7 +43,7 @@ public void onWebSocketBinary(byte[] arg0, int arg1, int arg2) {
   @Override
   public void onWebSocketClose(int code, String message) {
     LOG.info("Zeppelin connection closed with code: {}, message: {}", code, message);
-    // parentClient.removeConnMap(noteId);
+    ZeppelinClient.getInstance().removeNoteConnection(noteId);
   }
 
   @Override
@@ -54,7 +54,8 @@ public void onWebSocketConnect(Session session) {
 
   @Override
   public void onWebSocketError(Throwable e) {
-    LOG.warn("Zeppelin socket connection error: {}", e.toString());
+    LOG.warn("Zeppelin socket connection error ", e);
+    ZeppelinClient.getInstance().removeNoteConnection(noteId);
   }
 
   @Override

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/scheduler/ZeppelinHeartbeat.java
Patch:
@@ -38,7 +38,7 @@ private ZeppelinHeartbeat(ZeppelinClient client) {
 
   @Override
   public void run() {
-    LOG.debug("Sending PING to all connected Zeppelin notes");
-    client.pingAllNotes();
+    LOG.debug("Sending PING to Zeppelin Websocket Server");
+    client.ping();
   }
 }

File: markdown/src/main/java/org/apache/zeppelin/markdown/Markdown4jParser.java
Patch:
@@ -23,7 +23,9 @@
 
 import java.io.IOException;
 
-/** Markdown Parser using markdown4j processor . */
+/**
+ * Markdown Parser using markdown4j processor.
+ */
 public class Markdown4jParser implements MarkdownParser {
   private Markdown4jProcessor processor;
 

File: markdown/src/main/java/org/apache/zeppelin/markdown/MarkdownParser.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.apache.zeppelin.markdown;
 
-/** Abstract Markdown Parser. */
+/**
+ * Abstract Markdown Parser.
+ */
 public interface MarkdownParser {
   String render(String markdownText);
 }

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -316,6 +316,7 @@ public void appendOutput(String message) throws IOException {
   @Override
   public InterpreterResult interpret(String st, InterpreterContext context) {
     SparkInterpreter sparkInterpreter = getSparkInterpreter();
+    sparkInterpreter.populateSparkWebUrl(context);
     if (sparkInterpreter.getSparkVersion().isUnsupportedVersion()) {
       return new InterpreterResult(Code.ERROR, "Spark "
           + sparkInterpreter.getSparkVersion().toString() + " is not supported");

File: spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -97,6 +97,7 @@ public void open() {
   @Override
   public InterpreterResult interpret(String lines, InterpreterContext interpreterContext) {
 
+    getSparkInterpreter().populateSparkWebUrl(interpreterContext);
     String imageWidth = getProperty("zeppelin.R.image.width");
 
     String[] sl = lines.split("\n");

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -96,6 +96,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
           + sparkInterpreter.getSparkVersion().toString() + " is not supported");
     }
 
+    sparkInterpreter.populateSparkWebUrl(context);
     sqlc = getSparkInterpreter().getSQLContext();
     SparkContext sc = sqlc.sparkContext();
     if (concurrentSQL()) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessListener.java
Patch:
@@ -16,10 +16,13 @@
  */
 package org.apache.zeppelin.interpreter.remote;
 
+import java.util.Map;
+
 /**
  * Event from remoteInterpreterProcess
  */
 public interface RemoteInterpreterProcessListener {
   public void onOutputAppend(String noteId, String paragraphId, String output);
   public void onOutputUpdated(String noteId, String paragraphId, String output);
+  public void onMetaInfosReceived(String settingId, Map<String, String> metaInfos);
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -552,7 +552,7 @@ private InterpreterContext convert(RemoteInterpreterContext ric, InterpreterOutp
         gson.fromJson(ric.getGui(), GUI.class),
         interpreterGroup.getAngularObjectRegistry(),
         interpreterGroup.getResourcePool(),
-        contextRunners, output);
+        contextRunners, output, eventClient);
   }
 
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -982,6 +982,8 @@ public void restart(String id) {
       // Check if dependency in specified path is changed
       // If it did, overwrite old dependency jar with new one
       if (intpSetting != null) {
+        //clean up metaInfos
+        intpSetting.setInfos(null);
         copyDependenciesFromLocalPath(intpSetting);
 
         stopJobAllInterpreter(intpSetting);

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -258,8 +258,10 @@ public Response bind(@PathParam("noteId") String noteId) {
   @ZeppelinApi
   public Response getNoteList() throws IOException {
     AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());
+    HashSet<String> userAndRoles = SecurityUtils.getRoles();
+    userAndRoles.add(subject.getUser());
     List<Map<String, String>> notesInfo = notebookServer.generateNotesInfo(false, subject,
-        SecurityUtils.getRoles());
+        userAndRoles);
     return new JsonResponse<>(Status.OK, "", notesInfo).build();
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -542,7 +542,7 @@ public int compare(Note note1, Note note2) {
     }
   }
 
-  public List<Note> getAllNotes(HashSet<String> userAndRoles) {
+  public List<Note> getAllNotes(Set<String> userAndRoles) {
     final Set<String> entities = Sets.newHashSet();
     if (userAndRoles != null) {
       entities.addAll(userAndRoles);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorizationInfoSaving.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.apache.zeppelin.notebook;
 
-import java.util.HashMap;
 import java.util.Map;
 import java.util.Set;
 

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -55,6 +55,7 @@
 import org.apache.zeppelin.interpreter.WrappedInterpreter;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;
 import org.apache.zeppelin.spark.dep.SparkDependencyContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -71,7 +72,7 @@ public class PySparkInterpreter extends Interpreter implements ExecuteResultHand
   private GatewayServer gatewayServer;
   private DefaultExecutor executor;
   private int port;
-  private SparkOutputStream outputStream;
+  private InterpreterOutputStream outputStream;
   private BufferedWriter ins;
   private PipedInputStream in;
   private ByteArrayOutputStream input;
@@ -196,7 +197,7 @@ private void createGatewayServerAndStartScript() {
     cmd.addArgument(Integer.toString(port), false);
     cmd.addArgument(Integer.toString(getSparkInterpreter().getSparkVersion().toNumber()), false);
     executor = new DefaultExecutor();
-    outputStream = new SparkOutputStream(logger);
+    outputStream = new InterpreterOutputStream(logger);
     PipedOutputStream ps = new PipedOutputStream();
     in = null;
     try {

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -55,6 +55,7 @@
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.InterpreterUtils;
 import org.apache.zeppelin.interpreter.WrappedInterpreter;
+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;
 import org.apache.zeppelin.resource.ResourcePool;
 import org.apache.zeppelin.resource.WellKnownResourceName;
 import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
@@ -110,7 +111,7 @@ public class SparkInterpreter extends Interpreter {
   private static Integer sharedInterpreterLock = new Integer(0);
   private static AtomicInteger numReferenceOfSparkContext = new AtomicInteger(0);
 
-  private SparkOutputStream out;
+  private InterpreterOutputStream out;
   private SparkDependencyResolver dep;
 
   /**
@@ -126,7 +127,7 @@ public class SparkInterpreter extends Interpreter {
 
   public SparkInterpreter(Properties property) {
     super(property);
-    out = new SparkOutputStream(logger);
+    out = new InterpreterOutputStream(logger);
   }
 
   public SparkInterpreter(Properties property, SparkContext sc) {

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
 import org.apache.zeppelin.interpreter.InterpreterOutputListener;
+import org.apache.zeppelin.interpreter.util.InterpreterOutputStream;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -38,7 +39,7 @@ public class ZeppelinR implements ExecuteResultHandler {
   private final String rCmdPath;
   private final SparkVersion sparkVersion;
   private DefaultExecutor executor;
-  private SparkOutputStream outputStream;
+  private InterpreterOutputStream outputStream;
   private PipedOutputStream input;
   private final String scriptPath;
   private final String libPath;
@@ -146,7 +147,7 @@ public void open() throws IOException {
     logger.debug(cmd.toString());
 
     executor = new DefaultExecutor();
-    outputStream = new SparkOutputStream(logger);
+    outputStream = new InterpreterOutputStream(logger);
 
     input = new PipedOutputStream();
     PipedInputStream in = new PipedInputStream(input);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/util/LogOutputStream.java
Patch:
@@ -15,13 +15,12 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.spark;
+package org.apache.zeppelin.interpreter.util;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 
-
 /**
  * Minor modification of LogOutputStream of apache commons exec.
  * LogOutputStream of apache commons exec has one issue that method flush doesn't throw IOException,

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -544,15 +544,16 @@ public static enum ConfVars {
         + "org.apache.zeppelin.jdbc.JDBCInterpreter,"
         + "org.apache.zeppelin.hbase.HbaseInterpreter,"
         + "org.apache.zeppelin.bigquery.BigQueryInterpreter,"
-        + "org.apache.zeppelin.beam.BeamInterpreter"),
+        + "org.apache.zeppelin.beam.BeamInterpreter,"
+        + "org.apache.zeppelin.scio.ScioInterpreter"),
     ZEPPELIN_INTERPRETER_JSON("zeppelin.interpreter.setting", "interpreter-setting.json"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
     ZEPPELIN_INTERPRETER_GROUP_ORDER("zeppelin.interpreter.group.order", "spark,md,angular,sh,"
         + "livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,"
-        + "scalding,jdbc,hbase,bigquery,beam,pig"),
+        + "scalding,jdbc,hbase,bigquery,beam,pig,scio"),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),
     // use specified notebook (id) as homescreen

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -53,6 +53,8 @@ public static enum OP {
                       // @param object notebook
     NOTE_UPDATE,
 
+    NOTE_RENAME,
+
     RUN_PARAGRAPH,    // [c-s] run paragraph
                       // @param id paragraph id
                       // @param paragraph paragraph content.ie. script

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinhubClient.java
Patch:
@@ -138,7 +138,7 @@ private ZeppelinhubSession connect() {
       Session session = future.get();
       zeppelinSession = ZeppelinhubSession.createInstance(session, zeppelinhubToken);
     } catch (IOException | InterruptedException | ExecutionException e) {
-      LOG.info("Couldnt connect to zeppelinhub", e);
+      LOG.info("Couldnt connect to zeppelinhub - {}", e.toString());
       zeppelinSession = ZeppelinhubSession.EMPTY;
     }
     return zeppelinSession;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/listener/ZeppelinWebsocket.java
Patch:
@@ -54,7 +54,7 @@ public void onWebSocketConnect(Session session) {
 
   @Override
   public void onWebSocketError(Throwable e) {
-    LOG.warn("Zeppelin socket connection error ", e);
+    LOG.warn("Zeppelin socket connection error: {}", e.toString());
   }
 
   @Override
@@ -67,7 +67,7 @@ public void onWebSocketText(String data) {
         zeppelinClient.handleMsgFromZeppelin(data, noteId);
       }
     } catch (Exception e) {
-      LOG.error("Failed to send message to ZeppelinHub: ", e);
+      LOG.error("Failed to send message to ZeppelinHub: {}", e.toString());
     }
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/listener/ZeppelinhubWebsocket.java
Patch:
@@ -58,7 +58,7 @@ public void onWebSocketConnect(Session session) {
 
   @Override
   public void onWebSocketError(Throwable cause) {
-    LOG.error("Got error", cause);
+    LOG.error("Remote websocket error");
   }
 
   @Override

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -268,9 +268,6 @@ private static void setupRestApiContextHandler(WebAppContext webapp,
       SecurityUtils.initSecurityManager(shiroIniPath);
       webapp.addFilter(ShiroFilter.class, "/api/*", EnumSet.allOf(DispatcherType.class));
       webapp.addEventListener(new EnvironmentLoaderListener());
-    } else {
-      webapp.addFilter(new FilterHolder(CorsFilter.class),
-          "/api/*", EnumSet.allOf(DispatcherType.class));
     }
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -539,7 +539,7 @@ public static void ps() {
 
 
   /** Status code matcher */
-  protected Matcher<? super HttpMethodBase> isForbiden() { return responsesWith(403); }
+  protected Matcher<? super HttpMethodBase> isForbidden() { return responsesWith(403); }
 
   protected Matcher<? super HttpMethodBase> isAllowed() {
     return responsesWith(200);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -48,7 +48,7 @@ public static enum OP {
                       // @param id note id
     CLONE_NOTE,       // [c-s] clone new notebook
                       // @param id id of note to clone
-                      // @param name name fpor the cloned note
+                      // @param name name for the cloned note
     IMPORT_NOTE,      // [c-s] import notebook
                       // @param object notebook
     NOTE_UPDATE,
@@ -96,7 +96,8 @@ public static enum OP {
                                   // @param notes serialized List<NoteInfo> object
 
     PARAGRAPH_REMOVE,
-    PARAGRAPH_CLEAR_OUTPUT,
+    PARAGRAPH_CLEAR_OUTPUT,       // [c-s] clear output of paragraph
+    PARAGRAPH_CLEAR_ALL_OUTPUT,   // [c-s] clear output of all paragraphs
     PARAGRAPH_APPEND_OUTPUT,      // [s-c] append output
     PARAGRAPH_UPDATE_OUTPUT,      // [s-c] update (replace) output
     PING,

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.configuration.XMLConfiguration;
 import org.apache.commons.configuration.tree.ConfigurationNode;
+import org.apache.commons.lang.StringUtils;
 import org.apache.zeppelin.notebook.repo.VFSNotebookRepo;
 import org.apache.zeppelin.util.Util;
 import org.slf4j.Logger;
@@ -402,9 +403,8 @@ public String getCredentialsPath() {
   }
 
   public String getShiroPath() {
-    String shiroPath =  getRelativeDir(String.format("%s/shiro.ini", getConfDir()));
-    return new File(shiroPath).exists() ? shiroPath
-        : getRelativeDir(String.format("%s/shiro.ini.template", getConfDir()));
+    String shiroPath = getRelativeDir(String.format("%s/shiro.ini", getConfDir()));
+    return new File(shiroPath).exists() ? shiroPath : StringUtils.EMPTY;
   }
 
   public String getInterpreterRemoteRunnerPath() {

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -504,6 +504,7 @@ private void setupConfForPySpark(SparkConf conf) {
         conf.set("spark.files", conf.get("spark.yarn.dist.files"));
       }
       conf.set("spark.submit.pyArchives", Joiner.on(":").join(pythonLibs));
+      conf.set("spark.submit.pyFiles", Joiner.on(",").join(pythonLibUris));
     }
 
     // Distributes needed libraries to workers

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -140,6 +140,8 @@ public static enum OP {
                                   // @param noteId
                                   // @param selectedSettingIds
     INTERPRETER_BINDINGS,         // [s-c] interpreter bindings
+    GET_INTERPRETER_SETTINGS,     // [c-s] get interpreter settings
+    INTERPRETER_SETTINGS,         // [s-c] interpreter settings
     ERROR_INFO                    // [s-c] error information to be sent
   }
 

File: alluxio/src/main/java/org/apache/zeppelin/alluxio/AlluxioInterpreter.java
Patch:
@@ -135,7 +135,7 @@ private InterpreterResult interpret(String[] commands, InterpreterContext contex
   
   private String[] splitAndRemoveEmpty(String st, String splitSeparator) {
     String[] voices = st.split(splitSeparator);
-    ArrayList<String> result = new ArrayList<String>();
+    ArrayList<String> result = new ArrayList<>();
     for (String voice : voices) {
       if (!voice.trim().isEmpty()) {
         result.add(voice);
@@ -145,7 +145,7 @@ private String[] splitAndRemoveEmpty(String st, String splitSeparator) {
   }
 
   private String[] splitAndRemoveEmpty(String[] sts, String splitSeparator) {
-    ArrayList<String> result = new ArrayList<String>();
+    ArrayList<String> result = new ArrayList<>();
     for (String st : sts) {
       result.addAll(Arrays.asList(splitAndRemoveEmpty(st, splitSeparator)));
     }

File: alluxio/src/test/java/org/apache/zeppelin/alluxio/AlluxioInterpreterTest.java
Patch:
@@ -93,7 +93,7 @@ public void testCompletion() {
     List expectedResultThree = Arrays.asList(
       new InterpreterCompletion("copyFromLocal", "copyFromLocal"),
       new InterpreterCompletion("copyToLocal", "copyToLocal"));
-    List expectedResultNone = new ArrayList<String>();
+    List expectedResultNone = new ArrayList<>();
 
     List<InterpreterCompletion> resultOne = alluxioInterpreter.completion("c", 0);
     List<InterpreterCompletion> resultTwo = alluxioInterpreter.completion("co", 0);

File: file/src/test/java/org/apache/zeppelin/file/HDFSFileInterpreterTest.java
Patch:
@@ -123,7 +123,7 @@ public void test() {
    * Store command results from curl against a real file system
    */
   class MockFileSystem {
-    HashMap<String, String> mfs = new HashMap<String, String>();
+    HashMap<String, String> mfs = new HashMap<>();
     void addListStatusData() {
       mfs.put("/?op=LISTSTATUS",
           "{\"FileStatuses\":{\"FileStatus\":[\n" +

File: flink/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java
Patch:
@@ -175,7 +175,7 @@ private Settings createSettings() {
 
     pathSettings.v_$eq(classpath);
     settings.scala$tools$nsc$settings$ScalaSettings$_setter_$classpath_$eq(pathSettings);
-    settings.explicitParentLoader_$eq(new Some<ClassLoader>(Thread.currentThread()
+    settings.explicitParentLoader_$eq(new Some<>(Thread.currentThread()
         .getContextClassLoader()));
     BooleanSetting b = (BooleanSetting) settings.usejavacp();
     b.v_$eq(true);
@@ -197,7 +197,7 @@ private List<File> currentClassPath() {
   }
 
   private List<File> classPath(ClassLoader cl) {
-    List<File> paths = new LinkedList<File>();
+    List<File> paths = new LinkedList<>();
     if (cl == null) {
       return paths;
     }
@@ -217,7 +217,7 @@ private List<File> classPath(ClassLoader cl) {
   public Object getLastObject() {
     Object obj = imain.lastRequest().lineRep().call(
         "$result",
-        JavaConversions.asScalaBuffer(new LinkedList<Object>()));
+        JavaConversions.asScalaBuffer(new LinkedList<>()));
     return obj;
   }
 

File: ignite/src/main/java/org/apache/zeppelin/ignite/IgniteInterpreter.java
Patch:
@@ -178,7 +178,7 @@ private List<File> classPath(ClassLoader cl) {
   public Object getLastObject() {
     Object obj = imain.lastRequest().lineRep().call(
         "$result",
-        JavaConversions.asScalaBuffer(new LinkedList<Object>()));
+        JavaConversions.asScalaBuffer(new LinkedList<>()));
     return obj;
   }
 

File: lens/src/main/java/org/apache/zeppelin/lens/LensInterpreter.java
Patch:
@@ -76,9 +76,9 @@ public class LensInterpreter extends Interpreter {
 
   private static Pattern s_queryExecutePattern = Pattern.compile(".*query\\s+execute\\s+(.*)");
   private static Map<String, ExecutionDetail> s_paraToQH = 
-    new ConcurrentHashMap<String, ExecutionDetail> (); //tracks paragraphId -> Lens QueryHandle
+    new ConcurrentHashMap<> (); //tracks paragraphId -> Lens QueryHandle
   private static Map<LensClient, Boolean> s_clientMap =
-    new ConcurrentHashMap<LensClient, Boolean>();
+    new ConcurrentHashMap<>();
 
   private int m_maxResults;
   private int m_maxThreads;

File: pig/src/main/java/org/apache/zeppelin/pig/PigQueryInterpreter.java
Patch:
@@ -68,7 +68,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
     // '-' is invalid for pig alias
     String alias = "paragraph_" + context.getParagraphId().replace("-", "_");
     String[] lines = st.split("\n");
-    List<String> queries = new ArrayList<String>();
+    List<String> queries = new ArrayList<>();
     for (int i = 0; i < lines.length; ++i) {
       if (i == lines.length - 1) {
         lines[i] = alias + " = " + lines[i];

File: postgresql/src/main/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreter.java
Patch:
@@ -324,7 +324,7 @@ public Scheduler getScheduler() {
   @Override
   public List<InterpreterCompletion> completion(String buf, int cursor) {
 
-    List<CharSequence> candidates = new ArrayList<CharSequence>();
+    List<CharSequence> candidates = new ArrayList<>();
     if (sqlCompleter != null && sqlCompleter.complete(buf, cursor, candidates) >= 0) {
       List completion = Lists.transform(candidates, sequenceToStringTransformer);
       return completion;

File: postgresql/src/main/java/org/apache/zeppelin/postgresql/SqlCompleter.java
Patch:
@@ -65,7 +65,7 @@ public boolean isDelimiterChar(CharSequence buffer, int pos) {
     }
   };
 
-  private Set<String> modelCompletions = new HashSet<String>();
+  private Set<String> modelCompletions = new HashSet<>();
 
   public SqlCompleter(Set<String> allCompletions, Set<String> dataModelCompletions) {
     super(allCompletions);
@@ -150,7 +150,7 @@ public static Set<String> getSqlKeywordsCompletions(Connection connection) throw
       keywords += "," + driverKeywords.toUpperCase();
     }
 
-    Set<String> completions = new TreeSet<String>();
+    Set<String> completions = new TreeSet<>();
 
 
     // Add the keywords from the current JDBC connection
@@ -193,7 +193,7 @@ public static Set<String> getSqlKeywordsCompletions(Connection connection) throw
 
   public static Set<String> getDataModelMetadataCompletions(Connection connection)
       throws SQLException {
-    Set<String> completions = new TreeSet<String>();
+    Set<String> completions = new TreeSet<>();
     getColumnNames(connection.getMetaData(), completions);
     getSchemaNames(connection.getMetaData(), completions);
     return completions;

File: postgresql/src/test/java/org/apache/zeppelin/postgresql/SqlCompleterTest.java
Patch:
@@ -39,7 +39,7 @@ public class SqlCompleterTest extends BasicJDBCTestCaseAdapter {
 
   private Logger logger = LoggerFactory.getLogger(SqlCompleterTest.class);
 
-  private final static Set<String> EMPTY = new HashSet<String>();
+  private final static Set<String> EMPTY = new HashSet<>();
 
   private CompleterTester tester;
 
@@ -157,7 +157,7 @@ public void test() {
 
     private void expectedCompletions(String buffer, int cursor, Set<String> expected) {
 
-      ArrayList<CharSequence> candidates = new ArrayList<CharSequence>();
+      ArrayList<CharSequence> candidates = new ArrayList<>();
 
       completer.complete(buffer, cursor, candidates);
 

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -60,7 +60,7 @@ public ShellInterpreter(Properties property) {
   @Override
   public void open() {
     LOGGER.info("Command timeout property: {}", getProperty(TIMEOUT_PROPERTY));
-    executors = new ConcurrentHashMap<String, DefaultExecutor>();
+    executors = new ConcurrentHashMap<>();
     if (!StringUtils.isAnyEmpty(getProperty("zeppelin.shell.auth.type"))) {
       ShellSecurityImpl.createSecureConfiguration(getProperty(), shell);
     }

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -115,7 +115,7 @@ public void open() {
 
     // load libraries from Dependency Interpreter
     URL [] urls = new URL[0];
-    List<URL> urlList = new LinkedList<URL>();
+    List<URL> urlList = new LinkedList<>();
 
     if (depInterpreter != null) {
       SparkDependencyContext depc = depInterpreter.getDependencyContext();

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java
Patch:
@@ -61,7 +61,7 @@ public class ZeppelinContext {
   // given replName in parapgraph
   private static final Map<String, String> interpreterClassMap;
   static {
-    interpreterClassMap = new HashMap<String, String>();
+    interpreterClassMap = new HashMap<>();
     interpreterClassMap.put("spark", "org.apache.zeppelin.spark.SparkInterpreter");
     interpreterClassMap.put("sql", "org.apache.zeppelin.spark.SparkSqlInterpreter");
     interpreterClassMap.put("dep", "org.apache.zeppelin.spark.DepInterpreter");
@@ -134,7 +134,7 @@ public Object select(String name, Object defaultValue,
   @ZeppelinApi
   public scala.collection.Iterable<Object> checkbox(String name,
       scala.collection.Iterable<Tuple2<Object, String>> options) {
-    List<Object> allChecked = new LinkedList<Object>();
+    List<Object> allChecked = new LinkedList<>();
     for (Tuple2<Object, String> option : asJavaIterable(options)) {
       allChecked.add(option._1());
     }
@@ -400,7 +400,7 @@ public void runAll(InterpreterContext context) {
 
   @ZeppelinApi
   public List<String> listParagraphs() {
-    List<String> paragraphs = new LinkedList<String>();
+    List<String> paragraphs = new LinkedList<>();
 
     for (InterpreterContextRunner r : interpreterContext.getRunners()) {
       paragraphs.add(r.getParagraphId());

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/AbstractDependencyResolver.java
Patch:
@@ -37,7 +37,7 @@
  */
 public abstract class AbstractDependencyResolver {
   protected RepositorySystem system = Booter.newRepositorySystem();
-  protected List<RemoteRepository> repos = new LinkedList<RemoteRepository>();
+  protected List<RemoteRepository> repos = new LinkedList<>();
   protected RepositorySystemSession session;
   
   public AbstractDependencyResolver(String localRepoPath) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Dependency.java
Patch:
@@ -31,7 +31,7 @@ public class Dependency {
 
   public Dependency(String groupArtifactVersion) {
     this.groupArtifactVersion = groupArtifactVersion;
-    exclusions = new LinkedList<String>();
+    exclusions = new LinkedList<>();
   }
 
   @Override

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/TransferListener.java
Patch:
@@ -37,7 +37,7 @@ public class TransferListener extends AbstractTransferListener {
   Logger logger = LoggerFactory.getLogger(TransferListener.class);
   private PrintStream out;
 
-  private Map<TransferResource, Long> downloads = new ConcurrentHashMap<TransferResource, Long>();
+  private Map<TransferResource, Long> downloads = new ConcurrentHashMap<>();
 
   private int lastLength;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObject.java
Patch:
@@ -38,8 +38,7 @@ public class AngularObject<T> {
   private T object;
   
   private transient AngularObjectListener listener;
-  private transient List<AngularObjectWatcher> watchers
-    = new LinkedList<AngularObjectWatcher>();
+  private transient List<AngularObjectWatcher> watchers = new LinkedList<>();
   
   private String noteId;   // noteId belonging to. null for global scope 
   private String paragraphId; // paragraphId belongs to. null for notebook scope
@@ -175,7 +174,7 @@ public void set(T o, boolean emit) {
     }
 
     final Logger logger = LoggerFactory.getLogger(AngularObject.class);
-    List<AngularObjectWatcher> ws = new LinkedList<AngularObjectWatcher>();
+    List<AngularObjectWatcher> ws = new LinkedList<>();
     synchronized (watchers) {
       ws.addAll(watchers);
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/helium/ApplicationLoader.java
Patch:
@@ -200,7 +200,7 @@ private Class<Application> loadClass(HeliumPackage packageInfo) throws Exception
     }
 
     // Create Application classloader
-    List<URL> urlList = new LinkedList<URL>();
+    List<URL> urlList = new LinkedList<>();
 
     // load artifact
     if (packageInfo.getArtifact() != null) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java
Patch:
@@ -30,8 +30,7 @@
  * Interpreter context
  */
 public class InterpreterContext {
-  private static final ThreadLocal<InterpreterContext> threadIC =
-      new ThreadLocal<InterpreterContext>();
+  private static final ThreadLocal<InterpreterContext> threadIC = new ThreadLocal<>();
 
   public final InterpreterOutput out;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterHookRegistry.java
Patch:
@@ -29,8 +29,7 @@
 public class InterpreterHookRegistry {
   public static final String GLOBAL_KEY = "_GLOBAL_";
   private String interpreterId;
-  private Map<String, Map<String, Map<String, String>>> registry =
-    new HashMap<String, Map<String, Map<String, String>>>();
+  private Map<String, Map<String, Map<String, String>>> registry = new HashMap<>();
 
   /**
    * hookRegistry constructor.

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutput.java
Patch:
@@ -39,7 +39,7 @@ public class InterpreterOutput extends OutputStream {
 
   ByteArrayOutputStream buffer = new ByteArrayOutputStream();
 
-  private final List<Object> outList = new LinkedList<Object>();
+  private final List<Object> outList = new LinkedList<>();
   private InterpreterOutputChangeWatcher watcher;
   private final InterpreterOutputListener flushListener;
   private InterpreterResult.Type type = InterpreterResult.Type.TEXT;
@@ -185,7 +185,7 @@ public void writeResource(String resourceName) throws IOException {
 
   public byte[] toByteArray() throws IOException {
     ByteArrayOutputStream out = new ByteArrayOutputStream();
-    List<Object> all = new LinkedList<Object>();
+    List<Object> all = new LinkedList<>();
 
     synchronized (outList) {
       all.addAll(outList);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterOutputChangeWatcher.java
Patch:
@@ -44,8 +44,8 @@ public class InterpreterOutputChangeWatcher extends Thread {
   Logger logger = LoggerFactory.getLogger(InterpreterOutputChangeWatcher.class);
 
   private WatchService watcher;
-  private final List<File> watchFiles = new LinkedList<File>();
-  private final Map<WatchKey, File> watchKeys = new HashMap<WatchKey, File>();
+  private final List<File> watchFiles = new LinkedList<>();
+  private final Map<WatchKey, File> watchKeys = new HashMap<>();
   private InterpreterOutputChangeListener listener;
   private boolean stop;
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterPropertyBuilder.java
Patch:
@@ -24,7 +24,7 @@
  * InterpreterPropertyBuilder
  */
 public class InterpreterPropertyBuilder {
-  Map<String, InterpreterProperty> properties = new HashMap<String, InterpreterProperty>();
+  Map<String, InterpreterProperty> properties = new HashMap<>();
 
   public InterpreterPropertyBuilder add(String name, String defaultValue, String description){
     properties.put(name, new InterpreterProperty(defaultValue, description));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java
Patch:
@@ -119,7 +119,7 @@ private int getIndexOfType(String msg, Type t) {
 
   private TreeMap<Integer, Type> buildIndexMap(String msg) {
     int lastIndexOftypes = 0;
-    TreeMap<Integer, Type> typesLastIndexInMsg = new TreeMap<Integer, Type>();
+    TreeMap<Integer, Type> typesLastIndexInMsg = new TreeMap<>();
     Type[] types = Type.values();
     for (Type t : types) {
       lastIndexOftypes = getIndexOfType(msg, t);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/dev/DevInterpreter.java
Patch:
@@ -105,7 +105,7 @@ public int getProgress(InterpreterContext context) {
 
   @Override
   public List<InterpreterCompletion> completion(String buf, int cursor) {
-    return new LinkedList<InterpreterCompletion>();
+    return new LinkedList<>();
   }
 
   public InterpreterContext getLastInterpretContext() {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/ClientFactory.java
Patch:
@@ -37,7 +37,7 @@
 public class ClientFactory extends BasePooledObjectFactory<Client>{
   private String host;
   private int port;
-  Map<Client, TSocket> clientSocketMap = new HashMap<Client, TSocket>();
+  Map<Client, TSocket> clientSocketMap = new HashMap<>();
 
   public ClientFactory(String host, int port) {
     this.host = host;
@@ -64,7 +64,7 @@ public Client create() throws Exception {
 
   @Override
   public PooledObject<Client> wrap(Client client) {
-    return new DefaultPooledObject<Client>(client);
+    return new DefaultPooledObject<>(client);
   }
 
   @Override

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/InterpreterContextRunnerPool.java
Patch:
@@ -35,7 +35,7 @@ public class InterpreterContextRunnerPool {
   private Map<String, List<InterpreterContextRunner>> interpreterContextRunners;
 
   public InterpreterContextRunnerPool() {
-    interpreterContextRunners = new HashMap<String, List<InterpreterContextRunner>>();
+    interpreterContextRunners = new HashMap<>();
 
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -141,7 +141,7 @@ public RemoteInterpreter(
   }
 
   private Map<String, String> getEnvFromInterpreterProperty(Properties property) {
-    Map<String, String> env = new HashMap<String, String>();
+    Map<String, String> env = new HashMap<>();
     for (Object key : property.keySet()) {
       if (isEnvString((String) key)) {
         env.put((String) key, property.getProperty((String) key));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java
Patch:
@@ -211,7 +211,7 @@ private void sendResourcePoolResponseGetAll(ResourceSet resourceSet) {
     boolean broken = false;
     try {
       client = interpreterProcess.getClient();
-      List<String> resourceList = new LinkedList<String>();
+      List<String> resourceList = new LinkedList<>();
       Gson gson = new Gson();
       for (Resource r : resourceSet) {
         resourceList.add(gson.toJson(r));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -78,7 +78,7 @@ public int reference(InterpreterGroup interpreterGroup) {
       }
 
       if (clientPool == null) {
-        clientPool = new GenericObjectPool<Client>(new ClientFactory(getHost(), getPort()));
+        clientPool = new GenericObjectPool<>(new ClientFactory(getHost(), getPort()));
         clientPool.setTestOnBorrow(true);
 
         remoteInterpreterEventPoller.setInterpreterGroup(interpreterGroup);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/ExecutorFactory.java
Patch:
@@ -28,7 +28,7 @@ public class ExecutorFactory {
   private static ExecutorFactory _executor;
   private static Long _executorLock = new Long(0);
 
-  Map<String, ExecutorService> executor = new HashMap<String, ExecutorService>();
+  Map<String, ExecutorService> executor = new HashMap<>();
 
   public ExecutorFactory() {
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/FIFOScheduler.java
Patch:
@@ -31,7 +31,7 @@
  * FIFOScheduler runs submitted job sequentially
  */
 public class FIFOScheduler implements Scheduler {
-  List<Job> queue = new LinkedList<Job>();
+  List<Job> queue = new LinkedList<>();
   private ExecutorService executor;
   private SchedulerListener listener;
   boolean terminate = false;
@@ -53,7 +53,7 @@ public String getName() {
 
   @Override
   public Collection<Job> getJobsWaiting() {
-    List<Job> ret = new LinkedList<Job>();
+    List<Job> ret = new LinkedList<>();
     synchronized (queue) {
       for (Job job : queue) {
         ret.add(job);
@@ -64,7 +64,7 @@ public Collection<Job> getJobsWaiting() {
 
   @Override
   public Collection<Job> getJobsRunning() {
-    List<Job> ret = new LinkedList<Job>();
+    List<Job> ret = new LinkedList<>();
     Job job = runningJob;
 
     if (job != null) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerFactory.java
Patch:
@@ -34,7 +34,7 @@
 public class SchedulerFactory implements SchedulerListener {
   private static final Logger logger = LoggerFactory.getLogger(SchedulerFactory.class);
   ExecutorService executor;
-  Map<String, Scheduler> schedulers = new LinkedHashMap<String, Scheduler>();
+  Map<String, Scheduler> schedulers = new LinkedHashMap<>();
 
   private static SchedulerFactory singleton;
   private static Long singletonLock = new Long(0);
@@ -117,7 +117,7 @@ public Scheduler removeScheduler(String name) {
   }
 
   public Collection<Scheduler> listScheduler(String name) {
-    List<Scheduler> s = new LinkedList<Scheduler>();
+    List<Scheduler> s = new LinkedList<>();
     synchronized (schedulers) {
       for (Scheduler ss : schedulers.values()) {
         s.add(ss);

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/InputTest.java
Patch:
@@ -102,7 +102,7 @@ public void testFormSubstitution() {
 		// test form substitution without new forms
 		String script = "INPUT=${input_form=}SELECTED=${select_form(Selection Form)=,s_op1|s_op2|s_op3}\n" +
 				"CHECKED=${checkbox:checkbox_form=c_op1|c_op2,c_op1|c_op2|c_op3}";
-		Map<String, Object> params = new HashMap<String, Object>();
+		Map<String, Object> params = new HashMap<>();
 		params.put("input_form", "some_input");
 		params.put("select_form", "s_op2");
 		params.put("checkbox_form", new String[]{"c_op1", "c_op3"});

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -59,7 +59,7 @@ public void setUp() throws Exception {
     intpGroup = new InterpreterGroup("intpId");
     localRegistry = new RemoteAngularObjectRegistry("intpId", this, intpGroup);
     intpGroup.setAngularObjectRegistry(localRegistry);
-    env = new HashMap<String, String>();
+    env = new HashMap<>();
     env.put("ZEPPELIN_CLASSPATH", new File("./target/test-classes").getAbsolutePath());
 
     Properties p = new Properties();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java
Patch:
@@ -50,7 +50,7 @@ public void setUp() throws Exception {
     intpGroup = new InterpreterGroup();
     intpGroup.put("note", new LinkedList<Interpreter>());
 
-    env = new HashMap<String, String>();
+    env = new HashMap<>();
     env.put("ZEPPELIN_CLASSPATH", new File("./target/test-classes").getAbsolutePath());
   }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterTest.java
Patch:
@@ -65,7 +65,7 @@ public class RemoteInterpreterTest {
   @Before
   public void setUp() throws Exception {
     intpGroup = new InterpreterGroup();
-    env = new HashMap<String, String>();
+    env = new HashMap<>();
     env.put("ZEPPELIN_CLASSPATH", new File("./target/test-classes").getAbsolutePath());
   }
 
@@ -384,7 +384,7 @@ public void testRunOrderPreserved() throws InterruptedException {
     intpA.open();
 
     int concurrency = 3;
-    final List<String> results = new LinkedList<String>();
+    final List<String> results = new LinkedList<>();
 
     Scheduler scheduler = intpA.getScheduler();
     for (int i = 0; i < concurrency; i++) {
@@ -462,7 +462,7 @@ public void testRunParallel() throws InterruptedException {
 
     int concurrency = 4;
     final int timeToSleep = 1000;
-    final List<String> results = new LinkedList<String>();
+    final List<String> results = new LinkedList<>();
     long start = System.currentTimeMillis();
 
     Scheduler scheduler = intpA.getScheduler();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/resource/DistributedResourcePoolTest.java
Patch:
@@ -55,7 +55,7 @@ public class DistributedResourcePoolTest {
 
   @Before
   public void setUp() throws Exception {
-    env = new HashMap<String, String>();
+    env = new HashMap<>();
     env.put("ZEPPELIN_CLASSPATH", new File("./target/test-classes").getAbsolutePath());
 
     Properties p = new Properties();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java
Patch:
@@ -68,7 +68,7 @@ public void tearDown(){
   public void test() throws Exception {
     Properties p = new Properties();
     final InterpreterGroup intpGroup = new InterpreterGroup();
-    Map<String, String> env = new HashMap<String, String>();
+    Map<String, String> env = new HashMap<>();
     env.put("ZEPPELIN_CLASSPATH", new File("./target/test-classes").getAbsolutePath());
 
     final RemoteInterpreter intpA = new RemoteInterpreter(
@@ -157,7 +157,7 @@ protected boolean jobAbort() {
   public void testAbortOnPending() throws Exception {
     Properties p = new Properties();
     final InterpreterGroup intpGroup = new InterpreterGroup();
-    Map<String, String> env = new HashMap<String, String>();
+    Map<String, String> env = new HashMap<>();
     env.put("ZEPPELIN_CLASSPATH", new File("./target/test-classes").getAbsolutePath());
 
     final RemoteInterpreter intpA = new RemoteInterpreter(

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/SleepingJob.java
Patch:
@@ -71,7 +71,7 @@ public int progress() {
 
 	@Override
   public Map<String, Object> info() {
-		Map<String, Object> i = new HashMap<String, Object>();
+		Map<String, Object> i = new HashMap<>();
 		i.put("LoopCount", Integer.toString(count));
 		return i;
 	}

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ActiveDirectoryGroupRealm.java
Patch:
@@ -304,7 +304,7 @@ private Set<String> getRoleNamesForUser(String username, LdapContext ldapContext
    * @return a collection of roles that are implied by the given role names.
    */
   protected Collection<String> getRoleNamesForGroups(Collection<String> groupNames) {
-    Set<String> roleNames = new HashSet<String>(groupNames.size());
+    Set<String> roleNames = new HashSet<>(groupNames.size());
 
     if (groupRolesMap != null) {
       for (String groupName : groupNames) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonResponse.java
Patch:
@@ -75,7 +75,7 @@ public JsonResponse<T> setPretty(boolean pretty) {
    */
   public JsonResponse<T> addCookie(NewCookie newCookie) {
     if (cookies == null) {
-      cookies = new ArrayList<NewCookie>();
+      cookies = new ArrayList<>();
     }
     cookies.add(newCookie);
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/LdapGroupRealm.java
Patch:
@@ -56,7 +56,7 @@ public Set<String> getRoleNamesForUser(String username,
                                          LdapContext ldapContext,
                                          String userDnTemplate) throws NamingException {
     try {
-      Set<String> roleNames = new LinkedHashSet<String>();
+      Set<String> roleNames = new LinkedHashSet<>();
 
       SearchControls searchCtls = new SearchControls();
       searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -302,7 +302,7 @@ private static WebAppContext setupWebAppContext(ContextHandlerCollection context
 
   @Override
   public Set<Class<?>> getClasses() {
-    Set<Class<?>> classes = new HashSet<Class<?>>();
+    Set<Class<?>> classes = new HashSet<>();
     return classes;
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -86,8 +86,7 @@ String getKey() {
   Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").create();
   final Map<String, List<NotebookSocket>> noteSocketMap = new HashMap<>();
   final Queue<NotebookSocket> connectedSockets = new ConcurrentLinkedQueue<>();
-  final Map<String, Queue<NotebookSocket>> userConnectedSockets = 
-    new ConcurrentHashMap<String, Queue<NotebookSocket>>();
+  final Map<String, Queue<NotebookSocket>> userConnectedSockets = new ConcurrentHashMap<>();
 
   private Notebook notebook() {
     return ZeppelinServer.notebook;
@@ -154,7 +153,7 @@ public void onMessage(NotebookSocket conn, String msg) {
         throw new Exception("Anonymous access not allowed ");
       }
 
-      HashSet<String> userAndRoles = new HashSet<String>();
+      HashSet<String> userAndRoles = new HashSet<>();
       userAndRoles.add(messagereceived.principal);
       if (!messagereceived.roles.equals("")) {
         HashSet<String> roles = gson.fromJson(messagereceived.roles,

File: zeppelin-server/src/test/java/com/webautomation/ScreenCaptureHtmlUnitDriver.java
Patch:
@@ -114,8 +114,8 @@ public <X> X getScreenshotAs(OutputType<X> target) throws WebDriverException {
     // http://stackoverflow.com/questions/2244272/how-can-i-tell-htmlunits-webclient-to-download-images-and-css
     protected byte[] downloadCssAndImages(WebClient webClient, HtmlPage page) throws Exception {
         WebWindow currentWindow = webClient.getCurrentWindow();
-        Map<String, String> urlMapping = new HashMap<String, String>();
-        Map<String, byte[]> files = new HashMap<String, byte[]>();
+        Map<String, String> urlMapping = new HashMap<>();
+        Map<String, byte[]> files = new HashMap<>();
         WebWindow window = null;
         try {
             window = webClient.getWebWindowByName(page.getUrl().toString()+"_screenshot");
@@ -199,7 +199,7 @@ public static byte[] createZip(Map<String, byte[]> files) throws IOException {
     }
 
     List<String> getLinksFromCss(String css) {
-        List<String> result = new LinkedList<String>();
+        List<String> result = new LinkedList<>();
         Matcher m = cssUrlPattern.matcher(css);
         while (m.find()) { // find next match
             result.add( m.group(2));

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -88,7 +88,7 @@ protected boolean waitForText(final String txt, final By locator) {
   }
 
   protected WebElement pollingWait(final By locator, final long timeWait) {
-    Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
+    Wait<WebDriver> wait = new FluentWait<>(driver)
         .withTimeout(timeWait, TimeUnit.SECONDS)
         .pollingEvery(1, TimeUnit.SECONDS)
         .ignoring(NoSuchElementException.class);

File: zeppelin-server/src/test/java/org/apache/zeppelin/CommandExecutor.java
Patch:
@@ -40,7 +40,7 @@ public enum IGNORE_ERRORS {
   private static IGNORE_ERRORS DEFAULT_BEHAVIOUR_ON_ERRORS = IGNORE_ERRORS.TRUE;
 
   public static Object executeCommandLocalHost(String[] command, boolean printToConsole, ProcessData.Types_Of_Data type, IGNORE_ERRORS ignore_errors) {
-    List<String> subCommandsAsList = new ArrayList<String>(Arrays.asList(command));
+    List<String> subCommandsAsList = new ArrayList<>(Arrays.asList(command));
     String mergedCommand = StringUtils.join(subCommandsAsList, " ");
 
     LOG.info("Sending command \"" + mergedCommand + "\" to localhost");

File: zeppelin-server/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java
Patch:
@@ -29,7 +29,7 @@
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
 public class MockInterpreter1 extends Interpreter{
-  Map<String, Object> vars = new HashMap<String, Object>();
+  Map<String, Object> vars = new HashMap<>();
 
   public MockInterpreter1(Properties property) {
     super(property);

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -340,7 +340,7 @@ protected Matcher<HttpMethodBase> responsesWith(final int expectedStatusCode) {
 
       @Override
       public boolean matchesSafely(HttpMethodBase httpMethodBase) {
-        method = (method == null) ? new WeakReference<HttpMethodBase>(httpMethodBase) : method;
+        method = (method == null) ? new WeakReference<>(httpMethodBase) : method;
         return httpMethodBase.getStatusCode() == expectedStatusCode;
       }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumConf.java
Patch:
@@ -23,7 +23,7 @@
  * Helium config. This object will be persisted to conf/heliumc.conf
  */
 public class HeliumConf {
-  List<HeliumRegistry> registry = new LinkedList<HeliumRegistry>();
+  List<HeliumRegistry> registry = new LinkedList<>();
 
   public List<HeliumRegistry> getRegistry() {
     return registry;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumLocalRegistry.java
Patch:
@@ -46,7 +46,7 @@ public HeliumLocalRegistry(String name, String uri) {
 
   @Override
   public synchronized List<HeliumPackage> getAll() throws IOException {
-    List<HeliumPackage> result = new LinkedList<HeliumPackage>();
+    List<HeliumPackage> result = new LinkedList<>();
 
     File file = new File(uri());
     File [] files = file.listFiles();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumPackageSuggestion.java
Patch:
@@ -25,8 +25,7 @@
  * Suggested apps
  */
 public class HeliumPackageSuggestion {
-  private final List<HeliumPackageSearchResult> available =
-      new LinkedList<HeliumPackageSearchResult>();
+  private final List<HeliumPackageSearchResult> available = new LinkedList<>();
 
   /*
    * possible future improvement

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/install/InstallInterpreter.java
Patch:
@@ -56,7 +56,7 @@ public InstallInterpreter(File interpreterListFile, File interpreterBaseDir, Str
     this.interpreterListFile = interpreterListFile;
     this.interpreterBaseDir = interpreterBaseDir;
     this.localRepoDir = localRepoDir;
-    availableInterpreters = new LinkedList<AvailableInterpreterInfo>();
+    availableInterpreters = new LinkedList<>();
     readAvailableInterpreters();
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInfo.java
Patch:
@@ -26,7 +26,7 @@
 public class NoteInfo {
   String id;
   String name;
-  private Map<String, Object> config = new HashMap<String, Object>();
+  private Map<String, Object> config = new HashMap<>();
 
   public NoteInfo(String id, String name, Map<String, Object> config) {
     super();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -166,7 +166,7 @@ public Note createNote(List<String> interpreterIds, AuthenticationInfo subject)
     }
 
     if (subject != null && !"anonymous".equals(subject.getUser())) {
-      Set<String> owners = new HashSet<String>();
+      Set<String> owners = new HashSet<>();
       owners.add(subject.getUser());
       notebookAuthorization.setOwners(note.getId(), owners);
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/AzureNotebookRepo.java
Patch:
@@ -86,7 +86,7 @@ public AzureNotebookRepo(ZeppelinConfiguration conf)
 
   @Override
   public List<NoteInfo> list(AuthenticationInfo subject) throws IOException {
-    List<NoteInfo> infos = new LinkedList<NoteInfo>();
+    List<NoteInfo> infos = new LinkedList<>();
     NoteInfo info = null;
 
     for (ListFileItem item : rootDir.listFilesAndDirectories()) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -127,7 +127,7 @@ public List<NoteInfo> list(AuthenticationInfo subject) throws IOException {
 
     FileObject[] children = rootDir.getChildren();
 
-    List<NoteInfo> infos = new LinkedList<NoteInfo>();
+    List<NoteInfo> infos = new LinkedList<>();
     for (FileObject f : children) {
       String fileName = f.getName().getBaseName();
       if (f.isHidden()

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinClient.java
Patch:
@@ -185,7 +185,7 @@ public Session getZeppelinConnection(String noteId) {
 
   private Message zeppelinGetNoteMsg(String noteId) {
     Message getNoteMsg = new Message(Message.OP.GET_NOTE);
-    HashMap<String, Object> data = new HashMap<String, Object>();
+    HashMap<String, Object> data = new HashMap<>();
     data.put("id", noteId);
     getNoteMsg.data = data;
     return getNoteMsg;
@@ -227,7 +227,7 @@ private Session openNoteSession(String noteId) {
   }
 
   public void handleMsgFromZeppelin(String message, String noteId) {
-    Map<String, String> meta = new HashMap<String, String>();
+    Map<String, String> meta = new HashMap<>();
     meta.put("token", zeppelinhubToken);
     meta.put("noteId", noteId);
     Message zeppelinMsg = deserialize(message);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/utils/ZeppelinhubUtils.java
Patch:
@@ -37,7 +37,7 @@ public static String liveMessage(String token) {
       LOG.error("Cannot create Live message: token is null or empty");
       return ZeppelinhubMessage.EMPTY.serialize();
     }
-    HashMap<String, Object> data = new HashMap<String, Object>();
+    HashMap<String, Object> data = new HashMap<>();
     data.put("token", token);
     return ZeppelinhubMessage
              .newMessage(ZeppelinHubOp.LIVE, data, new HashMap<String, String>())
@@ -49,7 +49,7 @@ public static String deadMessage(String token) {
       LOG.error("Cannot create Dead message: token is null or empty");
       return ZeppelinhubMessage.EMPTY.serialize();
     }
-    HashMap<String, Object> data = new HashMap<String, Object>();
+    HashMap<String, Object> data = new HashMap<>();
     data.put("token", token);
     return ZeppelinhubMessage
              .newMessage(ZeppelinHubOp.DEAD, data, new HashMap<String, String>())
@@ -61,7 +61,7 @@ public static String pingMessage(String token) {
       LOG.error("Cannot create Ping message: token is null or empty");
       return ZeppelinhubMessage.EMPTY.serialize();
     }
-    HashMap<String, Object> data = new HashMap<String, Object>();
+    HashMap<String, Object> data = new HashMap<>();
     data.put("token", token);
     return ZeppelinhubMessage
              .newMessage(ZeppelinHubOp.PING, data, new HashMap<String, String>())

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -144,7 +144,7 @@ public static enum OP {
   }
 
   public OP op;
-  public Map<String, Object> data = new HashMap<String, Object>();
+  public Map<String, Object> data = new HashMap<>();
   public String ticket = "anonymous";
   public String principal = "anonymous";
   public String roles = "";

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/utility/IdHashes.java
Patch:
@@ -38,7 +38,7 @@ public class IdHashes {
    */
   private static String encode(Long value) {
 
-    List<Character> result = new ArrayList<Character>();
+    List<Character> result = new ArrayList<>();
     BigInteger base = new BigInteger("" + DICTIONARY.length);
     int exponent = 1;
     BigInteger remaining = new BigInteger(value.toString());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -86,7 +86,7 @@ public void setUp() throws Exception {
     depResolver = new DependencyResolver(tmpDir.getAbsolutePath() + "/local-repo");
     factory = new InterpreterFactory(conf,
         new InterpreterOption(true), null, null, heliumAppFactory, depResolver, false);
-    HashMap<String, String> env = new HashMap<String, String>();
+    HashMap<String, String> env = new HashMap<>();
     env.put("ZEPPELIN_CLASSPATH", new File("./target/test-classes").getAbsolutePath());
     factory.setEnv(env);
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumTestRegistry.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.List;
 
 public class HeliumTestRegistry extends HeliumRegistry {
-  List<HeliumPackage> infos = new LinkedList<HeliumPackage>();
+  List<HeliumPackage> infos = new LinkedList<>();
 
   public HeliumTestRegistry(String name, String uri) {
     super(name, uri);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -73,7 +73,7 @@ public void setUp() throws Exception {
     new File(tmpDir, "conf").mkdirs();
     FileUtils.copyDirectory(new File("src/test/resources/interpreter"), new File(tmpDir, "interpreter"));
 
-    Map<String, InterpreterProperty> propertiesMockInterpreter1 = new HashMap<String, InterpreterProperty>();
+    Map<String, InterpreterProperty> propertiesMockInterpreter1 = new HashMap<>();
     propertiesMockInterpreter1.put("PROPERTY_1", new InterpreterProperty("PROPERTY_1", "", "VALUE_1", "desc"));
     propertiesMockInterpreter1.put("property_2", new InterpreterProperty("", "property_2", "value_2", "desc"));
     MockInterpreter1.register("mock1", "mock1", "org.apache.zeppelin.interpreter.mock.MockInterpreter1", propertiesMockInterpreter1);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
 public class MockInterpreter1 extends Interpreter{
-Map<String, Object> vars = new HashMap<String, Object>();
+Map<String, Object> vars = new HashMap<>();
 
 	public MockInterpreter1(Properties property) {
 		super(property);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter11.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
 public class MockInterpreter11 extends Interpreter{
-  Map<String, Object> vars = new HashMap<String, Object>();
+  Map<String, Object> vars = new HashMap<>();
 
   public MockInterpreter11(Properties property) {
     super(property);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter2.java
Patch:
@@ -30,7 +30,7 @@
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
 public class MockInterpreter2 extends Interpreter{
-  Map<String, Object> vars = new HashMap<String, Object>();
+  Map<String, Object> vars = new HashMap<>();
 
 	public MockInterpreter2(Properties property) {
 		super(property);

File: livy/src/main/java/org/apache/zeppelin/livy/LivyHelper.java
Patch:
@@ -321,6 +321,7 @@ private Map getStatusById(InterpreterContext context,
             + userSessionMap.get(context.getAuthenticationInfo().getUser())
             + "/statements/" + id,
         "GET", null, context.getParagraphId());
+    LOGGER.debug("statement {} response: {}", id, json);
     try {
       Map jsonMap = gson.fromJson(json,
           new TypeToken<Map>() {

File: lens/src/main/java/org/apache/zeppelin/lens/LensInterpreter.java
Patch:
@@ -76,7 +76,7 @@ public class LensInterpreter extends Interpreter {
 
   private static Pattern s_queryExecutePattern = Pattern.compile(".*query\\s+execute\\s+(.*)");
   private static Map<String, ExecutionDetail> s_paraToQH = 
-    new ConcurrentHashMap<String, ExecutionDetail> (); //tracks paragraphID -> Lens QueryHandle
+    new ConcurrentHashMap<String, ExecutionDetail> (); //tracks paragraphId -> Lens QueryHandle
   private static Map<LensClient, Boolean> s_clientMap =
     new ConcurrentHashMap<LensClient, Boolean>();
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/message/NewNoteRequest.java
Patch:
@@ -23,14 +23,14 @@
 import org.apache.zeppelin.interpreter.InterpreterOption;
 
 /**
- *  NewNotebookRequest rest api request message
+ *  NewNoteRequest rest api request message
  *
  */
-public class NewNotebookRequest {
+public class NewNoteRequest {
   String name;
   List<NewParagraphRequest> paragraphs;
 
-  public NewNotebookRequest (){
+  public NewNoteRequest (){
 
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -122,7 +122,7 @@ protected void deleteTestNotebook(final WebDriver driver) {
     driver.findElement(By.xpath(".//*[@id='main']//button[@ng-click='removeNote(note.id)']"))
         .sendKeys(Keys.ENTER);
     ZeppelinITUtils.sleep(1000, true);
-    driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'delete this notebook')]" +
+    driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'delete this note')]" +
         "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();
     ZeppelinITUtils.sleep(100, true);
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -182,7 +182,7 @@ public void testAngularDisplay() throws Exception {
       driver.findElement(By.xpath(".//*[@id='main']//button[@ng-click='removeNote(note.id)']"))
           .sendKeys(Keys.ENTER);
       ZeppelinITUtils.sleep(1000, true);
-      driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'delete this notebook')]" +
+      driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'delete this note')]" +
           "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();
       ZeppelinITUtils.sleep(100, true);
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -154,7 +154,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr
   @Test
   public void testImportNotebook() throws IOException {
     String msg = "{\"op\":\"IMPORT_NOTE\",\"data\":" +
-        "{\"notebook\":{\"paragraphs\": [{\"text\": \"Test " +
+        "{\"note\":{\"paragraphs\": [{\"text\": \"Test " +
         "paragraphs import\",\"config\":{},\"settings\":{}}]," +
         "\"name\": \"Test Zeppelin notebook import\",\"config\": " +
         "{}}}}";

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepo.java
Patch:
@@ -39,7 +39,7 @@ public interface NotebookRepo {
 
   /**
    * Get the notebook with the given id.
-   * @param noteId is notebook id.
+   * @param noteId is note id.
    * @param subject contains user information.
    * @return
    * @throws IOException

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/search/SearchService.java
Patch:
@@ -25,7 +25,7 @@
 import org.apache.zeppelin.notebook.Paragraph;
 
 /**
- * Search (both, indexing and query) the notebooks.
+ * Search (both, indexing and query) the notes.
  * 
  * Intended to have multiple implementation, i.e:
  *  - local Lucene (in-memory, on-disk)
@@ -34,7 +34,7 @@
 public interface SearchService {
 
   /**
-   * Full-text search in all the notebooks
+   * Full-text search in all the notes
    *
    * @param queryStr a query
    * @return A list of matching paragraphs (id, text, snippet w/ highlight)
@@ -59,7 +59,7 @@ public interface SearchService {
   public void addIndexDocs(Collection<Note> collection);
 
   /**
-   * Indexes the given notebook.
+   * Indexes the given note.
    *
    * @throws IOException If there is a low-level I/O error
    */

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -428,7 +428,7 @@ public void testCloneNote() throws IOException, CloneNotSupportedException,
     Paragraph cp = cloneNote.paragraphs.get(0);
     assertEquals(cp.getStatus(), Status.READY);
 
-    // Keep same ParagraphID
+    // Keep same ParagraphId
     assertEquals(cp.getId(), p.getId());
     assertEquals(cp.text, p.text);
     assertEquals(cp.getResult().message(), p.getResult().message());
@@ -476,7 +476,7 @@ public void testCloneNoteWithExceptionResult() throws IOException, CloneNotSuppo
     Note cloneNote = notebook.cloneNote(note.getId(), "clone note with Exception result", anonymous);
     Paragraph cp = cloneNote.paragraphs.get(0);
 
-    // Keep same ParagraphID
+    // Keep same ParagraphId
     assertEquals(cp.getId(), p.getId());
     assertEquals(cp.text, p.text);
     assertNull(cp.getResult());

File: geode/src/test/java/org/apache/zeppelin/geode/GeodeOqlInterpreterTest.java
Patch:
@@ -58,9 +58,9 @@ private static Iterator<Object> asIterator(Object... items) {
   public void testOpenCommandIndempotency() {
 
     Properties properties = new Properties();
-    properties.put(LOCATOR_HOST, DEFAULT_HOST);
-    properties.put(LOCATOR_PORT, DEFAULT_PORT);
-    properties.put(MAX_RESULT, DEFAULT_MAX_RESULT);
+    properties.put("geode.locator.host", "localhost");
+    properties.put("geode.locator.port", "10334");
+    properties.put("geode.max.result", "1000");
 
     GeodeOqlInterpreter spyGeodeOqlInterpreter = spy(new GeodeOqlInterpreter(properties));
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -202,7 +202,7 @@ public void testGroupPermission() throws Exception {
       try {
         WebElement element = pollingWait(By.xpath("//*[@id='notebook-names']//a[contains(@href, '" + noteId + "')]"),
             MAX_BROWSER_TIMEOUT_SEC);
-        collector.checkThat("Check is user has permission to view this notebook link", false,
+        collector.checkThat("Check is user has permission to view this notebook link", true,
             CoreMatchers.equalTo(element.isDisplayed()));
       } catch (Exception e) {
         //This should have failed, nothing to worry.

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -540,10 +540,10 @@ public int compare(Note note1, Note note2) {
     }
   }
 
-  public List<Note> getAllNotes(AuthenticationInfo subject) {
+  public List<Note> getAllNotes(HashSet<String> userAndRoles) {
     final Set<String> entities = Sets.newHashSet();
-    if (subject != null) {
-      entities.add(subject.getUser());
+    if (userAndRoles != null) {
+      entities.addAll(userAndRoles);
     }
 
     synchronized (notes) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -298,6 +298,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
     if (logger.isDebugEnabled()) {
       logger.debug("st:\n{}", st);
     }
+
     FormType form = getFormType();
     RemoteInterpreterProcess interpreterProcess = getInterpreterProcess();
     Client client = null;

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -89,7 +89,7 @@ public ZeppelinServer() throws Exception {
     this.heliumApplicationFactory = new HeliumApplicationFactory();
     this.schedulerFactory = new SchedulerFactory();
     this.replFactory = new InterpreterFactory(conf, notebookWsServer,
-        notebookWsServer, heliumApplicationFactory, depResolver);
+        notebookWsServer, heliumApplicationFactory, depResolver, SecurityUtils.isAuthenticated());
     this.notebookRepo = new NotebookRepoSync(conf);
     this.notebookIndex = new LuceneSearch();
     this.notebookAuthorization = NotebookAuthorization.init(conf);

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -481,7 +481,7 @@ private void setupConfForPySpark(SparkConf conf) {
 
     //Only one of py4j-0.9-src.zip and py4j-0.8.2.1-src.zip should exist
     String[] pythonLibs = new String[]{"pyspark.zip", "py4j-0.9-src.zip", "py4j-0.8.2.1-src.zip",
-      "py4j-0.10.1-src.zip"};
+      "py4j-0.10.1-src.zip", "py4j-0.10.3-src.zip"};
     ArrayList<String> pythonLibUris = new ArrayList<>();
     for (String lib : pythonLibs) {
       File libFile = new File(pysparkPath, lib);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -596,6 +596,7 @@ public InterpreterSetting createNewSetting(String name, String group,
     setting.setProperties(p);
     setting.setInterpreterGroupFactory(this);
     interpreterSettings.put(setting.getId(), setting);
+    loadInterpreterDependencies(setting);
     saveToFile();
     return setting;
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -105,6 +105,8 @@ public void testGetNotebookInfo() throws IOException {
 
     assertTrue(paragraphs.size() > 0);
     assertEquals(paragraphText, paragraphs.get(0).get("text"));
+    //
+    ZeppelinServer.notebook.removeNote(sourceNoteID, null);
   }
 
   @Test

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -135,6 +135,7 @@ public void testSaveNotebook() throws IOException, InterruptedException {
     note.setName("SaveTest");
     notebookRepo.save(note, null);
     assertEquals(note.getName(), "SaveTest");
+    notebookRepo.remove(note.getId(), null);
   }
 
   class NotebookWriter implements Runnable {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -162,6 +162,7 @@ public Response putNotePermissions(@PathParam("noteId") String noteId, String re
     AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());
     note.persist(subject);
     notebookServer.broadcastNote(note);
+    notebookServer.broadcastNoteList(subject);
     return new JsonResponse<>(Status.OK).build();
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -92,7 +92,7 @@ public ZeppelinServer() throws Exception {
         notebookWsServer, heliumApplicationFactory, depResolver);
     this.notebookRepo = new NotebookRepoSync(conf);
     this.notebookIndex = new LuceneSearch();
-    this.notebookAuthorization = new NotebookAuthorization(conf);
+    this.notebookAuthorization = NotebookAuthorization.init(conf);
     this.credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath());
     notebook = new Notebook(conf,
         notebookRepo, schedulerFactory, replFactory, notebookWsServer,

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -31,14 +31,12 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
-
 import com.google.common.base.Predicate;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.Sets;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.stream.JsonReader;
-import org.apache.commons.codec.binary.StringUtils;
 import org.quartz.CronScheduleBuilder;
 import org.quartz.CronTrigger;
 import org.quartz.JobBuilder;
@@ -484,6 +482,7 @@ public void reloadAllNotes(AuthenticationInfo subject) throws IOException {
     }
 
     List<NoteInfo> noteInfos = notebookRepo.list(subject);
+
     for (NoteInfo info : noteInfos) {
       loadNoteFromRepo(info.getId(), subject);
     }
@@ -534,7 +533,7 @@ public int compare(Note note1, Note note2) {
       return noteList;
     }
   }
-
+  
   public List<Note> getAllNotes(AuthenticationInfo subject) {
     final Set<String> entities = Sets.newHashSet();
     if (subject != null) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/helium/HeliumApplicationFactoryTest.java
Patch:
@@ -89,7 +89,7 @@ public void setUp() throws Exception {
 
     SearchService search = mock(SearchService.class);
     notebookRepo = new VFSNotebookRepo(conf);
-    NotebookAuthorization notebookAuthorization = new NotebookAuthorization(conf);
+    NotebookAuthorization notebookAuthorization = NotebookAuthorization.init(conf);
     notebook = new Notebook(
         conf,
         notebookRepo,

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -99,7 +99,7 @@ public void setUp() throws Exception {
     
     search = mock(SearchService.class);
     notebookRepoSync = new NotebookRepoSync(conf);
-    notebookAuthorization = new NotebookAuthorization(conf);
+    notebookAuthorization = NotebookAuthorization.init(conf);
     credentials = new Credentials(conf.credentialsPersist(), conf.getCredentialsPath());
     notebookSync = new Notebook(conf, notebookRepoSync, schedulerFactory, factory, this, search,
             notebookAuthorization, credentials);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -521,6 +521,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.alluxio.AlluxioInterpreter,"
         + "org.apache.zeppelin.file.HDFSFileInterpreter,"
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
+        + "org.apache.zeppelin.pig.PigInterpreter,"
+        + "org.apache.zeppelin.pig.PigQueryInterpreter,"
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
         + "org.apache.zeppelin.python.PythonInterpreter,"
         + "org.apache.zeppelin.python.PythonInterpreterPandasSql,"
@@ -543,7 +545,7 @@ public static enum ConfVars {
     ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
     ZEPPELIN_INTERPRETER_GROUP_ORDER("zeppelin.interpreter.group.order", "spark,md,angular,sh,"
         + "livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,"
-        + "scalding,jdbc,hbase,bigquery,beam"),
+        + "scalding,jdbc,hbase,bigquery,beam,pig"),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),
     // use specified notebook (id) as homescreen

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -49,7 +49,7 @@
 
 /**
  * JDBC interpreter for Zeppelin. This interpreter can also be used for accessing HAWQ,
- * GreenplumDB, MariaDB, MySQL, Postgres and Redshit.
+ * GreenplumDB, MariaDB, MySQL, Postgres and Redshift.
  *
  * <ul>
  * <li>{@code default.url} - JDBC URL to connect to.</li>

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/AbstractDependencyResolver.java
Patch:
@@ -72,7 +72,7 @@ public void addRepo(String id, String url, boolean snapshot) {
     }
   }
 
-  public void addRepo(String id, String url, boolean snapshot, Authentication auth) {
+  public void addRepo(String id, String url, boolean snapshot, Authentication auth, Proxy proxy) {
     synchronized (repos) {
       delRepo(id);
       RemoteRepository rr = new RemoteRepository(id, "default", url);
@@ -81,6 +81,7 @@ public void addRepo(String id, String url, boolean snapshot, Authentication auth
           RepositoryPolicy.UPDATE_POLICY_DAILY,
           RepositoryPolicy.CHECKSUM_POLICY_WARN));
       rr.setAuthentication(auth);
+      rr.setProxy(proxy);
       repos.add(rr);
     }
   }

File: angular/src/main/java/org/apache/zeppelin/angular/AngularInterpreter.java
Patch:
@@ -34,9 +34,6 @@
  *
  */
 public class AngularInterpreter extends Interpreter {
-  static {
-    Interpreter.register("angular", AngularInterpreter.class.getName());
-  }
 
   public AngularInterpreter(Properties property) {
     super(property);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookSocket.java
Patch:
@@ -65,7 +65,7 @@ public String getProtocol() {
     return protocol;
   }
 
-  public void send(String serializeMessage) throws IOException {
+  public synchronized void send(String serializeMessage) throws IOException {
     connection.getRemote().sendString(serializeMessage);
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookImportDeserializer.java
Patch:
@@ -35,6 +35,7 @@
 public class NotebookImportDeserializer implements JsonDeserializer<Date> {
   private static final String[] DATE_FORMATS = new String[] {
     "yyyy-MM-dd'T'HH:mm:ssZ",
+    "MMM d, yyyy h:mm:ss a",
     "MMM dd, yyyy HH:mm:ss"
   };
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1595,9 +1595,11 @@ public void onRemove(String interpreterGroupId, String name, String noteId, Stri
 
   private void getEditorSetting(NotebookSocket conn, Message fromMessage)
       throws IOException {
+    String paragraphId = (String) fromMessage.get("paragraphId");
     String replName = (String) fromMessage.get("magic");
     String noteId = getOpenNoteId(conn);
     Message resp = new Message(OP.EDITOR_SETTING);
+    resp.put("paragraphId", paragraphId);
     resp.put("editor", notebook().getInterpreterFactory().getEditorSetting(noteId, replName));
     conn.send(serializeMessage(resp));
     return;

File: markdown/src/test/java/org/apache/zeppelin/markdown/Markdown4jParserTest.java
Patch:
@@ -28,13 +28,13 @@
 
 public class Markdown4jParserTest {
 
-  MarkdownInterpreter md;
+  Markdown md;
 
   @Before
   public void setUp() throws Exception {
     Properties props = new Properties();
-    props.put(MarkdownInterpreter.MARKDOWN_PARSER_TYPE, MarkdownInterpreter.PARSER_TYPE_MARKDOWN4J);
-    md = new MarkdownInterpreter(props);
+    props.put(Markdown.MARKDOWN_PARSER_TYPE, Markdown.PARSER_TYPE_MARKDOWN4J);
+    md = new Markdown(props);
     md.open();
   }
 

File: markdown/src/test/java/org/apache/zeppelin/markdown/PegdownParserTest.java
Patch:
@@ -29,13 +29,13 @@
 
 public class PegdownParserTest {
 
-  MarkdownInterpreter md;
+  Markdown md;
 
   @Before
   public void setUp() throws Exception {
     Properties props = new Properties();
-    props.put(MarkdownInterpreter.MARKDOWN_PARSER_TYPE, MarkdownInterpreter.PARSER_TYPE_PEGDOWN);
-    md = new MarkdownInterpreter(props);
+    props.put(Markdown.MARKDOWN_PARSER_TYPE, Markdown.PARSER_TYPE_PEGDOWN);
+    md = new Markdown(props);
     md.open();
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -139,7 +139,8 @@ public static enum OP {
     SAVE_INTERPRETER_BINDINGS,    // [c-s] save interpreter bindings
                                   // @param noteID
                                   // @param selectedSettingIds
-    INTERPRETER_BINDINGS          // [s-c] interpreter bindings
+    INTERPRETER_BINDINGS,         // [s-c] interpreter bindings
+    ERROR_INFO                    // [s-c] error information to be sent
   }
 
   public OP op;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -529,15 +529,16 @@ public static enum ConfVars {
         + "org.apache.zeppelin.scalding.ScaldingInterpreter,"
         + "org.apache.zeppelin.jdbc.JDBCInterpreter,"
         + "org.apache.zeppelin.hbase.HbaseInterpreter,"
-        + "org.apache.zeppelin.bigquery.BigQueryInterpreter"),
+        + "org.apache.zeppelin.bigquery.BigQueryInterpreter,"
+        + "org.apache.zeppelin.beam.BeamInterpreter"),
     ZEPPELIN_INTERPRETER_JSON("zeppelin.interpreter.setting", "interpreter-setting.json"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
     ZEPPELIN_INTERPRETER_GROUP_ORDER("zeppelin.interpreter.group.order", "spark,md,angular,sh,"
         + "livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,"
-        + "scalding,jdbc,hbase,bigquery"),
+        + "scalding,jdbc,hbase,bigquery,beam"),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),
     // use specified notebook (id) as homescreen

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -504,11 +504,13 @@ protected InterpreterOutput createInterpreterOutput(final String noteId, final S
     return new InterpreterOutput(new InterpreterOutputListener() {
       @Override
       public void onAppend(InterpreterOutput out, byte[] line) {
+        logger.debug("Output Append:" + new String(line));
         eventClient.onInterpreterOutputAppend(noteId, paragraphId, new String(line));
       }
 
       @Override
       public void onUpdate(InterpreterOutput out, byte[] output) {
+        logger.debug("Output Update:" + new String(output));
         eventClient.onInterpreterOutputUpdate(noteId, paragraphId, new String(output));
       }
     });

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkInterpreter.java
Patch:
@@ -75,7 +75,6 @@ public InterpreterResult interpret(String line, InterpreterContext interpreterCo
                   interpreterContext,
                   "spark")
           );
-          livyHelper.initializeSpark(interpreterContext, userSessionMap);
         } catch (Exception e) {
           LOGGER.error("Exception in LivySparkInterpreter while interpret ", e);
           return new InterpreterResult(InterpreterResult.Code.ERROR, e.getMessage());

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -65,7 +65,6 @@ public InterpreterResult interpret(String line, InterpreterContext interpreterCo
                   interpreterContext,
                   "spark")
           );
-          livyHelper.initializeSpark(interpreterContext, userSessionMap);
         } catch (Exception e) {
           LOGGER.error("Exception in LivySparkSQLInterpreter while interpret ", e);
           return new InterpreterResult(InterpreterResult.Code.ERROR, e.getMessage());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterFactory;
-import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.notebook.repo.NotebookRepo;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.search.SearchService;
@@ -28,7 +27,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
-import org.mockito.Mockito;
 import org.mockito.runners.MockitoJUnitRunner;
 
 import static org.junit.Assert.*;

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -210,7 +210,7 @@ public Connection getConnection(String propertyKey, String user)
       }
     }
     if (null == connection) {
-      final Properties properties = propertiesMap.get(propertyKey);
+      final Properties properties = (Properties) propertiesMap.get(propertyKey).clone();
       logger.info(properties.getProperty(DRIVER_KEY));
       Class.forName(properties.getProperty(DRIVER_KEY));
       final String url = properties.getProperty(URL_KEY);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -338,9 +338,9 @@ public static void register(String name, String group, String className,
   @Deprecated
   public static void register(String name, String group, String className,
       boolean defaultInterpreter, Map<String, InterpreterProperty> properties) {
-    logger.error("Static initialization is deprecated. You should change it to use " +
-                     "interpreter-setting.json in your jar or " +
-                     "interpreter/{interpreter}/interpreter-setting.json");
+    logger.warn("Static initialization is deprecated for interpreter {}, You should change it " +
+                     "to use interpreter-setting.json in your jar or " +
+                     "interpreter/{interpreter}/interpreter-setting.json", name);
     register(new RegisteredInterpreter(name, group, className, defaultInterpreter, properties));
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -550,11 +550,11 @@ public boolean apply(Note input) {
       }).toSortedList(new Comparator<Note>() {
         @Override
         public int compare(Note note1, Note note2) {
-          String name1 = note1.id();
+          String name1 = note1.getId();
           if (note1.getName() != null) {
             name1 = note1.getName();
           }
-          String name2 = note2.id();
+          String name2 = note2.getId();
           if (note2.getName() != null) {
             name2 = note2.getName();
           }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -472,8 +472,7 @@ public List<Map<String, String>> generateNotebooksInfo(boolean needsReload,
         LOG.error("Fail to reload notes from repository", e);
       }
     }
-
-    List<Note> notes = notebook.getAllNotes();
+    List<Note> notes = notebook.getAllNotes(subject);
     List<Map<String, String>> notesInfo = new LinkedList<>();
     for (Note note : notes) {
       Map<String, String> info = new HashMap<>();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -476,7 +476,7 @@ public void reloadAllNotes(AuthenticationInfo subject) throws IOException {
     if (notebookRepo instanceof NotebookRepoSync) {
       NotebookRepoSync mainRepo = (NotebookRepoSync) notebookRepo;
       if (mainRepo.getRepoCount() > 1) {
-        mainRepo.sync();
+        mainRepo.sync(subject);
       }
     }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -185,7 +185,7 @@ public void testSyncUpdateMain() throws IOException {
     assertEquals(0, notebookRepoSync.get(1,
         notebookRepoSync.list(1, null).get(0).getId(), null).getParagraphs().size());
     /* apply sync */
-    notebookRepoSync.sync();
+    notebookRepoSync.sync(null);
     /* check whether added to second storage */
     assertEquals(1, notebookRepoSync.get(1,
     notebookRepoSync.list(1, null).get(0).getId(), null).getParagraphs().size());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -672,7 +672,7 @@ public void createInterpretersForNote(InterpreterSetting interpreterSetting, Str
     Interpreter interpreter;
     for (InterpreterInfo info : interpreterInfos) {
       if (option.isRemote()) {
-        if (option.isConnectExistingProcess()) {
+        if (option.isExistingProcess()) {
           interpreter =
               connectToRemoteRepl(noteId, info.getClassName(), option.getHost(), option.getPort(),
                   properties);

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -104,6 +104,7 @@ public ZeppelinServer() throws Exception {
     heliumApplicationFactory.setApplicationEventListener(notebookWsServer);
 
     notebook.addNotebookEventListener(heliumApplicationFactory);
+    notebook.addNotebookEventListener(notebookWsServer.getNotebookInformationListener());
   }
 
   public static void main(String[] args) throws InterruptedException {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -127,8 +127,8 @@ public static enum OP {
     APP_STATUS_CHANGE,      // [s-c] on app status change
 
     LIST_NOTEBOOK_JOBS,     // [c-s] get notebook job management infomations
-    LIST_UPDATE_NOTEBOOK_JOBS, // [c-s] get job management informations for until unixtime
-                               // @param unixTime
+    LIST_UPDATE_NOTEBOOK_JOBS, // [s-c] get job management informations
+    UNSUBSCRIBE_UPDATE_NOTEBOOK_JOBS, // [c-s] unsubscribe job information for job management
     GET_INTERPRETER_BINDINGS, // [c-s] get interpreter bindings
                               // @param noteID
     SAVE_INTERPRETER_BINDINGS, // [c-s] save interpreter bindings

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -994,7 +994,7 @@ private Interpreter createRemoteRepl(String interpreterPath, String noteId, Stri
         new RemoteInterpreter(property, noteId, className, conf.getInterpreterRemoteRunnerPath(),
             interpreterPath, localRepoPath, connectTimeout, maxPoolSize,
             remoteInterpreterProcessListener, appEventListener);
-    remoteInterpreter.setEnv(env);
+    remoteInterpreter.addEnv(env);
 
     return new LazyOpenInterpreter(remoteInterpreter);
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterProperty.java
Patch:
@@ -75,6 +75,7 @@ public int hashCode() {
   }
 
   public boolean equals(Object o) {
+    if (o == null) return false;
     return this.toString().equals(o.toString());
   }
 

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -81,7 +81,7 @@ public void testSimpleStatementWithSystemOutput() {
 
   @Test
   public void testWordCount() {
-    flink.interpret("val text = env.fromElements(\"To be or not to be\")", context);
+    flink.interpret("val text = benv.fromElements(\"To be or not to be\")", context);
     flink.interpret("val counts = text.flatMap { _.toLowerCase.split(\" \") }.map { (_, 1) }.groupBy(0).sum(1)", context);
     InterpreterResult result = flink.interpret("counts.print()", context);
     assertEquals(Code.SUCCESS, result.code());

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/security/JDBCSecurityImpl.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.zeppelin.jdbc.SqlCompleter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -852,7 +852,6 @@ private void handleParagraphParams(String message, Note note, Paragraph paragrap
       if (paramsForUpdating != null) {
         paragraph.settings.getParams().putAll(paramsForUpdating);
         AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());
-        note.setLastReplName(paragraph.getId());
         note.persist(subject);
       }
     }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -146,8 +146,7 @@ public void testNotebookCreateWithParagraphs() throws IOException {
     assertEquals("compare note name", expectedNoteName, newNoteName);
     assertEquals("initial paragraph check failed", 3, newNote.getParagraphs().size());
     for (Paragraph p : newNote.getParagraphs()) {
-      if (StringUtils.isEmpty(p.getText()) ||
-              p.getText().trim().equals(newNote.getLastInterpreterName())) {
+      if (StringUtils.isEmpty(p.getText())) {
         continue;
       }
       assertTrue("paragraph title check failed", p.getTitle().startsWith("title"));

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -155,7 +155,6 @@ public Note createNote(List<String> interpreterIds, AuthenticationInfo subject)
     }
     if (interpreterIds != null) {
       bindInterpretersToNote(note.getId(), interpreterIds);
-      note.putDefaultReplName();
     }
 
     notebookIndex.addIndexDoc(note);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/GitNotebookRepoTest.java
Patch:
@@ -224,7 +224,7 @@ public void getRevisionTest() throws IOException {
     Map<String, Object> config = p1.getConfig();
     config.put("enabled", true);
     p1.setConfig(config);
-    p1.setText("%md checkpoint test text");
+    p1.setText("checkpoint test text");
     notebookRepo.save(note, null);
 
     // second checkpoint
@@ -245,7 +245,7 @@ public void getRevisionTest() throws IOException {
     Paragraph p2 = note.addParagraph();
     config.put("enabled", false);
     p2.setConfig(config);
-    p2.setText("%md get revision when modified note test text");
+    p2.setText("get revision when modified note test text");
     notebookRepo.save(note, null);
     note = notebookRepo.get(TEST_NOTE_ID, null);
     int paragraphCount_3 = note.getParagraphs().size();
@@ -282,7 +282,7 @@ public void getRevisionFailTest() throws IOException {
     Map<String, Object> config = p1.getConfig();
     config.put("enabled", true);
     p1.setConfig(config);
-    p1.setText("%md get revision when modified note test text");
+    p1.setText("get revision when modified note test text");
     notebookRepo.save(note, null);
     int paragraphCount_2 = note.getParagraphs().size();
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -506,6 +506,9 @@ private boolean findDefaultInterpreter(List<InterpreterInfo> infos) {
 
   public InterpreterSetting createNewSetting(String name, String group,
       List<Dependency> dependencies, InterpreterOption option, Properties p) throws IOException {
+    if (name.indexOf(".") >= 0) {
+      throw new IOException("'.' is invalid for InterpreterSetting name.");
+    }
     InterpreterSetting setting = createFromInterpreterSettingRef(group);
     setting.setName(name);
     setting.setGroup(group);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -295,7 +295,9 @@ public void close() {
 
   @Override
   public InterpreterResult interpret(String st, InterpreterContext context) {
-    logger.debug("st: {}", st);
+    if (logger.isDebugEnabled()) {
+      logger.debug("st:\n{}", st);
+    }
     FormType form = getFormType();
     RemoteInterpreterProcess interpreterProcess = getInterpreterProcess();
     Client client = null;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -285,7 +285,9 @@ public void close(String noteId, String className) throws TException {
   @Override
   public RemoteInterpreterResult interpret(String noteId, String className, String st,
       RemoteInterpreterContext interpreterContext) throws TException {
-    logger.debug("st: {}", st);
+    if (logger.isDebugEnabled()) {
+      logger.debug("st:\n{}", st);
+    }
     Interpreter intp = getInterpreter(noteId, className);
     InterpreterContext context = convert(interpreterContext);
 

File: spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -78,7 +78,7 @@ public void open() {
       ZeppelinRContext.setSparkSession(sparkInterpreter.getSparkSession());
     }
     ZeppelinRContext.setSqlContext(sparkInterpreter.getSQLContext());
-    ZeppelinRContext.setZepplinContext(sparkInterpreter.getZeppelinContext());
+    ZeppelinRContext.setZeppelinContext(sparkInterpreter.getZeppelinContext());
 
     zeppelinR = new ZeppelinR(rCmdPath, sparkRLibPath, port, sparkVersion);
     try {

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinRContext.java
Patch:
@@ -33,7 +33,7 @@ public static void setSparkContext(SparkContext sparkContext) {
     ZeppelinRContext.sparkContext = sparkContext;
   }
 
-  public static void setZepplinContext(ZeppelinContext zeppelinContext) {
+  public static void setZeppelinContext(ZeppelinContext zeppelinContext) {
     ZeppelinRContext.zeppelinContext = zeppelinContext;
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -134,7 +134,7 @@ public void testInterpreterAutoBinding() throws IOException {
     Note note = ZeppelinServer.notebook.createNote(null);
 
     // check interpreter is binded
-    GetMethod get = httpGet("/notebook/interpreter/bind/" + note.id());
+    GetMethod get = httpGet("/notebook/interpreter/bind/" + note.getId());
     assertThat(get, isAllowed());
     get.addRequestHeader("Origin", "http://localhost");
     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(), new TypeToken<Map<String, Object>>() {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInfo.java
Patch:
@@ -36,7 +36,7 @@ public NoteInfo(String id, String name, Map<String, Object> config) {
   }
 
   public NoteInfo(Note note) {
-    id = note.id();
+    id = note.getId();
     name = note.getName();
     config = note.getConfig();
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java
Patch:
@@ -210,7 +210,7 @@ public void save(Note note, AuthenticationInfo subject) throws IOException {
     gsonBuilder.setPrettyPrinting();
     Gson gson = gsonBuilder.create();
     String json = gson.toJson(note);
-    String key = user + "/" + "notebook" + "/" + note.id() + "/" + "note.json";
+    String key = user + "/" + "notebook" + "/" + note.getId() + "/" + "note.json";
 
     File file = File.createTempFile("note", "json");
     try {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -226,7 +226,7 @@ public synchronized void save(Note note, AuthenticationInfo subject) throws IOEx
 
     FileObject rootDir = getRootDir();
 
-    FileObject noteDir = rootDir.resolveFile(note.id(), NameScope.CHILD);
+    FileObject noteDir = rootDir.resolveFile(note.getId(), NameScope.CHILD);
 
     if (!noteDir.exists()) {
       noteDir.createFolder();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java
Patch:
@@ -176,7 +176,7 @@ public void save(Note note, AuthenticationInfo subject) throws IOException {
     }
     String notebook = GSON.toJson(note);
     restApiClient.asyncPut(notebook);
-    LOG.info("ZeppelinHub REST API saving note {} ", note.id()); 
+    LOG.info("ZeppelinHub REST API saving note {} ", note.getId()); 
   }
 
   @Override

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepoTest.java
Patch:
@@ -132,7 +132,7 @@ public void testGetAllNotes() throws IOException {
   public void testGetNote() throws IOException {
     Note notebook = repo.get("AAAAA", null);
     assertThat(notebook).isNotNull();
-    assertThat(notebook.id()).isEqualTo("2A94M5J1Z");
+    assertThat(notebook.getId()).isEqualTo("2A94M5J1Z");
   }
   
   @Test

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterProperty.java
Patch:
@@ -71,7 +71,6 @@ public void setDescription(String description) {
   }
 
   public String getValue() {
-    //TODO(jongyoul): Remove SparkInterpreter's getSystemDefault method
     if (envName != null && !envName.isEmpty()) {
       String envValue = System.getenv().get(envName);
       if (envValue != null) {

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/security/JDBCSecurityImpl.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.security.UserGroupInformation;
-import org.apache.zeppelin.jdbc.SqlCompleter;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -301,7 +301,9 @@ public Object createSparkSession() {
     String execUri = System.getenv("SPARK_EXECUTOR_URI");
     conf.setAppName(getProperty("spark.app.name"));
 
-    conf.set("spark.repl.class.outputDir", outputDir.getAbsolutePath());
+    if (outputDir != null) {
+      conf.set("spark.repl.class.outputDir", outputDir.getAbsolutePath());
+    }
 
     if (execUri != null) {
       conf.set("spark.executor.uri", execUri);

File: spark/src/main/java/org/apache/zeppelin/spark/Utils.java
Patch:
@@ -89,6 +89,8 @@ static boolean isScala2_10() {
       return true;
     } catch (ClassNotFoundException e) {
       return false;
+    } catch (IncompatibleClassChangeError e) {
+      return false;
     }
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -90,6 +90,9 @@ public Response newSettings(String message) {
     try {
       NewInterpreterSettingRequest request =
           gson.fromJson(message, NewInterpreterSettingRequest.class);
+      if (request == null) {
+        return new JsonResponse<>(Status.BAD_REQUEST).build();
+      }
       Properties p = new Properties();
       p.putAll(request.getProperties());
       InterpreterSetting interpreterSetting = interpreterFactory

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -155,5 +155,6 @@ public void testInterpreterAliases() throws IOException, RepositoryException {
     }});
 
     assertEquals("className1", factory.getInterpreter("note", "test-group1").getClassName());
+    assertEquals("className1", factory.getInterpreter("note", "group1").getClassName());
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -543,6 +543,7 @@ public static enum ConfVars {
     ZEPPELIN_NOTEBOOK_AZURE_SHARE("zeppelin.notebook.azure.share", "zeppelin"),
     ZEPPELIN_NOTEBOOK_AZURE_USER("zeppelin.notebook.azure.user", "user"),
     ZEPPELIN_NOTEBOOK_STORAGE("zeppelin.notebook.storage", VFSNotebookRepo.class.getName()),
+    ZEPPELIN_NOTEBOOK_ONE_WAY_SYNC("zeppelin.notebook.one.way.sync", false),
     ZEPPELIN_INTERPRETER_REMOTE_RUNNER("zeppelin.interpreter.remoterunner",
         System.getProperty("os.name")
                 .startsWith("Windows") ? "bin/interpreter.cmd" : "bin/interpreter.sh"),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -358,14 +358,14 @@ public Revision checkpointNote(String noteId, String checkpointMessage,
     return notebookRepo.checkpoint(noteId, checkpointMessage, subject);
   }
 
-  public List<NotebookRepo.Revision> listRevisionHistory(String noteId,
+  public List<Revision> listRevisionHistory(String noteId,
       AuthenticationInfo subject) {
     return notebookRepo.revisionHistory(noteId, subject);
   }
 
-  public Note getNoteRevision(String noteId, Revision revision, AuthenticationInfo subject)
+  public Note getNoteByRevision(String noteId, String revisionId, AuthenticationInfo subject)
       throws IOException {
-    return notebookRepo.get(noteId, revision, subject);
+    return notebookRepo.get(noteId, revisionId, subject);
   }
 
   @SuppressWarnings("rawtypes")

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/AzureNotebookRepo.java
Patch:
@@ -217,7 +217,7 @@ public Revision checkpoint(String noteId, String checkpointMsg, AuthenticationIn
   }
 
   @Override
-  public Note get(String noteId, Revision rev, AuthenticationInfo subject) throws IOException {
+  public Note get(String noteId, String revId, AuthenticationInfo subject) throws IOException {
     // Auto-generated method stub
     return null;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/GitNotebookRepo.java
Patch:
@@ -108,7 +108,7 @@ public Revision checkpoint(String pattern, String commitMessage, AuthenticationI
    * 4. apply stash on top and remove it
    */
   @Override
-  public synchronized Note get(String noteId, Revision rev, AuthenticationInfo subject)
+  public synchronized Note get(String noteId, String revId, AuthenticationInfo subject)
       throws IOException {
     Note note = null;
     RevCommit stash = null;
@@ -123,7 +123,7 @@ public synchronized Note get(String noteId, Revision rev, AuthenticationInfo sub
       }
       ObjectId head = git.getRepository().resolve(Constants.HEAD);
       // checkout to target revision
-      git.checkout().setStartPoint(rev.id).addPath(noteId).call();
+      git.checkout().setStartPoint(revId).addPath(noteId).call();
       // get the note
       note = super.get(noteId, subject);
       // checkout back to head
@@ -137,7 +137,7 @@ public synchronized Note get(String noteId, Revision rev, AuthenticationInfo sub
             stashes.size());
       }
     } catch (GitAPIException e) {
-      LOG.error("Failed to return note from revision \"{}\"", rev.message, e);
+      LOG.error("Failed to return note from revision \"{}\"", revId, e);
     }
     return note;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepo.java
Patch:
@@ -89,7 +89,7 @@ public interface NotebookRepo {
    * @return a Notebook
    * @throws IOException
    */
-  @ZeppelinApi public Note get(String noteId, Revision rev, AuthenticationInfo subject)
+  @ZeppelinApi public Note get(String noteId, String revId, AuthenticationInfo subject)
       throws IOException;
 
   /**

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java
Patch:
@@ -355,12 +355,12 @@ public Revision checkpoint(String noteId, String checkpointMsg, AuthenticationIn
   }
 
   @Override
-  public Note get(String noteId, Revision rev, AuthenticationInfo subject) {
+  public Note get(String noteId, String revId, AuthenticationInfo subject) {
     Note revisionNote = null;
     try {
-      revisionNote = getRepo(0).get(noteId, rev, subject);
+      revisionNote = getRepo(0).get(noteId, revId, subject);
     } catch (IOException e) {
-      LOG.error("Failed to get revision {} of note {}", rev.id, noteId, e);
+      LOG.error("Failed to get revision {} of note {}", revId, noteId, e);
     }
     return revisionNote;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java
Patch:
@@ -260,7 +260,7 @@ public Revision checkpoint(String noteId, String checkpointMsg, AuthenticationIn
   }
 
   @Override
-  public Note get(String noteId, Revision rev, AuthenticationInfo subject) throws IOException {
+  public Note get(String noteId, String revId, AuthenticationInfo subject) throws IOException {
     // Auto-generated method stub
     return null;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -274,7 +274,7 @@ public Revision checkpoint(String noteId, String checkpointMsg, AuthenticationIn
   }
 
   @Override
-  public Note get(String noteId, Revision rev, AuthenticationInfo subject) throws IOException {
+  public Note get(String noteId, String revId, AuthenticationInfo subject) throws IOException {
     // Auto-generated method stub
     return null;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java
Patch:
@@ -196,7 +196,7 @@ public Revision checkpoint(String noteId, String checkpointMsg, AuthenticationIn
   }
 
   @Override
-  public Note get(String noteId, Revision rev, AuthenticationInfo subject) throws IOException {
+  public Note get(String noteId, String revId, AuthenticationInfo subject) throws IOException {
     // Auto-generated method stub
     return null;
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -124,7 +124,7 @@ private void logoutUser(String userName) {
         userName + "')]")).click();
     ZeppelinITUtils.sleep(500, false);
     driver.findElement(By.xpath("//div[contains(@class, 'navbar-collapse')]//li[contains(.,'" +
-        userName + "')]//a[@ng-click='logout()']")).click();
+        userName + "')]//a[@ng-click='navbar.logout()']")).click();
     ZeppelinITUtils.sleep(5000, false);
   }
 

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -495,7 +495,8 @@ public int getProgress(InterpreterContext context) {
   public Scheduler getScheduler() {
     String schedulerName = JDBCInterpreter.class.getName() + this.hashCode();
     return isConcurrentExecution() ?
-            SchedulerFactory.singleton().createOrGetParallelScheduler(schedulerName, 10)
+            SchedulerFactory.singleton().createOrGetParallelScheduler(schedulerName,
+                getMaxConcurrentConnection())
             : SchedulerFactory.singleton().createOrGetFIFOScheduler(schedulerName);
   }
 

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -528,8 +528,8 @@ public void open() {
     if (getProperty("master").equals("yarn-client")) {
       System.setProperty("SPARK_YARN_MODE", "true");
     }
-    if (getProperty().contains("spark.yarn.keytab") &&
-            getProperty().contains("spark.yarn.principal")) {
+    if (getProperty().containsKey("spark.yarn.keytab") &&
+            getProperty().containsKey("spark.yarn.principal")) {
       try {
         String keytab = getProperty().getProperty("spark.yarn.keytab");
         String principal = getProperty().getProperty("spark.yarn.principal");

File: zeppelin-server/src/main/java/org/apache/zeppelin/types/InterpreterSettingsList.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.rest.message;
+package org.apache.zeppelin.types;
 
 import java.util.List;
 
@@ -24,13 +24,13 @@
 /**
  * InterpreterSetting information for binding
  */
-public class InterpreterSettingListForNoteBind {
+public class InterpreterSettingsList {
   private String id;
   private String name;
   private boolean selected;
   private List<InterpreterInfo> interpreters;
 
-  public InterpreterSettingListForNoteBind(String id, String name,
+  public InterpreterSettingsList(String id, String name,
       List<InterpreterInfo> interpreters, boolean selected) {
     this.id = id;
     this.name = name;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/SecurityRestApiTest.java
Patch:
@@ -69,7 +69,7 @@ public void testGetUserList() throws IOException {
     get.addRequestHeader("Origin", "http://localhost");
     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(),
         new TypeToken<Map<String, Object>>(){}.getType());
-    List<String> userList = (List<String>)  resp.get("body");
+    List<String> userList = (List) ((Map) resp.get("body")).get("users");
     collector.checkThat("Search result size", userList.size(),
         CoreMatchers.equalTo(1));
     collector.checkThat("Search result contains admin", userList.contains("admin"),
@@ -80,7 +80,7 @@ public void testGetUserList() throws IOException {
     notUser.addRequestHeader("Origin", "http://localhost");
     Map<String, Object> notUserResp = gson.fromJson(notUser.getResponseBodyAsString(),
         new TypeToken<Map<String, Object>>(){}.getType());
-    List<String> emptyUserList = (List<String>)  notUserResp.get("body");
+    List<String> emptyUserList = (List) ((Map) notUserResp.get("body")).get("users");
     collector.checkThat("Search result size", emptyUserList.size(),
         CoreMatchers.equalTo(0));
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/ZeppelinHubRepo.java
Patch:
@@ -40,7 +40,7 @@
  * ZeppelinHub repo class.
  */
 public class ZeppelinHubRepo implements NotebookRepo {
-  private static final Logger LOG = LoggerFactory.getLogger(ZeppelinhubRestApiHandler.class);
+  private static final Logger LOG = LoggerFactory.getLogger(ZeppelinHubRepo.class);
   private static final String DEFAULT_SERVER = "https://www.zeppelinhub.com";
   static final String ZEPPELIN_CONF_PROP_NAME_SERVER = "zeppelinhub.api.address";
   static final String ZEPPELIN_CONF_PROP_NAME_TOKEN = "zeppelinhub.api.token";

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -179,7 +179,7 @@ private void createGatewayServerAndStartScript() {
     cmd.addArgument(Integer.toString(port), false);
     cmd.addArgument(Integer.toString(getSparkInterpreter().getSparkVersion().toNumber()), false);
     executor = new DefaultExecutor();
-    outputStream = new SparkOutputStream();
+    outputStream = new SparkOutputStream(logger);
     PipedOutputStream ps = new PipedOutputStream();
     in = null;
     try {

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -124,7 +124,7 @@ public class SparkInterpreter extends Interpreter {
 
   public SparkInterpreter(Properties property) {
     super(property);
-    out = new SparkOutputStream();
+    out = new SparkOutputStream(logger);
   }
 
   public SparkInterpreter(Properties property, SparkContext sc) {

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java
Patch:
@@ -143,7 +143,7 @@ public void open() throws IOException {
     cmd.addArgument(Integer.toString(sparkVersion.toNumber()));
 
     executor = new DefaultExecutor();
-    outputStream = new SparkOutputStream();
+    outputStream = new SparkOutputStream(logger);
 
     input = new PipedOutputStream();
     PipedInputStream in = new PipedInputStream(input);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -518,15 +518,16 @@ public static enum ConfVars {
         + "org.apache.zeppelin.elasticsearch.ElasticsearchInterpreter,"
         + "org.apache.zeppelin.scalding.ScaldingInterpreter,"
         + "org.apache.zeppelin.jdbc.JDBCInterpreter,"
-        + "org.apache.zeppelin.hbase.HbaseInterpreter"),
+        + "org.apache.zeppelin.hbase.HbaseInterpreter,"
+        + "org.apache.zeppelin.bigquery.BigQueryInterpreter"),
     ZEPPELIN_INTERPRETER_JSON("zeppelin.interpreter.setting", "interpreter-setting.json"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
     ZEPPELIN_INTERPRETER_GROUP_ORDER("zeppelin.interpreter.group.order", "spark,md,angular,sh,"
         + "livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,"
-        + "scalding,jdbc,hbase"),
+        + "scalding,jdbc,hbase,bigquery"),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),
     // use specified notebook (id) as homescreen

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -171,6 +171,8 @@ protected static void startUp() throws Exception {
 
         String sparkHome = getSparkHome();
         if (sparkHome != null) {
+          sparkIntpSetting.getProperties().setProperty("master", "spark://" + getHostname() + ":7071");
+          sparkIntpSetting.getProperties().setProperty("spark.cores.max", "2");
           // set spark home for pyspark
           sparkIntpSetting.getProperties().setProperty("spark.home", sparkHome);
           pySpark = true;
@@ -192,7 +194,7 @@ private static String getHostname() {
   }
 
   private static String getSparkHome() {
-    String sparkHome = getSparkHomeRecursively(new File(System.getProperty("user.dir")));
+    String sparkHome = getSparkHomeRecursively(new File(System.getProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName())));
     System.out.println("SPARK HOME detected " + sparkHome);
     return sparkHome;
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -508,7 +508,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
         + "org.apache.zeppelin.python.PythonInterpreter,"
-        + "org.apache.zeppelin.python.PythonPandasSqlInterpreter,"
+        + "org.apache.zeppelin.python.PythonInterpreterPandasSql,"
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteSqlInterpreter,"
         + "org.apache.zeppelin.lens.LensInterpreter,"

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -120,7 +120,7 @@ public Response updateSetting(String message, @PathParam("settingId") String set
       logger.error("Exception in InterpreterRestApi while updateSetting ", e);
       return new JsonResponse<>(Status.NOT_FOUND, e.getMessage(), ExceptionUtils.getStackTrace(e))
           .build();
-    } catch (IOException | RepositoryException e) {
+    } catch (IOException e) {
       logger.error("Exception in InterpreterRestApi while updateSetting ", e);
       return new JsonResponse<>(Status.INTERNAL_SERVER_ERROR, e.getMessage(),
           ExceptionUtils.getStackTrace(e)).build();

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java
Patch:
@@ -31,7 +31,6 @@
 import org.apache.spark.SparkContext;
 import org.apache.spark.sql.SQLContext;
 import org.apache.spark.sql.catalyst.expressions.Attribute;
-import org.apache.spark.sql.hive.HiveContext;
 import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.AngularObjectRegistry;
@@ -70,7 +69,6 @@ public ZeppelinContext(SparkContext sc, SQLContext sql,
 
   public SparkContext sc;
   public SQLContext sqlContext;
-  public HiveContext hiveContext;
   private GUI gui;
 
   @ZeppelinApi

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -114,6 +114,9 @@ public static enum OP {
     CHECKPOINT_NOTEBOOK,    // [c-s] checkpoint notebook to storage repository
                             // @param noteId
                             // @param checkpointName
+
+    LIST_REVISION_HISTORY,  // [c-s] list revision history of the notebook
+                            // @param noteId
     NOTE_REVISION,          // [c-s] get certain revision of note
                             // @param noteId
                             // @param revisionId

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -114,6 +114,9 @@ public static enum OP {
     CHECKPOINT_NOTEBOOK,    // [c-s] checkpoint notebook to storage repository
                             // @param noteId
                             // @param checkpointName
+    NOTE_REVISION,          // [c-s] get certain revision of note
+                            // @param noteId
+                            // @param revisionId
 
     APP_APPEND_OUTPUT,      // [s-c] append output
     APP_UPDATE_OUTPUT,      // [s-c] update (replace) output

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -494,6 +494,8 @@ private void sendNote(NotebookSocket conn, HashSet<String> userAndRoles, Noteboo
       addConnectionToNote(note.id(), conn);
       conn.send(serializeMessage(new Message(OP.NOTE).put("note", note)));
       sendAllAngularObjects(note, conn);
+    } else {
+      conn.send(serializeMessage(new Message(OP.NOTE).put("note", null)));
     }
   }
 

File: markdown/src/test/java/org/apache/zeppelin/markdown/MarkdownTest.java
Patch:
@@ -43,7 +43,6 @@ public void test() {
 		md.open();
 		InterpreterResult result = md.interpret("This is ~~deleted~~ text", null);
 		assertEquals("<p>This is <s>deleted</s> text</p>\n", result.message());
-		System.out.println(MarkdownTest.class.getName());
 	}
 
 }

File: livy/src/main/java/org/apache/zeppelin/livy/LivyHelper.java
Patch:
@@ -348,6 +348,7 @@ protected String executeHTTP(String targetURL, String method, String jsonData, S
     RestTemplate restTemplate = getRestTemplate();
     HttpHeaders headers = new HttpHeaders();
     headers.add("Content-Type", "application/json");
+    headers.add("X-Requested-By", "zeppelin");
     ResponseEntity<String> response = null;
     if (method.equals("POST")) {
       HttpEntity<String> entity = new HttpEntity<String>(jsonData, headers);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java
Patch:
@@ -445,7 +445,8 @@ public void onUnbindInterpreter(Note note, InterpreterSetting setting) {
       Interpreter currentInterpreter = p.getCurrentRepl();
       List<InterpreterInfo> infos = setting.getInterpreterInfos();
       for (InterpreterInfo info : infos) {
-        if (info.getClassName().equals(currentInterpreter.getClassName())) {
+        if (currentInterpreter != null &&
+            info.getClassName().equals(currentInterpreter.getClassName())) {
           onParagraphRemove(p);
           break;
         }

File: zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -150,8 +150,10 @@ private static void downloadFireBug(int firefoxVersion, String tempPath) {
       firebugUrlString = "http://getfirebug.com/releases/firebug/1.11/firebug-1.11.4.xpi";
     else if (firefoxVersion >= 23 && firefoxVersion < 30)
       firebugUrlString = "http://getfirebug.com/releases/firebug/1.12/firebug-1.12.8.xpi";
-    else if (firefoxVersion >= 30)
+    else if (firefoxVersion >= 30 && firefoxVersion < 33)
       firebugUrlString = "http://getfirebug.com/releases/firebug/2.0/firebug-2.0.7.xpi";
+    else if (firefoxVersion >= 33)
+      firebugUrlString = "http://getfirebug.com/releases/firebug/2.0/firebug-2.0.17.xpi";
 
 
     LOG.info("firebug version: " + firefoxVersion + ", will be downloaded to " + tempPath);

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.apache.commons.httpclient.methods.GetMethod;
 import org.apache.commons.httpclient.methods.PostMethod;
 import org.apache.commons.httpclient.methods.PutMethod;
-import org.apache.commons.lang3.StringUtils;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.Paragraph;
@@ -69,7 +68,7 @@ public void getAvailableInterpreters() throws IOException {
     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(), new TypeToken<Map<String, Object>>() {
     }.getType());
     Map<String, Object> body = (Map<String, Object>) resp.get("body");
-    assertEquals(ZeppelinServer.notebook.getInterpreterFactory().getRegisteredInterpreterList().size(), body.size());
+    assertEquals(ZeppelinServer.notebook.getInterpreterFactory().getAvailableInterpreterSettings().size(), body.size());
     get.releaseConnection();
   }
 
@@ -162,7 +161,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
     for (InterpreterSetting setting : ZeppelinServer.notebook.getInterpreterFactory().getInterpreterSettings(note.getId())) {
       if (setting.getName().equals("md")) {
         // Call Restart Interpreter REST API
-        PutMethod put = httpPut("/interpreter/setting/restart/" + setting.id(), "");
+        PutMethod put = httpPut("/interpreter/setting/restart/" + setting.getId(), "");
         assertThat("test interpreter restart:", put, isAllowed());
         put.releaseConnection();
         break;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/helium/HeliumApplicationFactory.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.thrift.TException;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
+import org.apache.zeppelin.interpreter.InterpreterInfo;
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
@@ -442,8 +443,8 @@ public void onNoteCreate(Note note) {
   public void onUnbindInterpreter(Note note, InterpreterSetting setting) {
     for (Paragraph p : note.getParagraphs()) {
       Interpreter currentInterpreter = p.getCurrentRepl();
-      List<InterpreterSetting.InterpreterInfo> infos = setting.getInterpreterInfos();
-      for (InterpreterSetting.InterpreterInfo info : infos) {
+      List<InterpreterInfo> infos = setting.getInterpreterInfos();
+      for (InterpreterInfo info : infos) {
         if (info.getClassName().equals(currentInterpreter.getClassName())) {
           onParagraphRemove(p);
           break;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteTest.java
Patch:
@@ -118,7 +118,7 @@ public void putDefaultReplNameIfInterpreterSettingAbsent() {
   @Test
   public void putDefaultReplNameIfInterpreterSettingPresent() {
     InterpreterSetting interpreterSetting = Mockito.mock(InterpreterSetting.class);
-    when(interpreterSetting.getGroup()).thenReturn("spark");
+    when(interpreterSetting.getName()).thenReturn("spark");
     when(interpreterFactory.getDefaultInterpreterSetting(anyString()))
             .thenReturn(interpreterSetting);
 
@@ -132,7 +132,7 @@ public void putDefaultReplNameIfInterpreterSettingPresent() {
   @Test
   public void addParagraphWithLastReplName() {
     InterpreterSetting interpreterSetting = Mockito.mock(InterpreterSetting.class);
-    when(interpreterSetting.getGroup()).thenReturn("spark");
+    when(interpreterSetting.getName()).thenReturn("spark");
     when(interpreterFactory.getDefaultInterpreterSetting(anyString()))
             .thenReturn(interpreterSetting);
 
@@ -147,7 +147,7 @@ public void addParagraphWithLastReplName() {
   @Test
   public void insertParagraphWithLastReplName() {
     InterpreterSetting interpreterSetting = Mockito.mock(InterpreterSetting.class);
-    when(interpreterSetting.getGroup()).thenReturn("spark");
+    when(interpreterSetting.getName()).thenReturn("spark");
     when(interpreterFactory.getDefaultInterpreterSetting(anyString()))
             .thenReturn(interpreterSetting);
 

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterTest.java
Patch:
@@ -187,7 +187,7 @@ private boolean tryToConnect(Socket s, Integer port) {
       s.connect(sa, 10000);
       connected = true;
     } catch (IOException e) {
-      LOG.error("Can't open connection to " + sa, e);
+      //LOG.warn("Can't open connection to " + sa, e);
     }
     return connected;
   }

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterWithPythonInstalledTest.java
Patch:
@@ -36,7 +36,7 @@
  *
  * or
  * <code>
- * mvn -Dpython.test.exclude='' test -pl python
+ * mvn -Dpython.test.exclude='' test -pl python -am
  * </code>
  */
 public class PythonInterpreterWithPythonInstalledTest {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -508,6 +508,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
         + "org.apache.zeppelin.python.PythonInterpreter,"
+        + "org.apache.zeppelin.python.PythonPandasSqlInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteSqlInterpreter,"
         + "org.apache.zeppelin.lens.LensInterpreter,"

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -48,8 +48,6 @@
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterException;
-import org.apache.zeppelin.interpreter.InterpreterGroup;
-import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.LazyOpenInterpreter;

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -27,9 +27,7 @@
 import org.apache.spark.sql.SQLContext;
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
-import org.apache.zeppelin.interpreter.InterpreterGroup;
 import org.apache.zeppelin.interpreter.InterpreterException;
-import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.LazyOpenInterpreter;

File: spark/src/test/java/org/apache/zeppelin/spark/dep/SparkDependencyResolverTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import static org.junit.Assert.assertEquals;
 
-import org.apache.zeppelin.spark.dep.SparkDependencyResolver;
 import org.junit.Test;
 
 public class SparkDependencyResolverTest {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -168,7 +168,7 @@ public boolean accept(Path entry) throws IOException {
                 cleanCl.put(interpreterDirString, ccl);
               }
             }
-          } catch (ClassNotFoundException e) {
+          } catch (Throwable t) {
             // nothing to do
           }
         }

File: jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java
Patch:
@@ -364,7 +364,9 @@ private InterpreterResult executeSql(String propertyKey, String sql,
 
     } catch (Exception e) {
       logger.error("Cannot run " + sql, e);
-      StringBuilder stringBuilder = new StringBuilder(e.getClass().toString()).append("\n");
+      StringBuilder stringBuilder = new StringBuilder();
+      stringBuilder.append(e.getMessage()).append("\n");
+      stringBuilder.append(e.getClass().toString()).append("\n");
       stringBuilder.append(StringUtils.join(e.getStackTrace(), "\n"));
       return new InterpreterResult(Code.ERROR, stringBuilder.toString());
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -605,7 +605,7 @@ public List<Map<String, Object>> getJobListforNotebook(boolean needsReload,
 
       // set notebook Name
       String notebookName = note.getName();
-      if (notebookName != null) {
+      if (notebookName != null && !notebookName.equals("")) {
         info.put("notebookName", note.getName());
       } else {
         info.put("notebookName", "Note " + note.id());
@@ -635,9 +635,9 @@ public List<Map<String, Object>> getJobListforNotebook(boolean needsReload,
 
         // is update notebook for last server update time.
         if (lastRunningUnixTime > lastUpdateServerUnixTime) {
-          paragraphsInfo.add(paragraphItem);
           isUpdateNotebook = true;
         }
+        paragraphsInfo.add(paragraphItem);
       }
 
       // set interpreter bind type

File: alluxio/src/main/java/org/apache/zeppelin/alluxio/AlluxioInterpreter.java
Patch:
@@ -181,10 +181,11 @@ public List<InterpreterCompletion> completion(String buf, int cursor) {
     if (words.length > 0) {
       lastWord = words[ words.length - 1 ];
     }
-    ArrayList voices = new ArrayList<>();
+    
+    List<InterpreterCompletion>  voices = new LinkedList<>();
     for (String command : keywords) {
       if (command.startsWith(lastWord)) {
-        voices.add(command);
+        voices.add(new InterpreterCompletion(command, command));
       }
     }
     return voices;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/zeppelinhub/websocket/ZeppelinClient.java
Patch:
@@ -90,6 +90,8 @@ private WebSocketClient createNewWebsocketClient() {
     SslContextFactory sslContextFactory = new SslContextFactory();
     WebSocketClient client = new WebSocketClient(sslContextFactory);
     client.setMaxIdleTimeout(5 * min * 1000);
+    client.setMaxTextMessageBufferSize(Client.getMaxNoteSize());
+    client.getPolicy().setMaxTextMessageSize(Client.getMaxNoteSize());
     //TODO(khalid): other client settings
     return client;
   }

File: postgresql/src/test/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreterTest.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.Properties;
 
 import org.apache.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -254,7 +255,8 @@ public void testExplainQueryWithSpecialCharachters() throws SQLException {
   public void testAutoCompletion() throws SQLException {
     psqlInterpreter.open();
     assertEquals(1, psqlInterpreter.completion("SEL", 0).size());
-    assertEquals("SELECT ", psqlInterpreter.completion("SEL", 0).iterator().next());
+    InterpreterCompletion selectCompletion = new InterpreterCompletion("SELECT ", "SELECT ");
+    assertEquals(selectCompletion, psqlInterpreter.completion("SEL", 0).iterator().next());
     assertEquals(0, psqlInterpreter.completion("SEL", 100).size());
   }
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -40,7 +40,7 @@
  * Please see,
  * https://zeppelin.apache.org/docs/latest/development/writingzeppelininterpreter.html
  *
- * open(), close(), interpreter() is three the most important method you need to implement.
+ * open(), close(), interpret() is three the most important method you need to implement.
  * cancel(), getProgress(), completion() is good to have
  * getFormType(), getScheduler() determine Zeppelin's behavior
  *

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.rules.ErrorCollector;
 import org.openqa.selenium.By;
 import org.openqa.selenium.Keys;
+import org.openqa.selenium.StaleElementReferenceException;
 import org.openqa.selenium.TimeoutException;
 import org.openqa.selenium.WebElement;
 import org.slf4j.Logger;
@@ -218,7 +219,7 @@ public void testSparkInterpreterDependencyLoading() throws Exception {
         clickAndWait(By.xpath("//div[@class='modal-dialog'][contains(.,'Do you want to " +
             "update this interpreter and restart with new settings?')]//" +
             "div[@class='bootstrap-dialog-close-button']/button"));
-      } catch (TimeoutException e) {
+      } catch (TimeoutException | StaleElementReferenceException e) {
         //Modal dialog got closed earlier than expected nothing to worry.
       }
 

File: spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.spark.SparkConf;
 import org.apache.spark.SparkContext;
 import org.apache.zeppelin.display.AngularObjectRegistry;
+import org.apache.zeppelin.resource.LocalResourcePool;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.display.GUI;
 import org.apache.zeppelin.interpreter.*;
@@ -95,7 +96,7 @@ public void setUp() throws Exception {
         new HashMap<String, Object>(),
         new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
-        null,
+        new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(),
         new InterpreterOutput(new InterpreterOutputListener() {
           @Override

File: spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.Properties;
 
 import org.apache.zeppelin.display.AngularObjectRegistry;
+import org.apache.zeppelin.resource.LocalResourcePool;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.display.GUI;
 import org.apache.zeppelin.interpreter.*;
@@ -77,7 +78,7 @@ public void setUp() throws Exception {
     context = new InterpreterContext("note", "id", "title", "text", new AuthenticationInfo(),
         new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
-        null,
+        new LocalResourcePool("id"),
         new LinkedList<InterpreterContextRunner>(), new InterpreterOutput(new InterpreterOutputListener() {
       @Override
       public void onAppend(InterpreterOutput out, byte[] line) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterGroup.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.log4j.Logger;
 import org.apache.zeppelin.display.AngularObjectRegistry;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
-import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;
 import org.apache.zeppelin.resource.ResourcePool;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectRegistry.java
Patch:
@@ -23,9 +23,7 @@
 import org.apache.zeppelin.display.AngularObject;
 import org.apache.zeppelin.display.AngularObjectRegistry;
 import org.apache.zeppelin.display.AngularObjectRegistryListener;
-import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
-import org.apache.zeppelin.interpreter.WrappedInterpreter;
 import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService.Client;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -96,7 +94,7 @@ public AngularObject addAndNotifyRemoteProcess(String name, Object o, String not
   public AngularObject removeAndNotifyRemoteProcess(String name, String noteId, String
           paragraphId) {
     RemoteInterpreterProcess remoteInterpreterProcess = getRemoteInterpreterProcess();
-    if (!remoteInterpreterProcess.isRunning()) {
+    if (remoteInterpreterProcess == null || !remoteInterpreterProcess.isRunning()) {
       return super.remove(name, noteId, paragraphId);
     }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolUtils.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.google.gson.Gson;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
 import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService;
 import org.slf4j.Logger;
@@ -134,3 +135,4 @@ public static void removeResourcesBelongsToParagraph(String noteId, String parag
     }
   }
 }
+

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/WellKnownResourceName.java
Patch:
@@ -20,7 +20,8 @@
  * Well known resource names in ResourcePool
  */
 public enum WellKnownResourceName {
-  ParagraphResult("zeppelin.paragraph.result");     // paragraph run result
+  ZeppelinReplResult("zeppelin.repl.result"),                 // last object of repl
+  ZeppelinTableResult("zeppelin.paragraph.result.table");     // paragraph run result
 
   String name;
   WellKnownResourceName(String name) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java
Patch:
@@ -20,6 +20,7 @@
 import org.apache.thrift.TException;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.remote.RemoteInterpreterManagedProcess;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess;
 import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterService.Client;
 import org.apache.zeppelin.scheduler.Job.Status;
@@ -49,8 +50,8 @@ public class RemoteScheduler implements Scheduler {
   private RemoteInterpreterProcess interpreterProcess;
 
   public RemoteScheduler(String name, ExecutorService executor, String noteId,
-      RemoteInterpreterProcess interpreterProcess, SchedulerListener listener,
-      int maxConcurrency) {
+                         RemoteInterpreterProcess interpreterProcess, SchedulerListener listener,
+                         int maxConcurrency) {
     this.name = name;
     this.executor = executor;
     this.listener = listener;

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -73,6 +73,7 @@ public void setUp() throws Exception {
         "fakeRepo",
         env,
         10 * 1000,
+        null,
         null
     );
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java
Patch:
@@ -70,7 +70,8 @@ private RemoteInterpreter createMockInterpreter() {
         "fakeRepo",
         env,
         10 * 1000,
-        this);
+        this,
+        null);
 
     intpGroup.get("note").add(intp);
     intp.setInterpreterGroup(intpGroup);

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -165,7 +165,7 @@ public void testSqlSpark() throws Exception {
       }
 
       WebElement paragraph1Result = driver.findElement(By.xpath(
-          getParagraphXPath(1) + "//div[@class=\"tableDisplay\"]//table"));
+          getParagraphXPath(1) + "//div[@class=\"tableDisplay\"]/div/div/div/div/div/div[1]"));
       collector.checkThat("Paragraph from SparkParagraphIT of testSqlSpark result: ",
           paragraph1Result.getText().toString(), CoreMatchers.equalTo("age\njob\nmarital\neducation\nbalance\n" +
           "30 unemployed married primary 1,787"));

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -251,7 +251,7 @@ protected static boolean checkIfServerIsRunning() {
       request = httpGet("/");
       isRunning = request.getStatusCode() == 200;
     } catch (IOException e) {
-      LOG.error("Exception in AbstractTestRestApi while checkIfServerIsRunning ", e);
+      LOG.error("AbstractTestRestApi.checkIfServerIsRunning() fails .. ZeppelinServer is not running");
       isRunning = false;
     } finally {
       if (request != null) {

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java
Patch:
@@ -60,7 +60,7 @@ public void setUp() throws Exception {
     MockInterpreter2.register("mock2", "group2", "org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 
     depResolver = new DependencyResolver(tmpDir.getAbsolutePath() + "/local-repo");
-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, depResolver);
+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver);
   }
 
   @After

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -94,7 +94,7 @@ public void setUp() throws Exception {
     MockInterpreter2.register("mock2", "org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 
     depResolver = new DependencyResolver(mainZepDir.getAbsolutePath() + "/local-repo");
-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, depResolver);
+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver);
     
     search = mock(SearchService.class);
     notebookRepoSync = new NotebookRepoSync(conf);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -76,7 +76,7 @@ public void setUp() throws Exception {
 
     this.schedulerFactory = new SchedulerFactory();
     depResolver = new DependencyResolver(mainZepDir.getAbsolutePath() + "/local-repo");
-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, depResolver);
+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null, depResolver);
 
     SearchService search = mock(SearchService.class);
     notebookRepo = new VFSNotebookRepo(conf);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java
Patch:
@@ -284,7 +284,7 @@ private Paragraph addParagraphWithTextAndTitle(Note note, String text, String ti
   }
 
   private Note newNote(String name) {
-    Note note = new Note(notebookRepoMock, interpreterFactory, null, notebookIndex, null);
+    Note note = new Note(notebookRepoMock, interpreterFactory, null, notebookIndex, null, null);
     note.setName(name);
     return note;
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -77,6 +77,7 @@ public static void startUp() {
     }
 
     try {
+      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(), "../");
       ZeppelinConfiguration conf = ZeppelinConfiguration.create();
       File file = new File(conf.getShiroPath());
       originalShiro = StringUtils.join(FileUtils.readLines(file, "UTF-8"), "\n");

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.commons.httpclient.methods.PostMethod;
 import org.apache.commons.httpclient.methods.PutMethod;
 import org.apache.commons.httpclient.methods.RequestEntity;
+import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.dep.Dependency;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
 import org.apache.zeppelin.interpreter.InterpreterOption;
@@ -98,6 +99,8 @@ public void run() {
 
   protected static void startUp() throws Exception {
     if (!wasRunning) {
+      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HOME.getVarName(), "../");
+      System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_WAR.getVarName(), "../zeppelin-web/dist");
       LOG.info("Staring test Zeppelin up...");
       executor = Executors.newSingleThreadExecutor();
       executor.submit(server);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -466,7 +466,7 @@ public interface ConfigurationKeyPredicate {
    * Wrapper class.
    */
   public static enum ConfVars {
-    ZEPPELIN_HOME("zeppelin.home", "../"),
+    ZEPPELIN_HOME("zeppelin.home", "./"),
     ZEPPELIN_ADDR("zeppelin.server.addr", "0.0.0.0"),
     ZEPPELIN_PORT("zeppelin.server.port", 8080),
     ZEPPELIN_SERVER_CONTEXT_PATH("zeppelin.server.context.path", "/"),
@@ -479,7 +479,7 @@ public static enum ConfVars {
     ZEPPELIN_SSL_TRUSTSTORE_PATH("zeppelin.ssl.truststore.path", null),
     ZEPPELIN_SSL_TRUSTSTORE_TYPE("zeppelin.ssl.truststore.type", null),
     ZEPPELIN_SSL_TRUSTSTORE_PASSWORD("zeppelin.ssl.truststore.password", null),
-    ZEPPELIN_WAR("zeppelin.war", "../zeppelin-web/dist"),
+    ZEPPELIN_WAR("zeppelin.war", "zeppelin-web/dist"),
     ZEPPELIN_WAR_TEMPDIR("zeppelin.war.tempdir", "webapps"),
     ZEPPELIN_INTERPRETERS("zeppelin.interpreters", "org.apache.zeppelin.spark.SparkInterpreter,"
         + "org.apache.zeppelin.spark.PySparkInterpreter,"

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1075,7 +1075,8 @@ private void runParagraph(NotebookSocket conn, HashSet<String> userAndRoles, Not
     boolean isTheLastParagraph = note.getLastParagraph().getId()
         .equals(p.getId());
     note.setLastReplName(paragraphId);
-    if (!Strings.isNullOrEmpty(text) && isTheLastParagraph) {
+    if (!(text.equals(note.getLastInterpreterName() + " ") || Strings.isNullOrEmpty(text)) &&
+        isTheLastParagraph) {
       note.addParagraph();
     }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/InterpreterRestApiTest.java
Patch:
@@ -159,7 +159,7 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
 
 
     // restart interpreter
-    for (InterpreterSetting setting : note.getNoteReplLoader().getInterpreterSettings()) {
+    for (InterpreterSetting setting : ZeppelinServer.notebook.getInterpreterFactory().getInterpreterSettings(note.getId())) {
       if (setting.getName().equals("md")) {
         // Call Restart Interpreter REST API
         PutMethod put = httpPut("/interpreter/setting/restart/" + setting.id(), "");

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -93,7 +93,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr
 
     // get reference to interpreterGroup
     InterpreterGroup interpreterGroup = null;
-    List<InterpreterSetting> settings = note1.getNoteReplLoader().getInterpreterSettings();
+    List<InterpreterSetting> settings = notebook.getInterpreterFactory().getInterpreterSettings(note1.getId());
     for (InterpreterSetting setting : settings) {
       if (setting.getName().equals("md")) {
         interpreterGroup = setting.getInterpreterGroup("sharedProcess");

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -107,7 +107,7 @@ public void testInvalidJsonFile() throws IOException {
   @Test
   public void testSaveNotebook() throws IOException, InterruptedException {
     Note note = notebook.createNote(null);
-    note.getNoteReplLoader().setInterpreters(factory.getDefaultInterpreterSettingList());
+    factory.setInterpreters(note.getId(), factory.getDefaultInterpreterSettingList());
 
     Paragraph p1 = note.addParagraph();
     Map<String, Object> config = p1.getConfig();

File: livy/src/main/java/org/apache/zeppelin/livy/LivyHelper.java
Patch:
@@ -96,7 +96,7 @@ public Integer createSession(InterpreterContext context, String kind) throws Exc
               }.getType());
           if (jsonMap.get("state").equals("idle")) {
             break;
-          } else if (jsonMap.get("state").equals("error")) {
+          } else if (jsonMap.get("state").equals("error") || jsonMap.get("state").equals("dead")) {
             json = executeHTTP(property.getProperty("zeppelin.livy.url") + "/sessions/" +
                     sessionId + "/log",
                 "GET", null,
@@ -124,7 +124,7 @@ public Integer createSession(InterpreterContext context, String kind) throws Exc
 
   protected void initializeSpark(final InterpreterContext context,
                                  final Map<String, Integer> userSessionMap) throws Exception {
-    interpret("val sqlContext= new org.apache.spark.sql.SQLContext(sc)\n" +
+    interpret("val sqlContext = new org.apache.spark.sql.SQLContext(sc)\n" +
         "import sqlContext.implicits._", context, userSessionMap);
   }
 

File: ignite/src/main/java/org/apache/zeppelin/ignite/IgniteInterpreter.java
Patch:
@@ -80,6 +80,7 @@ public class IgniteInterpreter extends Interpreter {
             "ignite",
             "ignite",
             IgniteInterpreter.class.getName(),
+            true,
             new InterpreterPropertyBuilder()
                     .add(IGNITE_ADDRESSES, "127.0.0.1:47500..47509",
                             "Coma separated list of addresses "

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -515,6 +515,9 @@ public static enum ConfVars {
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
+    ZEPPELIN_INTERPRETER_GROUP_ORDER("zeppelin.interpreter.group.order", "spark,md,angular,sh,"
+        + "livy,alluxio,file,psql,flink,python,ignite,lens,cassandra,geode,kylin,elasticsearch,"
+        + "scalding,jdbc,hbase"),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),
     // use specified notebook (id) as homescreen

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java
Patch:
@@ -50,13 +50,12 @@ public void setUp() throws Exception {
     new File(tmpDir, "conf").mkdirs();
 
     System.setProperty(ConfVars.ZEPPELIN_HOME.getVarName(), tmpDir.getAbsolutePath());
-    System.setProperty(ConfVars.ZEPPELIN_INTERPRETERS.getVarName(), "org.apache.zeppelin.interpreter.mock.MockInterpreter1,org.apache.zeppelin.interpreter.mock.MockInterpreter11,org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 
     conf = ZeppelinConfiguration.create();
 
     Interpreter.registeredInterpreters = Collections
         .synchronizedMap(new HashMap<String, Interpreter.RegisteredInterpreter>());
-    MockInterpreter1.register("mock1", "group1", "org.apache.zeppelin.interpreter.mock.MockInterpreter1");
+    MockInterpreter1.register("mock1", "group1", "org.apache.zeppelin.interpreter.mock.MockInterpreter1", true);
     MockInterpreter11.register("mock11", "group1", "org.apache.zeppelin.interpreter.mock.MockInterpreter11");
     MockInterpreter2.register("mock2", "group2", "org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -208,7 +208,7 @@ public Interpreter getCurrentRepl() {
 
   public List<InterpreterCompletion> completion(String buffer, int cursor) {
     String replName = getRequiredReplName(buffer);
-    if (replName != null) {
+    if (replName != null && cursor > replName.length()) {
       cursor -= replName.length() + 1;
     }
     String body = getScriptBody(buffer);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepo.java
Patch:
@@ -105,11 +105,11 @@ public interface NotebookRepo {
    */
   static class Revision {
     public Revision(String revId, String message, int time) {
-      this.revId = revId;
+      this.id = revId;
       this.message = message;
       this.time = time;
     }
-    public String revId;
+    public String id;
     public String message;
     public int time;
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -145,7 +145,7 @@ protected void createNewNote() {
   }
 
   protected void deleteTestNotebook(final WebDriver driver) {
-    driver.findElement(By.xpath("//*[@id='main']/div//h3/span/button[@tooltip='Remove the notebook']"))
+    driver.findElement(By.xpath(".//*[@id='main']//button[@ng-click='removeNote(note.id)']"))
         .sendKeys(Keys.ENTER);
     sleep(1000, true);
     driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'delete this notebook')]" +

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -176,7 +176,7 @@ public void testAngularDisplay() throws Exception {
       waitForText("BindingTest_1_",
           By.xpath(getParagraphXPath(1) + "//div[@id=\"angularTestButton\"]"));
 
-      driver.findElement(By.xpath("//*[@id='main']/div//h3/span/button[@tooltip='Remove the notebook']"))
+      driver.findElement(By.xpath(".//*[@id='main']//button[@ng-click='removeNote(note.id)']"))
           .sendKeys(Keys.ENTER);
       sleep(1000, true);
       driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'delete this notebook')]" +

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -77,8 +77,7 @@ String getKey() {
   }
 
   private static final Logger LOG = LoggerFactory.getLogger(NotebookServer.class);
-  Gson gson = new GsonBuilder()
-          .setDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").create();
+  Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").create();
   final Map<String, List<NotebookSocket>> noteSocketMap = new HashMap<>();
   final Queue<NotebookSocket> connectedSockets = new ConcurrentLinkedQueue<>();
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -195,7 +195,9 @@ public Note importNote(String sourceJson, String noteName, AuthenticationInfo su
       throws IOException {
     GsonBuilder gsonBuilder = new GsonBuilder();
     gsonBuilder.setPrettyPrinting();
-    Gson gson = gsonBuilder.create();
+
+    Gson gson = gsonBuilder.registerTypeAdapter(Date.class, new NotebookImportDeserializer())
+      .create();
     JsonReader reader = new JsonReader(new StringReader(sourceJson));
     reader.setLenient(true);
     Note newNote;

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -127,8 +127,9 @@ protected static void startUp() throws Exception {
           }
         }
 
-        // set spark master
+        // set spark master and other properties
         sparkIntpSetting.getProperties().setProperty("master", "spark://" + getHostname() + ":7071");
+        sparkIntpSetting.getProperties().setProperty("spark.cores.max", "2");
 
         // set spark home for pyspark
         sparkIntpSetting.getProperties().setProperty("spark.home", getSparkHome());

File: zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -125,8 +125,7 @@ public static WebDriver getWebDriver() {
         (new WebDriverWait(driver, 5)).until(new ExpectedCondition<Boolean>() {
           @Override
           public Boolean apply(WebDriver d) {
-            return d.findElement(By.xpath(
-                "//div[contains(@class, 'navbar-collapse')]//li//a[contains(.,'Connected')]"))
+            return d.findElement(By.xpath("//i[@tooltip='WebSocket Connected']"))
                 .isDisplayed();
           }
         });

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/AuthenticationIT.java
Patch:
@@ -158,8 +158,8 @@ public void testGroupPermission() throws Exception {
 
       String noteId = driver.getCurrentUrl().substring(driver.getCurrentUrl().lastIndexOf("/") + 1);
 
-      pollingWait(By.xpath("//button[@tooltip='Note permissions']"),
-          MAX_BROWSER_TIMEOUT_SEC).sendKeys(Keys.ENTER);
+      pollingWait(By.xpath("//span[@tooltip='Note permissions']"),
+          MAX_BROWSER_TIMEOUT_SEC).click();
       pollingWait(By.xpath("//input[@ng-model='permissions.owners']"), MAX_BROWSER_TIMEOUT_SEC)
           .sendKeys("finance");
       pollingWait(By.xpath("//input[@ng-model='permissions.readers']"), MAX_BROWSER_TIMEOUT_SEC)

File: python/src/test/java/org/apache/zeppelin/python/PythonInterpreterTest.java
Patch:
@@ -116,7 +116,7 @@ public void testPy4jIsNotInstalled() {
     assertTrue(cmdHistory.contains("def help()"));
     assertTrue(cmdHistory.contains("class PyZeppelinContext(object):"));
     assertTrue(cmdHistory.contains("z = PyZeppelinContext"));
-    assertTrue(cmdHistory.contains("z.show"));
+    assertTrue(cmdHistory.contains("def show"));
     assertFalse(cmdHistory.contains("GatewayClient"));
 
   }
@@ -141,8 +141,8 @@ public void testPy4jInstalled() {
 
     assertTrue(cmdHistory.contains("def help()"));
     assertTrue(cmdHistory.contains("class PyZeppelinContext(object):"));
-    assertTrue(cmdHistory.contains("z = PyZeppelinContext"));
-    assertTrue(cmdHistory.contains("z.show"));
+    assertTrue(cmdHistory.contains("z = Py4jZeppelinContext"));
+    assertTrue(cmdHistory.contains("def show"));
     assertTrue(cmdHistory.contains("GatewayClient(port=" + py4jPort + ")"));
     assertTrue(cmdHistory.contains("org.apache.zeppelin.display.Input"));
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -113,7 +113,7 @@ private void generateId() {
 
   private String getDefaultInterpreterName() {
     Optional<InterpreterSetting> settingOptional = replLoader.getDefaultInterpreterSetting();
-    return settingOptional.isPresent() ? settingOptional.get().getName() : StringUtils.EMPTY;
+    return settingOptional.isPresent() ? settingOptional.get().getGroup() : StringUtils.EMPTY;
   }
 
   void putDefaultReplName() {

File: python/src/main/java/org/apache/zeppelin/python/PythonProcess.java
Patch:
@@ -92,7 +92,7 @@ public String sendAndGetResult(String cmd) throws IOException {
     String output = "";
     String line;
     while (!(line = reader.readLine()).contains("*!?flush reader!?*")) {
-      logger.debug("Readed line from python shell : " + line);
+      logger.debug("Read line from python shell : " + line);
       if (line.equals("...")) {
         logger.warn("Syntax error ! ");
         output += "Syntax error ! ";

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -255,7 +255,7 @@ public Date getDateFinished() {
     return dateFinished;
   }
 
-  protected void setResult(Object result) {
+  public void setResult(Object result) {
     this.result = result;
   }
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.zeppelin.search.SearchService;
 import org.apache.zeppelin.socket.NotebookServer;
 import org.apache.zeppelin.user.Credentials;
+import org.apache.zeppelin.utils.SecurityUtils;
 import org.eclipse.jetty.http.HttpVersion;
 import org.eclipse.jetty.server.*;
 import org.eclipse.jetty.server.handler.ContextHandlerCollection;
@@ -238,6 +239,7 @@ private static void setupRestApiContextHandler(WebAppContext webapp,
     webapp.setInitParameter("shiroConfigLocations",
         new File(conf.getShiroPath()).toURI().toString());
 
+    SecurityUtils.initSecurityManager(conf.getShiroPath());
     webapp.addFilter(org.apache.shiro.web.servlet.ShiroFilter.class, "/api/*",
         EnumSet.allOf(DispatcherType.class));
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -587,6 +587,7 @@ public Response runParagraph(@PathParam("notebookId") String notebookId,
       if (paramsForUpdating != null) {
         paragraph.settings.getParams().putAll(paramsForUpdating);
         AuthenticationInfo subject = new AuthenticationInfo(SecurityUtils.getPrincipal());
+        note.setLastReplName(paragraph.getId());
         note.persist(subject);
       }
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1075,6 +1075,7 @@ private void runParagraph(NotebookSocket conn, HashSet<String> userAndRoles, Not
     // if it's the last paragraph, let's add a new one
     boolean isTheLastParagraph = note.getLastParagraph().getId()
         .equals(p.getId());
+    note.setLastReplName(paragraphId);
     if (!Strings.isNullOrEmpty(text) && isTheLastParagraph) {
       note.addParagraph();
     }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -146,7 +146,8 @@ public void testNotebookCreateWithParagraphs() throws IOException {
     assertEquals("compare note name", expectedNoteName, newNoteName);
     assertEquals("initial paragraph check failed", 3, newNote.getParagraphs().size());
     for (Paragraph p : newNote.getParagraphs()) {
-      if (StringUtils.isEmpty(p.getText())) {
+      if (StringUtils.isEmpty(p.getText()) ||
+              p.getText().trim().equals(newNote.getLastInterpreterName())) {
         continue;
       }
       assertTrue("paragraph title check failed", p.getTitle().startsWith("title"));

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -159,6 +159,7 @@ public Note createNote(List<String> interpreterIds, AuthenticationInfo subject)
     }
     if (interpreterIds != null) {
       bindInterpretersToNote(note.id(), interpreterIds);
+      note.putDefaultReplName();
     }
 
     notebookIndex.addIndexDoc(note);

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -161,8 +161,8 @@ public int getProgress(InterpreterContext context) {
 
   @Override
   public Scheduler getScheduler() {
-    return SchedulerFactory.singleton().createOrGetParallelScheduler(
-        PythonInterpreter.class.getName() + this.hashCode(), 10);
+    return SchedulerFactory.singleton().createOrGetFIFOScheduler(
+        PythonInterpreter.class.getName() + this.hashCode());
   }
 
   @Override

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ByteBufferInputStream.java
Patch:
@@ -21,6 +21,7 @@
 import java.io.InputStream;
 import java.nio.ByteBuffer;
 
+
 /**
  * InputStream from bytebuffer
  */

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -89,7 +89,7 @@ public void checkInvalidOrigin(){
   @Test
   public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() throws IOException {
     // create a notebook
-    Note note1 = notebook.createNote();
+    Note note1 = notebook.createNote(null);
 
     // get reference to interpreterGroup
     InterpreterGroup interpreterGroup = null;
@@ -139,7 +139,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr
     verify(sock1, times(0)).send(anyString());
     verify(sock2, times(1)).send(anyString());
 
-    notebook.removeNote(note1.getId());
+    notebook.removeNote(note1.getId(), null);
   }
 
   @Test
@@ -162,7 +162,7 @@ public void testImportNotebook() throws IOException {
     assertNotEquals(null, notebook.getNote(note.getId()));
     assertEquals("Test Zeppelin notebook import", notebook.getNote(note.getId()).getName());
     assertEquals("Test paragraphs import", notebook.getNote(note.getId()).getParagraphs().get(0).getText());
-    notebook.removeNote(note.getId());
+    notebook.removeNote(note.getId(), null);
   }
 
   @Test

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java
Patch:
@@ -204,7 +204,7 @@ public void canNotSearchBeforeIndexing() {
     //when
     Paragraph p1 = note1.getLastParagraph();
     p1.setText("no no no");
-    note1.persist();
+    note1.persist(null);
 
     //then
     assertThat(resultForQuery("Notebook1").size()).isEqualTo(1);
@@ -228,7 +228,7 @@ public void canNotSearchBeforeIndexing() {
 
     //when
     note1.setName("NotebookN");
-    note1.persist();
+    note1.persist(null);
 
     //then
     assertThat(resultForQuery("Notebook1")).isEmpty();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -634,7 +634,7 @@ public void execute(JobExecutionContext context) throws JobExecutionException {
       Note note = notebook.getNote(noteId);
       note.runAll();
     
-      while (!note.getLastParagraph().isTerminated()) {
+      while (!note.isTerminated()) {
         try {
           Thread.sleep(1000);
         } catch (InterruptedException e) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -38,7 +38,7 @@
 import static org.openqa.selenium.Keys.SHIFT;
 
 abstract public class AbstractZeppelinIT {
-  protected WebDriver driver;
+  protected static WebDriver driver;
 
   protected final static Logger LOG = LoggerFactory.getLogger(AbstractZeppelinIT.class);
   protected static final long MAX_IMPLICIT_WAIT = 30;
@@ -114,7 +114,7 @@ public WebElement apply(WebDriver driver) {
     });
   }
 
-  protected boolean endToEndTestEnabled() {
+  protected static boolean endToEndTestEnabled() {
     return null != System.getenv("TEST_SELENIUM");
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -125,7 +125,8 @@ public static WebDriver getWebDriver() {
         (new WebDriverWait(driver, 5)).until(new ExpectedCondition<Boolean>() {
           @Override
           public Boolean apply(WebDriver d) {
-            return d.findElement(By.partialLinkText("Create new note"))
+            return d.findElement(By.xpath(
+                "//div[contains(@class, 'navbar-collapse')]//li//a[contains(.,'Connected')]"))
                 .isDisplayed();
           }
         });

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -493,7 +493,6 @@ public static enum ConfVars {
         + "org.apache.zeppelin.livy.LivySparkRInterpreter,"
         + "org.apache.zeppelin.alluxio.AlluxioInterpreter,"
         + "org.apache.zeppelin.file.HDFSFileInterpreter,"
-        + "org.apache.zeppelin.phoenix.PhoenixInterpreter,"
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
         + "org.apache.zeppelin.python.PythonInterpreter,"

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -244,7 +244,7 @@ public void testCheckpointOneStorage() throws IOException, SchedulerException {
     String noteId = vRepoSync.list().get(0).getId();
     // first checkpoint
     vRepoSync.checkpoint(noteId, "checkpoint message");
-    int vCount = gitRepo.history(noteId).size();
+    int vCount = gitRepo.revisionHistory(noteId).size();
     assertThat(vCount).isEqualTo(1);
     
     Paragraph p = note.addParagraph();
@@ -256,7 +256,7 @@ public void testCheckpointOneStorage() throws IOException, SchedulerException {
     // save and checkpoint again
     vRepoSync.save(note);
     vRepoSync.checkpoint(noteId, "checkpoint message 2");
-    assertThat(gitRepo.history(noteId).size()).isEqualTo(vCount + 1);
+    assertThat(gitRepo.revisionHistory(noteId).size()).isEqualTo(vCount + 1);
   }
   
   static void delete(File file){

File: alluxio/src/main/java/org/apache/zeppelin/alluxio/AlluxioInterpreter.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -174,13 +175,13 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     String[] words = splitAndRemoveEmpty(splitAndRemoveEmpty(buf, "\n"), " ");
     String lastWord = "";
     if (words.length > 0) {
       lastWord = words[ words.length - 1 ];
     }
-    ArrayList<String> voices = new ArrayList<String>();
+    ArrayList voices = new ArrayList<>();
     for (String command : keywords) {
       if (command.startsWith(lastWord)) {
         voices.add(command);

File: angular/src/main/java/org/apache/zeppelin/angular/AngularInterpreter.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.InterpreterResult.Type;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
@@ -69,8 +70,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
-    return new LinkedList<String>();
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
+    return new LinkedList<>();
   }
 
   @Override

File: cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -139,7 +140,7 @@ public class CassandraInterpreter extends Interpreter {
   public static final String LOGGING_DOWNGRADING_RETRY = "LOGGING_DOWNGRADING";
   public static final String LOGGING_FALLTHROUGH_RETRY = "LOGGING_FALLTHROUGH";
 
-  public static final List<String> NO_COMPLETION = new ArrayList<>();
+  public static final List NO_COMPLETION = new ArrayList<>();
 
   InterpreterLogic helper;
   Cluster cluster;
@@ -320,7 +321,7 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return NO_COMPLETION;
   }
 

File: elasticsearch/src/main/java/org/apache/zeppelin/elasticsearch/ElasticsearchInterpreter.java
Patch:
@@ -37,6 +37,7 @@
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.elasticsearch.action.delete.DeleteResponse;
 import org.elasticsearch.action.get.GetResponse;
 import org.elasticsearch.action.index.IndexResponse;
@@ -244,8 +245,8 @@ public int getProgress(InterpreterContext interpreterContext) {
   }
 
   @Override
-  public List<String> completion(String s, int i) {
-    final List<String> suggestions = new ArrayList<>();
+  public List<InterpreterCompletion> completion(String s, int i) {
+    final List suggestions = new ArrayList<>();
 
     if (StringUtils.isEmpty(s)) {
       suggestions.addAll(COMMANDS);

File: file/src/main/java/org/apache/zeppelin/file/FileInterpreter.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.InterpreterResult.Type;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -165,7 +166,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 }

File: file/src/main/java/org/apache/zeppelin/file/HDFSFileInterpreter.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 
 /**
  * HDFS implementation of File interpreter for Zeppelin.
@@ -259,9 +260,9 @@ public boolean isDirectory(String path) {
 
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     logger.info("Completion request at position\t" + cursor + " in string " + buf);
-    final List<String> suggestions = new ArrayList<>();
+    final List suggestions = new ArrayList<>();
     if (StringUtils.isEmpty(buf)) {
       suggestions.add("ls");
       suggestions.add("cd");

File: flink/src/main/java/org/apache/zeppelin/flink/FlinkInterpreter.java
Patch:
@@ -38,6 +38,7 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.InterpreterUtils;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -331,8 +332,8 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
-    return new LinkedList<String>();
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
+    return new LinkedList<>();
   }
 
   private void startFlinkMiniCluster() {

File: geode/src/main/java/org/apache/zeppelin/geode/GeodeOqlInterpreter.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -300,7 +301,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: hbase/src/main/java/org/apache/zeppelin/hbase/HbaseInterpreter.java
Patch:
@@ -15,6 +15,7 @@
 package org.apache.zeppelin.hbase;
 
 import org.apache.zeppelin.interpreter.*;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.jruby.embed.LocalContextScope;
@@ -152,7 +153,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: ignite/src/main/java/org/apache/zeppelin/ignite/IgniteInterpreter.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;
 import org.apache.zeppelin.interpreter.*;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -342,7 +343,7 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return new LinkedList<>();
   }
 

File: ignite/src/main/java/org/apache/zeppelin/ignite/IgniteSqlInterpreter.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -194,7 +195,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return new LinkedList<>();
   }
 }

File: kylin/src/main/java/org/apache/zeppelin/kylin/KylinInterpreter.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -112,7 +113,7 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: lens/src/main/java/org/apache/zeppelin/lens/LensInterpreter.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -433,7 +434,7 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
   

File: livy/src/main/java/org/apache/zeppelin/livy/LivyPySparkInterpreter.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zeppelin.livy;
 
 import org.apache.zeppelin.interpreter.*;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -115,7 +116,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkInterpreter.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zeppelin.livy;
 
 import org.apache.zeppelin.interpreter.*;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -143,7 +144,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkRInterpreter.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zeppelin.livy;
 
 import org.apache.zeppelin.interpreter.*;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -115,7 +116,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: livy/src/main/java/org/apache/zeppelin/livy/LivySparkSQLInterpreter.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zeppelin.livy;
 
 import org.apache.zeppelin.interpreter.*;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -158,7 +159,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: markdown/src/main/java/org/apache/zeppelin/markdown/Markdown.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.InterpreterUtils;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.markdown4j.Markdown4jProcessor;
@@ -87,7 +88,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 }

File: phoenix/src/main/java/org/apache/zeppelin/phoenix/PhoenixInterpreter.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -224,7 +225,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: python/src/main/java/org/apache/zeppelin/python/PythonInterpreter.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Job;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
@@ -175,7 +176,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -32,6 +32,7 @@
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Job;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
@@ -150,7 +151,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: spark/src/main/java/org/apache/zeppelin/spark/SparkRInterpreter.java
Patch:
@@ -23,6 +23,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.spark.SparkRBackend;
 import org.apache.zeppelin.interpreter.*;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -166,8 +167,8 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
-    return new ArrayList<String>();
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
+    return new ArrayList<>();
   }
 
   private SparkInterpreter getSparkInterpreter() {

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -34,6 +34,7 @@
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.LazyOpenInterpreter;
 import org.apache.zeppelin.interpreter.WrappedInterpreter;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.slf4j.Logger;
@@ -177,7 +178,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterA.java
Patch:
@@ -26,6 +26,7 @@
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
@@ -86,7 +87,7 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterAngular.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 
 public class MockInterpreterAngular extends Interpreter {
   static {
@@ -114,7 +115,7 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterB.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.WrappedInterpreter;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 
 public class MockInterpreterB extends Interpreter {
@@ -85,7 +86,7 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterEnv.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.zeppelin.interpreter.remote.mock;
 
 import org.apache.zeppelin.interpreter.*;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
@@ -75,7 +76,7 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterOutputStream.java
Patch:
@@ -17,6 +17,7 @@
 package org.apache.zeppelin.interpreter.remote.mock;
 
 import org.apache.zeppelin.interpreter.*;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
@@ -86,7 +87,7 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterResourcePool.java
Patch:
@@ -29,6 +29,7 @@
 import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;
 import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.resource.Resource;
 import org.apache.zeppelin.resource.ResourcePool;
 
@@ -121,7 +122,7 @@ public int getProgress(InterpreterContext context) {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 }
\ No newline at end of file

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -36,6 +36,7 @@
 import org.apache.zeppelin.display.AngularObjectRegistryListener;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
 import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
 import org.apache.zeppelin.interpreter.InterpreterResult;
@@ -707,7 +708,7 @@ private void completion(NotebookSocket conn, HashSet<String> userAndRoles, Noteb
     }
 
     final Note note = notebook.getNote(getOpenNoteId(conn));
-    List<String> candidates = note.completion(paragraphId, buffer, cursor);
+    List<InterpreterCompletion> candidates = note.completion(paragraphId, buffer, cursor);
     resp.put("completions", candidates);
     conn.send(serializeMessage(resp));
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java
Patch:
@@ -24,6 +24,7 @@
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
@@ -67,7 +68,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter1.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
@@ -81,7 +82,7 @@ public Scheduler getScheduler() {
 	}
 
 	@Override
-	public List<String> completion(String buf, int cursor) {
+	public List<InterpreterCompletion> completion(String buf, int cursor) {
 		return null;
 	}
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter11.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
@@ -68,7 +69,7 @@ public Scheduler getScheduler() {
   }
 
   @Override
-  public List<String> completion(String buf, int cursor) {
+  public List<InterpreterCompletion> completion(String buf, int cursor) {
     return null;
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/mock/MockInterpreter2.java
Patch:
@@ -25,6 +25,7 @@
 import org.apache.zeppelin.interpreter.Interpreter;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;
 import org.apache.zeppelin.scheduler.Scheduler;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 
@@ -80,7 +81,7 @@ public Scheduler getScheduler() {
 	}
 
 	@Override
-	public List<String> completion(String buf, int cursor) {
+	public List<InterpreterCompletion> completion(String buf, int cursor) {
 		return null;
 	}
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -165,10 +165,10 @@ public void testSqlSpark() throws Exception {
       }
 
       WebElement paragraph1Result = driver.findElement(By.xpath(
-          getParagraphXPath(1) + "//div[@class=\"tableDisplay\"]"));
+          getParagraphXPath(1) + "//div[@class=\"tableDisplay\"]//table"));
       collector.checkThat("Paragraph from SparkParagraphIT of testSqlSpark result: ",
-          paragraph1Result.getText().toString(), CoreMatchers.equalTo("age\njob\nmarital\neducation\nbalance\n30" +
-                      " unemployed married primary 1,787\nage\njob\nmarital\neducation\nbalance"));
+          paragraph1Result.getText().toString(), CoreMatchers.equalTo("age\njob\nmarital\neducation\nbalance\n" +
+          "30 unemployed married primary 1,787"));
     } catch (Exception e) {
       handleException("Exception in SparkParagraphIT while testSqlSpark", e);
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInterpreterLoader.java
Patch:
@@ -188,6 +188,6 @@ public Interpreter get(String replName) {
       }
     }
 
-    throw new InterpreterException(replName + " interpreter not found");
+    return null;
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -487,7 +487,6 @@ public static enum ConfVars {
         + "org.apache.zeppelin.livy.LivySparkSQLInterpreter,"
         + "org.apache.zeppelin.livy.LivyPySparkInterpreter,"
         + "org.apache.zeppelin.livy.LivySparkRInterpreter,"
-        + "org.apache.zeppelin.hive.HiveInterpreter,"
         + "org.apache.zeppelin.alluxio.AlluxioInterpreter,"
         + "org.apache.zeppelin.file.HDFSFileInterpreter,"
         + "org.apache.zeppelin.phoenix.PhoenixInterpreter,"

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -157,7 +157,6 @@ public void createInterpreter(String interpreterGroupId, String noteId, String
           replClass.getConstructor(new Class[] {Properties.class});
       Interpreter repl = constructor.newInstance(p);
 
-      ClassLoader cl = ClassLoader.getSystemClassLoader();
       repl.setClassloaderUrls(new URL[]{});
 
       synchronized (interpreterGroup) {
@@ -167,7 +166,7 @@ public void createInterpreter(String interpreterGroupId, String noteId, String
           interpreterGroup.put(noteId, interpreters);
         }
 
-        interpreters.add(new LazyOpenInterpreter(new ClassloaderInterpreter(repl, cl)));
+        interpreters.add(new LazyOpenInterpreter(repl));
       }
 
       logger.info("Instantiate interpreter {}", className);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -492,7 +492,6 @@ public static enum ConfVars {
         + "org.apache.zeppelin.file.HDFSFileInterpreter,"
         + "org.apache.zeppelin.phoenix.PhoenixInterpreter,"
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
-        + "org.apache.zeppelin.tajo.TajoInterpreter,"
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
         + "org.apache.zeppelin.python.PythonInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyContext.java
Patch:
@@ -115,7 +115,7 @@ private List<ArtifactResult> fetchArtifactWithDep(Dependency dep)
       throws DependencyResolutionException, ArtifactResolutionException {
     Artifact artifact = new DefaultArtifact(dep.getGroupArtifactVersion());
 
-    DependencyFilter classpathFlter = DependencyFilterUtils
+    DependencyFilter classpathFilter = DependencyFilterUtils
         .classpathFilter(JavaScopes.COMPILE);
     PatternExclusionsDependencyFilter exclusionFilter = new PatternExclusionsDependencyFilter(
         dep.getExclusions());
@@ -133,7 +133,7 @@ private List<ArtifactResult> fetchArtifactWithDep(Dependency dep)
     }
 
     DependencyRequest dependencyRequest = new DependencyRequest(collectRequest,
-        DependencyFilterUtils.andFilter(exclusionFilter, classpathFlter));
+        DependencyFilterUtils.andFilter(exclusionFilter, classpathFilter));
 
     return system.resolveDependencies(session, dependencyRequest).getArtifactResults();
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterSetting.java
Patch:
@@ -124,7 +124,9 @@ public String getGroup() {
 
 
   private String getInterpreterProcessKey(String noteId) {
-    if (getOption().isPerNoteProcess()) {
+    if (getOption().isExistingProcess) {
+      return Constants.EXISTING_PROCESS;
+    } else if (getOption().isPerNoteProcess()) {
       return noteId;
     } else {
       return SHARED_PROCESS;

File: cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java
Patch:
@@ -110,7 +110,7 @@ public class CassandraInterpreter extends Interpreter {
   public static final String DEFAULT_PORT = "9042";
   public static final String DEFAULT_CLUSTER = "Test Cluster";
   public static final String DEFAULT_KEYSPACE = "system";
-  public static final String DEFAULT_PROTOCOL_VERSION = "3";
+  public static final String DEFAULT_PROTOCOL_VERSION = "4";
   public static final String DEFAULT_COMPRESSION = "NONE";
   public static final String DEFAULT_CREDENTIAL = "none";
   public static final String DEFAULT_POLICY = "DEFAULT";
@@ -159,7 +159,7 @@ public CassandraInterpreter(Properties properties) {
                 "IP address). Default = localhost. Ex: '192.168.0.12,node2,node3'")
         .add(CASSANDRA_PORT, DEFAULT_PORT, "Cassandra native port. Default = 9042")
         .add(CASSANDRA_PROTOCOL_VERSION, DEFAULT_PROTOCOL_VERSION,
-                "Cassandra protocol version. Default = 3")
+                "Cassandra protocol version. Default = 4")
         .add(CASSANDRA_CLUSTER_NAME, DEFAULT_CLUSTER, "Cassandra cluster name. " +
                 "Default = 'Test Cluster'")
         .add(CASSANDRA_KEYSPACE_NAME, DEFAULT_KEYSPACE, "Cassandra keyspace name. " +
@@ -311,7 +311,7 @@ public void cancel(InterpreterContext context) {
 
   @Override
   public FormType getFormType() {
-    return FormType.NATIVE;
+    return FormType.SIMPLE;
   }
 
   @Override

File: scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java
Patch:
@@ -57,6 +57,7 @@ public void setUp() throws Exception {
 
     if (repl == null) {
       Properties p = new Properties();
+      p.setProperty(ScaldingInterpreter.ARGS_STRING, "--local --repl");
 
       repl = new ScaldingInterpreter(p);
       repl.open();
@@ -119,7 +120,7 @@ public void testBasicScalding() {
           "val salesPipe = TypedPipe.from(salesList)\n" +
           "val results = salesPipe.map{x => (1, Set(x.state), x.sale)}.\n" +
           "    groupAll.sum.values.map{ case(count, set, sum) => (count, set.size, sum) }\n" +
-          "results.dump", 
+          "results.dump",
           context).code());
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterContext.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.List;
 import java.util.Map;
 
+import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.display.AngularObjectRegistry;
 import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.display.GUI;
@@ -31,6 +32,7 @@
 public class InterpreterContext {
   private static final ThreadLocal<InterpreterContext> threadIC =
       new ThreadLocal<InterpreterContext>();
+
   public final InterpreterOutput out;
 
   public static InterpreterContext get() {

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/ConfigurationsRestApi.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.zeppelin.rest;
 
+import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.notebook.Notebook;
 import org.apache.zeppelin.server.JsonResponse;
@@ -46,6 +47,7 @@ public ConfigurationsRestApi(Notebook notebook) {
 
   @GET
   @Path("all")
+  @ZeppelinApi
   public Response getAll() {
     ZeppelinConfiguration conf = notebook.getConf();
 
@@ -67,6 +69,7 @@ public boolean apply(String key) {
 
   @GET
   @Path("prefix/{prefix}")
+  @ZeppelinApi
   public Response getByPrefix(@PathParam("prefix") final String prefix) {
     ZeppelinConfiguration conf = notebook.getConf();
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/LoginRestApi.java
Patch:
@@ -19,6 +19,7 @@
 import org.apache.shiro.authc.*;
 import org.apache.shiro.session.Session;
 import org.apache.shiro.subject.Subject;
+import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.server.JsonResponse;
 import org.apache.zeppelin.ticket.TicketContainer;
 import org.apache.zeppelin.utils.SecurityUtils;
@@ -60,6 +61,7 @@ public LoginRestApi() {
    * @return 200 response
    */
   @POST
+  @ZeppelinApi
   public Response postLogin(@FormParam("userName") String userName,
                             @FormParam("password") String password) {
     JsonResponse response = null;
@@ -113,6 +115,7 @@ public Response postLogin(@FormParam("userName") String userName,
   
   @POST
   @Path("logout")
+  @ZeppelinApi
   public Response logout() {
     JsonResponse response;
     

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/SecurityRestApi.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.zeppelin.rest;
 
+import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.server.JsonResponse;
 import org.apache.zeppelin.ticket.TicketContainer;
@@ -58,6 +59,7 @@ public SecurityRestApi() {
    */
   @GET
   @Path("ticket")
+  @ZeppelinApi
   public Response ticket() {
     ZeppelinConfiguration conf = ZeppelinConfiguration.create();
     String principal = SecurityUtils.getPrincipal();

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/ZeppelinRestApi.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.apache.zeppelin.rest;
 
+import org.apache.zeppelin.annotation.ZeppelinApi;
 import org.apache.zeppelin.server.JsonResponse;
 import org.apache.zeppelin.util.Util;
 
@@ -47,6 +48,7 @@ public Response getRoot() {
 
   @GET
   @Path("version")
+  @ZeppelinApi
   public Response getVersion() {
     return new JsonResponse<>(Response.Status.OK, "Zeppelin version", Util.getVersion()).build();
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -238,8 +238,8 @@ public void testSparkInterpreterDependencyLoading() throws Exception {
       interpreterLink.click();
       driver.findElement(By.xpath("//div[@id='spark']//button[contains(.,'edit')]")).sendKeys(Keys.ENTER);
       WebElement testDepRemoveBtn = pollingWait(By.xpath("//tr[descendant::text()[contains(.,'" +
-          artifact + "')]]/td[3]/div"), MAX_IMPLICIT_WAIT);
-      testDepRemoveBtn.click();
+          artifact + "')]]/td[3]/button"), MAX_IMPLICIT_WAIT);
+      testDepRemoveBtn.sendKeys(Keys.ENTER);
       driver.findElement(By.xpath("//div[@id='spark']//form//button[1]")).click();
       driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'Do you want to update this interpreter and restart with new settings?')]" +
           "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java
Patch:
@@ -49,8 +49,7 @@ public NotebookAuthorization(ZeppelinConfiguration conf) {
     try {
       loadFromFile();
     } catch (IOException e) {
-      LOG.error("Error loading NotebookAuthorization");
-      e.printStackTrace();
+      LOG.error("Error loading NotebookAuthorization", e);
     }
   }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -80,7 +80,7 @@ public void setUp() throws Exception {
 
     SearchService search = mock(SearchService.class);
     notebookRepo = new VFSNotebookRepo(conf);
-    notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, this, search, null);
+    notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, this, search, null, null);
   }
 
   @After

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/search/LuceneSearchTest.java
Patch:
@@ -286,7 +286,7 @@ private Paragraph addParagraphWithTextAndTitle(Note note, String text, String ti
   }
 
   private Note newNote(String name) {
-    Note note = new Note(notebookRepoMock, replLoaderMock, null, notebookIndex);
+    Note note = new Note(notebookRepoMock, replLoaderMock, null, notebookIndex, null);
     note.setName(name);
     return note;
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -225,11 +225,11 @@ public static enum FormType {
    * Represent registered interpreter class
    */
   public static class RegisteredInterpreter {
-    @SerializedName("interpreterGroup")
+    //@SerializedName("interpreterGroup")
     private String group;
-    @SerializedName("interpreterName")
+    //@SerializedName("interpreterName")
     private String name;
-    @SerializedName("interpreterClassName")
+    //@SerializedName("interpreterClassName")
     private String className;
     private Map<String, InterpreterProperty> properties;
     private String path;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -486,6 +486,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.tajo.TajoInterpreter,"
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
+        + "org.apache.zeppelin.python.PythonInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteSqlInterpreter,"
         + "org.apache.zeppelin.lens.LensInterpreter,"

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -35,7 +35,7 @@
  * If you want to implement new Zeppelin interpreter, extend this class
  *
  * Please see,
- * https://zeppelin.incubator.apache.org/docs/latest/development/writingzeppelininterpreter.html
+ * https://zeppelin.apache.org/docs/latest/development/writingzeppelininterpreter.html
  *
  * open(), close(), interpreter() is three the most important method you need to implement.
  * cancel(), getProgress(), completion() is good to have
@@ -74,7 +74,7 @@ public abstract class Interpreter {
 
   /**
    * Dynamic form handling
-   * see http://zeppelin.incubator.apache.org/docs/dynamicform.html
+   * see http://zeppelin.apache.org/docs/dynamicform.html
    *
    * @return FormType.SIMPLE enables simple pattern replacement (eg. Hello ${name=world}),
    *         FormType.NATIVE handles form in API

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -42,10 +42,11 @@
 import org.apache.zeppelin.interpreter.InterpreterSetting;
 import org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcessListener;
 import org.apache.zeppelin.notebook.*;
+import org.apache.zeppelin.notebook.socket.Message;
+import org.apache.zeppelin.notebook.socket.Message.OP;
 import org.apache.zeppelin.scheduler.Job;
 import org.apache.zeppelin.scheduler.Job.Status;
 import org.apache.zeppelin.server.ZeppelinServer;
-import org.apache.zeppelin.socket.Message.OP;
 import org.apache.zeppelin.ticket.TicketContainer;
 import org.apache.zeppelin.utils.SecurityUtils;
 import org.eclipse.jetty.websocket.servlet.WebSocketServlet;

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -30,9 +30,10 @@
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.notebook.Notebook;
 import org.apache.zeppelin.notebook.Paragraph;
+import org.apache.zeppelin.notebook.socket.Message;
+import org.apache.zeppelin.notebook.socket.Message.OP;
 import org.apache.zeppelin.rest.AbstractTestRestApi;
 import org.apache.zeppelin.server.ZeppelinServer;
-import org.apache.zeppelin.socket.Message.OP;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/socket/Message.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.socket;
+package org.apache.zeppelin.notebook.socket;
 
 import java.util.HashMap;
 import java.util.Map;

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -232,9 +232,6 @@ private static void setupRestApiContextHandler(WebAppContext webapp,
     webapp.setSessionHandler(new SessionHandler());
     webapp.addServlet(cxfServletHolder, "/api/*");
 
-    webapp.addFilter(new FilterHolder(CorsFilter.class), "/*",
-        EnumSet.allOf(DispatcherType.class));
-
     webapp.setInitParameter("shiroConfigLocations",
         new File(conf.getShiroPath()).toURI().toString());
 
@@ -268,6 +265,9 @@ private static WebAppContext setupWebAppContext(ContextHandlerCollection context
     webApp.addServlet(new ServletHolder(new DefaultServlet()), "/*");
     contexts.addHandler(webApp);
 
+    webApp.addFilter(new FilterHolder(CorsFilter.class), "/*",
+        EnumSet.allOf(DispatcherType.class));
+
     return webApp;
 
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -361,7 +361,7 @@ public List<Map<String, String>> generateNotebooksInfo(boolean needsReload) {
       try {
         notebook.reloadAllNotes();
       } catch (IOException e) {
-        LOG.error("Fail to reload notes from repository");
+        LOG.error("Fail to reload notes from repository", e);
       }
     }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -26,6 +26,7 @@
 
 import com.google.common.base.Strings;
 import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
 import com.google.gson.reflect.TypeToken;
 
 import org.apache.zeppelin.conf.ZeppelinConfiguration;
@@ -60,7 +61,8 @@ public class NotebookServer extends WebSocketServlet implements
         NotebookSocketListener, JobListenerFactory, AngularObjectRegistryListener,
         RemoteInterpreterProcessListener {
   private static final Logger LOG = LoggerFactory.getLogger(NotebookServer.class);
-  Gson gson = new Gson();
+  Gson gson = new GsonBuilder()
+          .setDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").create();
   final Map<String, List<NotebookSocket>> noteSocketMap = new HashMap<>();
   final Queue<NotebookSocket> connectedSockets = new ConcurrentLinkedQueue<>();
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -206,7 +206,7 @@ public void testSparkInterpreterDependencyLoading() throws Exception {
           MAX_BROWSER_TIMEOUT_SEC);
       String artifact = "org.apache.commons:commons-csv:1.1";
       depArtifact.sendKeys(artifact);
-      driver.findElement(By.xpath("//div[contains(@class,'box')][contains(.,'spark')]//form//button[1]")).click();
+      driver.findElement(By.xpath("//div[contains(@class,'box')][contains(.,'%spark')]//form//button[1]")).click();
       driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'Do you want to update this interpreter and restart with new settings?')]" +
           "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();
 
@@ -240,7 +240,7 @@ public void testSparkInterpreterDependencyLoading() throws Exception {
       WebElement testDepRemoveBtn = pollingWait(By.xpath("//tr[descendant::text()[contains(.,'" +
           artifact + "')]]/td[3]/div"), MAX_IMPLICIT_WAIT);
       testDepRemoveBtn.click();
-      driver.findElement(By.xpath("//div[contains(@class,'box')][contains(.,'spark')]//form//button[1]")).click();
+      driver.findElement(By.xpath("//div[contains(@class,'box')][contains(.,'%spark')]//form//button[1]")).click();
       driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'Do you want to update this interpreter and restart with new settings?')]" +
           "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();
     } catch (Exception e) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -143,7 +143,7 @@ public static String getRequiredReplName(String text) {
     int scriptHeadIndex = 0;
     for (int i = 0; i < text.length(); i++) {
       char ch = text.charAt(i);
-      if (ch == ' ' || ch == '\n' || ch == '(') {
+      if (Character.isWhitespace(ch) || ch == '(') {
         scriptHeadIndex = i;
         break;
       }

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinR.java
Patch:
@@ -22,8 +22,8 @@
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterOutput;
 import org.apache.zeppelin.interpreter.InterpreterOutputListener;
-import parquet.org.slf4j.Logger;
-import parquet.org.slf4j.LoggerFactory;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.*;
 import java.util.Collections;

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -1009,6 +1009,7 @@ private void runParagraph(NotebookSocket conn, HashSet<String> userAndRoles, Not
             new InterpreterResult(InterpreterResult.Code.ERROR, ex.getMessage()),
             ex);
         p.setStatus(Status.ERROR);
+        broadcast(note.id(), new Message(OP.PARAGRAPH).put("paragraph", p));
       }
     }
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/SparkParagraphIT.java
Patch:
@@ -167,9 +167,8 @@ public void testSqlSpark() throws Exception {
       WebElement paragraph1Result = driver.findElement(By.xpath(
           getParagraphXPath(1) + "//div[@class=\"tableDisplay\"]"));
       collector.checkThat("Paragraph from SparkParagraphIT of testSqlSpark result: ",
-          paragraph1Result.getText().toString(), CoreMatchers.equalTo("age job marital education balance\n" +
-              "30 unemployed married primary 1,787")
-      );
+          paragraph1Result.getText().toString(), CoreMatchers.equalTo("age\njob\nmarital\neducation\nbalance\n30" +
+                      " unemployed married primary 1,787\nage\njob\nmarital\neducation\nbalance"));
     } catch (Exception e) {
       handleException("Exception in SparkParagraphIT while testSqlSpark", e);
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -238,7 +238,7 @@ private static void setupRestApiContextHandler(WebAppContext webapp,
     webapp.setInitParameter("shiroConfigLocations",
         new File(conf.getShiroPath()).toURI().toString());
 
-    webapp.addFilter(org.apache.shiro.web.servlet.ShiroFilter.class, "/*",
+    webapp.addFilter(org.apache.shiro.web.servlet.ShiroFilter.class, "/api/*",
         EnumSet.allOf(DispatcherType.class));
 
     webapp.addEventListener(new org.apache.shiro.web.env.EnvironmentLoaderListener());

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -374,13 +374,13 @@ protected void describeMismatchSafely(String item, Description description) {
   //Create new Setting and return Setting ID
   protected String createTempSetting(String tempName)
       throws IOException, RepositoryException {
-    InterpreterGroup interpreterGroup = ZeppelinServer.notebook.getInterpreterFactory()
+    InterpreterSetting setting = ZeppelinServer.notebook.getInterpreterFactory()
         .add(tempName,
             "newGroup",
             new LinkedList<Dependency>(),
             new InterpreterOption(false),
             new Properties());
-    return interpreterGroup.getId();
+    return setting.id();
   }
 
   protected TypeSafeMatcher<? super JsonElement> hasRootElementNamed(final String memberName) {

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -95,7 +95,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr
     List<InterpreterSetting> settings = note1.getNoteReplLoader().getInterpreterSettings();
     for (InterpreterSetting setting : settings) {
       if (setting.getName().equals("md")) {
-        interpreterGroup = setting.getInterpreterGroup();
+        interpreterGroup = setting.getInterpreterGroup("sharedProcess");
         break;
       }
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -405,7 +405,7 @@ private void snapshotAngularObjectRegistry() {
     }
 
     for (InterpreterSetting setting : settings) {
-      InterpreterGroup intpGroup = setting.getInterpreterGroup();
+      InterpreterGroup intpGroup = setting.getInterpreterGroup(id);
       AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();
       angularObjects.put(intpGroup.getId(), registry.getAllWithGlobal(id));
     }
@@ -420,7 +420,7 @@ private void removeAllAngularObjectInParagraph(String paragraphId) {
     }
 
     for (InterpreterSetting setting : settings) {
-      InterpreterGroup intpGroup = setting.getInterpreterGroup();
+      InterpreterGroup intpGroup = setting.getInterpreterGroup(id);
       AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();
 
       if (registry instanceof RemoteAngularObjectRegistry) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -290,7 +290,7 @@ public void removeNote(String id) {
 
     // remove from all interpreter instance's angular object registry
     for (InterpreterSetting settings : replFactory.get()) {
-      AngularObjectRegistry registry = settings.getInterpreterGroup().getAngularObjectRegistry();
+      AngularObjectRegistry registry = settings.getInterpreterGroup(id).getAngularObjectRegistry();
       if (registry instanceof RemoteAngularObjectRegistry) {
         // remove paragraph scope object
         for (Paragraph p : note.getParagraphs()) {
@@ -380,7 +380,7 @@ private Note loadNoteFromRepo(String id) {
       SnapshotAngularObject snapshot = angularObjectSnapshot.get(name);
       List<InterpreterSetting> settings = replFactory.get();
       for (InterpreterSetting setting : settings) {
-        InterpreterGroup intpGroup = setting.getInterpreterGroup();
+        InterpreterGroup intpGroup = setting.getInterpreterGroup(note.id());
         if (intpGroup.getId().equals(snapshot.getIntpGroupId())) {
           AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();
           String noteId = snapshot.getAngularObject().getNoteId();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -320,8 +320,8 @@ private InterpreterContext getInterpreterContext() {
 
     if (!getNoteReplLoader().getInterpreterSettings().isEmpty()) {
       InterpreterSetting intpGroup = getNoteReplLoader().getInterpreterSettings().get(0);
-      registry = intpGroup.getInterpreterGroup().getAngularObjectRegistry();
-      resourcePool = intpGroup.getInterpreterGroup().getResourcePool();
+      registry = intpGroup.getInterpreterGroup(note.id()).getAngularObjectRegistry();
+      resourcePool = intpGroup.getInterpreterGroup(note.id()).getResourcePool();
     }
 
     List<InterpreterContextRunner> runners = new LinkedList<InterpreterContextRunner>();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -87,8 +87,8 @@ else if(file.isDirectory()){
   public void testBasic() {
     List<String> all = factory.getDefaultInterpreterSettingList();
     InterpreterSetting setting = factory.get(all.get(0));
-    InterpreterGroup interpreterGroup = setting.getInterpreterGroup();
-    factory.createInterpretersForNote(setting, "session");
+    InterpreterGroup interpreterGroup = setting.getInterpreterGroup("sharedProcess");
+    factory.createInterpretersForNote(setting, "sharedProcess", "session");
 
     // get interpreter
     Interpreter repl1 = interpreterGroup.get("session").get(0);
@@ -101,7 +101,7 @@ public void testBasic() {
 
     // restart interpreter
     factory.restart(all.get(0));
-    assertNull(setting.getInterpreterGroup().get("session"));
+    assertNull(setting.getInterpreterGroup("sharedProcess").get("session"));
   }
 
   @Test

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookSocketListener.java
Patch:
@@ -20,7 +20,7 @@
  * NoteboookSocket listener
  */
 public interface NotebookSocketListener {
-  public void onClose(NotebookSocket socket, int code, String message);
-  public void onOpen(NotebookSocket socket);
-  public void onMessage(NotebookSocket socket, String message);
+  void onClose(NotebookSocket socket, int code, String message);
+  void onOpen(NotebookSocket socket);
+  void onMessage(NotebookSocket socket, String message);
 }

File: cassandra/src/test/java/org/apache/zeppelin/cassandra/InterpreterLogicTest.java
Patch:
@@ -302,10 +302,10 @@ public void should_parse_accurate_date() throws Exception {
     }
 
     private <A> scala.collection.immutable.List<A> toScalaList(java.util.List<A> list)  {
-        return scala.collection.JavaConversions.asScalaIterable(list).toList();
+        return scala.collection.JavaConversions.collectionAsScalaIterable(list).toList();
     }
 
     private  <A> java.util.List<A> toJavaList(scala.collection.immutable.List<A> list){
-        return scala.collection.JavaConversions.asJavaList(list);
+        return scala.collection.JavaConversions.seqAsJavaList(list);
     }
 }
\ No newline at end of file

File: spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java
Patch:
@@ -262,7 +262,7 @@ public int getProgress(InterpreterContext context) {
   public List<String> completion(String buf, int cursor) {
     ScalaCompleter c = completor.completer();
     Candidates ret = c.complete(buf, cursor);
-    return scala.collection.JavaConversions.asJavaList(ret.candidates());
+    return scala.collection.JavaConversions.seqAsJavaList(ret.candidates());
   }
 
   private List<File> currentClassPath() {

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java
Patch:
@@ -19,7 +19,7 @@
 
 import static scala.collection.JavaConversions.asJavaCollection;
 import static scala.collection.JavaConversions.asJavaIterable;
-import static scala.collection.JavaConversions.asScalaIterable;
+import static scala.collection.JavaConversions.collectionAsScalaIterable;
 
 import java.io.IOException;
 import java.lang.reflect.InvocationTargetException;
@@ -95,13 +95,13 @@ public scala.collection.Iterable<Object> checkbox(String name,
     for (Tuple2<Object, String> option : asJavaIterable(options)) {
       allChecked.add(option._1());
     }
-    return checkbox(name, asScalaIterable(allChecked), options);
+    return checkbox(name, collectionAsScalaIterable(allChecked), options);
   }
 
   public scala.collection.Iterable<Object> checkbox(String name,
       scala.collection.Iterable<Object> defaultChecked,
       scala.collection.Iterable<Tuple2<Object, String>> options) {
-    return asScalaIterable(gui.checkbox(name, asJavaCollection(defaultChecked),
+    return collectionAsScalaIterable(gui.checkbox(name, asJavaCollection(defaultChecked),
       tuplesToParamOptions(options)));
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NotebookAuthorization.java
Patch:
@@ -116,6 +116,7 @@ public void setOwners(String noteId, Set<String> entities) {
       if (existingEntities == null) {
         noteAuthInfo.put("owners", new LinkedHashSet(entities));
       } else {
+        existingEntities.clear();
         existingEntities.addAll(entities);
       }
     }
@@ -135,6 +136,7 @@ public void setReaders(String noteId, Set<String> entities) {
       if (existingEntities == null) {
         noteAuthInfo.put("readers", new LinkedHashSet(entities));
       } else {
+        existingEntities.clear();
         existingEntities.addAll(entities);
       }
     }
@@ -154,6 +156,7 @@ public void setWriters(String noteId, Set<String> entities) {
       if (existingEntities == null) {
         noteAuthInfo.put("writers", new LinkedHashSet(entities));
       } else {
+        existingEntities.clear();
         existingEntities.addAll(entities);
       }
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -167,7 +167,9 @@ public Paragraph addParagraph() {
    * @param srcParagraph
    */
   public void addCloneParagraph(Paragraph srcParagraph) {
-    Paragraph newParagraph = new Paragraph(this, this, replLoader);
+
+    // Keep paragraph original ID
+    final Paragraph newParagraph = new Paragraph(srcParagraph.getId(), this, this, replLoader);
 
     Map<String, Object> config = new HashMap<>(srcParagraph.getConfig());
     Map<String, Object> param = new HashMap<>(srcParagraph.settings.getParams());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -322,7 +322,9 @@ public void testCloneNote() throws IOException, CloneNotSupportedException,
     Note cloneNote = notebook.cloneNote(note.getId(), "clone note");
     Paragraph cp = cloneNote.paragraphs.get(0);
     assertEquals(cp.getStatus(), Status.READY);
-    assertNotEquals(cp.getId(), p.getId());
+
+    // Keep same ParagraphID
+    assertEquals(cp.getId(), p.getId());
     assertEquals(cp.text, p.text);
     assertEquals(cp.getResult().message(), p.getResult().message());
   }

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -254,7 +254,7 @@ private DepInterpreter getDepInterpreter() {
   }
 
   public SparkContext createSparkContext() {
-    System.err.println("------ Create new SparkContext " + getProperty("master") + " -------");
+    logger.info("------ Create new SparkContext {} -------", getProperty("master"));
 
     String execUri = System.getenv("SPARK_EXECUTOR_URI");
     String[] jars = SparkILoop.getAddedJars();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -451,6 +451,8 @@ public static enum ConfVars {
     ZEPPELIN_WAR_TEMPDIR("zeppelin.war.tempdir", "webapps"),
     ZEPPELIN_INTERPRETERS("zeppelin.interpreters", "org.apache.zeppelin.spark.SparkInterpreter,"
         + "org.apache.zeppelin.spark.PySparkInterpreter,"
+        + "org.apache.zeppelin.rinterpreter.RRepl,"
+        + "org.apache.zeppelin.rinterpreter.KnitR,"
         + "org.apache.zeppelin.spark.SparkRInterpreter,"
         + "org.apache.zeppelin.spark.SparkSqlInterpreter,"
         + "org.apache.zeppelin.spark.DepInterpreter,"
@@ -473,9 +475,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.elasticsearch.ElasticsearchInterpreter,"
         + "org.apache.zeppelin.scalding.ScaldingInterpreter,"
         + "org.apache.zeppelin.jdbc.JDBCInterpreter,"
-        + "org.apache.zeppelin.hbase.HbaseInterpreter,"
-        + "org.apache.zeppelin.rinterpreter.RRepl,"
-        + "org.apache.zeppelin.rinterpreter.KnitR"),
+        + "org.apache.zeppelin.hbase.HbaseInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -451,6 +451,7 @@ public static enum ConfVars {
     ZEPPELIN_WAR_TEMPDIR("zeppelin.war.tempdir", "webapps"),
     ZEPPELIN_INTERPRETERS("zeppelin.interpreters", "org.apache.zeppelin.spark.SparkInterpreter,"
         + "org.apache.zeppelin.spark.PySparkInterpreter,"
+        + "org.apache.zeppelin.spark.SparkRInterpreter,"
         + "org.apache.zeppelin.spark.SparkSqlInterpreter,"
         + "org.apache.zeppelin.spark.DepInterpreter,"
         + "org.apache.zeppelin.markdown.Markdown,"

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -472,7 +472,9 @@ public static enum ConfVars {
         + "org.apache.zeppelin.elasticsearch.ElasticsearchInterpreter,"
         + "org.apache.zeppelin.scalding.ScaldingInterpreter,"
         + "org.apache.zeppelin.jdbc.JDBCInterpreter,"
-        + "org.apache.zeppelin.hbase.HbaseInterpreter"),
+        + "org.apache.zeppelin.hbase.HbaseInterpreter,"
+        + "org.apache.zeppelin.rinterpreter.RRepl,"
+        + "org.apache.zeppelin.rinterpreter.KnitR"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),

File: hbase/src/test/java/org/apache/zeppelin/hbase/HbaseInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public static void setUp() throws NullPointerException {
     Properties properties = new Properties();
     properties.put("hbase.home", "");
     properties.put("hbase.ruby.sources", "");
-    properties.put("hbase.test.mode", "true");
+    properties.put("zeppelin.hbase.test.mode", "true");
 
     hbaseInterpreter = new HbaseInterpreter(properties);
     hbaseInterpreter.open();
@@ -72,4 +72,4 @@ public void testException() {
     assertEquals(InterpreterResult.Code.ERROR, result.code());
     assertEquals("(NameError) undefined local variable or method `joke' for main:Object", result.message());
   }
-}
\ No newline at end of file
+}

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -290,6 +290,9 @@ public Set<Object> getSingletons() {
     SecurityRestApi securityApi = new SecurityRestApi();
     singletons.add(securityApi);
 
+    LoginRestApi loginRestApi = new LoginRestApi();
+    singletons.add(loginRestApi);
+
     ConfigurationsRestApi settingsApi = new ConfigurationsRestApi(notebook);
     singletons.add(settingsApi);
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -627,7 +627,8 @@ public void putNoteInterpreterSettingBinding(String noteId,
 
   public void removeNoteInterpreterSettingBinding(String noteId) {
     synchronized (interpreterSettings) {
-      List<String> settingIds = interpreterBindings.remove(noteId);
+      List<String> settingIds = (interpreterBindings.containsKey(noteId) ?
+          interpreterBindings.remove(noteId) : Collections.<String>emptyList());
       for (String settingId : settingIds) {
         this.removeInterpretersForNote(get(settingId), noteId);
       }

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -173,8 +173,9 @@ private static Server setupJettyServer(ZeppelinConfiguration conf) {
 
   private static ServletContextHandler setupNotebookServer(ZeppelinConfiguration conf) {
     notebookWsServer = new NotebookServer();
+    String maxTextMessageSize = conf.getWebsocketMaxTextMessageSize();
     final ServletHolder servletHolder = new ServletHolder(notebookWsServer);
-    servletHolder.setInitParameter("maxTextMessageSize", "1024000");
+    servletHolder.setInitParameter("maxTextMessageSize", maxTextMessageSize);
 
     final ServletContextHandler cxfContext = new ServletContextHandler(
         ServletContextHandler.SESSIONS);

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ParagraphActionsIT.java
Patch:
@@ -418,4 +418,4 @@ public void testShowAndHideLineNumbers() throws Exception {
   }
 
 
-}
\ No newline at end of file
+}

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -481,7 +481,9 @@ public static enum ConfVars {
     ZEPPELIN_NOTEBOOK_AZURE_SHARE("zeppelin.notebook.azure.share", "zeppelin"),
     ZEPPELIN_NOTEBOOK_AZURE_USER("zeppelin.notebook.azure.user", "user"),
     ZEPPELIN_NOTEBOOK_STORAGE("zeppelin.notebook.storage", VFSNotebookRepo.class.getName()),
-    ZEPPELIN_INTERPRETER_REMOTE_RUNNER("zeppelin.interpreter.remoterunner", "bin/interpreter.sh"),
+    ZEPPELIN_INTERPRETER_REMOTE_RUNNER("zeppelin.interpreter.remoterunner",
+        System.getProperty("os.name")
+                .startsWith("Windows") ? "bin/interpreter.cmd" : "bin/interpreter.sh"),
     // Decide when new note is created, interpreter settings will be binded automatically or not.
     ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING("zeppelin.notebook.autoInterpreterBinding", true),
     ZEPPELIN_CONF_DIR("zeppelin.conf.dir", "conf"),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/AzureNotebookRepo.java
Patch:
@@ -88,10 +88,9 @@ public List<NoteInfo> list() throws IOException {
           }
         } catch (StorageException | URISyntaxException e) {
           String msg = "Error enumerating notebooks from Azure storage";
-
           LOG.error(msg, e);
-
-          throw new IOException(msg, e);
+        } catch (Exception e) {
+          LOG.error(e.getMessage(), e);
         }
       }
     }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java
Patch:
@@ -102,7 +102,7 @@ public List<NoteInfo> list() throws IOException {
               if (info != null) {
                 infos.add(info);
               }
-            } catch (IOException e) {
+            } catch (Exception e) {
               LOG.error("Can't read note ", e);
             }
           }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -134,7 +134,7 @@ public List<NoteInfo> list() throws IOException {
         if (info != null) {
           infos.add(info);
         }
-      } catch (IOException e) {
+      } catch (Exception e) {
         logger.error("Can't read note " + f.getName().toString(), e);
       }
     }

File: zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -34,6 +34,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.net.URL;
+import java.util.concurrent.TimeUnit;
 
 import static org.junit.Assert.fail;
 
@@ -114,6 +115,8 @@ public static WebDriver getWebDriver() {
 
     long start = System.currentTimeMillis();
     boolean loaded = false;
+    driver.manage().timeouts().implicitlyWait(AbstractZeppelinIT.MAX_IMPLICIT_WAIT,
+        TimeUnit.SECONDS);
     driver.get(url);
 
     while (System.currentTimeMillis() - start < 60 * 1000) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/Message.java
Patch:
@@ -105,6 +105,8 @@ public static enum OP {
 
     ANGULAR_OBJECT_CLIENT_BIND,  // [c-s] angular object updated from AngularJS z object
 
+    ANGULAR_OBJECT_CLIENT_UNBIND,  // [c-s] angular object unbind from AngularJS z object
+
     LIST_CONFIGURATIONS, // [c-s] ask all key/value pairs of configurations
     CONFIGURATIONS_INFO, // [s-c] all key/value pairs of configurations
                   // @param settings serialized Map<String, String> object

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectRegistry.java
Patch:
@@ -63,7 +63,7 @@ public AngularObject addAndNotifyRemoteProcess(String name, Object o, String not
     Gson gson = new Gson();
     RemoteInterpreterProcess remoteInterpreterProcess = getRemoteInterpreterProcess();
     if (!remoteInterpreterProcess.isRunning()) {
-      return null;
+      return super.add(name, o, noteId, paragraphId, true);
     }
 
     Client client = null;
@@ -97,7 +97,7 @@ public AngularObject removeAndNotifyRemoteProcess(String name, String noteId, St
           paragraphId) {
     RemoteInterpreterProcess remoteInterpreterProcess = getRemoteInterpreterProcess();
     if (!remoteInterpreterProcess.isRunning()) {
-      return null;
+      return super.remove(name, noteId, paragraphId);
     }
 
     Client client = null;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -450,6 +450,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.shell.ShellInterpreter,"
         + "org.apache.zeppelin.hive.HiveInterpreter,"
         + "org.apache.zeppelin.alluxio.AlluxioInterpreter,"
+        + "org.apache.zeppelin.file.HDFSFileInterpreter,"
         + "org.apache.zeppelin.phoenix.PhoenixInterpreter,"
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.tajo.TajoInterpreter,"

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java
Patch:
@@ -199,7 +199,7 @@ private ResourceSet getAllResourcePoolExcept() {
         boolean broken = false;
         try {
           client = remoteInterpreterProcess.getClient();
-          List<String> resourceList = client.resoucePoolGetAll();
+          List<String> resourceList = client.resourcePoolGetAll();
           Gson gson = new Gson();
           for (String res : resourceList) {
             resourceSet.add(gson.fromJson(res, Resource.class));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -646,7 +646,7 @@ public void resourceResponseGet(String resourceId, ByteBuffer object) throws TEx
   }
 
   @Override
-  public List<String> resoucePoolGetAll() throws TException {
+  public List<String> resourcePoolGetAll() throws TException {
     logger.debug("Request getAll from ZeppelinServer");
 
     ResourceSet resourceSet = resourcePool.getAll(false);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/resource/ResourcePoolUtils.java
Patch:
@@ -54,7 +54,7 @@ public static ResourceSet getAllResourcesExcept(String interpreterGroupExcludsio
         boolean broken = false;
         try {
           client = remoteInterpreterProcess.getClient();
-          List<String> resourceList = client.resoucePoolGetAll();
+          List<String> resourceList = client.resourcePoolGetAll();
           Gson gson = new Gson();
           for (String res : resourceList) {
             resourceSet.add(gson.fromJson(res, Resource.class));
@@ -103,7 +103,7 @@ public static void removeResourcesBelongsToParagraph(String noteId, String parag
         boolean broken = false;
         try {
           client = remoteInterpreterProcess.getClient();
-          List<String> resourceList = client.resoucePoolGetAll();
+          List<String> resourceList = client.resourcePoolGetAll();
           Gson gson = new Gson();
           for (String res : resourceList) {
             resourceSet.add(gson.fromJson(res, Resource.class));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-16")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-16")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.3)
+ * Autogenerated by Thrift Compiler (0.9.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-16")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-3-4")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -434,6 +434,8 @@ private InterpreterGroup createInterpreterGroup(String id, InterpreterOption opt
       angularObjectRegistry = new AngularObjectRegistry(
           id,
           angularObjectRegistryListener);
+
+      // TODO(moon) : create distributed resource pool for local interpreters and set
     }
 
     interpreterGroup.setAngularObjectRegistry(angularObjectRegistry);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -40,6 +40,7 @@
 import org.apache.zeppelin.interpreter.remote.RemoteAngularObjectRegistry;
 import org.apache.zeppelin.notebook.repo.NotebookRepo;
 import org.apache.zeppelin.notebook.repo.NotebookRepoSync;
+import org.apache.zeppelin.resource.ResourcePoolUtils;
 import org.apache.zeppelin.scheduler.SchedulerFactory;
 import org.apache.zeppelin.search.SearchService;
 import org.quartz.CronScheduleBuilder;
@@ -307,6 +308,8 @@ public void removeNote(String id) {
       }
     }
 
+    ResourcePoolUtils.removeResourcesBelongsToNote(id);
+
     try {
       note.unpersist();
     } catch (IOException e) {

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -93,7 +93,7 @@ public class SparkInterpreter extends Interpreter {
           getSystemDefault("MASTER", "spark.master", "local[*]"),
           "Spark master uri. ex) spark://masterhost:7077")
         .add("spark.executor.memory",
-          getSystemDefault(null, "spark.executor.memory", "512m"),
+          getSystemDefault(null, "spark.executor.memory", ""),
           "Executor memory per worker instance. ex) 512m, 32g")
         .add("spark.cores.max",
           getSystemDefault(null, "spark.cores.max", ""),

File: zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -106,8 +106,8 @@ public static WebDriver getWebDriver() {
     }
 
     String url;
-    if (System.getProperty("url") != null) {
-      url = System.getProperty("url");
+    if (System.getenv("url") != null) {
+      url = System.getenv("url");
     } else {
       url = "http://localhost:8080";
     }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -80,7 +80,7 @@ public void setUp() throws Exception {
 
     SearchService search = mock(SearchService.class);
     notebookRepo = new VFSNotebookRepo(conf);
-    notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, this, search);
+    notebook = new Notebook(conf, notebookRepo, schedulerFactory, factory, this, search, null);
   }
 
   @After

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -664,6 +664,7 @@ public void setPropertyAndRestart(String id,
         intpsetting.getInterpreterGroup().destroy();
 
         intpsetting.setOption(option);
+        intpsetting.setProperties(properties);
         intpsetting.setDependencies(dependencies);
 
         InterpreterGroup interpreterGroup = createInterpreterGroup(intpsetting.id(), option);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -339,7 +339,7 @@ private void updateParagraphResult(InterpreterOutput out) {
   }
 
   static class ParagraphRunner extends InterpreterContextRunner {
-    private Note note;
+    private transient Note note;
 
     public ParagraphRunner(Note note, String noteId, String paragraphId) {
       super(noteId, paragraphId);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -131,6 +131,7 @@ public synchronized void init() {
     interpreterProcess.reference(getInterpreterGroup());
     interpreterProcess.setMaxPoolSize(
         Math.max(this.maxPoolSize, interpreterProcess.getMaxPoolSize()));
+    String groupId = getInterpreterGroup().getId();
 
     synchronized (interpreterProcess) {
       Client client = null;
@@ -144,7 +145,7 @@ public synchronized void init() {
       try {
         logger.info("Create remote interpreter {}", getClassName());
         property.put("zeppelin.interpreter.localRepo", localRepoPath);
-        client.createInterpreter(getInterpreterGroup().getId(), noteId,
+        client.createInterpreter(groupId, noteId,
             getClassName(), (Map) property);
       } catch (TException e) {
         broken = true;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -445,7 +445,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.angular.AngularInterpreter,"
         + "org.apache.zeppelin.shell.ShellInterpreter,"
         + "org.apache.zeppelin.hive.HiveInterpreter,"
-        + "org.apache.zeppelin.tachyon.TachyonInterpreter,"
+        + "org.apache.zeppelin.alluxio.AlluxioInterpreter,"
         + "org.apache.zeppelin.phoenix.PhoenixInterpreter,"
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.tajo.TajoInterpreter,"

File: spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
Patch:
@@ -52,8 +52,9 @@ public void setUp() throws Exception {
     dep.open();
 
     InterpreterGroup intpGroup = new InterpreterGroup();
-    intpGroup.add(new SparkInterpreter(p));
-    intpGroup.add(dep);
+    intpGroup.put("note", new LinkedList<Interpreter>());
+    intpGroup.get("note").add(new SparkInterpreter(p));
+    intpGroup.get("note").add(dep);
     dep.setInterpreterGroup(intpGroup);
 
     context = new InterpreterContext("note", "id", "title", "text", new AuthenticationInfo(),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java
Patch:
@@ -244,7 +244,8 @@ private void sendResourceResponseGet(ResourceId resourceId, Object o) {
   }
 
   private Object getResource(ResourceId resourceId) {
-    InterpreterGroup intpGroup = InterpreterGroup.get(resourceId.getResourcePoolId());
+    InterpreterGroup intpGroup = InterpreterGroup.getByInterpreterGroupId(
+        resourceId.getResourcePoolId());
     if (intpGroup == null) {
       return null;
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerFactory.java
Patch:
@@ -86,6 +86,7 @@ public Scheduler createOrGetParallelScheduler(String name, int maxConcurrency) {
 
   public Scheduler createOrGetRemoteScheduler(
       String name,
+      String noteId,
       RemoteInterpreterProcess interpreterProcess,
       int maxConcurrency) {
 
@@ -94,6 +95,7 @@ public Scheduler createOrGetRemoteScheduler(
         Scheduler s = new RemoteScheduler(
             name,
             executor,
+            noteId,
             interpreterProcess,
             this,
             maxConcurrency);

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -61,6 +61,7 @@ public void setUp() throws Exception {
 
     intp = new RemoteInterpreter(
         p,
+        "note",
         MockInterpreterAngular.class.getName(),
         new File("../bin/interpreter.sh").getAbsolutePath(),
         "fake",
@@ -70,7 +71,8 @@ public void setUp() throws Exception {
         null
     );
 
-    intpGroup.add(intp);
+    intpGroup.put("note", new LinkedList<Interpreter>());
+    intpGroup.get("note").add(intp);
     intp.setInterpreterGroup(intpGroup);
 
     context = new InterpreterContext(

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -165,7 +165,7 @@ public Response bind(@PathParam("noteId") String noteId) {
           setting.id(),
           setting.getName(),
           setting.getGroup(),
-          setting.getInterpreterGroup(),
+          setting.getInterpreterInfos(),
           true)
       );
     }
@@ -185,7 +185,7 @@ public Response bind(@PathParam("noteId") String noteId) {
             setting.id(),
             setting.getName(),
             setting.getGroup(),
-            setting.getInterpreterGroup(),
+            setting.getInterpreterInfos(),
             false)
         );
       }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -244,7 +244,8 @@ public void bindInterpretersToNote(String id,
     Note note = getNote(id);
     if (note != null) {
       note.getNoteReplLoader().setInterpreters(interpreterSettingIds);
-      replFactory.putNoteInterpreterSettingBinding(id, interpreterSettingIds);
+      // comment out while note.getNoteReplLoader().setInterpreters(...) do the same
+      // replFactory.putNoteInterpreterSettingBinding(id, interpreterSettingIds);
     }
   }
 
@@ -278,6 +279,7 @@ public void removeNote(String id) {
     synchronized (notes) {
       note = notes.remove(id);
     }
+    replFactory.removeNoteInterpreterSettingBinding(id);
     notebookIndex.deleteIndexDocs(note);
 
     // remove from all interpreter instance's angular object registry

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/Message.java
Patch:
@@ -96,6 +96,7 @@ public static enum OP {
     PARAGRAPH_APPEND_OUTPUT,  // [s-c] append output
     PARAGRAPH_UPDATE_OUTPUT,  // [s-c] update (replace) output
     PING,
+    AUTH_INFO,
 
     ANGULAR_OBJECT_UPDATE,  // [s-c] add/update angular object
     ANGULAR_OBJECT_REMOVE,  // [s-c] add angular object del
@@ -116,6 +117,7 @@ public static enum OP {
   public Map<String, Object> data = new HashMap<String, Object>();
   public String ticket = "anonymous";
   public String principal = "anonymous";
+  public String roles = "";
 
   public Message(OP op) {
     this.op = op;

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -140,7 +140,7 @@ public void testImportNotebook() throws IOException {
     Message messageReceived = notebookServer.deserializeMessage(msg);
     Note note = null;
     try {
-      note = notebookServer.importNote(null, notebook, messageReceived);
+      note = notebookServer.importNote(null, null, notebook, messageReceived);
     } catch (NullPointerException e) {
       //broadcastNoteList(); failed nothing to worry.
       LOG.error("Exception in NotebookServerTest while testImportNotebook, failed nothing to " +

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -35,7 +35,7 @@
  * If you want to implement new Zeppelin interpreter, extend this class
  *
  * Please see,
- * http://zeppelin.incubator.apache.org/docs/development/writingzeppelininterpreter.html
+ * https://zeppelin.incubator.apache.org/docs/latest/development/writingzeppelininterpreter.html
  *
  * open(), close(), interpreter() is three the most important method you need to implement.
  * cancel(), getProgress(), completion() is good to have

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -19,6 +19,8 @@
 
 
 import com.google.common.base.Function;
+import org.apache.commons.codec.binary.Base64;
+import org.apache.commons.io.FileUtils;
 import org.openqa.selenium.*;
 import org.openqa.selenium.support.ui.ExpectedConditions;
 import org.openqa.selenium.support.ui.FluentWait;
@@ -170,6 +172,7 @@ public String toString() {
   protected void handleException(String message, Exception e) throws Exception {
     LOG.error(message, e);
     File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
+    LOG.error("ScreenShot::\ndata:image/png;base64," + new String(Base64.encodeBase64(FileUtils.readFileToByteArray(scrFile))));
     throw e;
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -121,7 +121,7 @@ public void testAngularDisplay() throws Exception {
 
       // check expected text
       waitForText("myVar=1", By.xpath(
-              getParagraphXPath(3) + "//div[@ng-bind=\"paragraph.result.msg\"]"));
+              getParagraphXPath(3) + "//div[contains(@id,\"_text\") and @class=\"text\"]"));
 
       /*
        * Click element
@@ -162,7 +162,7 @@ public void testAngularDisplay() throws Exception {
 
       // check expected text by watcher
       waitForText("myVar=3", By.xpath(
-              getParagraphXPath(3) + "//div[@ng-bind=\"paragraph.result.msg\"]"));
+              getParagraphXPath(3) + "//div[contains(@id,\"_text\") and @class=\"text\"]"));
 
       /*
        * Unbind
@@ -196,7 +196,7 @@ public void testAngularDisplay() throws Exception {
           "//div[@class='modal-footer']//button[contains(.,'OK')]")).click();
       sleep(100, true);
 
-      System.out.println("testCreateNotebook Test executed");
+      LOG.info("testCreateNotebook Test executed");
     } catch (Exception e) {
       handleException("Exception in ZeppelinIT while testAngularDisplay ", e);
     }

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public static void setUp() {
     Properties p = new Properties();
     flink = new FlinkInterpreter(p);
     flink.open();
-    context = new InterpreterContext(null, null, null, null, null, null, null, null, null, null);
+    context = new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null);
   }
 
   @AfterClass

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public class IgniteInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-          new InterpreterContext(null, null, null, null, null, null, null, null, null, null);
+      new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null);
 
   private IgniteInterpreter intp;
   private Ignite ignite;

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java
Patch:
@@ -44,7 +44,7 @@ public class IgniteSqlInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-          new InterpreterContext(null, null, null, null, null, null, null, null, null, null);
+      new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null);
 
   private Ignite ignite;
   private IgniteSqlInterpreter intp;

File: scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import org.apache.zeppelin.display.AngularObjectRegistry;
 import org.apache.zeppelin.display.GUI;
+import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterContextRunner;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
@@ -62,7 +63,7 @@ public void setUp() throws Exception {
     }
 
     InterpreterGroup intpGroup = new InterpreterGroup();
-    context = new InterpreterContext("note", "id", "title", "text",
+    context = new InterpreterContext("note", "id", "title", "text", new AuthenticationInfo(),
         new HashMap<String, Object>(), new GUI(), new AngularObjectRegistry(
             intpGroup.getId(), null), null,
         new LinkedList<InterpreterContextRunner>(), null);

File: spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -24,10 +24,10 @@
 import java.util.Properties;
 
 import org.apache.zeppelin.display.AngularObjectRegistry;
+import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.display.GUI;
 import org.apache.zeppelin.interpreter.*;
 import org.apache.zeppelin.interpreter.InterpreterResult.Type;
-import org.apache.zeppelin.resource.LocalResourcePool;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -65,7 +65,8 @@ public void setUp() throws Exception {
       sql.setInterpreterGroup(intpGroup);
       sql.open();
     }
-    context = new InterpreterContext("note", "id", "title", "text", new HashMap<String, Object>(), new GUI(),
+    context = new InterpreterContext("note", "id", "title", "text", new AuthenticationInfo(),
+        new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         null,
         new LinkedList<InterpreterContextRunner>(), new InterpreterOutput(new InterpreterOutputListener() {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -364,6 +364,7 @@ private RemoteInterpreterContext convert(InterpreterContext ic) {
         ic.getParagraphId(),
         ic.getParagraphTitle(),
         ic.getParagraphText(),
+        gson.toJson(ic.getAuthenticationInfo()),
         gson.toJson(ic.getConfig()),
         gson.toJson(ic.getGui()),
         gson.toJson(ic.getRunners()));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-24")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-16")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEventType.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -16,7 +16,7 @@
  * limitations under the License.
  */
 /**
- * Autogenerated by Thrift Compiler (0.9.2)
+ * Autogenerated by Thrift Compiler (0.9.3)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-24")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-02-16")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java
Patch:
@@ -27,7 +27,7 @@ public class InterpreterContextTest {
   public void testThreadLocal() {
     assertNull(InterpreterContext.get());
 
-    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null, null));
+    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null, null, null));
     assertNotNull(InterpreterContext.get());
 
     InterpreterContext.remove();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterOutputTestStream.java
Patch:
@@ -18,6 +18,7 @@
 package org.apache.zeppelin.interpreter.remote;
 
 import org.apache.zeppelin.display.AngularObjectRegistry;
+import org.apache.zeppelin.user.AuthenticationInfo;
 import org.apache.zeppelin.display.GUI;
 import org.apache.zeppelin.interpreter.*;
 import org.apache.zeppelin.interpreter.remote.mock.MockInterpreterOutputStream;
@@ -75,6 +76,7 @@ private InterpreterContext createInterpreterContext() {
         "id",
         "title",
         "text",
+        new AuthenticationInfo(),
         new HashMap<String, Object>(),
         new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),

File: zeppelin-server/src/test/java/org/apache/zeppelin/integration/ZeppelinIT.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.zeppelin.integration;
 
+import org.apache.commons.codec.binary.Base64;
+import org.apache.commons.io.FileUtils;
 import org.apache.zeppelin.AbstractZeppelinIT;
 import org.apache.zeppelin.WebDriverManager;
 import org.junit.After;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -62,7 +62,7 @@ public void setUp() throws Exception {
     conf = new ZeppelinConfiguration();
     depResolver = new DependencyResolver(tmpDir.getAbsolutePath() + "/local-repo");
     factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, depResolver);
-    context = new InterpreterContext("note", "id", "title", "text", null, null, null, null, null, null);
+    context = new InterpreterContext("note", "id", "title", "text", null, null, null, null, null, null, null);
 
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -349,6 +349,9 @@ public List<Map<String, String>> generateParagraphsInfo (){
   public void runAll() {
     synchronized (paragraphs) {
       for (Paragraph p : paragraphs) {
+        if (!p.isEnabled()) {
+          continue;
+        }
         p.setNoteReplLoader(replLoader);
         p.setListener(jobListenerFactory.getParagraphJobListener(this));
         Interpreter intp = replLoader.get(p.getRequiredReplName());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/S3NotebookRepo.java
Patch:
@@ -193,6 +193,6 @@ public void close() {
   @Override
   public void checkpoint(String noteId, String checkPointName) throws IOException {
     // no-op
-    LOG.info("Checkpoint feature isn't suported in {}", this.getClass().toString());
+    LOG.info("Checkpoint feature isn't supported in {}", this.getClass().toString());
   }
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -247,7 +247,7 @@ public void close() {
   @Override
   public void checkpoint(String noteId, String checkPointName) throws IOException {
     // no-op
-    logger.info("Checkpoint feature isn't suported in {}", this.getClass().toString());
+    logger.info("Checkpoint feature isn't supported in {}", this.getClass().toString());
   }
 
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -472,6 +472,9 @@ public static enum ConfVars {
     ZEPPELIN_NOTEBOOK_HOMESCREEN_HIDE("zeppelin.notebook.homescreen.hide", false),
     ZEPPELIN_NOTEBOOK_S3_BUCKET("zeppelin.notebook.s3.bucket", "zeppelin"),
     ZEPPELIN_NOTEBOOK_S3_USER("zeppelin.notebook.s3.user", "user"),
+    ZEPPELIN_NOTEBOOK_AZURE_CONNECTION_STRING("zeppelin.notebook.azure.connectionString", null),
+    ZEPPELIN_NOTEBOOK_AZURE_SHARE("zeppelin.notebook.azure.share", "zeppelin"),
+    ZEPPELIN_NOTEBOOK_AZURE_USER("zeppelin.notebook.azure.user", "user"),
     ZEPPELIN_NOTEBOOK_STORAGE("zeppelin.notebook.storage", VFSNotebookRepo.class.getName()),
     ZEPPELIN_INTERPRETER_REMOTE_RUNNER("zeppelin.interpreter.remoterunner", "bin/interpreter.sh"),
     // Decide when new note is created, interpreter settings will be binded automatically or not.

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -97,7 +97,7 @@ public WebElement apply(WebDriver driver) {
   }
 
   protected boolean endToEndTestEnabled() {
-    return null != System.getenv("CI");
+    return null != System.getenv("TEST_SELENIUM");
   }
 
   protected void createNewNote() {

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -72,7 +72,7 @@ public InterpreterResult interpret(String cmd, InterpreterContext contextInterpr
     DefaultExecutor executor = new DefaultExecutor();
     ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
     ByteArrayOutputStream errorStream = new ByteArrayOutputStream();
-    executor.setStreamHandler(new PumpStreamHandler(outputStream, errorStream));
+    executor.setStreamHandler(new PumpStreamHandler(contextInterpreter.out, errorStream));
     executor.setWatchdog(new ExecuteWatchdog(commandTimeOut));
 
     Job runningJob = getRunningJob(contextInterpreter.getParagraphId());
@@ -82,7 +82,7 @@ public InterpreterResult interpret(String cmd, InterpreterContext contextInterpr
       int exitVal = executor.execute(cmdLine);
       logger.info("Paragraph " + contextInterpreter.getParagraphId()
           + "return with exit value: " + exitVal);
-      return new InterpreterResult(InterpreterResult.Code.SUCCESS, outputStream.toString());
+      return new InterpreterResult(InterpreterResult.Code.SUCCESS, null);
     } catch (ExecuteException e) {
       int exitValue = e.getExitValue();
       logger.error("Can not run " + cmd, e);
@@ -94,7 +94,7 @@ public InterpreterResult interpret(String cmd, InterpreterContext contextInterpr
         logger.info("The paragraph " + contextInterpreter.getParagraphId()
             + " stopped executing: " + msg);
       }
-      msg += "Exitvalue: " + exitValue;
+      msg += "ExitValue: " + exitValue;
       return new InterpreterResult(code, msg);
     } catch (IOException e) {
       logger.error("Can not run " + cmd, e);

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -87,7 +87,9 @@ public class SparkInterpreter extends Interpreter {
         "spark",
         SparkInterpreter.class.getName(),
         new InterpreterPropertyBuilder()
-            .add("spark.app.name", "Zeppelin", "The name of spark application.")
+            .add("spark.app.name",
+                getSystemDefault("SPARK_APP_NAME", "spark.app.name", "Zeppelin"),
+                "The name of spark application.")
             .add("master",
                 getSystemDefault("MASTER", "spark.master", "local[*]"),
                 "Spark master uri. ex) spark://masterhost:7077")

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -458,7 +458,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.kylin.KylinInterpreter,"
         + "org.apache.zeppelin.elasticsearch.ElasticsearchInterpreter,"
         + "org.apache.zeppelin.scalding.ScaldingInterpreter,"
-        + "org.apache.zeppelin.jdbc.JDBCInterpreter"),
+        + "org.apache.zeppelin.jdbc.JDBCInterpreter,"
+        + "org.apache.zeppelin.hbase.HbaseInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_LOCALREPO("zeppelin.interpreter.localRepo", "local-repo"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public static void setUp() {
     Properties p = new Properties();
     flink = new FlinkInterpreter(p);
     flink.open();
-    context = new InterpreterContext(null, null, null, null, null, null, null, null, null);
+    context = new InterpreterContext(null, null, null, null, null, null, null, null, null, null);
   }
 
   @AfterClass

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public class IgniteInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-          new InterpreterContext(null, null, null, null, null, null, null, null, null);
+          new InterpreterContext(null, null, null, null, null, null, null, null, null, null);
 
   private IgniteInterpreter intp;
   private Ignite ignite;

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java
Patch:
@@ -44,7 +44,7 @@ public class IgniteSqlInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-          new InterpreterContext(null, null, null, null, null, null, null, null, null);
+          new InterpreterContext(null, null, null, null, null, null, null, null, null, null);
 
   private Ignite ignite;
   private IgniteSqlInterpreter intp;

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java
Patch:
@@ -94,7 +94,7 @@ public void testSelectQuery() throws SQLException, IOException {
 
     String sqlQuery = "select * from test_table";
 
-    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext("", "1", "","", null,null,null,null,null));
+    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext("", "1", "","", null,null,null,null,null,null));
 
     assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());
     assertEquals(InterpreterResult.Type.TABLE, interpreterResult.type());
@@ -116,7 +116,7 @@ public void testSelectQueryMaxResult() throws SQLException, IOException {
 
     String sqlQuery = "select * from test_table";
 
-    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext("", "1", "","", null,null,null,null,null));
+    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext("", "1", "","", null,null,null,null,null,null));
 
     assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());
     assertEquals(InterpreterResult.Type.TABLE, interpreterResult.type());

File: scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java
Patch:
@@ -64,7 +64,7 @@ public void setUp() throws Exception {
     InterpreterGroup intpGroup = new InterpreterGroup();
     context = new InterpreterContext("note", "id", "title", "text",
         new HashMap<String, Object>(), new GUI(), new AngularObjectRegistry(
-            intpGroup.getId(), null),
+            intpGroup.getId(), null), null,
         new LinkedList<InterpreterContextRunner>(), null);
   }
 

File: spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
Patch:
@@ -60,6 +60,7 @@ public void setUp() throws Exception {
 
     context = new InterpreterContext("note", "id", "title", "text", new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
+        null,
         new LinkedList<InterpreterContextRunner>(), null);
   }
 

File: spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -79,6 +79,7 @@ public void setUp() throws Exception {
             new HashMap<String, Object>(),
             new GUI(),
             new AngularObjectRegistry(intpGroup.getId(), null),
+            null,
             new LinkedList<InterpreterContextRunner>(),
             new InterpreterOutput(new InterpreterOutputListener() {
               @Override

File: spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.zeppelin.display.GUI;
 import org.apache.zeppelin.interpreter.*;
 import org.apache.zeppelin.interpreter.InterpreterResult.Type;
+import org.apache.zeppelin.resource.LocalResourcePool;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -66,6 +67,7 @@ public void setUp() throws Exception {
     }
     context = new InterpreterContext("note", "id", "title", "text", new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
+        null,
         new LinkedList<InterpreterContextRunner>(), new InterpreterOutput(new InterpreterOutputListener() {
       @Override
       public void onAppend(InterpreterOutput out, byte[] line) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterUtils.java
Patch:
@@ -47,7 +47,8 @@ public static boolean checkIfRemoteEndpointAccessible(String host, int port) {
       discover.close();
       return true;
     } catch (IOException e) {
-      LOGGER.info("Exception in RemoteInterpreterUtils while checkIfRemoteEndpointAccessible", e);
+      // end point is not accessible
+      LOGGER.debug(e.getMessage(), e);
       return false;
     }
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-4")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-24")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-4")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-24")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-4")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-24")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java
Patch:
@@ -27,7 +27,7 @@ public class InterpreterContextTest {
   public void testThreadLocal() {
     assertNull(InterpreterContext.get());
 
-    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null));
+    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null, null));
     assertNotNull(InterpreterContext.get());
 
     InterpreterContext.remove();

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -62,7 +62,7 @@ public void setUp() throws Exception {
     conf = new ZeppelinConfiguration();
     depResolver = new DependencyResolver(tmpDir.getAbsolutePath() + "/local-repo");
     factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, depResolver);
-    context = new InterpreterContext("note", "id", "title", "text", null, null, null, null, null);
+    context = new InterpreterContext("note", "id", "title", "text", null, null, null, null, null, null);
 
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/DependencyContext.java
Patch:
@@ -127,7 +127,7 @@ private List<ArtifactResult> fetchArtifactWithDep(Dependency dep)
     collectRequest.addRepository(mavenCentral);
     collectRequest.addRepository(mavenLocal);
     for (Repository repo : repositories) {
-      RemoteRepository rr = new RemoteRepository(repo.getName(), "default", repo.getUrl());
+      RemoteRepository rr = new RemoteRepository(repo.getId(), "default", repo.getUrl());
       rr.setPolicy(repo.isSnapshot(), null);
       collectRequest.addRepository(rr);
     }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessTest.java
Patch:
@@ -33,7 +33,7 @@ public class RemoteInterpreterProcessTest {
   public void testStartStop() {
     InterpreterGroup intpGroup = new InterpreterGroup();
     RemoteInterpreterProcess rip = new RemoteInterpreterProcess(
-        "../bin/interpreter.sh", "nonexists", new HashMap<String, String>(),
+        "../bin/interpreter.sh", "nonexists", "fakeRepo", new HashMap<String, String>(),
         10 * 1000, null);
     assertFalse(rip.isRunning());
     assertEquals(0, rip.referenceCount());
@@ -50,7 +50,7 @@ public void testStartStop() {
   public void testClientFactory() throws Exception {
     InterpreterGroup intpGroup = new InterpreterGroup();
     RemoteInterpreterProcess rip = new RemoteInterpreterProcess(
-        "../bin/interpreter.sh", "nonexists", new HashMap<String, String>(),
+        "../bin/interpreter.sh", "nonexists", "fakeRepo", new HashMap<String, String>(),
         mock(RemoteInterpreterEventPoller.class), 10 * 1000);
     rip.reference(intpGroup);
     assertEquals(0, rip.getNumActiveClient());

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -76,7 +76,8 @@ public class ZeppelinServer extends Application {
   public ZeppelinServer() throws Exception {
     ZeppelinConfiguration conf = ZeppelinConfiguration.create();
 
-    this.depResolver = new DependencyResolver(conf.getString(ConfVars.ZEPPELIN_DEP_LOCALREPO));
+    this.depResolver = new DependencyResolver(
+        conf.getString(ConfVars.ZEPPELIN_INTERPRETER_LOCALREPO));
     this.schedulerFactory = new SchedulerFactory();
     this.replFactory = new InterpreterFactory(conf, notebookWsServer,
             notebookWsServer, depResolver);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterInfoSaving.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.apache.zeppelin.interpreter;
 
+import org.sonatype.aether.repository.RemoteRepository;
+
 import java.util.List;
 import java.util.Map;
 
@@ -26,4 +28,5 @@
 public class InterpreterInfoSaving {
   public Map<String, InterpreterSetting> interpreterSettings;
   public Map<String, List<String>> interpreterBindings;
+  public List<RemoteRepository> interpreterRepositories;
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/AbstractZeppelinIT.java
Patch:
@@ -123,7 +123,7 @@ protected void createNewNote() {
   }
 
   protected void deleteTestNotebook(final WebDriver driver) {
-    driver.findElement(By.xpath("//*[@id='main']/div//h3/span[1]/button[@tooltip='Remove the notebook']"))
+    driver.findElement(By.xpath("//*[@id='main']/div//h3/span/button[@tooltip='Remove the notebook']"))
         .sendKeys(Keys.ENTER);
     sleep(1000, true);
     driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'delete this notebook')]" +

File: zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java
Patch:
@@ -188,7 +188,7 @@ public void testAngularDisplay() throws InterruptedException{
       waitForText("BindingTest_1_",
           By.xpath(getParagraphXPath(1) + "//div[@id=\"angularTestButton\"]"));
 
-      driver.findElement(By.xpath("//*[@id='main']/div//h3/span[1]/button[@tooltip='Remove the notebook']"))
+      driver.findElement(By.xpath("//*[@id='main']/div//h3/span/button[@tooltip='Remove the notebook']"))
           .sendKeys(Keys.ENTER);
       sleep(1000, true);
       driver.findElement(By.xpath("//div[@class='modal-dialog'][contains(.,'delete this notebook')]" +

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -457,6 +457,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.jdbc.JDBCInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
+    ZEPPELIN_INTERPRETER_MAX_POOL_SIZE("zeppelin.interpreter.max.poolsize", 10),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),
     // use specified notebook (id) as homescreen

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -664,9 +664,10 @@ private Interpreter createRemoteRepl(String interpreterPath, String className,
       Properties property) {
 
     int connectTimeout = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);
+    int maxPoolSize = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_MAX_POOL_SIZE);
     LazyOpenInterpreter intp = new LazyOpenInterpreter(new RemoteInterpreter(
         property, className, conf.getInterpreterRemoteRunnerPath(),
-        interpreterPath, connectTimeout, remoteInterpreterProcessListener));
+        interpreterPath, connectTimeout, maxPoolSize, remoteInterpreterProcessListener));
     return intp;
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -441,6 +441,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.angular.AngularInterpreter,"
         + "org.apache.zeppelin.shell.ShellInterpreter,"
         + "org.apache.zeppelin.hive.HiveInterpreter,"
+        + "org.apache.zeppelin.tachyon.TachyonInterpreter,"
         + "org.apache.zeppelin.phoenix.PhoenixInterpreter,"
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.tajo.TajoInterpreter,"

File: cassandra/src/test/java/org/apache/zeppelin/cassandra/InterpreterLogicTest.java
Patch:
@@ -302,10 +302,10 @@ public void should_parse_accurate_date() throws Exception {
     }
 
     private <A> scala.collection.immutable.List<A> toScalaList(java.util.List<A> list)  {
-        return scala.collection.JavaConverters.asScalaBufferConverter(list).asScala().toList();
+        return scala.collection.JavaConversions.asScalaIterable(list).toList();
     }
 
     private  <A> java.util.List<A> toJavaList(scala.collection.immutable.List<A> list){
-        return scala.collection.JavaConverters.seqAsJavaListConverter(list).asJava();
+        return scala.collection.JavaConversions.asJavaList(list);
     }
 }
\ No newline at end of file

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java
Patch:
@@ -24,5 +24,5 @@
 public interface AngularObjectRegistryListener {
   public void onAdd(String interpreterGroupId, AngularObject object);
   public void onUpdate(String interpreterGroupId, AngularObject object);
-  public void onRemove(String interpreterGroupId, String name, String noteId);
+  public void onRemove(String interpreterGroupId, String name, String noteId, String paragraphId);
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -267,7 +267,7 @@ public int getNumIdleClient() {
    * @param name
    * @param o
    */
-  public void updateRemoteAngularObject(String name, String noteId, Object o) {
+  public void updateRemoteAngularObject(String name, String noteId, String paragraphId, Object o) {
     Client client = null;
     try {
       client = getClient();
@@ -283,7 +283,7 @@ public void updateRemoteAngularObject(String name, String noteId, Object o) {
     boolean broken = false;
     try {
       Gson gson = new Gson();
-      client.angularObjectUpdate(name, noteId, gson.toJson(o));
+      client.angularObjectUpdate(name, noteId, paragraphId, gson.toJson(o));
     } catch (TException e) {
       broken = true;
       logger.error("Can't update angular object", e);

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -45,8 +45,6 @@
  * BASIC Zeppelin rest api tests
  */
 public class NotebookServerTest extends AbstractTestRestApi {
-
-
   private static Notebook notebook;
   private static NotebookServer notebookServer;
   private static Gson gson;
@@ -97,7 +95,7 @@ public void testMakeSureNoAngularObjectBroadcastToWebsocketWhoFireTheEvent() thr
     }
 
     // add angularObject
-    interpreterGroup.getAngularObjectRegistry().add("object1", "value1", note1.getId());
+    interpreterGroup.getAngularObjectRegistry().add("object1", "value1", note1.getId(), null);
 
     // create two sockets and open it
     NotebookSocket sock1 = createWebSocket();

File: zeppelin-server/src/test/java/org/apache/zeppelin/WebDriverManager.java
Patch:
@@ -44,7 +44,7 @@ public class WebDriverManager {
 
   private static String downLoadsDir = "";
 
-  static WebDriver getWebDriver() {
+  public static WebDriver getWebDriver() {
     WebDriver driver = null;
 
     if (driver == null) {

File: jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java
Patch:
@@ -94,7 +94,7 @@ public void testSelectQuery() throws SQLException, IOException {
 
     String sqlQuery = "select * from test_table";
 
-    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext("", "1", "","", null,null,null,null));
+    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext("", "1", "","", null,null,null,null,null));
 
     assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());
     assertEquals(InterpreterResult.Type.TABLE, interpreterResult.type());
@@ -116,7 +116,7 @@ public void testSelectQueryMaxResult() throws SQLException, IOException {
 
     String sqlQuery = "select * from test_table";
 
-    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext("", "1", "","", null,null,null,null));
+    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext("", "1", "","", null,null,null,null,null));
 
     assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());
     assertEquals(InterpreterResult.Type.TABLE, interpreterResult.type());

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public static void setUp() {
     Properties p = new Properties();
     flink = new FlinkInterpreter(p);
     flink.open();
-    context = new InterpreterContext(null, null, null, null, null, null, null, null);
+    context = new InterpreterContext(null, null, null, null, null, null, null, null, null);
   }
 
   @AfterClass

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public class IgniteInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-          new InterpreterContext(null, null, null, null, null, null, null, null);
+          new InterpreterContext(null, null, null, null, null, null, null, null, null);
 
   private IgniteInterpreter intp;
   private Ignite ignite;

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java
Patch:
@@ -44,7 +44,7 @@ public class IgniteSqlInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-          new InterpreterContext(null, null, null, null, null, null, null, null);
+          new InterpreterContext(null, null, null, null, null, null, null, null, null);
 
   private Ignite ignite;
   private IgniteSqlInterpreter intp;

File: scalding/src/test/java/org/apache/zeppelin/scalding/ScaldingInterpreterTest.java
Patch:
@@ -65,7 +65,7 @@ public void setUp() throws Exception {
     context = new InterpreterContext("note", "id", "title", "text",
         new HashMap<String, Object>(), new GUI(), new AngularObjectRegistry(
             intpGroup.getId(), null),
-        new LinkedList<InterpreterContextRunner>());
+        new LinkedList<InterpreterContextRunner>(), null);
   }
 
   @After

File: spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
Patch:
@@ -60,7 +60,7 @@ public void setUp() throws Exception {
 
     context = new InterpreterContext("note", "id", "title", "text", new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
-        new LinkedList<InterpreterContextRunner>());
+        new LinkedList<InterpreterContextRunner>(), null);
   }
 
   @After

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-7")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-4")
 public class RemoteInterpreterContext implements org.apache.thrift.TBase<RemoteInterpreterContext, RemoteInterpreterContext._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterContext> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterContext");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterEvent.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-7")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-4")
 public class RemoteInterpreterEvent implements org.apache.thrift.TBase<RemoteInterpreterEvent, RemoteInterpreterEvent._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterEvent> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterEvent");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-7")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-4")
 public class RemoteInterpreterResult implements org.apache.thrift.TBase<RemoteInterpreterResult, RemoteInterpreterResult._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteInterpreterResult> {
   private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteInterpreterResult");
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -51,7 +51,7 @@
 import org.slf4j.LoggerFactory;
 
 @SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
-@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-8-7")
+@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-4")
 public class RemoteInterpreterService {
 
   public interface Iface {

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/InterpreterContextTest.java
Patch:
@@ -27,7 +27,7 @@ public class InterpreterContextTest {
   public void testThreadLocal() {
     assertNull(InterpreterContext.get());
 
-    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null));
+    InterpreterContext.set(new InterpreterContext(null, null, null, null, null, null, null, null, null));
     assertNotNull(InterpreterContext.get());
 
     InterpreterContext.remove();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessTest.java
Patch:
@@ -34,7 +34,7 @@ public void testStartStop() {
     InterpreterGroup intpGroup = new InterpreterGroup();
     RemoteInterpreterProcess rip = new RemoteInterpreterProcess(
         "../bin/interpreter.sh", "nonexists", new HashMap<String, String>(),
-        10 * 1000);
+        10 * 1000, null);
     assertFalse(rip.isRunning());
     assertEquals(0, rip.referenceCount());
     assertEquals(1, rip.reference(intpGroup));

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -81,7 +81,8 @@ public ZeppelinServer() throws Exception {
 
     this.depResolver = new DependencyResolver(conf.getString(ConfVars.ZEPPELIN_DEP_LOCALREPO));
     this.schedulerFactory = new SchedulerFactory();
-    this.replFactory = new InterpreterFactory(conf, notebookWsServer, depResolver);
+    this.replFactory = new InterpreterFactory(conf, notebookWsServer,
+            notebookWsServer, depResolver);
     this.notebookRepo = new NotebookRepoSync(conf);
     this.notebookIndex = new LuceneSearch();
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/Message.java
Patch:
@@ -93,6 +93,8 @@ public static enum OP {
 
     PARAGRAPH_REMOVE,
     PARAGRAPH_CLEAR_OUTPUT,
+    PARAGRAPH_APPEND_OUTPUT,  // [s-c] append output
+    PARAGRAPH_UPDATE_OUTPUT,  // [s-c] update (replace) output
     PING,
 
     ANGULAR_OBJECT_UPDATE,  // [s-c] add/update angular object

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/JobListenerFactory.java
Patch:
@@ -17,11 +17,9 @@
 
 package org.apache.zeppelin.notebook;
 
-import org.apache.zeppelin.scheduler.JobListener;
-
 /**
  * TODO(moon): provide description.
  */
 public interface JobListenerFactory {
-  public JobListener getParagraphJobListener(Note note);
+  public ParagraphJobListener getParagraphJobListener(Note note);
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -55,8 +55,8 @@ public void setUp() throws Exception {
     System.setProperty(ConfVars.ZEPPELIN_HOME.getVarName(), tmpDir.getAbsolutePath());
     System.setProperty(ConfVars.ZEPPELIN_INTERPRETERS.getVarName(), "org.apache.zeppelin.interpreter.mock.MockInterpreter1,org.apache.zeppelin.interpreter.mock.MockInterpreter2");
     conf = new ZeppelinConfiguration();
-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null);
-    context = new InterpreterContext("note", "id", "title", "text", null, null, null, null);
+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null);
+    context = new InterpreterContext("note", "id", "title", "text", null, null, null, null, null);
 
   }
 
@@ -140,7 +140,7 @@ public void testSaveLoad() throws InterpreterException, IOException {
     factory.add("newsetting", "mock1", new InterpreterOption(false), new Properties());
     assertEquals(3, factory.get().size());
 
-    InterpreterFactory factory2 = new InterpreterFactory(conf, null, null);
+    InterpreterFactory factory2 = new InterpreterFactory(conf, null, null, null);
     assertEquals(3, factory2.get().size());
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java
Patch:
@@ -58,7 +58,7 @@ public void setUp() throws Exception {
     MockInterpreter11.register("mock11", "group1", "org.apache.zeppelin.interpreter.mock.MockInterpreter11");
     MockInterpreter2.register("mock2", "group2", "org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 
-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null);
+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null, null);
   }
 
   @After

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -402,6 +402,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.shell.ShellInterpreter,"
         + "org.apache.zeppelin.hive.HiveInterpreter,"
         + "org.apache.zeppelin.phoenix.PhoenixInterpreter,"
+        + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.tajo.TajoInterpreter,"
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -409,10 +409,10 @@ public static enum ConfVars {
         + "org.apache.zeppelin.lens.LensInterpreter,"
         + "org.apache.zeppelin.cassandra.CassandraInterpreter,"
         + "org.apache.zeppelin.geode.GeodeOqlInterpreter,"
-        + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.kylin.KylinInterpreter,"
         + "org.apache.zeppelin.elasticsearch.ElasticsearchInterpreter,"
-        + "org.apache.zeppelin.scalding.ScaldingInterpreter"),
+        + "org.apache.zeppelin.scalding.ScaldingInterpreter,"
+        + "org.apache.zeppelin.jdbc.JDBCInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java
Patch:
@@ -64,6 +64,7 @@ public void setUp() throws Exception {
   @After
   public void tearDown() throws Exception {
     delete(tmpDir);
+    Interpreter.registeredInterpreters.clear();
   }
 
   @Test

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -71,7 +71,7 @@ public void setUp() throws Exception {
     tmpDir = new File(System.getProperty("java.io.tmpdir")+"/ZeppelinLTest_"+System.currentTimeMillis());
     tmpDir.mkdirs();
     new File(tmpDir, "conf").mkdirs();
-    notebookDir = new File(System.getProperty("java.io.tmpdir")+"/ZeppelinLTest_"+System.currentTimeMillis()+"/notebook");
+    notebookDir = new File(tmpDir + "/notebook");
     notebookDir.mkdirs();
 
     System.setProperty(ConfVars.ZEPPELIN_HOME.getVarName(), tmpDir.getAbsolutePath());

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/NotebookRepoSync.java
Patch:
@@ -78,7 +78,7 @@ public NotebookRepoSync(ZeppelinConfiguration conf) {
       } catch (ClassNotFoundException | NoSuchMethodException | SecurityException |
           InstantiationException | IllegalAccessException | IllegalArgumentException |
           InvocationTargetException e) {
-        LOG.warn("Failed to initialize {} notebook storage class {}", storageClassNames[i], e);
+        LOG.warn("Failed to initialize {} notebook storage class", storageClassNames[i], e);
       }
     }
     // couldn't initialize any storage, use default

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java
Patch:
@@ -220,7 +220,7 @@ public Object select(String name, Object defaultValue,
       paramOptions[i++] = new ParamOption(valueAndDisplayValue._1(), valueAndDisplayValue._2());
     }
 
-    return gui.select(name, "", paramOptions);
+    return gui.select(name, defaultValue, paramOptions);
   }
 
   public void setGui(GUI o) {

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java
Patch:
@@ -60,7 +60,6 @@ public void setUp() {
     IgniteConfiguration cfg = new IgniteConfiguration();
     cfg.setDiscoverySpi(discoSpi);
     cfg.setPeerClassLoadingEnabled(true);
-    cfg.setMarshaller(new OptimizedMarshaller());
 
     cfg.setGridName("test");
 

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -54,7 +54,7 @@
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.LazyOpenInterpreter;
 import org.apache.zeppelin.interpreter.WrappedInterpreter;
-import org.apache.zeppelin.spark.dep.DependencyContext;
+import org.apache.zeppelin.spark.dep.SparkDependencyContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -127,7 +127,7 @@ public void open() {
     URL [] urls = new URL[0];
 
     if (depInterpreter != null) {
-      DependencyContext depc = depInterpreter.getDependencyContext();
+      SparkDependencyContext depc = depInterpreter.getDependencyContext();
       if (depc != null) {
         List<File> files = depc.getFiles();
         List<URL> urlList = new LinkedList<URL>();

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java
Patch:
@@ -43,7 +43,7 @@
 import org.apache.zeppelin.interpreter.InterpreterContext;
 import org.apache.zeppelin.interpreter.InterpreterContextRunner;
 import org.apache.zeppelin.interpreter.InterpreterException;
-import org.apache.zeppelin.spark.dep.DependencyResolver;
+import org.apache.zeppelin.spark.dep.SparkDependencyResolver;
 
 import scala.Tuple2;
 import scala.Unit;
@@ -53,14 +53,14 @@
  * Spark context for zeppelin.
  */
 public class ZeppelinContext extends HashMap<String, Object> {
-  private DependencyResolver dep;
+  private SparkDependencyResolver dep;
   private PrintStream out;
   private InterpreterContext interpreterContext;
   private int maxResult;
 
   public ZeppelinContext(SparkContext sc, SQLContext sql,
       InterpreterContext interpreterContext,
-      DependencyResolver dep, PrintStream printStream,
+      SparkDependencyResolver dep, PrintStream printStream,
       int maxResult) {
     this.sc = sc;
     this.sqlContext = sql;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Booter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.spark.dep;
+package org.apache.zeppelin.dep;
 
 import java.io.File;
 
@@ -64,7 +64,7 @@ public static RepositorySystemSession newRepositorySystemSession(
   public static RemoteRepository newCentralRepository() {
     return new RemoteRepository("central", "default", "http://repo1.maven.org/maven2/");
   }
-
+  
   public static RemoteRepository newLocalRepository() {
     return new RemoteRepository("local",
         "default", "file://" + System.getProperty("user.home") + "/.m2/repository");

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Dependency.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.spark.dep;
+package org.apache.zeppelin.dep;
 
 import java.util.LinkedList;
 import java.util.List;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/Repository.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.spark.dep;
+package org.apache.zeppelin.dep;
 import org.sonatype.aether.repository.Authentication;
 /**
  *
@@ -70,7 +70,7 @@ public Repository credentials(String username, String password) {
     return this;
   }
   
-  protected Authentication getAuthentication() {
+  public Authentication getAuthentication() {
     Authentication auth = null;
     if (this.username != null && this.password != null) {
       auth = new Authentication(this.username, this.password);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/RepositoryListener.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.spark.dep;
+package org.apache.zeppelin.dep;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/RepositorySystemFactory.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.spark.dep;
+package org.apache.zeppelin.dep;
 
 import org.apache.maven.repository.internal.DefaultServiceLocator;
 import org.apache.maven.wagon.Wagon;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/dep/TransferListener.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package org.apache.zeppelin.spark.dep;
+package org.apache.zeppelin.dep;
 
 import java.io.PrintStream;
 import java.text.DecimalFormat;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -428,6 +428,7 @@ public static enum ConfVars {
     // Decide when new note is created, interpreter settings will be binded automatically or not.
     ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING("zeppelin.notebook.autoInterpreterBinding", true),
     ZEPPELIN_CONF_DIR("zeppelin.conf.dir", "conf"),
+    ZEPPELIN_DEP_LOCALREPO("zeppelin.dep.localrepo", "local-repo"),
     // Allows a way to specify a ',' separated list of allowed origins for rest and websockets
     // i.e. http://localhost:8080
     ZEPPELIN_ALLOWED_ORIGINS("zeppelin.server.allowed.origins", "*"),

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NoteInterpreterLoaderTest.java
Patch:
@@ -58,7 +58,7 @@ public void setUp() throws Exception {
     MockInterpreter11.register("mock11", "group1", "org.apache.zeppelin.interpreter.mock.MockInterpreter11");
     MockInterpreter2.register("mock2", "group2", "org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 
-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null);
+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null);
   }
 
   @After

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -85,7 +85,7 @@ public void setUp() throws Exception {
     MockInterpreter1.register("mock1", "org.apache.zeppelin.interpreter.mock.MockInterpreter1");
     MockInterpreter2.register("mock2", "org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 
-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null);
+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null);
 
     SearchService search = mock(SearchService.class);
     notebookRepo = new VFSNotebookRepo(conf);
@@ -172,7 +172,7 @@ public void testPersist() throws IOException, SchedulerException{
     note.persist();
 
     Notebook notebook2 = new Notebook(
-        conf, notebookRepo, schedulerFactory, new InterpreterFactory(conf, null), this, null);
+        conf, notebookRepo, schedulerFactory, new InterpreterFactory(conf, null, null), this, null);
     assertEquals(1, notebook2.getAllNotes().size());
   }
 

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -87,7 +87,7 @@ public void setUp() throws Exception {
     MockInterpreter1.register("mock1", "org.apache.zeppelin.interpreter.mock.MockInterpreter1");
     MockInterpreter2.register("mock2", "org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 
-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null);
+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null);
     
     SearchService search = mock(SearchService.class);
     notebookRepoSync = new NotebookRepoSync(conf);

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -76,7 +76,7 @@ public void setUp() throws Exception {
     MockInterpreter1.register("mock1", "org.apache.zeppelin.interpreter.mock.MockInterpreter1");
 
     this.schedulerFactory = new SchedulerFactory();
-    factory = new InterpreterFactory(conf, new InterpreterOption(false), null);
+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null, null);
 
     SearchService search = mock(SearchService.class);
     notebookRepo = new VFSNotebookRepo(conf);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/Message.java
Patch:
@@ -103,6 +103,8 @@ public static enum OP {
 
   public OP op;
   public Map<String, Object> data = new HashMap<String, Object>();
+  public String ticket = "anonymous";
+  public String principal = "anonymous";
 
   public Message(OP op) {
     this.op = op;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -430,7 +430,8 @@ public static enum ConfVars {
     ZEPPELIN_CONF_DIR("zeppelin.conf.dir", "conf"),
     // Allows a way to specify a ',' separated list of allowed origins for rest and websockets
     // i.e. http://localhost:8080
-    ZEPPELIN_ALLOWED_ORIGINS("zeppelin.server.allowed.origins", "*");
+    ZEPPELIN_ALLOWED_ORIGINS("zeppelin.server.allowed.origins", "*"),
+    ZEPPELIN_ANONYMOUS_ALLOWED("zeppelin.anonymous.allowed", true);
 
     private String varName;
     @SuppressWarnings("rawtypes")

File: ignite/src/main/java/org/apache/zeppelin/ignite/IgniteInterpreter.java
Patch:
@@ -211,6 +211,7 @@ private Ignite getIgnite() {
 
         initEx = null;
       } catch (Exception e) {
+        logger.error("Error in IgniteInterpreter while getIgnite: " , e);
         initEx = e;
       }
     }

File: ignite/src/main/java/org/apache/zeppelin/ignite/IgniteSqlInterpreter.java
Patch:
@@ -154,6 +154,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
         }
       }
     } catch (Exception e) {
+      logger.error("Exception in IgniteSqlInterpreter while InterpreterResult interpret: ", e);
       return IgniteInterpreterUtils.buildErrorResult(e);
     } finally {
       curStmt = null;
@@ -169,6 +170,7 @@ public void cancel(InterpreterContext context) {
         curStmt.cancel();
       } catch (SQLException e) {
         // No-op.
+        logger.info("No-op while cancel in IgniteSqlInterpreter", e);
       } finally {
         curStmt = null;
       }

File: lens/src/main/java/org/apache/zeppelin/lens/LensInterpreter.java
Patch:
@@ -128,7 +128,7 @@ public LensInterpreter(Properties property) {
       s_logger.info("LensInterpreter created");
     }
     catch (Exception e) {
-      e.printStackTrace();
+      s_logger.error(e.toString(), e);
       s_logger.error("unable to create lens interpreter", e);
     }
   }
@@ -375,6 +375,7 @@ public void cancel(InterpreterContext context) {
         closeShell(s_paraToQH.get(context.getParagraphId()).getShell());
       } catch (Exception e) {
         // ignore
+        s_logger.info("Exception in LensInterpreter while cancel finally, ignore", e);
       }
       s_paraToQH.remove(context.getParagraphId());
       closeShell(shell);

File: postgresql/src/main/java/org/apache/zeppelin/postgresql/PostgreSqlInterpreter.java
Patch:
@@ -297,6 +297,7 @@ public void cancel(InterpreterContext context) {
       try {
         currentStatement.cancel();
       } catch (SQLException ex) {
+        logger.error("SQLException in PostgreSqlInterpreter while cancel ", ex);
       } finally {
         currentStatement = null;
       }

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -82,7 +82,7 @@
  *
  */
 public class SparkInterpreter extends Interpreter {
-  Logger logger = LoggerFactory.getLogger(SparkInterpreter.class);
+  public static Logger logger = LoggerFactory.getLogger(SparkInterpreter.class);
 
   static {
     Interpreter.register(
@@ -186,7 +186,7 @@ static JobProgressListener setupListeners(SparkContext context) {
       }
     } catch (NoSuchMethodException | SecurityException | IllegalAccessException
         | IllegalArgumentException | InvocationTargetException e) {
-      e.printStackTrace();
+      logger.error(e.toString(), e);
       return null;
     }
     return pl;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -131,7 +131,7 @@ public void destroy() {
 
 
 
-  static Logger logger = LoggerFactory.getLogger(Interpreter.class);
+  public static Logger logger = LoggerFactory.getLogger(Interpreter.class);
   private InterpreterGroup interpreterGroup;
   private URL [] classloaderUrls;
   protected Properties property;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectRegistry.java
Patch:
@@ -101,7 +101,6 @@ public AngularObject addAndNotifyRemoteProcess(String name, Object o, String not
    * this method should be used instead of remove()
    * @param name
    * @param noteId
-   * @param emit
    * @return
    */
   public AngularObject removeAndNotifyRemoteProcess(String name, String noteId) {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java
Patch:
@@ -124,6 +124,7 @@ private void waitQuietly() {
         wait(1000);
       }
     } catch (InterruptedException ignored) {
+      logger.info("Error in RemoteInterpreterEventPoller while waitQuietly : ", ignored);
     }
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java
Patch:
@@ -57,6 +57,7 @@ public void run() {
       try {
         Thread.sleep(intervalMs);
       } catch (InterruptedException e) {
+        logger.error("Exception in JobProgressPoller while run Thread.sleep", e);
       }
     }
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerFactory.java
Patch:
@@ -32,7 +32,7 @@
  * TODO(moon) : add description.
  */
 public class SchedulerFactory implements SchedulerListener {
-  private final Logger logger = LoggerFactory.getLogger(SchedulerFactory.class);
+  private static final Logger logger = LoggerFactory.getLogger(SchedulerFactory.class);
   ExecutorService executor;
   Map<String, Scheduler> schedulers = new LinkedHashMap<String, Scheduler>();
 
@@ -46,7 +46,7 @@ public static SchedulerFactory singleton() {
           try {
             singleton = new SchedulerFactory();
           } catch (Exception e) {
-            e.printStackTrace();
+            logger.error(e.toString(), e);
           }
         }
       }

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/mock/MockInterpreterAngular.java
Patch:
@@ -90,6 +90,7 @@ public void watch(Object oldObject, Object newObject,
     try {
       Thread.sleep(500); // wait for watcher executed
     } catch (InterruptedException e) {
+      logger.error("Exception in MockInterpreterAngular while interpret Thread.sleep", e);
     }
 
     String msg = registry.getAll(context.getNoteId()).size() + " " + Integer.toString(numWatch.get());

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/InterpreterRestApi.java
Patch:
@@ -110,9 +110,11 @@ public Response updateSetting(String message, @PathParam("settingId") String set
       interpreterFactory.setPropertyAndRestart(settingId,
           new InterpreterOption(true), p.getProperties());
     } catch (InterpreterException e) {
+      logger.error("Exception in InterpreterRestApi while updateSetting ", e);
       return new JsonResponse(
           Status.NOT_FOUND, e.getMessage(), ExceptionUtils.getStackTrace(e)).build();
     } catch (IOException e) {
+      logger.error("Exception in InterpreterRestApi while updateSetting ", e);
       return new JsonResponse(
           Status.INTERNAL_SERVER_ERROR, e.getMessage(), ExceptionUtils.getStackTrace(e)).build();
     }
@@ -144,6 +146,7 @@ public Response restartSetting(@PathParam("settingId") String settingId) {
     try {
       interpreterFactory.restart(settingId);
     } catch (InterpreterException e) {
+      logger.error("Exception in InterpreterRestApi while restartSetting ", e);
       return new JsonResponse(
           Status.NOT_FOUND, e.getMessage(), ExceptionUtils.getStackTrace(e)).build();
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -308,6 +308,7 @@ public Response moveParagraph(@PathParam("notebookId") String notebookId,
       notebookServer.broadcastNote(note);
       return new JsonResponse(Status.OK, "").build();
     } catch (IndexOutOfBoundsException e) {
+      LOG.error("Exception in NotebookRestApi while moveParagraph ", e);
       return new JsonResponse(Status.BAD_REQUEST, "paragraph's new index is out of bound").build();
     }
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -135,6 +135,7 @@ public static void main(String[] args) throws InterruptedException {
       try {
         System.in.read();
       } catch (IOException e) {
+        LOG.error("Exception in ZeppelinServer while main ", e);
       }
       System.exit(0);
     }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -71,9 +71,9 @@ public boolean checkOrigin(HttpServletRequest request, String origin) {
     try {
       return SecurityUtils.isValidOrigin(origin, ZeppelinConfiguration.create());
     } catch (UnknownHostException e) {
-      e.printStackTrace();
+      LOG.error(e.toString(), e);
     } catch (URISyntaxException e) {
-      e.printStackTrace();
+      LOG.error(e.toString(), e);
     }
     return false;
   }
@@ -772,7 +772,7 @@ public void afterStatusChange(Job job, Status before, Status after) {
         try {
           note.persist();
         } catch (IOException e) {
-          e.printStackTrace();
+          LOG.error(e.toString(), e);
         }
       }
       notebookServer.broadcastNote(note);

File: zeppelin-server/src/test/java/org/apache/zeppelin/ProcessData.java
Patch:
@@ -233,6 +233,7 @@ private void buildOutputAndErrorStreamData() throws IOException {
             String exceptionAsString = sw.toString();
             LOG.error(exceptionAsString);
           } catch (Exception ignore) {
+            LOG.info("Exception in ProcessData while buildOutputAndErrorStreamData ", ignore);
           }
           break;
         }

File: zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java
Patch:
@@ -101,6 +101,7 @@ boolean waitForText(final String txt, final By locator) {
       WebElement element = pollingWait(locator, MAX_BROWSER_TIMEOUT_SEC);
       return txt.equals(element.getText());
     } catch (TimeoutException e) {
+      LOG.error("Exception in ZeppelinIT while waitForText ", e);
       return false;
     }
   }
@@ -255,6 +256,7 @@ public void testAngularDisplay() throws InterruptedException{
 
       System.out.println("testCreateNotebook Test executed");
     } catch (ElementNotVisibleException e) {
+      LOG.error("Exception in ZeppelinIT while testAngularDisplay ", e);
       File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
 
     }
@@ -279,6 +281,7 @@ private void createNewNote() {
     try {
       Thread.sleep(500); // wait for notebook list updated
     } catch (InterruptedException e) {
+      LOG.error("Exception in ZeppelinIT while createNewNote Thread.sleep", e);
     }
   }
 }

File: zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinITUtils.java
Patch:
@@ -33,7 +33,7 @@ public static void sleep(long millis, boolean logOutput) {
     try {
       Thread.sleep(millis);
     } catch (InterruptedException e) {
-      e.printStackTrace();
+      LOG.error("Exception in WebDriverManager while getWebDriver ", e);
     }
     if (logOutput) {
       LOG.info("Finished.");

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinSparkClusterTest.java
Patch:
@@ -60,7 +60,7 @@ private void waitForFinish(Paragraph p) {
       try {
         Thread.sleep(100);
       } catch (InterruptedException e) {
-        e.printStackTrace();
+        LOG.error("Exception in WebDriverManager while getWebDriver ", e);
       }
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -565,6 +565,7 @@ boolean isType(String value) {
         try {
           checkType(value);
         } catch (Exception e) {
+          LOG.error("Exception in ZeppelinConfiguration while isType", e);
           return false;
         }
         return true;

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -130,7 +130,7 @@ public void testReloadAllNotes() throws IOException {
     try {
       FileUtils.copyDirectory(srcDir, destDir);
     } catch (IOException e) {
-      e.printStackTrace();
+      logger.error(e.toString(), e);
     }
 
     // doesn't have copied notebook in memory before reloading

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -199,7 +199,7 @@ public void testSyncOnReloadedList() throws IOException {
     try {
       FileUtils.copyDirectory(srcDir, destDir);
     } catch (IOException e) {
-      e.printStackTrace();
+      LOG.error(e.toString(), e);
     }
     assertEquals(0, notebookRepoSync.list(0).size());
     assertEquals(1, notebookRepoSync.list(1).size());

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepoTest.java
Patch:
@@ -134,7 +134,7 @@ public void run() {
       try {
         notebookRepo.save(note);
       } catch (IOException e) {
-        e.printStackTrace();
+        LOG.error(e.toString(), e);
       }
     }
   }

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -317,7 +317,8 @@ public SparkContext createSparkContext() {
           "python" + File.separator + "lib");
     }
 
-    String[] pythonLibs = new String[]{"pyspark.zip", "py4j-0.8.2.1-src.zip"};
+    //Only one of py4j-0.9-src.zip and py4j-0.8.2.1-src.zip should exist
+    String[] pythonLibs = new String[]{"pyspark.zip", "py4j-0.9-src.zip", "py4j-0.8.2.1-src.zip"};
     ArrayList<String> pythonLibUris = new ArrayList<>();
     for (String lib : pythonLibs) {
       File libFile = new File(pysparkPath, lib);

File: spark/src/main/java/org/apache/zeppelin/spark/SparkVersion.java
Patch:
@@ -32,9 +32,10 @@ public class SparkVersion {
   public static final SparkVersion SPARK_1_4_0 = SparkVersion.fromVersionString("1.4.0");
   public static final SparkVersion SPARK_1_5_0 = SparkVersion.fromVersionString("1.5.0");
   public static final SparkVersion SPARK_1_6_0 = SparkVersion.fromVersionString("1.6.0");
+  public static final SparkVersion SPARK_1_7_0 = SparkVersion.fromVersionString("1.7.0");
 
   public static final SparkVersion MIN_SUPPORTED_VERSION =  SPARK_1_0_0;
-  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_1_6_0;
+  public static final SparkVersion UNSUPPORTED_FUTURE_VERSION = SPARK_1_7_0;
 
   private int version;
   private String versionString;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java
Patch:
@@ -251,6 +251,7 @@ public synchronized Job.Status getStatus() {
         return Status.ERROR;
       }
 
+      boolean broken = false;
       try {
         String statusStr = client.getStatus(job.getId());
         if ("Unknown".equals(statusStr)) {
@@ -265,6 +266,7 @@ public synchronized Job.Status getStatus() {
         listener.afterStatusChange(job, null, status);
         return status;
       } catch (TException e) {
+        broken = true;
         logger.error("Can't get status information", e);
         lastStatus = Status.ERROR;
         return Status.ERROR;
@@ -273,7 +275,7 @@ public synchronized Job.Status getStatus() {
         lastStatus = Status.ERROR;
         return Status.ERROR;
       } finally {
-        interpreterProcess.releaseClient(client);
+        interpreterProcess.releaseClient(client, broken);
       }
     }
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookRestApi.java
Patch:
@@ -131,7 +131,7 @@ public Response bind(@PathParam("noteId") String noteId) {
   @GET
   @Path("/")
   public Response getNotebookList() throws IOException {
-    List<Map<String, String>> notesInfo = notebookServer.generateNotebooksInfo();
+    List<Map<String, String>> notesInfo = notebookServer.generateNotebooksInfo(false);
     return new JsonResponse<>(Status.OK, "", notesInfo ).build();
   }
 

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/Message.java
Patch:
@@ -86,6 +86,7 @@ public static enum OP {
                      // @param completions list of string
 
     LIST_NOTES, // [c-s] ask list of note
+    RELOAD_NOTES_FROM_REPO, // [c-s] reload notes from repo
 
     NOTES_INFO, // [s-c] list of note infos
                 // @param notes serialized List<NoteInfo> object

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -411,7 +411,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.geode.GeodeOqlInterpreter,"
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
         + "org.apache.zeppelin.kylin.KylinInterpreter,"
-        + "org.apache.zeppelin.elasticsearch.ElasticsearchInterpreter"),
+        + "org.apache.zeppelin.elasticsearch.ElasticsearchInterpreter,"
+        + "org.apache.zeppelin.scalding.ScaldingInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -41,9 +41,6 @@
 
 /**
  * Spark SQL interpreter for Zeppelin.
- *
- * @author Leemoonsoo
- *
  */
 public class SparkSqlInterpreter extends Interpreter {
   Logger logger = LoggerFactory.getLogger(SparkSqlInterpreter.class);

File: spark/src/main/java/org/apache/zeppelin/spark/ZeppelinContext.java
Patch:
@@ -51,9 +51,6 @@
 
 /**
  * Spark context for zeppelin.
- *
- * @author Leemoonsoo
- *
  */
 public class ZeppelinContext extends HashMap<String, Object> {
   private DependencyResolver dep;

File: spark/src/main/java/org/apache/zeppelin/spark/dep/Booter.java
Patch:
@@ -27,9 +27,6 @@
 
 /**
  * Manage mvn repository.
- *
- * @author anthonycorbacho
- *
  */
 public class Booter {
   public static RepositorySystem newRepositorySystem() {

File: spark/src/main/java/org/apache/zeppelin/spark/dep/DependencyResolver.java
Patch:
@@ -57,9 +57,6 @@
 /**
  * Deps resolver.
  * Add new dependencies from mvn repo (at runetime) to Zeppelin.
- *
- * @author anthonycorbacho
- *
  */
 public class DependencyResolver {
   Logger logger = LoggerFactory.getLogger(DependencyResolver.class);

File: spark/src/main/java/org/apache/zeppelin/spark/dep/RepositoryListener.java
Patch:
@@ -24,9 +24,6 @@
 
 /**
  * Simple listener that print log.
- *
- * @author anthonycorbacho
- *
  */
 public class RepositoryListener extends AbstractRepositoryListener {
   Logger logger = LoggerFactory.getLogger(RepositoryListener.class);

File: spark/src/main/java/org/apache/zeppelin/spark/dep/RepositorySystemFactory.java
Patch:
@@ -29,9 +29,6 @@
 
 /**
  * Get maven repository instance.
- *
- * @author anthonycorbacho
- *
  */
 public class RepositorySystemFactory {
   public static RepositorySystem newRepositorySystem() {

File: spark/src/main/java/org/apache/zeppelin/spark/dep/TransferListener.java
Patch:
@@ -32,9 +32,6 @@
 
 /**
  * Simple listener that show deps downloading progress.
- *
- * @author anthonycorbacho
- *
  */
 public class TransferListener extends AbstractTransferListener {
   Logger logger = LoggerFactory.getLogger(TransferListener.class);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/GUI.java
Patch:
@@ -26,9 +26,6 @@
 
 /**
  * Settings of a form.
- *
- * @author Leemoonsoo
- *
  */
 public class GUI implements Serializable {
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobListener.java
Patch:
@@ -19,9 +19,6 @@
 
 /**
  * TODO(moon) : add description.
- *
- * @author Leemoonsoo
- *
  */
 public interface JobListener {
   public void onProgressUpdate(Job job, int progress);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/JobProgressPoller.java
Patch:
@@ -22,9 +22,6 @@
 
 /**
  * TODO(moon) : add description.
- *
- * @author Leemoonsoo
- *
  */
 public class JobProgressPoller extends Thread {
   public static final long DEFAULT_INTERVAL_MSEC = 500;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerFactory.java
Patch:
@@ -30,9 +30,6 @@
 
 /**
  * TODO(moon) : add description.
- *
- * @author Leemoonsoo
- *
  */
 public class SchedulerFactory implements SchedulerListener {
   private final Logger logger = LoggerFactory.getLogger(SchedulerFactory.class);

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/SchedulerListener.java
Patch:
@@ -19,9 +19,6 @@
 
 /**
  * TODO(moon) : add description.
- *
- * @author Leemoonsoo
- *
  */
 public interface SchedulerListener {
   public void jobStarted(Scheduler scheduler, Job job);

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/NotebookResponse.java
Patch:
@@ -21,9 +21,6 @@
 
 /**
  * Response wrapper.
- *
- * @author anthonycorbacho
- *
  */
 @XmlRootElement
 public class NotebookResponse {

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonResponse.java
Patch:
@@ -31,8 +31,6 @@
 /**
  * Json response builder.
  *
- * @author Leemoonsoo
- *
  * @param <T>
  */
 public class JsonResponse<T> {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -376,9 +376,6 @@ public List<String> getAllowedOrigins()
 
   /**
    * Wrapper class.
-   *
-   * @author Leemoonsoo
-   *
    */
   public static enum ConfVars {
     ZEPPELIN_HOME("zeppelin.home", "../"),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/JobListenerFactory.java
Patch:
@@ -21,9 +21,6 @@
 
 /**
  * TODO(moon): provide description.
- *
- * @author Leemoonsoo
- *
  */
 public interface JobListenerFactory {
   public JobListener getParagraphJobListener(Note note);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -403,9 +403,6 @@ public void setJobListenerFactory(JobListenerFactory jobListenerFactory) {
 
   /**
    * Cron task for the note.
-   *
-   * @author Leemoonsoo
-   *
    */
   public static class CronJob implements org.quartz.Job {
     public static Notebook notebook;

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/utility/IdHashes.java
Patch:
@@ -23,9 +23,6 @@
 
 /**
  * Generate Tiny ID.
- *
- * @author anthonycorbacho
- *
  */
 public class IdHashes {
   public static final char[] DICTIONARY = new char[] {'1', '2', '3', '4', '5', '6', '7', '8', '9',

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/util/Util.java
Patch:
@@ -23,9 +23,6 @@
 
 /**
  * TODO(moon) : add description.
- *
- * @author Leemoonsoo
- *
  */
 public class Util {
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -57,15 +57,15 @@ public static enum Status {
     FINISHED,
     ERROR,
     ABORT;
-    boolean isReady() {
+    public boolean isReady() {
       return this == READY;
     }
 
-    boolean isRunning() {
+    public boolean isRunning() {
       return this == RUNNING;
     }
 
-    boolean isPending() {
+    public boolean isPending() {
       return this == PENDING;
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -318,6 +318,9 @@ public List<Map<String, String>> generateParagraphsInfo (){
         if (p.getDateFinished() != null) {
           info.put("finished", p.getDateFinished().toString());
         }
+        if (p.getStatus().isRunning()) {
+          info.put("progress", String.valueOf(p.progress()));
+        }
         paragraphsInfo.add(info);
       }
     }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/Job.java
Patch:
@@ -37,7 +37,6 @@
  *  and saving/loading jobs from disk.
  *  Changing/adding/deleting non transitive field name need consideration of that.
  *
- *  @author Leemoonsoo
  */
 public abstract class Job {
   /**

File: zeppelin-server/src/main/java/org/apache/zeppelin/rest/ZeppelinRestApi.java
Patch:
@@ -24,7 +24,6 @@
 /**
  * Zeppelin root rest api endpoint.
  *
- * @author anthonycorbacho
  * @since 0.3.4
  */
 @Path("/")

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -23,7 +23,6 @@
 import org.apache.zeppelin.interpreter.*;
 import org.apache.zeppelin.interpreter.Interpreter.FormType;
 import org.apache.zeppelin.interpreter.InterpreterResult.Code;
-import org.apache.zeppelin.interpreter.InterpreterResult.Type;
 import org.apache.zeppelin.scheduler.Job;
 import org.apache.zeppelin.scheduler.JobListener;
 import org.slf4j.Logger;
@@ -35,10 +34,10 @@
 /**
  * Paragraph is a representation of an execution unit.
  *
- * @author Leemoonsoo
  */
 public class Paragraph extends Job implements Serializable, Cloneable {
-  private static final transient long serialVersionUID = -6328572073497992016L;
+  private static final long serialVersionUID = -6328572073497992016L;
+
   private transient NoteInterpreterLoader replLoader;
   private transient Note note;
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -413,7 +413,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.cassandra.CassandraInterpreter,"
         + "org.apache.zeppelin.geode.GeodeOqlInterpreter,"
         + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter,"
-        + "org.apache.zeppelin.kylin.KylinInterpreter"),
+        + "org.apache.zeppelin.kylin.KylinInterpreter,"
+        + "org.apache.zeppelin.elasticsearch.ElasticsearchInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/NotebookServerTest.java
Patch:
@@ -60,7 +60,7 @@ public static void init() throws Exception {
     AbstractTestRestApi.startUp();
     gson = new Gson();
     notebook = ZeppelinServer.notebook;
-    notebookServer = ZeppelinServer.notebookServer;
+    notebookServer = ZeppelinServer.notebookWsServer;
   }
 
   @AfterClass

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/repo/NotebookRepoSyncTest.java
Patch:
@@ -46,7 +46,7 @@
 import org.slf4j.LoggerFactory;
 
 
-public class NotebookRepoSyncTest implements JobListenerFactory{
+public class NotebookRepoSyncTest implements JobListenerFactory {
 
   private File mainZepDir;
   private ZeppelinConfiguration conf;
@@ -215,7 +215,7 @@ public void testSyncOnList() throws IOException {
 	assertEquals(1, notebookRepoSync.list(1).size());
   }
   
-  private void delete(File file){
+  static void delete(File file){
     if(file.isFile()) file.delete();
       else if(file.isDirectory()){
         File [] files = file.listFiles();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -193,6 +193,7 @@ public void close() {
 
   @Override
   public InterpreterResult interpret(String st, InterpreterContext context) {
+    logger.debug("st: {}", st);
     FormType form = getFormType();
     RemoteInterpreterProcess interpreterProcess = getInterpreterProcess();
     Client client = null;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -203,6 +203,7 @@ public void close(String className) throws TException {
   @Override
   public RemoteInterpreterResult interpret(String className, String st,
       RemoteInterpreterContext interpreterContext) throws TException {
+    logger.debug("st: {}", st);
     Interpreter intp = getInterpreter(className);
     InterpreterContext context = convert(interpreterContext);
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -103,7 +103,7 @@ public static String getRequiredReplName(String text) {
     int scriptHeadIndex = 0;
     for (int i = 0; i < text.length(); i++) {
       char ch = text.charAt(i);
-      if (ch == ' ' || ch == '\n') {
+      if (ch == ' ' || ch == '\n' || ch == '(') {
         scriptHeadIndex = i;
         break;
       }
@@ -132,10 +132,10 @@ public static String getScriptBody(String text) {
     if (magic == null) {
       return text;
     }
-    if (magic.length() + 2 >= text.length()) {
+    if (magic.length() + 1 >= text.length()) {
       return "";
     }
-    return text.substring(magic.length() + 2);
+    return text.substring(magic.length() + 1).trim();
   }
 
   public NoteInterpreterLoader getNoteReplLoader() {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -28,7 +28,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-
 /**
  * Zeppelin configuration.
  *
@@ -326,11 +325,11 @@ public String getTrustStorePassword() {
   public String getNotebookDir() {
     return getString(ConfVars.ZEPPELIN_NOTEBOOK_DIR);
   }
-  
+
   public String getUser() {
     return getString(ConfVars.ZEPPELIN_NOTEBOOK_S3_USER);
   }
-  
+
   public String getBucketName() {
     return getString(ConfVars.ZEPPELIN_NOTEBOOK_S3_BUCKET);
   }
@@ -398,6 +397,7 @@ public static enum ConfVars {
     ZEPPELIN_SSL_TRUSTSTORE_TYPE("zeppelin.ssl.truststore.type", null),
     ZEPPELIN_SSL_TRUSTSTORE_PASSWORD("zeppelin.ssl.truststore.password", null),
     ZEPPELIN_WAR("zeppelin.war", "../zeppelin-web/dist"),
+    ZEPPELIN_WAR_TEMPDIR("zeppelin.war.tempdir", "webapps"),
     ZEPPELIN_INTERPRETERS("zeppelin.interpreters", "org.apache.zeppelin.spark.SparkInterpreter,"
         + "org.apache.zeppelin.spark.PySparkInterpreter,"
         + "org.apache.zeppelin.spark.SparkSqlInterpreter,"

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -197,7 +197,7 @@ private FileObject getRootDir() throws IOException {
   }
 
   @Override
-  public void save(Note note) throws IOException {
+  public synchronized void save(Note note) throws IOException {
     GsonBuilder gsonBuilder = new GsonBuilder();
     gsonBuilder.setPrettyPrinting();
     Gson gson = gsonBuilder.create();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -93,7 +93,7 @@ private void generateId() {
   public String id() {
     return id;
   }
-  
+
   public String getId() {
     return id;
   }
@@ -174,7 +174,7 @@ public void addCloneParagraph(Paragraph srcParagraph) {
       paragraphs.add(newParagraph);
     }
   }
-  
+
   /**
    * Insert paragraph in given index.
    *
@@ -323,7 +323,7 @@ public void run(String paragraphId) {
     if (intp == null) {
       throw new InterpreterException("Interpreter " + p.getRequiredReplName() + " not found");
     }
-    if ((Boolean) p.getConfig().get("enabled")) {
+    if (p.getConfig().get("enabled") == null || (Boolean) p.getConfig().get("enabled")) {
       intp.getScheduler().submit(p);
     }
   }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/repo/VFSNotebookRepo.java
Patch:
@@ -214,11 +214,12 @@ public void save(Note note) throws IOException {
       throw new IOException(noteDir.getName().toString() + " is not a directory");
     }
 
-    FileObject noteJson = noteDir.resolveFile("note.json", NameScope.CHILD);
+    FileObject noteJson = noteDir.resolveFile(".note.json", NameScope.CHILD);
     // false means not appending. creates file if not exists
     OutputStream out = noteJson.getContent().getOutputStream(false);
     out.write(json.getBytes(conf.getString(ConfVars.ZEPPELIN_ENCODING)));
     out.close();
+    noteJson.moveTo(noteDir.resolveFile("note.json", NameScope.CHILD));
   }
 
   @Override

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/Message.java
Patch:
@@ -55,6 +55,8 @@ public static enum OP {
     CLONE_NOTE, // [c-s] clone new notebook
                 // @param id id of note to clone
                 // @param name name fpor the cloned note
+    IMPORT_NOTE,  // [c-s] import notebook
+                  // @param object notebook
     NOTE_UPDATE,
 
     RUN_PARAGRAPH, // [c-s] run paragraph

File: zeppelin-server/src/test/java/org/apache/zeppelin/ZeppelinIT.java
Patch:
@@ -299,7 +299,7 @@ private void createNewNote() {
       notebookTitles.add(el.getText());
     }
     
-    WebElement createNoteLink = driver.findElement(By.xpath("//div[contains(@class, \"col-md-4\")]/div/h5/a"));
+    WebElement createNoteLink = driver.findElement(By.xpath("//div[contains(@class, \"col-md-4\")]/div/h5/a[contains(.,'Create new note')]"));
     createNoteLink.click();
 
     WebDriverWait block = new WebDriverWait(driver, 10);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -323,7 +323,9 @@ public void run(String paragraphId) {
     if (intp == null) {
       throw new InterpreterException("Interpreter " + p.getRequiredReplName() + " not found");
     }
-    intp.getScheduler().submit(p);
+    if ((Boolean) p.getConfig().get("enabled")) {
+      intp.getScheduler().submit(p);
+    }
   }
 
   public List<String> completion(String paragraphId, String buffer, int cursor) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -141,9 +141,8 @@ public Note cloneNote(String sourceNoteID, String newNoteName) throws
     bindInterpretersToNote(newNote.id(), boundInterpreterSettingsIds);
 
     List<Paragraph> paragraphs = sourceNote.getParagraphs();
-    for (Paragraph para : paragraphs) {
-      Paragraph p = (Paragraph) para.clone();
-      newNote.addParagraph(p);
+    for (Paragraph p : paragraphs) {
+      newNote.addCloneParagraph(p);
     }
     newNote.persist();
     return newNote;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterEventPoller.java
Patch:
@@ -56,7 +56,7 @@ public void setInterpreterGroup(InterpreterGroup interpreterGroup) {
   public void run() {
     Client client = null;
 
-    while (!shutdown) {
+    while (!shutdown && interpreterProcess.isRunning()) {
       try {
         client = interpreterProcess.getClient();
       } catch (Exception e1) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -112,6 +112,7 @@ public static void main(String[] args) throws Exception {
         LOG.info("Shutting down Zeppelin Server ... ");
         try {
           jettyServer.stop();
+          ZeppelinServer.notebook.getInterpreterFactory().close();
         } catch (Exception e) {
           LOG.error("Error while stopping servlet container", e);
         }
@@ -131,6 +132,7 @@ public static void main(String[] args) throws Exception {
     }
 
     jettyServer.join();
+    ZeppelinServer.notebook.getInterpreterFactory().close();
   }
 
   private static Server setupJettyServer(ZeppelinConfiguration conf)

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -98,7 +98,7 @@ public void onMessage(NotebookSocket conn, String msg) {
     Notebook notebook = notebook();
     try {
       Message messagereceived = deserializeMessage(msg);
-      LOG.info("RECEIVE << " + messagereceived.op);
+      LOG.debug("RECEIVE << " + messagereceived.op);
       /** Lets be elegant here */
       switch (messagereceived.op) {
           case LIST_NOTES:
@@ -253,7 +253,7 @@ private void broadcast(String noteId, Message m) {
       if (socketLists == null || socketLists.size() == 0) {
         return;
       }
-      LOG.info("SEND >> " + m.op);
+      LOG.debug("SEND >> " + m.op);
       for (NotebookSocket conn : socketLists) {
         try {
           conn.send(serializeMessage(m));
@@ -435,7 +435,7 @@ private void updateParagraph(NotebookSocket conn, Notebook notebook,
     note.persist();
     broadcast(note.id(), new Message(OP.PARAGRAPH).put("paragraph", p));
   }
-  
+
   private void cloneNote(NotebookSocket conn, Notebook notebook, Message fromMessage)
       throws IOException, CloneNotSupportedException {
     String noteId = getOpenNoteId(conn);

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -397,6 +397,7 @@ private void createNote(WebSocket conn, Notebook notebook, Message message) thro
     }
 
     note.persist();
+    addConnectionToNote(note.id(), (NotebookSocket) conn);
     broadcastNote(note);
     broadcastNoteList();
   }
@@ -440,6 +441,7 @@ private void cloneNote(NotebookSocket conn, Notebook notebook, Message fromMessa
     String noteId = getOpenNoteId(conn);
     String name = (String) fromMessage.get("name");
     Note newNote = notebook.cloneNote(noteId, name);
+    addConnectionToNote(newNote.id(), (NotebookSocket) conn);
     broadcastNote(newNote);
     broadcastNoteList();
   }

File: spark/src/main/java/org/apache/zeppelin/spark/DepInterpreter.java
Patch:
@@ -183,7 +183,9 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
 
     if (sparkInterpreter != null && sparkInterpreter.isSparkContextInitialized()) {
       return new InterpreterResult(Code.ERROR,
-          "Must be used before SparkInterpreter (%spark) initialized");
+          "Must be used before SparkInterpreter (%spark) initialized\n" +
+          "Hint: put this paragraph before any Spark code and " +
+          "restart Zeppelin/Interpreter" );
     }
 
     scala.tools.nsc.interpreter.Results.Result ret = intp.interpret(st);

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -271,7 +271,7 @@ public java.util.Set<java.lang.Object> getSingletons() {
     ZeppelinRestApi root = new ZeppelinRestApi();
     singletons.add(root);
 
-    NotebookRestApi notebookApi = new NotebookRestApi(notebook);
+    NotebookRestApi notebookApi = new NotebookRestApi(notebook, notebookServer);
     singletons.add(notebookApi);
 
     InterpreterRestApi interpreterApi = new InterpreterRestApi(replFactory);

File: shell/src/main/java/org/apache/zeppelin/shell/ShellInterpreter.java
Patch:
@@ -64,7 +64,7 @@ public void close() {}
 
   @Override
   public InterpreterResult interpret(String cmd, InterpreterContext contextInterpreter) {
-    logger.info("Run shell command '" + cmd + "'");
+    logger.debug("Run shell command '" + cmd + "'");
     long start = System.currentTimeMillis();
     CommandLine cmdLine = CommandLine.parse("bash");
     cmdLine.addArgument("-c", false);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -203,7 +203,7 @@ protected Object jobRun() throws Throwable {
       settings.setForms(inputs);
       script = Input.getSimpleQuery(settings.getParams(), scriptBody);
     }
-    logger().info("RUN : " + script);
+    logger().debug("RUN : " + script);
     InterpreterResult ret = repl.interpret(script, getInterpreterContext());
     return ret;
   }
@@ -273,7 +273,7 @@ public void setReturn(InterpreterResult value, Throwable t) {
     setResult(value);
     setException(t);
   }
-  
+
   @Override
   public Object clone() throws CloneNotSupportedException {
     Paragraph paraClone = (Paragraph) super.clone();

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -624,7 +624,6 @@ private void runParagraph(NotebookSocket conn, Notebook notebook,
     }
 
     note.persist();
-    broadcastNote(note);
     try {
       note.run(paragraphId);
     } catch (Exception ex) {
@@ -678,7 +677,6 @@ public void afterStatusChange(Job job, Status before, Status after) {
           e.printStackTrace();
         }
       }
-
       notebookServer.broadcastNote(note);
     }
   }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -381,9 +381,10 @@ private void createNote(WebSocket conn, Notebook notebook, Message message) thro
     note.addParagraph(); // it's an empty note. so add one paragraph
     if (message != null) {
       String noteName = (String) message.get("name");
-      if (noteName != null && !noteName.isEmpty()){
-        note.setName(noteName);
+      if (noteName == null || noteName.isEmpty()){
+        noteName = "Note " + note.getId();
       }
+      note.setName(noteName);
     }
 
     note.persist();

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -125,6 +125,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
       sc.setLocalProperty("spark.scheduler.pool", null);
     }
 
+    sc.setJobGroup(getJobGroup(context), "Zeppelin", false);
     Object rdd = null;
     try {
       // method signature of sqlc.sql() is changed
@@ -139,6 +140,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
     }
 
     String msg = ZeppelinContext.showDF(sc, context, rdd, maxResult);
+    sc.clearJobGroup();
     return new InterpreterResult(Code.SUCCESS, msg);
   }
 

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -162,7 +162,6 @@ public int getProgress(InterpreterContext context) {
     return sparkInterpreter.getProgress(context);
   }
 
-
   @Override
   public Scheduler getScheduler() {
     if (concurrentSQL()) {

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/JsonResponse.java
Patch:
@@ -105,6 +105,7 @@ public String toString() {
     if (pretty) {
       gsonBuilder.setPrettyPrinting();
     }
+    gsonBuilder.setExclusionStrategies(new JsonExclusionStrategy());
     Gson gson = gsonBuilder.create();
     return gson.toJson(this);
   }

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -149,3 +149,4 @@ public void testInterpreterRestart() throws IOException, InterruptedException {
     assertEquals("<p>markdown restarted</p>\n", p.getResult().message());
   }
 }
+

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -402,6 +402,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.angular.AngularInterpreter,"
         + "org.apache.zeppelin.shell.ShellInterpreter,"
         + "org.apache.zeppelin.hive.HiveInterpreter,"
+        + "org.apache.zeppelin.phoenix.PhoenixInterpreter,"
         + "org.apache.zeppelin.tajo.TajoInterpreter,"
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -227,7 +227,8 @@ protected static GetMethod httpGet(String path) throws IOException {
     LOG.info("Connecting to {}", url + path);
     HttpClient httpClient = new HttpClient();
     GetMethod getMethod = new GetMethod(url + path);
-    httpClient.executeMethod(getMethod);
+    getMethod.addRequestHeader("Origin", "http://localhost:8080");
+            httpClient.executeMethod(getMethod);
     LOG.info("{} - {}", getMethod.getStatusCode(), getMethod.getStatusText());
     return getMethod;
   }
@@ -236,6 +237,7 @@ protected static PostMethod httpPost(String path, String body) throws IOExceptio
     LOG.info("Connecting to {}", url + path);
     HttpClient httpClient = new HttpClient();
     PostMethod postMethod = new PostMethod(url + path);
+    postMethod.addRequestHeader("Origin", "http://localhost:8080");
     RequestEntity entity = new ByteArrayRequestEntity(body.getBytes("UTF-8"));
     postMethod.setRequestEntity(entity);
     httpClient.executeMethod(postMethod);

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -104,9 +104,10 @@ public void testInterpreterAutoBinding() throws IOException {
     // create note
     Note note = ZeppelinServer.notebook.createNote();
 
-    // check interpreter is bindded
+    // check interpreter is binded
     GetMethod get = httpGet("/notebook/interpreter/bind/"+note.id());
     assertThat(get, isAllowed());
+    get.addRequestHeader("Origin", "http://localhost");
     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(), new TypeToken<Map<String, Object>>(){}.getType());
     List<Map<String, String>> body = (List<Map<String, String>>) resp.get("body");
     assertTrue(0 < body.size());

File: zeppelin-server/src/test/java/org/apache/zeppelin/server/CorsFilterTest.java
Patch:
@@ -40,7 +40,7 @@
  * @author joelz
  *
  */
-public class CorsFilterTests {
+public class CorsFilterTest {
 
     public static String[] headers = new String[8];
     public static Integer count = 0;
@@ -54,7 +54,7 @@ public void ValidCorsFilterTest() throws IOException, ServletException {
         when(mockRequest.getHeader("Origin")).thenReturn("http://localhost:8080");
         when(mockRequest.getMethod()).thenReturn("Empty");
         when(mockRequest.getServerName()).thenReturn("localhost");
-
+        count = 0;
 
         doAnswer(new Answer() {
             @Override
@@ -79,7 +79,6 @@ public void InvalidCorsFilterTest() throws IOException, ServletException {
         when(mockRequest.getMethod()).thenReturn("Empty");
         when(mockRequest.getServerName()).thenReturn("evillocalhost");
 
-
         doAnswer(new Answer() {
             @Override
             public Object answer(InvocationOnMock invocationOnMock) throws Throwable {

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/Message.java
Patch:
@@ -52,6 +52,9 @@ public static enum OP {
     NEW_NOTE, // [c-s] create new notebook
     DEL_NOTE, // [c-s] delete notebook
               // @param id note id
+    CLONE_NOTE, // [c-s] clone new notebook
+                // @param id id of note to clone
+                // @param name name fpor the cloned note
     NOTE_UPDATE,
 
     RUN_PARAGRAPH, // [c-s] run paragraph

File: zeppelin-server/src/test/java/org/apache/zeppelin/socket/TestHttpServletRequest.java
Patch:
@@ -317,7 +317,7 @@ public String getScheme() {
 
     @Override
     public String getServerName() {
-        return null;
+        return "localhost";
     }
 
     @Override

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/Message.java
Patch:
@@ -34,6 +34,8 @@ public class Message {
    *
    */
   public static enum OP {
+    GET_HOME_NOTE, // [c-s] load note for home screen
+
     GET_NOTE, // [c-s] client load note
               // @param id note id
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Notebook.java
Patch:
@@ -399,5 +399,8 @@ public InterpreterFactory getInterpreterFactory() {
     return replFactory;
   }
 
+  public ZeppelinConfiguration getConf() {
+    return conf;
+  }
 
 }

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -560,7 +560,6 @@ private void runParagraph(NotebookSocket conn, Notebook notebook,
     }
     note.persist();
     broadcastNote(note);
-
     try {
       note.run(paragraphId);
     } catch (Exception ex) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -395,7 +395,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.ignite.IgniteSqlInterpreter,"
         + "org.apache.zeppelin.lens.LensInterpreter,"
         + "org.apache.zeppelin.cassandra.CassandraInterpreter,"
-        + "org.apache.zeppelin.geode.GeodeOqlInterpreter"),
+        + "org.apache.zeppelin.geode.GeodeOqlInterpreter,"
+        + "org.apache.zeppelin.postgresql.PostgreSqlInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),

File: spark/src/main/java/org/apache/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -131,7 +131,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
 
 
     Object rdd = sqlc.sql(st);
-    String msg = ZeppelinContext.showRDD(sc, context, rdd, maxResult);
+    String msg = ZeppelinContext.showDF(sc, context, rdd, maxResult);
     return new InterpreterResult(Code.SUCCESS, msg);
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -394,7 +394,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteSqlInterpreter,"
         + "org.apache.zeppelin.lens.LensInterpreter,"
-        + "org.apache.zeppelin.cassandra.CassandraInterpreter"),
+        + "org.apache.zeppelin.cassandra.CassandraInterpreter,"
+        + "org.apache.zeppelin.geode.GeodeOqlInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/AbstractTestRestApi.java
Patch:
@@ -187,7 +187,6 @@ private static boolean isActiveSparkHome(File dir) {
   protected static void shutDown() throws Exception {
     if (!wasRunning) {
       LOG.info("Terminating test Zeppelin...");
-      ZeppelinServer.notebookServer.stop();
       ZeppelinServer.jettyServer.stop();
       executor.shutdown();
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -415,7 +415,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteSqlInterpreter,"
-        + "org.apache.zeppelin.lens.LensInterpreter"),
+        + "org.apache.zeppelin.lens.LensInterpreter,"
+        + "org.apache.zeppelin.cassandra.CassandraInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/NoteInfo.java
Patch:
@@ -64,4 +64,5 @@ public Map<String, Object> getConfig() {
   public void setConfig(Map<String, Object> config) {
     this.config = config;
   }
+
 }

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -458,7 +458,7 @@ public static enum ConfVars {
       this.floatValue = -1;
       this.longValue = longValue;
       this.booleanValue = false;
-      this.type = VarType.INT;
+      this.type = VarType.LONG;
     }
 
     ConfVars(String varName, float floatValue) {

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -38,7 +38,7 @@ public static void setUp() {
     Properties p = new Properties();
     flink = new FlinkInterpreter(p);
     flink.open();
-    context = new InterpreterContext(null, null, null, null, null, null, null);
+    context = new InterpreterContext(null, null, null, null, null, null, null, null);
   }
 
   @AfterClass

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteInterpreterTest.java
Patch:
@@ -40,7 +40,7 @@ public class IgniteInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-          new InterpreterContext(null, null, null, null, null, null, null);
+          new InterpreterContext(null, null, null, null, null, null, null, null);
 
   private IgniteInterpreter intp;
   private Ignite ignite;

File: ignite/src/test/java/org/apache/zeppelin/ignite/IgniteSqlInterpreterTest.java
Patch:
@@ -43,7 +43,7 @@ public class IgniteSqlInterpreterTest {
   private static final String HOST = "127.0.0.1:47500..47509";
 
   private static final InterpreterContext INTP_CONTEXT =
-          new InterpreterContext(null, null, null, null, null, null, null);
+          new InterpreterContext(null, null, null, null, null, null, null, null);
 
   private Ignite ignite;
   private IgniteSqlInterpreter intp;

File: spark/src/test/java/org/apache/zeppelin/spark/DepInterpreterTest.java
Patch:
@@ -58,7 +58,7 @@ public void setUp() throws Exception {
     intpGroup.add(dep);
     dep.setInterpreterGroup(intpGroup);
 
-    context = new InterpreterContext("id", "title", "text", new HashMap<String, Object>(), new GUI(),
+    context = new InterpreterContext("note", "id", "title", "text", new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LinkedList<InterpreterContextRunner>());
   }

File: spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -75,7 +75,7 @@ public void setUp() throws Exception {
     }
 
     InterpreterGroup intpGroup = new InterpreterGroup();
-    context = new InterpreterContext("id", "title", "text",
+    context = new InterpreterContext("note", "id", "title", "text",
         new HashMap<String, Object>(), new GUI(), new AngularObjectRegistry(
             intpGroup.getId(), null),
         new LinkedList<InterpreterContextRunner>());

File: spark/src/test/java/org/apache/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -63,7 +63,7 @@ public void setUp() throws Exception {
       sql.setInterpreterGroup(intpGroup);
       sql.open();
     }
-    context = new InterpreterContext("id", "title", "text", new HashMap<String, Object>(), new GUI(),
+    context = new InterpreterContext("note", "id", "title", "text", new HashMap<String, Object>(), new GUI(),
         new AngularObjectRegistry(intpGroup.getId(), null),
         new LinkedList<InterpreterContextRunner>());
   }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/display/AngularObjectRegistryListener.java
Patch:
@@ -24,5 +24,5 @@
 public interface AngularObjectRegistryListener {
   public void onAdd(String interpreterGroupId, AngularObject object);
   public void onUpdate(String interpreterGroupId, AngularObject object);
-  public void onRemove(String interpreterGroupId, AngularObject object);
+  public void onRemove(String interpreterGroupId, String name, String noteId);
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObject.java
Patch:
@@ -27,10 +27,10 @@ public class RemoteAngularObject extends AngularObject {
 
   private transient RemoteInterpreterProcess remoteInterpreterProcess;
 
-  RemoteAngularObject(String name, Object o, String interpreterGroupId,
+  RemoteAngularObject(String name, Object o, String noteId, String interpreterGroupId,
       AngularObjectListener listener,
       RemoteInterpreterProcess remoteInterpreterProcess) {
-    super(name, o, listener);
+    super(name, o, noteId, listener);
     this.remoteInterpreterProcess = remoteInterpreterProcess;
   }
 
@@ -44,7 +44,7 @@ public void set(Object o, boolean emitWeb, boolean emitRemoteProcess) {
 
     if (emitRemoteProcess) {
       // send updated value to remote interpreter
-      remoteInterpreterProcess.updateRemoteAngularObject(getName(), o);
+      remoteInterpreterProcess.updateRemoteAngularObject(getName(), getNoteId(), o);
     }
   }
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -356,6 +356,7 @@ private String getInterpreterGroupKey(InterpreterGroup interpreterGroup) {
 
   private RemoteInterpreterContext convert(InterpreterContext ic) {
     return new RemoteInterpreterContext(
+        ic.getNoteId(),
         ic.getParagraphId(),
         ic.getParagraphTitle(),
         ic.getParagraphText(),

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -236,7 +236,7 @@ public int getNumIdleClient() {
    * @param name
    * @param o
    */
-  public void updateRemoteAngularObject(String name, Object o) {
+  public void updateRemoteAngularObject(String name, String noteId, Object o) {
     Client client = null;
     try {
       client = getClient();
@@ -249,7 +249,7 @@ public void updateRemoteAngularObject(String name, Object o) {
 
     try {
       Gson gson = new Gson();
-      client.angularObjectUpdate(name, gson.toJson(o));
+      client.angularObjectUpdate(name, noteId, gson.toJson(o));
     } catch (TException e) {
       logger.error("Can't update angular object", e);
     } finally {

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/display/AngularObjectTest.java
Patch:
@@ -29,7 +29,7 @@ public class AngularObjectTest {
   @Test
   public void testListener() {
     final AtomicInteger updated = new AtomicInteger(0);
-    AngularObject ao = new AngularObject("name", "value", new AngularObjectListener() {
+    AngularObject ao = new AngularObject("name", "value", "note1", new AngularObjectListener() {
 
       @Override
       public void updated(AngularObject updatedObject) {
@@ -55,7 +55,7 @@ public void updated(AngularObject updatedObject) {
   public void testWatcher() throws InterruptedException {
     final AtomicInteger updated = new AtomicInteger(0);
     final AtomicInteger onWatch = new AtomicInteger(0);
-    AngularObject ao = new AngularObject("name", "value", new AngularObjectListener() {
+    AngularObject ao = new AngularObject("name", "value", "note1", new AngularObjectListener() {
       @Override
       public void updated(AngularObject updatedObject) {
         updated.incrementAndGet();

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java
Patch:
@@ -90,6 +90,7 @@ public Map<String, Object> info() {
       @Override
       protected Object jobRun() throws Throwable {
         intpA.interpret("1000", new InterpreterContext(
+            "note",
             "jobId",
             "title",
             "text",

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Note.java
Patch:
@@ -295,11 +295,12 @@ private void snapshotAngularObjectRegistry() {
     for (InterpreterSetting setting : settings) {
       InterpreterGroup intpGroup = setting.getInterpreterGroup();
       AngularObjectRegistry registry = intpGroup.getAngularObjectRegistry();
-      angularObjects.put(intpGroup.getId(), registry.getAll());
+      angularObjects.put(intpGroup.getId(), registry.getAllWithGlobal(id));
     }
   }
 
   public void persist() throws IOException {
+    snapshotAngularObjectRegistry();
     repo.save(this);
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/notebook/Paragraph.java
Patch:
@@ -233,7 +233,9 @@ private InterpreterContext getInterpreterContext() {
       runners.add(new ParagraphRunner(note, note.id(), p.getId()));
     }
 
-    InterpreterContext interpreterContext = new InterpreterContext(getId(),
+    InterpreterContext interpreterContext = new InterpreterContext(
+            note.id(),
+            getId(),
             this.getTitle(),
             this.getText(),
             this.getConfig(),

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -55,7 +55,7 @@ public void setUp() throws Exception {
 	  System.setProperty(ConfVars.ZEPPELIN_INTERPRETERS.getVarName(), "org.apache.zeppelin.interpreter.mock.MockInterpreter1,org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 	  conf = new ZeppelinConfiguration();
 	  factory = new InterpreterFactory(conf, new InterpreterOption(false), null);
-	  context = new InterpreterContext("id", "title", "text", null, null, null, null);
+	  context = new InterpreterContext("note", "id", "title", "text", null, null, null, null);
 
 	}
 

File: flink/src/test/java/org/apache/zeppelin/flink/FlinkInterpreterTest.java
Patch:
@@ -59,8 +59,7 @@ public void testSimpleStatement() {
   public void testWordCount() {
     flink.interpret("val text = env.fromElements(\"To be or not to be\")", context);
     flink.interpret("val counts = text.flatMap { _.toLowerCase.split(\" \") }.map { (_, 1) }.groupBy(0).sum(1)", context);
-    flink.interpret("counts.print()", context);
-    InterpreterResult result = flink.interpret("env.execute(\"WordCount Example\")", context);
+    InterpreterResult result = flink.interpret("counts.print()", context);
     assertEquals(Code.SUCCESS, result.code());
   }
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/ClassloaderInterpreter.java
Patch:
@@ -55,8 +55,9 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
     Thread.currentThread().setContextClassLoader(cl);
     try {
       return intp.interpret(st, context);
+    } catch (InterpreterException e) {
+      throw e;
     } catch (Exception e) {
-      e.printStackTrace();
       throw new InterpreterException(e);
     } finally {
       cl = Thread.currentThread().getContextClassLoader();

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -30,6 +30,7 @@
 import org.apache.zeppelin.interpreter.InterpreterException;
 import org.apache.zeppelin.interpreter.InterpreterGroup;
 import org.apache.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.InterpreterResult.Code;
 import org.apache.zeppelin.interpreter.InterpreterResult.Type;
 import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterContext;
 import org.apache.zeppelin.interpreter.thrift.RemoteInterpreterResult;
@@ -222,7 +223,8 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
         context.getGui().setForms(remoteGui.getForms());
       }
 
-      return convert(remoteResult);
+      InterpreterResult result = convert(remoteResult);
+      return result;
     } catch (TException e) {
       throw new InterpreterException(e);
     } finally {

File: zeppelin-server/src/main/java/org/apache/zeppelin/socket/NotebookServer.java
Patch:
@@ -568,7 +568,9 @@ public void beforeStatusChange(Job job, Status before, Status after) {}
     @Override
     public void afterStatusChange(Job job, Status before, Status after) {
       if (after == Status.ERROR) {
-        job.getException().printStackTrace();
+        if (job.getException() != null) {
+          LOG.error("Error", job.getException());
+        }
       }
       if (job.isTerminated()) {
         LOG.info("Job {} is finished", job.getId());

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcess.java
Patch:
@@ -163,10 +163,10 @@ public int dereference() {
         clientPool.clear();
         clientPool.close();
 
-        // wait for 3 sec and force kill
+        // wait for some time (connectTimeout) and force kill
         // remote process server.serve() loop is not always finishing gracefully
         long startTime = System.currentTimeMillis();
-        while (System.currentTimeMillis() - startTime < 3 * 1000) {
+        while (System.currentTimeMillis() - startTime < connectTimeout) {
           if (this.isRunning()) {
             try {
               Thread.sleep(500);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -386,7 +386,7 @@ public static enum ConfVars {
     ZEPPELIN_SSL_TRUSTSTORE_PATH("zeppelin.ssl.truststore.path", null),
     ZEPPELIN_SSL_TRUSTSTORE_TYPE("zeppelin.ssl.truststore.type", null),
     ZEPPELIN_SSL_TRUSTSTORE_PASSWORD("zeppelin.ssl.truststore.password", null),
-    ZEPPELIN_WAR("zeppelin.war", "../zeppelin-web/src/main/webapp"),
+    ZEPPELIN_WAR("zeppelin.war", "../zeppelin-web/dist"),
     ZEPPELIN_API_WAR("zeppelin.api.war", "../zeppelin-docs/src/main/swagger"),
     ZEPPELIN_INTERPRETERS("zeppelin.interpreters", "org.apache.zeppelin.spark.SparkInterpreter,"
         + "org.apache.zeppelin.spark.PySparkInterpreter,"

File: spark/src/main/java/org/apache/zeppelin/spark/PySparkInterpreter.java
Patch:
@@ -137,6 +137,7 @@ public void open() {
     CommandLine cmd = CommandLine.parse(getProperty("zeppelin.pyspark.python"));
     cmd.addArgument(scriptPath, false);
     cmd.addArgument(Integer.toString(port), false);
+    cmd.addArgument(getJavaSparkContext().version(), false);
     executor = new DefaultExecutor();
     outputStream = new ByteArrayOutputStream();
     PipedOutputStream ps = new PipedOutputStream();

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -399,7 +399,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.tajo.TajoInterpreter,"
         + "org.apache.zeppelin.flink.FlinkInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"
-        + "org.apache.zeppelin.ignite.IgniteSqlInterpreter"),
+        + "org.apache.zeppelin.ignite.IgniteSqlInterpreter,"
+        + "org.apache.zeppelin.lens.LensInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
     ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteAngularObjectTest.java
Patch:
@@ -68,7 +68,8 @@ public void setUp() throws Exception {
         MockInterpreterAngular.class.getName(),
         new File("../bin/interpreter.sh").getAbsolutePath(),
         "fake",
-        env
+        env,
+        10 * 1000
         );
 
     intpGroup.add(intp);

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessTest.java
Patch:
@@ -33,7 +33,7 @@ public class RemoteInterpreterProcessTest {
   public void testStartStop() {
     InterpreterGroup intpGroup = new InterpreterGroup();
     RemoteInterpreterProcess rip = new RemoteInterpreterProcess("../bin/interpreter.sh", "nonexists", new HashMap<String, String>(),
-        new InterpreterContextRunnerPool());
+        new InterpreterContextRunnerPool(), 10 * 1000);
     assertFalse(rip.isRunning());
     assertEquals(0, rip.referenceCount());
     assertEquals(1, rip.reference(intpGroup));
@@ -49,7 +49,7 @@ public void testStartStop() {
   public void testClientFactory() throws Exception {
     InterpreterGroup intpGroup = new InterpreterGroup();
     RemoteInterpreterProcess rip = new RemoteInterpreterProcess("../bin/interpreter.sh", "nonexists", new HashMap<String, String>(),
-        new InterpreterContextRunnerPool(), mock(RemoteInterpreterEventPoller.class));
+        new InterpreterContextRunnerPool(), mock(RemoteInterpreterEventPoller.class), 10 * 1000);
     rip.reference(intpGroup);
     assertEquals(0, rip.getNumActiveClient());
     assertEquals(0, rip.getNumIdleClient());

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/scheduler/RemoteSchedulerTest.java
Patch:
@@ -62,7 +62,8 @@ public void test() throws Exception {
         MockInterpreterA.class.getName(),
         new File("../bin/interpreter.sh").getAbsolutePath(),
         "fake",
-        env
+        env,
+        10 * 1000
         );
 
     intpGroup.add(intpA);

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -401,6 +401,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.ignite.IgniteInterpreter,"
         + "org.apache.zeppelin.ignite.IgniteSqlInterpreter"),
     ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
+    ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT("zeppelin.interpreter.connect.timeout", 30000),
     ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
     ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),
     ZEPPELIN_NOTEBOOK_STORAGE("zeppelin.notebook.storage", VFSNotebookRepo.class.getName()),

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -621,8 +621,10 @@ private Interpreter createRepl(String dirName, String className,
   private Interpreter createRemoteRepl(String interpreterPath, String className,
       Properties property) {
 
+    int connectTimeout = conf.getInt(ConfVars.ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT);
     LazyOpenInterpreter intp = new LazyOpenInterpreter(new RemoteInterpreter(
-        property, className, conf.getInterpreterRemoteRunnerPath(), interpreterPath));
+        property, className, conf.getInterpreterRemoteRunnerPath(),
+        interpreterPath, connectTimeout));
     return intp;
   }
 

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -106,7 +106,7 @@ public class SparkInterpreter extends Interpreter {
                 "The location of the Spark jar file. If you use yarn as a cluster, "
                 + "we should set this value")
             .add("zeppelin.spark.useHiveContext",
-                getSystemDefault("ZEPPELIN_SPARK_USEHIVECONTEXT", 
+                getSystemDefault("ZEPPELIN_SPARK_USEHIVECONTEXT",
                     "zeppelin.spark.useHiveContext", "true"),
                 "Use HiveContext instead of SQLContext if it is true.")
             .add("zeppelin.spark.maxResult",

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -267,7 +267,8 @@ public static void register(String name, String group, String className) {
 
   public static void register(String name, String group, String className,
       Map<String, InterpreterProperty> properties) {
-    registeredInterpreters.put(name, new RegisteredInterpreter(name, group, className, properties));
+    registeredInterpreters.put(group + "." + name, new RegisteredInterpreter(
+        name, group, className, properties));
   }
 
   public static RegisteredInterpreter findRegisteredInterpreterByClassName(String className) {
@@ -278,6 +279,4 @@ public static RegisteredInterpreter findRegisteredInterpreterByClassName(String
     }
     return null;
   }
-
-
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -48,7 +48,7 @@ public void setUp() throws Exception {
     tmpDir.mkdirs();
     new File(tmpDir, "conf").mkdirs();
 
-	  MockInterpreter1.register("mock1", "org.apache.zeppelin.interpreter.mock.MockInterpreter1");
+    MockInterpreter1.register("mock1", "org.apache.zeppelin.interpreter.mock.MockInterpreter1");
 	  MockInterpreter2.register("mock2", "org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 
 	  System.setProperty(ConfVars.ZEPPELIN_HOME.getVarName(), tmpDir.getAbsolutePath());

File: spark/src/main/java/org/apache/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -442,13 +442,16 @@ public void open() {
       intp.interpret("import org.apache.spark.sql.functions._");
     }
 
+    /* Temporary disabling DisplayUtils. see https://issues.apache.org/jira/browse/ZEPPELIN-127
+     *
     // Utility functions for display
     intp.interpret("import org.apache.zeppelin.spark.utils.DisplayUtils._");
 
     // Scala implicit value for spark.maxResult
     intp.interpret("import org.apache.zeppelin.spark.utils.SparkMaxResult");
     intp.interpret("implicit val sparkMaxResult = new SparkMaxResult(" +
             Integer.parseInt(getProperty("zeppelin.spark.maxResult")) + ")");
+     */
 
     try {
       if (sc.version().startsWith("1.1") || sc.version().startsWith("1.2")) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -389,7 +389,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.angular.AngularInterpreter,"
         + "org.apache.zeppelin.shell.ShellInterpreter,"
         + "org.apache.zeppelin.hive.HiveInterpreter,"
-        + "org.apache.zeppelin.tajo.TajoInterpreter"),
+        + "org.apache.zeppelin.tajo.TajoInterpreter,"
+        + "org.apache.zeppelin.flink.FlinkInterpreter"),
         ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
         ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
         ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),

File: spark/src/test/java/org/apache/zeppelin/spark/SparkInterpreterTest.java
Patch:
@@ -55,8 +55,8 @@ public static int getSparkVersionNumber() {
       return 0;
     }
 
-    String[] split = repl.getSparkContext().version().split(".");
-    int version = Integer.parseInt(split[0]) + Integer.parseInt(split[1]);
+    String[] split = repl.getSparkContext().version().split("\\.");
+    int version = Integer.parseInt(split[0]) * 10 + Integer.parseInt(split[1]);
     return version;
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -57,7 +57,7 @@ public static void init() throws Exception {
   }
 
   @AfterClass
-  public static void destroy() {
+  public static void destroy() throws Exception {
     AbstractTestRestApi.shutDown();
   }
 

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -319,6 +319,7 @@ public Scheduler getScheduler() {
         maxConcurrency);
   }
 
+
   @Override
   public void setInterpreterGroup(InterpreterGroup interpreterGroup) {
     super.setInterpreterGroup(interpreterGroup);
@@ -328,7 +329,8 @@ public void setInterpreterGroup(InterpreterGroup interpreterGroup) {
           .get(getInterpreterGroupKey(interpreterGroup));
 
       // when interpreter process is not created or terminated
-      if (intpProcess == null || (!intpProcess.isRunning() && intpProcess.getPort() > 0)) {
+      if (intpProcess == null || (!intpProcess.isRunning() && intpProcess.getPort() > 0)
+          || (!intpProcess.isRunning() && intpProcess.getPort() == -1)) {
         interpreterGroupReference.put(getInterpreterGroupKey(interpreterGroup),
             new RemoteInterpreterProcess(interpreterRunner,
                 interpreterPath, env, interpreterContextRunnerPool));

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/scheduler/RemoteScheduler.java
Patch:
@@ -118,6 +118,9 @@ public Collection<Job> getJobsRunning() {
 
   @Override
   public void submit(Job job) {
+    if (terminate) {
+      throw new RuntimeException("Scheduler already terminated");
+    }
     job.setStatus(Status.PENDING);
 
     synchronized (queue) {

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.commons.configuration.XMLConfiguration;
 import org.apache.commons.configuration.tree.ConfigurationNode;
+import org.apache.zeppelin.notebook.repo.VFSNotebookRepo;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -328,7 +329,7 @@ public String getTrustStorePassword() {
   }
 
   public String getNotebookDir() {
-    return getRelativeDir(ConfVars.ZEPPELIN_NOTEBOOK_DIR);
+    return getString(ConfVars.ZEPPELIN_NOTEBOOK_DIR);
   }
 
   public String getInterpreterDir() {
@@ -392,6 +393,7 @@ public static enum ConfVars {
         ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
         ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
         ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),
+        ZEPPELIN_NOTEBOOK_STORAGE("zeppelin.notebook.storage", VFSNotebookRepo.class.getName()),
     ZEPPELIN_INTERPRETER_REMOTE_RUNNER("zeppelin.interpreter.remoterunner", "bin/interpreter.sh"),
     // Decide when new note is created, interpreter settings will be binded automatically or not.
     ZEPPELIN_NOTEBOOK_AUTO_INTERPRETER_BINDING("zeppelin.notebook.autoInterpreterBinding", true);

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Map;
 
 import org.apache.commons.httpclient.methods.GetMethod;
+import org.apache.zeppelin.conf.ZeppelinConfiguration;
 import org.apache.zeppelin.notebook.Note;
 import org.apache.zeppelin.server.ZeppelinServer;
 import org.junit.AfterClass;
@@ -79,7 +80,7 @@ public void getAvailableInterpreters() throws IOException {
     assertThat(get, isAllowed());
     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(), new TypeToken<Map<String, Object>>(){}.getType());
     Map<String, Object> body = (Map<String, Object>) resp.get("body");
-    assertEquals(8, body.size());
+    assertEquals(ZeppelinConfiguration.ConfVars.ZEPPELIN_INTERPRETERS.getStringValue().split(",").length, body.size());
     get.releaseConnection();
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -387,7 +387,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.markdown.Markdown,"
         + "org.apache.zeppelin.angular.AngularInterpreter,"
         + "org.apache.zeppelin.shell.ShellInterpreter,"
-        + "org.apache.zeppelin.hive.HiveInterpreter"),
+        + "org.apache.zeppelin.hive.HiveInterpreter,"
+        + "org.apache.zeppelin.tajo.TajoInterpreter"),
         ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
         ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
         ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -79,7 +79,7 @@ public void getAvailableInterpreters() throws IOException {
     assertThat(get, isAllowed());
     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(), new TypeToken<Map<String, Object>>(){}.getType());
     Map<String, Object> body = (Map<String, Object>) resp.get("body");
-    assertEquals(7, body.size());
+    assertEquals(8, body.size());
     get.releaseConnection();
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -386,7 +386,8 @@ public static enum ConfVars {
         + "org.apache.zeppelin.spark.DepInterpreter,"
         + "org.apache.zeppelin.markdown.Markdown,"
         + "org.apache.zeppelin.angular.AngularInterpreter,"
-        + "org.apache.zeppelin.shell.ShellInterpreter"),
+        + "org.apache.zeppelin.shell.ShellInterpreter,"
+        + "org.apache.zeppelin.hive.HiveInterpreter"),
         ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
         ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),
         ZEPPELIN_NOTEBOOK_DIR("zeppelin.notebook.dir", "notebook"),

File: zeppelin-interpreter/src/test/java/org/apache/zeppelin/interpreter/remote/RemoteInterpreterProcessTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.mockito.Mockito.*;
 
 import java.util.HashMap;
 
@@ -48,7 +49,7 @@ public void testStartStop() {
   public void testClientFactory() throws Exception {
     InterpreterGroup intpGroup = new InterpreterGroup();
     RemoteInterpreterProcess rip = new RemoteInterpreterProcess("../bin/interpreter.sh", "nonexists", new HashMap<String, String>(),
-        new InterpreterContextRunnerPool());
+        new InterpreterContextRunnerPool(), mock(RemoteInterpreterEventPoller.class));
     rip.reference(intpGroup);
     assertEquals(0, rip.getNumActiveClient());
     assertEquals(0, rip.getNumIdleClient());
@@ -63,5 +64,4 @@ public void testClientFactory() throws Exception {
 
     rip.dereference();
   }
-
 }

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -148,7 +148,7 @@ public Properties getProperty() {
     Map<String, InterpreterProperty> defaultProperties = Interpreter
         .findRegisteredInterpreterByClassName(getClassName()).getProperties();
     for (String k : defaultProperties.keySet()) {
-      if (!p.contains(k)) {
+      if (!p.containsKey(k)) {
         String value = defaultProperties.get(k).getDefaultValue();
         if (value != null) {
           p.put(k, defaultProperties.get(k).getDefaultValue());

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/Interpreter.java
Patch:
@@ -156,7 +156,7 @@ public Properties getProperty() {
       }
     }
 
-    return property;
+    return p;
   }
 
   public String getProperty(String key) {

File: hive/src/main/java/org/apache/zeppelin/hive/HiveInterpreter.java
Patch:
@@ -120,7 +120,7 @@ private InterpreterResult executeSql(String sql) {
         msg = new StringBuilder();
       }
       else {
-        msg = new StringBuilder("%table " + msg);
+        msg = new StringBuilder("%table ");
       }
       ResultSet res = currentStatement.executeQuery(sql);
       try {

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/InterpreterResult.java
Patch:
@@ -48,6 +48,7 @@ public static enum Code {
   public static enum Type {
     TEXT,
     HTML,
+    ANGULAR,
     TABLE,
     IMG,
     SVG,

File: zeppelin-server/src/main/java/org/apache/zeppelin/server/ZeppelinServer.java
Patch:
@@ -298,7 +298,7 @@ public ZeppelinServer() throws Exception {
 
     this.schedulerFactory = new SchedulerFactory();
 
-    this.replFactory = new InterpreterFactory(conf);
+    this.replFactory = new InterpreterFactory(conf, notebookServer);
     notebook = new Notebook(conf, schedulerFactory, replFactory, notebookServer);
   }
 

File: zeppelin-server/src/test/java/org/apache/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -79,7 +79,7 @@ public void getAvailableInterpreters() throws IOException {
     assertThat(get, isAllowed());
     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(), new TypeToken<Map<String, Object>>(){}.getType());
     Map<String, Object> body = (Map<String, Object>) resp.get("body");
-    assertEquals(6, body.size());
+    assertEquals(7, body.size());
     get.releaseConnection();
   }
 

File: zeppelin-zengine/src/main/java/org/apache/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -385,6 +385,7 @@ public static enum ConfVars {
         + "org.apache.zeppelin.spark.SparkSqlInterpreter,"
         + "org.apache.zeppelin.spark.DepInterpreter,"
         + "org.apache.zeppelin.markdown.Markdown,"
+        + "org.apache.zeppelin.angular.AngularInterpreter,"
         + "org.apache.zeppelin.shell.ShellInterpreter"),
         ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),
         ZEPPELIN_ENCODING("zeppelin.encoding", "UTF-8"),

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -54,8 +54,8 @@ public void setUp() throws Exception {
 	  System.setProperty(ConfVars.ZEPPELIN_HOME.getVarName(), tmpDir.getAbsolutePath());
 	  System.setProperty(ConfVars.ZEPPELIN_INTERPRETERS.getVarName(), "org.apache.zeppelin.interpreter.mock.MockInterpreter1,org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 	  conf = new ZeppelinConfiguration();
-	  factory = new InterpreterFactory(conf, new InterpreterOption(false));
-	  context = new InterpreterContext("id", "title", "text", null, null);
+	  factory = new InterpreterFactory(conf, new InterpreterOption(false), null);
+	  context = new InterpreterContext("id", "title", "text", null, null, null, null);
 
 	}
 
@@ -122,7 +122,7 @@ public void testSaveLoad() throws InterpreterException, IOException {
     factory.add("newsetting", "mock1", new InterpreterOption(false), new Properties());
     assertEquals(3, factory.get().size());
 
-    InterpreterFactory factory2 = new InterpreterFactory(conf);
+    InterpreterFactory factory2 = new InterpreterFactory(conf, null);
     assertEquals(3, factory2.get().size());
   }
 }

File: zeppelin-zengine/src/test/java/org/apache/zeppelin/notebook/NotebookTest.java
Patch:
@@ -69,7 +69,7 @@ public void setUp() throws Exception {
     MockInterpreter1.register("mock1", "org.apache.zeppelin.interpreter.mock.MockInterpreter1");
     MockInterpreter2.register("mock2", "org.apache.zeppelin.interpreter.mock.MockInterpreter2");
 
-    factory = new InterpreterFactory(conf, new InterpreterOption(false));
+    factory = new InterpreterFactory(conf, new InterpreterOption(false), null);
 
 		notebook = new Notebook(conf, schedulerFactory, factory, this);
 	}
@@ -108,7 +108,7 @@ public void testPersist() throws IOException, SchedulerException{
 		p1.setText("hello world");
 		note.persist();
 
-		Notebook notebook2 = new Notebook(conf, schedulerFactory, new InterpreterFactory(conf), this);
+		Notebook notebook2 = new Notebook(conf, schedulerFactory, new InterpreterFactory(conf, null), this);
 		assertEquals(1, notebook2.getAllNotes().size());
 	}
 

File: hive/src/test/java/org/apache/zeppelin/hive/HiveInterpreterTest.java
Patch:
@@ -29,8 +29,8 @@
 import java.util.Properties;
 import java.util.concurrent.Executor;
 
-import com.nflabs.zeppelin.interpreter.InterpreterContext;
-import com.nflabs.zeppelin.interpreter.InterpreterResult;
+import org.apache.zeppelin.interpreter.InterpreterContext;
+import org.apache.zeppelin.interpreter.InterpreterResult;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterContext.java
Patch:
@@ -4,7 +4,7 @@
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
-package com.nflabs.zeppelin.interpreter.thrift;
+package org.apache.zeppelin.interpreter.thrift;
 
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterResult.java
Patch:
@@ -4,7 +4,7 @@
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
-package com.nflabs.zeppelin.interpreter.thrift;
+package org.apache.zeppelin.interpreter.thrift;
 
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;

File: zeppelin-interpreter/src/main/java/org/apache/zeppelin/interpreter/thrift/RemoteInterpreterService.java
Patch:
@@ -4,7 +4,7 @@
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *  @generated
  */
-package com.nflabs.zeppelin.interpreter.thrift;
+package org.apache.zeppelin.interpreter.thrift;
 
 import org.apache.thrift.scheme.IScheme;
 import org.apache.thrift.scheme.SchemeFactory;

File: zeppelin-server/src/test/java/com/webautomation/ScreenCaptureHtmlUnitDriver.java
Patch:
@@ -42,7 +42,7 @@ public class ScreenCaptureHtmlUnitDriver extends HtmlUnitDriver implements Takes
     private static Map<String, byte[]> imagesCache = Collections.synchronizedMap(new HashMap<String, byte[]>());
 
     private static Map<String, String> cssjsCache = Collections.synchronizedMap(new HashMap<String, String>());
-    
+
     // http://stackoverflow.com/questions/4652777/java-regex-to-get-the-urls-from-css
     private final static Pattern cssUrlPattern = Pattern.compile("background(-image)?[\\s]*:[^url]*url[\\s]*\\([\\s]*([^\\)]*)[\\s]*\\)[\\s]*");// ?<url>
 
@@ -65,6 +65,7 @@ public ScreenCaptureHtmlUnitDriver(BrowserVersion version) {
     }
 
     //@Override
+    @Override
     @SuppressWarnings("unchecked")
     public <X> X getScreenshotAs(OutputType<X> target) throws WebDriverException {
         byte[] archive = new byte[0];

File: zeppelin-interpreter/src/main/java/com/nflabs/zeppelin/interpreter/LazyOpenInterpreter.java
Patch:
@@ -84,7 +84,6 @@ public void cancel(InterpreterContext context) {
 
   @Override
   public FormType getFormType() {
-    open();
     return intp.getFormType();
   }
 

File: zeppelin-interpreter/src/main/java/com/nflabs/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -25,6 +25,7 @@
 import com.nflabs.zeppelin.interpreter.InterpreterException;
 import com.nflabs.zeppelin.interpreter.InterpreterGroup;
 import com.nflabs.zeppelin.interpreter.InterpreterResult;
+import com.nflabs.zeppelin.interpreter.LazyOpenInterpreter;
 import com.nflabs.zeppelin.interpreter.thrift.RemoteInterpreterContext;
 import com.nflabs.zeppelin.interpreter.thrift.RemoteInterpreterResult;
 import com.nflabs.zeppelin.interpreter.thrift.RemoteInterpreterService;
@@ -112,7 +113,7 @@ public void createInterpreter(String className, Map<String, String> properties)
       repl.setClassloaderUrls(new URL[]{});
 
       synchronized (interpreterGroup) {
-        interpreterGroup.add(new ClassloaderInterpreter(repl, cl));
+        interpreterGroup.add(new LazyOpenInterpreter((new ClassloaderInterpreter(repl, cl))));
       }
 
       logger.info("Instantiate interpreter {}", className);

File: spark/src/main/java/com/nflabs/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -129,7 +129,7 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
     try {
       rdd = sqlc.sql(st);
 
-      Method take = rdd.getClass().getMethod("take", Integer.class);
+      Method take = rdd.getClass().getMethod("take", int.class);
       rows = (Object[]) take.invoke(rdd, maxResult + 1);
     } catch (Exception e) {
       logger.error("Error", e);
@@ -171,8 +171,8 @@ public InterpreterResult interpret(String st, InterpreterContext context) {
     try {
       for (int r = 0; r < maxResult && r < rows.length; r++) {
         Object row = rows[r];
-        Method isNullAt = row.getClass().getMethod("isNullAt", Integer.class);
-        Method apply = row.getClass().getMethod("apply", Integer.class);
+        Method isNullAt = row.getClass().getMethod("isNullAt", int.class);
+        Method apply = row.getClass().getMethod("apply", int.class);
 
         for (int i = 0; i < columns.size(); i++) {
           if (!(Boolean) isNullAt.invoke(row, i)) {

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -195,7 +195,8 @@ private void loadFromFile() throws IOException {
       InterpreterSetting setting = info.interpreterSettings.get(k);
 
       // Always use separate interpreter process
-      // While we decided to turn this feature on always (without providing enable/disable option on GUI).
+      // While we decided to turn this feature on always (without providing
+      // enable/disable option on GUI).
       // previously created setting should turn this feature on here.
       setting.getOption().setRemote(true);
 

File: zeppelin-interpreter/src/main/java/com/nflabs/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -281,7 +281,7 @@ public List<String> completion(String buf, int cursor) {
     }
 
     try {
-      return client.completion(buf, buf, cursor);
+      return client.completion(className, buf, cursor);
     } catch (TException e) {
       throw new InterpreterException(e);
     } finally {

File: markdown/src/main/java/com/nflabs/zeppelin/markdown/Markdown.java
Patch:
@@ -49,7 +49,7 @@ public InterpreterResult interpret(String st, InterpreterContext interpreterCont
     String html;
     try {
       html = md.process(st);
-    } catch (IOException e) {
+    } catch (IOException | java.lang.RuntimeException e) {
       return new InterpreterResult(Code.ERROR, e.getMessage());
     }
     return new InterpreterResult(Code.SUCCESS, "%html " + html);

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -36,7 +36,7 @@ public void setUp() throws Exception {
 	  System.setProperty(ConfVars.ZEPPELIN_HOME.getVarName(), tmpDir.getAbsolutePath());
 	  System.setProperty(ConfVars.ZEPPELIN_INTERPRETERS.getVarName(), "com.nflabs.zeppelin.interpreter.mock.MockInterpreter1,com.nflabs.zeppelin.interpreter.mock.MockInterpreter2");
 	  conf = new ZeppelinConfiguration();
-	  factory = new InterpreterFactory(conf);
+	  factory = new InterpreterFactory(conf, new InterpreterOption(false));
 	}
 
 	@After

File: spark/src/test/java/com/nflabs/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -35,12 +35,12 @@ public void setUp() throws Exception {
 		  }
 
   		sql = new SparkSqlInterpreter(p);
-		  sql.open();
 
   		InterpreterGroup intpGroup = new InterpreterGroup();
 		  intpGroup.add(repl);
 		  intpGroup.add(sql);
 		  sql.setInterpreterGroup(intpGroup);
+		  sql.open();
 		}
 		context = new InterpreterContext(new Paragraph(null, null));
 	}

File: zeppelin-interpreter/src/main/java/com/nflabs/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -68,11 +68,11 @@ public void createInterpreter(String className, Map<String, String> properties)
           replClass.getConstructor(new Class[] {Properties.class});
       Interpreter repl = constructor.newInstance(p);
       repl.setClassloaderUrls(new URL[]{});
-      repl.setInterpreterGroup(interpreterGroup);
 
       synchronized (interpreterGroup) {
         interpreterGroup.add(repl);
       }
+      repl.setInterpreterGroup(interpreterGroup);
     } catch (ClassNotFoundException | NoSuchMethodException | SecurityException
         | InstantiationException | IllegalAccessException
         | IllegalArgumentException | InvocationTargetException e) {
@@ -222,7 +222,7 @@ public int getProgress(String className, RemoteInterpreterContext interpreterCon
   @Override
   public String getFormType(String className) throws TException {
     Interpreter intp = getInterpreter(className);
-    return intp.getFormType().name();
+    return intp.getFormType().toString();
   }
 
   @Override

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -449,7 +449,8 @@ public List<String> getNoteInterpreterSettingBinding(String noteId) {
    * @param properties
    * @throws IOException
    */
-  public void setPropertyAndRestart(String id, boolean remote, Properties properties) throws IOException {
+  public void setPropertyAndRestart(String id, boolean remote,
+      Properties properties) throws IOException {
     synchronized (interpreterSettings) {
       InterpreterSetting intpsetting = interpreterSettings.get(id);
       if (intpsetting != null) {

File: zeppelin-interpreter/src/main/java/com/nflabs/zeppelin/interpreter/remote/RemoteInterpreter.java
Patch:
@@ -15,6 +15,7 @@
 import com.nflabs.zeppelin.interpreter.InterpreterException;
 import com.nflabs.zeppelin.interpreter.InterpreterGroup;
 import com.nflabs.zeppelin.interpreter.InterpreterResult;
+import com.nflabs.zeppelin.interpreter.InterpreterResult.Type;
 import com.nflabs.zeppelin.interpreter.thrift.RemoteInterpreterContext;
 import com.nflabs.zeppelin.interpreter.thrift.RemoteInterpreterResult;
 import com.nflabs.zeppelin.interpreter.thrift.RemoteInterpreterService.Client;
@@ -257,6 +258,7 @@ private RemoteInterpreterContext convert(InterpreterContext ic) {
   private InterpreterResult convert(RemoteInterpreterResult result) {
     return new InterpreterResult(
         InterpreterResult.Code.valueOf(result.getCode()),
+        Type.valueOf(result.getType()),
         result.getMsg());
   }
 }

File: zeppelin-interpreter/src/main/java/com/nflabs/zeppelin/interpreter/remote/RemoteInterpreterServer.java
Patch:
@@ -235,6 +235,7 @@ private InterpreterContext convert(RemoteInterpreterContext ric) {
   private RemoteInterpreterResult convert(InterpreterResult result) {
     return new RemoteInterpreterResult(
         result.code().name(),
+        result.type().name(),
         result.message());
   }
 }

File: spark/src/main/java/com/nflabs/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -76,11 +76,11 @@ public void open() {
     this.maxResult = conf.getInt("ZEPPELIN_SPARK_MAX_RESULT",
         "zeppelin.spark.maxResult",
         Integer.parseInt(getProperty("zeppelin.spark.maxResult")));
-    OpenSparkInterpreter(true);
+    openSparkInterpreter(true);
   }
 
   private SparkInterpreter getSparkInterpreter(){
-    return OpenSparkInterpreter(false);
+    return openSparkInterpreter(false);
   }
 
   private SparkInterpreter openSparkInterpreter(boolean open) {

File: zeppelin-server/src/test/java/com/nflabs/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -62,7 +62,7 @@ public void getAvailableInterpreters() throws IOException {
     assertThat(get, isAllowed());
     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(), new TypeToken<Map<String, Object>>(){}.getType());
     Map<String, Object> body = (Map<String, Object>) resp.get("body");
-    assertEquals(4, body.size());
+    assertEquals(5, body.size());
     get.releaseConnection();
   }
 

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -351,6 +351,7 @@ public static enum ConfVars {
     ZEPPELIN_API_WAR("zeppelin.api.war", "../zeppelin-docs/src/main/swagger"),
     ZEPPELIN_INTERPRETERS("zeppelin.interpreters", "com.nflabs.zeppelin.spark.SparkInterpreter,"
         + "com.nflabs.zeppelin.spark.SparkSqlInterpreter,"
+        + "com.nflabs.zeppelin.spark.DepInterpreter,"
         + "com.nflabs.zeppelin.markdown.Markdown,"
         + "com.nflabs.zeppelin.shell.ShellInterpreter"),
         ZEPPELIN_INTERPRETER_DIR("zeppelin.interpreter.dir", "interpreter"),

File: spark/src/test/java/com/nflabs/zeppelin/spark/DepInterpreterTest.java
Patch:
@@ -61,12 +61,12 @@ else if (file.isDirectory()) {
   }
 
   @Test
-  public void testBasic() {
+  public void testDefault() {
+    dep.getDependencyContext().reset();
     InterpreterResult ret = dep.interpret("z.load(\"org.apache.commons:commons-csv:1.1\")", context);
     assertEquals(Code.SUCCESS, ret.code());
 
     assertEquals(1, dep.getDependencyContext().getFiles().size());
-    assertEquals(0, dep.getDependencyContext().getFilesDist().size());
+    assertEquals(1, dep.getDependencyContext().getFilesDist().size());
   }
-
 }

File: spark/src/main/java/com/nflabs/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -203,7 +203,7 @@ public void open() {
 
     /*
      * > val env = new nsc.Settings(errLogger) > env.usejavacp.value = true > val p = new
-     * Interpreter(env) > p.setContextClassLoader > Alternatively you can set the class path throuh
+     * Interpreter(env) > p.setContextClassLoader > Alternatively you can set the class path through
      * nsc.Settings.classpath.
      *
      * >> val settings = new Settings() >> settings.usejavacp.value = true >>

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/AppScriptServlet.java
Patch:
@@ -20,7 +20,7 @@
 public class AppScriptServlet extends DefaultServlet {
 
   // Hash containing the possible scripts that contain the getPort()
-  // function originially defined in app.js
+  // function originally defined in app.js
   private static Set<String> scriptPaths = new HashSet<String>(
     Arrays.asList(
       "/scripts/scripts.js",

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/ZeppelinServer.java
Patch:
@@ -125,7 +125,7 @@ private static NotebookServer setupNotebookServer(ZeppelinConfiguration conf)
 
     NotebookServer server = new NotebookServer(conf.getWebSocketPort());
 
-    // Default WebSocketServer uses unecrypted connector, so only need to
+    // Default WebSocketServer uses unencrypted connector, so only need to
     // change the connector if SSL should be used.
     if (conf.useSsl()) {
       SslWebSocketServerFactory wsf = new SslWebSocketServerFactory(getSslContext(conf));

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/interpreter/ClassloaderInterpreter.java
Patch:
@@ -7,7 +7,7 @@
 import com.nflabs.zeppelin.scheduler.Scheduler;
 
 /**
- * Add to the classpath interperters.
+ * Add to the classpath interpreters.
  *
  */
 public class ClassloaderInterpreter

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/notebook/form/Setting.java
Patch:
@@ -16,7 +16,7 @@
 public class Setting implements Serializable {
 
   Map<String, Object> params = new HashMap<String, Object>(); // form parameters from client
-  Map<String, Input> forms = new TreeMap<String, Input>(); // form configuraiton
+  Map<String, Input> forms = new TreeMap<String, Input>(); // form configuration
 
   public Setting() {
 
@@ -41,7 +41,7 @@ public void setForms(Map<String, Input> forms) {
   }
 
   public Object input(String id, Object defaultValue) {
-    // first find values from client and then use defualt
+    // first find values from client and then use default
     Object value = params.get(id);
     if (value == null) {
       value = defaultValue;

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/scheduler/Job.java
Patch:
@@ -15,7 +15,7 @@
  *  - maintains internal state: it's status
  *  - supports listeners who are updated on status change
  *  
- *  Job class is serialized/deserialized and used server<->client commnunication
+ *  Job class is serialized/deserialized and used server<->client communication
  *  and saving/loading jobs from disk.
  *  Changing/adding/deleting non transitive field name need consideration of that.
  *  

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/notebook/NotebookTest.java
Patch:
@@ -87,7 +87,7 @@ public void testSelectingReplImplementation() throws IOException {
 	public void testPersist() throws IOException, SchedulerException{
 		Note note = notebook.createNote();
 		
-		// run with defatul repl
+		// run with default repl
 		Paragraph p1 = note.addParagraph();
 		p1.setText("hello world");
 		note.persist();

File: spark/src/main/java/com/nflabs/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -203,7 +203,7 @@ public void open() {
 
     /*
      * > val env = new nsc.Settings(errLogger) > env.usejavacp.value = true > val p = new
-     * Interpreter(env) > p.setContextClassLoader > Alternatively you can set the class path throuh
+     * Interpreter(env) > p.setContextClassLoader > Alternatively you can set the class path through
      * nsc.Settings.classpath.
      *
      * >> val settings = new Settings() >> settings.usejavacp.value = true >>

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/AppScriptServlet.java
Patch:
@@ -20,7 +20,7 @@
 public class AppScriptServlet extends DefaultServlet {
 
   // Hash containing the possible scripts that contain the getPort()
-  // function originially defined in app.js
+  // function originally defined in app.js
   private static Set<String> scriptPaths = new HashSet<String>(
     Arrays.asList(
       "/scripts/scripts.js",

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/ZeppelinServer.java
Patch:
@@ -125,7 +125,7 @@ private static NotebookServer setupNotebookServer(ZeppelinConfiguration conf)
 
     NotebookServer server = new NotebookServer(conf.getWebSocketPort());
 
-    // Default WebSocketServer uses unecrypted connector, so only need to
+    // Default WebSocketServer uses unencrypted connector, so only need to
     // change the connector if SSL should be used.
     if (conf.useSsl()) {
       SslWebSocketServerFactory wsf = new SslWebSocketServerFactory(getSslContext(conf));

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/interpreter/ClassloaderInterpreter.java
Patch:
@@ -7,7 +7,7 @@
 import com.nflabs.zeppelin.scheduler.Scheduler;
 
 /**
- * Add to the classpath interperters.
+ * Add to the classpath interpreters.
  *
  */
 public class ClassloaderInterpreter

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/notebook/form/Setting.java
Patch:
@@ -16,7 +16,7 @@
 public class Setting implements Serializable {
 
   Map<String, Object> params = new HashMap<String, Object>(); // form parameters from client
-  Map<String, Input> forms = new TreeMap<String, Input>(); // form configuraiton
+  Map<String, Input> forms = new TreeMap<String, Input>(); // form configuration
 
   public Setting() {
 
@@ -41,7 +41,7 @@ public void setForms(Map<String, Input> forms) {
   }
 
   public Object input(String id, Object defaultValue) {
-    // first find values from client and then use defualt
+    // first find values from client and then use default
     Object value = params.get(id);
     if (value == null) {
       value = defaultValue;

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/scheduler/Job.java
Patch:
@@ -15,7 +15,7 @@
  *  - maintains internal state: it's status
  *  - supports listeners who are updated on status change
  *  
- *  Job class is serialized/deserialized and used server<->client commnunication
+ *  Job class is serialized/deserialized and used server<->client communication
  *  and saving/loading jobs from disk.
  *  Changing/adding/deleting non transitive field name need consideration of that.
  *  

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/notebook/NotebookTest.java
Patch:
@@ -87,7 +87,7 @@ public void testSelectingReplImplementation() throws IOException {
 	public void testPersist() throws IOException, SchedulerException{
 		Note note = notebook.createNote();
 		
-		// run with defatul repl
+		// run with default repl
 		Paragraph p1 = note.addParagraph();
 		p1.setText("hello world");
 		note.persist();

File: spark/src/main/java/com/nflabs/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -203,7 +203,7 @@ public void open() {
 
     /*
      * > val env = new nsc.Settings(errLogger) > env.usejavacp.value = true > val p = new
-     * Interpreter(env) > p.setContextClassLoader > Alternatively you can set the class path throuh
+     * Interpreter(env) > p.setContextClassLoader > Alternatively you can set the class path through
      * nsc.Settings.classpath.
      *
      * >> val settings = new Settings() >> settings.usejavacp.value = true >>

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/AppScriptServlet.java
Patch:
@@ -20,7 +20,7 @@
 public class AppScriptServlet extends DefaultServlet {
 
   // Hash containing the possible scripts that contain the getPort()
-  // function originially defined in app.js
+  // function originally defined in app.js
   private static Set<String> scriptPaths = new HashSet<String>(
     Arrays.asList(
       "/scripts/scripts.js",

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/ZeppelinServer.java
Patch:
@@ -125,7 +125,7 @@ private static NotebookServer setupNotebookServer(ZeppelinConfiguration conf)
 
     NotebookServer server = new NotebookServer(conf.getWebSocketPort());
 
-    // Default WebSocketServer uses unecrypted connector, so only need to
+    // Default WebSocketServer uses unencrypted connector, so only need to
     // change the connector if SSL should be used.
     if (conf.useSsl()) {
       SslWebSocketServerFactory wsf = new SslWebSocketServerFactory(getSslContext(conf));

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/interpreter/ClassloaderInterpreter.java
Patch:
@@ -7,7 +7,7 @@
 import com.nflabs.zeppelin.scheduler.Scheduler;
 
 /**
- * Add to the classpath interperters.
+ * Add to the classpath interpreters.
  *
  */
 public class ClassloaderInterpreter

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/notebook/form/Setting.java
Patch:
@@ -16,7 +16,7 @@
 public class Setting implements Serializable {
 
   Map<String, Object> params = new HashMap<String, Object>(); // form parameters from client
-  Map<String, Input> forms = new TreeMap<String, Input>(); // form configuraiton
+  Map<String, Input> forms = new TreeMap<String, Input>(); // form configuration
 
   public Setting() {
 
@@ -41,7 +41,7 @@ public void setForms(Map<String, Input> forms) {
   }
 
   public Object input(String id, Object defaultValue) {
-    // first find values from client and then use defualt
+    // first find values from client and then use default
     Object value = params.get(id);
     if (value == null) {
       value = defaultValue;

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/scheduler/Job.java
Patch:
@@ -15,7 +15,7 @@
  *  - maintains internal state: it's status
  *  - supports listeners who are updated on status change
  *  
- *  Job class is serialized/deserialized and used server<->client commnunication
+ *  Job class is serialized/deserialized and used server<->client communication
  *  and saving/loading jobs from disk.
  *  Changing/adding/deleting non transitive field name need consideration of that.
  *  

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/notebook/NotebookTest.java
Patch:
@@ -87,7 +87,7 @@ public void testSelectingReplImplementation() throws IOException {
 	public void testPersist() throws IOException, SchedulerException{
 		Note note = notebook.createNote();
 		
-		// run with defatul repl
+		// run with default repl
 		Paragraph p1 = note.addParagraph();
 		p1.setText("hello world");
 		note.persist();

File: zeppelin-server/src/test/java/com/nflabs/zeppelin/rest/ZeppelinRestApiTest.java
Patch:
@@ -62,7 +62,7 @@ public void getAvailableInterpreters() throws IOException {
     assertThat(get, isAllowed());
     Map<String, Object> resp = gson.fromJson(get.getResponseBodyAsString(), new TypeToken<Map<String, Object>>(){}.getType());
     Map<String, Object> body = (Map<String, Object>) resp.get("body");
-    assertEquals(4, body.size());
+    assertEquals(5, body.size());
     get.releaseConnection();
   }
 

File: spark/src/main/java/com/nflabs/zeppelin/spark/dep/DependencyResolver.java
Patch:
@@ -72,6 +72,8 @@ public DependencyResolver(SparkIMain intp, SparkContext sc) {
     this.global = intp.global();
     this.sc = sc;
     repos.add(Booter.newCentralRepository()); // add maven central
+    repos.add(new RemoteRepository("local", "default", "file://"
+        + System.getProperty("user.home") + "/.m2/repository"));
   }
 
   public void addRepo(String id, String url, boolean snapshot) {

File: spark/src/main/java/com/nflabs/zeppelin/spark/dep/DependencyResolver.java
Patch:
@@ -61,6 +61,8 @@ public class DependencyResolver {
 
   private final String[] exclusions = new String[] {"org.scala-lang:scala-library",
                                                     "org.scala-lang:scala-compiler",
+                                                    "org.scala-lang:scala-reflect",
+                                                    "org.scala-lang:scalap",
                                                     "com.nflabs.zeppelin:zeppelin-zengine",
                                                     "com.nflabs.zeppelin:zeppelin-spark",
                                                     "com.nflabs.zeppelin:zeppelin-server"};

File: markdown/src/test/java/com/nflabs/zeppelin/markdown/MarkdownTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.nflabs.zeppelin.markdown;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
 
 import java.util.Properties;
 
@@ -24,7 +24,7 @@ public void tearDown() throws Exception {
 	public void test() {
 		Markdown md = new Markdown(new Properties());
 		md.open();
-		InterpreterResult result = md.interpret("This is ~~deleted~~ text");
+		InterpreterResult result = md.interpret("This is ~~deleted~~ text", null);
 		assertEquals("<p>This is <s>deleted</s> text</p>\n", result.message());
 		System.out.println(MarkdownTest.class.getName());
 	}

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/notebook/Notebook.java
Patch:
@@ -106,8 +106,8 @@ private void loadAllNotes() throws IOException {
       return;
     }
     for (File f : dirs) {
-      boolean isHidden = !f.getName().startsWith(".");
-      if (f.isDirectory() && isHidden) {
+      boolean isHidden = f.getName().startsWith(".");
+      if (f.isDirectory() && !isHidden) {
         Scheduler scheduler =
             schedulerFactory.createOrGetFIFOScheduler("note_" + System.currentTimeMillis());
         logger.info("Loading note from " + f.getName());

File: spark/src/main/java/com/nflabs/zeppelin/spark/dep/RepositorySystemFactory.java
Patch:
@@ -25,6 +25,9 @@ public static RepositorySystem newRepositorySystem() {
     return locator.getService(RepositorySystem.class);
   }
 
+  /**
+   * ManualWagonProvider 
+   */
   public static class ManualWagonProvider implements WagonProvider {
 
     public Wagon lookup(String roleHint) throws Exception {

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/notebook/Note.java
Patch:
@@ -234,8 +234,7 @@ public List<Paragraph> getParagraphs(){
 			return new LinkedList<Paragraph>(paragraphs);
 		}
 	}
-	
-	
+
 	public void persist() throws IOException{
 		GsonBuilder gsonBuilder = new GsonBuilder();
 		gsonBuilder.setPrettyPrinting();

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -233,7 +233,7 @@ public static enum ConfVars {
 		ZEPPELIN_PORT				("zeppelin.server.port", 8080),
 		ZEPPELIN_WAR				("zeppelin.war", "../zeppelin-web/src/main/webapp"),
 	    ZEPPELIN_API_WAR            ("zeppelin.api.war", "../zeppelin-docs/src/main/swagger"),
-		ZEPPELIN_INTERPRETERS		("zeppelin.interpreters", "com.nflabs.zeppelin.spark.SparkInterpreter,com.nflabs.zeppelin.spark.SparkSqlInterpreter,com.nflabs.zeppelin.markdown.Markdown,com.nflabs.zeppelin.shell.ShellInterpreter"),
+		ZEPPELIN_INTERPRETERS		("zeppelin.interpreters", "com.nflabs.zeppelin.spark.SparkInterpreter,com.nflabs.zeppelin.spark.SparkSqlInterpreter,com.nflabs.zeppelin.markdown.Markdown,com.nflabs.zeppelin.shell.ShellInterpreter,com.nflabs.zeppelin.svg.Svg"),
 		ZEPPELIN_INTERPRETER_DIR	("zeppelin.interpreter.dir", "interpreter"),
 		ZEPPELIN_INTERPRETER_MODE	("zeppelin.interpreter.mode", "share"),     // 'separate', 'share'
 		ZEPPELIN_ENCODING			("zeppelin.encoding", "UTF-8"), 

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/interpreter/InterpreterResult.java
Patch:
@@ -14,6 +14,7 @@ public static enum Type {
 		HTML,
 		TABLE,
 		IMG,
+		SVG,
 		NULL
 	}
 	

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -64,10 +64,10 @@ private void init(){
 							if(className.equals(Interpreter.registeredInterpreters.get(intName))){
 								logger.info("Interpreter "+intName+" found. class="+className);
 								cleanCl.put(intName, ccl);
-							}
 							
-							if (className.equals(interpreterClassList[0])) {
-								defaultInterpreterName = intName;
+								if (className.equals(interpreterClassList[0])) {
+									defaultInterpreterName = intName;
+								}
 							}
 						}
 					} catch (ClassNotFoundException e) {

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/interpreter/InterpreterFactory.java
Patch:
@@ -64,10 +64,10 @@ private void init(){
 							if(className.equals(Interpreter.registeredInterpreters.get(intName))){
 								logger.info("Interpreter "+intName+" found. class="+className);
 								cleanCl.put(intName, ccl);
-							}
 							
-							if (className.equals(interpreterClassList[0])) {
-								defaultInterpreterName = intName;
+								if (className.equals(interpreterClassList[0])) {
+									defaultInterpreterName = intName;
+								}
 							}
 						}
 					} catch (ClassNotFoundException e) {

File: spark/src/main/java/com/nflabs/zeppelin/spark/SparkSqlInterpreter.java
Patch:
@@ -98,7 +98,6 @@ public InterpreterResult interpret(String st) {
 			
 		// ArrayType, BinaryType, BooleanType, ByteType, DecimalType, DoubleType, DynamicType, FloatType, FractionalType, IntegerType, IntegralType, LongType, MapType, NativeType, NullType, NumericType, ShortType, StringType, StructType
 		
-		int numRows=0;
 		for(int r = 0; r<maxResult && r<rows.length; r++){			
 			Row row = rows[r];
 			

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/socket/NotebookServer.java
Patch:
@@ -268,11 +268,13 @@ private void createNote(WebSocket conn, Notebook notebook) throws IOException {
     broadcastNoteList();
   }
 
-  private void removeNote(WebSocket conn, Notebook notebook, Message fromMessage) {
+  private void removeNote(WebSocket conn, Notebook notebook, Message fromMessage) throws IOException {
     String noteId = (String) fromMessage.get("id");
     if (noteId == null) {
       return ;
     }
+    Note note = notebook.getNote(noteId);
+    note.unpersist();
     notebook.removeNote(noteId);
     removeNote(noteId);
     broadcastNoteList();

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/socket/NotebookServer.java
Patch:
@@ -268,11 +268,13 @@ private void createNote(WebSocket conn, Notebook notebook) throws IOException {
     broadcastNoteList();
   }
 
-  private void removeNote(WebSocket conn, Notebook notebook, Message fromMessage) {
+  private void removeNote(WebSocket conn, Notebook notebook, Message fromMessage) throws IOException {
     String noteId = (String) fromMessage.get("id");
     if (noteId == null) {
       return ;
     }
+    Note note = notebook.getNote(noteId);
+    note.unpersist();
     notebook.removeNote(noteId);
     removeNote(noteId);
     broadcastNoteList();

File: spark/src/test/java/com/nflabs/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -45,7 +45,7 @@ public void test() {
 		assertEquals("name\tage\nmoon\t33\npark\t34\n", ret.message());
 		
 		assertEquals(InterpreterResult.Code.ERROR, sql.interpret("select wrong syntax").code());
-
+		assertEquals(InterpreterResult.Code.ERROR, sql.interpret("select case when name==\"aa\" then name else name end from people").code());
 	}
 
 }

File: spark/src/test/java/com/nflabs/zeppelin/spark/SparkSqlInterpreterTest.java
Patch:
@@ -45,7 +45,7 @@ public void test() {
 		assertEquals("name\tage\nmoon\t33\npark\t34\n", ret.message());
 		
 		assertEquals(InterpreterResult.Code.ERROR, sql.interpret("select wrong syntax").code());
-
+		assertEquals(InterpreterResult.Code.ERROR, sql.interpret("select case when name==\"aa\" then name else name end from people").code());
 	}
 
 }

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -232,7 +232,7 @@ public static enum ConfVars {
 	    ZEPPELIN_API_WAR            ("zeppelin.api.war", "../zeppelin-docs/src/main/swagger"),
 		ZEPPELIN_INTERPRETERS		("zeppelin.interpreters", "com.nflabs.zeppelin.spark.SparkInterpreter,com.nflabs.zeppelin.spark.SparkSqlInterpreter,com.nflabs.zeppelin.markdown.Markdown,com.nflabs.zeppelin.shell.ShellInterpreter"),
 		ZEPPELIN_INTERPRETER_DIR	("zeppelin.interpreter.dir", "interpreter"),
-		ZEPPELIN_INTERPRETER_MODE	("zeppelin.interpreter.mode", "separate"),     // 'separate', 'share'
+		ZEPPELIN_INTERPRETER_MODE	("zeppelin.interpreter.mode", "share"),     // 'separate', 'share'
 		ZEPPELIN_ENCODING			("zeppelin.encoding", "UTF-8"), 
 		ZEPPELIN_NOTEBOOK_DIR       ("zeppelin.notebook.dir", "notebook")		
 		;

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/notebook/NotebookTest.java
Patch:
@@ -55,14 +55,14 @@ public void testSelectingReplImplementation() {
 		Paragraph p1 = note.addParagraph();
 		p1.setText("hello world");
 		note.run(p1.getId());
-		while(p1.getStatus()==Status.READY || p1.isTerminated()==false) Thread.yield();
+		while(p1.isTerminated()==false || p1.getResult()==null) Thread.yield();
 		assertEquals("repl1: hello world", p1.getResult().message());
 		
 		// run with specific repl
 		Paragraph p2 = note.addParagraph();
 		p2.setText("%MockRepl2 hello world");
 		note.run(p2.getId());
-		while(p2.getStatus()==Status.READY || p2.isTerminated()==false) Thread.yield();
+		while(p2.isTerminated()==false || p2.getResult()==null) Thread.yield();
 		assertEquals("repl2: hello world", p2.getResult().message());
 	}
 	

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/notebook/NotebookTest.java
Patch:
@@ -15,6 +15,7 @@
 import com.nflabs.zeppelin.notebook.Note;
 import com.nflabs.zeppelin.notebook.Notebook;
 import com.nflabs.zeppelin.notebook.Paragraph;
+import com.nflabs.zeppelin.scheduler.Job.Status;
 import com.nflabs.zeppelin.scheduler.SchedulerFactory;
 
 public class NotebookTest {
@@ -54,14 +55,14 @@ public void testSelectingReplImplementation() {
 		Paragraph p1 = note.addParagraph();
 		p1.setText("hello world");
 		note.run(p1.getId());
-		while(p1.isTerminated()==false) Thread.yield();
+		while(p1.getStatus()==Status.READY || p1.isTerminated()==false) Thread.yield();
 		assertEquals("repl1: hello world", p1.getResult().message());
 		
 		// run with specific repl
 		Paragraph p2 = note.addParagraph();
 		p2.setText("%MockRepl2 hello world");
 		note.run(p2.getId());
-		while(p2.isTerminated()==false) Thread.yield();
+		while(p2.getStatus()==Status.READY || p2.isTerminated()==false) Thread.yield();
 		assertEquals("repl2: hello world", p2.getResult().message());
 	}
 	

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -228,7 +228,7 @@ private String getRelativeDir(ConfVars c){
 	public static enum ConfVars {
 		ZEPPELIN_HOME				("zeppelin.home", "../"),
 		ZEPPELIN_PORT				("zeppelin.server.port", 8080),
-		ZEPPELIN_WAR				("zeppelin.war", "../zeppelin-web2/src/main/webapp"),
+		ZEPPELIN_WAR				("zeppelin.war", "../zeppelin-web/src/main/webapp"),
 	    ZEPPELIN_API_WAR            ("zeppelin.api.war", "../zeppelin-docs/src/main/swagger"),
 		ZEPPELIN_INTERPRETERS		("zeppelin.interpreters", "spark:com.nflabs.zeppelin.spark.SparkInterpreter,sql:com.nflabs.zeppelin.spark.SparkSqlInterpreter,md:com.nflabs.zeppelin.markdown.Markdown,sh:com.nflabs.zeppelin.shell.ShellInterpreter"),
 		ZEPPELIN_INTERPRETER_DIR	("zeppelin.interpreter.dir", "interpreter"),

File: markdown/src/main/java/com/nflabs/zeppelin/markdown/Markdown.java
Patch:
@@ -38,7 +38,7 @@ public InterpreterResult interpret(String st) {
 		} catch (IOException e) {
 			return new InterpreterResult(Code.ERROR, e.getMessage());
 		}
-		return new InterpreterResult(Code.SUCCESS, html);
+		return new InterpreterResult(Code.SUCCESS, "%html "+html);
 	}
 
 	@Override

File: spark/src/main/java/com/nflabs/zeppelin/spark/SparkInterpreter.java
Patch:
@@ -35,7 +35,7 @@ public class SparkInterpreter extends Interpreter {
 
 	private SparkILoop interpreter;
 	private SparkIMain intp;
-	static private SparkContext sc;
+	private SparkContext sc;
 	private ByteArrayOutputStream out;
 	private SQLContext sqlc;
 	
@@ -281,6 +281,4 @@ public void destroy() {
 	public FormType getFormType() {
 		return FormType.NATIVE;
 	}
-	
-
 }

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/interpreter/InterpreterFactoryTest.java
Patch:
@@ -12,7 +12,7 @@
 import com.nflabs.zeppelin.interpreter.Interpreter;
 import com.nflabs.zeppelin.interpreter.InterpreterFactory;
 
-public class ReplFactoryTest {
+public class InterpreterFactoryTest {
 
 	@Before
 	public void setUp() throws Exception {
@@ -25,7 +25,7 @@ public void tearDown() throws Exception {
 	@Test
 	public void testBasic() {
 		InterpreterFactory factory = new InterpreterFactory(ZeppelinConfiguration.create());
-		Interpreter repl1 = factory.createRepl("mock", "com.nflabs.zeppelin.repl.mock.MockRepl", new Properties());
+		Interpreter repl1 = factory.createRepl("mock", "com.nflabs.zeppelin.interpreter.mock.MockInterpreter", new Properties());
 		repl1.bindValue("a", 1);
 		
 		assertEquals(repl1.getValue("a"), 1);

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/interpreter/mock/MockInterpreter.java
Patch:
@@ -7,9 +7,9 @@
 import com.nflabs.zeppelin.interpreter.Interpreter;
 import com.nflabs.zeppelin.interpreter.InterpreterResult;
 
-public class MockRepl extends Interpreter {
+public class MockInterpreter extends Interpreter {
 	
-	public MockRepl(Properties property) {
+	public MockInterpreter(Properties property) {
 		super(property);
 	}
 

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/interpreter/mock/MockInterpreter1.java
Patch:
@@ -5,9 +5,9 @@
 import com.nflabs.zeppelin.interpreter.Interpreter;
 import com.nflabs.zeppelin.interpreter.InterpreterResult;
 
-public class MockRepl1 extends Interpreter{
+public class MockInterpreter1 extends Interpreter{
 
-	public MockRepl1(Properties property) {
+	public MockInterpreter1(Properties property) {
 		super(property);
 	}
 

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/interpreter/mock/MockInterpreter2.java
Patch:
@@ -6,9 +6,9 @@
 import com.nflabs.zeppelin.interpreter.InterpreterResult;
 import com.nflabs.zeppelin.interpreter.Interpreter.FormType;
 
-public class MockRepl2 extends Interpreter{
+public class MockInterpreter2 extends Interpreter{
 
-	public MockRepl2(Properties property) {
+	public MockInterpreter2(Properties property) {
 		super(property);
 	}
 

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/notebook/NotebookTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.nflabs.zeppelin.conf.ZeppelinConfiguration;
 import com.nflabs.zeppelin.conf.ZeppelinConfiguration.ConfVars;
-import com.nflabs.zeppelin.interpreter.mock.MockReplFactory;
+import com.nflabs.zeppelin.interpreter.mock.MockInterpreterFactory;
 import com.nflabs.zeppelin.notebook.Note;
 import com.nflabs.zeppelin.notebook.Notebook;
 import com.nflabs.zeppelin.notebook.Paragraph;
@@ -38,7 +38,7 @@ public void setUp() throws Exception {
         
 		this.schedulerFactory = new SchedulerFactory();
 		
-		notebook = new Notebook(conf, schedulerFactory, new MockReplFactory(conf));
+		notebook = new Notebook(conf, schedulerFactory, new MockInterpreterFactory(conf));
 	}
 
 	@After
@@ -74,7 +74,7 @@ public void testPersist() throws IOException{
 		p1.setParagraph("hello world");
 		note.persist();
 		
-		Notebook notebook2 = new Notebook(conf, schedulerFactory, new MockReplFactory(conf));
+		Notebook notebook2 = new Notebook(conf, schedulerFactory, new MockInterpreterFactory(conf));
 		assertEquals(1, notebook2.getAllNotes().size());
 	}
 	

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/Notebook.java
Patch:
@@ -75,6 +75,7 @@ public void removeNote(String id){
 	private void loadAllNotes() throws IOException{
 		File notebookDir = new File(conf.getString(ConfVars.ZEPPELIN_NOTEBOOK_DIR));
 		File[] dirs = notebookDir.listFiles();
+		if(dirs==null) return;
 		for(File f : dirs) {
 			if(f.isDirectory()) {
 				Scheduler scheduler = schedulerFactory.createOrGetFIFOScheduler("note_"+System.currentTimeMillis());

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/socket/NotebookServer.java
Patch:
@@ -223,6 +223,7 @@ public void onMessage(WebSocket conn, String msg) {
 				// if it's an last pargraph, let's add new one
 				if(note.getLastParagraph().getId().equals(p.getId())){
 					note.addParagraph();
+					broadcastNote(note.id(), new Message(OP.NOTE).put("note", note));
 				}
 				
 				note.persist();
@@ -246,7 +247,7 @@ public void afterStatusChange(Job job, Status before,
 							} catch (IOException e) {
 								e.printStackTrace();
 							}
-							broadcastNote(note.id(), new Message(OP.PARAGRAPH).put("paragraph", note.getParagraph(paragraphId)));							
+							broadcastNote(note.id(), new Message(OP.NOTE).put("note", note));
 						} else {
 							broadcastNote(note.id(), new Message(OP.PARAGRAPH).put("paragraph", note.getParagraph(paragraphId)));
 						}

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/scheduler/SchedulerFactory.java
Patch:
@@ -18,7 +18,7 @@ public class SchedulerFactory implements SchedulerListener{
 	Map<String, Scheduler> schedulers = new LinkedHashMap<String, Scheduler>();
 	
 	public SchedulerFactory() throws Exception {
-		executor = Executors.newScheduledThreadPool(5);		
+		executor = Executors.newScheduledThreadPool(100);		
 	}
 	
 	public void destroy() {

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/scheduler/Job.java
Patch:
@@ -39,6 +39,7 @@ public static enum Status {
 		ABORT,;
         boolean isReady() { return this==READY; }
         boolean isRunning() { return this==RUNNING; }
+        boolean isPending() { return this==PENDING; }
 	}
 
     private String jobName;
@@ -99,7 +100,7 @@ public JobListener getListener(){
 	}
 		
 	public boolean isTerminated(){
-		return !this.status.isReady() && !this.status.isRunning(); 
+		return !this.status.isReady() && !this.status.isRunning() && !this.status.isPending(); 
 	}
 	
 	public boolean isRunning(){

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/scheduler/Job.java
Patch:
@@ -39,6 +39,7 @@ public static enum Status {
 		ABORT,;
         boolean isReady() { return this==READY; }
         boolean isRunning() { return this==RUNNING; }
+        boolean isPending() { return this==PENDING; }
 	}
 
     private String jobName;
@@ -99,7 +100,7 @@ public JobListener getListener(){
 	}
 		
 	public boolean isTerminated(){
-		return !this.status.isReady() && !this.status.isRunning(); 
+		return !this.status.isReady() && !this.status.isRunning() && !this.status.isPending(); 
 	}
 	
 	public boolean isRunning(){

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/scheduler/FIFOScheduler.java
Patch:
@@ -5,6 +5,8 @@
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 
+import com.nflabs.zeppelin.scheduler.Job.Status;
+
 public class FIFOScheduler implements Scheduler{
 	List<Job> queue = new LinkedList<Job>();
 	private ExecutorService executor;
@@ -45,6 +47,7 @@ public Collection<Job> getJobsRunning(){
 	
 	
 	public void submit(Job job){
+		job.setStatus(Status.PENDING);
 		synchronized(queue){
 			queue.add(job);
 			queue.notify();

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/scheduler/ParallelScheduler.java
Patch:
@@ -5,6 +5,8 @@
 import java.util.List;
 import java.util.concurrent.ExecutorService;
 
+import com.nflabs.zeppelin.scheduler.Job.Status;
+
 public class ParallelScheduler implements Scheduler{
 	List<Job> queue = new LinkedList<Job>();
 	List<Job> running = new LinkedList<Job>();
@@ -47,6 +49,7 @@ public Collection<Job> getJobsRunning(){
 	
 	
 	public void submit(Job job){
+		job.setStatus(Status.PENDING);
 		synchronized(queue){
 			queue.add(job);
 			queue.notify();

File: zeppelin-server/src/test/java/com/nflabs/zeppelin/scheduler/FIFOSchedulerTest.java
Patch:
@@ -29,7 +29,7 @@ public void testRun() throws InterruptedException{
 		Thread.sleep(200);
 
 		assertEquals(Status.RUNNING, job1.getStatus());
-		assertEquals(Status.READY, job2.getStatus());
+		assertEquals(Status.PENDING, job2.getStatus());
 		assertEquals(1, s.getJobsRunning().size());
 		assertEquals(1, s.getJobsWaiting().size());
 

File: zeppelin-server/src/test/java/com/nflabs/zeppelin/scheduler/ParallelSchedulerTest.java
Patch:
@@ -32,7 +32,7 @@ public void testRun() throws InterruptedException{
 
 		assertEquals(Status.RUNNING, job1.getStatus());
 		assertEquals(Status.RUNNING, job2.getStatus());
-		assertEquals(Status.READY, job3.getStatus());
+		assertEquals(Status.PENDING, job3.getStatus());
 		assertEquals(2, s.getJobsRunning().size());
 		assertEquals(1, s.getJobsWaiting().size());
 		

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -217,7 +217,7 @@ public static enum ConfVars {
 		ZEPPELIN_ZAN_REPO			("zeppelin.zan.repo", "https://github.com/NFLabs/zan.git"),
 		ZEPPELIN_ZAN_LOCAL_REPO		("zeppelin.zan.localrepo", "../zan-repo"),
 		ZEPPELIN_ZAN_SHARED_REPO	("zeppelin.zan.sharedrepo", null),
-		ZEPPELIN_JOB_SCHEDULER	    ("zeppelin.job.scheduler", "FIFO"), // FIFO or PARALLEL
+		ZEPPELIN_JOB_SCHEDULER	    ("zeppelin.job.scheduler", "PARALLEL"), // FIFO or PARALLEL
 		ZEPPELIN_MAX_RESULT			("zeppelin.max.result", 10000),     // max num result taken by result class
 		ZEPPELIN_MAX_HISTORY		("zeppelin.max.history", 100),      // max num of job history
 		ZEPPELIN_DRIVERS			("zeppelin.drivers", "hive:hive2://,exec:exec://"),

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -217,7 +217,7 @@ public static enum ConfVars {
 		ZEPPELIN_ZAN_REPO			("zeppelin.zan.repo", "https://github.com/NFLabs/zan.git"),
 		ZEPPELIN_ZAN_LOCAL_REPO		("zeppelin.zan.localrepo", "../zan-repo"),
 		ZEPPELIN_ZAN_SHARED_REPO	("zeppelin.zan.sharedrepo", null),
-		ZEPPELIN_JOB_SCHEDULER	    ("zeppelin.job.scheduler", "FIFO"), // FIFO or PARALLEL
+		ZEPPELIN_JOB_SCHEDULER	    ("zeppelin.job.scheduler", "PARALLEL"), // FIFO or PARALLEL
 		ZEPPELIN_MAX_RESULT			("zeppelin.max.result", 10000),     // max num result taken by result class
 		ZEPPELIN_MAX_HISTORY		("zeppelin.max.history", 100),      // max num of job history
 		ZEPPELIN_DRIVERS			("zeppelin.drivers", "hive:hive2://,exec:exec://"),

File: zeppelin-driver-jdbc/src/main/java/com/nflabs/zeppelin/driver/jdbc/JDBCConnection.java
Patch:
@@ -24,7 +24,7 @@ public JDBCConnection(Connection connection) {
 	@Override
 	public boolean isConnected() throws ZeppelinDriverException {
 		try {
-			return connection.isClosed();
+			return !connection.isClosed();
 		} catch (SQLException e) {
 			throw new ZeppelinDriverException(e);
 		}

File: zeppelin-zan/src/main/java/com/nflabs/zeppelin/zan/Info.java
Patch:
@@ -4,11 +4,11 @@ public class Info {
 	public static enum Status{
 		UNKNOWN,
 		INSTALLING,
-		INSTALLED,		
+		INSTALLED,
 		UNINSTALLED,
 		UNINSTALLING,
 		UPDATEAVAILABLE,
-		UPUPDATING,
+		UPDATING,
 		NOT_MANAGED,          // manually installed by user. not managed by ZAN
 	}
 	private String name;

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -214,7 +214,7 @@ public static enum ConfVars {
 		ZEPPELIN_WAR				("zeppelin.war", "../zeppelin-web/src/main/webapp"),
 	        ZEPPELIN_API_WAR                        ("zeppelin.api.war", "../zeppelin-docs/src/main/swagger"),
 		ZEPPELIN_JOB_DIR			("zeppelin.job.dir", "../jobs"),
-		ZEPPELIN_ZAN_REPO			("zeppelin.zan.repo", "https://github.com/NFLabs/zan"),
+		ZEPPELIN_ZAN_REPO			("zeppelin.zan.repo", "https://github.com/NFLabs/zan.git"),
 		ZEPPELIN_ZAN_LOCAL_REPO		("zeppelin.zan.localrepo", "../zan-repo"),
 		ZEPPELIN_ZAN_SHARED_REPO	("zeppelin.zan.sharedrepo", null),
 		ZEPPELIN_JOB_SCHEDULER	    ("zeppelin.job.scheduler", "FIFO"), // FIFO or PARALLEL

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/ERBEvaluator.java
Patch:
@@ -6,6 +6,7 @@
 import java.io.InputStreamReader;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.regex.Matcher;
 
 import javax.script.Bindings;
 import javax.script.ScriptContext;
@@ -84,7 +85,7 @@ public String eval(BufferedReader erb, Object zcontext) throws ZException{
 						newline = "";
 						first = false;
 					}
-					rubyScript.append("$_zpErb += \""+newline+line.replaceAll("\"", "\\\\\"")+"\"\n");
+					rubyScript.append("$_zpErb += \""+newline+line.replaceAll(Matcher.quoteReplacement("\\"), "\\\\\\\\").replaceAll("\"", "\\\\\"")+"\"\n");
 				}
 				rubyScript.append("$_zpErb += \"<% local_variables.each do |xx|\n    if xx != 'z' and xx != '_erbout' then $_zpLV[xx] = eval(xx) end\nend %>\"\n");
 			} catch (IOException e1) {

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -214,7 +214,7 @@ public static enum ConfVars {
 		ZEPPELIN_WAR				("zeppelin.war", "../zeppelin-web/src/main/webapp"),
 	        ZEPPELIN_API_WAR                        ("zeppelin.api.war", "../zeppelin-docs/src/main/swagger"),
 		ZEPPELIN_JOB_DIR			("zeppelin.job.dir", "../jobs"),
-		ZEPPELIN_ZAN_REPO			("zeppelin.zan.repo", "https://github.com/NFLabs/zan"),
+		ZEPPELIN_ZAN_REPO			("zeppelin.zan.repo", "https://github.com/NFLabs/zan.git"),
 		ZEPPELIN_ZAN_LOCAL_REPO		("zeppelin.zan.localrepo", "../zan-repo"),
 		ZEPPELIN_ZAN_SHARED_REPO	("zeppelin.zan.sharedrepo", null),
 		ZEPPELIN_JOB_SCHEDULER	    ("zeppelin.job.scheduler", "FIFO"), // FIFO or PARALLEL

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/ERBEvaluator.java
Patch:
@@ -6,6 +6,7 @@
 import java.io.InputStreamReader;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.regex.Matcher;
 
 import javax.script.Bindings;
 import javax.script.ScriptContext;
@@ -84,7 +85,7 @@ public String eval(BufferedReader erb, Object zcontext) throws ZException{
 						newline = "";
 						first = false;
 					}
-					rubyScript.append("$_zpErb += \""+newline+line.replaceAll("\"", "\\\\\"")+"\"\n");
+					rubyScript.append("$_zpErb += \""+newline+line.replaceAll(Matcher.quoteReplacement("\\"), "\\\\\\\\").replaceAll("\"", "\\\\\"")+"\"\n");
 				}
 				rubyScript.append("$_zpErb += \"<% local_variables.each do |xx|\n    if xx != 'z' and xx != '_erbout' then $_zpLV[xx] = eval(xx) end\nend %>\"\n");
 			} catch (IOException e1) {

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/stmt/Z.java
Patch:
@@ -316,8 +316,8 @@ public Z execute(ZeppelinConnection connection) throws ZException {
 		if (query!=null) {
 			String escapeSeq = "\"',;<%>!";
 			char escapeChar = '\\';
-			String [] blockStart = new String[]{ "\"", "'", "<%", "<", "N_<", "!"};
-			String [] blockEnd = new String[]{ "\"", "'", "%>", ";", "N_>", ";" };
+			String [] blockStart = new String[]{ "\"", "'", "<%"};
+			String [] blockEnd = new String[]{ "\"", "'", "%>"};
 			String [] op = new String[]{";"};
 			String [] querySplit = Util.split(query, escapeSeq, escapeChar, blockStart, blockEnd, op, false);
 

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/stmt/ZQL.java
Patch:
@@ -155,8 +155,8 @@ private ZPlan compileZql(String stmts) throws ZQLException, ZException{
 		
 		String escapeSeq = "\"',;<%>!";
 		char escapeChar = '\\';
-		String [] blockStart = new String[]{ "\"", "'", "<%", "<", "N_<", "!"};
-		String [] blockEnd = new String[]{ "\"", "'", "%>", ";", "N_>", ";" };
+		String [] blockStart = new String[]{ "\"", "'", "<%"};
+		String [] blockEnd = new String[]{ "\"", "'", "%>"};
 		String [] t = Util.split(erbEvalGlobalScope(stmts), escapeSeq, escapeChar, blockStart, blockEnd, op, true);
 
 		String currentOp = null;

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/stmt/Z.java
Patch:
@@ -316,8 +316,8 @@ public Z execute(ZeppelinConnection connection) throws ZException {
 		if (query!=null) {
 			String escapeSeq = "\"',;<%>!";
 			char escapeChar = '\\';
-			String [] blockStart = new String[]{ "\"", "'", "<%", "<", "N_<", "!"};
-			String [] blockEnd = new String[]{ "\"", "'", "%>", ";", "N_>", ";" };
+			String [] blockStart = new String[]{ "\"", "'", "<%"};
+			String [] blockEnd = new String[]{ "\"", "'", "%>"};
 			String [] op = new String[]{";"};
 			String [] querySplit = Util.split(query, escapeSeq, escapeChar, blockStart, blockEnd, op, false);
 

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/scheduler/Job.java
Patch:
@@ -25,7 +25,7 @@ public static enum Status {
 		FINISHED,
 		ERROR,
 		ABORT,;
-        boolean isReady() { return this==RUNNING; }
+        boolean isReady() { return this==READY; }
         boolean isRunning() { return this==RUNNING; }
 	}
 

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/zengine/stmt/LTest.java
Patch:
@@ -108,8 +108,9 @@ public void testLoadingExistingLibrary() throws ZException, IOException {
         test.withName("hello");
         assertEquals("CREATE VIEW "+test.name()+" AS select * from table limit 3", test.getQuery());
         List<URI> res = test.getResources();
-        assertEquals(1, res.size());
-        assertEquals("file:"+tmpDir+"/test/test_data.log", res.get(0).toString());
+        assertEquals(2, res.size());
+        assertTrue(res.get(0).toString().compareTo("file:"+tmpDir+"/test/test_data.log")==0 || res.get(0).toString().compareTo("file:"+tmpDir+"/test/no_resource")==0);
+        assertTrue(res.get(1).toString().compareTo("file:"+tmpDir+"/test/test_data.log")==0 || res.get(1).toString().compareTo("file:"+tmpDir+"/test/no_resource")==0);
         test.release();
 	}
 

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/stmt/ZQL.java
Patch:
@@ -155,8 +155,8 @@ private ZPlan compileZql(String stmts) throws ZQLException, ZException{
 		
 		String escapeSeq = "\"',;<%>!";
 		char escapeChar = '\\';
-		String [] blockStart = new String[]{ "\"", "'", "<%", "<", "N_<", "!"};
-		String [] blockEnd = new String[]{ "\"", "'", "%>", ";", "N_>", ";" };
+		String [] blockStart = new String[]{ "\"", "'", "<%"};
+		String [] blockEnd = new String[]{ "\"", "'", "%>"};
 		String [] t = Util.split(erbEvalGlobalScope(stmts), escapeSeq, escapeChar, blockStart, blockEnd, op, true);
 
 		String currentOp = null;

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/stmt/ZQL.java
Patch:
@@ -148,7 +148,7 @@ private ZPlan compileZql(String stmts) throws ZQLException, ZException{
 		char escapeChar = '\\';
 		String [] blockStart = new String[]{ "\"", "'", "<%", "<", "N_<", "!"};
 		String [] blockEnd = new String[]{ "\"", "'", "%>", ";", "N_>", ";" };
-		String [] t = Util.split(erbEvalGlobalScope(stmts), escapeSeq, escapeChar, blockStart, blockEnd, op, true);
+		String [] t = Util.split(stmts, escapeSeq, escapeChar, blockStart, blockEnd, op, true);
 		String currentOp = null;
 		for(int i=0; i<t.length; i++){
 			String stmt = t[i];

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -203,7 +203,7 @@ public static enum ConfVars {
 		ZEPPELIN_COMMAND_TIMEOUT	("zeppelin.command.timeout", 1000*60*30),  // 30 min
 		ZEPPELIN_JOB_SCHEDULER	    ("zeppelin.job.scheduler", "FIFO"), // FIFO or PARALLEL
 		ZEPPELIN_MAX_RESULT			("zeppelin.max.result", 10000),     // max num result taken by result class
-		ZEPPELIN_DRIVERS			("zeppelin.drivers", "hive:hive11:com.nflabs.zeppelin.driver.hive11.HiveZeppelinDriver:jdbc:hive2://,exec:exec:com.nflabs.zeppelin.driver.exec.ExecDriver:exec://"),
+		ZEPPELIN_DRIVERS			("zeppelin.drivers", "hive:hive:com.nflabs.zeppelin.driver.hive11.HiveZeppelinDriver:jdbc:hive2://,exec:exec:com.nflabs.zeppelin.driver.exec.ExecDriver:exec://"),
 		ZEPPELIN_DRIVER_DIR			("zeppelin.driver.dir", "../drivers"),
 		;
 		

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/ZeppelinServer.java
Patch:
@@ -116,9 +116,9 @@ public ZeppelinServer() throws Exception {
 		Zengine z = new Zengine();
 
         if(z.useFifoJobScheduler()){
-			this.analyzeSessionManager = new ZQLJobManager(schedulerFactory.createOrGetFIFOScheduler("analyze"), z.fs(), z.getConf().getString(ConfVars.ZEPPELIN_JOB_DIR));
+			this.analyzeSessionManager = new ZQLJobManager(z, schedulerFactory.createOrGetFIFOScheduler("analyze"), z.getConf().getString(ConfVars.ZEPPELIN_JOB_DIR));
 		} else {
-			this.analyzeSessionManager = new ZQLJobManager(schedulerFactory.createOrGetParallelScheduler("analyze", 100), z.fs(), z.getConf().getString(ConfVars.ZEPPELIN_JOB_DIR));
+			this.analyzeSessionManager = new ZQLJobManager(z, schedulerFactory.createOrGetParallelScheduler("analyze", 100), z.getConf().getString(ConfVars.ZEPPELIN_JOB_DIR));
 		}		
 		
 		this.zan = new ZAN(z.getConf().getString(ConfVars.ZEPPELIN_ZAN_REPO),

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/api/Z.java
Patch:
@@ -316,7 +316,6 @@ public void release() throws ZException{
 	public Z execute() throws ZException {
 		if(executed) { return this; }
 		initialize();
-		//connection = connection(conn);
 		
 		if (this.hasPrev()){
 			prev().execute();

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/driver/TestDriver.java
Patch:
@@ -11,7 +11,7 @@
 import com.nflabs.zeppelin.result.Result;
 
 public class TestDriver extends ZeppelinDriver{
-	public Map<String, Result> queries = new HashMap<String, Result>();
+	static public Map<String, Result> queries = new HashMap<String, Result>();
 	public Map<String, Result> views = new HashMap<String, Result>();
 	public Map<String, Result> tables = new HashMap<String, Result>();
 	

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/driver/TestDriverFactory.java
Patch:
@@ -29,7 +29,7 @@ public TestDriverFactory(ZeppelinConfiguration conf){
 	}
 	
 	public Collection<String> getAllConfigurationNames(){		
-		return uris.keySet();
+		return drivers.keySet();
 	}
 	
 	public String getDefaultConfigurationName(){

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/zengine/api/ZQLTest.java
Patch:
@@ -156,7 +156,7 @@ public void testAnnotationStatmentQuery() throws ZException, ZQLException{
 		List<Z> plan = zql.compile();
 		assertEquals(3, plan.size());
 		assertEquals("select * from test", plan.get(0).getQuery());
-		assertEquals("@driver set exec", plan.get(1).getQuery());
+		assertEquals("@driver set production", plan.get(1).getQuery());
 		assertEquals("!echo ls", plan.get(2).getQuery());
 		assertTrue(plan.get(1) instanceof AnnotationStatement); 
 		assertTrue(plan.get(2) instanceof Q); 

File: zeppelin-cli/src/main/java/com/nflabs/zeppelin/cli/ZANCli.java
Patch:
@@ -79,7 +79,6 @@ public static ZAN zan() throws ZException{
 		ZeppelinConfiguration conf = new ZeppelinConfiguration();
 		//TODO(alex): replace with just file system
 		Zengine z = new Zengine();
-	    z.configure();
 		
 		String zanRepo = conf.getString(ConfVars.ZEPPELIN_ZAN_REPO);
 		String zanLocalRepo = conf.getString(ConfVars.ZEPPELIN_ZAN_LOCAL_REPO);

File: zeppelin-cli/src/main/java/com/nflabs/zeppelin/cli/ZeppelinCli.java
Patch:
@@ -44,7 +44,6 @@ public static void main(String args[]) throws ParseException, ZException, IOExce
 		CommandLine cmd = parser.parse(options, args);
 
 		Zengine z = new Zengine();
-	    z.configure();
 
 		if(cmd.hasOption("f")){
 			ZQL zql = new ZQL(z);

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/zengine/api/QTest.java
Patch:
@@ -38,7 +38,7 @@ public void setUp() throws Exception {
         
         System.setProperty(ConfVars.ZEPPELIN_ZAN_LOCAL_REPO.getVarName(), tmpDir.toURI().toString());
         //Dependencies: ZeppelinDriver + ZeppelinConfiguration + fs + RubyExecutionEngine
-        Zengine z = new Zengine();
+        z = new Zengine();
         z.configure();
         
         HiveZeppelinDriver driver = new HiveZeppelinDriver(z.getConf());

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/result/Result.java
Patch:
@@ -27,8 +27,8 @@ public Result(int code, String [] message) throws ResultDataException{
 		super(code, message);
 	}
 	
-	public Result() throws ResultDataException {
-		super(0, null);
+	public Result() {
+		super();
 	}
 	
 	@Override

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/api/L.java
Patch:
@@ -86,7 +86,7 @@ protected void initialize() throws ZException{
 		try {		
 			// search for library dir
 			this.dir = new Path(libUri);
-			if(fs.getFileStatus(dir).isDir() == false){
+			if(!fs.exists(dir) || !fs.getFileStatus(dir).isDir()){
 				throw new ZException("Directory "+dir.toUri()+" does not exist");
 			}
 			this.erbFile = new Path(libUri.toString()+"/zql.erb");

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/driver/hive/HiveZeppelinDriver.java
Patch:
@@ -71,7 +71,7 @@ public ZeppelinConnection getConnection() throws ZeppelinDriverException {
 			} else if(isEmpty(uri)){ 
 				logger.debug("Create connection from hive configuration");
 				con = new HiveConnection(hiveConf());
-			} else if(uri.equals("jdbc:hive://")) { //local mode detected 
+			} else if(uri.equals("jdbc:hive://") || uri.equals("jdbc:hive2://")) { //local mode detected 
 				logger.debug("Create connection from local mode");
 				con = new HiveConnection(localHiveConf());
 			} else { // remote connection using jdbc uri

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/ZQLJobManager.java
Patch:
@@ -118,6 +118,8 @@ public ZQLJob run(String jobId){
 
 		if (s.getStatus() == Status.RUNNING) { 
 		    return s; 
+		} else {
+			s.setStatus(Status.READY);
 		}
 		s.setListener(this);
 		scheduler.submit(s);

File: zeppelin-server/src/test/java/com/nflabs/zeppelin/server/ZQLSessionManagerTest.java
Patch:
@@ -100,7 +100,7 @@ public void testRun() throws InterruptedException, SchedulerException{
 		
 		// run session again
 		sm.run(sess.getId());
-		Thread.sleep(500); // wait for start;
+
 		while(sm.get(sess.getId()).getStatus()!=Status.FINISHED){ // wait for finish
 			Thread.sleep(300);
 		}

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/ZQLJobManager.java
Patch:
@@ -118,6 +118,8 @@ public ZQLJob run(String jobId){
 
 		if (s.getStatus() == Status.RUNNING) { 
 		    return s; 
+		} else {
+			s.setStatus(Status.READY);
 		}
 		s.setListener(this);
 		scheduler.submit(s);

File: zeppelin-server/src/test/java/com/nflabs/zeppelin/server/ZQLSessionManagerTest.java
Patch:
@@ -100,7 +100,7 @@ public void testRun() throws InterruptedException, SchedulerException{
 		
 		// run session again
 		sm.run(sess.getId());
-		Thread.sleep(500); // wait for start;
+
 		while(sm.get(sess.getId()).getStatus()!=Status.FINISHED){ // wait for finish
 			Thread.sleep(300);
 		}

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/util/UtilsForTests.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-public class TestUtil {
+public class UtilsForTests {
 	
 	public static File createTmpDir() throws Exception {
 		File tmpDir = new File(System.getProperty("java.io.tmpdir")+"/ZeppelinLTest_"+System.currentTimeMillis());

File: zeppelin-zengine/src/test/java/com/nflabs/zeppelin/zengine/ShellExecStatementTest.java
Patch:
@@ -15,8 +15,8 @@ public ShellExecStatementTest() throws IOException {
 
     public void setUp() throws Exception {
         super.setUp();
-//      Z z = new Z();
-//      z.configure();
+
+        Z.configure();
         
         // Configuration => Driver => Connection
         driver = new HiveZeppelinDriver(Z.getConf());

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/util/Util.java
Patch:
@@ -55,7 +55,7 @@ public class Util {
 				}
 				curString += c;
 				escape = false;
-				lastEscapeOffset = i;
+				lastEscapeOffset = curString.length();
 				continue;
 			}
 

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/driver/hive/HiveZeppelinDriver.java
Patch:
@@ -27,7 +27,7 @@ public void setClient(HiveInterface client){
 	}
 
 	private String getConnectionUri(){
-		return getConf().getString("HIVE_CONNECTION_URI", "hive.connection.uri", null);
+		return getConf().getString("HIVE_CONNECTION_URI", "hive.connection.uri", "jdbc:hive://");
 	}
 	
 	private String getHiveDriverClass(){

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/rest/ZAN.java
Patch:
@@ -4,7 +4,6 @@
 
 import javax.ws.rs.GET;
 import javax.ws.rs.Path;
-import javax.ws.rs.Produces;
 
 @Path("/zan")
 public class ZAN {

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/JsonResponse.java
Patch:
@@ -40,7 +40,7 @@ public JsonResponse(javax.ws.rs.core.Response.Status status, String message, T b
 		this.body = body;
 	}
 
-	public JsonResponse setPretty(boolean pretty) {
+	public JsonResponse<T> setPretty(boolean pretty) {
 		this.pretty = pretty;
 		return this;
 	}
@@ -51,7 +51,7 @@ public JsonResponse setPretty(boolean pretty) {
 	 * @param newCookie
 	 * @return
 	 */
-	public JsonResponse addCookie(NewCookie newCookie) {
+	public JsonResponse<T> addCookie(NewCookie newCookie) {
 		if (cookies == null)
 			cookies = new ArrayList<NewCookie>();
 		cookies.add(newCookie);
@@ -66,7 +66,7 @@ public JsonResponse addCookie(NewCookie newCookie) {
 	 * @param value
 	 * @return
 	 */
-	public JsonResponse addCookie(String name, String value) {
+	public JsonResponse<?> addCookie(String name, String value) {
 		return addCookie(new NewCookie(name, value));
 	}
 

File: zeppelin-web/src/main/java/com/nflabs/zeppelin/web/Base.java
Patch:
@@ -8,7 +8,8 @@
 import org.apache.wicket.request.mapper.parameter.PageParameters;
 
 
-public class Base  extends WebPage{
+public class Base extends WebPage {
+    private static final long serialVersionUID = 4962397286766124332L;
 
     public Base(final PageParameters parameters) {
     	super(parameters);

File: zeppelin-web/src/main/java/com/nflabs/zeppelin/web/Zeppelin.java
Patch:
@@ -3,9 +3,10 @@
 import org.apache.wicket.request.mapper.parameter.PageParameters;
 
 
-public class Zeppelin extends Base{
+public class Zeppelin extends Base {
+    private static final long serialVersionUID = 7330835795624754020L;
 
-	public Zeppelin(PageParameters parameters) {
+    public Zeppelin(PageParameters parameters) {
 		super(parameters);
 	}
 

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/result/Result.java
Patch:
@@ -1,6 +1,5 @@
 package com.nflabs.zeppelin.result;
 
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.sql.ResultSet;

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/result/ResultDataException.java
Patch:
@@ -1,7 +1,9 @@
 package com.nflabs.zeppelin.result;
 
 public class ResultDataException extends Exception{
-	public ResultDataException(Exception e){
+    private static final long serialVersionUID = -6503372200666271740L;
+
+    public ResultDataException(Exception e){
 		super(e);
 	}
 	

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/result/ResultDataStream.java
Patch:
@@ -3,7 +3,6 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.sql.ResultSet;
-import java.sql.SQLException;
 
 public class ResultDataStream extends AbstractResult{
 	public static final String DEFAULT_COLUMN_SEPARATOR="\t";

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/RedirectStatement.java
Patch:
@@ -7,7 +7,8 @@
  * @author moon
  */
 public class RedirectStatement {
-	private String stmt;
+	@SuppressWarnings("unused")
+    private String stmt;
 	private String name;
 	private boolean table = false;
 

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/ZContext.java
Patch:
@@ -1,8 +1,6 @@
 package com.nflabs.zeppelin.zengine;
 
 import java.util.HashMap;
-import java.util.LinkedList;
-import java.util.List;
 import java.util.Map;
 
 /**

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/ZException.java
Patch:
@@ -1,7 +1,9 @@
 package com.nflabs.zeppelin.zengine;
 
 public class ZException extends Exception{
-	public ZException(Throwable e){
+    private static final long serialVersionUID = -2039301692456478552L;
+    
+    public ZException(Throwable e){
 		super(e);
 	}
 	public ZException(String m){

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/ZQLException.java
Patch:
@@ -1,7 +1,9 @@
 package com.nflabs.zeppelin.zengine;
 
 public class ZQLException extends Exception{
-	public ZQLException(Exception e){
+    private static final long serialVersionUID = -1706289522346311416L;
+
+    public ZQLException(Exception e){
 		super(e);
 	}
 	

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/scheduler/Job.java
Patch:
@@ -4,8 +4,6 @@
 import java.util.Date;
 import java.util.Map;
 
-import org.apache.log4j.Logger;
-
 import com.nflabs.zeppelin.scheduler.JobListener;
 
 public abstract class Job {
@@ -137,4 +135,4 @@ public Date getDateFinished() {
 	}
 	
 	
-}
\ No newline at end of file
+}

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/scheduler/SchedulerFactory.java
Patch:
@@ -8,11 +8,12 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 
 public class SchedulerFactory implements SchedulerListener{
-	private final Logger logger = Logger.getLogger(SchedulerFactory.class);
+	private final Logger logger = LoggerFactory.getLogger(SchedulerFactory.class);
 	ScheduledExecutorService executor;
 	Map<String, Scheduler> schedulers = new LinkedHashMap<String, Scheduler>();
 	

File: zeppelin-server/src/main/java/com/nflabs/zeppelin/server/ZQLSession.java
Patch:
@@ -6,7 +6,8 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.nflabs.zeppelin.result.Result;
 import com.nflabs.zeppelin.scheduler.Job;
@@ -17,7 +18,7 @@
 import com.nflabs.zeppelin.zengine.ZQLException;
 
 public class ZQLSession extends Job{
-	transient Logger logger = Logger.getLogger(ZQLSession.class);
+	transient Logger logger = LoggerFactory.getLogger(ZQLSession.class);
 
 	private String zql;
 	private List<Map<String, Object>> params;

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/ExecStatement.java
Patch:
@@ -11,15 +11,16 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 public class ExecStatement extends Q{
 	public ExecStatement(String command) throws ZException{
 		super(command);
 	}
 	
 	private Logger logger(){
-		return Logger.getLogger(ExecStatement.class);
+		return LoggerFactory.getLogger(ExecStatement.class);
 	}
 
 	@Override

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/Q.java
Patch:
@@ -17,7 +17,8 @@
 import javax.script.SimpleBindings;
 
 import org.apache.commons.lang.StringEscapeUtils;
-import org.apache.log4j.Logger;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import com.nflabs.zeppelin.result.Result;
 
@@ -49,7 +50,7 @@ public Q(String query) throws ZException{
 	}
 	
 	private Logger logger(){
-		return Logger.getLogger(Q.class);
+		return LoggerFactory.getLogger(Q.class);
 	}
 	
 	transient boolean initialized = false;

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/zengine/Z.java
Patch:
@@ -436,9 +436,9 @@ private Result executeQuery(String query, int max) throws ZException{
 				Statement stmt = con.createStatement();
 				logger().info("add resource "+res.toString()); 
 				if(res.getPath().endsWith(".jar")){
-					stmt.executeQuery("add JAR "+new File(res.toString()).getAbsolutePath());
+					stmt.executeQuery("add JAR "+res.toString());
 				} else {
-					stmt.executeQuery("add FILE "+new File(res.toString()).getAbsolutePath());
+					stmt.executeQuery("add FILE "+res.toString());
 					
 				}
 				stmt.close();

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/conf/ZeppelinConfiguration.java
Patch:
@@ -143,11 +143,10 @@ public static enum ConfVars {
 		ZEPPELIN_HOME				("zeppelin.home", "../"),
 		ZEPPELIN_PORT				("zeppelin.server.port", 8080),
 		ZEPPELIN_WAR				("zeppelin.war", "../zeppelin-web/src/main/webapp"),
-		ZEPPELIN_RESOURCE_DIR		("zeppelin.resource.dir", "resources"),
 		ZEPPELIN_SESSION_DIR		("zeppelin.session.dir", "sessions"),
+		ZEPPELIN_LOCAL_WAREHOUSE	("zeppelin.local.warehouse", "data"),
 		ZEPPELIN_ZAN_LOCAL_REPO		("zeppelin.zan.localrepo", "../zan-repo"),
-		HIVE_DRIVER					("hive.driver.class", "org.apache.hadoop.hive.jdbc.HiveDriver"), // for hive2 "org.apache.hive.jdbc.HiveDriver"
-		HIVE_URI					("hive.jdbc.uri", "jdbc:hive://")
+		HIVE_DRIVER					("hive.driver.class", "org.apache.hadoop.hive.jdbc.HiveDriver") // for hive2 "org.apache.hive.jdbc.HiveDriver"
 		;
 		
 		

File: zeppelin-zengine/src/main/java/com/nflabs/zeppelin/util/Util.java
Patch:
@@ -69,7 +69,7 @@ public class Util {
 				boolean splitted = false;
 				for(String splitter : splitters){
 					// forward check for splitter
-					if(splitter.compareTo(str.substring(i, Math.min(i+splitter.length(), str.length()-1)))==0){
+					if(splitter.compareTo(str.substring(i, Math.min(i+splitter.length(), str.length())))==0){
 						splits.add(curString);
 						if(includeSplitter==true){
 							splits.add(splitter);

File: zeppelin-core/src/main/java/com/nflabs/zeppelin/zql/Z.java
Patch:
@@ -8,13 +8,10 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
-import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.LinkedList;
 import java.util.List;
 
 import javax.script.ScriptEngine;
-import javax.script.ScriptEngineFactory;
 
 import org.apache.commons.configuration.ConfigurationException;
 import org.apache.hadoop.fs.FileSystem;

File: zeppelin-core/src/test/java/com/nflabs/zeppelin/zql/ZQLTest.java
Patch:
@@ -5,7 +5,6 @@
 import java.io.IOException;
 import java.util.List;
 
-import com.nflabs.zeppelin.conf.ZeppelinConfiguration;
 import com.nflabs.zeppelin.conf.ZeppelinConfiguration.ConfVars;
 
 import junit.framework.TestCase;
@@ -29,8 +28,6 @@ protected void setUp() throws Exception {
 		resource.write("".getBytes());
 		resource.close();
 		
-		ZeppelinConfiguration conf = new ZeppelinConfiguration();
-		
 		System.out.println(tmpDir.toURI().toString());
 		System.setProperty(ConfVars.ZEPPELIN_LIBRARY_DIR.getVarName(), tmpDir.toURI().toString());
 	}

File: zeppelin-core/src/test/java/com/nflabs/zeppelin/zql/ZTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.nflabs.zeppelin.zql;
 
 import java.sql.ResultSet;
-import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
 import java.util.HashMap;
 import java.util.List;
@@ -31,7 +30,7 @@ protected void tearDown() throws Exception {
 	
 	public void testPipeGetQuery() throws ZException{
 		assertEquals("create view vv as select * from (select * from bank) q limit 10", new Q("select * from bank")
-																	  .pipe(new Q("select * from (${q}) q limit 10"))
+																	  .pipe(new Q("select * from (${arg}) q limit 10"))
 																	  .pipe(new Q("create view vv as"))
 																	  .getQuery()
 		);

