File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelBuilder.java
Patch:
@@ -71,10 +71,10 @@ public void apply(ModelContext context) {
       for (Class<?> each : annotation.subTypes()) {
         modelRefs.add(modelRefFactory(context, enumTypeDeterminer, typeNameExtractor)
                           .apply(typeResolver.resolve(each)));
-        subclassKeys.add(modelSpecifications.create(
+        modelSpecifications.create(
             context,
             typeResolver.resolve(each)).getReference()
-                                            .orElse(null));
+            .ifPresent(subclassKeys::add);
       }
       context.getBuilder()
              .description(annotation.description())

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelBuilder.java
Patch:
@@ -71,10 +71,10 @@ public void apply(ModelContext context) {
       for (Class<?> each : annotation.subTypes()) {
         modelRefs.add(modelRefFactory(context, enumTypeDeterminer, typeNameExtractor)
                           .apply(typeResolver.resolve(each)));
-        subclassKeys.add(modelSpecifications.create(
+        modelSpecifications.create(
             context,
             typeResolver.resolve(each)).getReference()
-                                            .orElse(null));
+            .ifPresent(subclassKeys::add);
       }
       context.getBuilder()
              .description(annotation.description())

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -128,6 +128,7 @@ static Compatibility<springfox.documentation.service.Parameter, RequestParameter
             .query(q -> q.model(m -> modelRef.getModern().ifPresent(m::copyOf))
                 .defaultValue(param.defaultValue())
                 .enumerationFacet(e -> e.allowedValues(allowableValueFromString(param.allowableValues())))
+                .numericFacet(n -> n.from(allowableValueFromString(param.allowableValues())))
                 .collectionFacet(c -> c.collectionFormat(
                     CollectionFormat.convert(param.collectionFormat())
                         .orElse(null))))

File: springfox-boot-starter/src/main/java/springfox/boot/starter/autoconfigure/SwaggerUiWebFluxConfigurer.java
Patch:
@@ -4,6 +4,7 @@
 import org.springframework.web.reactive.config.ResourceHandlerRegistry;
 import org.springframework.web.reactive.config.WebFluxConfigurer;
 
+// tag::swagger-ui-configurer[]
 public class SwaggerUiWebFluxConfigurer implements WebFluxConfigurer {
   private final String baseUrl;
 
@@ -20,3 +21,4 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
         .resourceChain(false);
   }
 }
+// end::swagger-ui-configurer[]

File: springfox-boot-starter/src/main/java/springfox/boot/starter/autoconfigure/SwaggerUiWebMvcConfigurer.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
+// tag::swagger-ui-configurer[]
 public class SwaggerUiWebMvcConfigurer implements WebMvcConfigurer {
   private final String baseUrl;
 
@@ -27,3 +28,4 @@ public void addViewControllers(ViewControllerRegistry registry) {
         .setViewName("forward:" + baseUrl + "/swagger-ui/index.html");
   }
 }
+// end::swagger-ui-configurer[]

File: springfox-core/src/main/java/springfox/documentation/builders/ServerBuilder.java
Patch:
@@ -14,8 +14,8 @@ public class ServerBuilder {
   private String name;
   private String url;
   private String description;
-  private List<ServerVariable> variables = new ArrayList<>();
-  private List<VendorExtension> extensions = new ArrayList<>();
+  private final List<ServerVariable> variables = new ArrayList<>();
+  private final List<VendorExtension> extensions = new ArrayList<>();
 
   public ServerBuilder name(String name) {
     this.name = name;

File: springfox-oas/src/main/java/springfox/documentation/oas/configuration/OpenApiDocumentationConfiguration.java
Patch:
@@ -33,7 +33,9 @@
     SpringfoxWebMvcConfiguration.class,
     SpringfoxWebFluxConfiguration.class,
     SwaggerCommonConfiguration.class,
-    OpenApiMappingConfiguration.class
+    OpenApiMappingConfiguration.class,
+    OpenApiWebMvcConfiguration.class,
+    OpenApiWebFluxConfiguration.class
 })
 @ComponentScan(basePackages = {
     "springfox.documentation.oas.web",

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/configuration/Swagger2DocumentationConfiguration.java
Patch:
@@ -15,7 +15,9 @@
     SwaggerCommonConfiguration.class,
     SpringfoxWebConfiguration.class,
     SpringfoxWebFluxConfiguration.class,
-    SpringfoxWebMvcConfiguration.class
+    SpringfoxWebMvcConfiguration.class,
+    Swagger2WebMvcConfiguration.class,
+    Swagger2WebFluxConfiguration.class
 })
 @ComponentScan(basePackages = {
     "springfox.documentation.swagger2.mappers",

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/RequestParameterMapper.java
Patch:
@@ -123,8 +123,9 @@ Collection<Parameter> mapParameter(
           query.map(SimpleParameterSpecification::getModel)
               .flatMap(ModelSpecification::getScalar)
               .ifPresent(scalar -> {
-                ((AbstractSerializableParameter) finalParameter).setType(scalar.getType().getType());
-                ((AbstractSerializableParameter) finalParameter).setFormat(scalar.getType().getFormat());
+                Property property = new ScalarModelToPropertyConverter().convert(scalar);
+                ((AbstractSerializableParameter) finalParameter).setType(property.getType());
+                ((AbstractSerializableParameter) finalParameter).setFormat(property.getFormat());
               });
 
         }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerResponseMessageReader.java
Patch:
@@ -109,7 +109,8 @@ Set<Response>> read(OperationContext context) {
     Optional<ResolvedType> operationResponse =
         operationAnnotation.map(resolvedTypeFromApiOperation(
             typeResolver,
-            defaultResponse));
+            defaultResponse))
+        .map(context::alternateFor);
     List<ResponseHeader> operationHeaders =
         operationAnnotation.map(ApiOperation::responseHeaders)
             .map(headers -> Stream.of(headers)

File: springfox-core/src/main/java/springfox/documentation/schema/ScalarTypes.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.types.ResolvedArrayType;
+import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.web.multipart.MultipartFile;
 
 import java.io.File;
@@ -45,6 +46,7 @@ public class ScalarTypes {
     SCALAR_TYPE_LOOKUP.put(Currency.class, ScalarType.BIGDECIMAL);
     SCALAR_TYPE_LOOKUP.put(UUID.class, ScalarType.UUID);
     SCALAR_TYPE_LOOKUP.put(MultipartFile.class, ScalarType.BINARY);
+    SCALAR_TYPE_LOOKUP.put(FilePart.class, ScalarType.BINARY);
     SCALAR_TYPE_LOOKUP.put(File.class, ScalarType.BINARY);
     SCALAR_TYPE_LOOKUP.put(URL.class, ScalarType.URL);
     SCALAR_TYPE_LOOKUP.put(URI.class, ScalarType.URI);

File: springfox-schema/src/main/java/springfox/documentation/schema/Types.java
Patch:
@@ -20,6 +20,7 @@
 package springfox.documentation.schema;
 
 import com.fasterxml.classmate.ResolvedType;
+import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.web.multipart.MultipartFile;
 
 import java.lang.reflect.Type;
@@ -83,7 +84,8 @@ public class Types {
           new AbstractMap.SimpleEntry<>(BigInteger.class, "biginteger"),
           new AbstractMap.SimpleEntry<>(Currency.class, "string"),
           new AbstractMap.SimpleEntry<>(UUID.class, "uuid"),
-          new AbstractMap.SimpleEntry<>(MultipartFile.class, "__file"))
+          new AbstractMap.SimpleEntry<>(MultipartFile.class, "__file"),
+          new AbstractMap.SimpleEntry<>(FilePart.class, "__file"))
           .collect(toMap(
               Map.Entry::getKey,
               Map.Entry::getValue)));

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterTypeReader.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
+import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -124,7 +125,8 @@ private static boolean isListOfFiles(ResolvedType parameterType) {
   }
 
   private static boolean isFileType(ResolvedType parameterType) {
-    return MultipartFile.class.isAssignableFrom(parameterType.getErasedType());
+    return MultipartFile.class.isAssignableFrom(parameterType.getErasedType()) ||
+        FilePart.class.isAssignableFrom(parameterType.getErasedType());
   }
 
 }
\ No newline at end of file

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/plugins/WebfluxDefaultsProvider.java
Patch:
@@ -41,7 +41,7 @@ public DocumentationContextBuilder apply(DocumentationContextBuilder builder) {
     rules.add(newRule(resolver.resolve(Mono.class, resolver.resolve(ResponseEntity.class, WildcardType.class)),
         resolver.resolve(WildcardType.class), Ordered.HIGHEST_PRECEDENCE + 20));
     rules.add(newRule(resolver.resolve(Flux.class, WildcardType.class),
-        resolver.resolve(WildcardType.class), Ordered.HIGHEST_PRECEDENCE + 20));
+        resolver.resolve(List.class, WildcardType.class), Ordered.HIGHEST_PRECEDENCE + 20));
     rules.add(newRule(resolver.resolve(Mono.class, WildcardType.class),
         resolver.resolve(WildcardType.class), Ordered.HIGHEST_PRECEDENCE + 20));
     return builder.rules(rules);

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ScalarModelToPropertyConverter.java
Patch:
@@ -1,12 +1,12 @@
 package springfox.documentation.swagger2.mappers;
 
-import io.swagger.models.properties.BinaryProperty;
 import io.swagger.models.properties.BooleanProperty;
 import io.swagger.models.properties.ByteArrayProperty;
 import io.swagger.models.properties.DateProperty;
 import io.swagger.models.properties.DateTimeProperty;
 import io.swagger.models.properties.DecimalProperty;
 import io.swagger.models.properties.DoubleProperty;
+import io.swagger.models.properties.FileProperty;
 import io.swagger.models.properties.FloatProperty;
 import io.swagger.models.properties.IntegerProperty;
 import io.swagger.models.properties.LongProperty;
@@ -40,7 +40,7 @@ public class ScalarModelToPropertyConverter implements Converter<ScalarModelSpec
     SCALAR_SCHEMA_FACTORY.put(ScalarType.DOUBLE, any -> new DoubleProperty());
     SCALAR_SCHEMA_FACTORY.put(ScalarType.FLOAT, any -> new FloatProperty());
     SCALAR_SCHEMA_FACTORY.put(ScalarType.BOOLEAN, any -> new BooleanProperty());
-    SCALAR_SCHEMA_FACTORY.put(ScalarType.BINARY, any -> new BinaryProperty());
+    SCALAR_SCHEMA_FACTORY.put(ScalarType.BINARY, any -> new FileProperty());
     SCALAR_SCHEMA_FACTORY.put(ScalarType.DATE, any -> new DateProperty());
     SCALAR_SCHEMA_FACTORY.put(ScalarType.DATE_TIME, any -> new DateTimeProperty());
     SCALAR_SCHEMA_FACTORY.put(ScalarType.UUID, any -> new UUIDProperty());

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -121,9 +121,8 @@ void beforeMappingOperations(
     List<io.swagger.models.parameters.Parameter> parameters = new ArrayList<>();
     if (useModelV3) {
       for (RequestParameter each : source.getRequestParameters()) {
-        Mappers.getMapper(RequestParameterMapper.class)
-            .mapParameter(each, modelNamesRegistry)
-            .ifPresent(parameters::add);
+        parameters.addAll(Mappers.getMapper(RequestParameterMapper.class)
+            .mapParameter(each, modelNamesRegistry));
       }
       target.setResponses(mapResponses(source.getResponses(), modelNamesRegistry));
     } else {

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/BugsController.java
Patch:
@@ -373,7 +373,7 @@ public ResponseEntity<Example> bug1965(
       @Valid @RequestPart(name = "sfParamMap") @RequestParam Map<String, String> paramMap,
       @Valid @RequestPart(name = "sfId") @RequestParam Integer sfId,
       @Valid @RequestPart(name = "sfData") Example sfData,
-      @RequestParam(name = "file", required = false) MultipartFile supportFile) {
+      @RequestPart(name = "file", required = false) MultipartFile supportFile) {
     return ResponseEntity.ok(null);
   }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ScalarModelToPropertyConverter.java
Patch:
@@ -1,12 +1,12 @@
 package springfox.documentation.swagger2.mappers;
 
-import io.swagger.models.properties.BinaryProperty;
 import io.swagger.models.properties.BooleanProperty;
 import io.swagger.models.properties.ByteArrayProperty;
 import io.swagger.models.properties.DateProperty;
 import io.swagger.models.properties.DateTimeProperty;
 import io.swagger.models.properties.DecimalProperty;
 import io.swagger.models.properties.DoubleProperty;
+import io.swagger.models.properties.FileProperty;
 import io.swagger.models.properties.FloatProperty;
 import io.swagger.models.properties.IntegerProperty;
 import io.swagger.models.properties.LongProperty;
@@ -40,7 +40,7 @@ public class ScalarModelToPropertyConverter implements Converter<ScalarModelSpec
     SCALAR_SCHEMA_FACTORY.put(ScalarType.DOUBLE, any -> new DoubleProperty());
     SCALAR_SCHEMA_FACTORY.put(ScalarType.FLOAT, any -> new FloatProperty());
     SCALAR_SCHEMA_FACTORY.put(ScalarType.BOOLEAN, any -> new BooleanProperty());
-    SCALAR_SCHEMA_FACTORY.put(ScalarType.BINARY, any -> new BinaryProperty());
+    SCALAR_SCHEMA_FACTORY.put(ScalarType.BINARY, any -> new FileProperty());
     SCALAR_SCHEMA_FACTORY.put(ScalarType.DATE, any -> new DateProperty());
     SCALAR_SCHEMA_FACTORY.put(ScalarType.DATE_TIME, any -> new DateTimeProperty());
     SCALAR_SCHEMA_FACTORY.put(ScalarType.UUID, any -> new UUIDProperty());

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -121,9 +121,8 @@ void beforeMappingOperations(
     List<io.swagger.models.parameters.Parameter> parameters = new ArrayList<>();
     if (useModelV3) {
       for (RequestParameter each : source.getRequestParameters()) {
-        Mappers.getMapper(RequestParameterMapper.class)
-            .mapParameter(each, modelNamesRegistry)
-            .ifPresent(parameters::add);
+        parameters.addAll(Mappers.getMapper(RequestParameterMapper.class)
+            .mapParameter(each, modelNamesRegistry));
       }
       target.setResponses(mapResponses(source.getResponses(), modelNamesRegistry));
     } else {

File: springfox-core/src/main/java/springfox/documentation/schema/ScalarTypes.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.types.ResolvedArrayType;
+import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.web.multipart.MultipartFile;
 
 import java.io.File;
@@ -45,6 +46,7 @@ public class ScalarTypes {
     SCALAR_TYPE_LOOKUP.put(Currency.class, ScalarType.BIGDECIMAL);
     SCALAR_TYPE_LOOKUP.put(UUID.class, ScalarType.UUID);
     SCALAR_TYPE_LOOKUP.put(MultipartFile.class, ScalarType.BINARY);
+    SCALAR_TYPE_LOOKUP.put(FilePart.class, ScalarType.BINARY);
     SCALAR_TYPE_LOOKUP.put(File.class, ScalarType.BINARY);
     SCALAR_TYPE_LOOKUP.put(URL.class, ScalarType.URL);
     SCALAR_TYPE_LOOKUP.put(URI.class, ScalarType.URI);

File: springfox-schema/src/main/java/springfox/documentation/schema/Types.java
Patch:
@@ -20,6 +20,7 @@
 package springfox.documentation.schema;
 
 import com.fasterxml.classmate.ResolvedType;
+import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.web.multipart.MultipartFile;
 
 import java.lang.reflect.Type;
@@ -83,7 +84,8 @@ public class Types {
           new AbstractMap.SimpleEntry<>(BigInteger.class, "biginteger"),
           new AbstractMap.SimpleEntry<>(Currency.class, "string"),
           new AbstractMap.SimpleEntry<>(UUID.class, "uuid"),
-          new AbstractMap.SimpleEntry<>(MultipartFile.class, "__file"))
+          new AbstractMap.SimpleEntry<>(MultipartFile.class, "__file"),
+          new AbstractMap.SimpleEntry<>(FilePart.class, "__file"))
           .collect(toMap(
               Map.Entry::getKey,
               Map.Entry::getValue)));

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterTypeReader.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.MediaType;
+import org.springframework.http.codec.multipart.FilePart;
 import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -124,7 +125,8 @@ private static boolean isListOfFiles(ResolvedType parameterType) {
   }
 
   private static boolean isFileType(ResolvedType parameterType) {
-    return MultipartFile.class.isAssignableFrom(parameterType.getErasedType());
+    return MultipartFile.class.isAssignableFrom(parameterType.getErasedType()) ||
+        FilePart.class.isAssignableFrom(parameterType.getErasedType());
   }
 
 }
\ No newline at end of file

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/plugins/WebfluxDefaultsProvider.java
Patch:
@@ -41,7 +41,7 @@ public DocumentationContextBuilder apply(DocumentationContextBuilder builder) {
     rules.add(newRule(resolver.resolve(Mono.class, resolver.resolve(ResponseEntity.class, WildcardType.class)),
         resolver.resolve(WildcardType.class), Ordered.HIGHEST_PRECEDENCE + 20));
     rules.add(newRule(resolver.resolve(Flux.class, WildcardType.class),
-        resolver.resolve(WildcardType.class), Ordered.HIGHEST_PRECEDENCE + 20));
+        resolver.resolve(List.class, WildcardType.class), Ordered.HIGHEST_PRECEDENCE + 20));
     rules.add(newRule(resolver.resolve(Mono.class, WildcardType.class),
         resolver.resolve(WildcardType.class), Ordered.HIGHEST_PRECEDENCE + 20));
     return builder.rules(rules);

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/schema/EmbeddedCollectionModelProvider.java
Patch:
@@ -166,8 +166,7 @@ public Set<ResolvedType> dependencies(ModelContext context) {
   public boolean supports(ModelContext delimiter) {
     return EmbeddedCollection.class.equals(resolver.resolve(delimiter.getType()).getErasedType())
         && (delimiter.getDocumentationType() == DocumentationType.SWAGGER_2
-        || delimiter.getDocumentationType() == DocumentationType.OAS_30
-        || delimiter.getDocumentationType() == DocumentationType.SPRING_WEB);
+        || delimiter.getDocumentationType() == DocumentationType.OAS_30);
   }
 
 }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/schema/ResourcesModelProvider.java
Patch:
@@ -204,8 +204,7 @@ public Set<ResolvedType> dependencies(ModelContext context) {
   public boolean supports(ModelContext delimiter) {
     return CollectionModel.class.equals(resourceType(delimiter.getType()).getErasedType())
         && (delimiter.getDocumentationType() == DocumentationType.SWAGGER_2
-        || delimiter.getDocumentationType() == DocumentationType.OAS_30
-        || delimiter.getDocumentationType() == DocumentationType.SPRING_WEB);
+        || delimiter.getDocumentationType() == DocumentationType.OAS_30);
   }
 
   private ResolvedType resourceType(Type type) {

File: springfox-petstore-webflux/src/main/java/springfox/petstore/webflux/RecursiveAlternateTypeRule.java
Patch:
@@ -16,10 +16,11 @@
  *
  *
  */
-package springfox.documentation.schema;
+package springfox.petstore.webflux;
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
+import springfox.documentation.schema.AlternateTypeRule;
 
 import java.util.List;
 import java.util.stream.Stream;
@@ -29,7 +30,7 @@
  */
 public class RecursiveAlternateTypeRule extends AlternateTypeRule {
 
-  private List<AlternateTypeRule> rules;
+  private final List<AlternateTypeRule> rules;
 
   public RecursiveAlternateTypeRule(
       TypeResolver typeResolver,

File: springfox-spi/src/main/java/springfox/documentation/spi/DocumentationType.java
Patch:
@@ -26,7 +26,9 @@ public class DocumentationType extends SimplePluginMetadata {
   public static final DocumentationType SWAGGER_12 = new DocumentationType("swagger", "1.2");
   public static final DocumentationType SWAGGER_2 = new DocumentationType("swagger", "2.0");
   public static final DocumentationType OAS_30 = new DocumentationType("openApi", "3.0");
-  public static final DocumentationType SPRING_WEB = new DocumentationType("spring-web", "1.0");
+  //@deprecated since 3.0.0
+  @Deprecated
+  public static final DocumentationType SPRING_WEB = new DocumentationType("spring-web", "5.2");
   private final MediaType mediaType;
 
   /**

File: springfox-spring-integration-webflux/src/main/java/springfox/documentation/spring/web/SpringIntegrationWebFluxRequestHandler.java
Patch:
@@ -39,7 +39,7 @@
 public class SpringIntegrationWebFluxRequestHandler extends WebFluxRequestHandler {
   private final HandlerMethodResolver methodResolver;
   private final HandlerMethod handlerMethod;
-  private SpringIntegrationParametersProvider parametersProvider;
+  private final SpringIntegrationParametersProvider parametersProvider;
 
   public SpringIntegrationWebFluxRequestHandler(
       HandlerMethodResolver methodResolver,

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OpenApiResponseReader.java
Patch:
@@ -80,8 +80,7 @@ public OpenApiResponseReader(
 
   @Override
   public void apply(OperationContext context) {
-    Set<Response> read = read(context);
-    context.operationBuilder().responses(read);
+    context.operationBuilder().responses(read(context));
   }
 
   @Override

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/schema/EmbeddedCollectionModelProvider.java
Patch:
@@ -166,8 +166,7 @@ public Set<ResolvedType> dependencies(ModelContext context) {
   public boolean supports(ModelContext delimiter) {
     return EmbeddedCollection.class.equals(resolver.resolve(delimiter.getType()).getErasedType())
         && (delimiter.getDocumentationType() == DocumentationType.SWAGGER_2
-        || delimiter.getDocumentationType() == DocumentationType.OAS_30
-        || delimiter.getDocumentationType() == DocumentationType.SPRING_WEB);
+        || delimiter.getDocumentationType() == DocumentationType.OAS_30);
   }
 
 }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/schema/ResourcesModelProvider.java
Patch:
@@ -204,8 +204,7 @@ public Set<ResolvedType> dependencies(ModelContext context) {
   public boolean supports(ModelContext delimiter) {
     return CollectionModel.class.equals(resourceType(delimiter.getType()).getErasedType())
         && (delimiter.getDocumentationType() == DocumentationType.SWAGGER_2
-        || delimiter.getDocumentationType() == DocumentationType.OAS_30
-        || delimiter.getDocumentationType() == DocumentationType.SPRING_WEB);
+        || delimiter.getDocumentationType() == DocumentationType.OAS_30);
   }
 
   private ResolvedType resourceType(Type type) {

File: springfox-spi/src/main/java/springfox/documentation/spi/DocumentationType.java
Patch:
@@ -26,7 +26,9 @@ public class DocumentationType extends SimplePluginMetadata {
   public static final DocumentationType SWAGGER_12 = new DocumentationType("swagger", "1.2");
   public static final DocumentationType SWAGGER_2 = new DocumentationType("swagger", "2.0");
   public static final DocumentationType OAS_30 = new DocumentationType("openApi", "3.0");
-  public static final DocumentationType SPRING_WEB = new DocumentationType("spring-web", "1.0");
+  //@deprecated since 3.0.0
+  @Deprecated
+  public static final DocumentationType SPRING_WEB = new DocumentationType("spring-web", "5.2");
   private final MediaType mediaType;
 
   /**

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ExpandedParameterBuilder.java
Patch:
@@ -134,7 +134,7 @@ public void apply(ParameterExpansionContext context) {
         .required(Boolean.FALSE)
         .in(context.getParameterType())
         .precedence(DEFAULT_PRECEDENCE)
-        .query(q -> q.collectionFormat(isContainerType(resolved) ? CollectionFormat.CSV : null)
+        .query(q -> q.collectionFormat(isContainerType(resolved) ? CollectionFormat.MULTI : null)
             .model(m -> m.copyOf(modelSpecification))
             .enumerationFacet(e -> e.allowedValues(finalAllowable)));
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterMultiplesReader.java
Patch:
@@ -39,9 +39,9 @@ public void apply(ParameterContext context) {
     ResolvedType parameterType = context.resolvedMethodParameter().getParameterType();
     context.parameterBuilder().allowMultiple(isCollectionType(parameterType));
     context.requestParameterBuilder()
-           .query(q -> q.collectionFormat(isCollectionType(parameterType)
-                                          ? CollectionFormat.CSV
-                                          : null));
+        .query(q -> q.collectionFormat(isCollectionType(parameterType)
+            ? CollectionFormat.MULTI
+            : null));
   }
 
   private boolean isCollectionType(ResolvedType parameterType) {

File: oas-contract-tests/src/main/java/springfox/test/contract/oas/features/FeatureDemonstrationService.java
Patch:
@@ -32,7 +32,7 @@ public Feature2613 getfeature() {
   })
   public ResponseEntity<Object> feature2831(
       @ApiParam(value = "foo msg", example = "foo example", type = "header", required = true)
-      @RequestHeader("foo") Optional<String> foo){
+      @RequestHeader("foo") Optional<String> foo) {
     return ResponseEntity.ok(new Object());
   }
 }

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/SchemaMapper.java
Patch:
@@ -109,8 +109,7 @@ private Schema model(
           Map<String, PropertySpecification> properties = c.getProperties().stream()
               .collect(toMap(
                   PropertySpecification::getName,
-                  Function
-                      .identity()));
+                  Function.identity()));
           modelProperties.putAll(mapProperties(properties, namesRegistry));
           model.setProperties(modelProperties);
           List<String> requiredFields = properties.values().stream()

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelSpecificationProvider.java
Patch:
@@ -194,8 +194,6 @@ private List<PropertySpecification> properties(
       ModelContext context,
       ResolvedType propertiesHost) {
     String typeName = typeNameExtractor.typeName(context);
-    context.getEffectiveModelKeyBuilder()
-        .qualifiedModelName(q -> q.namespace(safeGetPackageName(propertiesHost)).name(typeName));
     return propertiesProvider.propertySpecificationsFor(
         propertiesHost,
         context);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/DefaultModelNamesRegistryFactory.java
Patch:
@@ -130,7 +130,7 @@ private void processKeys(ModelKey modelKey) {
       } else if (modelKey.getViewDiscriminator().isPresent()) {
         requestResponseSuffixes.putIfAbsent(
             modelKey,
-            "View");
+            modelKey.getViewDiscriminator().get().getErasedType().getSimpleName() + "View");
       }
     }
 

File: oas-contract-tests/src/main/java/springfox/test/contract/oas/features/FeatureDemonstrationService.java
Patch:
@@ -32,7 +32,7 @@ public Feature2613 getfeature() {
   })
   public ResponseEntity<Object> feature2831(
       @ApiParam(value = "foo msg", example = "foo example", type = "header", required = true)
-      @RequestHeader("foo") Optional<String> foo){
+      @RequestHeader("foo") Optional<String> foo) {
     return ResponseEntity.ok(new Object());
   }
 }

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/SchemaMapper.java
Patch:
@@ -109,8 +109,7 @@ private Schema model(
           Map<String, PropertySpecification> properties = c.getProperties().stream()
               .collect(toMap(
                   PropertySpecification::getName,
-                  Function
-                      .identity()));
+                  Function.identity()));
           modelProperties.putAll(mapProperties(properties, namesRegistry));
           model.setProperties(modelProperties);
           List<String> requiredFields = properties.values().stream()

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -50,6 +50,7 @@
 import static org.slf4j.LoggerFactory.*;
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Maps.*;
+import static springfox.documentation.schema.ScalarTypes.*;
 
 @SuppressWarnings("deprecation")
 @Component
@@ -157,8 +158,7 @@ private boolean shouldExpand(final ResolvedMethodParameter parameter, ResolvedTy
         && !parameter.hasParameterAnnotation(RequestPart.class)
         && !parameter.hasParameterAnnotation(RequestParam.class)
         && !parameter.hasParameterAnnotation(PathVariable.class)
-        && !springfox.documentation.schema.Types.isBaseType(
-            springfox.documentation.schema.Types.typeNameFor(resolvedParamType.getErasedType()))
+        && !builtInScalarType(resolvedParamType.getErasedType()).isPresent()
         && !enumTypeDeterminer.isEnum(resolvedParamType.getErasedType())
         && !isContainerType(resolvedParamType)
         && !isMapType(resolvedParamType);

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/FeatureDemonstrationService.java
Patch:
@@ -49,6 +49,7 @@
 import springfox.test.contract.swagger.models.EnumObjectType;
 import springfox.test.contract.swagger.models.EnumType;
 import springfox.test.contract.swagger.models.Example;
+import springfox.test.contract.swagger.models.ExampleListWrapper;
 import springfox.test.contract.swagger.models.FancyPet;
 import springfox.test.contract.swagger.models.ModelAttributeExample;
 import springfox.test.contract.swagger.models.ModelWithArrayOfArrays;
@@ -140,7 +141,6 @@ public void updateBaz(EnumType enumType) {
     //No-op
   }
 
-
   //Generic collection input
   @RequestMapping(value = "/statuses", method = RequestMethod.POST)
   public void updateBazes(List<EnumType> enumType) {
@@ -155,7 +155,7 @@ public void updateListOfIntegers(List<Integer> integers) {
 
   //Generic collection input
   @RequestMapping(value = "/examples", method = RequestMethod.PUT)
-  public void updateListOfExamples(List<Example> examples) {
+  public void updateListOfExamples(@ModelAttribute("exampleList") ExampleListWrapper examples) {
     //No-op
   }
 

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/FeatureDemonstrationService.java
Patch:
@@ -49,6 +49,7 @@
 import springfox.test.contract.swagger.models.EnumObjectType;
 import springfox.test.contract.swagger.models.EnumType;
 import springfox.test.contract.swagger.models.Example;
+import springfox.test.contract.swagger.models.ExampleListWrapper;
 import springfox.test.contract.swagger.models.FancyPet;
 import springfox.test.contract.swagger.models.ModelAttributeExample;
 import springfox.test.contract.swagger.models.ModelWithArrayOfArrays;
@@ -140,7 +141,6 @@ public void updateBaz(EnumType enumType) {
     //No-op
   }
 
-
   //Generic collection input
   @RequestMapping(value = "/statuses", method = RequestMethod.POST)
   public void updateBazes(List<EnumType> enumType) {
@@ -155,7 +155,7 @@ public void updateListOfIntegers(List<Integer> integers) {
 
   //Generic collection input
   @RequestMapping(value = "/examples", method = RequestMethod.PUT)
-  public void updateListOfExamples(List<Example> examples) {
+  public void updateListOfExamples(@ModelAttribute("exampleList") ExampleListWrapper examples) {
     //No-op
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -50,6 +50,7 @@
 import static org.slf4j.LoggerFactory.*;
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Maps.*;
+import static springfox.documentation.schema.ScalarTypes.*;
 
 @SuppressWarnings("deprecation")
 @Component
@@ -157,8 +158,7 @@ private boolean shouldExpand(final ResolvedMethodParameter parameter, ResolvedTy
         && !parameter.hasParameterAnnotation(RequestPart.class)
         && !parameter.hasParameterAnnotation(RequestParam.class)
         && !parameter.hasParameterAnnotation(PathVariable.class)
-        && !springfox.documentation.schema.Types.isBaseType(
-            springfox.documentation.schema.Types.typeNameFor(resolvedParamType.getErasedType()))
+        && !builtInScalarType(resolvedParamType.getErasedType()).isPresent()
         && !enumTypeDeterminer.isEnum(resolvedParamType.getErasedType())
         && !isContainerType(resolvedParamType)
         && !isMapType(resolvedParamType);

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationContext.java
Patch:
@@ -149,9 +149,8 @@ public Set<MediaType> consumes() {
 
   @SuppressWarnings("rawtypes")
   public Set<Class> getIgnorableParameterTypes() {
-    return getDocumentationContext().getIgnorableParameterTypes().stream().collect(collectingAndThen(
-        toSet(),
-        Collections::unmodifiableSet));
+    return getDocumentationContext().getIgnorableParameterTypes().stream()
+    .collect(collectingAndThen(toSet(), Collections::unmodifiableSet));
   }
 
   public GenericTypeNamingStrategy getGenericsNamingStrategy() {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -129,8 +129,8 @@ public Response response(ResponseContext responseContext) {
   }
 
   @SuppressWarnings("deprecation")
-  public Compatibility<springfox.documentation.service.Parameter, RequestParameter>
-  expandParameter(ParameterExpansionContext context) {
+  public Compatibility<springfox.documentation.service.Parameter, RequestParameter> expandParameter(
+      ParameterExpansionContext context) {
     for (ExpandedParameterBuilderPlugin each : parameterExpanderPlugins.getPluginsFor(context.getDocumentationType())) {
       each.apply(context);
     }

File: springfox-core/src/main/java/springfox/documentation/builders/ExampleBuilder.java
Patch:
@@ -121,6 +121,6 @@ public Example build() {
         description,
         value,
         externalValue,
-        mediaType);
+        emptyToNull(mediaType));
   }
 }
\ No newline at end of file

File: springfox-oas/src/main/java/springfox/documentation/oas/configuration/OpenApiJacksonModule.java
Patch:
@@ -28,6 +28,7 @@
 import io.swagger.v3.oas.models.OpenAPI;
 import io.swagger.v3.oas.models.Operation;
 import io.swagger.v3.oas.models.PathItem;
+import io.swagger.v3.oas.models.examples.Example;
 import io.swagger.v3.oas.models.info.Contact;
 import io.swagger.v3.oas.models.info.Info;
 import io.swagger.v3.oas.models.info.License;
@@ -83,6 +84,7 @@ public void setupModule(SetupContext context) {
     context.setMixInAnnotations(XML.class, NonEmptyMixin.class);
     context.setMixInAnnotations(Tag.class, NonEmptyMixin.class);
     context.setMixInAnnotations(Contact.class, NonEmptyMixin.class);
+    context.setMixInAnnotations(Example.class, NonEmptyMixin.class);
 
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OpenApiResponseReader.java
Patch:
@@ -132,6 +132,9 @@ protected Set<Response> read(OperationContext context) {
           if (!isEmpty(eachExample.value())) {
             examples.add(new ExampleBuilder()
                 .mediaType(each.mediaType())
+                .description(eachExample.description())
+                .summary(eachExample.summary())
+                .id(eachExample.name())
                 .value(eachExample.value()).build());
           }
         }

File: springfox-oas/src/main/java/springfox/documentation/oas/configuration/OpenApiJacksonModule.java
Patch:
@@ -28,6 +28,7 @@
 import io.swagger.v3.oas.models.OpenAPI;
 import io.swagger.v3.oas.models.Operation;
 import io.swagger.v3.oas.models.PathItem;
+import io.swagger.v3.oas.models.examples.Example;
 import io.swagger.v3.oas.models.info.Contact;
 import io.swagger.v3.oas.models.info.Info;
 import io.swagger.v3.oas.models.info.License;
@@ -83,6 +84,7 @@ public void setupModule(SetupContext context) {
     context.setMixInAnnotations(XML.class, NonEmptyMixin.class);
     context.setMixInAnnotations(Tag.class, NonEmptyMixin.class);
     context.setMixInAnnotations(Contact.class, NonEmptyMixin.class);
+    context.setMixInAnnotations(Example.class, NonEmptyMixin.class);
 
   }
 

File: springfox-core/src/main/java/springfox/documentation/builders/ExampleBuilder.java
Patch:
@@ -121,6 +121,6 @@ public Example build() {
         description,
         value,
         externalValue,
-        mediaType);
+        emptyToNull(mediaType));
   }
 }
\ No newline at end of file

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OpenApiResponseReader.java
Patch:
@@ -132,6 +132,9 @@ protected Set<Response> read(OperationContext context) {
           if (!isEmpty(eachExample.value())) {
             examples.add(new ExampleBuilder()
                 .mediaType(each.mediaType())
+                .description(eachExample.description())
+                .summary(eachExample.summary())
+                .id(eachExample.name())
                 .value(eachExample.value()).build());
           }
         }

File: springfox-core/src/main/java/springfox/documentation/builders/NoopValidator.java
Patch:
@@ -21,7 +21,7 @@ static List<ValidationResult> logProblems(List<ValidationResult> results) {
     List<ValidationResult> problems = results.stream()
         .filter(v -> v.getLevel().toInt() > Level.INFO.toInt())
         .collect(Collectors.toList());
-    problems.forEach(v -> LOGGER.warn("{} [{}.{}] {}", v.getLevel(), v.getObject(), v.getField(), v.getMessage()));
+    problems.forEach(v -> LOGGER.debug("{} [{}.{}] {}", v.getLevel(), v.getObject(), v.getField(), v.getMessage()));
     return problems;
   }
 }

File: springfox-core/src/main/java/springfox/documentation/common/ClassPresentInClassPathCondition.java
Patch:
@@ -16,7 +16,7 @@
  *
  *
  */
-package springfox.documentation.schema;
+package springfox.documentation.common;
 
 import org.springframework.context.annotation.Condition;
 import org.springframework.context.annotation.ConditionContext;
@@ -25,7 +25,6 @@
 
 import static org.springframework.util.ClassUtils.forName;
 
-//TODO: Move this class
 public abstract class ClassPresentInClassPathCondition implements Condition {
   @Override
   public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {

File: springfox-oas/src/main/java/springfox/documentation/oas/configuration/OpenApiDocumentationConfiguration.java
Patch:
@@ -22,12 +22,14 @@
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
+import springfox.documentation.spring.web.SpringfoxWebConfiguration;
 import springfox.documentation.spring.web.SpringfoxWebFluxConfiguration;
 import springfox.documentation.spring.web.SpringfoxWebMvcConfiguration;
 import springfox.documentation.swagger.configuration.SwaggerCommonConfiguration;
 
 @Configuration
 @Import({
+    SpringfoxWebConfiguration.class,
     SpringfoxWebMvcConfiguration.class,
     SpringfoxWebFluxConfiguration.class,
     SwaggerCommonConfiguration.class,

File: springfox-oas/src/main/java/springfox/documentation/oas/web/ForwardedHeaderExtractingRequest.java
Patch:
@@ -87,10 +87,9 @@ public StringBuffer getRequestURL() {
   }
 
   public String adjustedRequestURL() {
-    return String.format("%s://%s:%s%s",
+    return String.format("%s://%s:%s",
         getScheme(),
         getServerName(),
-        getServerPort(),
-        getRequestURI());
+        getServerPort());
   }
 }
\ No newline at end of file

File: springfox-schema/src/main/java/springfox/documentation/schema/JacksonXmlPresentInClassPathCondition.java
Patch:
@@ -1,5 +1,7 @@
 package springfox.documentation.schema;
 
+import springfox.documentation.common.ClassPresentInClassPathCondition;
+
 public class JacksonXmlPresentInClassPathCondition extends ClassPresentInClassPathCondition {
   @Override
   protected String getClassName() {

File: springfox-schema/src/main/java/springfox/documentation/schema/JaxbPresentInClassPathCondition.java
Patch:
@@ -18,6 +18,8 @@
  */
 package springfox.documentation.schema;
 
+import springfox.documentation.common.ClassPresentInClassPathCondition;
+
 public class JaxbPresentInClassPathCondition extends ClassPresentInClassPathCondition {
   @Override
   protected String getClassName() {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Defaults.java
Patch:
@@ -153,8 +153,8 @@ private void maybeAddRuleForClassName(
       TypeResolver typeResolver,
       List<AlternateTypeRule> rules,
       String className,
-      Class clazz) {
-    Optional<? extends Class> fromClazz = ClassSupport.classByName(className);
+      Class<?> clazz) {
+    Optional<Class<?>> fromClazz = ClassSupport.classByName(className);
     fromClazz.ifPresent(aClass -> rules.add(newRule(
         typeResolver.resolve(aClass),
         typeResolver.resolve(clazz))));

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -51,7 +51,7 @@
 import springfox.documentation.swagger.web.TagsSorter;
 import springfox.documentation.swagger.web.UiConfiguration;
 import springfox.documentation.swagger.web.UiConfigurationBuilder;
-import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;
+import springfox.documentation.swagger2.annotations.EnableSwagger2;
 import springfox.petstore.controller.PetController;
 
 import java.util.List;
@@ -61,7 +61,7 @@
 
 
 @SpringBootApplication
-@EnableSwagger2WebMvc//<1>
+@EnableSwagger2 //<1>
 @ComponentScan(basePackageClasses = {
     PetController.class
 })//<2>

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/SpringfoxWebFluxConfiguration.java
Patch:
@@ -21,11 +21,13 @@
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
 @SuppressWarnings("HideUtilityClassConstructor")
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
+@Conditional(OnReactiveWebApplication.class)
 public class SpringfoxWebFluxConfiguration {
 
   @Bean

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/plugins/WebFluxRequestHandlerProvider.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
@@ -29,6 +30,7 @@
 import org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping;
 import springfox.documentation.RequestHandler;
 import springfox.documentation.spi.service.RequestHandlerProvider;
+import springfox.documentation.spring.web.OnReactiveWebApplication;
 import springfox.documentation.spring.web.WebFluxRequestHandler;
 import springfox.documentation.spring.web.readers.operation.HandlerMethodResolver;
 
@@ -44,6 +46,7 @@
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
+@Conditional(OnReactiveWebApplication.class)
 public class WebFluxRequestHandlerProvider implements RequestHandlerProvider {
   private final List<RequestMappingInfoHandlerMapping> handlerMappings;
   private final HandlerMethodResolver methodResolver;

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/plugins/WebMvcRequestHandlerProvider.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
@@ -29,6 +30,7 @@
 import org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping;
 import springfox.documentation.RequestHandler;
 import springfox.documentation.spi.service.RequestHandlerProvider;
+import springfox.documentation.spring.web.OnServletBasedWebApplication;
 import springfox.documentation.spring.web.WebMvcRequestHandler;
 import springfox.documentation.spring.web.readers.operation.HandlerMethodResolver;
 
@@ -47,6 +49,7 @@
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
+@Conditional(OnServletBasedWebApplication.class)
 public class WebMvcRequestHandlerProvider implements RequestHandlerProvider {
   private final List<RequestMappingInfoHandlerMapping> handlerMappings;
   private final HandlerMethodResolver methodResolver;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2ControllerWebFlux.java
Patch:
@@ -24,6 +24,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.http.server.reactive.ServerHttpRequest;
@@ -35,6 +36,7 @@
 import springfox.documentation.annotations.ApiIgnore;
 import springfox.documentation.service.Documentation;
 import springfox.documentation.spring.web.DocumentationCache;
+import springfox.documentation.spring.web.OnReactiveWebApplication;
 import springfox.documentation.spring.web.json.Json;
 import springfox.documentation.spring.web.json.JsonSerializer;
 import springfox.documentation.spring.web.plugins.Docket;
@@ -50,6 +52,7 @@
 @ApiIgnore
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
 @RequestMapping(SWAGGER2_SPECIFICATION_PATH)
+@Conditional({OnReactiveWebApplication.class})
 public class Swagger2ControllerWebFlux {
 
   private static final Logger LOGGER = LoggerFactory.getLogger(Swagger2ControllerWebFlux.class);

File: swagger-contract-tests-webflux/src/main/java/springfox/test/contract/swagger/webflux/SwaggerWebfluxApplication.java
Patch:
@@ -21,11 +21,11 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import springfox.documentation.swagger2.annotations.EnableSwagger2WebFlux;
+import springfox.documentation.swagger2.annotations.EnableSwagger2;
 
 @SpringBootApplication
 @SuppressWarnings("HideUtilityClassConstructor")
-@EnableSwagger2WebFlux
+@EnableSwagger2
 public class SwaggerWebfluxApplication {
   public static void main(String[] args) {
     SpringApplication.run(SwaggerWebfluxApplication.class, args);

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/SwaggerApplication.java
Patch:
@@ -38,8 +38,6 @@
 @Import(value = {
     SpringDataRestConfiguration.class,
     PetStoreConfiguration.class,
-    SecuritySupport.class,
-    Swagger2TestConfig.class,
     BeanValidatorPluginsConfiguration.class })
 public class SwaggerApplication {
   public static void main(String[] args) {

File: springfox-oas/src/main/java/springfox/documentation/oas/web/ForwardedHeaderExtractingRequest.java
Patch:
@@ -87,10 +87,9 @@ public StringBuffer getRequestURL() {
   }
 
   public String adjustedRequestURL() {
-    return String.format("%s://%s:%s%s",
+    return String.format("%s://%s:%s",
         getScheme(),
         getServerName(),
-        getServerPort(),
-        getRequestURI());
+        getServerPort());
   }
 }
\ No newline at end of file

File: springfox-oas/src/main/java/springfox/documentation/oas/web/OpenApiControllerWebFlux.java
Patch:
@@ -52,9 +52,8 @@ public OpenApiControllerWebFlux(
       DocumentationCache documentationCache,
       ServiceModelToOpenApiMapper mapper,
       JsonSerializer jsonSerializer,
-      @Value("${server.servlet.context-path:}") String contextPath,
       @Value(OPEN_API_SPECIFICATION_PATH) String oasPath) {
-    super(documentationCache, mapper, jsonSerializer, contextPath, oasPath);
+    super(documentationCache, mapper, jsonSerializer, oasPath);
   }
 
   @GetMapping(

File: springfox-oas/src/main/java/springfox/documentation/oas/web/OpenApiControllerWebMvc.java
Patch:
@@ -53,9 +53,8 @@ public OpenApiControllerWebMvc(
       DocumentationCache documentationCache,
       ServiceModelToOpenApiMapper mapper,
       JsonSerializer jsonSerializer,
-      @Value("${server.servlet.context-path:}") String contextPath,
       @Value(OPEN_API_SPECIFICATION_PATH) String oasPath) {
-    super(documentationCache, mapper, jsonSerializer, contextPath, oasPath);
+    super(documentationCache, mapper, jsonSerializer, oasPath);
   }
 
   @GetMapping(

File: springfox-schema/src/main/java/springfox/documentation/schema/JacksonXmlPresentInClassPathCondition.java
Patch:
@@ -1,5 +1,7 @@
 package springfox.documentation.schema;
 
+import springfox.documentation.common.ClassPresentInClassPathCondition;
+
 public class JacksonXmlPresentInClassPathCondition extends ClassPresentInClassPathCondition {
   @Override
   protected String getClassName() {

File: springfox-schema/src/main/java/springfox/documentation/schema/JaxbPresentInClassPathCondition.java
Patch:
@@ -18,6 +18,8 @@
  */
 package springfox.documentation.schema;
 
+import springfox.documentation.common.ClassPresentInClassPathCondition;
+
 public class JaxbPresentInClassPathCondition extends ClassPresentInClassPathCondition {
   @Override
   protected String getClassName() {

File: springfox-core/src/main/java/springfox/documentation/builders/RequestParameterBuilder.java
Patch:
@@ -43,7 +43,7 @@ public class RequestParameterBuilder {
   private int parameterIndex;
 
   public RequestParameterBuilder name(String name) {
-    this.name = defaultIfAbsent(name, this.name);
+    this.name = defaultIfAbsent(emptyToNull(name), this.name);
     return this;
   }
 
@@ -67,7 +67,7 @@ public RequestParameterBuilder in(String in) {
   }
 
   public RequestParameterBuilder description(String description) {
-    this.description = defaultIfAbsent(description, this.description);
+    this.description = defaultIfAbsent(emptyToNull(description), this.description);
     return this;
   }
 
@@ -110,7 +110,7 @@ public RequestParameterBuilder extensions(List<VendorExtension> extensions) {
     return this;
   }
 
-  public RequestParameterBuilder hidden(boolean hidden) {
+  public RequestParameterBuilder hidden(Boolean hidden) {
     this.hidden = defaultIfAbsent(hidden, this.hidden);
     return this;
   }

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/ScalarModelToSchemaConverter.java
Patch:
@@ -40,6 +40,9 @@ public class ScalarModelToSchemaConverter implements Converter<ScalarModelSpecif
     SCALAR_SCHEMA_FACTORY.put(ScalarType.URL, any -> new StringSchema().format("url"));
     SCALAR_SCHEMA_FACTORY.put(ScalarType.URI, any -> new StringSchema().format("uri"));
     SCALAR_SCHEMA_FACTORY.put(ScalarType.OBJECT, any -> new ObjectSchema());
+    SCALAR_SCHEMA_FACTORY.put(ScalarType.PASSWORD, any -> new StringSchema().format("password"));
+    SCALAR_SCHEMA_FACTORY.put(ScalarType.EMAIL, any -> new StringSchema().format("email"));
+    SCALAR_SCHEMA_FACTORY.put(ScalarType.CURRENCY, any -> new NumberSchema().format("bigdecimal"));
   }
 
   @Override

File: springfox-core/src/main/java/springfox/documentation/builders/RequestParameterBuilder.java
Patch:
@@ -43,7 +43,7 @@ public class RequestParameterBuilder {
   private int parameterIndex;
 
   public RequestParameterBuilder name(String name) {
-    this.name = defaultIfAbsent(name, this.name);
+    this.name = defaultIfAbsent(emptyToNull(name), this.name);
     return this;
   }
 
@@ -67,7 +67,7 @@ public RequestParameterBuilder in(String in) {
   }
 
   public RequestParameterBuilder description(String description) {
-    this.description = defaultIfAbsent(description, this.description);
+    this.description = defaultIfAbsent(emptyToNull(description), this.description);
     return this;
   }
 
@@ -110,7 +110,7 @@ public RequestParameterBuilder extensions(List<VendorExtension> extensions) {
     return this;
   }
 
-  public RequestParameterBuilder hidden(boolean hidden) {
+  public RequestParameterBuilder hidden(Boolean hidden) {
     this.hidden = defaultIfAbsent(hidden, this.hidden);
     return this;
   }

File: springfox-core/src/main/java/springfox/documentation/builders/SimpleParameterSpecificationBuilder.java
Patch:
@@ -40,7 +40,7 @@ public SimpleParameterSpecificationBuilder explode(Boolean explode) {
   }
 
   public SimpleParameterSpecificationBuilder allowReserved(Boolean allowReserved) {
-    this.allowReserved = allowReserved;
+    this.allowReserved = defaultIfAbsent(allowReserved, this.allowReserved);
     return this;
   }
 
@@ -55,7 +55,7 @@ public SimpleParameterSpecificationBuilder allowEmptyValue(Boolean allowEmptyVal
   }
 
   public SimpleParameterSpecificationBuilder defaultValue(String defaultValue) {
-    this.defaultValue = defaultValue;
+    this.defaultValue = defaultIfAbsent(emptyToNull(defaultValue), this.defaultValue);
     return this;
   }
 

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterBuilder.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import org.springframework.core.Ordered;
+import org.springframework.util.StringUtils;
 import springfox.documentation.schema.Example;
 import springfox.documentation.service.AllowableValues;
 import springfox.documentation.service.ParameterStyle;
@@ -165,7 +166,7 @@ public ParameterBuilder allowableValues(AllowableValues allowableValues) {
    */
   @Deprecated
   public ParameterBuilder parameterType(String paramType) {
-    if (paramType != null && paramType.length() > 0) {
+    if (!StringUtils.isEmpty(paramType)) {
       this.paramType = defaultIfAbsent(ParameterType.valueOf(paramType.toUpperCase()), this.paramType);
     }
     return this;

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationContext.java
Patch:
@@ -87,8 +87,9 @@ public List<springfox.documentation.service.ResponseMessage> getGlobalResponseMe
 
   /**
    * Use {@link OperationContext#getGlobalRequestParameters()} instead
-   * @deprecated @since 3.0
+   *
    * @return List
+   * @deprecated @since 3.0
    */
   @Deprecated
   public List<springfox.documentation.service.Parameter> getGlobalOperationParameters() {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/ParameterContext.java
Patch:
@@ -71,9 +71,9 @@ public MethodParameter methodParameter() {
   }
 
   /**
-   * @deprecated
-   * @since 3.0.0 this has been deprecated in favor of @see
    * @return this
+   * @since 3.0.0 this has been deprecated in favor of @see
+   * @deprecated
    */
   @Deprecated
   public springfox.documentation.builders.ParameterBuilder parameterBuilder() {

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/FeatureDemonstrationService.java
Patch:
@@ -202,7 +202,7 @@ public Map<String, Map<String, Example>> mapOfMapOfExample() {
   @RequestMapping(value = "addFiles", method = RequestMethod.POST)
   @ApiOperation(value = "Add a new contact with file attachment")
   public ResponseEntity<Void> addFiles(@RequestPart("files") MultipartFile[] files) {
-    return new ResponseEntity<Void>(HttpStatus.OK);
+    return new ResponseEntity<>(HttpStatus.OK);
   }
 
   @RequestMapping(value = "/modelAttributes", method = RequestMethod.GET)

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2ControllerWebFlux.java
Patch:
@@ -84,6 +84,7 @@ public ResponseEntity<Json> getDocumentation(
       return new ResponseEntity<>(HttpStatus.NOT_FOUND);
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
+    swagger.basePath(isEmpty(request.getPath().contextPath().value()) ? "/" : request.getPath().contextPath().value());
     if (isEmpty(swagger.getHost())) {
       swagger.host(request.getURI().getAuthority());
     }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2ControllerWebMvc.java
Patch:
@@ -95,6 +95,8 @@ public ResponseEntity<Json> getDocumentation(
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
     UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
+    String basePath = isEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath();
+    swagger.basePath(basePath.replace(servletRequest.getContextPath(), ""));
     if (isEmpty(swagger.getHost())) {
       swagger.host(hostName(uriComponents));
     }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2ControllerWebFlux.java
Patch:
@@ -84,6 +84,7 @@ public ResponseEntity<Json> getDocumentation(
       return new ResponseEntity<>(HttpStatus.NOT_FOUND);
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
+    swagger.basePath(isEmpty(request.getPath().contextPath().value()) ? "/" : request.getPath().contextPath().value());
     if (isEmpty(swagger.getHost())) {
       swagger.host(request.getURI().getAuthority());
     }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2ControllerWebMvc.java
Patch:
@@ -95,6 +95,8 @@ public ResponseEntity<Json> getDocumentation(
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
     UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
+    String basePath = isEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath();
+    swagger.basePath(basePath.replace(servletRequest.getContextPath(), ""));
     if (isEmpty(swagger.getHost())) {
       swagger.host(hostName(uriComponents));
     }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2ControllerWebFlux.java
Patch:
@@ -84,7 +84,6 @@ public ResponseEntity<Json> getDocumentation(
       return new ResponseEntity<>(HttpStatus.NOT_FOUND);
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
-    swagger.basePath(isEmpty(request.getPath().contextPath().value()) ? "/" : request.getPath().contextPath().value());
     if (isEmpty(swagger.getHost())) {
       swagger.host(request.getURI().getAuthority());
     }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2ControllerWebMvc.java
Patch:
@@ -95,7 +95,6 @@ public ResponseEntity<Json> getDocumentation(
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
     UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
-    swagger.basePath(isEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath());
     if (isEmpty(swagger.getHost())) {
       swagger.host(hostName(uriComponents));
     }

File: oas-contract-tests/src/main/java/springfox/test/contract/oas/api/HomeController.java
Patch:
@@ -18,6 +18,7 @@
 
 package springfox.test.contract.oas.api;
 
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
 
@@ -30,7 +31,7 @@
 @Controller
 public class HomeController {
 
-  //@Value(SWAGGER_UI_PATH)
+  @Value("${springfox.documentation.swagger-ui.base-url:}/swagger-ui/")
   private String swaggerUiPath;
 
   @GetMapping(DEFAULT_PATH_SEPARATOR)

File: springfox-oas/src/main/java/springfox/documentation/oas/web/ForwardedHeaderExtractingRequest.java
Patch:
@@ -39,7 +39,6 @@ class ForwardedHeaderExtractingRequest {
   private final int port;
   private final ForwardedPrefixExtractor forwardedPrefixExtractor;
 
-
   ForwardedHeaderExtractingRequest(
       HttpServletRequest request,
       UrlPathHelper pathHelper) {

File: springfox-oas/src/main/java/springfox/documentation/oas/web/OpenApiControllerWebFlux.java
Patch:
@@ -49,8 +49,9 @@ public OpenApiControllerWebFlux(
       DocumentationCache documentationCache,
       ServiceModelToOpenApiMapper mapper,
       JsonSerializer jsonSerializer,
+      @Value("${server.servlet.context-path:}") String contextPath,
       @Value(OPEN_API_SPECIFICATION_PATH) String oasPath) {
-    super(documentationCache, mapper, jsonSerializer, oasPath);
+    super(documentationCache, mapper, jsonSerializer, contextPath, oasPath);
   }
 
   @GetMapping(

File: springfox-oas/src/main/java/springfox/documentation/oas/web/OpenApiControllerWebMvc.java
Patch:
@@ -50,8 +50,9 @@ public OpenApiControllerWebMvc(
       DocumentationCache documentationCache,
       ServiceModelToOpenApiMapper mapper,
       JsonSerializer jsonSerializer,
+      @Value("${server.servlet.context-path:}") String contextPath,
       @Value(OPEN_API_SPECIFICATION_PATH) String oasPath) {
-    super(documentationCache, mapper, jsonSerializer, oasPath);
+    super(documentationCache, mapper, jsonSerializer, contextPath, oasPath);
   }
 
   @GetMapping(

File: oas-contract-tests/src/main/java/springfox/test/contract/oas/api/HomeController.java
Patch:
@@ -18,6 +18,7 @@
 
 package springfox.test.contract.oas.api;
 
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.GetMapping;
 
@@ -30,7 +31,7 @@
 @Controller
 public class HomeController {
 
-  //@Value(SWAGGER_UI_PATH)
+  @Value("${springfox.documentation.swagger-ui.base-url:}/swagger-ui/")
   private String swaggerUiPath;
 
   @GetMapping(DEFAULT_PATH_SEPARATOR)

File: springfox-oas/src/main/java/springfox/documentation/oas/web/ForwardedHeaderExtractingRequest.java
Patch:
@@ -39,7 +39,6 @@ class ForwardedHeaderExtractingRequest {
   private final int port;
   private final ForwardedPrefixExtractor forwardedPrefixExtractor;
 
-
   ForwardedHeaderExtractingRequest(
       HttpServletRequest request,
       UrlPathHelper pathHelper) {

File: springfox-oas/src/main/java/springfox/documentation/oas/web/OpenApiControllerWebFlux.java
Patch:
@@ -49,8 +49,9 @@ public OpenApiControllerWebFlux(
       DocumentationCache documentationCache,
       ServiceModelToOpenApiMapper mapper,
       JsonSerializer jsonSerializer,
+      @Value("${server.servlet.context-path:}") String contextPath,
       @Value(OPEN_API_SPECIFICATION_PATH) String oasPath) {
-    super(documentationCache, mapper, jsonSerializer, oasPath);
+    super(documentationCache, mapper, jsonSerializer, contextPath, oasPath);
   }
 
   @GetMapping(

File: springfox-oas/src/main/java/springfox/documentation/oas/web/OpenApiControllerWebMvc.java
Patch:
@@ -50,8 +50,9 @@ public OpenApiControllerWebMvc(
       DocumentationCache documentationCache,
       ServiceModelToOpenApiMapper mapper,
       JsonSerializer jsonSerializer,
+      @Value("${server.servlet.context-path:}") String contextPath,
       @Value(OPEN_API_SPECIFICATION_PATH) String oasPath) {
-    super(documentationCache, mapper, jsonSerializer, oasPath);
+    super(documentationCache, mapper, jsonSerializer, contextPath, oasPath);
   }
 
   @GetMapping(

File: springfox-core/src/main/java/springfox/documentation/service/SecurityReference.java
Patch:
@@ -47,8 +47,6 @@ public static SecurityReferenceBuilder builder() {
   }
 
   public static class SecurityReferenceBuilder {
-    SecurityReferenceBuilder() {
-    }
 
     private String reference;
     private AuthorizationScope[] scopes;

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationContext.java
Patch:
@@ -86,7 +86,7 @@ public List<springfox.documentation.service.ResponseMessage> getGlobalResponseMe
   }
 
   /**
-   * Use {@link OperationContext#getRequestParameters()} instead
+   * Use {@link OperationContext#getGlobalRequestParameters()} instead
    * @deprecated @since 3.0
    * @return List
    */
@@ -95,7 +95,7 @@ public List<springfox.documentation.service.Parameter> getGlobalOperationParamet
     return nullToEmptyList(getDocumentationContext().getGlobalRequestParameters());
   }
 
-  public List<RequestParameter> getRequestParameters() {
+  public List<RequestParameter> getGlobalRequestParameters() {
     return nullToEmptyList(getDocumentationContext().getGlobalParameters());
   }
 
@@ -106,7 +106,7 @@ public List<SecurityContext> securityContext() {
   }
 
   private Predicate<SecurityContext> pathMatches() {
-    return input -> input.securityForOperation(OperationContext.this) != null;
+    return input -> !input.securityForOperation(OperationContext.this).isEmpty();
   }
 
   public String requestMappingPattern() {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/CachingOperationNameGenerator.java
Patch:
@@ -26,12 +26,10 @@
 import java.util.HashMap;
 import java.util.Map;
 
-
-
 @Component
 public class CachingOperationNameGenerator implements OperationNameGenerator {
   private static final Logger LOG = LoggerFactory.getLogger(CachingOperationNameGenerator.class);
-  private Map<String, Integer> generated = new HashMap<>();
+  private final Map<String, Integer> generated = new HashMap<>();
 
   @Override
   public String startingWith(String prefix) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -84,7 +84,7 @@ public void apply(OperationContext context) {
             .filter(Optional::isPresent)
             .map(Optional::get)
             .collect(Collectors.toList()));
-    context.operationBuilder().requestParameters(new HashSet<>(context.getRequestParameters()));
+    context.operationBuilder().requestParameters(new HashSet<>(context.getGlobalRequestParameters()));
     Collection<RequestParameter> requestParameters = compatibilities.stream()
         .map(Compatibility::getModern)
         .filter(Optional::isPresent)

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/MapSpecificationToSchemaConverter.java
Patch:
@@ -18,7 +18,6 @@ public MapSpecificationToSchemaConverter(ModelNamesRegistry modelNamesRegistry)
   public Schema<?> convert(MapSpecification source) {
     Schema<?> schema = Mappers.getMapper(SchemaMapper.class)
         .mapFrom(source.getValue(), modelNamesRegistry);
-    return new MapSchema()
-        .additionalProperties(schema);
+    return new MapSchema().additionalProperties(schema);
   }
 }

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/ServiceModelToOpenApiMapper.java
Patch:
@@ -252,7 +252,7 @@ private PathItem mapOperations(
       path = new PathItem();
     }
     for (springfox.documentation.service.Operation each : nullToEmptyList(api.getOperations())) {
-      LOGGER.info("Mapping operation {}", api.getPath());
+      LOGGER.debug("Mapping operation {}", api.getPath());
       Operation operation = mapOperation(each, modelNamesRegistry);
       path.operation(
           mapHttpMethod(each.getMethod()),

File: springfox-schema/src/main/java/springfox/documentation/schema/JacksonEnumTypeDeterminer.java
Patch:
@@ -26,6 +26,9 @@
 @Component
 public class JacksonEnumTypeDeterminer implements EnumTypeDeterminer {
   public boolean isEnum(Class<?> type) {
+    if (type == null) {
+      return false;
+    }
     if (type.isEnum()) {
       JsonFormat annotation = type.getAnnotation(JsonFormat.class);
       if (annotation != null) {

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelReferenceProvider.java
Patch:
@@ -117,7 +117,7 @@ private String modelId(ModelContext context) {
     ResolvedType type = context.getType();
     if (type instanceof ResolvedPrimitiveType
         || springfox.documentation.schema.Types.isBaseType(type)
-        || springfox.documentation.schema.Types.isVoid(type)
+        || isVoid(type)
         || enumTypeDeterminer.isEnum(type.getErasedType())) {
       return null;
     }

File: springfox-schema/src/main/java/springfox/documentation/schema/Types.java
Patch:
@@ -104,7 +104,4 @@ public static boolean isBaseType(ResolvedType type) {
     return BASE_TYPES.contains(typeNameFor(type.getErasedType()));
   }
 
-  public static boolean isVoid(ResolvedType returnType) {
-    return Void.class.equals(returnType.getErasedType()) || Void.TYPE.equals(returnType.getErasedType());
-  }
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/AbstractDocumentationPluginsBootstrapper.java
Patch:
@@ -63,7 +63,7 @@ public AbstractDocumentationPluginsBootstrapper(
       Defaults defaults,
       TypeResolver typeResolver,
       PathProvider pathProvider) {
-    
+
     this.documentationPluginsManager = documentationPluginsManager;
     this.handlerProviders = handlerProviders;
     this.scanned = scanned;
@@ -110,8 +110,7 @@ private DocumentationContextBuilder defaultContextBuilder(DocumentationPlugin pl
         .map(AlternateTypeRuleConvention::rules)
         .flatMap((rule) -> StreamSupport.stream(rule.spliterator(), false))
         .collect(toList());
-    return documentationPluginsManager
-        .createContextBuilder(documentationType, defaultConfiguration)
+    return documentationPluginsManager.createContextBuilder(documentationType, defaultConfiguration)
         .rules(rules)
         .requestHandlers(combiner().combine(requestHandlers));
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -101,7 +101,7 @@ private void applyReturnTypeOverride(OperationContext context) {
     ResponseContext responseContext = new ResponseContext(
         context.getDocumentationContext(),
         context);
-    if (!springfox.documentation.schema.Types.isVoid(returnType)) {
+    if (!isVoid(returnType)) {
       ModelContext modelContext = context.operationModelsBuilder().addReturn(
           returnType,
           viewProvider.viewFor(context));

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/OpenApiSchemaPropertyBuilder.java
Patch:
@@ -24,6 +24,7 @@
 import static java.util.Optional.*;
 import static org.springframework.util.StringUtils.*;
 import static springfox.documentation.schema.Annotations.*;
+import static springfox.documentation.schema.ResolvedTypes.*;
 
 @Component
 @Order(SwaggerPluginSupport.OAS_PLUGIN_ORDER)
@@ -51,7 +52,7 @@ public void apply(ModelPropertyContext context) {
     if (annotation != null) {
       ModelSpecification modelSpecification = null;
       ResolvedType type = toType(context.getResolver()).apply(annotation);
-      if (!springfox.documentation.schema.Types.isVoid(type)) {
+      if (!isVoid(type)) {
         modelSpecification =
             modelSpecifications.create(context.getOwner(), type);
       }

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/web/SwaggerDefaultConfiguration.java
Patch:
@@ -38,7 +38,7 @@
 public class SwaggerDefaultConfiguration implements DefaultsProviderPlugin {
 
   private final DefaultConfiguration defaultConfiguration;
-  private TypeResolver typeResolver;
+  private final TypeResolver typeResolver;
 
   public SwaggerDefaultConfiguration(
       Defaults defaults,

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelSpecificationProvider.java
Patch:
@@ -77,15 +77,14 @@ public DefaultModelSpecificationProvider(
     this.modelSpecifications = modelSpecifications;
   }
 
-  @SuppressWarnings("deprecation")
   @Override
   public Optional<ModelSpecification> modelSpecificationsFor(ModelContext modelContext) {
     ResolvedType propertiesHost = modelContext.alternateEvaluatedType();
 
     if (isContainerType(propertiesHost)
         || isMapType(propertiesHost)
         || enumTypeDeterminer.isEnum(propertiesHost.getErasedType())
-        || springfox.documentation.schema.Types.isBaseType(propertiesHost)
+        || ScalarTypes.builtInScalarType(propertiesHost).isPresent()
         || modelContext.hasSeenBefore(propertiesHost)) {
       LOG.debug(
           "Skipping model of type {} as its either a container type, map, enum or base type, or its already "

File: springfox-schema/src/main/java/springfox/documentation/schema/JacksonEnumTypeDeterminer.java
Patch:
@@ -26,6 +26,9 @@
 @Component
 public class JacksonEnumTypeDeterminer implements EnumTypeDeterminer {
   public boolean isEnum(Class<?> type) {
+    if (type == null) {
+      return false;
+    }
     if (type.isEnum()) {
       JsonFormat annotation = type.getAnnotation(JsonFormat.class);
       if (annotation != null) {

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelReferenceProvider.java
Patch:
@@ -117,7 +117,7 @@ private String modelId(ModelContext context) {
     ResolvedType type = context.getType();
     if (type instanceof ResolvedPrimitiveType
         || springfox.documentation.schema.Types.isBaseType(type)
-        || springfox.documentation.schema.Types.isVoid(type)
+        || isVoid(type)
         || enumTypeDeterminer.isEnum(type.getErasedType())) {
       return null;
     }

File: springfox-schema/src/main/java/springfox/documentation/schema/Types.java
Patch:
@@ -104,7 +104,4 @@ public static boolean isBaseType(ResolvedType type) {
     return BASE_TYPES.contains(typeNameFor(type.getErasedType()));
   }
 
-  public static boolean isVoid(ResolvedType returnType) {
-    return Void.class.equals(returnType.getErasedType()) || Void.TYPE.equals(returnType.getErasedType());
-  }
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -101,7 +101,7 @@ private void applyReturnTypeOverride(OperationContext context) {
     ResponseContext responseContext = new ResponseContext(
         context.getDocumentationContext(),
         context);
-    if (!springfox.documentation.schema.Types.isVoid(returnType)) {
+    if (!isVoid(returnType)) {
       ModelContext modelContext = context.operationModelsBuilder().addReturn(
           returnType,
           viewProvider.viewFor(context));

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/OpenApiSchemaPropertyBuilder.java
Patch:
@@ -24,6 +24,7 @@
 import static java.util.Optional.*;
 import static org.springframework.util.StringUtils.*;
 import static springfox.documentation.schema.Annotations.*;
+import static springfox.documentation.schema.ResolvedTypes.*;
 
 @Component
 @Order(SwaggerPluginSupport.OAS_PLUGIN_ORDER)
@@ -51,7 +52,7 @@ public void apply(ModelPropertyContext context) {
     if (annotation != null) {
       ModelSpecification modelSpecification = null;
       ResolvedType type = toType(context.getResolver()).apply(annotation);
-      if (!springfox.documentation.schema.Types.isVoid(type)) {
+      if (!isVoid(type)) {
         modelSpecification =
             modelSpecifications.create(context.getOwner(), type);
       }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/configuration/SpringDataRestConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 package springfox.documentation.spring.data.rest.configuration;
 
 import com.fasterxml.classmate.TypeResolver;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/Validators.java
Patch:
@@ -59,7 +59,8 @@ public static <T extends Annotation> Optional<T> annotationFromBean(
     if (propertyDefinition.isPresent()) {
       Optional<Method> getter = extractGetterFromPropertyDefinition(propertyDefinition.get());
       Optional<Field> field = extractFieldFromPropertyDefinition(propertyDefinition.get());
-      notNull = findAnnotation(getter, annotationType).map(Optional::of).orElse(findAnnotation(field, annotationType));
+      notNull = findAnnotation(getter, annotationType)
+          .or(() -> findAnnotation(field, annotationType));
     }
 
     return notNull;

File: springfox-core/src/main/java/springfox/documentation/RequestHandler.java
Patch:
@@ -59,9 +59,9 @@ public interface RequestHandler extends Comparable<RequestHandler> {
 
   Set<RequestMethod> supportedMethods();
 
-  Set<? extends MediaType> produces();
+  Set<MediaType> produces();
 
-  Set<? extends MediaType> consumes();
+  Set<MediaType> consumes();
 
   Set<NameValueExpression<String>> headers();
 
@@ -82,7 +82,7 @@ public interface RequestHandler extends Comparable<RequestHandler> {
    * @deprecated This is introduced to preserve backwards compat
    */
   @Deprecated
-  RequestMappingInfo getRequestMapping();
+  RequestMappingInfo<?> getRequestMapping();
 
   /**
    * @return handler method

File: springfox-core/src/main/java/springfox/documentation/builders/ElementFacets.java
Patch:
@@ -17,7 +17,7 @@ public static <T extends ElementFacetBuilder> Function<Class<?>, ElementFacetBui
       Class<T> clazz) {
     return t -> {
       try {
-        return clazz.newInstance();
+        return clazz.getDeclaredConstructor().newInstance();
       } catch (Exception e) {
         LOGGER.error("Unable to create builder of type {}", clazz);
         throw new RuntimeException(String.format("Unable to create builder of type %s", clazz), e);

File: springfox-core/src/main/java/springfox/documentation/builders/RequestHandlerSelectors.java
Patch:
@@ -88,11 +88,11 @@ private static Function<Class<?>, Boolean> handlerPackage(final String basePacka
    * @param basePackage - base package of the classes
    * @return this
    */
-  public static Predicate<RequestHandler> basePackage(final String basePackage) {
+  public static Predicate<RequestHandler> basePackage(String basePackage) {
     return input -> declaringClass(input).map(handlerPackage(basePackage)).orElse(true);
   }
 
-  private static Optional<? extends Class<?>> declaringClass(RequestHandler input) {
+  private static Optional<Class<?>> declaringClass(RequestHandler input) {
     return ofNullable(input.declaringClass());
   }
 

File: springfox-core/src/main/java/springfox/documentation/builders/RequestParameterBuilder.java
Patch:
@@ -133,7 +133,7 @@ public RequestParameterBuilder parameterSpecificationProvider(ParameterSpecifica
     return this;
   }
 
-  public RequestParameterBuilder accepts(Collection<? extends MediaType> accepts) {
+  public RequestParameterBuilder accepts(Collection<MediaType> accepts) {
     this.accepts.addAll(accepts);
     return this;
   }

File: springfox-core/src/main/java/springfox/documentation/builders/ResourceListingBuilder.java
Patch:
@@ -66,7 +66,7 @@ public ResourceListingBuilder apis(List<ApiListingReference> apis) {
    * @param authorizations - security definitions
    * @return this
    */
-  public ResourceListingBuilder securitySchemes(List<? extends SecurityScheme> authorizations) {
+  public ResourceListingBuilder securitySchemes(List<SecurityScheme> authorizations) {
     this.securitySchemes.addAll(nullToEmptyList(authorizations));
     return this;
   }

File: springfox-core/src/main/java/springfox/documentation/schema/ModelProperty.java
Patch:
@@ -130,7 +130,7 @@ public boolean isHidden() {
     return isHidden;
   }
 
-  public ModelProperty updateModelRef(Function<ResolvedType, ? extends ModelReference> modelRefFactory) {
+  public ModelProperty updateModelRef(Function<ResolvedType, ModelReference> modelRefFactory) {
     modelRef = modelRefFactory.apply(type);
     return this;
   }

File: springfox-core/src/test/groovy/springfox/documentation/builders/MockRequestHandler.java
Patch:
@@ -87,12 +87,12 @@ public Set<RequestMethod> supportedMethods() {
   }
 
   @Override
-  public Set<? extends MediaType> produces() {
+  public Set<MediaType> produces() {
     return null;
   }
 
   @Override
-  public Set<? extends MediaType> consumes() {
+  public Set<MediaType> consumes() {
     return null;
   }
 
@@ -132,7 +132,7 @@ public <T extends Annotation> Optional<T> findControllerAnnotation(Class<T> anno
   }
 
   @Override
-  public springfox.documentation.spring.wrapper.RequestMappingInfo getRequestMapping() {
+  public springfox.documentation.spring.wrapper.RequestMappingInfo<?> getRequestMapping() {
     return null;
   }
 }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/SpringDataRestRequestHandler.java
Patch:
@@ -93,12 +93,12 @@ public Set<RequestMethod> supportedMethods() {
   }
 
   @Override
-  public Set<? extends MediaType> produces() {
+  public Set<MediaType> produces() {
     return actionSpecification.getProduces();
   }
 
   @Override
-  public Set<? extends MediaType> consumes() {
+  public Set<MediaType> consumes() {
     return actionSpecification.getConsumes();
   }
 
@@ -154,7 +154,7 @@ public HandlerMethod getHandlerMethod() {
   }
 
   @Override
-  public RequestMappingInfo getRequestMapping() {
+  public RequestMappingInfo<?> getRequestMapping() {
     throw new UnsupportedOperationException();
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/property/FactoryMethodProvider.java
Patch:
@@ -47,17 +47,17 @@ public FactoryMethodProvider(TypeResolver resolver) {
     memberResolver = new MemberResolver(resolver);
   }
 
-  public Optional<? extends ResolvedParameterizedMember> in(
+  public Optional<? extends ResolvedParameterizedMember<?>> in(
       ResolvedType resolvedType,
-      Predicate<ResolvedParameterizedMember> predicate) {
+      Predicate<ResolvedParameterizedMember<?>> predicate) {
     return Stream.concat(
         constructors(resolvedType).stream(),
         delegatedFactoryMethods(resolvedType).stream())
         .filter(predicate)
         .findFirst();
   }
 
-  static Predicate<ResolvedParameterizedMember> factoryMethodOf(final AnnotatedParameter parameter) {
+  static Predicate<ResolvedParameterizedMember<?>> factoryMethodOf(final AnnotatedParameter parameter) {
     return input -> input.getRawMember().equals(parameter.getOwner().getMember());
   }
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContext.java
Patch:
@@ -50,7 +50,7 @@ public class DocumentationContext {
   private final List<RequestParameter> globalParameters = new ArrayList<>();
   private final PathProvider pathProvider;
   private final List<SecurityContext> securityContexts;
-  private final List<? extends SecurityScheme> securitySchemes;
+  private final List<SecurityScheme> securitySchemes;
   private final Comparator<ApiListingReference> listingReferenceOrdering;
   private final Comparator<ApiDescription> apiDescriptionOrdering;
   private final Comparator<Operation> operationOrdering;
@@ -79,7 +79,7 @@ public DocumentationContext(
       Map<HttpMethod, List<Response>> globalResponses,
       PathProvider pathProvider,
       List<SecurityContext> securityContexts,
-      List<? extends SecurityScheme> securitySchemes,
+      List<SecurityScheme> securitySchemes,
       List<AlternateTypeRule> alternateTypeRules,
       Comparator<ApiListingReference> listingReferenceOrdering,
       Comparator<ApiDescription> apiDescriptionOrdering,
@@ -172,7 +172,7 @@ public List<SecurityContext> getSecurityContexts() {
     return securityContexts;
   }
 
-  public List<? extends SecurityScheme> getSecuritySchemes() {
+  public List<SecurityScheme> getSecuritySchemes() {
     return securitySchemes.stream()
                           .filter(Objects::nonNull)
                           .collect(Collectors.toList());

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -148,7 +148,7 @@ public DocumentationContextBuilder securityContexts(List<SecurityContext> securi
     return this;
   }
 
-  public DocumentationContextBuilder securitySchemes(List<? extends SecurityScheme> securitySchemes) {
+  public DocumentationContextBuilder securitySchemes(List<SecurityScheme> securitySchemes) {
     this.securitySchemes.addAll(nullToEmptyList(securitySchemes));
     return this;
   }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationContext.java
Patch:
@@ -138,11 +138,11 @@ public ResolvedType alternateFor(ResolvedType resolved) {
     return getAlternateTypeProvider().alternateFor(resolved);
   }
 
-  public Set<? extends MediaType> produces() {
+  public Set<MediaType> produces() {
     return requestContext.produces();
   }
 
-  public Set<? extends MediaType> consumes() {
+  public Set<MediaType> consumes() {
     return requestContext.consumes();
   }
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/RequestMappingContext.java
Patch:
@@ -171,11 +171,11 @@ public Set<RequestMethod> getMethodsCondition() {
     return handler.supportedMethods();
   }
 
-  public Set<? extends MediaType> produces() {
+  public Set<MediaType> produces() {
     return handler.produces();
   }
 
-  public Set<? extends MediaType> consumes() {
+  public Set<MediaType> consumes() {
     return handler.consumes();
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/AbstractDocumentationPluginsBootstrapper.java
Patch:
@@ -120,7 +120,7 @@ private RequestHandlerCombiner combiner() {
     return ofNullable(combiner).orElse(new DefaultRequestHandlerCombiner());
   }
 
-  private Function<RequestHandlerProvider, ? extends Iterable<RequestHandler>> handlers() {
+  private Function<RequestHandlerProvider, Iterable<RequestHandler>> handlers() {
     return (Function<RequestHandlerProvider, Iterable<RequestHandler>>) RequestHandlerProvider::requestHandlers;
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DefaultRequestHandlerCombiner.java
Patch:
@@ -62,7 +62,7 @@ public List<RequestHandler> combine(List<RequestHandler> source) {
         .collect(toList());
   }
 
-  private Collection<? extends RequestHandler> combined(Collection<RequestHandler> requestHandlers) {
+  private Collection<RequestHandler> combined(Collection<RequestHandler> requestHandlers) {
     List<RequestHandler> source = new ArrayList<>(requestHandlers);
     if (source.size() == 0 || source.size() == 1) {
       return requestHandlers;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java
Patch:
@@ -90,7 +90,7 @@ public class Docket implements DocumentationPlugin {
   private final List<Server> servers = new ArrayList<>();
 
   private PathProvider pathProvider;
-  private List<? extends SecurityScheme> securitySchemes;
+  private List<SecurityScheme> securitySchemes;
   private Comparator<ApiListingReference> apiListingReferenceOrdering;
   private Comparator<ApiDescription> apiDescriptionOrdering;
   private Comparator<Operation> operationOrdering;
@@ -143,7 +143,7 @@ public Docket apiInfo(ApiInfo apiInfo) {
    * @param securitySchemes a list of security schemes
    * @return this Docket
    */
-  public Docket securitySchemes(List<? extends SecurityScheme> securitySchemes) {
+  public Docket securitySchemes(List<SecurityScheme> securitySchemes) {
     this.securitySchemes = securitySchemes;
     return this;
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/HandlerMethodResolver.java
Patch:
@@ -249,7 +249,9 @@ private Optional<String> discoveredName(MethodParameter methodParameter) {
   private ParameterNameDiscoverer parameterNameDiscoverer() {
     ParameterNameDiscoverer discoverer;
     try {
-      discoverer = (ParameterNameDiscoverer) Class.forName(SPRING4_DISCOVERER).newInstance();
+      discoverer = (ParameterNameDiscoverer) Class.forName(SPRING4_DISCOVERER)
+          .getDeclaredConstructor()
+          .newInstance();
     } catch (Exception e) {
       discoverer = new LocalVariableTableParameterNameDiscoverer();
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterTypeDeterminer.java
Patch:
@@ -28,7 +28,7 @@ private ParameterTypeDeterminer() {
     throw new UnsupportedOperationException();
   }
 
-  public static String determineScalarParameterType(Set<? extends MediaType> consumes, HttpMethod method) {
+  public static String determineScalarParameterType(Set<MediaType> consumes, HttpMethod method) {
     String parameterType = "query";
 
     if (consumes.contains(MediaType.APPLICATION_FORM_URLENCODED)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDocumentationScanner.java
Patch:
@@ -92,7 +92,7 @@ public Documentation scan(DocumentationContext context) {
     return group.build();
   }
 
-  private Collection<? extends ApiListingReference> apiListingReferences(
+  private Collection<ApiListingReference> apiListingReferences(
       Map<String, List<ApiListing>> apiListings,
       DocumentationContext context) {
     return apiListings.entrySet().stream().map(toApiListingReference(context)).collect(toSet());

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/MediaTypeReader.java
Patch:
@@ -98,7 +98,7 @@ private boolean handlerMethodHasFileParameter(OperationContext context) {
     return false;
   }
 
-  private Set<String> toSet(Set<? extends MediaType> mediaTypeSet) {
+  private Set<String> toSet(Set<MediaType> mediaTypeSet) {
     Set<String> mediaTypes = new HashSet<>();
     for (MediaType mediaType : mediaTypeSet) {
       mediaTypes.add(mediaType.toString());

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/WebFluxRequestHandler.java
Patch:
@@ -94,12 +94,12 @@ public Set<RequestMethod> supportedMethods() {
   }
 
   @Override
-  public Set<? extends MediaType> produces() {
+  public Set<MediaType> produces() {
     return requestMapping.getProducesCondition().getProducibleMediaTypes();
   }
 
   @Override
-  public Set<? extends MediaType> consumes() {
+  public Set<MediaType> consumes() {
     return requestMapping.getConsumesCondition().getConsumableMediaTypes();
   }
 
@@ -130,7 +130,7 @@ public RequestHandlerKey key() {
   }
 
   @Override
-  public springfox.documentation.spring.wrapper.RequestMappingInfo getRequestMapping() {
+  public springfox.documentation.spring.wrapper.RequestMappingInfo<?> getRequestMapping() {
     throw new UnsupportedOperationException();
   }
 

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/WebMvcRequestHandler.java
Patch:
@@ -99,12 +99,12 @@ public Set<RequestMethod> supportedMethods() {
   }
 
   @Override
-  public Set<? extends MediaType> produces() {
+  public Set<MediaType> produces() {
     return requestMapping.getProducesCondition().getProducibleMediaTypes();
   }
 
   @Override
-  public Set<? extends MediaType> consumes() {
+  public Set<MediaType> consumes() {
     return requestMapping.getConsumesCondition().getConsumableMediaTypes();
   }
 
@@ -133,7 +133,7 @@ public RequestHandlerKey key() {
   }
 
   @Override
-  public springfox.documentation.spring.wrapper.RequestMappingInfo getRequestMapping() {
+  public springfox.documentation.spring.wrapper.RequestMappingInfo<?> getRequestMapping() {
     return new WebMvcRequestMappingInfoWrapper(requestMapping);
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterRequiredReader.java
Patch:
@@ -48,7 +48,6 @@
 @Order(Ordered.HIGHEST_PRECEDENCE)
 @SuppressWarnings("deprecation")
 public class ParameterRequiredReader implements ParameterBuilderPlugin {
-  private final SpringVersion springVersion;
   private final DescriptionResolver descriptions;
 
   @Autowired
@@ -58,7 +57,6 @@ public ParameterRequiredReader(DescriptionResolver descriptions) {
 
   ParameterRequiredReader(DescriptionResolver descriptions, SpringVersion springVersion) {
     this.descriptions = descriptions;
-    this.springVersion = springVersion;
   }
 
   @Override
@@ -79,7 +77,7 @@ private boolean isRequired(
       OperationContext operationContext,
       ResolvedMethodParameter methodParameter) {
 
-    Set<Boolean> requiredSet = new HashSet<Boolean>();
+    Set<Boolean> requiredSet = new HashSet<>();
 
     // when the type is Optional, the required property of @RequestParam/@RequestHeader doesn't matter,
     // since the value is always a non-null Optional after conversion

File: springfox-core/src/main/java/springfox/documentation/builders/OperationBuilder.java
Patch:
@@ -388,7 +388,7 @@ public Operation build() {
 
   private Response mergeResponses(List<Response> responses) {
     if (responses.size() == 1) {
-      return responses.stream().findFirst().get();
+      return responses.get(0);
     }
     Response response = null;
     for (Response each : responses) {

File: springfox-core/src/main/java/springfox/documentation/builders/RequestParameterBuilder.java
Patch:
@@ -181,13 +181,12 @@ public RequestParameter build() {
   public RequestParameterBuilder copyOf(RequestParameter source) {
     source.getParameterSpecification()
         .getQuery()
-        .map(simple -> {
+        .ifPresent(simple -> {
           this.query(q -> q.copyOf(simple));
-          return simple;
         });
     source.getParameterSpecification()
         .getContent()
-        .map(content -> this.content(c -> c.copyOf(content)));
+        .ifPresent(content -> this.content(c -> c.copyOf(content)));
     return this.in(source.getIn())
         .required(source.getRequired())
         .hidden(source.getHidden())

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/BasePathAwareServicesProvider.java
Patch:
@@ -57,7 +57,9 @@ public BasePathAwareServicesProvider(
     contextPath = contextPath(servletContext.getContextPath());
   }
 
+  @SuppressWarnings("java:S1872")
   private static boolean isEntitySchemaService(HandlerMethod input) {
+    //For ensuring this bean is in the path (version conflict)
     return input.getBeanType().getSimpleName().equals("RepositorySchemaController");
   }
 

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/CollectionSpecificationToSchemaConverter.java
Patch:
@@ -7,6 +7,7 @@
 import org.springframework.core.convert.converter.Converter;
 import springfox.documentation.schema.CollectionSpecification;
 import springfox.documentation.schema.CollectionType;
+import springfox.documentation.schema.ScalarModelSpecification;
 import springfox.documentation.schema.ScalarType;
 import springfox.documentation.service.ModelNamesRegistry;
 
@@ -20,8 +21,8 @@ public CollectionSpecificationToSchemaConverter(ModelNamesRegistry modelNamesReg
   @Override
     public Schema<?> convert(CollectionSpecification source) {
         ArraySchema arraySchema = new ArraySchema();
-        if (source.getModel().getScalar().isPresent()
-            && source.getModel().getScalar().get().getType() == ScalarType.BYTE) {
+        if (source.getModel().getScalar()
+            .map(ScalarModelSpecification::getType).orElse(null) == ScalarType.BYTE) {
             return new ByteArraySchema();
         } else {
             arraySchema.items(Mappers.getMapper(SchemaMapper.class).mapFrom(source.getModel(), modelNamesRegistry));

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -248,7 +248,8 @@ static Property modelRefToProperty(springfox.documentation.schema.ModelReference
       responseProperty = springfox.documentation.swagger2.mappers.Properties.property(modelRef);
     } else if (modelRef.isMap()) {
       responseProperty =
-          new MapProperty(springfox.documentation.swagger2.mappers.Properties.property(modelRef.itemModel().get()));
+          new MapProperty(springfox.documentation.swagger2.mappers.Properties.property(modelRef.itemModel()
+              .orElseThrow(() -> new IllegalStateException("ModelRef that is a map should have an itemModel"))));
     } else {
       responseProperty = springfox.documentation.swagger2.mappers.Properties.property(modelRef.getType());
     }

File: springfox-core/src/main/java/springfox/documentation/builders/PathParameterSpecificationProvider.java
Patch:
@@ -9,13 +9,13 @@
 import java.util.List;
 
 public class PathParameterSpecificationProvider implements ParameterSpecificationProvider {
-  public static final List<ParameterStyle> VALID_COLLECTION_STYLES =
+  static final List<ParameterStyle> VALID_COLLECTION_STYLES =
       Arrays.asList(
           ParameterStyle.MATRIX,
           ParameterStyle.LABEL,
           ParameterStyle.SIMPLE
       );
-  public static final List<ParameterStyle> VALID_OBJECT_STYLES =
+  static final List<ParameterStyle> VALID_OBJECT_STYLES =
       Arrays.asList(
           ParameterStyle.MATRIX,
           ParameterStyle.LABEL

File: springfox-core/src/main/java/springfox/documentation/builders/QueryParameterSpecificationProvider.java
Patch:
@@ -11,13 +11,13 @@
 import java.util.List;
 
 class QueryParameterSpecificationProvider implements ParameterSpecificationProvider {
-  public static final List<ParameterStyle> VALID_COLLECTION_STYLES =
+  static final List<ParameterStyle> VALID_COLLECTION_STYLES =
       Arrays.asList(
           ParameterStyle.FORM,
           ParameterStyle.SPACEDELIMITED,
           ParameterStyle.PIPEDELIMITED
                    );
-  public static final List<ParameterStyle> VALID_OBJECT_STYLES =
+  static final List<ParameterStyle> VALID_OBJECT_STYLES =
       Arrays.asList(
           ParameterStyle.FORM,
           ParameterStyle.DEEPOBJECT

File: springfox-core/src/main/java/springfox/documentation/builders/RootParameterSpecificationProvider.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Map;
 
 public class RootParameterSpecificationProvider implements ParameterSpecificationProvider {
-  public static final Map<ParameterType, ParameterSpecificationProvider> SPECIFICATION_PROVIDER_LOOKUP =
+  static final Map<ParameterType, ParameterSpecificationProvider> SPECIFICATION_PROVIDER_LOOKUP =
       new HashMap<ParameterType, ParameterSpecificationProvider>() {{
         put(ParameterType.QUERY, new QueryParameterSpecificationProvider());
         put(ParameterType.COOKIE, new CookieParameterSpecificationProvider());

File: springfox-core/src/main/java/springfox/documentation/schema/ScalarType.java
Patch:
@@ -24,7 +24,7 @@ public class ScalarType {
   public static final ScalarType EMAIL = new ScalarType("string", "email");
   public static final ScalarType CURRENCY = new ScalarType("number", "bigdecimal");
 
-  public static final List<ScalarType> KNOWN_TYPES =
+  private static final List<ScalarType> KNOWN_TYPES =
       Arrays.asList(
           INTEGER,
           LONG,
@@ -43,8 +43,8 @@ public class ScalarType {
           EMAIL,
           CURRENCY);
 
-  private String type;
-  private String format;
+  private final String type;
+  private final String format;
 
   ScalarType(
       String type,

File: springfox-core/src/main/java/springfox/documentation/service/CollectionFormat.java
Patch:
@@ -17,7 +17,7 @@ public class CollectionFormat {
           "of multiple values for a single insta = new CollectionFormatnce foo=bar&foo=baz. " +
           "This is valid only for parameters in \"query\" or \"formData\"");
 
-  public static final Map<String, CollectionFormat> KNOWN_FORMATS = new HashMap<String, CollectionFormat>() {{
+  private static final Map<String, CollectionFormat> KNOWN_FORMATS = new HashMap<String, CollectionFormat>() {{
     put(CSV.type, CSV);
     put(SSV.type, SSV);
     put(TSV.type, TSV);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterTypeReader.java
Patch:
@@ -49,7 +49,7 @@
 @SuppressWarnings("deprecation")
 public class ParameterTypeReader implements ParameterBuilderPlugin {
   private static final Logger LOGGER = LoggerFactory.getLogger(ParameterTypeReader.class);
-  public static final List<HttpMethod> QUERTY_ONLY_HTTP_METHODS = Arrays.asList(HttpMethod.GET,
+  private static final List<HttpMethod> QUERTY_ONLY_HTTP_METHODS = Arrays.asList(HttpMethod.GET,
       HttpMethod.OPTIONS,
       HttpMethod.HEAD);
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/UiConfiguration.java
Patch:
@@ -539,10 +539,11 @@ public String getValidatorUrl() {
     return ofNullable(validatorUrl).orElse("");
   }
 
+  @SuppressWarnings("java:S2386")
   public static class Constants {
     public static final String[] DEFAULT_SUBMIT_METHODS = new String[] {
         "get", "put", "post",
-        "delete", "options", "head",
+        "delete", "options", "head",          
         "patch", "trace" };
 
     public static final String[] NO_SUBMIT_METHODS = new String[] {};

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java
Patch:
@@ -131,7 +131,7 @@ public Docket extensions(List<VendorExtension> vendorExtensions) {
    * @return this Docket
    */
   public Docket apiInfo(ApiInfo apiInfo) {
-    this.apiInfo = defaultIfAbsent(apiInfo, apiInfo);
+    this.apiInfo = defaultIfAbsent(apiInfo, this.apiInfo);
     return this;
   }
 

File: oas-contract-tests/src/main/java/springfox/test/contract/oas/OpenApiTestConfig.java
Patch:
@@ -30,6 +30,7 @@ public Docket petStore(List<SecurityScheme> authorizationTypes) {
         .select()
         .paths(PathSelectors.regex("/.*")
             .and(PathSelectors.regex("/error").negate())
+            .and(PathSelectors.regex("/bugs/.*").negate())
             .and(PathSelectors.regex("/profile").negate()))
         .build()
         .enableUrlTemplating(false)

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/ServiceModelToOpenApiMapper.java
Patch:
@@ -88,7 +88,7 @@ public abstract class ServiceModelToOpenApiMapper {
   private static final Logger LOGGER = getLogger(ServiceModelToOpenApiMapper.class);
 
   @Mappings({
-      @Mapping(target = "openapi", constant = "3.0.1"),
+      @Mapping(target = "openapi", constant = "3.0.3"),
       @Mapping(target = "info", source = "resourceListing.info"),
       @Mapping(target = "externalDocs", source = "externalDocumentation"),
       @Mapping(target = "security", ignore = true),

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/InMemorySwaggerResourcesProvider.java
Patch:
@@ -107,7 +107,7 @@ public List<SwaggerResource> get() {
 
       if (oas3Available) {
         SwaggerResource swaggerResource = resource(swaggerGroup, oas3Url);
-        swaggerResource.setSwaggerVersion("3.0.1");
+        swaggerResource.setSwaggerVersion("3.0.3");
         resources.add(swaggerResource);
       }
     }

File: springfox-core/src/main/java/springfox/documentation/builders/ModelSpecificationBuilder.java
Patch:
@@ -157,7 +157,7 @@ public ModelSpecificationBuilder copyOf(ModelSpecification other) {
   private List<ValidationResult> validateSpecification(ModelSpecificationBuilder builder) {
     List<ValidationResult> validationResults = new ArrayList<>();
     long specCount = Stream.of(scalar,
-        safeCompountModelBuild(),
+        safeCompoundModelBuild(),
         safeCollectionBuild(),
         safeMapBuild(),
         safeReferenceBuild())
@@ -179,7 +179,7 @@ private List<ValidationResult> validateSpecification(ModelSpecificationBuilder b
     return validationResults;
   }
 
-  private Object safeCompountModelBuild() {
+  private Object safeCompoundModelBuild() {
     return compoundModelBuilder != null ? compoundModelBuilder.build() : null;
   }
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/MinMaxAnnotationPlugin.java
Patch:
@@ -48,6 +48,7 @@ public boolean supports(DocumentationType delimiter) {
     return true;
   }
 
+  @SuppressWarnings("deprecation")
   public void apply(ParameterContext context) {
     Optional<Min> min = annotationFromParameter(context, Min.class);
     Optional<Max> max = annotationFromParameter(context, Max.class);

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/NotBlankAnnotationPlugin.java
Patch:
@@ -45,6 +45,7 @@ public boolean supports(DocumentationType delimiter) {
     return true;
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public void apply(ParameterContext context) {
     Optional<NotBlank> notBlank = annotationFromParameter(context, NotBlank.class);

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/NotNullAnnotationPlugin.java
Patch:
@@ -46,6 +46,7 @@ public boolean supports(DocumentationType delimiter) {
   }
 
   @Override
+  @SuppressWarnings("deprecation")
   public void apply(ParameterContext context) {
     Optional<NotNull> notNull = annotationFromParameter(context, NotNull.class);
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/PatternAnnotationPlugin.java
Patch:
@@ -46,6 +46,7 @@ public boolean supports(DocumentationType delimiter) {
   }
 
   @Override
+  @SuppressWarnings("deprecation")
   public void apply(ParameterContext context) {
     Optional<Pattern> pattern = annotationFromParameter(context, Pattern.class);
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/SizeAnnotationPlugin.java
Patch:
@@ -47,6 +47,7 @@ public boolean supports(DocumentationType delimiter) {
   }
 
   @Override
+  @SuppressWarnings("deprecation")
   public void apply(ParameterContext context) {
     Optional<Size> size = annotationFromParameter(context, Size.class);
     LOG.debug("searching for @size: {}", size.isPresent());

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/DecimalMinMaxAnnotationPlugin.java
Patch:
@@ -53,6 +53,7 @@ public boolean supports(DocumentationType delimiter) {
   }
 
   @Override
+  @SuppressWarnings("deprecation")
   public void apply(ModelPropertyContext context) {
     Optional<DecimalMin> min = extractAnnotation(context, DecimalMin.class);
     Optional<DecimalMax> max = extractAnnotation(context, DecimalMax.class);

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/MinMaxAnnotationPlugin.java
Patch:
@@ -50,6 +50,7 @@ public boolean supports(DocumentationType delimiter) {
   }
 
   @Override
+  @SuppressWarnings("deprecation")
   public void apply(ModelPropertyContext context) {
     Optional<Min> min = extractMin(context);
     Optional<Max> max = extractMax(context);

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/NotBlankAnnotationPlugin.java
Patch:
@@ -49,6 +49,7 @@ public boolean supports(DocumentationType delimiter) {
    * read NotBlank annotation
    */
   @Override
+  @SuppressWarnings("deprecation")
   public void apply(ModelPropertyContext context) {
     Optional<NotBlank> notBlank = extractAnnotation(context);
     if (notBlank.isPresent()) {

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/NotNullAnnotationPlugin.java
Patch:
@@ -48,6 +48,7 @@ public boolean supports(DocumentationType delimiter) {
    * read NotNull annotation
    */
   @Override
+  @SuppressWarnings("deprecation")
   public void apply(ModelPropertyContext context) {
     Optional<NotNull> notNull = extractAnnotation(context);
     if (notNull.isPresent()) {

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/PatternAnnotationPlugin.java
Patch:
@@ -34,7 +34,9 @@
 @Component
 @Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)
 public class PatternAnnotationPlugin implements ModelPropertyBuilderPlugin {
+
   @Override
+  @SuppressWarnings("deprecation")
   public void apply(ModelPropertyContext context) {
     Optional<Pattern> pattern = extractAnnotation(context, Pattern.class);
     String patternValueFromAnnotation = createPatternValueFromAnnotation(pattern);

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/SizeAnnotationPlugin.java
Patch:
@@ -44,6 +44,7 @@ public boolean supports(DocumentationType delimiter) {
   }
 
   @Override
+  @SuppressWarnings("deprecation")
   public void apply(ModelPropertyContext context) {
     Optional<Size> size = extractAnnotation(context);
 

File: springfox-core/src/main/java/springfox/documentation/RequestHandler.java
Patch:
@@ -108,6 +108,7 @@ default int compareTo(RequestHandler other) {
         .compare(this, other);
   }
 
+  @SuppressWarnings({"rawtypes", "unchecked"})
   static String sortedPaths(PatternsRequestCondition patternsCondition) {
     TreeSet<String> paths = new TreeSet<>(patternsCondition.getPatterns());
     return paths.stream()

File: springfox-core/src/main/java/springfox/documentation/builders/ApiListingBuilder.java
Patch:
@@ -20,7 +20,6 @@
 package springfox.documentation.builders;
 
 
-import springfox.documentation.schema.Model;
 import springfox.documentation.schema.ModelSpecification;
 import springfox.documentation.service.ApiDescription;
 import springfox.documentation.service.ApiListing;
@@ -43,6 +42,7 @@
 import static springfox.documentation.builders.BuilderDefaults.*;
 import static springfox.documentation.service.Tags.*;
 
+@SuppressWarnings("deprecation")
 public class ApiListingBuilder {
   private final Comparator<ApiDescription> descriptionOrdering;
   private String apiVersion;
@@ -60,7 +60,7 @@ public class ApiListingBuilder {
 
   private final Set<Tag> tags = new TreeSet<>(tagComparator());
   private final Set<String> tagNames = new TreeSet<>();
-  private final Map<String, Model> models = new TreeMap<>();
+  private final Map<String, springfox.documentation.schema.Model> models = new TreeMap<>();
   private final Map<String, Tag> tagLookup = new TreeMap<>();
   private final Map<String, ModelSpecification> modelSpecifications = new TreeMap<>();
   private ModelNamesRegistry modelNamesRegistry;
@@ -223,7 +223,7 @@ public ApiListingBuilder apis(List<ApiDescription> apis) {
    * @param models - model entries by name
    * @return this
    */
-  public ApiListingBuilder models(Map<String, Model> models) {
+  public ApiListingBuilder models(Map<String, springfox.documentation.schema.Model> models) {
     this.models.putAll(nullToEmptyMap(models));
     return this;
   }

File: springfox-core/src/main/java/springfox/documentation/builders/BuilderDefaults.java
Patch:
@@ -79,9 +79,9 @@ public static <T> List<T> nullToEmptyList(Collection<T> newValue) {
    * @param <T>       - any type
    * @return non-null list
    */
+  @SuppressWarnings("unchecked")
   public static <T> T[] nullToEmptyArray(T[] newValues) {
     if (newValues == null) {
-      //noinspection unchecked
       return (T[]) new Object[] {};
     }
     return newValues;

File: springfox-core/src/main/java/springfox/documentation/service/RequestParameter.java
Patch:
@@ -11,6 +11,7 @@
  * @since 3.0.0
  */
 public class RequestParameter {
+  public static final int DEFAULT_PRECEDENCE = 0;
   private final String name;
   private final int parameterIndex;
   private final ParameterType in;

File: springfox-core/src/main/java/springfox/documentation/service/ResolvedMethodParameter.java
Patch:
@@ -64,6 +64,7 @@ public boolean hasParameterAnnotation(Class<? extends Annotation> annotation) {
     return annotations.stream().anyMatch(annotation::isInstance);
   }
 
+  @SuppressWarnings("unchecked")
   public <T extends Annotation> Optional<T> findAnnotation(final Class<T> annotation) {
     return (Optional<T>) annotations.stream().filter(annotation::isInstance).findFirst();
   }

File: springfox-core/src/test/java/springfox/documentation/builders/ModelPropertyDefaultValueTest.java
Patch:
@@ -21,14 +21,13 @@
 
 import org.junit.Before;
 import org.junit.Test;
-import springfox.documentation.schema.ModelProperty;
-
 import static org.junit.Assert.assertEquals;
 
+@SuppressWarnings("deprecation")
 public class ModelPropertyDefaultValueTest {
 
     private ModelPropertyBuilder propertyBuilder;
-    private ModelProperty modelProperty;
+    private springfox.documentation.schema.ModelProperty modelProperty;
 
     @Before
     public void createNewPropertyBuilder() {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/RequestExtractionUtils.java
Patch:
@@ -69,6 +69,7 @@ static List<Annotation> bodyAnnotations(HandlerMethod handler) {
     return annotations;
   }
 
+  @SuppressWarnings({"ConstantConditions", "deprecation"})
   private static List<Annotation> handlerAnnotations(HandlerMethod handler) {
     List<Annotation> annotations = new ArrayList<>();
     if (handler != null) {
@@ -83,6 +84,7 @@ static List<Annotation> bodyAnnotations() {
     return annotations;
   }
 
+  @SuppressWarnings("ConstantConditions")
   static String propertyIdentifierName(PersistentProperty<?> property) {
     String propertyName = property.getName();
     if (property.isCollectionLike()) {

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/ServiceModelToOpenApiMapper.java
Patch:
@@ -142,6 +142,7 @@ abstract Parameter mapParameter(
       RequestParameter from,
       @Context ModelNamesRegistry modelNamesRegistry);
 
+  @SuppressWarnings("unchecked")
   @AfterMapping
   public void afterMappingParameter(
       RequestParameter from,

File: springfox-schema/src/main/java/springfox/documentation/schema/CachingModelProvider.java
Patch:
@@ -36,6 +36,7 @@
 
 @Component
 @Qualifier("cachedModels")
+@SuppressWarnings("deprecation")
 public class CachingModelProvider implements ModelProvider, ModelSpecificationProvider {
   private static final Logger LOGGER = LoggerFactory.getLogger(CachingModelProvider.class);
   private final Map<ModelContext, Optional<Model>> cache;

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -43,7 +43,6 @@
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Maps.*;
 import static springfox.documentation.schema.ResolvedTypes.*;
-import static springfox.documentation.schema.Types.*;
 
 
 /**
@@ -83,7 +82,7 @@ public Optional<Model> modelFor(ModelContext modelContext) {
     if (isContainerType(propertiesHost)
         || isMapType(propertiesHost)
         || enumTypeDeterminer.isEnum(propertiesHost.getErasedType())
-        || isBaseType(propertiesHost)
+        || springfox.documentation.schema.Types.isBaseType(propertiesHost)
         || modelContext.hasSeenBefore(propertiesHost)) {
       LOG.debug(
           "Skipping model of type {} as its either a container type, map, enum or base type, or its already "

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelSpecificationProvider.java
Patch:
@@ -46,7 +46,6 @@
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Maps.*;
 import static springfox.documentation.schema.ResolvedTypes.*;
-import static springfox.documentation.schema.Types.*;
 import static springfox.documentation.schema.property.PackageNames.*;
 
 @Component
@@ -79,14 +78,15 @@ public DefaultModelSpecificationProvider(
     this.modelSpecifications = modelSpecifications;
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public Optional<ModelSpecification> modelSpecificationsFor(ModelContext modelContext) {
     ResolvedType propertiesHost = modelContext.alternateEvaluatedType();
 
     if (isContainerType(propertiesHost)
         || isMapType(propertiesHost)
         || enumTypeDeterminer.isEnum(propertiesHost.getErasedType())
-        || isBaseType(propertiesHost)
+        || springfox.documentation.schema.Types.isBaseType(propertiesHost)
         || modelContext.hasSeenBefore(propertiesHost)) {
       LOG.debug(
           "Skipping model of type {} as its either a container type, map, enum or base type, or its already "

File: springfox-schema/src/main/java/springfox/documentation/schema/plugins/JacksonXmlModelPlugin.java
Patch:
@@ -40,6 +40,7 @@ public JacksonXmlModelPlugin(TypeResolver typeResolver) {
     this.typeResolver = typeResolver;
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public void apply(ModelContext context) {
     JacksonXmlRootElement root = AnnotationUtils.findAnnotation(forClass(context), JacksonXmlRootElement.class);

File: springfox-schema/src/main/java/springfox/documentation/schema/plugins/XmlModelPlugin.java
Patch:
@@ -34,6 +34,7 @@
 
 @Component
 @Conditional(JaxbPresentInClassPathCondition.class)
+@SuppressWarnings("deprecation")
 public class XmlModelPlugin implements ModelBuilderPlugin {
   private final TypeResolver typeResolver;
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContext.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.*;
 import java.util.stream.Collectors;
 
+@SuppressWarnings("deprecation")
 public class DocumentationContext {
   private final DocumentationType documentationType;
   private final List<RequestHandler> handlerMappings;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DefaultConfiguration.java
Patch:
@@ -42,6 +42,7 @@ public DefaultConfiguration(
     this.pathProvider = pathProvider;
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public DocumentationContextBuilder create(DocumentationType documentationType) {
     return new DocumentationContextBuilder(documentationType)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterHeadersConditionReader.java
Patch:
@@ -39,6 +39,7 @@ public OperationParameterHeadersConditionReader(TypeResolver resolver) {
     super(resolver);
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public void apply(OperationContext context) {
     Set<NameValueExpression<String>> headers = context.headers();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterRequestConditionReader.java
Patch:
@@ -39,6 +39,7 @@ public OperationParameterRequestConditionReader(TypeResolver resolver) {
     super(resolver);
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public void apply(OperationContext context) {
     Set<NameValueExpression<String>> params = context.params();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationResponseClassReader.java
Patch:
@@ -58,6 +58,7 @@ public OperationResponseClassReader(SchemaPluginsManager pluginsManager,
     this.pluginsManager = pluginsManager;
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public void apply(OperationContext context) {
     ResolvedType returnType = context.getReturnType();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDefaultReader.java
Patch:
@@ -36,6 +36,7 @@
 
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
+@SuppressWarnings("deprecation")
 public class ParameterDefaultReader implements ParameterBuilderPlugin {
   private final DescriptionResolver descriptions;
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterMultiplesReader.java
Patch:
@@ -32,6 +32,7 @@
 
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
+@SuppressWarnings("deprecation")
 public class ParameterMultiplesReader implements ParameterBuilderPlugin {
   @Override
   public void apply(ParameterContext context) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterNameReader.java
Patch:
@@ -40,6 +40,7 @@
 
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
+@SuppressWarnings("deprecation")
 public class ParameterNameReader implements ParameterBuilderPlugin {
 
   @Override

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterRequiredReader.java
Patch:
@@ -46,6 +46,7 @@
 
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
+@SuppressWarnings("deprecation")
 public class ParameterRequiredReader implements ParameterBuilderPlugin {
   private final SpringVersion springVersion;
   private final DescriptionResolver descriptions;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterTypeReader.java
Patch:
@@ -42,6 +42,7 @@
 
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
+@SuppressWarnings("deprecation")
 public class ParameterTypeReader implements ParameterBuilderPlugin {
   private static final Logger LOGGER = LoggerFactory.getLogger(ParameterTypeReader.class);
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionReader.java
Patch:
@@ -90,6 +90,7 @@ public List<ApiDescription> read(RequestMappingContext outerContext) {
     return apiDescriptionList;
   }
 
+  @SuppressWarnings({"unchecked", "rawtypes"})
   private List<String> matchingPaths(ApiSelector selector, PatternsRequestCondition patternsCondition) {
     return ((Set<String>) patternsCondition.getPatterns()).stream()
         .filter(selector.getPathSelector())

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationPositionReader.java
Patch:
@@ -36,6 +36,7 @@
 public class OperationPositionReader implements OperationBuilderPlugin {
   private static final Logger LOGGER = LoggerFactory.getLogger(OperationPositionReader.class);
 
+  @SuppressWarnings("deprecation")
   @Override
   public void apply(OperationContext context) {
     Optional<ApiOperation> apiOperation = context.findAnnotation(ApiOperation.class);

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationResponseClassReader.java
Patch:
@@ -44,6 +44,7 @@
 
 @Component
 @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
+@SuppressWarnings("deprecation")
 public class SwaggerOperationResponseClassReader implements OperationBuilderPlugin {
   private static Logger log = LoggerFactory.getLogger(SwaggerOperationResponseClassReader.class);
   private final TypeResolver typeResolver;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ApiParamParameterBuilder.java
Patch:
@@ -49,6 +49,7 @@
 
 @Component("swaggerParameterDescriptionReader")
 @Order(SWAGGER_PLUGIN_ORDER)
+@SuppressWarnings("deprecation")
 public class ApiParamParameterBuilder implements ParameterBuilderPlugin {
   private final DescriptionResolver descriptions;
   private final EnumTypeDeterminer enumTypeDeterminer;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/OpenApiParameterBuilder.java
Patch:
@@ -47,6 +47,7 @@
 
 @Order(OAS_PLUGIN_ORDER)
 @Component
+@SuppressWarnings("deprecation")
 public class OpenApiParameterBuilder implements ParameterBuilderPlugin {
   private final DescriptionResolver descriptions;
   private final EnumTypeDeterminer enumTypeDeterminer;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelBuilder.java
Patch:
@@ -25,7 +25,6 @@
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
-import springfox.documentation.schema.ModelReference;
 import springfox.documentation.schema.ReferenceModelSpecification;
 import springfox.documentation.schema.TypeNameExtractor;
 import springfox.documentation.schema.property.ModelSpecificationFactory;
@@ -43,6 +42,7 @@
 
 @Component
 @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
+@SuppressWarnings("deprecation")
 public class ApiModelBuilder implements ModelBuilderPlugin {
   private final TypeResolver typeResolver;
   private final TypeNameExtractor typeNameExtractor;
@@ -62,10 +62,11 @@ public ApiModelBuilder(
   }
 
   @Override
+  @SuppressWarnings("deprecation")
   public void apply(ModelContext context) {
     ApiModel annotation = AnnotationUtils.findAnnotation(forClass(context), ApiModel.class);
     if (annotation != null) {
-      List<ModelReference> modelRefs = new ArrayList<>();
+      List<springfox.documentation.schema.ModelReference> modelRefs = new ArrayList<>();
       List<ReferenceModelSpecification> subclassKeys = new ArrayList<>();
       for (Class<?> each : annotation.subTypes()) {
         modelRefs.add(modelRefFactory(context, enumTypeDeterminer, typeNameExtractor)

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelPropertyPropertyBuilder.java
Patch:
@@ -51,6 +51,7 @@ public ApiModelPropertyPropertyBuilder(
     this.modelSpecifications = modelSpecifications;
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public void apply(ModelPropertyContext context) {
     Optional<ApiModelProperty> annotation = empty();

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/OpenApiSchemaPropertyBuilder.java
Patch:
@@ -24,7 +24,6 @@
 import static java.util.Optional.*;
 import static org.springframework.util.StringUtils.*;
 import static springfox.documentation.schema.Annotations.*;
-import static springfox.documentation.schema.Types.*;
 
 @Component
 @Order(SwaggerPluginSupport.OAS_PLUGIN_ORDER)
@@ -40,6 +39,7 @@ public OpenApiSchemaPropertyBuilder(
     this.modelSpecifications = modelSpecifications;
   }
 
+  @SuppressWarnings("deprecation")
   @Override
   public void apply(ModelPropertyContext context) {
     Schema annotation = context.getAnnotatedElement()
@@ -51,7 +51,7 @@ public void apply(ModelPropertyContext context) {
     if (annotation != null) {
       ModelSpecification modelSpecification = null;
       ResolvedType type = toType(context.getResolver()).apply(annotation);
-      if (!isVoid(type)) {
+      if (!springfox.documentation.schema.Types.isVoid(type)) {
         modelSpecification =
             modelSpecifications.create(context.getOwner(), type);
       }

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/readers/parameter/ParameterNameReader.java
Patch:
@@ -35,6 +35,7 @@
 
 @Component("swagger1ParameterNameReader")
 @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
+@SuppressWarnings("deprecation")
 public class ParameterNameReader implements ParameterBuilderPlugin {
 
   @Override

File: oas-contract-tests/src/main/java/springfox/test/contract/oas/api/ExceptionTranslator.java
Patch:
@@ -18,6 +18,7 @@
 
 package springfox.test.contract.oas.api;
 
+import org.springframework.boot.web.error.ErrorAttributeOptions;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.ResponseStatus;
@@ -42,6 +43,6 @@ public java.util.Map<String, Object> processConstraintViolationException(WebRequ
         "javax.servlet.error.status_code",
         HttpStatus.BAD_REQUEST.value(),
         org.springframework.web.context.request.RequestAttributes.SCOPE_REQUEST);
-    return errorAttributes.getErrorAttributes(request, false);
+    return errorAttributes.getErrorAttributes(request, ErrorAttributeOptions.defaults());
   }
 }

File: oas-contract-tests/src/main/java/springfox/test/contract/oas/repository/HashMapRepository.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.TreeSet;
 
 @NoRepositoryBean
+@SuppressWarnings("unchecked")
 public abstract class HashMapRepository<T, ID> implements CrudRepository<T, ID> {
 
   private final BeanWrapper entityBeanInfo;

File: springfox-core/src/main/java/springfox/documentation/builders/ContentSpecificationBuilder.java
Patch:
@@ -13,10 +13,10 @@
 public class ContentSpecificationBuilder {
   private static final org.springframework.http.MediaType DEFAULT_MEDIA_TYPE =
       new org.springframework.http.MediaType("application", "springfox");
-  private Map<org.springframework.http.MediaType, RepresentationBuilder> representations = new HashMap<>();
+  private final Map<org.springframework.http.MediaType, RepresentationBuilder> representations = new HashMap<>();
   private boolean requestBody = false;
 
-  public ContentSpecificationBuilder representations(Collection<Representation> representations) {
+  private ContentSpecificationBuilder representations(Collection<Representation> representations) {
     this.representations.putAll(representations.stream()
         .collect(Collectors.toMap(
             Representation::getMediaType,
@@ -25,7 +25,7 @@ public ContentSpecificationBuilder representations(Collection<Representation> re
     return this;
   }
 
-  public RepresentationBuilder representationBuilderFor(org.springframework.http.MediaType mediaType) {
+  private RepresentationBuilder representationBuilderFor(org.springframework.http.MediaType mediaType) {
     return this.representations.computeIfAbsent(mediaType,
         m -> new RepresentationBuilder()
             .mediaType(m));

File: springfox-petstore-webflux/src/main/java/springfox/petstore/webflux/controller/UserController.java
Patch:
@@ -45,6 +45,7 @@
 @Controller
 @RequestMapping(value = "/api/user", produces = MediaType.APPLICATION_JSON_VALUE)
 @Api(value = "/user", description = "Operations about user")
+@SuppressWarnings("unchecked")
 public class UserController {
   private static final String USERNAME = "username";
   private static final String USER_NOT_FOUND = "User not found";

File: springfox-petstore/src/main/java/springfox/petstore/controller/UserController.java
Patch:
@@ -44,6 +44,7 @@
 @Controller
 @RequestMapping(value = "/api/user", produces = MediaType.APPLICATION_JSON_VALUE)
 @Api(value = "/user", description = "Operations about user")
+@SuppressWarnings("unchecked")
 public class UserController {
   private UserRepository userRepository = new UserRepository();
 

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelDependencyProvider.java
Patch:
@@ -86,6 +86,8 @@ private Predicate<ResolvedType> baseTypes(final ModelContext modelContext) {
     return resolvedType -> isBaseType(ModelContext.fromParent(modelContext, resolvedType));
   }
 
+
+  @SuppressWarnings("deprecation")
   private boolean isBaseType(ModelContext modelContext) {
     String typeName = nameExtractor.typeName(modelContext);
     return Types.isBaseType(typeName);

File: springfox-schema/src/test/java/springfox/documentation/schema/SimpleTypeEntityModel.java
Patch:
@@ -21,6 +21,7 @@
 import org.springframework.hateoas.Link;
 import org.springframework.hateoas.EntityModel;
 
+@SuppressWarnings("deprecation")
 public class SimpleTypeEntityModel extends EntityModel<SimpleType> {
   public SimpleTypeEntityModel(SimpleType content, Link... links) {
     super(content, links);

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationContext.java
Patch:
@@ -77,6 +77,7 @@ public int operationIndex() {
     return operationIndex;
   }
 
+  @SuppressWarnings("deprecation")
   public List<ResponseMessage> getGlobalResponseMessages(String forHttpMethod) {
     DocumentationContext documentationContext = getDocumentationContext();
     if (documentationContext.getGlobalResponseMessages()
@@ -123,6 +124,7 @@ public OperationModelContextsBuilder operationModelsBuilder() {
     return requestContext.operationModelsBuilder();
   }
 
+  @SuppressWarnings("deprecation")
   public Map<String, Set<Model>> getKnownModels() {
     return requestContext.getModelMap();
   }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/ParameterContext.java
Patch:
@@ -32,20 +32,21 @@
 import static springfox.documentation.builders.BuilderDefaults.*;
 
 public class ParameterContext {
+  @SuppressWarnings("deprecation")
   private final ParameterBuilder parameterBuilder;
   private final ResolvedMethodParameter resolvedMethodParameter;
   private final DocumentationContext documentationContext;
   private final GenericTypeNamingStrategy genericNamingStrategy;
   private final OperationContext operationContext;
   private final RequestParameterBuilder requestParameterBuilder;
 
+  @SuppressWarnings("deprecation")
   public ParameterContext(
       ResolvedMethodParameter resolvedMethodParameter,
       DocumentationContext documentationContext,
       GenericTypeNamingStrategy genericNamingStrategy,
       OperationContext operationContext,
       int parameterIndex) {
-
     this.parameterBuilder = new ParameterBuilder();
     this.requestParameterBuilder = new RequestParameterBuilder()
         .accepts(nullToEmptyList(operationContext.consumes()))

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/GenericPetController.java
Patch:
@@ -18,7 +18,6 @@
  */
 package springfox.documentation.spring.web.dummy.controllers;
 
-import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.PostMapping;
@@ -30,6 +29,6 @@
 public class GenericPetController extends GenericRestController<Pet, PetRepository> {
   @PostMapping("test")
   public ResponseEntity<Pet> test() {
-    return new ResponseEntity(HttpStatus.OK);
+    return ResponseEntity.ok(new Pet());
   }
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/CompatibilityModelMapper.java
Patch:
@@ -18,6 +18,7 @@ public abstract class CompatibilityModelMapper {
   @Value("${springfox.documentation.swagger.v2.use-model-v3:true}")
   private boolean useModelV3;
 
+  @SuppressWarnings("deprecation")
   Map<String, Model> modelsFromApiListings(Map<String, List<ApiListing>> apiListings) {
     if (useModelV3) {
       return Mappers.getMapper(ModelSpecificationMapper.class).modelsFromApiListings(apiListings);

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/BugsController.java
Patch:
@@ -81,6 +81,7 @@
 @Api(tags = "Bugs")
 @RestController
 @RequestMapping("/bugs")
+@SuppressWarnings("deprecation")
 public class BugsController {
   @RequestMapping(value = "1306", method = POST)
   public ResponseEntity<Map<String, String>> bug1306(@RequestParam Map<String, String> paramMap) {

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/data/rest/BasePathConfigurer.java
Patch:
@@ -22,13 +22,12 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.data.rest.core.config.RepositoryRestConfiguration;
 import org.springframework.data.rest.webmvc.config.RepositoryRestConfigurer;
-import org.springframework.data.rest.webmvc.config.RepositoryRestConfigurerAdapter;
 
 @Configuration
 public class BasePathConfigurer {
   @Bean
   public RepositoryRestConfigurer repositoryRestConfigurer() {
-    return new RepositoryRestConfigurerAdapter() {
+    return new RepositoryRestConfigurer() {
       @Override
       public void configureRepositoryRestConfiguration(RepositoryRestConfiguration config) {
         config.setBasePath("/rest");

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/SchemaMapper.java
Patch:
@@ -37,7 +37,7 @@
 import static java.util.stream.Collectors.*;
 import static springfox.documentation.builders.BuilderDefaults.*;
 
-@SuppressWarnings("rawtypes")
+@SuppressWarnings({"rawtypes",})
 @Mapper(componentModel = "spring")
 public abstract class SchemaMapper {
   @Named("ModelsMapping")

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/mappers/ServiceModelToSwaggerMapper.java
Patch:
@@ -42,6 +42,7 @@
     DataTypeMapper.class,
     AuthorizationTypesMapper.class
 })
+@SuppressWarnings("deprecation")
 public interface ServiceModelToSwaggerMapper {
   //Api related
   ApiDescription toSwaggerApiDescription(springfox.documentation.service.ApiDescription from);

File: swagger-contract-tests-webflux/src/main/java/springfox/test/contract/swagger/webflux/SecuritySupport.java
Patch:
@@ -1,4 +1,4 @@
-package springfox.test.contract.swagger;
+package springfox.test.contract.swagger.webflux;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: swagger-contract-tests-webflux/src/main/java/springfox/test/contract/swagger/webflux/Swagger2WebFluxConfig.java
Patch:
@@ -1,4 +1,4 @@
-package springfox.test.contract.swagger;
+package springfox.test.contract.swagger.webflux;
 
 import com.fasterxml.classmate.TypeResolver;
 import org.springframework.beans.factory.annotation.Autowired;

File: swagger-contract-tests-webflux/src/main/java/springfox/test/contract/swagger/webflux/SwaggerWebfluxApplication.java
Patch:
@@ -17,7 +17,7 @@
  *
  */
 
-package springfox.test.contract.swagger;
+package springfox.test.contract.swagger.webflux;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;

File: swagger-contract-tests-webflux/src/main/java/springfox/test/contract/swagger/webflux/listeners/ObjectMapperEventListener.java
Patch:
@@ -17,7 +17,7 @@
  *
  */
 
-package springfox.test.contract.swagger.listeners;
+package springfox.test.contract.swagger.webflux.listeners;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/webflux/listeners/ObjectMapperEventListener.java
Patch:
@@ -17,7 +17,7 @@
  *
  */
 
-package springfox.test.contract.swagger.listeners;
+package springfox.test.contract.swagger.webflux.listeners;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: springfox-boot-starter/src/main/java/springfox/boot/starter/autoconfigure/OpenApiAutoConfiguration.java
Patch:
@@ -23,7 +23,7 @@
     Swagger2DocumentationConfiguration.class
 })
 public class OpenApiAutoConfiguration {
-  @Value("${springfox.documentation.ui.baseUrl:}")
+  @Value("${springfox.documentation.swagger-ui.baseUrl:}")
   private String swaggerBaseUrl;
 
   @Bean

File: springfox-oas/src/main/java/springfox/documentation/oas/web/OasControllerWebFlux.java
Patch:
@@ -38,7 +38,7 @@
 
 @ApiIgnore
 @RestController
-@RequestMapping("${springfox.documentation.ui.baseUrl:}${springfox.documentation.open-api.v3.path:/v3/api-docs}")
+@RequestMapping("${springfox.documentation.swagger-ui.baseUrl:}${springfox.documentation.open-api.v3.path:/v3/api-docs}")
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)
 public class OasControllerWebFlux extends OasControllerWeb {
 
@@ -47,7 +47,7 @@ public OasControllerWebFlux(
       DocumentationCache documentationCache,
       ServiceModelToOasMapper mapper,
       JsonSerializer jsonSerializer,
-      @Value("${springfox.documentation.ui.baseUrl:}${springfox.documentation.open-api.v3.path:/v3/api-docs}")
+      @Value("${springfox.documentation.swagger-ui.baseUrl:}${springfox.documentation.open-api.v3.path:/v3/api-docs}")
           String oasPath) {
     super(documentationCache, mapper, jsonSerializer, oasPath);
   }

File: springfox-oas/src/main/java/springfox/documentation/oas/web/OasControllerWebMvc.java
Patch:
@@ -39,7 +39,7 @@
 
 @ApiIgnore
 @RestController
-@RequestMapping("${springfox.documentation.ui.baseUrl:}${springfox.documentation.open-api.v3.path:/v3/api-docs}")
+@RequestMapping("${springfox.documentation.swagger-ui.baseUrl:}${springfox.documentation.open-api.v3.path:/v3/api-docs}")
 @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)
 public class OasControllerWebMvc extends OasControllerWeb {
 
@@ -48,7 +48,7 @@ public OasControllerWebMvc(
       DocumentationCache documentationCache,
       ServiceModelToOasMapper mapper,
       JsonSerializer jsonSerializer,
-      @Value("${springfox.documentation.ui.baseUrl:}${springfox.documentation.open-api.v3.path:/v3/api-docs}")
+      @Value("${springfox.documentation.swagger-ui.baseUrl:}${springfox.documentation.open-api.v3.path:/v3/api-docs}")
           String oasPath) {
     super(documentationCache, mapper, jsonSerializer, oasPath);
   }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/ApiResourceController.java
Patch:
@@ -33,7 +33,7 @@
 @RestController
 @ApiIgnore
 @RequestMapping({
-    "${springfox.documentation.ui.baseUrl:}/swagger-resources"})
+    "${springfox.documentation.swagger-ui.baseUrl:}/swagger-resources"})
 public class ApiResourceController {
 
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/InMemorySwaggerResourcesProvider.java
Patch:
@@ -61,11 +61,11 @@ public InMemorySwaggerResourcesProvider(
     swagger1Url = environment.getProperty("springfox.documentation.swagger.v1.path", "/api-docs");
     swagger2Url = fixup(
         String.format("%s%s",
-            environment.getProperty("springfox.documentation.ui.baseUrl", ""),
+            environment.getProperty("springfox.documentation.swagger-ui.baseUrl", ""),
             environment.getProperty("springfox.documentation.swagger.v2.path", "/v2/api-docs")));
     oas3Url = fixup(
         String.format("%s%s",
-            environment.getProperty("springfox.documentation.ui.baseUrl", ""),
+            environment.getProperty("springfox.documentation.swagger-ui.baseUrl", ""),
             environment.getProperty("springfox.documentation.open-api.v3.path", "/v3/api-docs")));
     swagger1Available = classByName("springfox.documentation.swagger1.web.Swagger1Controller").isPresent();
     swagger2Available =

File: springfox-boot-starter/src/main/java/springfox/boot/starter/autoconfigure/SwaggerUiConfigurer.java
Patch:
@@ -2,15 +2,16 @@
 
 import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
+import org.springframework.web.servlet.resource.ResourceTransformer;
 
 public class SwaggerUiConfigurer implements WebMvcConfigurer {
 
   private final String baseUrl;
-  private final SwaggerUiTransformer transformer;
+  private final ResourceTransformer transformer;
 
   public SwaggerUiConfigurer(
       String baseUrl,
-      SwaggerUiTransformer transformer) {
+      ResourceTransformer transformer) {
     this.baseUrl = baseUrl;
     this.transformer = transformer;
   }

File: springfox-oas/src/main/java/springfox/documentation/oas/web/OasControllerWeb.java
Patch:
@@ -1,7 +1,6 @@
 package springfox.documentation.oas.web;
 
 import io.swagger.v3.oas.models.OpenAPI;
-import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import springfox.documentation.builders.ServerBuilder;
@@ -29,8 +28,7 @@ public OasControllerWeb(
       DocumentationCache documentationCache,
       ServiceModelToOasMapper mapper,
       JsonSerializer jsonSerializer,
-      @Value("${springfox.documentation.resources.baseUrl:}${springfox.documentation.oas.v3.path:/v3/api-docs}")
-          String oasPath) {
+      String oasPath) {
     this.documentationCache = documentationCache;
     this.mapper = mapper;
     this.jsonSerializer = jsonSerializer;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -165,7 +165,7 @@ public ModelNamesRegistryFactoryPlugin modelNamesGeneratorFactory(DocumentationT
   }
 
   private DocumentationPlugin defaultDocumentationPlugin() {
-    return new Docket(DocumentationType.SWAGGER_2);
+    return new Docket(DocumentationType.OAS_30);
   }
 
   public DocumentationContextBuilder createContextBuilder(

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/ServiceModelToOasMapper.java
Patch:
@@ -251,7 +251,7 @@ private PathItem mapOperations(
       path = new PathItem();
     }
     for (springfox.documentation.service.Operation each : nullToEmptyList(api.getOperations())) {
-      LOGGER.info("Mapping operation {}", api.getPath());
+      LOGGER.debug("Mapping operation {}", api.getPath());
       Operation operation = mapOperation(each, modelNamesRegistry);
       path.operation(
           mapHttpMethod(each.getMethod()),

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/ControllerNamingUtils.java
Patch:
@@ -28,7 +28,7 @@
 import static springfox.documentation.spring.web.paths.Paths.*;
 
 public class ControllerNamingUtils {
-  private static Logger log = LoggerFactory.getLogger(ControllerNamingUtils.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ControllerNamingUtils.class);
   private static final String ISO_8859_1 = "ISO-8859-1";
 
   private ControllerNamingUtils() {
@@ -38,7 +38,7 @@ private ControllerNamingUtils() {
   public static String pathRoot(String requestPattern) {
     Assert.notNull(requestPattern, "Request pattern is required");
     Assert.hasText(requestPattern, "Request pattern is not empty");
-    log.info("Resolving path root for {}", requestPattern);
+    LOGGER.debug("Resolving path root for {}", requestPattern);
     String adjustedPattern = requestPattern.startsWith("/") ? requestPattern : "/" + requestPattern;
     int idx = adjustedPattern.indexOf("/", 1);
     if (idx > -1) {
@@ -59,7 +59,7 @@ public static String decode(String path) {
     try {
       return UriUtils.decode(path, ISO_8859_1);
     } catch (Exception e) {
-      log.error("Could not decode:" + path, e);
+      LOGGER.error("Could not decode:" + path, e);
     }
     return path;
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/AbstractDocumentationPluginsBootstrapper.java
Patch:
@@ -76,13 +76,13 @@ protected void bootstrapDocumentationPlugins() {
         .stream()
         .sorted(pluginOrdering())
         .collect(toList());
-    LOGGER.info("Found {} custom documentation plugin(s)", plugins.size());
+    LOGGER.debug("Found {} custom documentation plugin(s)", plugins.size());
     for (DocumentationPlugin each : plugins) {
       DocumentationType documentationType = each.getDocumentationType();
       if (each.isEnabled()) {
         scanDocumentation(buildContext(each));
       } else {
-        LOGGER.info("Skipping initializing disabled plugin bean {} v{}",
+        LOGGER.debug("Skipping initializing disabled plugin bean {} v{}",
             documentationType.getName(), documentationType.getVersion());
       }
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.java
Patch:
@@ -90,7 +90,7 @@ public void stop(Runnable callback) {
   @Override
   public void start() {
     if (initialized.compareAndSet(false, true)) {
-      LOGGER.info("Documentation plugins bootstrapped");
+      LOGGER.debug("Documentation plugins bootstrapped");
       super.bootstrapDocumentationPlugins();
     }
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/CachingOperationNameGenerator.java
Patch:
@@ -38,7 +38,7 @@ public String startingWith(String prefix) {
     if (generated.containsKey(prefix)) {
       generated.put(prefix, generated.get(prefix) + 1);
       String nextUniqueOperationName = String.format("%s_%s", prefix, generated.get(prefix));
-      LOG.info("Generating unique operation named: {}", nextUniqueOperationName);
+      LOG.debug("Generating unique operation named: {}", nextUniqueOperationName);
       return nextUniqueOperationName;
     } else {
       generated.put(prefix, 0);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ContentParameterAggregator.java
Patch:
@@ -28,7 +28,7 @@ public Collection<RequestParameter> aggregate(Collection<RequestParameter> param
     if (parameters.size() == 0) {
       return new ArrayList<>();
     }
-    LOGGER.info(
+    LOGGER.debug(
         "Aggregating content parameters from parameters: {}",
         parameters.stream()
                   .map(RequestParameter::getName)
@@ -102,7 +102,7 @@ public Collection<RequestParameter> aggregate(Collection<RequestParameter> param
     if (content != null && content.getIn() != null) {
       requestParameters.add(content);
     }
-    LOGGER.info(
+    LOGGER.debug(
         "Post content aggregation parameters: {}",
         requestParameters.stream()
                          .map(RequestParameter::getName)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -102,11 +102,11 @@ public boolean supports(DocumentationType delimiter) {
   private List<Compatibility<Parameter, RequestParameter>> readParameters(OperationContext context) {
     List<ResolvedMethodParameter> methodParameters = context.getParameters();
     List<Compatibility<Parameter, RequestParameter>> parameters = new ArrayList<>();
-    LOGGER.info("Reading parameters for method {} at path {}", context.getName(), context.requestMappingPattern());
+    LOGGER.debug("Reading parameters for method {} at path {}", context.getName(), context.requestMappingPattern());
 
     int index = 0;
     for (ResolvedMethodParameter methodParameter : methodParameters) {
-      LOGGER.info("Processing parameter {}", methodParameter.defaultName().orElse("<unknown>"));
+      LOGGER.debug("Processing parameter {}", methodParameter.defaultName().orElse("<unknown>"));
       ResolvedType alternate = context.alternateFor(methodParameter.getParameterType());
       if (!shouldIgnore(methodParameter, alternate, context.getIgnorableParameterTypes())) {
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingReferenceScanner.java
Patch:
@@ -38,10 +38,10 @@
 @Component
 public class ApiListingReferenceScanner {
 
-  private static final Logger LOG = LoggerFactory.getLogger(ApiListingReferenceScanner.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ApiListingReferenceScanner.class);
 
   public ApiListingReferenceScanResult scan(DocumentationContext context) {
-    LOG.info("Scanning for api listing references");
+    LOGGER.debug("Scanning for api listing references");
 
     Map<ResourceGroup, List<RequestMappingContext>> resourceGroupRequestMappings
         = new HashMap<>();

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/WebMvcPropertySourcedRequestMappingHandlerMapping.java
Patch:
@@ -62,11 +62,11 @@ protected void initHandlerMethods() {
           HandlerMethod handlerMethod = createHandlerMethod(handler, method);
           String mappingPath = mappingPath(mapper);
           if (mappingPath != null) {
-            logger.info(String.format("Mapped URL path [%s] onto method [%s]", mappingPath, handlerMethod.toString()));
+            logger.debug(String.format("Mapped URL path [%s] onto method [%s]", mappingPath, handlerMethod.toString()));
             handlerMethods.put(mappingPath, handlerMethod);
           } else {
             for (String path : mapping.getPatternsCondition().getPatterns()) {
-              logger.info(String.format("Mapped URL path [%s] onto method [%s]", path, handlerMethod.toString()));
+              logger.debug(String.format("Mapped URL path [%s] onto method [%s]", path, handlerMethod.toString()));
               handlerMethods.put(path, handlerMethod);
             }
           }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -244,7 +244,7 @@ protected Map<String, Path> mapApiListings(Map<String, List<ApiListing>> apiList
         .flatMap(Collection::stream)
         .forEachOrdered(each -> {
           for (ApiDescription api : each.getApis()) {
-            LOGGER.info("Mapping operation with path {}", api.getPath());
+            LOGGER.debug("Mapping operation with path {}", api.getPath());
             paths.put(
                 api.getPath(),
                 mapOperations(api, ofNullable(paths.get(api.getPath())), each.getModelNamesRegistry()));

File: springfox-core/src/main/java/springfox/documentation/common/SpringVersion.java
Patch:
@@ -29,6 +29,7 @@ public class SpringVersion {
      * Return the full version string of the present Spring codebase,
      * or {@code null} if it cannot be determined.
      * @see Package#getImplementationVersion()
+     * @return Spring version
      */
     public Version getVersion() {
         return Version.parse(getVersionString());

File: springfox-core/src/main/java/springfox/documentation/schema/Example.java
Patch:
@@ -41,7 +41,7 @@ public class Example {
   /**
    * @deprecated @since 3.0.0
    * Use @see {@link Example#Example(String, String, String, Object, String, String)}
-   * @param value
+   * @param value - example literal
    */
   @Deprecated
   public Example(Object value) {
@@ -56,7 +56,8 @@ public Example(Object value) {
   /**
    * @deprecated @since 3.0.0
    * Use @see {@link Example#Example(String, String, String, Object, String, String)}
-   * @param value
+   * @param mediaType - media type of the example
+   * @param value - example literal
    */
   @Deprecated
   public Example(

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/configuration/SpringDataRestConfiguration.java
Patch:
@@ -64,7 +64,7 @@ public List<AlternateTypeRule> rules() {
       }
     };
   }
-  // tag::alternate-type-rule-convention[]
+  // end::alternate-type-rule-convention[]
 
   // tag::alternate-type-builder[]
   private Type pageableMixin(RepositoryRestConfiguration restConfiguration) {
@@ -88,5 +88,5 @@ private AlternateTypePropertyBuilder property(Class<?> type, String name) {
         .canRead(true)
         .canWrite(true);
   }
-  // tag::alternate-type-builder[]
+  // end::alternate-type-builder[]
 }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -211,7 +211,7 @@ public DocumentationContextBuilder rules(List<AlternateTypeRule> rules) {
   /**
    * Used to populate the defaults
    *
-   * @param defaultResponseMessages
+   * @param defaultResponseMessages - default response messages
    * @return DocumentationContextBuilder
    * @deprecated @since 3.1.0
    * Use {@link DocumentationContextBuilder#defaultResponses} instead

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationContext.java
Patch:
@@ -88,9 +88,9 @@ public List<ResponseMessage> getGlobalResponseMessages(String forHttpMethod) {
   }
 
   /**
-   * Use @see {@link OperationContext#getRequestParameters()} instead
+   * Use {@link OperationContext#getRequestParameters()} instead
    * @deprecated @since 3.0
-   * @return List<Parameter>
+   * @return List
    */
   @Deprecated
   public List<Parameter> getGlobalOperationParameters() {

File: springfox-spring-config/src/main/java/springfox/springconfig/VersionApiReader.java
Patch:
@@ -67,4 +67,4 @@ public boolean supports(DocumentationType documentationType) {
     return true; //<4>
   }
 }
-// tag::parameter-builder-plugin[]
+// end::parameter-builder-plugin[]

File: springfox-spring-config/src/main/java/springfox/springconfig/VersionedController.java
Patch:
@@ -33,5 +33,5 @@ public ResponseEntity<User> getUser(
       @RequestParam("id") String id) {
     throw new UnsupportedOperationException();
   }
-  // tag::version-annotated-controller[]
+  // end::version-annotated-controller[]
 }

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/Bug1767ListingScanner.java
Patch:
@@ -169,7 +169,7 @@ private Set<Response> responses() { //<8b>
                                                         .build()))
                          .build());
   }
-  // tag::api-listing-plugin[]
+  // end::api-listing-plugin[]
 
   @Override
   public boolean supports(DocumentationType delimiter) {

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/Swagger2TestConfig.java
Patch:
@@ -118,7 +118,7 @@ public Docket featureService(TypeResolver resolver, List<SecurityScheme> authori
     return new Docket(DocumentationType.SWAGGER_2)
         .groupName("featureService")
         .useDefaultResponseMessages(false)
-        .additionalModels(resolver.resolve(FeatureDemonstrationService.CustomTypeFor2031.class))
+        .additionalModels(resolver.resolve(FeatureDemonstrationService.CustomTypeFor2031.class))  //<1>
         .securitySchemes(authorizationTypes)
         .produces(new HashSet<>(
             Arrays.asList(
@@ -129,6 +129,7 @@ public Docket featureService(TypeResolver resolver, List<SecurityScheme> authori
             String.class))
         .select().paths(PathSelectors.regex("/features/.*"))
         .build();
+    // end::question-27-config[]
   }
 
   @Bean

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterMinMaxAnnotationPlugin.java
Patch:
@@ -68,8 +68,8 @@ public void apply(ParameterExpansionContext context) {
           values.getModern().map(NumericElementFacet::toString)
               .orElse("<empty>"));
       context.getRequestParameterBuilder()
-          .simpleParameterBuilder().facetBuilder(NumericElementFacetBuilder.class)
-          .copyOf(values.getModern().orElse(null));
+          .simpleParameterBuilder()
+             .collectionFacet(c -> c.copyOf(values.getModern().orElse(null)));
     }
   }
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterPatternAnnotationPlugin.java
Patch:
@@ -53,8 +53,7 @@ public void apply(ParameterExpansionContext context) {
       LOG.debug("@Pattern present: {}", pattern.get().regexp());
       context.getParameterBuilder().pattern(pattern.get().regexp());
       context.getRequestParameterBuilder().simpleParameterBuilder()
-          .facetBuilder(StringElementFacetBuilder.class)
-          .pattern(pattern.get().regexp());
+          .stringFacet(s -> s.pattern(pattern.get().regexp()));
     }
   }
 }

File: springfox-core/src/main/java/springfox/documentation/builders/ApiDescriptionBuilder.java
Patch:
@@ -37,9 +37,9 @@ public class ApiDescriptionBuilder {
   private String summary;
   private String description;
   private List<Operation> operations;
-  private Comparator<Operation> operationOrdering;
   private Boolean hidden;
   private Function<String, String> pathDecorator = identity();
+  private final Comparator<Operation> operationOrdering;
 
   public ApiDescriptionBuilder(Comparator<Operation> operationOrdering) {
     this.operationOrdering = operationOrdering;

File: springfox-core/src/main/java/springfox/documentation/builders/ApiInfoBuilder.java
Patch:
@@ -39,7 +39,7 @@ public class ApiInfoBuilder {
   private String license;
   private String licenseUrl;
   private String version;
-  private List<VendorExtension> vendorExtensions = new ArrayList<>();
+  private final List<VendorExtension> vendorExtensions = new ArrayList<>();
 
   /**
    * Updates the api title

File: springfox-core/src/main/java/springfox/documentation/builders/ApiListingBuilder.java
Patch:
@@ -54,7 +54,7 @@ public class ApiListingBuilder {
 
   private Set<String> produces = new TreeSet<>();
   private Set<String> consumes = new TreeSet<>();
-  private Set<String> protocol = new TreeSet<>();
+  private final Set<String> protocol = new TreeSet<>();
   private List<SecurityReference> securityReferences = new ArrayList<>();
   private List<ApiDescription> apis = new ArrayList<>();
 

File: springfox-core/src/main/java/springfox/documentation/builders/ElementFacetBuilder.java
Patch:
@@ -3,8 +3,6 @@
 import springfox.documentation.schema.ElementFacet;
 
 public interface ElementFacetBuilder {
-  <T> T yield(Class<T> parentClazz);
-
   ElementFacet build();
 
   ElementFacetBuilder copyOf(ElementFacet facet);

File: springfox-core/src/main/java/springfox/documentation/builders/PropertySpecificationBuilder.java
Patch:
@@ -67,7 +67,6 @@ public <T extends ElementFacetBuilder> T facetBuilder(Class<T> clazz) {
     this.facetBuilders.computeIfAbsent(
         clazz,
         builderFactory(
-            this,
             clazz));
     return (T) this.facetBuilders.get(clazz);
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/AbstractOperationParameterRequestConditionReader.java
Patch:
@@ -99,6 +99,7 @@ protected Set<RequestParameter> getRequestParameters(
       if (!isEmpty(paramValue)) {
         allowableValues = new AllowableListValues(singletonList(paramValue), "string");
       }
+      AllowableListValues finalAllowableValues = allowableValues;
       RequestParameter parameter = new RequestParameterBuilder()
           .name(expression.getName())
           .description(null)
@@ -108,9 +109,7 @@ protected Set<RequestParameter> getRequestParameters(
           .explode(false)
           .allowReserved(false)
           .defaultValue(paramValue)
-          .facetBuilder(EnumerationElementFacetBuilder.class)
-            .allowedValues(allowableValues)
-            .yield(SimpleParameterSpecificationBuilder.class)
+          .enumerationFacet(e -> e.allowedValues(finalAllowableValues))
           .model(new ModelSpecificationBuilder()
               .name(expression.getName())
               .scalarModel(ScalarType.STRING)

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/OasParameterBuilder.java
Patch:
@@ -74,8 +74,7 @@ public void apply(ParameterContext context) {
 
     context.requestParameterBuilder()
            .simpleParameterBuilder()
-           .facetBuilder(EnumerationElementFacetBuilder.class)
-           .allowedValues(allowedValues);
+           .enumerationFacet(e -> e.allowedValues(allowedValues));
     //TODO: Handle other facets
 
     if (parameterAnnotation.isPresent()) {

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/web/Swagger1Controller.java
Patch:
@@ -105,8 +105,9 @@ private ResponseEntity<Json> getSwaggerApiListing(
     }
     Map<String, List<springfox.documentation.service.ApiListing>> apiListingMap = documentation.getApiListings();
     Map<String, Collection<ApiListing>> dtoApiListings
-        = apiListingMap.entrySet().stream().map(toApiListingDto(servletRequest, documentation.getHost(), mapper))
-            .collect(toMap(Map.Entry::getKey, Map.Entry::getValue));
+        = apiListingMap.entrySet().stream()
+                       .map(toApiListingDto(servletRequest, documentation.getHost(), mapper))
+                       .collect(toMap(Map.Entry::getKey, Map.Entry::getValue));
 
     Collection<ApiListing> apiListings = dtoApiListings.get(apiDeclaration);
     return mergedApiListing(apiListings)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationDeprecatedReader.java
Patch:
@@ -37,8 +37,9 @@ public void apply(OperationContext context) {
     Optional<Deprecated> annotationOnMethod = context.findAnnotation(Deprecated.class);
     Optional<Deprecated> annotationOnController = context.findControllerAnnotation(Deprecated.class);
 
-    context.operationBuilder().deprecated(String.valueOf(annotationOnMethod.isPresent() ||
-                                                         annotationOnController.isPresent()));
+    boolean deprecated = annotationOnMethod.isPresent() ||
+                                           annotationOnController.isPresent();
+    context.operationBuilder().deprecated(deprecated ? "true" : null);
   }
 
   @Override

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterMultiplesReader.java
Patch:
@@ -43,8 +43,8 @@ public void apply(ParameterContext context) {
   }
 
   private boolean isCollectionType(ResolvedType parameterType) {
-    return isContainerType(parameterType) || Iterable.class.isAssignableFrom(parameterType
-    .getErasedType());
+    return isContainerType(parameterType) ||
+        Iterable.class.isAssignableFrom(parameterType.getErasedType());
   }
 
   @Override

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionReader.java
Patch:
@@ -43,7 +43,7 @@
 @Component
 public class ApiDescriptionReader {
 
-  private static Logger log = LoggerFactory.getLogger(ApiDescriptionReader.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(ApiDescriptionReader.class);
   private final OperationReader operationReader;
   private final DocumentationPluginsManager pluginsManager;
   private final ApiDescriptionLookup lookup;
@@ -84,7 +84,7 @@ public List<ApiDescription> read(RequestMappingContext outerContext) {
         }
       } catch (Error e) {
         String contentMsg = "Skipping process path[" + path + "], method[" + methodName + "] as it has an error.";
-        log.error(contentMsg, e);
+        LOGGER.error(contentMsg, e);
       }
     }
     return apiDescriptionList;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDocumentationScanner.java
Patch:
@@ -90,6 +90,7 @@ public Documentation scan(DocumentationContext context) {
             .collect(toList()))
         .securitySchemes(context.getSecuritySchemes())
         .info(context.getApiInfo())
+        .servers(context.getServers())
         .build();
     group.resourceListing(resourceListing);
     return group.build();

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/FeatureDemonstrationService.java
Patch:
@@ -271,7 +271,7 @@ public void updateSerializablePet(
 
   @GetMapping(value = "/inheritance")
   public List<Vehicle> findVehicles(@RequestParam("type") String type) {
-    return new ArrayList<Vehicle>();
+    return new ArrayList<>();
   }
 
   // tag::question-27[]
@@ -281,7 +281,7 @@ public List<Vehicle> findVehicles(@RequestParam("type") String type) {
   @ApiImplicitParams({
                          @ApiImplicitParam(
                              name = "contents",
-                             dataType = "CustomTypeFor2031",
+                             dataTypeClass = CustomTypeFor2031.class,
                              examples = @io.swagger.annotations.Example(
                                  value = {
                                      @ExampleProperty(value = "{'property': 'test'}", mediaType = "application/json")

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/ScalarModelToSchemaConverter.java
Patch:
@@ -15,7 +15,7 @@ public class ScalarModelToSchemaConverter implements Converter<ScalarModelSpecif
                 put(ScalarType.STRING, any -> new StringSchema());
                 put(ScalarType.BYTE, any -> new ByteArraySchema());
                 put(ScalarType.INTEGER, any -> new IntegerSchema());
-                put(ScalarType.LONG, any -> new IntegerSchema());
+                put(ScalarType.LONG, any -> new IntegerSchema().format("int64"));
                 put(ScalarType.BIGINTEGER, any -> new NumberSchema());
                 put(ScalarType.BIGDECIMAL, any -> new NumberSchema());
                 put(ScalarType.DOUBLE, any -> new NumberSchema());

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/SchemaMapper.java
Patch:
@@ -6,6 +6,8 @@
 import springfox.documentation.schema.ModelSpecification;
 import springfox.documentation.service.ModelNamesRegistry;
 
+import static springfox.documentation.builders.BuilderDefaults.*;
+
 @Mapper(componentModel = "spring")
 public class SchemaMapper {
   public Schema<?> mapFrom(
@@ -36,6 +38,7 @@ public Schema<?> mapFrom(
 
     if (schema == null) {
       schema = modelSpecification.getReference()
+          .filter(r -> emptyToNull(r.getKey().getQualifiedModelName().getName()) != null)
           .map(cm -> new ReferenceModelSpecificationToSchemaConverter(modelNamesRegistry).convert(cm))
           .orElse(null);
     }

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterNotBlankAnnotationPlugin.java
Patch:
@@ -50,6 +50,7 @@ public void apply(ParameterExpansionContext context) {
     if (notBlank.isPresent()) {
       LOG.debug("@NotBlank present: setting parameter as required and not allowing empty values");
       context.getParameterBuilder().required(true);
+      context.getRequestParameterBuilder().required(true);
     }
   }
 }

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterNotNullAnnotationPlugin.java
Patch:
@@ -50,6 +50,7 @@ public void apply(ParameterExpansionContext context) {
     if (notNull.isPresent()) {
       LOG.debug("Setting parameter to required because of @NotNull attribute");
       context.getParameterBuilder().required(true);
+      context.getRequestParameterBuilder().required(true);
     }
   }
 }

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/DecimalMinMaxAnnotationPlugin.java
Patch:
@@ -61,9 +61,9 @@ public void apply(ModelPropertyContext context) {
     Compatibility<AllowableValues, NumericElementFacet> values =
         facetFromDecimalMinMaxForNumbers(min, max);
     context.getBuilder().allowableValues(values.getLegacy().orElse(null));
-    context.getSpecificationBuilder()
+    values.getModern().ifPresent(facet -> context.getSpecificationBuilder()
         .facetBuilder(NumericElementFacetBuilder.class)
-        .copyOf(values.getModern().orElse(null));
+        .copyOf(facet));
 
   }
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/NotBlankAnnotationPlugin.java
Patch:
@@ -53,6 +53,7 @@ public void apply(ModelPropertyContext context) {
     Optional<NotBlank> notBlank = extractAnnotation(context);
     if (notBlank.isPresent()) {
       context.getBuilder().required(true);
+      context.getSpecificationBuilder().required(true);
     }
   }
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/NotNullAnnotationPlugin.java
Patch:
@@ -51,7 +51,8 @@ public boolean supports(DocumentationType delimiter) {
   public void apply(ModelPropertyContext context) {
     Optional<NotNull> notNull = extractAnnotation(context);
     if (notNull.isPresent()) {
-      context.getBuilder().required(notNull.isPresent());
+      context.getBuilder().required(true);
+      context.getSpecificationBuilder().required(true);
     }
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ApiParamParameterBuilder.java
Patch:
@@ -92,7 +92,7 @@ public void apply(ParameterContext context) {
       Example example = null;
       if (annotation.example().length() > 0) {
         example = new ExampleBuilder()
-            .withValue(annotation.example())
+            .value(annotation.example())
             .build();
       }
       context.parameterBuilder()
@@ -124,7 +124,7 @@ public void apply(ParameterContext context) {
               .orElse(null))
           .required(annotation.required())
           .hidden(annotation.hidden())
-          .order(SWAGGER_PLUGIN_ORDER)
+          .precedence(SWAGGER_PLUGIN_ORDER)
           .simpleParameterBuilder()
           .collectionFormat(CollectionFormat.convert(annotation.collectionFormat()).orElse(null))
           .defaultValue(

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/Examples.java
Patch:
@@ -43,7 +43,7 @@ public static Map<String, List<Example>> examples(io.swagger.annotations.Example
         examples.putIfAbsent(each.mediaType(), new LinkedList<>());
         examples.get(each.mediaType()).add(new ExampleBuilder()
             .withMediaType(each.mediaType())
-            .withValue(each.value())
+            .value(each.value())
             .build());
       }
     }
@@ -56,7 +56,7 @@ public static List<Example> allExamples(io.swagger.annotations.Example example)
       if (!isEmpty(each.value())) {
         examples.add(new ExampleBuilder()
             .withMediaType(each.mediaType())
-            .withValue(each.value())
+            .value(each.value())
             .build());
       }
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/AbstractOperationParameterRequestConditionReader.java
Patch:
@@ -107,7 +107,6 @@ protected Set<RequestParameter> getRequestParameters(
           .style(ParameterStyle.SIMPLE)
           .explode(false)
           .allowReserved(false)
-          .allowEmptyValue(false)
           .defaultValue(paramValue)
           .facetBuilder(EnumerationElementFacetBuilder.class)
             .allowedValues(allowableValues)
@@ -118,7 +117,7 @@ protected Set<RequestParameter> getRequestParameters(
               .build())
           .yield()
           .in(parameterType)
-          .order(DEFAULT_PRECEDENCE)
+          .precedence(DEFAULT_PRECEDENCE)
           .build();
       parameters.add(parameter);
     }

File: springfox-core/src/main/java/springfox/documentation/schema/EnumerationFacet.java
Patch:
@@ -5,6 +5,7 @@
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Comparator;
 import java.util.List;
 import java.util.Objects;
 import java.util.StringJoiner;
@@ -14,6 +15,7 @@ public class EnumerationFacet implements ElementFacet {
 
   public EnumerationFacet(Collection<String> allowedValues) {
     this.allowedValues.addAll(allowedValues);
+    this.allowedValues.sort(Comparator.naturalOrder());
   }
 
   public List<String> getAllowedValues() {

File: springfox-core/src/main/java/springfox/documentation/schema/ReferenceModelSpecification.java
Patch:
@@ -21,6 +21,7 @@ public boolean equals(Object o) {
     if (o == null || getClass() != o.getClass()) {
       return false;
     }
+
     ReferenceModelSpecification that = (ReferenceModelSpecification) o;
     return Objects.equals(modelKey, that.modelKey);
   }

File: springfox-core/src/main/java/springfox/documentation/service/ContentSpecification.java
Patch:
@@ -26,6 +26,7 @@ public ContentSpecification(
         .collect(Collectors.toMap(Representation::getMediaType, m -> m)));
   }
 
+  //TODO: Use collection here
   public SortedSet<Representation> getRepresentations() {
     TreeSet<Representation> representations = new TreeSet<>(Comparator.comparing(Representation::getMediaType));
     representations.addAll(this.representations.values());

File: springfox-core/src/main/java/springfox/documentation/service/Representation.java
Patch:
@@ -51,6 +51,6 @@ public boolean equals(Object o) {
 
   @Override
   public int hashCode() {
-    return Objects.hash(mediaType, model);
+    return Objects.hash(mediaType, model, encodings);
   }
 }

File: springfox-core/src/main/java/springfox/documentation/builders/ContentSpecificationBuilder.java
Patch:
@@ -23,7 +23,8 @@ public ContentSpecificationBuilder representations(Collection<Representation> re
     this.representations.putAll(representations.stream()
         .collect(Collectors.toMap(
             Representation::getMediaType,
-            r -> representationBuilderFor(r.getMediaType()).copyOf(r))));
+            r -> representationBuilderFor(r.getMediaType())
+                .copyOf(r))));
     return this;
   }
 

File: springfox-core/src/main/java/springfox/documentation/builders/CookieParameterSpecificationProvider.java
Patch:
@@ -23,7 +23,7 @@ public ParameterSpecification create(ParameterSpecificationContext context) {
           .copyOf(simpleParameter)
           .explode(simpleParameter.getExplode())
           .style(ParameterStyle.FORM)
-          .collectionFormat(simpleParameter.getExplode() != null && simpleParameter.getExplode()
+          .collectionFormat(simpleParameter.nullSafeIsExplode()
               ? CollectionFormat.MULTI
               : CollectionFormat.CSV)
           .build();

File: springfox-core/src/main/java/springfox/documentation/builders/EnumerationElementFacetBuilder.java
Patch:
@@ -37,6 +37,9 @@ public <T> T yield(Class<T> parentClazz) {
 
   @Override
   public EnumerationFacet build() {
+    if (allowedValues.isEmpty()) {
+      return null;
+    }
     return new EnumerationFacet(allowedValues);
   }
 

File: springfox-core/src/main/java/springfox/documentation/builders/ExampleBuilder.java
Patch:
@@ -12,7 +12,7 @@ public class ExampleBuilder {
   private String description;
   private String externalValue;
 
-  public ExampleBuilder withValue(Object value) {
+  public ExampleBuilder value(Object value) {
     this.value = value;
     return this;
   }

File: springfox-core/src/main/java/springfox/documentation/builders/RequestParameterBuilderValidator.java
Patch:
@@ -7,7 +7,6 @@ public class RequestParameterBuilderValidator implements Validator<RequestParame
   @Override
   public List<ValidationResult> validate(RequestParameterBuilder builder) {
     List<ValidationResult> results = new ArrayList<>();
-    boolean valid = true;
     if (builder.name == null) {
       results.add(
           new ValidationResult(
@@ -19,7 +18,7 @@ public List<ValidationResult> validate(RequestParameterBuilder builder) {
       results.add(new ValidationResult(
           "RequestParameter",
           "in",
-          String.format("Parameter %s in is required", builder.name)));
+          String.format("Parameter %s is required", builder.name)));
     }
     if (builder.simpleParameterBuilder != null && builder.contentSpecificationBuilder != null) {
       results.add(new ValidationResult(

File: springfox-core/src/main/java/springfox/documentation/builders/SimpleParameterSpecificationBuilder.java
Patch:
@@ -76,6 +76,7 @@ SimpleParameterSpecification build() {
     List<ElementFacet> facets = facetBuilders.values().stream()
         .filter(Objects::nonNull)
         .map(ElementFacetBuilder::build)
+        .filter(Objects::nonNull)
         .collect(Collectors.toList());
 
     return new SimpleParameterSpecification(

File: springfox-core/src/main/java/springfox/documentation/builders/StringElementFacetBuilder.java
Patch:
@@ -36,6 +36,9 @@ public <T> T yield(Class<T> parentClazz) {
 
   @Override
   public ElementFacet build() {
+    if (maxLength == null && minLength == null && pattern == null) {
+      return null;
+    }
     return new StringElementFacet(maxLength, minLength, pattern);
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/DefaultModelNamesRegistryFactory.java
Patch:
@@ -139,7 +139,8 @@ public Map<String, ModelSpecification> modelsByName() {
           .stream()
           .collect(Collectors.toMap(
               Map.Entry::getValue,
-              e -> modelRegistry.modelSpecificationFor(e.getKey())));
+              e -> modelRegistry.modelSpecificationFor(e.getKey()),
+              (ms1, ms2) -> ms1));
     }
 
     @Override

File: springfox-schema/src/main/java/springfox/documentation/schema/property/OptimizedModelPropertiesProvider.java
Patch:
@@ -433,6 +433,7 @@ private List<PropertySpecification> candidatePropertySpecifications(
         givenContext)) {
       givenContext.getEffectiveModelKeyBuilder()
                   .viewDiscriminator(givenContext.getView().orElse(null));
+      return properties;
     }
 
     if (member instanceof AnnotatedMethod) {

File: springfox-core/src/main/java/springfox/documentation/schema/PropertySpecification.java
Patch:
@@ -114,7 +114,7 @@ public Boolean getAllowEmptyValue() {
   }
 
   public Boolean getHidden() {
-    return isHidden;
+    return isHidden != null && isHidden;
   }
 
   public int getPosition() {

File: springfox-schema/src/main/java/springfox/documentation/schema/CachingModelProvider.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;
+import java.util.Set;
 import java.util.function.Function;
 
 import static java.util.Optional.*;
@@ -92,7 +93,7 @@ public Optional<ModelSpecification> modelSpecificationsFor(ModelContext modelCon
   }
 
   @Override
-  public Map<ResolvedType, ModelSpecification> modelDependenciesSpecifications(ModelContext modelContext) {
+  public Set<ModelSpecification> modelDependenciesSpecifications(ModelContext modelContext) {
     return specificationDelegate.modelDependenciesSpecifications(modelContext);
   }
 }

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelSpecificationProvider.java
Patch:
@@ -20,15 +20,15 @@
 package springfox.documentation.schema;
 
 
-import com.fasterxml.classmate.ResolvedType;
 import springfox.documentation.annotations.Cacheable;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 
 import java.util.Optional;
+import java.util.Set;
 
 public interface ModelSpecificationProvider {
   @Cacheable(value = "modelSpecifications")
   Optional<ModelSpecification> modelSpecificationsFor(ModelContext modelContext);
 
-  java.util.Map<ResolvedType, ModelSpecification> modelDependenciesSpecifications(ModelContext modelContext);
+  Set<ModelSpecification> modelDependenciesSpecifications(ModelContext modelContext);
 }

File: springfox-core/src/main/java/springfox/documentation/builders/CompoundModelSpecificationBuilder.java
Patch:
@@ -55,7 +55,7 @@ public CompoundModelSpecification build() {
         = this.properties.values().stream()
                          .map(PropertySpecificationBuilder::build)
                          .collect(Collectors.toList());
-    if (properties.size() > 0) {
+    if (modelKey != null) {
       return new CompoundModelSpecification(
           modelKey,
           effectiveModelKey,

File: springfox-core/src/main/java/springfox/documentation/builders/MultipartFormDataParameterSpecificationProvider.java
Patch:
@@ -71,7 +71,7 @@ public ParameterSpecification create(ParameterSpecificationContext context) {
             .encodings(null);
       }
     }
-//            });
+    
     return new ParameterSpecification(
         null,
         contentSpecificationBuilder.build());

File: springfox-core/src/main/java/springfox/documentation/schema/ModelKeyBuilder.java
Patch:
@@ -42,7 +42,7 @@ public ModelKey build() {
 
   public ModelKeyBuilder copyOf(ModelKey other) {
     return this.qualifiedModelName(other.getQualifiedModelName())
-        .viewDiscriminator(other.getViewDiscriminator())
+        .viewDiscriminator(other.getViewDiscriminator().orElse(null))
         .validationGroupDiscriminators(other.getValidationGroupDiscriminators())
         .isResponse(other.isResponse());
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/DefaultModelNamesRegistryFactory.java
Patch:
@@ -83,14 +83,13 @@ private void processKeys(ModelKey modelKey) {
         requestResponseSuffixes.computeIfAbsent(
             modelKey,
             k -> k.isResponse() ? "Res" : "Req");
-      } else if (modelKey.getViewDiscriminator().isPresent()){
+      } else if (modelKey.getViewDiscriminator().isPresent()) {
         requestResponseSuffixes.putIfAbsent(
             modelKey,
             "View");
       }
     }
 
-
     @Override
     public Map<String, ModelSpecification> modelsByName() {
       return modelKeyToName.entrySet()
@@ -104,6 +103,5 @@ public Map<String, ModelSpecification> modelsByName() {
     public Optional<String> nameByKey(ModelKey key) {
       return Optional.ofNullable(modelKeyToName.get(modelRegistry.effectiveModelKeyFor(key)));
     }
-
   }
 }

File: springfox-core/src/main/java/springfox/documentation/schema/ModelKey.java
Patch:
@@ -5,6 +5,7 @@
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Set;
 
 public class ModelKey {
@@ -28,8 +29,8 @@ public QualifiedModelName getQualifiedModelName() {
     return qualifiedModelName;
   }
 
-  public ResolvedType getViewDiscriminator() {
-    return viewDiscriminator;
+  public Optional<ResolvedType> getViewDiscriminator() {
+    return Optional.ofNullable(viewDiscriminator);
   }
 
   public Set<ResolvedType> getValidationGroupDiscriminators() {

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelDependencyProvider.java
Patch:
@@ -97,7 +97,7 @@ private Predicate<ResolvedType> ignorableTypes(final ModelContext modelContext)
 
 
   private Set<ResolvedType> resolvedDependencies(ModelContext modelContext) {
-    ResolvedType resolvedType = modelContext.alternateFor(modelContext.resolvedType(typeResolver));
+    ResolvedType resolvedType = modelContext.alternateEvaluatedType();
     if (isBaseType(ModelContext.fromParent(modelContext, resolvedType))) {
       LOG.debug("Marking base type {} as seen", resolvedType.getSignature());
       modelContext.seen(resolvedType);

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -76,7 +76,7 @@ public DefaultModelProvider(
 
   @Override
   public Optional<Model> modelFor(ModelContext modelContext) {
-    ResolvedType propertiesHost = modelContext.alternateFor(modelContext.resolvedType(resolver));
+    ResolvedType propertiesHost = modelContext.alternateEvaluatedType();
 
     if (isContainerType(propertiesHost)
         || isMapType(propertiesHost)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiModelReader.java
Patch:
@@ -428,7 +428,7 @@ private Set<ComparisonCondition> mergeConditions(
   private List<String> findBranchRoots(ModelContext rootContext) {
     List<String> roots = new ArrayList<>();
 
-    ResolvedType resolvedType = rootContext.alternateFor(rootContext.getType());
+    ResolvedType resolvedType = rootContext.alternateEvaluatedType();
     if (resolvedType.isArray()) {
       ResolvedType elementType = resolvedType.getArrayElementType();
       roots.addAll(findBranchRoots(ModelContext.fromParent(rootContext, elementType)));

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/ServiceModelToOasMapper.java
Patch:
@@ -91,8 +91,8 @@ public abstract class ServiceModelToOasMapper {
   abstract Operation mapOperation(springfox.documentation.service.Operation from);
 
   @Mappings({
-      @Mapping(target = "schema", source = "parameterSpecification.left"),
-      @Mapping(target = "content", source = "parameterSpecification.right"),
+      @Mapping(target = "schema", source = "parameterSpecification.query"),
+      @Mapping(target = "content", source = "parameterSpecification.content"),
       @Mapping(target = "example", ignore = true),
       @Mapping(target = "$ref", ignore = true)
   })

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ApiParamParameterBuilder.java
Patch:
@@ -132,7 +132,8 @@ public void apply(ParameterContext context) {
                   ? null
                   : annotation.defaultValue())
           .allowEmptyValue(annotation.allowEmptyValue())
-          .scalarExample(example)
+          .yield()
+          .example(example)
           .examples(allExamples(annotation.examples()));
     }
   }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -223,7 +223,7 @@ public DocumentationContextBuilder rules(List<AlternateTypeRule> rules) {
    * Used to populate the defaults
    *
    * @param defaultResponseMessages
-   * @return
+   * @return DocumentationContextBuilder
    * @deprecated @since 3.1.0
    * Use {@link DocumentationContextBuilder#defaultResponses} instead
    */

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationContext.java
Patch:
@@ -90,7 +90,7 @@ public List<ResponseMessage> getGlobalResponseMessages(String forHttpMethod) {
   /**
    * Use @see {@link OperationContext#getRequestParameters()} instead
    * @deprecated @since 3.0
-   * @return
+   * @return List<Parameter>
    */
   @Deprecated
   public List<Parameter> getGlobalOperationParameters() {

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/ServiceModelToOasMapper.java
Patch:
@@ -43,7 +43,7 @@
 import springfox.documentation.service.ApiListing;
 import springfox.documentation.service.ContentSpecification;
 import springfox.documentation.service.Documentation;
-import springfox.documentation.service.MediaType;
+import springfox.documentation.service.Representation;
 import springfox.documentation.service.RequestBody;
 import springfox.documentation.service.SimpleParameterSpecification;
 
@@ -152,7 +152,7 @@ private PathItem mapOperations(
 
   abstract PathItem.HttpMethod mapHttpMethod(HttpMethod method);
 
-  static Content map(SortedSet<MediaType> value) {
+  static Content map(SortedSet<Representation> value) {
     //TODO: Implement this mapping
     return new Content();
   }

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/VendorExtensionsMapper.java
Patch:
@@ -24,8 +24,8 @@
 import springfox.documentation.service.StringVendorExtension;
 import springfox.documentation.service.VendorExtension;
 
+import java.util.Collection;
 import java.util.HashMap;
-import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
 import java.util.function.Function;
@@ -36,7 +36,7 @@
 @Mapper(componentModel = "spring")
 public class VendorExtensionsMapper {
 
-  public Map<String, Object> mapExtensions(List<VendorExtension> from) {
+  public Map<String, Object> mapExtensions(Collection<VendorExtension> from) {
     Map<String, Object> extensions = new TreeMap<>();
     Iterable<ListVendorExtension> listExtensions = from.stream()
         .filter(ListVendorExtension.class::isInstance)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -126,7 +126,8 @@ private void applyReturnTypeOverride(OperationContext context) {
                       mediaType,
                       modelSpecifications.create(modelContext, returnType),
                       new ArrayList<>(),
-                      encodings, new ArrayList<>())));
+                      new ArrayList<>(),
+                      new ArrayList<>())));
     }
     ResponseMessage built = new ResponseMessageBuilder()
         .code(httpStatusCode)

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/Bug2219ListingScanner.java
Patch:
@@ -37,11 +37,12 @@ public class Bug2219ListingScanner implements ApiListingScannerPlugin {
 
   @Override
   public List<ApiDescription> apply(DocumentationContext context) {
-    return new ArrayList<ApiDescription>(
+    return new ArrayList<>(
         Arrays.asList(
             new ApiDescription(
                 "different-group",
                 "/bugs/2219",
+                "This is a bug summary",
                 "This is a bug-fix for 2219",
                 Arrays.asList(
                     new OperationBuilder(

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/Bug1767ListingScanner.java
Patch:
@@ -60,6 +60,7 @@ public List<ApiDescription> apply(DocumentationContext context) {
             new ApiDescription(
                 "test",
                 "/bugs/1767",
+                "This is a bug summary",
                 "This is a bug",
                Collections.singletonList( //<2>
                   new OperationBuilder(operationNames)
@@ -87,6 +88,7 @@ public List<ApiDescription> apply(DocumentationContext context) {
                            "different-group",
                            //<8>
                            "/different/2219",
+                           "This is a bug summary",
                            "This is a bug",
                            Collections.singletonList(
                                new OperationBuilder(

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -126,7 +126,7 @@ private void applyReturnTypeOverride(OperationContext context) {
                       mediaType,
                       modelSpecifications.create(modelContext, returnType),
                       new ArrayList<>(),
-                      new ArrayList<>())));
+                      encodings, new ArrayList<>())));
     }
     ResponseMessage built = new ResponseMessageBuilder()
         .code(httpStatusCode)

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerResponseMessageReader.java
Patch:
@@ -183,7 +183,7 @@ protected Compatibility<Set<ResponseMessage>, Set<Response>> read(OperationConte
                           finalType.map(t -> modelSpecifications.create(modelContext, t))
                               .orElse(null),
                           new ArrayList<>(),
-                          new ArrayList<>())));
+                          encodings, new ArrayList<>())));
           responseContext.responseBuilder()
               .mediaTypes(mediaTypes)
               .examples(examples)
@@ -235,7 +235,7 @@ protected Compatibility<Set<ResponseMessage>, Set<Response>> read(OperationConte
                       mediaType,
                       modelSpecifications.create(modelContext, resolvedType),
                       new ArrayList<>(),
-                      new ArrayList<>())));
+                      encodings, new ArrayList<>())));
 
       responseContext.responseBuilder()
           .mediaTypes(mediaTypes)

File: springfox-oas/src/main/java/springfox/documentation/oas/mappers/ReferenceModelSpecificationToSchemaConverter.java
Patch:
@@ -11,7 +11,7 @@ public Schema<?> convert(ReferenceModelSpecification source) {
         ObjectSchema objectSchema = new ObjectSchema();
         if (!source.getKey().getName().equals(Object.class.getSimpleName()) &&
                 !source.getKey().getNamespace().equals(Object.class.getPackage().getName())) {
-            objectSchema.$ref(source.getKey().getName());
+            return objectSchema.$ref(source.getKey().getName());
         }
         return objectSchema;
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/SpringfoxWebConfiguration.java
Patch:
@@ -51,6 +51,7 @@
     ApiListingBuilderPlugin.class,
     OperationBuilderPlugin.class,
     ParameterBuilderPlugin.class,
+    ResponseBuilderPlugin.class,
     ExpandedParameterBuilderPlugin.class,
     ResourceGroupingStrategy.class,
     OperationModelsProviderPlugin.class,

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DefaultConfiguration.java
Patch:
@@ -51,6 +51,7 @@ public DocumentationContextBuilder create(DocumentationType documentationType) {
         .additionalIgnorableTypes(defaults.defaultIgnorableParameterTypes())
         .rules(defaults.defaultRules(typeResolver))
         .defaultResponseMessages(defaults.defaultResponseMessages())
+        .defaultResponses(defaults.defaultResponses())
         .pathProvider(pathProvider)
         .typeResolver(typeResolver)
         .enableUrlTemplating(false)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -122,7 +122,7 @@ private List<Compatibility<Parameter, RequestParameter>> readParameters(final Op
 
   private Predicate<Compatibility<Parameter, RequestParameter>> hiddenParameter() {
     return c -> c.getLegacy()
-        .map(p -> p.isHidden())
+        .map(Parameter::isHidden)
         .orElse(false);
   }
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/PathContext.java
Patch:
@@ -29,7 +29,6 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Optional;
-import java.util.Set;
 
 
 @Incubating("2.1.0")

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/QueryStringUriTemplateDecorator.java
Patch:
@@ -37,6 +37,7 @@
 import static java.util.stream.Collectors.*;
 import static org.springframework.util.StringUtils.*;
 
+//TODO: Modernize this class
 @Component
 @Order(value = Ordered.HIGHEST_PRECEDENCE + 60)
 class QueryStringUriTemplateDecorator implements PathDecorator {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDataTypeReader.java
Patch:
@@ -146,7 +146,7 @@ public void apply(ParameterContext context) {
                 enumTypeDeterminer,
                 nameExtractor).apply(parameterType)));
     context.requestParameterBuilder()
-        .simpleParameterBuilder()
+        .simpleParameterBuilder() //TODO: check this is correct
         .build();
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDefaultReader.java
Patch:
@@ -50,6 +50,9 @@ public void apply(ParameterContext context) {
     boolean isSkip = ValueConstants.DEFAULT_NONE.equals(defaultValue);
     if (!isSkip) {
       context.parameterBuilder().defaultValue(defaultValue);
+      context.requestParameterBuilder()
+          .simpleParameterBuilder()
+          .defaultValue(defaultValue);
     }
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterNameReader.java
Patch:
@@ -53,6 +53,9 @@ public void apply(ParameterContext context) {
     context.parameterBuilder()
         .name(name)
         .description(name);
+    context.requestParameterBuilder()
+        .name(name)
+        .description(name);
   }
 
   @Override

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterRequiredReader.java
Patch:
@@ -65,6 +65,8 @@ public void apply(ParameterContext context) {
     ResolvedMethodParameter methodParameter = context.resolvedMethodParameter();
     context.parameterBuilder()
         .required(isRequired(context.getOperationContext(), methodParameter));
+    context.requestParameterBuilder()
+        .required(isRequired(context.getOperationContext(), methodParameter));
   }
 
   @Override

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterTypeReader.java
Patch:
@@ -48,6 +48,7 @@ public class ParameterTypeReader implements ParameterBuilderPlugin {
   @Override
   public void apply(ParameterContext context) {
     context.parameterBuilder().parameterType(findParameterType(context));
+    context.requestParameterBuilder().in(findParameterType(context));
   }
 
   @Override

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/readers/parameter/ParameterNameReader.java
Patch:
@@ -46,6 +46,7 @@ public void apply(ParameterContext context) {
       name = ofNullable(apiParam.get().name()).filter(((Predicate<String>) String::isEmpty).negate()).orElse(null);
     }
     context.parameterBuilder().name(maybeOverrideName(name, paramType));
+    context.requestParameterBuilder().name(maybeOverrideName(name, paramType));
   }
 
   private String maybeOverrideName(String parameterName, String paramType) {

File: springfox-core/src/main/java/springfox/documentation/service/Parameter.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.StringJoiner;
 
 /**
- * @deprecated @since 3.0.0 Use @see
+ * @deprecated @since 3.0.0 Use @see {@link RequestParameter}, {@link RequestBody}
  */
 @Deprecated
 public class Parameter implements Ordered {

File: swagger-contract-tests-webflux/src/main/java/springfox/test/contract/swagger/SwaggerWebfluxApplication.java
Patch:
@@ -24,8 +24,8 @@
 
 @SpringBootApplication
 @SuppressWarnings("HideUtilityClassConstructor")
-public class SwaggerApplication {
+public class SwaggerWebfluxApplication {
   public static void main(String[] args) {
-    SpringApplication.run(SwaggerApplication.class, args);
+    SpringApplication.run(SwaggerWebfluxApplication.class, args);
   }
 }

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelSpecificationProvider.java
Patch:
@@ -172,14 +172,14 @@ private Optional<ModelSpecification> mapModel(
                                String.format(
                                    "%s_%s",
                                    mapContext.getParameterId(),
-                                   "String"))
+                                  typeNameExtractor.typeName(mapContext)))
                                .withScalar(new ScalarModelSpecification(ScalarType.STRING))
                               .build(),
                        new ModelSpecificationBuilder(
                            String.format(
                                "%s_%s",
                                mapContext.getParameterId(),
-                               "String"))
+                               typeNameExtractor.typeName(mapContext)))
                            .withReference(new ReferenceModelSpecification(
                                new ModelKey("", simpleQualifiedTypeName(valueType),
                                             mapContext.isReturnType())))

File: springfox-schema/src/main/java/springfox/documentation/schema/property/OptimizedModelPropertiesProvider.java
Patch:
@@ -602,7 +602,7 @@ private PropertySpecification fieldModelPropertySpecification(
             String.format(
                 "%s_%s",
                 modelContext.getParameterId(),
-                "String"))
+                typeNameExtractor.typeName(modelContext)))
                       .withScalar(scalar.map(ScalarModelSpecification::new)
                                         .orElse(null))
                       .withReference(reference)
@@ -739,7 +739,7 @@ private PropertySpecification beanModelPropertySpecification(
             String.format(
                 "%s_%s",
                 modelContext.getParameterId(),
-                "String"))
+                typeNameExtractor.typeName(modelContext)))
                       .withScalar(scalar.map(ScalarModelSpecification::new)
                                         .orElse(null))
                       .withReference(reference)
@@ -855,7 +855,7 @@ private PropertySpecification paramModelPropertySpecification(
             String.format(
                 "%s_%s",
                 modelContext.getParameterId(),
-                "String"))
+                typeNameExtractor.typeName(modelContext)))
                       .withScalar(scalar.map(ScalarModelSpecification::new)
                                         .orElse(null))
                       .withReference(reference)

File: springfox-core/src/main/java/springfox/documentation/schema/MapSpecification.java
Patch:
@@ -4,7 +4,6 @@ public class MapSpecification {
   private final ModelSpecification key;
   private final ModelSpecification value;
 
-
   public MapSpecification(
       ModelSpecification key,
       ModelSpecification value) {

File: springfox-core/src/main/java/springfox/documentation/builders/PropertySpecificationBuilder.java
Patch:
@@ -24,7 +24,7 @@ public class PropertySpecificationBuilder {
   private Object example;
   private Object defaultValue;
   private Xml xml;
-  private List<VendorExtension> vendorExtensions;
+  private List<VendorExtension<?>> vendorExtensions;
 
   public PropertySpecificationBuilder withName(String name) {
     this.name = name;
@@ -101,7 +101,7 @@ public PropertySpecificationBuilder withXml(Xml xml) {
     return this;
   }
 
-  public PropertySpecificationBuilder withVendorExtensions(List<VendorExtension> vendorExtensions) {
+  public PropertySpecificationBuilder withVendorExtensions(List<VendorExtension<?>> vendorExtensions) {
     this.vendorExtensions = vendorExtensions;
     return this;
   }

File: springfox-core/src/main/java/springfox/documentation/schema/PropertySpecification.java
Patch:
@@ -27,7 +27,7 @@ public class PropertySpecification {
   private final Object defaultValue;
 
   private final Xml xml;
-  private final List<VendorExtension> vendorExtensions = new ArrayList<>();
+  private final List<VendorExtension<?>> vendorExtensions = new ArrayList<>();
 
   @SuppressWarnings("ParameterNumber")
   public PropertySpecification(
@@ -46,7 +46,7 @@ public PropertySpecification(
       Object example,
       Object defaultValue,
       Xml xml,
-      List<VendorExtension> vendorExtensions) {
+      List<VendorExtension<?>> vendorExtensions) {
     this.name = name;
     this.description = description;
     this.type = type;
@@ -132,7 +132,7 @@ public Xml getXml() {
     return xml;
   }
 
-  public List<VendorExtension> getVendorExtensions() {
+  public List<VendorExtension<?>> getVendorExtensions() {
     return vendorExtensions;
   }
 }

File: springfox-schema/src/main/java/springfox/documentation/schema/JacksonJsonViewProvider.java
Patch:
@@ -87,7 +87,7 @@ private Optional<ResolvedType> viewFor(
       Optional<JsonView> annotation) {
     Optional<ResolvedType> view = Optional.empty();
     if (annotation.isPresent()) {
-      Class<?>[] views = ((JsonView) (annotation.get())).value();
+      Class<?>[] views = annotation.get().value();
       view = Optional.of(typeResolver.resolve(views[0]));
       LOG.debug(
           "Found view {} for type {}",

File: springfox-core/src/main/java/springfox/documentation/schema/ModelSpecification.java
Patch:
@@ -25,6 +25,7 @@ public ModelSpecification(
       MapSpecification map,
       ReferenceModelSpecification reference) {
     this.sourceIdentifier = sourceIdentifier;
+    this.name = name;
     ensureValidSpecification(scalar, compound, reference, collection, map);
     this.collection = collection;
     this.facets = facets;

File: springfox-spi/src/main/java/springfox/documentation/spi/DocumentationType.java
Patch:
@@ -25,6 +25,7 @@
 public class DocumentationType extends SimplePluginMetadata {
   public static final DocumentationType SWAGGER_12 = new DocumentationType("swagger", "1.2");
   public static final DocumentationType SWAGGER_2 = new DocumentationType("swagger", "2.0");
+  public static final DocumentationType OAS_30 = new DocumentationType("openApi", "3.0");
   public static final DocumentationType SPRING_WEB = new DocumentationType("spring-web", "1.0");
   private final MediaType mediaType;
 

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterBuilder.java
Patch:
@@ -320,7 +320,7 @@ public ParameterBuilder explode(Boolean explode) {
   /**
    * @since 3.0.0
    * @param allowReserved Determines whether the parameter value SHOULD allow reserved characters, as defined
-   *                     by RFC3986 :/?#[]@!$&'()*+,;= to be included without percent-encoding. This property
+   *                     by RFC3986 :/?#[]@!$&amp;'()*+,;= to be included without percent-encoding. This property
    *                      only applies to parameters with an in value of query. The default value is false.
    * @return this
    */

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterBuilder.java
Patch:
@@ -34,7 +34,6 @@
 import java.util.List;
 import java.util.Map;
 
-import static java.util.Optional.*;
 import static springfox.documentation.builders.BuilderDefaults.*;
 
 public class ParameterBuilder {
@@ -287,7 +286,7 @@ public Parameter build() {
         allowMultiple,
         allowEmptyValue,
         modelRef,
-        ofNullable(type),
+        type,
         allowableValues,
         paramType,
         paramAccess,

File: springfox-core/src/main/java/springfox/documentation/service/Parameter.java
Patch:
@@ -37,7 +37,7 @@ public class Parameter implements Ordered {
   private final Boolean required;
   private final Boolean allowMultiple;
   private final ModelReference modelRef;
-  private final Optional<ResolvedType> type;
+  private final ResolvedType type;
   private final AllowableValues allowableValues;
   private final String paramType;
   private final String paramAccess;
@@ -59,7 +59,7 @@ public Parameter(
       boolean allowMultiple,
       Boolean allowEmptyValue,
       ModelReference modelRef,
-      Optional<ResolvedType> type,
+      ResolvedType type,
       AllowableValues allowableValues,
       String paramType,
       String paramAccess,

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/FeatureDemonstrationService.java
Patch:
@@ -298,7 +298,7 @@ public void setProperty(String property) {
                       value =  {
                         @ExampleProperty(
                           mediaType = "Example json",
-                          value = "{\"invalidField\": \"address\"}"),
+                          value = "{'invalidField': 'address'}"),
                         @ExampleProperty(
                           mediaType = "Example string",
                           value = "The first name was invalid")}))})

File: springfox-spring-integration/src/main/java/springfox/documentation/spring/web/plugins/SpringIntegrationParametersProvider.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
-import io.github.classgraph.utils.ReflectionUtils;
+import nonapi.io.github.classgraph.utils.ReflectionUtils;
 import org.springframework.core.ResolvableType;
 import org.springframework.expression.Expression;
 import org.springframework.expression.spel.SpelNode;

File: springfox-core/src/main/java/springfox/documentation/schema/ModelRef.java
Patch:
@@ -183,6 +183,8 @@ public boolean equals(Object o) {
         && Objects.equals(
         allowableValues,
         that.allowableValues)
-        && modelId.isPresent() == that.modelId.isPresent();
+        && Objects.equals(
+        modelId,
+        that.modelId);
   }
 }

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelReferenceProvider.java
Patch:
@@ -119,6 +119,6 @@ private String modelId(ModelContext context) {
         || enumTypeDeterminer.isEnum(type.getErasedType())) {
       return null;
     }
-    return context.getTypeId();
+    return context.getModelId();
   }
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -46,7 +46,6 @@
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
-import java.util.TreeMap;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 
@@ -127,7 +126,7 @@ public Map<String, List<ApiListing>> scan(ApiListingScanningContext context) {
 
     List<SecurityReference> securityReferences = new ArrayList<>();
 
-    Map<String, Set<Model>> globalModelMap = new TreeMap<>();
+    Map<String, Set<Model>> globalModelMap = new HashMap<>();
     for (final ResourceGroup resourceGroup : sortedByName(allResourceGroups)) {
 
       DocumentationContext documentationContext = context.getDocumentationContext();
@@ -150,7 +149,7 @@ public Map<String, List<ApiListing>> scan(ApiListingScanningContext context) {
           }
         });
         globalModelMap.putAll(currentModelMap);
-        apiDescriptions.addAll(apiDescriptionReader.read(each.withKnownModels(globalModelMap)));
+        apiDescriptions.addAll(apiDescriptionReader.read(each.withKnownModels(currentModelMap)));
       }
 
       List<ApiDescription> additional = additionalListings.stream()

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiModelReader.java
Patch:
@@ -291,7 +291,7 @@ private Set<String> findSameModels(
       for (ModelReference modelReference : rootModel.getSubTypes()) {
         Optional<String> modelId = getModelId(modelReference);
 
-        if (modelId.isPresent()) {
+        if (modelId.isPresent() && mergingContext.containsModel(modelId.get())) {
           String sModelId = modelId.get();
           ModelContext modelContext = Optional.ofNullable(parametersMatching.get(sModelId))
               .map(op -> op.orElseGet(() -> parameter))
@@ -311,7 +311,7 @@ private Set<String> findSameModels(
         ModelReference modelReference = property.getModelRef();
         Optional<String> modelId = getModelId(modelReference);
 
-        if (modelId.isPresent()) {
+        if (modelId.isPresent() && mergingContext.containsModel(modelId.get())) {
           String sModelId = modelId.get();
           ModelContext modelContext = Optional.ofNullable(parametersMatching.get(sModelId))
               .map(op -> op.orElseGet(() -> parameter))

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelReferenceProvider.java
Patch:
@@ -24,7 +24,7 @@
 import springfox.documentation.spi.schema.EnumTypeDeterminer;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 
-import java.util.HashMap;
+import java.util.Collections;
 import java.util.Map;
 import java.util.Optional;
 import java.util.function.Function;
@@ -50,7 +50,7 @@ class ModelReferenceProvider implements Function<ResolvedType, ModelReference> {
     this.typeNameExtractor = typeNameExtractor;
     this.enumTypeDeterminer = enumTypeDeterminer;
     this.parentContext = parentContext;
-    this.knownNames = new HashMap<>(knownNames);
+    this.knownNames = Collections.unmodifiableMap(knownNames);
   }
 
   @Override

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/schema/ResourcesModelProvider.java
Patch:
@@ -20,8 +20,8 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
+import org.springframework.hateoas.CollectionModel;
 import org.springframework.hateoas.Link;
-import org.springframework.hateoas.Resources;
 import springfox.documentation.builders.ModelPropertyBuilder;
 import springfox.documentation.schema.Model;
 import springfox.documentation.schema.ModelProperty;
@@ -139,7 +139,7 @@ public Set<ResolvedType> dependencies(ModelContext context) {
 
   @Override
   public boolean supports(ModelContext delimiter) {
-    return Resources.class.equals(resourceType(delimiter.getType()).getErasedType())
+    return CollectionModel.class.equals(resourceType(delimiter.getType()).getErasedType())
         && delimiter.getDocumentationType() == DocumentationType.SWAGGER_2;
   }
 

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/schema/SpringDataRestSchemaExtensions.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.hateoas.RelProvider;
+import org.springframework.hateoas.server.LinkRelationProvider;
 import springfox.documentation.schema.TypeNameExtractor;
 import springfox.documentation.spi.schema.EnumTypeDeterminer;
 
@@ -41,7 +41,7 @@ public ResourcesModelProvider resourcesModelProvider(
   public EmbeddedCollectionModelProvider embeddedCollectionProvider(
       TypeResolver resolver,
       @Qualifier("_relProvider")
-          RelProvider relProvider,
+          LinkRelationProvider relProvider,
       TypeNameExtractor typeNameExtractor,
       EnumTypeDeterminer enumTypeDeterminer) {
     return new EmbeddedCollectionModelProvider(resolver, relProvider, typeNameExtractor, enumTypeDeterminer);

File: springfox-schema/src/main/java/springfox/documentation/schema/TypeNameExtractor.java
Patch:
@@ -191,7 +191,7 @@ private String modelName(
     if (!isMapType(asResolved(context.getType())) && knownNames.containsKey(context.getTypeId())) {
       return knownNames.get(context.getTypeId());
     }
-    TypeNameProviderPlugin selected = typeNameProviders.getPluginFor(
+    TypeNameProviderPlugin selected = typeNameProviders.getPluginOrDefaultFor(
         context.getDocumentationType(),
         new DefaultTypeNameProvider());
     String modelName = selected.nameFor(((ResolvedType) context.getType()).getErasedType());

File: springfox-schema/src/test/java/springfox/documentation/schema/SimpleTypeEntityModel.java
Patch:
@@ -19,10 +19,10 @@
 package springfox.documentation.schema;
 
 import org.springframework.hateoas.Link;
-import org.springframework.hateoas.Resource;
+import org.springframework.hateoas.EntityModel;
 
-public class SimpleTypeResource extends Resource<SimpleType> {
-  public SimpleTypeResource(SimpleType content, Link... links) {
+public class SimpleTypeEntityModel extends EntityModel<SimpleType> {
+  public SimpleTypeEntityModel(SimpleType content, Link... links) {
     super(content, links);
   }
 }

File: springfox-schema/src/test/java/springfox/documentation/schema/SubclassOfRepresentationModel.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.documentation.schema;
 
-import org.springframework.hateoas.ResourceSupport;
+import org.springframework.hateoas.RepresentationModel;
 
-public class SubclassOfResourceSupport extends ResourceSupport {
+public class SubclassOfRepresentationModel extends RepresentationModel {
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -141,7 +141,7 @@ public Set<ModelContext> modelContexts(RequestMappingContext context) {
   }
 
   public ResourceGroupingStrategy resourceGroupingStrategy(DocumentationType documentationType) {
-    return resourceGroupingStrategies.getPluginFor(documentationType, new SpringGroupingStrategy());
+    return resourceGroupingStrategies.getPluginOrDefaultFor(documentationType, new SpringGroupingStrategy());
   }
 
   private DocumentationPlugin defaultDocumentationPlugin() {
@@ -151,7 +151,7 @@ private DocumentationPlugin defaultDocumentationPlugin() {
   public DocumentationContextBuilder createContextBuilder(
       DocumentationType documentationType,
       DefaultsProviderPlugin defaultConfiguration) {
-    return defaultsProviders.getPluginFor(documentationType, defaultConfiguration)
+    return defaultsProviders.getPluginOrDefaultFor(documentationType, defaultConfiguration)
         .create(documentationType)
         .withResourceGroupingStrategy(resourceGroupingStrategy(documentationType));
   }

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/AbstractController.java
Patch:
@@ -21,14 +21,14 @@
 
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import org.springframework.hateoas.ResourceSupport;
+import org.springframework.hateoas.RepresentationModel;
 import org.springframework.http.HttpEntity;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 
-public abstract class AbstractController<T extends ResourceSupport, ID> {
+public abstract class AbstractController<T extends RepresentationModel, ID> {
 
   @RequestMapping(value = "/create-t", method = RequestMethod.PUT)
   public void create(@RequestBody T toCreate) {

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/BugsController.java
Patch:
@@ -33,7 +33,7 @@
 import io.swagger.annotations.ApiResponses;
 import io.swagger.annotations.Authorization;
 import io.swagger.annotations.AuthorizationScope;
-import org.springframework.hateoas.Resource;
+import org.springframework.hateoas.EntityModel;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -125,8 +125,8 @@ public String issue1420() {
   }
 
   @RequestMapping(value = "1440", method = GET)
-  public Resource<String> issue1440() {
-    return new Resource<String>("1420");
+  public EntityModel<String> issue1440() {
+    return new EntityModel<String>("1420");
   }
 
   @RequestMapping(value = "1475", method = GET)

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/ConcreteController.java
Patch:
@@ -19,12 +19,12 @@
 
 package springfox.documentation.spring.web.dummy.controllers;
 
-import org.springframework.hateoas.Resource;
+import org.springframework.hateoas.EntityModel;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import springfox.documentation.spring.web.dummy.models.Pet;
 
 @Controller
 @RequestMapping("/foo")
-public class ConcreteController extends AbstractController<Resource<Pet>, String> {
+public class ConcreteController extends AbstractController<EntityModel<Pet>, String> {
 }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/schema/ResourcesModelProvider.java
Patch:
@@ -20,8 +20,8 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
+import org.springframework.hateoas.CollectionModel;
 import org.springframework.hateoas.Link;
-import org.springframework.hateoas.Resources;
 import springfox.documentation.builders.ModelPropertyBuilder;
 import springfox.documentation.schema.Model;
 import springfox.documentation.schema.ModelProperty;
@@ -139,7 +139,7 @@ public Set<ResolvedType> dependencies(ModelContext context) {
 
   @Override
   public boolean supports(ModelContext delimiter) {
-    return Resources.class.equals(resourceType(delimiter.getType()).getErasedType())
+    return CollectionModel.class.equals(resourceType(delimiter.getType()).getErasedType())
         && delimiter.getDocumentationType() == DocumentationType.SWAGGER_2;
   }
 

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/schema/SpringDataRestSchemaExtensions.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.hateoas.RelProvider;
+import org.springframework.hateoas.server.LinkRelationProvider;
 import springfox.documentation.schema.TypeNameExtractor;
 import springfox.documentation.spi.schema.EnumTypeDeterminer;
 
@@ -41,7 +41,7 @@ public ResourcesModelProvider resourcesModelProvider(
   public EmbeddedCollectionModelProvider embeddedCollectionProvider(
       TypeResolver resolver,
       @Qualifier("_relProvider")
-          RelProvider relProvider,
+          LinkRelationProvider relProvider,
       TypeNameExtractor typeNameExtractor,
       EnumTypeDeterminer enumTypeDeterminer) {
     return new EmbeddedCollectionModelProvider(resolver, relProvider, typeNameExtractor, enumTypeDeterminer);

File: springfox-schema/src/main/java/springfox/documentation/schema/TypeNameExtractor.java
Patch:
@@ -191,7 +191,7 @@ private String modelName(
     if (!isMapType(asResolved(context.getType())) && knownNames.containsKey(context.getTypeId())) {
       return knownNames.get(context.getTypeId());
     }
-    TypeNameProviderPlugin selected = typeNameProviders.getPluginFor(
+    TypeNameProviderPlugin selected = typeNameProviders.getPluginOrDefaultFor(
         context.getDocumentationType(),
         new DefaultTypeNameProvider());
     String modelName = selected.nameFor(((ResolvedType) context.getType()).getErasedType());

File: springfox-schema/src/test/java/springfox/documentation/schema/SimpleTypeEntityModel.java
Patch:
@@ -19,10 +19,10 @@
 package springfox.documentation.schema;
 
 import org.springframework.hateoas.Link;
-import org.springframework.hateoas.Resource;
+import org.springframework.hateoas.EntityModel;
 
-public class SimpleTypeResource extends Resource<SimpleType> {
-  public SimpleTypeResource(SimpleType content, Link... links) {
+public class SimpleTypeEntityModel extends EntityModel<SimpleType> {
+  public SimpleTypeEntityModel(SimpleType content, Link... links) {
     super(content, links);
   }
 }

File: springfox-schema/src/test/java/springfox/documentation/schema/SubclassOfRepresentationModel.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.documentation.schema;
 
-import org.springframework.hateoas.ResourceSupport;
+import org.springframework.hateoas.RepresentationModel;
 
-public class SubclassOfResourceSupport extends ResourceSupport {
+public class SubclassOfRepresentationModel extends RepresentationModel {
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -141,7 +141,7 @@ public Set<ModelContext> modelContexts(RequestMappingContext context) {
   }
 
   public ResourceGroupingStrategy resourceGroupingStrategy(DocumentationType documentationType) {
-    return resourceGroupingStrategies.getPluginFor(documentationType, new SpringGroupingStrategy());
+    return resourceGroupingStrategies.getPluginOrDefaultFor(documentationType, new SpringGroupingStrategy());
   }
 
   private DocumentationPlugin defaultDocumentationPlugin() {
@@ -151,7 +151,7 @@ private DocumentationPlugin defaultDocumentationPlugin() {
   public DocumentationContextBuilder createContextBuilder(
       DocumentationType documentationType,
       DefaultsProviderPlugin defaultConfiguration) {
-    return defaultsProviders.getPluginFor(documentationType, defaultConfiguration)
+    return defaultsProviders.getPluginOrDefaultFor(documentationType, defaultConfiguration)
         .create(documentationType)
         .withResourceGroupingStrategy(resourceGroupingStrategy(documentationType));
   }

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/AbstractController.java
Patch:
@@ -21,14 +21,14 @@
 
 import io.swagger.annotations.ApiResponse;
 import io.swagger.annotations.ApiResponses;
-import org.springframework.hateoas.ResourceSupport;
+import org.springframework.hateoas.RepresentationModel;
 import org.springframework.http.HttpEntity;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 
-public abstract class AbstractController<T extends ResourceSupport, ID> {
+public abstract class AbstractController<T extends RepresentationModel, ID> {
 
   @RequestMapping(value = "/create-t", method = RequestMethod.PUT)
   public void create(@RequestBody T toCreate) {

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/BugsController.java
Patch:
@@ -33,7 +33,7 @@
 import io.swagger.annotations.ApiResponses;
 import io.swagger.annotations.Authorization;
 import io.swagger.annotations.AuthorizationScope;
-import org.springframework.hateoas.Resource;
+import org.springframework.hateoas.EntityModel;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -125,8 +125,8 @@ public String issue1420() {
   }
 
   @RequestMapping(value = "1440", method = GET)
-  public Resource<String> issue1440() {
-    return new Resource<String>("1420");
+  public EntityModel<String> issue1440() {
+    return new EntityModel<String>("1420");
   }
 
   @RequestMapping(value = "1475", method = GET)

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/ConcreteController.java
Patch:
@@ -19,12 +19,12 @@
 
 package springfox.documentation.spring.web.dummy.controllers;
 
-import org.springframework.hateoas.Resource;
+import org.springframework.hateoas.EntityModel;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import springfox.documentation.spring.web.dummy.models.Pet;
 
 @Controller
 @RequestMapping("/foo")
-public class ConcreteController extends AbstractController<Resource<Pet>, String> {
+public class ConcreteController extends AbstractController<EntityModel<Pet>, String> {
 }

File: springfox-core/src/main/java/springfox/documentation/builders/ModelBuilder.java
Patch:
@@ -59,7 +59,7 @@ public ModelBuilder(Model model) {
     this.qualifiedType = model.getQualifiedType();
     this.description = model.getDescription();
     this.baseModel = model.getBaseModel();
-    this.discriminator = model.getDescription();
+    this.discriminator = model.getDiscriminator();
     this.modelType = model.getType();
     this.example = model.getExample();
     this.xml = model.getXml();

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2ControllerWebFlux.java
Patch:
@@ -88,7 +88,7 @@ public ResponseEntity<Json> getDocumentation(
       return new ResponseEntity<>(HttpStatus.NOT_FOUND);
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
-    swagger.basePath("/");
+    swagger.basePath(isEmpty(request.getPath().contextPath().value()) ? "/" : request.getPath().contextPath().value());
     if (isEmpty(swagger.getHost())) {
       swagger.host(request.getURI().getAuthority());
     }

File: springfox-spring-integration/src/main/java/springfox/documentation/spring/web/plugins/SpringRestDocsOperationBuilderPlugin.java
Patch:
@@ -36,7 +36,6 @@
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
 
-import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.Charset;
@@ -110,7 +109,7 @@ protected Set<ResponseMessage> read(OperationContext context) {
 
   private Function<Resource, RawHttpResponse<Void>> toRawHttpResponse() {
     return resource -> {
-      try (InputStream resourceAsStream = new FileInputStream(resource.getFile())) {
+      try (InputStream resourceAsStream = resource.getInputStream()) {
         RawHttp rawHttp = new RawHttp();
         // must extract the body before the stream is closed
         return (RawHttpResponse<Void>) rawHttp.parseResponse(resourceAsStream).eagerly();

File: springfox-spring-integration/src/main/java/springfox/documentation/spring/web/plugins/SpringRestDocsOperationBuilderPlugin.java
Patch:
@@ -36,7 +36,6 @@
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
 
-import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.Charset;
@@ -110,7 +109,7 @@ protected Set<ResponseMessage> read(OperationContext context) {
 
   private Function<Resource, RawHttpResponse<Void>> toRawHttpResponse() {
     return resource -> {
-      try (InputStream resourceAsStream = new FileInputStream(resource.getFile())) {
+      try (InputStream resourceAsStream = resource.getInputStream()) {
         RawHttp rawHttp = new RawHttp();
         // must extract the body before the stream is closed
         return (RawHttpResponse<Void>) rawHttp.parseResponse(resourceAsStream).eagerly();

File: springfox-schema/src/test/java/springfox/documentation/schema/SimpleTypeEntityModel.java
Patch:
@@ -21,8 +21,8 @@
 import org.springframework.hateoas.Link;
 import org.springframework.hateoas.EntityModel;
 
-public class SimpleTypeResource extends EntityModel<SimpleType> {
-  public SimpleTypeResource(SimpleType content, Link... links) {
+public class SimpleTypeEntityModel extends EntityModel<SimpleType> {
+  public SimpleTypeEntityModel(SimpleType content, Link... links) {
     super(content, links);
   }
 }

File: springfox-schema/src/test/java/springfox/documentation/schema/SubclassOfRepresentationModel.java
Patch:
@@ -20,5 +20,5 @@
 
 import org.springframework.hateoas.RepresentationModel;
 
-public class SubclassOfResourceSupport extends RepresentationModel {
+public class SubclassOfRepresentationModel extends RepresentationModel {
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/DescriptionResolver.java
Patch:
@@ -29,7 +29,7 @@
 import static org.springframework.util.StringUtils.*;
 
 public class DescriptionResolver {
-  private static final Pattern PATTERN = Pattern.compile("\\Q${\\E(.+?)\\Q}\\E");
+  private static final Pattern PATTERN = Pattern.compile("\\Q${\\E(.+?)(:.*)?\\Q}\\E");
   private final Environment environment;
   private Map<String, String> cache;
 

File: springfox-spring-integration/src/main/java/springfox/documentation/spring/web/plugins/SpringRestDocsOperationBuilderPlugin.java
Patch:
@@ -110,7 +110,7 @@ protected Set<ResponseMessage> read(OperationContext context) {
 
   private Function<Resource, RawHttpResponse<Void>> toRawHttpResponse() {
     return resource -> {
-      try (InputStream resourceAsStream = new FileInputStream(resource.getFile())) {
+      try (InputStream resourceAsStream = resource.getInputStream()) {
         RawHttp rawHttp = new RawHttp();
         // must extract the body before the stream is closed
         return (RawHttpResponse<Void>) rawHttp.parseResponse(resourceAsStream).eagerly();

File: springfox-schema/src/main/java/springfox/documentation/schema/TypeNameExtractor.java
Patch:
@@ -191,7 +191,7 @@ private String modelName(
     if (!isMapType(asResolved(context.getType())) && knownNames.containsKey(context.getTypeId())) {
       return knownNames.get(context.getTypeId());
     }
-    TypeNameProviderPlugin selected = typeNameProviders.getPluginFor(
+    TypeNameProviderPlugin selected = typeNameProviders.getPluginOrDefaultFor(
         context.getDocumentationType(),
         new DefaultTypeNameProvider());
     String modelName = selected.nameFor(((ResolvedType) context.getType()).getErasedType());

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -141,7 +141,7 @@ public Set<ModelContext> modelContexts(RequestMappingContext context) {
   }
 
   public ResourceGroupingStrategy resourceGroupingStrategy(DocumentationType documentationType) {
-    return resourceGroupingStrategies.getPluginFor(documentationType, new SpringGroupingStrategy());
+    return resourceGroupingStrategies.getPluginOrDefaultFor(documentationType, new SpringGroupingStrategy());
   }
 
   private DocumentationPlugin defaultDocumentationPlugin() {
@@ -151,7 +151,7 @@ private DocumentationPlugin defaultDocumentationPlugin() {
   public DocumentationContextBuilder createContextBuilder(
       DocumentationType documentationType,
       DefaultsProviderPlugin defaultConfiguration) {
-    return defaultsProviders.getPluginFor(documentationType, defaultConfiguration)
+    return defaultsProviders.getPluginOrDefaultFor(documentationType, defaultConfiguration)
         .create(documentationType)
         .withResourceGroupingStrategy(resourceGroupingStrategy(documentationType));
   }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2ControllerWebFlux.java
Patch:
@@ -88,7 +88,7 @@ public ResponseEntity<Json> getDocumentation(
       return new ResponseEntity<>(HttpStatus.NOT_FOUND);
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
-    swagger.basePath("/");
+    swagger.basePath(isEmpty(request.getPath().contextPath().value()) ? "/" : request.getPath().contextPath().value());
     if (isEmpty(swagger.getHost())) {
       swagger.host(request.getURI().getAuthority());
     }

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyClass.java
Patch:
@@ -505,7 +505,8 @@ public List<DummyModels.BusinessModel> methodToTestOrdering(@RequestBody SameFan
   }
 
   @ResponseBody
-  public List<DummyModels.BusinessModel> methodToTestOrdering(@RequestBody SameFancyPet fancyPet, @RequestParam String id) {
+  public List<DummyModels.BusinessModel> methodToTestOrdering(@RequestBody SameFancyPet fancyPet,
+      @RequestParam String id) {
     throw new UnsupportedOperationException();
   }
 

File: springfox-core/src/main/java/springfox/documentation/builders/ModelBuilder.java
Patch:
@@ -59,7 +59,7 @@ public ModelBuilder(Model model) {
     this.qualifiedType = model.getQualifiedType();
     this.description = model.getDescription();
     this.baseModel = model.getBaseModel();
-    this.discriminator = model.getDescription();
+    this.discriminator = model.getDiscriminator();
     this.modelType = model.getType();
     this.example = model.getExample();
     this.xml = model.getXml();

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/SpecificationBuilder.java
Patch:
@@ -267,13 +267,13 @@ SpecificationBuilder withParameterType(ParameterType parameterType) {
               0,
               configuration.getPageParamName(),
               Collections.EMPTY_LIST,
-              typeResolver.resolve(String.class)));
+              typeResolver.resolve(Integer.class)));
           //noinspection unchecked
           withParameter(new ResolvedMethodParameter(
               1,
               configuration.getLimitParamName(),
               Collections.EMPTY_LIST,
-              typeResolver.resolve(String.class)));
+              typeResolver.resolve(Integer.class)));
           //noinspection unchecked
           withParameter(new ResolvedMethodParameter(
               2,

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParametersReader.java
Patch:
@@ -61,13 +61,11 @@ private List<Parameter> readParameters(OperationContext context) {
     List<ApiImplicitParams> annotations = context.findAllAnnotations(ApiImplicitParams.class);
 
     List<Parameter> parameters = new ArrayList<>();
-    if (annotations != null && !annotations.isEmpty()) {
+    if (!annotations.isEmpty()) {
       for (ApiImplicitParams annotation : annotations) {
-        if (annotation != null) {
           for (ApiImplicitParam param : annotation.value()) {
             parameters.add(OperationImplicitParameterReader.implicitParameter(descriptions, param));
           }
-        }
       }
     }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParametersReader.java
Patch:
@@ -34,7 +34,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Optional;
 
 import static springfox.documentation.swagger.common.SwaggerPluginSupport.*;
 

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -140,6 +140,7 @@ SecurityConfiguration security() {
         .scopeSeparator(",")
         .additionalQueryStringParams(null)
         .useBasicAuthenticationWithAccessCodeGrant(false)
+        .enableCsrfSupport(false)
         .build();
   }
 

File: springfox-core/src/main/java/springfox/documentation/schema/Enums.java
Patch:
@@ -55,7 +55,7 @@ static List<String> getEnumValues(final Class<?> subject) {
       if (jsonValue.isPresent() && !isEmpty(jsonValue.get())) {
         return jsonValue.get();
       }
-      return input.toString();
+      return ((Enum) input).name();
     });
   }
   @SuppressWarnings("PMD")

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterBuilder.java
Patch:
@@ -79,7 +79,8 @@ ParameterBuilder from(Parameter other) {
         .hidden(other.isHidden())
         .allowEmptyValue(other.isAllowEmptyValue())
         .order(other.getOrder())
-        .vendorExtensions(other.getVendorExtentions());
+        .vendorExtensions(other.getVendorExtentions())
+        .collectionFormat(other.getCollectionFormat());
   }
 
   /**

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterMerger.java
Patch:
@@ -101,6 +101,7 @@ private Parameter merged(Parameter destination, Parameter source) {
         .order(source.getOrder())
         .scalarExample(source.getScalarExample())
         .complexExamples(source.getExamples())
+        .collectionFormat(source.getCollectionFormat())
         .build();
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -82,6 +82,7 @@ static Parameter implicitParameter(DescriptionResolver descriptions, ApiImplicit
         .order(SWAGGER_PLUGIN_ORDER)
         .scalarExample(param.example())
         .complexExamples(examples(param.examples()))
+        .collectionFormat(param.collectionFormat())
         .build();
   }
 

File: springfox-spring-integration/src/main/java/springfox/documentation/spring/web/package-info.java
Patch:
@@ -41,7 +41,7 @@
  * <p>
  * Changes in existing code:
  * <ul>
- * <li>{@code @Conditional(SpringIntegrationNotPresentInClassPathCondition.class)} on
+ * <li>{@code @Conditional(SpringIntegrationPluginNotPresentInClassPathCondition.class)} on
  * {@link springfox.documentation.spring.web.plugins.DocumentationPluginsBootstrapper} to avoid bootstrapping
  * the documentation plugins twice</li>
  * <li>Filter for Integration Handler Mappings in WebMvcRequestHandlerProvider and WebFluxRequestHandlerProvider</li>

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.java
Patch:
@@ -45,7 +45,7 @@
  * If no instances DocumentationConfigurer are found a default one is created and executed.
  */
 @Component
-@Conditional(SpringIntegrationNotPresentInClassPathCondition.class)
+@Conditional(SpringIntegrationPluginNotPresentInClassPathCondition.class)
 public class DocumentationPluginsBootstrapper
     extends AbstractDocumentationPluginsBootstrapper
     implements SmartLifecycle {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/SpringIntegrationPluginNotPresentInClassPathCondition.java
Patch:
@@ -25,11 +25,12 @@
 
 import static org.springframework.util.ClassUtils.*;
 
-public class SpringIntegrationNotPresentInClassPathCondition implements Condition {
+public class SpringIntegrationPluginNotPresentInClassPathCondition implements Condition {
   @Override
   public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
     return !isPresent(
-        "org.springframework.integration.handler.AbstractMessageHandler",
+        "springfox.documentation.spring.web.plugins" +
+            ".SpringIntegrationDocumentationPluginsBootstrapper",
         context.getClassLoader());
   }
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -44,6 +44,7 @@
 import java.util.Comparator;
 import java.util.HashMap;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -64,8 +65,8 @@ public class DocumentationContextBuilder {
   private final List<AlternateTypeRule> rules = new ArrayList<>();
   private final Map<RequestMethod, List<ResponseMessage>> defaultResponseMessages = new HashMap<>();
   private final Set<String> protocols = new HashSet<>();
-  private final Set<String> produces = new HashSet<>();
-  private final Set<String> consumes = new HashSet<>();
+  private final Set<String> produces = new LinkedHashSet<>();
+  private final Set<String> consumes = new LinkedHashSet<>();
   private final Set<ResolvedType> additionalModels = new HashSet<>();
   private final Set<Tag> tags = new TreeSet<>(Tags.tagComparator());
   private List<VendorExtension> vendorExtensions = new ArrayList<VendorExtension>();

File: springfox-schema/src/main/java/springfox/documentation/schema/property/JacksonXmlPropertyPlugin.java
Patch:
@@ -46,7 +46,7 @@ public class JacksonXmlPropertyPlugin implements ModelPropertyBuilderPlugin {
   public void apply(ModelPropertyContext context) {
     Optional<JacksonXmlProperty> propertyAnnotation = findAnnotation(context, JacksonXmlProperty.class);
 
-    if(propertyAnnotation.isPresent()) {
+    if (propertyAnnotation.isPresent()) {
       if (propertyAnnotation.get().isAttribute()) {
         context.getBuilder()
             .xml(new Xml()

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelDependencyProvider.java
Patch:
@@ -117,8 +117,8 @@ private List<ResolvedType> resolvedDependencies(ModelContext modelContext) {
     List<ResolvedType> dependencies = newArrayList(resolvedTypeParameters(modelContext, resolvedType));
     dependencies.addAll(resolvedArrayElementType(modelContext, resolvedType));
     dependencies.addAll(resolvedMapType(modelContext, resolvedType));
-    dependencies.addAll(resolvedPropertiesAndFields(modelContext, resolvedType));
     dependencies.addAll(resolvedSubclasses(modelContext, resolvedType));
+    dependencies.addAll(resolvedPropertiesAndFields(modelContext, resolvedType));
     return dependencies;
   }
 
@@ -132,7 +132,7 @@ private Collection<? extends ResolvedType> resolvedSubclasses(ModelContext model
       for (JsonSubTypes.Type each : subTypes.value()) {
         ResolvedType type = typeResolver.resolve(each.value());
         subclasses.add(modelContext.alternateFor(type));
-        subclasses.addAll(resolvedDependencies(ModelContext.fromParent(modelContext, type)));
+        subclasses.addAll(resolvedPropertiesAndFields(ModelContext.fromParent(modelContext, type), type));
       }
     }
     return subclasses;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ParameterMapper.java
Patch:
@@ -84,7 +84,7 @@ private Model toSchema(springfox.documentation.service.Parameter source) {
   }
 
   private boolean isEmptyExample(Object object) {
-    return object instanceof Example && StringUtils.isEmpty(((Example)object).getValue());
+    return object instanceof Example && StringUtils.isEmpty(((Example) object).getValue());
   }
 
   Model fromModelRef(ModelReference modelRef) {

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/NotNullAnnotationPlugin.java
Patch:
@@ -56,6 +56,8 @@ public void apply(ModelPropertyContext context) {
   }
 
   private Optional<NotNull> extractAnnotation(ModelPropertyContext context) {
-    return annotationFromBean(context, NotNull.class).map(Optional::of).orElse(annotationFromField(context, NotNull.class));
+    return annotationFromBean(context, NotNull.class)
+        .map(Optional::of)
+        .orElse(annotationFromField(context, NotNull.class));
   }
 }

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterMerger.java
Patch:
@@ -34,7 +34,7 @@ class ParameterMerger {
   private final List<Parameter> destination;
   private final List<Parameter> source;
 
-  public ParameterMerger(List<Parameter> destination, List<Parameter> source) {
+  ParameterMerger(List<Parameter> destination, List<Parameter> source) {
     this.destination = new ArrayList<>(destination);
     this.source = new ArrayList<>(source);
   }
@@ -75,7 +75,7 @@ private List<Parameter> mergedParameters(
     for (Parameter newParam : newParams) {
       Optional<Parameter> original = existingParameters.stream().filter(withName(newParam.getName())).findFirst();
       if (paramsToMerge.contains(newParam.getName()) && original.isPresent()) {
-        if (newParam.getOrder() > original.get().getOrder()){
+        if (newParam.getOrder() > original.get().getOrder()) {
           parameters.add(merged(newParam, original.get()));
         } else {
           parameters.add(merged(original.get(), newParam));

File: springfox-core/src/main/java/springfox/documentation/common/SpringVersionCapability.java
Patch:
@@ -25,14 +25,14 @@ public class SpringVersionCapability {
   private static final Version FOUR_THREE_THREE = Version.parse("4.3.3.RELEASE");
   private static final Version FOUR_THREE_FIFTEEN = Version.parse("4.3.15.RELEASE");
 
-  public SpringVersionCapability() {
+  private SpringVersionCapability() {
     throw new UnsupportedOperationException();
   }
 
   public static boolean supportsXForwardPrefixHeader(Version version) {
     return (version.isGreaterThanOrEqualTo(FOUR_THREE_FIFTEEN)
                 && version.isLessThan(FIVE_ZERO_ZERO)) ||
-            version.isGreaterThanOrEqualTo(FIVE_ZERO_FIVE);
+        version.isGreaterThanOrEqualTo(FIVE_ZERO_FIVE);
   }
 
   public static boolean supportsExtendedPathVariableAnnotation(Version version) {

File: springfox-core/src/main/java/springfox/documentation/schema/Model.java
Patch:
@@ -38,6 +38,7 @@ public class Model {
   private final Object example;
   private final Xml xml;
 
+  @SuppressWarnings("ParameterNumber")
   public Model(
       String id,
       String name,

File: springfox-core/src/main/java/springfox/documentation/schema/ModelProperty.java
Patch:
@@ -46,6 +46,7 @@ public class ModelProperty {
   private final Xml xml;
   private final List<VendorExtension> vendorExtensions;
 
+  @SuppressWarnings("ParameterNumber")
   public ModelProperty(
       String name,
       ResolvedType type,

File: springfox-core/src/main/java/springfox/documentation/schema/ModelRef.java
Patch:
@@ -71,7 +71,7 @@ public boolean isCollection() {
   }
 
   @Override
-  public boolean isMap(){
+  public boolean isMap() {
     return itemModel.isPresent() && isMap;
   }
 

File: springfox-core/src/main/java/springfox/documentation/service/ApiListing.java
Patch:
@@ -43,7 +43,8 @@ public class ApiListing {
   private final String description;
   private final int position;
   private final Set<Tag> tags;
-
+  
+  @SuppressWarnings("ParameterNumber")
   public ApiListing(
       String apiVersion,
       String basePath,

File: springfox-core/src/main/java/springfox/documentation/service/Documentation.java
Patch:
@@ -37,7 +37,8 @@ public class Documentation {
   private final String host;
   private final Set<String> schemes;
   private final List<VendorExtension> vendorExtensions;
-
+  
+  @SuppressWarnings("ParameterNumber")
   public Documentation(
       String groupName,
       String basePath,

File: springfox-core/src/main/java/springfox/documentation/service/ObjectVendorExtension.java
Patch:
@@ -28,7 +28,6 @@
 
 import static java.util.Collections.*;
 
-
 public class ObjectVendorExtension implements VendorExtension<List<VendorExtension>> {
   private final List<VendorExtension> properties = new ArrayList<>();
   private final String name;
@@ -52,7 +51,9 @@ public void addProperty(VendorExtension property) {
   }
 
   public void replaceProperty(VendorExtension property) {
-    Optional<VendorExtension> vendorProperty = StreamSupport.stream(properties.spliterator(), false).filter(withName(property.getName())).findFirst();
+    Optional<VendorExtension> vendorProperty =
+        StreamSupport.stream(properties.spliterator(), false)
+            .filter(withName(property.getName())).findFirst();
 
     vendorProperty.ifPresent(properties::remove);
     properties.add(property);

File: springfox-core/src/main/java/springfox/documentation/service/Operation.java
Patch:
@@ -49,7 +49,8 @@ public class Operation {
   private final Set<ResponseMessage> responseMessages;
   private final String deprecated;
   private final List<VendorExtension> vendorExtensions;
-
+  
+  @SuppressWarnings("ParameterNumber")
   public Operation(
       HttpMethod method,
       String summary,

File: springfox-core/src/main/java/springfox/documentation/service/Parameter.java
Patch:
@@ -49,7 +49,8 @@ public class Parameter implements Ordered {
   private final Map<String, List<Example>> examples;
   private final List<VendorExtension> vendorExtensions;
   private final Boolean allowEmptyValue;
-
+  
+  @SuppressWarnings("ParameterNumber")
   public Parameter(
       String name,
       String description,

File: springfox-core/src/main/java/springfox/documentation/service/ResourceGroup.java
Patch:
@@ -82,6 +82,6 @@ public String toString() {
         "ResourceGroup{groupName='%s', position=%d, controller=%s}",
         groupName,
         position,
-        getControllerClass().map((Function<Class<?>,String>) Class::getName).orElse(""));
+        getControllerClass().map((Function<Class<?>, String>) Class::getName).orElse(""));
   }
 }

File: springfox-core/src/main/java/springfox/documentation/service/SecurityScheme.java
Patch:
@@ -27,8 +27,8 @@
 import static springfox.documentation.builders.BuilderDefaults.*;
 
 public abstract class SecurityScheme {
-  protected final String name;
-  protected final String type;
+  private final String name;
+  private final String type;
   private final List<VendorExtension> vendorExtensions = new ArrayList<>();
 
   protected SecurityScheme(String name, String type) {

File: springfox-core/src/main/java/springfox/documentation/service/Tag.java
Patch:
@@ -47,7 +47,7 @@ public Tag(String name, String description, List<VendorExtension> vendorExtensio
   }
 
   public Tag(String name, String description, int order, List<VendorExtension> vendorExtensions) {
-    this.name = of(name).filter(((Predicate<String>)String::isEmpty).negate()).get();
+    this.name = of(name).filter(((Predicate<String>) String::isEmpty).negate()).get();
     this.description = description;
     this.order = order;
     this.vendorExtensions = new ArrayList<>(vendorExtensions);

File: springfox-core/src/main/java/springfox/documentation/service/Tags.java
Patch:
@@ -44,7 +44,7 @@ public static Set<Tag> toTags(Map<String, List<ApiListing>> apiListings) {
         .collect(toList());
     List<Tag> tags =
         StreamSupport.stream(allListings.spliterator(), false)
-            .map((Function<ApiListing,Iterable<Tag>>) ApiListing::getTags)
+            .map((Function<ApiListing, Iterable<Tag>>) ApiListing::getTags)
             .flatMap(tagIterable -> StreamSupport.stream(tagIterable.spliterator(), false))
             .collect(toList());
     TreeSet<Tag> tagSet = new TreeSet<>(tagComparator());

File: springfox-core/src/test/java/springfox/documentation/builders/ModelPropertyDefaultValueTest.java
Patch:
@@ -27,8 +27,8 @@
 
 public class ModelPropertyDefaultValueTest {
 
-    ModelPropertyBuilder propertyBuilder;
-    ModelProperty modelProperty;
+    private ModelPropertyBuilder propertyBuilder;
+    private ModelProperty modelProperty;
 
     @Before
     public void createNewPropertyBuilder() {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/ActionSpecification.java
Patch:
@@ -42,7 +42,8 @@ class ActionSpecification {
   private final String name;
   private final String path;
 
-  public ActionSpecification(
+  @SuppressWarnings("ParameterNumber")
+  ActionSpecification(
       String name,
       String path,
       Collection<RequestMethod> supportedMethods,

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityContext.java
Patch:
@@ -49,7 +49,8 @@ public class EntityContext {
   private final Associations associations;
   private final RequestHandlerExtractorConfiguration extractorConfiguration;
   private final String contextPath;
-
+  
+  @SuppressWarnings("ParameterNumber")
   public EntityContext(
       TypeResolver typeResolver,
       String contextPath,

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityServicesProvider.java
Patch:
@@ -52,7 +52,8 @@ class EntityServicesProvider implements RequestHandlerProvider {
   private final String contextPath;
 
   @Autowired
-  public EntityServicesProvider(
+  @SuppressWarnings("ParameterNumber")
+  EntityServicesProvider(
       ServletContext servletContext,
       RepositoryRestConfiguration configuration,
       ResourceMappings mappings,

File: springfox-petstore-webflux/src/main/java/springfox/petstore/webflux/model/Category.java
Patch:
@@ -32,7 +32,9 @@ public Category(long id, String name) {
   }
 
   @JsonCreator
-  public static Category create(@JsonProperty(value = "id", required=true) long id, @JsonProperty("name") String name) {
+  public static Category create(
+      @JsonProperty(value = "id", required = true) long id,
+      @JsonProperty("name") String name) {
     return new Category(id, name);
   }
 

File: springfox-petstore/src/main/java/springfox/petstore/model/Category.java
Patch:
@@ -32,7 +32,9 @@ public Category(long id, String name) {
   }
 
   @JsonCreator
-  public static Category create(@JsonProperty(value = "id", required=true) long id, @JsonProperty("name") String name) {
+  public static Category create(
+      @JsonProperty(value = "id", required = true) long id,
+      @JsonProperty("name") String name) {
     return new Category(id, name);
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelReferenceProvider.java
Patch:
@@ -35,7 +35,7 @@ class ModelReferenceProvider implements Function<ResolvedType, ModelReference> {
   private final TypeNameExtractor typeNameExtractor;
   private final ModelContext parentContext;
 
-  public ModelReferenceProvider(TypeNameExtractor typeNameExtractor, ModelContext parentContext) {
+  ModelReferenceProvider(TypeNameExtractor typeNameExtractor, ModelContext parentContext) {
     this.typeNameExtractor = typeNameExtractor;
     this.parentContext = parentContext;
   }

File: springfox-schema/src/main/java/springfox/documentation/schema/plugins/PropertyDiscriminatorBasedInheritancePlugin.java
Patch:
@@ -57,7 +57,7 @@ public PropertyDiscriminatorBasedInheritancePlugin(
   @Override
   public void apply(ModelContext context) {
 
-    List<ModelReference> modelRefs =  modelRefs(context);
+    List<ModelReference> modelRefs = modelRefs(context);
 
     if (!modelRefs.isEmpty()) {
       context.getBuilder()
@@ -82,7 +82,7 @@ private String discriminator(ModelContext context) {
     JsonTypeInfo typeInfo = AnnotationUtils.getAnnotation(forClass(context), JsonTypeInfo.class);
     if (typeInfo != null && typeInfo.use() == JsonTypeInfo.Id.NAME) {
       if (typeInfo.include() == JsonTypeInfo.As.PROPERTY) {
-        return ofNullable(typeInfo.property()).filter(((Predicate<String>)String::isEmpty).negate())
+        return ofNullable(typeInfo.property()).filter(((Predicate<String>) String::isEmpty).negate())
             .orElse(typeInfo.use().getDefaultPropertyName());
       }
     }

File: springfox-schema/src/main/java/springfox/documentation/schema/property/bean/Accessors.java
Patch:
@@ -59,6 +59,7 @@ public static String toCamelCase(String s) {
             s.substring(1);
   }
 
+  @SuppressWarnings({"CyclomaticComplexity", "NPathComplexity"})
   public static String propertyName(Method method) {
     Optional<JsonGetter> jsonGetterAnnotation = getterAnnotation(method);
     if (jsonGetterAnnotation.isPresent() && !isEmpty(jsonGetterAnnotation.get().value())) {

File: springfox-schema/src/test/java/springfox/documentation/schema/Category.java
Patch:
@@ -20,7 +20,7 @@
 package springfox.documentation.schema;
 
 public class Category {
-  String name;
+  private String name;
 
   public String getName() {
     return name;

File: springfox-schema/src/test/java/springfox/documentation/schema/GenericTypeBoundToMultiple.java
Patch:
@@ -23,7 +23,7 @@
 public class GenericTypeBoundToMultiple<A, B> {
   private final A a;
   private final List<B> listOfB;
-  private final B [] arrayOfB;
+  private final B[] arrayOfB;
 
   public GenericTypeBoundToMultiple(List<B> listOfB, A a, B[] arrayOfB) {
     this.listOfB = listOfB;

File: springfox-schema/src/test/java/springfox/documentation/schema/TypeWithDelegatedJsonCreatorConstructor.java
Patch:
@@ -31,7 +31,9 @@ private TypeWithDelegatedJsonCreatorConstructor(String foo, Integer bar) {
   }
 
   @JsonCreator
-  public static TypeWithDelegatedJsonCreatorConstructor create(@JsonProperty("foo") String foo, @JsonProperty("bar") Integer bar) {
+  public static TypeWithDelegatedJsonCreatorConstructor create(
+      @JsonProperty("foo") String foo,
+      @JsonProperty("bar") Integer bar) {
     return new TypeWithDelegatedJsonCreatorConstructor(foo, bar);
   }
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContext.java
Patch:
@@ -74,6 +74,7 @@ public class DocumentationContext {
   private boolean isUriTemplatesEnabled;
   private List<VendorExtension> vendorExtensions;
 
+  @SuppressWarnings("ParameterNumber")
   public DocumentationContext(
       DocumentationType documentationType,
       List<RequestHandler> handlerMappings,
@@ -156,14 +157,14 @@ public Set<Class> getIgnorableParameterTypes() {
   public Map<RequestMethod, List<ResponseMessage>> getGlobalResponseMessages() {
     return globalResponseMessages;
   }
-  
+
   public List<Parameter> getGlobalRequestParameters() {
     return globalOperationParameters;
   }
 
   /**
-   * @deprecated  @since 2.2.0 - only here for backward compatibility
    * @return resource grouping strategy
+   * @deprecated @since 2.2.0 - only here for backward compatibility
    */
   @Deprecated
   public ResourceGroupingStrategy getResourceGroupingStrategy() {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/RequestMappingContext.java
Patch:
@@ -142,7 +142,9 @@ public GenericTypeNamingStrategy getGenericsNamingStrategy() {
   }
 
   public Set<ResolvedType> getAdditionalModels() {
-    return documentationContext.getAdditionalModels().stream().collect(collectingAndThen(toSet(), Collections::unmodifiableSet));
+    return documentationContext.getAdditionalModels().stream()
+        .collect(collectingAndThen(toSet(),
+            Collections::unmodifiableSet));
   }
 
   public PatternsRequestCondition getPatternsCondition() {

File: springfox-spring-integration/src/main/java/springfox/documentation/spring/web/plugins/SpringIntegrationParametersProvider.java
Patch:
@@ -124,7 +124,7 @@ private Optional<ResolvedMethodParameter> extractRequestParam(Expression express
     SpelNode firstChild = ast.getChild(0); // possible #requestParams, VariableReference
     if (firstChild != null && REQUEST_PARAMS_EXPRESSION_CONTEXT_VARIABLE.equals(firstChild.toStringAST())) {
       String firstIndexer = ast.getChild(1)
-          .toStringAST();// ['value'] or value, Indexer
+          .toStringAST(); // ['value'] or value, Indexer
       String requestParamName = firstIndexer.replaceAll("^\\['|']", "");
       boolean required = requestParamName.equals(firstIndexer); // square brackets mean optional
       Map<String, Object> requestParamAttributes = new HashMap<>();

File: springfox-spring-integration/src/main/java/springfox/documentation/spring/web/plugins/SpringRestDocsOperationBuilderPlugin.java
Patch:
@@ -56,8 +56,7 @@
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE + 1000)
 public class SpringRestDocsOperationBuilderPlugin implements OperationBuilderPlugin {
-
-  private Logger LOG = LoggerFactory.getLogger(SpringRestDocsOperationBuilderPlugin.class);
+  private static final Logger LOG = LoggerFactory.getLogger(SpringRestDocsOperationBuilderPlugin.class);
 
   @Override
   public void apply(OperationContext context) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/DocumentationCache.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 
 public class DocumentationCache {
-  private Map<String, Documentation> documentationLookup = new LinkedHashMap();
+  private Map<String, Documentation> documentationLookup = new LinkedHashMap<>();
 
   public void addDocumentation(Documentation documentation) {
     documentationLookup.put(documentation.getGroupName(), documentation);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ResourcePathProvider.java
Patch:
@@ -42,14 +42,14 @@ public Optional<String> resourcePath() {
     return ofNullable(
         controllerClass()
             .map(resourcePathExtractor())
-            .filter(((Predicate<String>)String::isEmpty).negate())
+            .filter(((Predicate<String>) String::isEmpty).negate())
             .orElse(null));
   }
 
   private Function<Class<?>, String> resourcePathExtractor() {
     return input -> {
       Optional<String> path = Arrays.stream(paths(input))
-          .findFirst().filter(((Predicate<String>)String::isEmpty)
+          .findFirst().filter(((Predicate<String>) String::isEmpty)
               .negate());
       if (!path.isPresent()) {
         return "";

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/configuration/GenericWebContextLoader.java
Patch:
@@ -37,9 +37,9 @@
 import javax.servlet.RequestDispatcher;
 
 public class GenericWebContextLoader extends AbstractContextLoader {
-  protected final MockServletContext servletContext;
+  private final MockServletContext servletContext;
 
-  public GenericWebContextLoader(String warRootDir, boolean isClasspathRelative) {
+  GenericWebContextLoader(String warRootDir, boolean isClasspathRelative) {
     ResourceLoader resourceLoader = isClasspathRelative ? new DefaultResourceLoader() : new FileSystemResourceLoader();
     this.servletContext = initServletContext(warRootDir, resourceLoader);
   }

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/PetWithSerializer.java
Patch:
@@ -20,6 +20,6 @@
 
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
 
-@JsonSerialize(as= Pet.class)
+@JsonSerialize(as = Pet.class)
 public class PetWithSerializer {
 }

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/SpringfoxWebFluxConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
+@SuppressWarnings("HideUtilityClassConstructor")
 public class SpringfoxWebFluxConfiguration {
 
   @Bean

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/SpringfoxWebMvcConfiguration.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.context.annotation.Configuration;
 
 @Configuration
+@SuppressWarnings("HideUtilityClassConstructor")
 public class SpringfoxWebMvcConfiguration {
   @Bean
   public static WebMvcObjectMapperConfigurer objectMapperConfigurer() {

File: springfox-spring-webmvc/src/test/java/springfox/documentation/spring/web/WebMvcObjectMapperConfigurerIntegrationTest.java
Patch:
@@ -61,6 +61,7 @@ public void event_is_fired_when_rmh_with_multiple_message_converters_is_loaded()
   }
 
   static class TestObjectMapperListener implements ApplicationListener<ObjectMapperConfigured> {
+    @SuppressWarnings("VisibilityModifier")
     static long firedCount = 0;
 
     @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/common/HostNameProvider.java
Patch:
@@ -31,7 +31,7 @@
 
 public class HostNameProvider {
 
-  public HostNameProvider() {
+  private HostNameProvider() {
     throw new UnsupportedOperationException();
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/common/SwaggerPluginSupport.java
Patch:
@@ -27,7 +27,7 @@ private SwaggerPluginSupport() {
     throw new UnsupportedOperationException();
   }
 
-  public final static int SWAGGER_PLUGIN_ORDER = Ordered.HIGHEST_PRECEDENCE + 1000;
+  public static final int SWAGGER_PLUGIN_ORDER = Ordered.HIGHEST_PRECEDENCE + 1000;
   public static boolean pluginDoesApply(DocumentationType documentationType) {
     return DocumentationType.SWAGGER_12.equals(documentationType)
         || DocumentationType.SWAGGER_2.equals(documentationType);

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationHttpMethodReader.java
Patch:
@@ -37,7 +37,7 @@
 @Component
 @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationHttpMethodReader implements OperationBuilderPlugin {
-  private static final Logger log = LoggerFactory.getLogger(OperationHttpMethodReader.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(OperationHttpMethodReader.class);
 
   @Override
   public void apply(OperationContext context) {
@@ -50,7 +50,7 @@ public void apply(OperationContext context) {
         RequestMethod.valueOf(apiMethod);
         context.operationBuilder().method(HttpMethod.valueOf(apiMethod));
       } catch (IllegalArgumentException e) {
-        log.error("Invalid http method: " + apiMethod + "Valid ones are [" + RequestMethod.values() + "]", e);
+        LOGGER.error("Invalid http method: " + apiMethod + "Valid ones are [" + RequestMethod.values() + "]", e);
       }
     }
   }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationPositionReader.java
Patch:
@@ -34,15 +34,14 @@
 @Component
 @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationPositionReader implements OperationBuilderPlugin {
-
-  private static final Logger log = LoggerFactory.getLogger(OperationPositionReader.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(OperationPositionReader.class);
 
   @Override
   public void apply(OperationContext context) {
     Optional<ApiOperation> apiOperation = context.findAnnotation(ApiOperation.class);
     if (apiOperation.isPresent() && apiOperation.get().position() > 0) {
       context.operationBuilder().position(apiOperation.get().position());
-      log.debug("Added operation at position: {}", apiOperation.get().position());
+      LOGGER.debug("Added operation at position: {}", apiOperation.get().position());
     }
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerMediaTypeReader.java
Patch:
@@ -54,9 +54,9 @@ public boolean supports(DocumentationType delimiter) {
 
   private Set<String> asSet(String mediaTypes) {
     return Stream.of(mediaTypes.split(","))
-            .map(String::trim)
-            .filter(((Predicate<String>)String::isEmpty).negate())
-            .collect(toSet());
+        .map(String::trim)
+        .filter(((Predicate<String>) String::isEmpty).negate())
+        .collect(toSet());
   }
 
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationTagsReader.java
Patch:
@@ -54,7 +54,8 @@ public SwaggerOperationTagsReader(DefaultTagsProvider tagsProvider) {
   @Override
   public void apply(OperationContext context) {
     Set<String> defaultTags = tagsProvider.tags(context);
-    Set<String> tags = Stream.concat(operationTags(context).stream(), controllerTags(context).stream()).collect(toSet());
+    Set<String> tags =
+        Stream.concat(operationTags(context).stream(), controllerTags(context).stream()).collect(toSet());
     if (tags.isEmpty()) {
       context.operationBuilder().tags(defaultTags);
     } else {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/VendorExtensionsReader.java
Patch:
@@ -48,7 +48,6 @@
 @Component
 @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class VendorExtensionsReader implements OperationBuilderPlugin {
-
   private static final Logger LOG = LoggerFactory.getLogger(VendorExtensionsReader.class);
 
   @Override
@@ -70,7 +69,7 @@ private List<VendorExtension> readExtensions(Extension[] vendorAnnotations) {
   }
 
   private Function<Extension, VendorExtension> toVendorExtension() {
-    return input -> ofNullable(input.name()).filter(((Predicate<String>)String::isEmpty).negate())
+    return input -> ofNullable(input.name()).filter(((Predicate<String>) String::isEmpty).negate())
         .map(propertyExtension(input))
         .orElse(objectExtension(input));
   }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/Examples.java
Patch:
@@ -38,11 +38,12 @@ private Examples() {
 
   public static Map<String, List<Example>> examples(io.swagger.annotations.Example example) {
     Map<String, List<Example>> examples = new HashMap<>();
-    for (ExampleProperty each: example.value()) {
+    for (ExampleProperty each : example.value()) {
       if (!isEmpty(each.value())) {
         examples.putIfAbsent(each.mediaType(), new LinkedList<>());
         examples.get(each.mediaType()).add(new Example(ofNullable(each.mediaType())
-                .filter(((Predicate<String>)String::isEmpty).negate()).orElse(null), each.value()));
+            .filter(((Predicate<String>) String::isEmpty).negate())
+            .orElse(null), each.value()));
       }
     }
     return examples;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelTypeNameProvider.java
Patch:
@@ -40,7 +40,7 @@ public String nameFor(Class<?> type) {
     String defaultTypeName = super.nameFor(type);
     if (annotation != null) {
       return ofNullable(annotation.value())
-          .filter(((Predicate<String>)String::isEmpty).negate())
+          .filter(((Predicate<String>) String::isEmpty).negate())
           .orElse(defaultTypeName);
     }
     return defaultTypeName;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/SecurityConfiguration.java
Patch:
@@ -81,6 +81,7 @@ private SecurityConfiguration() {
    * @param scopeSeparator - scope separator
    */
   @Deprecated
+  @SuppressWarnings("ParameterNumber")
   public SecurityConfiguration(
       String clientId,
       String clientSecret,

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/SecurityConfigurationBuilder.java
Patch:
@@ -117,7 +117,8 @@ public SecurityConfigurationBuilder additionalQueryStringParams(Map<String, Obje
    *                                                  default is false.
    * @return this
    */
-  public SecurityConfigurationBuilder useBasicAuthenticationWithAccessCodeGrant(Boolean useBasicAuthenticationWithAccessCodeGrant) {
+  public SecurityConfigurationBuilder useBasicAuthenticationWithAccessCodeGrant(
+      Boolean useBasicAuthenticationWithAccessCodeGrant) {
     this.useBasicAuthenticationWithAccessCodeGrant = useBasicAuthenticationWithAccessCodeGrant;
     return this;
   }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/SwaggerApiListingReader.java
Patch:
@@ -47,7 +47,9 @@ public void apply(ApiListingContext apiListingContext) {
     Optional<? extends Class<?>> controller = apiListingContext.getResourceGroup().getControllerClass();
     if (controller.isPresent()) {
       Optional<Api> apiAnnotation = ofNullable(findAnnotation(controller.get(), Api.class));
-      String description = apiAnnotation.map(Api::description).filter(((Predicate<String>)String::isEmpty).negate()).orElse(null);
+      String description =
+          apiAnnotation.map(Api::description).filter(((Predicate<String>) String::isEmpty).negate())
+              .orElse(null);
 
       Set<String> tagSet = apiAnnotation.map(tags())
           .orElse(new TreeSet<>());

File: springfox-swagger-common/src/test/java/springfox/documentation/schema/TypeWithAnnotatedGettersAndSetters.java
Patch:
@@ -128,6 +128,7 @@ public void setInterfaceProp(int interfaceProp) {
     this.interfaceProp = interfaceProp;
   }
 
+  @SuppressWarnings("VisibilityModifier")
   class Foo {
     public Integer fooInt;
   }

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/dto/AuthorizationType.java
Patch:
@@ -20,8 +20,8 @@
 package springfox.documentation.swagger1.dto;
 
 public abstract class AuthorizationType {
-  protected final String type;
-  protected String name;
+  private final String type;
+  private String name;
 
   protected AuthorizationType(String type) {
     this.type = type;

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/dto/OAuth.java
Patch:
@@ -52,7 +52,7 @@ private LinkedHashMap<String, GrantType> initializeGrantTypes(List<GrantType> gT
 
   @Override
   public String getName() {
-    return super.type;
+    return getType();
   }
 
   public List<AuthorizationScope> getScopes() {

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/dto/Parameter.java
Patch:
@@ -40,6 +40,7 @@ public class Parameter {
   public Parameter() {
   }
 
+  @SuppressWarnings("ParameterNumber")
   public Parameter(String name, String description, String defaultValue, Boolean required, Boolean allowMultiple,
                    String dataType, AllowableValues allowableValues, String paramType, String paramAccess) {
     this.description = description;

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/dto/SwaggerDataType.java
Patch:
@@ -20,5 +20,5 @@
 package springfox.documentation.swagger1.dto;
 
 public interface SwaggerDataType {
-  public String getAbsoluteType();
+  String getAbsoluteType();
 }

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/mappers/DataTypeMapper.java
Patch:
@@ -47,7 +47,7 @@ public String responseTypeName(ModelReference modelRef) {
 
   @OperationType
   public DataType operationTypeFromModelRef(ModelReference modelRef) {
-    if (modelRef !=null) {
+    if (modelRef != null) {
       return new DataType(operationTypeName(modelRef));
     }
     return null;

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/readers/parameter/ParameterNameReader.java
Patch:
@@ -43,7 +43,7 @@ public void apply(ParameterContext context) {
     String paramType = findParameterType(context);
     String name = null;
     if (apiParam.isPresent()) {
-      name = ofNullable(apiParam.get().name()).filter(((Predicate<String>)String::isEmpty).negate()).orElse(null);
+      name = ofNullable(apiParam.get().name()).filter(((Predicate<String>) String::isEmpty).negate()).orElse(null);
     }
     context.parameterBuilder().name(maybeOverrideName(name, paramType));
   }

File: springfox-swagger1/src/test/java/springfox/documentation/swagger1/models/ServiceWithAnnotationOnInterface.java
Patch:
@@ -34,7 +34,7 @@ public Object aMethod() {
     }
   }
 
-  public static interface SimpleService {
+  public interface SimpleService {
 
     @ResponseStatus(HttpStatus.CREATED)
     @ApiResponses({

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/configuration/Swagger2JacksonModule.java
Patch:
@@ -103,11 +103,11 @@ private interface PropertyExampleSerializerMixin {
 
     class PropertyExampleSerializer extends StdSerializer<Object> {
 
-      private final static Pattern JSON_NUMBER_PATTERN =
+      private static final Pattern JSON_NUMBER_PATTERN =
           Pattern.compile("-?(?:0|[1-9]\\d*)(?:\\.\\d+)?(?:[eE][+-]?\\d+)?");
 
       @SuppressWarnings("unused")
-      public PropertyExampleSerializer() {
+      PropertyExampleSerializer() {
         this(Object.class);
       }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/InheritanceDeterminer.java
Patch:
@@ -30,19 +30,19 @@
 class InheritanceDeterminer {
   private final Map<String, RefModel> parentLookup = new HashMap<String, RefModel>();
 
-  public InheritanceDeterminer(Map<String, Model> models) {
+  InheritanceDeterminer(Map<String, Model> models) {
     for (Model each : models.values()) {
       for (ModelReference modelReference : nullToEmptyList(each.getSubTypes())) {
         parentLookup.put(modelReference.getType(), toRefModel(each));
       }
     }
   }
 
-  public boolean hasParent(Model model) {
+  boolean hasParent(Model model) {
     return parentLookup.containsKey(model.getName());
   }
 
-  public RefModel parent(Model model) {
+  RefModel parent(Model model) {
     return parentLookup.get(model.getName());
   }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ParameterMapper.java
Patch:
@@ -45,7 +45,7 @@
 @Mapper
 public class ParameterMapper {
 
-  private static final VendorExtensionsMapper vendorMapper = new VendorExtensionsMapper();
+  private static final VendorExtensionsMapper VENDOR_EXTENSIONS_MAPPER = new VendorExtensionsMapper();
 
   public Parameter mapParameter(springfox.documentation.service.Parameter source) {
     Parameter bodyParameter = bodyParameter(source);
@@ -61,7 +61,7 @@ private Parameter bodyParameter(springfox.documentation.service.Parameter source
     parameter.setAccess(source.getParamAccess());
     parameter.setPattern(source.getPattern());
     parameter.setRequired(source.isRequired());
-    parameter.getVendorExtensions().putAll(vendorMapper.mapExtensions(source.getVendorExtentions()));
+    parameter.getVendorExtensions().putAll(VENDOR_EXTENSIONS_MAPPER.mapExtensions(source.getVendorExtentions()));
     for (Entry<String, List<Example>> each : source.getExamples().entrySet()) {
       Optional<Example> example = each.getValue().stream().findFirst();
       if (example.isPresent() && example.get().getValue() != null) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/Properties.java
Patch:
@@ -57,7 +57,7 @@
 import static springfox.documentation.swagger2.mappers.EnumMapper.*;
 
 class Properties {
-  private static final Map<String, Function<String, ? extends Property>> typeFactory
+  private static final Map<String, Function<String, ? extends Property>> TYPE_FACTORY
       = unmodifiableMap(Stream.of(
       new AbstractMap.SimpleEntry<>("int", newInstanceOf(IntegerProperty.class)),
       new AbstractMap.SimpleEntry<>("long", newInstanceOf(LongProperty.class)),
@@ -81,7 +81,7 @@ private Properties() {
 
   public static Property property(final String typeName) {
     String safeTypeName = ofNullable(typeName).orElse("");
-    return typeFactory.getOrDefault(safeTypeName.toLowerCase(), voidOrRef(safeTypeName)).apply(safeTypeName);
+    return TYPE_FACTORY.getOrDefault(safeTypeName.toLowerCase(), voidOrRef(safeTypeName)).apply(safeTypeName);
   }
 
   public static Property property(final ModelReference modelRef) {

File: swagger-contract-tests-webflux/src/main/java/springfox/test/contract/swagger/SwaggerApplication.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
+@SuppressWarnings("HideUtilityClassConstructor")
 public class SwaggerApplication {
   public static void main(String[] args) {
     SpringApplication.run(SwaggerApplication.class, args);

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/Bug1767ListingScanner.java
Patch:
@@ -39,6 +39,7 @@
 
 import static java.util.Collections.*;
 
+@SuppressWarnings({"WhitespaceAround", "ParenPad"})
 public class Bug1767ListingScanner implements ApiListingScannerPlugin {
 
   // tag::api-listing-plugin[]

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/SwaggerApplication.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 @SpringBootApplication
+@SuppressWarnings("HideUtilityClassConstructor")
 public class SwaggerApplication {
   public static void main(String[] args) {
     SpringApplication.run(SwaggerApplication.class, args);

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/data/rest/Person.java
Patch:
@@ -39,14 +39,14 @@ public class Person {
 
   private String firstName;
   private String lastName;
-  
+
   @OneToOne
   @JoinColumn(name = "address_id")
-  @RestResource(path = "personAddress", rel="address")
+  @RestResource(path = "personAddress", rel = "address")
   private Address address;
 
   @ManyToOne
-  @JoinColumn(name="category_id")
+  @JoinColumn(name = "category_id")
   private Category category;
 
   @ManyToMany(mappedBy = "people")

File: springfox-core/src/main/java/springfox/documentation/schema/Enums.java
Patch:
@@ -55,7 +55,7 @@ static List<String> getEnumValues(final Class<?> subject) {
       if (jsonValue.isPresent() && !isEmpty(jsonValue.get())) {
         return jsonValue.get();
       }
-      return input.toString();
+      return ((Enum) input).name();
     });
   }
   @SuppressWarnings("PMD")

File: springfox-schema/src/main/java/springfox/documentation/schema/CachingModelProvider.java
Patch:
@@ -18,6 +18,7 @@
  */
 package springfox.documentation.schema;
 
+import com.fasterxml.classmate.ResolvedType;
 import com.google.common.base.Optional;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
@@ -64,7 +65,7 @@ public Optional<Model> modelFor(ModelContext modelContext) {
   }
 
   @Override
-  public Map<String, Model> dependencies(ModelContext modelContext) {
+  public Map<ResolvedType, Model> dependencies(ModelContext modelContext) {
     return delegate.dependencies(modelContext);
   }
 }

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -122,13 +122,13 @@ private Model modelBuilder(ResolvedType propertiesHost,
   }
 
   @Override
-  public Map<String, Model> dependencies(ModelContext modelContext) {
-    Map<String, Model> models = newHashMap();
+  public Map<ResolvedType, Model> dependencies(ModelContext modelContext) {
+    Map<ResolvedType, Model> models = newHashMap();
     for (ResolvedType resolvedType : dependencyProvider.dependentModels(modelContext)) {
       ModelContext parentContext = ModelContext.fromParent(modelContext, resolvedType);
       Optional<Model> model = modelFor(parentContext).or(mapModel(parentContext, resolvedType));
       if (model.isPresent()) {
-        models.put(model.get().getId(), model.get());
+        models.put(resolvedType, model.get());
       }
     }
     return models;

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelProvider.java
Patch:
@@ -20,12 +20,14 @@
 package springfox.documentation.schema;
 
 
+import com.fasterxml.classmate.ResolvedType;
+
 import springfox.documentation.annotations.Cacheable;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 
 public interface ModelProvider {
   @Cacheable(value = "models")
   com.google.common.base.Optional<Model> modelFor(ModelContext modelContext);
 
-  java.util.Map<String, Model> dependencies(ModelContext modelContext);
+  java.util.Map<ResolvedType, Model> dependencies(ModelContext modelContext);
 }

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyController.java
Patch:
@@ -27,6 +27,6 @@
 public class DummyController {
 
   public void dummyMethod() {
-
+    //just a dummy method for testing
   }
 }

File: springfox-spring-integration-webflux/src/main/java/springfox/documentation/spring/web/plugins/SpringIntegrationWebFluxRequestHandlerProvider.java
Patch:
@@ -19,7 +19,6 @@
 package springfox.documentation.spring.web.plugins;
 
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.integration.webflux.inbound.WebFluxIntegrationRequestMappingHandlerMapping;
 import org.springframework.stereotype.Component;

File: springfox-spring-integration-webmvc/src/main/java/springfox/documentation/spring/web/SpringIntegrationWebMvcRequestHandler.java
Patch:
@@ -37,7 +37,6 @@
 import springfox.documentation.service.ResolvedMethodParameter;
 import springfox.documentation.spring.web.readers.operation.HandlerMethodResolver;
 
-import java.lang.annotation.Annotation;
 import java.util.*;
 
 /**

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyController.java
Patch:
@@ -27,6 +27,6 @@
 public class DummyController {
 
   public void dummyMethod() {
-
+    //just a dummy method for testing
   }
 }

File: swagger-contract-tests-webflux/src/main/java/springfox/test/contract/swagger/listeners/ObjectMapperEventListener.java
Patch:
@@ -29,7 +29,6 @@ public class ObjectMapperEventListener implements ApplicationListener<ObjectMapp
   @Override
   public void onApplicationEvent(ObjectMapperConfigured event) {
     ObjectMapper objectMapper = event.getObjectMapper();
-    objectMapper.configure(com.fasterxml.jackson.databind.SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, true);
     objectMapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);
   }
 

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/Bug1767ListingScanner.java
Patch:
@@ -57,6 +57,7 @@ public List<ApiDescription> apply(DocumentationContext context) {
     return new ArrayList<>(
         Arrays.asList( //<1>
             new ApiDescription(
+                "test",
                 "/bugs/1767",
                 "This is a bug",
                 Collections.singletonList( //<2>

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/listeners/ObjectMapperEventListener.java
Patch:
@@ -29,7 +29,6 @@ public class ObjectMapperEventListener implements ApplicationListener<ObjectMapp
   @Override
   public void onApplicationEvent(ObjectMapperConfigured event) {
     ObjectMapper objectMapper = event.getObjectMapper();
-    objectMapper.configure(com.fasterxml.jackson.databind.SerializationFeature.WRITE_EMPTY_JSON_ARRAYS, true);
     objectMapper.setSerializationInclusion(JsonInclude.Include.ALWAYS);
   }
 

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelContext.java
Patch:
@@ -99,7 +99,7 @@ private ModelContext(ModelContext parentContext, ResolvedType input) {
     this.adjustTypeNames = parentContext.adjustTypeNames;
   }
   
-  ModelContext(ModelContext parentContext, boolean adjustTypeNames) {
+  private ModelContext(ModelContext parentContext, boolean adjustTypeNames) {
     this.parentContext = parentContext;
     this.type = parentContext.type;
     this.groupName = parentContext.groupName;

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterNotNullAnnotationPlugin.java
Patch:
@@ -30,8 +30,6 @@
 
 import javax.validation.constraints.NotNull;
 
-import static springfox.bean.validators.plugins.Validators.*;
-
 @Component
 @Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)
 public class ExpandedParameterNotNullAnnotationPlugin implements ExpandedParameterBuilderPlugin {
@@ -46,7 +44,8 @@ public boolean supports(DocumentationType delimiter) {
 
   @Override
   public void apply(ParameterExpansionContext context) {
-    Optional<NotNull> notNull = validatorFromExpandedParameter(context, NotNull.class);
+
+    Optional<NotNull> notNull = context.findAnnotation(NotNull.class);
 
     if (notNull.isPresent()) {
       LOG.debug("Setting parameter to required because of @NotNull attribute");

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterPatternAnnotationPlugin.java
Patch:
@@ -30,8 +30,6 @@
 
 import javax.validation.constraints.Pattern;
 
-import static springfox.bean.validators.plugins.Validators.*;
-
 @Component
 @Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)
 public class ExpandedParameterPatternAnnotationPlugin implements ExpandedParameterBuilderPlugin {
@@ -46,7 +44,8 @@ public boolean supports(DocumentationType delimiter) {
 
   @Override
   public void apply(ParameterExpansionContext context) {
-    Optional<Pattern> pattern = validatorFromExpandedParameter(context, Pattern.class);
+
+    Optional<Pattern> pattern = context.findAnnotation(Pattern.class);
 
     if (pattern.isPresent()) {
       LOG.debug("@Pattern present: {}", pattern.get().regexp());

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterSizeAnnotationPlugin.java
Patch:
@@ -32,7 +32,6 @@
 import javax.validation.constraints.Size;
 
 import static springfox.bean.validators.plugins.RangeAnnotations.*;
-import static springfox.bean.validators.plugins.Validators.*;
 
 @Component
 @Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)
@@ -48,8 +47,8 @@ public boolean supports(DocumentationType delimiter) {
 
   @Override
   public void apply(ParameterExpansionContext context) {
-    Optional<Size> size = validatorFromExpandedParameter(context, Size.class)
-        .or(validatorFromExpandedParameter(context, Size.class));
+
+    Optional<Size> size = context.findAnnotation(Size.class);
 
     if (size.isPresent()) {
       AllowableRangeValues values = stringLengthRange(size.get());

File: springfox-core/src/main/java/springfox/documentation/PathProvider.java
Patch:
@@ -23,7 +23,7 @@ public interface PathProvider {
 
   /**
    * Gets the application base path
-   * @return
+   * @return application base path
    */
   String getApplicationBasePath();
 

File: springfox-core/src/main/java/springfox/documentation/annotations/ApiIgnore.java
Patch:
@@ -29,6 +29,7 @@
 public @interface ApiIgnore {
   /**
    * A brief description of why this parameter/operation is ignored
+   * @return  the description of why it is ignored
    */
   String value() default "";
 }

File: springfox-core/src/main/java/springfox/documentation/annotations/Incubating.java
Patch:
@@ -33,5 +33,5 @@
    * To keep track of which version this incubating feature was introduced
    * @return version the annotation was introduced
    */
-  String value() default "2.2.0";
+  String value() default "2.9.0";
 }

File: springfox-core/src/main/java/springfox/documentation/builders/ApiInfoBuilder.java
Patch:
@@ -112,7 +112,7 @@ public ApiInfoBuilder contact(Contact contact) {
   /**
    * Updates license information for this API
    *
-   * @param license
+   * @param license licence string
    * @return this
    */
   public ApiInfoBuilder license(String license) {

File: springfox-core/src/main/java/springfox/documentation/builders/ApiListingBuilder.java
Patch:
@@ -188,7 +188,7 @@ public ApiListingBuilder securityReferences(List<SecurityReference> securityRefe
    * Updates the apis
    *
    * @param apis - apis
-   * @return
+   * @return this
    */
   public ApiListingBuilder apis(List<ApiDescription> apis) {
     if (apis != null) {
@@ -234,7 +234,7 @@ public ApiListingBuilder position(int position) {
    * Updates the tags
    *
    * @param tagNames - just the tag names
-   * @return
+   * @return this
    */
   public ApiListingBuilder tagNames(Set<String> tagNames) {
     this.tagNames.addAll(nullToEmptySet(tagNames));

File: springfox-core/src/main/java/springfox/documentation/builders/DocumentationBuilder.java
Patch:
@@ -57,7 +57,7 @@ public class DocumentationBuilder {
    * Name of the documentation group
    *
    * @param groupName - group name
-   * @return
+   * @return this
    */
   public DocumentationBuilder name(String groupName) {
     this.groupName = defaultIfAbsent(groupName, this.groupName);

File: springfox-core/src/main/java/springfox/documentation/builders/OperationBuilder.java
Patch:
@@ -179,7 +179,7 @@ public OperationBuilder protocols(Set<String> protocols) {
    * @param securityReferences - authorization that reference security definitions
    * @return this
    */
-  public OperationBuilder authorizations(List<SecurityReference> securityReferences) {
+  public OperationBuilder authorizations(Collection<SecurityReference> securityReferences) {
     this.securityReferences.addAll(nullToEmptyList(securityReferences));
     return this;
   }

File: springfox-core/src/main/java/springfox/documentation/builders/ResponseMessageBuilder.java
Patch:
@@ -53,7 +53,7 @@ public ResponseMessageBuilder code(int code) {
    * Updates the response message
    *
    * @param message - message
-   * @return
+   * @return this
    */
   public ResponseMessageBuilder message(String message) {
     this.message = defaultIfAbsent(message, this.message);
@@ -74,7 +74,7 @@ public ResponseMessageBuilder responseModel(ModelReference responseModel) {
   /**
    * Updates the response headers
    *
-   * @param headers
+   * @param headers header responses
    * @return this
    * @deprecated Use the {@link ResponseMessageBuilder#headersWithDescription} instead
    * @since 2.5.0
@@ -98,7 +98,7 @@ public Header transformEntry(String key, ModelReference value) {
   /**
    * Updates the response headers
    *
-   * @param headers
+   * @param headers headers with description
    * @return this
    * @since 2.5.0
    */

File: springfox-core/src/main/java/springfox/documentation/builders/TokenEndpointBuilder.java
Patch:
@@ -29,7 +29,7 @@ public class TokenEndpointBuilder {
    * Updates the token endpoint url
    *
    * @param url - url
-   * @return
+   * @return this
    */
   public TokenEndpointBuilder url(String url) {
     this.url = BuilderDefaults.defaultIfAbsent(url, this.url);
@@ -40,7 +40,7 @@ public TokenEndpointBuilder url(String url) {
    * Updates the token name
    *
    * @param tokenName - token name
-   * @return
+   * @return this
    */
   public TokenEndpointBuilder tokenName(String tokenName) {
     this.tokenName = BuilderDefaults.defaultIfAbsent(tokenName, this.tokenName);

File: springfox-core/src/main/java/springfox/documentation/schema/ModelProperty.java
Patch:
@@ -43,7 +43,7 @@ public class ModelProperty {
   private final String description;
   private final AllowableValues allowableValues;
   private ModelReference modelRef;
-  private final String example;
+  private final Object example;
   private final String pattern;
   private final String defaultValue;
   private final Xml xml;
@@ -60,7 +60,7 @@ public ModelProperty(
       Boolean allowEmptyValue,
       String description,
       AllowableValues allowableValues,
-      String example,
+      Object example,
       String pattern,
       String defaultValue,
       Xml xml,
@@ -128,7 +128,7 @@ public ModelProperty updateModelRef(Function<ResolvedType, ? extends ModelRefere
     return this;
   }
 
-  public String getExample() {
+  public Object getExample() {
     return example;
   }
 

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySearchExtractor.java
Patch:
@@ -79,7 +79,7 @@ private ResolvedType inferReturnType(
       TypeResolver resolver) {
     ResolvedType returnType = methodResolver.methodReturnType(handler);
     if (Collections.isContainerType(returnType)) {
-      return resolver.resolve(Resources.class, returnType);
+      return resolver.resolve(Resources.class, Collections.collectionElementType(returnType));
     } else if (Types.isBaseType(returnType)) {
       return returnType;
     }

File: springfox-schema/src/main/java/springfox/documentation/schema/configuration/ModelsConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.plugin.core.config.EnablePluginRegistries;
 import springfox.documentation.spi.schema.ModelBuilderPlugin;
 import springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;
+import springfox.documentation.spi.schema.SyntheticModelProviderPlugin;
 import springfox.documentation.spi.schema.TypeNameProviderPlugin;
 import springfox.documentation.spi.schema.ViewProviderPlugin;
 
@@ -37,6 +38,7 @@
     ModelBuilderPlugin.class,
     ModelPropertyBuilderPlugin.class,
     TypeNameProviderPlugin.class,
+    SyntheticModelProviderPlugin.class,
     ViewProviderPlugin.class,
 })
 public class ModelsConfiguration {

File: springfox-schema/src/main/java/springfox/documentation/schema/configuration/ObjectMapperConfigured.java
Patch:
@@ -29,6 +29,7 @@ public class ObjectMapperConfigured extends ApplicationEvent {
    * Create a new ApplicationEvent.
    *
    * @param source the component that published the event (never {@code null})
+   * @param objectMapper object mapper to send to event consumers
    */
   public ObjectMapperConfigured(Object source, ObjectMapper objectMapper) {
     super(source);

File: springfox-schema/src/main/java/springfox/documentation/schema/property/ObjectMapperBeanPropertyNamingStrategy.java
Patch:
@@ -43,9 +43,6 @@ public class ObjectMapperBeanPropertyNamingStrategy implements BeanPropertyNamin
   private static final Logger LOG = LoggerFactory.getLogger(ObjectMapperBeanPropertyNamingStrategy.class);
   private ObjectMapper objectMapper;
 
-  public ObjectMapperBeanPropertyNamingStrategy() {
-  }
-
   @Override
   public String nameForSerialization(final BeanPropertyDefinition beanProperty) {
 

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelContext.java
Patch:
@@ -57,7 +57,7 @@ public class ModelContext {
 
   private final boolean adjustTypeNames;
 
-  ModelContext(
+  private ModelContext(
       String groupName,
       ResolvedType type,
       boolean returnType,
@@ -83,7 +83,7 @@ public class ModelContext {
     this.adjustTypeNames = false;
   }
 
-  ModelContext(ModelContext parentContext, ResolvedType input) {
+  private ModelContext(ModelContext parentContext, ResolvedType input) {
     this.parentContext = parentContext;
     this.type = input;
     this.groupName = parentContext.groupName;
@@ -261,6 +261,7 @@ public static ModelContext returnValue(
   /**
    * Convenience method to provide an new context for an input parameter
    *
+   * @param context - parent context
    * @param input - context for given input
    * @return new context based on parent context for a given input
    */

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelPropertyContext.java
Patch:
@@ -62,7 +62,7 @@ public ModelPropertyContext(
 
   /**
    * Model property build. Use this to override model property attributes
-   * @return
+   * @return the builder
    */
   public ModelPropertyBuilder getBuilder() {
     return builder;

File: springfox-spi/src/main/java/springfox/documentation/spi/service/DefaultsProviderPlugin.java
Patch:
@@ -29,6 +29,7 @@ public interface DefaultsProviderPlugin extends Plugin<DocumentationType> {
    * .DocumentationContextBuilder
    *
    * @param documentationType - creates a default DocumentationContextBuilder based on documentation type
+   * @return - returns the documentation context builder
    */
   DocumentationContextBuilder create(DocumentationType documentationType);
 }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContext.java
Patch:
@@ -163,6 +163,7 @@ public List<Parameter> getGlobalRequestParameters() {
 
   /**
    * @deprecated  @since 2.2.0 - only here for backward compatibility
+   * @return resource grouping strategy
    */
   @Deprecated
   public ResourceGroupingStrategy getResourceGroupingStrategy() {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -123,7 +123,9 @@ public DocumentationContextBuilder additionalOperationParameters(List<Parameter>
   }
 
   /**
-   @deprecated  @since 2.2.0 - only here for backward compatibility
+   * @deprecated  @since 2.2.0 - only here for backward compatibility
+   * @param resourceGroupingStrategy - custom resource grouping strategy
+   * @return this
    */
   @Deprecated
   public DocumentationContextBuilder withResourceGroupingStrategy(ResourceGroupingStrategy resourceGroupingStrategy) {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/ParameterContext.java
Patch:
@@ -53,7 +53,7 @@ public ResolvedMethodParameter resolvedMethodParameter() {
   }
 
   /**
-   * @return
+   * @return method parameter
    * @since 2.5.0 this has been deprecated
    * @deprecated Use {@link ParameterContext#resolvedMethodParameter()} instead
    */

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/PropertySourcedRequestMappingHandlerMapping.java
Patch:
@@ -102,10 +102,9 @@ protected boolean isHandler(Class<?> beanType) {
    * @param urlPath the path to match.
    * @param request the http servlet request.
    * @return The HandlerMethod if one was found.
-   * @throws Exception
    */
   @Override
-  protected HandlerMethod lookupHandlerMethod(String urlPath, HttpServletRequest request) throws Exception {
+  protected HandlerMethod lookupHandlerMethod(String urlPath, HttpServletRequest request) {
     logger.debug("looking up handler for path: " + urlPath);
     HandlerMethod handlerMethod = handlerMethods.get(urlPath);
     if (handlerMethod != null) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/AbstractPathProvider.java
Patch:
@@ -61,7 +61,7 @@ public String getApplicationBasePath() {
    *
    * Includes the apiResourcePrefix
    *
-   * @param operationPath
+   * @param operationPath operation path
    * @return the relative path to the api operation
    * @see AbstractPathProvider#getApplicationBasePath()
    */

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/Paths.java
Patch:
@@ -82,7 +82,7 @@ public static String firstPathSegment(String path) {
    * A good extension point if you need to alter endpoints by adding or removing path segments.
    * Note: this should not be an absolute  uri
    *
-   * @param requestMappingPattern
+   * @param requestMappingPattern request mapping pattern
    * @return the request mapping endpoint
    */
   public static String sanitizeRequestMappingPattern(String requestMappingPattern) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/QueryStringUriTemplateDecorator.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
 import com.google.common.base.Predicate;
+import com.google.common.collect.Ordering;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
@@ -85,14 +86,14 @@ private Set<String> queryParamNames(PathContext context) {
     return from(context.getParameters())
         .filter(and(queryStringParams(), not(onlyOneAllowableValue())))
         .transform(paramName())
-        .toSet();
+        .toSortedSet(Ordering.natural());
   }
 
   private String prefilledQueryParams(PathContext context) {
     return Joiner.on("&").join(from(context.getParameters())
         .filter(onlyOneAllowableValue())
         .transform(queryStringWithValue())
-        .toSet())
+        .toSortedSet(Ordering.natural()))
         .trim();
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/PathAndParametersEquivalence.java
Patch:
@@ -35,10 +35,11 @@ class PathAndParametersEquivalence extends Equivalence<RequestHandler> {
 
   @Override
   protected boolean doEquivalent(RequestHandler a, RequestHandler b) {
+
     return a.getPatternsCondition().equals(b.getPatternsCondition())
         && !Sets.intersection(a.supportedMethods(), b.supportedMethods()).isEmpty()
         && a.params().equals(b.params())
-        && Sets.difference(wrapped(a.getParameters()), wrapped(b.getParameters())).isEmpty();
+        && Sets.symmetricDifference(wrapped(a.getParameters()), wrapped(b.getParameters())).isEmpty();
   }
 
   private Set<Wrapper<ResolvedMethodParameter>> wrapped(List<ResolvedMethodParameter> parameters) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -98,7 +98,7 @@ private List<Parameter> readParameters(final OperationContext context) {
         if (shouldExpand(methodParameter, alternate)) {
           parameters.addAll(
               expander.expand(
-                  new ExpansionContext("", alternate, context.getDocumentationContext())));
+                  new ExpansionContext("", alternate, context)));
         } else {
           parameters.add(pluginsManager.parameter(parameterContext));
         }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionReader.java
Patch:
@@ -70,6 +70,7 @@ public List<ApiDescription> read(RequestMappingContext outerContext) {
         List<Operation> operations = operationReader.read(operationContext);
         if (operations.size() > 0) {
           operationContext.apiDescriptionBuilder()
+              .groupName(outerContext.getGroupName())
               .operations(operations)
               .pathDecorator(pluginsManager.decorator(new PathContext(outerContext, from(operations).first())))
               .path(path)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiModelReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2016 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -256,4 +256,4 @@ private void markIgnorablesAsHasSeen(TypeResolver typeResolver,
       modelContext.seen(typeResolver.resolve(ignorableParameterType));
     }
   }
-}
+}
\ No newline at end of file

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelProperties.java
Patch:
@@ -64,8 +64,8 @@ public AllowableValues apply(ApiModelProperty annotation) {
 
   public static AllowableValues allowableValueFromString(String allowableValueString) {
     AllowableValues allowableValues = new AllowableListValues(Lists.<String>newArrayList(), "LIST");
-    String trimmed = allowableValueString.trim().replaceAll(" ", "");
-    Matcher matcher = RANGE_PATTERN.matcher(trimmed);
+    String trimmed = allowableValueString.trim();
+    Matcher matcher = RANGE_PATTERN.matcher(trimmed.replaceAll(" ", ""));
     if (matcher.matches()) {
       if (matcher.groupCount() != 4) {
         LOGGER.warn("Unable to parse range specified {} correctly", trimmed);

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/SwaggerResource.java
Patch:
@@ -39,6 +39,7 @@ public void setName(String name) {
   /**
    * Use url going forward rather than location
    * @since 2.8.0
+   * @return url
    */
   @JsonProperty("url")
   public String getUrl() {
@@ -51,6 +52,7 @@ public void setUrl(String url) {
 
   /**
    * @deprecated @since 2.8.0 - Use url going forward
+   * @return location
    */
   @Deprecated
   @JsonProperty("location")

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/configuration/Swagger2DocumentationConfiguration.java
Patch:
@@ -19,27 +19,28 @@
 
 package springfox.documentation.swagger2.configuration;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
 import org.springframework.core.env.Environment;
 import org.springframework.web.servlet.HandlerMapping;
 import springfox.documentation.spring.web.DocumentationCache;
+import springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping;
 import springfox.documentation.spring.web.SpringfoxWebMvcConfiguration;
 import springfox.documentation.spring.web.json.JacksonModuleRegistrar;
 import springfox.documentation.spring.web.json.JsonSerializer;
 import springfox.documentation.swagger.configuration.SwaggerCommonConfiguration;
 import springfox.documentation.swagger2.mappers.ServiceModelToSwagger2Mapper;
-import springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping;
 import springfox.documentation.swagger2.web.Swagger2Controller;
 
 @Configuration
 @Import({ SpringfoxWebMvcConfiguration.class, SwaggerCommonConfiguration.class })
 @ComponentScan(basePackages = {
-    "springfox.documentation.swagger2.readers.parameter",
     "springfox.documentation.swagger2.mappers"
 })
+@ConditionalOnWebApplication
 public class Swagger2DocumentationConfiguration {
   @Bean
   public JacksonModuleRegistrar swagger2Module() {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/DefaultPathProvider.java
Patch:
@@ -25,7 +25,7 @@
 import static springfox.documentation.spring.web.paths.Paths.*;
 
 
-public abstract class DefaultPathProvider implements PathProvider {
+public class DefaultPathProvider implements PathProvider {
 
   /**
    * The base path to the swagger api documentation.

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/paths/WebFluxRelativePathProviderFactory.java
Patch:
@@ -25,6 +25,6 @@
 public class WebFluxRelativePathProviderFactory implements PathProviderFactory {
   @Override
   public PathProvider getInstance() {
-    return new WebFluxRelativePathProvider();
+    return new DefaultPathProvider();
   }
 }

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/paths/WebMvcRelativePathProviderFactory.java
Patch:
@@ -25,6 +25,6 @@
 public class WebMvcRelativePathProviderFactory implements PathProviderFactory {
   @Override
   public PathProvider getInstance() {
-    return new WebMvcRelativePathProvider();
+    return new DefaultPathProvider();
   }
 }

File: springfox-petstore-webflux/src/main/java/springfox/petstore/webflux/controller/PetStoreResource.java
Patch:
@@ -29,7 +29,6 @@
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.ResponseStatus;
 import reactor.core.publisher.Mono;
 import springfox.petstore.webflux.model.Order;
@@ -93,13 +92,13 @@ public Mono<ResponseEntity<String>> deleteOrder(
     return Mono.just(ok(""));
   }
 
-  @RequestMapping(value="search", method = RequestMethod.GET, produces = "application/json", params = "x=TX")
+  @RequestMapping(value="search", method = GET, produces = "application/json", params = "x=TX")
   @ResponseStatus(value = HttpStatus.OK)
   public Mono<ResponseEntity<Pet>> getPetInTx() {
     throw new UnsupportedOperationException();
   }
 
-  @RequestMapping(value="search", method = RequestMethod.GET, produces = "application/json", params = "x=CA")
+  @RequestMapping(value="search", method = GET, produces = "application/json", params = "x=CA")
   @ResponseStatus(value = HttpStatus.OK)
   public Mono<ResponseEntity<Pet>> getPetInCA() {
     throw new UnsupportedOperationException();

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/WebFluxPatternsRequestConditionWrapper.java
Patch:
@@ -23,7 +23,8 @@
 
 import java.util.Set;
 
-public class WebFluxPatternsRequestConditionWrapper implements springfox.documentation.spring.wrapper.PatternsRequestCondition<PatternsRequestCondition> {
+public class WebFluxPatternsRequestConditionWrapper
+        implements springfox.documentation.spring.wrapper.PatternsRequestCondition<PatternsRequestCondition> {
 
     private PatternsRequestCondition condition;
 

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/WebMvcPatternsRequestConditionWrapper.java
Patch:
@@ -23,7 +23,8 @@
 
 import java.util.Set;
 
-public class WebMvcPatternsRequestConditionWrapper implements springfox.documentation.spring.wrapper.PatternsRequestCondition<PatternsRequestCondition> {
+public class WebMvcPatternsRequestConditionWrapper
+        implements springfox.documentation.spring.wrapper.PatternsRequestCondition<PatternsRequestCondition> {
 
     private PatternsRequestCondition condition;
 

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/SpringfoxWebFluxConfiguration.java
Patch:
@@ -26,7 +26,7 @@
 public class SpringfoxWebFluxConfiguration {
 
   @Bean
-  public static ObjectMapperConfigurer objectMapperConfigurer() {
-    return new ObjectMapperConfigurer();
+  public static WebFluxObjectMapperConfigurer objectMapperConfigurer() {
+    return new WebFluxObjectMapperConfigurer();
   }
 }
\ No newline at end of file

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/WebFluxNameValueExpressionWrapper.java
Patch:
@@ -24,20 +24,20 @@
 import java.util.HashSet;
 import java.util.Set;
 
-public class NameValueExpressionWrapper<T> implements NameValueExpression {
+public class WebFluxNameValueExpressionWrapper<T> implements NameValueExpression {
     private org.springframework.web.reactive.result.condition.NameValueExpression<T> e;
 
     public static <T> Set<NameValueExpression<T>> from(Set<org.springframework.web.reactive.result.condition.NameValueExpression<T>> springSet) {
         Set<NameValueExpression<T>> wrapped = new HashSet<NameValueExpression<T>>();
 
         for (org.springframework.web.reactive.result.condition.NameValueExpression e: springSet) {
-            wrapped.add(new NameValueExpressionWrapper<T>(e));
+            wrapped.add(new WebFluxNameValueExpressionWrapper<T>(e));
         }
 
         return wrapped;
     }
 
-    public NameValueExpressionWrapper(org.springframework.web.reactive.result.condition.NameValueExpression<T> e) {
+    public WebFluxNameValueExpressionWrapper(org.springframework.web.reactive.result.condition.NameValueExpression<T> e) {
         this.e = e;
     }
 

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/WebFluxObjectMapperConfigurer.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.List;
 
 
-public class ObjectMapperConfigurer implements BeanPostProcessor, ApplicationEventPublisherAware {
+public class WebFluxObjectMapperConfigurer implements BeanPostProcessor, ApplicationEventPublisherAware {
 
   private ApplicationEventPublisher applicationEventPublisher;
 

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/WebFluxPatternUtil.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-public class PatternUtil {
+public class WebFluxPatternUtil {
 
     public static Set<String> toListString(Set<PathPattern> patterns) {
         Set<String> paths = new HashSet<String>();

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/paths/WebFluxRelativePathProvider.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.spring.web.paths;
 
-public class RelativePathProvider extends AbstractPathProvider {
+public class WebFluxRelativePathProvider extends AbstractPathProvider {
   public static final String ROOT = "/";
 
   @Override

File: springfox-spring-webflux/src/main/java/springfox/documentation/spring/web/paths/WebFluxRelativePathProviderFactory.java
Patch:
@@ -22,9 +22,9 @@
 import springfox.documentation.PathProvider;
 
 @Component
-public class RelativePathProviderFactory implements PathProviderFactory {
+public class WebFluxRelativePathProviderFactory implements PathProviderFactory {
     @Override
     public PathProvider getInstance() {
-        return new RelativePathProvider();
+        return new WebFluxRelativePathProvider();
     }
 }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/SpringDataRestRequestHandler.java
Patch:
@@ -26,7 +26,7 @@
 import springfox.documentation.RequestHandler;
 import springfox.documentation.RequestHandlerKey;
 import springfox.documentation.service.ResolvedMethodParameter;
-import springfox.documentation.spring.web.PatternsRequestConditionWrapper;
+import springfox.documentation.spring.web.WebMvcPatternsRequestConditionWrapper;
 import springfox.documentation.spring.web.plugins.CombinedRequestHandler;
 import springfox.documentation.spring.wrapper.NameValueExpression;
 import springfox.documentation.spring.wrapper.PatternsRequestCondition;
@@ -66,7 +66,7 @@ public boolean isAnnotatedWith(Class<? extends Annotation> annotation) {
 
   @Override
   public PatternsRequestCondition getPatternsCondition() {
-    return new PatternsRequestConditionWrapper(
+    return new WebMvcPatternsRequestConditionWrapper(
             new org.springframework.web.servlet.mvc.condition.PatternsRequestCondition(actionSpecification.getPath())
     );
   }

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/SpringfoxWebMvcConfiguration.java
Patch:
@@ -25,7 +25,7 @@
 @Configuration
 public class SpringfoxWebMvcConfiguration {
   @Bean
-  public static ObjectMapperConfigurer objectMapperConfigurer() {
-    return new ObjectMapperConfigurer();
+  public static WebMvcObjectMapperConfigurer objectMapperConfigurer() {
+    return new WebMvcObjectMapperConfigurer();
   }
 }
\ No newline at end of file

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/WebMvcNameValueExpressionWrapper.java
Patch:
@@ -24,20 +24,20 @@
 import java.util.HashSet;
 import java.util.Set;
 
-public class NameValueExpressionWrapper<T> implements NameValueExpression {
+public class WebMvcNameValueExpressionWrapper<T> implements NameValueExpression {
     private org.springframework.web.servlet.mvc.condition.NameValueExpression<T> e;
 
     public static <T> Set<NameValueExpression<T>> from(Set<org.springframework.web.servlet.mvc.condition.NameValueExpression<T>> springSet) {
         Set<NameValueExpression<T>> wrapped = new HashSet<NameValueExpression<T>>();
 
         for (org.springframework.web.servlet.mvc.condition.NameValueExpression e: springSet) {
-            wrapped.add(new NameValueExpressionWrapper<T>(e));
+            wrapped.add(new WebMvcNameValueExpressionWrapper<T>(e));
         }
 
         return wrapped;
     }
 
-    public NameValueExpressionWrapper(org.springframework.web.servlet.mvc.condition.NameValueExpression<T> e) {
+    public WebMvcNameValueExpressionWrapper(org.springframework.web.servlet.mvc.condition.NameValueExpression<T> e) {
         this.e = e;
     }
 

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/WebMvcObjectMapperConfigurer.java
Patch:
@@ -36,7 +36,7 @@
 
 import static java.util.stream.Collectors.*;
 
-public class ObjectMapperConfigurer implements BeanPostProcessor, ApplicationEventPublisherAware {
+public class WebMvcObjectMapperConfigurer implements BeanPostProcessor, ApplicationEventPublisherAware {
 
   private ApplicationEventPublisher applicationEventPublisher;
 

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/WebMvcPropertySourcedRequestMappingHandlerMapping.java
Patch:
@@ -36,13 +36,13 @@
 
 import static java.util.Optional.*;
 
-public class PropertySourcedRequestMappingHandlerMapping extends RequestMappingHandlerMapping {
+public class WebMvcPropertySourcedRequestMappingHandlerMapping extends RequestMappingHandlerMapping {
 
   private final Map<String, HandlerMethod> handlerMethods = new LinkedHashMap<>();
   private final Environment environment;
   private final Object handler;
 
-  public PropertySourcedRequestMappingHandlerMapping(
+  public WebMvcPropertySourcedRequestMappingHandlerMapping(
       Environment environment,
       Object handler) {
     this.environment = environment;

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/WebMvcRequestMappingInfoWrapper.java
Patch:
@@ -21,11 +21,11 @@
 
 import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
 
-public class RequestMappingInfoWrapper implements springfox.documentation.spring.wrapper.RequestMappingInfo<RequestMappingInfo> {
+public class WebMvcRequestMappingInfoWrapper implements springfox.documentation.spring.wrapper.RequestMappingInfo<RequestMappingInfo> {
 
     private final RequestMappingInfo originalInfo;
 
-    public RequestMappingInfoWrapper(RequestMappingInfo originalInfo) {
+    public WebMvcRequestMappingInfoWrapper(RequestMappingInfo originalInfo) {
         this.originalInfo = originalInfo;
     }
 

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/paths/WebMvcRelativePathProvider.java
Patch:
@@ -24,11 +24,11 @@
 import static org.springframework.util.StringUtils.*;
 
 
-public class RelativePathProvider extends AbstractPathProvider {
+public class WebMvcRelativePathProvider extends AbstractPathProvider {
   private static final String ROOT = "/";
   private final ServletContext servletContext;
 
-  public RelativePathProvider(ServletContext servletContext) {
+  public WebMvcRelativePathProvider(ServletContext servletContext) {
     super();
     this.servletContext = servletContext;
   }

File: springfox-spring-webmvc/src/main/java/springfox/documentation/spring/web/paths/WebMvcRelativePathProviderFactory.java
Patch:
@@ -25,16 +25,16 @@
 import javax.servlet.ServletContext;
 
 @Component
-public class RelativePathProviderFactory implements PathProviderFactory {
+public class WebMvcRelativePathProviderFactory implements PathProviderFactory {
     private final ServletContext servletContext;
 
     @Autowired
-    public RelativePathProviderFactory(ServletContext servletContext) {
+    public WebMvcRelativePathProviderFactory(ServletContext servletContext) {
         this.servletContext = servletContext;
     }
 
     @Override
     public PathProvider getInstance() {
-        return new RelativePathProvider(servletContext);
+        return new WebMvcRelativePathProvider(servletContext);
     }
 }

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/configuration/Swagger1DocumentationConfiguration.java
Patch:
@@ -28,7 +28,7 @@
 import org.springframework.web.servlet.HandlerMapping;
 import springfox.documentation.spi.service.contexts.Defaults;
 import springfox.documentation.spring.web.DocumentationCache;
-import springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping;
+import springfox.documentation.spring.web.WebMvcPropertySourcedRequestMappingHandlerMapping;
 import springfox.documentation.spring.web.SpringfoxWebConfiguration;
 import springfox.documentation.spring.web.SpringfoxWebMvcConfiguration;
 import springfox.documentation.spring.web.json.JacksonModuleRegistrar;
@@ -58,7 +58,7 @@ public HandlerMapping swagger1ControllerMapping(
       DocumentationCache documentationCache,
       ServiceModelToSwaggerMapper mapper,
       JsonSerializer jsonSerializer) {
-    return new PropertySourcedRequestMappingHandlerMapping(
+    return new WebMvcPropertySourcedRequestMappingHandlerMapping(
         environment,
         new Swagger1Controller(documentationCache, mapper, jsonSerializer));
   }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/configuration/Swagger2DocumentationWebMvcConfiguration.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.core.env.Environment;
 import org.springframework.web.servlet.HandlerMapping;
 import springfox.documentation.spring.web.DocumentationCache;
-import springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping;
+import springfox.documentation.spring.web.WebMvcPropertySourcedRequestMappingHandlerMapping;
 import springfox.documentation.spring.web.SpringfoxWebConfiguration;
 import springfox.documentation.spring.web.SpringfoxWebMvcConfiguration;
 import springfox.documentation.spring.web.json.JacksonModuleRegistrar;
@@ -55,7 +55,7 @@ public HandlerMapping swagger2ControllerMapping(
       DocumentationCache documentationCache,
       ServiceModelToSwagger2Mapper mapper,
       JsonSerializer jsonSerializer) {
-    return new PropertySourcedRequestMappingHandlerMapping(
+    return new WebMvcPropertySourcedRequestMappingHandlerMapping(
         environment,
         new Swagger2ControllerWebMvc(environment, documentationCache, mapper, jsonSerializer));
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionReader.java
Patch:
@@ -36,7 +36,6 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
-import java.util.stream.Stream;
 
 import static java.util.Comparator.*;
 import static java.util.stream.Collectors.*;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/annotations/EnableSwagger2WebMvc.java
Patch:
@@ -40,5 +40,6 @@
 @Target(value = { java.lang.annotation.ElementType.TYPE })
 @Documented
 @Import({Swagger2DocumentationWebMvcConfiguration.class})
+@ConditionalOnWebApplication
 public @interface EnableSwagger2WebMvc {
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2ControllerWebMvc.java
Patch:
@@ -55,7 +55,7 @@
 public class Swagger2ControllerWebMvc {
 
   private static final String DEFAULT_URL = "/v2/api-docs";
-  private static final Logger LOGGER = LoggerFactory.getLogger(Swagger2Controller.class);
+  private static final Logger LOGGER = LoggerFactory.getLogger(Swagger2ControllerWebMvc.class);
   private static final String HAL_MEDIA_TYPE = "application/hal+json";
 
   private final String hostNameOverride;

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/RangeAnnotations.java
Patch:
@@ -19,14 +19,14 @@
 
 package springfox.bean.validators.plugins;
 
-import com.google.common.base.Optional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import springfox.documentation.service.AllowableRangeValues;
 
 import javax.validation.constraints.Max;
 import javax.validation.constraints.Min;
 import javax.validation.constraints.Size;
+import java.util.Optional;
 
 public class RangeAnnotations {
   private static final Logger LOG = LoggerFactory.getLogger(RangeAnnotations.class);

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/NotNullAnnotationPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.bean.validators.plugins.parameter;
 
-import com.google.common.base.Optional;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -29,6 +29,7 @@
 import springfox.documentation.spi.service.contexts.ParameterContext;
 
 import javax.validation.constraints.NotNull;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.Validators.*;
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/PatternAnnotationPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.bean.validators.plugins.parameter;
 
-import com.google.common.base.Optional;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -29,6 +29,7 @@
 import springfox.documentation.spi.service.contexts.ParameterContext;
 
 import javax.validation.constraints.Pattern;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.Validators.*;
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/DecimalMinMaxAnnotationPlugin.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2017 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
  */
 package springfox.bean.validators.plugins.schema;
 
-import com.google.common.base.Optional;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -32,6 +32,7 @@
 
 import javax.validation.constraints.DecimalMax;
 import javax.validation.constraints.DecimalMin;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.Validators.*;
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/PatternAnnotationPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.bean.validators.plugins.schema;
 
-import com.google.common.base.Optional;
+
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.bean.validators.plugins.Validators;
@@ -27,6 +27,7 @@
 import springfox.documentation.spi.schema.contexts.ModelPropertyContext;
 
 import javax.validation.constraints.Pattern;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.Validators.*;
 

File: springfox-core/src/main/java/springfox/documentation/PathProvider.java
Patch:
@@ -23,7 +23,7 @@ public interface PathProvider {
 
   /**
    * Gets the application base path
-   * @return
+   * @return application base path
    */
   String getApplicationBasePath();
 

File: springfox-core/src/main/java/springfox/documentation/annotations/ApiIgnore.java
Patch:
@@ -29,6 +29,7 @@
 public @interface ApiIgnore {
   /**
    * A brief description of why this parameter/operation is ignored
+   * @return  the description of why it is ignored
    */
   String value() default "";
 }

File: springfox-core/src/main/java/springfox/documentation/annotations/Incubating.java
Patch:
@@ -33,5 +33,5 @@
    * To keep track of which version this incubating feature was introduced
    * @return version the annotation was introduced
    */
-  String value() default "2.2.0";
+  String value() default "2.9.0";
 }

File: springfox-core/src/main/java/springfox/documentation/builders/AlternateTypeBuilder.java
Patch:
@@ -27,12 +27,12 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static com.google.common.collect.Lists.*;
+
 
 @Incubating("2.7.0")
 public class AlternateTypeBuilder {
   private String fullyQualifiedClassName;
-  private List<AlternateTypePropertyBuilder> properties = newArrayList();
+  private List<AlternateTypePropertyBuilder> properties = new ArrayList<>();
   private List<Annotation> annotations = new ArrayList<Annotation>();
 
   public AlternateTypeBuilder fullyQualifiedClassName(String fullyQualifiedClassName) {

File: springfox-core/src/main/java/springfox/documentation/builders/TokenEndpointBuilder.java
Patch:
@@ -29,7 +29,7 @@ public class TokenEndpointBuilder {
    * Updates the token endpoint url
    *
    * @param url - url
-   * @return
+   * @return this
    */
   public TokenEndpointBuilder url(String url) {
     this.url = BuilderDefaults.defaultIfAbsent(url, this.url);
@@ -40,7 +40,7 @@ public TokenEndpointBuilder url(String url) {
    * Updates the token name
    *
    * @param tokenName - token name
-   * @return
+   * @return this
    */
   public TokenEndpointBuilder tokenName(String tokenName) {
     this.tokenName = BuilderDefaults.defaultIfAbsent(tokenName, this.tokenName);

File: springfox-core/src/main/java/springfox/documentation/schema/ModelReference.java
Patch:
@@ -19,9 +19,10 @@
 
 package springfox.documentation.schema;
 
-import com.google.common.base.Optional;
 import springfox.documentation.service.AllowableValues;
 
+import java.util.Optional;
+
 public interface ModelReference {
   String getType();
 

File: springfox-core/src/test/groovy/springfox/documentation/builders/MockRequestHandler.java
Patch:
@@ -19,7 +19,6 @@
 package springfox.documentation.builders;
 
 import com.fasterxml.classmate.ResolvedType;
-import com.google.common.base.Optional;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -34,6 +33,7 @@
 
 import java.lang.annotation.Annotation;
 import java.util.List;
+import java.util.Optional;
 import java.util.Set;
 
 public class MockRequestHandler implements RequestHandler {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationOperationsExtractor.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityOperationsExtractor.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/RequestHandlerExtractorConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelProvider.java
Patch:
@@ -23,9 +23,11 @@
 import springfox.documentation.annotations.Cacheable;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 
+import java.util.Optional;
+
 public interface ModelProvider {
   @Cacheable(value = "models")
-  com.google.common.base.Optional<Model> modelFor(ModelContext modelContext);
+  Optional<Model> modelFor(ModelContext modelContext);
 
   java.util.Map<String, Model> dependencies(ModelContext modelContext);
 }

File: springfox-schema/src/main/java/springfox/documentation/schema/TypeNameExtractor.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@
 
 import java.lang.reflect.Type;
 
-import static com.google.common.base.Optional.*;
+import static java.util.Optional.*;
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Types.*;
 
@@ -74,7 +74,7 @@ private String genericTypeName(ResolvedType resolvedType, ModelContext context)
     Class<?> erasedType = resolvedType.getErasedType();
     GenericTypeNamingStrategy namingStrategy = context.getGenericNamingStrategy();
     ModelNameContext nameContext = new ModelNameContext(resolvedType.getErasedType(), context.getDocumentationType());
-    String simpleName = fromNullable(typeNameFor(erasedType)).or(typeName(nameContext));
+    String simpleName = ofNullable(typeNameFor(erasedType)).orElse(typeName(nameContext));
     StringBuilder sb = new StringBuilder(String.format("%s%s", simpleName, namingStrategy.getOpenGeneric()));
     boolean first = true;
     for (int index = 0; index < erasedType.getTypeParameters().length; index++) {

File: springfox-schema/src/main/java/springfox/documentation/schema/configuration/ModelsConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.plugin.core.config.EnablePluginRegistries;
 import springfox.documentation.spi.schema.ModelBuilderPlugin;
 import springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;
+import springfox.documentation.spi.schema.SyntheticModelProviderPlugin;
 import springfox.documentation.spi.schema.TypeNameProviderPlugin;
 
 @Configuration
@@ -35,7 +36,8 @@
 @EnablePluginRegistries({
     ModelBuilderPlugin.class,
     ModelPropertyBuilderPlugin.class,
-    TypeNameProviderPlugin.class
+    TypeNameProviderPlugin.class,
+    SyntheticModelProviderPlugin.class
 })
 public class ModelsConfiguration {
   @Bean

File: springfox-schema/src/main/java/springfox/documentation/schema/configuration/ObjectMapperConfigured.java
Patch:
@@ -29,6 +29,7 @@ public class ObjectMapperConfigured extends ApplicationEvent {
    * Create a new ApplicationEvent.
    *
    * @param source the component that published the event (never {@code null})
+   * @param objectMapper object mapper to send to event consumers
    */
   public ObjectMapperConfigured(Object source, ObjectMapper objectMapper) {
     super(source);

File: springfox-spi/src/main/java/springfox/documentation/service/PathDecorator.java
Patch:
@@ -18,12 +18,14 @@
  */
 package springfox.documentation.service;
 
-import com.google.common.base.Function;
+
 import org.springframework.plugin.core.Plugin;
 import springfox.documentation.annotations.Incubating;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.PathContext;
 
+import java.util.function.Function;
+
 /**
  * Path decorator is useful to create transformations from a given path based on
  * the RequestMappingContext. This is an experimental feature

File: springfox-spi/src/main/java/springfox/documentation/spi/service/DefaultsProviderPlugin.java
Patch:
@@ -29,6 +29,7 @@ public interface DefaultsProviderPlugin extends Plugin<DocumentationType> {
    * .DocumentationContextBuilder
    *
    * @param documentationType - creates a default DocumentationContextBuilder based on documentation type
+   * @return - returns the documentation context builder
    */
   DocumentationContextBuilder create(DocumentationType documentationType);
 }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/RequestHandlerCombiner.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-config/src/main/java/springfox/springconfig/VersionApi.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-config/src/main/java/springfox/springconfig/VersionApiReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 package springfox.springconfig;
 
 import com.fasterxml.classmate.TypeResolver;
-import com.google.common.base.Optional;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.service.ResolvedMethodParameter;
@@ -28,6 +27,8 @@
 import springfox.documentation.spi.service.contexts.ParameterContext;
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
+import java.util.Optional;
+
 // tag::parameter-builder-plugin[]
 @Component
 @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER + 1000) //<1>

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/DocumentationCache.java
Patch:
@@ -22,12 +22,11 @@
 import springfox.documentation.service.Documentation;
 
 import java.util.Collections;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
-import static com.google.common.collect.Maps.*;
-
 public class DocumentationCache {
-  private Map<String, Documentation> documentationLookup = newLinkedHashMap();
+  private Map<String, Documentation> documentationLookup = new LinkedHashMap();
 
   public void addDocumentation(Documentation documentation) {
     documentationLookup.put(documentation.getGroupName(), documentation);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/PropertySourcedMapping.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/SpringGroupingStrategy.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 
 import java.util.Set;
 
-import static com.google.common.collect.Sets.*;
+import static java.util.Collections.*;
 import static springfox.documentation.spring.web.paths.Paths.*;
 
 /**
@@ -61,7 +61,7 @@ public boolean supports(DocumentationType delimiter) {
   private Set<ResourceGroup> groups(HandlerMethod handlerMethod) {
     Class<?> controllerClazz = handlerMethod.getBeanType();
     String controllerAsGroup = splitCamelCase(controllerClazz.getSimpleName(), "-").toLowerCase();
-    return newHashSet(new ResourceGroup(controllerAsGroup, controllerClazz));
+    return singleton(new ResourceGroup(controllerAsGroup, controllerClazz));
   }
 
   private String getDescription(Class<?> controllerClass) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/AbstractPathProvider.java
Patch:
@@ -61,7 +61,7 @@ public String getApplicationBasePath() {
    *
    * Includes the apiResourcePrefix
    *
-   * @param operationPath
+   * @param operationPath operation path
    * @return the relative path to the api operation
    * @see AbstractPathProvider#getApplicationBasePath()
    */

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/OperationPathDecorator.java
Patch:
@@ -18,13 +18,15 @@
  */
 package springfox.documentation.spring.web.paths;
 
-import com.google.common.base.Function;
+
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.service.PathDecorator;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.PathContext;
 
+import java.util.function.Function;
+
 @Component
 @Order
 class OperationPathDecorator implements PathDecorator {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/PathMappingAdjuster.java
Patch:
@@ -33,7 +33,7 @@ public PathMappingAdjuster(DocumentationContext context) {
   @Override
   public String adjustedPath(String path) {
     return UriComponentsBuilder
-        .fromPath(this.context.getPathMapping().or("/"))
+        .fromPath(this.context.getPathMapping().orElse("/"))
         .path(path)
         .build()
         .toUriString();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/PathMappingDecorator.java
Patch:
@@ -19,14 +19,16 @@
 
 package springfox.documentation.spring.web.paths;
 
-import com.google.common.base.Function;
+
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.service.PathDecorator;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.PathContext;
 
+import java.util.function.Function;
+
 @Component
 @Order(value = Ordered.HIGHEST_PRECEDENCE + 40)
 class PathMappingDecorator implements PathDecorator {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/PathSanitizer.java
Patch:
@@ -18,14 +18,16 @@
  */
 package springfox.documentation.spring.web.paths;
 
-import com.google.common.base.Function;
+
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.service.PathDecorator;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.PathContext;
 
+import java.util.function.Function;
+
 import static springfox.documentation.spring.web.paths.Paths.*;
 
 @Component

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationDeprecatedReader.java
Patch:
@@ -19,14 +19,16 @@
 
 package springfox.documentation.spring.web.readers.operation;
 
-import com.google.common.base.Optional;
+
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
 
+import java.util.Optional;
+
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
 public class OperationDeprecatedReader implements OperationBuilderPlugin {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationModelsProvider.java
Patch:
@@ -73,7 +73,7 @@ public boolean supports(DocumentationType delimiter) {
   private void collectFromReturnType(RequestMappingContext context) {
     ResolvedType modelType = context.getReturnType();
     modelType = context.alternateFor(modelType);
-    LOG.debug("Adding return parameter of type {}", resolvedTypeSignature(modelType).or("<null>"));
+    LOG.debug("Adding return parameter of type {}", resolvedTypeSignature(modelType).orElse("<null>"));
     context.operationModelsBuilder().addReturn(modelType);
   }
 
@@ -87,7 +87,7 @@ private void collectParameters(RequestMappingContext context) {
         if (parameterType.hasParameterAnnotation(RequestBody.class)
             || parameterType.hasParameterAnnotation(RequestPart.class)) {
           ResolvedType modelType = context.alternateFor(parameterType.getParameterType());
-          LOG.debug("Adding input parameter of type {}", resolvedTypeSignature(modelType).or("<null>"));
+          LOG.debug("Adding input parameter of type {}", resolvedTypeSignature(modelType).orElse("<null>"));
           context.operationModelsBuilder().addInputParam(modelType);
         }
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationResponseClassReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2018 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDataTypeReader.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
-import com.google.common.base.Optional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -39,6 +38,7 @@
 import springfox.documentation.spi.service.ParameterBuilderPlugin;
 import springfox.documentation.spi.service.contexts.ParameterContext;
 
+import static java.util.Optional.*;
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Maps.*;
 import static springfox.documentation.schema.ResolvedTypes.*;
@@ -101,8 +101,8 @@ public void apply(ParameterContext context) {
         context.getIgnorableParameterTypes());
     context.parameterBuilder()
         .type(parameterType)
-        .modelRef(Optional.fromNullable(modelRef)
-            .or(modelRefFactory(modelContext, nameExtractor).apply(parameterType)));
+        .modelRef(ofNullable(modelRef)
+            .orElse(modelRefFactory(modelContext, nameExtractor).apply(parameterType)));
   }
 
   private boolean treatRequestParamAsString(ResolvedType parameterType) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDefaultReader.java
Patch:
@@ -19,7 +19,6 @@
 
 package springfox.documentation.spring.web.readers.parameter;
 
-import com.google.common.base.Optional;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
@@ -33,6 +32,8 @@
 import springfox.documentation.spi.service.contexts.ParameterContext;
 import springfox.documentation.spring.web.DescriptionResolver;
 
+import java.util.Optional;
+
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
 public class ParameterDefaultReader implements ParameterBuilderPlugin {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionLookup.java
Patch:
@@ -24,18 +24,17 @@
 import springfox.documentation.annotations.Incubating;
 import springfox.documentation.service.ApiDescription;
 
+import java.util.HashMap;
 import java.util.Map;
 
-import static com.google.common.collect.Maps.*;
-
 /**
  * Given a handler method this class serves to lookup the api description. The overall goal of this abstraction is to
  * serve the purpose of looking up a given description.
  */
 @Component
 @Incubating("2.2.0")
 public class ApiDescriptionLookup {
-  private Map<RequestHandlerKey, ApiDescription> cache = newHashMap();
+  private Map<RequestHandlerKey, ApiDescription> cache = new HashMap<>();
 
   public void add(RequestHandlerKey key, ApiDescription value) {
     cache.put(key, value);

File: springfox-core/src/main/java/springfox/documentation/common/Version.java
Patch:
@@ -37,7 +37,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package springfox.documentation.swagger.common;
+package springfox.documentation.common;
 
 import org.springframework.util.Assert;
 import org.springframework.util.StringUtils;

File: springfox-core/src/main/java/springfox/documentation/common/Version.java
Patch:
@@ -37,7 +37,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package springfox.documentation.swagger.common;
+package springfox.documentation.common;
 
 import org.springframework.util.Assert;
 import org.springframework.util.StringUtils;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -135,7 +135,9 @@ protected Map<String, Response> mapResponseMessages(Set<ResponseMessage> from) {
       Response response = new Response()
           .description(responseMessage.getMessage())
           .schema(responseProperty);
-      response.setExamples(new HashMap<>());
+      Map<String, Object> examples = new ExamplesMapper()
+              .mapExamples(responseMessage.getExamples());
+      response.setExamples(examples);
       response.setHeaders(responseMessage.getHeaders().entrySet().stream().map(toPropertyEntry())
           .collect(toMap(Map.Entry::getKey, Map.Entry::getValue)));
       Map<String, Object> extensions = new VendorExtensionsMapper()

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationDeleteExtractor.java
Patch:
@@ -53,7 +53,7 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
         .supportsMethod(DELETE)
         .consumes(TEXT_URI_LIST)
         .consumes(SPRING_DATA_COMPACT_JSON)
-        .withParameter(Parameter.ID)
+        .withParameterType(ParameterType.ID)
         .build()
         .map(delete -> new SpringDataRestRequestHandler(context.getEntityContext(), delete))
         .ifPresent(handlers::add);

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationGetExtractor.java
Patch:
@@ -52,7 +52,7 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
     associationAction(context, path)
         .supportsMethod(GET)
         .produces(HAL_JSON)
-        .withParameter(Parameter.ID)
+        .withParameterType(ParameterType.ID)
         .build()
         .map(get -> new SpringDataRestRequestHandler(context.getEntityContext(), get))
         .ifPresent(handlers::add);

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationItemDeleteExtractor.java
Patch:
@@ -29,7 +29,7 @@
 import static org.springframework.data.rest.webmvc.RestMediaTypes.*;
 import static org.springframework.web.bind.annotation.RequestMethod.*;
 import static springfox.documentation.spring.data.rest.RequestExtractionUtils.*;
-import static springfox.documentation.spring.data.rest.SpecificationBuilder.Parameter.*;
+import static springfox.documentation.spring.data.rest.SpecificationBuilder.ParameterType.*;
 import static springfox.documentation.spring.data.rest.SpecificationBuilder.*;
 
 public class EntityAssociationItemDeleteExtractor implements EntityAssociationOperationsExtractor {
@@ -58,8 +58,8 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
           .supportsMethod(DELETE)
           .consumes(TEXT_URI_LIST)
           .consumes(SPRING_DATA_COMPACT_JSON)
-          .withParameter(ID)
-          .withParameter(ITEM)
+          .withParameterType(ID)
+          .withParameterType(ITEM)
           .build()
           .map(deleteItem -> new SpringDataRestRequestHandler(context.getEntityContext(), deleteItem))
           .ifPresent(handlers::add);

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationItemGetExtractor.java
Patch:
@@ -29,7 +29,7 @@
 import static org.springframework.data.rest.webmvc.RestMediaTypes.*;
 import static org.springframework.web.bind.annotation.RequestMethod.*;
 import static springfox.documentation.spring.data.rest.RequestExtractionUtils.*;
-import static springfox.documentation.spring.data.rest.SpecificationBuilder.Parameter.*;
+import static springfox.documentation.spring.data.rest.SpecificationBuilder.ParameterType.*;
 import static springfox.documentation.spring.data.rest.SpecificationBuilder.*;
 
 public class EntityAssociationItemGetExtractor implements EntityAssociationOperationsExtractor {
@@ -57,8 +57,8 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
       associationAction(context, path)
           .supportsMethod(GET)
           .consumes(HAL_JSON)
-          .withParameter(ID)
-          .withParameter(ITEM)
+          .withParameterType(ID)
+          .withParameterType(ITEM)
           .build()
           .map(getPropertyItem -> new SpringDataRestRequestHandler(context.getEntityContext(), getPropertyItem))
           .ifPresent(handlers::add);

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationSaveExtractor.java
Patch:
@@ -59,8 +59,8 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
               .supportsMethod(POST)
               .consumes(TEXT_URI_LIST)
               .consumes(SPRING_DATA_COMPACT_JSON)
-              .withParameter(Parameter.ID)
-              .withParameter(Parameter.BODY)
+              .withParameterType(ParameterType.ID)
+              .withParameterType(ParameterType.BODY)
               .build()
               .map(update -> new SpringDataRestRequestHandler(context.getEntityContext(), update))
               .ifPresent(handlers::add);

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityDeleteExtractor.java
Patch:
@@ -42,7 +42,7 @@ public List<RequestHandler> extract(EntityContext context) {
                   context.basePath(),
                   context.resourcePath()))
               .supportsMethod(DELETE)
-              .withParameter(Parameter.ID)
+              .withParameterType(ParameterType.ID)
               .build()
               .map(get -> new SpringDataRestRequestHandler(context, get))
               .ifPresent(handlers::add);

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityFindAllExtractor.java
Patch:
@@ -45,7 +45,7 @@ public List<RequestHandler> extract(EntityContext context) {
               .produces(HAL_JSON)
               .produces(SPRING_DATA_COMPACT_JSON)
               .produces(TEXT_URI_LIST)
-              .withParameter(Parameter.PAGEABLE)
+              .withParameterType(ParameterType.PAGEABLE)
               .build()
               .map(get -> new SpringDataRestRequestHandler(context, get))
               .ifPresent(handlers::add);

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityFindOneExtractor.java
Patch:
@@ -42,7 +42,7 @@ public List<RequestHandler> extract(EntityContext context) {
                   context.basePath(),
                   context.resourcePath()))
               .supportsMethod(GET)
-              .withParameter(Parameter.ID)
+              .withParameterType(ParameterType.ID)
               .build()
               .map(get -> new SpringDataRestRequestHandler(context, get))
               .ifPresent(handlers::add);

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySaveExtractor.java
Patch:
@@ -43,15 +43,15 @@ public List<RequestHandler> extract(EntityContext context) {
                   context.resourcePath()))
               .supportsMethod(PUT)
               .supportsMethod(PATCH)
-              .withParameter(Parameter.ID)
-              .withParameter(Parameter.BODY)
+              .withParameterType(ParameterType.ID)
+              .withParameterType(ParameterType.BODY)
               .build()
               .map(put -> new SpringDataRestRequestHandler(context, put))
               .ifPresent(handlers::add);
 
           entityAction(context, handler)
               .supportsMethod(POST)
-              .withParameter(Parameter.BODY)
+              .withParameterType(ParameterType.BODY)
               .build()
               .map(post -> new SpringDataRestRequestHandler(context, post))
               .ifPresent(handlers::add);

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityContext.java
Patch:
@@ -73,7 +73,7 @@ public String getName() {
     return resource.getDomainType().getSimpleName();
   }
 
-  public Optional<PersistentEntity<?, ? extends PersistentProperty<?>> entity() {
+  public Optional<PersistentEntity<?, ? extends PersistentProperty<?>>> entity() {
     return entities.getPersistentEntity(resource.getDomainType());
   }
 

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/SpecificationBuilder.java
Patch:
@@ -251,7 +251,7 @@ private static List<ResolvedMethodParameter> transferResolvedMethodParameterList
     }
 
     private static ResolvedMethodParameter transferResolvedMethodParameter(ResolvedMethodParameter src) {
-      com.google.common.base.Optional<Param> param = src.findAnnotation(Param.class);
+      Optional<Param> param = src.findAnnotation(Param.class);
       if (param.isPresent()) {
         return src.annotate(SynthesizedAnnotations.requestParam(param.get().value()));
       }

File: springfox-schema/src/main/java/springfox/documentation/schema/property/OptimizedModelPropertiesProvider.java
Patch:
@@ -130,7 +130,7 @@ private List<ModelProperty> propertiesFor(ResolvedType type, ModelContext givenC
       LOG.debug("Reading property {}", each.getKey());
       BeanPropertyDefinition jacksonProperty = each.getValue();
       Optional<AnnotatedMember> annotatedMember
-          = ofNullable(safeGetPrimaryMember(jacksonProperty));
+          = ofNullable(safeGetPrimaryMember(jacksonProperty, givenContext));
       annotatedMember.ifPresent(
           member -> properties.addAll(
               candidateProperties(

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/RangeAnnotations.java
Patch:
@@ -19,14 +19,14 @@
 
 package springfox.bean.validators.plugins;
 
-import com.google.common.base.Optional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import springfox.documentation.service.AllowableRangeValues;
 
 import javax.validation.constraints.Max;
 import javax.validation.constraints.Min;
 import javax.validation.constraints.Size;
+import java.util.Optional;
 
 public class RangeAnnotations {
   private static final Logger LOG = LoggerFactory.getLogger(RangeAnnotations.class);

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterMinMaxAnnotationPlugin.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2017 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -18,7 +18,6 @@
  */
 package springfox.bean.validators.plugins.parameter;
 
-import com.google.common.base.Optional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -31,6 +30,7 @@
 
 import javax.validation.constraints.Max;
 import javax.validation.constraints.Min;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.RangeAnnotations.*;
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterNotNullAnnotationPlugin.java
Patch:
@@ -18,7 +18,6 @@
  */
 package springfox.bean.validators.plugins.parameter;
 
-import com.google.common.base.Optional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -29,6 +28,7 @@
 import springfox.documentation.spi.service.contexts.ParameterExpansionContext;
 
 import javax.validation.constraints.NotNull;
+import java.util.Optional;
 
 @Component
 @Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterPatternAnnotationPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.bean.validators.plugins.parameter;
 
-import com.google.common.base.Optional;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -29,6 +29,7 @@
 import springfox.documentation.spi.service.contexts.ParameterExpansionContext;
 
 import javax.validation.constraints.Pattern;
+import java.util.Optional;
 
 @Component
 @Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterSizeAnnotationPlugin.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2017 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -18,7 +18,6 @@
  */
 package springfox.bean.validators.plugins.parameter;
 
-import com.google.common.base.Optional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -30,6 +29,7 @@
 import springfox.documentation.spi.service.contexts.ParameterExpansionContext;
 
 import javax.validation.constraints.Size;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.RangeAnnotations.*;
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/MinMaxAnnotationPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.bean.validators.plugins.parameter;
 
-import com.google.common.base.Optional;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -31,6 +31,7 @@
 
 import javax.validation.constraints.Max;
 import javax.validation.constraints.Min;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.RangeAnnotations.*;
 import static springfox.bean.validators.plugins.Validators.*;

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/NotNullAnnotationPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.bean.validators.plugins.parameter;
 
-import com.google.common.base.Optional;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -29,6 +29,7 @@
 import springfox.documentation.spi.service.contexts.ParameterContext;
 
 import javax.validation.constraints.NotNull;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.Validators.*;
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/PatternAnnotationPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.bean.validators.plugins.parameter;
 
-import com.google.common.base.Optional;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -29,6 +29,7 @@
 import springfox.documentation.spi.service.contexts.ParameterContext;
 
 import javax.validation.constraints.Pattern;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.Validators.*;
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/SizeAnnotationPlugin.java
Patch:
@@ -18,7 +18,6 @@
  */
 package springfox.bean.validators.plugins.parameter;
 
-import com.google.common.base.Optional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -30,6 +29,7 @@
 import springfox.documentation.spi.service.contexts.ParameterContext;
 
 import javax.validation.constraints.Size;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.RangeAnnotations.*;
 import static springfox.bean.validators.plugins.Validators.*;

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/DecimalMinMaxAnnotationPlugin.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2017 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
  */
 package springfox.bean.validators.plugins.schema;
 
-import com.google.common.base.Optional;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
@@ -32,6 +32,7 @@
 
 import javax.validation.constraints.DecimalMax;
 import javax.validation.constraints.DecimalMin;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.Validators.*;
 

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/PatternAnnotationPlugin.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.bean.validators.plugins.schema;
 
-import com.google.common.base.Optional;
+
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.bean.validators.plugins.Validators;
@@ -27,6 +27,7 @@
 import springfox.documentation.spi.schema.contexts.ModelPropertyContext;
 
 import javax.validation.constraints.Pattern;
+import java.util.Optional;
 
 import static springfox.bean.validators.plugins.Validators.*;
 

File: springfox-core/src/main/java/springfox/documentation/builders/AlternateTypeBuilder.java
Patch:
@@ -27,12 +27,12 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static com.google.common.collect.Lists.*;
+
 
 @Incubating("2.7.0")
 public class AlternateTypeBuilder {
   private String fullyQualifiedClassName;
-  private List<AlternateTypePropertyBuilder> properties = newArrayList();
+  private List<AlternateTypePropertyBuilder> properties = new ArrayList<>();
   private List<Annotation> annotations = new ArrayList<Annotation>();
 
   public AlternateTypeBuilder fullyQualifiedClassName(String fullyQualifiedClassName) {

File: springfox-core/src/main/java/springfox/documentation/schema/ModelReference.java
Patch:
@@ -19,9 +19,10 @@
 
 package springfox.documentation.schema;
 
-import com.google.common.base.Optional;
 import springfox.documentation.service.AllowableValues;
 
+import java.util.Optional;
+
 public interface ModelReference {
   String getType();
 

File: springfox-core/src/main/java/springfox/documentation/service/ApiInfo.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Collection;
 import java.util.List;
 
-import static com.google.common.collect.Lists.newArrayList;
+
 
 public class ApiInfo {
 
@@ -91,7 +91,7 @@ public ApiInfo(
     this.contact = contact;
     this.license = license;
     this.licenseUrl = licenseUrl;
-    this.vendorExtensions = newArrayList(vendorExtensions);
+    this.vendorExtensions = new ArrayList(vendorExtensions);
   }
 
   public String getTitle() {

File: springfox-core/src/test/groovy/springfox/documentation/builders/MockRequestHandler.java
Patch:
@@ -19,7 +19,6 @@
 package springfox.documentation.builders;
 
 import com.fasterxml.classmate.ResolvedType;
-import com.google.common.base.Optional;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -33,6 +32,7 @@
 
 import java.lang.annotation.Annotation;
 import java.util.List;
+import java.util.Optional;
 import java.util.Set;
 
 public class MockRequestHandler implements RequestHandler {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationContext.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationOperationsExtractor.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityOperationsExtractor.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/OptionalDeferencer.java
Patch:
@@ -27,9 +27,7 @@ public class OptionalDeferencer<T> implements Converter<Object, T> {
   @Override
   public T convert(Object source) {
     if (source instanceof Optional) {
-      if (((Optional<T>)source).isPresent()) {
-        return ((Optional<T>)source).get();
-      }
+      return ((Optional<T>) source).orElse(null);
     }
     return (T) source;
   }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/RequestHandlerExtractorConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelProvider.java
Patch:
@@ -23,9 +23,11 @@
 import springfox.documentation.annotations.Cacheable;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 
+import java.util.Optional;
+
 public interface ModelProvider {
   @Cacheable(value = "models")
-  com.google.common.base.Optional<Model> modelFor(ModelContext modelContext);
+  Optional<Model> modelFor(ModelContext modelContext);
 
   java.util.Map<String, Model> dependencies(ModelContext modelContext);
 }

File: springfox-schema/src/main/java/springfox/documentation/schema/TypeNameExtractor.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@
 
 import java.lang.reflect.Type;
 
-import static com.google.common.base.Optional.*;
+import static java.util.Optional.*;
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Types.*;
 
@@ -74,7 +74,7 @@ private String genericTypeName(ResolvedType resolvedType, ModelContext context)
     Class<?> erasedType = resolvedType.getErasedType();
     GenericTypeNamingStrategy namingStrategy = context.getGenericNamingStrategy();
     ModelNameContext nameContext = new ModelNameContext(resolvedType.getErasedType(), context.getDocumentationType());
-    String simpleName = fromNullable(typeNameFor(erasedType)).or(typeName(nameContext));
+    String simpleName = ofNullable(typeNameFor(erasedType)).orElse(typeName(nameContext));
     StringBuilder sb = new StringBuilder(String.format("%s%s", simpleName, namingStrategy.getOpenGeneric()));
     boolean first = true;
     for (int index = 0; index < erasedType.getTypeParameters().length; index++) {

File: springfox-schema/src/main/java/springfox/documentation/schema/plugins/XmlModelPlugin.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-schema/src/main/java/springfox/documentation/schema/property/BeanPropertyDefinitions.java
Patch:
@@ -23,7 +23,9 @@
 import com.fasterxml.jackson.databind.cfg.MapperConfig;
 import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
 import com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder;
-import com.google.common.base.Function;
+
+import java.util.function.Function;
+
 
 public class BeanPropertyDefinitions {
   private BeanPropertyDefinitions() {

File: springfox-spi/src/main/java/springfox/documentation/service/PathDecorator.java
Patch:
@@ -18,12 +18,14 @@
  */
 package springfox.documentation.service;
 
-import com.google.common.base.Function;
+
 import org.springframework.plugin.core.Plugin;
 import springfox.documentation.annotations.Incubating;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.PathContext;
 
+import java.util.function.Function;
+
 /**
  * Path decorator is useful to create transformations from a given path based on
  * the RequestMappingContext. This is an experimental feature

File: springfox-spi/src/main/java/springfox/documentation/spi/service/ParameterMetadataAccessor.java
Patch:
@@ -19,9 +19,9 @@
 package springfox.documentation.spi.service;
 
 import com.fasterxml.classmate.ResolvedType;
-import com.google.common.base.Optional;
 
 import java.lang.annotation.Annotation;
+import java.util.Optional;
 
 public interface ParameterMetadataAccessor {
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/RequestHandlerCombiner.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/ParameterExpansionContext.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2018 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -22,12 +22,12 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.members.ResolvedField;
-import com.google.common.base.Optional;
 import springfox.documentation.builders.ParameterBuilder;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.ParameterMetadataAccessor;
 
 import java.lang.annotation.Annotation;
+import java.util.Optional;
 
 public class ParameterExpansionContext {
 

File: springfox-spring-config/src/main/java/springfox/springconfig/VersionApi.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-config/src/main/java/springfox/springconfig/VersionApiReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -19,7 +19,6 @@
 package springfox.springconfig;
 
 import com.fasterxml.classmate.TypeResolver;
-import com.google.common.base.Optional;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.service.ResolvedMethodParameter;
@@ -28,6 +27,8 @@
 import springfox.documentation.spi.service.contexts.ParameterContext;
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
+import java.util.Optional;
+
 // tag::parameter-builder-plugin[]
 @Component
 @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER + 1000) //<1>

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/DocumentationCache.java
Patch:
@@ -22,12 +22,11 @@
 import springfox.documentation.service.Documentation;
 
 import java.util.Collections;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
-import static com.google.common.collect.Maps.*;
-
 public class DocumentationCache {
-  private Map<String, Documentation> documentationLookup = newLinkedHashMap();
+  private Map<String, Documentation> documentationLookup = new LinkedHashMap();
 
   public void addDocumentation(Documentation documentation) {
     documentationLookup.put(documentation.getGroupName(), documentation);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/PropertySourcedMapping.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/SpringGroupingStrategy.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
 
 import java.util.Set;
 
-import static com.google.common.collect.Sets.*;
+import static java.util.Collections.*;
 import static springfox.documentation.spring.web.paths.Paths.*;
 
 /**
@@ -61,7 +61,7 @@ public boolean supports(DocumentationType delimiter) {
   private Set<ResourceGroup> groups(HandlerMethod handlerMethod) {
     Class<?> controllerClazz = handlerMethod.getBeanType();
     String controllerAsGroup = splitCamelCase(controllerClazz.getSimpleName(), "-").toLowerCase();
-    return newHashSet(new ResourceGroup(controllerAsGroup, controllerClazz));
+    return singleton(new ResourceGroup(controllerAsGroup, controllerClazz));
   }
 
   private String getDescription(Class<?> controllerClass) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/SpringfoxWebMvcConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2018 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/OperationPathDecorator.java
Patch:
@@ -18,13 +18,15 @@
  */
 package springfox.documentation.spring.web.paths;
 
-import com.google.common.base.Function;
+
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.service.PathDecorator;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.PathContext;
 
+import java.util.function.Function;
+
 @Component
 @Order
 class OperationPathDecorator implements PathDecorator {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/PathMappingAdjuster.java
Patch:
@@ -33,7 +33,7 @@ public PathMappingAdjuster(DocumentationContext context) {
   @Override
   public String adjustedPath(String path) {
     return UriComponentsBuilder
-        .fromPath(this.context.getPathMapping().or("/"))
+        .fromPath(this.context.getPathMapping().orElse("/"))
         .path(path)
         .build()
         .toUriString();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/PathMappingDecorator.java
Patch:
@@ -19,14 +19,16 @@
 
 package springfox.documentation.spring.web.paths;
 
-import com.google.common.base.Function;
+
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.service.PathDecorator;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.PathContext;
 
+import java.util.function.Function;
+
 @Component
 @Order(value = Ordered.HIGHEST_PRECEDENCE + 40)
 class PathMappingDecorator implements PathDecorator {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/PathSanitizer.java
Patch:
@@ -18,14 +18,16 @@
  */
 package springfox.documentation.spring.web.paths;
 
-import com.google.common.base.Function;
+
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.service.PathDecorator;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.PathContext;
 
+import java.util.function.Function;
+
 import static springfox.documentation.spring.web.paths.Paths.*;
 
 @Component

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationDeprecatedReader.java
Patch:
@@ -19,14 +19,16 @@
 
 package springfox.documentation.spring.web.readers.operation;
 
-import com.google.common.base.Optional;
+
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
 
+import java.util.Optional;
+
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
 public class OperationDeprecatedReader implements OperationBuilderPlugin {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationModelsProvider.java
Patch:
@@ -73,7 +73,7 @@ public boolean supports(DocumentationType delimiter) {
   private void collectFromReturnType(RequestMappingContext context) {
     ResolvedType modelType = context.getReturnType();
     modelType = context.alternateFor(modelType);
-    LOG.debug("Adding return parameter of type {}", resolvedTypeSignature(modelType).or("<null>"));
+    LOG.debug("Adding return parameter of type {}", resolvedTypeSignature(modelType).orElse("<null>"));
     context.operationModelsBuilder().addReturn(modelType);
   }
 
@@ -87,7 +87,7 @@ private void collectParameters(RequestMappingContext context) {
         if (parameterType.hasParameterAnnotation(RequestBody.class)
             || parameterType.hasParameterAnnotation(RequestPart.class)) {
           ResolvedType modelType = context.alternateFor(parameterType.getParameterType());
-          LOG.debug("Adding input parameter of type {}", resolvedTypeSignature(modelType).or("<null>"));
+          LOG.debug("Adding input parameter of type {}", resolvedTypeSignature(modelType).orElse("<null>"));
           context.operationModelsBuilder().addInputParam(modelType);
         }
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationResponseClassReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2018 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDataTypeReader.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
-import com.google.common.base.Optional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -39,6 +38,7 @@
 import springfox.documentation.spi.service.ParameterBuilderPlugin;
 import springfox.documentation.spi.service.contexts.ParameterContext;
 
+import static java.util.Optional.*;
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Maps.*;
 import static springfox.documentation.schema.ResolvedTypes.*;
@@ -101,8 +101,8 @@ public void apply(ParameterContext context) {
         context.getIgnorableParameterTypes());
     context.parameterBuilder()
         .type(parameterType)
-        .modelRef(Optional.fromNullable(modelRef)
-            .or(modelRefFactory(modelContext, nameExtractor).apply(parameterType)));
+        .modelRef(ofNullable(modelRef)
+            .orElse(modelRefFactory(modelContext, nameExtractor).apply(parameterType)));
   }
 
   private boolean treatRequestParamAsString(ResolvedType parameterType) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDefaultReader.java
Patch:
@@ -19,7 +19,6 @@
 
 package springfox.documentation.spring.web.readers.parameter;
 
-import com.google.common.base.Optional;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
@@ -33,6 +32,8 @@
 import springfox.documentation.spi.service.contexts.ParameterContext;
 import springfox.documentation.spring.web.DescriptionResolver;
 
+import java.util.Optional;
+
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
 public class ParameterDefaultReader implements ParameterBuilderPlugin {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionLookup.java
Patch:
@@ -24,18 +24,17 @@
 import springfox.documentation.annotations.Incubating;
 import springfox.documentation.service.ApiDescription;
 
+import java.util.HashMap;
 import java.util.Map;
 
-import static com.google.common.collect.Maps.*;
-
 /**
  * Given a handler method this class serves to lookup the api description. The overall goal of this abstraction is to
  * serve the purpose of looking up a given description.
  */
 @Component
 @Incubating("2.2.0")
 public class ApiDescriptionLookup {
-  private Map<RequestHandlerKey, ApiDescription> cache = newHashMap();
+  private Map<RequestHandlerKey, ApiDescription> cache = new HashMap<>();
 
   public void add(RequestHandlerKey key, ApiDescription value) {
     cache.put(key, value);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanningContext.java
Patch:
@@ -19,13 +19,14 @@
 
 package springfox.documentation.spring.web.scanners;
 
-import com.google.common.collect.Ordering;
+
 import springfox.documentation.service.ApiDescription;
 import springfox.documentation.service.ResourceGroup;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.RequestMappingContext;
 
+import java.util.Comparator;
 import java.util.List;
 import java.util.Map;
 
@@ -48,7 +49,7 @@ public DocumentationContext getDocumentationContext() {
     return documentationContext;
   }
 
-  public Ordering<ApiDescription> apiDescriptionOrdering() {
+  public Comparator<ApiDescription> apiDescriptionOrdering() {
     return documentationContext.getApiDescriptionOrdering();
   }
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/Bug2219ListingScanner.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -46,7 +46,7 @@ public List<ApiDescription> apply(DocumentationContext context) {
                 Arrays.asList(
                     new OperationBuilder(
                         new CachingOperationNameGenerator())
-                        .authorizations(new ArrayList())
+                        .authorizations(new ArrayList<>())
                         .codegenMethodNameStem("bug2219GET")
                         .method(HttpMethod.GET)
                         .notes("This is a test method")

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyClassWithRequestMappingWithMultipleMappings.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyClassWithRequestMappingWithoutForwardSlash.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/BugsController.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2017 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -22,7 +22,6 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.annotation.JsonUnwrapped;
-import com.google.common.base.Optional;
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiImplicitParam;
 import io.swagger.annotations.ApiImplicitParams;
@@ -72,6 +71,7 @@
 import java.sql.Date;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/BusinessService.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -38,9 +38,9 @@
 import org.springframework.web.bind.annotation.ResponseBody;
 import springfox.documentation.spring.web.dummy.models.Business;
 
+import java.util.ArrayList;
 import java.util.List;
 
-import static com.google.common.collect.Lists.*;
 import static org.springframework.http.HttpStatus.*;
 import static org.springframework.http.MediaType.*;
 import static org.springframework.web.bind.annotation.RequestMethod.*;
@@ -97,6 +97,6 @@ public String businessAsString() {
   @RequestMapping(value = {"/businesses/byTypes"}, method = GET, produces = APPLICATION_JSON_VALUE)
   @ResponseBody
   public List<Business> businessesByCategories(@RequestParam Business.BusinessType[] types) {
-    return newArrayList();
+    return new ArrayList<>();
   }
 }
\ No newline at end of file

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/CommonRestController.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/ConsumesProducesService.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2018 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/GenericPetController.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/GenericRestController.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/IRepository.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/PetRepository.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/PetService.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -41,7 +41,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static com.google.common.collect.Lists.*;
+
 
 @Controller
 @RequestMapping("/pets")
@@ -146,7 +146,7 @@ public List<Pet> siblings(Pet pet) {
   public
   @ResponseBody
   List<Pet> listPets() {
-    return newArrayList();
+    return new ArrayList<>();
   }
 
   @RequestMapping(value = "/{name}", method = RequestMethod.POST)

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/SortDirection.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/AccountType.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/Bug1749.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/ModelAttributeExample.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2018 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/PetWithSerializer.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/common/HostNameProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2018 the original author or authors.
+ *  Copyright 2015-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/common/XForwardPrefixPathAdjuster.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017-2018 the original author or authors.
+ *  Copyright 2017-2019 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/MinMaxAnnotationPlugin.java
Patch:
@@ -52,11 +52,11 @@ public void apply(ModelPropertyContext context) {
     context.getBuilder().allowableValues(allowableRange(min, max));
   }
 
-  Optional<Min> extractMin(ModelPropertyContext context) {
+  private Optional<Min> extractMin(ModelPropertyContext context) {
     return annotationFromBean(context, Min.class).map(Optional::of).orElse(annotationFromField(context, Min.class));
   }
 
-  Optional<Max> extractMax(ModelPropertyContext context) {
+  private Optional<Max> extractMax(ModelPropertyContext context) {
     return annotationFromBean(context, Max.class).map(Optional::of).orElse(annotationFromField(context, Max.class));
   }
 }

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/NotNullAnnotationPlugin.java
Patch:
@@ -55,7 +55,7 @@ public void apply(ModelPropertyContext context) {
     }
   }
 
-  Optional<NotNull> extractAnnotation(ModelPropertyContext context) {
+  private Optional<NotNull> extractAnnotation(ModelPropertyContext context) {
     return annotationFromBean(context, NotNull.class).map(Optional::of).orElse(annotationFromField(context, NotNull.class));
   }
 }

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/SizeAnnotationPlugin.java
Patch:
@@ -46,9 +46,7 @@ public boolean supports(DocumentationType delimiter) {
   public void apply(ModelPropertyContext context) {
     Optional<Size> size = extractAnnotation(context);
 
-    if (size.isPresent()) {
-      context.getBuilder().allowableValues(stringLengthRange(size.get()));
-    }
+    size.ifPresent(size1 -> context.getBuilder().allowableValues(stringLengthRange(size1)));
   }
 
   Optional<Size> extractAnnotation(ModelPropertyContext context) {

File: springfox-core/src/main/java/springfox/documentation/RequestHandler.java
Patch:
@@ -116,6 +116,7 @@ static String sortedPaths(PatternsRequestCondition patternsCondition) {
   static Comparator<RequestHandler> byPatternsCondition() {
     return Comparator.comparing(requestHandler -> sortedPaths(requestHandler.getPatternsCondition()));
   }
+
   static Comparator<RequestHandler> byOperationName() {
     return Comparator.comparing(RequestHandler::getName);
   }

File: springfox-core/src/main/java/springfox/documentation/builders/AlternateTypeBuilder.java
Patch:
@@ -32,7 +32,7 @@
 @Incubating("2.7.0")
 public class AlternateTypeBuilder {
   private String fullyQualifiedClassName;
-  private List<AlternateTypePropertyBuilder> properties = new ArrayList();
+  private List<AlternateTypePropertyBuilder> properties = new ArrayList<>();
   private List<Annotation> annotations = new ArrayList<Annotation>();
 
   public AlternateTypeBuilder fullyQualifiedClassName(String fullyQualifiedClassName) {

File: springfox-core/src/main/java/springfox/documentation/builders/ApiInfoBuilder.java
Patch:
@@ -39,7 +39,7 @@ public class ApiInfoBuilder {
   private String license;
   private String licenseUrl;
   private String version;
-  private List<VendorExtension> vendorExtensions = new ArrayList();
+  private List<VendorExtension> vendorExtensions = new ArrayList<>();
 
   /**
    * Updates the api title

File: springfox-core/src/main/java/springfox/documentation/builders/ModelBuilder.java
Patch:
@@ -44,8 +44,8 @@ public class ModelBuilder {
   private Object example;
   private Xml xml;
 
-  private Map<String, ModelProperty> properties = new HashMap();
-  private List<ModelReference> subTypes = new ArrayList();
+  private Map<String, ModelProperty> properties = new HashMap<>();
+  private List<ModelReference> subTypes = new ArrayList<>();
 
   /**
    * Updates the Id of the model, usually the type name

File: springfox-core/src/main/java/springfox/documentation/builders/ModelPropertyBuilder.java
Patch:
@@ -46,7 +46,7 @@ public class ModelPropertyBuilder {
   private String defaultValue;
   private Xml xml;
   private Boolean allowEmptyValue;
-  private List<VendorExtension> vendorExtensions = new ArrayList();
+  private List<VendorExtension> vendorExtensions = new ArrayList<>();
 
   public ModelPropertyBuilder name(String name) {
     this.name = defaultIfAbsent(name, this.name);

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterBuilder.java
Patch:
@@ -52,7 +52,7 @@ public class ParameterBuilder {
   private ModelReference modelRef;
   private boolean hidden;
   private String pattern;
-  private List<VendorExtension> vendorExtensions = new ArrayList();
+  private List<VendorExtension> vendorExtensions = new ArrayList<>();
   private String collectionFormat = null;
   private Boolean allowEmptyValue;
   private int order = Ordered.LOWEST_PRECEDENCE;

File: springfox-core/src/main/java/springfox/documentation/builders/ResourceListingBuilder.java
Patch:
@@ -31,8 +31,8 @@
 
 public class ResourceListingBuilder {
   private String apiVersion;
-  private List<ApiListingReference> apis = new ArrayList();
-  private List<SecurityScheme> securitySchemes = new ArrayList();
+  private List<ApiListingReference> apis = new ArrayList<>();
+  private List<SecurityScheme> securitySchemes = new ArrayList<>();
   private ApiInfo info;
 
   /**

File: springfox-core/src/main/java/springfox/documentation/service/ListVendorExtension.java
Patch:
@@ -25,7 +25,7 @@
 import static springfox.documentation.builders.BuilderDefaults.*;
 
 public class ListVendorExtension<T> implements VendorExtension<List<T>> {
-  private final List<T> values = new ArrayList();
+  private final List<T> values = new ArrayList<>();
   private final String name;
 
   public ListVendorExtension(String name, List<T> values) {

File: springfox-core/src/main/java/springfox/documentation/service/ResolvedMethodParameter.java
Patch:
@@ -61,7 +61,7 @@ public boolean hasParameterAnnotations() {
   }
 
   public boolean hasParameterAnnotation(Class<? extends Annotation> annotation) {
-    return annotations.stream().filter(annotation::isInstance).count() > 0;
+    return annotations.stream().anyMatch(annotation::isInstance);
   }
 
   public <T extends Annotation> Optional<T> findAnnotation(final Class<T> annotation) {
@@ -85,7 +85,7 @@ public List<Annotation> getAnnotations() {
   }
 
   public ResolvedMethodParameter annotate(Annotation annotation) {
-    List<Annotation> annotations = new ArrayList(this.annotations);
+    List<Annotation> annotations = new ArrayList<>(this.annotations);
     annotations.add(annotation);
     return new ResolvedMethodParameter(parameterIndex, defaultName, annotations, parameterType);
   }

File: springfox-core/src/main/java/springfox/documentation/service/Tag.java
Patch:
@@ -39,7 +39,7 @@ public Tag(String name, String description) {
   }
 
   public Tag(String name, String description, int order) {
-    this(name, description, order, new ArrayList<VendorExtension>());
+    this(name, description, order, new ArrayList<>());
   }
 
   public Tag(String name, String description, List<VendorExtension> vendorExtensions) {
@@ -50,7 +50,7 @@ public Tag(String name, String description, int order, List<VendorExtension> ven
     this.name = of(name).filter(((Predicate<String>)String::isEmpty).negate()).get();
     this.description = description;
     this.order = order;
-    this.vendorExtensions = new ArrayList(vendorExtensions);
+    this.vendorExtensions = new ArrayList<>(vendorExtensions);
   }
 
   public String getName() {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationDeleteExtractor.java
Patch:
@@ -26,7 +26,6 @@
 import org.springframework.data.rest.core.mapping.ResourceMapping;
 import org.springframework.data.rest.core.mapping.ResourceMetadata;
 import org.springframework.data.rest.webmvc.RestMediaTypes;
-import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;
 import springfox.documentation.RequestHandler;
 import springfox.documentation.service.ResolvedMethodParameter;
@@ -43,7 +42,7 @@
 public class EntityAssociationDeleteExtractor implements EntityAssociationOperationsExtractor {
   @Override
   public List<RequestHandler> extract(EntityAssociationContext context) {
-    List<RequestHandler> handlers = new ArrayList<RequestHandler>();
+    List<RequestHandler> handlers = new ArrayList<>();
     ResourceMetadata metadata = context.associationMetadata();
     Association<? extends PersistentProperty<?>> association = context.getAssociation();
     PersistentProperty<?> property = association.getInverse();
@@ -62,7 +61,7 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
             entityContext.resourcePath(),
             mapping.getPath()),
         singleton(RequestMethod.DELETE),
-        new HashSet<MediaType>(),
+        new HashSet<>(),
         Stream.of(RestMediaTypes.TEXT_URI_LIST, RestMediaTypes.SPRING_DATA_COMPACT_JSON).collect(toSet()),
         null,
         singletonList(new ResolvedMethodParameter(

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationGetExtractor.java
Patch:
@@ -25,7 +25,6 @@
 import org.springframework.data.repository.core.RepositoryMetadata;
 import org.springframework.data.rest.core.mapping.ResourceMapping;
 import org.springframework.data.rest.core.mapping.ResourceMetadata;
-import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;
 import springfox.documentation.RequestHandler;
 import springfox.documentation.service.ResolvedMethodParameter;
@@ -41,7 +40,7 @@
 public class EntityAssociationGetExtractor implements EntityAssociationOperationsExtractor {
   @Override
   public List<RequestHandler> extract(EntityAssociationContext context) {
-    List<RequestHandler> handlers = new ArrayList<RequestHandler>();
+    List<RequestHandler> handlers = new ArrayList<>();
     ResourceMetadata metadata = context.associationMetadata();
     Association<? extends PersistentProperty<?>> association = context.getAssociation();
     PersistentProperty<?> property = association.getInverse();
@@ -61,7 +60,7 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
             mapping.getPath()),
             singleton(RequestMethod.GET),
             singleton(HAL_JSON),
-        new HashSet<MediaType>(),
+        new HashSet<>(),
         null,
         singletonList(new ResolvedMethodParameter(
             0,

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationItemDeleteExtractor.java
Patch:
@@ -26,7 +26,6 @@
 import org.springframework.data.rest.core.mapping.ResourceMapping;
 import org.springframework.data.rest.core.mapping.ResourceMetadata;
 import org.springframework.data.rest.webmvc.RestMediaTypes;
-import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;
 import springfox.documentation.RequestHandler;
 import springfox.documentation.service.ResolvedMethodParameter;
@@ -43,7 +42,7 @@
 public class EntityAssociationItemDeleteExtractor implements EntityAssociationOperationsExtractor {
   @Override
   public List<RequestHandler> extract(EntityAssociationContext context) {
-    List<RequestHandler> handlers = new ArrayList<RequestHandler>();
+    List<RequestHandler> handlers = new ArrayList<>();
     ResourceMetadata metadata = context.associationMetadata();
     Association<? extends PersistentProperty<?>> association = context.getAssociation();
     PersistentProperty<?> property = association.getInverse();
@@ -64,7 +63,7 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
               mapping.getPath(),
               propertyIdentifier),
               singleton(RequestMethod.DELETE),
-          new HashSet<MediaType>(),
+          new HashSet<>(),
           Stream.of(RestMediaTypes.TEXT_URI_LIST, RestMediaTypes.SPRING_DATA_COMPACT_JSON).collect(toSet()),
           null,
           Stream.of(new ResolvedMethodParameter(

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationItemGetExtractor.java
Patch:
@@ -25,7 +25,6 @@
 import org.springframework.data.repository.core.RepositoryMetadata;
 import org.springframework.data.rest.core.mapping.ResourceMapping;
 import org.springframework.data.rest.core.mapping.ResourceMetadata;
-import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;
 import springfox.documentation.RequestHandler;
 import springfox.documentation.service.ResolvedMethodParameter;
@@ -43,7 +42,7 @@
 public class EntityAssociationItemGetExtractor implements EntityAssociationOperationsExtractor {
   @Override
   public List<RequestHandler> extract(EntityAssociationContext context) {
-    List<RequestHandler> handlers = new ArrayList<RequestHandler>();
+    List<RequestHandler> handlers = new ArrayList<>();
     ResourceMetadata metadata = context.associationMetadata();
     Association<? extends PersistentProperty<?>> association = context.getAssociation();
     PersistentProperty<?> property = association.getInverse();
@@ -64,7 +63,7 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
               mapping.getPath(),
               propertyIdentifier),
               singleton(RequestMethod.GET),
-          new HashSet<MediaType>(),
+          new HashSet<>(),
               singleton(HAL_JSON),
           null,
           Stream.of(new ResolvedMethodParameter(

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationSaveExtractor.java
Patch:
@@ -26,7 +26,6 @@
 import org.springframework.data.rest.core.mapping.ResourceMapping;
 import org.springframework.data.rest.core.mapping.ResourceMetadata;
 import org.springframework.data.rest.webmvc.RestMediaTypes;
-import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;
 import springfox.documentation.RequestHandler;
 import springfox.documentation.service.ResolvedMethodParameter;
@@ -42,7 +41,7 @@
 public class EntityAssociationSaveExtractor implements EntityAssociationOperationsExtractor {
   @Override
   public List<RequestHandler> extract(EntityAssociationContext context) {
-    List<RequestHandler> handlers = new ArrayList<RequestHandler>();
+    List<RequestHandler> handlers = new ArrayList<>();
     ResourceMetadata metadata = context.associationMetadata();
     Association<? extends PersistentProperty<?>> association = context.getAssociation();
     PersistentProperty<?> property = association.getInverse();
@@ -61,7 +60,7 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
               entityContext.resourcePath(),
               mapping.getPath()),
           Stream.of(RequestMethod.PUT, RequestMethod.PATCH, RequestMethod.POST).collect(toSet()),
-          new HashSet<MediaType>(),
+          new HashSet<>(),
           Stream.of(RestMediaTypes.TEXT_URI_LIST, RestMediaTypes.SPRING_DATA_COMPACT_JSON).collect(toSet()),
           null,
           Stream.of(new ResolvedMethodParameter(

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityDeleteExtractor.java
Patch:
@@ -22,7 +22,6 @@
 import org.springframework.data.mapping.PersistentEntity;
 import org.springframework.data.repository.core.CrudMethods;
 import org.springframework.data.repository.core.RepositoryMetadata;
-import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.method.HandlerMethod;
 import springfox.documentation.RequestHandler;
@@ -57,8 +56,8 @@ public List<RequestHandler> extract(EntityContext context) {
               context.basePath(),
               context.resourcePath()),
               singleton(RequestMethod.DELETE),
-          new HashSet<MediaType>(),
-          new HashSet<MediaType>(),
+          new HashSet<>(),
+          new HashSet<>(),
           handler,
           singletonList(new ResolvedMethodParameter(
               0,

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityFindOneExtractor.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.data.repository.core.CrudMethods;
 import org.springframework.data.repository.core.RepositoryMetadata;
 import org.springframework.hateoas.Resource;
-import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.method.HandlerMethod;
 import springfox.documentation.RequestHandler;
@@ -58,8 +57,8 @@ public List<RequestHandler> extract(EntityContext context) {
               context.basePath(),
               context.resourcePath()),
           singleton(RequestMethod.GET),
-          new HashSet<MediaType>(),
-          new HashSet<MediaType>(),
+          new HashSet<>(),
+          new HashSet<>(),
           handler,
           singletonList(new ResolvedMethodParameter(
               0,

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySaveExtractor.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.data.repository.core.CrudMethods;
 import org.springframework.data.repository.core.RepositoryMetadata;
 import org.springframework.hateoas.Resource;
-import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.method.HandlerMethod;
 import springfox.documentation.RequestHandler;
@@ -104,8 +103,8 @@ private ActionSpecification saveActionSpecification(
         actionName(entity, handler.getMethod()),
         path,
         methods,
-        new HashSet<MediaType>(),
-        new HashSet<MediaType>(),
+        new HashSet<>(),
+        new HashSet<>(),
         handler,
         parameters,
         typeResolver.resolve(Resource.class, repository.getReturnedDomainClass(handler.getMethod())));

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityServicesProvider.java
Patch:
@@ -98,7 +98,7 @@ public List<RequestHandler> requestHandlers() {
 
     }
 
-    List<RequestHandler> handlers = new ArrayList<RequestHandler>();
+    List<RequestHandler> handlers = new ArrayList<>();
     for (EntityContext each : contexts) {
       handlers.addAll(extractorConfiguration.getEntityExtractors().stream()
           .map(extractFromContext(each))

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/RequestExtractionUtils.java
Patch:
@@ -71,7 +71,7 @@ public static  List<Annotation> bodyAnnotations(HandlerMethod handler) {
   }
 
   private static List<Annotation> handlerAnnotations(HandlerMethod handler) {
-    List<Annotation> annotations = new ArrayList<Annotation>();
+    List<Annotation> annotations = new ArrayList<>();
     if (handler != null) {
       annotations.addAll(Arrays.asList(AnnotationUtils.getAnnotations(handler.getMethod())));
     }

File: springfox-petstore/src/main/java/springfox/petstore/repository/MapBackedRepository.java
Patch:
@@ -27,7 +27,7 @@
 import static java.util.stream.Collectors.*;
 
 public class MapBackedRepository<K, V extends Identifiable<K>> {
-  Map<K, V> service = new HashMap<K, V>();
+  Map<K, V> service = new HashMap<>();
 
   public void delete(K key) {
     service.remove(key);

File: springfox-schema/src/main/java/springfox/documentation/schema/CachingModelDependencyProvider.java
Patch:
@@ -54,7 +54,7 @@ public Set<ResolvedType> dependentModels(ModelContext modelContext) {
           modelContext.description(),
           e.getMessage()
       );
-      return new HashSet();
+      return new HashSet<>();
     }
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/CachingModelProvider.java
Patch:
@@ -44,7 +44,7 @@ public class CachingModelProvider implements ModelProvider {
   public CachingModelProvider(@Qualifier("default") final ModelProvider delegate) {
     this.delegate = delegate;
     cache = new HashMap<>();
-    lookup = (key) -> delegate.modelFor(key);
+    lookup = delegate::modelFor;
   }
 
   @Override

File: springfox-schema/src/main/java/springfox/documentation/schema/plugins/PropertyDiscriminatorBasedInheritancePlugin.java
Patch:
@@ -68,7 +68,7 @@ public void apply(ModelContext context) {
 
   private List<ModelReference> modelRefs(ModelContext context) {
     JsonSubTypes subTypes = AnnotationUtils.getAnnotation(forClass(context), JsonSubTypes.class);
-    List<ModelReference> modelRefs = new ArrayList<ModelReference>();
+    List<ModelReference> modelRefs = new ArrayList<>();
     if (subTypes != null) {
       for (JsonSubTypes.Type each : subTypes.value()) {
         modelRefs.add(modelRefFactory(context, typeNameExtractor)

File: springfox-schema/src/main/java/springfox/documentation/schema/property/CachingModelPropertiesProvider.java
Patch:
@@ -58,7 +58,7 @@ public List<ModelProperty> propertiesFor(ResolvedType type, ModelContext givenCo
     } catch (Exception e) {
       LOGGER.warn("Exception calculating properties for model({}) -> {}. {}",
           type, givenContext.description(), e.getMessage());
-      return new ArrayList();
+      return new ArrayList<>();
     }
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/property/field/FieldProvider.java
Patch:
@@ -45,7 +45,7 @@ public FieldProvider(TypeResolver typeResolver) {
   public Iterable<ResolvedField> in(ResolvedType resolvedType) {
     MemberResolver memberResolver = new MemberResolver(typeResolver);
     if (resolvedType.getErasedType() == Object.class) {
-      return new ArrayList();
+      return new ArrayList<>();
     }
     ResolvedTypeWithMembers resolvedMemberWithMembers = memberResolver.resolve(resolvedType, null, null);
     return Stream.of(resolvedMemberWithMembers.getMemberFields()).collect(toList());

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelContext.java
Patch:
@@ -39,7 +39,7 @@ public class ModelContext {
   private final DocumentationType documentationType;
 
   private final ModelContext parentContext;
-  private final Set<ResolvedType> seenTypes = new HashSet();
+  private final Set<ResolvedType> seenTypes = new HashSet<>();
   private final ModelBuilder modelBuilder;
   private final AlternateTypeProvider alternateTypeProvider;
   private final GenericTypeNamingStrategy genericNamingStrategy;

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContext.java
Patch:
@@ -40,13 +40,12 @@
 import springfox.documentation.spi.service.ResourceGroupingStrategy;
 
 import java.util.Comparator;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 
-import static java.util.stream.Collectors.*;
-
 public class DocumentationContext {
   private final DocumentationType documentationType;
   private final List<RequestHandler> handlerMappings;
@@ -151,7 +150,7 @@ public ApiSelector getApiSelector() {
   }
 
   public Set<Class> getIgnorableParameterTypes() {
-    return ignorableParameterTypes.stream().collect(toSet());
+    return new HashSet<>(ignorableParameterTypes);
   }
 
   public Map<RequestMethod, List<ResponseMessage>> getGlobalResponseMessages() {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationModelContextsBuilder.java
Patch:
@@ -38,7 +38,7 @@ public class OperationModelContextsBuilder {
   private final AlternateTypeProvider alternateTypeProvider;
   private final GenericTypeNamingStrategy genericsNamingStrategy;
   private final Set<Class> ignorableTypes;
-  private final Set<ModelContext> contexts = new HashSet();
+  private final Set<ModelContext> contexts = new HashSet<>();
 
   public OperationModelContextsBuilder(
       String group,

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/PathContext.java
Patch:
@@ -52,6 +52,6 @@ public List<Parameter> getParameters() {
     if (operation.isPresent()) {
       return operation.get().getParameters();
     }
-    return new ArrayList();
+    return new ArrayList<>();
   }
 }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/SecurityContextBuilder.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.function.Predicate;
 
 public class SecurityContextBuilder {
-  private List<SecurityReference> securityReferences = new ArrayList();
+  private List<SecurityReference> securityReferences = new ArrayList<>();
   private Predicate<String> pathSelector = (each) -> true;
   private Predicate<HttpMethod> methodSelector;
 
@@ -52,7 +52,7 @@ public SecurityContextBuilder forHttpMethods(Predicate<HttpMethod> methodSelecto
 
   public SecurityContext build() {
     if (securityReferences == null) {
-      securityReferences = new ArrayList();
+      securityReferences = new ArrayList<>();
     }
     if (methodSelector == null) {
       methodSelector = (each) -> true;

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -24,7 +24,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.http.ResponseEntity;
@@ -68,7 +67,7 @@
 public class Swagger2SpringBoot {
 
   public static void main(String[] args) {
-    ApplicationContext ctx = SpringApplication.run(Swagger2SpringBoot.class, args);
+    SpringApplication.run(Swagger2SpringBoot.class, args);
   }
 
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/ObjectMapperConfigurer.java
Patch:
@@ -69,7 +69,7 @@ private List<HttpMessageConverter<?>> configureMessageConverters(List<HttpMessag
     } else {
       converters.add(configuredMessageConverter());
     }
-    return new ArrayList(converters);
+    return new ArrayList<>(converters);
   }
 
   private Iterable<MappingJackson2HttpMessageConverter> jackson2Converters(

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/WebMvcRequestHandler.java
Patch:
@@ -148,7 +148,7 @@ public RequestMappingInfo getRequestMapping() {
 
   @Override
   public String toString() {
-    final StringBuffer sb = new StringBuffer("WebMvcRequestHandler{");
+    final StringBuilder sb = new StringBuilder("WebMvcRequestHandler{");
     sb.append("key=").append(key());
     sb.append('}');
     return sb.toString();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/Paths.java
Patch:
@@ -26,7 +26,7 @@
 
 
 public class Paths {
-  private static final Pattern FIRST_PATH_FRAGMENT_REGEX = Pattern.compile("^([/]?[\\w\\-\\.]+[/]?)");
+  private static final Pattern FIRST_PATH_FRAGMENT_REGEX = Pattern.compile("^([/]?[\\w\\-.]+[/]?)");
 
   private Paths() {
     throw new UnsupportedOperationException();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/RelativePathProvider.java
Patch:
@@ -25,7 +25,7 @@
 
 
 public class RelativePathProvider extends AbstractPathProvider {
-  public static final String ROOT = "/";
+  private static final String ROOT = "/";
   private final ServletContext servletContext;
 
   public RelativePathProvider(ServletContext servletContext) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/AbstractOperationParameterRequestConditionReader.java
Patch:
@@ -46,7 +46,7 @@ public AbstractOperationParameterRequestConditionReader(TypeResolver resolver) {
   }
 
   public List<Parameter> getParameters(Set<NameValueExpression<String>> expressions, String parameterType) {
-    List<Parameter> parameters = new ArrayList();
+    List<Parameter> parameters = new ArrayList<>();
     for (NameValueExpression<String> expression : expressions) {
       if (skipParameter(parameters, expression)) {
         continue;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ApiOperationReader.java
Patch:
@@ -57,7 +57,7 @@ public ApiOperationReader(DocumentationPluginsManager pluginsManager, OperationN
 //  @Cacheable(value = "operations", keyGenerator = OperationsKeyGenerator.class)
   public List<Operation> read(RequestMappingContext outerContext) {
 
-    List<Operation> operations = new ArrayList();
+    List<Operation> operations = new ArrayList<>();
 
     Set<RequestMethod> requestMethods = outerContext.getMethodsCondition();
     Set<RequestMethod> supportedMethods = supportedMethods(requestMethods);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/CachingOperationNameGenerator.java
Patch:
@@ -31,7 +31,7 @@
 @Component
 public class CachingOperationNameGenerator implements OperationNameGenerator {
   private static final Logger LOG = LoggerFactory.getLogger(CachingOperationNameGenerator.class);
-  private Map<String, Integer> generated = new HashMap();
+  private Map<String, Integer> generated = new HashMap<>();
 
   @Override
   public String startingWith(String prefix) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -34,11 +34,11 @@
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
 
+import java.util.HashSet;
 import java.util.List;
 import java.util.Optional;
 
 import static java.util.Collections.*;
-import static java.util.stream.Collectors.*;
 import static springfox.documentation.schema.ResolvedTypes.*;
 import static springfox.documentation.schema.Types.*;
 
@@ -56,7 +56,7 @@ public ResponseMessagesReader(TypeNameExtractor typeNameExtractor) {
   @Override
   public void apply(OperationContext context) {
     List<ResponseMessage> responseMessages = context.getGlobalResponseMessages(context.httpMethod().toString());
-    context.operationBuilder().responseMessages(responseMessages.stream().collect(toSet()));
+    context.operationBuilder().responseMessages(new HashSet<>(responseMessages));
     applyReturnTypeOverride(context);
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionLookup.java
Patch:
@@ -34,7 +34,7 @@
 @Component
 @Incubating("2.2.0")
 public class ApiDescriptionLookup {
-  private Map<RequestHandlerKey, ApiDescription> cache = new HashMap();
+  private Map<RequestHandlerKey, ApiDescription> cache = new HashMap<>();
 
   public void add(RequestHandlerKey key, ApiDescription value) {
     cache.put(key, value);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionReader.java
Patch:
@@ -61,7 +61,7 @@ public List<ApiDescription> read(RequestMappingContext outerContext) {
     PatternsRequestCondition patternsCondition = outerContext.getPatternsCondition();
     ApiSelector selector = outerContext.getDocumentationContext().getApiSelector();
 
-    List<ApiDescription> apiDescriptionList = new ArrayList();
+    List<ApiDescription> apiDescriptionList = new ArrayList<>();
     for (String path : matchingPaths(selector, patternsCondition)) {
       String methodName = outerContext.getName();
       try {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingReferenceScanner.java
Patch:
@@ -44,7 +44,7 @@ public ApiListingReferenceScanResult scan(DocumentationContext context) {
     LOG.info("Scanning for api listing references");
 
     Map<ResourceGroup, List<RequestMappingContext>> resourceGroupRequestMappings
-        = new HashMap();
+        = new HashMap<>();
     ApiSelector selector = context.getApiSelector();
     Iterable<RequestHandler> matchingHandlers = context.getRequestHandlers().stream()
         .filter(selector.getRequestHandlerSelector()).collect(toList());

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -75,7 +75,7 @@ public ApiListingScanner(
   }
 
   static Optional<String> longestCommonPath(List<ApiDescription> apiDescriptions) {
-    List<String> commons = new ArrayList();
+    List<String> commons = new ArrayList<>();
     if (null == apiDescriptions || apiDescriptions.isEmpty()) {
       return empty();
     }
@@ -116,15 +116,15 @@ public Map<String, List<ApiListing>> scan(ApiListingScanningContext context) {
         requestMappingsByResourceGroup.keySet().stream())
         .collect(toSet());
 
-    List<SecurityReference> securityReferences = new ArrayList();
+    List<SecurityReference> securityReferences = new ArrayList<>();
     for (final ResourceGroup resourceGroup : sortedByName(allResourceGroups)) {
 
       DocumentationContext documentationContext = context.getDocumentationContext();
       Set<String> produces = new LinkedHashSet<String>(documentationContext.getProduces());
       Set<String> consumes = new LinkedHashSet<String>(documentationContext.getConsumes());
       String host = documentationContext.getHost();
       Set<String> protocols = new LinkedHashSet<String>(documentationContext.getProtocols());
-      Set<ApiDescription> apiDescriptions = new HashSet();
+      Set<ApiDescription> apiDescriptions = new HashSet<>();
 
       Map<String, Model> models = new LinkedHashMap<String, Model>();
       List<RequestMappingContext> requestMappings = nullToEmptyList(requestMappingsByResourceGroup.get(resourceGroup));

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/MediaTypeReader.java
Patch:
@@ -99,7 +99,7 @@ private boolean handlerMethodHasFileParameter(OperationContext context) {
   }
 
   private Set<String> toSet(Set<? extends MediaType> mediaTypeSet) {
-    Set<String> mediaTypes = new HashSet();
+    Set<String> mediaTypes = new HashSet<>();
     for (MediaType mediaType : mediaTypeSet) {
       mediaTypes.add(mediaType.toString());
     }

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/ObjectMapperConfigurerIntegrationTest.java
Patch:
@@ -76,8 +76,7 @@ static class TestDefaultConfig {
 
     @Bean
     public RequestMappingHandlerAdapter defaultRmh() {
-      RequestMappingHandlerAdapter adapter = new RequestMappingHandlerAdapter();
-      return adapter;
+      return new RequestMappingHandlerAdapter();
     }
 
     @Bean
@@ -97,7 +96,7 @@ static class TestMultipleConfig {
     @Bean
     public RequestMappingHandlerAdapter multipleMCRmh() {
       RequestMappingHandlerAdapter adapter = new RequestMappingHandlerAdapter();
-      List<HttpMessageConverter<?>> messageConverters = new ArrayList();
+      List<HttpMessageConverter<?>> messageConverters = new ArrayList<>();
       messageConverters.add(new MappingJackson2HttpMessageConverter());
       messageConverters.add(new MappingJackson2HttpMessageConverter());
       adapter.setMessageConverters(messageConverters);

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/Bug2219ListingScanner.java
Patch:
@@ -46,7 +46,7 @@ public List<ApiDescription> apply(DocumentationContext context) {
                 Arrays.asList(
                     new OperationBuilder(
                         new CachingOperationNameGenerator())
-                        .authorizations(new ArrayList())
+                        .authorizations(new ArrayList<>())
                         .codegenMethodNameStem("bug2219GET")
                         .method(HttpMethod.GET)
                         .notes("This is a test method")

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/BusinessService.java
Patch:
@@ -97,6 +97,6 @@ public String businessAsString() {
   @RequestMapping(value = {"/businesses/byTypes"}, method = GET, produces = APPLICATION_JSON_VALUE)
   @ResponseBody
   public List<Business> businessesByCategories(@RequestParam Business.BusinessType[] types) {
-    return new ArrayList();
+    return new ArrayList<>();
   }
 }
\ No newline at end of file

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/EnumService.java
Patch:
@@ -52,13 +52,13 @@ public EnumCollection getCollectionValue() {
     @RequestMapping(value = "/entity", method = RequestMethod.GET)
     @ApiOperation(value = "Example with response entity single value")
     public ResponseEntity<EnumType> getResponseEntityValue() {
-        return new ResponseEntity<EnumType>(EnumType.ONE, HttpStatus.OK);
+        return new ResponseEntity<>(EnumType.ONE, HttpStatus.OK);
     }
 
     @RequestMapping(value = "/collection", method = RequestMethod.GET)
     @ApiOperation(value = "Example with response entity collection")
     public ResponseEntity<Set<EnumType>> getResponseEntityCollection() {
-        return new ResponseEntity<Set<EnumType>>(singleton(EnumType.ONE), HttpStatus.OK);
+        return new ResponseEntity<>(singleton(EnumType.ONE), HttpStatus.OK);
     }
 
 }

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/PetService.java
Patch:
@@ -146,7 +146,7 @@ public List<Pet> siblings(Pet pet) {
   public
   @ResponseBody
   List<Pet> listPets() {
-    return new ArrayList();
+    return new ArrayList<>();
   }
 
   @RequestMapping(value = "/{name}", method = RequestMethod.POST)

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/ModelWithMapProperty.java
Patch:
@@ -30,7 +30,7 @@
 @ApiModel(description = "Describes model with map property")
 public class ModelWithMapProperty {
   @ApiModelProperty(value = "Map of params to be sent")
-  private final Map<String, String> params = new HashMap();
+  private final Map<String, String> params = new HashMap<>();
 
   public Map<String, String> getParams() {
     return params;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParametersReader.java
Patch:
@@ -61,7 +61,7 @@ public boolean supports(DocumentationType delimiter) {
   private List<Parameter> readParameters(OperationContext context) {
     Optional<ApiImplicitParams> annotation = context.findAnnotation(ApiImplicitParams.class);
 
-    List<Parameter> parameters = new ArrayList();
+    List<Parameter> parameters = new ArrayList<>();
     if (annotation.isPresent()) {
       for (ApiImplicitParam param : annotation.get().value()) {
         parameters.add(OperationImplicitParameterReader.implicitParameter(descriptions, param));

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/Examples.java
Patch:
@@ -37,10 +37,10 @@ private Examples() {
   }
 
   public static Map<String, List<Example>> examples(io.swagger.annotations.Example example) {
-    Map<String, List<Example>> examples = new HashMap();
+    Map<String, List<Example>> examples = new HashMap<>();
     for (ExampleProperty each: example.value()) {
       if (!isEmpty(each.value())) {
-        examples.putIfAbsent(each.mediaType(), new LinkedList());
+        examples.putIfAbsent(each.mediaType(), new LinkedList<>());
         examples.get(each.mediaType()).add(new Example(ofNullable(each.mediaType())
                 .filter(((Predicate<String>)String::isEmpty).negate()).orElse(null), each.value()));
       }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelTypeNameProvider.java
Patch:
@@ -39,7 +39,9 @@ public String nameFor(Class<?> type) {
     ApiModel annotation = findAnnotation(type, ApiModel.class);
     String defaultTypeName = super.nameFor(type);
     if (annotation != null) {
-      return ofNullable(annotation.value()).filter(((Predicate<String>)String::isEmpty).negate()).orElse(defaultTypeName);
+      return ofNullable(annotation.value())
+          .filter(((Predicate<String>)String::isEmpty).negate())
+          .orElse(defaultTypeName);
     }
     return defaultTypeName;
   }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/ApiResourceController.java
Patch:
@@ -52,20 +52,20 @@ public ApiResourceController(SwaggerResourcesProvider swaggerResources) {
   @RequestMapping(value = "/configuration/security")
   @ResponseBody
   public ResponseEntity<SecurityConfiguration> securityConfiguration() {
-    return new ResponseEntity<SecurityConfiguration>(
+    return new ResponseEntity<>(
         ofNullable(securityConfiguration).orElse(SecurityConfigurationBuilder.builder().build()), HttpStatus.OK);
   }
 
   @RequestMapping(value = "/configuration/ui")
   @ResponseBody
   public ResponseEntity<UiConfiguration> uiConfiguration() {
-    return new ResponseEntity<UiConfiguration>(
+    return new ResponseEntity<>(
         ofNullable(uiConfiguration).orElse(UiConfigurationBuilder.builder().build()), HttpStatus.OK);
   }
 
   @RequestMapping
   @ResponseBody
   public ResponseEntity<List<SwaggerResource>> swaggerResources() {
-    return new ResponseEntity<List<SwaggerResource>>(swaggerResources.get(), HttpStatus.OK);
+    return new ResponseEntity<>(swaggerResources.get(), HttpStatus.OK);
   }
 }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/InMemorySwaggerResourcesProvider.java
Patch:
@@ -57,7 +57,7 @@ public InMemorySwaggerResourcesProvider(
 
   @Override
   public List<SwaggerResource> get() {
-    List<SwaggerResource> resources = new ArrayList<SwaggerResource>();
+    List<SwaggerResource> resources = new ArrayList<>();
 
     for (Map.Entry<String, Documentation> entry : documentationCache.all().entrySet()) {
       String swaggerGroup = entry.getKey();

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/SecurityConfiguration.java
Patch:
@@ -33,7 +33,6 @@ public class SecurityConfiguration {
 
   /**
    * @deprecated @since 2.8.0. This field is unused
-   * @return
    */
   @Deprecated
   private String apiKey;

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/dto/Authorization.java
Patch:
@@ -51,6 +51,6 @@ public List<AuthorizationScope> getScopes() {
   }
 
   public void setScopes(List<AuthorizationScope> scopes) {
-    this.scopes = new ArrayList(scopes);
+    this.scopes = new ArrayList<>(scopes);
   }
 }

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/web/SwaggerDefaultConfiguration.java
Patch:
@@ -50,7 +50,7 @@ public SwaggerDefaultConfiguration(
 
   @Override
   public DocumentationContextBuilder create(DocumentationType documentationType) {
-    List<AlternateTypeRule> rules = new ArrayList();
+    List<AlternateTypeRule> rules = new ArrayList<>();
     rules.add(newRule(typeResolver.resolve(Map.class, String.class, String.class),
         typeResolver.resolve(Object.class)));
     rules.add(newMapRule(WildcardType.class, WildcardType.class));

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -107,7 +107,7 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
       toReturn.setType(property.getType());
       toReturn.setFormat(property.getFormat());
     }
-    return of((io.swagger.models.parameters.Parameter) toReturn);
+    return of(toReturn);
   }
 
   private static String collectionFormat(Parameter source) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -52,7 +52,7 @@
 @ApiIgnore
 public class Swagger2Controller {
 
-  public static final String DEFAULT_URL = "/v2/api-docs";
+  private static final String DEFAULT_URL = "/v2/api-docs";
   private static final Logger LOGGER = LoggerFactory.getLogger(Swagger2Controller.class);
   private static final String HAL_MEDIA_TYPE = "application/hal+json";
 
@@ -93,15 +93,15 @@ public ResponseEntity<Json> getDocumentation(
     Documentation documentation = documentationCache.documentationByGroup(groupName);
     if (documentation == null) {
       LOGGER.warn("Unable to find specification for group {}", groupName);
-      return new ResponseEntity<Json>(HttpStatus.NOT_FOUND);
+      return new ResponseEntity<>(HttpStatus.NOT_FOUND);
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
     UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
     swagger.basePath(isEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath());
     if (isEmpty(swagger.getHost())) {
       swagger.host(hostName(uriComponents));
     }
-    return new ResponseEntity<Json>(jsonSerializer.toJson(swagger), HttpStatus.OK);
+    return new ResponseEntity<>(jsonSerializer.toJson(swagger), HttpStatus.OK);
   }
 
   private String hostName(UriComponents uriComponents) {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySearchExtractor.java
Patch:
@@ -53,7 +53,7 @@ public List<RequestHandler> extract(EntityContext context) {
     SearchResourceMappings searchMappings = context.searchMappings();
     for (MethodResourceMapping mapping : searchMappings.getExportedMappings()) {
       HandlerMethod handler = new HandlerMethod(
-          context.getRepositoryInstance(),
+          new OptionalDeferencer<>().convert(context.getRepositoryInstance()),
           mapping.getMethod());
       ActionSpecification spec = new ActionSpecification(
           actionName(entity, mapping.getMethod()),

File: springfox-core/src/main/java/springfox/documentation/RequestHandlerKey.java
Patch:
@@ -16,8 +16,8 @@
  *
  *
  */
-package springfox.documentation;
 
+package springfox.documentation;
 
 import org.springframework.http.MediaType;
 import org.springframework.web.bind.annotation.RequestMethod;

File: springfox-core/src/main/java/springfox/documentation/schema/ModelProperty.java
Patch:
@@ -29,7 +29,6 @@
 import java.util.function.Function;
 
 
-
 public class ModelProperty {
   private final String name;
   private final ResolvedType type;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/OperationCachingEquivalence.java
Patch:
@@ -66,7 +66,8 @@ public Wrapper(RequestMappingContext requestMappingContext, OperationCachingEqui
 
     @Override
     public boolean equals(Object other) {
-      return equivalence.test(requestMappingContext, ((Wrapper)other).requestMappingContext);
+      return equivalence.equals(((Wrapper) other).equivalence)
+              && equivalence.test(requestMappingContext, ((Wrapper)other).requestMappingContext);
     }
     @Override
     public int hashCode() {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/CombinedRequestHandler.java
Patch:
@@ -150,8 +150,8 @@ public RequestHandler combine(RequestHandler other) {
   @Override
   public String toString() {
     final StringBuffer sb = new StringBuffer("CombinedRequestHandler{");
-    sb.append("first key=").append(first.key());
-    sb.append("second key=").append(second.key());
+    sb.append("first key=").append(first == null ? "No key" : first.key());
+    sb.append("second key=").append(second == null ? "No key" : second.key());
     sb.append("combined key=").append(key());
     sb.append('}');
     return sb.toString();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DefaultRequestHandlerCombiner.java
Patch:
@@ -98,7 +98,7 @@ public int compare(PathAndParametersEquivalence.Wrapper first, PathAndParameters
   private Map<PathAndParametersEquivalence.Wrapper, List<RequestHandler>> safeGroupBy(
       List<RequestHandler> source) {
     try {
-      return source.stream().collect(groupingBy(equivalenceAsKey()));
+      return source.stream().collect(groupingBy(equivalenceAsKey(), LinkedHashMap::new, toList()));
     } catch (Exception e) {
       LOGGER.error("Unable to index request handlers {}. Request handlers with issues{}",
           e.getMessage(),

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DuplicateGroupsDetector.java
Patch:
@@ -22,6 +22,7 @@
 
 import springfox.documentation.spi.service.DocumentationPlugin;
 
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -38,7 +39,7 @@ private DuplicateGroupsDetector() {
   }
 
   public static void ensureNoDuplicateGroups(List<DocumentationPlugin> allPlugins) throws IllegalStateException {
-    Map<String, List<DocumentationPlugin>> plugins = allPlugins.stream().collect(groupingBy(byGroupName()));
+    Map<String, List<DocumentationPlugin>> plugins = allPlugins.stream().collect(groupingBy(byGroupName(), LinkedHashMap::new, toList()));
     Iterable<String> duplicateGroups = plugins.entrySet().stream().filter(duplicates()).map(toGroupNames()).collect(toList());
     if (StreamSupport.stream(duplicateGroups.spliterator(), false).count() > 0) {
       throw new IllegalStateException(String.format("Multiple Dockets with the same group name are not supported. "

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/JacksonSerializerConvention.java
Patch:
@@ -64,7 +64,7 @@ public List<AlternateTypeRule> rules() {
     Reflections reflections = new Reflections(packagePrefix);
     Set<Class<?>> serialized = reflections.getTypesAnnotatedWith(JsonSerialize.class);
     Set<Class<?>> deserialized = reflections.getTypesAnnotatedWith(JsonDeserialize.class);
-    Stream.concat(serialized.stream(), deserialized.stream()).forEach(type -> {
+    Stream.concat(serialized.stream(), deserialized.stream()).forEachOrdered(type -> {
       Optional<Type> found = findAlternate(type);
       if (found.isPresent()) {
         rules.add(newRule(

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/PathAndParametersEquivalence.java
Patch:
@@ -83,7 +83,7 @@ public int hashCode() {
 
     @Override
     public boolean equals(Object other) {
-      return equivalence.test(requestHandler, ((Wrapper)other).requestHandler);
+      return equivalence.equals(((Wrapper) other).equivalence) && equivalence.test(requestHandler, ((Wrapper)other).requestHandler);
     }
 
     public RequestHandler get() {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ModelAttributeParameterExpander.java
Patch:
@@ -121,7 +121,7 @@ public String apply(ResolvedField input) {
 
     Stream<ModelAttributeField> collectionTypes = attributes.stream()
         .filter(isCollection().and(recursiveCollectionItemType(context.getParamType()).negate()));
-    collectionTypes.forEach((each) -> {
+    collectionTypes.forEachOrdered((each) -> {
       LOG.debug("Attempting to expand collection/array field: {}", each.getName());
 
       ResolvedType itemType = collectionElementType(each.getFieldType());

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/ResponseHeaders.java
Patch:
@@ -50,7 +50,7 @@ public ResponseHeader[] apply(ApiOperation input) {
 
   public static Map<String, Header> headers(ResponseHeader[] responseHeaders) {
     Map<String, Header> headers = new HashMap();
-    Stream.of(responseHeaders).filter(emptyOrVoid().negate()).forEach(each -> {
+    Stream.of(responseHeaders).filter(emptyOrVoid().negate()).forEachOrdered(each -> {
       headers.put(each.name(), new Header(each.name(), each.description(), headerModel(each)));
     });
     return headers;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -123,7 +123,7 @@ private Model mapModel(springfox.documentation.schema.Model source) {
   private Map<String, Property> mapProperties(SortedMap<String, ModelProperty> properties) {
     Map<String, Property> mappedProperties = new LinkedHashMap<String, Property>();
     properties.entrySet().stream().filter(voidProperties().negate())
-    .forEach(propertyEntry -> {
+    .forEachOrdered(propertyEntry -> {
       mappedProperties.put(propertyEntry.getKey(), mapProperty(propertyEntry.getValue()));
     });
     return mappedProperties;
@@ -251,7 +251,7 @@ static Property modelRefToProperty(ModelReference modelRef) {
 
   Map<String, Model> modelsFromApiListings(Map<String, List<ApiListing>> apiListings) {
     Map<String, springfox.documentation.schema.Model> definitions = new TreeMap();
-    apiListings.values().stream().flatMap(l -> l.stream()).forEach(each -> {
+    apiListings.values().stream().flatMap(l -> l.stream()).forEachOrdered(each -> {
       definitions.putAll(each.getModels());
     });
     return mapModels(definitions);

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -151,7 +151,7 @@ public Map.Entry<String, Property> apply(Map.Entry<String, Header> entry) {
 
   protected Map<String, Path> mapApiListings(Map<String, List<ApiListing>> apiListings) {
     Map<String, Path> paths = new TreeMap();
-    apiListings.values().stream().flatMap(l -> l.stream()).forEach(each -> {
+    apiListings.values().stream().flatMap(l -> l.stream()).forEachOrdered(each -> {
       for (ApiDescription api : each.getApis()) {
         paths.put(api.getPath(), mapOperations(api, Optional.ofNullable(paths.get(api.getPath()))));
       }

File: springfox-core/src/main/java/springfox/documentation/builders/ModelBuilder.java
Patch:
@@ -32,7 +32,7 @@
 
 import static com.google.common.base.Strings.*;
 
-import static com.google.common.collect.Maps.*;
+
 import static springfox.documentation.builders.BuilderDefaults.*;
 
 public class ModelBuilder {

File: springfox-core/src/main/java/springfox/documentation/service/ListVendorExtension.java
Patch:
@@ -18,9 +18,8 @@
  */
 package springfox.documentation.service;
 
-import com.google.common.collect.ImmutableList;
-
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 
@@ -42,6 +41,6 @@ public String getName() {
 
   @Override
   public List<T> getValue() {
-    return ImmutableList.copyOf(values);
+    return Collections.unmodifiableList(values);
   }
 }

File: springfox-core/src/main/java/springfox/documentation/service/Tags.java
Patch:
@@ -21,7 +21,6 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Strings;
-import com.google.common.collect.Iterables;
 import com.google.common.collect.Multimap;
 
 
@@ -45,7 +44,7 @@ private Tags() {
   }
 
   public static Set<Tag> toTags(Multimap<String, ApiListing> apiListings) {
-    Iterable<ApiListing> allListings = Iterables.concat(nullToEmptyMultimap(apiListings).asMap().values());
+    Iterable<ApiListing> allListings = nullToEmptyMultimap(apiListings).values();
     List<Tag> tags =
         StreamSupport.stream(allListings.spliterator(), false)
             .map(collectTags()).flatMap(tagIterable -> StreamSupport.stream(tagIterable.spliterator(), false))

File: springfox-petstore/src/main/java/springfox/petstore/model/Pets.java
Patch:
@@ -24,8 +24,6 @@
 
 import java.util.Objects;
 
-import static com.google.common.collect.Iterables.*;
-
 public class Pets {
   public static Predicate<Pet> statusIs(final String status) {
     return new Predicate<Pet>() {
@@ -40,7 +38,7 @@ public static Predicate<Pet> tagsContain(final String tag) {
     return new Predicate<Pet>() {
       @Override
       public boolean apply(Pet input) {
-        return any(input.getTags(), withName(tag));
+        return input.getTags().stream().anyMatch(withName(tag));
       }
     };
   }

File: springfox-petstore/src/main/java/springfox/petstore/repository/MapBackedRepository.java
Patch:
@@ -21,8 +21,6 @@
 
 import com.google.common.base.Predicate;
 
-import com.google.common.collect.Iterables;
-
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -49,7 +47,7 @@ public V get(K key) {
   }
 
   public V first() {
-    return Iterables.getFirst(service.values(), null);
+    return service.values().stream().findFirst().orElse(null);
   }
   
   public List<V> where(Predicate<V> criteria) {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -46,7 +46,7 @@
 import java.util.function.Function;
 
 
-import static com.google.common.collect.Maps.*;
+
 
 import static java.util.stream.Collectors.toList;
 import static springfox.documentation.builders.BuilderDefaults.*;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/ObjectMapperConfigurer.java
Patch:
@@ -20,7 +20,6 @@
 package springfox.documentation.spring.web;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.common.collect.Iterables;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.config.BeanPostProcessor;
 import org.springframework.context.ApplicationEventPublisher;
@@ -33,7 +32,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-
+import java.util.stream.StreamSupport;
 
 
 import static java.util.stream.Collectors.toList;
@@ -64,7 +63,7 @@ public void setApplicationEventPublisher(ApplicationEventPublisher applicationEv
 
   private List<HttpMessageConverter<?>> configureMessageConverters(List<HttpMessageConverter<?>> converters) {
     Iterable<MappingJackson2HttpMessageConverter> jackson2Converters = jackson2Converters(converters);
-    if (Iterables.size(jackson2Converters) > 0) {
+    if (StreamSupport.stream(jackson2Converters.spliterator(), false).count() > 0) {
       for (MappingJackson2HttpMessageConverter each : jackson2Converters) {
         fireObjectMapperConfiguredEvent(each.getObjectMapper());
       }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/ApiSelectorBuilder.java
Patch:
@@ -20,7 +20,6 @@
 package springfox.documentation.spring.web.plugins;
 
 import com.google.common.base.Predicate;
-import com.google.common.collect.Iterables;
 import springfox.documentation.RequestHandler;
 import springfox.documentation.spi.service.contexts.ApiSelector;
 
@@ -58,7 +57,7 @@ private Predicate<RequestHandler> transform(final Predicate<String> pathSelector
     return new Predicate<RequestHandler>() {
       @Override
       public boolean apply(RequestHandler input) {
-        return Iterables.any(input.getPatternsCondition().getPatterns(), pathSelector);
+        return input.getPatternsCondition().getPatterns().stream().anyMatch(pathSelector);
       }
     };
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java
Patch:
@@ -52,7 +52,7 @@
 import java.util.stream.Stream;
 
 
-import static com.google.common.collect.Maps.*;
+
 
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toSet;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DuplicateGroupsDetector.java
Patch:
@@ -20,13 +20,13 @@
 
 
 import com.google.common.base.Joiner;
-import com.google.common.collect.Iterables;
 import springfox.documentation.spi.service.DocumentationPlugin;
 
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.function.Function;
+import java.util.stream.StreamSupport;
 
 import static java.util.stream.Collectors.groupingBy;
 import static java.util.stream.Collectors.toList;
@@ -40,7 +40,7 @@ private DuplicateGroupsDetector() {
   public static void ensureNoDuplicateGroups(List<DocumentationPlugin> allPlugins) throws IllegalStateException {
     Map<String, List<DocumentationPlugin>> plugins = allPlugins.stream().collect(groupingBy(byGroupName()));
     Iterable<String> duplicateGroups = plugins.entrySet().stream().filter(duplicates()).map(toGroupNames()).collect(toList());
-    if (Iterables.size(duplicateGroups) > 0) {
+    if (StreamSupport.stream(duplicateGroups.spliterator(), false).count() > 0) {
       throw new IllegalStateException(String.format("Multiple Dockets with the same group name are not supported. "
               + "The following duplicate groups were discovered. %s", Joiner.on(',').join(duplicateGroups)));
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/AbstractOperationParameterRequestConditionReader.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.Set;
 
 import static com.google.common.base.Strings.*;
-import static com.google.common.collect.Iterables.*;
 
 import static java.util.Collections.singletonList;
 import static springfox.documentation.builders.Parameters.*;
@@ -82,7 +81,7 @@ private boolean skipParameter(List<Parameter> parameters, NameValueExpression<St
   }
 
   private boolean parameterHandled(List<Parameter> parameters, NameValueExpression<String> expression) {
-    return any(parameters, withName(expression.getName()));
+    return parameters.stream().anyMatch(withName(expression.getName()));
   }
 
   @Override

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/CachingOperationNameGenerator.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.google.common.collect.Maps.*;
+
 
 @Component
 public class CachingOperationNameGenerator implements OperationNameGenerator {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionLookup.java
Patch:
@@ -27,8 +27,6 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.google.common.collect.Maps.*;
-
 /**
  * Given a handler method this class serves to lookup the api description. The overall goal of this abstraction is to
  * serve the purpose of looking up a given description.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/ModelWithMapProperty.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static com.google.common.collect.Maps.*;
+
 
 @ApiModel(description = "Describes model with map property")
 public class ModelWithMapProperty {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerResponseMessageReader.java
Patch:
@@ -41,7 +41,7 @@
 
 import java.util.*;
 
-import static com.google.common.collect.Maps.*;
+
 
 import static java.util.Optional.ofNullable;
 import static springfox.documentation.schema.ResolvedTypes.*;
@@ -112,7 +112,7 @@ protected Set<ResponseMessage> read(OperationContext context) {
                 modelRefFactory(modelContext, typeNameExtractor)
                     .apply(context.alternateFor(type.get())));
           }
-          Map<String, Header> headers = newHashMap(defaultHeaders);
+          Map<String, Header> headers = new HashMap(defaultHeaders);
           headers.putAll(headers(apiResponse.responseHeaders()));
 
           responseMessages.add(new ResponseMessageBuilder()

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterAnnotationReader.java
Patch:
@@ -28,8 +28,6 @@
 import java.util.Optional;
 import java.util.stream.Stream;
 
-import static com.google.common.collect.Iterables.*;
-
 import static java.util.Optional.ofNullable;
 
 public class ParameterAnnotationReader {

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/web/Swagger1Controller.java
Patch:
@@ -16,7 +16,6 @@
  *
  *
  */
-
 package springfox.documentation.swagger1.web;
 
 
@@ -47,7 +46,7 @@
 import java.util.Optional;
 import java.util.function.Function;
 
-import static com.google.common.collect.Multimaps.*;
+import static java.util.stream.Collectors.toMap;
 import static springfox.documentation.swagger1.mappers.Mappers.*;
 import static springfox.documentation.swagger1.web.ApiListingMerger.*;
 
@@ -106,7 +105,8 @@ private ResponseEntity<Json> getSwaggerApiListing(
     }
     Multimap<String, springfox.documentation.service.ApiListing> apiListingMap = documentation.getApiListings();
     Map<String, Collection<ApiListing>> dtoApiListings
-        = transformEntries(apiListingMap, toApiListingDto(servletRequest, documentation.getHost(), mapper)).asMap();
+        = apiListingMap.asMap().entrySet().stream().map(toApiListingDto(servletRequest, documentation.getHost(), mapper))
+            .collect(toMap(Map.Entry::getKey, Map.Entry::getValue));
 
     Collection<ApiListing> apiListings = dtoApiListings.get(apiDeclaration);
     return mergedApiListing(apiListings)

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/VendorExtensionsMapper.java
Patch:
@@ -28,18 +28,19 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.TreeMap;
 import java.util.function.Function;
 
 import static com.google.common.base.Strings.*;
 
-import static com.google.common.collect.Maps.*;
+
 import static java.util.stream.Collectors.toList;
 
 @Mapper
 public class VendorExtensionsMapper {
 
   public Map<String, Object> mapExtensions(List<VendorExtension> from) {
-    Map<String, Object> extensions = newTreeMap();
+    Map<String, Object> extensions = new TreeMap();
     Iterable<ListVendorExtension> listExtensions = from.stream()
         .filter(ListVendorExtension.class::isInstance).map(each -> (ListVendorExtension)each).collect(toList());
     for (ListVendorExtension each : listExtensions) {

File: springfox-core/src/main/java/springfox/documentation/builders/ModelBuilder.java
Patch:
@@ -25,6 +25,7 @@
 import springfox.documentation.schema.ModelReference;
 import springfox.documentation.schema.Xml;
 
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -44,7 +45,7 @@ public class ModelBuilder {
   private Object example;
   private Xml xml;
 
-  private Map<String, ModelProperty> properties = newHashMap();
+  private Map<String, ModelProperty> properties = new HashMap();
   private List<ModelReference> subTypes = newArrayList();
 
   /**

File: springfox-core/src/main/java/springfox/documentation/schema/Enums.java
Patch:
@@ -28,6 +28,7 @@
 import java.lang.reflect.Method;
 import java.util.*;
 import java.util.function.Function;
+import java.util.stream.Stream;
 
 import static com.google.common.base.Strings.*;
 import static java.util.stream.Collectors.toList;
@@ -74,7 +75,7 @@ public String apply(Method input) {
   }
 
   private static <E> List<String> transformUnique(E[] values, Function<E, String> mapper) {
-    List<String> nonUniqueValues = Arrays.asList(values).stream().map( mapper).collect(toList());
+    List<String> nonUniqueValues = Stream.of(values).map( mapper).collect(toList());
     Set<String> uniqueValues = new LinkedHashSet<String>(nonUniqueValues);
     return new ArrayList<String>(uniqueValues);
   }

File: springfox-core/src/main/java/springfox/documentation/service/Tags.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.stream.StreamSupport;
 
 
-import static com.google.common.collect.Sets.*;
+
 import static java.util.stream.Collectors.toList;
 import static springfox.documentation.builders.BuilderDefaults.*;
 
@@ -50,7 +50,7 @@ public static Set<Tag> toTags(Multimap<String, ApiListing> apiListings) {
         StreamSupport.stream(allListings.spliterator(), false)
             .map(collectTags()).flatMap(tagIterable -> StreamSupport.stream(tagIterable.spliterator(), false))
             .collect(toList());
-    TreeSet<Tag> tagSet = newTreeSet(tagComparator());
+    TreeSet<Tag> tagSet = new TreeSet(tagComparator());
     tagSet.addAll(tags);
     return tagSet;
   }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityDeleteExtractor.java
Patch:
@@ -33,7 +33,8 @@
 import java.util.List;
 
 import static com.google.common.collect.Lists.*;
-import static com.google.common.collect.Sets.*;
+
+import static java.util.Collections.singleton;
 import static springfox.documentation.spring.data.rest.RequestExtractionUtils.*;
 
 class EntityDeleteExtractor implements EntityOperationsExtractor {
@@ -56,7 +57,7 @@ public List<RequestHandler> extract(EntityContext context) {
           String.format("%s%s/{id}",
               context.basePath(),
               context.resourcePath()),
-          newHashSet(RequestMethod.DELETE),
+              singleton(RequestMethod.DELETE),
           new HashSet<MediaType>(),
           new HashSet<MediaType>(),
           handler,

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityFindOneExtractor.java
Patch:
@@ -34,7 +34,8 @@
 import java.util.List;
 
 import static com.google.common.collect.Lists.*;
-import static com.google.common.collect.Sets.*;
+
+import static java.util.Collections.singleton;
 import static springfox.documentation.spring.data.rest.RequestExtractionUtils.*;
 
 class EntityFindOneExtractor implements EntityOperationsExtractor {
@@ -57,7 +58,7 @@ public List<RequestHandler> extract(EntityContext context) {
           String.format("%s%s/{id}",
               context.basePath(),
               context.resourcePath()),
-          newHashSet(RequestMethod.GET),
+          singleton(RequestMethod.GET),
           new HashSet<MediaType>(),
           new HashSet<MediaType>(),
           handler,

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/schema/EmbeddedCollectionModelProvider.java
Patch:
@@ -37,7 +37,8 @@
 import java.util.function.Function;
 
 import static com.google.common.collect.Lists.*;
-import static com.google.common.collect.Sets.*;
+
+import static java.util.Collections.singleton;
 import static java.util.stream.Collectors.toMap;
 import static springfox.documentation.schema.ResolvedTypes.*;
 
@@ -102,7 +103,7 @@ public Set<ResolvedType> dependencies(ModelContext context) {
     List<ResolvedType> typeParameters = resourceType.getTypeParameters();
     Class<?> type = typeParameters.get(0).getErasedType();
 
-    return newHashSet(resolver.resolve(type));
+    return singleton(resolver.resolve(type));
   }
 
   @Override

File: springfox-schema/src/main/java/springfox/documentation/schema/CachingModelDependencyProvider.java
Patch:
@@ -29,10 +29,11 @@
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 
+import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
 
-import static com.google.common.collect.Sets.*;
+
 
 @Component
 @Qualifier("cachedModelDependencies")
@@ -61,7 +62,7 @@ public Set<ResolvedType> dependentModels(ModelContext modelContext) {
           modelContext.description(),
           e.getMessage()
       );
-      return newHashSet();
+      return new HashSet();
     }
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -125,7 +125,7 @@ private Model modelBuilder(ResolvedType propertiesHost,
 
   @Override
   public Map<String, Model> dependencies(ModelContext modelContext) {
-    Map<String, Model> models = newHashMap();
+    Map<String, Model> models = new HashMap();
     for (ResolvedType resolvedType : dependencyProvider.dependentModels(modelContext)) {
       ModelContext parentContext = ModelContext.fromParent(modelContext, resolvedType);
       Optional<Model> model = modelFor(parentContext).map(Optional::of).orElse(mapModel(parentContext, resolvedType));

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/DocumentationCache.java
Patch:
@@ -22,12 +22,11 @@
 import springfox.documentation.service.Documentation;
 
 import java.util.Collections;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
-import static com.google.common.collect.Maps.*;
-
 public class DocumentationCache {
-  private Map<String, Documentation> documentationLookup = newLinkedHashMap();
+  private Map<String, Documentation> documentationLookup = new LinkedHashMap();
 
   public void addDocumentation(Documentation documentation) {
     documentationLookup.put(documentation.getGroupName(), documentation);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/SpringGroupingStrategy.java
Patch:
@@ -27,7 +27,8 @@
 
 import java.util.Set;
 
-import static com.google.common.collect.Sets.*;
+
+import static java.util.Collections.singleton;
 import static springfox.documentation.spring.web.paths.Paths.*;
 
 /**
@@ -61,7 +62,7 @@ public boolean supports(DocumentationType delimiter) {
   private Set<ResourceGroup> groups(HandlerMethod handlerMethod) {
     Class<?> controllerClazz = handlerMethod.getBeanType();
     String controllerAsGroup = splitCamelCase(controllerClazz.getSimpleName(), "-").toLowerCase();
-    return newHashSet(new ResourceGroup(controllerAsGroup, controllerClazz));
+    return singleton(new ResourceGroup(controllerAsGroup, controllerClazz));
   }
 
   private String getDescription(Class<?> controllerClass) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/PathAndParametersEquivalence.java
Patch:
@@ -21,7 +21,7 @@
 import com.google.common.base.Equivalence;
 
 
-import com.google.common.collect.Sets;
+
 import springfox.documentation.RequestHandler;
 import springfox.documentation.service.ResolvedMethodParameter;
 
@@ -40,9 +40,9 @@ class PathAndParametersEquivalence extends Equivalence<RequestHandler> {
   protected boolean doEquivalent(RequestHandler a, RequestHandler b) {
 
     return a.getPatternsCondition().equals(b.getPatternsCondition())
-        && !Sets.intersection(a.supportedMethods(), b.supportedMethods()).isEmpty()
+        && a.supportedMethods().stream().anyMatch(item -> b.supportedMethods().contains(item))
         && a.params().equals(b.params())
-        && Sets.symmetricDifference(wrapped(a.getParameters()), wrapped(b.getParameters())).isEmpty();
+        && Objects.equals(wrapped(a.getParameters()), wrapped(b.getParameters()));
   }
 
   private Set<Wrapper<ResolvedMethodParameter>> wrapped(List<ResolvedMethodParameter> parameters) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/CachingOperationNameGenerator.java
Patch:
@@ -23,14 +23,15 @@
 import org.springframework.stereotype.Component;
 import springfox.documentation.OperationNameGenerator;
 
+import java.util.HashMap;
 import java.util.Map;
 
 import static com.google.common.collect.Maps.*;
 
 @Component
 public class CachingOperationNameGenerator implements OperationNameGenerator {
   private static final Logger LOG = LoggerFactory.getLogger(CachingOperationNameGenerator.class);
-  private Map<String, Integer> generated = newHashMap();
+  private Map<String, Integer> generated = new HashMap();
 
   @Override
   public String startingWith(String prefix) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ExpandedParameterBuilder.java
Patch:
@@ -36,13 +36,12 @@
 import springfox.documentation.spi.service.ExpandedParameterBuilderPlugin;
 import springfox.documentation.spi.service.contexts.ParameterExpansionContext;
 
-import java.util.Arrays;
 import java.util.List;
 import java.util.Optional;
 import java.util.function.Function;
+import java.util.stream.Stream;
 
 import static com.google.common.base.Strings.*;
-import static com.google.common.collect.Lists.*;
 import static java.util.stream.Collectors.toList;
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Types.*;
@@ -121,7 +120,7 @@ private AllowableValues allowableValues(Class<?> fieldType) {
   }
 
   private List<String> getEnumValues(final Class<?> subject) {
-    return Arrays.asList(subject.getEnumConstants()).stream().map(new Function<Object, String>() {
+    return Stream.of(subject.getEnumConstants()).map(new Function<Object, String>() {
       @Override
       public String apply(final Object input) {
         return input.toString();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ModelAttributeParameterExpander.java
Patch:
@@ -50,6 +50,7 @@
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
+import static java.util.Collections.emptySet;
 import static java.util.function.Function.identity;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toMap;
@@ -352,7 +353,7 @@ private Set<PropertyDescriptor> propertyDescriptors(final Class<?> clazz) {
     } catch (IntrospectionException e) {
       LOG.warn(String.format("Failed to get bean properties on (%s)", clazz), e);
     }
-    return new HashSet();
+    return emptySet();
   }
 
   private Map<Method, PropertyDescriptor> propertyDescriptorsByMethod(

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionLookup.java
Patch:
@@ -24,6 +24,7 @@
 import springfox.documentation.annotations.Incubating;
 import springfox.documentation.service.ApiDescription;
 
+import java.util.HashMap;
 import java.util.Map;
 
 import static com.google.common.collect.Maps.*;
@@ -35,7 +36,7 @@
 @Component
 @Incubating("2.2.0")
 public class ApiDescriptionLookup {
-  private Map<RequestHandlerKey, ApiDescription> cache = newHashMap();
+  private Map<RequestHandlerKey, ApiDescription> cache = new HashMap();
 
   public void add(RequestHandlerKey key, ApiDescription value) {
     cache.put(key, value);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDocumentationScanner.java
Patch:
@@ -45,7 +45,7 @@
 import java.util.function.Function;
 
 
-import static com.google.common.collect.Sets.*;
+import static com.google.common.collect.Sets.newTreeSet;
 import static java.util.stream.Collectors.toList;
 import static java.util.stream.Collectors.toSet;
 import static springfox.documentation.service.Tags.*;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/ModelWithMapProperty.java
Patch:
@@ -22,14 +22,15 @@
 import io.swagger.annotations.ApiModel;
 import io.swagger.annotations.ApiModelProperty;
 
+import java.util.HashMap;
 import java.util.Map;
 
 import static com.google.common.collect.Maps.*;
 
 @ApiModel(description = "Describes model with map property")
 public class ModelWithMapProperty {
   @ApiModelProperty(value = "Map of params to be sent")
-  private final Map<String, String> params = newHashMap();
+  private final Map<String, String> params = new HashMap();
 
   public Map<String, String> getParams() {
     return params;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/ResponseHeaders.java
Patch:
@@ -27,13 +27,13 @@
 import springfox.documentation.schema.ModelReference;
 import springfox.documentation.service.Header;
 
+import java.util.HashMap;
 import java.util.Map;
 import java.util.function.Function;
 
 import static com.google.common.base.Predicates.not;
 import static com.google.common.base.Strings.isNullOrEmpty;
 import static com.google.common.collect.Lists.newArrayList;
-import static com.google.common.collect.Maps.newHashMap;
 import static java.util.Optional.ofNullable;
 import static springfox.documentation.schema.Types.typeNameFor;
 
@@ -52,7 +52,7 @@ public ResponseHeader[] apply(ApiOperation input) {
   }
 
   public static Map<String, Header> headers(ResponseHeader[] responseHeaders) {
-    Map<String, Header> headers = newHashMap();
+    Map<String, Header> headers = new HashMap();
     newArrayList(responseHeaders).stream().filter(not(emptyOrVoid())).forEach(each -> {
       headers.put(each.name(), new Header(each.name(), each.description(), headerModel(each)));
     });

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationModelsProvider.java
Patch:
@@ -35,13 +35,14 @@
 import springfox.documentation.spi.service.contexts.RequestMappingContext;
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
+import java.util.HashSet;
 import java.util.List;
 import java.util.Optional;
 import java.util.Set;
 import java.util.function.Function;
 
 import static com.google.common.collect.Lists.*;
-import static com.google.common.collect.Sets.*;
+
 import static springfox.documentation.schema.ResolvedTypes.*;
 import static springfox.documentation.swagger.annotations.Annotations.*;
 import static springfox.documentation.swagger.common.SwaggerPluginSupport.*;
@@ -83,7 +84,7 @@ private void collectFromApiOperation(RequestMappingContext context) {
   private void collectApiResponses(RequestMappingContext context) {
     List<ApiResponses> allApiResponses = context.findAnnotations(ApiResponses.class);
     LOG.debug("Reading parameters models for handlerMethod |{}|", context.getName());
-    Set<ResolvedType> seenTypes = newHashSet();
+    Set<ResolvedType> seenTypes = new HashSet();
     for (ApiResponses apiResponses : allApiResponses) {
       List<ResolvedType> modelTypes = toResolvedTypes(context).apply(apiResponses);
       for (ResolvedType modelType : modelTypes) {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/ClassOrApiAnnotationResourceGrouping.java
Patch:
@@ -20,7 +20,6 @@
 package springfox.documentation.swagger.web;
 
 
-
 import com.google.common.base.Strings;
 import io.swagger.annotations.Api;
 import org.slf4j.Logger;
@@ -39,7 +38,8 @@
 
 import static com.google.common.base.Strings.*;
 
-import static com.google.common.collect.Sets.*;
+
+import static java.util.Collections.singleton;
 import static java.util.Optional.ofNullable;
 import static java.util.stream.Collectors.toSet;
 import static org.springframework.core.annotation.AnnotationUtils.*;
@@ -83,7 +83,7 @@ private Set<String> groups(HandlerMethod handlerMethod) {
     String group = splitCamelCase(controllerClass.getSimpleName(), " ");
     String apiValue = ofNullable(findAnnotation(controllerClass, Api.class))
         .map(toApiValue()).orElse("");
-    return Strings.isNullOrEmpty(apiValue) ? newHashSet(normalize(group)) : newHashSet(normalize(apiValue));
+    return Strings.isNullOrEmpty(apiValue) ? singleton(normalize(group)) : singleton(normalize(apiValue));
   }
 
   private String normalize(String tag) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SecurityMapper.java
Patch:
@@ -25,6 +25,7 @@
 import springfox.documentation.service.ResourceListing;
 import springfox.documentation.service.SecurityScheme;
 
+import java.util.HashMap;
 import java.util.Map;
 import java.util.TreeMap;
 import java.util.function.Function;
@@ -42,7 +43,7 @@ public class SecurityMapper {
 
   public Map<String, SecuritySchemeDefinition> toSecuritySchemeDefinitions(ResourceListing from) {
     if (from == null) {
-      return newHashMap();
+      return new HashMap();
     }
     TreeMap<String, SecuritySchemeDefinition> result = newTreeMap();
     result.putAll(from.getSecuritySchemes().stream().collect(Collectors.toMap(schemeName(),

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/VendorExtensionsMapper.java
Patch:
@@ -25,6 +25,7 @@
 import springfox.documentation.service.StringVendorExtension;
 import springfox.documentation.service.VendorExtension;
 
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.function.Function;
@@ -63,7 +64,7 @@ private Function<ObjectVendorExtension, Map<String, Object>> toExtensionMap() {
       @Override
       public Map<String, Object> apply(ObjectVendorExtension input) {
         if (!isNullOrEmpty(input.getName())) {
-          Map<String, Object> map = newHashMap();
+          Map<String, Object> map = new HashMap();
           map.put(input.getName(), mapExtensions(input.getValue()));
           return map;
         }
@@ -73,7 +74,7 @@ public Map<String, Object> apply(ObjectVendorExtension input) {
   }
 
   private Map<String, Object> propertiesAsMap(ObjectVendorExtension input) {
-    Map<String, Object> properties = newHashMap();
+    Map<String, Object> properties = new HashMap();
     Iterable<StringVendorExtension> stringExtensions = input.getValue().stream().filter(StringVendorExtension.class::isInstance)
             .map(each -> (StringVendorExtension)each).collect(toList());
     for (StringVendorExtension property : stringExtensions) {

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/Bug1767ListingScanner.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static com.google.common.collect.Sets.newHashSet;
+import static java.util.Collections.singleton;
 
 public class Bug1767ListingScanner implements ApiListingScannerPlugin {
 
@@ -112,7 +112,7 @@ public List<ApiDescription> apply(DocumentationContext context) {
    * @return Set of response messages that overide the default/global response messages
    */
   private Set<ResponseMessage> responseMessages() { //<8>
-    return newHashSet(new ResponseMessageBuilder()
+    return singleton(new ResponseMessageBuilder()
         .code(200)
         .message("Successfully received bug 1767 or 2219 response")
         .responseModel(new ModelRef("string"))

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterRequiredReader.java
Patch:
@@ -120,7 +120,7 @@ private boolean optionalButPresentInThePath(
 
   @SuppressWarnings("squid:S1872")
   boolean isOptional(ResolvedMethodParameter methodParameter) {
-    return "java.util.Optional".equals(methodParameter.getParameterType().getErasedType().getName());
+    return "com.google.common.base.Optional".equals(methodParameter.getParameterType().getErasedType().getName());
   }
 
   private boolean isRequired(RequestParam annotation) {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationContext.java
Patch:
@@ -94,7 +94,7 @@ private Predicate<SecurityContext> pathMatches() {
     return new Predicate<SecurityContext>() {
       @Override
       public boolean apply(SecurityContext input) {
-        return input.securityForPath(requestMappingPattern()) != null;
+        return input.securityForOperation(OperationContext.this) != null;
       }
     };
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/PathAndParametersEquivalence.java
Patch:
@@ -35,6 +35,7 @@ class PathAndParametersEquivalence extends Equivalence<RequestHandler> {
 
   @Override
   protected boolean doEquivalent(RequestHandler a, RequestHandler b) {
+
     return a.getPatternsCondition().equals(b.getPatternsCondition())
         && !Sets.intersection(a.supportedMethods(), b.supportedMethods()).isEmpty()
         && a.params().equals(b.params())

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -75,7 +75,8 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
     toReturn.setAllowEmptyValue(source.isAllowEmptyValue());
     toReturn.getVendorExtensions()
         .putAll(vendorMapper.mapExtensions(source.getVendorExtentions()));
-    maybeAddAllowableValuesToParameter(toReturn, source.getAllowableValues());
+    Property property = property(paramModel.getType());
+    maybeAddAllowableValuesToParameter(toReturn, property, source.getAllowableValues());
     if (paramModel.isCollection()) {
       if (paramModel.getItemType().equals("byte")) {
         toReturn.setType("string");
@@ -89,7 +90,7 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
                 itemTypeProperty(paramItemModelRef),
                 paramItemModelRef.getAllowableValues());
         toReturn.setItems(itemProperty);
-        maybeAddAllowableValuesToParameter(toReturn, paramItemModelRef.getAllowableValues());
+        maybeAddAllowableValuesToParameter(toReturn, itemProperty, paramItemModelRef.getAllowableValues());
       }
     } else if (paramModel.isMap()) {
       ModelReference paramItemModelRef = paramModel.itemModel().get();
@@ -101,7 +102,6 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
       if (source.getScalarExample() != null) {
         ((AbstractSerializableParameter) toReturn).setExample(String.valueOf(source.getScalarExample()));
       }
-      Property property = property(paramModel.getType());
       toReturn.setType(property.getType());
       toReturn.setFormat(property.getFormat());
     }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Orderings.java
Patch:
@@ -105,7 +105,6 @@ private static String qualifiedMethodName(RequestMappingContext context) {
     return String.format("%s.%s", context.getGroupName(), context.getName());
   }
 
-
   public static Ordering<RequestHandler> byPatternsCondition() {
     return Ordering.from(new Comparator<RequestHandler>() {
       @Override

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/PathAndParametersEquivalence.java
Patch:
@@ -35,6 +35,7 @@ class PathAndParametersEquivalence extends Equivalence<RequestHandler> {
 
   @Override
   protected boolean doEquivalent(RequestHandler a, RequestHandler b) {
+
     return a.getPatternsCondition().equals(b.getPatternsCondition())
         && !Sets.intersection(a.supportedMethods(), b.supportedMethods()).isEmpty()
         && a.params().equals(b.params())

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -75,7 +75,8 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
     toReturn.setAllowEmptyValue(source.isAllowEmptyValue());
     toReturn.getVendorExtensions()
         .putAll(vendorMapper.mapExtensions(source.getVendorExtentions()));
-    maybeAddAllowableValuesToParameter(toReturn, source.getAllowableValues());
+    Property property = property(paramModel.getType());
+    maybeAddAllowableValuesToParameter(toReturn, property, source.getAllowableValues());
     if (paramModel.isCollection()) {
       if (paramModel.getItemType().equals("byte")) {
         toReturn.setType("string");
@@ -89,7 +90,7 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
                 itemTypeProperty(paramItemModelRef),
                 paramItemModelRef.getAllowableValues());
         toReturn.setItems(itemProperty);
-        maybeAddAllowableValuesToParameter(toReturn, paramItemModelRef.getAllowableValues());
+        maybeAddAllowableValuesToParameter(toReturn, itemProperty, paramItemModelRef.getAllowableValues());
       }
     } else if (paramModel.isMap()) {
       ModelReference paramItemModelRef = paramModel.itemModel().get();
@@ -101,7 +102,6 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
       if (source.getScalarExample() != null) {
         ((AbstractSerializableParameter) toReturn).setExample(String.valueOf(source.getScalarExample()));
       }
-      Property property = property(paramModel.getType());
       toReturn.setType(property.getType());
       toReturn.setFormat(property.getFormat());
     }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/annotations/EnableSwagger2.java
Patch:
@@ -19,7 +19,6 @@
 
 package springfox.documentation.swagger2.annotations;
 
-import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Import;
 import springfox.documentation.swagger2.configuration.Swagger2DocumentationConfiguration;
 
@@ -40,6 +39,5 @@
 @Target(value = { java.lang.annotation.ElementType.TYPE })
 @Documented
 @Import({Swagger2DocumentationConfiguration.class})
-@ConditionalOnWebApplication
 public @interface EnableSwagger2 {
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/configuration/Swagger2DocumentationConfiguration.java
Patch:
@@ -19,27 +19,28 @@
 
 package springfox.documentation.swagger2.configuration;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
 import org.springframework.core.env.Environment;
 import org.springframework.web.servlet.HandlerMapping;
 import springfox.documentation.spring.web.DocumentationCache;
+import springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping;
 import springfox.documentation.spring.web.SpringfoxWebMvcConfiguration;
 import springfox.documentation.spring.web.json.JacksonModuleRegistrar;
 import springfox.documentation.spring.web.json.JsonSerializer;
 import springfox.documentation.swagger.configuration.SwaggerCommonConfiguration;
 import springfox.documentation.swagger2.mappers.ServiceModelToSwagger2Mapper;
-import springfox.documentation.spring.web.PropertySourcedRequestMappingHandlerMapping;
 import springfox.documentation.swagger2.web.Swagger2Controller;
 
 @Configuration
 @Import({ SpringfoxWebMvcConfiguration.class, SwaggerCommonConfiguration.class })
 @ComponentScan(basePackages = {
-    "springfox.documentation.swagger2.readers.parameter",
     "springfox.documentation.swagger2.mappers"
 })
+@ConditionalOnWebApplication
 public class Swagger2DocumentationConfiguration {
   @Bean
   public JacksonModuleRegistrar swagger2Module() {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelProperties.java
Patch:
@@ -64,8 +64,8 @@ public AllowableValues apply(ApiModelProperty annotation) {
 
   public static AllowableValues allowableValueFromString(String allowableValueString) {
     AllowableValues allowableValues = new AllowableListValues(Lists.<String>newArrayList(), "LIST");
-    String trimmed = allowableValueString.trim().replaceAll(" ", "");
-    Matcher matcher = RANGE_PATTERN.matcher(trimmed);
+    String trimmed = allowableValueString.trim();
+    Matcher matcher = RANGE_PATTERN.matcher(trimmed.replaceAll(" ", ""));
     if (matcher.matches()) {
       if (matcher.groupCount() != 4) {
         LOGGER.warn("Unable to parse range specified {} correctly", trimmed);

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelProperties.java
Patch:
@@ -65,7 +65,7 @@ public AllowableValues apply(ApiModelProperty annotation) {
   public static AllowableValues allowableValueFromString(String allowableValueString) {
     AllowableValues allowableValues = new AllowableListValues(Lists.<String>newArrayList(), "LIST");
     String trimmed = allowableValueString.trim();
-    Matcher matcher = RANGE_PATTERN.matcher(trimmed);
+    Matcher matcher = RANGE_PATTERN.matcher(trimmed.replaceAll(" ", ""));
     if (matcher.matches()) {
       if (matcher.groupCount() != 4) {
         LOGGER.warn("Unable to parse range specified {} correctly", trimmed);

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -47,7 +47,7 @@
 
 import static com.google.common.base.Strings.*;
 import static org.springframework.util.MimeTypeUtils.*;
-import static springfox.documentation.swagger2.web.HostNameProvider.*;
+import static springfox.documentation.swagger.common.HostNameProvider.*;
 
 @Controller
 @ApiIgnore

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -98,7 +98,7 @@ private List<Parameter> readParameters(final OperationContext context) {
         if (shouldExpand(methodParameter, alternate)) {
           parameters.addAll(
               expander.expand(
-                  new ExpansionContext("", alternate, context.getDocumentationContext())));
+                  new ExpansionContext("", alternate, context)));
         } else {
           parameters.add(pluginsManager.parameter(parameterContext));
         }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ExpandedParameterBuilder.java
Patch:
@@ -94,7 +94,7 @@ public void apply(ParameterExpansionContext context) {
         .type(resolved)
         .modelRef(new ModelRef(typeName, itemModel))
         .allowableValues(allowable)
-        .parameterType("query")
+        .parameterType(context.getParameterType())
         .order(DEFAULT_PRECEDENCE)
         .parameterAccess(null);
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -98,7 +98,7 @@ private List<Parameter> readParameters(final OperationContext context) {
         if (shouldExpand(methodParameter, alternate)) {
           parameters.addAll(
               expander.expand(
-                  new ExpansionContext("", alternate, context.getDocumentationContext())));
+                  new ExpansionContext("", alternate, context)));
         } else {
           parameters.add(pluginsManager.parameter(parameterContext));
         }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ExpandedParameterBuilder.java
Patch:
@@ -94,7 +94,7 @@ public void apply(ParameterExpansionContext context) {
         .type(resolved)
         .modelRef(new ModelRef(typeName, itemModel))
         .allowableValues(allowable)
-        .parameterType("query")
+        .parameterType(context.getParameterType())
         .order(DEFAULT_PRECEDENCE)
         .parameterAccess(null);
   }

File: springfox-core/src/main/java/springfox/documentation/PathProvider.java
Patch:
@@ -23,7 +23,7 @@ public interface PathProvider {
 
   /**
    * Gets the application base path
-   * @return
+   * @return application base path
    */
   String getApplicationBasePath();
 

File: springfox-core/src/main/java/springfox/documentation/builders/ApiListingBuilder.java
Patch:
@@ -188,7 +188,7 @@ public ApiListingBuilder securityReferences(List<SecurityReference> securityRefe
    * Updates the apis
    *
    * @param apis - apis
-   * @return
+   * @return this
    */
   public ApiListingBuilder apis(List<ApiDescription> apis) {
     if (apis != null) {
@@ -234,7 +234,7 @@ public ApiListingBuilder position(int position) {
    * Updates the tags
    *
    * @param tagNames - just the tag names
-   * @return
+   * @return this
    */
   public ApiListingBuilder tagNames(Set<String> tagNames) {
     this.tagNames.addAll(nullToEmptySet(tagNames));

File: springfox-core/src/main/java/springfox/documentation/builders/DocumentationBuilder.java
Patch:
@@ -53,7 +53,7 @@ public class DocumentationBuilder {
    * Name of the documentation group
    *
    * @param groupName - group name
-   * @return
+   * @return this
    */
   public DocumentationBuilder name(String groupName) {
     this.groupName = defaultIfAbsent(groupName, this.groupName);

File: springfox-core/src/main/java/springfox/documentation/builders/ResponseMessageBuilder.java
Patch:
@@ -53,7 +53,7 @@ public ResponseMessageBuilder code(int code) {
    * Updates the response message
    *
    * @param message - message
-   * @return
+   * @return this
    */
   public ResponseMessageBuilder message(String message) {
     this.message = defaultIfAbsent(message, this.message);
@@ -74,7 +74,7 @@ public ResponseMessageBuilder responseModel(ModelReference responseModel) {
   /**
    * Updates the response headers
    *
-   * @param headers
+   * @param headers header responses
    * @return this
    * @deprecated Use the {@link ResponseMessageBuilder#headersWithDescription} instead
    * @since 2.5.0
@@ -98,7 +98,7 @@ public Header transformEntry(String key, ModelReference value) {
   /**
    * Updates the response headers
    *
-   * @param headers
+   * @param headers headers with description
    * @return this
    * @since 2.5.0
    */

File: springfox-core/src/main/java/springfox/documentation/builders/TokenEndpointBuilder.java
Patch:
@@ -29,7 +29,7 @@ public class TokenEndpointBuilder {
    * Updates the token endpoint url
    *
    * @param url - url
-   * @return
+   * @return this
    */
   public TokenEndpointBuilder url(String url) {
     this.url = BuilderDefaults.defaultIfAbsent(url, this.url);
@@ -40,7 +40,7 @@ public TokenEndpointBuilder url(String url) {
    * Updates the token name
    *
    * @param tokenName - token name
-   * @return
+   * @return this
    */
   public TokenEndpointBuilder tokenName(String tokenName) {
     this.tokenName = BuilderDefaults.defaultIfAbsent(tokenName, this.tokenName);

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/ParameterContext.java
Patch:
@@ -53,7 +53,7 @@ public ResolvedMethodParameter resolvedMethodParameter() {
   }
 
   /**
-   * @return
+   * @return method parameter
    * @since 2.5.0 this has been deprecated
    * @deprecated Use {@link ParameterContext#resolvedMethodParameter()} instead
    */

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -103,8 +103,8 @@ public Docket petApi() {
                 .parameterType("query")
                 .required(true)
                 .build()))
-        .tags(new Tag("Pet Service", "All apis relating to pets")) // <25>
-        .additionalModels(typeResolver.resolve(AdditionalModel.class)) //<26>
+        .tags(new Tag("Pet Service", "All apis relating to pets")) // <23>
+        .additionalModels(typeResolver.resolve(AdditionalModel.class)) //<24>
         ;
   }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -137,8 +137,8 @@ private Map<String, Property> mapProperties(SortedMap<String, ModelProperty> pro
    * Returns a {@link TreeMap} where the keys are sorted by their respective property position values in ascending
    * order.
    *
-   * @param modelProperties
-   * @return
+   * @param modelProperties properties to sort
+   * @return sorted properties by position and name
    */
   private SortedMap<String, ModelProperty> sort(Map<String, ModelProperty> modelProperties) {
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/SecurityContext.java
Patch:
@@ -60,9 +60,9 @@ public SecurityContext(
   /**
    * Use securitForOperation instead
    * @since 2.8.1
-   * @param path
+   * @param path path to secure
    * @return list of applicable security references
-   * @deprecated {@see SecurityContext#securityForOperation}
+   * @deprecated @see {@link SecurityContext#securityForOperation}
    */
   @Deprecated
   public List<SecurityReference> securityForPath(String path) {

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/mappers/ServiceModelToSwaggerMapper.java
Patch:
@@ -63,6 +63,9 @@ public interface ServiceModelToSwaggerMapper {
 
   springfox.documentation.swagger1.dto.ApiListingReference toSwaggerApiListingReference(ApiListingReference from);
 
+  @Mappings({
+      @Mapping(target = "subTypes", source = "subTypes", qualifiedBy = DataTypeMapper.ResponseTypeName.class),
+  })
   ModelDto toSwaggerModelDto(Model from);
 
   @Mappings({

File: springfox-core/src/main/java/springfox/documentation/schema/Model.java
Patch:
@@ -34,7 +34,7 @@ public class Model {
   private final String description;
   private final String baseModel;
   private final String discriminator;
-  private final List<ModelRef> subTypes;
+  private final List<ModelReference> subTypes;
   private final Object example;
   private final Xml xml;
 
@@ -47,7 +47,7 @@ public Model(
       String description,
       String baseModel,
       String discriminator,
-      List<ModelRef> subTypes,
+      List<ModelReference> subTypes,
       Object example,
       Xml xml) {
 
@@ -92,7 +92,7 @@ public String getDiscriminator() {
     return discriminator;
   }
 
-  public List<ModelRef> getSubTypes() {
+  public List<ModelReference> getSubTypes() {
     return subTypes;
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -118,7 +118,7 @@ private Model modelBuilder(ResolvedType propertiesHost,
         .description("")
         .baseModel("")
         .discriminator("")
-        .subTypes(new ArrayList<ModelRef>());
+        .subTypes(new ArrayList<ModelReference>());
     return schemaPluginsManager.model(modelContext);
   }
 
@@ -147,7 +147,7 @@ private Optional<Model> mapModel(ModelContext parentContext, ResolvedType resolv
           .description("")
           .baseModel("")
           .discriminator("")
-          .subTypes(new ArrayList<ModelRef>())
+          .subTypes(new ArrayList<ModelReference>())
           .build());
     }
     return Optional.absent();

File: springfox-core/src/main/java/springfox/documentation/schema/Model.java
Patch:
@@ -34,7 +34,7 @@ public class Model {
   private final String description;
   private final String baseModel;
   private final String discriminator;
-  private final List<String> subTypes;
+  private final List<ModelRef> subTypes;
   private final Object example;
   private final Xml xml;
 
@@ -47,7 +47,7 @@ public Model(
       String description,
       String baseModel,
       String discriminator,
-      List<String> subTypes,
+      List<ModelRef> subTypes,
       Object example,
       Xml xml) {
 
@@ -92,7 +92,7 @@ public String getDiscriminator() {
     return discriminator;
   }
 
-  public List<String> getSubTypes() {
+  public List<ModelRef> getSubTypes() {
     return subTypes;
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -118,7 +118,7 @@ private Model modelBuilder(ResolvedType propertiesHost,
         .description("")
         .baseModel("")
         .discriminator("")
-        .subTypes(new ArrayList<String>());
+        .subTypes(new ArrayList<ModelRef>());
     return schemaPluginsManager.model(modelContext);
   }
 
@@ -147,7 +147,7 @@ private Optional<Model> mapModel(ModelContext parentContext, ResolvedType resolv
           .description("")
           .baseModel("")
           .discriminator("")
-          .subTypes(new ArrayList<String>())
+          .subTypes(new ArrayList<ModelRef>())
           .build());
     }
     return Optional.absent();

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -99,7 +99,7 @@ public abstract class ServiceModelToSwagger2Mapper {
 
   @Mappings({
       @Mapping(target = "externalDocs", ignore = true),
-      @Mapping(target = "vendorExtensions", ignore = true)
+      @Mapping(target = "vendorExtensions", source = "vendorExtensions")
   })
   protected abstract Tag mapTag(springfox.documentation.service.Tag from);
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -99,7 +99,7 @@ public abstract class ServiceModelToSwagger2Mapper {
 
   @Mappings({
       @Mapping(target = "externalDocs", ignore = true),
-      @Mapping(target = "vendorExtensions", ignore = true)
+      @Mapping(target = "vendorExtensions", source = "vendorExtensions")
   })
   protected abstract Tag mapTag(springfox.documentation.service.Tag from);
 

File: springfox-core/src/main/java/springfox/documentation/annotations/Incubating.java
Patch:
@@ -33,5 +33,5 @@
    * To keep track of which version this incubating feature was introduced
    * @return version the annotation was introduced
    */
-  String value() default "2.2.0";
+  String value() default "2.9.0";
 }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySearchExtractor.java
Patch:
@@ -79,7 +79,7 @@ private ResolvedType inferReturnType(
       TypeResolver resolver) {
     ResolvedType returnType = methodResolver.methodReturnType(handler);
     if (Collections.isContainerType(returnType)) {
-      return resolver.resolve(Resources.class, returnType);
+      return resolver.resolve(Resources.class, Collections.collectionElementType(returnType));
     } else if (Types.isBaseType(returnType)) {
       return returnType;
     }

File: springfox-schema/src/main/java/springfox/documentation/schema/configuration/ModelsConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.plugin.core.config.EnablePluginRegistries;
 import springfox.documentation.spi.schema.ModelBuilderPlugin;
 import springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;
+import springfox.documentation.spi.schema.SyntheticModelProviderPlugin;
 import springfox.documentation.spi.schema.TypeNameProviderPlugin;
 
 @Configuration
@@ -35,7 +36,8 @@
 @EnablePluginRegistries({
     ModelBuilderPlugin.class,
     ModelPropertyBuilderPlugin.class,
-    TypeNameProviderPlugin.class
+    TypeNameProviderPlugin.class,
+    SyntheticModelProviderPlugin.class
 })
 public class ModelsConfiguration {
   @Bean

File: springfox-schema/src/main/java/springfox/documentation/schema/configuration/ModelsConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.plugin.core.config.EnablePluginRegistries;
 import springfox.documentation.spi.schema.ModelBuilderPlugin;
 import springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;
+import springfox.documentation.spi.schema.SyntheticModelProviderPlugin;
 import springfox.documentation.spi.schema.TypeNameProviderPlugin;
 
 @Configuration
@@ -35,7 +36,8 @@
 @EnablePluginRegistries({
     ModelBuilderPlugin.class,
     ModelPropertyBuilderPlugin.class,
-    TypeNameProviderPlugin.class
+    TypeNameProviderPlugin.class,
+    SyntheticModelProviderPlugin.class
 })
 public class ModelsConfiguration {
   @Bean

File: springfox-core/src/main/java/springfox/documentation/annotations/Incubating.java
Patch:
@@ -33,5 +33,5 @@
    * To keep track of which version this incubating feature was introduced
    * @return version the annotation was introduced
    */
-  String value() default "2.2.0";
+  String value() default "2.9.0";
 }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySearchExtractor.java
Patch:
@@ -79,7 +79,7 @@ private ResolvedType inferReturnType(
       TypeResolver resolver) {
     ResolvedType returnType = methodResolver.methodReturnType(handler);
     if (Collections.isContainerType(returnType)) {
-      return resolver.resolve(Resources.class, returnType);
+      return resolver.resolve(Resources.class, Collections.collectionElementType(returnType));
     } else if (Types.isBaseType(returnType)) {
       return returnType;
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/PathAndParametersEquivalence.java
Patch:
@@ -38,7 +38,7 @@ protected boolean doEquivalent(RequestHandler a, RequestHandler b) {
     return a.getPatternsCondition().equals(b.getPatternsCondition())
         && !Sets.intersection(a.supportedMethods(), b.supportedMethods()).isEmpty()
         && a.params().equals(b.params())
-        && Sets.difference(wrapped(a.getParameters()), wrapped(b.getParameters())).isEmpty();
+        && Sets.symmetricDifference(wrapped(a.getParameters()), wrapped(b.getParameters())).isEmpty();
   }
 
   private Set<Wrapper<ResolvedMethodParameter>> wrapped(List<ResolvedMethodParameter> parameters) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/PathAndParametersEquivalence.java
Patch:
@@ -38,7 +38,7 @@ protected boolean doEquivalent(RequestHandler a, RequestHandler b) {
     return a.getPatternsCondition().equals(b.getPatternsCondition())
         && !Sets.intersection(a.supportedMethods(), b.supportedMethods()).isEmpty()
         && a.params().equals(b.params())
-        && Sets.difference(wrapped(a.getParameters()), wrapped(b.getParameters())).isEmpty();
+        && Sets.symmetricDifference(wrapped(a.getParameters()), wrapped(b.getParameters())).isEmpty();
   }
 
   private Set<Wrapper<ResolvedMethodParameter>> wrapped(List<ResolvedMethodParameter> parameters) {

File: springfox-schema/src/main/java/springfox/documentation/schema/Types.java
Patch:
@@ -52,7 +52,8 @@ private Types() {
       "date-time",
       "__file",
       "biginteger",
-      "bigdecimal");
+      "bigdecimal",
+      "uuid");
   private static final Map<Type, String> typeNameLookup = ImmutableMap.<Type, String>builder()
       .put(Long.TYPE, "long")
       .put(Short.TYPE, "int")
@@ -77,7 +78,7 @@ private Types() {
       .put(BigDecimal.class, "bigdecimal")
       .put(BigInteger.class, "biginteger")
       .put(Currency.class, "string")
-      .put(UUID.class, "string")
+      .put(UUID.class, "uuid")
       .put(MultipartFile.class, "__file")
       .build();
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ParameterMapper.java
Patch:
@@ -43,6 +43,8 @@
 @Mapper
 public class ParameterMapper {
 
+  private static final VendorExtensionsMapper vendorMapper = new VendorExtensionsMapper();
+
   public Parameter mapParameter(springfox.documentation.service.Parameter source) {
     Parameter bodyParameter = bodyParameter(source);
     return SerializableParameterFactories.create(source).or(bodyParameter);
@@ -57,6 +59,7 @@ private Parameter bodyParameter(springfox.documentation.service.Parameter source
     parameter.setAccess(source.getParamAccess());
     parameter.setPattern(source.getPattern());
     parameter.setRequired(source.isRequired());
+    parameter.getVendorExtensions().putAll(vendorMapper.mapExtensions(source.getVendorExtentions()));
     for (Entry<String, Collection<Example>> each : source.getExamples().asMap().entrySet()) {
       Optional<Example> example = FluentIterable.from(each.getValue()).first();
       if (example.isPresent() && example.get().getValue() != null) {

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterMerger.java
Patch:
@@ -99,6 +99,8 @@ private Parameter merged(Parameter destination, Parameter source) {
         .required(source.isRequired())
         .type(source.getType().orNull())
         .order(source.getOrder())
+        .scalarExample(source.getScalarExample())
+        .complexExamples(source.getExamples())
         .build();
   }
 

File: springfox-core/src/main/java/springfox/documentation/schema/Model.java
Patch:
@@ -35,7 +35,7 @@ public class Model {
   private final String baseModel;
   private final String discriminator;
   private final List<String> subTypes;
-  private final String example;
+  private final Object example;
   private final Xml xml;
 
   public Model(
@@ -48,7 +48,7 @@ public Model(
       String baseModel,
       String discriminator,
       List<String> subTypes,
-      String example,
+      Object example,
       Xml xml) {
 
     this.id = id;
@@ -100,7 +100,7 @@ public ResolvedType getType() {
     return type;
   }
 
-  public String getExample() {
+  public Object getExample() {
     return example;
   }
 

File: springfox-core/src/main/java/springfox/documentation/schema/ModelProperty.java
Patch:
@@ -40,7 +40,7 @@ public class ModelProperty {
   private final String description;
   private final AllowableValues allowableValues;
   private ModelReference modelRef;
-  private final String example;
+  private final Object example;
   private final String pattern;
   private final String defaultValue;
   private final Xml xml;
@@ -57,7 +57,7 @@ public ModelProperty(
       Boolean allowEmptyValue,
       String description,
       AllowableValues allowableValues,
-      String example,
+      Object example,
       String pattern,
       String defaultValue,
       Xml xml,
@@ -125,7 +125,7 @@ public ModelProperty updateModelRef(Function<ResolvedType, ? extends ModelRefere
     return this;
   }
 
-  public String getExample() {
+  public Object getExample() {
     return example;
   }
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/Example.java
Patch:
@@ -33,7 +33,7 @@ public class Example extends Parent implements Serializable {
   @ApiParam(value = "description of foo", required = true, allowableValues = "man,chu")
   private String foo;
 
-  @ApiModelProperty(value = "description of bar", required = false)
+  @ApiModelProperty(value = "description of bar", required = false, example = "10")
   private int bar;
 
   private EnumType enumType;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -41,6 +41,7 @@
 import static com.google.common.base.Strings.*;
 import static springfox.documentation.schema.Types.*;
 import static springfox.documentation.swagger.common.SwaggerPluginSupport.*;
+import static springfox.documentation.swagger.readers.parameter.Examples.*;
 import static springfox.documentation.swagger.schema.ApiModelProperties.*;
 
 @Component
@@ -76,6 +77,8 @@ static Parameter implicitParameter(DescriptionResolver descriptions, ApiImplicit
         .parameterType(emptyToNull(param.paramType()))
         .parameterAccess(param.access())
         .order(SWAGGER_PLUGIN_ORDER)
+        .scalarExample(param.example())
+        .complexExamples(examples(param.examples()))
         .build();
   }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -93,6 +93,9 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
     } else {
       //TODO: swagger-core remove this downcast when swagger-core fixes its problem
       ((AbstractSerializableParameter) toReturn).setDefaultValue(source.getDefaultValue());
+      if (source.getScalarExample() != null) {
+        ((AbstractSerializableParameter) toReturn).setExample(String.valueOf(source.getScalarExample()));
+      }
       Property property = property(paramModel.getType());
       toReturn.setType(property.getType());
       toReturn.setFormat(property.getFormat());

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ExpandedParameterBuilder.java
Patch:
@@ -44,6 +44,7 @@
 import static com.google.common.collect.Lists.*;
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Types.*;
+import static springfox.documentation.service.Parameter.*;
 
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
@@ -94,6 +95,7 @@ public void apply(ParameterExpansionContext context) {
         .modelRef(new ModelRef(typeName, itemModel))
         .allowableValues(allowable)
         .parameterType("query")
+        .order(DEFAULT_PRECEDENCE)
         .parameterAccess(null);
   }
 

File: springfox-core/src/main/java/springfox/documentation/builders/OperationBuilder.java
Patch:
@@ -179,7 +179,7 @@ public OperationBuilder protocols(Set<String> protocols) {
    * @param securityReferences - authorization that reference security definitions
    * @return this
    */
-  public OperationBuilder authorizations(List<SecurityReference> securityReferences) {
+  public OperationBuilder authorizations(Collection<SecurityReference> securityReferences) {
     this.securityReferences.addAll(nullToEmptyList(securityReferences));
     return this;
   }

File: springfox-core/src/main/java/springfox/documentation/builders/OperationBuilder.java
Patch:
@@ -179,7 +179,7 @@ public OperationBuilder protocols(Set<String> protocols) {
    * @param securityReferences - authorization that reference security definitions
    * @return this
    */
-  public OperationBuilder authorizations(List<SecurityReference> securityReferences) {
+  public OperationBuilder authorizations(Collection<SecurityReference> securityReferences) {
     this.securityReferences.addAll(nullToEmptyList(securityReferences));
     return this;
   }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/annotations/EnableSwagger2.java
Patch:
@@ -19,6 +19,7 @@
 
 package springfox.documentation.swagger2.annotations;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Import;
 import springfox.documentation.swagger2.configuration.Swagger2DocumentationConfiguration;
 
@@ -39,5 +40,6 @@
 @Target(value = { java.lang.annotation.ElementType.TYPE })
 @Documented
 @Import({Swagger2DocumentationConfiguration.class})
+@ConditionalOnWebApplication
 public @interface EnableSwagger2 {
 }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySearchExtractor.java
Patch:
@@ -79,7 +79,7 @@ private ResolvedType inferReturnType(
       TypeResolver resolver) {
     ResolvedType returnType = methodResolver.methodReturnType(handler);
     if (Collections.isContainerType(returnType)) {
-      return resolver.resolve(Resources.class, returnType);
+      return resolver.resolve(Resources.class, Collections.collectionElementType(returnType));
     } else if (Types.isBaseType(returnType)) {
       return returnType;
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ResourceGroups.java
Patch:
@@ -44,7 +44,6 @@ static Iterable<ResourceGroup> sortedByName(Set<ResourceGroup> resourceGroups) {
     return from(resourceGroups).toSortedList(resourceGroupComparator());
   }
 
-
   static Predicate<ApiDescription> belongsTo(final ResourceGroup resourceGroup) {
     return new Predicate<ApiDescription>() {
       @Override

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -79,8 +79,7 @@ public Docket petApi() {
           .paths(PathSelectors.any())//<6>
           .build()//<7>
         .pathMapping("/")//<8>
-        .directModelSubstitute(LocalDate.class,
-            String.class)//<9>
+        .directModelSubstitute(LocalDate.class, String.class)//<9>
         .genericModelSubstitutes(ResponseEntity.class)
         .alternateTypeRules(
             newRule(typeResolver.resolve(DeferredResult.class,

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -79,8 +79,7 @@ public Docket petApi() {
           .paths(PathSelectors.any())//<6>
           .build()//<7>
         .pathMapping("/")//<8>
-        .directModelSubstitute(LocalDate.class,
-            String.class)//<9>
+        .directModelSubstitute(LocalDate.class, String.class)//<9>
         .genericModelSubstitutes(ResponseEntity.class)
         .alternateTypeRules(
             newRule(typeResolver.resolve(DeferredResult.class,

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterNotNullAnnotationPlugin.java
Patch:
@@ -30,8 +30,6 @@
 
 import javax.validation.constraints.NotNull;
 
-import static springfox.bean.validators.plugins.Validators.*;
-
 @Component
 @Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)
 public class ExpandedParameterNotNullAnnotationPlugin implements ExpandedParameterBuilderPlugin {
@@ -46,7 +44,8 @@ public boolean supports(DocumentationType delimiter) {
 
   @Override
   public void apply(ParameterExpansionContext context) {
-    Optional<NotNull> notNull = validatorFromExpandedParameter(context, NotNull.class);
+
+    Optional<NotNull> notNull = context.findAnnotation(NotNull.class);
 
     if (notNull.isPresent()) {
       LOG.debug("Setting parameter to required because of @NotNull attribute");

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterPatternAnnotationPlugin.java
Patch:
@@ -30,8 +30,6 @@
 
 import javax.validation.constraints.Pattern;
 
-import static springfox.bean.validators.plugins.Validators.*;
-
 @Component
 @Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)
 public class ExpandedParameterPatternAnnotationPlugin implements ExpandedParameterBuilderPlugin {
@@ -46,7 +44,8 @@ public boolean supports(DocumentationType delimiter) {
 
   @Override
   public void apply(ParameterExpansionContext context) {
-    Optional<Pattern> pattern = validatorFromExpandedParameter(context, Pattern.class);
+
+    Optional<Pattern> pattern = context.findAnnotation(Pattern.class);
 
     if (pattern.isPresent()) {
       LOG.debug("@Pattern present: {}", pattern.get().regexp());

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/ExpandedParameterSizeAnnotationPlugin.java
Patch:
@@ -32,7 +32,6 @@
 import javax.validation.constraints.Size;
 
 import static springfox.bean.validators.plugins.RangeAnnotations.*;
-import static springfox.bean.validators.plugins.Validators.*;
 
 @Component
 @Order(Validators.BEAN_VALIDATOR_PLUGIN_ORDER)
@@ -48,8 +47,8 @@ public boolean supports(DocumentationType delimiter) {
 
   @Override
   public void apply(ParameterExpansionContext context) {
-    Optional<Size> size = validatorFromExpandedParameter(context, Size.class)
-        .or(validatorFromExpandedParameter(context, Size.class));
+
+    Optional<Size> size = context.findAnnotation(Size.class);
 
     if (size.isPresent()) {
       AllowableRangeValues values = stringLengthRange(size.get());

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/QueryStringUriTemplateDecorator.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.common.base.Function;
 import com.google.common.base.Joiner;
 import com.google.common.base.Predicate;
+import com.google.common.collect.Ordering;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
@@ -85,14 +86,14 @@ private Set<String> queryParamNames(PathContext context) {
     return from(context.getParameters())
         .filter(and(queryStringParams(), not(onlyOneAllowableValue())))
         .transform(paramName())
-        .toSet();
+        .toSortedSet(Ordering.natural());
   }
 
   private String prefilledQueryParams(PathContext context) {
     return Joiner.on("&").join(from(context.getParameters())
         .filter(onlyOneAllowableValue())
         .transform(queryStringWithValue())
-        .toSet())
+        .toSortedSet(Ordering.natural()))
         .trim();
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/property/ObjectMapperBeanPropertyNamingStrategy.java
Patch:
@@ -43,9 +43,6 @@ public class ObjectMapperBeanPropertyNamingStrategy implements BeanPropertyNamin
   private static final Logger LOG = LoggerFactory.getLogger(ObjectMapperBeanPropertyNamingStrategy.class);
   private ObjectMapper objectMapper;
 
-  public ObjectMapperBeanPropertyNamingStrategy() {
-  }
-
   @Override
   public String nameForSerialization(final BeanPropertyDefinition beanProperty) {
 

File: springfox-schema/src/main/java/springfox/documentation/schema/XmlModelPlugin.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.fasterxml.classmate.TypeResolver;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
@@ -30,6 +31,7 @@
 import javax.xml.bind.annotation.XmlType;
 
 @Component
+@Conditional(JaxbPresentInClassPathCondition.class)
 public class XmlModelPlugin implements ModelBuilderPlugin {
   private final TypeResolver typeResolver;
 

File: springfox-schema/src/main/java/springfox/documentation/schema/property/XmlPropertyPlugin.java
Patch:
@@ -19,8 +19,10 @@
 package springfox.documentation.schema.property;
 
 import com.google.common.base.Optional;
+import org.springframework.context.annotation.Conditional;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.stereotype.Component;
+import springfox.documentation.schema.JaxbPresentInClassPathCondition;
 import springfox.documentation.schema.Xml;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;
@@ -36,6 +38,7 @@
 import static springfox.documentation.schema.Annotations.*;
 
 @Component
+@Conditional(JaxbPresentInClassPathCondition.class)
 public class XmlPropertyPlugin implements ModelPropertyBuilderPlugin {
   
   @Override

File: springfox-schema/src/main/java/springfox/documentation/schema/property/XmlPropertyPlugin.java
Patch:
@@ -61,7 +61,7 @@ public void apply(ModelPropertyContext context) {
           XmlAttribute.class));
     }
 
-    if (elementAnnotation.isPresent()) {
+    if (elementAnnotation.isPresent() && context.getBeanPropertyDefinition().isPresent()) {
       Optional<XmlElementWrapper> wrapper = findPropertyAnnotation(
           context.getBeanPropertyDefinition().get(),
           XmlElementWrapper.class);

File: springfox-schema/src/main/java/springfox/documentation/schema/property/XmlPropertyPlugin.java
Patch:
@@ -61,7 +61,7 @@ public void apply(ModelPropertyContext context) {
           XmlAttribute.class));
     }
 
-    if (elementAnnotation.isPresent()) {
+    if (elementAnnotation.isPresent() && context.getBeanPropertyDefinition().isPresent()) {
       Optional<XmlElementWrapper> wrapper = findPropertyAnnotation(
           context.getBeanPropertyDefinition().get(),
           XmlElementWrapper.class);

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/parameter/SizeAnnotationPlugin.java
Patch:
@@ -49,10 +49,10 @@ public boolean supports(DocumentationType delimiter) {
   @Override
   public void apply(ParameterContext context) {
     Optional<Size> size = annotationFromParameter(context, Size.class);
-    LOG.info("searching for @size: {}", size.isPresent());
+    LOG.debug("searching for @size: {}", size.isPresent());
     if (size.isPresent()) {
       AllowableRangeValues values = stringLengthRange(size.get());
-      LOG.info("Adding allowable Values @Size: {} - {}", values.getMin(), values.getMax());
+      LOG.debug("Adding allowable Values @Size: {} - {}", values.getMin(), values.getMax());
       context.parameterBuilder().allowableValues(values);
 
       // TODO Additionally show @Size in the description until https://github.com/springfox/springfox/issues/1244

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/RequestMappingContext.java
Patch:
@@ -49,15 +49,15 @@ public class RequestMappingContext {
 
   public RequestMappingContext(DocumentationContext context,
       RequestHandler handler,
-      UniqueTypeNameAdapter uniqueTypeNameAdjuster) {
+      UniqueTypeNameAdapter uniqueTypeNameAdapter) {
 
     this.documentationContext = context;
     this.handler = handler;
     this.requestMappingPattern = "";
     this.operationModelContextsBuilder = new OperationModelContextsBuilder(
         context.getGroupName(),
         context.getDocumentationType(),
-        uniqueTypeNameAdjuster,
+        uniqueTypeNameAdapter,
         context.getAlternateTypeProvider(),
         context.getGenericsNamingStrategy(),
         context.getIgnorableParameterTypes());

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingReferenceScanner.java
Patch:
@@ -45,7 +45,7 @@ public ApiListingReferenceScanResult scan(DocumentationContext context) {
     ArrayListMultimap<ResourceGroup, RequestMappingContext> resourceGroupRequestMappings
         = ArrayListMultimap.create();
 
-    UniqueTypeNameAdapter typeNameAdfuster = new TypeNameIndexingAdapter();
+    UniqueTypeNameAdapter uniqueTypeNameAdapter = new TypeNameIndexingAdapter();
 
     ApiSelector selector = context.getApiSelector();
     Iterable<RequestHandler> matchingHandlers = from(context.getRequestHandlers())
@@ -55,7 +55,7 @@ public ApiListingReferenceScanResult scan(DocumentationContext context) {
           handler.declaringClass(), 0);
 
       RequestMappingContext requestMappingContext
-          = new RequestMappingContext(context, handler, typeNameAdfuster);
+          = new RequestMappingContext(context, handler, uniqueTypeNameAdapter);
 
       resourceGroupRequestMappings.put(resourceGroup, requestMappingContext);
     }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ApiParamParameterBuilder.java
Patch:
@@ -68,6 +68,7 @@ public void apply(ParameterContext context) {
           .parameterAccess(emptyToNull(annotation.access()))
           .defaultValue(emptyToNull(annotation.defaultValue()))
           .allowMultiple(annotation.allowMultiple())
+          .allowEmptyValue(annotation.allowEmptyValue())
           .required(annotation.required())
           .hidden(annotation.hidden())
           .collectionFormat(annotation.collectionFormat());

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelPropertyPropertyBuilder.java
Patch:
@@ -60,7 +60,6 @@ public void apply(ModelPropertyContext context) {
           .allowableValues(annotation.transform(toAllowableValues()).orNull())
           .required(annotation.transform(toIsRequired()).or(false))
           .readOnly(annotation.transform(toIsReadOnly()).or(false))
-          .allowEmptyValue(annotation.transform(toAllowEmptyValue()).or(false))
           .description(annotation.transform(toDescription(descriptions)).orNull())
           .isHidden(annotation.transform(toHidden()).or(false))
           .type(annotation.transform(toType(context.getResolver())).orNull())

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -69,6 +69,7 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
     toReturn.setAccess(source.getParamAccess());
     toReturn.setPattern(source.getPattern());
     toReturn.setRequired(source.isRequired());
+    toReturn.setAllowEmptyValue(source.isAllowEmptyValue());
     maybeAddAllowableValuesToParameter(toReturn, source.getAllowableValues());
     if (paramModel.isCollection()) {
       if (paramModel.getItemType().equals("byte")) {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ApiParamParameterBuilder.java
Patch:
@@ -68,6 +68,7 @@ public void apply(ParameterContext context) {
           .parameterAccess(emptyToNull(annotation.access()))
           .defaultValue(emptyToNull(annotation.defaultValue()))
           .allowMultiple(annotation.allowMultiple())
+          .allowEmptyValue(annotation.allowEmptyValue())
           .required(annotation.required())
           .hidden(annotation.hidden())
           .collectionFormat(annotation.collectionFormat());

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelPropertyPropertyBuilder.java
Patch:
@@ -60,7 +60,6 @@ public void apply(ModelPropertyContext context) {
           .allowableValues(annotation.transform(toAllowableValues()).orNull())
           .required(annotation.transform(toIsRequired()).or(false))
           .readOnly(annotation.transform(toIsReadOnly()).or(false))
-          .allowEmptyValue(annotation.transform(toAllowEmptyValue()).or(false))
           .description(annotation.transform(toDescription(descriptions)).orNull())
           .isHidden(annotation.transform(toHidden()).or(false))
           .type(annotation.transform(toType(context.getResolver())).orNull())

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -69,6 +69,7 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
     toReturn.setAccess(source.getParamAccess());
     toReturn.setPattern(source.getPattern());
     toReturn.setRequired(source.isRequired());
+    toReturn.setAllowEmptyValue(source.isAllowEmptyValue());
     maybeAddAllowableValuesToParameter(toReturn, source.getAllowableValues());
     if (paramModel.isCollection()) {
       if (paramModel.getItemType().equals("byte")) {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/SpringDataRestRequestHandler.java
Patch:
@@ -64,7 +64,9 @@ public boolean isAnnotatedWith(Class<? extends Annotation> annotation) {
 
   @Override
   public PatternsRequestCondition getPatternsCondition() {
-    return new PatternsRequestConditionWrapper(new org.springframework.web.servlet.mvc.condition.PatternsRequestCondition(actionSpecification.getPath()));
+    return new PatternsRequestConditionWrapper(
+            new org.springframework.web.servlet.mvc.condition.PatternsRequestCondition(actionSpecification.getPath())
+    );
   }
 
   @Override

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/SpringGroupingStrategy.java
Patch:
@@ -19,7 +19,6 @@
 
 package springfox.documentation.spring.web;
 
-import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;
 import springfox.documentation.service.ResourceGroup;
 import springfox.documentation.spi.DocumentationType;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/annotations/EnableSwagger2WebFlux.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.springframework.context.annotation.Import;
 import springfox.documentation.swagger2.configuration.Swagger2DocumentationWebFluxConfiguration;
-import springfox.documentation.swagger2.configuration.Swagger2DocumentationWebMvcConfiguration;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/annotations/EnableSwagger2WebMvc.java
Patch:
@@ -20,7 +20,6 @@
 package springfox.documentation.swagger2.annotations;
 
 import org.springframework.context.annotation.Import;
-import springfox.documentation.swagger2.configuration.Swagger2DocumentationWebFluxConfiguration;
 import springfox.documentation.swagger2.configuration.Swagger2DocumentationWebMvcConfiguration;
 
 import java.lang.annotation.Documented;

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -51,7 +51,7 @@
 import springfox.documentation.swagger.web.TagsSorter;
 import springfox.documentation.swagger.web.UiConfiguration;
 import springfox.documentation.swagger.web.UiConfigurationBuilder;
-import springfox.documentation.swagger2.annotations.EnableSwagger2;
+import springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;
 import springfox.petstore.controller.PetController;
 
 import java.util.List;
@@ -60,7 +60,7 @@
 import static springfox.documentation.schema.AlternateTypeRules.*;
 
 @SpringBootApplication
-@EnableSwagger2//<1>
+@EnableSwagger2WebMvc//<1>
 @ComponentScan(basePackageClasses = {
     PetController.class
 })//<2>

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -148,7 +148,7 @@ private DocumentationPlugin defaultDocumentationPlugin() {
 
   public DocumentationContextBuilder createContextBuilder(
       DocumentationType documentationType,
-      DefaultConfiguration defaultConfiguration) {
+      DefaultsProviderPlugin defaultConfiguration) {
     return defaultsProviders.getPluginFor(documentationType, defaultConfiguration)
         .create(documentationType)
         .withResourceGroupingStrategy(resourceGroupingStrategy(documentationType));

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/PathAndParametersEquivalence.java
Patch:
@@ -25,7 +25,6 @@
 import com.google.common.collect.Sets;
 import springfox.documentation.RequestHandler;
 import springfox.documentation.service.ResolvedMethodParameter;
-import springfox.documentation.spring.web.PatternsRequestConditionWrapper;
 
 import java.util.List;
 import java.util.Set;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/InMemorySwaggerResourcesProvider.java
Patch:
@@ -53,7 +53,8 @@ public InMemorySwaggerResourcesProvider(
     swagger1Url = environment.getProperty("springfox.documentation.swagger.v1.path", "/api-docs");
     swagger2Url = environment.getProperty("springfox.documentation.swagger.v2.path", "/v2/api-docs");
     swagger1Available = classByName("springfox.documentation.swagger1.web.Swagger1Controller").isPresent();
-    swagger2Available = classByName("springfox.documentation.swagger2.web.Swagger2Controller").isPresent();
+    swagger2Available = classByName("springfox.documentation.swagger2.web.Swagger2ControllerWebFlux").isPresent()
+                      || classByName("springfox.documentation.swagger2.web.Swagger2ControllerWebMvc").isPresent() ;
     this.documentationCache = documentationCache;
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/Paths.java
Patch:
@@ -88,7 +88,7 @@ public static String firstPathSegment(String path) {
   public static String sanitizeRequestMappingPattern(String requestMappingPattern) {
     String result = requestMappingPattern;
     //remove regex portion '/{businessId:\\w+}'
-    result = result.replaceAll("\\{([^}]+?):[^/]+\\}", "{$1}");
+    result = result.replaceAll("\\{([^}]+?):([^/{}]|\\{[\\d,]+})+}", "{$1}");
     return result.isEmpty() ? "/" : result;
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/Paths.java
Patch:
@@ -88,7 +88,7 @@ public static String firstPathSegment(String path) {
   public static String sanitizeRequestMappingPattern(String requestMappingPattern) {
     String result = requestMappingPattern;
     //remove regex portion '/{businessId:\\w+}'
-    result = result.replaceAll("\\{([^}]+?):[^/]+\\}", "{$1}");
+    result = result.replaceAll("\\{([^}]+?):([^/{}]|\\{[\\d,]+\\})+\\}", "{$1}");
     return result.isEmpty() ? "/" : result;
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/ResolvedTypes.java
Patch:
@@ -25,6 +25,7 @@
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import springfox.documentation.service.AllowableValues;
+import springfox.documentation.spi.schema.EnumTypeDeterminer;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 
 import java.lang.reflect.Type;
@@ -72,9 +73,10 @@ public String apply(ResolvedType input) {
 
   public static Function<ResolvedType, ModelReference> modelRefFactory(
       final ModelContext parentContext,
+      final EnumTypeDeterminer enumTypeDeterminer,
       final TypeNameExtractor typeNameExtractor) {
 
-    return new ModelReferenceProvider(typeNameExtractor, parentContext);
+    return new ModelReferenceProvider(typeNameExtractor, enumTypeDeterminer, parentContext);
   }
 
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDataTypeReader.java
Patch:
@@ -111,7 +111,7 @@ public void apply(ParameterContext context) {
     context.parameterBuilder()
         .type(parameterType)
         .modelRef(Optional.fromNullable(modelRef)
-            .or(modelRefFactory(modelContext, nameExtractor).apply(parameterType)));
+            .or(modelRefFactory(modelContext, enumTypeDeterminer, nameExtractor).apply(parameterType)));
   }
 
   private boolean treatRequestParamAsString(ResolvedType parameterType) {

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelContext.java
Patch:
@@ -331,7 +331,7 @@ public Set<Integer> getSimilarTypes() {
   }
 
   public void assumeEqualsTo(ModelContext other) {
-    if (other.type.equals(type)) {
+    if (other.type.getErasedType().getName().equals(type.getErasedType().getName())) {
       uniqueTypeNameAdapter.setEqualityFor(hashCode(), other.hashCode());
     }
   }

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelReferenceProvider.java
Patch:
@@ -63,7 +63,7 @@ private Optional<ModelReference> mapReference(ResolvedType type) {
     if (isMapType(type)) {
       ResolvedType mapValueType = mapValueType(type);
       String typeName = typeNameExtractor.typeName(fromParent(parentContext, type));
-      return Optional.<ModelReference>of(new ModelRef(typeName, apply(mapValueType), null, true, modelId(fromParent(parentContext, type))));
+      return Optional.<ModelReference>of(new ModelRef(typeName, apply(mapValueType), null, true, Optional.<Integer>absent()));
     }
     return Optional.absent();
   }
@@ -77,7 +77,7 @@ private Optional<ModelReference> collectionReference(ResolvedType type) {
               typeName,
               apply(collectionElementType),
               allowableValues(collectionElementType),
-              modelId(fromParent(parentContext, type))));
+              Optional.<Integer>absent()));
     }
     return Optional.absent();
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationModelsProvider.java
Patch:
@@ -98,7 +98,7 @@ private void collectParameters(RequestMappingContext context) {
           ResolvedType modelType = context.alternateFor(parameterType.getParameterType());
           LOG.debug("Adding input parameter of type {}", resolvedTypeSignature(modelType).or("<null>"));
           context.operationModelsBuilder().addInputParam(modelType, 
-              viewProvider.viewFor(modelType, context), new HashSet<ResolvedType>());
+              viewProvider.viewFor(modelType, parameterType), new HashSet<ResolvedType>());
         }
     }
     LOG.debug("Finished reading parameters models for handlerMethod |{}|", context.getName());

File: springfox-core/src/main/java/springfox/documentation/schema/ModelRef.java
Patch:
@@ -39,7 +39,7 @@ public ModelRef(String type, ModelReference itemType) {
     this(type, itemType, false);
   }
 
-  public ModelRef(String type, ModelReference itemType, AllowableValues allowableValues, Integer modelId) {
+  public ModelRef(String type, ModelReference itemType, AllowableValues allowableValues, Optional<Integer> modelId) {
     this(type, itemType, allowableValues, false, modelId);
   }
 
@@ -51,12 +51,12 @@ public ModelRef(String type, ModelReference itemType, boolean isMap) {
     this(type, itemType, null, isMap, null);
   }
 
-  public ModelRef(String type, ModelReference itemModel, AllowableValues allowableValues, boolean isMap, Integer modelId) {
+  public ModelRef(String type, ModelReference itemModel, AllowableValues allowableValues, boolean isMap, Optional<Integer> modelId) {
     this.type = type;
     this.isMap = isMap;
     this.allowableValues = Optional.fromNullable(allowableValues);
     this.itemModel = Optional.fromNullable(itemModel);
-    this.modelId = Optional.fromNullable(modelId);
+    this.modelId = modelId;
   }
 
   @Override

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/configuration/SpringDataRestConfiguration.java
Patch:
@@ -19,7 +19,6 @@
 package springfox.documentation.spring.data.rest.configuration;
 
 import com.fasterxml.classmate.TypeResolver;
-import com.google.common.collect.Lists;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
@@ -35,8 +34,8 @@
 import java.lang.reflect.Type;
 import java.util.List;
 
-import static com.google.common.collect.Lists.newArrayList;
-import static springfox.documentation.schema.AlternateTypeRules.newRule;
+import static com.google.common.collect.Lists.*;
+import static springfox.documentation.schema.AlternateTypeRules.*;
 
 @Configuration
 @ComponentScan(basePackages = "springfox.documentation.spring.data.rest")

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -98,7 +98,7 @@ private List<Parameter> readParameters(final OperationContext context) {
         if (shouldExpand(methodParameter, alternate)) {
           parameters.addAll(
               expander.expand(
-                  new ExpansionContext("", methodParameter.getParameterType(), context.getDocumentationContext())));
+                  new ExpansionContext("", alternate, context.getDocumentationContext())));
         } else {
           parameters.add(pluginsManager.parameter(parameterContext));
         }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiModelReader.java
Patch:
@@ -131,7 +131,7 @@ private List<Model> mergeModelBranch(Map<ResolvedType, List<Model>> modelTypeMap
             newModels.add(model_to);
             ModelContext context_to = contextMap.get(model_to.getId());
             context_to.assumeEqualsTo(contextMap.get(model_for.getId()));
-            adjustLinksFor(modelBranch, model_for.getId(), model_to.getId(), contextMap.get(model_to.getId()));
+            adjustLinksFor(modelBranch, model_for.getId(), contextMap.get(model_to.getId()));
             continue outer;
           }
         }
@@ -181,7 +181,6 @@ private Map<ResolvedType, List<Model>> toModelTypeMap(Map<ResourceGroup, List<Mo
 
   private void adjustLinksFor(Map<String, Model> branch,
           String id_for,
-          String  id_to,
           ModelContext modelContext) {
     for(Map.Entry<String, Model> entry : branch.entrySet()) {
       Model model = entry.getValue();

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/dto/ModelDto.java
Patch:
@@ -21,15 +21,17 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonProperty;
 
 import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
 
 public class ModelDto {
 
-  private String id;
   @JsonIgnore
+  private String id;
+  @JsonProperty("id")
   private String name;
   @JsonIgnore
   private String qualifiedType;

File: springfox-schema/src/main/java/springfox/documentation/schema/JacksonJsonViewProvider.java
Patch:
@@ -35,7 +35,7 @@
 
 import springfox.documentation.service.ResolvedMethodParameter;
 import springfox.documentation.spi.DocumentationType;
-import springfox.documentation.spi.service.ViewProviderPlugin;
+import springfox.documentation.spi.schema.ViewProviderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
 import springfox.documentation.spi.service.contexts.RequestMappingContext;
 

File: springfox-schema/src/main/java/springfox/documentation/schema/configuration/ModelsConfiguration.java
Patch:
@@ -27,7 +27,7 @@
 import springfox.documentation.spi.schema.ModelBuilderPlugin;
 import springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;
 import springfox.documentation.spi.schema.TypeNameProviderPlugin;
-import springfox.documentation.spi.service.ViewProviderPlugin;
+import springfox.documentation.spi.schema.ViewProviderPlugin;
 
 @Configuration
 @ComponentScan(basePackages = {

File: springfox-schema/src/main/java/springfox/documentation/schema/plugins/SchemaPluginsManager.java
Patch:
@@ -28,9 +28,9 @@
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.schema.ModelBuilderPlugin;
 import springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;
+import springfox.documentation.spi.schema.ViewProviderPlugin;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 import springfox.documentation.spi.schema.contexts.ModelPropertyContext;
-import springfox.documentation.spi.service.ViewProviderPlugin;
 
 @Component
 public class SchemaPluginsManager {
@@ -44,7 +44,7 @@ public SchemaPluginsManager(
       PluginRegistry<ModelPropertyBuilderPlugin, DocumentationType> propertyEnrichers,
       @Qualifier("modelBuilderPluginRegistry")
       PluginRegistry<ModelBuilderPlugin, DocumentationType> modelEnrichers,
-      @Qualifier("viewProviderRegistry")
+      @Qualifier("viewProviderPluginRegistry")
       PluginRegistry<ViewProviderPlugin, DocumentationType> viewProviders) {
     this.propertyEnrichers = propertyEnrichers;
     this.modelEnrichers = modelEnrichers;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationModelsProvider.java
Patch:
@@ -33,8 +33,8 @@
 import springfox.documentation.schema.plugins.SchemaPluginsManager;
 import springfox.documentation.service.ResolvedMethodParameter;
 import springfox.documentation.spi.DocumentationType;
+import springfox.documentation.spi.schema.ViewProviderPlugin;
 import springfox.documentation.spi.service.OperationModelsProviderPlugin;
-import springfox.documentation.spi.service.ViewProviderPlugin;
 import springfox.documentation.spi.service.contexts.RequestMappingContext;
 
 import java.util.HashSet;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationResponseClassReader.java
Patch:
@@ -30,9 +30,9 @@
 import springfox.documentation.schema.TypeNameExtractor;
 import springfox.documentation.schema.plugins.SchemaPluginsManager;
 import springfox.documentation.spi.DocumentationType;
+import springfox.documentation.spi.schema.ViewProviderPlugin;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 import springfox.documentation.spi.service.OperationBuilderPlugin;
-import springfox.documentation.spi.service.ViewProviderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
 
 import static springfox.documentation.schema.ResolvedTypes.*;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDataTypeReader.java
Patch:
@@ -37,9 +37,9 @@
 import springfox.documentation.service.ResolvedMethodParameter;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.schema.EnumTypeDeterminer;
+import springfox.documentation.spi.schema.ViewProviderPlugin;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 import springfox.documentation.spi.service.ParameterBuilderPlugin;
-import springfox.documentation.spi.service.ViewProviderPlugin;
 import springfox.documentation.spi.service.contexts.ParameterContext;
 
 import static springfox.documentation.schema.Collections.*;

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationModelContextsBuilder.java
Patch:
@@ -23,7 +23,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 
-import springfox.documentation.spi.schema.UniqueTypeNameAdjuster;
+import springfox.documentation.spi.schema.UniqueTypeNameAdapter;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.schema.AlternateTypeProvider;
 import springfox.documentation.spi.schema.GenericTypeNamingStrategy;
@@ -36,7 +36,7 @@
 public class OperationModelContextsBuilder {
   private final String group;
   private final DocumentationType documentationType;
-  private final UniqueTypeNameAdjuster uniqueTypeNameAdjuster;
+  private final UniqueTypeNameAdapter uniqueTypeNameAdjuster;
   private final AlternateTypeProvider alternateTypeProvider;
   private final GenericTypeNamingStrategy genericsNamingStrategy;
   private final ImmutableSet<Class> ignorableTypes;
@@ -45,7 +45,7 @@ public class OperationModelContextsBuilder {
   public OperationModelContextsBuilder(
       String group,
       DocumentationType documentationType,
-      UniqueTypeNameAdjuster uniqueTypeNameAdjuster,
+      UniqueTypeNameAdapter uniqueTypeNameAdjuster,
       AlternateTypeProvider alternateTypeProvider,
       GenericTypeNamingStrategy genericsNamingStrategy,
       ImmutableSet<Class> ignorableParameterTypes) {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/RequestMappingContext.java
Patch:
@@ -32,7 +32,7 @@
 import springfox.documentation.service.Operation;
 import springfox.documentation.service.ResolvedMethodParameter;
 import springfox.documentation.spi.schema.GenericTypeNamingStrategy;
-import springfox.documentation.spi.schema.UniqueTypeNameAdjuster;
+import springfox.documentation.spi.schema.UniqueTypeNameAdapter;
 
 import java.lang.annotation.Annotation;
 import java.util.List;
@@ -49,7 +49,7 @@ public class RequestMappingContext {
 
   public RequestMappingContext(DocumentationContext context,
       RequestHandler handler,
-      UniqueTypeNameAdjuster uniqueTypeNameAdjuster) {
+      UniqueTypeNameAdapter uniqueTypeNameAdjuster) {
 
     this.documentationContext = context;
     this.handler = handler;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingReferenceScanner.java
Patch:
@@ -24,9 +24,9 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
 import springfox.documentation.RequestHandler;
-import springfox.documentation.schema.TypeNameIndexingAdjuster;
+import springfox.documentation.schema.TypeNameIndexingAdapter;
 import springfox.documentation.service.ResourceGroup;
-import springfox.documentation.spi.schema.UniqueTypeNameAdjuster;
+import springfox.documentation.spi.schema.UniqueTypeNameAdapter;
 import springfox.documentation.spi.service.contexts.ApiSelector;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.RequestMappingContext;
@@ -45,7 +45,7 @@ public ApiListingReferenceScanResult scan(DocumentationContext context) {
     ArrayListMultimap<ResourceGroup, RequestMappingContext> resourceGroupRequestMappings
         = ArrayListMultimap.create();
 
-    UniqueTypeNameAdjuster typeNameAdfuster = new TypeNameIndexingAdjuster();
+    UniqueTypeNameAdapter typeNameAdfuster = new TypeNameIndexingAdapter();
 
     ApiSelector selector = context.getApiSelector();
     Iterable<RequestHandler> matchingHandlers = from(context.getRequestHandlers())

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.Map;
 
 import static com.google.common.base.Functions.*;
-import static com.google.common.base.Strings.isNullOrEmpty;
+import static com.google.common.base.Strings.*;
 import static springfox.documentation.swagger2.mappers.EnumMapper.*;
 import static springfox.documentation.swagger2.mappers.Properties.*;
 
@@ -57,7 +57,7 @@ private SerializableParameterFactories() {
   static Optional<io.swagger.models.parameters.Parameter> create(Parameter source) {
     SerializableParameterFactory factory = forMap(SerializableParameterFactories.factory,
         new NullSerializableParameterFactory())
-        .apply(source.getParamType().toLowerCase());
+        .apply(nullToEmpty(source.getParamType()).toLowerCase());
 
     SerializableParameter toReturn = factory.create(source);
     if (toReturn == null) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.Map;
 
 import static com.google.common.base.Functions.*;
-import static com.google.common.base.Strings.isNullOrEmpty;
+import static com.google.common.base.Strings.*;
 import static springfox.documentation.swagger2.mappers.EnumMapper.*;
 import static springfox.documentation.swagger2.mappers.Properties.*;
 
@@ -57,7 +57,7 @@ private SerializableParameterFactories() {
   static Optional<io.swagger.models.parameters.Parameter> create(Parameter source) {
     SerializableParameterFactory factory = forMap(SerializableParameterFactories.factory,
         new NullSerializableParameterFactory())
-        .apply(source.getParamType().toLowerCase());
+        .apply(nullToEmpty(source.getParamType()).toLowerCase());
 
     SerializableParameter toReturn = factory.create(source);
     if (toReturn == null) {

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterBuilder.java
Patch:
@@ -21,15 +21,14 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.google.common.base.Optional;
-import com.google.common.base.Strings;
 import springfox.documentation.schema.ModelReference;
 import springfox.documentation.service.AllowableValues;
 import springfox.documentation.service.Parameter;
 import springfox.documentation.service.VendorExtension;
 
 import java.util.List;
 
-import static com.google.common.collect.Lists.newArrayList;
+import static com.google.common.collect.Lists.*;
 import static springfox.documentation.builders.BuilderDefaults.*;
 
 public class ParameterBuilder {
@@ -143,7 +142,7 @@ public ParameterBuilder allowableValues(AllowableValues allowableValues) {
    * @return this
    */
   public ParameterBuilder parameterType(String paramType) {
-    this.paramType = defaultIfAbsent(Strings.emptyToNull(paramType), this.paramType);
+    this.paramType = defaultIfAbsent(paramType, this.paramType);
     return this;
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -73,7 +73,7 @@ static Parameter implicitParameter(DescriptionResolver descriptions, ApiImplicit
         .allowMultiple(param.allowMultiple())
         .modelRef(modelRef)
         .allowableValues(allowableValueFromString(param.allowableValues()))
-        .parameterType(param.paramType())
+        .parameterType(emptyToNull(param.paramType()))
         .parameterAccess(param.access())
         .build();
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/PropertySourcedRequestMappingHandlerMapping.java
Patch:
@@ -77,11 +77,12 @@ protected void initHandlerMethods() {
 
   private String mappingPath(final PropertySourcedMapping mapper) {
     final String key = mapper.propertyKey();
+    final String target = mapper.value();
     return Optional.fromNullable(environment.getProperty(key))
         .transform(new Function<String, String>() {
           @Override
           public String apply(String input) {
-            return input.replace(String.format("${%s}", key), input);
+            return target.replace(String.format("${%s}", key), input);
           }
         })
         .orNull();

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelPropertyPropertyBuilder.java
Patch:
@@ -60,6 +60,7 @@ public void apply(ModelPropertyContext context) {
           .allowableValues(annotation.transform(toAllowableValues()).orNull())
           .required(annotation.transform(toIsRequired()).or(false))
           .readOnly(annotation.transform(toIsReadOnly()).or(false))
+          .allowEmptyValue(annotation.transform(toAllowEmptyValue()).or(false))
           .description(annotation.transform(toDescription(descriptions)).orNull())
           .isHidden(annotation.transform(toHidden()).or(false))
           .type(annotation.transform(toType(context.getResolver())).orNull())

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -183,6 +183,7 @@ private Property mapProperty(ModelProperty source) {
       property.setName(source.getName());
       property.setRequired(source.isRequired());
       property.setReadOnly(source.isReadOnly());
+      property.setAllowEmptyValue(source.isAllowEmptyValue());
       property.setExample(source.getExample());
       property.getVendorExtensions().putAll(extensions);
       property.setXml(mapXml(source.getXml()));

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterBuilder.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.google.common.base.Optional;
+import com.google.common.base.Strings;
 import springfox.documentation.schema.ModelReference;
 import springfox.documentation.service.AllowableValues;
 import springfox.documentation.service.Parameter;
@@ -142,7 +143,7 @@ public ParameterBuilder allowableValues(AllowableValues allowableValues) {
    * @return this
    */
   public ParameterBuilder parameterType(String paramType) {
-    this.paramType = defaultIfAbsent(paramType, this.paramType);
+    this.paramType = defaultIfAbsent(Strings.emptyToNull(paramType), this.paramType);
     return this;
   }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -89,6 +89,7 @@ private Model mapProperties(springfox.documentation.schema.Model source) {
     model.setRequired(requiredFields.toList());
     model.setSimple(false);
     model.setType(ModelImpl.OBJECT);
+    model.setTitle(source.getName());
     if (isMapType(source.getType())) {
       Optional<Class> clazz = typeOfValue(source);
       if (clazz.isPresent()) {

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelReferenceProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -26,8 +26,8 @@
 
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Maps.*;
-import static springfox.documentation.schema.ResolvedTypes.allowableValues;
-import static springfox.documentation.spi.schema.contexts.ModelContext.fromParent;
+import static springfox.documentation.schema.ResolvedTypes.*;
+import static springfox.documentation.spi.schema.contexts.ModelContext.*;
 
 class ModelReferenceProvider implements Function<ResolvedType, ModelReference> {
   private final TypeNameExtractor typeNameExtractor;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/BugsController.java
Patch:
@@ -330,7 +330,8 @@ public ResponseEntity<Map<String, List<Example>>> addEmailsToList(
 
   @PostMapping(path = "/1965", consumes = "multipart/form-data")
   public ResponseEntity<Example> bug1965(
-      @Valid @RequestPart(name = "sfData") @RequestParam Integer sfId,
+      @Valid @RequestPart(name = "sfParamMap") @RequestParam Map<String, String> paramMap,
+      @Valid @RequestPart(name = "sfId") @RequestParam Integer sfId,
       @Valid @RequestPart(name = "sfData") Example sfData,
       @RequestParam(name = "file", required = false) MultipartFile supportFile) {
     return ResponseEntity.ok(null);

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelReferenceProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -26,8 +26,8 @@
 
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Maps.*;
-import static springfox.documentation.schema.ResolvedTypes.allowableValues;
-import static springfox.documentation.spi.schema.contexts.ModelContext.fromParent;
+import static springfox.documentation.schema.ResolvedTypes.*;
+import static springfox.documentation.spi.schema.contexts.ModelContext.*;
 
 class ModelReferenceProvider implements Function<ResolvedType, ModelReference> {
   private final TypeNameExtractor typeNameExtractor;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DefaultRequestHandlerCombiner.java
Patch:
@@ -93,7 +93,7 @@ private ImmutableListMultimap<Equivalence.Wrapper<RequestHandler>, RequestHandle
   private String keys(List<RequestHandler> source) {
     final StringBuffer sb = new StringBuffer("Request Handlers with duplicate keys {");
     for (int i = 0; i < source.size(); i++) {
-      sb.append("\t")
+      sb.append('\t')
           .append(i)
           .append(". ")
           .append(source.get(i).key());

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/data/rest/CategoryRepository.java
Patch:
@@ -21,6 +21,6 @@
 import org.springframework.data.repository.CrudRepository;
 import org.springframework.data.rest.core.annotation.RepositoryRestResource;
 
-@RepositoryRestResource(path = "categories")
+@RepositoryRestResource(path = "categories", exported = false)
 public interface CategoryRepository extends CrudRepository<Category, Long> {
 }
\ No newline at end of file

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiModelReader.java
Patch:
@@ -164,8 +164,7 @@ private Map<ResolvedType, List<Model>> toModelTypeMap(Map<ResourceGroup, List<Mo
       for (Model model: entry.getValue()) {
         if (modelTypeMap.containsKey(model.getType())) {
           modelTypeMap.get(model.getType()).add(model);
-        }
-        else {
+        } else {
           modelTypeMap.put(model.getType(), new ArrayList<Model>(Arrays.asList(new Model[] {model})));
         }
       }

File: springfox-schema/src/main/java/springfox/documentation/schema/TypeNameExtractor.java
Patch:
@@ -127,7 +127,7 @@ private String modelName(ModelContext context) {
     TypeNameProviderPlugin selected =
         typeNameProviders.getPluginFor(context.getDocumentationType(), new DefaultTypeNameProvider());
     String modelName = selected.nameFor(((ResolvedType)context.getType()).getErasedType());
-    LOG.info("Generated unique model named: {}, with model id: {}", modelName, context.hashCode());
+    LOG.debug("Generated unique model named: {}, with model id: {}", modelName, context.hashCode());
     if (!isMapType(asResolved(context.getType()))) {
       String typePostfix = context.typePostfix();
       if (!typePostfix.equals("")) {

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelContext.java
Patch:
@@ -91,11 +91,11 @@ public class ModelContext {
     this.view = parentContext.getView();
     this.validationGroups = parentContext.getValidationGroups();
     this.documentationType = parentContext.getDocumentationType();
-    this.modelBuilder = new ModelBuilder(String.valueOf(hashCode()));
     this.uniqueTypeNameAdjuster = parentContext.uniqueTypeNameAdjuster;
     this.alternateTypeProvider = parentContext.alternateTypeProvider;
     this.ignorableTypes = parentContext.ignorableTypes;
     this.genericNamingStrategy = parentContext.getGenericNamingStrategy();
+    this.modelBuilder = new ModelBuilder(String.valueOf(hashCode()));
     this.adjustTypeNames = parentContext.adjustTypeNames;
   }
   
@@ -107,11 +107,11 @@ public class ModelContext {
     this.view = parentContext.getView();
     this.validationGroups = parentContext.getValidationGroups();
     this.documentationType = parentContext.getDocumentationType();
-    this.modelBuilder = new ModelBuilder(String.valueOf(hashCode()));
     this.uniqueTypeNameAdjuster = parentContext.uniqueTypeNameAdjuster;
     this.alternateTypeProvider = parentContext.alternateTypeProvider;
     this.ignorableTypes = parentContext.ignorableTypes;
     this.genericNamingStrategy = parentContext.getGenericNamingStrategy();
+    this.modelBuilder = new ModelBuilder(String.valueOf(hashCode()));
     this.adjustTypeNames = adjustTypeNames;
   }
 

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelContext.java
Patch:
@@ -27,10 +27,10 @@
 import com.google.common.collect.Sets;
 
 import springfox.documentation.builders.ModelBuilder;
+import springfox.documentation.spi.schema.UniqueTypeNameAdjuster;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.schema.AlternateTypeProvider;
 import springfox.documentation.spi.schema.GenericTypeNamingStrategy;
-import springfox.documentation.spi.schema.UniqueTypeNameAdjuster;
 
 import java.lang.reflect.Type;
 import java.util.Set;

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationModelContextsBuilder.java
Patch:
@@ -22,10 +22,11 @@
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
+
+import springfox.documentation.spi.schema.UniqueTypeNameAdjuster;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.schema.AlternateTypeProvider;
 import springfox.documentation.spi.schema.GenericTypeNamingStrategy;
-import springfox.documentation.spi.schema.UniqueTypeNameAdjuster;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 
 import java.util.Set;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingReferenceScanner.java
Patch:
@@ -24,6 +24,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
 import springfox.documentation.RequestHandler;
+import springfox.documentation.schema.TypeNameIndexingAdjuster;
 import springfox.documentation.service.ResourceGroup;
 import springfox.documentation.spi.schema.UniqueTypeNameAdjuster;
 import springfox.documentation.spi.service.contexts.ApiSelector;
@@ -44,7 +45,7 @@ public ApiListingReferenceScanResult scan(DocumentationContext context) {
     ArrayListMultimap<ResourceGroup, RequestMappingContext> resourceGroupRequestMappings
         = ArrayListMultimap.create();
 
-    UniqueTypeNameAdjuster typeNameAdfuster = new UniqueTypeNameAdjuster();
+    UniqueTypeNameAdjuster typeNameAdfuster = new TypeNameIndexingAdjuster();
 
     ApiSelector selector = context.getApiSelector();
     Iterable<RequestHandler> matchingHandlers = from(context.getRequestHandlers())

File: springfox-schema/src/main/java/springfox/documentation/schema/Types.java
Patch:
@@ -80,6 +80,7 @@ private Types() {
       .put(Currency.class, "string")
       .put(UUID.class, "uuid")
       .put(MultipartFile.class, "__file")
+      .put(Void.class, "Void")
       .build();
 
   public static String typeNameFor(Type type) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/PropertySourcedRequestMappingHandlerMapping.java
Patch:
@@ -77,11 +77,12 @@ protected void initHandlerMethods() {
 
   private String mappingPath(final PropertySourcedMapping mapper) {
     final String key = mapper.propertyKey();
+    final String target = mapper.value();
     return Optional.fromNullable(environment.getProperty(key))
         .transform(new Function<String, String>() {
           @Override
           public String apply(String input) {
-            return input.replace(String.format("${%s}", key), input);
+            return target.replace(String.format("${%s}", key), input);
           }
         })
         .orNull();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ExpansionContext.java
Patch:
@@ -73,7 +73,8 @@ public ExpansionContext childContext(
             String parentName,
             ResolvedType paramType,
             DocumentationContext documentationContext) {
-        seenTypes.add(paramType);
-        return new ExpansionContext(parentName, paramType, documentationContext, seenTypes);
+        Set<ResolvedType> childSeenTypes = newHashSet(seenTypes);
+        childSeenTypes.add(paramType);
+        return new ExpansionContext(parentName, paramType, documentationContext, childSeenTypes);
     }
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ExpansionContext.java
Patch:
@@ -73,7 +73,8 @@ public ExpansionContext childContext(
             String parentName,
             ResolvedType paramType,
             DocumentationContext documentationContext) {
-        seenTypes.add(paramType);
-        return new ExpansionContext(parentName, paramType, documentationContext, seenTypes);
+        Set<ResolvedType> childSeenTypes = newHashSet(seenTypes);
+        childSeenTypes.add(paramType);
+        return new ExpansionContext(parentName, paramType, documentationContext, childSeenTypes);
     }
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionReader.java
Patch:
@@ -82,7 +82,7 @@ public List<ApiDescription> read(RequestMappingContext outerContext) {
             } catch (Error e) {
                 String contentMsg = "Process path[" + path + "],method[" + methodName + "] error";
                 log.error(contentMsg, e);
-                throw new Error(contentMsg, e);
+                throw new AssertionError(contentMsg, e);
             }
         }
         return apiDescriptionList;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/WebMvcRequestHandler.java
Patch:
@@ -40,6 +40,7 @@
 public class WebMvcRequestHandler implements RequestHandler {
   private final RequestMappingInfo requestMapping;
   private final HandlerMethod handlerMethod;
+  private HandlerMethodResolver handlerMethodResolver = new HandlerMethodResolver(new TypeResolver());
 
   public WebMvcRequestHandler(
       RequestMappingInfo requestMapping,
@@ -124,13 +125,11 @@ public RequestHandlerKey key() {
 
   @Override
   public List<ResolvedMethodParameter> getParameters() {
-    HandlerMethodResolver handlerMethodResolver = new HandlerMethodResolver(new TypeResolver());
     return handlerMethodResolver.methodParameters(handlerMethod);
   }
 
   @Override
   public ResolvedType getReturnType() {
-    HandlerMethodResolver handlerMethodResolver = new HandlerMethodResolver(new TypeResolver());
     return handlerMethodResolver.methodReturnType(handlerMethod);
   }
 

File: springfox-core/src/main/java/springfox/documentation/builders/ApiListingBuilder.java
Patch:
@@ -52,7 +52,7 @@ public class ApiListingBuilder {
   private List<SecurityReference> securityReferences = newArrayList();
   private List<ApiDescription> apis = newArrayList();
 
-  private final Set<Tag> tags = newTreeSet(tagNameComparator());
+  private final Set<Tag> tags = newTreeSet(tagComparator());
   private final Set<String> tagNames = newHashSet();
   private final Map<String, Model> models = newHashMap();
   private final Map<String, Tag> tagLookup = newHashMap();

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -66,7 +66,7 @@ public class DocumentationContextBuilder {
   private final Set<String> produces = newHashSet();
   private final Set<String> consumes = newHashSet();
   private final Set<ResolvedType> additionalModels = newHashSet();
-  private final Set<Tag> tags = newTreeSet(Tags.tagNameComparator());
+  private final Set<Tag> tags = newTreeSet(Tags.tagComparator());
   private List<VendorExtension> vendorExtensions = new ArrayList<VendorExtension>();
 
   private TypeResolver typeResolver;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyControllerWithTags.java
Patch:
@@ -25,5 +25,6 @@
 public class DummyControllerWithTags {
   @ApiOperation(value = "dummyMethod", tags = {"Tag3", "Tag4"})
   public void dummyMethod() {
+    // empty method
   }
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -170,6 +170,7 @@ private Property mapProperty(ModelProperty source) {
       if (source.getPattern() != null) {
         stringProperty.setPattern(source.getPattern());
       }
+      stringProperty.setDefault(source.getDefaultValue());
     }
 
     if (property != null) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -170,6 +170,9 @@ private Property mapProperty(ModelProperty source) {
       if (source.getPattern() != null) {
         stringProperty.setPattern(source.getPattern());
       }
+      if (source.getDefaultValue() != null) {
+        stringProperty.setDefault(source.getDefaultValue());
+      }
     }
 
     if (property != null) {

File: springfox-core/src/main/java/springfox/documentation/builders/OperationBuilder.java
Patch:
@@ -36,7 +36,7 @@
 import java.util.List;
 import java.util.Set;
 
-import static com.google.common.base.Strings.*;
+import static com.google.common.base.Strings.emptyToNull;
 import static com.google.common.collect.Lists.*;
 import static com.google.common.collect.Sets.*;
 import static springfox.documentation.builders.BuilderDefaults.*;
@@ -301,6 +301,7 @@ private Set<ResponseMessage> mergeResponseMessages(Set<ResponseMessage> response
             .code(each.getCode())
             .message(message)
             .responseModel(responseWithModel)
+            .headersWithDescription(responseMessage.getHeaders())
             .headersWithDescription(each.getHeaders())
             .build());
       } else {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationDeleteExtractor.java
Patch:
@@ -53,8 +53,9 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
     RepositoryMetadata repository = entityContext.getRepositoryMetadata();
 
     ActionSpecification delete = new ActionSpecification(
-        String.format("%s%s", lowerCamelCaseName(entity.getType().getSimpleName()), upperCamelCaseName(property
-            .getName())),
+        String.format("%s%s",
+            lowerCamelCaseName(entity.getType().getSimpleName()),
+            upperCamelCaseName(property.getName())),
         String.format("%s%s/{id}/%s",
             entityContext.basePath(),
             entityContext.resourcePath(),

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationGetExtractor.java
Patch:
@@ -53,8 +53,9 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
     RepositoryMetadata repository = entityContext.getRepositoryMetadata();
     
     ActionSpecification get = new ActionSpecification(
-        String.format("%s%s", lowerCamelCaseName(entity.getType().getSimpleName()), upperCamelCaseName(property
-            .getName())),
+        String.format("%s%s",
+            lowerCamelCaseName(entity.getType().getSimpleName()),
+            upperCamelCaseName(property.getName())),
         String.format("%s%s/{id}/%s",
             entityContext.basePath(),
             entityContext.resourcePath(),

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationItemDeleteExtractor.java
Patch:
@@ -54,8 +54,9 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
     if (property.isMap() || property.isCollectionLike()) {
       String propertyIdentifier = propertyIdentifierName(property);
       ActionSpecification deleteItem = new ActionSpecification(
-          String.format("%s%s", lowerCamelCaseName(entity.getType().getSimpleName()), upperCamelCaseName(property
-              .getName())),
+          String.format("%s%s",
+              lowerCamelCaseName(entity.getType().getSimpleName()),
+              upperCamelCaseName(property.getName())),
           String.format("%s%s/{id}/%s/{%s}",
               entityContext.basePath(),
               entityContext.resourcePath(),

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationSaveExtractor.java
Patch:
@@ -53,8 +53,9 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
     RepositoryMetadata repository = entityContext.getRepositoryMetadata();
     if (property.isWritable() && property.getOwner().equals(entity)) {
       ActionSpecification update = new ActionSpecification(
-          String.format("%s%s", lowerCamelCaseName(entity.getType().getSimpleName()), upperCamelCaseName(property
-              .getName())),
+          String.format("%s%s",
+              lowerCamelCaseName(entity.getType().getSimpleName()),
+              upperCamelCaseName(property.getName())),
           String.format("%s%s/{id}/%s",
               entityContext.basePath(),
               entityContext.resourcePath(),

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/RequestExtractionUtils.java
Patch:
@@ -45,7 +45,7 @@ public static String lowerCamelCaseName(String stringValue) {
   }
 
   public static String upperCamelCaseName(String stringValue) {
-    return CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, stringValue);
+    return CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, stringValue);
   }
 
   public static String actionName(PersistentEntity<?, ?> entity, Method method) {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationDeleteExtractor.java
Patch:
@@ -53,8 +53,9 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
     RepositoryMetadata repository = entityContext.getRepositoryMetadata();
 
     ActionSpecification delete = new ActionSpecification(
-        String.format("%s%s", lowerCamelCaseName(entity.getType().getSimpleName()), upperCamelCaseName(property
-            .getName())),
+        String.format("%s%s",
+            lowerCamelCaseName(entity.getType().getSimpleName()),
+            upperCamelCaseName(property.getName())),
         String.format("%s%s/{id}/%s",
             entityContext.basePath(),
             entityContext.resourcePath(),

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationGetExtractor.java
Patch:
@@ -53,8 +53,9 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
     RepositoryMetadata repository = entityContext.getRepositoryMetadata();
     
     ActionSpecification get = new ActionSpecification(
-        String.format("%s%s", lowerCamelCaseName(entity.getType().getSimpleName()), upperCamelCaseName(property
-            .getName())),
+        String.format("%s%s",
+            lowerCamelCaseName(entity.getType().getSimpleName()),
+            upperCamelCaseName(property.getName())),
         String.format("%s%s/{id}/%s",
             entityContext.basePath(),
             entityContext.resourcePath(),

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationItemDeleteExtractor.java
Patch:
@@ -54,8 +54,9 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
     if (property.isMap() || property.isCollectionLike()) {
       String propertyIdentifier = propertyIdentifierName(property);
       ActionSpecification deleteItem = new ActionSpecification(
-          String.format("%s%s", lowerCamelCaseName(entity.getType().getSimpleName()), upperCamelCaseName(property
-              .getName())),
+          String.format("%s%s",
+              lowerCamelCaseName(entity.getType().getSimpleName()),
+              upperCamelCaseName(property.getName())),
           String.format("%s%s/{id}/%s/{%s}",
               entityContext.basePath(),
               entityContext.resourcePath(),

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityAssociationSaveExtractor.java
Patch:
@@ -53,8 +53,9 @@ public List<RequestHandler> extract(EntityAssociationContext context) {
     RepositoryMetadata repository = entityContext.getRepositoryMetadata();
     if (property.isWritable() && property.getOwner().equals(entity)) {
       ActionSpecification update = new ActionSpecification(
-          String.format("%s%s", lowerCamelCaseName(entity.getType().getSimpleName()), upperCamelCaseName(property
-              .getName())),
+          String.format("%s%s",
+              lowerCamelCaseName(entity.getType().getSimpleName()),
+              upperCamelCaseName(property.getName())),
           String.format("%s%s/{id}/%s",
               entityContext.basePath(),
               entityContext.resourcePath(),

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/RequestExtractionUtils.java
Patch:
@@ -45,7 +45,7 @@ public static String lowerCamelCaseName(String stringValue) {
   }
 
   public static String upperCamelCaseName(String stringValue) {
-    return CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, stringValue);
+    return CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, stringValue);
   }
 
   public static String actionName(PersistentEntity<?, ?> entity, Method method) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -170,7 +170,9 @@ private Property mapProperty(ModelProperty source) {
       if (source.getPattern() != null) {
         stringProperty.setPattern(source.getPattern());
       }
-      property.setDefault(source.getDefaultValue());
+      if (source.getDefaultValue() != null) {
+        stringProperty.setDefault(source.getDefaultValue());
+      }
     }
 
     if (property != null) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -170,6 +170,7 @@ private Property mapProperty(ModelProperty source) {
       if (source.getPattern() != null) {
         stringProperty.setPattern(source.getPattern());
       }
+      property.setDefault(source.getDefaultValue());
     }
 
     if (property != null) {

File: springfox-core/src/main/java/springfox/documentation/builders/ModelPropertyBuilder.java
Patch:
@@ -105,7 +105,7 @@ public ModelPropertyBuilder extensions(List<VendorExtension> extensions) {
   }
 
   public ModelPropertyBuilder defaultValue(String defaultValue) {
-    this.defaultValue = defaultValue;
+    this.defaultValue = defaultIfAbsent(defaultValue, this.defaultValue);
     return this;
   }
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyControllerWithTags.java
Patch:
@@ -25,5 +25,6 @@
 public class DummyControllerWithTags {
   @ApiOperation(value = "dummyMethod", tags = {"Tag3", "Tag4"})
   public void dummyMethod() {
+    // empty method
   }
 }

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/configuration/SwaggerJacksonModule.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -57,7 +57,7 @@ public class SwaggerJacksonModule extends SimpleModule implements JacksonModuleR
 
   public void maybeRegisterModule(ObjectMapper objectMapper) {
     if (isModuleSetup(objectMapper)) {
-      objectMapper.registerModule(new SwaggerJacksonModule());
+      objectMapper.registerModule(this);
       objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
     }
   }

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/data/rest/PersonRepository.java
Patch:
@@ -36,4 +36,6 @@ List<Person> findByLastName(
       @ApiParam(name = "name", value = "name parameter")
       @Param("name") String name);
 
+  List<Person> findByFirstName(@Param("firstName") String firstName);
+
 }
\ No newline at end of file

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/configuration/Swagger2JacksonModule.java
Patch:
@@ -123,8 +123,8 @@ private boolean isNotJsonString(final String value) throws IOException {
         // and an example value of "null" probably does not make much sense anyway
         return value.startsWith("{")                              // object
                 || value.startsWith("[")                          // array
-                || value.equals("true")                           // true
-                || value.equals("false")                          // false
+                || "true".equals(value)                           // true
+                || "false".equals(value)                          // false
                 || JSON_NUMBER_PATTERN.matcher(value).matches();  // number
       }
 

File: swagger-contract-tests/src/main/java/springfox/test/contract/swagger/data/rest/PersonRepository.java
Patch:
@@ -36,4 +36,6 @@ List<Person> findByLastName(
       @ApiParam(name = "name", value = "name parameter")
       @Param("name") String name);
 
+  List<Person> findByFirstName(@Param("firstName") String firstName);
+
 }
\ No newline at end of file

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/CombinedRequestHandler.java
Patch:
@@ -125,7 +125,7 @@ public ResolvedType getReturnType() {
 
   @Override
   public <T extends Annotation> Optional<T> findControllerAnnotation(Class<T> annotation) {
-    return first.findAnnotation(annotation).or(second.findAnnotation(annotation)) ;
+    return first.findControllerAnnotation(annotation).or(second.findControllerAnnotation(annotation)) ;
   }
 
   @Override

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DefaultRequestHandlerCombiner.java
Patch:
@@ -65,6 +65,9 @@ private Collection<? extends RequestHandler> combined(Collection<RequestHandler>
       RequestHandler toCombine = path.get();
       if (handlers.size() > 1) {
         for (RequestHandler each : handlers) {
+          if (each.equals(toCombine)) {
+            continue;
+          }
           toCombine = combine(toCombine, each);
         }
       }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/CombinedRequestHandler.java
Patch:
@@ -125,7 +125,7 @@ public ResolvedType getReturnType() {
 
   @Override
   public <T extends Annotation> Optional<T> findControllerAnnotation(Class<T> annotation) {
-    return first.findAnnotation(annotation).or(second.findAnnotation(annotation)) ;
+    return first.findControllerAnnotation(annotation).or(second.findControllerAnnotation(annotation)) ;
   }
 
   @Override

File: springfox-core/src/main/java/springfox/documentation/builders/RequestHandlerSelectors.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
+import org.springframework.util.ClassUtils;
 import springfox.documentation.RequestHandler;
 
 import java.lang.annotation.Annotation;
@@ -94,7 +95,7 @@ private static Function<Class<?>, Boolean> handlerPackage(final String basePacka
     return new Function<Class<?>, Boolean>() {
       @Override
       public Boolean apply(Class<?> input) {
-        return input.getPackage().getName().startsWith(basePackage);
+        return ClassUtils.getPackageName(input).startsWith(basePackage);
       }
     };
   }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -190,7 +190,9 @@ private Property mapProperty(ModelProperty source) {
   }
 
   private Xml mapXml(springfox.documentation.schema.Xml xml) {
-    if (xml == null) return null;
+    if (xml == null) {
+      return null;
+    }
     return new Xml()
         .name(xml.getName())
         .attribute(xml.getAttribute())

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/schema/NotNullAnnotationPlugin.java
Patch:
@@ -50,7 +50,9 @@ public boolean supports(DocumentationType delimiter) {
   @Override
   public void apply(ModelPropertyContext context) {
     Optional<NotNull> notNull = extractAnnotation(context);
-    context.getBuilder().required(notNull.isPresent());
+    if (notNull.isPresent()) {
+      context.getBuilder().required(notNull.isPresent());
+    }
   }
 
   @VisibleForTesting

File: springfox-core/src/main/java/springfox/documentation/builders/ModelPropertyBuilder.java
Patch:
@@ -109,9 +109,9 @@ public ModelProperty build() {
         type,
         qualifiedType,
         position,
-        required,
+        required == null ? false : required,
         isHidden,
-        readOnly,
+        readOnly == null ? false : readOnly,
         description,
         allowableValues,
         example,

File: springfox-core/src/main/java/springfox/documentation/builders/ModelPropertyBuilder.java
Patch:
@@ -109,9 +109,9 @@ public ModelProperty build() {
         type,
         qualifiedType,
         position,
-        required,
+        required == null ? false : required,
         isHidden,
-        readOnly,
+        readOnly == null ? false : readOnly,
         description,
         allowableValues,
         example,

File: springfox-bean-validators/src/test/java/springfox/bean/validators/plugins/models/NullabilityTestModel.java
Patch:
@@ -20,7 +20,7 @@
 
 import javax.validation.constraints.NotNull;
 
-public class NullablityTestModel {
+public class NullabilityTestModel {
   @NotNull
   private String notNullString;
   private String string;

File: springfox-core/src/main/java/springfox/documentation/builders/ApiListingBuilder.java
Patch:
@@ -172,7 +172,7 @@ public ApiListingBuilder protocols(Set<String> protocols) {
   }
 
   /**
-   * Updates the references to the security definitiosn
+   * Updates the references to the security definitions
    *
    * @param securityReferences - security definition references
    * @return this

File: springfox-core/src/main/java/springfox/documentation/builders/ModelBuilder.java
Patch:
@@ -79,7 +79,7 @@ public ModelBuilder qualifiedType(String qualifiedType) {
   /**
    * Updates the model properties
    *
-   * @param properties - map of properies by name
+   * @param properties - map of properties by name
    * @return this
    */
   public ModelBuilder properties(Map<String, ModelProperty> properties) {

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterBuilder.java
Patch:
@@ -89,7 +89,7 @@ public ParameterBuilder description(String description) {
   }
 
   /**
-   * Updates the default value of the parametr
+   * Updates the default value of the parameter
    *
    * @param defaultValue - default value
    * @return this
@@ -126,7 +126,7 @@ public ParameterBuilder allowMultiple(boolean allowMultiple) {
    *
    * @param allowableValues - allowable values (instance of @see springfox.documentation.service.AllowableListValues
    *                        or @see springfox.documentation.service.AllowableRangeValues)
-   * @return
+   * @return this
    */
   public ParameterBuilder allowableValues(AllowableValues allowableValues) {
     this.allowableValues = emptyToNull(allowableValues, this.allowableValues);
@@ -171,7 +171,7 @@ public ParameterBuilder type(ResolvedType type) {
    * Consolidate or figure out whats can be rolled into the other.
    *
    * @param modelRef
-   * @return
+   * @return this
    */
   public ParameterBuilder modelRef(ModelReference modelRef) {
     this.modelRef = defaultIfAbsent(modelRef, this.modelRef);

File: springfox-core/src/main/java/springfox/documentation/builders/ResourceListingBuilder.java
Patch:
@@ -60,7 +60,7 @@ public ResourceListingBuilder apis(List<ApiListingReference> apis) {
   /**
    * Updates the security definitions that protect this resource listing
    *
-   * @param authorizations - security definitiosn
+   * @param authorizations - security definitions
    * @return this
    */
   public ResourceListingBuilder securitySchemes(List<? extends SecurityScheme> authorizations) {

File: springfox-petstore/src/main/java/springfox/petstore/controller/PetController.java
Patch:
@@ -52,7 +52,7 @@ public class PetController {
 
   @RequestMapping(value = "/{petId}", method = GET)
   @ApiOperation(
-          value = "Find pet by ID", notes = "Returns a pet when ID < 10. ID > 10 or nonintegers will simulate API " +
+          value = "Find pet by ID", notes = "Returns a pet when ID < 10. ID > 10 or non-integers will simulate API " +
           "error conditions",
           response = Pet.class,
           responseHeaders = {
@@ -115,7 +115,7 @@ public ResponseEntity<String> updatePet(
   @RequestMapping(value = "/findByStatus", method = GET)
   @ApiOperation(
           value = "Finds Pets by status",
-          notes = "Multiple status values can be provided with comma seperated strings",
+          notes = "Multiple status values can be provided with comma-separated strings",
           response = Pet.class,
           responseContainer = "List",
           authorizations = @Authorization(value = "petstore_auth", scopes = {
@@ -147,7 +147,7 @@ public ResponseEntity<List<Pet>> findPetsByStatus(
   @RequestMapping(value = "/findByTags", method = GET)
   @ApiOperation(
           value = "Finds Pets by tags",
-          notes = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
+          notes = "Multiple tags can be provided with comma-separated strings. Use tag1, tag2, tag3 for testing.",
           response = Pet.class,
           responseContainer = "List",
           authorizations = @Authorization(value = "petstore_auth", scopes = {

File: springfox-petstore/src/main/java/springfox/petstore/controller/PetStoreResource.java
Patch:
@@ -81,7 +81,7 @@ public ResponseEntity<String> placeOrder(
   @RequestMapping(value = "/order/{orderId}", method = DELETE)
   @ApiOperation(
       value = "Delete purchase order by ID", notes = "For valid response try integer IDs with value < 1000. " +
-      "Anything above 1000 or nonintegers will generate API errors"
+      "Anything above 1000 or non-integers will generate API errors"
   )
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
       @ApiResponse(code = 404, message = "Order not found") })

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelContext.java
Patch:
@@ -100,7 +100,7 @@ public boolean isReturnType() {
   }
 
   /**
-   * @return alternate type provider thats available to this context
+   * @return alternate type provider that's available to this context
    */
   public AlternateTypeProvider getAlternateTypeProvider() {
     return alternateTypeProvider;
@@ -126,7 +126,7 @@ public String getGroupName() {
    *
    * @param group                 - group name of the docket
    * @param type                  - type
-   * @param documentationType     - for documenation type
+   * @param documentationType     - for documentation type
    * @param alternateTypeProvider - alternate type provider
    * @param genericNamingStrategy - how generic types should be named
    * @param ignorableTypes        - types that can be ignored
@@ -156,7 +156,7 @@ public static ModelContext inputParam(
    *
    * @param groupName             - group name of the docket
    * @param type                  - type
-   * @param documentationType     - for documenation type
+   * @param documentationType     - for documentation type
    * @param alternateTypeProvider - alternate type provider
    * @param genericNamingStrategy - how generic types should be named
    * @param ignorableTypes        - types that can be ignored

File: springfox-spi/src/main/java/springfox/documentation/spi/service/ApiListingScannerPlugin.java
Patch:
@@ -29,7 +29,7 @@ public interface ApiListingScannerPlugin extends Plugin<DocumentationType> {
   /**
    * Implement this method to manually add ApiDescriptions
    *
-   * @param context - Documentatio ncontext that can be used infer documentation context
+   * @param context - Documentation context that can be used infer documentation context
    * @see springfox.documentation.service.ApiDescription
    * @return List of {@link ApiDescription}
    */

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContext.java
Patch:
@@ -162,7 +162,7 @@ public List<Parameter> getGlobalRequestParameters() {
   }
 
   /**
-   * @deprecated  @since 2.2.0 - only here for backward compatibiltiy
+   * @deprecated  @since 2.2.0 - only here for backward compatibility
    */
   @Deprecated
   public ResourceGroupingStrategy getResourceGroupingStrategy() {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -123,7 +123,7 @@ public DocumentationContextBuilder additionalOperationParameters(List<Parameter>
   }
 
   /**
-   @deprecated  @since 2.2.0 - only here for backward compatibiltiy
+   @deprecated  @since 2.2.0 - only here for backward compatibility
    */
   @Deprecated
   public DocumentationContextBuilder withResourceGroupingStrategy(ResourceGroupingStrategy resourceGroupingStrategy) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/PropertySourcedRequestMappingHandlerMapping.java
Patch:
@@ -95,7 +95,7 @@ protected boolean isHandler(Class<?> beanType) {
 
   /**
    * The lookup handler method, maps the SEOMapper method to the request URL.
-   * <p>If no mapping is found, or if the URL is disabled, it will simply drop throug
+   * <p>If no mapping is found, or if the URL is disabled, it will simply drop through
    * to the standard 404 handling.</p>
    *
    * @param urlPath the path to match.

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyClass.java
Patch:
@@ -154,7 +154,7 @@ public void methodApiResponseClass() {
   }
 
   @ApiResponses({
-          @ApiResponse(code = 201, response = Void.class, message = "Rule Scheduled successfuly"),
+          @ApiResponse(code = 201, response = Void.class, message = "Rule Scheduled successfully"),
           @ApiResponse(code = 500, response = RestError.class, message = "Internal Server Error"),
           @ApiResponse(code = 406, response = RestError.class, message = "Not acceptable")})
   public void methodAnnotatedWithApiResponse() {

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/ResponseHeaderTestController.java
Patch:
@@ -25,7 +25,7 @@
 
 public class ResponseHeaderTestController {
 
-  public void noAnnnotationHeaders() {
+  public void noAnnotationHeaders() {
   }
 
   @ApiOperation(value = "operationHeadersOnly")

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/FeatureDemonstrationService.java
Patch:
@@ -55,7 +55,7 @@ public class FeatureDemonstrationService {
   //Uses alternate listing path
   @RequestMapping(value = "/{petId}", method = RequestMethod.GET)
   @ApiOperation(value = "Find pet by ID", notes = "Returns a pet when ID < 10. "
-      + "ID > 10 or nonintegers will simulate API error conditions",
+      + "ID > 10 or non-integers will simulate API error conditions",
       response = Pet.class,
       extensions = {
           @Extension(properties = @ExtensionProperty(name = "x-test1", value = "value1")),

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/PetService.java
Patch:
@@ -50,7 +50,7 @@ public class PetService {
 
   @RequestMapping(value = "/{petId}", method = RequestMethod.GET)
   @ApiOperation(value = "Find pet by ID", notes = "Returns a pet when ID < 10. "
-      + "ID > 10 or nonintegers will simulate API error conditions",
+      + "ID > 10 or non-integers will simulate API error conditions",
       response = Pet.class
   )
   public Pet getPetById(
@@ -79,7 +79,7 @@ public void updatePet(
 
   @RequestMapping(value = "/findByStatus", method = RequestMethod.GET, params = {"status"})
   @ApiOperation(value = "Find Pet by status",
-      notes = "Multiple status values can be provided with comma seperated strings",
+      notes = "Multiple status values can be provided with comma-separated strings",
       response = Pet.class)
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid status value") })
   public Pet findPetsByStatus(
@@ -91,7 +91,7 @@ public Pet findPetsByStatus(
 
   @RequestMapping(value = "/findByTags", method = RequestMethod.GET)
   @ApiOperation(value = "Find Pet by tags",
-      notes = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
+      notes = "Multiple tags can be provided with comma-separated strings. Use tag1, tag2, tag3 for testing.",
       response = Pet.class)
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid tag value") })
   @Deprecated

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -66,7 +66,6 @@ public DefaultModelProvider(
       SchemaPluginsManager schemaPluginsManager,
       TypeNameExtractor typeNameExtractor,
       EnumTypeDeterminer enumTypeDeterminer) {
-    
     this.resolver = resolver;
     this.propertiesProvider = propertiesProvider;
     this.dependencyProvider = dependencyProvider;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ApiParamParameterBuilder.java
Patch:
@@ -51,7 +51,7 @@ public ApiParamParameterBuilder(
       DescriptionResolver descriptions,
       EnumTypeDeterminer enumTypeDeterminer) {
     this.descriptions = descriptions;
-    this.enumTypeDeterminer= enumTypeDeterminer;
+    this.enumTypeDeterminer = enumTypeDeterminer;
   }
 
   @Override

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelDependencyProvider.java
Patch:
@@ -56,7 +56,8 @@ public class DefaultModelDependencyProvider implements ModelDependencyProvider {
   public DefaultModelDependencyProvider(
       TypeResolver typeResolver,
       @Qualifier("cachedModelProperties") ModelPropertiesProvider propertiesProvider,
-      TypeNameExtractor nameExtractor, EnumTypeDeterminer enumTypeDeterminer) {
+      TypeNameExtractor nameExtractor,
+      EnumTypeDeterminer enumTypeDeterminer) {
 
     this.typeResolver = typeResolver;
     this.propertiesProvider = propertiesProvider;

File: springfox-core/src/main/java/springfox/documentation/service/ResourceGroup.java
Patch:
@@ -20,6 +20,7 @@
 package springfox.documentation.service;
 
 import com.google.common.base.Objects;
+import com.google.common.base.Optional;
 
 import static com.google.common.base.Objects.*;
 
@@ -46,8 +47,8 @@ public Integer getPosition() {
     return position;
   }
 
-  public Class<?> getControllerClass() {
-    return controllerClazz;
+  public Optional<? extends Class<?>> getControllerClass() {
+    return Optional.fromNullable(controllerClazz);
   }
 
   @Override

File: springfox-spring-config/src/main/java/springfox/springconfig/VersionedController.java
Patch:
@@ -23,7 +23,6 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import springfox.petstore.model.User;
-import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 @RestController
 public class VersionedController {
@@ -32,7 +31,7 @@ public class VersionedController {
   public ResponseEntity<User> getUser(
       @VersionApi int version, //<1>
       @RequestParam("id") String id) {
-    throw new NotImplementedException();
+    throw new UnsupportedOperationException();
   }
   // tag::version-annotated-controller[]
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDocumentationScanner.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Multimaps;
+import com.google.common.collect.Ordering;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 import springfox.documentation.PathProvider;
@@ -116,7 +117,7 @@ public ApiListingReference apply(Map.Entry<String, Collection<ApiListing>> input
   }
 
   private Iterable<String> descriptions(Collection<ApiListing> apiListings) {
-    return FluentIterable.from(apiListings).transform(toDescription());
+    return FluentIterable.from(apiListings).transform(toDescription()).toSortedList(Ordering.natural());
   }
 
   private Function<ApiListing, String> toDescription() {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -22,7 +22,6 @@
 import com.google.common.base.Joiner;
 import com.google.common.base.Predicate;
 import com.google.common.base.Splitter;
-import com.google.common.collect.FluentIterable;
 import com.google.common.collect.LinkedListMultimap;
 import com.google.common.collect.Multimap;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -90,7 +89,7 @@ public Multimap<String, ApiListing> scan(ApiListingScanningContext context) {
         apiDescriptions.addAll(apiDescriptionReader.read(each));
       }
 
-      apiDescriptions.addAll(FluentIterable.from(pluginsManager.additionalListings(context))
+      apiDescriptions.addAll(from(pluginsManager.additionalListings(context))
           .filter(onlySelectedApis(documentationContext))
           .toList());
 
@@ -135,7 +134,7 @@ public boolean apply(ApiDescription input) {
   }
 
   private Iterable<ResourceGroup> sortedByName(Set<ResourceGroup> resourceGroups) {
-    return FluentIterable.from(resourceGroups).toSortedList(resourceGroupComparator());
+    return from(resourceGroups).toSortedList(resourceGroupComparator());
   }
 
   private Iterable<RequestMappingContext> sortedByMethods(List<RequestMappingContext> contexts) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -44,7 +44,6 @@
 import springfox.documentation.service.Header;
 import springfox.documentation.service.ResponseMessage;
 
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -120,7 +119,7 @@ protected List<Map<String, List<String>>> mapAuthorizations(
   }
 
   protected Map<String, Response> mapResponseMessages(Set<ResponseMessage> from) {
-    HashMap<String, Response> responses = newHashMap();
+    Map<String, Response> responses = newTreeMap();
     for (ResponseMessage responseMessage : from) {
       Property responseProperty;
       ModelReference modelRef = responseMessage.getResponseModel();

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/VendorExtensionsMapper.java
Patch:
@@ -36,7 +36,7 @@
 public class VendorExtensionsMapper {
 
   public Map<String, Object> mapExtensions(List<VendorExtension> from) {
-    Map<String, Object> extensions = newHashMap();
+    Map<String, Object> extensions = newTreeMap();
     Iterable<ListVendorExtension> listExtensions = from(from)
         .filter(ListVendorExtension.class);
     for (ListVendorExtension each : listExtensions) {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityContext.java
Patch:
@@ -208,7 +208,7 @@ public void doWithAssociation(Association<? extends PersistentProperty<?>> assoc
                   configuration.getBasePath(),
                   resource.getPath(),
                   mapping.getPath()),
-              newHashSet(RequestMethod.GET),
+              newHashSet(RequestMethod.PUT, RequestMethod.PATCH, RequestMethod.POST),
               new HashSet<MediaType>(),
               newHashSet(RestMediaTypes.TEXT_URI_LIST, RestMediaTypes.SPRING_DATA_COMPACT_JSON),
               null,

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/SpringDataRestRequestHandler.java
Patch:
@@ -73,7 +73,7 @@ public String groupName() {
 
   @Override
   public String getName() {
-    return entityContext.getName();
+    return actionSpecification.getName();
   }
 
   @Override

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityServicesProvider.java
Patch:
@@ -62,7 +62,7 @@ public List<RequestHandler> requestHandlers() {
       ResourceMetadata resource = mappings.getMetadataFor(each);
 //      SearchResourceMappings searchResource = mappings.getSearchResourceMappings(each);
 //      crudMethods.hasDelete();
-      contexts.add(new EntityContext(configuration, repository, resource, typeResolver));
+      contexts.add(new EntityContext(configuration, repository, resource, typeResolver, mappings));
 
     }
     return FluentIterable.from(contexts)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -22,7 +22,6 @@
 import com.google.common.base.Joiner;
 import com.google.common.base.Predicate;
 import com.google.common.base.Splitter;
-import com.google.common.collect.FluentIterable;
 import com.google.common.collect.LinkedListMultimap;
 import com.google.common.collect.Multimap;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -90,7 +89,7 @@ public Multimap<String, ApiListing> scan(ApiListingScanningContext context) {
         apiDescriptions.addAll(apiDescriptionReader.read(each));
       }
 
-      apiDescriptions.addAll(FluentIterable.from(pluginsManager.additionalListings(context))
+      apiDescriptions.addAll(from(pluginsManager.additionalListings(context))
           .filter(onlySelectedApis(documentationContext))
           .toList());
 
@@ -135,7 +134,7 @@ public boolean apply(ApiDescription input) {
   }
 
   private Iterable<ResourceGroup> sortedByName(Set<ResourceGroup> resourceGroups) {
-    return FluentIterable.from(resourceGroups).toSortedList(resourceGroupComparator());
+    return from(resourceGroups).toSortedList(resourceGroupComparator());
   }
 
   private Iterable<RequestMappingContext> sortedByMethods(List<RequestMappingContext> contexts) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDocumentationScanner.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.Multimaps;
+import com.google.common.collect.Ordering;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 import springfox.documentation.PathProvider;
@@ -116,7 +117,7 @@ public ApiListingReference apply(Map.Entry<String, Collection<ApiListing>> input
   }
 
   private Iterable<String> descriptions(Collection<ApiListing> apiListings) {
-    return FluentIterable.from(apiListings).transform(toDescription());
+    return FluentIterable.from(apiListings).transform(toDescription()).toSortedList(Ordering.natural());
   }
 
   private Function<ApiListing, String> toDescription() {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -44,7 +44,6 @@
 import springfox.documentation.service.Header;
 import springfox.documentation.service.ResponseMessage;
 
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -120,7 +119,7 @@ protected List<Map<String, List<String>>> mapAuthorizations(
   }
 
   protected Map<String, Response> mapResponseMessages(Set<ResponseMessage> from) {
-    HashMap<String, Response> responses = newHashMap();
+    Map<String, Response> responses = newTreeMap();
     for (ResponseMessage responseMessage : from) {
       Property responseProperty;
       ModelReference modelRef = responseMessage.getResponseModel();

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/VendorExtensionsMapper.java
Patch:
@@ -36,7 +36,7 @@
 public class VendorExtensionsMapper {
 
   public Map<String, Object> mapExtensions(List<VendorExtension> from) {
-    Map<String, Object> extensions = newHashMap();
+    Map<String, Object> extensions = newTreeMap();
     Iterable<ListVendorExtension> listExtensions = from(from)
         .filter(ListVendorExtension.class);
     for (ListVendorExtension each : listExtensions) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/PropertySourcedRequestMappingHandlerMapping.java
Patch:
@@ -76,7 +76,7 @@ protected void initHandlerMethods() {
   }
 
   private String mappingPath(final PropertySourcedMapping mapper) {
-    final String key = mapper.value();
+    final String key = mapper.propertyKey();
     return Optional.fromNullable(environment.getProperty(key))
         .transform(new Function<String, String>() {
           @Override

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -65,7 +65,7 @@ public Swagger2Controller(
       DocumentationCache documentationCache,
       ServiceModelToSwagger2Mapper mapper,
       JsonSerializer jsonSerializer) {
-    
+
     this.documentationCache = documentationCache;
     this.mapper = mapper;
     this.jsonSerializer = jsonSerializer;
@@ -84,9 +84,9 @@ public ResponseEntity<Json> getDocumentation(
       return new ResponseEntity<Json>(HttpStatus.NOT_FOUND);
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
+    UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
+    swagger.basePath(Strings.isNullOrEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath());
     if (isNullOrEmpty(swagger.getHost())) {
-      UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
-      swagger.basePath(Strings.isNullOrEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath());
       swagger.host(hostName(uriComponents));
     }
     return new ResponseEntity<Json>(jsonSerializer.toJson(swagger), HttpStatus.OK);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDocumentationScanner.java
Patch:
@@ -78,6 +78,7 @@ public Documentation scan(DocumentationContext context) {
         .host(context.getHost())
         .schemes(context.getProtocols())
         .basePath(context.getPathProvider().getApplicationBasePath())
+        .extensions(context.getVendorExtentions())
         .tags(tags);
 
     Set<ApiListingReference> apiReferenceSet = newTreeSet(listingReferencePathComparator());

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -72,7 +72,7 @@ public abstract class ServiceModelToSwagger2Mapper {
       @Mapping(target = "parameters", ignore = true),
       @Mapping(target = "responses", ignore = true),
       @Mapping(target = "externalDocs", ignore = true),
-      @Mapping(target = "vendorExtensions", ignore = true)
+      @Mapping(target = "vendorExtensions", source = "vendorExtensions")
   })
   public abstract Swagger mapDocumentation(Documentation from);
 
@@ -81,7 +81,7 @@ public abstract class ServiceModelToSwagger2Mapper {
           qualifiedBy = { LicenseMapper.LicenseTranslator.class, LicenseMapper.License.class }),
       @Mapping(target = "contact", source = "from.contact"),
       @Mapping(target = "termsOfService", source = "termsOfServiceUrl"),
-      @Mapping(target = "vendorExtensions", ignore = true)
+      @Mapping(target = "vendorExtensions", source = "vendorExtensions")
   })
   protected abstract Info mapApiInfo(ApiInfo from);
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelPropertyPropertyBuilder.java
Patch:
@@ -52,7 +52,8 @@ public void apply(ModelPropertyContext context) {
     }
     if (context.getBeanPropertyDefinition().isPresent()) {
       annotation = annotation.or(findPropertyAnnotation(
-          context.getBeanPropertyDefinition().get(), ApiModelProperty.class));
+          context.getBeanPropertyDefinition().get(),
+          ApiModelProperty.class));
     }
     if (annotation.isPresent()) {
       context.getBuilder()

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelPropertyPropertyBuilder.java
Patch:
@@ -52,7 +52,8 @@ public void apply(ModelPropertyContext context) {
     }
     if (context.getBeanPropertyDefinition().isPresent()) {
       annotation = annotation.or(findPropertyAnnotation(
-          context.getBeanPropertyDefinition().get(), ApiModelProperty.class));
+          context.getBeanPropertyDefinition().get(),
+          ApiModelProperty.class));
     }
     if (annotation.isPresent()) {
       context.getBuilder()

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/BugsController.java
Patch:
@@ -149,7 +149,7 @@ public void bug1734(
   }
 
   @RequestMapping(value = "1740", method = RequestMethod.GET)
-  public Bug1740 bugNNN() {
+  public Bug1740 bug1740() {
     return new Bug1740();
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ModelAttributeParameterExpander.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2017 the original author or authors.
+ *  Copyright 2015-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -101,7 +101,7 @@ public List<Parameter> expand(ExpansionContext context) {
       LOG.debug("Attempting to expand collection/array field: {}", each.getField());
 
       ResolvedType itemType = collectionElementType(each.getFieldType());
-      if (Types.isBaseType(itemType)) {
+      if (Types.isBaseType(itemType) || itemType.getErasedType().isEnum()) {
         parameters.add(simpleFields(context.getParentName(), context.getDocumentationContext(), each));
       } else {
         parameters.addAll(

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/SecurityConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2017-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -21,7 +21,7 @@
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
-@JsonInclude(value = JsonInclude.Include.NON_NULL)
+@JsonInclude(JsonInclude.Include.NON_NULL)
 public class SecurityConfiguration {
   static final SecurityConfiguration DEFAULT = new SecurityConfiguration();
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/UiConfiguration.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2017-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -18,8 +18,10 @@
  */
 package springfox.documentation.swagger.web;
 
+import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
+@JsonInclude(JsonInclude.Include.NON_NULL)
 public class UiConfiguration {
   static final UiConfiguration DEFAULT = new UiConfiguration(null);
   private final String validatorUrl;

File: springfox-petstore/src/main/java/springfox/petstore/model/Category.java
Patch:
@@ -32,7 +32,7 @@ public Category(long id, String name) {
   }
 
   @JsonCreator
-  public static Category create(@JsonProperty("id") long id, @JsonProperty("name") String name) {
+  public static Category create(@JsonProperty(value = "id", required=true) long id, @JsonProperty("name") String name) {
     return new Category(id, name);
   }
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/FeatureDemonstrationService.java
Patch:
@@ -215,7 +215,6 @@ public ResponseEntity<FancyPet> findById(@PathVariable String itemId) {
     return new ResponseEntity<FancyPet>(new FancyPet(), HttpStatus.OK);
   }
 
-  //TODO: entity in params doesnt work bug?
   @RequestMapping(value = "/1490/entity/{itemId}", method = RequestMethod.GET)
   @ResponseBody
   public ResponseEntity<PetWithSerializer> serializablePetEntity(@PathVariable String itemId) {

File: springfox-core/src/main/java/springfox/documentation/schema/AlternateTypeRules.java
Patch:
@@ -27,8 +27,8 @@
 import java.util.Map;
 
 public class AlternateTypeRules {
-  public static final int DIRECT_SUBSTITUTION_RULE_ORDER = Ordered.HIGHEST_PRECEDENCE + 1000;
-  public static final int GENERIC_SUBSTITUTION_RULE_ORDER = Ordered.HIGHEST_PRECEDENCE + 500;
+  public static final int DIRECT_SUBSTITUTION_RULE_ORDER = Ordered.HIGHEST_PRECEDENCE + 3000;
+  public static final int GENERIC_SUBSTITUTION_RULE_ORDER = Ordered.HIGHEST_PRECEDENCE + 2000;
 
   private AlternateTypeRules() {
     throw new UnsupportedOperationException();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -149,8 +149,9 @@ private DocumentationPlugin defaultDocumentationPlugin() {
     return new Docket(DocumentationType.SWAGGER_2);
   }
 
-  public DocumentationContextBuilder createContextBuilder(DocumentationType documentationType,
-                                                          DefaultConfiguration defaultConfiguration) {
+  public DocumentationContextBuilder createContextBuilder(
+      DocumentationType documentationType,
+      DefaultConfiguration defaultConfiguration) {
     return defaultsProviders.getPluginFor(documentationType, defaultConfiguration)
         .create(documentationType)
         .withResourceGroupingStrategy(resourceGroupingStrategy(documentationType));

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -41,7 +41,6 @@
 import springfox.documentation.service.AllowableValues;
 import springfox.documentation.service.ApiListing;
 
-import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.SortedMap;
@@ -60,7 +59,7 @@ public Map<String, Model> mapModels(Map<String, springfox.documentation.schema.M
       return null;
     }
 
-    Map<String, Model> map = new HashMap<String, Model>();
+    Map<String, Model> map = newTreeMap();
 
     for (java.util.Map.Entry<String, springfox.documentation.schema.Model> entry : from.entrySet()) {
       String key = entry.getKey();
@@ -210,7 +209,7 @@ static Property modelRefToProperty(ModelReference modelRef) {
   }
 
   Map<String, Model> modelsFromApiListings(Multimap<String, ApiListing> apiListings) {
-    Map<String, springfox.documentation.schema.Model> definitions = newHashMap();
+    Map<String, springfox.documentation.schema.Model> definitions = newTreeMap();
     for (ApiListing each : apiListings.values()) {
       definitions.putAll(each.getModels());
     }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/RequestMappingContext.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2016 the original author or authors.
+ *  Copyright 2015-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -16,7 +16,6 @@
  *
  *
  */
-
 package springfox.documentation.spi.service.contexts;
 
 import com.fasterxml.classmate.ResolvedType;
@@ -59,6 +58,7 @@ public RequestMappingContext(DocumentationContext context, RequestHandler handle
     this.handler = handler;
     this.requestMappingPattern = "";
     this.operationModelContextsBuilder = new OperationModelContextsBuilder(
+        context.getGroupName(),
         context.getDocumentationType(),
         context.getAlternateTypeProvider(),
         context.getGenericsNamingStrategy(),

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationResponseClassReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015-2017 the original author or authors.
+ *  Copyright 2015-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -16,7 +16,6 @@
  *
  *
  */
-
 package springfox.documentation.spring.web.readers.operation;
 
 import com.fasterxml.classmate.ResolvedType;
@@ -50,6 +49,7 @@ public void apply(OperationContext context) {
     ResolvedType returnType = context.getReturnType();
     returnType = context.alternateFor(returnType);
     ModelContext modelContext = ModelContext.returnValue(
+        context.getGroupName(),
         returnType,
         context.getDocumentationType(),
         context.getAlternateTypeProvider(),

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/SpringfoxWebMvcConfiguration.java
Patch:
@@ -19,11 +19,11 @@
 
 package springfox.documentation.spring.web;
 
-import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
+import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
 import org.springframework.core.env.Environment;
 import org.springframework.plugin.core.config.EnablePluginRegistries;
 import springfox.documentation.schema.configuration.ModelsConfiguration;
@@ -89,8 +89,8 @@ public DescriptionResolver descriptionResolver(Environment environment) {
   }
 
   @Bean
-  public static PropertyPlaceholderConfigurer swaggerProperties() {
-    PropertyPlaceholderConfigurer properties = new PropertyPlaceholderConfigurer();
+  public static PropertySourcesPlaceholderConfigurer swaggerProperties() {
+    PropertySourcesPlaceholderConfigurer properties = new PropertySourcesPlaceholderConfigurer();
     properties.setPlaceholderPrefix("$SPRINGFOX{");
     properties.setIgnoreUnresolvablePlaceholders(true);
     return properties;

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySchemaHandler.java
Patch:
@@ -38,6 +38,7 @@
 import springfox.documentation.RequestHandler;
 import springfox.documentation.RequestHandlerKey;
 import springfox.documentation.service.ResolvedMethodParameter;
+import springfox.documentation.spring.web.plugins.CombinedRequestHandler;
 
 import java.lang.annotation.Annotation;
 import java.util.List;

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySearchRequestHandler.java
Patch:
@@ -43,6 +43,7 @@
 import springfox.documentation.RequestHandler;
 import springfox.documentation.RequestHandlerKey;
 import springfox.documentation.service.ResolvedMethodParameter;
+import springfox.documentation.spring.web.plugins.CombinedRequestHandler;
 import springfox.documentation.spring.web.readers.operation.HandlerMethodResolver;
 
 import java.lang.annotation.Annotation;

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelContext.java
Patch:
@@ -43,7 +43,7 @@ public class ModelContext {
   private final Set<ResolvedType> seenTypes = newHashSet();
   private final ModelBuilder modelBuilder;
   private final AlternateTypeProvider alternateTypeProvider;
-  private GenericTypeNamingStrategy genericNamingStrategy;
+  private final GenericTypeNamingStrategy genericNamingStrategy;
   private final ImmutableSet<Class> ignorableTypes;
 
   ModelContext(
@@ -72,6 +72,7 @@ public class ModelContext {
     this.modelBuilder = new ModelBuilder();
     this.alternateTypeProvider = parentContext.alternateTypeProvider;
     this.ignorableTypes = parentContext.ignorableTypes;
+    this.genericNamingStrategy = parentContext.getGenericNamingStrategy();
   }
 
   /**

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Orderings.java
Patch:
@@ -116,7 +116,7 @@ public int compare(RequestHandler first, RequestHandler second) {
     });
   }
 
-  static PatternsRequestCondition patternsCondition(RequestHandler handler) {
+  public static PatternsRequestCondition patternsCondition(RequestHandler handler) {
     return handler.getPatternsCondition();
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/WebMvcRequestHandlerProvider.java
Patch:
@@ -27,8 +27,8 @@
 import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
 import org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping;
 import springfox.documentation.RequestHandler;
-import springfox.documentation.spring.web.WebMvcRequestHandler;
 import springfox.documentation.spi.service.RequestHandlerProvider;
+import springfox.documentation.spring.web.WebMvcRequestHandler;
 
 import java.util.List;
 import java.util.Map;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017 the original author or authors.
+ *  Copyright 2017-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -85,7 +85,7 @@ public ResponseEntity<Json> getDocumentation(
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
     if (isNullOrEmpty(swagger.getHost())) {
-      final UriComponents uriComponents = componentsFrom(servletRequest);
+      UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
       swagger.basePath(Strings.isNullOrEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath());
       swagger.host(hostName(uriComponents));
     }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2017 the original author or authors.
+ *  Copyright 2017-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -85,7 +85,7 @@ public ResponseEntity<Json> getDocumentation(
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
     if (isNullOrEmpty(swagger.getHost())) {
-      final UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
+      UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
       swagger.basePath(Strings.isNullOrEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath());
       swagger.host(hostName(uriComponents));
     }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -85,7 +85,7 @@ public ResponseEntity<Json> getDocumentation(
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
     if (isNullOrEmpty(swagger.getHost())) {
-      final UriComponents uriComponents = componentsFrom(servletRequest);
+      final UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
       swagger.basePath(Strings.isNullOrEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath());
       swagger.host(hostName(uriComponents));
     }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/ApiResourceController.java
Patch:
@@ -49,21 +49,21 @@ public ApiResourceController(SwaggerResourcesProvider swaggerResources) {
 
   @RequestMapping(value = "/configuration/security")
   @ResponseBody
-  ResponseEntity<SecurityConfiguration> securityConfiguration() {
+  public ResponseEntity<SecurityConfiguration> securityConfiguration() {
     return new ResponseEntity<SecurityConfiguration>(
         Optional.fromNullable(securityConfiguration).or(SecurityConfiguration.DEFAULT), HttpStatus.OK);
   }
 
   @RequestMapping(value = "/configuration/ui")
   @ResponseBody
-  ResponseEntity<UiConfiguration> uiConfiguration() {
+  public ResponseEntity<UiConfiguration> uiConfiguration() {
     return new ResponseEntity<UiConfiguration>(
         Optional.fromNullable(uiConfiguration).or(UiConfiguration.DEFAULT), HttpStatus.OK);
   }
 
   @RequestMapping
   @ResponseBody
-  ResponseEntity<List<SwaggerResource>> swaggerResources() {
+  public ResponseEntity<List<SwaggerResource>> swaggerResources() {
     return new ResponseEntity<List<SwaggerResource>>(swaggerResources.get(), HttpStatus.OK);
   }
 

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityRequestHandler.java
Patch:
@@ -110,7 +110,8 @@ public String groupName() {
 
   @Override
   public String getName() {
-    return handlerMethod.getMethod().getName();
+    return handlerMethod.getMethod().getName()
+        .replace("Resource", String.format("%sResource", resource.getDomainType().getSimpleName()));
   }
 
   @Override

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySearchRequestTemplate.java
Patch:
@@ -59,7 +59,7 @@ Collection<? extends RequestHandler> operations() {
         EntitySearchRequestHandler handler = new EntitySearchRequestHandler(
             resolver,
             requestMapping,
-            handlerMethod,
+            new HandlerMethod(searchResource.getMethod().getClass(), searchResource.getMethod()),
             searchResource,
             resource);
         if (handler.resourceType() == ResourceType.ITEM || !collectionHandlerAdded) {

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySearchRequestTemplate.java
Patch:
@@ -59,7 +59,7 @@ Collection<? extends RequestHandler> operations() {
         EntitySearchRequestHandler handler = new EntitySearchRequestHandler(
             resolver,
             requestMapping,
-            handlerMethod,
+            new HandlerMethod(searchResource.getMethod().getClass(), searchResource.getMethod()),
             searchResource,
             resource);
         if (handler.resourceType() == ResourceType.ITEM || !collectionHandlerAdded) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -85,7 +85,7 @@ public ResponseEntity<Json> getDocumentation(
     }
     Swagger swagger = mapper.mapDocumentation(documentation);
     if (isNullOrEmpty(swagger.getHost())) {
-      final UriComponents uriComponents = componentsFrom(servletRequest);
+      final UriComponents uriComponents = componentsFrom(servletRequest, swagger.getBasePath());
       swagger.basePath(Strings.isNullOrEmpty(uriComponents.getPath()) ? "/" : uriComponents.getPath());
       swagger.host(hostName(uriComponents));
     }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityServicesProvider.java
Patch:
@@ -71,7 +71,7 @@ class EntityServicesProvider implements RequestHandlerProvider {
     this.mappings = mappings;
     this.repositories = repositories;
     this.typeResolver = typeResolver;
-    this.restMappings = new RepositoryRestHandlerMapping(mappings, repositoryConfiguration);
+    this.restMappings = new RepositoryRestHandlerMapping(mappings, repositoryConfiguration, repositories);
     restMappings.setJpaHelper(jpaHelper);
     restMappings.setApplicationContext(applicationContext);
     restMappings.afterPropertiesSet();

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/ParameterExpansionContext.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2018 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -65,6 +65,4 @@ public DocumentationType getDocumentationType() {
   public ParameterBuilder getParameterBuilder() {
     return parameterBuilder;
   }
-
-
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterNameReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2017 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -40,7 +40,6 @@
 @Order(Ordered.HIGHEST_PRECEDENCE)
 public class ParameterNameReader implements ParameterBuilderPlugin {
 
-
   @Override
   public void apply(ParameterContext context) {
     String name = findParameterNameFromAnnotations(context.resolvedMethodParameter());

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityServicesProvider.java
Patch:
@@ -71,7 +71,7 @@ class EntityServicesProvider implements RequestHandlerProvider {
     this.mappings = mappings;
     this.repositories = repositories;
     this.typeResolver = typeResolver;
-    this.restMappings = new RepositoryRestHandlerMapping(mappings, repositoryConfiguration);
+    this.restMappings = new RepositoryRestHandlerMapping(mappings, repositoryConfiguration, repositories);
     restMappings.setJpaHelper(jpaHelper);
     restMappings.setApplicationContext(applicationContext);
     restMappings.afterPropertiesSet();

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/ModelPropertyMinMaxAnnotationPlugin.java
Patch:
@@ -20,8 +20,6 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Optional;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.bean.validators.util.MinMaxUtil;

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelReferenceProvider.java
Patch:
@@ -50,7 +50,7 @@ private ModelReference modelReference(ResolvedType type) {
       return new ModelRef("void");
     }
     if (MultipartFile.class.isAssignableFrom(type.getErasedType())) {
-      return new ModelRef("File");
+      return new ModelRef("__file");
     }
     String typeName = typeNameExtractor.typeName(fromParent(parentContext, type));
     return new ModelRef(typeName, allowableValues(type));

File: springfox-schema/src/main/java/springfox/documentation/schema/Types.java
Patch:
@@ -50,7 +50,7 @@ private Types() {
       "object",
       "long",
       "date-time",
-      "file",
+      "__file",
       "biginteger",
       "bigdecimal");
   private static final Map<Type, String> typeNameLookup = ImmutableMap.<Type, String>builder()
@@ -78,7 +78,7 @@ private Types() {
       .put(BigInteger.class, "biginteger")
       .put(Currency.class, "string")
       .put(UUID.class, "string")
-      .put(MultipartFile.class, "file")
+      .put(MultipartFile.class, "__file")
       .build();
 
   public static String typeNameFor(Type type) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/Properties.java
Patch:
@@ -71,7 +71,7 @@ class Properties {
       .put("uuid", newInstanceOf(UUIDProperty.class))
       .put("object", newInstanceOf(ObjectProperty.class))
       .put("byte", bytePropertyFactory())
-      .put("file", filePropertyFactory())
+      .put("__file", filePropertyFactory())
       .build();
 
   private Properties() {

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelReferenceProvider.java
Patch:
@@ -50,7 +50,7 @@ private ModelReference modelReference(ResolvedType type) {
       return new ModelRef("void");
     }
     if (MultipartFile.class.isAssignableFrom(type.getErasedType())) {
-      return new ModelRef("File");
+      return new ModelRef("__file");
     }
     String typeName = typeNameExtractor.typeName(fromParent(parentContext, type));
     return new ModelRef(typeName, allowableValues(type));

File: springfox-schema/src/main/java/springfox/documentation/schema/Types.java
Patch:
@@ -50,7 +50,7 @@ private Types() {
       "object",
       "long",
       "date-time",
-      "file",
+      "__file",
       "biginteger",
       "bigdecimal");
   private static final Map<Type, String> typeNameLookup = ImmutableMap.<Type, String>builder()
@@ -78,7 +78,7 @@ private Types() {
       .put(BigInteger.class, "biginteger")
       .put(Currency.class, "string")
       .put(UUID.class, "string")
-      .put(MultipartFile.class, "file")
+      .put(MultipartFile.class, "__file")
       .build();
 
   public static String typeNameFor(Type type) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/Properties.java
Patch:
@@ -71,7 +71,7 @@ class Properties {
       .put("uuid", newInstanceOf(UUIDProperty.class))
       .put("object", newInstanceOf(ObjectProperty.class))
       .put("byte", bytePropertyFactory())
-      .put("file", filePropertyFactory())
+      .put("__file", filePropertyFactory())
       .build();
 
   private Properties() {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -35,6 +35,7 @@
 import springfox.documentation.spi.service.contexts.OperationContext;
 import springfox.documentation.spi.service.contexts.ParameterContext;
 import springfox.documentation.spring.web.plugins.DocumentationPluginsManager;
+import springfox.documentation.spring.web.readers.parameter.ExpansionContext;
 import springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander;
 
 import java.lang.annotation.Annotation;
@@ -89,9 +90,7 @@ private List<Parameter> readParameters(final OperationContext context) {
         if (shouldExpand(methodParameter, alternate)) {
           parameters.addAll(
               expander.expand(
-                  "",
-                  methodParameter.getParameterType(),
-                  context.getDocumentationContext()));
+                      new ExpansionContext("", methodParameter.getParameterType(), context.getDocumentationContext())));
         } else {
           parameters.add(pluginsManager.parameter(parameterContext));
         }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -35,6 +35,7 @@
 import springfox.documentation.spi.service.contexts.OperationContext;
 import springfox.documentation.spi.service.contexts.ParameterContext;
 import springfox.documentation.spring.web.plugins.DocumentationPluginsManager;
+import springfox.documentation.spring.web.readers.parameter.ExpansionContext;
 import springfox.documentation.spring.web.readers.parameter.ModelAttributeParameterExpander;
 
 import java.lang.annotation.Annotation;
@@ -89,9 +90,7 @@ private List<Parameter> readParameters(final OperationContext context) {
         if (shouldExpand(methodParameter, alternate)) {
           parameters.addAll(
               expander.expand(
-                  "",
-                  methodParameter.getParameterType(),
-                  context.getDocumentationContext()));
+                      new ExpansionContext("", methodParameter.getParameterType(), context.getDocumentationContext())));
         } else {
           parameters.add(pluginsManager.parameter(parameterContext));
         }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ApiKeyAuthFactory.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2017 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ class ApiKeyAuthFactory implements SecuritySchemeFactory {
   public SecuritySchemeDefinition create(SecurityScheme input) {
     ApiKey apiKey = (ApiKey) input;
     ApiKeyAuthDefinition definition = new ApiKeyAuthDefinition();
-    definition.name(apiKey.getName()).in(In.forValue(apiKey.getPassAs()));
+    definition.name(apiKey.getKeyname()).in(In.forValue(apiKey.getPassAs()));
     return definition;
   }
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -150,7 +150,7 @@ public Property transformEntry(String key, Header value) {
   }
 
   protected Map<String, Path> mapApiListings(Multimap<String, ApiListing> apiListings) {
-    Map<String, Path> paths = newHashMap();
+    Map<String, Path> paths = newTreeMap();
     for (ApiListing each : apiListings.values()) {
       for (ApiDescription api : each.getApis()) {
         paths.put(api.getPath(), mapOperations(api, Optional.fromNullable(paths.get(api.getPath()))));

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2017 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -197,8 +197,7 @@ static Property modelRefToProperty(ModelReference modelRef) {
     }
     Property responseProperty;
     if (modelRef.isCollection()) {
-      responseProperty = new ArrayProperty(
-          maybeAddAllowableValues(itemTypeProperty(modelRef.itemModel().get()), modelRef.getAllowableValues()));
+      responseProperty = property(modelRef);
     } else if (modelRef.isMap()) {
       responseProperty = new MapProperty(property(modelRef.itemModel().get()));
     } else {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2017 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -197,8 +197,7 @@ static Property modelRefToProperty(ModelReference modelRef) {
     }
     Property responseProperty;
     if (modelRef.isCollection()) {
-      responseProperty = new ArrayProperty(
-          maybeAddAllowableValues(itemTypeProperty(modelRef.itemModel().get()), modelRef.getAllowableValues()));
+      responseProperty = property(modelRef);
     } else if (modelRef.isMap()) {
       responseProperty = new MapProperty(property(modelRef.itemModel().get()));
     } else {

File: springfox-core/src/main/java/springfox/documentation/builders/ResponseMessageBuilder.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2017 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public class ResponseMessageBuilder {
   private int code;
   private String message;
   private ModelReference responseModel;
-  private Map<String, Header> headers = newHashMap();
+  private Map<String, Header> headers = newTreeMap();
   private List<VendorExtension> vendorExtensions = newArrayList();
 
   /**

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -126,7 +126,7 @@ private SortedMap<String, ModelProperty> sort(Map<String, ModelProperty> modelPr
   Optional<Class> typeOfValue(springfox.documentation.schema.Model source) {
     Optional<ResolvedType> mapInterface = findMapInterface(source.getType());
     if (mapInterface.isPresent()) {
-      if (mapInterface.get().getTypeParameters().size() > 0) {
+      if (mapInterface.get().getTypeParameters().size() == 2) {
         return Optional.of((Class) mapInterface.get().getTypeParameters().get(1).getErasedType());
       }
       return Optional.of((Class) Object.class);

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/InMemorySwaggerResourcesProvider.java
Patch:
@@ -35,10 +35,10 @@
 
 @Component
 public class InMemorySwaggerResourcesProvider implements SwaggerResourcesProvider {
-  @Value("${springfox.documentation.swagger.v1.path:/api-docs}")
+  @Value("$SPRINGFOX{springfox.documentation.swagger.v1.path:/api-docs}")
   private String swagger1Url;
 
-  @Value("${springfox.documentation.swagger.v2.path:/v2/api-docs}")
+  @Value("$SPRINGFOX{springfox.documentation.swagger.v2.path:/v2/api-docs}")
   private String swagger2Url;
 
   private boolean swagger1Available;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -153,9 +153,9 @@ private Property mapProperty(ModelProperty source) {
       AllowableValues allowableValues = source.getAllowableValues();
       if (allowableValues instanceof AllowableRangeValues) {
         AllowableRangeValues range = (AllowableRangeValues) allowableValues;
-        numericProperty.maximum(safeDouble(range.getMax()));
+        numericProperty.maximum(safeBigDecimal(range.getMax()));
         numericProperty.exclusiveMaximum(range.getExclusiveMax());
-        numericProperty.minimum(safeDouble(range.getMin()));
+        numericProperty.minimum(safeBigDecimal(range.getMin()));
         numericProperty.exclusiveMinimum(range.getExclusiveMin());
       }
     }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/InMemorySwaggerResourcesProvider.java
Patch:
@@ -35,10 +35,10 @@
 
 @Component
 public class InMemorySwaggerResourcesProvider implements SwaggerResourcesProvider {
-  @Value("${springfox.documentation.swagger.v1.path:/api-docs}")
+  @Value("$SPRINGFOX{springfox.documentation.swagger.v1.path:/api-docs}")
   private String swagger1Url;
 
-  @Value("${springfox.documentation.swagger.v2.path:/v2/api-docs}")
+  @Value("$SPRINGFOX{springfox.documentation.swagger.v2.path:/v2/api-docs}")
   private String swagger2Url;
 
   private boolean swagger1Available;

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/web/Swagger1Controller.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2017 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -50,7 +50,7 @@
 
 @Controller
 @ApiIgnore
-@RequestMapping("${springfox.documentation.swagger.v1.path:/api-docs}")
+@RequestMapping("$SPRINGFOX{springfox.documentation.swagger.v1.path:/api-docs}")
 public class Swagger1Controller {
 
   private final DocumentationCache documentationCache;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -153,9 +153,9 @@ private Property mapProperty(ModelProperty source) {
       AllowableValues allowableValues = source.getAllowableValues();
       if (allowableValues instanceof AllowableRangeValues) {
         AllowableRangeValues range = (AllowableRangeValues) allowableValues;
-        numericProperty.maximum(safeDouble(range.getMax()));
+        numericProperty.maximum(safeBigDecimal(range.getMax()));
         numericProperty.exclusiveMaximum(range.getExclusiveMax());
-        numericProperty.minimum(safeDouble(range.getMin()));
+        numericProperty.minimum(safeBigDecimal(range.getMin()));
         numericProperty.exclusiveMinimum(range.getExclusiveMin());
       }
     }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ApiParamParameterBuilder.java
Patch:
@@ -46,7 +46,7 @@ public void apply(ParameterContext context) {
     Optional<ApiParam> apiParam = context.resolvedMethodParameter().findAnnotation(ApiParam.class);
     context.parameterBuilder()
         .allowableValues(allowableValues(
-            context.resolvedMethodParameter().getParameterType(),
+            context.alternateFor(context.resolvedMethodParameter().getParameterType()),
             apiParam.transform(toAllowableValue()).or("")));
     if (apiParam.isPresent()) {
       context.parameterBuilder().name(emptyToNull(apiParam.get().name()));

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ApiParamParameterBuilder.java
Patch:
@@ -55,6 +55,7 @@ public void apply(ParameterContext context) {
       context.parameterBuilder().defaultValue(emptyToNull(apiParam.get().defaultValue()));
       context.parameterBuilder().allowMultiple(apiParam.get().allowMultiple());
       context.parameterBuilder().required(apiParam.get().required());
+      context.parameterBuilder().hidden(apiParam.get().hidden());
     }
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ApiParamParameterBuilder.java
Patch:
@@ -55,6 +55,7 @@ public void apply(ParameterContext context) {
       context.parameterBuilder().defaultValue(emptyToNull(apiParam.get().defaultValue()));
       context.parameterBuilder().allowMultiple(apiParam.get().allowMultiple());
       context.parameterBuilder().required(apiParam.get().required());
+      context.parameterBuilder().hidden(apiParam.get().hidden());
     }
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ApiParamParameterBuilder.java
Patch:
@@ -55,6 +55,7 @@ public void apply(ParameterContext context) {
       context.parameterBuilder().defaultValue(emptyToNull(apiParam.get().defaultValue()));
       context.parameterBuilder().allowMultiple(apiParam.get().allowMultiple());
       context.parameterBuilder().required(apiParam.get().required());
+      context.parameterBuilder().hidden(apiParam.get().hidden());
     }
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java
Patch:
@@ -233,7 +233,7 @@ public Docket protocols(Set<String> protocols) {
    *
    * @param alternateTypeRules
    * @return this Docket
-   * @see AlternateTypeRules#newRule(java.lang.reflect.Type,
+   * @see springfox.documentation.schema.AlternateTypeRules#newRule(java.lang.reflect.Type,
    * java.lang.reflect.Type)
    */
   public Docket alternateTypeRules(AlternateTypeRule... alternateTypeRules) {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import com.google.common.collect.Ordering;
+import org.springframework.core.OrderComparator;
 import org.springframework.web.bind.annotation.RequestMethod;
 import springfox.documentation.PathProvider;
 import springfox.documentation.RequestHandler;
@@ -169,7 +170,7 @@ public DocumentationContextBuilder applyDefaultResponseMessages(boolean applyDef
   }
 
   public DocumentationContextBuilder ruleBuilders(List<Function<TypeResolver, AlternateTypeRule>> ruleBuilders) {
-    rules.addAll(0, from(ruleBuilders)
+    rules.addAll(from(ruleBuilders)
         .transform(evaluator(typeResolver))
         .toList());
     return this;
@@ -248,6 +249,7 @@ public DocumentationContextBuilder tags(Set<Tag> tags) {
 
   public DocumentationContext build() {
     Map<RequestMethod, List<ResponseMessage>> responseMessages = aggregateResponseMessages();
+    OrderComparator.sort(rules);
     return new DocumentationContext(documentationType,
         handlerMappings,
         apiInfo,

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParametersReader.java
Patch:
@@ -33,7 +33,7 @@
 
 import java.util.List;
 
-import static springfox.documentation.swagger.common.SwaggerPluginSupport.pluginDoesApply;
+import static springfox.documentation.swagger.common.SwaggerPluginSupport.*;
 
 @Component
 @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
@@ -49,7 +49,7 @@ public boolean supports(DocumentationType delimiter) {
     return pluginDoesApply(delimiter);
   }
 
-  protected List<Parameter> readParameters(OperationContext context) {
+  private List<Parameter> readParameters(OperationContext context) {
     Optional<ApiImplicitParams> annotation = context.findAnnotation(ApiImplicitParams.class);
 
     List<Parameter> parameters = Lists.newArrayList();

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -80,7 +80,7 @@ public static Parameter implicitParameter(ApiImplicitParam param) {
 
   static ModelRef maybeGetModelRef(ApiImplicitParam param) {
     String baseType = param.dataType();
-    if (baseType.equals("")) {
+    if ("".equals(baseType)) {
       LOGGER.warn("Coercing to be of type string. This may not even be a scalar type in actuality");
       baseType = "string";
     }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -80,7 +80,7 @@ public static Parameter implicitParameter(ApiImplicitParam param) {
 
   static ModelRef maybeGetModelRef(ApiImplicitParam param) {
     String baseType = param.dataType();
-    if (!isBaseType(param.dataType())) {
+    if (baseType.equals("")) {
       LOGGER.warn("Coercing to be of type string. This may not even be a scalar type in actuality");
       baseType = "string";
     }

File: springfox-bean-validators/src/main/java/springfox/bean/validators/plugins/MinMaxAnnotationPlugin.java
Patch:
@@ -85,7 +85,7 @@ private AllowableValues createAllowableValuesFromMinMaxForNumbers(Optional<Min>
     } else if (max.isPresent()) {
       // use Min value until "infinity" works
       LOG.debug("@Max detected: adding AllowableRangeValues to field ");
-      myvalues = new AllowableRangeValues(Double.toString(Double.MIN_VALUE), Double.toString(max.get().value()));
+      myvalues = new AllowableRangeValues(Double.toString(-Double.MAX_VALUE), Double.toString(max.get().value()));
 
     }
     return myvalues;

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDescriptionReader.java
Patch:
@@ -55,8 +55,6 @@ public ApiDescriptionReader(
   }
 
   public List<ApiDescription> read(RequestMappingContext outerContext) {
-//    RequestMappingInfo requestMappingInfo = outerContext.getRequestMappingInfo();
-//    HandlerMethod handlerMethod = outerContext.getHandlerMethod();
     PatternsRequestCondition patternsCondition = outerContext.getPatternsCondition();
     ApiSelector selector = outerContext.getDocumentationContext().getApiSelector();
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -88,7 +88,7 @@ public Multimap<String, ApiListing> scan(ApiListingScanningContext context) {
         models.putAll(apiModelReader.read(each.withKnownModels(models)));
         apiDescriptions.addAll(apiDescriptionReader.read(each));
       }
-
+      apiDescriptions.addAll(pluginsManager.additionalListings(context));
 
       List<ApiDescription> sortedApis = newArrayList(apiDescriptions);
       Collections.sort(sortedApis, documentationContext.getApiDescriptionOrdering());

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/Properties.java
Patch:
@@ -26,6 +26,7 @@
 import com.google.common.collect.Ordering;
 import com.google.common.primitives.Ints;
 import io.swagger.models.properties.ArrayProperty;
+import io.swagger.models.properties.BaseIntegerProperty;
 import io.swagger.models.properties.BooleanProperty;
 import io.swagger.models.properties.DateProperty;
 import io.swagger.models.properties.DateTimeProperty;
@@ -65,7 +66,7 @@ class Properties {
       .put("date", newInstanceOf(DateProperty.class))
       .put("date-time", newInstanceOf(DateTimeProperty.class))
       .put("bigdecimal", newInstanceOf(DecimalProperty.class))
-      .put("biginteger", newInstanceOf(DecimalProperty.class))
+      .put("biginteger", newInstanceOf(BaseIntegerProperty.class))
       .put("uuid", newInstanceOf(UUIDProperty.class))
       .put("object", newInstanceOf(ObjectProperty.class))
       .put("byte", bytePropertyFactory())

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -136,7 +136,7 @@ public ResourceGroupingStrategy resourceGroupingStrategy(DocumentationType docum
   }
 
   private DocumentationPlugin defaultDocumentationPlugin() {
-    return new Docket(DocumentationType.SWAGGER_12);
+    return new Docket(DocumentationType.SWAGGER_2);
   }
 
   public DocumentationContextBuilder createContextBuilder(DocumentationType documentationType,

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -186,8 +186,7 @@ static Property modelRefToProperty(ModelReference modelRef) {
       responseProperty = new ArrayProperty(
           maybeAddAllowableValues(itemTypeProperty(modelRef.itemModel().get()), modelRef.getAllowableValues()));
     } else if (modelRef.isMap()) {
-      String itemType = modelRef.getItemType();
-      responseProperty = new MapProperty(property(itemType));
+      responseProperty = new MapProperty(property(modelRef.itemModel().get()));
     } else {
       responseProperty = property(modelRef.getType());
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -136,7 +136,7 @@ public ResourceGroupingStrategy resourceGroupingStrategy(DocumentationType docum
   }
 
   private DocumentationPlugin defaultDocumentationPlugin() {
-    return new Docket(DocumentationType.SWAGGER_12);
+    return new Docket(DocumentationType.SWAGGER_2);
   }
 
   public DocumentationContextBuilder createContextBuilder(DocumentationType documentationType,

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -186,8 +186,7 @@ static Property modelRefToProperty(ModelReference modelRef) {
       responseProperty = new ArrayProperty(
           maybeAddAllowableValues(itemTypeProperty(modelRef.itemModel().get()), modelRef.getAllowableValues()));
     } else if (modelRef.isMap()) {
-      String itemType = modelRef.getItemType();
-      responseProperty = new MapProperty(property(itemType));
+      responseProperty = new MapProperty(property(modelRef.itemModel().get()));
     } else {
       responseProperty = property(modelRef.getType());
     }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityRequestHandler.java
Patch:
@@ -53,7 +53,7 @@
 import static springfox.documentation.spring.data.rest.SynthesizedAnnotations.*;
 import static springfox.documentation.spring.web.paths.Paths.*;
 
-class EntityRequestHandler implements springfox.documentation.RequestHandler {
+class EntityRequestHandler implements RequestHandler {
 
   private static final List<MediaType> COLLECTION_COMPACT_MEDIA_TYPES = newArrayList(
       MediaType.valueOf("application/x-spring-data-compact+json"),
@@ -67,7 +67,7 @@ class EntityRequestHandler implements springfox.documentation.RequestHandler {
   private final HandlerMethod handlerMethod;
   private final TypeResolver resolver;
 
-  public EntityRequestHandler(
+  EntityRequestHandler(
       TypeResolver resolver, ResourceMetadata resource,
       Class<? extends Serializable> idType,
       Class<?> domainType,

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySearchRequestHandler.java
Patch:
@@ -27,7 +27,6 @@
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
 import com.google.common.collect.FluentIterable;
-import com.google.common.collect.Iterables;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.domain.Sort;
@@ -169,7 +168,7 @@ public List<ResolvedMethodParameter> getParameters() {
           .filter(maybeFilterSortParam(searchResource.isSortableResource()))
           .filter(maybeFilterPagingParam(searchResource.isPagingResource()))
           .toList();
-      return FluentIterable.from(Iterables.concat(genericParams, actualQueryParams)).toList();
+      return FluentIterable.from(concat(genericParams, actualQueryParams)).toList();
     } else {
       return FluentIterable.from(handlerMethodResolver.methodParameters(handlerMethod))
           .transform(toIgnorable())

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntitySearchRequestHandler.java
Patch:
@@ -53,6 +53,7 @@
 import static com.google.common.collect.Iterables.any;
 import static com.google.common.collect.Lists.*;
 import static com.google.common.collect.Sets.*;
+import static springfox.documentation.spring.web.paths.Paths.splitCamelCase;
 
 class EntitySearchRequestHandler implements RequestHandler {
   private final TypeResolver resolver;
@@ -100,7 +101,7 @@ public PatternsRequestCondition getPatternsCondition() {
 
   @Override
   public String groupName() {
-    return resource.getDomainType().getSimpleName();
+    return String.format("%s Entity Search", splitCamelCase(resource.getDomainType().getSimpleName(), ""));
   }
 
   @Override

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/EntityServicesProvider.java
Patch:
@@ -52,15 +52,15 @@
 import static springfox.documentation.spring.data.rest.EntityServices.*;
 
 @Component
-public class EntityServicesProvider implements RequestHandlerProvider {
+class EntityServicesProvider implements RequestHandlerProvider {
   private final ResourceMappings mappings;
   private final Repositories repositories;
   private final RepositoryRestHandlerMapping restMappings;
   private final BasePathAwareHandlerMapping basePathAwareMappings;
   private final TypeResolver typeResolver;
 
   @Autowired
-  public EntityServicesProvider(
+  EntityServicesProvider(
       ResourceMappings mappings,
       JpaHelper jpaHelper,
       RepositoryRestConfiguration repositoryConfiguration,
@@ -115,7 +115,7 @@ private Collection<RequestHandler> maybeCombine(List<RequestHandler> searchHandl
         .filter(and(compactHandlers(), getHandler()));
     FluentIterable<RequestHandler> nonCompacts = FluentIterable.from(searchHandlers)
         .filter(and(not(compactHandlers()), getHandler()));
-    for (RequestHandler compact: compacts) {
+    for (RequestHandler compact : compacts) {
       Optional<RequestHandler> found = nonCompacts.firstMatch(samePathMapping(compact.getPatternsCondition()));
       combined.add(combine(compact, found));
     }

File: springfox-data-rest/src/main/java/springfox/documentation/spring/data/rest/configuration/SpringDataRestConfiguration.java
Patch:
@@ -20,9 +20,11 @@
 
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
+import springfox.documentation.annotations.Incubating;
 
 @Configuration
 @ComponentScan(basePackages = "springfox.documentation.spring.data.rest")
+@Incubating("2.5.0")
 public class SpringDataRestConfiguration {
 
 }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationTagsReader.java
Patch:
@@ -53,7 +53,7 @@ public SwaggerOperationTagsReader(DefaultTagsProvider tagsProvider) {
   @Override
   public void apply(OperationContext context) {
     Set<String> defaultTags = tagsProvider.tags(context);
-    SetView<String> tags = Sets.union(operationTags(context), controllerTags(context));
+    SetView<String> tags = union(operationTags(context), controllerTags(context));
     if (tags.isEmpty()) {
       context.operationBuilder().tags(defaultTags);
     } else {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/MediaTypeReader.java
Patch:
@@ -91,7 +91,7 @@ private boolean handlerMethodHasFileParameter(OperationContext context) {
 
     List<ResolvedMethodParameter> methodParameters = context.getParameters();
     for (ResolvedMethodParameter resolvedMethodParameter : methodParameters) {
-      if (MultipartFile.class.isAssignableFrom(resolvedMethodParameter.getResolvedParameterType().getErasedType())) {
+      if (MultipartFile.class.isAssignableFrom(resolvedMethodParameter.getParameterType().getErasedType())) {
         return true;
       }
     }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Defaults.java
Patch:
@@ -161,7 +161,7 @@ private void initIgnorableTypes() {
     ignored.add(BindingResult.class);
     ignored.add(ServletContext.class);
     ignored.add(UriComponentsBuilder.class);
-    ignored.add(ApiIgnore.class);
+    ignored.add(ApiIgnore.class); //Used to ignore parameters
   }
 
   private void initResponseMessages() {

File: springfox-core/src/main/java/springfox/documentation/builders/RequestHandlerSelectors.java
Patch:
@@ -21,7 +21,6 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
-import org.springframework.core.annotation.AnnotationUtils;
 import springfox.documentation.RequestHandler;
 
 import java.lang.annotation.Annotation;
@@ -59,7 +58,7 @@ public static Predicate<RequestHandler> withMethodAnnotation(final Class<? exten
     return new Predicate<RequestHandler>() {
       @Override
       public boolean apply(RequestHandler input) {
-        return null != AnnotationUtils.findAnnotation(input.getHandlerMethod().getMethod(), annotation);
+        return input.isAnnotatedWith(annotation);
       }
     };
   }
@@ -96,7 +95,7 @@ public boolean apply(RequestHandler input) {
   }
 
   private static Class<?> declaringClass(RequestHandler input) {
-    return input.getHandlerMethod().getMethod().getDeclaringClass();
+    return input.declaringClass();
   }
 
 }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Orderings.java
Patch:
@@ -102,8 +102,7 @@ public int compare(RequestMappingContext first, RequestMappingContext second) {
   }
 
   private static String qualifiedMethodName(RequestMappingContext context) {
-    return String.format("%s.%s", context.getHandlerMethod().getBeanType().getName(),
-        context.getHandlerMethod().getMethod().getName());
+    return String.format("%s.%s", context.getGroupName(), context.getName());
   }
 
 
@@ -118,7 +117,7 @@ public int compare(RequestHandler first, RequestHandler second) {
   }
 
   static PatternsRequestCondition patternsCondition(RequestHandler handler) {
-    return handler.getRequestMapping().getPatternsCondition();
+    return handler.getPatternsCondition();
   }
 
   public static Ordering<? super DocumentationPlugin> pluginOrdering() {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/ApiSelectorBuilder.java
Patch:
@@ -58,7 +58,7 @@ private Predicate<RequestHandler> transform(final Predicate<String> pathSelector
     return new Predicate<RequestHandler>() {
       @Override
       public boolean apply(RequestHandler input) {
-        return Iterables.any(input.getRequestMapping().getPatternsCondition().getPatterns(), pathSelector);
+        return Iterables.any(input.getPatternsCondition().getPatterns(), pathSelector);
       }
     };
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/DefaultOperationReader.java
Patch:
@@ -31,7 +31,7 @@
 public class DefaultOperationReader implements OperationBuilderPlugin {
   @Override
   public void apply(OperationContext context) {
-    String operationName = context.getHandlerMethod().getMethod().getName();
+    String operationName = context.getName();
     context.operationBuilder()
             .uniqueId(operationName)
             .method(context.httpMethod())

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/DefaultTagsProvider.java
Patch:
@@ -24,11 +24,10 @@
 
 import static com.google.common.collect.ImmutableSet.*;
 import static com.google.common.collect.Sets.*;
-import static springfox.documentation.spring.web.ControllerNamingUtils.*;
 
 @Component
 public class DefaultTagsProvider {
   public ImmutableSet<String> tags(OperationContext context) {
-    return copyOf(newHashSet(controllerNameAsGroup(context.getHandlerMethod())));
+    return copyOf(newHashSet(context.getGroupName()));
   }
 }

File: springfox-core/src/main/java/springfox/documentation/builders/OperationBuilder.java
Patch:
@@ -257,7 +257,7 @@ public OperationBuilder tags(Set<String> tags) {
    * @return this
    */
   public OperationBuilder extensions(List<VendorExtension> extensions) {
-    this.vendorExtensions.addAll(extensions);
+    this.vendorExtensions.addAll(nullToEmptyList(extensions));
     return this;
   }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -130,6 +130,9 @@ protected Map<String, Response> mapResponseMessages(Set<ResponseMessage> from) {
           .schema(responseProperty);
       response.setExamples(Maps.<String, Object>newHashMap());
       response.setHeaders(transformEntries(responseMessage.getHeaders(), toPropertyEntry()));
+      Map<String, Object> extensions = new VendorExtensionsMapper()
+          .mapExtensions(responseMessage.getVendorExtensions());
+      response.getVendorExtensions().putAll(extensions);
       responses.put(String.valueOf(responseMessage.getCode()), response);
     }
     return responses;

File: springfox-schema/src/main/java/springfox/documentation/schema/property/bean/BeanModelProperty.java
Patch:
@@ -47,7 +47,7 @@ public BeanModelProperty(
       TypeResolver typeResolver,
       AlternateTypeProvider alternateTypeProvider,
       BeanPropertyDefinition jacksonProperty) {
-    super(propertyName, alternateTypeProvider, jacksonProperty);
+    super(propertyName, typeResolver, alternateTypeProvider, jacksonProperty);
 
     this.method = method;
     this.typeResolver = typeResolver;

File: springfox-schema/src/main/java/springfox/documentation/schema/property/field/FieldModelProperty.java
Patch:
@@ -20,6 +20,7 @@
 package springfox.documentation.schema.property.field;
 
 import com.fasterxml.classmate.ResolvedType;
+import com.fasterxml.classmate.TypeResolver;
 import com.fasterxml.classmate.members.ResolvedField;
 import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
 import springfox.documentation.schema.property.BaseModelProperty;
@@ -32,10 +33,11 @@ public class FieldModelProperty extends BaseModelProperty {
   public FieldModelProperty(
       String fieldName,
       ResolvedField childField,
+      TypeResolver resolver,
       AlternateTypeProvider alternateTypeProvider,
       BeanPropertyDefinition jacksonProperty) {
 
-    super(fieldName, alternateTypeProvider, jacksonProperty);
+    super(fieldName, resolver, alternateTypeProvider, jacksonProperty);
     this.childField = childField;
   }
 

File: springfox-core/src/main/java/springfox/documentation/builders/OperationBuilder.java
Patch:
@@ -301,7 +301,7 @@ private Set<ResponseMessage> mergeResponseMessages(Set<ResponseMessage> response
             .code(each.getCode())
             .message(message)
             .responseModel(responseWithModel)
-            .headers(each.getHeaders())
+            .headersWithDescription(each.getHeaders())
             .build());
       } else {
         merged.add(each);

File: springfox-core/src/main/java/springfox/documentation/service/ResponseMessage.java
Patch:
@@ -27,13 +27,13 @@ public class ResponseMessage {
   private final int code;
   private final String message;
   private final ModelReference responseModel;
-  private final Map<String, ModelReference> headers;
+  private final Map<String, Header> headers;
 
   public ResponseMessage(
       int code,
       String message,
       ModelReference responseModel,
-      Map<String, ModelReference> headers) {
+      Map<String, Header> headers) {
     this.code = code;
     this.message = message;
     this.responseModel = responseModel;
@@ -52,7 +52,7 @@ public ModelReference getResponseModel() {
     return responseModel;
   }
 
-  public Map<String, ModelReference> getHeaders() {
+  public Map<String, Header> getHeaders() {
     return headers;
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/property/bean/ParameterModelProperty.java
Patch:
@@ -21,6 +21,7 @@
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.members.ResolvedParameterizedMember;
 import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
+import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
 import springfox.documentation.schema.property.BaseModelProperty;
 import springfox.documentation.spi.schema.AlternateTypeProvider;
 
@@ -33,8 +34,8 @@ public ParameterModelProperty(
       String name,
       AnnotatedParameter parameter,
       ResolvedParameterizedMember constructor,
-      AlternateTypeProvider alternateTypeProvider) {
-    super(name, alternateTypeProvider);
+      AlternateTypeProvider alternateTypeProvider, BeanPropertyDefinition jacksonProperty) {
+    super(name, alternateTypeProvider, jacksonProperty);
     this.parameter = parameter;
     this.constructor = constructor;
   }

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -75,7 +75,7 @@ public com.google.common.base.Optional<Model> modelFor(ModelContext modelContext
     if (isContainerType(propertiesHost)
         || isMapType(propertiesHost)
         || propertiesHost.getErasedType().isEnum()
-        || isBaseType(Types.typeNameFor(propertiesHost.getErasedType()))
+        || isBaseType(propertiesHost)
         || modelContext.hasSeenBefore(propertiesHost)) {
       LOG.debug("Skipping model of type {} as its either a container type, map, enum or base type, or its already "
           + "been handled", resolvedTypeSignature(propertiesHost).or("<null>"));

File: springfox-schema/src/main/java/springfox/documentation/schema/ResolvedTypes.java
Patch:
@@ -70,7 +70,7 @@ public String apply(ResolvedType input) {
     });
   }
 
-  public static Function<ResolvedType, ? extends ModelReference> modelRefFactory(
+  public static Function<ResolvedType, ModelReference> modelRefFactory(
       final ModelContext parentContext,
       final TypeNameExtractor typeNameExtractor) {
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/AbstractController.java
Patch:
@@ -24,13 +24,14 @@
 import org.springframework.hateoas.ResourceSupport;
 import org.springframework.http.HttpEntity;
 import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 
 public abstract class AbstractController<T extends ResourceSupport, ID> {
 
   @RequestMapping(value = "/create-t", method = RequestMethod.PUT)
-  public void create(T toCreate) {
+  public void create(@RequestBody T toCreate) {
     throw new UnsupportedOperationException();
   }
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/PetService.java
Patch:
@@ -128,18 +128,18 @@ public Map<String, Pet> echo(@RequestBody Map<String, Pet> someInput) {
   }
 
   @RequestMapping(value = "/transformPetNameToPetMapToAny", method = RequestMethod.POST)
-  public Map<String, Object> transformPetNameToPetMapToAny(Map<String, Pet> someInput) {
+  public Map<String, Object> transformPetNameToPetMapToAny(@RequestBody Map<String, Pet> someInput) {
     throw new RuntimeException("NotImplementedException");
   }
 
   @RequestMapping(value = "/transformPetNameToPetMapToGenericOpenMap", method = RequestMethod.POST)
-  public Map<Object, Object> transformPetNameToPetMapToGenericOpenMap(Map<String, Pet> someInput) {
+  public Map<Object, Object> transformPetNameToPetMapToGenericOpenMap(@RequestBody Map<String, Pet> someInput) {
     throw new RuntimeException("NotImplementedException");
   }
 
 
   @RequestMapping(value = "/transformPetNameToPetMapToOpenMap", method = RequestMethod.POST)
-  public Map transformPetNameToPetMapToOpenMap(Map<String, Pet> someInput) {
+  public Map transformPetNameToPetMapToOpenMap(@RequestBody Map<String, Pet> someInput) {
     throw new RuntimeException("NotImplementedException");
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -128,6 +128,7 @@ private boolean shouldIgnore(
   private boolean shouldExpand(final ResolvedMethodParameter parameter, ResolvedType resolvedParamType) {
     return (!parameter.getMethodParameter().hasParameterAnnotations() || annotatedWithModelAttribute(parameter))
         && !isBaseType(typeNameFor(resolvedParamType.getErasedType()))
+        && !resolvedParamType.getErasedType().isEnum()
         && !isContainerType(resolvedParamType)
         && !isMapType(resolvedParamType);
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/AbstractController.java
Patch:
@@ -24,13 +24,14 @@
 import org.springframework.hateoas.ResourceSupport;
 import org.springframework.http.HttpEntity;
 import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 
 public abstract class AbstractController<T extends ResourceSupport, ID> {
 
   @RequestMapping(value = "/create-t", method = RequestMethod.PUT)
-  public void create(T toCreate) {
+  public void create(@RequestBody T toCreate) {
     throw new UnsupportedOperationException();
   }
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/PetService.java
Patch:
@@ -128,18 +128,18 @@ public Map<String, Pet> echo(@RequestBody Map<String, Pet> someInput) {
   }
 
   @RequestMapping(value = "/transformPetNameToPetMapToAny", method = RequestMethod.POST)
-  public Map<String, Object> transformPetNameToPetMapToAny(Map<String, Pet> someInput) {
+  public Map<String, Object> transformPetNameToPetMapToAny(@RequestBody Map<String, Pet> someInput) {
     throw new RuntimeException("NotImplementedException");
   }
 
   @RequestMapping(value = "/transformPetNameToPetMapToGenericOpenMap", method = RequestMethod.POST)
-  public Map<Object, Object> transformPetNameToPetMapToGenericOpenMap(Map<String, Pet> someInput) {
+  public Map<Object, Object> transformPetNameToPetMapToGenericOpenMap(@RequestBody Map<String, Pet> someInput) {
     throw new RuntimeException("NotImplementedException");
   }
 
 
   @RequestMapping(value = "/transformPetNameToPetMapToOpenMap", method = RequestMethod.POST)
-  public Map transformPetNameToPetMapToOpenMap(Map<String, Pet> someInput) {
+  public Map transformPetNameToPetMapToOpenMap(@RequestBody Map<String, Pet> someInput) {
     throw new RuntimeException("NotImplementedException");
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -75,7 +75,7 @@ public com.google.common.base.Optional<Model> modelFor(ModelContext modelContext
     if (isContainerType(propertiesHost)
         || isMapType(propertiesHost)
         || propertiesHost.getErasedType().isEnum()
-        || isBaseType(Types.typeNameFor(propertiesHost.getErasedType()))
+        || isBaseType(propertiesHost)
         || modelContext.hasSeenBefore(propertiesHost)) {
       LOG.debug("Skipping model of type {} as its either a container type, map, enum or base type, or its already "
           + "been handled", resolvedTypeSignature(propertiesHost).or("<null>"));

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyClass.java
Patch:
@@ -55,6 +55,9 @@
 import java.util.Map;
 
 @RequestMapping(produces = {"application/json"}, consumes = {"application/json", "application/xml"})
+@ApiResponses({
+  @ApiResponse(code = 404, response = RestError.class, message = "Not Found")
+})
 public class DummyClass {
 
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/ModelAttributeWithHiddenParametersExample.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationParameterReader.java
Patch:
@@ -97,6 +97,7 @@ protected List<Parameter> readParameters(final OperationContext context) {
           if (!parameter.isHidden()) {
             parameters.add(parameter);
           }
+        }
       }
     }
     return parameters;

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Defaults.java
Patch:
@@ -161,6 +161,7 @@ private void initIgnorableTypes() {
     ignored.add(BindingResult.class);
     ignored.add(ServletContext.class);
     ignored.add(UriComponentsBuilder.class);
+    ignored.add(ApiIgnore.class);
   }
 
   private void initResponseMessages() {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -153,10 +153,11 @@ public String apply(String input) {
         Iterable<Function<String, String>> decorators
             = from(pathDecorators.getPluginsFor(context.documentationContext()))
             .transform(toDecorator(context));
+        String decorated = input;
         for (Function<String, String> decorator : decorators) {
-          input = decorator.apply(input);
+          decorated = decorator.apply(decorated);
         }
-        return input;
+        return decorated;
       }
     };
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ModelAttributeParameterExpander.java
Patch:
@@ -194,7 +194,7 @@ private Class<?> fieldType(AlternateTypeProvider alternateTypeProvider, Field fi
     ResolvedType resolvedType = resolver.resolve(type);
     ResolvedType alternativeType = alternateTypeProvider.alternateFor(resolvedType);
     Class<?> erasedType = alternativeType.getErasedType();
-    if (type != erasedType) {
+    if (!type.equals(erasedType)) {
       LOG.debug("Found alternative type [{}] for field: [{}-{}]", erasedType, field, type);
     }
     return erasedType;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/configuration/GenericWebContextLoader.java
Patch:
@@ -48,7 +48,7 @@ private MockServletContext initServletContext(String warRootDir, ResourceLoader
     return new MockServletContext(warRootDir, resourceLoader) {
       // Required for DefaultServletHttpRequestHandler...
       public RequestDispatcher getNamedDispatcher(String path) {
-        return path.equals("default") ? new MockRequestDispatcher(path) : super.getNamedDispatcher(path);
+        return "default".equals(path) ? new MockRequestDispatcher(path) : super.getNamedDispatcher(path);
       }
     };
   }

File: springfox-schema/src/main/java/springfox/documentation/schema/Types.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -62,6 +62,7 @@ private Types() {
       .put(Character.TYPE, "string")
 
       .put(Date.class, "date-time")
+      .put(java.sql.Date.class, "date-time")
       .put(String.class, "string")
       .put(Object.class, "object")
       .put(Long.class, "long")

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -88,6 +88,9 @@ static ModelRef maybeGetModelRef(ApiImplicitParam param) {
       LOGGER.warn("Coercing to be of type string. This may not even be a scalar type in actuality");
       baseType = "string";
     }
+    if (param.allowMultiple()) {
+      return new ModelRef("", new ModelRef(baseType, allowableValueFromString(param.allowableValues())));
+    }
     return new ModelRef(baseType, allowableValueFromString(param.allowableValues()));
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationModelsProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -60,7 +60,7 @@ public void apply(RequestMappingContext context) {
   }
 
   private void collectGlobalModels(RequestMappingContext context) {
-    for (ResolvedType each : context.getDocumentationContext().getAdditionalModels()) {
+    for (ResolvedType each : context.getAdditionalModels()) {
       context.operationModelsBuilder().addInputParam(each);
       context.operationModelsBuilder().addReturn(each);
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -83,7 +83,8 @@ private void applyReturnTypeOverride(OperationContext context) {
       ModelContext modelContext = ModelContext.returnValue(returnType,
           context.getDocumentationType(),
           context.getAlternateTypeProvider(),
-          context.getDocumentationContext().getGenericsNamingStrategy());
+          context.getGenericsNamingStrategy(),
+          context.getIgnorableParameterTypes());
       modelRef = modelRefFactory(modelContext, typeNameExtractor).apply(returnType);
     }
     ResponseMessage built = new ResponseMessageBuilder()

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDataTypeReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -84,7 +84,8 @@ public void apply(ParameterContext context) {
     ModelContext modelContext = inputParam(parameterType,
         context.getDocumentationType(),
         context.getAlternateTypeProvider(),
-        context.getGenericNamingStrategy());
+        context.getGenericNamingStrategy(),
+        context.getIgnorableParameterTypes());
     context.parameterBuilder()
             .type(parameterType)
             .modelRef(Optional.fromNullable(modelRef)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiModelReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -59,7 +59,7 @@ public ApiModelReader(@Qualifier("cachedModels") ModelProvider modelProvider,
 
   public Map<String, Model> read(RequestMappingContext context) {
 
-    Set<Class> ignorableTypes = newHashSet(context.getDocumentationContext().getIgnorableParameterTypes());
+    Set<Class> ignorableTypes = newHashSet(context.getIgnorableParameterTypes());
     Set<ModelContext> modelContexts = pluginsManager.modelContexts(context);
     Map<String, Model> modelMap = newHashMap(context.getModelMap());
     for (ModelContext each : modelContexts) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationModelsProvider.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -60,7 +60,7 @@ public void apply(RequestMappingContext context) {
   }
 
   private void collectGlobalModels(RequestMappingContext context) {
-    for (ResolvedType each : context.getDocumentationContext().getAdditionalModels()) {
+    for (ResolvedType each : context.getAdditionalModels()) {
       context.operationModelsBuilder().addInputParam(each);
       context.operationModelsBuilder().addReturn(each);
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationResponseClassReader.java
Patch:
@@ -59,8 +59,8 @@ public void apply(OperationContext context) {
         returnType,
         context.getDocumentationType(),
         context.getAlternateTypeProvider(),
-        context.getDocumentationContext().getGenericsNamingStrategy(),
-        context.getDocumentationContext().getIgnorableParameterTypes());
+        context.getGenericsNamingStrategy(),
+        context.getIgnorableParameterTypes());
     String responseTypeName = nameExtractor.typeName(modelContext);
     log.debug("Setting spring response class to:" + responseTypeName);
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -83,8 +83,8 @@ private void applyReturnTypeOverride(OperationContext context) {
       ModelContext modelContext = ModelContext.returnValue(returnType,
           context.getDocumentationType(),
           context.getAlternateTypeProvider(),
-          context.getDocumentationContext().getGenericsNamingStrategy(),
-          context.getDocumentationContext().getIgnorableParameterTypes());
+          context.getGenericsNamingStrategy(),
+          context.getIgnorableParameterTypes());
       modelRef = modelRefFactory(modelContext, typeNameExtractor).apply(returnType);
     }
     ResponseMessage built = new ResponseMessageBuilder()

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDataTypeReader.java
Patch:
@@ -85,7 +85,7 @@ public void apply(ParameterContext context) {
         context.getDocumentationType(),
         context.getAlternateTypeProvider(),
         context.getGenericNamingStrategy(),
-        context.getDocumentationContext().getIgnorableParameterTypes());
+        context.getIgnorableParameterTypes());
     context.parameterBuilder()
             .type(parameterType)
             .modelRef(Optional.fromNullable(modelRef)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiModelReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -59,7 +59,7 @@ public ApiModelReader(@Qualifier("cachedModels") ModelProvider modelProvider,
 
   public Map<String, Model> read(RequestMappingContext context) {
 
-    Set<Class> ignorableTypes = newHashSet(context.getDocumentationContext().getIgnorableParameterTypes());
+    Set<Class> ignorableTypes = newHashSet(context.getIgnorableParameterTypes());
     Set<ModelContext> modelContexts = pluginsManager.modelContexts(context);
     Map<String, Model> modelMap = newHashMap(context.getModelMap());
     for (ModelContext each : modelContexts) {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationResponseClassReader.java
Patch:
@@ -69,8 +69,8 @@ public void apply(OperationContext context) {
     ModelContext modelContext = returnValue(returnType,
         context.getDocumentationType(),
         context.getAlternateTypeProvider(),
-        context.getDocumentationContext().getGenericsNamingStrategy(),
-        context.getDocumentationContext().getIgnorableParameterTypes());
+        context.getGenericsNamingStrategy(),
+        context.getIgnorableParameterTypes());
 
     String responseTypeName = nameExtractor.typeName(modelContext);
     log.debug("Setting response class to:" + responseTypeName);
@@ -80,7 +80,7 @@ public void apply(OperationContext context) {
   }
 
   private boolean canSkip(OperationContext context, ResolvedType returnType) {
-    return context.getDocumentationContext().getIgnorableParameterTypes().contains(returnType);
+    return context.getIgnorableParameterTypes().contains(returnType.getErasedType());
   }
 
   @Override

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -83,7 +83,8 @@ private void applyReturnTypeOverride(OperationContext context) {
       ModelContext modelContext = ModelContext.returnValue(returnType,
           context.getDocumentationType(),
           context.getAlternateTypeProvider(),
-          context.getDocumentationContext().getGenericsNamingStrategy());
+          context.getDocumentationContext().getGenericsNamingStrategy(),
+          context.getDocumentationContext().getIgnorableParameterTypes());
       modelRef = modelRefFactory(modelContext, typeNameExtractor).apply(returnType);
     }
     ResponseMessage built = new ResponseMessageBuilder()

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterDataTypeReader.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2015-2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -84,7 +84,8 @@ public void apply(ParameterContext context) {
     ModelContext modelContext = inputParam(parameterType,
         context.getDocumentationType(),
         context.getAlternateTypeProvider(),
-        context.getGenericNamingStrategy());
+        context.getGenericNamingStrategy(),
+        context.getDocumentationContext().getIgnorableParameterTypes());
     context.parameterBuilder()
             .type(parameterType)
             .modelRef(Optional.fromNullable(modelRef)

File: springfox-schema/src/main/java/springfox/documentation/schema/property/PojoPropertyBuilderFactory.java
Patch:
@@ -95,7 +95,7 @@ private Optional<POJOPropertyBuilder> jackson26Instance(
           annotationIntrospector,
           forSerialization));
     } catch (Exception e) {
-      LOG.error("Unable to instantiate jackson 26 object", e);
+      LOG.debug("Unable to instantiate jackson 26 object", e);
     }
     return Optional.absent();
   }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Defaults.java
Patch:
@@ -161,7 +161,6 @@ private void initIgnorableTypes() {
     ignored.add(BindingResult.class);
     ignored.add(ServletContext.class);
     ignored.add(UriComponentsBuilder.class);
-    ignored.add(ApiIgnore.class);
   }
 
   private void initResponseMessages() {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Defaults.java
Patch:
@@ -161,7 +161,6 @@ private void initIgnorableTypes() {
     ignored.add(BindingResult.class);
     ignored.add(ServletContext.class);
     ignored.add(UriComponentsBuilder.class);
-    ignored.add(ApiIgnore.class);
   }
 
   private void initResponseMessages() {

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/FeatureDemonstrationService.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *
- *  Copyright 2015 the original author or authors.
+ *  Copyright 2016 the original author or authors.
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ExpandedParameterBuilder.java
Patch:
@@ -83,6 +83,8 @@ public void apply(ParameterExpansionContext context) {
       }
       typeName = containerType(resolved);
       itemModel = new ModelRef(itemTypeName, itemAllowables);
+    } else if (resolved.getErasedType().isEnum()) {
+        typeName = "string";
     }
     context.getParameterBuilder()
         .name(name)

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/Properties.java
Patch:
@@ -50,7 +50,7 @@
 import static com.google.common.base.Strings.*;
 import static springfox.documentation.schema.Collections.*;
 import static springfox.documentation.schema.Types.*;
-import static springfox.documentation.swagger2.mappers.EnumMapper.maybeAddEnumValues;
+import static springfox.documentation.swagger2.mappers.EnumMapper.*;
 
 class Properties {
   private static final Map<String, Function<String, ? extends Property>> typeFactory
@@ -85,7 +85,7 @@ public static Property property(final String typeName) {
   public static Property itemTypeProperty(ModelReference paramModel) {
     if (paramModel.isCollection()) {
       return new ArrayProperty(
-          maybeAddEnumValues(itemTypeProperty(paramModel.itemModel().get()), paramModel.getAllowableValues()));
+          maybeAddAllowableValues(itemTypeProperty(paramModel.itemModel().get()), paramModel.getAllowableValues()));
     }
     return property(paramModel.getType());
   }
@@ -104,7 +104,7 @@ public T apply(String input) {
     };
   }
 
-  public static Ordering<String> defaultOrdering(Map<String, ModelProperty> properties) {
+  static Ordering<String> defaultOrdering(Map<String, ModelProperty> properties) {
     return Ordering.from(byPosition(properties)).compound(byName());
   }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -66,15 +66,15 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
     toReturn.setDescription(source.getDescription());
     toReturn.setAccess(source.getParamAccess());
     toReturn.setRequired(source.isRequired());
-    maybeAddEnumValues(toReturn, source.getAllowableValues());
+    maybeAddAllowableValuesToParameter(toReturn, source.getAllowableValues());
     if (paramModel.isCollection()) {
       toReturn.setCollectionFormat("multi");
       toReturn.setType("array");
       ModelReference paramItemModelRef = paramModel.itemModel().get();
       Property itemProperty
-          = maybeAddEnumValues(itemTypeProperty(paramItemModelRef), paramItemModelRef.getAllowableValues());
+          = maybeAddAllowableValues(itemTypeProperty(paramItemModelRef), paramItemModelRef.getAllowableValues());
       toReturn.setItems(itemProperty);
-      maybeAddEnumValues(toReturn, paramItemModelRef.getAllowableValues());
+      maybeAddAllowableValuesToParameter(toReturn, paramItemModelRef.getAllowableValues());
     } else {
       //TODO: swagger-core remove this downcast when swagger-core fixes its problem
       ((AbstractSerializableParameter) toReturn).setDefaultValue(source.getDefaultValue());

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -161,6 +161,9 @@ public Property mapProperty(ModelProperty source) {
         ((StringProperty) property).maxLength(Integer.valueOf(range.getMax()));
         ((StringProperty) property).minLength(Integer.valueOf(range.getMin()));
       }
+      if(source.getPattern() != null) {
+        ((StringProperty) property).setPattern(source.getPattern());
+      }
     }
 
     if (property != null) {

File: springfox-staticdocs/src/main/java/springfox/documentation/staticdocs/Swagger2MarkupResultHandler.java
Patch:
@@ -36,6 +36,7 @@ public class Swagger2MarkupResultHandler implements ResultHandler {
     private final String outputDir;
     private final MarkupLanguage markupLanguage;
     private final String examplesFolderPath;
+    private final String encoding = "UTF-8";
 
     Swagger2MarkupResultHandler(String outputDir, MarkupLanguage markupLanguage, String examplesFolderPath) {
         this.outputDir = outputDir;
@@ -63,6 +64,7 @@ public static Builder outputDirectory(String outputDir) {
     @Override
     public void handle(MvcResult result) throws Exception {
         MockHttpServletResponse response = result.getResponse();
+        response.setCharacterEncoding(encoding);
         String swaggerJson = response.getContentAsString();
         Swagger2MarkupConverter.fromString(swaggerJson).withMarkupLanguage(markupLanguage)
                 .withExamples(examplesFolderPath).build().intoFolder(outputDir);

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelPropertyPropertyBuilder.java
Patch:
@@ -53,6 +53,7 @@ public void apply(ModelPropertyContext context) {
           .description(annotation.transform(toDescription()).orNull())
           .isHidden(annotation.transform(toHidden()).or(false))
           .type(annotation.transform(toType(context.getResolver())).orNull())
+          .position(annotation.transform(toPosition()).or(0))
           .example(annotation.transform(toExample()).orNull());
     }
   }

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -147,6 +147,7 @@ UiConfiguration uiConfig() {
         "none",       // docExpansion          => none | list
         "alpha",      // apiSorter             => alpha
         "schema",     // defaultModelRendering => schema
+        UiConfiguration.DEFAULT_SUBMIT_METHODS,
         false,        // enableJsonEditor      => true | false
         true);        // showRequestHeaders    => true | false
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/DocumentationCache.java
Patch:
@@ -41,4 +41,7 @@ public Map<String, Documentation> all() {
     return Collections.unmodifiableMap(documentationLookup);
   }
 
+  public void clear() {
+    documentationLookup.clear();
+  }
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/LicenseMapper.java
Patch:
@@ -33,6 +33,9 @@ public class LicenseMapper {
 
   @License
   public io.swagger.models.License apiInfoToLicense(ApiInfo from) {
+    if (from.getLicense() == null && from.getLicenseUrl() == null) {
+      return null;
+    }
     return new io.swagger.models.License().name(from.getLicense()).url(from.getLicenseUrl());
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelProperties.java
Patch:
@@ -56,7 +56,7 @@ public AllowableValues apply(ApiModelProperty annotation) {
 
   public static AllowableValues allowableValueFromString(String allowableValueString) {
     AllowableValues allowableValues = new AllowableListValues(Lists.<String>newArrayList(), "LIST");
-    allowableValueString = allowableValueString.trim().replaceAll(" ", "");
+    allowableValueString = allowableValueString.trim();
     if (allowableValueString.startsWith("range[")) {
       allowableValueString = allowableValueString.replaceAll("range\\[", "").replaceAll("]", "");
       Iterable<String> split = Splitter.on(',').trimResults().omitEmptyStrings().split(allowableValueString);
@@ -66,7 +66,7 @@ public static AllowableValues allowableValueFromString(String allowableValueStri
       Iterable<String> split = Splitter.on(',').trimResults().omitEmptyStrings().split(allowableValueString);
       allowableValues = new AllowableListValues(newArrayList(split), "LIST");
     } else if (hasText(allowableValueString)) {
-      List<String> singleVal = Collections.singletonList(allowableValueString.trim());
+      List<String> singleVal = Collections.singletonList(allowableValueString);
       allowableValues = new AllowableListValues(singleVal, "LIST");
     }
     return allowableValues;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/ApiResourceController.java
Patch:
@@ -31,6 +31,7 @@
 
 @Controller
 @ApiIgnore
+@RequestMapping("/swagger-resources")
 public class ApiResourceController {
 
 
@@ -60,7 +61,7 @@ ResponseEntity<UiConfiguration> uiConfiguration() {
         Optional.fromNullable(uiConfiguration).or(UiConfiguration.DEFAULT), HttpStatus.OK);
   }
 
-  @RequestMapping(value = "/swagger-resources")
+  @RequestMapping
   @ResponseBody
   ResponseEntity<List<SwaggerResource>> swaggerResources() {
     return new ResponseEntity<List<SwaggerResource>>(swaggerResources.get(), HttpStatus.OK);

File: springfox-schema/src/main/java/springfox/documentation/schema/property/BaseModelProperty.java
Patch:
@@ -25,8 +25,8 @@
 import springfox.documentation.service.AllowableValues;
 import springfox.documentation.spi.schema.AlternateTypeProvider;
 
-import static com.google.common.base.Optional.fromNullable;
-import static springfox.documentation.schema.ResolvedTypes.simpleQualifiedTypeName;
+import static com.google.common.base.Optional.*;
+import static springfox.documentation.schema.ResolvedTypes.*;
 
 public abstract class BaseModelProperty implements ModelProperty {
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationTagsReader.java
Patch:
@@ -39,7 +39,8 @@ public OperationTagsReader(DefaultTagsProvider tagsProvider) {
 
   @Override
   public void apply(OperationContext context) {
-    context.operationBuilder().tags(tagsProvider.tags(context));
+    context.operationBuilder()
+        .tags(tagsProvider.tags(context));
   }
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/SwaggerApiListingReader.java
Patch:
@@ -55,7 +55,7 @@ public void apply(ApiListingContext apiListingContext) {
     }
     apiListingContext.apiListingBuilder()
         .description(description)
-        .tags(tagSet);
+        .tagNames(tagSet);
   }
 
   private Function<Api, String> descriptionExtractor() {

File: springfox-core/src/main/java/springfox/documentation/builders/ParameterBuilder.java
Patch:
@@ -122,7 +122,7 @@ public ParameterBuilder allowMultiple(boolean allowMultiple) {
    * @return
    */
   public ParameterBuilder allowableValues(AllowableValues allowableValues) {
-    this.allowableValues = defaultIfAbsent(allowableValues, this.allowableValues);
+    this.allowableValues = emptyToNull(allowableValues, this.allowableValues);
     return this;
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParametersReader.java
Patch:
@@ -59,7 +59,7 @@ protected List<Parameter> readParameters(OperationContext context) {
     List<Parameter> parameters = Lists.newArrayList();
     if (null != annotation) {
       for (ApiImplicitParam param : annotation.value()) {
-        parameters.add(OperationImplicitParameterReader.getImplicitParameter(param));
+        parameters.add(OperationImplicitParameterReader.implicitParameter(param));
       }
     }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterRequiredReader.java
Patch:
@@ -19,6 +19,7 @@
 
 package springfox.documentation.spring.web.readers.parameter;
 
+import com.google.common.annotations.VisibleForTesting;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
@@ -77,7 +78,8 @@ private Boolean getAnnotatedRequired(MethodParameter methodParameter) {
     return requiredSet.contains(true);
   }
 
-  private boolean isOptional(MethodParameter methodParameter) {
+  @VisibleForTesting
+  boolean isOptional(MethodParameter methodParameter) {
     return methodParameter.getParameterType().getName().equals("java.util.Optional");
   }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -118,7 +118,6 @@ protected List<Map<String, List<String>>> mapAuthorizations(
     return security;
   }
 
-
   protected Map<String, Response> mapResponseMessages(Set<ResponseMessage> from) {
     HashMap<String, Response> responses = newHashMap();
     for (ResponseMessage responseMessage : from) {

File: springfox-core/src/main/java/springfox/documentation/builders/OperationBuilder.java
Patch:
@@ -301,6 +301,7 @@ private Set<ResponseMessage> mergeResponseMessages(Set<ResponseMessage> response
             .code(each.getCode())
             .message(message)
             .responseModel(responseWithModel)
+            .headers(each.getHeaders())
             .build());
       } else {
         merged.add(each);

File: springfox-petstore/src/main/java/springfox/petstore/controller/PetStoreResource.java
Patch:
@@ -34,7 +34,6 @@
 import springfox.petstore.model.Order;
 import springfox.petstore.model.Pet;
 import springfox.petstore.repository.MapBackedRepository;
-import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 import static org.springframework.http.MediaType.*;
 import static org.springframework.web.bind.annotation.RequestMethod.*;
@@ -96,12 +95,12 @@ public ResponseEntity<String> deleteOrder(
   @RequestMapping(value="search", method = RequestMethod.GET, produces = "application/json", params = "x=TX")
   @ResponseStatus(value = HttpStatus.OK)
   public ResponseEntity<Pet> getPetInTx() {
-    throw new NotImplementedException();
+    throw new UnsupportedOperationException();
   }
 
   @RequestMapping(value="search", method = RequestMethod.GET, produces = "application/json", params = "x=CA")
   @ResponseStatus(value = HttpStatus.OK)
   public ResponseEntity<Pet> getPetInCA() {
-    throw new NotImplementedException();
+    throw new UnsupportedOperationException();
   }
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ModelAttributeParameterExpander.java
Patch:
@@ -111,7 +111,7 @@ public boolean apply(ModelAttributeField input) {
   private Predicate<ModelAttributeField> simpleType() {
     return or(
             or(belongsToJavaPackage(),
-                    or(isCollection(), isMap())),
+              or(isCollection(), isMap())),
             isEnum());
   }
 

File: springfox-core/src/main/java/springfox/documentation/service/ApiInfo.java
Patch:
@@ -33,11 +33,11 @@ public class ApiInfo {
   private final String licenseUrl;
   private final Contact contact;
 
-  @Deprecated
   /**
    * Deprecated in favor of richer contact object
    * @deprecated @since 2.4.0
    */
+  @Deprecated
   public ApiInfo(
       String title,
       String description,

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ParameterMapper.java
Patch:
@@ -49,6 +49,8 @@ private Parameter bodyParameter(springfox.documentation.service.Parameter source
         .schema(fromModelRef(source.getModelRef()));
     parameter.setAccess(source.getParamAccess());
     parameter.setRequired(source.isRequired());
+
+    //TODO: swagger-core Body parameter does not have an enum property
     return parameter;
   }
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/ConcreteController.java
Patch:
@@ -19,11 +19,12 @@
 
 package springfox.documentation.spring.web.dummy.controllers;
 
+import org.springframework.hateoas.Resource;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import springfox.documentation.spring.web.dummy.models.Pet;
 
 @Controller
 @RequestMapping("/foo")
-public class ConcreteController extends AbstractController<Pet, String> {
+public class ConcreteController extends AbstractController<Resource<Pet>, String> {
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -49,6 +49,7 @@
 import java.util.SortedMap;
 import java.util.TreeMap;
 
+import static com.google.common.base.Predicates.*;
 import static com.google.common.collect.Maps.*;
 import static springfox.documentation.schema.Maps.*;
 import static springfox.documentation.swagger2.mappers.Properties.*;
@@ -103,7 +104,8 @@ public Model mapProperties(springfox.documentation.schema.Model source) {
 
   private Map<String, Property> mapProperties(SortedMap<String, ModelProperty> properties) {
     Map<String, Property> mappedProperties = new LinkedHashMap<String, Property>();
-    for (Map.Entry<String, ModelProperty> propertyEntry : properties.entrySet()) {
+    SortedMap<String, ModelProperty> nonVoidProperties = filterEntries(properties, not(voidProperties()));
+    for (Map.Entry<String, ModelProperty> propertyEntry : nonVoidProperties.entrySet()) {
       mappedProperties.put(propertyEntry.getKey(), mapProperty(propertyEntry.getValue()));
     }
     return mappedProperties;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationTagsReader.java
Patch:
@@ -67,7 +67,7 @@ public void apply(OperationContext context) {
   }
 
   private Set<String> controllerTags(HandlerMethod handlerMethod) {
-    Class<?> controller = handlerMethod.getMethod().getDeclaringClass();
+    Class<?> controller = handlerMethod.getBeanType();
     Optional<Api> controllerAnnotation = fromNullable(findAnnotation(controller, Api.class));
     return controllerAnnotation.transform(tagsFromController()).or(Sets.<String>newHashSet());
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterNameReader.java
Patch:
@@ -53,10 +53,10 @@ public class ParameterNameReader implements ParameterBuilderPlugin {
   @Override
   public void apply(ParameterContext context) {
     MethodParameter methodParameter = context.methodParameter();
-    String discoveredName
-        = parameterNameDiscover.getParameterNames(methodParameter.getMethod())[methodParameter.getParameterIndex()];
     String name = findParameterNameFromAnnotations(methodParameter);
     if (isNullOrEmpty(name)) {
+      String[] discoveredNames = parameterNameDiscover.getParameterNames(methodParameter.getMethod());
+      String discoveredName = (discoveredNames == null) ? null : discoveredNames[methodParameter.getParameterIndex()];
       name = isNullOrEmpty(discoveredName)
                        ? format("param%s", methodParameter.getParameterIndex())
                        : discoveredName;

File: springfox-core/src/main/java/springfox/documentation/builders/ResponseMessageBuilder.java
Patch:
@@ -19,13 +19,13 @@
 
 package springfox.documentation.builders;
 
-import springfox.documentation.schema.ModelRef;
+import springfox.documentation.schema.ModelReference;
 import springfox.documentation.service.ResponseMessage;
 
 public class ResponseMessageBuilder {
   private int code;
   private String message;
-  private ModelRef responseModel;
+  private ModelReference responseModel;
 
   /**
    * Updates the http response code
@@ -55,7 +55,7 @@ public ResponseMessageBuilder message(String message) {
    * @param responseModel - model reference
    * @return this
    */
-  public ResponseMessageBuilder responseModel(ModelRef responseModel) {
+  public ResponseMessageBuilder responseModel(ModelReference responseModel) {
     this.responseModel = BuilderDefaults.defaultIfAbsent(responseModel, this.responseModel);
     return this;
   }

File: springfox-core/src/main/java/springfox/documentation/schema/AlternateTypeRules.java
Patch:
@@ -55,4 +55,5 @@ public static AlternateTypeRule newMapRule(Class<?> key, Class<?> value) {
     return new AlternateTypeRule(resolver.resolve(Map.class, key, value),
             resolver.resolve(List.class, resolver.resolve(Entry.class, key, value)));
   }
+
 }

File: springfox-core/src/main/java/springfox/documentation/schema/ModelProperty.java
Patch:
@@ -33,7 +33,7 @@ public class ModelProperty {
   private final Boolean readOnly;
   private final String description;
   private final AllowableValues allowableValues;
-  private ModelRef modelRef;
+  private ModelReference modelRef;
   private final String example;
 
   public ModelProperty(
@@ -92,15 +92,15 @@ public AllowableValues getAllowableValues() {
     return allowableValues;
   }
 
-  public ModelRef getModelRef() {
+  public ModelReference getModelRef() {
     return modelRef;
   }
 
   public boolean isHidden() {
     return isHidden;
   }
 
-  public ModelProperty updateModelRef(Function<? super ResolvedType, ModelRef> modelRefFactory) {
+  public ModelProperty updateModelRef(Function<ResolvedType, ? extends ModelReference> modelRefFactory) {
     modelRef = modelRefFactory.apply(type);
     return this;
   }

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -98,7 +98,7 @@ private Model modelBuilder(ResolvedType propertiesHost,
         .id(typeName)
         .type(propertiesHost)
         .name(typeName)
-        .qualifiedType(ResolvedTypes.simpleQualifiedTypeName(propertiesHost))
+        .qualifiedType(simpleQualifiedTypeName(propertiesHost))
         .properties(properties)
         .description("")
         .baseModel("")
@@ -127,7 +127,7 @@ private Optional<Model> mapModel(ModelContext parentContext, ResolvedType resolv
           .id(typeName)
           .type(resolvedType)
           .name(typeName)
-          .qualifiedType(ResolvedTypes.simpleQualifiedTypeName(resolvedType))
+          .qualifiedType(simpleQualifiedTypeName(resolvedType))
           .properties(new HashMap<String, ModelProperty>())
           .description("")
           .baseModel("")

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Defaults.java
Patch:
@@ -112,6 +112,7 @@ public List<AlternateTypeRule> defaultRules(TypeResolver typeResolver) {
 
     rules.add(newRule(typeResolver.resolve(HttpEntity.class, WildcardType.class),
             typeResolver.resolve(WildcardType.class)));
+//    rules.add(twoDimensionalArrayRule(typeResolver));
     return rules;
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationResponseClassReader.java
Patch:
@@ -21,7 +21,6 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
-import com.google.common.base.Optional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -36,8 +35,8 @@
 import springfox.documentation.spring.web.readers.operation.HandlerMethodResolver;
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
+import static springfox.documentation.schema.ResolvedTypes.modelRefFactory;
 import static springfox.documentation.spi.schema.contexts.ModelContext.*;
-import static springfox.documentation.spring.web.readers.operation.ModelRefs.*;
 import static springfox.documentation.swagger.annotations.Annotations.*;
 
 @Component
@@ -73,8 +72,9 @@ public void apply(OperationContext context) {
 
     String responseTypeName = nameExtractor.typeName(modelContext);
     log.debug("Setting response class to:" + responseTypeName);
+
     context.operationBuilder()
-            .responseModel(modelRef(Optional.of(returnType), modelContext, nameExtractor).orNull());
+            .responseModel(modelRefFactory(modelContext, nameExtractor).apply(returnType));
   }
 
   private boolean canSkip(OperationContext context, ResolvedType returnType) {

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/dto/ContainerDataType.java
Patch:
@@ -34,7 +34,7 @@ public class ContainerDataType implements SwaggerDataType {
 
   public ContainerDataType(String innerType, boolean uniqueItems) {
     Preconditions.checkNotNull(innerType);
-    Preconditions.checkArgument(!innerType.equals("array"), "Nested arrays not supported");
+    Preconditions.checkArgument(!innerType.equalsIgnoreCase("array"), "Nested arrays not supported");
     items = new DataType(innerType);
     this.uniqueItems = uniqueItems ? true : null;
   }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -35,7 +35,7 @@
 import org.mapstruct.Mapper;
 import org.mapstruct.Mapping;
 import org.mapstruct.Mappings;
-import springfox.documentation.schema.ModelRef;
+import springfox.documentation.schema.ModelReference;
 import springfox.documentation.service.ApiDescription;
 import springfox.documentation.service.ApiInfo;
 import springfox.documentation.service.ApiListing;
@@ -125,7 +125,7 @@ protected Map<String, Response> mapResponseMessages(Set<ResponseMessage> from) {
     HashMap<String, Response> responses = newHashMap();
     for (ResponseMessage responseMessage : from) {
       Property responseProperty;
-      ModelRef modelRef = responseMessage.getResponseModel();
+      ModelReference modelRef = responseMessage.getResponseModel();
       responseProperty = modelRefToProperty(modelRef);
       Response response = new Response()
           .description(responseMessage.getMessage())

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Defaults.java
Patch:
@@ -112,6 +112,7 @@ public List<AlternateTypeRule> defaultRules(TypeResolver typeResolver) {
 
     rules.add(newRule(typeResolver.resolve(HttpEntity.class, WildcardType.class),
             typeResolver.resolve(WildcardType.class)));
+    rules.add(twoDimensionalArrayRule(typeResolver));
     return rules;
   }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -24,7 +24,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.HttpStatus;
-import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -43,7 +42,7 @@
 import javax.servlet.http.HttpServletRequest;
 
 import static com.google.common.base.Strings.*;
-import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
+import static org.springframework.http.MediaType.*;
 import static springfox.documentation.swagger2.web.HostNameProvider.*;
 
 @Controller

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -63,7 +63,7 @@ public class Swagger2Controller {
 
   @ApiIgnore
   @RequestMapping(value = "${springfox.documentation.swagger.v2.path:" + DEFAULT_URL + "}",
-          method = RequestMethod.GET)
+          method = RequestMethod.GET,produces={"application/json"})
   public
   @ResponseBody
   ResponseEntity<Json> getDocumentation(

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -42,6 +42,7 @@
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.contexts.SecurityContext;
 import springfox.documentation.spring.web.plugins.Docket;
+import springfox.documentation.swagger.web.ApiKeyVehicle;
 import springfox.documentation.swagger.web.SecurityConfiguration;
 import springfox.documentation.swagger.web.UiConfiguration;
 import springfox.documentation.swagger2.annotations.EnableSwagger2;
@@ -131,6 +132,7 @@ SecurityConfiguration security() {
         "test-app-realm",
         "test-app",
         "apiKey",
+        ApiKeyVehicle.HEADER, //<23>
         "," /*scope separator*/);
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationNicknameIntoUniqueIdReader.java
Patch:
@@ -40,6 +40,7 @@ public void apply(OperationContext context) {
     if (null != methodAnnotation && StringUtils.hasText(methodAnnotation.nickname())) {
       // Populate the value of nickname annotation into uniqueId
       context.operationBuilder().uniqueId(methodAnnotation.nickname());
+      context.operationBuilder().codegenMethodNameStem(methodAnnotation.nickname());
     }
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/SecurityConfiguration.java
Patch:
@@ -71,7 +71,7 @@ public String getClientSecret() {
     return clientSecret;
   }
 
-  @JsonProperty("apiKey")
+  @JsonProperty("scopeSeparator")
   public String scopeSeparator() {
     return scopeSeparator;
   }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -164,7 +164,7 @@ public DocumentationContextBuilder applyDefaultResponseMessages(boolean applyDef
   }
 
   public DocumentationContextBuilder ruleBuilders(List<Function<TypeResolver, AlternateTypeRule>> ruleBuilders) {
-    rules.addAll(from(ruleBuilders)
+    rules.addAll(0, from(ruleBuilders)
         .transform(evaluator(typeResolver))
         .toList());
     return this;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/SecurityConfiguration.java
Patch:
@@ -71,7 +71,7 @@ public String getClientSecret() {
     return clientSecret;
   }
 
-  @JsonProperty("apiKey")
+  @JsonProperty("scopeSeparator")
   public String scopeSeparator() {
     return scopeSeparator;
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.java
Patch:
@@ -80,7 +80,7 @@ public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
       log.info("Context refreshed");
       List<DocumentationPlugin> plugins = pluginOrdering()
           .sortedCopy(documentationPluginsManager.documentationPlugins());
-      log.info("Found {0} custom documentation plugin(s)", plugins.size());
+      log.info("Found {} custom documentation plugin(s)", plugins.size());
       for (DocumentationPlugin each : plugins) {
         DocumentationType documentationType = each.getDocumentationType();
         if (each.isEnabled()) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.java
Patch:
@@ -80,7 +80,7 @@ public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
       log.info("Context refreshed");
       List<DocumentationPlugin> plugins = pluginOrdering()
           .sortedCopy(documentationPluginsManager.documentationPlugins());
-      log.info("Found {0} custom documentation plugin(s)", plugins.size());
+      log.info("Found {} custom documentation plugin(s)", plugins.size());
       for (DocumentationPlugin each : plugins) {
         DocumentationType documentationType = each.getDocumentationType();
         if (each.isEnabled()) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDocumentationScanner.java
Patch:
@@ -72,6 +72,7 @@ public Documentation scan(DocumentationContext context) {
         .apiListingsByResourceGroupName(apiListings)
         .produces(context.getProduces())
         .consumes(context.getConsumes())
+        .host(context.getHost())
         .schemes(context.getProtocols())
         .basePath(context.getPathProvider().getApplicationBasePath())
         .tags(toTags(apiListings));

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -79,6 +79,7 @@ public Multimap<String, ApiListing> scan(ApiListingScanningContext context) {
       DocumentationContext documentationContext = context.getDocumentationContext();
       Set<String> produces = new LinkedHashSet<String>(documentationContext.getProduces());
       Set<String> consumes = new LinkedHashSet<String>(documentationContext.getConsumes());
+      String host = documentationContext.getHost();
       Set<String> protocols = new LinkedHashSet<String>(documentationContext.getProtocols());
       Set<ApiDescription> apiDescriptions = newHashSet();
 
@@ -103,6 +104,7 @@ public Multimap<String, ApiListing> scan(ApiListingScanningContext context) {
               .resourcePath(resourcePath)
               .produces(produces)
               .consumes(consumes)
+              .host(host)
               .protocols(protocols)
               .securityReferences(securityReferences)
               .apis(sortedApis)

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -61,15 +61,15 @@ public abstract class ServiceModelToSwagger2Mapper {
   @Mappings({
       @Mapping(target = "info", source = "resourceListing.info"),
       @Mapping(target = "paths", source = "apiListings"),
-      @Mapping(target = "schemes", source = "from.schemes"),
+      @Mapping(target = "host", source = "host"),
+      @Mapping(target = "schemes", source = "schemes"),
       @Mapping(target = "definitions", source = "apiListings"),
       @Mapping(target = "securityDefinitions", source = "resourceListing"),
       @Mapping(target = "securityRequirement", ignore = true),
       @Mapping(target = "security", ignore = true),
       @Mapping(target = "swagger", ignore = true),
       @Mapping(target = "parameters", ignore = true),
       @Mapping(target = "responses", ignore = true),
-      @Mapping(target = "host", ignore = true),
       @Mapping(target = "externalDocs", ignore = true),
       @Mapping(target = "vendorExtensions", ignore = true)
   })

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDocumentationScanner.java
Patch:
@@ -72,6 +72,7 @@ public Documentation scan(DocumentationContext context) {
         .apiListingsByResourceGroupName(apiListings)
         .produces(context.getProduces())
         .consumes(context.getConsumes())
+        .host(context.getHost())
         .schemes(context.getProtocols())
         .basePath(context.getPathProvider().getApplicationBasePath())
         .tags(toTags(apiListings));

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -79,6 +79,7 @@ public Multimap<String, ApiListing> scan(ApiListingScanningContext context) {
       DocumentationContext documentationContext = context.getDocumentationContext();
       Set<String> produces = new LinkedHashSet<String>(documentationContext.getProduces());
       Set<String> consumes = new LinkedHashSet<String>(documentationContext.getConsumes());
+      String host = documentationContext.getHost();
       Set<String> protocols = new LinkedHashSet<String>(documentationContext.getProtocols());
       Set<ApiDescription> apiDescriptions = newHashSet();
 
@@ -103,6 +104,7 @@ public Multimap<String, ApiListing> scan(ApiListingScanningContext context) {
               .resourcePath(resourcePath)
               .produces(produces)
               .consumes(consumes)
+              .host(host)
               .protocols(protocols)
               .securityReferences(securityReferences)
               .apis(sortedApis)

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -61,15 +61,15 @@ public abstract class ServiceModelToSwagger2Mapper {
   @Mappings({
       @Mapping(target = "info", source = "resourceListing.info"),
       @Mapping(target = "paths", source = "apiListings"),
-      @Mapping(target = "schemes", source = "from.schemes"),
+      @Mapping(target = "host", source = "host"),
+      @Mapping(target = "schemes", source = "schemes"),
       @Mapping(target = "definitions", source = "apiListings"),
       @Mapping(target = "securityDefinitions", source = "resourceListing"),
       @Mapping(target = "securityRequirement", ignore = true),
       @Mapping(target = "security", ignore = true),
       @Mapping(target = "swagger", ignore = true),
       @Mapping(target = "parameters", ignore = true),
       @Mapping(target = "responses", ignore = true),
-      @Mapping(target = "host", ignore = true),
       @Mapping(target = "externalDocs", ignore = true),
       @Mapping(target = "vendorExtensions", ignore = true)
   })

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/Paths.java
Patch:
@@ -88,7 +88,7 @@ public static String firstPathSegment(String path) {
   public static String sanitizeRequestMappingPattern(String requestMappingPattern) {
     String result = requestMappingPattern;
     //remove regex portion '/{businessId:\\w+}'
-    result = result.replaceAll("\\{([^}]*?):.*?\\}", "{$1}");
+    result = result.replaceAll("\\{([^}]+?):[^/]+\\}", "{$1}");
     return result.isEmpty() ? "/" : result;
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java
Patch:
@@ -299,7 +299,7 @@ public Docket genericModelSubstitutes(Class... genericClasses) {
    *
    * @param apply flag to determine if the default response messages are used
    *              true   - the default response messages are added to the global response messages
-   *              false  - the default response messages are added to the global response messages
+   *              false  - the default response messages are not added to the global response messages
    * @return this Docket
    */
   public Docket useDefaultResponseMessages(boolean apply) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java
Patch:
@@ -299,7 +299,7 @@ public Docket genericModelSubstitutes(Class... genericClasses) {
    *
    * @param apply flag to determine if the default response messages are used
    *              true   - the default response messages are added to the global response messages
-   *              false  - the default response messages are added to the global response messages
+   *              false  - the default response messages are not added to the global response messages
    * @return this Docket
    */
   public Docket useDefaultResponseMessages(boolean apply) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/paths/Paths.java
Patch:
@@ -88,7 +88,7 @@ public static String firstPathSegment(String path) {
   public static String sanitizeRequestMappingPattern(String requestMappingPattern) {
     String result = requestMappingPattern;
     //remove regex portion '/{businessId:\\w+}'
-    result = result.replaceAll("\\{([^}]*?):.*?\\}", "{$1}");
+    result = result.replaceAll("\\{([^}]+?):[^/]+\\}", "{$1}");
     return result.isEmpty() ? "/" : result;
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -127,6 +127,9 @@ public static String message(HandlerMethod handlerMethod) {
     String reasonPhrase = HttpStatus.OK.getReasonPhrase();
     if (responseStatus.isPresent()) {
       reasonPhrase = responseStatus.get().reason();
+      if (reasonPhrase.isEmpty()) {
+        reasonPhrase = responseStatus.get().value().getReasonPhrase();
+      }
     }
     return reasonPhrase;
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -127,6 +127,9 @@ public static String message(HandlerMethod handlerMethod) {
     String reasonPhrase = HttpStatus.OK.getReasonPhrase();
     if (responseStatus.isPresent()) {
       reasonPhrase = responseStatus.get().reason();
+      if (reasonPhrase.isEmpty()) {
+        reasonPhrase = responseStatus.get().value().getReasonPhrase();
+      }
     }
     return reasonPhrase;
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationResponseClassReader.java
Patch:
@@ -33,7 +33,6 @@
 import springfox.documentation.spi.schema.contexts.ModelContext;
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
-import springfox.documentation.spring.web.HandlerMethodReturnTypes;
 
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
@@ -52,7 +51,7 @@ public OperationResponseClassReader(TypeResolver typeResolver,
   @Override
   public void apply(OperationContext context) {
     HandlerMethod handlerMethod = context.getHandlerMethod();
-    ResolvedType returnType = HandlerMethodReturnTypes.handlerReturnType(typeResolver, handlerMethod);
+    ResolvedType returnType = new HandlerMethodResolver(typeResolver).methodReturnType(handlerMethod);
     returnType = context.alternateFor(returnType);
     ModelContext modelContext = ModelContext.returnValue(returnType, context.getDocumentationType(),
             context.getAlternateTypeProvider(), context.getDocumentationContext().getGenericsNamingStrategy());

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -39,7 +39,6 @@
 import springfox.documentation.spi.schema.contexts.ModelContext;
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
-import springfox.documentation.spring.web.HandlerMethodReturnTypes;
 
 import java.util.List;
 
@@ -76,7 +75,7 @@ public boolean supports(DocumentationType delimiter) {
 
   private void applyReturnTypeOverride(OperationContext context) {
 
-    ResolvedType returnType = HandlerMethodReturnTypes.handlerReturnType(typeResolver, context.getHandlerMethod());
+    ResolvedType returnType = new HandlerMethodResolver(typeResolver).methodReturnType(context.getHandlerMethod());
     returnType = context.alternateFor(returnType);
     int httpStatusCode = httpStatusCode(context.getHandlerMethod());
     String message = message(context.getHandlerMethod());

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationModelsProvider.java
Patch:
@@ -34,14 +34,14 @@
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.OperationModelsProviderPlugin;
 import springfox.documentation.spi.service.contexts.RequestMappingContext;
+import springfox.documentation.spring.web.readers.operation.HandlerMethodResolver;
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 import java.util.ArrayList;
 import java.util.List;
 
 import static com.google.common.collect.Lists.*;
 import static springfox.documentation.schema.ResolvedTypes.*;
-import static springfox.documentation.spring.web.HandlerMethodReturnTypes.*;
 import static springfox.documentation.swagger.annotations.Annotations.*;
 import static springfox.documentation.swagger.common.SwaggerPluginSupport.*;
 
@@ -70,7 +70,7 @@ public boolean supports(DocumentationType delimiter) {
 
   private void collectFromApiOperation(RequestMappingContext context) {
     HandlerMethod handlerMethod = context.getHandlerMethod();
-    ResolvedType returnType = handlerReturnType(typeResolver, handlerMethod);
+    ResolvedType returnType = new HandlerMethodResolver(typeResolver).methodReturnType(handlerMethod);
     returnType = context.alternateFor(returnType);
     Optional<ResolvedType> returnParameter = findApiOperationAnnotation(handlerMethod.getMethod())
         .transform(resolvedTypeFromOperation(typeResolver, returnType));

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationResponseClassReader.java
Patch:
@@ -33,10 +33,10 @@
 import springfox.documentation.spi.schema.contexts.ModelContext;
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
+import springfox.documentation.spring.web.readers.operation.HandlerMethodResolver;
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 import static springfox.documentation.spi.schema.contexts.ModelContext.*;
-import static springfox.documentation.spring.web.HandlerMethodReturnTypes.*;
 import static springfox.documentation.spring.web.readers.operation.ModelRefs.*;
 import static springfox.documentation.swagger.annotations.Annotations.*;
 
@@ -58,7 +58,7 @@ public SwaggerOperationResponseClassReader(TypeResolver typeResolver,
   public void apply(OperationContext context) {
 
     HandlerMethod handlerMethod = context.getHandlerMethod();
-    ResolvedType returnType = handlerReturnType(typeResolver, handlerMethod);
+    ResolvedType returnType = new HandlerMethodResolver(typeResolver).methodReturnType(handlerMethod);
     returnType = context.alternateFor(returnType);
     returnType = findApiOperationAnnotation(handlerMethod.getMethod())
         .transform(resolvedTypeFromOperation(typeResolver, returnType))

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerResponseMessageReader.java
Patch:
@@ -37,13 +37,13 @@
 import springfox.documentation.spi.schema.contexts.ModelContext;
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
+import springfox.documentation.spring.web.readers.operation.HandlerMethodResolver;
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 import java.util.Set;
 
 import static com.google.common.collect.Sets.*;
 import static springfox.documentation.spi.schema.contexts.ModelContext.*;
-import static springfox.documentation.spring.web.HandlerMethodReturnTypes.*;
 import static springfox.documentation.spring.web.readers.operation.ModelRefs.*;
 import static springfox.documentation.spring.web.readers.operation.ResponseMessagesReader.*;
 import static springfox.documentation.swagger.annotations.Annotations.*;
@@ -76,7 +76,7 @@ public boolean supports(DocumentationType delimiter) {
   }
 
   protected Set<ResponseMessage> read(HandlerMethod handlerMethod, OperationContext context) {
-    ResolvedType defaultResponse = handlerReturnType(typeResolver, handlerMethod);
+    ResolvedType defaultResponse = new HandlerMethodResolver(typeResolver).methodReturnType(handlerMethod);
     Optional<ResolvedType> operationResponse = findApiOperationAnnotation(handlerMethod.getMethod())
         .transform(resolvedTypeFromOperation(typeResolver, defaultResponse));
     Optional<ApiResponses> apiResponses = findApiResponsesAnnotations(handlerMethod.getMethod());

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterDescriptionReader.java
Patch:
@@ -38,11 +38,9 @@ public class ParameterDescriptionReader implements ParameterBuilderPlugin {
   public void apply(ParameterContext context) {
     MethodParameter methodParameter = context.methodParameter();
     ApiParam apiParam = methodParameter.getParameterAnnotation(ApiParam.class);
-    String description = methodParameter.getParameterName();
     if (null != apiParam && hasText(apiParam.value())) {
-      description = apiParam.value();
+      context.parameterBuilder().description(apiParam.value());
     }
-    context.parameterBuilder().description(description);
   }
 
   @Override

File: springfox-schema/src/main/java/springfox/documentation/schema/Types.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.Date;
 import java.util.Map;
 import java.util.Set;
+import java.util.UUID;
 
 import static com.google.common.collect.Sets.*;
 
@@ -62,6 +63,7 @@ private Types() {
           .put(BigDecimal.class, "double")
           .put(BigInteger.class, "long")
           .put(Currency.class, "string")
+          .put(UUID.class, "string")
           .build();
 
   public static String typeNameFor(Type type) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -64,7 +64,7 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
     toReturn.setAccess(source.getParamAccess());
     toReturn.setRequired(source.isRequired());
     if (paramModel.isCollection()) {
-      toReturn.setCollectionFormat("csv");
+      toReturn.setCollectionFormat("multi");
       toReturn.setType("array");
       toReturn.setItems(Properties.property(paramModel.getItemType()));
     } else {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactories.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableMap;
+import io.swagger.models.parameters.AbstractSerializableParameter;
 import io.swagger.models.parameters.CookieParameter;
 import io.swagger.models.parameters.FormParameter;
 import io.swagger.models.parameters.HeaderParameter;
@@ -67,6 +68,8 @@ static Optional<io.swagger.models.parameters.Parameter> create(Parameter source)
       toReturn.setType("array");
       toReturn.setItems(Properties.property(paramModel.getItemType()));
     } else {
+      //TODO: remove this downcast when swagger-core fixes its problem
+      ((AbstractSerializableParameter)toReturn).setDefaultValue(source.getDefaultValue());
       Property property = Properties.property(paramModel.getType());
       toReturn.setType(property.getType());
       toReturn.setFormat(property.getFormat());

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/DefaultTagsProvider.java
Patch:
@@ -30,6 +30,8 @@
 
 import java.util.Set;
 
+import static com.google.common.collect.FluentIterable.*;
+
 @Component
 public class DefaultTagsProvider {
   private final DocumentationPluginsManager pluginsManager;
@@ -44,9 +46,7 @@ public ImmutableSet<String> tags(OperationContext context) {
         = pluginsManager.resourceGroupingStrategy(context.getDocumentationType());
     Set<ResourceGroup> resourceGroups
         = groupingStrategy.getResourceGroups(context.getRequestMappingInfo(), context.getHandlerMethod());
-    FluentIterable<String> tags = FluentIterable
-        .from(resourceGroups)
-        .transform(toTags());
+    FluentIterable<String> tags = from(resourceGroups).transform(toTags());
     return tags.toSet();
   }
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/ResourceGroupingStrategy.java
Patch:
@@ -27,6 +27,7 @@
 
 import java.util.Set;
 
+@Deprecated
 public interface ResourceGroupingStrategy extends Plugin<DocumentationType> {
   /**
    * Gets the resource group for a particular request mapping.

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/SpringGroupingStrategy.java
Patch:
@@ -60,7 +60,7 @@ public boolean supports(DocumentationType delimiter) {
 
   private Set<ResourceGroup> groups(HandlerMethod handlerMethod) {
     Class<?> controllerClazz = handlerMethod.getBeanType();
-    String controllerAsGroup = splitCamelCase(controllerClazz.getSimpleName(), "-");
+    String controllerAsGroup = splitCamelCase(controllerClazz.getSimpleName(), "-").toLowerCase();
     return newHashSet(new ResourceGroup(controllerAsGroup, controllerClazz));
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/ClassOrApiAnnotationResourceGrouping.java
Patch:
@@ -44,6 +44,7 @@
 import static springfox.documentation.spring.web.paths.Paths.*;
 
 @Component
+@Deprecated
 public class ClassOrApiAnnotationResourceGrouping implements ResourceGroupingStrategy {
   private static final Logger LOG = LoggerFactory.getLogger(ClassOrApiAnnotationResourceGrouping.class);
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.java
Patch:
@@ -43,9 +43,8 @@
 
 /**
  * After an application context refresh, builds and executes all DocumentationConfigurer instances found in the
- * application
- * context.
- * <p/>
+ * application context.
+ *
  * If no instances DocumentationConfigurer are found a default one is created and executed.
  */
 @Component

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/annotations/EnableSwagger2.java
Patch:
@@ -28,9 +28,9 @@
 
 /**
  * Indicates that Swagger support should be enabled.
- * <p/>
+ *
  * This should be applied to a Spring java config and should have an accompanying '@Configuration' annotation.
- * <p/>
+ *
  * Loads all required beans defined in @see SpringSwaggerConfig
  *
  * @see springfox.documentation.spring.web.plugins.Docket

File: springfox-core/src/main/java/springfox/documentation/builders/OperationBuilder.java
Patch:
@@ -227,7 +227,7 @@ public OperationBuilder responseModel(ModelRef responseType) {
    * @return
    */
   public OperationBuilder tags(Set<String> tags) {
-    this.tags.addAll(nullToEmptySet(tags));
+    this.tags = nullToEmptySet(tags);
     return this;
   }
   

File: springfox-petstore/src/main/java/springfox/petstore/controller/PetStoreResource.java
Patch:
@@ -48,7 +48,8 @@ static class StoreData extends MapBackedRepository<Long, Order> {
   @ApiOperation(
           value = "Find purchase order by ID",
           notes = "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
-          response = Order.class)
+          response = Order.class,
+          tags = {"Pet Store"})
   @ApiResponses(value = {
           @ApiResponse(code = 400, message = "Invalid ID supplied"),
           @ApiResponse(code = 404, message = "Order not found")})

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingReferenceScanner.java
Patch:
@@ -20,7 +20,6 @@
 package springfox.documentation.spring.web.scanners;
 
 import com.google.common.collect.ArrayListMultimap;
-import com.google.common.collect.FluentIterable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
@@ -41,6 +40,7 @@
 import java.util.List;
 import java.util.Set;
 
+import static com.google.common.collect.FluentIterable.*;
 import static com.google.common.collect.Lists.*;
 import static com.google.common.collect.Multimaps.*;
 
@@ -56,7 +56,7 @@ public ApiListingReferenceScanResult scan(DocumentationContext context) {
     ArrayListMultimap<ResourceGroup, RequestMappingContext> resourceGroupRequestMappings
         = ArrayListMultimap.create();
     ApiSelector selector = context.getApiSelector();
-    Iterable<RequestHandler> matchingHandlers = FluentIterable.from(context.getRequestHandlers())
+    Iterable<RequestHandler> matchingHandlers = from(context.getRequestHandlers())
         .filter(selector.getRequestHandlerSelector());
     for (RequestHandler handler : matchingHandlers) {
       RequestMappingInfo requestMappingInfo = handler.getRequestMapping();

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -117,9 +117,8 @@ public Multimap<String, ApiListing> scan(ApiListingScanningContext context) {
               .description(listingDescription)
               .position(position++);
 
-      ApiListingContext apiListingContext = new ApiListingContext(context.getDocumentationType(), resourceGroup,
-              apiListingBuilder);
-
+      ApiListingContext apiListingContext
+          = new ApiListingContext(context.getDocumentationType(), resourceGroup, apiListingBuilder, resourceGroup);
       apiListingMap.put(resourceGroup.getGroupName(), pluginsManager.apiListing(apiListingContext));
     }
     return apiListingMap;

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -108,7 +108,7 @@ public DocumentationContextBuilder additionalResponseMessages(
   }
   
   public DocumentationContextBuilder additionalOperationParameters(List<Parameter> globalRequestParameters) {
-    this.globalOperationParameters.addAll(globalRequestParameters);
+    this.globalOperationParameters.addAll(nullToEmptyList(globalRequestParameters));
     return this;
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java
Patch:
@@ -185,7 +185,7 @@ public Docket globalResponseMessage(RequestMethod requestMethod,
    * @return this Docket
    */
   public Docket globalOperationParameters(List<Parameter> operationParameters) {
-    this.globalOperationParameters.addAll(operationParameters);
+    this.globalOperationParameters.addAll(nullToEmptyList(operationParameters));
     return this;
   }
 

File: springfox-schema/src/main/java/springfox/documentation/schema/property/BaseModelProperty.java
Patch:
@@ -31,7 +31,7 @@
 public abstract class BaseModelProperty implements ModelProperty {
 
   private final String name;
-  private final AlternateTypeProvider alternateTypeProvider;
+  protected final AlternateTypeProvider alternateTypeProvider;
 
   public BaseModelProperty(String name, AlternateTypeProvider alternateTypeProvider) {
     this.name = name;

File: springfox-schema/src/main/java/springfox/documentation/schema/property/bean/BeanModelProperty.java
Patch:
@@ -28,6 +28,8 @@
 import springfox.documentation.schema.property.BaseModelProperty;
 import springfox.documentation.spi.schema.AlternateTypeProvider;
 
+import static springfox.documentation.schema.property.bean.Accessors.*;
+
 
 public class BeanModelProperty extends BaseModelProperty {
   private static final Logger LOG = LoggerFactory.getLogger(BeanModelProperty.class);
@@ -65,11 +67,9 @@ private static ResolvedType adjustedToClassmateBug(TypeResolver typeResolver, Re
   }
 
   public static ResolvedType paramOrReturnType(TypeResolver typeResolver, ResolvedMethod input) {
-    if (Accessors.isGetter(input.getRawMember())) {
+    if (maybeAGetter(input.getRawMember())) {
       LOG.debug("Evaluating unwrapped getter for member {}", input.getRawMember().getName());
-//      if (!givenContext.hasSeenBefore(input.getReturnType())) {
       return adjustedToClassmateBug(typeResolver, input.getReturnType());
-//      }
     } else {
       LOG.debug("Evaluating unwrapped setter for member {}", input.getRawMember().getName());
       return adjustedToClassmateBug(typeResolver, input.getArgumentType(0));

File: springfox-schema/src/main/java/springfox/documentation/schema/property/OptimizedModelPropertiesProvider.java
Patch:
@@ -155,8 +155,9 @@ private Function<ResolvedField, List<ModelProperty>> propertyFromField(final Mod
     return new Function<ResolvedField, List<ModelProperty>>() {
       @Override
       public List<ModelProperty> apply(ResolvedField input) {
-        if (any(input.getAnnotations(), ofType(JsonUnwrapped.class))) {
-          propertiesFor(input.getType(), ModelContext.fromParent(givenContext, input.getType()));
+        List<Annotation> annotations = newArrayList(input.getRawMember().getAnnotations());
+        if (any(annotations, ofType(JsonUnwrapped.class))) {
+          return propertiesFor(input.getType(), ModelContext.fromParent(givenContext, input.getType()));
         }
         return newArrayList(fieldModelProperty(input, jacksonProperty, givenContext));
       }

File: springfox-schema/src/main/java/springfox/documentation/schema/property/BaseModelProperty.java
Patch:
@@ -31,7 +31,7 @@
 public abstract class BaseModelProperty implements ModelProperty {
 
   private final String name;
-  private final AlternateTypeProvider alternateTypeProvider;
+  protected final AlternateTypeProvider alternateTypeProvider;
 
   public BaseModelProperty(String name, AlternateTypeProvider alternateTypeProvider) {
     this.name = name;

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -31,6 +31,7 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
+import springfox.documentation.annotations.Cacheable;
 import springfox.documentation.schema.plugins.SchemaPluginsManager;
 import springfox.documentation.schema.property.ModelPropertiesProvider;
 import springfox.documentation.spi.schema.contexts.ModelContext;
@@ -75,7 +76,7 @@ public DefaultModelProvider(TypeResolver resolver,
   }
 
   @Override
-  @springfox.documentation.annotations.Cacheable(value = "models", keyGenerator = ModelContextKeyGenerator.class)
+  @Cacheable(value = "models", keyGenerator = ModelContextKeyGenerator.class)
   public com.google.common.base.Optional<Model> modelFor(ModelContext modelContext) {
     ResolvedType propertiesHost = modelContext.alternateFor(modelContext.resolvedType(resolver));
     if (isContainerType(propertiesHost)

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -30,7 +30,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.cache.annotation.Cacheable;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.plugins.SchemaPluginsManager;
 import springfox.documentation.schema.property.ModelPropertiesProvider;
@@ -76,7 +75,7 @@ public DefaultModelProvider(TypeResolver resolver,
   }
 
   @Override
-  @Cacheable(value = "models", key = ModelCacheKeys.MODEL_CONTEXT_SPEL)
+  @springfox.documentation.annotations.Cacheable(value = "models", keyGenerator = ModelContextKeyGenerator.class)
   public com.google.common.base.Optional<Model> modelFor(ModelContext modelContext) {
     ResolvedType propertiesHost = modelContext.alternateFor(modelContext.resolvedType(resolver));
     if (isContainerType(propertiesHost)

File: springfox-schema/src/main/java/springfox/documentation/schema/property/ModelPropertiesKeyGenerator.java
Patch:
@@ -24,15 +24,13 @@
 import com.google.common.collect.FluentIterable;
 import org.slf4j.Logger;
 import org.springframework.cache.interceptor.KeyGenerator;
-import org.springframework.stereotype.Component;
 import springfox.documentation.spi.schema.contexts.ModelContext;
 
 import java.lang.reflect.Method;
 
 import static com.google.common.collect.Lists.*;
-import static org.slf4j.LoggerFactory.getLogger;
+import static org.slf4j.LoggerFactory.*;
 
-@Component
 public class ModelPropertiesKeyGenerator implements KeyGenerator {
   private static final Logger LOG = getLogger(ModelPropertiesKeyGenerator.class);
 

File: springfox-schema/src/main/java/springfox/documentation/schema/property/OptimizedModelPropertiesProvider.java
Patch:
@@ -40,12 +40,11 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.cache.annotation.Cacheable;
 import org.springframework.context.annotation.Primary;
 import org.springframework.stereotype.Component;
+import springfox.documentation.annotations.Cacheable;
 import springfox.documentation.builders.ModelPropertyBuilder;
 import springfox.documentation.schema.Annotations;
-import springfox.documentation.schema.ModelCacheKeys;
 import springfox.documentation.schema.ModelProperty;
 import springfox.documentation.schema.TypeNameExtractor;
 import springfox.documentation.schema.configuration.ObjectMapperConfigured;
@@ -107,7 +106,7 @@ public void onApplicationEvent(ObjectMapperConfigured event) {
 
 
   @Override
-  @Cacheable(value = "modelProperties", key = ModelCacheKeys.MODEL_PROPERTIES_SPEL)
+  @Cacheable(value = "modelProperties", keyGenerator = ModelPropertiesKeyGenerator.class)
   public List<ModelProperty> propertiesFor(ResolvedType type, ModelContext givenContext) {
     List<ModelProperty> properties = newArrayList();
     BeanDescription beanDescription = beanDescription(type, givenContext);

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/configuration/Swagger1DocumentationConfiguration.java
Patch:
@@ -23,12 +23,12 @@
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
-import springfox.documentation.spring.web.SpringMvcDocumentationConfiguration;
+import springfox.documentation.spring.web.SpringfoxWebMvcConfiguration;
 import springfox.documentation.spring.web.json.JacksonModuleRegistrar;
 import springfox.documentation.swagger.configuration.SwaggerCommonConfiguration;
 
 @Configuration
-@Import({ SpringMvcDocumentationConfiguration.class, SwaggerCommonConfiguration.class })
+@Import({ SpringfoxWebMvcConfiguration.class, SwaggerCommonConfiguration.class })
 @ComponentScan(basePackages = {
     "springfox.documentation.swagger1.readers.parameter",
     "springfox.documentation.swagger1.web",

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/annotations/EnableSwagger2.java
Patch:
@@ -38,6 +38,6 @@
 @Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
 @Target(value = { java.lang.annotation.ElementType.TYPE })
 @Documented
-@Import(Swagger2DocumentationConfiguration.class)
+@Import({Swagger2DocumentationConfiguration.class})
 public @interface EnableSwagger2 {
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/configuration/Swagger2DocumentationConfiguration.java
Patch:
@@ -23,12 +23,12 @@
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
-import springfox.documentation.spring.web.SpringMvcDocumentationConfiguration;
+import springfox.documentation.spring.web.SpringfoxWebMvcConfiguration;
 import springfox.documentation.spring.web.json.JacksonModuleRegistrar;
 import springfox.documentation.swagger.configuration.SwaggerCommonConfiguration;
 
 @Configuration
-@Import({ SpringMvcDocumentationConfiguration.class, SwaggerCommonConfiguration.class })
+@Import({ SpringfoxWebMvcConfiguration.class, SwaggerCommonConfiguration.class })
 @ComponentScan(basePackages = {
     "springfox.documentation.swagger2.readers.parameter",
     "springfox.documentation.swagger2.web",

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -51,6 +51,7 @@
 import static com.google.common.collect.FluentIterable.*;
 import static com.google.common.collect.Lists.*;
 import static com.google.common.collect.Maps.*;
+import static springfox.documentation.builders.BuilderDefaults.*;
 import static springfox.documentation.swagger2.mappers.ModelMapper.*;
 
 @Mapper(uses = { ModelMapper.class, ParameterMapper.class, SecurityMapper.class, LicenseMapper.class,
@@ -117,7 +118,6 @@ protected List<Map<String, List<String>>> mapAuthorizations(
   }
 
 
-
   protected Map<String, Response> mapResponseMessages(Set<ResponseMessage> from) {
     HashMap<String, Response> responses = newHashMap();
     for (ResponseMessage responseMessage : from) {
@@ -155,7 +155,7 @@ public String apply(AuthorizationScope input) {
 
   private Path mapOperations(ApiDescription api, Optional<Path> existingPath) {
     Path path = existingPath.or(new Path());
-    for (springfox.documentation.service.Operation each : api.getOperations()) {
+    for (springfox.documentation.service.Operation each : nullToEmptyList(api.getOperations())) {
       Operation operation = mapOperation(each);
       path.set(each.getMethod().toString().toLowerCase(), operation);
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/OperationsKeyGenerator.java
Patch:
@@ -44,7 +44,8 @@ public Object generate(Object target, Method method, Object... params) {
     Optional<RequestMappingContext> context = FluentIterable.from(newArrayList(params))
         .filter(RequestMappingContext.class).first();
     if (context.isPresent()) {
-      String key = String.format("%s.%s.%s", context.get().getRequestMappingPattern(),
+      String key = String.format("%s.%s.%s.%s", context.get().getRequestMappingPattern(),
+          context.get().getHandlerMethod().getMethod().getDeclaringClass().getName(),
           context.get().getHandlerMethod().getMethod().getName(),
           context.get().getDocumentationContext().getGenericsNamingStrategy().getClass().getSimpleName());
       LOG.info("Cache key generated: {}", key);

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/configuration/Swagger1DocumentationConfiguration.java
Patch:
@@ -23,12 +23,12 @@
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
-import springfox.documentation.spring.web.SpringMvcDocumentationConfiguration;
+import springfox.documentation.spring.web.SpringfoxWebMvcConfiguration;
 import springfox.documentation.spring.web.json.JacksonModuleRegistrar;
 import springfox.documentation.swagger.configuration.SwaggerCommonConfiguration;
 
 @Configuration
-@Import({ SpringMvcDocumentationConfiguration.class, SwaggerCommonConfiguration.class })
+@Import({ SpringfoxWebMvcConfiguration.class, SwaggerCommonConfiguration.class })
 @ComponentScan(basePackages = {
     "springfox.documentation.swagger1.readers.parameter",
     "springfox.documentation.swagger1.web",

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/configuration/Swagger2DocumentationConfiguration.java
Patch:
@@ -23,12 +23,12 @@
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
-import springfox.documentation.spring.web.SpringMvcDocumentationConfiguration;
+import springfox.documentation.spring.web.SpringfoxWebMvcConfiguration;
 import springfox.documentation.spring.web.json.JacksonModuleRegistrar;
 import springfox.documentation.swagger.configuration.SwaggerCommonConfiguration;
 
 @Configuration
-@Import({ SpringMvcDocumentationConfiguration.class, SwaggerCommonConfiguration.class })
+@Import({ SpringfoxWebMvcConfiguration.class, SwaggerCommonConfiguration.class })
 @ComponentScan(basePackages = {
     "springfox.documentation.swagger2.readers.parameter",
     "springfox.documentation.swagger2.web",

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -51,6 +51,7 @@
 import static com.google.common.collect.FluentIterable.*;
 import static com.google.common.collect.Lists.*;
 import static com.google.common.collect.Maps.*;
+import static springfox.documentation.builders.BuilderDefaults.*;
 import static springfox.documentation.swagger2.mappers.ModelMapper.*;
 
 @Mapper(uses = { ModelMapper.class, ParameterMapper.class, SecurityMapper.class, LicenseMapper.class,
@@ -117,7 +118,6 @@ protected List<Map<String, List<String>>> mapAuthorizations(
   }
 
 
-
   protected Map<String, Response> mapResponseMessages(Set<ResponseMessage> from) {
     HashMap<String, Response> responses = newHashMap();
     for (ResponseMessage responseMessage : from) {
@@ -155,7 +155,7 @@ public String apply(AuthorizationScope input) {
 
   private Path mapOperations(ApiDescription api, Optional<Path> existingPath) {
     Path path = existingPath.or(new Path());
-    for (springfox.documentation.service.Operation each : api.getOperations()) {
+    for (springfox.documentation.service.Operation each : nullToEmptyList(api.getOperations())) {
       Operation operation = mapOperation(each);
       path.set(each.getMethod().toString().toLowerCase(), operation);
     }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java
Patch:
@@ -49,14 +49,12 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.atomic.AtomicBoolean;
 
 import static com.google.common.collect.FluentIterable.*;
 import static com.google.common.collect.Lists.*;
 import static com.google.common.collect.Maps.*;
 import static com.google.common.collect.Sets.*;
-import static org.springframework.util.StringUtils.*;
-import static springfox.documentation.builders.BuilderDefaults.defaultIfAbsent;
+import static springfox.documentation.builders.BuilderDefaults.*;
 
 /**
  * A builder which is intended to be the primary interface into the swagger-springmvc framework.

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/UiConfiguration.java
Patch:
@@ -18,6 +18,8 @@
  */
 package springfox.documentation.swagger.web;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
+
 public class UiConfiguration {
   public static final UiConfiguration DEFAULT = new UiConfiguration(null);
   private String validatorUrl;
@@ -26,6 +28,7 @@ public UiConfiguration(String validatorUrl) {
     this.validatorUrl = validatorUrl;
   }
 
+  @JsonProperty("validatorUrl")
   public String getValidatorUrl() {
     return validatorUrl;
   }

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -30,6 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.cache.annotation.Cacheable;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.plugins.SchemaPluginsManager;
 import springfox.documentation.schema.property.ModelPropertiesProvider;
@@ -75,6 +76,7 @@ public DefaultModelProvider(TypeResolver resolver,
   }
 
   @Override
+  @Cacheable(value = "models", key = ModelCacheKeys.MODEL_CONTEXT_SPEL)
   public com.google.common.base.Optional<Model> modelFor(ModelContext modelContext) {
     ResolvedType propertiesHost = modelContext.alternateFor(modelContext.resolvedType(resolver));
     if (isContainerType(propertiesHost)

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelDependencyProvider.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.cache.annotation.Cacheable;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.property.ModelPropertiesProvider;
 import springfox.documentation.spi.schema.contexts.ModelContext;
@@ -56,6 +57,7 @@ public ModelDependencyProvider(TypeResolver typeResolver,
     this.nameExtractor = nameExtractor;
   }
 
+  @Cacheable(value = "modelDependencies", key = ModelCacheKeys.MODEL_CONTEXT_SPEL)
   public Set<ResolvedType> dependentModels(ModelContext modelContext) {
     return
             from(resolvedDependencies(modelContext))

File: springfox-schema/src/main/java/springfox/documentation/schema/property/bean/BeanModelPropertyProvider.java
Patch:
@@ -128,8 +128,8 @@ List<ModelProperty> candidateProperties(AnnotatedMember member,
         return propertiesFor(childProperty.getReturnType(), fromParent(givenContext, childProperty.getReturnType()));
       } else {
         LOG.debug("Evaluating unwrapped setter for member {}", ((AnnotatedMethod) member).getMember().getName());
-        return propertiesFor(childProperty.getArgumentType(0),
-            fromParent(givenContext, childProperty.getArgumentType(0)));
+        return propertiesFor(childProperty.getArgumentType(0), fromParent(givenContext, childProperty.getArgumentType(0))
+        );
       }
     } else {
       LOG.debug("Evaluating property of {}", childProperty);

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelContext.java
Patch:
@@ -202,12 +202,13 @@ public boolean equals(Object o) {
 
     return Objects.equal(type, that.type) &&
         Objects.equal(documentationType, that.documentationType) &&
-        Objects.equal(returnType, that.returnType);
+        Objects.equal(returnType, that.returnType) &&
+        Objects.equal(genericNamingStrategy.getClass().getName(), that.genericNamingStrategy.getClass().getName());
 
   }
 
   @Override
   public int hashCode() {
-    return Objects.hashCode(type, documentationType, returnType);
+    return Objects.hashCode(type, documentationType, returnType, genericNamingStrategy.getClass().getName());
   }
 }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -24,8 +24,8 @@
 import com.google.common.base.Optional;
 import com.google.common.collect.Ordering;
 import org.springframework.web.bind.annotation.RequestMethod;
-import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
 import springfox.documentation.PathProvider;
+import springfox.documentation.RequestHandler;
 import springfox.documentation.schema.AlternateTypeRule;
 import springfox.documentation.service.ApiDescription;
 import springfox.documentation.service.ApiInfo;
@@ -50,7 +50,7 @@
 public class DocumentationContextBuilder {
 
   private TypeResolver typeResolver;
-  private List<RequestMappingHandlerMapping> handlerMappings;
+  private List<RequestHandler> handlerMappings;
   private ApiInfo apiInfo;
   private String groupName;
   private ResourceGroupingStrategy resourceGroupingStrategy;
@@ -78,7 +78,7 @@ public DocumentationContextBuilder(DocumentationType documentationType) {
     this.documentationType = documentationType;
   }
 
-  public DocumentationContextBuilder handlerMappings(List<RequestMappingHandlerMapping> handlerMappings) {
+  public DocumentationContextBuilder requestHandlers(List<RequestHandler> handlerMappings) {
     this.handlerMappings = handlerMappings;
     return this;
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -107,6 +107,7 @@ public Operation operation(OperationContext operationContext) {
     return operationContext.operationBuilder().build();
   }
 
+
   public ApiListing apiListing(ApiListingContext context) {
     for (ApiListingBuilderPlugin each : apiListingPlugins.getPluginsFor(context.getDocumentationType())) {
       each.apply(context);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/DefaultOperationReader.java
Patch:
@@ -33,8 +33,8 @@ public class DefaultOperationReader implements OperationBuilderPlugin {
   public void apply(OperationContext context) {
     String operationName = context.getHandlerMethod().getMethod().getName();
     context.operationBuilder()
+            .uniqueId(operationName)
             .method(context.httpMethod())
-            .uniqueId(String.format("%sUsing%s", operationName, context.httpMethod()))
             .position(context.operationIndex())
             .summary(operationName);
   }

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/PetService.java
Patch:
@@ -60,7 +60,7 @@ public Pet getPetById(
   }
 
   @RequestMapping(method = RequestMethod.POST)
-  @ApiOperation(value = "Add a new pet to the store")
+  @ApiOperation(value = "Add a new pet to the store", notes = "Add a new pet to the store")
   @ApiResponses(value = { @ApiResponse(code = 405, message = "Invalid input") })
   public void addPet(
       @ApiParam(value = "Pet object that needs to be added to the store", required = true) Pet pet) {
@@ -78,7 +78,7 @@ public void updatePet(
   }
 
   @RequestMapping(value = "/findByStatus", method = RequestMethod.GET, params = {"status"})
-  @ApiOperation(value = "Finds Pets by status",
+  @ApiOperation(value = "Find Pet by status",
       notes = "Multiple status values can be provided with comma seperated strings",
       response = Pet.class)
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid status value") })
@@ -90,7 +90,7 @@ public Pet findPetsByStatus(
   }
 
   @RequestMapping(value = "/findByTags", method = RequestMethod.GET)
-  @ApiOperation(value = "Finds Pets by tags",
+  @ApiOperation(value = "Find Pet by tags",
       notes = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
       response = Pet.class)
   @ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid tag value") })

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelCacheKeys.java
Patch:
@@ -39,7 +39,7 @@ public static String modelContextKey(ModelContext givenContext) {
   public static final String MODEL_PROPERTIES_SPEL
       = "T(springfox.documentation.schema.ModelCacheKeys).modelPropertiesKey(#type, #givenContext)";
   public static String modelPropertiesKey(ResolvedType type, ModelContext givenContext) {
-    return new ModelPropertiesKeyGenerator(new TypeResolver())
+    return new ModelPropertiesKeyGenerator()
         .generate(OptimizedModelPropertiesProvider.class, null, type, givenContext).toString();
   }
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingReferenceScanner.java
Patch:
@@ -54,8 +54,8 @@ public ApiListingReferenceScanResult scan(DocumentationContext context) {
     ArrayListMultimap<ResourceGroup, RequestMappingContext> resourceGroupRequestMappings
         = ArrayListMultimap.create();
     ApiSelector selector = context.getApiSelector();
-    Iterable<RequestHandler> matchingHandlers = FluentIterable.from(context.getRequestHandlers()).filter(selector
-        .getRequestHandlerSelector());
+    Iterable<RequestHandler> matchingHandlers = FluentIterable.from(context.getRequestHandlers())
+        .filter(selector.getRequestHandlerSelector());
     for (RequestHandler handler : matchingHandlers) {
       RequestMappingInfo requestMappingInfo = handler.getRequestMapping();
       HandlerMethod handlerMethod = handler.getHandlerMethod();

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -30,6 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.cache.annotation.Cacheable;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.plugins.SchemaPluginsManager;
 import springfox.documentation.schema.property.ModelPropertiesProvider;
@@ -75,6 +76,7 @@ public DefaultModelProvider(TypeResolver resolver,
   }
 
   @Override
+  @Cacheable(value = "models", keyGenerator = "modelContextKeyGenerator")
   public com.google.common.base.Optional<Model> modelFor(ModelContext modelContext) {
     ResolvedType propertiesHost = modelContext.alternateFor(modelContext.resolvedType(resolver));
     if (isContainerType(propertiesHost)

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelDependencyProvider.java
Patch:
@@ -26,6 +26,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.cache.annotation.Cacheable;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.property.ModelPropertiesProvider;
 import springfox.documentation.spi.schema.contexts.ModelContext;
@@ -56,6 +57,7 @@ public ModelDependencyProvider(TypeResolver typeResolver,
     this.nameExtractor = nameExtractor;
   }
 
+  @Cacheable(value = "modelDependencies", key = "#modelContext.hashCode()")
   public Set<ResolvedType> dependentModels(ModelContext modelContext) {
     return
             from(resolvedDependencies(modelContext))

File: springfox-schema/src/main/java/springfox/documentation/schema/property/OptimizedModelPropertiesProvider.java
Patch:
@@ -40,6 +40,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.cache.annotation.Cacheable;
 import org.springframework.context.annotation.Primary;
 import org.springframework.stereotype.Component;
 import springfox.documentation.builders.ModelPropertyBuilder;
@@ -67,7 +68,7 @@
 import static springfox.documentation.schema.ResolvedTypes.*;
 import static springfox.documentation.schema.property.BeanPropertyDefinitions.*;
 import static springfox.documentation.schema.property.bean.Accessors.*;
-import static springfox.documentation.schema.property.bean.BeanModelProperty.paramOrReturnType;
+import static springfox.documentation.schema.property.bean.BeanModelProperty.*;
 import static springfox.documentation.spi.schema.contexts.ModelContext.*;
 
 @Primary
@@ -104,6 +105,7 @@ public void onApplicationEvent(ObjectMapperConfigured event) {
   }
 
   @Override
+  @Cacheable(value = "modelProperties", keyGenerator = "modelPropertiesKeyGenerator")
   public List<ModelProperty> propertiesFor(ResolvedType type, ModelContext givenContext) {
     List<ModelProperty> properties = newArrayList();
     BeanDescription beanDescription = beanDescription(type, givenContext);

File: springfox-schema/src/main/java/springfox/documentation/schema/property/bean/BeanModelPropertyProvider.java
Patch:
@@ -128,8 +128,8 @@ List<ModelProperty> candidateProperties(AnnotatedMember member,
         return propertiesFor(childProperty.getReturnType(), fromParent(givenContext, childProperty.getReturnType()));
       } else {
         LOG.debug("Evaluating unwrapped setter for member {}", ((AnnotatedMethod) member).getMember().getName());
-        return propertiesFor(childProperty.getArgumentType(0),
-            fromParent(givenContext, childProperty.getArgumentType(0)));
+        return propertiesFor(childProperty.getArgumentType(0), fromParent(givenContext, childProperty.getArgumentType(0))
+        );
       }
     } else {
       LOG.debug("Evaluating property of {}", childProperty);

File: springfox-spi/src/main/java/springfox/documentation/spi/schema/contexts/ModelContext.java
Patch:
@@ -202,12 +202,13 @@ public boolean equals(Object o) {
 
     return Objects.equal(type, that.type) &&
         Objects.equal(documentationType, that.documentationType) &&
-        Objects.equal(returnType, that.returnType);
+        Objects.equal(returnType, that.returnType) &&
+        Objects.equal(genericNamingStrategy.getClass().getName(), that.genericNamingStrategy.getClass().getName());
 
   }
 
   @Override
   public int hashCode() {
-    return Objects.hashCode(type, documentationType, returnType);
+    return Objects.hashCode(type, documentationType, returnType, genericNamingStrategy.getClass().getName());
   }
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/DocumentationPluginsManager.java
Patch:
@@ -107,6 +107,7 @@ public Operation operation(OperationContext operationContext) {
     return operationContext.operationBuilder().build();
   }
 
+
   public ApiListing apiListing(ApiListingContext context) {
     for (ApiListingBuilderPlugin each : apiListingPlugins.getPluginsFor(context.getDocumentationType())) {
       each.apply(context);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/DefaultOperationReader.java
Patch:
@@ -33,8 +33,8 @@ public class DefaultOperationReader implements OperationBuilderPlugin {
   public void apply(OperationContext context) {
     String operationName = context.getHandlerMethod().getMethod().getName();
     context.operationBuilder()
+            .uniqueId(operationName)
             .method(context.httpMethod())
-            .uniqueId(String.format("%sUsing%s", operationName, context.httpMethod()))
             .position(context.operationIndex())
             .summary(operationName);
   }

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/FeatureDemonstrationService.java
Patch:
@@ -55,7 +55,7 @@ public class FeatureDemonstrationService {
 
   //Uses alternate listing path
   @RequestMapping(value = "/{petId}", method = RequestMethod.GET)
-  @ApiOperation(value = "Find pet by ID", notes = "Returns a pet when ID < 10. "
+  @ApiOperation(value = "findPetById", notes = "Returns a pet when ID < 10. "
           + "ID > 10 or nonintegers will simulate API error conditions",
           response = Pet.class,
           extensions = {

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/FeatureDemonstrationService.java
Patch:
@@ -22,6 +22,8 @@
 import io.swagger.annotations.Api;
 import io.swagger.annotations.ApiOperation;
 import io.swagger.annotations.ApiParam;
+import io.swagger.annotations.Extension;
+import io.swagger.annotations.ExtensionProperty;
 import org.joda.time.LocalDate;
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpStatus;
@@ -43,8 +45,6 @@
 import java.util.Map;
 
 import static com.google.common.collect.Lists.*;
-import io.swagger.annotations.Extension;
-import io.swagger.annotations.ExtensionProperty;
 
 @Controller
 @RequestMapping("/features")
@@ -55,7 +55,7 @@ public class FeatureDemonstrationService {
   @RequestMapping(value = "/{petId}", method = RequestMethod.GET)
   @ApiOperation(value = "Find pet by ID", notes = "Returns a pet when ID < 10. "
           + "ID > 10 or nonintegers will simulate API error conditions",
-          response = Pet.class, 
+          response = Pet.class,
           extensions = {
             @Extension(properties = @ExtensionProperty(name="x-test1", value="value1")),
             @Extension(name="test2", properties = @ExtensionProperty(name="name2", value="value2"))

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/common/SwaggerPluginSupport.java
Patch:
@@ -29,6 +29,7 @@ private SwaggerPluginSupport() {
 
   public final static int SWAGGER_PLUGIN_ORDER = Ordered.HIGHEST_PRECEDENCE + 1000;
   public static boolean pluginDoesApply(DocumentationType documentationType) {
-    return DocumentationType.SWAGGER_12.equals(documentationType) || DocumentationType.SWAGGER_2.equals(documentationType);
+    return DocumentationType.SWAGGER_12.equals(documentationType)
+        || DocumentationType.SWAGGER_2.equals(documentationType);
   }
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -86,7 +86,7 @@ public abstract class ServiceModelToSwagger2Mapper {
       @Mapping(target = "schemes", source = "protocol"),
       @Mapping(target = "security", source = "securityReferences"),
       @Mapping(target = "responses", source = "responseMessages"),
-      @Mapping(target = "vendorExtensions", ignore = true),
+      @Mapping(target = "vendorExtensions", source = "vendorExtensions"),
       @Mapping(target = "externalDocs", ignore = true)
   })
   protected abstract Operation mapOperation(springfox.documentation.service.Operation from);

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/PetService.java
Patch:
@@ -77,7 +77,7 @@ public void updatePet(
     throw new RuntimeException("NotImplementedException");
   }
 
-  @RequestMapping(value = "/findByStatus", method = RequestMethod.GET)
+  @RequestMapping(value = "/findByStatus", method = RequestMethod.GET, params = {"status"})
   @ApiOperation(value = "Finds Pets by status",
       notes = "Multiple status values can be provided with comma seperated strings",
       response = Pet.class)

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationResponseClassReader.java
Patch:
@@ -61,9 +61,7 @@ public void apply(OperationContext context) {
             context.getAlternateTypeProvider(), context.getDocumentationContext().getGenericsNamingStrategy());
     String responseTypeName = nameExtractor.typeName(modelContext);
     log.debug("Setting spring response class to:" + responseTypeName);
-    context.operationBuilder()
-            .responseModel(modelRef(returnType, modelContext))
-    ;
+    context.operationBuilder().responseModel(modelRef(returnType, modelContext));
   }
 
   private ModelRef modelRef(ResolvedType type, ModelContext modelContext) {

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -112,7 +112,7 @@ private ModelRef modelRef(ResolvedType type, ModelContext modelContext) {
   }
 
 
-  private int httpStatusCode(HandlerMethod handlerMethod) {
+  public static int httpStatusCode(HandlerMethod handlerMethod) {
     Optional<ResponseStatus> responseStatus
             = fromNullable(getAnnotation(handlerMethod.getMethod(), ResponseStatus.class));
     int httpStatusCode = HttpStatus.OK.value();
@@ -122,7 +122,7 @@ private int httpStatusCode(HandlerMethod handlerMethod) {
     return httpStatusCode;
   }
 
-  private String message(HandlerMethod handlerMethod) {
+  public static String message(HandlerMethod handlerMethod) {
     Optional<ResponseStatus> responseStatus
             = fromNullable(getAnnotation(handlerMethod.getMethod(), ResponseStatus.class));
     String reasonPhrase = HttpStatus.OK.getReasonPhrase();

File: springfox-schema/src/main/java/springfox/documentation/schema/DefaultModelProvider.java
Patch:
@@ -30,7 +30,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.plugins.SchemaPluginsManager;
 import springfox.documentation.schema.property.ModelPropertiesProvider;
@@ -64,7 +63,7 @@ public class DefaultModelProvider implements ModelProvider {
 
   @Autowired
   public DefaultModelProvider(TypeResolver resolver,
-                              @Qualifier("default") ModelPropertiesProvider propertiesProvider,
+                              ModelPropertiesProvider propertiesProvider,
                               ModelDependencyProvider dependencyProvider,
                               SchemaPluginsManager schemaPluginsManager,
                               TypeNameExtractor typeNameExtractor) {

File: springfox-schema/src/main/java/springfox/documentation/schema/ModelDependencyProvider.java
Patch:
@@ -26,7 +26,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.property.ModelPropertiesProvider;
 import springfox.documentation.spi.schema.contexts.ModelContext;
@@ -50,7 +49,7 @@ public class ModelDependencyProvider {
 
   @Autowired
   public ModelDependencyProvider(TypeResolver typeResolver,
-                                 @Qualifier("default") ModelPropertiesProvider propertiesProvider,
+                                 ModelPropertiesProvider propertiesProvider,
                                  TypeNameExtractor nameExtractor) {
     this.typeResolver = typeResolver;
     this.propertiesProvider = propertiesProvider;

File: springfox-schema/src/main/java/springfox/documentation/schema/property/bean/Accessors.java
Patch:
@@ -30,7 +30,7 @@
 
 import static com.google.common.base.Strings.*;
 
-class Accessors {
+public class Accessors {
   private static Pattern getter = Pattern.compile("^get([a-zA-Z_0-9].*)");
   private static Pattern isGetter = Pattern.compile("^is([a-zA-Z_0_9].*)");
   private static Pattern setter = Pattern.compile("^set([a-zA-Z_0-9].*)");

File: springfox-schema/src/main/java/springfox/documentation/schema/property/field/FieldProvider.java
Patch:
@@ -38,7 +38,7 @@ public FieldProvider(TypeResolver typeResolver) {
     this.typeResolver = typeResolver;
   }
 
-  public Iterable<? extends ResolvedField> in(ResolvedType resolvedType) {
+  public Iterable<ResolvedField> in(ResolvedType resolvedType) {
     MemberResolver memberResolver = new MemberResolver(typeResolver);
     if (resolvedType.getErasedType() == Object.class) {
       return newArrayList();

File: springfox-schema/src/test/java/springfox/documentation/schema/UnwrappedType.java
Patch:
@@ -30,6 +30,7 @@ public Category getCategory() {
     return category;
   }
 
+  @JsonUnwrapped
   public void setCategory(Category category) {
     this.category = category;
   }

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/Example.java
Patch:
@@ -19,6 +19,7 @@
 
 package springfox.documentation.spring.web.dummy.models;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
 import io.swagger.annotations.ApiModelProperty;
 import io.swagger.annotations.ApiParam;
 import org.joda.time.LocalDateTime;
@@ -42,6 +43,7 @@ public class Example extends Parent implements Serializable {
 
   private NestedType nestedType;
 
+  @JsonProperty("propertyWithNoGetterMethod")
   private String propertyWithNoGetterMethod;
   private String propertyWithNoSetterMethod;
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/DefaultOperationReader.java
Patch:
@@ -35,7 +35,6 @@ public void apply(OperationContext context) {
     context.operationBuilder()
             .method(context.httpMethod())
             .uniqueId(String.format("%sUsing%s", operationName, context.httpMethod()))
-            .notes(operationName)
             .position(context.operationIndex())
             .summary(operationName);
   }

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/dto/Operation.java
Patch:
@@ -44,6 +44,7 @@
 public class Operation {
   private String method;
   private String summary;
+  @JsonInclude(JsonInclude.Include.NON_NULL)
   private String notes;
   @JsonProperty
   @JsonUnwrapped

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/DefaultOperationReader.java
Patch:
@@ -35,7 +35,6 @@ public void apply(OperationContext context) {
     context.operationBuilder()
             .method(context.httpMethod())
             .uniqueId(String.format("%sUsing%s", operationName, context.httpMethod()))
-            .notes(operationName)
             .position(context.operationIndex())
             .summary(operationName);
   }

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/dto/Operation.java
Patch:
@@ -44,6 +44,7 @@
 public class Operation {
   private String method;
   private String summary;
+  @JsonInclude(JsonInclude.Include.NON_NULL)
   private String notes;
   @JsonProperty
   @JsonUnwrapped

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/SpringGroupingStrategy.java
Patch:
@@ -51,7 +51,7 @@ public Set<ResourceGroup> getResourceGroups(RequestMappingInfo requestMappingInf
 
   @Override
   public String getResourceDescription(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod) {
-    return getDescription(handlerMethod);
+    return getDescription(handlerMethod.getBeanType());
   }
 
   @Override
@@ -95,8 +95,7 @@ public boolean apply(String input) {
     };
   }
 
-  private String getDescription(HandlerMethod handlerMethod) {
-    Class<?> controllerClass = handlerMethod.getBeanType();
+  private String getDescription(Class<?> controllerClass) {
     return Paths.splitCamelCase(controllerClass.getSimpleName(), " ");
   }
 }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/ResourceGroupingStrategy.java
Patch:
@@ -45,10 +45,11 @@ public interface ResourceGroupingStrategy extends Plugin<DocumentationType> {
    * This is typically the class name of the spring controller or value() attribute of any @Api annotations on that
    * controller class
    *
-   * @param resourceGroup Resource group
+   * @param requestMappingInfo request mapping info
+   * @param handlerMethod      handler method
    * @return description of the resource
    */
-  public String getResourceDescription(ResourceGroup resourceGroup);
+  public String getResourceDescription(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod);
 
   /**
    * Gets the position of the resource.

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/SpringGroupingStrategy.java
Patch:
@@ -50,8 +50,8 @@ public Set<ResourceGroup> getResourceGroups(RequestMappingInfo requestMappingInf
   }
 
   @Override
-  public String getResourceDescription(ResourceGroup resourceGroup) {
-    return getDescription(resourceGroup.getControllerClass());
+  public String getResourceDescription(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod) {
+    return getDescription(handlerMethod.getBeanType());
   }
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/ClassOrApiAnnotationResourceGrouping.java
Patch:
@@ -45,8 +45,8 @@ public class ClassOrApiAnnotationResourceGrouping implements ResourceGroupingStr
   private static final Logger LOG = LoggerFactory.getLogger(ClassOrApiAnnotationResourceGrouping.class);
 
   @Override
-  public String getResourceDescription(ResourceGroup resourceGroup) {
-    Class<?> controllerClass = resourceGroup.getControllerClass();
+  public String getResourceDescription(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod) {
+    Class<?> controllerClass = handlerMethod.getBeanType();
     String group = Paths.splitCamelCase(controllerClass.getSimpleName(), " ");
     return extractAnnotation(controllerClass, descriptionOrValueExtractor()).or(group);
   }

File: springfox-petstore/src/main/java/springfox/petstore/model/Order.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.petstore.model;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import springfox.petstore.repository.Identifiable;
 
 import java.util.Date;

File: springfox-petstore/src/main/java/springfox/petstore/model/Pet.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.petstore.model;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import springfox.petstore.repository.Identifiable;
 
 import java.util.ArrayList;

File: springfox-petstore/src/main/java/springfox/petstore/model/User.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.petstore.model;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import springfox.petstore.repository.Identifiable;
 
 public class User implements Identifiable<String> {

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyController.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.spring.web.dummy;
 
-import com.wordnik.swagger.annotations.Api;
+import io.swagger.annotations.Api;
 import org.springframework.stereotype.Controller;
 
 @Controller

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyControllerWithApiDescription.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.spring.web.dummy;
 
-import com.wordnik.swagger.annotations.Api;
+import io.swagger.annotations.Api;
 import org.springframework.stereotype.Controller;
 
 @Controller

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/DummyModels.java
Patch:
@@ -22,8 +22,8 @@
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
-import com.wordnik.swagger.annotations.ApiModel;
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModelProperty;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/AbstractController.java
Patch:
@@ -19,8 +19,8 @@
 
 package springfox.documentation.spring.web.dummy.controllers;
 
-import com.wordnik.swagger.annotations.ApiResponse;
-import com.wordnik.swagger.annotations.ApiResponses;
+import io.swagger.annotations.ApiResponse;
+import io.swagger.annotations.ApiResponses;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/ExcludedService.java
Patch:
@@ -19,8 +19,8 @@
 
 package springfox.documentation.spring.web.dummy.controllers;
 
-import com.wordnik.swagger.annotations.Api;
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiParam;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/FancyPetService.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.spring.web.dummy.controllers;
 
-import com.wordnik.swagger.annotations.Api;
+import io.swagger.annotations.Api;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestBody;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/FeatureDemonstrationService.java
Patch:
@@ -19,9 +19,9 @@
 
 package springfox.documentation.spring.web.dummy.controllers;
 
-import com.wordnik.swagger.annotations.Api;
-import com.wordnik.swagger.annotations.ApiOperation;
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.Api;
+import io.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiParam;
 import org.joda.time.LocalDate;
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpStatus;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/PetGroomingService.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.spring.web.dummy.controllers;
 
-import com.wordnik.swagger.annotations.Api;
+import io.swagger.annotations.Api;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/controllers/RootController.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.spring.web.dummy.controllers;
 
-import com.wordnik.swagger.annotations.Api;
+import io.swagger.annotations.Api;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/Business.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.spring.web.dummy.models;
 
-import com.wordnik.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModel;
 import org.joda.time.LocalDate;
 
 import java.util.Date;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/Example.java
Patch:
@@ -19,8 +19,8 @@
 
 package springfox.documentation.spring.web.dummy.models;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiParam;
 import org.joda.time.LocalDateTime;
 
 import java.io.Serializable;

File: springfox-spring-web/src/test/java/springfox/documentation/spring/web/dummy/models/ModelWithMapProperty.java
Patch:
@@ -19,8 +19,8 @@
 
 package springfox.documentation.spring.web.dummy.models;
 
-import com.wordnik.swagger.annotations.ApiModel;
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModelProperty;
 
 import java.util.Map;
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/annotations/Annotations.java
Patch:
@@ -23,9 +23,9 @@
 import com.fasterxml.classmate.TypeResolver;
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
-import com.wordnik.swagger.annotations.ApiOperation;
-import com.wordnik.swagger.annotations.ApiParam;
-import com.wordnik.swagger.annotations.ApiResponses;
+import io.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiResponses;
 
 import java.lang.reflect.AnnotatedElement;
 import java.util.List;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationAuthReader.java
Patch:
@@ -20,9 +20,9 @@
 package springfox.documentation.swagger.readers.operation;
 
 import com.google.common.base.Optional;
-import com.wordnik.swagger.annotations.ApiOperation;
-import com.wordnik.swagger.annotations.Authorization;
-import com.wordnik.swagger.annotations.AuthorizationScope;
+import io.swagger.annotations.ApiOperation;
+import io.swagger.annotations.Authorization;
+import io.swagger.annotations.AuthorizationScope;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationHiddenReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.operation;
 
-import com.wordnik.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiOperation;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationHttpMethodReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.operation;
 
-import com.wordnik.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiOperation;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -20,7 +20,7 @@
 package springfox.documentation.swagger.readers.operation;
 
 import com.google.common.collect.Lists;
-import com.wordnik.swagger.annotations.ApiImplicitParam;
+import io.swagger.annotations.ApiImplicitParam;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParametersReader.java
Patch:
@@ -20,8 +20,8 @@
 package springfox.documentation.swagger.readers.operation;
 
 import com.google.common.collect.Lists;
-import com.wordnik.swagger.annotations.ApiImplicitParam;
-import com.wordnik.swagger.annotations.ApiImplicitParams;
+import io.swagger.annotations.ApiImplicitParam;
+import io.swagger.annotations.ApiImplicitParams;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationNicknameIntoUniqueIdReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.operation;
 
-import com.wordnik.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiOperation;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationNotesReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.operation;
 
-import com.wordnik.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiOperation;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationPositionReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.operation;
 
-import com.wordnik.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiOperation;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationSummaryReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.operation;
 
-import com.wordnik.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiOperation;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerMediaTypeReader.java
Patch:
@@ -20,7 +20,7 @@
 package springfox.documentation.swagger.readers.operation;
 
 import com.google.common.base.Splitter;
-import com.wordnik.swagger.annotations.ApiOperation;
+import io.swagger.annotations.ApiOperation;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationModelsProvider.java
Patch:
@@ -22,8 +22,8 @@
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
 import com.google.common.base.Optional;
-import com.wordnik.swagger.annotations.ApiResponse;
-import com.wordnik.swagger.annotations.ApiResponses;
+import io.swagger.annotations.ApiResponse;
+import io.swagger.annotations.ApiResponses;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerResponseMessageReader.java
Patch:
@@ -20,8 +20,8 @@
 package springfox.documentation.swagger.readers.operation;
 
 import com.google.common.base.Optional;
-import com.wordnik.swagger.annotations.ApiResponse;
-import com.wordnik.swagger.annotations.ApiResponses;
+import io.swagger.annotations.ApiResponse;
+import io.swagger.annotations.ApiResponses;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterAccessReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.parameter;
 
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterAllowableReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.parameter;
 
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterDefaultReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.parameter;
 
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterDescriptionReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.parameter;
 
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterMultiplesReader.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.readers.parameter;
 
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterRequiredReader.java
Patch:
@@ -20,7 +20,7 @@
 package springfox.documentation.swagger.readers.parameter;
 
 import com.google.common.base.Optional;
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/SwaggerExpandedParameterBuilder.java
Patch:
@@ -21,8 +21,8 @@
 
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
-import com.wordnik.swagger.annotations.ApiModelProperty;
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiParam;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.ModelRef;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelBuilder.java
Patch:
@@ -20,7 +20,7 @@
 package springfox.documentation.swagger.schema;
 
 import com.fasterxml.classmate.TypeResolver;
-import com.wordnik.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModel;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.core.annotation.Order;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelProperties.java
Patch:
@@ -26,7 +26,7 @@
 import com.google.common.base.Splitter;
 import com.google.common.base.Strings;
 import com.google.common.collect.Lists;
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.springframework.core.annotation.AnnotationUtils;
 import springfox.documentation.service.AllowableListValues;
 import springfox.documentation.service.AllowableRangeValues;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelPropertyPropertyBuilder.java
Patch:
@@ -20,7 +20,7 @@
 package springfox.documentation.swagger.schema;
 
 import com.google.common.base.Optional;
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelTypeNameProvider.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger.schema;
 
-import com.wordnik.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModel;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.DefaultTypeNameProvider;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/ClassOrApiAnnotationResourceGrouping.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
-import com.wordnik.swagger.annotations.Api;
+import io.swagger.annotations.Api;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.AnnotationUtils;

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/readers/parameter/ParameterNameReader.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Optional;
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;

File: springfox-swagger1/src/test/java/springfox/documentation/schema/TypeWithAnnotatedGettersAndSetters.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.schema;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 import org.joda.time.LocalDate;
 
 public class TypeWithAnnotatedGettersAndSetters {

File: springfox-swagger1/src/test/java/springfox/documentation/schema/TypeWithApiModelAnnotation.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.schema;
 
-import com.wordnik.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModel;
 
 @ApiModel(value = "ApiModelTest")
 public class TypeWithApiModelAnnotation {

File: springfox-swagger1/src/test/java/springfox/documentation/schema/TypeWithEmptyApiModelAnnotation.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.schema;
 
-import com.wordnik.swagger.annotations.ApiModel;
+import io.swagger.annotations.ApiModel;
 
 @ApiModel
 public class TypeWithEmptyApiModelAnnotation {

File: springfox-swagger1/src/test/java/springfox/documentation/schema/TypeWithGettersAndSetters.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.schema;
 
-import com.wordnik.swagger.annotations.ApiModelProperty;
+import io.swagger.annotations.ApiModelProperty;
 
 public class TypeWithGettersAndSetters {
   @ApiModelProperty(notes = "int Property Field", required = true)

File: springfox-swagger1/src/test/java/springfox/documentation/swagger1/models/ServiceWithAnnotationOnInterface.java
Patch:
@@ -19,8 +19,8 @@
 
 package springfox.documentation.swagger1.models;
 
-import com.wordnik.swagger.annotations.ApiResponse;
-import com.wordnik.swagger.annotations.ApiResponses;
+import io.swagger.annotations.ApiResponse;
+import io.swagger.annotations.ApiResponses;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.ResponseStatus;
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ApiKeyAuthFactory.java
Patch:
@@ -19,9 +19,9 @@
 
 package springfox.documentation.swagger2.mappers;
 
-import com.wordnik.swagger.models.auth.ApiKeyAuthDefinition;
-import com.wordnik.swagger.models.auth.In;
-import com.wordnik.swagger.models.auth.SecuritySchemeDefinition;
+import io.swagger.models.auth.ApiKeyAuthDefinition;
+import io.swagger.models.auth.In;
+import io.swagger.models.auth.SecuritySchemeDefinition;
 import springfox.documentation.service.ApiKey;
 import springfox.documentation.service.SecurityScheme;
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/BasicAuthFactory.java
Patch:
@@ -19,8 +19,8 @@
 
 package springfox.documentation.swagger2.mappers;
 
-import com.wordnik.swagger.models.auth.BasicAuthDefinition;
-import com.wordnik.swagger.models.auth.SecuritySchemeDefinition;
+import io.swagger.models.auth.BasicAuthDefinition;
+import io.swagger.models.auth.SecuritySchemeDefinition;
 import springfox.documentation.service.SecurityScheme;
 
 class BasicAuthFactory implements SecuritySchemeFactory {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/LicenseMapper.java
Patch:
@@ -32,8 +32,8 @@
 public class LicenseMapper {
 
   @License
-  public com.wordnik.swagger.models.License apiInfoToLicense(ApiInfo from) {
-    return new com.wordnik.swagger.models.License().name(from.getLicense()).url(from.getLicenseUrl());
+  public io.swagger.models.License apiInfoToLicense(ApiInfo from) {
+    return new io.swagger.models.License().name(from.getLicense()).url(from.getLicenseUrl());
   }
 
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/OAuth2AuthFactory.java
Patch:
@@ -19,8 +19,8 @@
 
 package springfox.documentation.swagger2.mappers;
 
-import com.wordnik.swagger.models.auth.OAuth2Definition;
-import com.wordnik.swagger.models.auth.SecuritySchemeDefinition;
+import io.swagger.models.auth.OAuth2Definition;
+import io.swagger.models.auth.SecuritySchemeDefinition;
 import springfox.documentation.service.AuthorizationCodeGrant;
 import springfox.documentation.service.AuthorizationScope;
 import springfox.documentation.service.SecurityScheme;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SecurityMapper.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.google.common.base.Function;
 import com.google.common.collect.ImmutableMap;
-import com.wordnik.swagger.models.auth.SecuritySchemeDefinition;
+import io.swagger.models.auth.SecuritySchemeDefinition;
 import org.mapstruct.Mapper;
 import springfox.documentation.service.SecurityScheme;
 import springfox.documentation.service.ResourceListing;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SecuritySchemeFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.swagger2.mappers;
 
-import com.wordnik.swagger.models.auth.SecuritySchemeDefinition;
+import io.swagger.models.auth.SecuritySchemeDefinition;
 import springfox.documentation.service.SecurityScheme;
 
 interface SecuritySchemeFactory {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SerializableParameterFactory.java
Patch:
@@ -18,7 +18,7 @@
  */
 package springfox.documentation.swagger2.mappers;
 
-import com.wordnik.swagger.models.parameters.SerializableParameter;
+import io.swagger.models.parameters.SerializableParameter;
 import springfox.documentation.service.Parameter;
 
 interface SerializableParameterFactory {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/readers/parameter/ParameterNameReader.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Optional;
-import com.wordnik.swagger.annotations.ApiParam;
+import io.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -20,7 +20,7 @@
 package springfox.documentation.swagger2.web;
 
 import com.google.common.base.Optional;
-import com.wordnik.swagger.models.Swagger;
+import io.swagger.models.Swagger;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.http.HttpStatus;

File: springfox-schema/src/main/java/springfox/documentation/schema/Annotations.java
Patch:
@@ -50,6 +50,9 @@ public static <A extends Annotation> Optional<A> findPropertyAnnotation(BeanProp
   }
 
   public static boolean memberIsUnwrapped(AnnotatedMember member) {
+    if (member == null) {
+      return false;
+    }
     return Optional.fromNullable(member.getAnnotation(JsonUnwrapped.class)).isPresent();
   }
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Defaults.java
Patch:
@@ -105,8 +105,7 @@ public List<AlternateTypeRule> defaultRules(TypeResolver typeResolver) {
             typeResolver.resolve(Object.class)));
     rules.add(newRule(typeResolver.resolve(Map.class, Object.class, Object.class),
             typeResolver.resolve(Object.class)));
-    rules.add(newRule(typeResolver.resolve(Map.class, String.class, String.class),
-            typeResolver.resolve(Object.class)));
+
 
     rules.add(newRule(typeResolver.resolve(ResponseEntity.class, WildcardType.class),
             typeResolver.resolve(WildcardType.class)));

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -80,7 +80,7 @@ private SecurityContext securityContext() {
     return SecurityContext.builder()
         .securityReferences(defaultAuth())
         .forPaths(PathSelectors.regex("/anyPath.*"))                     //<17>
-        .build()
+        .build();
   }
 
   List<SecurityReference> defaultAuth() {

File: springfox-spring-config/src/main/java/springfox/springconfig/Swagger2SpringBoot.java
Patch:
@@ -89,6 +89,6 @@ List<SecurityReference> defaultAuth() {
         = new AuthorizationScope("global", "accessEverything");
     AuthorizationScope[] authorizationScopes = new AuthorizationScope[1];
     authorizationScopes[0] = authorizationScope;
-    newArrayList(new SecurityReference("mykey", authorizationScopes));       //<18>
+    return newArrayList(new SecurityReference("mykey", authorizationScopes));       //<18>
   }
 }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterRequiredReader.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestParam;
 import springfox.documentation.spi.DocumentationType;
@@ -63,6 +64,8 @@ private Boolean getAnnotatedRequired(MethodParameter methodParameter) {
         requiredSet.add(!optional && ((RequestHeader) annotation).required());
       } else if (annotation instanceof PathVariable) {
         requiredSet.add(true);
+      } else if (annotation instanceof RequestBody) {
+        requiredSet.add(!optional && ((RequestBody) annotation).required());
       }
     }
     return requiredSet.contains(true);

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java
Patch:
@@ -62,7 +62,7 @@
  */
 public class Docket implements DocumentationPlugin {
 
-  private static final String DEFAULT_GROUP_NAME = "default";
+  public static final String DEFAULT_GROUP_NAME = "default";
   private final DocumentationType documentationType;
   private String groupName;
   private ApiInfo apiInfo;

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/web/Swagger1Controller.java
Patch:
@@ -37,6 +37,7 @@
 import springfox.documentation.spring.web.DocumentationCache;
 import springfox.documentation.spring.web.json.Json;
 import springfox.documentation.spring.web.json.JsonSerializer;
+import springfox.documentation.spring.web.plugins.Docket;
 import springfox.documentation.swagger1.dto.ApiListing;
 import springfox.documentation.swagger1.dto.ResourceListing;
 import springfox.documentation.swagger1.mappers.Mappers;
@@ -104,7 +105,7 @@ public Json apply(ApiListing input) {
   }
 
   private ResponseEntity<Json> getSwaggerResourceListing(String swaggerGroup) {
-    String groupName = Optional.fromNullable(swaggerGroup).or("default");
+    String groupName = Optional.fromNullable(swaggerGroup).or(Docket.DEFAULT_GROUP_NAME);
     Documentation documentation = documentationCache.documentationByGroup(groupName);
     if (documentation == null) {
       return new ResponseEntity<Json>(HttpStatus.NOT_FOUND);

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -35,6 +35,7 @@
 import springfox.documentation.spring.web.DocumentationCache;
 import springfox.documentation.spring.web.json.Json;
 import springfox.documentation.spring.web.json.JsonSerializer;
+import springfox.documentation.spring.web.plugins.Docket;
 import springfox.documentation.swagger2.mappers.ServiceModelToSwagger2Mapper;
 
 import java.net.URI;
@@ -66,7 +67,7 @@ public class Swagger2Controller {
   ResponseEntity<Json> getDocumentation(
           @RequestParam(value = "group", required = false) String swaggerGroup) {
 
-    String groupName = Optional.fromNullable(swaggerGroup).or("default");
+    String groupName = Optional.fromNullable(swaggerGroup).or(Docket.DEFAULT_GROUP_NAME);
     Documentation documentation = documentationCache.documentationByGroup(groupName);
     if (documentation == null) {
       return new ResponseEntity<Json>(HttpStatus.NOT_FOUND);

File: springfox-core/src/main/java/springfox/documentation/builders/BuilderDefaults.java
Patch:
@@ -24,6 +24,7 @@
 import com.google.common.collect.LinkedListMultimap;
 import com.google.common.collect.Multimap;
 
+import java.util.Collection;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -58,11 +59,11 @@ public static <T> T defaultIfAbsent(T newValue, T defaultValue) {
    * @param <T>      - any type
    * @return non-null list
    */
-  public static <T> List<T> nullToEmptyList(List<T> newValue) {
+  public static <T> List<T> nullToEmptyList(Collection<T> newValue) {
     if (newValue == null) {
       return newArrayList();
     }
-    return newValue;
+    return newArrayList(newValue);
   }
 
   /**

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/json/JsonSerializer.java
Patch:
@@ -33,9 +33,9 @@ public JsonSerializer(List<JacksonModuleRegistrar> modules) {
     }
   }
 
-  public Json toJson(Object resourceListing) {
+  public Json toJson(Object toSerialize) {
     try {
-      return new Json(objectMapper.writeValueAsString(resourceListing));
+      return new Json(objectMapper.writeValueAsString(toSerialize));
     } catch (JsonProcessingException e) {
       throw new RuntimeException("Could not write JSON", e);
     }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.common.base.Function;
 import com.google.common.base.Predicate;
 import com.google.common.collect.FluentIterable;
+import com.google.common.collect.Multimap;
 import com.wordnik.swagger.models.Model;
 import com.wordnik.swagger.models.ModelImpl;
 import com.wordnik.swagger.models.properties.AbstractNumericProperty;
@@ -119,7 +120,7 @@ static Property modelRefToProperty(ModelRef modelRef) {
     return responseProperty;
   }
 
-  protected Map<String, Model> modelsFromApiListings(Map<String, ApiListing> apiListings) {
+  protected Map<String, Model> modelsFromApiListings(Multimap<String, ApiListing> apiListings) {
     Map<String, springfox.documentation.schema.Model> definitions = newHashMap();
     for (ApiListing each : apiListings.values()) {
       definitions.putAll(each.getModels());

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.common.base.Optional;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.Maps;
+import com.google.common.collect.Multimap;
 import com.wordnik.swagger.models.Contact;
 import com.wordnik.swagger.models.Info;
 import com.wordnik.swagger.models.Operation;
@@ -130,7 +131,7 @@ protected Map<String, Response> mapResponseMessages(Set<ResponseMessage> from) {
     return responses;
   }
 
-  protected Map<String, Path> mapApiListings(Map<String, ApiListing> apiListings) {
+  protected Map<String, Path> mapApiListings(Multimap<String, ApiListing> apiListings) {
     Map<String, Path> paths = newHashMap();
     for (ApiListing each : apiListings.values()) {
       for (ApiDescription api : each.getApis()) {

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/SecurityContextBuilder.java
Patch:
@@ -34,7 +34,7 @@ public class SecurityContextBuilder {
   private List<SecurityReference> securityReferences = newArrayList();
   private Predicate<String> pathSelector = Predicates.alwaysTrue();
 
-  public SecurityContextBuilder withAuthorizations(List<SecurityReference> securityReferences) {
+  public SecurityContextBuilder securityReferences(List<SecurityReference> securityReferences) {
     this.securityReferences = securityReferences;
     return this;
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -33,7 +33,6 @@
 import springfox.documentation.spi.service.contexts.ApiListingContext;
 import springfox.documentation.spi.service.contexts.DocumentationContext;
 import springfox.documentation.spi.service.contexts.RequestMappingContext;
-import springfox.documentation.spi.service.contexts.SecurityContext;
 import springfox.documentation.spring.web.plugins.DocumentationPluginsManager;
 
 import java.util.ArrayList;
@@ -70,6 +69,7 @@ public Map<String, ApiListing> scan(ApiListingScanningContext context) {
 
     Map<ResourceGroup, List<RequestMappingContext>> requestMappingsByResourceGroup
             = context.getRequestMappingsByResourceGroup();
+    List<SecurityReference> securityReferences = newArrayList();
     for (Map.Entry<ResourceGroup, List<RequestMappingContext>> entry : requestMappingsByResourceGroup.entrySet()) {
 
       ResourceGroup resourceGroup = entry.getKey();
@@ -81,13 +81,11 @@ public Map<String, ApiListing> scan(ApiListingScanningContext context) {
       Set<ApiDescription> apiDescriptions = newHashSet();
 
       Map<String, Model> models = new LinkedHashMap<String, Model>();
-      SecurityContext securityContext = documentationContext.getSecurityContext();
       for (RequestMappingContext each : entry.getValue()) {
         models.putAll(apiModelReader.read(each.withKnownModels(models)));
         apiDescriptions.addAll(apiDescriptionReader.read(each));
       }
 
-      List<SecurityReference> securityReferences = securityContext.getSecurityReferences();
 
       ArrayList sortedApis = new ArrayList(apiDescriptions);
       Collections.sort(sortedApis, documentationContext.getApiDescriptionOrdering());

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/OperationResponseClassReader.java
Patch:
@@ -62,7 +62,6 @@ public void apply(OperationContext context) {
     String responseTypeName = nameExtractor.typeName(modelContext);
     log.debug("Setting spring response class to:" + responseTypeName);
     context.operationBuilder()
-            .responseClass(responseTypeName)
             .responseModel(modelRef(returnType, modelContext))
     ;
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -64,7 +64,7 @@ public ResponseMessagesReader(TypeResolver typeResolver,
 
   @Override
   public void apply(OperationContext context) {
-    List<ResponseMessage> responseMessages = context.getGlobalResponseMessages(context.httpMethod());
+    List<ResponseMessage> responseMessages = context.getGlobalResponseMessages(context.httpMethod().toString());
     context.operationBuilder().responseMessages(newHashSet(responseMessages));
     applyReturnTypeOverride(context);
   }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationHttpMethodReader.java
Patch:
@@ -23,6 +23,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.Order;
+import org.springframework.http.HttpMethod;
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -47,7 +48,7 @@ public void apply(OperationContext context) {
       String apiMethod = apiOperationAnnotation.httpMethod();
       try {
         RequestMethod.valueOf(apiMethod);
-        context.operationBuilder().method(apiMethod);
+        context.operationBuilder().method(HttpMethod.valueOf(apiMethod));
       } catch (IllegalArgumentException e) {
         log.error("Invalid http method: " + apiMethod + "Valid ones are [" + RequestMethod.values() + "]", e);
       }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationResponseClassReader.java
Patch:
@@ -75,7 +75,6 @@ public void apply(OperationContext context) {
     String responseTypeName = nameExtractor.typeName(modelContext);
     log.debug("Setting response class to:" + responseTypeName);
     context.operationBuilder()
-            .responseClass(responseTypeName)
             .responseModel(modelRef(returnType, modelContext));
   }
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -153,7 +153,7 @@ private Path mapOperations(ApiDescription api, Optional<Path> existingPath) {
     Path path = existingPath.or(new Path());
     for (springfox.documentation.service.Operation each : api.getOperations()) {
       Operation operation = mapOperation(each);
-      path.set(each.getMethod().toLowerCase(), operation);
+      path.set(each.getMethod().toString().toLowerCase(), operation);
     }
     return path;
   }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/web/ApiResourceController.java
Patch:
@@ -44,6 +44,7 @@ public class ApiResourceController {
 
   @Value("${springfox.documentation.swagger.v2.path:/v2/api-docs}")
   private String swagger2Url;
+
   @Autowired
   private DocumentationCache documentationCache;
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/parameter/ParameterTypeReader.java
Patch:
@@ -55,7 +55,7 @@ public boolean supports(DocumentationType delimiter) {
     return true;
   }
 
-  private String findParameterType(MethodParameter methodParameter, ResolvedType parameterType) {
+  public static String findParameterType(MethodParameter methodParameter, ResolvedType parameterType) {
     //Multi-part file trumps any other annotations
     if (MultipartFile.class.isAssignableFrom(parameterType.getErasedType())) {
       return "form";

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/common/SwaggerPluginSupport.java
Patch:
@@ -27,7 +27,7 @@ private SwaggerPluginSupport() {
     throw new UnsupportedOperationException();
   }
 
-  public final static int SWAGGER_PLUGIN_ORDER = Ordered.HIGHEST_PRECEDENCE + 50;
+  public final static int SWAGGER_PLUGIN_ORDER = Ordered.HIGHEST_PRECEDENCE + 1000;
   public static boolean pluginDoesApply(DocumentationType documentationType) {
     return DocumentationType.SWAGGER_12.equals(documentationType) || DocumentationType.SWAGGER_2.equals(documentationType);
   }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -32,11 +32,12 @@
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
-import springfox.documentation.swagger.schema.ApiModelProperties;
 
 import java.lang.reflect.Method;
 import java.util.List;
 
+import static springfox.documentation.swagger.schema.ApiModelProperties.*;
+
 
 @Component
 @Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
@@ -71,7 +72,7 @@ public static Parameter getImplicitParameter(ApiImplicitParam param) {
             .required(param.required())
             .allowMultiple(param.allowMultiple())
             .modelRef(new ModelRef(param.dataType()))
-            .allowableValues(ApiModelProperties.allowableValueFromString(param.allowableValues()))
+            .allowableValues(allowableValueFromString(param.allowableValues()))
             .parameterType(param.paramType())
             .parameterAccess(param.access())
             .build();

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/configuration/Swagger1DocumentationConfiguration.java
Patch:
@@ -32,6 +32,7 @@
 @Configuration
 @Import({ SpringMvcDocumentationConfiguration.class, SwaggerCommonConfiguration.class})
 @ComponentScan(basePackages = {
+        "springfox.documentation.swagger1.readers.parameter",
         "springfox.documentation.swagger1.web",
         "springfox.documentation.swagger1.mappers"
 })

File: springfox-swagger1/src/main/java/springfox/documentation/swagger1/web/Swagger1Controller.java
Patch:
@@ -44,7 +44,7 @@
 @Controller
 @ApiIgnore
 @RequestMapping("${springfox.documentation.swagger.v1.path:/api-docs}")
-public class DefaultSwaggerController {
+public class Swagger1Controller {
 
   @Autowired
   private DocumentationCache documentationCache;

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/configuration/Swagger2DocumentationConfiguration.java
Patch:
@@ -32,6 +32,7 @@
 @Configuration
 @Import({ SpringMvcDocumentationConfiguration.class, SwaggerCommonConfiguration.class})
 @ComponentScan(basePackages = {
+        "springfox.documentation.swagger2.readers.parameter",
         "springfox.documentation.swagger2.web",
         "springfox.documentation.swagger2.mappers"
 })

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/LicenseMapper.java
Patch:
@@ -29,7 +29,7 @@
 import java.lang.annotation.Target;
 
 @Mapper
-public abstract class LicenseMapper {
+public class LicenseMapper {
 
   @License
   public com.wordnik.swagger.models.License apiInfoToLicense(ApiInfo from) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SecurityMapper.java
Patch:
@@ -39,6 +39,9 @@ public class SecurityMapper {
           .build();
 
   public Map<String, SecuritySchemeDefinition> toSecuritySchemeDefinitions(ResourceListing from) {
+    if (from == null) {
+      return newHashMap();
+    }
     return transformValues(uniqueIndex(from.getSecuritySchemes(), schemeName()), toSecuritySchemeDefinition());
   }
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/configuration/SwaggerCommonConfiguration.java
Patch:
@@ -34,6 +34,8 @@ public class SwaggerCommonConfiguration {
 
   @Bean
   public static PropertySourcesPlaceholderConfigurer swaggerProperties() {
-    return new PropertySourcesPlaceholderConfigurer();
+    PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer = new PropertySourcesPlaceholderConfigurer();
+    propertySourcesPlaceholderConfigurer.setIgnoreUnresolvablePlaceholders(true);
+    return propertySourcesPlaceholderConfigurer;
   }
 }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/configuration/SwaggerCommonConfiguration.java
Patch:
@@ -34,6 +34,8 @@ public class SwaggerCommonConfiguration {
 
   @Bean
   public static PropertySourcesPlaceholderConfigurer swaggerProperties() {
-    return new PropertySourcesPlaceholderConfigurer();
+    PropertySourcesPlaceholderConfigurer p = new PropertySourcesPlaceholderConfigurer();
+    p.setIgnoreUnresolvablePlaceholders(true);
+    return p;
   }
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/configuration/Swagger2JacksonModule.java
Patch:
@@ -27,6 +27,7 @@
 import com.wordnik.swagger.models.Contact;
 import com.wordnik.swagger.models.ExternalDocs;
 import com.wordnik.swagger.models.Info;
+import com.wordnik.swagger.models.License;
 import com.wordnik.swagger.models.Model;
 import com.wordnik.swagger.models.Operation;
 import com.wordnik.swagger.models.Path;
@@ -56,6 +57,7 @@ public void setupModule(SetupContext context) {
     super.setupModule(context);
     context.setMixInAnnotations(Swagger.class, CustomizedSwaggerSerializer.class);
     context.setMixInAnnotations(Info.class, CustomizedSwaggerSerializer.class);
+    context.setMixInAnnotations(License.class, CustomizedSwaggerSerializer.class);
     context.setMixInAnnotations(Scheme.class, CustomizedSwaggerSerializer.class);
     context.setMixInAnnotations(SecurityRequirement.class, CustomizedSwaggerSerializer.class);
     context.setMixInAnnotations(SecuritySchemeDefinition.class, CustomizedSwaggerSerializer.class);

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/Orderings.java
Patch:
@@ -37,7 +37,7 @@ public static Comparator<Operation> nickNameComparator() {
     return new Comparator<Operation>() {
       @Override
       public int compare(Operation first, Operation second) {
-        return nullToEmpty(first.getNickname()).compareTo(nullToEmpty(second.getNickname()));
+        return nullToEmpty(first.getUniqueId()).compareTo(nullToEmpty(second.getUniqueId()));
       }
     };
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/readers/operation/DefaultOperationReader.java
Patch:
@@ -28,13 +28,13 @@
 
 @Component
 @Order(Ordered.HIGHEST_PRECEDENCE)
-public class DefaultOperationBuilder implements OperationBuilderPlugin {
+public class DefaultOperationReader implements OperationBuilderPlugin {
   @Override
   public void apply(OperationContext context) {
     String operationName = context.getHandlerMethod().getMethod().getName();
     context.operationBuilder()
             .method(context.httpMethod())
-            .nickname(operationName)
+            .uniqueId(String.format("%sUsing%s", operationName, context.httpMethod()))
             .notes(operationName)
             .position(context.operationIndex())
             .summary(operationName);

File: springfox-swagger/src/main/java/springfox/documentation/swagger/mappers/ServiceModelToSwaggerMapper.java
Patch:
@@ -66,6 +66,7 @@ public interface ServiceModelToSwaggerMapper {
 
   @Mappings({
       @Mapping(target = "dataType", source = "responseModel", qualifiedBy = DataTypeMapper.OperationType.class),
+      @Mapping(target = "nickname", source = "uniqueId"),
       @Mapping(target = "authorizations", source = "securityReferences")
   })
   Operation toSwaggerOperation(springfox.documentation.service.Operation from);

File: springfox-petstore/src/main/java/springfox/petstore/controller/PetController.java
Patch:
@@ -29,6 +29,7 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.PathVariable;
+import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 import springfox.petstore.Responses;
@@ -83,7 +84,7 @@ public ResponseEntity<Pet> getPetById(
           }))
   @ApiResponses(value = {@ApiResponse(code = 405, message = "Invalid input")})
   public ResponseEntity<String> addPet(
-          @ApiParam(value = "Pet object that needs to be added to the store", required = true) Pet pet) {
+          @ApiParam(value = "Pet object that needs to be added to the store", required = true) @RequestBody Pet pet) {
     petData.add(pet);
     return Responses.ok("SUCCESS");
   }
@@ -98,7 +99,7 @@ public ResponseEntity<String> addPet(
           @ApiResponse(code = 404, message = "Pet not found"),
           @ApiResponse(code = 405, message = "Validation exception")})
   public ResponseEntity<String> updatePet(
-          @ApiParam(value = "Pet object that needs to be added to the store", required = true) Pet pet) {
+          @ApiParam(value = "Pet object that needs to be added to the store", required = true) @RequestBody Pet pet) {
     petData.add(pet);
     return Responses.ok("SUCCESS");
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -83,7 +83,7 @@ public Map<String, ApiListing> scan(ApiListingScanningContext context) {
       Map<String, Model> models = new LinkedHashMap<String, Model>();
       SecurityContext securityContext = documentationContext.getSecurityContext();
       for (RequestMappingContext each : entry.getValue()) {
-        models.putAll(apiModelReader.read(each));
+        models.putAll(apiModelReader.read(each.withKnownModels(models)));
         apiDescriptions.addAll(apiDescriptionReader.read(each));
       }
 

File: springfox-core/src/main/java/springfox/documentation/builders/ResourceListingBuilder.java
Patch:
@@ -21,7 +21,7 @@
 
 import springfox.documentation.service.ApiInfo;
 import springfox.documentation.service.ApiListingReference;
-import springfox.documentation.service.AuthorizationType;
+import springfox.documentation.service.SecurityScheme;
 import springfox.documentation.service.ResourceListing;
 
 import java.util.List;
@@ -32,7 +32,7 @@
 public class ResourceListingBuilder {
   private String apiVersion;
   private List<ApiListingReference> apis = newArrayList();
-  private List<AuthorizationType> authorizations = newArrayList();
+  private List<SecurityScheme> authorizations = newArrayList();
   private ApiInfo info;
 
   /**
@@ -63,7 +63,7 @@ public ResourceListingBuilder apis(List<ApiListingReference> apis) {
    * @param authorizations - security definitiosn
    * @return this
    */
-  public ResourceListingBuilder authorizations(List<? extends AuthorizationType> authorizations) {
+  public ResourceListingBuilder authorizations(List<? extends SecurityScheme> authorizations) {
     this.authorizations.addAll(nullToEmptyList(authorizations));
     return this;
   }

File: springfox-core/src/main/java/springfox/documentation/service/ApiKey.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.service;
 
-public class ApiKey extends AuthorizationType {
+public class ApiKey extends SecurityScheme {
   private final String keyname;
   private final String passAs;
 

File: springfox-core/src/main/java/springfox/documentation/service/BasicAuth.java
Patch:
@@ -19,7 +19,7 @@
 
 package springfox.documentation.service;
 
-public class BasicAuth extends AuthorizationType {
+public class BasicAuth extends SecurityScheme {
   public BasicAuth(String name) {
     super(name, "basicAuth");
   }

File: springfox-core/src/main/java/springfox/documentation/service/OAuth.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 
-public class OAuth extends AuthorizationType {
+public class OAuth extends SecurityScheme {
 
   private final List<AuthorizationScope> scopes;
   private final LinkedHashMap<String, GrantType> grantTypes;

File: springfox-core/src/main/java/springfox/documentation/service/SecurityScheme.java
Patch:
@@ -19,11 +19,11 @@
 
 package springfox.documentation.service;
 
-public abstract class AuthorizationType {
+public abstract class SecurityScheme {
   protected final String name;
   protected final String type;
 
-  protected AuthorizationType(String name, String type) {
+  protected SecurityScheme(String name, String type) {
     this.type = type;
     this.name = name;
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiDocumentationScanner.java
Patch:
@@ -73,7 +73,7 @@ public Documentation scan(DocumentationContext context) {
     ResourceListing resourceListing = new ResourceListingBuilder()
             .apiVersion(context.getApiInfo().getVersion())
             .apis(apiListingReferences)
-            .authorizations(context.getAuthorizationTypes())
+            .authorizations(context.getSecuritySchemes())
             .info(context.getApiInfo())
             .build();
     group.resourceListing(resourceListing);

File: springfox-swagger/src/main/java/springfox/documentation/swagger/mappers/AuthorizationTypesMapper.java
Patch:
@@ -24,6 +24,7 @@
 import org.mapstruct.Mappings;
 import springfox.documentation.service.AuthorizationScope;
 import springfox.documentation.service.SecurityReference;
+import springfox.documentation.service.SecurityScheme;
 import springfox.documentation.swagger.dto.ApiKey;
 import springfox.documentation.swagger.dto.Authorization;
 import springfox.documentation.swagger.dto.AuthorizationCodeGrant;
@@ -78,7 +79,7 @@ public springfox.documentation.swagger.dto.GrantType toSwaggerGrantType(
 
 
   public AuthorizationType toSwaggerAuthorizationType(
-          springfox.documentation.service.AuthorizationType from) {
+          SecurityScheme from) {
 
     if (from instanceof springfox.documentation.service.ApiKey) {
       return toSwaggerApiKey((springfox.documentation.service.ApiKey) from);
@@ -98,6 +99,6 @@ public abstract List<springfox.documentation.swagger.dto.GrantType> toSwaggerGra
           .documentation.service.GrantType> from);
 
   public abstract List<AuthorizationType> toSwaggerAuthorizationTypes(
-          List<springfox.documentation.service.AuthorizationType> from);
+          List<SecurityScheme> from);
 
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/ApiKeyAuthFactory.java
Patch:
@@ -23,11 +23,11 @@
 import com.wordnik.swagger.models.auth.In;
 import com.wordnik.swagger.models.auth.SecuritySchemeDefinition;
 import springfox.documentation.service.ApiKey;
-import springfox.documentation.service.AuthorizationType;
+import springfox.documentation.service.SecurityScheme;
 
 class ApiKeyAuthFactory implements SecuritySchemeFactory {
   @Override
-  public SecuritySchemeDefinition create(AuthorizationType input) {
+  public SecuritySchemeDefinition create(SecurityScheme input) {
     ApiKey apiKey = (ApiKey) input;
     ApiKeyAuthDefinition definition = new ApiKeyAuthDefinition();
     definition.name(apiKey.getName()).in(In.forValue(apiKey.getPassAs()));

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/BasicAuthFactory.java
Patch:
@@ -21,11 +21,11 @@
 
 import com.wordnik.swagger.models.auth.BasicAuthDefinition;
 import com.wordnik.swagger.models.auth.SecuritySchemeDefinition;
-import springfox.documentation.service.AuthorizationType;
+import springfox.documentation.service.SecurityScheme;
 
 class BasicAuthFactory implements SecuritySchemeFactory {
   @Override
-  public SecuritySchemeDefinition create(AuthorizationType input) {
+  public SecuritySchemeDefinition create(SecurityScheme input) {
     return new BasicAuthDefinition();
   }
 }

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/OAuth2AuthFactory.java
Patch:
@@ -23,14 +23,14 @@
 import com.wordnik.swagger.models.auth.SecuritySchemeDefinition;
 import springfox.documentation.service.AuthorizationCodeGrant;
 import springfox.documentation.service.AuthorizationScope;
-import springfox.documentation.service.AuthorizationType;
+import springfox.documentation.service.SecurityScheme;
 import springfox.documentation.service.GrantType;
 import springfox.documentation.service.ImplicitGrant;
 import springfox.documentation.service.OAuth;
 
 class OAuth2AuthFactory implements SecuritySchemeFactory {
   @Override
-  public SecuritySchemeDefinition create(AuthorizationType input) {
+  public SecuritySchemeDefinition create(SecurityScheme input) {
     OAuth oAuth = (OAuth) input;
     OAuth2Definition definition = new OAuth2Definition();
     for (GrantType each : oAuth.getGrantTypes()) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/mappers/SecuritySchemeFactory.java
Patch:
@@ -20,8 +20,8 @@
 package springfox.documentation.swagger2.mappers;
 
 import com.wordnik.swagger.models.auth.SecuritySchemeDefinition;
-import springfox.documentation.service.AuthorizationType;
+import springfox.documentation.service.SecurityScheme;
 
 interface SecuritySchemeFactory {
-  SecuritySchemeDefinition create(AuthorizationType input);
+  SecuritySchemeDefinition create(SecurityScheme input);
 }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -30,7 +30,7 @@
 import springfox.documentation.service.ApiDescription;
 import springfox.documentation.service.ApiInfo;
 import springfox.documentation.service.ApiListingReference;
-import springfox.documentation.service.Authorization;
+import springfox.documentation.service.SecurityReference;
 import springfox.documentation.service.AuthorizationType;
 import springfox.documentation.service.Operation;
 import springfox.documentation.service.ResponseMessage;
@@ -209,7 +209,7 @@ public DocumentationContext build() {
     Map<RequestMethod, List<ResponseMessage>> responseMessages = aggregateResponseMessages();
     SecurityContext securityContext = fromNullable(this.securityContext)
             .or(new SecurityContextBuilder()
-                .withAuthorizations(new ArrayList<Authorization>())
+                .withAuthorizations(new ArrayList<SecurityReference>())
                 .forPaths(PathSelectors.any())
                 .build());
     return new DocumentationContext(documentationType, handlerMappings, apiInfo, groupName,

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/OperationContext.java
Patch:
@@ -77,7 +77,7 @@ public List<ResponseMessage> getGlobalResponseMessages(String forHttpMethod) {
     return newArrayList();
   }
 
-  public SecurityContext authorizationContext() {
+  public SecurityContext securityContext() {
     return documentationContext.getSecurityContext();
   }
 

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -28,7 +28,7 @@
 import springfox.documentation.schema.Model;
 import springfox.documentation.service.ApiDescription;
 import springfox.documentation.service.ApiListing;
-import springfox.documentation.service.Authorization;
+import springfox.documentation.service.SecurityReference;
 import springfox.documentation.service.ResourceGroup;
 import springfox.documentation.spi.service.contexts.ApiListingContext;
 import springfox.documentation.spi.service.contexts.SecurityContext;
@@ -87,7 +87,7 @@ public Map<String, ApiListing> scan(ApiListingScanningContext context) {
         apiDescriptions.addAll(apiDescriptionReader.read(each));
       }
 
-      List<Authorization> authorizations = securityContext.getAuthorizations();
+      List<SecurityReference> securityReferences = securityContext.getSecurityReferences();
 
       ArrayList sortedApis = new ArrayList(apiDescriptions);
       Collections.sort(sortedApis, documentationContext.getApiDescriptionOrdering());
@@ -102,7 +102,7 @@ public Map<String, ApiListing> scan(ApiListingScanningContext context) {
               .produces(produces)
               .consumes(consumes)
               .protocols(protocols)
-              .authorizations(authorizations)
+              .securityReferences(securityReferences)
               .apis(sortedApis)
               .models(models)
               .description(null)

File: springfox-swagger/src/main/java/springfox/documentation/swagger/mappers/ServiceModelToSwaggerMapper.java
Patch:
@@ -54,7 +54,8 @@ public interface ServiceModelToSwaggerMapper {
   ModelDto toSwaggerModelDto(Model from);
 
   @Mappings({
-          @Mapping(target = "swaggerVersion", constant = "1.2")
+       @Mapping(target = "swaggerVersion", constant = "1.2"),
+       @Mapping(target = "authorizations", source = "securityReferences")
   })
   ApiListing toSwaggerApiListing(springfox.documentation.service.ApiListing from);
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/common/SwaggerPluginSupport.java
Patch:
@@ -19,15 +19,15 @@
 
 package springfox.documentation.swagger.common;
 
+import org.springframework.core.Ordered;
 import springfox.documentation.spi.DocumentationType;
 
 public class SwaggerPluginSupport {
   private SwaggerPluginSupport() {
     throw new UnsupportedOperationException();
   }
 
-  public static final String DOCUMENTATION_BASE_PATH = "/api-docs";
-
+  public final static int SWAGGER_PLUGIN_ORDER = Ordered.HIGHEST_PRECEDENCE + 50;
   public static boolean pluginDoesApply(DocumentationType documentationType) {
     return DocumentationType.SWAGGER_12.equals(documentationType) || DocumentationType.SWAGGER_2.equals(documentationType);
   }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationAuthReader.java
Patch:
@@ -24,6 +24,7 @@
 import com.wordnik.swagger.annotations.AuthorizationScope;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;
 import org.springframework.web.method.HandlerMethod;
@@ -41,6 +42,7 @@
 import static com.google.common.collect.Lists.*;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationAuthReader implements OperationBuilderPlugin {
 
   private static final Logger LOG = LoggerFactory.getLogger(OperationAuthReader.class);

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationHiddenReader.java
Patch:
@@ -20,6 +20,7 @@
 package springfox.documentation.swagger.readers.operation;
 
 import com.wordnik.swagger.annotations.ApiOperation;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;
 import springfox.documentation.spi.DocumentationType;
@@ -28,6 +29,7 @@
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationHiddenReader implements OperationBuilderPlugin {
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationHttpMethodReader.java
Patch:
@@ -22,6 +22,7 @@
 import com.wordnik.swagger.annotations.ApiOperation;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -32,6 +33,7 @@
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationHttpMethodReader implements OperationBuilderPlugin {
   private static final Logger log = LoggerFactory.getLogger(OperationHttpMethodReader.class);
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.common.collect.Lists;
 import com.wordnik.swagger.annotations.ApiImplicitParam;
 import org.springframework.core.annotation.AnnotationUtils;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;
 import springfox.documentation.builders.ParameterBuilder;
@@ -38,6 +39,7 @@
 
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationImplicitParameterReader implements OperationBuilderPlugin {
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationImplicitParametersReader.java
Patch:
@@ -23,6 +23,7 @@
 import com.wordnik.swagger.annotations.ApiImplicitParam;
 import com.wordnik.swagger.annotations.ApiImplicitParams;
 import org.springframework.core.annotation.AnnotationUtils;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;
 import springfox.documentation.service.Parameter;
@@ -35,6 +36,7 @@
 import java.util.List;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationImplicitParametersReader implements OperationBuilderPlugin {
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationNotesReader.java
Patch:
@@ -20,6 +20,7 @@
 package springfox.documentation.swagger.readers.operation;
 
 import com.wordnik.swagger.annotations.ApiOperation;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;
 import org.springframework.web.method.HandlerMethod;
@@ -29,6 +30,7 @@
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationNotesReader implements OperationBuilderPlugin {
   @Override
   public void apply(OperationContext context) {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationPositionReader.java
Patch:
@@ -22,13 +22,15 @@
 import com.wordnik.swagger.annotations.ApiOperation;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.OperationBuilderPlugin;
 import springfox.documentation.spi.service.contexts.OperationContext;
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationPositionReader implements OperationBuilderPlugin {
 
   private static final Logger log = LoggerFactory.getLogger(OperationPositionReader.class);

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationResponseClassReader.java
Patch:
@@ -24,6 +24,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;
 import springfox.documentation.schema.ModelRef;
@@ -41,6 +42,7 @@
 import static springfox.documentation.swagger.annotations.Annotations.*;
 
 @Component("swaggerOperationClassReader")
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationResponseClassReader implements OperationBuilderPlugin {
   private static Logger log = LoggerFactory.getLogger(OperationResponseClassReader.class);
   private final TypeResolver typeResolver;

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/OperationSummaryReader.java
Patch:
@@ -20,6 +20,7 @@
 package springfox.documentation.swagger.readers.operation;
 
 import com.wordnik.swagger.annotations.ApiOperation;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;
 import springfox.documentation.spi.DocumentationType;
@@ -28,6 +29,7 @@
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class OperationSummaryReader implements OperationBuilderPlugin {
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerMediaTypeReader.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.base.Splitter;
 import com.wordnik.swagger.annotations.ApiOperation;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.OperationBuilderPlugin;
@@ -34,6 +35,7 @@
 import static org.springframework.core.annotation.AnnotationUtils.*;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class SwaggerMediaTypeReader implements OperationBuilderPlugin {
   @Override
   public void apply(OperationContext context) {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerOperationModelsProvider.java
Patch:
@@ -27,17 +27,20 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.OperationModelsProviderPlugin;
 import springfox.documentation.spi.service.contexts.RequestMappingContext;
+import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 import static springfox.documentation.spring.web.HandlerMethodReturnTypes.*;
 import static springfox.documentation.swagger.annotations.Annotations.*;
 import static springfox.documentation.swagger.common.SwaggerPluginSupport.*;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class SwaggerOperationModelsProvider implements OperationModelsProviderPlugin {
 
   private static final Logger log = LoggerFactory.getLogger(SwaggerOperationModelsProvider.class);

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/operation/SwaggerResponseMessageReader.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.common.base.Optional;
 import com.wordnik.swagger.annotations.ApiResponse;
 import com.wordnik.swagger.annotations.ApiResponses;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;
 import springfox.documentation.builders.ResponseMessageBuilder;
@@ -38,6 +39,7 @@
 import static com.google.common.collect.Sets.*;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class SwaggerResponseMessageReader implements OperationBuilderPlugin {
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterAccessReader.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.ParameterBuilderPlugin;
@@ -30,6 +31,7 @@
 import static com.google.common.base.Strings.*;
 
 @Component("swaggerParameterAccessReader")
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class ParameterAccessReader implements ParameterBuilderPlugin {
   @Override
   public void apply(ParameterContext context) {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterAllowableReader.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.Enums;
 import springfox.documentation.service.AllowableValues;
@@ -35,6 +36,7 @@
 import static com.google.common.base.Strings.*;
 
 @Component("swaggerParameterAllowableReader")
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class ParameterAllowableReader implements ParameterBuilderPlugin {
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterDefaultReader.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.ValueConstants;
 import springfox.documentation.spi.DocumentationType;
@@ -34,6 +35,7 @@
 import static org.springframework.util.StringUtils.*;
 
 @Component("swaggerParameterDefaultReader")
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class ParameterDefaultReader implements ParameterBuilderPlugin {
   @Override
   public void apply(ParameterContext context) {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterDescriptionReader.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.ParameterBuilderPlugin;
@@ -30,6 +31,7 @@
 import static org.springframework.util.StringUtils.*;
 
 @Component("swaggerParameterDescriptionReader")
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class ParameterDescriptionReader implements ParameterBuilderPlugin {
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterMultiplesReader.java
Patch:
@@ -21,13 +21,15 @@
 
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.ParameterBuilderPlugin;
 import springfox.documentation.spi.service.contexts.ParameterContext;
 import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 @Component("swaggerParameterMultiplesReader")
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class ParameterMultiplesReader implements ParameterBuilderPlugin {
   @Override
   public void apply(ParameterContext context) {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterNameReader.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.common.base.Optional;
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.ParameterBuilderPlugin;
@@ -32,6 +33,7 @@
 import static org.springframework.util.StringUtils.*;
 
 @Component("swaggerParameterNameReader")
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class ParameterNameReader implements ParameterBuilderPlugin {
 
   private ParameterAnnotationReader annotations = new ParameterAnnotationReader();

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/ParameterRequiredReader.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.common.base.Optional;
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.service.ParameterBuilderPlugin;
@@ -31,6 +32,7 @@
 import java.lang.annotation.Annotation;
 
 @Component("swaggerParameterRequiredReader")
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class ParameterRequiredReader implements ParameterBuilderPlugin {
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/readers/parameter/SwaggerExpandedParameterBuilder.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.common.base.Optional;
 import com.wordnik.swagger.annotations.ApiModelProperty;
 import com.wordnik.swagger.annotations.ApiParam;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.ModelRef;
 import springfox.documentation.service.AllowableListValues;
@@ -43,6 +44,7 @@
 import static com.google.common.collect.Lists.*;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class SwaggerExpandedParameterBuilder implements ExpandedParameterBuilderPlugin {
 
   @Override

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelBuilder.java
Patch:
@@ -23,14 +23,17 @@
 import com.wordnik.swagger.annotations.ApiModel;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.core.annotation.AnnotationUtils;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.schema.ModelBuilderPlugin;
 import springfox.documentation.spi.schema.contexts.ModelContext;
+import springfox.documentation.swagger.common.SwaggerPluginSupport;
 
 import static springfox.documentation.swagger.common.SwaggerPluginSupport.*;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class ApiModelBuilder implements ModelBuilderPlugin {
   private final TypeResolver typeResolver;
 

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelPropertyPropertyBuilder.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.google.common.base.Optional;
 import com.wordnik.swagger.annotations.ApiModelProperty;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.spi.DocumentationType;
 import springfox.documentation.spi.schema.ModelPropertyBuilderPlugin;
@@ -31,6 +32,7 @@
 import static springfox.documentation.swagger.schema.ApiModelProperties.*;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class ApiModelPropertyPropertyBuilder implements ModelPropertyBuilderPlugin {
   @Override
   public void apply(ModelPropertyContext context) {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/schema/ApiModelTypeNameProvider.java
Patch:
@@ -20,6 +20,7 @@
 package springfox.documentation.swagger.schema;
 
 import com.wordnik.swagger.annotations.ApiModel;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import springfox.documentation.schema.DefaultTypeNameProvider;
 import springfox.documentation.spi.DocumentationType;
@@ -30,6 +31,7 @@
 import static org.springframework.core.annotation.AnnotationUtils.*;
 
 @Component
+@Order(SwaggerPluginSupport.SWAGGER_PLUGIN_ORDER)
 public class ApiModelTypeNameProvider extends DefaultTypeNameProvider {
   @Override
   public String nameFor(Class<?> type) {

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/annotations/Annotations.java
Patch:
@@ -23,15 +23,15 @@
 import com.fasterxml.classmate.TypeResolver;
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
-import com.sun.tools.javac.util.List;
 import com.wordnik.swagger.annotations.ApiOperation;
 import com.wordnik.swagger.annotations.ApiParam;
 import com.wordnik.swagger.annotations.ApiResponses;
 
 import java.lang.reflect.AnnotatedElement;
+import java.util.List;
 import java.util.Set;
 
-import static com.google.common.base.Optional.fromNullable;
+import static com.google.common.base.Optional.*;
 import static org.springframework.core.annotation.AnnotationUtils.*;
 
 public class Annotations {
@@ -54,7 +54,7 @@ public static Optional<ApiResponses> findApiResponsesAnnotations(AnnotatedElemen
 
 
   public static Function<ApiOperation, ResolvedType> resolvedTypeFromOperation(final TypeResolver typeResolver,
-      final ResolvedType defaultType) {
+                                                                               final ResolvedType defaultType) {
     return new Function<ApiOperation, ResolvedType>() {
       @Override
       public ResolvedType apply(ApiOperation annotation) {

File: springfox-swagger/src/main/java/springfox/documentation/swagger/dto/DataType.java
Patch:
@@ -38,7 +38,7 @@ public DataType(String initialType) {
 
   public SwaggerDataType typeFromDataType(String initialType) {
 
-    if (isOfType(initialType, "void")) {
+    if (isOfType(initialType.toLowerCase(), "void")) {
       return new PrimitiveDataType("void");
     }
     if (isOfType(initialType, "int")) {

File: springfox-core/src/main/java/springfox/documentation/builders/ResourceListingBuilder.java
Patch:
@@ -63,7 +63,7 @@ public ResourceListingBuilder apis(List<ApiListingReference> apis) {
    * @param authorizations - security definitiosn
    * @return this
    */
-  public ResourceListingBuilder authorizations(List<AuthorizationType> authorizations) {
+  public ResourceListingBuilder authorizations(List<? extends AuthorizationType> authorizations) {
     this.authorizations.addAll(nullToEmptyList(authorizations));
     return this;
   }

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContext.java
Patch:
@@ -52,7 +52,7 @@ public class DocumentationContext {
   private final ResourceGroupingStrategy resourceGroupingStrategy;
   private final PathProvider pathProvider;
   private final AuthorizationContext authorizationContext;
-  private final List<AuthorizationType> authorizationTypes;
+  private final List<? extends AuthorizationType> authorizationTypes;
   private final Ordering<ApiListingReference> listingReferenceOrdering;
   private final Ordering<ApiDescription> apiDescriptionOrdering;
   private final Ordering<Operation> operationOrdering;
@@ -70,7 +70,7 @@ public DocumentationContext(DocumentationType documentationType,
                               ResourceGroupingStrategy resourceGroupingStrategy,
                               PathProvider pathProvider,
                               AuthorizationContext authorizationContext,
-                              List<AuthorizationType> authorizationTypes,
+                              List<? extends AuthorizationType> authorizationTypes,
                               List<AlternateTypeRule> alternateTypeRules,
                               Ordering<ApiListingReference> listingReferenceOrdering,
                               Ordering<ApiDescription> apiDescriptionOrdering,
@@ -141,7 +141,7 @@ public AuthorizationContext getAuthorizationContext() {
     return authorizationContext;
   }
 
-  public List<AuthorizationType> getAuthorizationTypes() {
+  public List<? extends AuthorizationType> getAuthorizationTypes() {
     return authorizationTypes;
   }
 

File: springfox-spi/src/main/java/springfox/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -59,7 +59,7 @@ public class DocumentationContextBuilder {
   private ResourceGroupingStrategy resourceGroupingStrategy;
   private PathProvider pathProvider;
   private AuthorizationContext authorizationContext;
-  private List<AuthorizationType> authorizationTypes;
+  private List<? extends AuthorizationType> authorizationTypes;
   private Ordering<ApiListingReference> listingReferenceOrdering;
   private Ordering<ApiDescription> apiDescriptionOrdering;
   private DocumentationType documentationType;
@@ -121,7 +121,7 @@ public DocumentationContextBuilder authorizationContext(AuthorizationContext aut
     return this;
   }
 
-  public DocumentationContextBuilder authorizationTypes(List<AuthorizationType> authorizationTypes) {
+  public DocumentationContextBuilder authorizationTypes(List<? extends AuthorizationType> authorizationTypes) {
     this.authorizationTypes = authorizationTypes;
     return this;
   }

File: springfox-spring-web/src/main/java/springfox/documentation/spring/web/plugins/Docket.java
Patch:
@@ -67,7 +67,7 @@ public class Docket implements DocumentationPlugin {
   private ApiInfo apiInfo;
   private PathProvider pathProvider;
   private AuthorizationContext authorizationContext;
-  private List<AuthorizationType> authorizationMethods;
+  private List<? extends AuthorizationType> authorizationMethods;
   private Ordering<ApiListingReference> apiListingReferenceOrdering;
   private Ordering<ApiDescription> apiDescriptionOrdering;
   private Ordering<Operation> operationOrdering;
@@ -107,7 +107,7 @@ public Docket apiInfo(ApiInfo apiInfo) {
    * @param authorizationTypes a list of global AuthorizationType's
    * @return this DocumentationConfigurer
    */
-  public Docket authorizationTypes(List<AuthorizationType> authorizationTypes) {
+  public Docket authorizationTypes(List<? extends AuthorizationType> authorizationTypes) {
     this.authorizationMethods = authorizationTypes;
     return this;
   }

File: springfox-swagger/src/main/java/springfox/documentation/swagger/web/DefaultSwaggerController.java
Patch:
@@ -43,7 +43,7 @@
 
 @Controller
 @ApiIgnore
-@RequestMapping("${springfox.documentatation.swagger.v1.path:/api-docs}")
+@RequestMapping("${springfox.documentation.swagger.v1.path:/api-docs}")
 public class DefaultSwaggerController {
 
 

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -47,7 +47,7 @@ public class Swagger2Controller {
   private ServiceModelToSwagger2Mapper mapper;
 
   @ApiIgnore
-  @RequestMapping(value = "${springfox.documentatation.swagger.v2.path:/v2/api-docs}", method = RequestMethod.GET)
+  @RequestMapping(value = "${springfox.documentation.swagger.v2.path:/v2/api-docs}", method = RequestMethod.GET)
   public
   @ResponseBody
   ResponseEntity<Swagger> getDocumentation(

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/configuration/SwaggerCommonConfiguration.java
Patch:
@@ -19,10 +19,10 @@
 
 package springfox.documentation.swagger.configuration;
 
-import org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
 
 @Configuration
 @ComponentScan(basePackages = {
@@ -32,7 +32,7 @@
 })
 public class SwaggerCommonConfiguration {
    @Bean
-   public PropertyPlaceholderConfigurer propertiesSupport() {
-      return new PropertyPlaceholderConfigurer();
+   public PropertySourcesPlaceholderConfigurer swaggerProperties() {
+      return new PropertySourcesPlaceholderConfigurer();
    }
 }

File: springfox-swagger-common/src/main/java/springfox/documentation/swagger/common/SwaggerPluginSupport.java
Patch:
@@ -26,7 +26,7 @@ private SwaggerPluginSupport() {
     throw new UnsupportedOperationException();
   }
 
-  public static final String DOCUMENTATION_BASE_PATH = "/v1/api-docs";
+  public static final String DOCUMENTATION_BASE_PATH = "/api-docs";
 
   public static boolean pluginDoesApply(DocumentationType documentationType) {
     return DocumentationType.SWAGGER_12.equals(documentationType) || DocumentationType.SWAGGER_2.equals(documentationType);

File: springfox-swagger/src/main/java/springfox/documentation/swagger/web/DefaultSwaggerController.java
Patch:
@@ -34,7 +34,6 @@
 import springfox.documentation.annotations.ApiIgnore;
 import springfox.documentation.service.Documentation;
 import springfox.documentation.spring.web.DocumentationCache;
-import springfox.documentation.swagger.common.SwaggerPluginSupport;
 import springfox.documentation.swagger.dto.ApiListing;
 import springfox.documentation.swagger.dto.ResourceListing;
 import springfox.documentation.swagger.mappers.Mappers;
@@ -44,6 +43,7 @@
 
 @Controller
 @ApiIgnore
+@RequestMapping("${springfox.documentatation.swagger.v1.path:/api-docs}")
 public class DefaultSwaggerController {
 
 
@@ -54,7 +54,7 @@ public class DefaultSwaggerController {
   private ServiceModelToSwaggerMapper mapper;
 
   @ApiIgnore
-  @RequestMapping(value = {SwaggerPluginSupport.DOCUMENTATION_BASE_PATH}, method = RequestMethod.GET)
+  @RequestMapping(method = RequestMethod.GET)
   public
   @ResponseBody
   ResponseEntity<ResourceListing> getResourceListing(
@@ -64,7 +64,7 @@ ResponseEntity<ResourceListing> getResourceListing(
   }
 
   @ApiIgnore
-  @RequestMapping(value = {SwaggerPluginSupport.DOCUMENTATION_BASE_PATH + "/{swaggerGroup}/{apiDeclaration}"}, method = RequestMethod.GET)
+  @RequestMapping(value = {"/{swaggerGroup}/{apiDeclaration}"}, method = RequestMethod.GET)
   public
   @ResponseBody
   ResponseEntity<ApiListing> getApiListing(@PathVariable String swaggerGroup, @PathVariable String apiDeclaration) {

File: springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -39,7 +39,6 @@
 @Controller
 @ApiIgnore
 public class Swagger2Controller {
-  public static final String DOCUMENTATION_BASE_PATH = "/v2/api-docs";
 
   @Autowired
   private DocumentationCache documentationCache;
@@ -48,7 +47,7 @@ public class Swagger2Controller {
   private ServiceModelToSwagger2Mapper mapper;
 
   @ApiIgnore
-  @RequestMapping(value = {DOCUMENTATION_BASE_PATH}, method = RequestMethod.GET)
+  @RequestMapping(value = "${springfox.documentatation.swagger.v2.path:/v2/api-docs}", method = RequestMethod.GET)
   public
   @ResponseBody
   ResponseEntity<Swagger> getDocumentation(

File: springfox-schema/src/main/java/springfox/documentation/schema/property/field/FieldModelPropertyProvider.java
Patch:
@@ -20,6 +20,7 @@
 package springfox.documentation.schema.property.field;
 
 import com.fasterxml.classmate.ResolvedType;
+import com.fasterxml.classmate.TypeResolver;
 import com.fasterxml.classmate.members.ResolvedField;
 import com.fasterxml.jackson.databind.BeanDescription;
 import com.fasterxml.jackson.databind.DeserializationConfig;
@@ -103,7 +104,7 @@ private ModelProperty modelPropertyFrom(ResolvedField childField, String fieldNa
             .allowableValues(fieldModelProperty.allowableValues())
             .modelRef(modelRef(fieldModelProperty.getType(), ModelContext.fromParent(modelContext, fieldModelProperty.getType())));
     return schemaPluginsManager.property(new ModelPropertyContext(propertyBuilder,
-            childField.getRawMember(), modelContext.getDocumentationType()));
+            childField.getRawMember(), new TypeResolver(), modelContext.getDocumentationType()));
   }
 
   @Override

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -95,6 +95,8 @@ public Set<Class> defaultIgnorableParameterTypes() {
     HashSet<Class> ignored = newHashSet();
     ignored.add(ServletRequest.class);
     ignored.add(Class.class);
+    ignored.add(Void.class);
+    ignored.add(Void.TYPE);
     ignored.add(HttpHeaders.class);
     ignored.add(ServletResponse.class);
     ignored.add(HttpServletRequest.class);

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/SwaggerApiResourceListing.java
Patch:
@@ -63,7 +63,7 @@ public void initialize() {
       Map<ResourceGroup, List<RequestMappingContext>> resourceGroupRequestMappings =
               apiListingReferenceScanner.getResourceGroupRequestMappings();
       ApiListingScanner apiListingScanner = new ApiListingScanner(resourceGroupRequestMappings, swaggerPathProvider,
-              modelProvider, authorizationContext, customAnnotationReaders, requestMappingEvaluator);
+              modelProvider, authorizationContext, customAnnotationReaders, requestMappingEvaluator, this.apiVersion);
 
       apiListingScanner.setApiDescriptionOrdering(apiDescriptionOrdering);
       apiListingScanner.setSwaggerGlobalSettings(swaggerGlobalSettings);

File: springdox-swagger2/src/main/java/springdox/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -18,6 +18,7 @@
 import javax.servlet.ServletRequest;
 
 @Controller
+@ApiIgnore
 public class Swagger2Controller {
   public static final String DOCUMENTATION_BASE_PATH = "/v2/api-docs";
 

File: swagger-models/src/main/java/com/mangofactory/swagger/models/dto/AllowableListValues.java
Patch:
@@ -1,12 +1,14 @@
 package com.mangofactory.swagger.models.dto;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 import java.util.List;
 
 public class AllowableListValues implements AllowableValues {
   @JsonProperty("enum")
+  @JsonInclude(value = JsonInclude.Include.NON_EMPTY)
   private final List<String> values;
   @JsonIgnore
   private final String valueType;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterBuilder.java
Patch:
@@ -16,7 +16,7 @@
 import static com.google.common.base.Optional.*;
 import static com.google.common.base.Strings.*;
 import static com.google.common.collect.Lists.*;
-import static com.mangofactory.swagger.readers.operation.parameter.ParameterAllowableReader.*;
+import static com.mangofactory.swagger.models.property.ApiModelProperties.*;
 
 class ParameterBuilder {
 

File: swagger-models/src/main/java/com/mangofactory/swagger/models/dto/ReferenceDataType.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.models.dto;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonProperty;
 
 public class ReferenceDataType implements SwaggerDataType {
@@ -15,6 +16,7 @@ public String getReference() {
   }
 
   @Override
+  @JsonIgnore
   public String getAbsoluteType() {
     return reference;
   }

File: mangodocs-schema/src/main/java/com/mangofactory/documentation/schema/Collections.java
Patch:
@@ -14,9 +14,9 @@ private Collections() {
 
   public static ResolvedType collectionElementType(ResolvedType type) {
     if (List.class.isAssignableFrom(type.getErasedType())) {
-      return Collections.elementType(type, List.class);
+      return elementType(type, List.class);
     } else if (Set.class.isAssignableFrom(type.getErasedType())) {
-      return Collections.elementType(type, Set.class);
+      return elementType(type, Set.class);
     } else if (type.isArray()) {
       return type.getArrayElementType();
     } else {

File: mangodocs-schema/src/main/java/com/mangofactory/documentation/schema/TypeNameExtractor.java
Patch:
@@ -47,8 +47,8 @@ private ResolvedType asResolved(Type type) {
 
   private String genericTypeName(ResolvedType resolvedType, DocumentationType documentationType) {
     Class<?> erasedType = resolvedType.getErasedType();
-    String simpleName = fromNullable(typeNameFor(erasedType))
-            .or(pluginsManager.typeName(new ModelNameContext(resolvedType.getErasedType(), documentationType)));
+    ModelNameContext nameContext = new ModelNameContext(resolvedType.getErasedType(), documentationType);
+    String simpleName = fromNullable(typeNameFor(erasedType)).or(pluginsManager.typeName(nameContext));
     StringBuilder sb = new StringBuilder(String.format("%s%s", simpleName, namingStrategy.getOpenGeneric()));
     boolean first = true;
     for (int index = 0; index < erasedType.getTypeParameters().length; index++) {

File: mangodocs-spi/src/main/java/com/mangofactory/documentation/spi/service/OperationBuilderPlugin.java
Patch:
@@ -5,5 +5,5 @@
 import org.springframework.plugin.core.Plugin;
 
 public interface OperationBuilderPlugin extends Plugin<DocumentationType> {
-  public void apply(OperationContext context);
+  void apply(OperationContext context);
 }

File: mangodocs-spi/src/main/java/com/mangofactory/documentation/spi/service/OperationModelsProviderPlugin.java
Patch:
@@ -5,5 +5,5 @@
 import org.springframework.plugin.core.Plugin;
 
 public interface OperationModelsProviderPlugin extends Plugin<DocumentationType> {
-  public void apply(RequestMappingContext context);
+  void apply(RequestMappingContext context);
 }

File: mangodocs-spi/src/main/java/com/mangofactory/documentation/spi/service/contexts/Defaults.java
Patch:
@@ -90,7 +90,6 @@ public List<AlternateTypeRule> defaultRules(TypeResolver typeResolver) {
             typeResolver.resolve(Object.class)));
     rules.add(newRule(typeResolver.resolve(Map.class, String.class, String.class),
             typeResolver.resolve(Object.class)));
-    rules.add(newMapRule(WildcardType.class, WildcardType.class));
 
     rules.add(newRule(typeResolver.resolve(ResponseEntity.class, WildcardType.class),
             typeResolver.resolve(WildcardType.class)));

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/SpringMvcDocumentationConfiguration.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.mangofactory.documentation.schema.configuration.ModelsConfiguration;
 import com.mangofactory.documentation.spi.service.ApiListingBuilderPlugin;
+import com.mangofactory.documentation.spi.service.DefaultsProviderPlugin;
 import com.mangofactory.documentation.spi.service.DocumentationPlugin;
 import com.mangofactory.documentation.spi.service.OperationBuilderPlugin;
 import com.mangofactory.documentation.spi.service.OperationModelsProviderPlugin;
@@ -29,7 +30,8 @@
         ParameterBuilderPlugin.class,
         ExpandedParameterBuilderPlugin.class,
         ResourceGroupingStrategy.class,
-        OperationModelsProviderPlugin.class})
+        OperationModelsProviderPlugin.class,
+        DefaultsProviderPlugin.class})
 public class SpringMvcDocumentationConfiguration {
 
   @Bean

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/plugins/DocumentationConfigurer.java
Patch:
@@ -364,7 +364,6 @@ public DocumentationContext configure(DocumentationContextBuilder builder) {
     }
     return builder
             .apiInfo(apiInfo)
-            .documentationType(documentationType)
             .applyDefaultResponseMessages(applyDefaultResponseMessages)
             .additionalResponseMessages(responseMessages)
             .additionalIgnorableTypes(ignorableParameterTypes)

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/configuration/SwaggerSpringMvcDocumentationConfiguration.java
Patch:
@@ -6,7 +6,7 @@
 import org.springframework.context.annotation.Import;
 
 @Configuration
-@Import({ SpringMvcDocumentationConfiguration.class, SwaggerCommonConfiguration.class, JacksonSwaggerSupport.class })
+@Import({SpringMvcDocumentationConfiguration.class, SwaggerCommonConfiguration.class, JacksonSwaggerSupport.class})
 @ComponentScan(basePackages = {
         "com.mangofactory.documentation.swagger.schema",
         "com.mangofactory.documentation.swagger.web",

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -94,6 +94,7 @@ public SwaggerCache swaggerCache() {
   public Set<Class> defaultIgnorableParameterTypes() {
     HashSet<Class> ignored = newHashSet();
     ignored.add(ServletRequest.class);
+    ignored.add(Class.class);
     ignored.add(HttpHeaders.class);
     ignored.add(ServletResponse.class);
     ignored.add(HttpServletRequest.class);

File: swagger-models/src/main/java/com/mangofactory/swagger/models/DefaultModelProvider.java
Patch:
@@ -60,7 +60,7 @@ public com.google.common.base.Optional<Model> modelFor(ModelContext modelContext
                       .required(each.isRequired())
                       .description(each.propertyDescription())
                       .allowableValues(each.allowableValues())
-                      .iItems(itemModelRef(each.getType()))
+                      .items(itemModelRef(each.getType()))
                       .build()
                     );
     }

File: swagger-models/src/main/java/com/mangofactory/swagger/models/ResolvedTypes.java
Patch:
@@ -33,7 +33,7 @@ public static void setNamingStrategy(GenericTypeNamingStrategy strategy) {
 
   public static String typeName(ResolvedType type) {
     if (isContainerType(type)) {
-      return containerType(type);
+      return propertyContainerType(type);
     }
     return innerTypeName(type);
   }

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/readers/operation/OperationParameterRequestConditionReader.java
Patch:
@@ -46,7 +46,6 @@ public void apply(OperationContext context) {
               .required(true)
               .allowMultiple(false)
               .type(resolver.resolve(String.class))
-              .dataType("string")
               .modelRef(new ModelRef("string"))
               .allowableValues(new AllowableListValues(newArrayList(expression.getValue()), "string"))
               .parameterType("query")

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/readers/parameter/ExpandedParameterBuilder.java
Patch:
@@ -41,7 +41,6 @@ public void apply(ParameterExpansionContext context) {
             .required(Boolean.FALSE)
             .allowMultiple(Boolean.FALSE)
             .type(resolver.resolve(context.getField().getType()))
-            .dataType(context.getDataTypeName())
             .modelRef(new ModelRef(context.getDataTypeName()))
             .allowableValues(allowable)
             .parameterType("query")

File: mangodocs-swagger-common/src/main/java/com/mangofactory/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -50,7 +50,6 @@ public static Parameter getImplicitParameter(ApiImplicitParam param) {
             .defaultValue(param.defaultValue())
             .required(param.required())
             .allowMultiple(param.allowMultiple())
-            .dataType(param.dataType())
             .modelRef(new ModelRef(param.dataType()))
             .allowableValues(allowableValueFromString(param.allowableValues()))
             .parameterType(param.paramType())

File: mangodocs-swagger-common/src/main/java/com/mangofactory/documentation/swagger/readers/parameter/SwaggerExpandedParameterBuilder.java
Patch:
@@ -56,7 +56,6 @@ private void fromApiParam(ParameterExpansionContext context, ApiParam apiParam)
             .defaultValue(apiParam.defaultValue())
             .required(apiParam.required())
             .allowMultiple(apiParam.allowMultiple())
-            .dataType(context.getDataTypeName())
             .modelRef(new ModelRef(context.getDataTypeName()))
             .allowableValues(allowable)
             .parameterType("query")
@@ -76,7 +75,6 @@ private void fromApiModelProperty(ParameterExpansionContext context, ApiModelPro
             .defaultValue(null)
             .required(apiModelProperty.required())
             .allowMultiple(Boolean.FALSE)
-            .dataType(context.getDataTypeName())
             .modelRef(new ModelRef(context.getDataTypeName()))
             .allowableValues(allowable).parameterType("query")
             .parameterAccess(apiModelProperty.access())

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger2/mappers/LicenseMapper.java
Patch:
@@ -11,9 +11,9 @@
 
 @Mapper
 public abstract class LicenseMapper {
-  
+
   @License
-  public com.wordnik.swagger.models.License fromLicenseUrl(ApiInfo from) {
+  public com.wordnik.swagger.models.License apiInfoToLicense(ApiInfo from) {
     return new com.wordnik.swagger.models.License().name(from.getLicense()).url(from.getLicenseUrl());
   }
 

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -148,7 +148,7 @@ private static boolean isOfType(String initialType, String ofType) {
     return initialType.equalsIgnoreCase(ofType);
   }
 
-  protected Map<String, Model> fromApiListings(Map<String, ApiListing> apiListings) {
+  protected Map<String, Model> modelsFromApiListings(Map<String, ApiListing> apiListings) {
     Map<String, com.mangofactory.documentation.schema.Model> definitions = newHashMap();
     for (ApiListing each : apiListings.values()) {
       definitions.putAll(each.getModels());

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger2/mappers/SecurityMapper.java
Patch:
@@ -30,14 +30,14 @@ public class SecurityMapper {
           .build();
 
   protected Map<String, SecuritySchemeDefinition> toSecuritySchemeDefinitions(ResourceListing from) {
-    return transformValues(uniqueIndex(from.getAuthorizations(), authorizationType()), toSecuritySchemeDefinition());
+    return transformValues(uniqueIndex(from.getAuthorizations(), schemeName()), toSecuritySchemeDefinition());
   }                                           
 
-  protected Function<AuthorizationType, String> authorizationType() {
+  protected Function<AuthorizationType, String> schemeName() {
     return new Function<AuthorizationType, String>() {
       @Override
       public String apply(AuthorizationType input) {
-        return input.getType();
+        return input.getName();
       }
     };
   }

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -65,8 +65,7 @@ public Model mapProperties(com.mangofactory.documentation.schema.Model source) {
   }
 
   public Property mapProperty(ModelProperty source) {
-    String typeName = source.getModelRef().getType();
-    return property(typeName);
+    return modelRefToProperty(source.getModelRef());
   }
 
   static Property modelRefToProperty(ModelRef modelRef) {

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger2/mappers/ParameterMapper.java
Patch:
@@ -81,9 +81,9 @@ private Optional<Parameter> serializableParameter(com.mangofactory.documentation
     if (paramModel.isCollection()) {
       toReturn.setCollectionFormat("csv");
       toReturn.setType("array");
-      toReturn.setItems(property(source.getName(), paramModel.getItemType()));
+      toReturn.setItems(property(paramModel.getItemType()));
     } else {
-      Property property = property(source.getName(), paramModel.getType());
+      Property property = property(paramModel.getType());
       toReturn.setType(property.getType());
       toReturn.setFormat(property.getFormat());
     }

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -70,7 +70,7 @@ public abstract class ServiceModelToSwagger2Mapper {
           @Mapping(target = "consumes", source = "consumes"),
           @Mapping(target = "parameters", source = "parameters"),
           @Mapping(target = "security", source = "authorizations"),
-          @Mapping(target = "responses", source = "responseMessages"),
+          @Mapping(target = "responses", source= "responseMessages"),
           @Mapping(target = "tags", ignore = true),
           @Mapping(target = "vendorExtensions", ignore = true),
           @Mapping(target = "externalDocs", ignore = true)
@@ -120,6 +120,7 @@ protected static Map<String, Response> map(Set<ResponseMessage> from) {
               .schema(responseProperty);
       response.setExamples(Maps.<String, String>newHashMap());
       response.setHeaders(Maps.<String, Property>newHashMap());
+      responses.put(String.valueOf(responseMessage.getCode()), response);
     }
     return responses;
   }

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger2/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -137,7 +137,7 @@ protected Path map(ApiDescription api) {
     Path path = new Path();
     for (com.mangofactory.documentation.service.Operation each : api.getOperations()) {
       Operation operation = map(each);
-      path.set(each.getMethod(), operation);
+      path.set(each.getMethod().toLowerCase(), operation);
     }
     return path;
   }

File: mangodocs-spring-web/src/test/java/com/mangofactory/documentation/spring/web/dummy/DummyClass.java
Patch:
@@ -100,7 +100,7 @@ public void methodAnnotatedWithApiResponse() {
   }
 
   @ApiOperation(value = "SomeVal",
-          authorizations = @Authorization(value = "oauth2",
+          authorizations = @Authorization(value = "oauth2", type = "",
                   scopes = {@AuthorizationScope(scope = "scope", description = "scope description")
                   }))
   public void methodWithAuth() {

File: mangodocs-spring-web/src/test/java/com/mangofactory/documentation/spring/web/dummy/controllers/BusinessService.java
Patch:
@@ -40,7 +40,7 @@ public String getAliasedPathVariable(
 
   @RequestMapping(value = "/businesses/non-aliased/{businessId}", method = RequestMethod.GET)
   @ApiOperation(value = "Find a business by its id",
-          authorizations = @Authorization(value = "oauth2",
+          authorizations = @Authorization(value = "oauth2", type="",
                   scopes = {@AuthorizationScope(scope = "scope", description = "scope description")
                   }))
   public String getNonAliasedPathVariable(

File: mangodocs-spi/src/main/java/com/mangofactory/documentation/spi/DocumentationType.java
Patch:
@@ -5,6 +5,7 @@
 
 public class DocumentationType extends SimplePluginMetadata {
   public static final DocumentationType SWAGGER_12 = new DocumentationType("swagger", "1.2");
+  public static final DocumentationType SWAGGER_2 = new DocumentationType("swagger", "2.0");
   public static final DocumentationType SPRING_WEB = new DocumentationType("spring-web", "1.0");
   private final MediaType mediaType;
 

File: mangodocs-swagger-common/src/main/java/com/mangofactory/documentation/swagger/common/SwaggerPluginSupport.java
Patch:
@@ -7,7 +7,7 @@ private SwaggerPluginSupport() {
     throw new UnsupportedOperationException();
   }
 
-  public static final String DOCUMENTATION_BASE_PATH = "/api-docs";
+  public static final String DOCUMENTATION_BASE_PATH = "/v1/api-docs";
   
   public static boolean pluginDoesApply(DocumentationType documentationType) {
     return DocumentationType.SWAGGER_12.equals(documentationType);

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger2/configuration/Swagger2DocumentationConfiguration.java
Patch:
@@ -9,7 +9,6 @@
 @Import({ SpringMvcDocumentationConfiguration.class })
 @ComponentScan(basePackages = {
         "com.mangofactory.documentation.swagger.schema",
-        "com.mangofactory.documentation.swagger.web",
         "com.mangofactory.documentation.swagger.readers.operation",
         "com.mangofactory.documentation.swagger.readers.parameter",
         "com.mangofactory.documentation.swagger2.web",

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger2/mappers/ModelMapper.java
Patch:
@@ -66,6 +66,9 @@ public Property mapProperty(ModelProperty source) {
   }
 
   static Property modelRefToProperty(ModelRef modelRef) {
+    if (modelRef == null) {
+      return null;
+    }
     Property responseProperty;
     if (modelRef.isCollection()) {
       String itemType = modelRef.getItemType();

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger2/web/Swagger2Controller.java
Patch:
@@ -17,7 +17,7 @@
 
 @Controller
 public class Swagger2Controller {
-  public static final String DOCUMENTATION_BASE_PATH = "/api-docs";
+  public static final String DOCUMENTATION_BASE_PATH = "/v2/api-docs";
 
   @Autowired
   private GroupCache groupCache;

File: mangodocs-core/src/main/java/com/mangofactory/documentation/builders/ParameterBuilder.java
Patch:
@@ -68,12 +68,12 @@ public ParameterBuilder parameterAccess(String paramAccess) {
   }
 
   public ParameterBuilder type(ResolvedType type) {
-    this.type = type;
+    this.type = defaultIfAbsent(type, this.type);
     return this;
   }
 
   public ParameterBuilder modelRef(ModelRef modelRef) {
-    this.modelRef = modelRef;
+    this.modelRef = defaultIfAbsent(modelRef, this.modelRef);
     return this;
   }
   
@@ -86,7 +86,7 @@ private String maybeOverrideName(String aName) {
   }
 
   public Parameter build() {
-    return new Parameter(maybeOverrideName(name), description, defaultValue, required, allowMultiple, dataType, 
+    return new Parameter(maybeOverrideName(name), description, defaultValue, required, allowMultiple,
             modelRef, Optional.fromNullable(type), allowableValues, paramType, paramAccess);
   }
 }
\ No newline at end of file

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/readers/operation/ResponseMessagesReader.java
Patch:
@@ -62,7 +62,7 @@ private void applyReturnTypeOverride(OperationContext context) {
     String message = message(context.getHandlerMethod());
     ModelRef modelRef = null;
     if (!Void.class.equals(returnType.getErasedType()) && !Void.TYPE.equals(returnType.getErasedType())) {
-      ModelContext modelContext = returnValueWithoutContainerType(returnType,
+      ModelContext modelContext = returnValue(returnType,
               context.getDocumentationType(), context.getAlternateTypeProvider());
       modelRef = modelRef(returnType, modelContext);
     }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/dto/Operation.java
Patch:
@@ -120,6 +120,7 @@ public void setNotes(String notes) {
     this.notes = notes;
   }
 
+
   public String getNickname() {
     return nickname;
   }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/dto/mappers/ServiceModelToSwaggerMapper.java
Patch:
@@ -55,7 +55,7 @@ ApiListingReference toSwaggerApiListingReference(com.mangofactory.documentation.
 
   @Mappings({
     @Mapping(target = "parameterType",
-      expression = "java( new com.mangofactory.documentation.swagger.dto.DataType( from.getParameterType()))")
+      expression = "java( dataTypeMapper.operationTypeFromModelRef( from.getModelRef()))")
   })
   Parameter toSwaggerParameter(com.mangofactory.documentation.service.Parameter from);
 

File: mangodocs-schema/src/main/java/com/mangofactory/documentation/schema/property/field/FieldModelPropertyProvider.java
Patch:
@@ -75,17 +75,15 @@ private ModelProperty modelPropertyFrom(ResolvedField childField, String fieldNa
       ModelContext modelContext) {
     FieldModelProperty fieldModelProperty = new FieldModelProperty(fieldName, childField, modelContext
             .getAlternateTypeProvider());
-    String typeName = typeNameExtractor.typeName(fromParent(modelContext, childField.getType()));
     ModelPropertyBuilder propertyBuilder = new ModelPropertyBuilder()
             .name(fieldModelProperty.getName())
             .type(childField.getType())
-            .typeName(typeName)
             .qualifiedType(fieldModelProperty.qualifiedTypeName())
             .position(fieldModelProperty.position())
             .required(fieldModelProperty.isRequired())
             .description(fieldModelProperty.propertyDescription())
             .allowableValues(fieldModelProperty.allowableValues())
-            .modelRef(modelRef(fieldModelProperty.getType(), modelContext));
+            .modelRef(modelRef(fieldModelProperty.getType(), fromParent(modelContext, fieldModelProperty.getType())));
     return schemaPluginsManager.property(new ModelPropertyContext(propertyBuilder,
             childField.getRawMember(), modelContext.getDocumentationType()));
   }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/dto/mappers/ServiceModelToSwaggerMapper.java
Patch:
@@ -41,9 +41,9 @@ ApiListingReference toSwaggerApiListingReference(com.mangofactory.documentation.
 
   @Mappings({
           @Mapping(target = "type",
-                  expression = "java( dataTypeMapper.fromTypeName( from.getTypeName() ) )"),
+                  expression = "java( dataTypeMapper.typeFromModelRef( from.getModelRef() ) )"),
           @Mapping(target = "items",
-                  expression = "java( dataTypeMapper.fromModelRef( from.getModelRef() ) )")
+                  expression = "java( dataTypeMapper.itemTypeFromModelRef( from.getModelRef() ) )")
   })
   ModelPropertyDto toSwaggerModelPropertyDto(ModelProperty from);
 

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger/mappers/ModelMapper.java
Patch:
@@ -62,7 +62,7 @@ public Model resolve(com.mangofactory.documentation.schema.Model source) {
 
 
   public Property resolve(ModelProperty source) {
-    String typeName = source.getTypeName();
+    String typeName = source.getModelRef().getType();
     String name = source.getName();
     return property(name, typeName);
   }

File: mangodocs-schema/src/main/java/com/mangofactory/documentation/schema/TypeNameExtractor.java
Patch:
@@ -43,7 +43,7 @@ public String typeName(ModelContext context) {
     }
     return innerTypeName(type, context.getDocumentationType());
   }
-
+  
   private String optionalContainerTypeQualifierForReturn(ModelContext context) {
     ResolvedType type = asResolved(context.getType());
     if (!context.shouldRenderContainerType()) {

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/dto/mappers/ServiceModelToSwaggerMapper.java
Patch:
@@ -34,7 +34,7 @@ public interface ServiceModelToSwaggerMapper {
           @Mapping(target = "type",
                   expression = "java( dataTypeMapper.fromTypeName( from.getTypeName() ) )"),
           @Mapping(target = "items",
-                  expression = "java( dataTypeMapper.fromModelRef( from.getItems() ) )")
+                  expression = "java( dataTypeMapper.fromModelRef( from.getModelRef() ) )")
   })
   public ModelPropertyDto toSwaggerModelPropertyDto(ModelProperty from);
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/ApiModelReader.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.method.HandlerMethod;
 
 import java.lang.annotation.Annotation;
@@ -182,7 +183,7 @@ private Map<String, Model> readParametersApiModel(HandlerMethodResolver handlerM
     for (int i = 0; i < annotations.length; i++) {
       Annotation[] pAnnotations = annotations[i];
       for (Annotation annotation : pAnnotations) {
-        if (annotation instanceof RequestBody) {
+        if (annotation instanceof RequestBody || annotation instanceof RequestPart) {
           ResolvedMethodParameter pType = parameterTypes.get(i);
           if (!settings.getIgnorableParameterTypes()
                   .contains(pType.getResolvedParameterType().getErasedType())) {

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterTypeReader.java
Patch:
@@ -11,6 +11,7 @@
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestHeader;
 import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RequestPart;
 import org.springframework.web.multipart.MultipartFile;
 
 import java.lang.annotation.Annotation;
@@ -45,6 +46,8 @@ private String findParameterType(MethodParameter methodParameter, ResolvedType p
           return "query";
         } else if (annotation instanceof RequestHeader) {
           return "header";
+        } else if (annotation instanceof RequestPart) {
+          return "form";
         }
       }
     }

File: mangodocs-swagger2/src/main/java/com/mangofactory/documentation/swagger/mappers/ServiceModelToSwagger2Mapper.java
Patch:
@@ -119,7 +119,7 @@ protected Map<String, Response> map(Set<ResponseMessage> from) {
     return responses;
   }
 
-  protected Map<String, Path> map(Map<String, ApiListing> apiListings) {
+  protected Map<String, Path> mapPaths(Map<String, ApiListing> apiListings) {
     Map<String, Path> paths = newHashMap();
     for (ApiListing each : apiListings.values()) {
       for (ApiDescription api : each.getApis()) {

File: mangodocs-core/src/main/java/com/mangofactory/documentation/schema/AlternateTypeRule.java
Patch:
@@ -28,7 +28,7 @@ public AlternateTypeRule(ResolvedType original, ResolvedType alternate) {
   public ResolvedType alternateFor(ResolvedType type) {
     if (appliesTo(type)) {
       if (hasWildcards(original)) {
-        return replaceWildcardsFrom(WildcardType.collectReplaceables(type, original), alternate);
+        return replaceWildcardsFrom(collectReplaceables(type, original), alternate);
       } else {
         return alternate;
       }

File: mangodocs-core/src/main/java/com/mangofactory/documentation/schema/AlternateTypeRules.java
Patch:
@@ -7,6 +7,9 @@
 import java.util.Map;
 
 public class AlternateTypeRules {
+  private AlternateTypeRules() {
+    throw new UnsupportedOperationException();
+  }
 
   /**
    * Helper method to create a new alternate rule.

File: mangodocs-core/src/main/java/com/mangofactory/documentation/service/model/ApiListing.java
Patch:
@@ -54,7 +54,7 @@ public List<String> getConsumes() {
     return consumes;
   }
 
-  public List<String> getProtocol() {
+  public List<String> getProtocols() {
     return protocol;
   }
 

File: mangodocs-core/src/main/java/com/mangofactory/documentation/service/model/Authorization.java
Patch:
@@ -1,15 +1,15 @@
 package com.mangofactory.documentation.service.model;
 
-import com.google.common.collect.Lists;
-
 import java.util.List;
 
+import static com.google.common.collect.Lists.*;
+
 public class Authorization {
   private final String type;
   private final List<AuthorizationScope> scopes;
 
   public Authorization(String type, AuthorizationScope[] scopes) {
-    this.scopes = Lists.newArrayList(scopes);
+    this.scopes = newArrayList(scopes);
     this.type = type;
   }
 

File: mangodocs-core/src/main/java/com/mangofactory/documentation/service/model/builder/ApiDescriptionBuilder.java
Patch:
@@ -30,7 +30,9 @@ public ApiDescriptionBuilder description(String description) {
   }
 
   public ApiDescriptionBuilder operations(List<Operation> operations) {
-    this.operations = operationOrdering.sortedCopy(operations);
+    if (operations != null) {
+      this.operations = operationOrdering.sortedCopy(operations);
+    }
     return this;
   }
 

File: mangodocs-core/src/main/java/com/mangofactory/documentation/service/model/builder/ParameterBuilder.java
Patch:
@@ -53,12 +53,12 @@ public ParameterBuilder allowableValues(AllowableValues allowableValues) {
   }
 
   public ParameterBuilder parameterType(String paramType) {
-    this.paramType = paramType;
+    this.paramType = defaultIfAbsent(paramType, this.paramType);
     return this;
   }
 
   public ParameterBuilder parameterAccess(String paramAccess) {
-    this.paramAccess = paramAccess;
+    this.paramAccess = defaultIfAbsent(paramAccess, this.paramAccess);
     return this;
   }
 

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/RelativePathProvider.java
Patch:
@@ -1,12 +1,10 @@
 package com.mangofactory.documentation.spring.web;
 
-import com.mangofactory.documentation.service.PathProvider;
-
 import javax.servlet.ServletContext;
 
 import static com.google.common.base.Strings.*;
 
-public class RelativePathProvider extends PathProvider {
+public class RelativePathProvider extends AbstractPathProvider {
   public static final String ROOT = "/";
   private final ServletContext servletContext;
 

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/plugins/DefaultConfiguration.java
Patch:
@@ -4,6 +4,7 @@
 import com.mangofactory.documentation.spi.service.contexts.Defaults;
 import com.mangofactory.documentation.spi.service.contexts.DocumentationContextBuilder;
 import com.mangofactory.documentation.spring.web.RelativePathProvider;
+import com.mangofactory.documentation.spring.web.SpringRequestMappingEvaluator;
 import com.mangofactory.documentation.spring.web.scanners.RegexRequestMappingPatternMatcher;
 
 import javax.servlet.ServletContext;
@@ -34,7 +35,8 @@ public void configure(DocumentationContextBuilder builder) {
       .defaultResponseMessages(defaults.defaultResponseMessages())
       .pathProvider(new RelativePathProvider(servletContext))
       .requestMappingPatternMatcher(new RegexRequestMappingPatternMatcher())
-      .typeResolver(typeResolver);
+      .typeResolver(typeResolver)
+      .requestMappingEvaluator(new SpringRequestMappingEvaluator(new RegexRequestMappingPatternMatcher()));
 
   }
 }

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/plugins/DocumentationConfigurer.java
Patch:
@@ -123,7 +123,7 @@ public DocumentationConfigurer groupName(String groupName) {
    *
    * @param pathProvider
    * @return this DocumentationConfigurer
-   * @see PathProvider
+   * @see com.mangofactory.documentation.spring.web.AbstractPathProvider
    */
   public DocumentationConfigurer pathProvider(PathProvider pathProvider) {
     this.pathProvider = pathProvider;
@@ -347,7 +347,7 @@ public DocumentationContext configure(DocumentationContextBuilder builder) {
     }
     return builder
             .apiInfo(apiInfo)
-            .withDocumentationType(documentationType)
+            .documentationType(documentationType)
             .applyDefaultResponseMessages(applyDefaultResponseMessages)
             .additionalResponseMessages(responseMessages)
             .additionalIgnorableTypes(ignorableParameterTypes)

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.java
Patch:
@@ -92,7 +92,7 @@ private DocumentationContextBuilder defaultContextBuilder(DocumentationPlugin ea
     defaultConfigurer.configure(contextBuilder);
     contextBuilder
             .withResourceGroupingStrategy(resourceGroupingStrategy)
-            .withHandlerMappings(handlerMappings);
+            .handlerMappings(handlerMappings);
     return contextBuilder;
   }
 

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/scanners/ApiDescriptionReader.java
Patch:
@@ -1,9 +1,9 @@
 package com.mangofactory.documentation.spring.web.scanners;
 
-import com.mangofactory.documentation.service.model.ApiDescription;
-import com.mangofactory.documentation.service.model.builder.ApiDescriptionBuilder;
 import com.mangofactory.documentation.service.PathProvider;
 import com.mangofactory.documentation.service.RequestMappingEvaluator;
+import com.mangofactory.documentation.service.model.ApiDescription;
+import com.mangofactory.documentation.service.model.builder.ApiDescriptionBuilder;
 import com.mangofactory.documentation.spi.service.contexts.RequestMappingContext;
 import com.mangofactory.documentation.spring.web.Paths;
 import com.mangofactory.documentation.spring.web.readers.operation.ApiOperationReader;

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/scanners/ApiGroupScanner.java
Patch:
@@ -33,8 +33,8 @@ public Group scan(DocumentationContext context) {
     ApiListingScanningContext listingContext = new ApiListingScanningContext(context, result.getResourceGroupRequestMappings());
 
     GroupBuilder group = new GroupBuilder()
-            .withName(context.getGroupName())
-            .withApiListings(apiListingScanner.scan(listingContext));
+            .name(context.getGroupName())
+            .apiListingsByGroup(apiListingScanner.scan(listingContext));
 
     Collections.sort(apiListingReferences, context.getListingReferenceOrdering());
 
@@ -52,7 +52,7 @@ public Group scan(DocumentationContext context) {
 //      String prefix = nullToEmpty(path).startsWith("http") ? path : DOCUMENTATION_BASE_PATH;
 //      log.info("  {} at location: {}{}", path, prefix, apiListingReference.getPath());
 //    }
-    group.withResourceListing(resourceListing);
+    group.resourceListing(resourceListing);
     return group.build();
   }
 

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -80,7 +80,7 @@ public Map<String, ApiListing> scan(ApiListingScanningContext context) {
               .resourcePath(resourcePath)
               .produces(newArrayList(produces))
               .consumes(newArrayList(consumes))
-              .protocol(new ArrayList<String>())
+              .protocols(new ArrayList<String>())
               .authorizations(authorizations)
               .apis(sortedDescriptions)
               .models(models)

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/plugins/DocumentationConfigurer.java
Patch:
@@ -345,6 +345,7 @@ public void configure(DocumentationContextBuilder builder) {
     }
     builder
             .apiInfo(apiInfo)
+            .withDocumentationType(documentationType)
             .applyDefaultResponseMessages(applyDefaultResponseMessages)
             .additionalResponseMessages(responseMessages)
             .additionalIgnorableTypes(ignorableParameterTypes)

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/operation/OperationAuthReader.java
Patch:
@@ -18,6 +18,7 @@
 import java.util.List;
 
 import static com.google.common.collect.Lists.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 
 @Component
 public class OperationAuthReader implements OperationBuilderPlugin {
@@ -74,6 +75,6 @@ public void apply(OperationContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/operation/OperationHiddenReader.java
Patch:
@@ -7,6 +7,8 @@
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;
 
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
+
 @Component
 public class OperationHiddenReader implements OperationBuilderPlugin {
 
@@ -22,6 +24,6 @@ public void apply(OperationContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/operation/OperationHttpMethodReader.java
Patch:
@@ -11,6 +11,8 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.method.HandlerMethod;
 
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
+
 @Component
 public class OperationHttpMethodReader implements OperationBuilderPlugin {
   private static final Logger log = LoggerFactory.getLogger(OperationHttpMethodReader.class);
@@ -34,6 +36,6 @@ public void apply(OperationContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -14,6 +14,7 @@
 import java.lang.reflect.Method;
 import java.util.List;
 
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 import static com.mangofactory.documentation.swagger.readers.parameter.ParameterAllowableReader.*;
 
 
@@ -27,7 +28,7 @@ public void apply(OperationContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 
   protected List<Parameter> readParameters(OperationContext context) {

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/operation/OperationNotesReader.java
Patch:
@@ -8,6 +8,8 @@
 import org.springframework.util.StringUtils;
 import org.springframework.web.method.HandlerMethod;
 
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
+
 @Component
 public class OperationNotesReader implements OperationBuilderPlugin {
   @Override
@@ -22,6 +24,6 @@ public void apply(OperationContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/operation/OperationPositionReader.java
Patch:
@@ -8,6 +8,8 @@
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
 
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
+
 @Component
 public class OperationPositionReader implements OperationBuilderPlugin {
 
@@ -24,6 +26,6 @@ public void apply(OperationContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/operation/OperationResponseClassReader.java
Patch:
@@ -16,6 +16,7 @@
 
 import static com.mangofactory.documentation.spi.schema.contexts.ModelContext.*;
 import static com.mangofactory.documentation.spring.web.HandlerMethodReturnTypes.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 
 @Component("swaggerOperationClassReader")
 public class OperationResponseClassReader implements OperationBuilderPlugin {
@@ -55,6 +56,6 @@ public void apply(OperationContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/operation/OperationSummaryReader.java
Patch:
@@ -7,6 +7,8 @@
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;
 
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
+
 @Component
 public class OperationSummaryReader implements OperationBuilderPlugin {
 
@@ -20,6 +22,6 @@ public void apply(OperationContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/operation/SwaggerMediaTypeReader.java
Patch:
@@ -10,6 +10,7 @@
 import java.util.List;
 
 import static com.google.common.base.Strings.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 import static org.springframework.core.annotation.AnnotationUtils.*;
 
 @Component
@@ -25,7 +26,7 @@ public void apply(OperationContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 
 

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/operation/SwaggerOperationModelsProvider.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.mangofactory.documentation.schema.ResolvedTypes.*;
 import static com.mangofactory.documentation.swagger.annotations.Annotations.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 
 @Component
 public class SwaggerOperationModelsProvider implements OperationModelsProviderPlugin {
@@ -37,7 +38,7 @@ public void apply(RequestMappingContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 
   private void collectFromApiOperation(RequestMappingContext context) {

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/parameter/ParameterAccessReader.java
Patch:
@@ -8,6 +8,7 @@
 import org.springframework.stereotype.Component;
 
 import static com.google.common.base.Strings.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 
 @Component("swaggerParameterAccessReader")
 public class ParameterAccessReader implements ParameterBuilderPlugin {
@@ -23,6 +24,6 @@ public void apply(ParameterContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/parameter/ParameterAllowableReader.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 
 import static com.google.common.collect.Lists.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 import static org.springframework.util.StringUtils.*;
 
 @Component("swaggerParameterAllowableReader")
@@ -63,7 +64,7 @@ public static AllowableValues allowableValueFromString(String allowableValueStri
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 
   private String findAnnotatedAllowableValues(MethodParameter methodParameter) {

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/parameter/ParameterDefaultReader.java
Patch:
@@ -11,6 +11,7 @@
 import java.lang.annotation.Annotation;
 
 import static com.google.common.base.Strings.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 import static org.springframework.util.StringUtils.*;
 
 @Component("swaggerParameterDefaultReader")
@@ -27,7 +28,7 @@ public void apply(ParameterContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 
   private String findAnnotatedDefaultValue(MethodParameter methodParameter) {

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/parameter/ParameterDescriptionReader.java
Patch:
@@ -7,6 +7,7 @@
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;
 
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 import static org.springframework.util.StringUtils.*;
 
 @Component("swaggerParameterDescriptionReader")
@@ -25,6 +26,6 @@ public void apply(ParameterContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/parameter/ParameterMultiplesReader.java
Patch:
@@ -7,6 +7,8 @@
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;
 
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
+
 @Component("swaggerParameterMultiplesReader")
 public class ParameterMultiplesReader implements ParameterBuilderPlugin {
   @Override
@@ -26,6 +28,6 @@ public void apply(ParameterContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/parameter/ParameterNameReader.java
Patch:
@@ -9,6 +9,7 @@
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;
 
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 import static org.springframework.util.StringUtils.*;
 
 @Component("swaggerParameterNameReader")
@@ -37,7 +38,7 @@ public void apply(ParameterContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/parameter/ParameterRequiredReader.java
Patch:
@@ -10,6 +10,8 @@
 
 import java.lang.annotation.Annotation;
 
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
+
 @Component("swaggerParameterRequiredReader")
 public class ParameterRequiredReader implements ParameterBuilderPlugin {
 
@@ -23,7 +25,7 @@ public void apply(ParameterContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 
   private Optional<Boolean> getAnnotatedRequired(MethodParameter methodParameter) {

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/readers/parameter/SwaggerParameterExpander.java
Patch:
@@ -19,6 +19,7 @@
 import static com.google.common.base.Strings.*;
 import static com.google.common.collect.Lists.*;
 import static com.mangofactory.documentation.swagger.annotations.Annotations.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 import static com.mangofactory.documentation.swagger.schema.ApiModelProperties.*;
 import static com.mangofactory.documentation.swagger.readers.parameter.ParameterAllowableReader.*;
 
@@ -39,7 +40,7 @@ public void apply(ParameterExpansionContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 
   private void fromApiParam(ParameterExpansionContext context, ApiParam apiParam) {

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/schema/ApiModelPropertyPropertyBuilder.java
Patch:
@@ -8,10 +8,11 @@
 import org.springframework.stereotype.Component;
 
 import static com.mangofactory.documentation.schema.Annotations.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 import static com.mangofactory.documentation.swagger.schema.ApiModelProperties.*;
 
 @Component
-public class ApiModelPropertyPropertyBuilderPlugin implements ModelPropertyBuilderPlugin {
+public class ApiModelPropertyPropertyBuilder implements ModelPropertyBuilderPlugin {
   @Override
   public void apply(ModelPropertyContext context) {
     Optional<ApiModelProperty> annotation = Optional.absent();
@@ -33,6 +34,6 @@ public void apply(ModelPropertyContext context) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;//TODO
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/schema/ApiModelTypeNameProvider.java
Patch:
@@ -7,6 +7,7 @@
 
 import static com.google.common.base.Optional.*;
 import static com.google.common.base.Strings.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 import static org.springframework.core.annotation.AnnotationUtils.*;
 
 @Component
@@ -23,6 +24,6 @@ public String nameFor(Class<?> type) {
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 }

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/web/ClassOrApiAnnotationResourceGrouping.java
Patch:
@@ -18,6 +18,7 @@
 
 import static com.google.common.base.Strings.*;
 import static com.google.common.collect.Sets.*;
+import static com.mangofactory.documentation.swagger.common.SwaggerPluginSupport.*;
 import static org.springframework.util.StringUtils.*;
 
 @Component
@@ -53,7 +54,7 @@ public Set<ResourceGroup> getResourceGroups(RequestMappingInfo requestMappingInf
 
   @Override
   public boolean supports(DocumentationType delimiter) {
-    return true;
+    return pluginDoesApply(delimiter);
   }
 
   private String getClassOrApiAnnotationValue(HandlerMethod handlerMethod) {

File: mangodocs-core/src/main/java/com/mangofactory/documentation/service/model/builder/LoginEndpointBuilder.java
Patch:
@@ -2,11 +2,13 @@
 
 import com.mangofactory.documentation.service.model.LoginEndpoint;
 
+import static com.mangofactory.documentation.service.model.builder.BuilderDefaults.*;
+
 public class LoginEndpointBuilder {
   private String url;
 
   public LoginEndpointBuilder url(String url) {
-    this.url = url;
+    this.url = defaultIfAbsent(url, this.url);
     return this;
   }
 

File: mangodocs-spi/src/main/java/com/mangofactory/documentation/spi/service/contexts/DocumentationContextBuilder.java
Patch:
@@ -30,7 +30,7 @@
 import static com.google.common.collect.Lists.*;
 import static com.google.common.collect.Maps.*;
 import static com.google.common.collect.Sets.*;
-import static com.mangofactory.documentation.spi.service.contexts.Defaults.*;
+import static com.mangofactory.documentation.service.model.builder.BuilderDefaults.*;
 
 public class DocumentationContextBuilder {
   private final Defaults defaults;
@@ -119,7 +119,8 @@ public DocumentationContextBuilder authorizationTypes(List<AuthorizationType> au
   public DocumentationContextBuilder apiListingReferenceOrdering(
           Ordering<ApiListingReference> listingReferenceOrdering) {
 
-    this.listingReferenceOrdering = defaultIfAbsent(listingReferenceOrdering, this.listingReferenceOrdering);
+    this.listingReferenceOrdering = defaultIfAbsent(listingReferenceOrdering, this
+            .listingReferenceOrdering);
     return this;
   }
 

File: mangodocs-spi/src/main/java/com/mangofactory/documentation/spi/service/contexts/OperationModelContextsBuilder.java
Patch:
@@ -28,7 +28,7 @@ public OperationModelContextsBuilder addReturn(Type type) {
   }
 
   public OperationModelContextsBuilder addInputParam(Type type) {
-    ModelContext inputParam = ModelContext.inputParam(type, documentationType, alternateTypeProvider);
+    ModelContext inputParam = inputParam(type, documentationType, alternateTypeProvider);
     this.contexts.add(inputParam);
     return this;
   }

File: mangodocs-spring-web/src/main/java/com/mangofactory/documentation/spring/web/scanners/ApiListingScanner.java
Patch:
@@ -74,7 +74,7 @@ public Map<String, ApiListing> scan(ApiListingScanningContext context) {
 
       String apiVersion = "1.0";
       PathProvider pathProvider = context.getDocumentationContext().getPathProvider();
-      ApiListingBuilder apiListingBuilder = new ApiListingBuilder()
+      ApiListingBuilder apiListingBuilder = new ApiListingBuilder(context.apiDescriptionOrdering())
               .apiVersion(apiVersion)
               .basePath(pathProvider.getApplicationBasePath())
               .resourcePath(resourcePath)

File: mangodocs-swagger/src/main/java/com/mangofactory/documentation/swagger/dto/ApiListing.java
Patch:
@@ -17,11 +17,12 @@ public class ApiListing {
   private String resourcePath;
   private List<String> produces;
   private List<String> consumes;
+  private List<ApiDescription> apis;
+
   @JsonIgnore
   private List<String> protocol;
   @JsonInclude(Include.NON_EMPTY)
   private List<Authorization> authorizations;
-  private List<ApiDescription> apis;
   @JsonInclude(Include.NON_EMPTY)
   private Map<String, ModelDto> models;
   @JsonIgnore

File: swagger-models/src/main/java/com/mangofactory/schema/DefaultTypeNameProvider.java
Patch:
@@ -2,9 +2,7 @@
 
 import com.mangofactory.schema.plugins.DocumentationType;
 import com.mangofactory.schema.plugins.TypeNameProviderPlugin;
-import org.springframework.stereotype.Component;
 
-@Component
 public class DefaultTypeNameProvider implements TypeNameProviderPlugin {
 
   @Override

File: swagger-models/src/main/java/com/mangofactory/schema/configuration/SwaggerModelsConfiguration.java
Patch:
@@ -18,10 +18,10 @@
 
 @Configuration
 @ComponentScan(basePackages = {
-        "com.mangofactory.schema",
-        "com.mangofactory.swagger.dto.mappers",
         "com.mangofactory.schema.plugins",
-        "com.mangofactory.swagger.plugins"
+        "com.mangofactory.schema",
+        "com.mangofactory.swagger.plugins",
+        "com.mangofactory.swagger.dto.mappers"
 })
 @EnablePluginRegistries({
         ModelBuilderPlugin.class,

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/models/Business.java
Patch:
@@ -1,10 +1,12 @@
 package com.mangofactory.swagger.dummy.models;
 
+import com.wordnik.swagger.annotations.ApiModel;
 import org.joda.time.LocalDate;
 
 import java.util.Date;
 
 
+@ApiModel(value = "Biz")
 public class Business {
    //not private - just for testing
    public int id;

File: swagger-models/src/main/java/com/mangofactory/schema/DefaultGenericTypeNamingStrategy.java
Patch:
@@ -1,8 +1,11 @@
 package com.mangofactory.schema;
 
+import org.springframework.stereotype.Component;
+
 /**
  * Strategy that uses \u00ab, \u00bb, and comma in generic type names
  */
+@Component
 public class DefaultGenericTypeNamingStrategy implements GenericTypeNamingStrategy {
   private static final String OPEN = "«";
   private static final String CLOSE = "»";

File: swagger-models/src/main/java/com/mangofactory/schema/property/ModelProperty.java
Patch:
@@ -1,16 +1,13 @@
 package com.mangofactory.schema.property;
 
 import com.fasterxml.classmate.ResolvedType;
-import com.mangofactory.schema.plugins.ModelContext;
 import com.mangofactory.service.model.AllowableValues;
 
 public interface ModelProperty {
   String getName();
 
   ResolvedType getType();
 
-  String typeName(ModelContext modelContext);
-
   String qualifiedTypeName();
 
   AllowableValues allowableValues();

File: swagger-models/src/main/java/com/mangofactory/swagger/dto/mappers/ServiceModelToSwaggerMapper.java
Patch:
@@ -30,7 +30,7 @@ public interface ServiceModelToSwaggerMapper {
 
   @Mappings({
           @Mapping(target = "type",
-                  expression = "java( new com.mangofactory.swagger.dto.DataType( from.typeName() ) )"),
+                  expression = "java( dataTypeMapper.fromResolvedType( from.getType() ) )"),
           @Mapping(target = "items",
                   expression = "java( dataTypeMapper.fromModelRef( from.getItems() ) )")
   })

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/OperationModelsBuilder.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Set;
 
 import static com.google.common.collect.Sets.*;
+import static com.mangofactory.schema.plugins.ModelContext.*;
 
 public class OperationModelsBuilder {
   private final DocumentationType documentationType;
@@ -18,7 +19,7 @@ public OperationModelsBuilder(DocumentationType documentationType) {
   }
 
   public OperationModelsBuilder addReturn(Type type) {
-    ModelContext returnValue = ModelContext.returnValue(type, documentationType);
+    ModelContext returnValue = returnValue(type, documentationType);
     this.contexts.add(returnValue);
     return this;
   }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/SwaggerResponseMessageReader.java
Patch:
@@ -16,7 +16,6 @@
 import java.util.Set;
 
 import static com.google.common.collect.Sets.*;
-import static com.mangofactory.schema.ResolvedTypes.*;
 import static com.mangofactory.swagger.annotations.Annotations.*;
 
 @Component
@@ -63,7 +62,7 @@ protected Set<ResponseMessage> read(HandlerMethod handlerMethod) {
 
   private String overrideTypeName(ApiResponse apiResponse) {
     if (apiResponse.response() != null) {
-      return typeName(typeResolver.resolve(apiResponse.response()));
+      return apiResponse.response().getSimpleName();
     }
     return "";
   }

File: swagger-contract-tests/src/main/groovy/com/mangofactory/test/contract/swagger/Application.java
Patch:
@@ -1,6 +1,6 @@
 package com.mangofactory.test.contract.swagger;
 
-import com.mangofactory.swagger.plugin.EnableSwagger;
+import com.mangofactory.swagger.annotations.EnableSwagger;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.context.annotation.ComponentScan;

File: swagger-models/src/main/java/com/mangofactory/schema/plugins/DocumentationType.java
Patch:
@@ -4,6 +4,7 @@
 import org.springframework.plugin.metadata.SimplePluginMetadata;
 
 public class DocumentationType extends SimplePluginMetadata {
+  public static final DocumentationType SWAGGER_12 = new DocumentationType("swagger", "1.2");
   private final MediaType mediaType;
 
   /**

File: swagger-models/src/main/java/com/mangofactory/schema/property/BeanPropertyDefinitions.java
Patch:
@@ -11,7 +11,6 @@
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
 import com.google.common.collect.FluentIterable;
-import com.mangofactory.schema.BeanPropertyNamingStrategy;
 
 public class BeanPropertyDefinitions {
   private BeanPropertyDefinitions() {

File: swagger-models/src/main/java/com/mangofactory/schema/property/BeanPropertyNamingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.schema;
+package com.mangofactory.schema.property;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;

File: swagger-models/src/main/java/com/mangofactory/schema/property/ObjectMapperBeanPropertyNamingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.schema;
+package com.mangofactory.schema.property;
 
 import com.fasterxml.jackson.databind.DeserializationConfig;
 import com.fasterxml.jackson.databind.ObjectMapper;

File: swagger-models/src/main/java/com/mangofactory/schema/property/bean/BeanModelPropertyProvider.java
Patch:
@@ -15,7 +15,7 @@
 import com.google.common.base.Optional;
 import com.mangofactory.schema.plugins.ModelPropertyContext;
 import com.mangofactory.schema.plugins.SchemaPluginsManager;
-import com.mangofactory.schema.BeanPropertyNamingStrategy;
+import com.mangofactory.schema.property.BeanPropertyNamingStrategy;
 import com.mangofactory.schema.plugins.ModelContext;
 import com.mangofactory.schema.alternates.AlternateTypeProvider;
 import com.mangofactory.schema.property.BeanPropertyDefinitions;

File: swagger-models/src/main/java/com/mangofactory/schema/property/constructor/ConstructorModelPropertyProvider.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
 import com.mangofactory.schema.plugins.SchemaPluginsManager;
-import com.mangofactory.schema.BeanPropertyNamingStrategy;
+import com.mangofactory.schema.property.BeanPropertyNamingStrategy;
 import com.mangofactory.schema.alternates.AlternateTypeProvider;
 import com.mangofactory.schema.property.field.FieldModelPropertyProvider;
 import com.mangofactory.schema.property.field.FieldProvider;

File: swagger-models/src/main/java/com/mangofactory/schema/property/field/FieldModelPropertyProvider.java
Patch:
@@ -14,7 +14,7 @@
 import com.google.common.collect.Maps;
 import com.mangofactory.schema.plugins.ModelPropertyContext;
 import com.mangofactory.schema.plugins.SchemaPluginsManager;
-import com.mangofactory.schema.BeanPropertyNamingStrategy;
+import com.mangofactory.schema.property.BeanPropertyNamingStrategy;
 import com.mangofactory.schema.plugins.ModelContext;
 import com.mangofactory.schema.alternates.AlternateTypeProvider;
 import com.mangofactory.schema.property.BeanPropertyDefinitions;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/ControllerNamingUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.core;
+package com.mangofactory.spring.web;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/GroupCache.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.core;
+package com.mangofactory.spring.web;
 
 import com.google.common.base.Strings;
 import com.google.common.collect.Iterables;
@@ -8,7 +8,7 @@
 
 import static com.google.common.collect.Maps.*;
 
-public class SwaggerCache {
+public class GroupCache {
   private Map<String, Group> groupLookup = newLinkedHashMap();
 
   public void addGroup(Group group) {

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/RelativePathProvider.java
Patch:
@@ -1,14 +1,14 @@
-package com.mangofactory.swagger.paths;
+package com.mangofactory.spring.web;
 
 import javax.servlet.ServletContext;
 
 import static com.google.common.base.Strings.*;
 
-public class RelativeSwaggerPathProvider extends SwaggerPathProvider {
+public class RelativePathProvider extends PathProvider {
   public static final String ROOT = "/";
   private final ServletContext servletContext;
 
-  public RelativeSwaggerPathProvider(ServletContext servletContext) {
+  public RelativePathProvider(ServletContext servletContext) {
     super();
     this.servletContext = servletContext;
   }

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/RequestMappingEvaluator.java
Patch:
@@ -1,6 +1,6 @@
-package com.mangofactory.swagger.core;
+package com.mangofactory.spring.web;
 
-import com.mangofactory.swagger.scanners.RequestMappingPatternMatcher;
+import com.mangofactory.spring.web.scanners.RequestMappingPatternMatcher;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.core.annotation.AnnotationUtils;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/annotations/ApiIgnore.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.annotations;
+package com.mangofactory.spring.web.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/ordering/ApiDescriptionLexicographicalOrdering.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.ordering;
+package com.mangofactory.spring.web.ordering;
 
 import com.google.common.collect.Ordering;
 import com.mangofactory.service.model.ApiDescription;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/ordering/ResourceListingLexicographicalOrdering.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.ordering;
+package com.mangofactory.spring.web.ordering;
 
 import com.google.common.collect.Ordering;
 import com.mangofactory.service.model.ApiListingReference;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/ordering/ResourceListingPositionalOrdering.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.ordering;
+package com.mangofactory.spring.web.ordering;
 
 import com.google.common.collect.Ordering;
 import com.google.common.primitives.Ints;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/ApiListingBuilderPlugin.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.springmvc.plugins;
+package com.mangofactory.spring.web.plugins;
 
 import com.mangofactory.schema.plugins.DocumentationType;
 import org.springframework.plugin.core.Plugin;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/ApiListingContext.java
Patch:
@@ -1,7 +1,7 @@
-package com.mangofactory.springmvc.plugins;
+package com.mangofactory.spring.web.plugins;
 
 import com.mangofactory.service.model.builder.ApiListingBuilder;
-import com.mangofactory.swagger.scanners.ResourceGroup;
+import com.mangofactory.spring.web.scanners.ResourceGroup;
 
 public class ApiListingContext {
   private final DocumentationContext documentationContext;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/AuthorizationContext.java
Patch:
@@ -1,8 +1,8 @@
-package com.mangofactory.swagger.authorization;
+package com.mangofactory.spring.web.plugins;
 
 import com.mangofactory.service.model.Authorization;
-import com.mangofactory.swagger.scanners.RegexRequestMappingPatternMatcher;
-import com.mangofactory.swagger.scanners.RequestMappingPatternMatcher;
+import com.mangofactory.spring.web.scanners.RegexRequestMappingPatternMatcher;
+import com.mangofactory.spring.web.scanners.RequestMappingPatternMatcher;
 import org.springframework.util.CollectionUtils;
 import org.springframework.web.bind.annotation.RequestMethod;
 

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/DocumentationPlugin.java
Patch:
@@ -1,12 +1,12 @@
-package com.mangofactory.springmvc.plugins;
+package com.mangofactory.spring.web.plugins;
 
 import com.mangofactory.schema.plugins.DocumentationType;
 import org.springframework.plugin.core.Plugin;
 
 public interface DocumentationPlugin extends Plugin<DocumentationType> {
   boolean isEnabled();
 
-  String getName();
+  DocumentationType getDocumentationType();
 
   DocumentationContext build(DocumentationContextBuilder builder);
 }

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/OperationBuilderPlugin.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.springmvc.plugins;
+package com.mangofactory.spring.web.plugins;
 
 import com.mangofactory.schema.plugins.DocumentationType;
 import org.springframework.plugin.core.Plugin;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/OperationContext.java
Patch:
@@ -1,9 +1,8 @@
-package com.mangofactory.springmvc.plugins;
+package com.mangofactory.spring.web.plugins;
 
 import com.mangofactory.schema.plugins.DocumentationType;
 import com.mangofactory.service.model.ResponseMessage;
 import com.mangofactory.service.model.builder.OperationBuilder;
-import com.mangofactory.swagger.authorization.AuthorizationContext;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.method.HandlerMethod;
 import org.springframework.web.servlet.mvc.method.RequestMappingInfo;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/ParameterBuilderPlugin.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.springmvc.plugins;
+package com.mangofactory.spring.web.plugins;
 
 import com.mangofactory.schema.plugins.DocumentationType;
 import org.springframework.plugin.core.Plugin;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/ParameterContext.java
Patch:
@@ -1,8 +1,8 @@
-package com.mangofactory.springmvc.plugins;
+package com.mangofactory.spring.web.plugins;
 
 import com.mangofactory.schema.plugins.DocumentationType;
 import com.mangofactory.service.model.builder.ParameterBuilder;
-import com.mangofactory.swagger.readers.operation.ResolvedMethodParameter;
+import com.mangofactory.spring.web.readers.operation.ResolvedMethodParameter;
 import org.springframework.core.MethodParameter;
 
 public class ParameterContext {

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/ParameterExpanderPlugin.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.springmvc.plugins;
+package com.mangofactory.spring.web.plugins;
 
 import com.mangofactory.schema.plugins.DocumentationType;
 import org.springframework.plugin.core.Plugin;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/plugins/ParameterExpansionContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.springmvc.plugins;
+package com.mangofactory.spring.web.plugins;
 
 import com.mangofactory.schema.plugins.DocumentationType;
 import com.mangofactory.service.model.builder.ParameterBuilder;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/Command.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.readers;
+package com.mangofactory.spring.web.readers;
 
 public interface Command<T>  {
   public void execute(T context);

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/CommandContext.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.core;
+package com.mangofactory.spring.web.readers;
 
 public interface CommandContext<T> {
   public T getResult();

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/CommandExecutor.java
Patch:
@@ -1,6 +1,4 @@
-package com.mangofactory.swagger.core;
-
-import com.mangofactory.swagger.readers.Command;
+package com.mangofactory.spring.web.readers;
 
 import java.util.List;
 

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/OperationParameterRequestConditionReader.java
Patch:
@@ -1,13 +1,13 @@
-package com.mangofactory.swagger.readers;
+package com.mangofactory.spring.web.readers;
 
 import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.mangofactory.schema.plugins.DocumentationType;
 import com.mangofactory.service.model.AllowableListValues;
 import com.mangofactory.service.model.Parameter;
 import com.mangofactory.service.model.builder.ParameterBuilder;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import org.springframework.web.servlet.mvc.condition.NameValueExpression;
 import org.springframework.web.servlet.mvc.condition.ParamsRequestCondition;
 

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/OperationPositionalOrdering.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.ordering;
+package com.mangofactory.spring.web.readers;
 
 import com.google.common.collect.Ordering;
 import com.google.common.primitives.Ints;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/operation/DefaultOperationBuilder.java
Patch:
@@ -1,8 +1,8 @@
-package com.mangofactory.swagger.readers.operation;
+package com.mangofactory.spring.web.readers.operation;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import org.springframework.stereotype.Component;
 
 @Component

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/operation/HandlerMethodResolver.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.readers.operation;
+package com.mangofactory.spring.web.readers.operation;
 
 import com.fasterxml.classmate.MemberResolver;
 import com.fasterxml.classmate.ResolvedType;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/operation/OperationDeprecatedReader.java
Patch:
@@ -1,8 +1,8 @@
-package com.mangofactory.swagger.readers.operation;
+package com.mangofactory.spring.web.readers.operation;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import org.springframework.stereotype.Component;
 
 @Component

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/operation/ResolvedMethodParameter.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.readers.operation;
+package com.mangofactory.spring.web.readers.operation;
 
 import com.fasterxml.classmate.ResolvedType;
 import org.springframework.core.MethodParameter;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/operation/parameter/ModelAttributeParameterExpander.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.readers.operation.parameter;
+package com.mangofactory.spring.web.readers.operation.parameter;
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
@@ -7,8 +7,8 @@
 import com.mangofactory.schema.alternates.AlternateTypeProvider;
 import com.mangofactory.service.model.Parameter;
 import com.mangofactory.service.model.builder.ParameterBuilder;
-import com.mangofactory.springmvc.plugins.DocumentationPluginsManager;
-import com.mangofactory.springmvc.plugins.ParameterExpansionContext;
+import com.mangofactory.spring.web.plugins.DocumentationPluginsManager;
+import com.mangofactory.spring.web.plugins.ParameterExpansionContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/operation/parameter/ParameterDefaultReader.java
Patch:
@@ -1,8 +1,8 @@
-package com.mangofactory.swagger.readers.operation.parameter;
+package com.mangofactory.spring.web.readers.operation.parameter;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.RequestHeader;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/operation/parameter/ParameterExpander.java
Patch:
@@ -1,11 +1,11 @@
-package com.mangofactory.swagger.readers.operation.parameter;
+package com.mangofactory.spring.web.readers.operation.parameter;
 
 import com.google.common.base.Function;
 import com.mangofactory.schema.plugins.DocumentationType;
 import com.mangofactory.service.model.AllowableListValues;
 import com.mangofactory.service.model.AllowableValues;
-import com.mangofactory.springmvc.plugins.ParameterExpanderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterExpansionContext;
+import com.mangofactory.spring.web.plugins.ParameterExpanderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterExpansionContext;
 import org.springframework.stereotype.Component;
 
 import java.lang.reflect.Field;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/operation/parameter/ParameterMultiplesReader.java
Patch:
@@ -1,8 +1,8 @@
-package com.mangofactory.swagger.readers.operation.parameter;
+package com.mangofactory.spring.web.readers.operation.parameter;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;
 

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/operation/parameter/ParameterNameReader.java
Patch:
@@ -1,8 +1,8 @@
-package com.mangofactory.swagger.readers.operation.parameter;
+package com.mangofactory.spring.web.readers.operation.parameter;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.ModelAttribute;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/readers/operation/parameter/ParameterRequiredReader.java
Patch:
@@ -1,8 +1,8 @@
-package com.mangofactory.swagger.readers.operation.parameter;
+package com.mangofactory.spring.web.readers.operation.parameter;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;
 import org.springframework.web.bind.annotation.PathVariable;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/scanners/AntRequestMappingPatternMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.scanners;
+package com.mangofactory.spring.web.scanners;
 
 import org.springframework.util.AntPathMatcher;
 import org.springframework.util.Assert;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/scanners/ApiListingReferenceScanResult.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.scanners;
+package com.mangofactory.spring.web.scanners;
 
 import com.mangofactory.service.model.ApiListingReference;
 

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/scanners/RegexRequestMappingPatternMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.scanners;
+package com.mangofactory.spring.web.scanners;
 
 import org.springframework.util.Assert;
 import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/scanners/RequestMappingContext.java
Patch:
@@ -1,8 +1,8 @@
-package com.mangofactory.swagger.scanners;
+package com.mangofactory.spring.web.scanners;
 
 import com.mangofactory.service.model.Model;
-import com.mangofactory.springmvc.plugins.DocumentationContext;
-import com.mangofactory.swagger.core.CommandContext;
+import com.mangofactory.spring.web.plugins.DocumentationContext;
+import com.mangofactory.spring.web.readers.CommandContext;
 import org.springframework.web.method.HandlerMethod;
 import org.springframework.web.servlet.mvc.method.RequestMappingInfo;
 

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/scanners/RequestMappingPatternMatcher.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.scanners;
+package com.mangofactory.spring.web.scanners;
 
 import org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;
 

File: swagger-springmvc/src/main/java/com/mangofactory/spring/web/scanners/ResourceGroup.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.scanners;
+package com.mangofactory.spring.web.scanners;
 
 import com.google.common.base.Objects;
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/annotations/EnableSwagger.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.plugin;
+package com.mangofactory.swagger.annotations;
 
 import com.mangofactory.swagger.configuration.SpringSwaggerConfig;
 import org.springframework.context.annotation.Import;
@@ -14,7 +14,7 @@
  *
  * Loads all required beans defined in @see SpringSwaggerConfig
  *
- * @see com.mangofactory.swagger.plugin.SwaggerSpringMvcPlugin
+ * @see com.mangofactory.spring.web.plugins.DocumentationConfigurer
  */
 @Retention(value = java.lang.annotation.RetentionPolicy.RUNTIME)
 @Target(value = {java.lang.annotation.ElementType.TYPE})

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/OperationAuthReader.java
Patch:
@@ -3,9 +3,9 @@
 import com.mangofactory.schema.plugins.DocumentationType;
 import com.mangofactory.service.model.builder.AuthorizationBuilder;
 import com.mangofactory.service.model.builder.AuthorizationScopeBuilder;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
-import com.mangofactory.swagger.authorization.AuthorizationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.AuthorizationContext;
 import com.wordnik.swagger.annotations.ApiOperation;
 import com.wordnik.swagger.annotations.Authorization;
 import com.wordnik.swagger.annotations.AuthorizationScope;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/OperationHiddenReader.java
Patch:
@@ -1,8 +1,8 @@
 package com.mangofactory.swagger.plugins.operation;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import com.wordnik.swagger.annotations.ApiOperation;
 import org.springframework.stereotype.Component;
 import org.springframework.web.method.HandlerMethod;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/OperationHttpMethodReader.java
Patch:
@@ -1,8 +1,8 @@
 package com.mangofactory.swagger.plugins.operation;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import com.wordnik.swagger.annotations.ApiOperation;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/OperationImplicitParameterReader.java
Patch:
@@ -4,8 +4,8 @@
 import com.mangofactory.schema.plugins.DocumentationType;
 import com.mangofactory.service.model.Parameter;
 import com.mangofactory.service.model.builder.ParameterBuilder;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import com.wordnik.swagger.annotations.ApiImplicitParam;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.stereotype.Component;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/OperationImplicitParametersReader.java
Patch:
@@ -3,8 +3,8 @@
 import com.google.common.collect.Lists;
 import com.mangofactory.schema.plugins.DocumentationType;
 import com.mangofactory.service.model.Parameter;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import com.wordnik.swagger.annotations.ApiImplicitParam;
 import com.wordnik.swagger.annotations.ApiImplicitParams;
 import org.springframework.core.annotation.AnnotationUtils;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/OperationNotesReader.java
Patch:
@@ -1,8 +1,8 @@
 package com.mangofactory.swagger.plugins.operation;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import com.wordnik.swagger.annotations.ApiOperation;
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/OperationPositionReader.java
Patch:
@@ -1,8 +1,8 @@
 package com.mangofactory.swagger.plugins.operation;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import com.wordnik.swagger.annotations.ApiOperation;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/OperationSummaryReader.java
Patch:
@@ -1,8 +1,8 @@
 package com.mangofactory.swagger.plugins.operation;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import com.wordnik.swagger.annotations.ApiOperation;
 import org.springframework.stereotype.Component;
 import org.springframework.util.StringUtils;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/SwaggerMediaTypeReader.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.google.common.base.Splitter;
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import com.wordnik.swagger.annotations.ApiOperation;
 import org.springframework.stereotype.Component;
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/SwaggerResponseMessageReader.java
Patch:
@@ -6,8 +6,8 @@
 import com.mangofactory.schema.Annotations;
 import com.mangofactory.service.model.ResponseMessage;
 import com.mangofactory.service.model.builder.ResponseMessageBuilder;
-import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
-import com.mangofactory.springmvc.plugins.OperationContext;
+import com.mangofactory.spring.web.plugins.OperationBuilderPlugin;
+import com.mangofactory.spring.web.plugins.OperationContext;
 import com.wordnik.swagger.annotations.ApiResponse;
 import com.wordnik.swagger.annotations.ApiResponses;
 import org.springframework.beans.factory.annotation.Autowired;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/parameter/ParameterAccessReader.java
Patch:
@@ -1,8 +1,8 @@
 package com.mangofactory.swagger.plugins.operation.parameter;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/parameter/ParameterAllowableReader.java
Patch:
@@ -6,8 +6,8 @@
 import com.mangofactory.service.model.AllowableListValues;
 import com.mangofactory.service.model.AllowableRangeValues;
 import com.mangofactory.service.model.AllowableValues;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import com.wordnik.swagger.annotations.ApiParam;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/parameter/ParameterDefaultReader.java
Patch:
@@ -1,8 +1,8 @@
 package com.mangofactory.swagger.plugins.operation.parameter;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/parameter/ParameterDescriptionReader.java
Patch:
@@ -1,8 +1,8 @@
 package com.mangofactory.swagger.plugins.operation.parameter;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/parameter/ParameterMultiplesReader.java
Patch:
@@ -1,8 +1,8 @@
 package com.mangofactory.swagger.plugins.operation.parameter;
 
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/parameter/ParameterNameReader.java
Patch:
@@ -3,8 +3,8 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Optional;
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/parameter/ParameterRequiredReader.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.google.common.base.Optional;
 import com.mangofactory.schema.plugins.DocumentationType;
-import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterContext;
+import com.mangofactory.spring.web.plugins.ParameterBuilderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterContext;
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 import org.springframework.stereotype.Component;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/parameter/SwaggerParameterExpander.java
Patch:
@@ -6,8 +6,8 @@
 import com.mangofactory.schema.Annotations;
 import com.mangofactory.service.model.AllowableListValues;
 import com.mangofactory.service.model.AllowableValues;
-import com.mangofactory.springmvc.plugins.ParameterExpanderPlugin;
-import com.mangofactory.springmvc.plugins.ParameterExpansionContext;
+import com.mangofactory.spring.web.plugins.ParameterExpanderPlugin;
+import com.mangofactory.spring.web.plugins.ParameterExpansionContext;
 import com.mangofactory.swagger.plugins.ApiModelProperties;
 import com.wordnik.swagger.annotations.ApiModelProperty;
 import com.wordnik.swagger.annotations.ApiParam;

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/configuration/DefaultJavaPluginConfig.java
Patch:
@@ -1,6 +1,6 @@
 package com.mangofactory.swagger.configuration;
 
-import com.mangofactory.swagger.plugin.EnableSwagger;
+import com.mangofactory.swagger.annotations.EnableSwagger;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/configuration/MultipleRMHAConfig.java
Patch:
@@ -1,6 +1,6 @@
 package com.mangofactory.swagger.configuration;
 
-import com.mangofactory.swagger.plugin.EnableSwagger;
+import com.mangofactory.swagger.annotations.EnableSwagger;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
 

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/DummyClass.java
Patch:
@@ -1,6 +1,6 @@
 package com.mangofactory.swagger.dummy;
 
-import com.mangofactory.swagger.annotations.ApiIgnore;
+import com.mangofactory.spring.web.annotations.ApiIgnore;
 import com.mangofactory.swagger.dummy.models.EnumType;
 import com.mangofactory.swagger.dummy.models.Example;
 import com.mangofactory.swagger.dummy.models.FoobarDto;

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/controllers/ExcludedService.java
Patch:
@@ -1,6 +1,6 @@
 package com.mangofactory.swagger.dummy.controllers;
 
-import com.mangofactory.swagger.annotations.ApiIgnore;
+import com.mangofactory.spring.web.annotations.ApiIgnore;
 import com.mangofactory.swagger.dummy.models.Pet;
 import com.wordnik.swagger.annotations.Api;
 import com.wordnik.swagger.annotations.ApiParam;

File: swagger-models/src/test/java/com/mangofactory/swagger/models/ServiceWithAnnotationOnInterface.java
Patch:
@@ -2,6 +2,8 @@
 
 import com.wordnik.swagger.annotations.ApiResponse;
 import com.wordnik.swagger.annotations.ApiResponses;
+import org.springframework.http.HttpStatus;
+import org.springframework.web.bind.annotation.ResponseStatus;
 
 public class ServiceWithAnnotationOnInterface {
 
@@ -15,6 +17,7 @@ public Object aMethod() {
 
   public static interface SimpleService {
 
+    @ResponseStatus(HttpStatus.CREATED)
     @ApiResponses({
             @ApiResponse(code = 201, message = "201 Created")
     })

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/DefaultResponseMessageReader.java
Patch:
@@ -12,7 +12,6 @@
 import com.wordnik.swagger.annotations.ApiResponse;
 import com.wordnik.swagger.annotations.ApiResponses;
 import com.mangofactory.swagger.models.dto.ResponseMessage;
-import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.ResponseStatus;
@@ -76,8 +75,7 @@ private void applyReturnTypeOverride(SwaggerGlobalSettings swaggerGlobalSettings
   }
 
   private int httpStatusCode(HandlerMethod handlerMethod) {
-    Optional<ResponseStatus> responseStatus = Optional.fromNullable(AnnotationUtils.getAnnotation(handlerMethod
-            .getMethod(), ResponseStatus.class));
+    Optional<ResponseStatus> responseStatus = Annotations.findResponseStatusAnnotation(handlerMethod.getMethod());
     int httpStatusCode = 200;
     if (responseStatus.isPresent()) {
       httpStatusCode = responseStatus.get().value().value();

File: swagger-models/src/main/java/com/mangofactory/swagger/models/Annotations.java
Patch:
@@ -17,7 +17,7 @@ public class Annotations {
    * Finds first annotation of the given type on the given bean property and returns it.
    * Search precedence is getter, setter, field.
    *
-   * @param beanPropertyDefinition introspected jackson proprty defintion
+   * @param beanPropertyDefinition introspected jackson property definition
    * @param annotationClass        class object representing desired annotation
    * @param <A>                    type that extends Annotation
    * @return first annotation found for property

File: swagger-models/src/main/java/com/mangofactory/service/model/Parameter.java
Patch:
@@ -13,7 +13,7 @@ public class Parameter {
   private final String paramType;
   private final String paramAccess;
 
-  public Parameter(String name, String description, String defaultValue, Boolean required, Boolean allowMultiple,
+  public Parameter(String name, String description, String defaultValue, boolean required, boolean allowMultiple,
                    String dataType, AllowableValues allowableValues, String paramType, String paramAccess) {
     this.description = description;
     this.defaultValue = defaultValue;

File: swagger-models/src/main/java/com/mangofactory/service/model/builder/ParameterBuilder.java
Patch:
@@ -7,8 +7,8 @@ public class ParameterBuilder {
   private String name;
   private String description;
   private String defaultValue;
-  private Boolean required;
-  private Boolean allowMultiple;
+  private boolean required;
+  private boolean allowMultiple;
   private String dataType;
   private AllowableValues allowableValues;
   private String paramType;

File: swagger-springmvc/src/main/java/com/mangofactory/springmvc/plugins/DocumentationContext.java
Patch:
@@ -33,7 +33,7 @@ public class DocumentationContext {
   /**
    * Map of spring RequestMethod's to a list of http status codes and accompanying messages
    *
-   * @see com.mangofactory.swagger.readers.operation.DefaultResponseMessageReader
+   * @see com.mangofactory.swagger.readers.operation.ResponseMessagesReader
    */
   private final Map<RequestMethod, List<ResponseMessage>> globalResponseMessages;
   private final ResourceGroupingStrategy resourceGroupingStrategy;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -3,6 +3,7 @@
 import com.mangofactory.schema.configuration.SwaggerModelsConfiguration;
 import com.mangofactory.springmvc.plugins.ApiListingBuilderPlugin;
 import com.mangofactory.springmvc.plugins.DocumentationPlugin;
+import com.mangofactory.springmvc.plugins.OperationBuilderPlugin;
 import com.mangofactory.springmvc.plugins.ParameterBuilderPlugin;
 import com.mangofactory.springmvc.plugins.ParameterExpanderPlugin;
 import com.mangofactory.swagger.controllers.Defaults;
@@ -24,6 +25,7 @@
 @Import({ SwaggerModelsConfiguration.class, Defaults.class })
 @EnablePluginRegistries({DocumentationPlugin.class,
         ApiListingBuilderPlugin.class,
+        OperationBuilderPlugin.class,
         ParameterBuilderPlugin.class,
         ParameterExpanderPlugin.class})
 public class SpringSwaggerConfig {

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugins/operation/parameter/ParameterAnnotationReader.java
Patch:
@@ -10,7 +10,7 @@
 import static com.google.common.collect.Iterables.*;
 import static com.google.common.collect.Lists.*;
 
-class ParameterAnnotationReader {
+public class ParameterAnnotationReader {
   private static <A extends Annotation> Predicate<? super Annotation> annotationOfType(final Class<A> annotationType) {
     return new Predicate<Annotation>() {
       @Override

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/ModelAttributeParameterExpander.java
Patch:
@@ -6,6 +6,7 @@
 import com.mangofactory.documentation.plugins.DocumentationType;
 import com.mangofactory.schema.alternates.AlternateTypeProvider;
 import com.mangofactory.service.model.Parameter;
+import com.mangofactory.service.model.builder.ParameterBuilder;
 import com.mangofactory.springmvc.plugins.DocumentationPluginsManager;
 import com.mangofactory.springmvc.plugins.ParameterExpansionContext;
 import org.slf4j.Logger;
@@ -79,7 +80,7 @@ public void expand(final String parentName, final Class<?> paramType,
       }
       LOG.debug("Building parameter for field: {}, with type: ", field, resolvedType);
       ParameterExpansionContext parameterExpansionContext = new ParameterExpansionContext(dataTypeName, parentName,
-              field, documentationType);
+              field, documentationType, new ParameterBuilder());
       parameters.add(pluginsManager.expandParameter(parameterExpansionContext));
 
     }

File: swagger-models/src/main/java/com/mangofactory/schema/ModelContext.java
Patch:
@@ -10,7 +10,7 @@
 
 import static com.google.common.collect.Sets.*;
 import static com.mangofactory.schema.ResolvedTypes.*;
-
+//TODO:Move this closer to plugins
 public class ModelContext {
   private final ModelContext parentContext;
   private final Type type;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -1,6 +1,7 @@
 package com.mangofactory.swagger.configuration;
 
 import com.mangofactory.schema.configuration.SwaggerModelsConfiguration;
+import com.mangofactory.springmvc.plugins.ApiListingEnricher;
 import com.mangofactory.springmvc.plugins.DocumentationPlugin;
 import com.mangofactory.swagger.controllers.Defaults;
 import com.mangofactory.swagger.core.SwaggerCache;
@@ -19,7 +20,7 @@
         "com.mangofactory.springmvc.plugins"
 })
 @Import({ SwaggerModelsConfiguration.class, Defaults.class })
-@EnablePluginRegistries({DocumentationPlugin.class})
+@EnablePluginRegistries({DocumentationPlugin.class, ApiListingEnricher.class})
 public class SpringSwaggerConfig {
 
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/ClassOrApiAnnotationResourceGrouping.java
Patch:
@@ -18,6 +18,7 @@
 import static com.mangofactory.swagger.core.StringUtils.*;
 import static org.springframework.util.StringUtils.*;
 
+//TODO: Make this swagger only
 @Component
 public class ClassOrApiAnnotationResourceGrouping implements ResourceGroupingStrategy {
   private static final Logger LOG = LoggerFactory.getLogger(ClassOrApiAnnotationResourceGrouping.class);
@@ -49,7 +50,7 @@ public Set<ResourceGroup> getResourceGroups(RequestMappingInfo requestMappingInf
             .replaceAll("/", "");
     LOG.info("Group for method {} was {}", handlerMethod.getMethod().getName(), group);
     Integer position = getResourcePosition(requestMappingInfo, handlerMethod);
-    return newHashSet(new ResourceGroup(group.toLowerCase(), position));
+    return newHashSet(new ResourceGroup(group.toLowerCase(), handlerMethod.getBeanType(), position));
   }
 
   private String getClassOrApiAnnotationValue(HandlerMethod handlerMethod) {

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/SpringGroupingStrategy.java
Patch:
@@ -50,14 +50,14 @@ private Set<ResourceGroup> groups(HandlerMethod handlerMethod) {
       for (String groupFromReqMapping : asList(requestMapping.get().value())) {
         if (!isNullOrEmpty(groupFromReqMapping)) {
           String groupName = maybeChompLeadingSlash(firstPathSegment(groupFromReqMapping));
-          groups.add(new ResourceGroup(groupName));
+          groups.add(new ResourceGroup(groupName, handlerMethod.getBeanType()));
         }
       }
       if (groups.size() > 0) {
         return groups;
       }
     }
-    return newHashSet(new ResourceGroup(maybeChompLeadingSlash(defaultGroup.toLowerCase())));
+    return newHashSet(new ResourceGroup(maybeChompLeadingSlash(defaultGroup.toLowerCase()), handlerMethod.getBeanType()));
   }
 
   private String getDescription(HandlerMethod handlerMethod) {

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/ApiModelReader.java
Patch:
@@ -188,6 +188,8 @@ private Map<String, Model> readParametersApiModel(HandlerMethodResolver handlerM
     for (int i = 0; i < annotations.length; i++) {
       Annotation[] pAnnotations = annotations[i];
       for (Annotation annotation : pAnnotations) {
+        //TODO: This may need to be externalized to RequestMappingContext Spring Data Reset @RestController will
+        // break this check
         if (annotation instanceof RequestBody) {
           ResolvedMethodParameter pType = parameterTypes.get(i);
           if (!ignorableTypes .contains(pType.getResolvedParameterType().getErasedType())) {

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/Command.java
Patch:
@@ -1,5 +1,5 @@
 package com.mangofactory.swagger.readers;
 
-public interface Command<T> {
+public interface Command<T>  {
   public void execute(T context);
 }

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/DummyClass.java
Patch:
@@ -27,6 +27,7 @@
 
 import static com.mangofactory.swagger.dummy.DummyModels.*;
 
+@RequestMapping(produces = {"application/json"}, consumes = {"application/json", "application/xml"})
 public class DummyClass {
   public void dummyMethod() {
   }

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/controllers/BusinessService.java
Patch:
@@ -7,6 +7,7 @@
 import com.wordnik.swagger.annotations.Authorization;
 import com.wordnik.swagger.annotations.AuthorizationScope;
 import org.springframework.http.HttpStatus;
+import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -26,6 +27,8 @@
 
 @Controller
 @Api(value = "/", description = "Services to demonstrate path variable resolution")
+@RequestMapping(produces = {MediaType.ALL_VALUE, MediaType.APPLICATION_JSON_VALUE},
+        consumes = MediaType.APPLICATION_JSON_VALUE)
 public class BusinessService {
 
   @RequestMapping(value = "/businesses/aliased/{otherId}", method = RequestMethod.GET)

File: swagger-models/src/main/java/com/mangofactory/swagger/models/property/bean/BeanModelPropertyProvider.java
Patch:
@@ -89,9 +89,9 @@ private Optional<ResolvedMethod> findAccessorMethod(ResolvedType resolvedType,
                                                       final AnnotatedMember member) {
     return Iterables.tryFind(accessors.in(resolvedType), new Predicate<ResolvedMethod>() {
       public boolean apply(ResolvedMethod accessorMethod) {
-        return (accessorMemberIs(accessorMethod, methodName(member))
+        return accessorMemberIs(accessorMethod, methodName(member))
                 &&
-                propertyName.equals(propertyName(accessorMethod.getRawMember())));
+                propertyName.equals(propertyName(accessorMethod.getRawMember()));
       }
     });
   }

File: swagger-models/src/main/java/com/mangofactory/schema/Annotations.java
Patch:
@@ -22,13 +22,12 @@ public class Annotations {
    * @param <A>                    type that extends Annotation
    * @return first annotation found for property
    */
-  public static <A extends Annotation> A findPropertyAnnotation(BeanPropertyDefinition beanPropertyDefinition,
+  public static <A extends Annotation> Optional<A> findPropertyAnnotation(BeanPropertyDefinition beanPropertyDefinition,
       Class<A> annotationClass) {
 
       return tryGetGetterAnnotation(beanPropertyDefinition, annotationClass)
               .or(tryGetSetterAnnotation(beanPropertyDefinition, annotationClass))
-              .or(tryGetFieldAnnotation(beanPropertyDefinition, annotationClass))
-              .orNull();
+              .or(tryGetFieldAnnotation(beanPropertyDefinition, annotationClass));
   }
   @SuppressWarnings("PMD")
   private static <A extends Annotation> Optional<A> tryGetGetterAnnotation(

File: swagger-models/src/main/java/com/mangofactory/schema/property/field/FieldModelProperty.java
Patch:
@@ -5,8 +5,6 @@
 import com.mangofactory.schema.alternates.AlternateTypeProvider;
 import com.mangofactory.schema.property.BaseModelProperty;
 
-import static com.mangofactory.schema.Annotations.*;
-
 public class FieldModelProperty extends BaseModelProperty {
 
   private final ResolvedField childField;
@@ -15,7 +13,7 @@ public FieldModelProperty(String fieldName,
       ResolvedField childField,
       AlternateTypeProvider alternateTypeProvider) {
 
-    super(fieldName, alternateTypeProvider, findApiModePropertyAnnotation(childField.getRawMember()));
+    super(fieldName, alternateTypeProvider);
     this.childField = childField;
   }
 

File: swagger-models/src/main/java/com/mangofactory/service/model/Operation.java
Patch:
@@ -14,7 +14,7 @@ public class Operation {
   private final String summary;
   private final String notes;
   private final String responseClass;
-  private final SwaggerDataType dataType;
+  private final String dataType;
   private final String nickname;
   private final int position;
   private final List<String> produces;
@@ -34,7 +34,7 @@ public Operation(String method, String summary, String notes, String responseCla
     this.summary = summary;
     this.notes = notes;
     this.responseClass = responseClass;
-    this.dataType = new DataType(responseClass);
+    this.dataType = responseClass;
     this.nickname = nickname;
     this.position = position;
     this.produces = produces;
@@ -68,7 +68,7 @@ public String apply(Authorization input) {
     };
   }
 
-  public SwaggerDataType getDataType() {
+  public String getDataType() {
     return dataType;
   }
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugin/SwaggerSpringMvcPlugin.java
Patch:
@@ -4,6 +4,7 @@
 import com.google.common.base.Function;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.Ordering;
+import com.mangofactory.documentation.plugins.DocumentationType;
 import com.mangofactory.schema.GenericTypeNamingStrategy;
 import com.mangofactory.schema.ResolvedTypes;
 import com.mangofactory.schema.alternates.AlternateTypeProvider;
@@ -18,7 +19,6 @@
 import com.mangofactory.springmvc.plugins.DocumentationContext;
 import com.mangofactory.springmvc.plugins.DocumentationContextBuilder;
 import com.mangofactory.springmvc.plugins.DocumentationPlugin;
-import com.mangofactory.documentation.plugins.DocumentationType;
 import com.mangofactory.swagger.authorization.AuthorizationContext;
 import com.mangofactory.swagger.controllers.Defaults;
 import com.mangofactory.swagger.core.RequestMappingEvaluator;
@@ -444,7 +444,7 @@ private void configure(Defaults defaults) {
   }
 
   private void buildScannerContext(final Defaults defaults) {
-    mergedResponseMessages = newHashMap();
+    mergedResponseMessages = newTreeMap();
     if (this.applyDefaultResponseMessages) {
       mergedResponseMessages.putAll(defaults.defaultResponseMessages());
     }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationAuthReader.java
Patch:
@@ -61,7 +61,7 @@ public void execute(RequestMappingContext context) {
         }
       }
     }
-    LOG.debug("Authorization count {} for method {}", handlerMethod.getMethod().getName(), authorizations.size());
+    LOG.debug("Authorization count {} for method {}", authorizations.size(), handlerMethod.getMethod().getName());
     context.put("authorizations", authorizations);
   }
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationAuthReader.java
Patch:
@@ -61,7 +61,7 @@ public void execute(RequestMappingContext context) {
         }
       }
     }
-    LOG.info("Authorization count {} for method {}", handlerMethod.getMethod().getName(), authorizations.size());
+    LOG.debug("Authorization count {} for method {}", handlerMethod.getMethod().getName(), authorizations.size());
     context.put("authorizations", authorizations);
   }
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterDataTypeReader.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.mangofactory.swagger.configuration.SwaggerGlobalSettings;
-import com.mangofactory.swagger.core.ModelUtils;
+import com.mangofactory.swagger.models.ResolvedTypes;
 import com.mangofactory.swagger.readers.Command;
 import com.mangofactory.swagger.readers.operation.ResolvedMethodParameter;
 import com.mangofactory.swagger.scanners.RequestMappingContext;
@@ -20,7 +20,7 @@ public void execute(RequestMappingContext context) {
     if (MultipartFile.class.isAssignableFrom(parameterType.getErasedType())) {
       context.put("dataType", "File");
     } else {
-      context.put("dataType", ModelUtils.getResponseClassName(parameterType));
+      context.put("dataType", ResolvedTypes.parameterTypeName(parameterType));
     }
   }
 

File: swagger-models/src/main/java/com/mangofactory/swagger/models/dto/ModelProperty.java
Patch:
@@ -15,6 +15,8 @@ public class ModelProperty {
   private final int position;
   private final Boolean required;
   private final String description;
+  @JsonProperty
+  @JsonUnwrapped
   private final AllowableValues allowableValues;
 
   @JsonInclude(JsonInclude.Include.NON_EMPTY)

File: swagger-models/src/main/java/com/mangofactory/schema/DefaultModelProvider.java
Patch:
@@ -60,7 +60,7 @@ public com.google.common.base.Optional<Model> modelFor(ModelContext modelContext
                       .required(each.isRequired())
                       .description(each.propertyDescription())
                       .allowableValues(each.allowableValues())
-                      .iItems(itemModelRef(each.getType()))
+                      .items(itemModelRef(each.getType()))
                       .build()
                     );
     }

File: swagger-models/src/main/java/com/mangofactory/service/model/DataType.java
Patch:
@@ -24,7 +24,7 @@ public SwaggerDataType typeFromDataType(String initialType) {
       return new PrimitiveFormatDataType("integer", "int64");
     }
     if (isOfType(initialType, "float")) {
-      return new PrimitiveFormatDataType("integer", "int64");
+      return new PrimitiveFormatDataType("number", "float");
     }
     if (isOfType(initialType, "double")) {
       return new PrimitiveFormatDataType("number", "double");

File: swagger-models/src/main/java/com/mangofactory/service/model/builder/ModelPropertyBuilder.java
Patch:
@@ -43,7 +43,7 @@ public ModelPropertyBuilder allowableValues(AllowableValues allowableValues) {
     return this;
   }
 
-  public ModelPropertyBuilder iItems(ModelRef items) {
+  public ModelPropertyBuilder items(ModelRef items) {
     this.items = items;
     return this;
   }

File: swagger-models/src/main/java/com/mangofactory/swagger/dto/DataType.java
Patch:
@@ -32,7 +32,7 @@ public SwaggerDataType typeFromDataType(String initialType) {
       return new PrimitiveFormatDataType("integer", "int64");
     }
     if (isOfType(initialType, "float")) {
-      return new PrimitiveFormatDataType("integer", "int64");
+      return new PrimitiveFormatDataType("number", "float");
     }
     if (isOfType(initialType, "double")) {
       return new PrimitiveFormatDataType("number", "double");

File: swagger-models/src/main/java/com/mangofactory/swagger/dto/mappers/Mappers.java
Patch:
@@ -10,7 +10,7 @@ public class Mappers {
     return new Maps.EntryTransformer<String, ApiListing, com.mangofactory.swagger.dto.ApiListing>() {
       @Override
       public com.mangofactory.swagger.dto.ApiListing transformEntry(String key, ApiListing value) {
-        return mapper.toSwagger(value);
+        return mapper.toSwaggerApiListing(value);
       }
     };
   }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/SwaggerApiResourceListing.java
Patch:
@@ -97,7 +97,7 @@ public void initialize() {
       log.info("  {} at location: {}{}", path, prefix, apiListingReference.getPath());
     }
     swaggerCache.addSwaggerResourceListing(swaggerGroup,
-            swaggerGlobalSettings.getDtoMapper().toSwagger(resourceListing));
+            swaggerGlobalSettings.getDtoMapper().toSwaggerResourceListing(resourceListing));
   }
 
 

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/controllers/BusinessService.java
Patch:
@@ -23,7 +23,7 @@
 
 
 @Controller
-@Api(value = "", description = "Services to demonstrate path variable resolution")
+@Api(value = "/", description = "Services to demonstrate path variable resolution")
 public class BusinessService {
 
   @RequestMapping(value = "/businesses/aliased/{otherId}", method = RequestMethod.GET)

File: swagger-models/src/main/java/com/mangofactory/swagger/models/dto/builder/ApiListingBuilder.java
Patch:
@@ -83,6 +83,7 @@ public ApiListingBuilder position(int position) {
   }
 
   public ApiListing build() {
-    return new ApiListing(apiVersion, swaggerVersion, basePath, resourcePath, produces, consumes, protocol, authorizations, apis, models, description, position);
+    return new ApiListing(apiVersion, swaggerVersion, basePath,
+            resourcePath, produces, consumes, protocol, authorizations, apis, models, description, position);
   }
 }
\ No newline at end of file

File: swagger-models/src/main/java/com/mangofactory/swagger/models/dto/builder/OperationBuilder.java
Patch:
@@ -89,6 +89,7 @@ public OperationBuilder deprecated(String deprecated) {
   }
 
   public Operation build() {
-    return new Operation(method, summary, notes, responseClass, nickname, position, produces, consumes, protocol, authorizations, parameters, responseMessages, deprecated);
+    return new Operation(method, summary, notes, responseClass, nickname, position, produces,
+            consumes, protocol, authorizations, parameters, responseMessages, deprecated);
   }
 }
\ No newline at end of file

File: swagger-contract-tests/src/main/groovy/com/mangofactory/test/contract/swagger/Application.java
Patch:
@@ -9,7 +9,7 @@
 @Configuration
 @EnableAutoConfiguration
 @EnableSwagger
-@ComponentScan("com.mangofactory.swagger.dummy.controllers")
+@ComponentScan({"com.mangofactory.swagger.dummy.controllers", "com.mangofactory.test.contract.swagger"})
 public class Application {
 
   public static void main(String[] args) {

File: swagger-models/src/main/java/com/mangofactory/swagger/models/dto/ApiDescription.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.models.dto;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonPropertyOrder;
 
 import java.util.List;
@@ -9,6 +10,7 @@ public class ApiDescription {
   private final String path;
   private final String description;
   private final List<Operation> operations;
+  @JsonIgnore
   private final Boolean hidden;
 
   public ApiDescription(String path, String description, List<Operation> operations, Boolean hidden) {

File: swagger-models/src/main/java/com/mangofactory/swagger/models/dto/ResponseMessage.java
Patch:
@@ -1,7 +1,10 @@
 package com.mangofactory.swagger.models.dto;
 
+import com.fasterxml.jackson.annotation.JsonInclude;
+
 public class ResponseMessage {
   private final int code;
+  @JsonInclude(JsonInclude.Include.ALWAYS)
   private final String message;
   private final String responseModel;
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/plugin/SwaggerSpringMvcPlugin.java
Patch:
@@ -77,7 +77,7 @@ public class SwaggerSpringMvcPlugin {
   private ApiListingReferenceScanner apiListingReferenceScanner;
   private AtomicBoolean initialized = new AtomicBoolean(false);
   private Collection<RequestMappingReader> customAnnotationReaders = newArrayList();
-  private boolean applyDefaultResponseMessages;
+  private boolean applyDefaultResponseMessages = true;
   private RequestMappingEvaluator requestMappingEvaluator;
   private RequestMappingPatternMatcher requestMappingPatternMatcher = new RegexRequestMappingPatternMatcher();
   private boolean enabled = true;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/ApiOperationReader.java
Patch:
@@ -129,7 +129,7 @@ public void execute(RequestMappingContext outerContext) {
                 new ArrayList<String>(0),
                 authorizations,
                 parameterList,
-                responseMessages,
+                (Set) operationResultMap.get("responseMessages"),
                 (String) operationResultMap.get("deprecated")
         );
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/SwaggerResponseMessageReader.java
Patch:
@@ -34,7 +34,7 @@ private Set<ResponseMessage> newSet(Set<ResponseMessage> responseMessages, Colle
     TreeSet<ResponseMessage> toSet = new TreeSet<ResponseMessage>(new Comparator<ResponseMessage>() {
       @Override
       public int compare(ResponseMessage first, ResponseMessage second) {
-        return first.code() - second.code();
+        return first.getCode() - second.getCode();
       }
     });
     toSet.addAll(responseMessages);

File: swagger-models/src/main/java/com/mangofactory/swagger/models/ModelProvider.java
Patch:
@@ -1,6 +1,6 @@
 package com.mangofactory.swagger.models;
 
-import com.wordnik.swagger.model.Model;
+import com.mangofactory.swagger.models.dto.Model;
 
 public interface ModelProvider {
   com.google.common.base.Optional<Model> modelFor(ModelContext modelContext);

File: swagger-models/src/main/java/com/mangofactory/swagger/models/ResolvedTypes.java
Patch:
@@ -6,7 +6,7 @@
 import com.fasterxml.classmate.types.ResolvedObjectType;
 import com.fasterxml.classmate.types.ResolvedPrimitiveType;
 import com.google.common.base.Optional;
-import com.wordnik.swagger.model.AllowableValues;
+import com.mangofactory.swagger.models.dto.AllowableValues;
 
 import java.lang.reflect.Type;
 import java.util.List;

File: swagger-models/src/main/java/com/mangofactory/swagger/models/property/ApiModelProperties.java
Patch:
@@ -4,8 +4,7 @@
 import com.google.common.base.Splitter;
 import com.google.common.base.Strings;
 import com.wordnik.swagger.annotations.ApiModelProperty;
-import com.wordnik.swagger.model.AllowableListValues;
-import scala.collection.JavaConversions;
+import com.mangofactory.swagger.models.dto.AllowableListValues;
 
 import java.util.List;
 
@@ -24,7 +23,7 @@ public static Function<ApiModelProperty, AllowableListValues> toAllowableList()
       public AllowableListValues apply(ApiModelProperty annotation) {
         List<String> allowableValues
                 = Splitter.on(',').omitEmptyStrings().splitToList(nullToEmpty(annotation.allowableValues()));
-        return new AllowableListValues(JavaConversions.collectionAsScalaIterable(allowableValues).toList(), "LIST");
+        return new AllowableListValues(allowableValues, "LIST");
       }
     };
   }

File: swagger-models/src/main/java/com/mangofactory/swagger/models/property/ModelProperty.java
Patch:
@@ -2,8 +2,7 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.mangofactory.swagger.models.ModelContext;
-import com.wordnik.swagger.model.AllowableValues;
-import scala.Option;
+import com.mangofactory.swagger.models.dto.AllowableValues;
 
 public interface ModelProperty {
   String getName();
@@ -16,7 +15,7 @@ public interface ModelProperty {
 
   AllowableValues allowableValues();
 
-  Option<String> propertyDescription();
+  String propertyDescription();
 
   boolean isRequired();
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SwaggerGlobalSettings.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.fasterxml.classmate.TypeResolver;
 import com.mangofactory.swagger.models.alternates.AlternateTypeProvider;
-import com.wordnik.swagger.model.ResponseMessage;
+import com.mangofactory.swagger.models.dto.ResponseMessage;
 import org.springframework.web.bind.annotation.RequestMethod;
 
 import java.util.List;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/controllers/DefaultSwaggerController.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.mangofactory.swagger.annotations.ApiIgnore;
 import com.mangofactory.swagger.core.SwaggerCache;
-import com.wordnik.swagger.model.ApiListing;
-import com.wordnik.swagger.model.ResourceListing;
+import com.mangofactory.swagger.models.dto.ApiListing;
+import com.mangofactory.swagger.models.dto.ResourceListing;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/ClassOrApiAnnotationResourceGrouping.java
Patch:
@@ -16,7 +16,7 @@
 import static com.google.common.base.Strings.*;
 import static com.google.common.collect.Sets.*;
 import static com.mangofactory.swagger.core.StringUtils.*;
-import static org.apache.commons.lang.StringUtils.*;
+import static org.springframework.util.StringUtils.*;
 
 @Component
 public class ClassOrApiAnnotationResourceGrouping implements ResourceGroupingStrategy {
@@ -36,7 +36,7 @@ public String getResourceDescription(RequestMappingInfo requestMappingInfo, Hand
   public Integer getResourcePosition(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod) {
     Class<?> controllerClass = handlerMethod.getBeanType();
     Api apiAnnotation = AnnotationUtils.findAnnotation(controllerClass, Api.class);
-    if (null != apiAnnotation && !isBlank(apiAnnotation.value())) {
+    if (null != apiAnnotation && hasText(apiAnnotation.value())) {
       return apiAnnotation.position();
     }
     return 0;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/SwaggerCache.java
Patch:
@@ -1,7 +1,7 @@
 package com.mangofactory.swagger.core;
 
-import com.wordnik.swagger.model.ApiListing;
-import com.wordnik.swagger.model.ResourceListing;
+import com.mangofactory.swagger.models.dto.ApiListing;
+import com.mangofactory.swagger.models.dto.ResourceListing;
 import org.springframework.stereotype.Component;
 
 import java.util.Map;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/ordering/ApiDescriptionLexicographicalOrdering.java
Patch:
@@ -1,11 +1,11 @@
 package com.mangofactory.swagger.ordering;
 
 import com.google.common.collect.Ordering;
-import com.wordnik.swagger.model.ApiDescription;
+import com.mangofactory.swagger.models.dto.ApiDescription;
 
 public class ApiDescriptionLexicographicalOrdering extends Ordering<ApiDescription> {
   @Override
   public int compare(ApiDescription apiDescription, ApiDescription other) {
-    return apiDescription.path().compareTo(other.path());
+    return apiDescription.getPath().compareTo(other.getPath());
   }
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/ordering/OperationPositionalOrdering.java
Patch:
@@ -2,11 +2,11 @@
 
 import com.google.common.collect.Ordering;
 import com.google.common.primitives.Ints;
-import com.wordnik.swagger.model.Operation;
+import com.mangofactory.swagger.models.dto.Operation;
 
 public class OperationPositionalOrdering extends Ordering<Operation> {
   @Override
   public int compare(Operation first, Operation second) {
-    return Ints.compare(first.position(), second.position());
+    return Ints.compare(first.getPosition(), second.getPosition());
   }
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/ordering/ResourceListingLexicographicalOrdering.java
Patch:
@@ -1,14 +1,14 @@
 package com.mangofactory.swagger.ordering;
 
 import com.google.common.collect.Ordering;
-import com.wordnik.swagger.model.ApiListingReference;
+import com.mangofactory.swagger.models.dto.ApiListingReference;
 
 /**
  * Orders ApiListingReference's Lexicographically  by their paths
  */
 public class ResourceListingLexicographicalOrdering extends Ordering<ApiListingReference> {
   @Override
   public int compare(ApiListingReference first, ApiListingReference second) {
-    return first.path().compareTo(second.path());
+    return first.getPath().compareTo(second.getPath());
   }
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/ordering/ResourceListingPositionalOrdering.java
Patch:
@@ -2,14 +2,14 @@
 
 import com.google.common.collect.Ordering;
 import com.google.common.primitives.Ints;
-import com.wordnik.swagger.model.ApiListingReference;
+import com.mangofactory.swagger.models.dto.ApiListingReference;
 
 /**
  * Orders ApiListingReference's by their position
  */
 public class ResourceListingPositionalOrdering extends Ordering<ApiListingReference> {
   @Override
   public int compare(ApiListingReference first, ApiListingReference second) {
-    return Ints.compare(first.position(), second.position());
+    return Ints.compare(first.getPosition(), second.getPosition());
   }
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/paths/SwaggerPathProvider.java
Patch:
@@ -1,9 +1,9 @@
 package com.mangofactory.swagger.paths;
 
 import org.springframework.util.Assert;
+import org.springframework.util.StringUtils;
 import org.springframework.web.util.UriComponentsBuilder;
 
-import static org.apache.commons.lang.StringUtils.*;
 
 public abstract class SwaggerPathProvider {
   /**
@@ -71,7 +71,7 @@ public String getApplicationBasePath() {
    */
   public String getOperationPath(String operationPath) {
     UriComponentsBuilder uriComponentsBuilder = UriComponentsBuilder.fromPath("/");
-    if (!isBlank(apiResourcePrefix)) {
+    if (StringUtils.hasText(apiResourcePrefix)) {
       uriComponentsBuilder.path(apiResourcePrefix);
     }
     return sanitiseUrl(uriComponentsBuilder.path(operationPath).build().toString());

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationHttpMethodReader.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.mangofactory.swagger.scanners.RequestMappingContext;
 import com.wordnik.swagger.annotations.ApiOperation;
-import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.util.StringUtils;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.method.HandlerMethod;
 
@@ -19,7 +19,7 @@ public void execute(RequestMappingContext context) {
     String requestMethod = currentHttpMethod.toString();
     ApiOperation apiOperationAnnotation = handlerMethod.getMethodAnnotation(ApiOperation.class);
 
-    if (apiOperationAnnotation != null && !StringUtils.isBlank(apiOperationAnnotation.httpMethod())) {
+    if (apiOperationAnnotation != null && StringUtils.hasText(apiOperationAnnotation.httpMethod())) {
       String apiMethod = apiOperationAnnotation.httpMethod();
       try {
         RequestMethod.valueOf(apiMethod);

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationImplicitParametersReader.java
Patch:
@@ -4,7 +4,7 @@
 import com.mangofactory.swagger.scanners.RequestMappingContext;
 import com.wordnik.swagger.annotations.ApiImplicitParam;
 import com.wordnik.swagger.annotations.ApiImplicitParams;
-import com.wordnik.swagger.model.Parameter;
+import com.mangofactory.swagger.models.dto.Parameter;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.web.method.HandlerMethod;
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationNotesReader.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.mangofactory.swagger.scanners.RequestMappingContext;
 import com.wordnik.swagger.annotations.ApiOperation;
-import org.apache.commons.lang.StringUtils;
+import org.springframework.util.StringUtils;
 import org.springframework.web.method.HandlerMethod;
 
 public class OperationNotesReader implements RequestMappingReader {
@@ -12,7 +12,7 @@ public void execute(RequestMappingContext context) {
     HandlerMethod handlerMethod = context.getHandlerMethod();
     String notes = handlerMethod.getMethod().getName();
     ApiOperation methodAnnotation = handlerMethod.getMethodAnnotation(ApiOperation.class);
-    if ((null != methodAnnotation) && !StringUtils.isBlank(methodAnnotation.notes())) {
+    if ((null != methodAnnotation) && StringUtils.hasText(methodAnnotation.notes())) {
       notes = methodAnnotation.notes();
     }
     context.put("notes", notes);

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationSummaryReader.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.mangofactory.swagger.scanners.RequestMappingContext;
 import com.wordnik.swagger.annotations.ApiOperation;
-import org.apache.commons.lang.StringUtils;
+import org.springframework.util.StringUtils;
 import org.springframework.web.method.HandlerMethod;
 
 public class OperationSummaryReader implements RequestMappingReader {
@@ -12,7 +12,7 @@ public void execute(RequestMappingContext context) {
     ApiOperation apiOperationAnnotation = context.getApiOperationAnnotation();
 
     String summary = handlerMethod.getMethod().getName();
-    if (null != apiOperationAnnotation && !StringUtils.isBlank(apiOperationAnnotation.value())) {
+    if (null != apiOperationAnnotation && StringUtils.hasText(apiOperationAnnotation.value())) {
       summary = apiOperationAnnotation.value();
     }
     context.put("summary", summary);

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/SwaggerParameterReader.java
Patch:
@@ -1,7 +1,7 @@
 package com.mangofactory.swagger.readers.operation;
 
 import com.mangofactory.swagger.scanners.RequestMappingContext;
-import com.wordnik.swagger.model.Parameter;
+import com.mangofactory.swagger.models.dto.Parameter;
 
 import java.util.Collection;
 import java.util.List;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/SwaggerResponseMessageReader.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.mangofactory.swagger.configuration.SwaggerGlobalSettings;
 import com.mangofactory.swagger.scanners.RequestMappingContext;
-import com.wordnik.swagger.model.ResponseMessage;
+import com.mangofactory.swagger.models.dto.ResponseMessage;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.method.HandlerMethod;
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterDefaultReader.java
Patch:
@@ -10,7 +10,7 @@
 
 import java.lang.annotation.Annotation;
 
-import static org.apache.commons.lang.StringUtils.*;
+import static org.springframework.util.StringUtils.*;
 
 public class ParameterDefaultReader implements Command<RequestMappingContext> {
   @Override
@@ -25,7 +25,7 @@ private String findAnnotatedDefaultValue(MethodParameter methodParameter) {
     Annotation[] methodAnnotations = methodParameter.getParameterAnnotations();
     if (null != methodAnnotations) {
       for (Annotation annotation : methodAnnotations) {
-        if (annotation instanceof ApiParam && !isBlank(((ApiParam) annotation).defaultValue())) {
+        if (annotation instanceof ApiParam && hasText(((ApiParam) annotation).defaultValue())) {
           return ((ApiParam) annotation).defaultValue();
         } else if (annotation instanceof RequestParam) {
           return ((RequestParam) annotation).defaultValue();

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterDescriptionReader.java
Patch:
@@ -5,15 +5,15 @@
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 
-import static org.apache.commons.lang.StringUtils.*;
+import static org.springframework.util.StringUtils.*;
 
 public class ParameterDescriptionReader implements Command<RequestMappingContext> {
   @Override
   public void execute(RequestMappingContext context) {
     MethodParameter methodParameter = (MethodParameter) context.get("methodParameter");
     ApiParam apiParam = methodParameter.getParameterAnnotation(ApiParam.class);
     String description = methodParameter.getParameterName();
-    if (null != apiParam && !isBlank(apiParam.value())) {
+    if (null != apiParam && hasText(apiParam.value())) {
       description = apiParam.value();
     }
     context.put("description", description);

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterNameReader.java
Patch:
@@ -15,7 +15,7 @@
 
 import static com.google.common.base.Strings.*;
 import static java.lang.String.*;
-import static org.apache.commons.lang.StringUtils.*;
+import static org.springframework.util.StringUtils.*;
 
 public class ParameterNameReader implements Command<RequestMappingContext> {
 
@@ -38,7 +38,7 @@ public void execute(RequestMappingContext context) {
     Optional<ApiParam> apiParam = Optional.fromNullable(methodParameter.getParameterAnnotation(ApiParam.class));
     apiParam = apiParam.or(annotations.fromHierarchy(methodParameter, ApiParam.class));
     String name;
-    if (apiParam.isPresent() && !isBlank(apiParam.get().name())) {
+    if (apiParam.isPresent() && hasText(apiParam.get().name())) {
       name = apiParam.get().name();
     } else {
       name = findParameterNameFromAnnotations(methodParameter);

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/configuration/CustomJavaPluginConfig.java
Patch:
@@ -3,7 +3,7 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.mangofactory.swagger.plugin.EnableSwagger;
 import com.mangofactory.swagger.plugin.SwaggerSpringMvcPlugin;
-import com.wordnik.swagger.model.ApiInfo;
+import com.mangofactory.swagger.models.dto.ApiInfo;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/DummyClass.java
Patch:
@@ -1,10 +1,9 @@
 package com.mangofactory.swagger.dummy;
 
 import com.mangofactory.swagger.annotations.ApiIgnore;
-
-import com.mangofactory.swagger.dummy.models.Treeish;
 import com.mangofactory.swagger.dummy.models.Example;
 import com.mangofactory.swagger.dummy.models.FoobarDto;
+import com.mangofactory.swagger.dummy.models.Treeish;
 import com.wordnik.swagger.annotations.ApiImplicitParam;
 import com.wordnik.swagger.annotations.ApiImplicitParams;
 import com.wordnik.swagger.annotations.ApiOperation;

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/controllers/ExcludedService.java
Patch:
@@ -4,7 +4,6 @@
 import com.mangofactory.swagger.dummy.models.Pet;
 import com.wordnik.swagger.annotations.Api;
 import com.wordnik.swagger.annotations.ApiParam;
-import org.apache.commons.lang.NotImplementedException;
 import org.springframework.stereotype.Controller;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -17,12 +16,12 @@ public class ExcludedService {
   @RequestMapping(method = RequestMethod.POST)
   public void someExcludedOperation(
           @ApiParam(value = "Pet object that needs to be added to the store", required = true) Pet pet) {
-    throw new NotImplementedException();
+    throw new RuntimeException("NotImplementedException");
   }
 
   @RequestMapping(value = "/another", method = RequestMethod.POST)
   public void anotherExcludedOperation(
           @ApiParam(value = "Pet object that needs to be added to the store", required = true) Pet pet) {
-    throw new NotImplementedException();
+    throw new RuntimeException("NotImplementedException");
   }
 }

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/controllers/FeatureDemonstrationService.java
Patch:
@@ -7,7 +7,6 @@
 import com.wordnik.swagger.annotations.Api;
 import com.wordnik.swagger.annotations.ApiOperation;
 import com.wordnik.swagger.annotations.ApiParam;
-import org.apache.commons.lang.NotImplementedException;
 import org.joda.time.LocalDate;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
@@ -37,13 +36,13 @@ public class FeatureDemonstrationService {
   public Pet getPetById(
           @ApiParam(value = "ID of pet that needs to be fetched", allowableValues = "range[1,5]", required = true)
           @PathVariable("petId") String petId) {
-    throw new NotImplementedException();
+    throw new RuntimeException("NotImplementedException");
   }
 
   //Lists all http methods with this operation
   @RequestMapping("/allMethodsAllowed")
   public void allMethodAllowed() {
-    throw new NotImplementedException();
+    throw new RuntimeException("NotImplementedException");
   }
 
   //Calculates effective url and ignores UriComponentsBuilder

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/ApiOperationReader.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Set;
 
 import static com.google.common.collect.Lists.*;
+import static com.google.common.collect.Sets.*;
 import static com.mangofactory.swagger.ScalaUtils.*;
 
 public class ApiOperationReader implements Command<RequestMappingContext> {
@@ -64,7 +65,7 @@ public void execute(RequestMappingContext outerContext) {
     AuthorizationContext authorizationContext = (AuthorizationContext) outerContext.get("authorizationContext");
     String requestMappingPattern = (String) outerContext.get("requestMappingPattern");
     RequestMethodsRequestCondition requestMethodsRequestCondition = requestMappingInfo.getMethodsCondition();
-    List<ResponseMessage> responseMessages = newArrayList();
+    Set<ResponseMessage> responseMessages = newHashSet();
     List<Operation> operations = newArrayList();
 
     Set<RequestMethod> requestMethods = requestMethodsRequestCondition.getMethods();

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/controllers/ExcludedService.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.dummy.controllers;
 
+import com.mangofactory.swagger.annotations.ApiIgnore;
 import com.mangofactory.swagger.dummy.models.Pet;
 import com.wordnik.swagger.annotations.Api;
 import com.wordnik.swagger.annotations.ApiParam;
@@ -9,8 +10,9 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 
 @Controller
+@ApiIgnore
 @RequestMapping("/excluded")
-@Api(value = "", description = "Operations that are exluded")
+@Api(value = "", description = "Operations that are excluded")
 public class ExcludedService {
   @RequestMapping(method = RequestMethod.POST)
   public void someExcludedOperation(

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/MediaTypeReader.java
Patch:
@@ -54,7 +54,7 @@ public void execute(RequestMappingContext context) {
       producesList.add(MediaType.ALL_VALUE);
     }
     if (consumesList.isEmpty()) {
-      consumesList.add(MediaType.ALL_VALUE);
+      consumesList.add(MediaType.APPLICATION_JSON_VALUE);
     }
     context.put("consumes", consumesList);
     context.put("produces", producesList);

File: swagger-models/src/main/java/com/mangofactory/swagger/models/property/BaseModelProperty.java
Patch:
@@ -85,5 +85,4 @@ protected Optional<ApiModelProperty> getApiModelProperty() {
     return apiModelProperty;
   }
 
-
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SwaggerGlobalSettings.java
Patch:
@@ -9,6 +9,8 @@
 import java.util.Map;
 import java.util.Set;
 
+import static com.google.common.collect.Maps.*;
+
 public class SwaggerGlobalSettings {
   /**
    * Set of classes to exclude from spring controller request mapping methods
@@ -21,7 +23,7 @@ public class SwaggerGlobalSettings {
    *
    * @see com.mangofactory.swagger.readers.operation.DefaultResponseMessageReader
    */
-  private Map<RequestMethod, List<ResponseMessage>> globalResponseMessages;
+  private Map<RequestMethod, List<ResponseMessage>> globalResponseMessages = newHashMap();
   private TypeResolver typeResolver = new TypeResolver();
   private AlternateTypeProvider alternateTypeProvider;
 

File: swagger-models/src/main/java/com/mangofactory/swagger/models/property/constructor/ConstructorModelPropertyProvider.java
Patch:
@@ -15,7 +15,9 @@
 public class ConstructorModelPropertyProvider extends FieldModelPropertyProvider implements ModelPropertiesProvider {
 
   @Autowired
-  public ConstructorModelPropertyProvider(FieldProvider fieldProvider, AlternateTypeProvider alternateTypeProvider,
+  public ConstructorModelPropertyProvider(
+      FieldProvider fieldProvider,
+      AlternateTypeProvider alternateTypeProvider,
       BeanPropertyNamingStrategy namingStrategy) {
 
     super(fieldProvider, alternateTypeProvider, namingStrategy);

File: swagger-models/src/test/java/com/mangofactory/swagger/models/TypeWithGettersAndSetters.java
Patch:
@@ -8,6 +8,8 @@ public class TypeWithGettersAndSetters {
   private boolean boolProp;
   private ExampleEnum enumProp;
   private GenericType<String> genericProp;
+  private GenericType<byte[]> genericByteArray;
+  private GenericType<Category[]> genericCategoryArray;
 
   public int getIntProp() {
     return intProp;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/OperationParameterReader.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.mangofactory.swagger.configuration.SwaggerGlobalSettings;
 import com.mangofactory.swagger.core.CommandExecutor;
+import com.mangofactory.swagger.models.alternates.AlternateTypeProvider;
 import com.mangofactory.swagger.readers.Command;
 import com.mangofactory.swagger.readers.operation.HandlerMethodResolver;
 import com.mangofactory.swagger.readers.operation.ResolvedMethodParameter;
@@ -29,6 +30,7 @@ protected Collection<? extends Parameter> readParameters(final RequestMappingCon
     SwaggerGlobalSettings swaggerGlobalSettings = (SwaggerGlobalSettings) context.get("swaggerGlobalSettings");
     HandlerMethodResolver handlerMethodResolver
             = new HandlerMethodResolver(swaggerGlobalSettings.getTypeResolver());
+    AlternateTypeProvider alternateTypeProvider = swaggerGlobalSettings.getAlternateTypeProvider();
 
     List<ResolvedMethodParameter> methodParameters = handlerMethodResolver.methodParameters(handlerMethod);
     List<Parameter> parameters = newArrayList();
@@ -43,7 +45,7 @@ protected Collection<? extends Parameter> readParameters(final RequestMappingCon
     commandList.add(new ParameterNameReader());
     commandList.add(new ParameterRequiredReader());
 
-    ModelAttributeParameterExpander expander = new ModelAttributeParameterExpander();
+    ModelAttributeParameterExpander expander = new ModelAttributeParameterExpander(alternateTypeProvider);
     for (ResolvedMethodParameter methodParameter : methodParameters) {
 
       if (!shouldIgnore(methodParameter, swaggerGlobalSettings.getIgnorableParameterTypes())) {

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/models/Parent.java
Patch:
@@ -1,4 +1,3 @@
-//Copyright 2014 Choice Hotels International
 package com.mangofactory.swagger.dummy.models;
 
 public class Parent {

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/ModelAttributeParameterExpander.java
Patch:
@@ -28,7 +28,7 @@ public void expand(final String parentName, final Class<?> paramType,
         continue;
       }
 
-      if (!typeBelongsToJavaPackage(field) && !field.getType().isEnum()) {
+      if (!typeBelongsToJavaPackage(field) && !field.getType().isEnum() && !field.getType().equals(paramType)) {
 
         expand(field.getName(), field.getType(), parameters);
         continue;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/ApiDescriptionReader.java
Patch:
@@ -59,7 +59,7 @@ public void execute(RequestMappingContext context) {
   public String sanitizeRequestMappingPattern(String requestMappingPattern) {
     String result = requestMappingPattern;
     //remove regex portion '/{businessId:\\w+}'
-    result = result.replaceAll("\\{(.*?):.*?\\}", "{$1}");
+    result = result.replaceAll("\\{([^}]*?):.*?\\}", "{$1}");
     return result.isEmpty() ? "/" : result;
   }
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/ApiDescriptionReader.java
Patch:
@@ -59,7 +59,7 @@ public void execute(RequestMappingContext context) {
   public String sanitizeRequestMappingPattern(String requestMappingPattern) {
     String result = requestMappingPattern;
     //remove regex portion '/{businessId:\\w+}'
-    result = result.replaceAll("\\{(.*?):.*?\\}", "{$1}");
+    result = result.replaceAll("\\{([^}]*?):.*?\\}", "{$1}");
     return result.isEmpty() ? "/" : result;
   }
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/paths/RelativeSwaggerPathProvider.java
Patch:
@@ -2,6 +2,8 @@
 
 import javax.servlet.ServletContext;
 
+import static com.google.common.base.Strings.isNullOrEmpty;
+
 public class  RelativeSwaggerPathProvider extends SwaggerPathProvider {
     public static final String ROOT = "/";
   private final ServletContext servletContext;
@@ -13,7 +15,7 @@ public RelativeSwaggerPathProvider(ServletContext servletContext) {
 
   @Override
     protected String applicationPath() {
-        return servletContext.getContextPath();
+        return isNullOrEmpty(servletContext.getContextPath()) ? ROOT : servletContext.getContextPath();
     }
 
     @Override

File: swagger-models/src/main/java/com/mangofactory/swagger/models/DefaultModelProvider.java
Patch:
@@ -110,7 +110,7 @@ private Option<ModelRef> itemModelRef(ResolvedType type) {
             return Option.empty();
         }
         ResolvedType collectionElementType = collectionElementType(type);
-        String elementTypeName = simpleTypeName(collectionElementType);
+        String elementTypeName = typeName(collectionElementType);
         String qualifiedElementTypeName = simpleQualifiedTypeName(collectionElementType);
         if (!isBaseType(elementTypeName)) {
             return Option.apply(new ModelRef(null,

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -83,7 +83,7 @@ public List<Class<? extends Annotation>> defaultExcludeAnnotations() {
 
   @Bean
   public SwaggerPathProvider defaultSwaggerPathProvider() {
-    return new RelativeSwaggerPathProvider();
+    return new RelativeSwaggerPathProvider(servletContext);
   }
 
   @Bean

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -36,7 +36,7 @@ public static Parameter getImplicitParameter(ApiImplicitParam param) {
             param.required(),
             param.allowMultiple(),
             param.dataType(),
-            ParameterAllowableReader.getAllowableValueFromString(param.allowableValues()),
+            ParameterAllowableReader.allowableValueFromString(param.allowableValues()),
             param.paramType(),
             toOption(param.access())
     );

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterAllowableReader.java
Patch:
@@ -29,7 +29,7 @@ public void execute(RequestMappingContext context) {
     AllowableValues allowableValues = null;
     String allowableValueString = findAnnotatedAllowableValues(methodParameter);
     if (allowableValueString!=null && !"".equals(allowableValueString)) {
-      allowableValues = ParameterAllowableReader.getAllowableValueFromString(allowableValueString);
+      allowableValues = ParameterAllowableReader.allowableValueFromString(allowableValueString);
     } else {
       if (methodParameter.getParameterType().isEnum()) {
         Object[] enumConstants = methodParameter.getParameterType().getEnumConstants();
@@ -51,7 +51,7 @@ public void execute(RequestMappingContext context) {
     context.put("allowableValues", allowableValues);
   }
 
-  public static AllowableValues getAllowableValueFromString(String allowableValueString) {
+  public static AllowableValues allowableValueFromString(String allowableValueString) {
      AllowableValues allowableValues = null;
      allowableValueString = allowableValueString.trim().replaceAll(" ", "");
      if (allowableValueString.startsWith("range[")) {

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationParameterReader.java
Patch:
@@ -20,6 +20,7 @@
 import com.wordnik.swagger.model.AllowableValues;
 import com.wordnik.swagger.model.Parameter;
 
+import org.apache.commons.lang.StringUtils;
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.method.HandlerMethod;
 
@@ -191,7 +192,7 @@ private AllowableValues getAllowableValues(final Option<String> allowableStr, fi
 
       AllowableValues allowable = null;
 
-      if (allowableStr.nonEmpty()) {
+      if (allowableStr.nonEmpty() && StringUtils.isNotBlank(allowableStr.get())) {
 
           allowable = ParameterAllowableReader.getAllowableValueFromString(allowableStr.get());
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationParameterReader.java
Patch:
@@ -20,6 +20,7 @@
 import com.wordnik.swagger.model.AllowableValues;
 import com.wordnik.swagger.model.Parameter;
 
+import org.apache.commons.lang.StringUtils;
 import org.springframework.web.bind.annotation.ModelAttribute;
 import org.springframework.web.method.HandlerMethod;
 
@@ -191,7 +192,7 @@ private AllowableValues getAllowableValues(final Option<String> allowableStr, fi
 
       AllowableValues allowable = null;
 
-      if (allowableStr.nonEmpty()) {
+      if (allowableStr.nonEmpty() && StringUtils.isNotBlank(allowableStr.get())) {
 
           allowable = ParameterAllowableReader.getAllowableValueFromString(allowableStr.get());
 

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/models/Example.java
Patch:
@@ -1,7 +1,7 @@
-package com.mangofactory.swagger.readers.operation;
+package com.mangofactory.swagger.dummy.models;
 
-import com.wordnik.swagger.annotations.ApiParam;
 import com.wordnik.swagger.annotations.ApiModelProperty;
+import com.wordnik.swagger.annotations.ApiParam;
 
 import java.io.Serializable;
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationParameterReader.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
 import java.util.Collection;
 import java.util.List;
 import java.util.Map;
@@ -98,7 +99,7 @@ private void expandModelAttribute(final String parentName, final Class<?> paramT
       for (int i = 0; i < fields.length; i++) {
           Field field = fields[i];
 
-          if (field.isSynthetic()) {
+          if (Modifier.isStatic(field.getModifiers()) || field.isSynthetic()) {
               continue;
           }
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationParameterReader.java
Patch:
@@ -1,6 +1,5 @@
 package com.mangofactory.swagger.readers.operation;
 
-import com.mangofactory.swagger.annotations.ApiIgnore;
 import com.mangofactory.swagger.configuration.SwaggerGlobalSettings;
 import com.mangofactory.swagger.core.CommandExecutor;
 import com.mangofactory.swagger.models.Types;
@@ -90,14 +89,14 @@ private void expandModelAttribute(final String parentName, final Class<?> paramT
       for (int i = 0; i < fields.length; i++) {
           Field field = fields[i];
 
-          if (field.getAnnotation(ApiIgnore.class) != null || field.isSynthetic()) {
+          if (field.isSynthetic()) {
               continue;
           }
 
           if (field.getType().getPackage() != null &&
                   !field.getType().getPackage().getName().startsWith("java") && !field.getType().isEnum()) {
 
-              expandModelAttribute(field.getName().toLowerCase(), field.getType(), parameters);
+              expandModelAttribute(field.getName(), field.getType(), parameters);
               continue;
           }
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -14,7 +14,6 @@
 import com.mangofactory.swagger.plugin.SwaggerPluginAdapter;
 import com.wordnik.swagger.model.ResponseMessage;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -1,7 +1,6 @@
 package com.mangofactory.swagger.readers.operation;
 
 import com.google.common.collect.Lists;
-import com.mangofactory.swagger.readers.operation.parameter.ParameterAllowableReader;
 import com.mangofactory.swagger.scanners.RequestMappingContext;
 import com.wordnik.swagger.annotations.ApiImplicitParam;
 import com.wordnik.swagger.model.Parameter;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -14,7 +14,6 @@
 import com.mangofactory.swagger.plugin.SwaggerPluginAdapter;
 import com.wordnik.swagger.model.ResponseMessage;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationImplicitParameterReader.java
Patch:
@@ -1,7 +1,6 @@
 package com.mangofactory.swagger.readers.operation;
 
 import com.google.common.collect.Lists;
-import com.mangofactory.swagger.readers.operation.parameter.ParameterAllowableReader;
 import com.mangofactory.swagger.scanners.RequestMappingContext;
 import com.wordnik.swagger.annotations.ApiImplicitParam;
 import com.wordnik.swagger.model.Parameter;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -1,7 +1,6 @@
 package com.mangofactory.swagger.configuration;
 
 import com.fasterxml.classmate.TypeResolver;
-import com.fasterxml.jackson.databind.ObjectMapper;
 import com.google.common.annotations.VisibleForTesting;
 import com.mangofactory.swagger.annotations.ApiIgnore;
 import com.mangofactory.swagger.core.ClassOrApiAnnotationResourceGrouping;

File: swagger-models/src/main/java/com/mangofactory/swagger/models/DefaultModelProvider.java
Patch:
@@ -36,7 +36,7 @@ public class DefaultModelProvider implements ModelProvider {
 
     @Autowired
     public DefaultModelProvider(TypeResolver resolver, AlternateTypeProvider alternateTypeProvider,
-                                @Qualifier("modelPropertiesProvider") ModelPropertiesProvider  propertiesProvider,
+                                @Qualifier("default") ModelPropertiesProvider  propertiesProvider,
                                 ModelDependencyProvider dependencyProvider) {
         this.resolver = resolver;
         this.alternateTypeProvider = alternateTypeProvider;

File: swagger-models/src/main/java/com/mangofactory/swagger/models/ModelDependencyProvider.java
Patch:
@@ -26,7 +26,7 @@ public class ModelDependencyProvider {
 
     @Autowired
     public ModelDependencyProvider(TypeResolver typeResolver, AlternateTypeProvider alternateTypeProvider,
-                                   @Qualifier("modelPropertiesProvider") ModelPropertiesProvider propertiesProvider) {
+                                   @Qualifier("default") ModelPropertiesProvider propertiesProvider) {
         this.typeResolver = typeResolver;
         this.alternateTypeProvider = alternateTypeProvider;
         this.propertiesProvider = propertiesProvider;

File: swagger-models/src/main/java/com/mangofactory/swagger/models/property/bean/Accessors.java
Patch:
@@ -1,10 +1,10 @@
-package com.mangofactory.swagger.models;
+package com.mangofactory.swagger.models.property.bean;
 
 import java.lang.reflect.Method;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-public class Accessors {
+class Accessors {
   private static Pattern getter = Pattern.compile("^get([a-zA-Z_0-9].*)");
   private static Pattern isGetter = Pattern.compile("^is([a-zA-Z_0_9].*)");
   private static Pattern setter = Pattern.compile("^set([a-zA-Z_0-9].*)");

File: swagger-models/src/main/java/com/mangofactory/swagger/models/property/bean/AccessorsProvider.java
Patch:
@@ -12,7 +12,7 @@
 import org.springframework.stereotype.Component;
 
 import static com.google.common.collect.Lists.*;
-import static com.mangofactory.swagger.models.Accessors.*;
+import static com.mangofactory.swagger.models.property.bean.Accessors.*;
 
 @Component
 public class AccessorsProvider {

File: swagger-models/src/main/java/com/mangofactory/swagger/models/property/bean/BeanModelPropertyProvider.java
Patch:
@@ -44,7 +44,7 @@ public class BeanModelPropertyProvider implements ModelPropertiesProvider {
 
   @Autowired
   public BeanModelPropertyProvider(@Qualifier("swaggerObjectMapper") ObjectMapper objectMapper,
-                                   AccessorsProvider  accessors, TypeResolver typeResolver,
+                                   AccessorsProvider accessors, TypeResolver typeResolver,
                                    AlternateTypeProvider alternateTypeProvider) {
     this.objectMapper = objectMapper;
     this.typeResolver = typeResolver;
@@ -113,7 +113,8 @@ private String methodName(AnnotatedMember member) {
 
   private BeanModelProperty beanModelProperty(ResolvedMethod childProperty, Optional<BeanPropertyDefinition>
           jacksonProperty) {
-    return new BeanModelProperty(jacksonProperty.get().getName(),
+    BeanPropertyDefinition beanPropertyDefinition = jacksonProperty.get();
+    return new BeanModelProperty(beanPropertyDefinition,
             childProperty, isGetter(childProperty.getRawMember()), typeResolver, alternateTypeProvider);
   }
 

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/DummyModels.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonProperty;
 import com.wordnik.swagger.annotations.ApiModel;
 import com.wordnik.swagger.annotations.ApiModelProperty;
 
@@ -94,6 +95,7 @@ public void setName(String name) {
 
   public class ModelWithSerializeOnlyProperty {
     private String alwaysVisible;
+    @JsonIgnore
     private Long visibleForSerialize;
 
     public String getAlwaysVisible() {
@@ -105,6 +107,7 @@ public void setAlwaysVisible(String alwaysVisible) {
       this.alwaysVisible = alwaysVisible;
     }
 
+    @JsonProperty
     @JsonInclude
     public Long getVisibleForSerialize() {
       return visibleForSerialize;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/SwaggerApiResourceListing.java
Patch:
@@ -87,7 +87,7 @@ public void initialize() {
     log.info("Added a resource listing with ({}) api resources: ", apiListingReferences.size());
     for (ApiListingReference apiListingReference : apiListingReferences) {
       String path = fromOption(apiListingReference.description());
-      String prefix = path.startsWith("http") ? path : DefaultSwaggerController.DOCUMENTATION_BASE_PATH;
+      String prefix = (path != null && path.startsWith("http")) ? path : DefaultSwaggerController.DOCUMENTATION_BASE_PATH;
       log.info("  {} at location: {}{}", path, prefix, apiListingReference.path());
     }
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/SwaggerApiResourceListing.java
Patch:
@@ -87,7 +87,7 @@ public void initialize() {
     log.info("Added a resource listing with ({}) api resources: ", apiListingReferences.size());
     for (ApiListingReference apiListingReference : apiListingReferences) {
       String path = fromOption(apiListingReference.description());
-      String prefix = path.startsWith("http") ? path : DefaultSwaggerController.DOCUMENTATION_BASE_PATH;
+      String prefix = (path != null && path.startsWith("http")) ? path : DefaultSwaggerController.DOCUMENTATION_BASE_PATH;
       log.info("  {} at location: {}{}", path, prefix, apiListingReference.path());
     }
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/annotations/ApiIgnore.java
Patch:
@@ -6,6 +6,6 @@
 import java.lang.annotation.Target;
 
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ ElementType.METHOD})
+@Target({ ElementType.METHOD, ElementType.TYPE, ElementType.PARAMETER})
 public @interface ApiIgnore {
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -101,6 +101,7 @@ public Set<Class> defaultIgnorableParameterTypes() {
     ignored.add(BindingResult.class);
     ignored.add(ServletContext.class);
     ignored.add(UriComponentsBuilder.class);
+    ignored.add(ApiIgnore.class);
     return ignored;
   }
 

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/DummyClass.java
Patch:
@@ -149,6 +149,8 @@ public void methodParameterWithRequestBodyAnnotation(
 
    @ApiResponses({ @ApiResponse(code = 413, message = "a message")})
    public void methodWithApiResponses(){}
+
+   @ApiIgnore
    public static class ApiIgnorableClass {
       @ApiIgnore
       public void dummyMethod() {

File: swagger-models/src/main/java/com/mangofactory/swagger/models/FieldModelProperty.java
Patch:
@@ -82,7 +82,7 @@ public String getName() {
         return name;
     }
 
-    @Override
+  @Override
     public ResolvedType getType() {
        return alternateTypeProvider.alternateFor(realType(childField));
     }

File: swagger-models/src/main/java/com/mangofactory/swagger/models/ModelProperty.java
Patch:
@@ -6,7 +6,7 @@
 
 public interface ModelProperty {
     String getName();
-    ResolvedType getType();
+  ResolvedType getType();
     String typeName(ModelContext modelContext);
     String qualifiedTypeName();
     AllowableValues allowableValues();

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationResponseClassReader.java
Patch:
@@ -29,7 +29,7 @@ public void execute(RequestMappingContext context) {
             returnType = swaggerGlobalSettings.getAlternateTypeProvider().alternateFor(returnType);
         }
         if (Void.class.equals(returnType.getErasedType()) || Void.TYPE.equals(returnType.getErasedType())) {
-            context.put("responseClass", "");
+            context.put("responseClass", "void");
             return;
         }
         String responseTypeName = ModelUtils.getResponseClassName(returnType);

File: swagger-models/src/main/java/com/mangofactory/swagger/models/ModelContext.java
Patch:
@@ -21,7 +21,7 @@ public class ModelContext {
         this.returnType = returnType;
     }
 
-    public ModelContext(ModelContext parentContext, ResolvedType input) {
+    ModelContext(ModelContext parentContext, ResolvedType input) {
         this.parentContext = parentContext;
         this.type = input;
         this.returnType = parentContext.isReturnType();

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/HandlerMethodResolver.java
Patch:
@@ -129,7 +129,7 @@ private boolean bothAreVoids(ResolvedType candidateMethodReturnValue, Type retur
     private ResolvedType returnTypeOrVoid(ResolvedMethod input) {
         ResolvedType returnType = input.getReturnType();
         if (returnType == null) {
-            returnType = new TypeResolver().resolve(Void.class);
+            returnType = typeResolver.resolve(Void.class);
         }
         return returnType;
     }

File: swagger-models/src/main/java/com/mangofactory/swagger/models/DefaultModelProvider.java
Patch:
@@ -96,9 +96,9 @@ private Option<String> modelDescription(ResolvedType type) {
     private Iterable<? extends com.mangofactory.swagger.models.ModelProperty> properties(ModelContext context,
                                                                                          ResolvedType propertiesHost) {
         if (context.isReturnType()) {
-            return propertiesProvider.propertiesForDeserialization(propertiesHost);
-        } else {
             return propertiesProvider.propertiesForSerialization(propertiesHost);
+        } else {
+            return propertiesProvider.propertiesForDeserialization(propertiesHost);
         }
     }
 

File: swagger-models/src/main/java/com/mangofactory/swagger/models/ModelDependencyProvider.java
Patch:
@@ -107,9 +107,9 @@ private List<ResolvedType> resolvedPropertiesAndFields(ModelContext modelContext
 
     private Iterable<? extends ModelProperty> propertiesFor(ModelContext modelContext, ResolvedType resolvedType) {
         if (modelContext.isReturnType()) {
-            return propertiesProvider.propertiesForDeserialization(resolvedType);
-        } else {
             return propertiesProvider.propertiesForSerialization(resolvedType);
+        } else {
+            return propertiesProvider.propertiesForDeserialization(resolvedType);
         }
     }
 

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/DummyModels.java
Patch:
@@ -42,20 +42,20 @@ public class AnnotatedBusinessModel {
 //        @ApiModelProperty(value = "Total number of current employees")
         private String numEmployees;
 
+        @ApiModelProperty(value = "The name of this business", required = true)
         public String getName() {
             return name;
         }
 
-        @ApiModelProperty(value = "The name of this business", required = true)
         public void setName(String name) {
             this.name = name;
         }
 
+        @ApiModelProperty(value = "Total number of current employees")
         public String getNumEmployees() {
             return numEmployees;
         }
 
-        @ApiModelProperty(value = "Total number of current employees")
         public void setNumEmployees(String numEmployees) {
             this.numEmployees = numEmployees;
         }

File: swagger-models/src/main/java/com/mangofactory/swagger/models/AccessorsProvider.java
Patch:
@@ -56,7 +56,7 @@ private Function<ResolvedMethod, BeanModelProperty> toBeanModelProperty() {
             @Override
             public BeanModelProperty apply(ResolvedMethod input) {
                 return new BeanModelProperty(propertyName(input.getRawMember().getName()), input,
-                        isGetter(input.getRawMember()));
+                        isGetter(input.getRawMember()), typeResolver);
             }
         };
     }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SwaggerApiListingJsonSerializer.java
Patch:
@@ -1,7 +1,6 @@
 package com.mangofactory.swagger.configuration;
 
 import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.wordnik.swagger.model.ApiListing;
@@ -11,8 +10,7 @@
 public class SwaggerApiListingJsonSerializer extends JsonSerializer<ApiListing> {
 
   @Override
-  public void serialize(ApiListing value, JsonGenerator jgen, SerializerProvider provider) throws IOException,
-      JsonProcessingException {
+  public void serialize(ApiListing value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
     String jsonString = com.wordnik.swagger.core.util.JsonSerializer.asJson(value);
     jgen.writeRaw(jsonString);
   }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/SwaggerApiResourceListing.java
Patch:
@@ -80,7 +80,7 @@ public void initialize() {
               toOption(apiInfo)
       );
 
-      log.info("Added a resource listing with the ({}) api resources: ", apiListingReferences.size());
+      log.info("Added a resource listing with ({}) api resources: ", apiListingReferences.size());
       for(ApiListingReference apiListingReference : apiListingReferences){
          String path = fromOption(apiListingReference.description());
          String prefix = path.startsWith("http") ? path :DefaultSwaggerController.DOCUMENTATION_BASE_PATH;

File: swagger-models/src/main/java/com/mangofactory/swagger/models/alternates/AlternateTypeRule.java
Patch:
@@ -4,7 +4,7 @@
 
 import static com.mangofactory.swagger.models.alternates.WildcardType.*;
 
-class AlternateTypeRule {
+public class AlternateTypeRule {
     private final ResolvedType original;
     private final ResolvedType alternate;
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/ResourceGroupingStrategy.java
Patch:
@@ -28,4 +28,5 @@ public interface ResourceGroupingStrategy {
     * @return description of the resource
     */
    public String getResourceDescription(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod);
+
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/scanners/ResourceGroups.java
Patch:
@@ -7,10 +7,10 @@
 
 public class ResourceGroups {
     public static List<String> groupUris(Iterable<ResourceGroup> resourceGroups) {
-        return FluentIterable.from(resourceGroups).transform(groupUri()).toList();
+        return FluentIterable.from(resourceGroups).transform(groupName()).toList();
     }
 
-    public static Function<ResourceGroup, String> groupUri() {
+    public static Function<ResourceGroup, String> groupName() {
         return new Function<ResourceGroup, String>() {
             @Override
             public String apply(ResourceGroup input) {

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -3,10 +3,11 @@
 import com.fasterxml.classmate.TypeResolver;
 import com.mangofactory.swagger.annotations.ApiIgnore;
 import com.mangofactory.swagger.core.*;
-import com.mangofactory.swagger.core.AbsoluteSwaggerPathProvider;
+import com.mangofactory.swagger.paths.AbsoluteSwaggerPathProvider;
 import com.mangofactory.swagger.models.alternates.AlternateTypeProvider;
 import com.mangofactory.swagger.models.alternates.WildcardType;
 import com.mangofactory.swagger.models.configuration.SwaggerModelsConfiguration;
+import com.mangofactory.swagger.paths.SwaggerPathProvider;
 import com.wordnik.swagger.model.ResponseMessage;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/SwaggerApiResourceListing.java
Patch:
@@ -3,6 +3,7 @@
 import com.mangofactory.swagger.authorization.AuthorizationContext;
 import com.mangofactory.swagger.configuration.SwaggerGlobalSettings;
 import com.mangofactory.swagger.models.ModelProvider;
+import com.mangofactory.swagger.paths.SwaggerPathProvider;
 import com.mangofactory.swagger.scanners.ApiListingReferenceScanner;
 import com.mangofactory.swagger.scanners.ApiListingScanner;
 import com.mangofactory.swagger.scanners.RequestMappingContext;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/ApiDescriptionReader.java
Patch:
@@ -1,6 +1,6 @@
 package com.mangofactory.swagger.readers;
 
-import com.mangofactory.swagger.core.SwaggerPathProvider;
+import com.mangofactory.swagger.paths.SwaggerPathProvider;
 import com.mangofactory.swagger.scanners.RequestMappingContext;
 import com.wordnik.swagger.model.ApiDescription;
 import com.wordnik.swagger.model.Operation;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/scanners/ApiListingReferenceScanner.java
Patch:
@@ -3,7 +3,7 @@
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.Multimaps;
 import com.mangofactory.swagger.core.ResourceGroupingStrategy;
-import com.mangofactory.swagger.core.SwaggerPathProvider;
+import com.mangofactory.swagger.paths.SwaggerPathProvider;
 import com.wordnik.swagger.model.ApiListingReference;
 import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
@@ -23,7 +23,6 @@
 import java.util.Map.Entry;
 import java.util.Set;
 
-import static com.google.common.base.Strings.*;
 import static com.google.common.collect.Lists.*;
 import static com.google.common.collect.Ordering.*;
 import static com.mangofactory.swagger.ScalaUtils.*;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/scanners/ApiListingScanner.java
Patch:
@@ -5,7 +5,7 @@
 import com.mangofactory.swagger.configuration.SwaggerGlobalSettings;
 import com.mangofactory.swagger.core.CommandExecutor;
 import com.mangofactory.swagger.core.ResourceGroupingStrategy;
-import com.mangofactory.swagger.core.SwaggerPathProvider;
+import com.mangofactory.swagger.paths.SwaggerPathProvider;
 import com.mangofactory.swagger.models.ModelProvider;
 import com.mangofactory.swagger.readers.ApiDescriptionReader;
 import com.mangofactory.swagger.readers.ApiModelReader;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/AbsoluteSwaggerPathProvider.java
Patch:
@@ -5,7 +5,7 @@
 
 import javax.servlet.ServletContext;
 
-public class DefaultSwaggerPathProvider implements SwaggerPathProvider {
+public class AbsoluteSwaggerPathProvider implements SwaggerPathProvider {
    @Autowired
    private ServletContext servletContext;
    private String apiResourceSuffix = "";

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/ModelUtils.java
Patch:
@@ -20,7 +20,7 @@ public static String getModelName(TypeResolver resolver, Type clazz){
        return ResolvedTypes.typeName(asResolved(resolver, clazz));
    }
 
-    public static String getReponseClassName(ResolvedType returnType) {
+    public static String getResponseClassName(ResolvedType returnType) {
         return ResolvedTypes.responseTypeName(returnType);
     }
 }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationResponseClassReader.java
Patch:
@@ -32,7 +32,7 @@ public void execute(RequestMappingContext context) {
             context.put("responseClass", "");
             return;
         }
-        String responseTypeName = ModelUtils.getReponseClassName(returnType);
+        String responseTypeName = ModelUtils.getResponseClassName(returnType);
         log.debug("Setting response class to:" + responseTypeName);
         context.put("responseClass", responseTypeName);
     }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterDataTypeReader.java
Patch:
@@ -20,7 +20,7 @@ public void execute(RequestMappingContext context) {
         if (MultipartFile.class.isAssignableFrom(parameterType.getErasedType())) {
             context.put("dataType", "file");
         } else {
-            context.put("dataType", ModelUtils.getReponseClassName(parameterType));
+            context.put("dataType", ModelUtils.getResponseClassName(parameterType));
         }
     }
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/scanners/ApiListingScanner.java
Patch:
@@ -132,7 +132,7 @@ private Predicate<? super ApiDescription> withPathBeginning(final String path) {
         return new Predicate<ApiDescription>() {
             @Override
             public boolean apply(ApiDescription input) {
-                return input.path().startsWith(path);
+                return input.path().toLowerCase().startsWith(path.toLowerCase());
             }
         };
     }

File: swagger-models/src/main/java/com/mangofactory/swagger/models/DefaultModelProvider.java
Patch:
@@ -7,6 +7,7 @@
 import com.wordnik.swagger.model.Model;
 import com.wordnik.swagger.model.ModelProperty;
 import com.wordnik.swagger.model.ModelRef;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.stereotype.Component;
 import scala.Option;
@@ -29,6 +30,7 @@ public class DefaultModelProvider implements ModelProvider {
     private final ModelPropertiesProvider propertiesProvider;
     private final ModelDependencyProvider dependencyProvider;
 
+    @Autowired
     public DefaultModelProvider(TypeResolver resolver, ModelPropertiesProvider propertiesProvider,
                                 ModelDependencyProvider dependencyProvider) {
         this.resolver = resolver;

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -9,11 +9,13 @@
 import com.mangofactory.swagger.core.SwaggerPathProvider;
 import com.mangofactory.swagger.models.alternates.AlternateTypeProvider;
 import com.mangofactory.swagger.models.alternates.WildcardType;
+import com.mangofactory.swagger.models.configuration.SwaggerModelsConfiguration;
 import com.wordnik.swagger.model.ResponseMessage;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.ComponentScan;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
 import org.springframework.http.HttpHeaders;
 import org.springframework.validation.BindingResult;
 import org.springframework.web.bind.annotation.RequestMethod;
@@ -42,6 +44,7 @@
 
 @Configuration
 @ComponentScan(basePackages = { "com.mangofactory.swagger.controllers" })
+@Import(SwaggerModelsConfiguration.class)
 public class SpringSwaggerConfig {
 
     @Autowired

File: swagger-models/src/main/java/com/mangofactory/swagger/models/ResolvedTypes.java
Patch:
@@ -113,7 +113,7 @@ public static ResolvedType asResolved(TypeResolver typeResolver, Type type) {
     public static AllowableValues allowableValues(ResolvedType resolvedType) {
         if (isBaseType(simpleTypeName(resolvedType)) && resolvedType.getErasedType().isEnum()) {
             List<String> enumValues = getEnumValues(resolvedType.getErasedType());
-            return new AllowableListValues(JavaConversions.collectionAsScalaIterable(enumValues).toList(), "string");
+            return new AllowableListValues(JavaConversions.collectionAsScalaIterable(enumValues).toList(), "LIST");
         }
         return null;
     }

File: swagger-models/src/main/java/com/mangofactory/swagger/models/ResolvedTypes.java
Patch:
@@ -109,7 +109,7 @@ public static ResolvedType asResolved(TypeResolver typeResolver, Type type) {
     public static AllowableValues allowableValues(ResolvedType resolvedType) {
         if (isBaseType(simpleTypeName(resolvedType)) && resolvedType.getErasedType().isEnum()) {
             List<String> enumValues = getEnumValues(resolvedType.getErasedType());
-            return new AllowableListValues(JavaConversions.collectionAsScalaIterable(enumValues).toList(), "string");
+            return new AllowableListValues(JavaConversions.collectionAsScalaIterable(enumValues).toList(), "LIST");
         }
         return null;
     }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/core/SwaggerApiResourceListing.java
Patch:
@@ -66,6 +66,8 @@ public void initialize() {
           ApiListingScanner apiListingScanner = new ApiListingScanner(resourceGroupRequestMappings, swaggerPathProvider,
                   modelProvider, authorizationContext);
          apiListingScanner.setSwaggerGlobalSettings(swaggerGlobalSettings);
+          //DK TODO: Fix this hack!
+          apiListingScanner.setControllerNamingStrategy(apiListingReferenceScanner.getResourceGroupingStrategy());
 
          Map<String, ApiListing> apiListings = apiListingScanner.scan();
          swaggerCache.addApiListings(apiListings);

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationResponseClassReader.java
Patch:
@@ -28,7 +28,7 @@ public void execute(RequestMappingContext context) {
             returnType = handlerReturnType(swaggerGlobalSettings.getTypeResolver(), handlerMethod);
             returnType = swaggerGlobalSettings.getAlternateTypeProvider().alternateFor(returnType);
         }
-        if (Void.class.equals(returnType) || Void.TYPE.equals(returnType)) {
+        if (Void.class.equals(returnType.getErasedType()) || Void.TYPE.equals(returnType.getErasedType())) {
             context.put("responseClass", "");
             return;
         }

File: swagger-models/src/main/java/com/mangofactory/swagger/models/DefaultModelProvider.java
Patch:
@@ -39,7 +39,9 @@ public DefaultModelProvider(TypeResolver resolver, ModelPropertiesProvider prope
     @Override
     public com.google.common.base.Optional<Model> modelFor(ModelContext modelContext) {
         ResolvedType propertiesHost = modelContext.resolvedType(resolver);
-        if (isContainerType(propertiesHost) || propertiesHost.getErasedType().isEnum()) {
+        if (isContainerType(propertiesHost)
+                || propertiesHost.getErasedType().isEnum()
+                || Types.isBaseType(Types.typeNameFor(propertiesHost.getErasedType()))) {
             return Optional.absent();
         }
         Map<String, ModelProperty> properties = newLinkedHashMap();

File: swagger-models/src/main/java/com/mangofactory/swagger/models/AccessorsProvider.java
Patch:
@@ -96,7 +96,9 @@ public boolean apply(ResolvedMethod input) {
     public List<BeanModelProperty> in(ResolvedType resolvedType) {
         MemberResolver resolver = new MemberResolver(typeResolver);
         resolver.setIncludeLangObject(false);
-
+        if (resolvedType.getErasedType() == Object.class) {
+            return newArrayList();
+        }
         ResolvedTypeWithMembers typeWithMembers = resolver.resolve(resolvedType, null, null);
         return FluentIterable
                 .from(newArrayList(typeWithMembers.getMemberMethods()))

File: swagger-models/src/main/java/com/mangofactory/swagger/models/FieldsProvider.java
Patch:
@@ -17,6 +17,9 @@ public FieldsProvider(TypeResolver typeResolver) {
 
     public Iterable<? extends ResolvedField> in(ResolvedType resolvedType) {
         MemberResolver memberResolver = new MemberResolver(typeResolver);
+        if (resolvedType.getErasedType() == Object.class) {
+            return newArrayList();
+        }
         ResolvedTypeWithMembers resolvedMemberWithMembers = memberResolver.resolve(resolvedType, null, null);
         return newArrayList(resolvedMemberWithMembers.getMemberFields());
     }

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/controllers/DefaultSwaggerController.java
Patch:
@@ -41,7 +41,7 @@ ResponseEntity<ApiListing> getApiListing(@PathVariable String resource) {
     }
 
     @ApiIgnore
-    @RequestMapping(value = { DOCUMENTATION_BASE_PATH + "/{swaggerGroup}/{resource}" }, method = RequestMethod.GET)
+    @RequestMapping(value = { DOCUMENTATION_BASE_PATH + "/{swaggerGroup}/{resource:.*}" }, method = RequestMethod.GET)
     public
     @ResponseBody
     ResponseEntity<ApiListing> getApiListing(@PathVariable String swaggerGroup, @PathVariable String resource) {

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationResponseClassReader.java
Patch:
@@ -26,6 +26,7 @@ public void execute(RequestMappingContext context) {
             returnType = swaggerGlobalSettings.getTypeResolver().resolve(methodAnnotation.response());
         } else {
             returnType = handlerReturnType(swaggerGlobalSettings.getTypeResolver(), handlerMethod);
+            returnType = swaggerGlobalSettings.getAlternateTypeProvider().alternateFor(returnType);
         }
         if (Void.class.equals(returnType) || Void.TYPE.equals(returnType)) {
             context.put("responseClass", "");

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/readers/operation/OperationResponseMessageReader.java
Patch:
@@ -42,6 +42,7 @@ public void execute(RequestMappingContext context) {
             responseMessages = globalResponseMessages.get(currentHttpMethod);
          }
          ResolvedType returnType = handlerReturnType(swaggerGlobalSettings.getTypeResolver(), handlerMethod);
+         returnType = swaggerGlobalSettings.getAlternateTypeProvider().alternateFor(returnType);
          if (Void.class != returnType.getErasedType()) {
             String simpleName = ResolvedTypes.typeName(returnType);
             ResponseMessage responseWithModel = new ResponseMessage(200, HttpStatus.OK.getReasonPhrase(), toOption(simpleName));

File: swagger-springmvc/src/test/java/com/mangofactory/swagger/dummy/controllers/PetService.java
Patch:
@@ -103,7 +103,8 @@ public HttpEntity<Pet> petByName(@PathVariable String name) {
     }
 
     @RequestMapping(value="/echo", method=RequestMethod.POST)
-    public Map<String, Pet> echo(Map<String, Pet> someInput) {
+    @ResponseBody
+    public Map<String, Pet> echo(@RequestBody Map<String, Pet> someInput) {
         throw new NotImplementedException();
     }
 

File: swagger-springmvc/src/main/java/com/mangofactory/swagger/scanners/ApiListingScanner.java
Patch:
@@ -52,7 +52,7 @@ public ApiListingScanner(Map<ResourceGroup, List<RequestMappingContext>> resourc
       this.resourceGroupRequestMappings = resourceGroupRequestMappings;
       this.swaggerPathProvider = swaggerPathProvider;
       this.authorizationContext = authorizationContext;
-        this.modelProvider = modelProvider;
+      this.modelProvider = modelProvider;
     }
 
    public Map<String, ApiListing> scan() {

File: src/main/java/com/mangofactory/swagger/core/DefaultSwaggerPathProvider.java
Patch:
@@ -35,7 +35,7 @@ public String getSwaggerDocumentationBasePath() {
    public String getRequestMappingEndpoint(String requestMappingPattern) {
       String result = requestMappingPattern;
       //remove regex portion '/{businessId:\\w+}'
-      result = result.replaceAll(":.*?}", "}");
+      result = result.replaceAll("\\{(.*?):.*?\\}", "{$1}");
       return result.isEmpty() ? "/" : result;
    }
 

File: src/main/java/com/mangofactory/swagger/core/DefaultSwaggerPathProvider.java
Patch:
@@ -35,7 +35,7 @@ public String getSwaggerDocumentationBasePath() {
    public String getRequestMappingEndpoint(String requestMappingPattern) {
       String result = requestMappingPattern;
       //remove regex portion '/{businessId:\\w+}'
-      result = result.replaceAll(":.*?}", "}");
+      result = result.replaceAll("\\{(.*?):.*?\\}", "{$1}");
       return result.isEmpty() ? "/" : result;
    }
 

File: src/main/java/com/mangofactory/swagger/core/ClassOrApiAnnotationResourceGrouping.java
Patch:
@@ -1,7 +1,6 @@
 package com.mangofactory.swagger.core;
 
 import com.wordnik.swagger.annotations.Api;
-import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.stereotype.Component;
@@ -11,6 +10,8 @@
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
 
+import static org.apache.commons.lang.StringUtils.isBlank;
+
 @Component
 public class ClassOrApiAnnotationResourceGrouping implements ResourceGroupingStrategy {
    private static final Logger log = LoggerFactory.getLogger(ClassOrApiAnnotationResourceGrouping.class);
@@ -40,7 +41,7 @@ private String getClassOrApiAnnotationValue(HandlerMethod handlerMethod) {
       String group = controllerClass.getCanonicalName();
 
       Api apiAnnotation = controllerClass.getAnnotation(Api.class);
-      if (null != apiAnnotation && !StringUtils.isBlank(apiAnnotation.value())) {
+      if (null != apiAnnotation && !isBlank(apiAnnotation.value())) {
          group = apiAnnotation.value();
       }
       return group;

File: src/main/java/com/mangofactory/swagger/core/SwaggerPathProvider.java
Patch:
@@ -22,7 +22,7 @@ public interface SwaggerPathProvider {
    /**
     *  The uri to the swagger documentation - typically the applications base path joined with the swagger path
     *  e.g. http://www.myserver.com/<contextPath>/api-docs
-    * @return
+    * @return the base path
     */
    public String getSwaggerDocumentationBasePath();
 }

File: src/main/java/com/mangofactory/swagger/SwaggerConfiguration.java
Patch:
@@ -103,7 +103,7 @@ public boolean apply(TypeProcessingRule input) {
 
     public DocumentationSchemaProvider getSchemaProvider() {
         if (schemaProvider == null) {
-            schemaProvider = new DocumentationSchemaProvider(getTypeResolver());
+            schemaProvider = new DocumentationSchemaProvider(getTypeResolver(), this);
         }
         return schemaProvider;
     }

File: src/main/java/com/mangofactory/swagger/models/ResolvedTypeMemberVisitor.java
Patch:
@@ -100,7 +100,7 @@ public DocumentationSchema schema(MemberInfoSource member) {
                 propertyMap.put(childField.getName(), childSchema);
             }
         }
-        for (ResolvedProperty childProperty: context.getResolvedProperties(resolvedMember)) {
+        for (ResolvedPropertyInfo childProperty: context.getResolvedProperties(resolvedMember)) {
             DocumentationSchema childPropertySchema = context.schema(childProperty);
             if (childPropertySchema != null) {
                 propertyMap.put(childProperty.getName(), childPropertySchema);

File: src/main/java/com/mangofactory/swagger/models/SchemaDescriptor.java
Patch:
@@ -12,9 +12,9 @@ public interface SchemaDescriptor {
 
     List<AliasedResolvedField> deserializableFields(TypeResolver typeResolver, ResolvedType resolvedType);
 
-    List<ResolvedProperty> serializableProperties(TypeResolver typeResolver, ResolvedType resolvedType);
+    List<ResolvedPropertyInfo> serializableProperties(TypeResolver typeResolver, ResolvedType resolvedType);
 
-    List<ResolvedProperty> deserializableProperties(TypeResolver typeResolver, ResolvedType resolvedType);
+    List<ResolvedPropertyInfo> deserializableProperties(TypeResolver typeResolver, ResolvedType resolvedType);
 
 }
 

File: src/main/java/com/mangofactory/swagger/models/WildcardType.java
Patch:
@@ -28,6 +28,9 @@ public static boolean exactMatch(ResolvedType first, ResolvedType second) {
     }
 
     public static boolean wildcardMatch(ResolvedType toMatch, ResolvedType wildcardType) {
+        if (!toMatch.getErasedType().equals(wildcardType.getErasedType())) {
+            return false;
+        }
         TypeBindings wildcardTypeBindings = wildcardType.getTypeBindings();
         TypeBindings bindingsToMatch = toMatch.getTypeBindings();
         if (bindingsToMatch.size() != wildcardTypeBindings.size()) {

File: src/test/java/com/mangofactory/swagger/models/ArrayTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.mangofactory.swagger.models;
 
 import com.fasterxml.classmate.TypeResolver;
+import com.mangofactory.swagger.SwaggerConfiguration;
 import com.wordnik.swagger.core.DocumentationAllowableListValues;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
@@ -108,7 +109,8 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver(),
+                new SwaggerConfiguration("1.1", "/"));
         modelMap = provider.getModelMap(new Model("ToTest", asResolvedType(ToTest.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/ComplexTypeTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.mangofactory.swagger.models;
 
 import com.fasterxml.classmate.TypeResolver;
+import com.mangofactory.swagger.SwaggerConfiguration;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
 import org.junit.Test;
@@ -69,8 +70,8 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
-        //TODO: Fix this to use Alternate type rules
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver(),
+                new SwaggerConfiguration("1.1", "/"));
         modelMap = provider.getModelMap(new Model("pet", asResolvedType(Pet.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/EnumTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.mangofactory.swagger.models;
 
 import com.fasterxml.classmate.TypeResolver;
+import com.mangofactory.swagger.SwaggerConfiguration;
 import com.wordnik.swagger.core.DocumentationAllowableListValues;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
@@ -37,7 +38,8 @@ public void setExampleEnum(ExampleEnum exampleEnum) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver(),
+                new SwaggerConfiguration("1.1", "/"));
         modelMap = provider.getModelMap(new Model("ExampleWithEnums", asResolvedType(ExampleWithEnums.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/GenericTypeTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.fasterxml.classmate.TypeResolver;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.mangofactory.swagger.SwaggerConfiguration;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
 import org.junit.Test;
@@ -47,7 +48,8 @@ public void setup() {
         ObjectMapper objectMapper = new ObjectMapper();
         objectMapper.addMixInAnnotations(HttpHeaders.class, HttpHeadersMixin.class);
         DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver(),
-                new Jackson2SchemaDescriptor(objectMapper));
+                new SwaggerConfiguration("1.1", "/"), new Jackson2SchemaDescriptor(new SwaggerConfiguration("1.1",
+                "/"), objectMapper));
         modelMap = provider.getModelMap(new Model("pet", asResolvedType()));
     }
 

File: src/test/java/com/mangofactory/swagger/models/InheritedComplexTypeTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.mangofactory.swagger.models;
 
 import com.fasterxml.classmate.TypeResolver;
+import com.mangofactory.swagger.SwaggerConfiguration;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
 import org.junit.Test;
@@ -62,7 +63,8 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver(),
+                new SwaggerConfiguration("1.1", "/"));
         modelMap = provider.getModelMap(new Model("Pet", asResolvedType(Pet.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/ListTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.mangofactory.swagger.models;
 
 import com.fasterxml.classmate.TypeResolver;
+import com.mangofactory.swagger.SwaggerConfiguration;
 import com.wordnik.swagger.core.DocumentationAllowableListValues;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
@@ -123,7 +124,8 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver(),
+                new SwaggerConfiguration("1.1", "/"));
         modelMap = provider.getModelMap(new Model("ToTest", asResolvedType(ToTest.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/RecursiveTypeTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.mangofactory.swagger.models;
 
 import com.fasterxml.classmate.TypeResolver;
+import com.mangofactory.swagger.SwaggerConfiguration;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
 import org.junit.Test;
@@ -79,7 +80,8 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver(),
+                new SwaggerConfiguration("1.1", "/"));
         modelMap = provider.getModelMap(new Model("Pet", asResolvedType(Pet.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/SetTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.mangofactory.swagger.models;
 
 import com.fasterxml.classmate.TypeResolver;
+import com.mangofactory.swagger.SwaggerConfiguration;
 import com.wordnik.swagger.core.DocumentationAllowableListValues;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
@@ -115,7 +116,8 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver(),
+                new SwaggerConfiguration("1.1", "/"));
         modelMap = provider.getModelMap(new Model("ToTest", asResolvedType(ToTest.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/SimpleModelTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
+import com.mangofactory.swagger.SwaggerConfiguration;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
 import org.junit.Test;
@@ -112,7 +113,8 @@ public void setAnObject(Object anObject) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver(),
+                new SwaggerConfiguration("1.1", "/"));
         modelMap = provider.getModelMap(new Model("SimpleType", asResolvedType(SimpleType.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/spring/OperationReaderTest.java
Patch:
@@ -65,7 +65,8 @@ public void setup() throws NoSuchMethodException {
 
         controllerDocumentation = new ControllerDocumentation(swaggerConfiguration.getApiVersion(),
                 swaggerConfiguration.getSwaggerVersion(), swaggerConfiguration.getBasePath(),
-                swaggerConfiguration.getDocumentationBasePath(), new DocumentationSchemaProvider(new TypeResolver()));
+                swaggerConfiguration.getDocumentationBasePath(),
+                new DocumentationSchemaProvider(new TypeResolver(), swaggerConfiguration));
     }
 
     @Test

File: src/test/java/com/mangofactory/swagger/spring/filters/OperationFilterTest.java
Patch:
@@ -83,7 +83,7 @@ public URL alternateTypeMethod() {
     public void setup() throws Exception {
         DocumentationOperation operation = new DocumentationOperation();
         controllerDocumentation= new ControllerDocumentation("", "", "", "",
-                new DocumentationSchemaProvider(new TypeResolver()));
+                new DocumentationSchemaProvider(new TypeResolver(), new SwaggerConfiguration("1.1", "/")));
         context = new FilterContext<DocumentationOperation>(operation);
         context.put("controllerDocumentation", controllerDocumentation);
 

File: src/test/java/com/mangofactory/swagger/spring/filters/ParameterFilterTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
 import com.mangofactory.swagger.ControllerDocumentation;
+import com.mangofactory.swagger.SwaggerConfiguration;
 import com.mangofactory.swagger.filters.Filter;
 import com.mangofactory.swagger.filters.FilterContext;
 import com.mangofactory.swagger.models.DocumentationSchemaProvider;
@@ -96,7 +97,7 @@ private HandlerMethod handlerMethod(String methodName, Class... paramTypes) thro
     public void setup() {
         docParam = new DocumentationParameter();
         documentation = new ControllerDocumentation("1", "2", "", "",
-                new DocumentationSchemaProvider(new TypeResolver()));
+                new DocumentationSchemaProvider(new TypeResolver(), new SwaggerConfiguration("1.1", "/")));
         context = new FilterContext<DocumentationParameter>(docParam);
         context.put("controllerDocumentation", documentation);
         paramFilters = newArrayList();
@@ -112,7 +113,7 @@ public void whenParameterIsAPrimitive() throws NoSuchMethodException {
         for (int index = 0; index < methodParams.length; index++) {
             DocumentationParameter docParam = new DocumentationParameter();
             ControllerDocumentation documentation = new ControllerDocumentation("1", "2", "", "",
-                    new DocumentationSchemaProvider(new TypeResolver()));
+                    new DocumentationSchemaProvider(new TypeResolver(), new SwaggerConfiguration("1.1", "/")));
             FilterContext context = new FilterContext<DocumentationParameter>(docParam);
             context.put("controllerDocumentation", documentation);
             context.put("methodParameter", methodParams[index]);

File: src/main/java/com/mangofactory/swagger/core/SwaggerApiResourceListing.java
Patch:
@@ -63,6 +63,7 @@ public void initialize() {
          ApiListingScanner apiListingScanner = new ApiListingScanner(
                resourceGroupRequestMappings, apiListingReferenceScanner.getSwaggerGroup(), swaggerPathProvider);
          apiListingScanner.setIgnorableParameterTypes(ignorableParameterTypes);
+         apiListingScanner.setParameterDataTypes(parameterDataTypes);
 
          Map<String, ApiListing> apiListings = apiListingScanner.scan();
          swaggerCache.addApiListings(swaggerGroup, apiListings);

File: src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterDataTypeReader.java
Patch:
@@ -17,7 +17,9 @@ public void execute(RequestMappingContext context) {
       Map<Class, String> parameterDataTypes = (Map<Class, String>) context.get("parameterDataTypes");
       ResolvedType resolvedType = new TypeResolver().resolve(methodParameter.getParameterType());
       String swaggerDataType = parameterDataTypes.get(resolvedType.getErasedType());
-      context.put("dataType", swaggerDataType);
+
+
+      context.put("dataType", null == swaggerDataType ? "string" : swaggerDataType);
       context.put("format", "int64");
       context.put("paramAccess", "");
    }

File: src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -7,7 +7,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.context.annotation.Import;
 import org.springframework.validation.BindingResult;
 import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
 
@@ -25,7 +24,6 @@
 import static com.google.common.collect.Sets.newHashSet;
 
 @Configuration
-@Import(SpringSwaggerModelConfig.class)
 public class SpringSwaggerConfig {
 
    @Autowired

File: src/main/java/com/mangofactory/swagger/readers/ApiOperationReader.java
Patch:
@@ -26,6 +26,7 @@ public void execute(RequestMappingContext outerContext) {
       RequestMappingInfo requestMappingInfo = outerContext.getRequestMappingInfo();
       HandlerMethod handlerMethod = outerContext.getHandlerMethod();
       Set<Class> ignorableParameterTypes = (Set<Class>) outerContext.get("ignorableParameterTypes");
+      Map<Class, String> parameterDataTypes = (Map<Class, String>) outerContext.get("parameterDataTypes");
 
       RequestMethodsRequestCondition requestMethodsRequestCondition = requestMappingInfo.getMethodsCondition();
       List<Operation> operations = newArrayList();
@@ -44,6 +45,7 @@ public void execute(RequestMappingContext outerContext) {
          operationRequestMappingContext.put("currentCount", currentCount);
          operationRequestMappingContext.put("currentHttpMethod", httpRequestMethod);
          operationRequestMappingContext.put("ignorableParameterTypes", ignorableParameterTypes);
+         operationRequestMappingContext.put("parameterDataTypes", parameterDataTypes);
 
          commandList.add(new OperationHttpMethodReader());
          commandList.add(new OperationSummaryReader());

File: src/main/java/com/mangofactory/swagger/configuration/SpringSwaggerConfig.java
Patch:
@@ -7,6 +7,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
 import org.springframework.validation.BindingResult;
 import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
 
@@ -24,6 +25,7 @@
 import static com.google.common.collect.Sets.newHashSet;
 
 @Configuration
+@Import(SpringSwaggerModelConfig.class)
 public class SpringSwaggerConfig {
 
    @Autowired

File: src/main/java/com/mangofactory/swagger/core/SwaggerApiResourceListing.java
Patch:
@@ -40,6 +40,9 @@ public class SwaggerApiResourceListing {
    @Setter
    private Set<Class> ignorableParameterTypes;
 
+   @Setter
+   private Map<Class, String> parameterDataTypes;
+
    private String swaggerGroup;
 
    public SwaggerApiResourceListing(SwaggerCache swaggerCache, String swaggerGroup) {

File: src/main/java/com/mangofactory/swagger/readers/operation/OperationParameterReader.java
Patch:
@@ -22,6 +22,7 @@ public class OperationParameterReader implements Command<RequestMappingContext>
    public void execute(RequestMappingContext context) {
       HandlerMethod handlerMethod = context.getHandlerMethod();
       Set<Class> ignorableParameterTypes = (Set<Class>) context.get("ignorableParameterTypes");
+      Map<Class, String> parameterDataTypes = (Map<Class, String>) context.get("parameterDataTypes");
 
       MethodParameter[] methodParameters = handlerMethod.getMethodParameters();
       List<Parameter> parameters = newArrayList();
@@ -33,11 +34,13 @@ public void execute(RequestMappingContext context) {
             RequestMappingContext parameterContext = new RequestMappingContext(context.getRequestMappingInfo(), handlerMethod);
             methodParameter.initParameterNameDiscovery(new LocalVariableTableParameterNameDiscoverer());
             parameterContext.put("methodParameter", methodParameter);
+            parameterContext.put("parameterDataTypes", parameterDataTypes);
 
             CommandExecutor<Map<String, Object>, RequestMappingContext> commandExecutor = new CommandExecutor();
             List<Command<RequestMappingContext>> commandList = newArrayList();
 
             commandList.add(new ParameterAllowableReader());
+            commandList.add(new ParameterDataTypeReader());
             commandList.add(new ParameterTypeReader());
             commandList.add(new ParameterDefaultReader());
             commandList.add(new ParameterDescriptionReader());

File: src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterMultiplesReader.java
Patch:
@@ -5,8 +5,6 @@
 import com.wordnik.swagger.annotations.ApiParam;
 import org.springframework.core.MethodParameter;
 
-import java.util.Collection;
-
 public class ParameterMultiplesReader implements Command<RequestMappingContext> {
    @Override
    public void execute(RequestMappingContext context) {
@@ -19,7 +17,7 @@ public void execute(RequestMappingContext context) {
       } else {
          Class<?> parameterType = methodParameter.getParameterType();
          allowMultiple = parameterType.isArray()
-               || Collection.class.isAssignableFrom(parameterType);
+               || Iterable.class.isAssignableFrom(parameterType);
       }
       context.put("allowMultiple", allowMultiple);
    }

File: src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterRequiredReader.java
Patch:
@@ -26,6 +26,7 @@ private Boolean getAnnotatedRequired(MethodParameter methodParameter) {
       Annotation[] methodAnnotations = methodParameter.getParameterAnnotations();
       if (null != methodAnnotations) {
          for (Annotation annotation : methodAnnotations) {
+            //Hmmm, APIParam annotation - required defaults to false
             if (annotation instanceof ApiParam) {
                return ((ApiParam) annotation).required();
             } else if (annotation instanceof PathVariable) {

File: src/test/java/com/mangofactory/swagger/dummy/DummyClass.java
Patch:
@@ -89,6 +89,8 @@ public int getValue() {
          return value;
       }
    }
+
+   public class CustomClass{}
 }
 
 

File: src/main/java/com/mangofactory/swagger/readers/operation/OperationParameterReader.java
Patch:
@@ -55,7 +55,7 @@ public void execute(RequestMappingContext context) {
                   (Boolean) result.get("required"),
                   (Boolean) result.get("allowMultiple"),
                   (String) result.get("dataType"),
-                  (AllowableValues) context.get("allowableValues"),
+                  (AllowableValues) result.get("allowableValues"),
                   (String) result.get("paramType"),
                   toOption(result.get("paramAccess"))
             );

File: src/main/java/com/mangofactory/swagger/core/DefaultControllerResourceNamingStrategy.java
Patch:
@@ -34,7 +34,6 @@ public String getUriSafeRequestMappingPattern(String requestMappingPattern) {
       //remove regex portion '/{businessId:\\w+}'
       result = result.replaceAll(":.*?}", "}");
 
-      result = StringUtils.replaceEach(result, new String[]{"{", "}"}, new String[]{"(", ")"});
       return result.isEmpty() ? "root" : result;
    }
 

File: src/main/java/com/mangofactory/swagger/readers/operation/parameter/ParameterMultiplesReader.java
Patch:
@@ -13,7 +13,7 @@ public void execute(RequestMappingContext context) {
       MethodParameter methodParameter = (MethodParameter) context.get("methodParameter");
       ApiParam apiParam = methodParameter.getParameterAnnotation(ApiParam.class);
 
-      Boolean allowMultiple = false;
+      Boolean allowMultiple = Boolean.FALSE;
       if (null != apiParam) {
          allowMultiple = apiParam.allowMultiple();
       } else {

File: src/main/java/com/mangofactory/swagger/filters/AnnotatedParameterFilter.java
Patch:
@@ -40,7 +40,7 @@ private void documentParameter(ControllerDocumentation controllerDocumentation,
 
         ApiParam apiParam = methodParameter.getParameterAnnotation(ApiParam.class);
         if (apiParam == null) {
-            LOG.warn(format("%s is missing @ApiParam annotation - so generating default documentation",
+            LOG.debug(format("%s is missing @ApiParam annotation - so generating default documentation",
                     methodParameter.getMethod()));
             return;
         }

File: src/main/java/com/mangofactory/swagger/ScalaUtils.java
Patch:
@@ -9,14 +9,14 @@
 
 public class ScalaUtils {
 
-   public static List toList(Collection collection) {
+   public static List toScalaList(Collection collection) {
       if(null == collection){
          collection = new ArrayList();
       }
       return collectionAsScalaIterable(collection).toList();
    }
 
-   public static java.util.List<?> fromList(List<?> list) {
+   public static java.util.List<?> fromScalaList(List<?> list) {
       return seqAsJavaList(list);
    }
    public static Option toOption(Object o) {

File: src/main/java/com/mangofactory/swagger/core/SwaggerApiResourceListing.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static com.mangofactory.swagger.ScalaUtils.toList;
+import static com.mangofactory.swagger.ScalaUtils.toScalaList;
 import static com.mangofactory.swagger.ScalaUtils.toOption;
 
 @Slf4j
@@ -48,8 +48,8 @@ public void createResourceListing() {
       } else{
          log.error("ApiListingReferenceScanner not configured");
       }
-      this.resourceListing = new ResourceListing("1", SwaggerSpec.version(), toList(apiListingReferences),
-                                                 toList(authorizationTypes), toOption(apiInfo));
+      this.resourceListing = new ResourceListing("1", SwaggerSpec.version(), toScalaList(apiListingReferences),
+                                                 toScalaList(authorizationTypes), toOption(apiInfo));
 
    }
 

File: src/main/java/com/mangofactory/swagger/core/ControllerResourceGroupingStrategy.java
Patch:
@@ -5,6 +5,7 @@
 
 public interface ControllerResourceGroupingStrategy {
    public String getControllerName(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod);
-   public String getControllerGroup(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod);
+   public String getGroupCompatibleName(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod);
+   public String getGroupName(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod);
    public String getControllerPath(RequestMappingInfo requestMappingInfo, HandlerMethod handlerMethod);
 }

File: src/test/java/com/mangofactory/swagger/spring/DocumentationReaderTest.java
Patch:
@@ -75,7 +75,7 @@ public void expectExcludedResourcesToBeExcluded() {
 
     @Test
     public void findsDeclaredHandlerMethods() {
-        assertThat(resourceListing.getApis().size(), equalTo(3));
+        assertThat(resourceListing.getApis().size(), equalTo(4));
         assertEquals("/api-docs/pets", petsEndpoint.getPath());
         Documentation petsDocumentation = controller.getApiDocumentation(request);
         assertThat(petsDocumentation, is(notNullValue()));

File: src/test/java/com/mangofactory/swagger/spring/JsonResourceListingTests.java
Patch:
@@ -70,15 +70,15 @@ public void testApisContainCorrectApiList() {
     public void testApiPathIsRelativeToBasePath() {
         mockMvc.perform(builder)
                 .andExpect(jsonPath("$.apiVersion").exists())
-                .andExpect(jsonPath("$.apis[1].path").value(equalTo("/api-docs/pets")));
+                .andExpect(jsonPath("$.apis[2].path").value(equalTo("/api-docs/pets")));
     }
 
     @Test
     @SneakyThrows
     public void testApiDescriptionIsCorrect() {
         mockMvc.perform(builder)
                 .andExpect(jsonPath("$.apiVersion").exists())
-                .andExpect(jsonPath("$.apis[1].description").value(equalTo("Operations about pets")));
+                .andExpect(jsonPath("$.apis[2].description").value(equalTo("Operations about pets")));
     }
 
     @Test

File: src/main/java/com/mangofactory/swagger/spring/DocumentationReader.java
Patch:
@@ -55,7 +55,6 @@ private void buildMappingDocuments(WebApplicationContext context) {
         for (RequestMappingHandlerMapping handlerMapping : handlerMappings) {
             processMethod(handlerMapping);
         }
-        isMappingBuilt = true;
     }
 
     private ControllerDocumentation addChildDocumentIfMissing(ControllerDocumentation resourceDocumentation) {
@@ -166,9 +165,10 @@ public Documentation getDocumentation() {
         return documentation;
     }
 
-    private void ensureDocumentationReady() {
+    private synchronized void ensureDocumentationReady() {
         if (!isMappingBuilt) {
             buildMappingDocuments(context);
+            isMappingBuilt = true;
         }
     }
 }
\ No newline at end of file

File: src/main/java/com/mangofactory/swagger/models/IgnorableTypeRule.java
Patch:
@@ -27,8 +27,8 @@ public ResolvedType originalType() {
     }
 
     @Override
-    public ResolvedType alternateType() {
-        return ignorableType;
+    public ResolvedType alternateType(ResolvedType parameterType) {
+        return parameterType;
     }
 
     public static IgnorableTypeRule ignorable(Class<?> clazz) {

File: src/main/java/com/mangofactory/swagger/models/TypeProcessingRule.java
Patch:
@@ -6,5 +6,6 @@ public  interface TypeProcessingRule {
     boolean isIgnorable();
     boolean hasAlternateType();
     ResolvedType originalType();
-    ResolvedType alternateType();
+    ResolvedType alternateType(ResolvedType parameterType);
 }
+

File: src/main/java/com/mangofactory/swagger/models/AlternateTypeProcessingRule.java
Patch:
@@ -44,7 +44,7 @@ public ResolvedType originalType() {
     @Override
     public ResolvedType alternateType(ResolvedType parameterType) {
         if (hasWildcards(originalType)) {
-            return replaceWildcardsFrom(parameterType, alternateType);
+            return replaceWildcardsFrom(collectReplaceables(parameterType, originalType), alternateType);
         } else {
             return alternateType;
         }

File: src/test/java/com/mangofactory/swagger/spring/test/PetServiceWithAlternativeListingPath.java
Patch:
@@ -16,7 +16,7 @@
 
 @Controller
 @RequestMapping("/alternativePets")
-@Api(value="", description="Operations about pets", listingPath = "pets")
+@Api(value="", description="Operations about pets", listingPath = "alternativePets")
 public class PetServiceWithAlternativeListingPath {
 
 	@RequestMapping(value="/{petId}",method=RequestMethod.GET)

File: src/test/java/com/mangofactory/swagger/spring/ControllerDocumentationFilterTest.java
Patch:
@@ -69,7 +69,7 @@ public void setup() {
 
     @Test
     public void whenControllerHasNoRequestMappingSpecified() {
-        DocumentationEndPoint endpoint = new DocumentationEndPoint();
+        DocumentationEndPoint endpoint = new DocumentationEndPoint("/no-classlevel-requestmapping", "");
         context = new FilterContext<DocumentationEndPoint>(endpoint);
         context.put("servletContext", servletContext);
         context.put("controllerClass", noClassLevelRequestMappingController.getClass());
@@ -90,7 +90,7 @@ public void whenControllerHasNoRequestMappingSpecified() {
 
     @Test
     public void whenControllerHasRequestMappingSpecified() {
-        DocumentationEndPoint endpoint = new DocumentationEndPoint();
+        DocumentationEndPoint endpoint = new DocumentationEndPoint("/test/with-classlevel-requestmapping", "");
         context = new FilterContext<DocumentationEndPoint>(endpoint);
         context.put("servletContext", servletContext);
         context.put("controllerClass", withClassLevelRequestMappingController.getClass());

File: src/main/java/com/mangofactory/swagger/models/Jackson2SchemaDescriptor.java
Patch:
@@ -75,7 +75,9 @@ public List<AliasedResolvedField> deserializableFields(TypeResolver typeResolver
             if (propertyLookup.containsKey(childField.getName())) {
                 BeanPropertyDefinition propertyDefinition = propertyLookup.get(childField.getName());
                 AnnotatedMember member = propertyDefinition.getPrimaryMember();
-                if (member.getMember() != null && Field.class.isAssignableFrom(member.getMember().getClass())) {
+                if (member != null
+                        && member.getMember() != null
+                        && Field.class.isAssignableFrom(member.getMember().getClass())) {
                     serializationCandidates.add(new AliasedResolvedField(propertyDefinition.getName() , childField));
                 }
             }

File: src/main/java/com/mangofactory/swagger/models/PrimitiveMemberVisitor.java
Patch:
@@ -19,7 +19,8 @@ public MemberVisitor apply(SchemaProvider schemaProvider) {
     public DocumentationSchema schema(MemberInfoSource member) {
         Class<?> returnType = member.getType();
         String propertyType;
-        if (returnType.isAssignableFrom(int.class) || returnType.isAssignableFrom(Integer.class)) {
+        if (returnType.isAssignableFrom(int.class) || returnType.isAssignableFrom(Integer.class)
+                || returnType.isAssignableFrom(short.class) || returnType.isAssignableFrom(Short.class)) {
             propertyType = "int";
         } else {
             propertyType = returnType.getSimpleName().toLowerCase();

File: src/main/java/com/mangofactory/swagger/models/SchemaProvider.java
Patch:
@@ -31,6 +31,8 @@ public class SchemaProvider {
             .put(Integer.class, PrimitiveMemberVisitor.factory())
             .put(long.class, PrimitiveMemberVisitor.factory())
             .put(Long.class, PrimitiveMemberVisitor.factory())
+            .put(short.class, PrimitiveMemberVisitor.factory())
+            .put(Short.class, PrimitiveMemberVisitor.factory())
             .put(byte.class, PrimitiveMemberVisitor.factory())
             .put(Byte.class, PrimitiveMemberVisitor.factory())
             .put(boolean.class, PrimitiveMemberVisitor.factory())

File: src/main/java/com/mangofactory/swagger/spring/OperationReader.java
Patch:
@@ -47,7 +47,7 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
             DocumentationParameter parameter = new DocumentationParameter();
             ResolvedType resolvedType = configuration.maybeGetAlternateType(resolvedParameters.get(index));
             if (resolvedParameters.size() == 0
-                    || configuration.isParameterTypeIgnorable(resolvedType.getErasedType())) {
+                    || configuration.isParameterTypeIgnorable(resolvedType)) {
                 continue;
             }
             FilterContext<DocumentationParameter> parameterContext

File: src/main/java/com/mangofactory/swagger/spring/UriExtractor.java
Patch:
@@ -54,16 +54,16 @@ private static RequestMapping requestMapping(AnnotatedElement annotated) {
 
     protected static String resolveRequestUri(Class clazz, RequestMapping requestMapping) {
         if (requestMapping == null) {
-            log.info("Class {} has no @RequestMapping", clazz);
+            log.debug("Class {} has no @RequestMapping", clazz);
             return null;
         }
         String[] requestUris = requestMapping.value();
         if (requestUris == null || requestUris.length == 0) {
-            log.info("Class {} contains a @RequestMapping, but could not resolve the uri", clazz);
+            log.warn("Class {} contains a @RequestMapping, but could not resolve the uri", clazz);
             return null;
         }
         if (requestUris.length > 1) {
-            log.info("Class {} contains a @RequestMapping with multiple uri's. Only the first one will be documented.",
+            log.warn("Class {} contains a @RequestMapping with multiple uri's. Only the first one will be documented.",
                     clazz);
         }
         return requestUris[0];

File: src/main/java/com/mangofactory/swagger/spring/filters/OperationFilter.java
Patch:
@@ -35,10 +35,10 @@ private void documentOperation(SwaggerConfiguration configuration, ControllerDoc
         ResolvedType parameterType = methodReturnType(configuration.getTypeResolver(), handlerMethod.getMethod());
         if (parameterType != null) {
             ResolvedType alternateType = configuration.maybeGetAlternateType(parameterType);
-            operation.setResponseClass(modelName(alternateType));
-            if (configuration.isParameterTypeIgnorable(alternateType.getErasedType())) {
+            if (configuration.isParameterTypeIgnorable(alternateType)) {
                 return;
             }
+            operation.setResponseClass(modelName(alternateType));
             maybeAddParameterTypeToModels(controllerDocumentation, alternateType, modelName(alternateType), true);
         }
 

File: src/test/java/com/mangofactory/swagger/models/GenericTypeTest.java
Patch:
@@ -82,8 +82,8 @@ public void hasAPetModel() {
 
     @Test
     public void hasAResponseEntityModel() {
-        assertTrue(modelMap.containsKey("ResponseEntity[Pet]"));
-        DocumentationSchema responseEntity = modelMap.get("ResponseEntity[Pet]");
+        assertTrue(modelMap.containsKey("ResponseEntity«Pet»"));
+        DocumentationSchema responseEntity = modelMap.get("ResponseEntity«Pet»");
         assertNotNull(responseEntity.getProperties());
         assertEquals(3, responseEntity.getProperties().size());
     }

File: src/test/java/com/mangofactory/swagger/spring/OperationReaderTest.java
Patch:
@@ -34,6 +34,7 @@
 
 import java.lang.reflect.Method;
 import java.util.List;
+import java.util.Map;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.Matchers.equalTo;
@@ -209,7 +210,6 @@ private DocumentationOperation getExceptionMethod(String methodName) {
     }
 
 
-
     @SuppressWarnings("unused")
     private final class SampleClass {
         public

File: src/main/java/com/mangofactory/swagger/models/ResolvedTypes.java
Patch:
@@ -125,7 +125,7 @@ private static ResolvedMethod getResolvedMethod(TypeResolver typeResolver, final
                 new Predicate<ResolvedMethod>() {
                     @Override
                     public boolean apply(ResolvedMethod input) {
-                        return input.getRawMember().getName().equals(methodToResolve.getName());
+                        return input.getRawMember().equals(methodToResolve);
                     }
                 });
         return resolveToMethodWithMaxResolvedTypes(filtered);

File: src/main/java/com/mangofactory/swagger/models/ResolvedTypes.java
Patch:
@@ -125,7 +125,7 @@ private static ResolvedMethod getResolvedMethod(TypeResolver typeResolver, final
                 new Predicate<ResolvedMethod>() {
                     @Override
                     public boolean apply(ResolvedMethod input) {
-                        return input.getRawMember().getName().equals(methodToResolve.getName());
+                        return input.getRawMember().equals(methodToResolve);
                     }
                 });
         return resolveToMethodWithMaxResolvedTypes(filtered);

File: src/main/java/com/mangofactory/swagger/spring/OperationReader.java
Patch:
@@ -39,7 +39,6 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
         operationContext.put("controllerDocumentation", controllerDocumentation);
         operationContext.put("swaggerConfiguration", configuration);
         Filters.Fn.applyFilters(configuration.getOperationFilters(), operationContext);
-        int parameterIndex = 0;
         List<ResolvedType> resolvedParameters = methodParameters(configuration.getTypeResolver(),
                 handlerMethod.getMethod());
         MethodParameter[] methodParameters = handlerMethod.getMethodParameters();
@@ -55,7 +54,7 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
                     = new FilterContext<DocumentationParameter>(parameter);
             parameterContext.put("methodParameter", methodParameters[index]);
             parameterContext.put("parameterType", resolvedType);
-            parameterContext.put("defaultParameterName", parameterNames[parameterIndex++]);
+            parameterContext.put("defaultParameterName", parameterNames[index]);
             parameterContext.put("controllerDocumentation", controllerDocumentation);
             Filters.Fn.applyFilters(configuration.getParameterFilters(), parameterContext);
             operation.addParameter(parameter);

File: src/main/java/com/mangofactory/swagger/spring/OperationReader.java
Patch:
@@ -39,7 +39,6 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
         operationContext.put("controllerDocumentation", controllerDocumentation);
         operationContext.put("swaggerConfiguration", configuration);
         Filters.Fn.applyFilters(configuration.getOperationFilters(), operationContext);
-        int parameterIndex = 0;
         List<ResolvedType> resolvedParameters = methodParameters(configuration.getTypeResolver(),
                 handlerMethod.getMethod());
         MethodParameter[] methodParameters = handlerMethod.getMethodParameters();
@@ -55,7 +54,7 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
                     = new FilterContext<DocumentationParameter>(parameter);
             parameterContext.put("methodParameter", methodParameters[index]);
             parameterContext.put("parameterType", resolvedType);
-            parameterContext.put("defaultParameterName", parameterNames[parameterIndex++]);
+            parameterContext.put("defaultParameterName", parameterNames[index]);
             parameterContext.put("controllerDocumentation", controllerDocumentation);
             Filters.Fn.applyFilters(configuration.getParameterFilters(), parameterContext);
             operation.addParameter(parameter);

File: src/main/java/com/mangofactory/swagger/DocumentationTransformer.java
Patch:
@@ -12,8 +12,7 @@ public abstract class DocumentationTransformer {
     private Comparator<DocumentationEndPoint> endPointComparator;
     private Comparator<DocumentationOperation> operationComparator;
 
-    public DocumentationTransformer(Comparator<DocumentationEndPoint> endPointComparator,
-                                    Comparator<DocumentationOperation> operationComparator) {
+    public DocumentationTransformer(EndpointComparator endPointComparator, OperationComparator operationComparator) {
         this.endPointComparator = endPointComparator;
         this.operationComparator = operationComparator;
     }

File: src/main/java/com/mangofactory/swagger/spring/controller/DocumentationController.java
Patch:
@@ -51,7 +51,9 @@ Documentation getResourceListing() {
     ControllerDocumentation getApiDocumentation(HttpServletRequest request) {
         String fullUrl = String.valueOf(request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE));
         int indexOfApiName = fullUrl.indexOf("/", 1) + 1;
-        return apiReader.getDocumentation(fullUrl.substring(indexOfApiName));
+        DocumentationTransformer transformer = swaggerConfiguration.getDocumentationTransformer();
+        return (ControllerDocumentation) transformer
+                .applySorting(apiReader.getDocumentation(fullUrl.substring(indexOfApiName)));
     }
 
     @Override

File: src/main/java/com/mangofactory/swagger/filters/AnnotatedOperationFilter.java
Patch:
@@ -52,8 +52,9 @@ private void documentOperation(ControllerDocumentation controllerDocumentation,
         if (apiModel != null) {
             if (resolvedType == null || Objects.equal(resolvedType.getErasedType(), getAnnotatedType(apiModel))) {
                 operation.setResponseClass(getAnnotatedType(apiModel));
-                String simpleName = apiModel.type().getSimpleName();
-                controllerDocumentation.putModel(simpleName, new Model(simpleName, asResolvedType(apiModel.type()), true));
+                ResolvedType apiModelAsResolvedType = asResolvedType(apiModel.type());
+                String simpleName = modelName(apiModelAsResolvedType);
+                controllerDocumentation.putModel(simpleName, new Model(simpleName, apiModelAsResolvedType, true));
             } else {
                 log.warn("Api Model override does not match the resolved type");
             }

File: src/main/java/com/mangofactory/swagger/filters/AnnotatedParameterFilter.java
Patch:
@@ -62,8 +62,9 @@ private void documentParameter(ControllerDocumentation controllerDocumentation,
         if (apiModel != null) {
             if (Objects.equal(resolvedType.getErasedType(), getAnnotatedType(apiModel))) {
                 parameter.setDataType(getAnnotatedType(apiModel));
-                String simpleName = apiModel.type().getSimpleName();
-                controllerDocumentation.putModel(simpleName, new Model(simpleName, asResolvedType(apiModel.type())));
+                ResolvedType apiModelAsResolvedType = asResolvedType(apiModel.type());
+                String simpleName = modelName(apiModelAsResolvedType);
+                controllerDocumentation.putModel(simpleName, new Model(simpleName, apiModelAsResolvedType));
             } else {
                 log.warn("Api Model override does not match the resolved type");
             }

File: src/main/java/com/mangofactory/swagger/models/MemberInfoSource.java
Patch:
@@ -7,7 +7,7 @@ public interface MemberInfoSource {
     String getName();
     ResolvedType getResolvedType();
 
-    boolean isAssignableFrom(Class<?> clazz);
+    boolean isSubclassOf(Class<?> clazz);
 
     boolean isEnum();
 }

File: src/main/java/com/mangofactory/swagger/models/PrimitiveMemberInfo.java
Patch:
@@ -27,8 +27,8 @@ public ResolvedType getResolvedType() {
     }
 
     @Override
-    public boolean isAssignableFrom(Class<?> clazz) {
-        return getType().isAssignableFrom(clazz);
+    public boolean isSubclassOf(Class<?> clazz) {
+        return clazz.isAssignableFrom(getType());
     }
 
     @Override

File: src/main/java/com/mangofactory/swagger/models/ResolvedCollection.java
Patch:
@@ -8,7 +8,7 @@
 public class ResolvedCollection {
 
     public static boolean isList(MemberInfoSource member) {
-        return member.isAssignableFrom(List.class);
+        return member.isSubclassOf(List.class);
     }
 
     public static ResolvedType listElementType(MemberInfoSource member) {
@@ -17,7 +17,7 @@ public static ResolvedType listElementType(MemberInfoSource member) {
     }
 
     public static boolean isSet(MemberInfoSource member) {
-        return member.isAssignableFrom(Set.class);
+        return member.isSubclassOf(Set.class);
     }
 
     public static ResolvedType setElementType(MemberInfoSource member) {

File: src/main/java/com/mangofactory/swagger/models/ResolvedFieldInfo.java
Patch:
@@ -31,8 +31,8 @@ public ResolvedType getResolvedType() {
     }
 
     @Override
-    public boolean isAssignableFrom(Class<?> clazz) {
-        return (getType() != Object.class) && (getType().isAssignableFrom(clazz) || clazz.isAssignableFrom(getType()));
+    public boolean isSubclassOf(Class<?> clazz) {
+        return (getType() != Object.class) && clazz.isAssignableFrom(getType());
     }
 
     @Override

File: src/main/java/com/mangofactory/swagger/models/ResolvedProperty.java
Patch:
@@ -55,8 +55,8 @@ public String getMethodName() {
     }
 
     @Override
-    public boolean isAssignableFrom(Class<?> clazz) {
-        return (getType() != Object.class) && (getType().isAssignableFrom(clazz) || clazz.isAssignableFrom(getType()));
+    public boolean isSubclassOf(Class<?> clazz) {
+        return (getType() != Object.class) && clazz.isAssignableFrom(getType());
     }
 
     @Override

File: src/main/java/com/mangofactory/swagger/models/ResolvedTypeMemberVisitor.java
Patch:
@@ -91,7 +91,7 @@ public DocumentationSchema schema(MemberInfoSource member) {
         DocumentationSchema objectSchema = new DocumentationSchema();
         objectSchema.setName(member.getName());
         objectSchema.setType(modelName(resolvedMember));
-        context.getSchemaMap().put(resolvedMember.getErasedType().getSimpleName(), objectSchema);
+        context.getSchemaMap().put(modelName(resolvedMember), objectSchema);
         Map<String, DocumentationSchema> propertyMap = newHashMap();
         for (AliasedResolvedField childField: context.getResolvedFields(resolvedMember)){
             DocumentationSchema childSchema = context.schema(childField.getResolvedField());

File: src/test/java/com/mangofactory/swagger/models/GenericTypeTest.java
Patch:
@@ -82,8 +82,8 @@ public void hasAPetModel() {
 
     @Test
     public void hasAResponseEntityModel() {
-        assertTrue(modelMap.containsKey("ResponseEntity"));
-        DocumentationSchema responseEntity = modelMap.get("ResponseEntity");
+        assertTrue(modelMap.containsKey("ResponseEntity[Pet]"));
+        DocumentationSchema responseEntity = modelMap.get("ResponseEntity[Pet]");
         assertNotNull(responseEntity.getProperties());
         assertEquals(3, responseEntity.getProperties().size());
     }

File: src/main/java/com/mangofactory/swagger/models/ResolvedProperty.java
Patch:
@@ -65,4 +65,7 @@ public boolean isEnum() {
     }
 
 
+    public void setName(String name) {
+        this.name = name;
+    }
 }

File: src/main/java/com/mangofactory/swagger/models/ResolvedTypeMemberVisitor.java
Patch:
@@ -1,8 +1,8 @@
 package com.mangofactory.swagger.models;
 
 import com.fasterxml.classmate.ResolvedType;
-import com.fasterxml.classmate.members.ResolvedField;
 import com.google.common.base.Function;
+import com.mangofactory.swagger.AliasedResolvedField;
 import com.wordnik.swagger.core.DocumentationAllowableListValues;
 import com.wordnik.swagger.core.DocumentationSchema;
 
@@ -93,8 +93,8 @@ public DocumentationSchema schema(MemberInfoSource member) {
         objectSchema.setType(modelName(resolvedMember));
         context.getSchemaMap().put(resolvedMember.getErasedType().getSimpleName(), objectSchema);
         Map<String, DocumentationSchema> propertyMap = newHashMap();
-        for (ResolvedField childField: context.getResolvedFields(resolvedMember)){
-            DocumentationSchema childSchema = context.schema(childField);
+        for (AliasedResolvedField childField: context.getResolvedFields(resolvedMember)){
+            DocumentationSchema childSchema = context.schema(childField.getResolvedField());
             if (childSchema != null) {
                 propertyMap.put(childField.getName(), childSchema);
             }

File: src/main/java/com/mangofactory/swagger/models/SchemaDescriptor.java
Patch:
@@ -2,15 +2,15 @@
 
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
-import com.fasterxml.classmate.members.ResolvedField;
+import com.mangofactory.swagger.AliasedResolvedField;
 
 import java.util.List;
 
 public interface SchemaDescriptor {
 
-    List<ResolvedField> serializableFields(TypeResolver typeResolver, ResolvedType resolvedType);
+    List<AliasedResolvedField> serializableFields(TypeResolver typeResolver, ResolvedType resolvedType);
 
-    List<ResolvedField> deserializableFields(TypeResolver typeResolver, ResolvedType resolvedType);
+    List<AliasedResolvedField> deserializableFields(TypeResolver typeResolver, ResolvedType resolvedType);
 
     List<ResolvedProperty> serializableProperties(TypeResolver typeResolver, ResolvedType resolvedType);
 

File: src/main/java/com/mangofactory/swagger/models/SchemaProvider.java
Patch:
@@ -10,6 +10,7 @@
 import com.fasterxml.classmate.types.ResolvedRecursiveType;
 import com.google.common.base.Function;
 import com.google.common.collect.ImmutableMap;
+import com.mangofactory.swagger.AliasedResolvedField;
 import com.wordnik.swagger.core.DocumentationSchema;
 
 import java.lang.reflect.Type;
@@ -108,7 +109,7 @@ public boolean isReturnType() {
         return returnType;
     }
 
-    public List<ResolvedField> getResolvedFields(ResolvedType resolvedType) {
+    public List<AliasedResolvedField> getResolvedFields(ResolvedType resolvedType) {
         if (isReturnType()) {
             return descriptor.serializableFields(this.getTypeResolver(), resolvedType);
         } else {

File: src/main/java/com/mangofactory/swagger/models/ResolvedTypeMemberVisitor.java
Patch:
@@ -33,7 +33,7 @@ public MemberVisitor apply(SchemaProvider input) {
     @SuppressWarnings("ConstantConditions")
     @Override
     public DocumentationSchema schema(MemberInfoSource member) {
-        if (context.getSchemaMap().containsKey(member.getType().getSimpleName())) {
+        if (context.getSchemaMap().containsKey(modelName(member.getResolvedType()))) {
             DocumentationSchema schema = new DocumentationSchema();
             schema.setType(modelName(member.getResolvedType()));
             schema.setName(member.getName());

File: src/main/java/com/mangofactory/swagger/spring/controller/DocumentationController.java
Patch:
@@ -19,6 +19,7 @@
 
 import javax.servlet.ServletContext;
 import javax.servlet.http.HttpServletRequest;
+import java.util.List;
 
 @Controller
 @RequestMapping('/' + DocumentationController.CONTROLLER_ENDPOINT)
@@ -31,7 +32,7 @@ public class DocumentationController implements ServletContextAware {
     private SwaggerConfiguration swaggerConfiguration;
 
     @Autowired
-    private RequestMappingHandlerMapping handlerMapping;
+    private List<RequestMappingHandlerMapping> handlerMappings;
     @Getter
     private DocumentationReader apiReader;
 
@@ -56,6 +57,6 @@ ControllerDocumentation getApiDocumentation(HttpServletRequest request) {
     @Override
     public void setServletContext(ServletContext servletContext) {
         apiReader = new DocumentationReader(swaggerConfiguration,
-                WebApplicationContextUtils.getWebApplicationContext(servletContext), handlerMapping);
+                WebApplicationContextUtils.getWebApplicationContext(servletContext), handlerMappings);
     }
 }

File: src/main/java/com/mangofactory/swagger/SwaggerConfiguration.java
Patch:
@@ -85,7 +85,6 @@ public ResolvedType maybeGetAlternateType(final ResolvedType parameterType) {
             if (rule.hasAlternateType()) {
                 return asResolvedType(typeResolver, rule.alternateType());
             }
-            return asResolvedType(typeResolver, rule.originalType());
         }
         return parameterType;
     }

File: src/main/java/com/mangofactory/swagger/configuration/ExtensibilityModule.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.mangofactory.swagger.SwaggerConfiguration;
 import com.mangofactory.swagger.filters.Filter;
+import com.mangofactory.swagger.models.TypeProcessingRule;
 import com.wordnik.swagger.core.Documentation;
 import com.wordnik.swagger.core.DocumentationEndPoint;
 import com.wordnik.swagger.core.DocumentationError;
@@ -17,15 +18,15 @@ public SwaggerConfiguration apply(SwaggerConfiguration configuration) {
         customizeOperationFilters(configuration.getOperationFilters());
         customizeParameterFilters(configuration.getParameterFilters());
         customizeErrorFilters(configuration.getErrorFilters());
-        customizeIgnorableParameterTypes(configuration.getIgnorableParameterTypes());
+        customizeTypeProcessingRules(configuration.getTypeProcessingRules());
         customizeExcludedResources(configuration.getExcludedResources());
         return configuration;
     }
 
     protected void customizeExcludedResources(List<String> excludedResources) {
     }
 
-    protected void customizeIgnorableParameterTypes(List<Class<?>> ignorableParameterTypes) {
+    protected void customizeTypeProcessingRules(List<TypeProcessingRule> typeProcessingRules) {
     }
 
     protected void customizeErrorFilters(List<Filter<List<DocumentationError>>> errorFilters) {

File: src/main/java/com/mangofactory/swagger/models/ResolvedTypeMemberVisitor.java
Patch:
@@ -56,8 +56,6 @@ public DocumentationSchema schema(MemberInfoSource member) {
                 return schema;
             } else if (resolvedMember.getErasedType() == Object.class) {
                 return null;
-            } else if (context.hasCustomSchemaGenerator(resolvedMember)) {
-                return context.generateCustomSchema(resolvedMember);
             }
         }
         if (ResolvedCollection.isList(member)) {

File: src/main/java/com/mangofactory/swagger/spring/OperationReader.java
Patch:
@@ -44,13 +44,14 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
         MethodParameter[] methodParameters = handlerMethod.getMethodParameters();
         for (int index = 0; index < handlerMethod.getMethodParameters().length; index++) {
             DocumentationParameter parameter = new DocumentationParameter();
+            ResolvedType resolvedType = configuration.maybeGetAlternateType(resolvedParameters.get(index));
             if (resolvedParameters.size() == 0
-                    || configuration.isParameterTypeIgnorable(resolvedParameters.get(index).getErasedType())) {
+                    || configuration.isParameterTypeIgnorable(resolvedType.getErasedType())) {
                 continue;
             }
             FilterContext<DocumentationParameter> parameterContext = new FilterContext<DocumentationParameter>(parameter);
             parameterContext.put("methodParameter", methodParameters[index]);
-            parameterContext.put("parameterType", resolvedParameters.get(index));
+            parameterContext.put("parameterType", resolvedType);
             parameterContext.put("defaultParameterName", parameterNames[parameterIndex++]);
             parameterContext.put("controllerDocumentation", controllerDocumentation);
             Filters.Fn.applyFilters(configuration.getParameterFilters(), parameterContext);

File: src/main/java/com/mangofactory/swagger/models/SchemaProvider.java
Patch:
@@ -93,8 +93,8 @@ private Function<SchemaProvider,MemberVisitor> findKey(Type returnType) {
     private Function<SchemaProvider,MemberVisitor> findKey(ResolvedField field) {
         if (any(customVisitors, thatSupports(field.getType()))){
             return find(customVisitors, thatSupports(field.getType())).factory();
-        } else if (propertySchemas.containsKey(field.getRawMember().getType())) {
-            return propertySchemas.get(field.getRawMember().getType());
+        } else if (propertySchemas.containsKey(field.getType().getClass())) {
+            return propertySchemas.get(field.getType().getClass());
         }
         return propertySchemas.get(field.getType().getClass());
     }

File: src/test/java/com/mangofactory/swagger/models/ComplexTypeTest.java
Patch:
@@ -18,7 +18,6 @@
 public class ComplexTypeTest {
     private Map<String, DocumentationSchema> modelMap;
 
-
     class Pet {
         String name;
         int age;

File: src/main/java/com/mangofactory/swagger/models/ResolvedTypeMemberVisitor.java
Patch:
@@ -56,6 +56,8 @@ public DocumentationSchema schema(MemberInfoSource member) {
                 return schema;
             } else if (resolvedMember.getErasedType() == Object.class) {
                 return null;
+            } else if (context.hasCustomSchemaGenerator(resolvedMember)) {
+                return context.generateCustomSchema(resolvedMember);
             }
         }
         if (ResolvedCollection.isList(member)) {

File: src/main/java/com/mangofactory/swagger/models/Jackson2SchemaDescriptor.java
Patch:
@@ -15,6 +15,7 @@
 import com.google.common.base.Function;
 import com.google.common.base.Objects;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.stereotype.Component;
 
 import java.lang.reflect.Field;
@@ -31,7 +32,7 @@ public class Jackson2SchemaDescriptor implements SchemaDescriptor {
     private final ObjectMapper objectMapper;
 
     @Autowired
-    public Jackson2SchemaDescriptor(ObjectMapper objectMapper) {
+    public Jackson2SchemaDescriptor(@Qualifier("documentationObjectMapper") ObjectMapper objectMapper) {
         this.objectMapper = objectMapper;
     }
 

File: src/main/java/com/mangofactory/swagger/models/Models.java
Patch:
@@ -64,8 +64,7 @@ public static void maybeAddParameterTypeToModels(ControllerDocumentation control
     }
 
     public static boolean isPrimitive(Class<?> parameterType) {
-        return parameterType.isEnum() ||
-                parameterType.isPrimitive() ||
+        return  parameterType.isPrimitive() ||
                 String.class.isAssignableFrom(parameterType) ||
                 Date.class.isAssignableFrom(parameterType) ||
                 Byte.class.isAssignableFrom(parameterType) ||

File: src/main/java/com/mangofactory/swagger/models/ResolvedFieldInfo.java
Patch:
@@ -27,7 +27,7 @@ public ResolvedType getResolvedType() {
 
     @Override
     public boolean isAssignableFrom(Class<?> clazz) {
-        return getType().isAssignableFrom(clazz) || clazz.isAssignableFrom(getType());
+        return (getType() != Object.class) && (getType().isAssignableFrom(clazz) || clazz.isAssignableFrom(getType()));
     }
 
     @Override

File: src/main/java/com/mangofactory/swagger/models/ResolvedProperty.java
Patch:
@@ -47,7 +47,7 @@ public String getMethodName() {
 
     @Override
     public boolean isAssignableFrom(Class<?> clazz) {
-        return getType().isAssignableFrom(clazz) || clazz.isAssignableFrom(getType());
+        return (getType() != Object.class) && (getType().isAssignableFrom(clazz) || clazz.isAssignableFrom(getType()));
     }
 
     @Override

File: src/main/java/com/mangofactory/swagger/models/ResolvedTypeMemberSource.java
Patch:
@@ -28,10 +28,11 @@ public ResolvedType getResolvedType() {
 
     @Override
     public boolean isAssignableFrom(Class<?> clazz) {
-        return resolvedType.getClass().isAssignableFrom(clazz)
+
+        return (resolvedType.getErasedType() != Object.class) && (resolvedType.getClass().isAssignableFrom(clazz)
                 || clazz.isAssignableFrom(resolvedType.getClass())
                 || resolvedType.getErasedType().isAssignableFrom(clazz)
-                || clazz.isAssignableFrom(resolvedType.getErasedType());
+                || clazz.isAssignableFrom(resolvedType.getErasedType()));
     }
 
     @Override

File: src/test/java/com/mangofactory/swagger/SwaggerConfigurationTest.java
Patch:
@@ -11,8 +11,8 @@ public class SwaggerConfigurationTest {
 
     @Before
     public void setUp() throws Exception {
-        config = new SwaggerConfiguration();
-        config.setExcludedResources(newArrayList("/pets"));
+        config = new SwaggerConfiguration("2.0", "/some-path");
+        config.getExcludedResources().addAll(newArrayList("/pets"));
     }
 
     @Test

File: src/test/java/com/mangofactory/swagger/spring/filters/ParameterFilterTest.java
Patch:
@@ -137,7 +137,7 @@ public void whenParameterIsAnEnum() {
         context.put("parameterType", methodParameters(typeResolver, handlerMethod.getMethod()).get(0));
         applyFilters(paramFilters, context);
 
-        assertEquals(0, documentation.getModels().size());
+        assertEquals(1, documentation.getModels().size());
         assertTrue(docParam.allowableValues() instanceof DocumentationAllowableListValues);
         assertEquals(2, ((DocumentationAllowableListValues) docParam.allowableValues()).getValues().size());
 
@@ -212,7 +212,7 @@ public void whenArrayTypeIsAnEnum() {
 
         applyFilters(paramFilters, context);
 
-        assertEquals(0, documentation.getModels().size());
+        assertEquals(1, documentation.getModels().size());
         assertNull(docParam.allowableValues());
     }
 

File: src/main/java/com/mangofactory/swagger/spring/filters/OperationFilter.java
Patch:
@@ -38,8 +38,7 @@ private void documentOperation(SwaggerConfiguration configuration, ControllerDoc
             if (configuration.isParameterTypeIgnorable(parameterType.getErasedType())) {
                 return;
             }
-            maybeAddParameterTypeToModels(controllerDocumentation, parameterType,
-                    parameterType.getBriefDescription(), true);
+            maybeAddParameterTypeToModels(controllerDocumentation, parameterType, modelName(parameterType), true);
         }
 
     }

File: src/main/java/com/mangofactory/swagger/models/Models.java
Patch:
@@ -20,6 +20,7 @@ private Fn() {
         }
         public static Function<Model, Map<String, DocumentationSchema>>
             modelToSchema(final DocumentationSchemaProvider provider) {
+
             return new Function<Model, Map<String, DocumentationSchema>>() {
                 @Override
                 public Map<String, DocumentationSchema> apply(Model input) {

File: src/main/java/com/mangofactory/swagger/models/PrimitiveMemberInfo.java
Patch:
@@ -3,10 +3,10 @@
 import com.fasterxml.classmate.ResolvedType;
 import com.fasterxml.classmate.TypeResolver;
 
-public class ClassMemberInfo implements MemberInfoSource {
+public class PrimitiveMemberInfo implements MemberInfoSource {
     private final Class<?> clazz;
 
-    public ClassMemberInfo(Class<?> clazz) {
+    public PrimitiveMemberInfo(Class<?> clazz) {
         this.clazz = clazz;
     }
 

File: src/main/java/com/mangofactory/swagger/models/ResolvedtypeMemberVisitor.java
Patch:
@@ -44,7 +44,7 @@ public DocumentationSchema schema(MemberInfoSource member) {
         Class<?> erasedClass = resolvedMember.getErasedType();
         if (resolvedMember.getTypeParameters().size() == 0) {
             if (resolvedMember.isPrimitive() || SchemaProvider.isSimpleType(resolvedMember.getErasedType())) {
-                return PrimitiveMemberVisitor.factory().apply(context).schema(new ClassMemberInfo(erasedClass));
+                return PrimitiveMemberVisitor.factory().apply(context).schema(new PrimitiveMemberInfo(erasedClass));
             } else if (EnumHelper.isEnum(resolvedMember.getErasedType())) {
                 DocumentationSchema schema = new DocumentationSchema();
                 schema.setType(modelName(resolvedMember));

File: src/main/java/com/mangofactory/swagger/spring/OperationReader.java
Patch:
@@ -39,7 +39,8 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
         int parameterIndex = 0;
         String [] parameterNames = new LocalVariableTableParameterNameDiscoverer().getParameterNames(handlerMethod
                 .getMethod());
-        List<ResolvedType> resolvedParameters = methodParameters(handlerMethod.getMethod());
+        List<ResolvedType> resolvedParameters = methodParameters(configuration.getTypeResolver(),
+                handlerMethod.getMethod());
         MethodParameter[] methodParameters = handlerMethod.getMethodParameters();
         for (int index = 0; index < handlerMethod.getMethodParameters().length; index++) {
             DocumentationParameter parameter = new DocumentationParameter();

File: src/main/java/com/mangofactory/swagger/spring/filters/OperationFilter.java
Patch:
@@ -32,7 +32,7 @@ private void documentOperation(SwaggerConfiguration configuration, ControllerDoc
 
         operation.setNickname(handlerMethod.getMethod().getName());
         operation.setDeprecated(handlerMethod.getMethodAnnotation(Deprecated.class) != null);
-        ResolvedType parameterType = methodReturnType(handlerMethod.getMethod());
+        ResolvedType parameterType = methodReturnType(configuration.getTypeResolver(), handlerMethod.getMethod());
         if (parameterType != null) {
             operation.setResponseClass(modelName(parameterType));
             if (configuration.isParameterTypeIgnorable(parameterType.getErasedType())) {

File: src/test/java/com/mangofactory/swagger/models/ArrayTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.models;
 
+import com.fasterxml.classmate.TypeResolver;
 import com.wordnik.swagger.core.DocumentationAllowableListValues;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
@@ -107,7 +108,7 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
         modelMap = provider.getModelMap(new Model("ToTest", asResolvedType(ToTest.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/ComplexTypeTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.models;
 
+import com.fasterxml.classmate.TypeResolver;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
 import org.junit.Test;
@@ -58,7 +59,7 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
         modelMap = provider.getModelMap(new Model("pet", asResolvedType(Pet.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/EnumTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.models;
 
+import com.fasterxml.classmate.TypeResolver;
 import com.wordnik.swagger.core.DocumentationAllowableListValues;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
@@ -36,7 +37,7 @@ public void setExampleEnum(ExampleEnum exampleEnum) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
         modelMap = provider.getModelMap(new Model("ExampleWithEnums", asResolvedType(ExampleWithEnums.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/InheritedComplexTypeTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.models;
 
+import com.fasterxml.classmate.TypeResolver;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
 import org.junit.Test;
@@ -61,7 +62,7 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
         modelMap = provider.getModelMap(new Model("Pet", asResolvedType(Pet.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/ListTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.models;
 
+import com.fasterxml.classmate.TypeResolver;
 import com.wordnik.swagger.core.DocumentationAllowableListValues;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
@@ -113,7 +114,7 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
         modelMap = provider.getModelMap(new Model("ToTest", asResolvedType(ToTest.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/RecursiveTypeTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.models;
 
+import com.fasterxml.classmate.TypeResolver;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
 import org.junit.Test;
@@ -67,7 +68,7 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
         modelMap = provider.getModelMap(new Model("Pet", asResolvedType(Pet.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/SetTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.models;
 
+import com.fasterxml.classmate.TypeResolver;
 import com.wordnik.swagger.core.DocumentationAllowableListValues;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
@@ -114,7 +115,7 @@ public void setName(String name) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
         modelMap = provider.getModelMap(new Model("ToTest", asResolvedType(ToTest.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/models/SimpleModelTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.models;
 
+import com.fasterxml.classmate.TypeResolver;
 import com.wordnik.swagger.core.DocumentationSchema;
 import org.junit.Before;
 import org.junit.Test;
@@ -92,7 +93,7 @@ public void setDate(Date date) {
     @Before
     public void setup() {
         modelMap = newHashMap();
-        DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
+        DocumentationSchemaProvider provider = new DocumentationSchemaProvider(new TypeResolver());
         modelMap = provider.getModelMap(new Model("SimpleType", asResolvedType(SimpleType.class)));
     }
 

File: src/test/java/com/mangofactory/swagger/spring/OperationReaderTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.spring;
 
+import com.fasterxml.classmate.TypeResolver;
 import com.mangofactory.swagger.ControllerDocumentation;
 import com.mangofactory.swagger.SwaggerConfiguration;
 import com.mangofactory.swagger.annotations.ApiError;
@@ -56,7 +57,7 @@ public void setup() {
 
         controllerDocumentation = new ControllerDocumentation(swaggerConfiguration.getApiVersion(),
                 swaggerConfiguration.getSwaggerVersion(), swaggerConfiguration.getBasePath(),
-                swaggerConfiguration.getDocumentationBasePath(), new DocumentationSchemaProvider());
+                swaggerConfiguration.getDocumentationBasePath(), new DocumentationSchemaProvider(new TypeResolver()));
     }
 
     @Test

File: src/test/java/com/mangofactory/swagger/spring/filters/OperationFilterTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.mangofactory.swagger.spring.filters;
 
+import com.fasterxml.classmate.TypeResolver;
 import com.mangofactory.swagger.ControllerDocumentation;
 import com.mangofactory.swagger.SwaggerConfiguration;
 import com.mangofactory.swagger.SwaggerConfigurationExtension;
@@ -53,7 +54,8 @@ public ResponseEntity ignorableMethod() {
     @Before
     public void setup() throws Exception {
         DocumentationOperation operation = new DocumentationOperation();
-        controllerDocumentation= new ControllerDocumentation("", "", "", "", new DocumentationSchemaProvider());
+        controllerDocumentation= new ControllerDocumentation("", "", "", "",
+                new DocumentationSchemaProvider(new TypeResolver()));
         context = new FilterContext<DocumentationOperation>(operation);
         context.put("controllerDocumentation", controllerDocumentation);
 

File: src/main/java/com/mangofactory/swagger/spring/OperationReader.java
Patch:
@@ -43,7 +43,8 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
         MethodParameter[] methodParameters = handlerMethod.getMethodParameters();
         for (int index = 0; index < handlerMethod.getMethodParameters().length; index++) {
             DocumentationParameter parameter = new DocumentationParameter();
-            if (configuration.isParameterTypeIgnorable(resolvedParameters.get(index).getErasedType())) {
+            if (resolvedParameters.size() == 0
+                    || configuration.isParameterTypeIgnorable(resolvedParameters.get(index).getErasedType())) {
                 continue;
             }
             FilterContext<DocumentationParameter> parameterContext = new FilterContext<DocumentationParameter>(parameter);

File: src/main/java/com/mangofactory/swagger/models/ResolvedArrayMemberVisitor.java
Patch:
@@ -5,6 +5,8 @@
 import com.google.common.base.Preconditions;
 import com.wordnik.swagger.core.DocumentationSchema;
 
+import static com.mangofactory.swagger.models.ResolvedTypes.modelName;
+
 public class ResolvedArrayMemberVisitor implements MemberVisitor {
     private final SchemaProvider context;
 
@@ -27,7 +29,7 @@ public DocumentationSchema schema(MemberInfoSource member) {
         Preconditions.checkArgument(member.getResolvedType() instanceof ResolvedArrayType);
         if (context.getSchemaMap().containsKey(member.getType().getSimpleName())) {
             DocumentationSchema schema = new DocumentationSchema();
-            schema.setType(member.getType().getSimpleName());
+            schema.setType(modelName(member.getResolvedType()));
             schema.setName(member.getName());
             return schema;
         }

File: src/main/java/com/mangofactory/swagger/filters/AnnotatedOperationFilter.java
Patch:
@@ -10,6 +10,7 @@
 
 import static com.google.common.collect.Lists.*;
 import static com.mangofactory.swagger.annotations.Annotations.*;
+import static com.mangofactory.swagger.models.ResolvedTypes.asResolvedType;
 
 public class AnnotatedOperationFilter implements Filter<DocumentationOperation> {
     @Override
@@ -39,7 +40,7 @@ private void documentOperation(ControllerDocumentation controllerDocumentation,
         if (apiModel != null) {
             operation.setResponseClass(getAnnotatedType(apiModel));
             String simpleName = apiModel.type().getSimpleName();
-            controllerDocumentation.putModel(simpleName, new Model(simpleName,  apiModel.type(), true));
+            controllerDocumentation.putModel(simpleName, new Model(simpleName, asResolvedType(apiModel.type()), true));
         }
     }
 

File: src/main/java/com/mangofactory/swagger/filters/AnnotatedParameterFilter.java
Patch:
@@ -17,6 +17,7 @@
 
 import static com.google.common.base.Strings.isNullOrEmpty;
 import static com.mangofactory.swagger.annotations.Annotations.*;
+import static com.mangofactory.swagger.models.ResolvedTypes.asResolvedType;
 
 @Slf4j
 public class AnnotatedParameterFilter implements Filter<DocumentationParameter> {
@@ -58,7 +59,7 @@ private void documentParameter(ControllerDocumentation controllerDocumentation,
         if (apiModel != null) {
             parameter.setDataType(getAnnotatedType(apiModel));
             String simpleName = apiModel.type().getSimpleName();
-            controllerDocumentation.putModel(simpleName, new Model(simpleName, apiModel.type()));
+            controllerDocumentation.putModel(simpleName, new Model(simpleName, asResolvedType(apiModel.type())));
         }
 
     }

File: src/test/java/com/mangofactory/swagger/models/ArrayTest.java
Patch:
@@ -10,6 +10,7 @@
 
 import static com.google.common.collect.Maps.*;
 import static com.mangofactory.swagger.models.DocumentationSchemaMatchers.*;
+import static com.mangofactory.swagger.models.ResolvedTypes.asResolvedType;
 import static org.hamcrest.CoreMatchers.*;
 import static org.hamcrest.collection.IsIterableContainingInOrder.*;
 import static org.hamcrest.collection.IsMapContaining.*;
@@ -107,7 +108,7 @@ public void setName(String name) {
     public void setup() {
         modelMap = newHashMap();
         DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
-        modelMap = provider.getModelMap(new Model("ToTest", ToTest.class));
+        modelMap = provider.getModelMap(new Model("ToTest", asResolvedType(ToTest.class)));
     }
 
     @Test

File: src/test/java/com/mangofactory/swagger/models/ComplexTypeTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.Map;
 
 import static com.google.common.collect.Maps.*;
+import static com.mangofactory.swagger.models.ResolvedTypes.asResolvedType;
 import static org.junit.Assert.*;
 
 public class ComplexTypeTest {
@@ -58,7 +59,7 @@ public void setName(String name) {
     public void setup() {
         modelMap = newHashMap();
         DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
-        modelMap = provider.getModelMap(new Model("pet", Pet.class));
+        modelMap = provider.getModelMap(new Model("pet", asResolvedType(Pet.class)));
     }
 
     @Test

File: src/test/java/com/mangofactory/swagger/models/EnumTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Map;
 
 import static com.google.common.collect.Maps.*;
+import static com.mangofactory.swagger.models.ResolvedTypes.asResolvedType;
 import static org.hamcrest.CoreMatchers.*;
 import static org.junit.Assert.*;
 
@@ -36,7 +37,7 @@ public void setExampleEnum(ExampleEnum exampleEnum) {
     public void setup() {
         modelMap = newHashMap();
         DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
-        modelMap = provider.getModelMap(new Model("ExampleWithEnums", ExampleWithEnums.class));
+        modelMap = provider.getModelMap(new Model("ExampleWithEnums", asResolvedType(ExampleWithEnums.class)));
     }
 
 

File: src/test/java/com/mangofactory/swagger/models/InheritedComplexTypeTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.Map;
 
 import static com.google.common.collect.Maps.*;
+import static com.mangofactory.swagger.models.ResolvedTypes.asResolvedType;
 import static org.junit.Assert.*;
 
 public class InheritedComplexTypeTest {
@@ -61,7 +62,7 @@ public void setName(String name) {
     public void setup() {
         modelMap = newHashMap();
         DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
-        modelMap = provider.getModelMap(new Model("Pet", Pet.class));
+        modelMap = provider.getModelMap(new Model("Pet", asResolvedType(Pet.class)));
     }
 
     @Test

File: src/test/java/com/mangofactory/swagger/models/ListTest.java
Patch:
@@ -11,6 +11,7 @@
 
 import static com.google.common.collect.Maps.*;
 import static com.mangofactory.swagger.models.DocumentationSchemaMatchers.*;
+import static com.mangofactory.swagger.models.ResolvedTypes.asResolvedType;
 import static org.hamcrest.CoreMatchers.*;
 import static org.hamcrest.collection.IsIterableContainingInOrder.*;
 import static org.hamcrest.collection.IsMapContaining.*;
@@ -113,7 +114,7 @@ public void setName(String name) {
     public void setup() {
         modelMap = newHashMap();
         DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
-        modelMap = provider.getModelMap(new Model("ToTest", ToTest.class));
+        modelMap = provider.getModelMap(new Model("ToTest", asResolvedType(ToTest.class)));
     }
 
     @Test

File: src/test/java/com/mangofactory/swagger/models/RecursiveTypeTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.Map;
 
 import static com.google.common.collect.Maps.*;
+import static com.mangofactory.swagger.models.ResolvedTypes.asResolvedType;
 import static org.junit.Assert.*;
 
 public class RecursiveTypeTest {
@@ -67,7 +68,7 @@ public void setName(String name) {
     public void setup() {
         modelMap = newHashMap();
         DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
-        modelMap = provider.getModelMap(new Model("Pet", Pet.class));
+        modelMap = provider.getModelMap(new Model("Pet", asResolvedType(Pet.class)));
     }
 
     @Test

File: src/test/java/com/mangofactory/swagger/models/SetTest.java
Patch:
@@ -12,6 +12,7 @@
 
 import static com.google.common.collect.Maps.*;
 import static com.mangofactory.swagger.models.DocumentationSchemaMatchers.*;
+import static com.mangofactory.swagger.models.ResolvedTypes.asResolvedType;
 import static org.hamcrest.CoreMatchers.*;
 import static org.hamcrest.collection.IsIterableContainingInOrder.*;
 import static org.hamcrest.collection.IsMapContaining.*;
@@ -114,7 +115,7 @@ public void setName(String name) {
     public void setup() {
         modelMap = newHashMap();
         DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
-        modelMap = provider.getModelMap(new Model("ToTest", ToTest.class));
+        modelMap = provider.getModelMap(new Model("ToTest", asResolvedType(ToTest.class)));
     }
 
     @Test

File: src/test/java/com/mangofactory/swagger/models/SimpleModelTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.util.Map;
 
 import static com.google.common.collect.Maps.*;
+import static com.mangofactory.swagger.models.ResolvedTypes.asResolvedType;
 import static org.junit.Assert.*;
 
 public class SimpleModelTest {
@@ -92,7 +93,7 @@ public void setDate(Date date) {
     public void setup() {
         modelMap = newHashMap();
         DocumentationSchemaProvider provider = new DocumentationSchemaProvider();
-        modelMap = provider.getModelMap(new Model("SimpleType", SimpleType.class));
+        modelMap = provider.getModelMap(new Model("SimpleType", asResolvedType(SimpleType.class)));
     }
 
     @Test

File: src/main/java/com/mangofactory/swagger/filters/AnnotatedParameterFilter.java
Patch:
@@ -1,7 +1,7 @@
 package com.mangofactory.swagger.filters;
 
 import com.mangofactory.swagger.ControllerDocumentation;
-import com.mangofactory.swagger.Model;
+import com.mangofactory.swagger.models.Model;
 import com.mangofactory.swagger.annotations.ApiModel;
 import com.mangofactory.swagger.spring.AllowableRangesParser;
 import com.wordnik.swagger.annotations.ApiParam;

File: src/main/java/com/mangofactory/swagger/spring/DocumentationEndPoints.java
Patch:
@@ -1,15 +1,16 @@
 package com.mangofactory.swagger.spring;
 
 import com.mangofactory.swagger.ControllerDocumentation;
+import com.mangofactory.swagger.models.DocumentationSchemaProvider;
 import com.wordnik.swagger.core.Documentation;
 import com.wordnik.swagger.core.DocumentationEndPoint;
 
 import static com.mangofactory.swagger.spring.UriExtractor.*;
 
 public class DocumentationEndPoints {
     public static ControllerDocumentation asDocumentation(Documentation parent, DocumentationEndPoint endPoint,
-                                                          ControllerAdapter resource) {
+            ControllerAdapter resource, DocumentationSchemaProvider schemaProvider) {
         return new ControllerDocumentation(parent.apiVersion(), parent.swaggerVersion(), parent.basePath(),
-                getDocumentationEndpointUri(resource.getControllerClass()));
+                getDocumentationEndpointUri(resource.getControllerClass()), schemaProvider);
     }
 }

File: src/main/java/com/mangofactory/swagger/spring/DocumentationReader.java
Patch:
@@ -91,7 +91,7 @@ private void processMethod(RequestMappingHandlerMapping handlerMapping) {
 
             DocumentationEndPoint endPoint = addEndpointDocumentationIfMissing(resource);
             ControllerDocumentation controllerDocumentation = addChildDocumentIfMissing(resource,
-                    asDocumentation(documentation, endPoint, resource));
+                    asDocumentation(documentation, endPoint, resource, configuration.getSchemaProvider()));
 
             for (String requestUri : mappingInfo.getPatternsCondition().getPatterns()) {
                 DocumentationEndPoint childEndPoint = endpointReader.readEndpoint(handlerMethod, resource,

File: src/main/java/com/mangofactory/swagger/spring/OperationReader.java
Patch:
@@ -41,7 +41,7 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
         MethodParameter[] methodParameters = handlerMethod.getMethodParameters();
         for (int index = 0; index < handlerMethod.getMethodParameters().length; index++) {
             DocumentationParameter parameter = new DocumentationParameter();
-            if (configuration.isParameterTypeIgnoreable(parameterTypes[index])) {
+            if (configuration.isParameterTypeIgnorable(parameterTypes[index])) {
                 continue;
             }
             FilterContext<DocumentationParameter> parameterContext = new FilterContext<DocumentationParameter>(parameter);

File: src/main/java/com/mangofactory/swagger/spring/filters/OperationFilter.java
Patch:
@@ -8,7 +8,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.web.method.HandlerMethod;
 
-import static com.mangofactory.swagger.Models.maybeAddParameterTypeToModels;
+import static com.mangofactory.swagger.models.Models.maybeAddParameterTypeToModels;
 import static com.mangofactory.swagger.spring.Descriptions.*;
 
 @Slf4j
@@ -32,10 +32,10 @@ private void documentOperation(SwaggerConfiguration configuration, ControllerDoc
         operation.setDeprecated(handlerMethod.getMethodAnnotation(Deprecated.class) != null);
         Class<?> parameterType = handlerMethod.getReturnType().getParameterType();
         operation.setResponseClass(parameterType.getSimpleName());
-        if (configuration.isParameterTypeIgnoreable(parameterType)) {
+        if (configuration.isParameterTypeIgnorable(parameterType)) {
             return;
         }
-        maybeAddParameterTypeToModels(controllerDocumentation, parameterType, parameterType.getSimpleName());
+        maybeAddParameterTypeToModels(controllerDocumentation, parameterType, parameterType.getSimpleName(), true);
 
     }
 }

File: src/main/java/com/mangofactory/swagger/spring/filters/ParameterFilter.java
Patch:
@@ -16,7 +16,7 @@
 
 import static com.google.common.base.Strings.*;
 import static com.google.common.collect.Lists.*;
-import static com.mangofactory.swagger.Models.*;
+import static com.mangofactory.swagger.models.Models.*;
 import static com.mangofactory.swagger.spring.Descriptions.*;
 
 public class ParameterFilter implements Filter<DocumentationParameter> {
@@ -42,7 +42,7 @@ private void documentParameter(ControllerDocumentation controllerDocumentation,
         String paramType = getParameterType(methodParameter);
         String dataType = parameterType.getSimpleName();
         parameter.setDataType(dataType);
-        maybeAddParameterTypeToModels(controllerDocumentation, parameterType, dataType);
+        maybeAddParameterTypeToModels(controllerDocumentation, parameterType, dataType, false);
         RequestParam requestParam = methodParameter.getParameterAnnotation(RequestParam.class);
         boolean isRequired = false;
         if (requestParam != null) {

File: src/test/java/com/mangofactory/swagger/spring/OperationReaderTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.mangofactory.swagger.SwaggerConfiguration;
 import com.mangofactory.swagger.annotations.ApiError;
 import com.mangofactory.swagger.annotations.ApiErrors;
+import com.mangofactory.swagger.models.DocumentationSchemaProvider;
 import com.mangofactory.swagger.spring.test.Pet;
 import com.mangofactory.swagger.spring.test.TestConfiguration;
 import com.wordnik.swagger.annotations.ApiParam;
@@ -55,7 +56,7 @@ public void setup() {
 
         controllerDocumentation = new ControllerDocumentation(swaggerConfiguration.getApiVersion(),
                 swaggerConfiguration.getSwaggerVersion(), swaggerConfiguration.getBasePath(),
-                swaggerConfiguration.getDocumentationBasePath());
+                swaggerConfiguration.getDocumentationBasePath(), new DocumentationSchemaProvider());
     }
 
     @Test

File: src/test/java/com/mangofactory/swagger/spring/filters/OperationFilterTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.mangofactory.swagger.SwaggerConfiguration;
 import com.mangofactory.swagger.SwaggerConfigurationExtension;
 import com.mangofactory.swagger.filters.FilterContext;
+import com.mangofactory.swagger.models.DocumentationSchemaProvider;
 import com.wordnik.swagger.core.DocumentationOperation;
 import org.junit.Before;
 import org.junit.Test;
@@ -52,7 +53,7 @@ public ResponseEntity ignorableMethod() {
     @Before
     public void setup() throws Exception {
         DocumentationOperation operation = new DocumentationOperation();
-        controllerDocumentation= new ControllerDocumentation("", "", "", "");
+        controllerDocumentation= new ControllerDocumentation("", "", "", "", new DocumentationSchemaProvider());
         context = new FilterContext<DocumentationOperation>(operation);
         context.put("controllerDocumentation", controllerDocumentation);
 

File: src/main/java/com/mangofactory/swagger/Models.java
Patch:
@@ -65,13 +65,11 @@ public static void maybeAddParameterTypeToModels(ControllerDocumentation control
             return;
         }
         if (parameterType.isArray()) {
-
             String componentType = parameterType.getComponentType().getSimpleName();
             if (isComplexType(parameterType.getComponentType())) {
                 controllerDocumentation.putModel(componentType, new Model(String.format("Array[%s]", componentType),
                         parameterType.getComponentType()));
             }
-
         } else {
             controllerDocumentation.putModel(dataType, new Model(dataType, parameterType));
         }

File: src/main/java/com/mangofactory/swagger/spring/OperationReader.java
Patch:
@@ -32,6 +32,7 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
         FilterContext<DocumentationOperation> operationContext = new FilterContext<DocumentationOperation>(operation);
         operationContext.put("handlerMethod", handlerMethod);
         operationContext.put("controllerDocumentation", controllerDocumentation);
+        operationContext.put("swaggerConfiguration", configuration);
         Filters.Fn.applyFilters(configuration.getOperationFilters(), operationContext);
         int parameterIndex = 0;
         String [] parameterNames = new LocalVariableTableParameterNameDiscoverer().getParameterNames(handlerMethod
@@ -40,7 +41,6 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
         MethodParameter[] methodParameters = handlerMethod.getMethodParameters();
         for (int index = 0; index < handlerMethod.getMethodParameters().length; index++) {
             DocumentationParameter parameter = new DocumentationParameter();
-
             if (configuration.isParameterTypeIgnoreable(parameterTypes[index])) {
                 continue;
             }

File: src/main/java/com/mangofactory/swagger/filters/AnnotatedParameterFilter.java
Patch:
@@ -54,7 +54,7 @@ private void documentParameter(ControllerDocumentation controllerDocumentation,
         parameter.setAllowableValues(allowableValues);
         parameter.setRequired(isRequired);
         parameter.setAllowMultiple(apiParam.allowMultiple());
-        ApiModel apiModel = methodParameter.getMethodAnnotation(ApiModel.class);
+        ApiModel apiModel = methodParameter.getParameterAnnotation(ApiModel.class);
         if (apiModel != null) {
             parameter.setDataType(getAnnotatedType(apiModel));
             String simpleName = apiModel.type().getSimpleName();

File: src/test/java/com/mangofactory/swagger/spring/OperationReaderTest.java
Patch:
@@ -134,7 +134,7 @@ public void detectsApiErrorsDeclaredWithSpringMvcApiErrorList() {
     public void responseClass() {
         DocumentationOperation operation = methodReader.readOperation(controllerDocumentation, handlerMethod,
                 new ParamsRequestCondition(), RequestMethod.GET);
-        assertThat(operation.getResponseClass(), equalToIgnoringCase("pet"));
+        assertThat(operation.getResponseClass(), equalToIgnoringCase("Pet"));
     }
 
     @Test
@@ -183,7 +183,7 @@ Pet sampleMethod(
             return new Pet();
         }
 
-        public void sampleMethod2(@ApiParam(name = "pet") @RequestBody Pet pet) {
+        public void sampleMethod2(@ApiParam(name = "com.mangofactory.swagger.spring.test.Pet") @RequestBody Pet pet) {
         }
 
         @ApiErrors({ NotFoundException.class, BadRequestException.class })

File: src/test/java/com/mangofactory/swagger/spring/test/PetService.java
Patch:
@@ -24,7 +24,7 @@ public class PetService {
 
 	@RequestMapping(value="/{petId}",method=RequestMethod.GET)
 	@ApiOperation(value = "Find pet by ID", notes = "Returns a pet when ID < 10. "
-			+ "ID > 10 or nonintegers will simulate API error conditions", responseClass = "com.wordnik.swagger.sample.model.Pet"
+			+ "ID > 10 or nonintegers will simulate API error conditions", responseClass = "ccom.mangofactory.swagger.spring.test.Pet"
 		)
 	@ApiErrors(NotFoundException.class)
 	public Pet getPetById (
@@ -52,15 +52,15 @@ public void updatePet(
 	}
 
 	@RequestMapping(value="/findByStatus",method=RequestMethod.GET)
-	@ApiOperation(value = "Finds Pets by status", notes = "Multiple status values can be provided with comma seperated strings", responseClass = "com.wordnik.swagger.sample.model.Pet", multiValueResponse = true)
+	@ApiOperation(value = "Finds Pets by status", notes = "Multiple status values can be provided with comma seperated strings", responseClass = "ccom.mangofactory.swagger.spring.test.Pet", multiValueResponse = true)
 	@ApiErrors(errors = { @ApiError(code = 400, reason = "Invalid status value") })
 	public void findPetsByStatus(
 			@ApiParam(value = "Status values that need to be considered for filter", required = true, defaultValue = "available", allowableValues = "available,pending,sold", allowMultiple = true) @RequestParam("status") String status) {
 		throw new NotImplementedException();
 	}
 
 	@RequestMapping(value="/findByTags",method=RequestMethod.GET)
-	@ApiOperation(value = "Finds Pets by tags", notes = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.", responseClass = "com.wordnik.swagger.sample.model.Pet", multiValueResponse = true)
+	@ApiOperation(value = "Finds Pets by tags", notes = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.", responseClass = "ccom.mangofactory.swagger.spring.test.Pet", multiValueResponse = true)
 	@ApiErrors(errors = { @ApiError(code = 400, reason = "Invalid tag value") })
 	@Deprecated
 	public void findPetsByTags(

File: src/test/java/com/mangofactory/swagger/spring/test/PetServiceWithAlternativeListingPath.java
Patch:
@@ -21,7 +21,7 @@ public class PetServiceWithAlternativeListingPath {
 
 	@RequestMapping(value="/{petId}",method=RequestMethod.GET)
 	@ApiOperation(value = "Find pet by ID", notes = "Returns a pet when ID < 10. "
-			+ "ID > 10 or nonintegers will simulate API error conditions", responseClass = "com.wordnik.swagger.sample.model.Pet"
+			+ "ID > 10 or nonintegers will simulate API error conditions", responseClass = "ccom.mangofactory.swagger.spring.test.Pet"
 		)
 	@ApiErrors(NotFoundException.class)
 	public Pet getPetById (
@@ -49,15 +49,15 @@ public void updatePet(
 	}
 
 	@RequestMapping(value="/findByStatus",method=RequestMethod.GET)
-	@ApiOperation(value = "Finds Pets by status", notes = "Multiple status values can be provided with comma seperated strings", responseClass = "com.wordnik.swagger.sample.model.Pet", multiValueResponse = true)
+	@ApiOperation(value = "Finds Pets by status", notes = "Multiple status values can be provided with comma seperated strings", responseClass = "com.mangofactory.swagger.spring.test.Pet", multiValueResponse = true)
 	@ApiErrors(errors = { @ApiError(code = 400, reason = "Invalid status value") })
 	public void findPetsByStatus(
 			@ApiParam(value = "Status values that need to be considered for filter", required = true, defaultValue = "available", allowableValues = "available,pending,sold", allowMultiple = true) @RequestParam("status") String status) {
 		throw new NotImplementedException();
 	}
 
 	@RequestMapping(value="/findByTags",method=RequestMethod.GET)
-	@ApiOperation(value = "Finds Pets by tags", notes = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.", responseClass = "com.wordnik.swagger.sample.model.Pet", multiValueResponse = true)
+	@ApiOperation(value = "Finds Pets by tags", notes = "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.", responseClass = "com.mangofactory.swagger.spring.test.Pet", multiValueResponse = true)
 	@ApiErrors(errors = { @ApiError(code = 400, reason = "Invalid tag value") })
 	@Deprecated
 	public void findPetsByTags(

File: src/test/java/com/mangofactory/swagger/spring/JsonResourceListingTests.java
Patch:
@@ -7,6 +7,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.MediaType;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 import org.springframework.test.web.server.test.context.WebContextLoader;
@@ -36,7 +37,7 @@ public class JsonResourceListingTests {
     @Before
     public void setup() {
         mockMvc = MockMvcBuilders.standaloneSetup(controller).build();
-        builder = MockMvcRequestBuilders.get("/api-docs");
+        builder = MockMvcRequestBuilders.get("/api-docs").accept(MediaType.APPLICATION_JSON);
     }
 
     @Test

File: src/main/java/com/mangofactory/swagger/spring/filters/ParameterFilter.java
Patch:
@@ -28,22 +28,22 @@ public class ParameterFilter implements Filter<DocumentationParameter> {
     public void apply(FilterContext<DocumentationParameter> context) {
         DocumentationParameter parameter = context.subject();
         MethodParameter methodParameter = context.get("methodParameter");
+        Class parameterType = context.get("parameterType");
         String defaultParameterName = context.get("defaultParameterName");
         ControllerDocumentation controllerDocumentation = context.get("controllerDocumentation");
 
-        documentParameter(controllerDocumentation, parameter, methodParameter, defaultParameterName);
+        documentParameter(controllerDocumentation, parameter, methodParameter, parameterType, defaultParameterName);
     }
 
     private void documentParameter(ControllerDocumentation controllerDocumentation, DocumentationParameter parameter,
-                                   MethodParameter methodParameter, String defaultParameterName) {
+                                   MethodParameter methodParameter, Class parameterType, String defaultParameterName) {
 
         String name = selectBestParameterName(methodParameter, defaultParameterName);
         String description = splitCamelCase(name);
         if (StringUtils.isEmpty(name)) {
             name = methodParameter.getParameterName();
         }
         String paramType = getParameterType(methodParameter);
-        Class<?> parameterType = methodParameter.getParameterType();
         String dataType = parameterType.getSimpleName();
         parameter.setDataType(dataType);
         maybeAddParameterTypeToModels(controllerDocumentation, parameterType, dataType);

File: src/main/java/com/mangofactory/swagger/spring/DocumentationReader.java
Patch:
@@ -85,8 +85,8 @@ private void processMethod(RequestMappingHandlerMapping handlerMapping) {
             ControllerAdapter resource = new ControllerAdapter(documentation, handlerMethod, configuration);
 
             // Don't document our own controllers
-            if (resource.isInternalResource() || configuration.isExcluded(getMethodLevelUri(resource
-                    .getControllerClass(), handlerMethod))) {
+            if (resource.isInternalResource()
+                    || configuration.isExcluded(getDocumentationEndpointUri(resource.getControllerClass()))) {
                 continue;
             }
 

File: src/main/java/com/mangofactory/swagger/spring/DocumentationReader.java
Patch:
@@ -85,7 +85,8 @@ private void processMethod(RequestMappingHandlerMapping handlerMapping) {
             ControllerAdapter resource = new ControllerAdapter(documentation, handlerMethod, configuration);
 
             // Don't document our own controllers
-            if (resource.isInternalResource()) {
+            if (resource.isInternalResource() || configuration.isExcluded(getMethodLevelUri(resource
+                    .getControllerClass(), handlerMethod))) {
                 continue;
             }
 

File: src/test/java/com/mangofactory/swagger/spring/test/TestConfiguration.java
Patch:
@@ -8,6 +8,8 @@
 import org.springframework.context.annotation.Configuration;
 import org.springframework.web.servlet.config.annotation.EnableWebMvc;
 
+import static com.google.common.collect.Lists.newArrayList;
+
 @Configuration
 @EnableWebMvc
 @ComponentScan("com.mangofactory.swagger.spring.test")
@@ -23,6 +25,7 @@ public SwaggerConfiguration swaggerConfiguration() {
         SwaggerConfiguration swaggerConfiguration = new SwaggerConfiguration();
         swaggerConfiguration.setApiVersion("2.0");
         swaggerConfiguration.setBasePath("/some-path");
+        swaggerConfiguration.setExcludedResources(newArrayList("/excluded"));
         return swaggerConfiguration;
     }
 

File: src/main/java/com/mangofactory/swagger/spring/UriExtractor.java
Patch:
@@ -68,4 +68,6 @@ protected static String resolveRequestUri(RequestMapping requestMapping) {
         }
         return requestUris[0];
     }
+
+
 }

File: src/main/java/com/mangofactory/swagger/spring/ControllerAdapter.java
Patch:
@@ -47,7 +47,7 @@ public DocumentationEndPoint describeAsDocumentationEndpoint() {
     private String getListingPath() {
         Api apiAnnotation = controllerClass.getAnnotation(Api.class);
         if (apiAnnotation == null || apiAnnotation.listingPath().equals("")) {
-            return getClassLevelUri(controllerClass);
+            return getDocumentationEndpointUri(controllerClass);
         }
         return apiAnnotation.listingPath();
     }

File: src/main/java/com/mangofactory/swagger/spring/DocumentationEndPoints.java
Patch:
@@ -4,12 +4,12 @@
 import com.wordnik.swagger.core.Documentation;
 import com.wordnik.swagger.core.DocumentationEndPoint;
 
-import static com.mangofactory.swagger.spring.UriExtractor.getClassLevelUri;
+import static com.mangofactory.swagger.spring.UriExtractor.*;
 
 public class DocumentationEndPoints {
     public static ControllerDocumentation asDocumentation(Documentation parent, DocumentationEndPoint endPoint,
                                                           ControllerAdapter resource) {
         return new ControllerDocumentation(parent.apiVersion(), parent.swaggerVersion(), parent.basePath(),
-                getClassLevelUri(resource.getControllerClass()));
+                getDocumentationEndpointUri(resource.getControllerClass()));
     }
 }

File: src/test/java/com/mangofactory/swagger/spring/ControllerAdapterTest.java
Patch:
@@ -59,10 +59,10 @@ public void assertHandleNoClassLevelRequestMapping()
 		assertThat(methodLevelUri, is(notNullValue()));
         assertThat(methodLevelUri, is(equalTo("/no-classlevel-requestmapping")));
 
-        String classLevelUri = getClassLevelUri(sampleController.getClass());
+        String classLevelUri = getDocumentationEndpointUri(sampleController.getClass());
 
         assertThat(classLevelUri, is(notNullValue()));
-        assertThat(classLevelUri, is(equalTo("/")));
+        assertThat(classLevelUri, is(equalTo("/sample-controller")));
 
 	}
 
@@ -74,7 +74,7 @@ public void assertThatExampleServiceWorksAsExpected()
         Method sampleMethod = controller.getClass().getMethod("getEffective", UriComponentsBuilder.class);
         HandlerMethod handlerMethod = new HandlerMethod(controller, sampleMethod);
 
-        String classLevelUri = getClassLevelUri(controller.getClass());
+        String classLevelUri = getDocumentationEndpointUri(controller.getClass());
         String methodLevelUri = getMethodLevelUri(controller.getClass(), handlerMethod);
 
         assertThat(classLevelUri, is(notNullValue()));

File: src/main/java/com/mangofactory/swagger/spring/DocumentationEndPoints.java
Patch:
@@ -4,10 +4,12 @@
 import com.wordnik.swagger.core.Documentation;
 import com.wordnik.swagger.core.DocumentationEndPoint;
 
+import static com.mangofactory.swagger.spring.UriExtractor.getClassLevelUri;
+
 public class DocumentationEndPoints {
     public static ControllerDocumentation asDocumentation(Documentation parent, DocumentationEndPoint endPoint,
                                                           ControllerAdapter resource) {
         return new ControllerDocumentation(parent.apiVersion(), parent.swaggerVersion(), parent.basePath(),
-                resource.getControllerUri());
+                getClassLevelUri(resource.getControllerClass()));
     }
 }

File: src/main/java/com/mangofactory/swagger/spring/UriExtractor.java
Patch:
@@ -68,4 +68,6 @@ protected static String resolveRequestUri(RequestMapping requestMapping) {
         }
         return requestUris[0];
     }
+
+
 }

File: src/main/java/com/mangofactory/swagger/spring/DocumentationEndPoints.java
Patch:
@@ -4,10 +4,12 @@
 import com.wordnik.swagger.core.Documentation;
 import com.wordnik.swagger.core.DocumentationEndPoint;
 
+import static com.mangofactory.swagger.spring.UriExtractor.*;
+
 public class DocumentationEndPoints {
     public static ControllerDocumentation asDocumentation(Documentation parent, DocumentationEndPoint endPoint,
                                                           ControllerAdapter resource) {
         return new ControllerDocumentation(parent.apiVersion(), parent.swaggerVersion(), parent.basePath(),
-                resource.getControllerUri());
+                getDocumentationEndpointUri(resource.getControllerClass()));
     }
 }

File: src/main/java/com/mangofactory/swagger/spring/ControllerAdapter.java
Patch:
@@ -47,7 +47,7 @@ public DocumentationEndPoint describeAsDocumentationEndpoint() {
     private String getListingPath() {
         Api apiAnnotation = controllerClass.getAnnotation(Api.class);
         if (apiAnnotation == null || apiAnnotation.listingPath().equals("")) {
-            return getClassLevelUri(controllerClass);
+            return getDocumentationEndpointUri(controllerClass);
         }
         return apiAnnotation.listingPath();
     }

File: src/main/java/com/mangofactory/swagger/spring/DocumentationEndPoints.java
Patch:
@@ -4,12 +4,12 @@
 import com.wordnik.swagger.core.Documentation;
 import com.wordnik.swagger.core.DocumentationEndPoint;
 
-import static com.mangofactory.swagger.spring.UriExtractor.getClassLevelUri;
+import static com.mangofactory.swagger.spring.UriExtractor.*;
 
 public class DocumentationEndPoints {
     public static ControllerDocumentation asDocumentation(Documentation parent, DocumentationEndPoint endPoint,
                                                           ControllerAdapter resource) {
         return new ControllerDocumentation(parent.apiVersion(), parent.swaggerVersion(), parent.basePath(),
-                getClassLevelUri(resource.getControllerClass()));
+                getDocumentationEndpointUri(resource.getControllerClass()));
     }
 }

File: src/test/java/com/mangofactory/swagger/spring/ControllerAdapterTest.java
Patch:
@@ -59,10 +59,10 @@ public void assertHandleNoClassLevelRequestMapping()
 		assertThat(methodLevelUri, is(notNullValue()));
         assertThat(methodLevelUri, is(equalTo("/no-classlevel-requestmapping")));
 
-        String classLevelUri = getClassLevelUri(sampleController.getClass());
+        String classLevelUri = getDocumentationEndpointUri(sampleController.getClass());
 
         assertThat(classLevelUri, is(notNullValue()));
-        assertThat(classLevelUri, is(equalTo("/")));
+        assertThat(classLevelUri, is(equalTo("/sample-controller")));
 
 	}
 
@@ -74,7 +74,7 @@ public void assertThatExampleServiceWorksAsExpected()
         Method sampleMethod = controller.getClass().getMethod("getEffective", UriComponentsBuilder.class);
         HandlerMethod handlerMethod = new HandlerMethod(controller, sampleMethod);
 
-        String classLevelUri = getClassLevelUri(controller.getClass());
+        String classLevelUri = getDocumentationEndpointUri(controller.getClass());
         String methodLevelUri = getMethodLevelUri(controller.getClass(), handlerMethod);
 
         assertThat(classLevelUri, is(notNullValue()));

File: src/main/java/com/mangofactory/swagger/spring/DocumentationEndPoints.java
Patch:
@@ -4,10 +4,12 @@
 import com.wordnik.swagger.core.Documentation;
 import com.wordnik.swagger.core.DocumentationEndPoint;
 
+import static com.mangofactory.swagger.spring.UriExtractor.getClassLevelUri;
+
 public class DocumentationEndPoints {
     public static ControllerDocumentation asDocumentation(Documentation parent, DocumentationEndPoint endPoint,
                                                           ControllerAdapter resource) {
         return new ControllerDocumentation(parent.apiVersion(), parent.swaggerVersion(), parent.basePath(),
-                resource.getControllerUri());
+                getClassLevelUri(resource.getControllerClass()));
     }
 }

File: src/main/java/com/mangofactory/swagger/ControllerDocumentation.java
Patch:
@@ -77,7 +77,7 @@ public HashMap<String, DocumentationSchema> getModels() {
             @Override
             public DocumentationSchema apply(Model input) {
                 ObjectMapper mapper = new ObjectMapper();
-                JsonSchema jsonSchema = null;
+                JsonSchema jsonSchema;
                 DocumentationSchema schema = new DocumentationSchema();
                 schema.setId(input.getName());
                 try {

File: src/main/java/com/mangofactory/swagger/SwaggerConfigurationExtension.java
Patch:
@@ -19,5 +19,6 @@ public class SwaggerConfigurationExtension {
     private List<Filter<DocumentationOperation>> operationFilters = newArrayList();
     private List<Filter<DocumentationParameter>> parameterFilters = newArrayList();
     private List<Filter<List<DocumentationError>>> errorFilters = newArrayList();
+    private List<Class<?>> ignorableParameterTypes = newArrayList();
 
 }

File: src/main/java/com/mangofactory/swagger/spring/OperationReader.java
Patch:
@@ -30,6 +30,9 @@ DocumentationOperation readOperation(ControllerDocumentation controllerDocumenta
 
         for (MethodParameter methodParameter : handlerMethod.getMethodParameters()) {
             DocumentationParameter parameter = new DocumentationParameter();
+            if (configuration.isParameterTypeIgnoreable(methodParameter.getParameterType())) {
+                continue;
+            }
             FilterContext<DocumentationParameter> parameterContext = new FilterContext<DocumentationParameter>(parameter);
             parameterContext.put("methodParameter", methodParameter);
             parameterContext.put("controllerDocumentation", controllerDocumentation);

File: src/main/java/com/mangofactory/swagger/annotations/ApiError.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger;
+package com.mangofactory.swagger.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: src/main/java/com/mangofactory/swagger/annotations/ApiErrors.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger;
+package com.mangofactory.swagger.annotations;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: src/main/java/com/mangofactory/swagger/spring/AllowableRangesParser.java
Patch:
@@ -1,4 +1,4 @@
-package com.mangofactory.swagger.springmvc;
+package com.mangofactory.swagger.spring;
 
 import lombok.val;
 

File: src/test/java/com/wordnik/swagger/sample/exception/BadRequestException.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.wordnik.swagger.sample.exception;
 
-import com.mangofactory.swagger.ApiError;
+import com.mangofactory.swagger.annotations.ApiError;
 
 @ApiError(code=302,reason="Malformed request")
 public class BadRequestException extends ApiException{

File: src/test/java/com/wordnik/swagger/sample/exception/NotFoundException.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.wordnik.swagger.sample.exception;
 
-import com.mangofactory.swagger.ApiError;
+import com.mangofactory.swagger.annotations.ApiError;
 
 @ApiError(code=404,reason="Invalid ID Supplied")
 public class NotFoundException extends ApiException {

File: src/test/java/org/springframework/test/web/server/test/context/GenericWebContextLoader.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.springframework.test.web.server.test.context;
 
-import javax.servlet.RequestDispatcher;
 
 import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;
 import org.springframework.context.ApplicationContext;
@@ -31,6 +30,8 @@
 import org.springframework.web.context.WebApplicationContext;
 import org.springframework.web.context.support.GenericWebApplicationContext;
 
+import javax.servlet.RequestDispatcher;
+
 public class GenericWebContextLoader extends AbstractContextLoader {
 	protected final MockServletContext servletContext;
 

File: src/test/java/com/mangofactory/swagger/springmvc/MvcApiReaderTest.java
Patch:
@@ -47,7 +47,7 @@ public void findsDeclaredHandlerMethods()
 		Documentation petsDocumentation = controller.getApiDocumentation("pets");
 		assertThat(petsDocumentation, is(notNullValue()));
 		DocumentationEndPoint documentationEndPoint = resourceListing.getApis().get(0);
-		assertEquals("/pets" ,documentationEndPoint.getPath());
+		assertEquals("/api-docs/pets" ,documentationEndPoint.getPath());
 	}
 	
 	@Test

File: src/test/java/com/mangofactory/swagger/springmvc/MvcApiReaderTest.java
Patch:
@@ -36,13 +36,14 @@ public void givenADocumentedApi_that_thePathReferencesTheDocumentationEndPoint()
 	{
 		Documentation resourceListing = controller.getResourceListing();
 		DocumentationEndPoint documentationEndPoint = resourceListing.getApis().get(0);
-		assertThat(documentationEndPoint.getPath(),equalTo("resources/pets"));
+		// TODO : Add support for listingPath
+		assertThat(documentationEndPoint.getPath(),equalTo("/api-docs/pets"));
 	}
 	@Test
 	public void findsDeclaredHandlerMethods()
 	{
 		Documentation resourceListing = controller.getResourceListing();
-		assertThat(resourceListing.getApis().size(),equalTo(1));
+		assertThat(resourceListing.getApis().size(),equalTo(2));
 		Documentation petsDocumentation = controller.getApiDocumentation("pets");
 		assertThat(petsDocumentation, is(notNullValue()));
 		DocumentationEndPoint documentationEndPoint = resourceListing.getApis().get(0);

File: src/main/java/com/mangofactory/swagger/ApiErrors.java
Patch:
@@ -18,4 +18,5 @@
 @Target(ElementType.METHOD)
 public @interface ApiErrors {
 	Class<? extends Throwable>[] value() default {};
+	ApiError[] errors() default {};
 }

File: src/main/java/com/mangofactory/swagger/ControllerDocumentation.java
Patch:
@@ -8,7 +8,7 @@
 
 import com.google.common.collect.Maps;
 import com.mangofactory.swagger.springmvc.MvcApiResource;
-import com.wordnik.swagger.core.Api;
+import com.wordnik.swagger.annotations.Api;
 import com.wordnik.swagger.core.Documentation;
 import com.wordnik.swagger.core.DocumentationEndPoint;
 import com.wordnik.swagger.core.DocumentationOperation;

File: src/main/java/com/mangofactory/swagger/springmvc/ApiMethodReader.java
Patch:
@@ -62,6 +62,7 @@ private void documentOperation() {
 		}
 		nickname = handlerMethod.getMethod().getName();
 		deprecated = handlerMethod.getMethodAnnotation(Deprecated.class) != null;
+    responseClass = handlerMethod.getReturnType().getParameterType();
 	}
 
 	public DocumentationOperation getOperation(RequestMethod requestMethod) {
@@ -71,6 +72,7 @@ public DocumentationOperation getOperation(RequestMethod requestMethod) {
 		for (DocumentationParameter parameter : parameters)
 			operation.addParameter(parameter);
 		setTags(operation);
+    operation.setResponseClass(responseClass.getSimpleName());
 		
 		for (DocumentationError error : errors)
 			operation.addErrorResponse(error);

File: src/main/java/com/mangofactory/swagger/springmvc/ApiMethodReader.java
Patch:
@@ -86,7 +86,8 @@ private void documentParameters() {
 			ApiParam apiParam = methodParameter.getParameterAnnotation(ApiParam.class);
 			if (apiParam == null)
 			{
-				log.warn("{} is missing @ApiParam annotation - so generating default documentation");
+				log.warn("{} is missing @ApiParam annotation - so generating default documentation", 
+                         methodParameter.getMethod());
 				generateDefaultParameterDocumentation(methodParameter);
 				continue;
 			}

File: src/main/java/com/mangofactory/swagger/springmvc/ApiMethodReader.java
Patch:
@@ -86,7 +86,8 @@ private void documentParameters() {
 			ApiParam apiParam = methodParameter.getParameterAnnotation(ApiParam.class);
 			if (apiParam == null)
 			{
-				log.warn("{} is missing @ApiParam annotation - so generating default documentation");
+				log.warn("{} is missing @ApiParam annotation - so generating default documentation", 
+                         methodParameter.getMethod());
 				generateDefaultParameterDocumentation(methodParameter);
 				continue;
 			}

File: src/test/java/com/mangofactory/swagger/springmvc/test/PetService.java
Patch:
@@ -24,8 +24,7 @@ public class PetService {
 	@ApiOperation(value = "Find pet by ID", notes = "Returns a pet when ID < 10. "
 			+ "ID > 10 or nonintegers will simulate API error conditions", responseClass = "com.wordnik.swagger.sample.model.Pet"
 		)
-	@ApiErrors(value = { @ApiError(code = 400, reason = "Invalid ID supplied"),
-			@ApiError(code = 404, reason = "Pet not found") })
+	@com.mangofactory.swagger.ApiErrors(NotFoundException.class)
 	public Pet getPetById (
 			@ApiParam(value = "ID of pet that needs to be fetched",  allowableValues = "range[1,5]", required = true) @PathVariable("petId") String petId) 
 	throws NotFoundException {

File: src/test/java/com/wordnik/swagger/sample/exception/BadRequestException.java
Patch:
@@ -16,6 +16,9 @@
 
 package com.wordnik.swagger.sample.exception;
 
+import com.mangofactory.swagger.ApiError;
+
+@ApiError(code=302,reason="Malformed request")
 public class BadRequestException extends ApiException{
 	private int code;
 	public BadRequestException (int code, String msg) {

File: src/test/java/com/wordnik/swagger/sample/exception/NotFoundException.java
Patch:
@@ -16,6 +16,9 @@
 
 package com.wordnik.swagger.sample.exception;
 
+import com.mangofactory.swagger.ApiError;
+
+@ApiError(code=404,reason="Invalid ID Supplied")
 public class NotFoundException extends ApiException {
 	private int code;
 	public NotFoundException (int code, String msg) {

File: src/main/java/com/mangofactory/swagger/springmvc/MvcApiReader.java
Patch:
@@ -108,7 +108,7 @@ private ControllerDocumentation getApiDocumentation(MvcApiResource resource) {
 
 	private void appendOperationsToEndpoint(
 			RequestMappingInfo mappingInfo, HandlerMethod handlerMethod, DocumentationEndPoint endPoint) {
-		MethodApiReader methodDoc = new MethodApiReader(handlerMethod);
+		ApiMethodReader methodDoc = new ApiMethodReader(handlerMethod);
 		for (RequestMethod requestMethod : mappingInfo.getMethodsCondition().getMethods())
 		{
 			DocumentationOperation operation = methodDoc.getOperation(requestMethod);

File: src/main/java/com/mangofactory/swagger/springmvc/controller/DocumentationController.java
Patch:
@@ -25,12 +25,12 @@ public class DocumentationController implements InitializingBean {
 	private static final String CONTROLLER_ENDPOINT = "apidoc";
 	
 	@Getter @Setter
-	private String apiVersion;
+	private String apiVersion = "1.0";
 	@Getter @Setter
-	private String swaggerVersion;
+	private String swaggerVersion = "1.0";
 	
 	@Getter @Setter
-	private String basePath;
+	private String basePath = "/";
 	
 	@Autowired
 	private WebApplicationContext wac;

File: src/test/java/com/mangofactory/swagger/springmvc/test/Pet.java
Patch:
@@ -1,5 +1,5 @@
 package com.mangofactory.swagger.springmvc.test;
 
-public class Book {
+public class Pet {
 
 }

