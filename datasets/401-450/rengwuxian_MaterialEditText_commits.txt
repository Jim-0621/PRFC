File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -1275,8 +1275,9 @@ private ObjectAnimator getBottomLinesAnimator(float destBottomLines) {
 
   @Override
   protected void onDraw(@NonNull Canvas canvas) {
-    int startX = getScrollX() + (iconLeftBitmaps == null ? 0 : (iconOuterWidth + iconPadding));
-    int endX = getScrollX() + (iconRightBitmaps == null ? getWidth() : getWidth() - iconOuterWidth - iconPadding);
+
+    int startX = getScrollX() + (iconLeftBitmaps == null ? 0 : (iconOuterWidth + iconPadding)) + getPaddingLeft();
+    int endX = getScrollX() + (iconRightBitmaps == null ? getWidth() : getWidth() - iconOuterWidth - iconPadding) - getPaddingRight();
     int lineStartY = getScrollY() + getHeight() - getPaddingBottom();
 
     // draw the icon(s)

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -1275,8 +1275,9 @@ private ObjectAnimator getBottomLinesAnimator(float destBottomLines) {
 
   @Override
   protected void onDraw(@NonNull Canvas canvas) {
-    int startX = getScrollX() + (iconLeftBitmaps == null ? 0 : (iconOuterWidth + iconPadding));
-    int endX = getScrollX() + (iconRightBitmaps == null ? getWidth() : getWidth() - iconOuterWidth - iconPadding);
+
+    int startX = getScrollX() + (iconLeftBitmaps == null ? 0 : (iconOuterWidth + iconPadding)) + getPaddingLeft();
+    int endX = getScrollX() + (iconRightBitmaps == null ? getWidth() : getWidth() - iconOuterWidth - iconPadding) - getPaddingRight();
     int lineStartY = getScrollY() + getHeight() - getPaddingBottom();
 
     // draw the icon(s)

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -1357,7 +1357,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     if (floatingLabelEnabled && !TextUtils.isEmpty(floatingLabelText)) {
       textPaint.setTextSize(floatingLabelTextSize);
       // calculate the text color
-      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
+      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction * (isEnabled() ? 1 : 0), floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
 
       // calculate the horizontal position
       float floatingLabelWidth = textPaint.measureText(floatingLabelText.toString());
@@ -1375,7 +1375,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int floatingLabelStartY = (int) (innerPaddingTop + floatingLabelTextSize + floatingLabelPadding - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction) + getScrollY());
 
       // calculate the alpha
-      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
+      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction * (isEnabled() ? 1 : 0) + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -1357,7 +1357,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     if (floatingLabelEnabled && !TextUtils.isEmpty(floatingLabelText)) {
       textPaint.setTextSize(floatingLabelTextSize);
       // calculate the text color
-      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
+      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction * (isEnabled() ? 1 : 0), floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
 
       // calculate the horizontal position
       float floatingLabelWidth = textPaint.measureText(floatingLabelText.toString());
@@ -1375,7 +1375,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int floatingLabelStartY = (int) (innerPaddingTop + floatingLabelTextSize + floatingLabelPadding - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction) + getScrollY());
 
       // calculate the alpha
-      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
+      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction * (isEnabled() ? 1 : 0) + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -1354,7 +1354,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     if (floatingLabelEnabled && !TextUtils.isEmpty(floatingLabelText)) {
       textPaint.setTextSize(floatingLabelTextSize);
       // calculate the text color
-      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
+      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction * (isEnabled() ? 1 : 0), floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
 
       // calculate the horizontal position
       float floatingLabelWidth = textPaint.measureText(floatingLabelText.toString());
@@ -1372,7 +1372,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int floatingLabelStartY = (int) (innerPaddingTop + floatingLabelTextSize + floatingLabelPadding - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction) + getScrollY());
 
       // calculate the alpha
-      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
+      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction * (isEnabled() ? 1 : 0) + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -1357,7 +1357,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     if (floatingLabelEnabled && !TextUtils.isEmpty(floatingLabelText)) {
       textPaint.setTextSize(floatingLabelTextSize);
       // calculate the text color
-      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
+      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction * (isEnabled() ? 1 : 0), floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
 
       // calculate the horizontal position
       float floatingLabelWidth = textPaint.measureText(floatingLabelText.toString());
@@ -1375,7 +1375,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int floatingLabelStartY = (int) (innerPaddingTop + floatingLabelTextSize + floatingLabelPadding - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction) + getScrollY());
 
       // calculate the alpha
-      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
+      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction * (isEnabled() ? 1 : 0) + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -1354,7 +1354,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     if (floatingLabelEnabled && !TextUtils.isEmpty(floatingLabelText)) {
       textPaint.setTextSize(floatingLabelTextSize);
       // calculate the text color
-      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
+      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction * (isEnabled() ? 1 : 0), floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
 
       // calculate the horizontal position
       float floatingLabelWidth = textPaint.measureText(floatingLabelText.toString());
@@ -1372,7 +1372,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int floatingLabelStartY = (int) (innerPaddingTop + floatingLabelTextSize + floatingLabelPadding - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction) + getScrollY());
 
       // calculate the alpha
-      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
+      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction * (isEnabled() ? 1 : 0) + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -1291,7 +1291,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     }
 
     // draw the clear button
-    if (hasFocus() && showClearButton && !TextUtils.isEmpty(getText())) {
+    if (hasFocus() && showClearButton && !TextUtils.isEmpty(getText()) && isEnabled()) {
       paint.setAlpha(255);
       int buttonLeft;
       if (isRTL()) {
@@ -1463,7 +1463,7 @@ public boolean onTouchEvent(MotionEvent event) {
       setSelection(0);
       return false;
     }
-    if (hasFocus() && showClearButton) {
+    if (hasFocus() && showClearButton && isEnabled()) {
       switch (event.getAction()) {
         case MotionEvent.ACTION_DOWN:
           if (insideClearButton(event)) {

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -1288,7 +1288,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     }
 
     // draw the clear button
-    if (hasFocus() && showClearButton && !TextUtils.isEmpty(getText())) {
+    if (hasFocus() && showClearButton && !TextUtils.isEmpty(getText()) && isEnabled()) {
       paint.setAlpha(255);
       int buttonLeft;
       if (isRTL()) {
@@ -1460,7 +1460,7 @@ public boolean onTouchEvent(MotionEvent event) {
       setSelection(0);
       return false;
     }
-    if (hasFocus() && showClearButton) {
+    if (hasFocus() && showClearButton && isEnabled()) {
       switch (event.getAction()) {
         case MotionEvent.ACTION_DOWN:
           if (insideClearButton(event)) {

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -1357,7 +1357,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     if (floatingLabelEnabled && !TextUtils.isEmpty(floatingLabelText)) {
       textPaint.setTextSize(floatingLabelTextSize);
       // calculate the text color
-      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
+      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction * (isEnabled() ? 1 : 0), floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
 
       // calculate the horizontal position
       float floatingLabelWidth = textPaint.measureText(floatingLabelText.toString());
@@ -1375,7 +1375,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int floatingLabelStartY = (int) (innerPaddingTop + floatingLabelTextSize + floatingLabelPadding - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction) + getScrollY());
 
       // calculate the alpha
-      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
+      int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction * (isEnabled() ? 1 : 0) + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -1469,8 +1469,8 @@ public boolean onTouchEvent(MotionEvent event) {
           if (insideClearButton(event)) {
             clearButtonTouched = true;
             clearButtonClicking = true;
+            return true;
           }
-          return true;
         case MotionEvent.ACTION_MOVE:
           if (clearButtonClicking && !insideClearButton(event)) {
             clearButtonClicking = false;

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -1469,8 +1469,8 @@ public boolean onTouchEvent(MotionEvent event) {
           if (insideClearButton(event)) {
             clearButtonTouched = true;
             clearButtonClicking = true;
+            return true;
           }
-          return true;
         case MotionEvent.ACTION_MOVE:
           if (clearButtonClicking && !insideClearButton(event)) {
             clearButtonClicking = false;

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -1466,8 +1466,8 @@ public boolean onTouchEvent(MotionEvent event) {
           if (insideClearButton(event)) {
             clearButtonTouched = true;
             clearButtonClicking = true;
+            return true;
           }
-          return true;
         case MotionEvent.ACTION_MOVE:
           if (clearButtonClicking && !insideClearButton(event)) {
             clearButtonClicking = false;

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -1371,16 +1371,15 @@ protected void onDraw(@NonNull Canvas canvas) {
       }
 
       // calculate the vertical position
-      int floatingLabelStartY = innerPaddingTop + floatingLabelTextSize + floatingLabelPadding;
       int distance = floatingLabelPadding;
-      int position = (int) (floatingLabelStartY - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction));
+      int floatingLabelStartY = (int) (innerPaddingTop + floatingLabelTextSize + floatingLabelPadding - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction) + getScrollY());
 
       // calculate the alpha
       int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label
-      canvas.drawText(floatingLabelText.toString(), floatingLabelStartX, position, textPaint);
+      canvas.drawText(floatingLabelText.toString(), floatingLabelStartX, floatingLabelStartY, textPaint);
     }
 
     // draw the bottom ellipsis

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -1371,16 +1371,15 @@ protected void onDraw(@NonNull Canvas canvas) {
       }
 
       // calculate the vertical position
-      int floatingLabelStartY = innerPaddingTop + floatingLabelTextSize + floatingLabelPadding;
       int distance = floatingLabelPadding;
-      int position = (int) (floatingLabelStartY - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction));
+      int floatingLabelStartY = (int) (innerPaddingTop + floatingLabelTextSize + floatingLabelPadding - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction) + getScrollY());
 
       // calculate the alpha
       int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label
-      canvas.drawText(floatingLabelText.toString(), floatingLabelStartX, position, textPaint);
+      canvas.drawText(floatingLabelText.toString(), floatingLabelStartX, floatingLabelStartY, textPaint);
     }
 
     // draw the bottom ellipsis

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -1368,16 +1368,15 @@ protected void onDraw(@NonNull Canvas canvas) {
       }
 
       // calculate the vertical position
-      int floatingLabelStartY = innerPaddingTop + floatingLabelTextSize + floatingLabelPadding;
       int distance = floatingLabelPadding;
-      int position = (int) (floatingLabelStartY - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction));
+      int floatingLabelStartY = (int) (innerPaddingTop + floatingLabelTextSize + floatingLabelPadding - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction) + getScrollY());
 
       // calculate the alpha
       int alpha = ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label
-      canvas.drawText(floatingLabelText.toString(), floatingLabelStartX, position, textPaint);
+      canvas.drawText(floatingLabelText.toString(), floatingLabelStartX, floatingLabelStartY, textPaint);
     }
 
     // draw the bottom ellipsis

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -1385,7 +1385,7 @@ protected void onDraw(@NonNull Canvas canvas) {
 
     // draw the bottom ellipsis
     if (hasFocus() && singleLineEllipsis && getScrollX() != 0) {
-      paint.setColor(primaryColor);
+      paint.setColor(isInternalValid() ? primaryColor : errorColor);
       float startY = lineStartY + bottomSpacing;
       int ellipsisStartX;
       if (isRTL()) {

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -1385,7 +1385,7 @@ protected void onDraw(@NonNull Canvas canvas) {
 
     // draw the bottom ellipsis
     if (hasFocus() && singleLineEllipsis && getScrollX() != 0) {
-      paint.setColor(primaryColor);
+      paint.setColor(isInternalValid() ? primaryColor : errorColor);
       float startY = lineStartY + bottomSpacing;
       int ellipsisStartX;
       if (isRTL()) {

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -1382,7 +1382,7 @@ protected void onDraw(@NonNull Canvas canvas) {
 
     // draw the bottom ellipsis
     if (hasFocus() && singleLineEllipsis && getScrollX() != 0) {
-      paint.setColor(primaryColor);
+      paint.setColor(isInternalValid() ? primaryColor : errorColor);
       float startY = lineStartY + bottomSpacing;
       int ellipsisStartX;
       if (isRTL()) {

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -1348,7 +1348,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int position = (int) (floatingLabelStartY - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction));
 
       // calculate the alpha
-      int alpha = (int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (floatingLabelTextColor != -1 ? 1 : (0.74f * focusFraction + 0.26f)));
+      int alpha = (int) ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -1348,7 +1348,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int position = (int) (floatingLabelStartY - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction));
 
       // calculate the alpha
-      int alpha = (int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (floatingLabelTextColor != -1 ? 1 : (0.74f * focusFraction + 0.26f)));
+      int alpha = (int) ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -1345,7 +1345,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int position = (int) (floatingLabelStartY - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction));
 
       // calculate the alpha
-      int alpha = (int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (floatingLabelTextColor != -1 ? 1 : (0.74f * focusFraction + 0.26f)));
+      int alpha = (int) ((int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f) * (floatingLabelTextColor != -1 ? 1 : Color.alpha(floatingLabelTextColor) / 256f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -1288,15 +1288,15 @@ protected void onDraw(@NonNull Canvas canvas) {
 
     // draw the characters counter
     if ((hasFocus() && hasCharatersCounter()) || !isCharactersCountValid()) {
-      textPaint.setColor(isCharactersCountValid() ? getCurrentHintTextColor() : errorColor);
+      textPaint.setColor(isCharactersCountValid() ? (baseColor & 0x00ffffff | 0x44000000) : errorColor);
       String charactersCounterText = getCharactersCounterText();
       canvas.drawText(charactersCounterText, isRTL() ? startX : endX - textPaint.measureText(charactersCounterText), lineStartY + bottomSpacing + relativeHeight, textPaint);
     }
 
     // draw the bottom text
     if (textLayout != null) {
       if (tempErrorText != null || ((helperTextAlwaysShown || hasFocus()) && !TextUtils.isEmpty(helperText))) { // error text or helper text
-        textPaint.setColor(tempErrorText != null ? errorColor : helperTextColor != -1 ? helperTextColor : getCurrentHintTextColor());
+        textPaint.setColor(tempErrorText != null ? errorColor : helperTextColor != -1 ? helperTextColor : (baseColor & 0x00ffffff | 0x44000000));
         canvas.save();
         canvas.translate(startX + getBottomTextLeftOffset(), lineStartY + bottomSpacing - bottomTextPadding);
         textLayout.draw(canvas);
@@ -1308,7 +1308,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     if (floatingLabelEnabled && !TextUtils.isEmpty(floatingLabelText)) {
       textPaint.setTextSize(floatingLabelTextSize);
       // calculate the text color
-      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : getCurrentHintTextColor(), primaryColor));
+      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
 
       // calculate the horizontal position
       float floatingLabelWidth = textPaint.measureText(floatingLabelText.toString());

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -1288,15 +1288,15 @@ protected void onDraw(@NonNull Canvas canvas) {
 
     // draw the characters counter
     if ((hasFocus() && hasCharatersCounter()) || !isCharactersCountValid()) {
-      textPaint.setColor(isCharactersCountValid() ? getCurrentHintTextColor() : errorColor);
+      textPaint.setColor(isCharactersCountValid() ? (baseColor & 0x00ffffff | 0x44000000) : errorColor);
       String charactersCounterText = getCharactersCounterText();
       canvas.drawText(charactersCounterText, isRTL() ? startX : endX - textPaint.measureText(charactersCounterText), lineStartY + bottomSpacing + relativeHeight, textPaint);
     }
 
     // draw the bottom text
     if (textLayout != null) {
       if (tempErrorText != null || ((helperTextAlwaysShown || hasFocus()) && !TextUtils.isEmpty(helperText))) { // error text or helper text
-        textPaint.setColor(tempErrorText != null ? errorColor : helperTextColor != -1 ? helperTextColor : getCurrentHintTextColor());
+        textPaint.setColor(tempErrorText != null ? errorColor : helperTextColor != -1 ? helperTextColor : (baseColor & 0x00ffffff | 0x44000000));
         canvas.save();
         canvas.translate(startX + getBottomTextLeftOffset(), lineStartY + bottomSpacing - bottomTextPadding);
         textLayout.draw(canvas);
@@ -1308,7 +1308,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     if (floatingLabelEnabled && !TextUtils.isEmpty(floatingLabelText)) {
       textPaint.setTextSize(floatingLabelTextSize);
       // calculate the text color
-      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : getCurrentHintTextColor(), primaryColor));
+      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
 
       // calculate the horizontal position
       float floatingLabelWidth = textPaint.measureText(floatingLabelText.toString());

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -1285,15 +1285,15 @@ protected void onDraw(@NonNull Canvas canvas) {
 
     // draw the characters counter
     if ((hasFocus() && hasCharatersCounter()) || !isCharactersCountValid()) {
-      textPaint.setColor(isCharactersCountValid() ? getCurrentHintTextColor() : errorColor);
+      textPaint.setColor(isCharactersCountValid() ? (baseColor & 0x00ffffff | 0x44000000) : errorColor);
       String charactersCounterText = getCharactersCounterText();
       canvas.drawText(charactersCounterText, isRTL() ? startX : endX - textPaint.measureText(charactersCounterText), lineStartY + bottomSpacing + relativeHeight, textPaint);
     }
 
     // draw the bottom text
     if (textLayout != null) {
       if (tempErrorText != null || ((helperTextAlwaysShown || hasFocus()) && !TextUtils.isEmpty(helperText))) { // error text or helper text
-        textPaint.setColor(tempErrorText != null ? errorColor : helperTextColor != -1 ? helperTextColor : getCurrentHintTextColor());
+        textPaint.setColor(tempErrorText != null ? errorColor : helperTextColor != -1 ? helperTextColor : (baseColor & 0x00ffffff | 0x44000000));
         canvas.save();
         canvas.translate(startX + getBottomTextLeftOffset(), lineStartY + bottomSpacing - bottomTextPadding);
         textLayout.draw(canvas);
@@ -1305,7 +1305,7 @@ protected void onDraw(@NonNull Canvas canvas) {
     if (floatingLabelEnabled && !TextUtils.isEmpty(floatingLabelText)) {
       textPaint.setTextSize(floatingLabelTextSize);
       // calculate the text color
-      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : getCurrentHintTextColor(), primaryColor));
+      textPaint.setColor((Integer) focusEvaluator.evaluate(focusFraction, floatingLabelTextColor != -1 ? floatingLabelTextColor : (baseColor & 0x00ffffff | 0x44000000), primaryColor));
 
       // calculate the horizontal position
       float floatingLabelWidth = textPaint.measureText(floatingLabelText.toString());

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -1327,7 +1327,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int position = (int) (floatingLabelStartY - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction));
 
       // calculate the alpha
-      int alpha = (int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f));
+      int alpha = (int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (floatingLabelTextColor != -1 ? 1 : (0.74f * focusFraction + 0.26f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -1327,7 +1327,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int position = (int) (floatingLabelStartY - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction));
 
       // calculate the alpha
-      int alpha = (int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f));
+      int alpha = (int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (floatingLabelTextColor != -1 ? 1 : (0.74f * focusFraction + 0.26f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -1324,7 +1324,7 @@ protected void onDraw(@NonNull Canvas canvas) {
       int position = (int) (floatingLabelStartY - distance * (floatingLabelAlwaysShown ? 1 : floatingLabelFraction));
 
       // calculate the alpha
-      int alpha = (int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (0.74f * focusFraction + 0.26f));
+      int alpha = (int) ((floatingLabelAlwaysShown ? 1 : floatingLabelFraction) * 0xff * (floatingLabelTextColor != -1 ? 1 : (0.74f * focusFraction + 0.26f)));
       textPaint.setAlpha(alpha);
 
       // draw the floating label

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -448,6 +448,7 @@ private void initText() {
     } else {
       resetHintTextColor();
     }
+    resetTextColor();
   }
 
   private void initTextWatcher() {

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -448,6 +448,7 @@ private void initText() {
     } else {
       resetHintTextColor();
     }
+    resetTextColor();
   }
 
   private void initTextWatcher() {

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -445,6 +445,7 @@ private void initText() {
     } else {
       resetHintTextColor();
     }
+    resetTextColor();
   }
 
   private void initTextWatcher() {

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -919,7 +919,9 @@ public void setMetTextColor(ColorStateList colors) {
   private void resetTextColor() {
     if (textColorStateList == null) {
       textColorStateList = new ColorStateList(new int[][]{new int[]{android.R.attr.state_enabled}, EMPTY_STATE_SET}, new int[]{baseColor & 0x00ffffff | 0xdf000000, baseColor & 0x00ffffff | 0x44000000});
-      super.setTextColor(textColorStateList);
+      setTextColor(textColorStateList);
+    } else {
+      setTextColor(textColorStateList);
     }
   }
 

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -920,6 +920,8 @@ private void resetTextColor() {
     if (textColorStateList == null) {
       textColorStateList = new ColorStateList(new int[][]{new int[]{android.R.attr.state_enabled}, EMPTY_STATE_SET}, new int[]{baseColor & 0x00ffffff | 0xdf000000, baseColor & 0x00ffffff | 0x44000000});
       setTextColor(textColorStateList);
+    } else {
+      setTextColor(textColorStateList);
     }
   }
 

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -916,7 +916,9 @@ public void setMetTextColor(ColorStateList colors) {
   private void resetTextColor() {
     if (textColorStateList == null) {
       textColorStateList = new ColorStateList(new int[][]{new int[]{android.R.attr.state_enabled}, EMPTY_STATE_SET}, new int[]{baseColor & 0x00ffffff | 0xdf000000, baseColor & 0x00ffffff | 0x44000000});
-      super.setTextColor(textColorStateList);
+      setTextColor(textColorStateList);
+    } else {
+      setTextColor(textColorStateList);
     }
   }
 

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -363,7 +363,7 @@ private void init(Context context, AttributeSet attrs) {
     autoValidate = typedArray.getBoolean(R.styleable.MaterialEditText_met_autoValidate, false);
     iconLeftBitmaps = generateIconBitmaps(typedArray.getResourceId(R.styleable.MaterialEditText_met_iconLeft, -1));
     iconRightBitmaps = generateIconBitmaps(typedArray.getResourceId(R.styleable.MaterialEditText_met_iconRight, -1));
-    iconPadding = typedArray.getDimensionPixelSize(R.styleable.MaterialEditText_met_iconPadding, getPixel(8));
+    iconPadding = typedArray.getDimensionPixelSize(R.styleable.MaterialEditText_met_iconPadding, getPixel(16));
     floatingLabelAlwaysShown = typedArray.getBoolean(R.styleable.MaterialEditText_met_floatingLabelAlwaysShown, false);
     helperTextAlwaysShown = typedArray.getBoolean(R.styleable.MaterialEditText_met_helperTextAlwaysShown, false);
     typedArray.recycle();

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -363,7 +363,7 @@ private void init(Context context, AttributeSet attrs) {
     autoValidate = typedArray.getBoolean(R.styleable.MaterialEditText_met_autoValidate, false);
     iconLeftBitmaps = generateIconBitmaps(typedArray.getResourceId(R.styleable.MaterialEditText_met_iconLeft, -1));
     iconRightBitmaps = generateIconBitmaps(typedArray.getResourceId(R.styleable.MaterialEditText_met_iconRight, -1));
-    iconPadding = typedArray.getDimensionPixelSize(R.styleable.MaterialEditText_met_iconPadding, getPixel(8));
+    iconPadding = typedArray.getDimensionPixelSize(R.styleable.MaterialEditText_met_iconPadding, getPixel(16));
     floatingLabelAlwaysShown = typedArray.getBoolean(R.styleable.MaterialEditText_met_floatingLabelAlwaysShown, false);
     helperTextAlwaysShown = typedArray.getBoolean(R.styleable.MaterialEditText_met_helperTextAlwaysShown, false);
     typedArray.recycle();

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -360,7 +360,7 @@ private void init(Context context, AttributeSet attrs) {
     autoValidate = typedArray.getBoolean(R.styleable.MaterialEditText_met_autoValidate, false);
     iconLeftBitmaps = generateIconBitmaps(typedArray.getResourceId(R.styleable.MaterialEditText_met_iconLeft, -1));
     iconRightBitmaps = generateIconBitmaps(typedArray.getResourceId(R.styleable.MaterialEditText_met_iconRight, -1));
-    iconPadding = typedArray.getDimensionPixelSize(R.styleable.MaterialEditText_met_iconPadding, getPixel(8));
+    iconPadding = typedArray.getDimensionPixelSize(R.styleable.MaterialEditText_met_iconPadding, getPixel(16));
     floatingLabelAlwaysShown = typedArray.getBoolean(R.styleable.MaterialEditText_met_floatingLabelAlwaysShown, false);
     helperTextAlwaysShown = typedArray.getBoolean(R.styleable.MaterialEditText_met_helperTextAlwaysShown, false);
     typedArray.recycle();

File: library/src/main/java/com/rengwuxian/materialedittext/Density.java
Patch:
@@ -11,6 +11,6 @@ class Density {
   public static int dp2px(Context context, float dp) {
     Resources r = context.getResources();
     float px = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, r.getDisplayMetrics());
-    return (int) px;
+    return Math.round(px);
   }
 }

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -775,9 +775,9 @@ public void onFocusChange(View v, boolean hasFocus) {
           } else {
             getLabelFocusAnimator().reverse();
           }
-          if (outerFocusChangeListener != null) {
-            outerFocusChangeListener.onFocusChange(v, hasFocus);
-          }
+        }
+        if (outerFocusChangeListener != null) {
+          outerFocusChangeListener.onFocusChange(v, hasFocus);
         }
       }
     };

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -995,7 +995,6 @@ private ObjectAnimator getBottomLinesAnimator(float destBottomLines) {
     if (bottomLinesAnimator == null) {
       bottomLinesAnimator = ObjectAnimator.ofFloat(this, "currentBottomLines", destBottomLines);
     } else {
-      bottomLinesAnimator.end();
       bottomLinesAnimator.setFloatValues(destBottomLines);
     }
     return bottomLinesAnimator;

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -986,7 +986,6 @@ private ObjectAnimator getBottomLinesAnimator(float destBottomLines) {
     if (bottomLinesAnimator == null) {
       bottomLinesAnimator = ObjectAnimator.ofFloat(this, "currentBottomLines", destBottomLines);
     } else {
-      bottomLinesAnimator.end();
       bottomLinesAnimator.setFloatValues(destBottomLines);
     }
     return bottomLinesAnimator;

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -631,10 +631,10 @@ private void adjustBottomLines() {
     int destBottomLines;
     textPaint.setTextSize(bottomTextSize);
     if (tempErrorText != null) {
-      textLayout = new StaticLayout(tempErrorText, textPaint, getWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
+      textLayout = new StaticLayout(tempErrorText, textPaint, getMeasuredWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
       destBottomLines = Math.max(textLayout.getLineCount(), minBottomTextLines);
     } else if (helperText != null) {
-      textLayout = new StaticLayout(helperText, textPaint, getWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
+      textLayout = new StaticLayout(helperText, textPaint, getMeasuredWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
       destBottomLines = Math.max(textLayout.getLineCount(), minBottomTextLines);
     } else {
       destBottomLines = minBottomLines;

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -631,10 +631,10 @@ private void adjustBottomLines() {
     int destBottomLines;
     textPaint.setTextSize(bottomTextSize);
     if (tempErrorText != null) {
-      textLayout = new StaticLayout(tempErrorText, textPaint, getWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
+      textLayout = new StaticLayout(tempErrorText, textPaint, getMeasuredWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
       destBottomLines = Math.max(textLayout.getLineCount(), minBottomTextLines);
     } else if (helperText != null) {
-      textLayout = new StaticLayout(helperText, textPaint, getWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
+      textLayout = new StaticLayout(helperText, textPaint, getMeasuredWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
       destBottomLines = Math.max(textLayout.getLineCount(), minBottomTextLines);
     } else {
       destBottomLines = minBottomLines;

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialMultiAutoCompleteTextView.java
Patch:
@@ -628,10 +628,10 @@ private void adjustBottomLines() {
     int destBottomLines;
     textPaint.setTextSize(bottomTextSize);
     if (tempErrorText != null) {
-      textLayout = new StaticLayout(tempErrorText, textPaint, getWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
+      textLayout = new StaticLayout(tempErrorText, textPaint, getMeasuredWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
       destBottomLines = Math.max(textLayout.getLineCount(), minBottomTextLines);
     } else if (helperText != null) {
-      textLayout = new StaticLayout(helperText, textPaint, getWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
+      textLayout = new StaticLayout(helperText, textPaint, getMeasuredWidth() - getBottomTextLeftOffset() - getBottomTextRightOffset() - getPaddingLeft() - getPaddingRight(), Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, true);
       destBottomLines = Math.max(textLayout.getLineCount(), minBottomTextLines);
     } else {
       destBottomLines = minBottomLines;

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -260,7 +260,7 @@ public MaterialAutoCompleteTextView(Context context, AttributeSet attrs, int sty
           context.getTheme().resolveAttribute(colorAccentId, primaryColorTypedValue, true);
           defaultPrimaryColor = primaryColorTypedValue.data;
         } else {
-          throw new RuntimeException("colorAccent not found");
+          throw new RuntimeException("colorPrimary not found");
         }
       } catch (Exception e1) {
         defaultPrimaryColor = baseColor;

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -260,7 +260,7 @@ public MaterialEditText(Context context, AttributeSet attrs, int style) {
           context.getTheme().resolveAttribute(colorAccentId, primaryColorTypedValue, true);
           defaultPrimaryColor = primaryColorTypedValue.data;
         } else {
-          throw new RuntimeException("colorAccent not found");
+          throw new RuntimeException("colorPrimary not found");
         }
       } catch (Exception e1) {
         defaultPrimaryColor = baseColor;

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -233,7 +233,6 @@ public MaterialAutoCompleteTextView(Context context, AttributeSet attrs, int sty
     bottomSpacing = getResources().getDimensionPixelSize(R.dimen.inner_components_spacing);
     bottomEllipsisSize = getResources().getDimensionPixelSize(R.dimen.bottom_ellipsis_height);
 
-
     // retrieve the default baseColor
     int defaultBaseColor;
     TypedValue baseColorTypedValue = new TypedValue();
@@ -278,7 +277,7 @@ public MaterialAutoCompleteTextView(Context context, AttributeSet attrs, int sty
     helperTextColor = typedArray.getColor(R.styleable.MaterialEditText_helperTextColor, -1);
     minBottomTextLines = typedArray.getInt(R.styleable.MaterialEditText_minBottomTextLines, 0);
     String fontPath = typedArray.getString(R.styleable.MaterialEditText_accentTypeface);
-    if (fontPath != null) {
+    if (fontPath != null && !isInEditMode()) {
       accentTypeface = getCustomTypeface(fontPath);
       textPaint.setTypeface(accentTypeface);
     }

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialAutoCompleteTextView.java
Patch:
@@ -274,6 +274,7 @@ public Typeface getAccentTypeface() {
     public void setAccentTypeface(Typeface accentTypeface) {
         this.accentTypeface = accentTypeface;
         this.paint.setTypeface(accentTypeface);
+        postInvalidate();
     }
 
     public CharSequence getFloatingLabelText() {

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -275,6 +275,7 @@ public Typeface getAccentTypeface() {
     public void setAccentTypeface(Typeface accentTypeface) {
         this.accentTypeface = accentTypeface;
         this.paint.setTypeface(accentTypeface);
+        postInvalidate();
     }
 
     public CharSequence getFloatingLabelText() {

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -325,7 +325,7 @@ private void setFloatingLabelInternal(int mode) {
 	}
 
 	public void setFloatingLabel(int mode) {
-		setFloatingLabel(mode);
+		setFloatingLabelInternal(mode);
 		postInvalidate();
 	}
 

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -325,7 +325,7 @@ private void setFloatingLabelInternal(int mode) {
 	}
 
 	public void setFloatingLabel(int mode) {
-		setFloatingLabel(mode);
+		setFloatingLabelInternal(mode);
 		postInvalidate();
 	}
 

File: library/src/main/java/com/rengwuxian/materialedittext/MaterialEditText.java
Patch:
@@ -10,6 +10,7 @@
 import android.text.Editable;
 import android.text.TextUtils;
 import android.text.TextWatcher;
+import android.text.method.TransformationMethod;
 import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.View;
@@ -157,7 +158,9 @@ public MaterialEditText(Context context, AttributeSet attrs, int style) {
 			setBackgroundDrawable(null);
 		}
 		if (singleLineEllipsis) {
+			TransformationMethod transformationMethod = getTransformationMethod();
 			setSingleLine();
+			setTransformationMethod(transformationMethod);
 		}
 		initPadding();
 		initText();

File: sample/src/main/java/com/rengwuxian/materialedittext/sample/MainActivity.java
Patch:
@@ -8,7 +8,7 @@
 
 
 public class MainActivity extends ActionBarActivity {
-	
+
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);

File: sample/src/main/java/com/rengwuxian/materialedittext/sample/MainActivity.java
Patch:
@@ -7,7 +7,7 @@
 
 
 public class MainActivity extends ActionBarActivity {
-
+	
 	@Override
 	protected void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);

