File: core/src/com/google/inject/spi/InjectionPoint.java
Patch:
@@ -245,6 +245,7 @@ public static InjectionPoint forConstructorOf(TypeLiteral<?> type) {
         Class<?> rawType = getRawType(type.getType());
         Errors errors = new Errors(rawType);
 
+        filter.reset();
         Constructor<?> injectableConstructor = null;
         if( filter.isWorthScanningForConstructors(Inject.class.getName(), rawType)) {
             for (Constructor<?> constructor : filter.getAllConstructors(Inject.class.getName(), rawType)) {

File: roboguice/src/main/java/roboguice/activity/RoboSplashActivity.java
Patch:
@@ -4,7 +4,6 @@
 
 import android.app.Activity;
 import android.app.Application;
-import android.os.Bundle;
 
 /**
  * An activity that can be used to display a splash page while initializing the
@@ -25,8 +24,8 @@ public abstract class RoboSplashActivity extends Activity {
     protected int minDisplayMs = (int) DEFAULT_SPLASH_DELAY_MS;
 
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
+    protected void onStart() {
+        super.onStart();
 
         final long start = System.currentTimeMillis();
 

File: roboguice/src/main/java/roboguice/activity/RoboSplashActivity.java
Patch:
@@ -4,7 +4,6 @@
 
 import android.app.Activity;
 import android.app.Application;
-import android.os.Bundle;
 
 /**
  * An activity that can be used to display a splash page while initializing the
@@ -25,8 +24,8 @@ public abstract class RoboSplashActivity extends Activity {
     protected int minDisplayMs = (int) DEFAULT_SPLASH_DELAY_MS;
 
     @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
+    protected void onStart() {
+        super.onStart();
 
         final long start = System.currentTimeMillis();
 

File: roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
Patch:
@@ -146,7 +146,8 @@ protected void configure() {
 
         // ContextSingleton bindings
         bindScope(ContextSingleton.class, contextScope);
-        bind(ContextScope.class).toInstance(contextScope);
+        //we need to super bind as we inject the scope by code only, not by annotations
+        superbind(ContextScope.class).toInstance(contextScope);
         bind(AssetManager.class).toProvider(AssetManagerProvider.class);
         bind(Context.class).toProvider(NullProvider.<Context>instance()).in(ContextSingleton.class);
         bind(Activity.class).toProvider(NullProvider.<Activity>instance()).in(ContextSingleton.class);

File: roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
Patch:
@@ -28,7 +28,7 @@
 
 @RunWith(RobolectricTestRunner.class)
 public class ViewInjectionTest {
-
+    
     @Test
     public void shouldInjectViewsIntoActivitiesAndViews() {
         final C activity = Robolectric.buildActivity(C.class).create().get();

File: roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
Patch:
@@ -120,7 +120,7 @@ public class DefaultRoboModule extends AbstractModule {
         mapSystemSericeClassToName.put(InputMethodManager.class, Context.INPUT_METHOD_SERVICE);
         mapSystemSericeClassToName.put(SensorManager.class, Context.SENSOR_SERVICE);
         mapSystemSericeClassToName.put(TelephonyManager.class, Context.TELEPHONY_SERVICE);
-        mapSystemSericeClassToName.put(AudioManager.class, Context.ACCESSIBILITY_SERVICE);
+        mapSystemSericeClassToName.put(AudioManager.class, Context.AUDIO_SERVICE);
     }
 
 

File: roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
Patch:
@@ -120,7 +120,7 @@ public class DefaultRoboModule extends AbstractModule {
         mapSystemSericeClassToName.put(InputMethodManager.class, Context.INPUT_METHOD_SERVICE);
         mapSystemSericeClassToName.put(SensorManager.class, Context.SENSOR_SERVICE);
         mapSystemSericeClassToName.put(TelephonyManager.class, Context.TELEPHONY_SERVICE);
-        mapSystemSericeClassToName.put(AudioManager.class, Context.ACCESSIBILITY_SERVICE);
+        mapSystemSericeClassToName.put(AudioManager.class, Context.AUDIO_SERVICE);
     }
 
 

File: roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
Patch:
@@ -173,7 +173,7 @@ protected void configure() {
         // Android Resources, Views and extras require special handling
         if( hasInjectionPointsForAnnotation(InjectResource.class) ) {
             bindListener(Matchers.any(), resourceListener);
-        }   
+        }
 
         if( hasInjectionPointsForAnnotation(InjectExtra.class) ) {
             final ExtrasListener extrasListener = new ExtrasListener(contextProvider);
@@ -226,7 +226,7 @@ private void bindDynamicBindings() {
             }
         }
     }
-    
+
     // ----------------------------------
     //  PROVIDER METHODS
     //  used for lazy bindings, when

File: roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
Patch:
@@ -178,9 +178,9 @@ protected void configure() {
         //should be bound only if we use InjectView or InjectFragment
         bindListener(Matchers.any(), viewListener);
 
+        final PreferenceListener preferenceListener = new PreferenceListener(contextProvider,application);
+        superBind(PreferenceListener.class).toInstance(preferenceListener);
         if( hasInjectionPointsForAnnotation(InjectPreference.class) ) {
-            final PreferenceListener preferenceListener = new PreferenceListener(contextProvider,application);
-            bind(PreferenceListener.class).toInstance(preferenceListener);
             bindListener(Matchers.any(), preferenceListener);
         }
 

File: roboguice/src/main/java/roboguice/RoboGuice.java
Patch:
@@ -14,6 +14,7 @@
 import roboguice.inject.ResourceListener;
 import roboguice.inject.RoboInjector;
 import roboguice.inject.ViewListener;
+import roboguice.util.Ln;
 import roboguice.util.Strings;
 
 import com.google.inject.AnnotationDatabaseNotFoundException;
@@ -315,7 +316,7 @@ public static void reset() {
                 Guice.setAnnotationDatabasePackageNames(null);
                 Guice.setHierarchyTraversalFilterFactory(new HierarchyTraversalFilterFactory());
             } catch (AnnotationDatabaseNotFoundException e) {
-                Log.e(RoboGuice.class.getName(), "Unable to clear annotation database.", e);
+                Ln.e(e, "Unable to clear annotation database.");
             }
         }
     }

File: additional-tests/src/test/java/roboguice/additionaltests/ConstructorModuleTest.java
Patch:
@@ -17,7 +17,7 @@ public void testShouldUseConstructorWithApplicationArgument() {
 		//GIVEN
 		Pojo instance = new Pojo();
 		//WHEN
-		RoboGuice.createBaseApplicationInjector(Robolectric.application).injectMembers(instance);
+		RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application).injectMembers(instance);
 		//THEN
 		//will only work if the TestModule could be loaded properly
 		assertThat( instance.getFoo(), notNullValue());

File: astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy1Test.java
Patch:
@@ -29,7 +29,7 @@ public class Astroboy1Test {
     public void setup() {
        RoboGuice.setUseAnnotationDatabases(false);
        context = Robolectric.buildActivity(RoboActivity.class).create().get();
-       astroboy = RoboGuice.getInjector(context).getInstance(Astroboy.class);
+       astroboy = RoboGuice.createInjector(context).getInstance(Astroboy.class);
     }
 
     @Test

File: astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy2Test.java
Patch:
@@ -50,7 +50,7 @@ public void teardown() {
     public void brushingTeethShouldCausePhoneToVibrate() {
 
         // get the astroboy instance
-        final Astroboy astroboy = RoboGuice.getInjector(context).getInstance(Astroboy.class);
+        final Astroboy astroboy = RoboGuice.createInjector(context).getInstance(Astroboy.class);
 
         // do the thing
         astroboy.brushTeeth();

File: astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy3Test.java
Patch:
@@ -40,7 +40,7 @@ public void teardown() {
     public void brushingTeethShouldCausePhoneToVibrate() {
 
         // get the astroboy instance
-        final Astroboy astroboy = RoboGuice.getInjector(Robolectric.application).getInstance(Astroboy.class);
+        final Astroboy astroboy = RoboGuice.createInjector(Robolectric.application).getInstance(Astroboy.class);
 
         // do the thing
         astroboy.brushTeeth();

File: roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
Patch:
@@ -67,7 +67,7 @@ public class RoboAccountAuthenticatorActivity extends AccountAuthenticatorActivi
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -142,7 +142,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboActionBarActivity.java
Patch:
@@ -82,7 +82,7 @@ public class RoboActionBarActivity extends ActionBarActivity implements RoboCont
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -157,7 +157,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onSupportContentChanged() {
         super.onSupportContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
Patch:
@@ -69,7 +69,7 @@ public class RoboActivityGroup extends ActivityGroup implements RoboContext {
     @Override
     @Deprecated
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -153,7 +153,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Deprecated
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java
Patch:
@@ -66,7 +66,7 @@ public class RoboExpandableListActivity extends ExpandableListActivity implement
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -141,7 +141,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboFragmentActivity.java
Patch:
@@ -57,7 +57,7 @@ public class RoboFragmentActivity extends FragmentActivity implements RoboContex
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -132,7 +132,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java
Patch:
@@ -67,7 +67,7 @@ public class RoboLauncherActivity extends LauncherActivity implements RoboContex
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -142,7 +142,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboListActivity.java
Patch:
@@ -67,7 +67,7 @@ public class RoboListActivity extends ListActivity implements RoboContext {
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -142,7 +142,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboMapActivity.java
Patch:
@@ -65,7 +65,7 @@ public abstract class RoboMapActivity extends MapActivity implements RoboContext
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -140,7 +140,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java
Patch:
@@ -77,7 +77,7 @@ public abstract class RoboPreferenceActivity extends PreferenceActivity implemen
     /** {@inheritDoc } */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         preferenceListener = injector.getInstance(PreferenceListener.class);
         injector.injectMembersWithoutViews(this);
@@ -96,7 +96,7 @@ protected void onSaveInstanceState(Bundle outState) {
     public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
         super.setPreferenceScreen(preferenceScreen);
 
-        final ContextScope scope = RoboGuice.getInjector(this).getInstance(ContextScope.class);
+        final ContextScope scope = RoboGuice.createInjector(this).getInstance(ContextScope.class);
         synchronized (ContextScope.class) {
             scope.enter(this);
             try {
@@ -169,7 +169,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboSherlockAccountAuthenticatorActivity.java
Patch:
@@ -63,7 +63,7 @@ public class RoboSherlockAccountAuthenticatorActivity extends SherlockAccountAut
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -132,7 +132,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboSherlockActivity.java
Patch:
@@ -60,7 +60,7 @@ public class RoboSherlockActivity extends SherlockActivity implements RoboContex
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -129,7 +129,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboSherlockFragmentActivity.java
Patch:
@@ -44,7 +44,7 @@ public class RoboSherlockFragmentActivity extends SherlockFragmentActivity imple
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -113,7 +113,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboSherlockListActivity.java
Patch:
@@ -60,7 +60,7 @@ public class RoboSherlockListActivity extends SherlockListActivity implements Ro
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -129,7 +129,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboSherlockPreferenceActivity.java
Patch:
@@ -64,7 +64,7 @@ public class RoboSherlockPreferenceActivity extends SherlockPreferenceActivity i
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         preferenceListener = injector.getInstance(PreferenceListener.class);
         injector.injectMembersWithoutViews(this);
@@ -77,7 +77,7 @@ protected void onCreate(Bundle savedInstanceState) {
     public void setPreferenceScreen(PreferenceScreen preferenceScreen) {
         super.setPreferenceScreen(preferenceScreen);
 
-        final ContextScope scope = RoboGuice.getInjector(this).getInstance(ContextScope.class);
+        final ContextScope scope = RoboGuice.createInjector(this).getInstance(ContextScope.class);
         synchronized (ContextScope.class) {
             scope.enter(this);
             try {
@@ -150,7 +150,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Override
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboSplashActivity.java
Patch:
@@ -36,7 +36,7 @@ public void run() {
                 // Set the execution context for this thread in case the user
                 // want to use the injector
                 final Application app = getApplication();
-                RoboGuice.createBaseApplicationInjector(getApplication());
+                RoboGuice.getOrCreateBaseApplicationInjector(getApplication());
 
 
                 doStuffInBackground(app);

File: roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
Patch:
@@ -69,7 +69,7 @@ public class RoboTabActivity extends TabActivity implements RoboContext {
     @Override
     @Deprecated
     protected void onCreate(Bundle savedInstanceState) {
-        final RoboInjector injector = RoboGuice.getInjector(this);
+        final RoboInjector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembersWithoutViews(this);
         super.onCreate(savedInstanceState);
@@ -153,7 +153,7 @@ public void onConfigurationChanged(Configuration newConfig) {
     @Deprecated
     public void onContentChanged() {
         super.onContentChanged();
-        RoboGuice.getInjector(this).injectViewMembers(this);
+        RoboGuice.createInjector(this).injectViewMembers(this);
         eventManager.fire(new OnContentChangedEvent(this));
     }
 

File: roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
Patch:
@@ -82,7 +82,7 @@
  * RoboGuice.setAppliationInjector( app, RoboGuice.DEFAULT_STAGE, Modules.override(RoboGuice.newDefaultRoboModule(app)).with(new MyModule() );
  *
  * @see com.google.inject.util.Modules#override(com.google.inject.Module...)
- * @see roboguice.RoboGuice#createBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
+ * @see roboguice.RoboGuice#getOrCreateBaseApplicationInjector(android.app.Application, com.google.inject.Stage, com.google.inject.Module...)
  * @see roboguice.RoboGuice#newDefaultRoboModule(android.app.Application)
  * @see roboguice.RoboGuice#DEFAULT_STAGE
  *

File: roboguice/src/main/java/roboguice/content/RoboContentProvider.java
Patch:
@@ -14,7 +14,7 @@ public abstract class RoboContentProvider extends ContentProvider {
 
     @Override
     public boolean onCreate() {
-        RoboGuice.getInjector(getContext()).injectMembers(this);
+        RoboGuice.createInjector(getContext()).injectMembers(this);
         return true;
     }
 }

File: roboguice/src/main/java/roboguice/fragment/RoboDialogFragment.java
Patch:
@@ -15,12 +15,12 @@ public abstract class RoboDialogFragment extends DialogFragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }

File: roboguice/src/main/java/roboguice/fragment/RoboFragment.java
Patch:
@@ -15,12 +15,12 @@ public abstract class RoboFragment extends Fragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }

File: roboguice/src/main/java/roboguice/fragment/RoboListFragment.java
Patch:
@@ -15,12 +15,12 @@ public abstract class RoboListFragment extends ListFragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }

File: roboguice/src/main/java/roboguice/fragment/RoboSherlockDialogFragment.java
Patch:
@@ -16,12 +16,12 @@ public abstract class RoboSherlockDialogFragment extends SherlockDialogFragment
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }

File: roboguice/src/main/java/roboguice/fragment/RoboSherlockFragment.java
Patch:
@@ -16,12 +16,12 @@ public abstract class RoboSherlockFragment extends SherlockFragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }

File: roboguice/src/main/java/roboguice/fragment/RoboSherlockListFragment.java
Patch:
@@ -16,12 +16,12 @@ public abstract class RoboSherlockListFragment extends SherlockListFragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }

File: roboguice/src/main/java/roboguice/fragment/provided/RoboDialogFragment.java
Patch:
@@ -18,12 +18,12 @@ public abstract class RoboDialogFragment extends DialogFragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }

File: roboguice/src/main/java/roboguice/fragment/provided/RoboFragment.java
Patch:
@@ -18,12 +18,12 @@ public abstract class RoboFragment extends Fragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }

File: roboguice/src/main/java/roboguice/fragment/provided/RoboListFragment.java
Patch:
@@ -18,12 +18,12 @@ public abstract class RoboListFragment extends ListFragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }

File: roboguice/src/main/java/roboguice/fragment/provided/RoboPreferenceFragment.java
Patch:
@@ -18,12 +18,12 @@ public abstract class RoboPreferenceFragment extends PreferenceFragment {
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectMembersWithoutViews(this);
+        RoboGuice.createInjector(getActivity()).injectMembersWithoutViews(this);
     }
 
     @Override
     public void onViewCreated(View view, Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        RoboGuice.getInjector(getActivity()).injectViewMembers(this);
+        RoboGuice.createInjector(getActivity()).injectViewMembers(this);
     }
 }

File: roboguice/src/main/java/roboguice/inject/ExtrasListener.java
Patch:
@@ -61,7 +61,7 @@ public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter)
         }
         Class<?> c = typeLiteral.getRawType();
         while( isWorthScanning(c)) {
-            Set<Field> allFields = null;
+            final Set<Field> allFields;
             try {
                 allFields = filter.getAllFields(InjectExtra.class.getName(), c);
             } catch (AnnotationFieldNotFoundException e) {
@@ -124,7 +124,7 @@ public void injectMembers(T instance) {
 
             value = extras.get(id);
 
-            value = convert(field, value, RoboGuice.createBaseApplicationInjector(activity.getApplication()));
+            value = convert(field, value, RoboGuice.getOrCreateBaseApplicationInjector(activity.getApplication()));
 
             /*
              * Please notice : null checking is done AFTER conversion. Having

File: roboguice/src/main/java/roboguice/inject/PreferenceListener.java
Patch:
@@ -59,7 +59,7 @@ public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter)
         }
         Class<?> c = typeLiteral.getRawType();
         while (isWorthScanning(c)) {
-            Set<Field> allFields = null;
+            final Set<Field> allFields;
             try {
                 allFields = filter.getAllFields(InjectPreference.class.getName(), c);
             } catch (AnnotationFieldNotFoundException e) {

File: roboguice/src/main/java/roboguice/receiver/RoboAppWidgetProvider.java
Patch:
@@ -13,7 +13,7 @@ public abstract class RoboAppWidgetProvider extends AppWidgetProvider {
 
     @Override
     public final void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {
-        final Injector injector = RoboGuice.createBaseApplicationInjector((Application) context.getApplicationContext());
+        final Injector injector = RoboGuice.getOrCreateBaseApplicationInjector((Application) context.getApplicationContext());
 
         injector.injectMembers(this);
         onHandleUpdate(context, appWidgetManager, appWidgetIds);

File: roboguice/src/main/java/roboguice/receiver/RoboBroadcastReceiver.java
Patch:
@@ -19,7 +19,7 @@ public abstract class RoboBroadcastReceiver extends BroadcastReceiver {
      */
     @Override
     public final void onReceive(Context context, Intent intent) {
-        RoboGuice.createBaseApplicationInjector((Application) context.getApplicationContext()).injectMembers(this);
+        RoboGuice.getOrCreateBaseApplicationInjector((Application) context.getApplicationContext()).injectMembers(this);
         handleReceive(context, intent);
     }
 

File: roboguice/src/main/java/roboguice/service/RoboIntentService.java
Patch:
@@ -50,7 +50,7 @@ public RoboIntentService(String name) {
 
     @Override
     public void onCreate() {
-        final Injector injector = RoboGuice.getInjector(this);
+        final Injector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();

File: roboguice/src/main/java/roboguice/service/RoboService.java
Patch:
@@ -52,7 +52,7 @@ public abstract class RoboService extends Service implements RoboContext {
 
     @Override
     public void onCreate() {
-        final Injector injector = RoboGuice.getInjector(this);
+        final Injector injector = RoboGuice.createInjector(this);
         eventManager = injector.getInstance(EventManager.class);
         injector.injectMembers(this);
         super.onCreate();

File: roboguice/src/test/java/roboguice/RoboGuiceTest.java
Patch:
@@ -27,7 +27,7 @@ public void setup() {
     @Test
     public void destroyInjectorShouldRemoveContext() {
         final Activity activity = Robolectric.buildActivity(RoboActivity.class).get();
-        RoboGuice.getInjector(activity);
+        RoboGuice.createInjector(activity);
 
         assertThat(RoboGuice.injectors.size(), equalTo(1));
 
@@ -41,7 +41,7 @@ public void destroyInjectorShouldRemoveContext() {
     @Test
     public void resetShouldRemoveContext() {
         final Activity activity = Robolectric.buildActivity(RoboActivity.class).get();
-        RoboGuice.getInjector(activity);
+        RoboGuice.createInjector(activity);
 
         assertThat(RoboGuice.injectors.size(), equalTo(1));
 
@@ -53,7 +53,7 @@ public void resetShouldRemoveContext() {
     @Test
     public void shouldOnlyCallConfigureOnce() {
         final int[] i = {0};
-        RoboGuice.createBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new AbstractModule() {
+        RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new AbstractModule() {
             @Override
             protected void configure() {
                 ++i[0];

File: roboguice/src/test/java/roboguice/application/ApplicationInjectionTest.java
Patch:
@@ -55,7 +55,7 @@ public static class AppA extends Application {
         @Override
         public void onCreate() {
             super.onCreate();
-            RoboGuice.getInjector(this).injectMembers(this);
+            RoboGuice.createInjector(this).injectMembers(this);
         }
 
         @Override
@@ -76,7 +76,7 @@ public static class AppB extends Application {
         @Override
         public void onCreate() {
             super.onCreate();
-            RoboGuice.getInjector(this).injectMembers(this);
+            RoboGuice.createInjector(this).injectMembers(this);
         }
 
         @Override

File: roboguice/src/test/java/roboguice/event/ObservesTypeListenerTest.java
Patch:
@@ -31,7 +31,7 @@ public class ObservesTypeListenerTest {
 
     @Before
     public void setup() throws NoSuchMethodException {
-        injector = RoboGuice.getInjector(Robolectric.application);
+        injector = RoboGuice.createInjector(Robolectric.application);
 
         eventManager = injector.getInstance(EventManager.class);
 

File: roboguice/src/test/java/roboguice/inject/ContextScopeTest.java
Patch:
@@ -41,7 +41,7 @@ public void shouldHaveContextInScopeMapAfterOnCreate() throws Exception {
 
     @Test
     public void shouldBeAbleToOpenMultipleScopes() {
-        final ContextScope scope = RoboGuice.createBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
+        final ContextScope scope = RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
         final Activity a = Robolectric.buildActivity(A.class).get();
         final Activity b = Robolectric.buildActivity(B.class).get();
 
@@ -53,7 +53,7 @@ public void shouldBeAbleToOpenMultipleScopes() {
 
     @Test(expected = IllegalArgumentException.class)
     public void shouldNotBeAbleToExitTheWrongScope() {
-        final ContextScope scope = RoboGuice.createBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
+        final ContextScope scope = RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application).getInstance(ContextScope.class);
         final Activity a = Robolectric.buildActivity(A.class).get();
         final Activity b = Robolectric.buildActivity(B.class).get();
 

File: roboguice/src/test/java/roboguice/inject/SharedPreferencesProviderTest.java
Patch:
@@ -42,7 +42,7 @@ public void shouldInjectDefaultSharedPrefs() throws Exception {
 
     @Test
     public void shouldInjectNamedSharedPrefs() throws Exception {
-        RoboGuice.createBaseApplicationInjector(Robolectric.application,RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application,RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
         try {
 
             final A a = Robolectric.buildActivity(A.class).create().get();
@@ -79,7 +79,7 @@ public void shouldFallbackOnOldDefaultIfPresent() throws Exception {
 
     @Test
     public void shouldNotFallbackOnOldDefaultIfNamedFileSpecified() throws Exception {
-        RoboGuice.createBaseApplicationInjector(Robolectric.application,RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
+        RoboGuice.getOrCreateBaseApplicationInjector(Robolectric.application,RoboGuice.DEFAULT_STAGE, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA() );
 
         final File oldDefault = new File("shared_prefs/default.xml");
         final File oldDir = new File("shared_prefs");

File: roboguice/src/test/java/roboguice/view/ViewInjectionTest.java
Patch:
@@ -157,8 +157,8 @@ public ViewA(Context context) {
                 ref.setId(101);
                 addView(ref);
 
-                RoboGuice.getInjector(getContext()).injectMembers(this);
-                RoboGuice.getInjector(getContext()).injectViewMembers(this);
+                RoboGuice.createInjector(getContext()).injectMembers(this);
+                RoboGuice.createInjector(getContext()).injectViewMembers(this);
             }
 
         }
@@ -193,7 +193,7 @@ public ViewA(Context context) {
                 ref.setTag("101");
                 addView(ref);
 
-                RoboGuice.getInjector(getContext()).injectMembers(this);
+                RoboGuice.createInjector(getContext()).injectMembers(this);
             }
 
         }

File: additional-tests/src/main/java/roboguice/additionaltests/Foo.java
Patch:
@@ -0,0 +1,3 @@
+package roboguice.additionaltests;
+
+interface Foo {}
\ No newline at end of file

File: additional-tests/src/main/java/roboguice/additionaltests/FooImpl.java
Patch:
@@ -0,0 +1,3 @@
+package roboguice.additionaltests;
+
+class FooImpl implements Foo {}
\ No newline at end of file

File: additional-tests/src/test/java/roboguice/additionaltests/ViewInjectionTest.java
Patch:
@@ -1,14 +1,15 @@
 package roboguice.additionaltests;
 
 import android.content.Context;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
+
 import roboguice.activity.RoboActivity;
 import roboguice.additionaltests.view.ShouldInjectCustomViewsView;
 import roboguice.inject.ContentView;
-
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.junit.Assert.assertThat;
 

File: roboguice/src/main/java/roboguice/RoboGuice.java
Patch:
@@ -113,7 +113,7 @@ public static Injector setBaseApplicationInjector(Application application, Stage
                     if( Strings.notEmpty(name)) {
                         final Class<? extends Module> clazz = Class.forName(name).asSubclass(Module.class);
                         try {
-                            modules.add(clazz.getDeclaredConstructor(Context.class).newInstance(application));
+                            modules.add(clazz.getDeclaredConstructor(Application.class).newInstance(application));
                         } catch( NoSuchMethodException ignored ) {
                             modules.add( clazz.newInstance() );
                         }

File: roboguice/src/main/java/roboguice/receiver/RoboBroadcastReceiver.java
Patch:
@@ -8,14 +8,15 @@
 import android.content.Intent;
 
 /**
- * To ensure proper ContextScope usage, override the handleReceive method
+ * To ensure proper ContextScope usage, override the handleReceive method.
  */
 public abstract class RoboBroadcastReceiver extends BroadcastReceiver {
 
     /** Handles the receive event.  This method should not be overridden, instead override
      * the handleReceive method to ensure that the proper ContextScope is maintained.
      * @param context
      * @param intent
+     * @see #handleReceive(Context, Intent)
      */
     @Override
     public final void onReceive(Context context, Intent intent) {

File: roboguice/src/main/java/roboguice/RoboGuice.java
Patch:
@@ -36,10 +36,9 @@
  * BUG hashmap should also key off of stage and modules list
  */
 public final class RoboGuice {
-    //CHECKSTYLE:OFF
     @edu.umd.cs.findbugs.annotations.SuppressWarnings("MS_SHOULD_BE_FINAL")
+    @SuppressWarnings({"checkstyle:visibilitymodifier","checkstyle:staticvariablename"})
     public static Stage DEFAULT_STAGE = Stage.PRODUCTION;
-    //CHECKSTYLE:ON
 
     @edu.umd.cs.findbugs.annotations.SuppressWarnings(value="MS_SHOULD_BE_FINAL")
     protected static WeakHashMap<Application,Injector> injectors = new WeakHashMap<Application,Injector>();

File: roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java
Patch:
@@ -22,7 +22,7 @@ public class AndroidCallableWrapper<ResultT> implements Runnable {
     protected AndroidCallableI<ResultT> delegate;
     protected StackTraceElement[] launchLocation;
 
-    @SuppressWarnings()
+    @SuppressWarnings("MALICIOUS_CODE")
     public AndroidCallableWrapper(Handler handler, AndroidCallableI<ResultT> delegate, StackTraceElement[] launchLocation ) {
         this.delegate = delegate;
         this.launchLocation = launchLocation;

File: roboguice/src/main/java/roboguice/util/LnImpl.java
Patch:
@@ -29,7 +29,7 @@ public LnImpl(Application context) {
         } catch( Exception e ) {
             try {
                 Log.e(packageName, "Error configuring logger", e);
-            } catch( RuntimeException f ) {
+            } catch( RuntimeException f ) { // NOPMD - Legal empty catch block 
                 // HACK ignore Stub! errors in mock objects during testing
             }
         }

File: roboguice/src/main/java/roboguice/inject/ResourceListener.java
Patch:
@@ -120,7 +120,7 @@ public void injectMembers(T instance) {
 
         protected int getId(Resources resources, InjectResource annotation) {
             int id = annotation.value();
-            return id>=0 ? id : resources.getIdentifier(annotation.name(),null,null);
+            return id>=0 ? id : resources.getIdentifier(annotation.name(),null,application.getPackageName());
         }
     }
 }

File: roboguice/src/main/java/roboguice/inject/ResourceListener.java
Patch:
@@ -120,7 +120,7 @@ public void injectMembers(T instance) {
 
         protected int getId(Resources resources, InjectResource annotation) {
             int id = annotation.value();
-            return id>=0 ? id : resources.getIdentifier(annotation.name(),null,null);
+            return id>=0 ? id : resources.getIdentifier(annotation.name(),null,application.getPackageName());
         }
     }
 }

File: astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy2Test.java
Patch:
@@ -36,7 +36,7 @@ public void setup() {
     @After
     public void teardown() {
         // Don't forget to tear down our custom injector to avoid polluting other test classes
-        RoboGuice.util.reset();
+        RoboGuice.Util.reset();
     }
     
     @Test

File: roboguice/src/main/java/roboguice/activity/SherlockAccountAuthenticatorActivity.java
Patch:
@@ -16,10 +16,11 @@
 
 package roboguice.activity;
 
+import com.actionbarsherlock.app.SherlockActivity;
+
 import android.accounts.AccountAuthenticatorResponse;
 import android.accounts.AccountManager;
 import android.os.Bundle;
-import com.actionbarsherlock.app.SherlockActivity;
 
 /**
  * Base class for implementing an Activity that is used to help implement an

File: roboguice/src/main/java/roboguice/activity/event/OnContentChangedEvent.java
Patch:
@@ -12,9 +12,10 @@ public class OnContentChangedEvent {
     protected Activity activity;
 
     public OnContentChangedEvent(Activity activity) {
+        this.activity = activity;
     }
 
     public Activity getActivity() {
         return activity;
     }
-}
\ No newline at end of file
+}

File: roboguice/src/main/java/roboguice/activity/event/OnNewIntentEvent.java
Patch:
@@ -18,4 +18,4 @@ public OnNewIntentEvent(Activity activity) {
     public Activity getActivity() {
         return activity;
     }
-}
\ No newline at end of file
+}

File: roboguice/src/main/java/roboguice/activity/event/OnPauseEvent.java
Patch:
@@ -18,4 +18,4 @@ public OnPauseEvent(Activity activity) {
     public Activity getActivity() {
         return activity;
     }
-}
\ No newline at end of file
+}

File: roboguice/src/main/java/roboguice/activity/event/OnResumeEvent.java
Patch:
@@ -18,4 +18,4 @@ public OnResumeEvent(Activity activity) {
     public Activity getActivity() {
         return activity;
     }
-}
\ No newline at end of file
+}

File: roboguice/src/main/java/roboguice/activity/event/OnSaveInstanceStateEvent.java
Patch:
@@ -14,8 +14,8 @@ public OnSaveInstanceStateEvent(Activity activity, Bundle savedInstanceState) {
     }
 
     public Bundle getSavedInstanceState() {
-            return savedInstanceState;
-        }
+        return savedInstanceState;
+    }
 
     public Activity getActivity() {
         return activity;

File: roboguice/src/main/java/roboguice/activity/event/OnStopEvent.java
Patch:
@@ -18,4 +18,4 @@ public OnStopEvent(Activity activity) {
     public Activity getActivity() {
         return activity;
     }
-}
\ No newline at end of file
+}

File: roboguice/src/main/java/roboguice/adapter/IterableAdapter.java
Patch:
@@ -1,11 +1,11 @@
 package roboguice.adapter;
 
-import android.content.Context;
-import android.widget.ArrayAdapter;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import android.content.Context;
+import android.widget.ArrayAdapter;
+
 public class IterableAdapter<T> extends ArrayAdapter<T> {
 
     public IterableAdapter(Context context, int resource, int textViewResourceId) {

File: roboguice/src/main/java/roboguice/context/event/OnDestroyEvent.java
Patch:
@@ -18,4 +18,4 @@ public OnDestroyEvent(T context) {
     public T getContext() {
         return context;
     }
-}
\ No newline at end of file
+}

File: roboguice/src/main/java/roboguice/event/EventListener.java
Patch:
@@ -15,5 +15,5 @@ public interface EventListener<T> {
      * 
      * @param event fired
      */
-    public void onEvent(T event);
+    void onEvent(T event);
 }

File: roboguice/src/main/java/roboguice/event/Observes.java
Patch:
@@ -1,11 +1,11 @@
 package roboguice.event;
 
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
 /**
  * Parameter annotation to bind a given method and parameter to an event raised through the
  * EventManager.fire() method.

File: roboguice/src/main/java/roboguice/event/ObservesTypeListener.java
Patch:
@@ -1,5 +1,8 @@
 package roboguice.event;
 
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+
 import roboguice.event.eventListener.ObserverMethodListener;
 import roboguice.event.eventListener.factory.EventListenerThreadingDecorator;
 
@@ -9,9 +12,6 @@
 import com.google.inject.spi.TypeEncounter;
 import com.google.inject.spi.TypeListener;
 
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Method;
-
 /**
  * Guice driven type listener which scans for the @Observes annotations.
  * Registers these methods with the EventManager.

File: roboguice/src/main/java/roboguice/event/eventListener/AsynchronousEventListenerDecorator.java
Patch:
@@ -9,7 +9,7 @@
  *
  * @author John Ericksen
  */
-public class AsynchronousEventListenerDecorator<T> implements EventListener<T>{
+public class AsynchronousEventListenerDecorator<T> implements EventListener<T> {
 
     protected EventListener<T> eventListener;
     protected Handler handler;

File: roboguice/src/main/java/roboguice/event/eventListener/factory/EventListenerThreadingDecorator.java
Patch:
@@ -5,11 +5,11 @@
 import roboguice.event.eventListener.AsynchronousEventListenerDecorator;
 import roboguice.event.eventListener.UIThreadEventListenerDecorator;
 
-import android.os.Handler;
-
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 
+import android.os.Handler;
+
 /**
  * @author John Ericksen
  */

File: roboguice/src/main/java/roboguice/inject/AccountManagerProvider.java
Patch:
@@ -1,10 +1,11 @@
 package roboguice.inject;
 
-import android.accounts.AccountManager;
-import android.content.Context;
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 
+import android.accounts.AccountManager;
+import android.content.Context;
+
 @ContextSingleton
 public class AccountManagerProvider implements Provider<AccountManager> {
     @Inject protected Context context;

File: roboguice/src/main/java/roboguice/inject/AssetManagerProvider.java
Patch:
@@ -1,11 +1,11 @@
 package roboguice.inject;
 
-import android.content.Context;
-import android.content.res.AssetManager;
-
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 
+import android.content.Context;
+import android.content.res.AssetManager;
+
 public class AssetManagerProvider implements Provider<AssetManager> {
     @Inject protected Context context;
 

File: roboguice/src/main/java/roboguice/inject/ContentView.java
Patch:
@@ -1,12 +1,12 @@
 package roboguice.inject;
 
-import com.google.inject.BindingAnnotation;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
+import com.google.inject.BindingAnnotation;
 
 @Retention(RUNTIME)
 @Target( { ElementType.TYPE })

File: roboguice/src/main/java/roboguice/inject/ContentViewListener.java
Patch:
@@ -3,11 +3,11 @@
 import roboguice.context.event.OnCreateEvent;
 import roboguice.event.Observes;
 
+import com.google.inject.Inject;
+
 import android.app.Activity;
 import android.content.Context;
 
-import com.google.inject.Inject;
-
 @SuppressWarnings("UnusedParameters")
 @ContextSingleton
 public class ContentViewListener {

File: roboguice/src/main/java/roboguice/inject/ContextScopedProvider.java
Patch:
@@ -1,10 +1,10 @@
 package roboguice.inject;
 
-import android.content.Context;
-
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 
+import android.content.Context;
+
 
 public class ContextScopedProvider<T> {
     @Inject protected ContextScope scope;

File: roboguice/src/main/java/roboguice/inject/ContextScopedSystemServiceProvider.java
Patch:
@@ -6,7 +6,7 @@
  * You may obtain a copy of the License at
  * 
  *   http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -15,10 +15,10 @@
  */
 package roboguice.inject;
 
-import android.content.Context;
-
 import com.google.inject.Provider;
 
+import android.content.Context;
+
 public class ContextScopedSystemServiceProvider<T> implements Provider<T> {
 
     protected Provider<Context> contextProvider;

File: roboguice/src/main/java/roboguice/inject/ExtraConverter.java
Patch:
@@ -15,6 +15,8 @@
  */
 package roboguice.inject;
 
+import roboguice.inject.ExtrasListener.ExtrasMembersInjector;
+
 import com.google.inject.Injector;
 import com.google.inject.Singleton;
 
@@ -48,7 +50,7 @@
 public interface ExtraConverter<FROM, TO> {
     /**
      * Converts an instance of FROM to an instances of TO. May return null.
-     * 
+     *
      * @param from
      *            The extra value to be converted.
      * @return The converted object that will be injected.

File: roboguice/src/main/java/roboguice/inject/HandlerProvider.java
Patch:
@@ -1,10 +1,10 @@
 package roboguice.inject;
 
+import com.google.inject.Provider;
+
 import android.os.Handler;
 import android.os.Looper;
 
-import com.google.inject.Provider;
-
 public class HandlerProvider implements Provider<Handler> {
     @Override
     public Handler get() {

File: roboguice/src/main/java/roboguice/inject/InjectExtra.java
Patch:
@@ -6,7 +6,7 @@
  * You may obtain a copy of the License at
  * 
  *   http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -41,11 +41,11 @@
  * However, it is nonsense to inject a default value in Java if the extra is
  * not optional : {@code @InjectExtra("someValue") Integer someValue = 2; // DO
  * NOT DO THIS}
- * 
+ *
  * <br />
  * Usage example:<br /> {@code @InjectExtra("someValue") protected Integer someValue;}<br />
  * <br />{@code @InjectExtra("someValue") @Nullable protected Integer someValue;}
- * 
+ *
  * @author Mike Burton
  */
 @Retention(RUNTIME)

File: roboguice/src/main/java/roboguice/inject/InjectFragment.java
Patch:
@@ -15,13 +15,13 @@
  */
 package roboguice.inject;
 
-import com.google.inject.BindingAnnotation;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
+import com.google.inject.BindingAnnotation;
 
 /**
  * Indicates that a variable member of a class should be

File: roboguice/src/main/java/roboguice/inject/InjectResource.java
Patch:
@@ -6,7 +6,7 @@
  * You may obtain a copy of the License at
  * 
  *   http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -15,13 +15,13 @@
  */
 package roboguice.inject;
 
-import com.google.inject.BindingAnnotation;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
+import com.google.inject.BindingAnnotation;
 
 /**
  * Indicates that a variable member of a class (whether static or not) should be

File: roboguice/src/main/java/roboguice/inject/InjectView.java
Patch:
@@ -15,13 +15,13 @@
  */
 package roboguice.inject;
 
-import com.google.inject.BindingAnnotation;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
+import com.google.inject.BindingAnnotation;
 
 /**
  * Indicates that a variable member of a class (whether static or not) should be

File: roboguice/src/main/java/roboguice/inject/Nullable.java
Patch:
@@ -1,11 +1,11 @@
 package roboguice.inject;
 
-import roboguice.util.Strings;
-
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Field;
 
-public class Nullable {
+import roboguice.util.Strings;
+
+public final class Nullable {
     private Nullable() {
     }
     

File: roboguice/src/main/java/roboguice/inject/ResourceFactory.java
Patch:
@@ -6,7 +6,7 @@
  * the License at
  * 
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
@@ -16,7 +16,7 @@
 package roboguice.inject;
 
 /**
- * 
+ *
  * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
  */
 public interface ResourceFactory<T> {

File: roboguice/src/main/java/roboguice/inject/RoboApplicationProvider.java
Patch:
@@ -6,7 +6,7 @@
  * You may obtain a copy of the License at
  * 
  *   http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -22,7 +22,7 @@
 import android.app.Application;
 
 /**
- * 
+ *
  * @author Mike Burton
  */
 @Singleton

File: roboguice/src/main/java/roboguice/inject/RoboInjector.java
Patch:
@@ -1,9 +1,9 @@
 package roboguice.inject;
 
-import android.app.Activity;
-
 import com.google.inject.Injector;
 
+import android.app.Activity;
+
 public interface RoboInjector extends Injector {
     void injectViewMembers(Activity activity);
     void injectViewMembers(android.support.v4.app.Fragment fragment);

File: roboguice/src/main/java/roboguice/inject/StringResourceFactory.java
Patch:
@@ -6,7 +6,7 @@
  * the License at
  * 
  * http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
@@ -21,7 +21,7 @@
 import android.content.res.Resources;
 
 /**
- * 
+ *
  * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
  */
 @Singleton

File: roboguice/src/main/java/roboguice/inject/SystemServiceProvider.java
Patch:
@@ -6,7 +6,7 @@
  * You may obtain a copy of the License at
  * 
  *   http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

File: roboguice/src/main/java/roboguice/receiver/RoboBroadcastReceiver.java
Patch:
@@ -1,10 +1,11 @@
 package roboguice.receiver;
 
+import roboguice.RoboGuice;
+
 import android.app.Application;
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import roboguice.RoboGuice;
 
 /**
  * To ensure proper ContextScope usage, override the handleReceive method

File: roboguice/src/main/java/roboguice/util/RoboAsyncTask.java
Patch:
@@ -1,12 +1,12 @@
 package roboguice.util;
 
+import java.util.concurrent.Executor;
+
 import roboguice.RoboGuice;
 
 import android.content.Context;
 import android.os.Handler;
 
-import java.util.concurrent.Executor;
-
 public abstract class RoboAsyncTask<ResultT> extends SafeAsyncTask<ResultT> {
     protected Context context;
 

File: roboguice/src/main/java/roboguice/util/RoboContext.java
Patch:
@@ -1,9 +1,9 @@
 package roboguice.util;
 
-import com.google.inject.Key;
-
 import java.util.Map;
 
+import com.google.inject.Key;
+
 public interface RoboContext {
     Map<Key<?>,Object> getScopedObjectMap();
 }

File: roboguice/src/test/java/roboguice/util/StringsTest.java
Patch:
@@ -1,12 +1,12 @@
 package roboguice.util;
 
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.junit.Assert.assertThat;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static org.hamcrest.CoreMatchers.equalTo;
-import static org.junit.Assert.assertThat;
-
 @RunWith(RobolectricTestRunner.class)
 public class StringsTest {
 

File: roboguice/src/main/java/roboguice/util/LnImpl.java
Patch:
@@ -31,7 +31,6 @@ public LnImpl(Application context) {
                 Log.e(packageName, "Error configuring logger", e);
             } catch( RuntimeException f ) {
                 // HACK ignore Stub! errors in mock objects during testing
-                f.printStackTrace();
             }
         }
     }

File: roboguice/src/main/java/roboguice/activity/event/OnContentChangedEvent.java
Patch:
@@ -12,6 +12,7 @@ public class OnContentChangedEvent {
     protected Activity activity;
 
     public OnContentChangedEvent(Activity activity) {
+        this.activity = activity;
     }
 
     public Activity getActivity() {

File: roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
Patch:
@@ -98,7 +98,7 @@ protected void configure() {
 
         final Provider<Context> contextProvider = getProvider(Context.class);
         final ExtrasListener extrasListener = new ExtrasListener(contextProvider);
-        final PreferenceListener preferenceListener = new PreferenceListener(contextProvider,application,contextScope);
+        final PreferenceListener preferenceListener = new PreferenceListener(contextProvider,application);
         final EventListenerThreadingDecorator observerThreadingDecorator = new EventListenerThreadingDecorator();
 
         // Package Info

File: roboguice/src/main/java/roboguice/inject/ContextScopedRoboInjector.java
Patch:
@@ -24,12 +24,10 @@ public class ContextScopedRoboInjector implements RoboInjector {
     protected Injector delegate;
     protected Context context;
     protected ContextScope scope;
-    protected ViewListener viewListener;
 
-    public ContextScopedRoboInjector(Context context, Injector applicationInjector, ViewListener viewListener) {
+    public ContextScopedRoboInjector(Context context, Injector applicationInjector) {
         this.delegate = applicationInjector;
         this.context = context;
-        this.viewListener = viewListener;
         this.scope = delegate.getInstance(ContextScope.class);
     }
 

File: roboguice/src/main/java/roboguice/util/AndroidCallableWrapper.java
Patch:
@@ -4,6 +4,8 @@
 import java.util.concurrent.Callable;
 import java.util.concurrent.CountDownLatch;
 
+import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+
 import android.os.Handler;
 import android.os.Looper;
 
@@ -20,6 +22,7 @@ public class AndroidCallableWrapper<ResultT> implements Runnable {
     protected AndroidCallableI<ResultT> delegate;
     protected StackTraceElement[] launchLocation;
 
+    @SuppressWarnings()
     public AndroidCallableWrapper(Handler handler, AndroidCallableI<ResultT> delegate, StackTraceElement[] launchLocation ) {
         this.delegate = delegate;
         this.launchLocation = launchLocation;

File: roboguice/src/main/java/roboguice/util/Ln.java
Patch:
@@ -2,6 +2,8 @@
 
 import com.google.inject.Inject;
 
+import edu.umd.cs.findbugs.annotations.SuppressWarnings;
+
 /**
  * A more natural android logging facility.
  *
@@ -54,6 +56,7 @@ public final class Ln {
      * lnImpl is initially set to LnImpl() with sensible defaults, then replaced
      * by whatever binding you choose during guice static injection pass.
      */
+    @SuppressWarnings(value="MS_SHOULD_BE_FINAL")
     @Inject(optional = true) protected static LnInterface lnImpl = new LnImpl();
 
 

File: roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
Patch:
@@ -31,7 +31,6 @@ public abstract class SafeAsyncTask<ResultT> implements Callable<ResultT> {
 
     protected Handler handler;
     protected Executor executor;
-    protected StackTraceElement[] launchLocation;
     protected FutureTask<Void> future;
 
 
@@ -93,7 +92,6 @@ public void execute() {
     }
 
     protected void execute( StackTraceElement[] launchLocation ) {
-        this.launchLocation = launchLocation;
         executor.execute( future() );
     }
 

File: roboguice/src/main/java/roboguice/event/EventManager.java
Patch:
@@ -144,3 +144,4 @@ public void destroy() {
     }
 
 }
+

File: roboguice/src/main/java/roboguice/event/eventListener/ObserverMethodListener.java
Patch:
@@ -46,7 +46,7 @@ public boolean equals(Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
 
-        ObserverMethodListener that = (ObserverMethodListener) o;
+        ObserverMethodListener<?> that = (ObserverMethodListener<?>) o;
 
         if (descriptor != null ? !descriptor.equals(that.descriptor) : that.descriptor != null) return false;
         return !(instance != null ? !instance.equals(that.instance) : that.instance != null);

File: roboguice/src/main/java/roboguice/event/eventListener/javaassist/RuntimeSupport.java
Patch:
@@ -29,7 +29,7 @@ public class RuntimeSupport {
      * Makes a descriptor for a given method.
      */
     public static String makeDescriptor(Method m) {
-        Class[] params = m.getParameterTypes();
+        Class<?>[] params = m.getParameterTypes();
         return makeDescriptor(params, m.getReturnType());
     }
 
@@ -39,7 +39,7 @@ public static String makeDescriptor(Method m) {
      * @param params    parameter types.
      * @param retType   return type.
      */
-    public static String makeDescriptor(Class[] params, Class retType) {
+    public static String makeDescriptor(Class<?>[] params, Class<?> retType) {
         StringBuffer sbuf = new StringBuffer();
         sbuf.append('(');
         for (int i = 0; i < params.length; i++)
@@ -52,7 +52,7 @@ public static String makeDescriptor(Class[] params, Class retType) {
         return sbuf.toString();
     }
 
-    private static void makeDesc(StringBuffer sbuf, Class type) {
+    private static void makeDesc(StringBuffer sbuf, Class<?> type) {
         if (type.isArray()) {
             sbuf.append('[');
             makeDesc(sbuf, type.getComponentType());

File: roboguice/src/main/java/roboguice/event/javaassist/RuntimeSupport.java
Patch:
@@ -29,7 +29,7 @@ public class RuntimeSupport {
      * Makes a descriptor for a given method.
      */
     public static String makeDescriptor(Method m) {
-        Class[] params = m.getParameterTypes();
+        Class<?>[] params = m.getParameterTypes();
         return makeDescriptor(params, m.getReturnType());
     }
 
@@ -39,7 +39,7 @@ public static String makeDescriptor(Method m) {
      * @param params    parameter types.
      * @param retType   return type.
      */
-    public static String makeDescriptor(Class[] params, Class retType) {
+    public static String makeDescriptor(Class<?>[] params, Class<?> retType) {
         StringBuffer sbuf = new StringBuffer();
         sbuf.append('(');
         for (int i = 0; i < params.length; i++)
@@ -50,7 +50,7 @@ public static String makeDescriptor(Class[] params, Class retType) {
         return sbuf.toString();
     }
 
-    private static void makeDesc(StringBuffer sbuf, Class type) {
+    private static void makeDesc(StringBuffer sbuf, Class<?> type) {
         if (type.isArray()) {
             sbuf.append('[');
             makeDesc(sbuf, type.getComponentType());

File: roboguice/src/main/java/roboguice/fragment/provided/NativeFragmentUtil.java
Patch:
@@ -48,6 +48,7 @@ public Class<FragmentManager> fragmentManagerType() {
         return FragmentManager.class;
     }
 
+	@SuppressWarnings("rawtypes") //not technically a Class<Provider<FragmentManager>>
 	@Override
 	public Class fragmentManagerProviderType() {
 		return FragmentManagerProvider.class;

File: roboguice/src/main/java/roboguice/fragment/support/SupportFragmentUtil.java
Patch:
@@ -46,6 +46,7 @@ public Class<FragmentManager> fragmentManagerType() {
         return FragmentManager.class;
     }
 
+	@SuppressWarnings("rawtypes")
 	@Override
 	public Class fragmentManagerProviderType() {
 		return FragmentManagerProvider.class;

File: roboguice/src/main/java/roboguice/inject/ExtrasListener.java
Patch:
@@ -125,7 +125,7 @@ public void injectMembers(T instance) {
             }
         }
 
-        @SuppressWarnings("unchecked")
+        @SuppressWarnings({ "unchecked", "rawtypes" })
         protected Object convert(Field field, Object value, Injector injector) {
 
             // Don't try to convert null or primitives

File: roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java
Patch:
@@ -111,7 +111,6 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 ref.setId(101);
                 return ref;
             }
-
         }
 
     }
@@ -146,7 +145,6 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
                 viewRef.setId(101);
                 return viewRef;
             }
-
         }
 
     }
@@ -198,7 +196,6 @@ protected void onCreate(Bundle savedInstanceState) {
             
         }
 
-
         public static class FragmentD extends RoboFragment {
             @InjectView(101) View v;
 

File: roboguice/src/main/java/roboguice/inject/RoboInjector.java
Patch:
@@ -1,13 +1,12 @@
 package roboguice.inject;
 
 import android.app.Activity;
-import android.support.v4.app.Fragment;
 
 import com.google.inject.Injector;
 
 public interface RoboInjector extends Injector {
     void injectViewMembers(Activity activity);
-    void injectViewMembers(Fragment fragment);
+    void injectViewMembers(android.support.v4.app.Fragment fragment);
     void injectMembersWithoutViews(Object instance);
-    void injectViewMembers(android.app.Fragment roboNativeDialogFragment);
+    void injectViewMembers(android.app.Fragment fragment);
 }

File: roboguice/src/main/java/roboguice/support/fragment/FragmentManagerProvider.java
Patch:
@@ -1,4 +1,6 @@
-package roboguice.inject;
+package roboguice.support.fragment;
+
+import roboguice.inject.ContextSingleton;
 
 import android.app.Activity;
 import android.support.v4.app.FragmentActivity;
@@ -13,7 +15,6 @@ public class FragmentManagerProvider implements Provider<FragmentManager> {
 
     @Override
     public FragmentManager get() {
-        // BUG only supports compat library at the moment.  Does not support honeycomb directly yet
         return ((FragmentActivity)activity).getSupportFragmentManager();
     }
 }

File: roboguice/src/main/java/roboguice/inject/ViewListener.java
Patch:
@@ -175,7 +175,7 @@ protected void reallyInjectMemberViews(Object activityOrFragment) {
                 final int id = injectView.value();
 
                 if( id>=0 )
-                    view = fragUtils != null && fragUtils.getClass().isInstance(activityOrFragment) ? (fragUtils.getView(activityOrFragment)).findViewById(id) : ((Activity)activityOrFragment).findViewById(id);
+                    view = fragUtils != null && fragUtils.fragmentType().isInstance(activityOrFragment) ? (fragUtils.getView(activityOrFragment)).findViewById(id) : ((Activity)activityOrFragment).findViewById(id);
 
                 else
                     view = fragUtils !=null && fragUtils.fragmentType().isInstance(activityOrFragment) ? (fragUtils.getView(activityOrFragment)).findViewWithTag(injectView.tag()) : ((Activity)activityOrFragment).getWindow().getDecorView().findViewWithTag(injectView.tag());

File: astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy1Test.java
Patch:
@@ -1,9 +1,10 @@
 package org.roboguice.astroboy.controller;
 
 import android.content.Context;
-import com.xtremelabs.robolectric.RobolectricTestRunner;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
 import roboguice.RoboGuice;
 import roboguice.activity.RoboActivity;
 
@@ -19,7 +20,7 @@
 @RunWith(RobolectricTestRunner.class)
 public class Astroboy1Test {
     
-    protected Context context = new RoboActivity();
+    protected Context context = Robolectric.buildActivity(RoboActivity.class).create().get();
     protected Astroboy astroboy = RoboGuice.getInjector(context).getInstance(Astroboy.class);
     
     @Test

File: roboguice/src/main/java/roboguice/inject/InjectExtra.java
Patch:
@@ -25,10 +25,10 @@
 
 /**
  * Indicates that a variable member of a class (whether static or not) should be
- * injected with an Android extra. The value is compulsory, and correspond to
+ * injected with an Android extra. The value is compulsory, and corresponds to
  * the key of the extra.<br />
  * <br />
- * The extra must exists when the activity is injected, unless you specify
+ * The extra must exist when the activity is injected, unless you specify
  * {@code optional=true} in the {@link InjectExtra} annotation. If optional is
  * set to true and no extra is found, no value will be injected in the field.<br />
  * <br />
@@ -38,7 +38,7 @@
  * <br />
  * You can define a default value in Java when the extra is optional : <br /> {@code
  * @InjectExtra(value="someValue", optional=true) Integer someValue = 2;} ) <br />
- * However, it is a non-sense to inject a default value in Java if the extra is
+ * However, it is nonsense to inject a default value in Java if the extra is
  * not optional : {@code @InjectExtra("someValue") Integer someValue = 2; // DO
  * NOT DO THIS}
  * 

File: roboguice/src/main/java/roboguice/inject/InjectExtra.java
Patch:
@@ -25,10 +25,10 @@
 
 /**
  * Indicates that a variable member of a class (whether static or not) should be
- * injected with an Android extra. The value is compulsory, and correspond to
+ * injected with an Android extra. The value is compulsory, and corresponds to
  * the key of the extra.<br />
  * <br />
- * The extra must exists when the activity is injected, unless you specify
+ * The extra must exist when the activity is injected, unless you specify
  * {@code optional=true} in the {@link InjectExtra} annotation. If optional is
  * set to true and no extra is found, no value will be injected in the field.<br />
  * <br />
@@ -38,7 +38,7 @@
  * <br />
  * You can define a default value in Java when the extra is optional : <br /> {@code
  * @InjectExtra(value="someValue", optional=true) Integer someValue = 2;} ) <br />
- * However, it is a non-sense to inject a default value in Java if the extra is
+ * However, it is nonsense to inject a default value in Java if the extra is
  * not optional : {@code @InjectExtra("someValue") Integer someValue = 2; // DO
  * NOT DO THIS}
  * 

File: roboguice/src/main/java/roboguice/util/LnInterface.java
Patch:
@@ -35,7 +35,9 @@ public interface LnInterface {
 
     boolean isVerboseEnabled();
 
-    Ln.Config getConfig();
+    int getLoggingLevel();
+
+    void setLoggingLevel(int level);
 
     String logLevelToString(int loglevel);
 }

File: astroboy/src/test/java/org/roboguice/astroboy/controller/Astroboy1Test.java
Patch:
@@ -1,11 +1,11 @@
 package org.roboguice.astroboy.controller;
 
 import android.content.Context;
+import com.xtremelabs.robolectric.RobolectricTestRunner;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import roboguice.RoboGuice;
 import roboguice.activity.RoboActivity;
-import roboguice.test.RobolectricRoboTestRunner;
 
 import static org.junit.Assert.assertTrue;
 
@@ -16,7 +16,7 @@
  * so we don't bother initializing the activity or really doing anything with it
  * at all.
  */
-@RunWith(RobolectricRoboTestRunner.class)
+@RunWith(RobolectricTestRunner.class)
 public class Astroboy1Test {
     
     protected Context context = new RoboActivity();

File: roboguice/src/test/java/roboguice/RoboGuiceTest.java
Patch:
@@ -21,7 +21,7 @@ public void setup() {
     
     @Test
     public void destroyInjectorShouldRemoveContext() {
-        final Activity activity = new RoboActivity();
+        final Activity activity = Robolectric.buildActivity(RoboActivity.class).get();
         RoboGuice.getInjector(activity);
         
         assertThat(RoboGuice.injectors.size(), equalTo(1));
@@ -35,7 +35,7 @@ public void destroyInjectorShouldRemoveContext() {
 
     @Test
     public void resetShouldRemoveContext() {
-        final Activity activity = new RoboActivity();
+        final Activity activity = Robolectric.buildActivity(RoboActivity.class).get();
         RoboGuice.getInjector(activity);
         
         assertThat(RoboGuice.injectors.size(), equalTo(1));

File: roboguice/src/test/java/roboguice/activity/ActivityInjectionTest.java
Patch:
@@ -43,9 +43,7 @@ public class ActivityInjectionTest {
     @Before
     public void setup() {
         RoboGuice.setBaseApplicationInjector(Robolectric.application, Stage.DEVELOPMENT, RoboGuice.newDefaultRoboModule(Robolectric.application), new ModuleA());
-        activity = new DummyActivity();
-        activity.setIntent( new Intent(Robolectric.application,DummyActivity.class).putExtra("foobar","goober") );
-        activity.onCreate(null);
+        activity = Robolectric.buildActivity(DummyActivity.class).withIntent(new Intent(Robolectric.application,DummyActivity.class).putExtra("foobar","goober")).create().get();
     }
 
     @Test

File: roboguice/src/main/java/roboguice/util/LnImpl.java
Patch:
@@ -4,9 +4,7 @@
 import android.content.pm.ApplicationInfo;
 import android.util.Log;
 import com.google.inject.Inject;
-import com.google.inject.Singleton;
 
-@Singleton
 public class LnImpl implements LnInterface {
     /**
      * config is initially set to BaseConfig() with sensible defaults, then replaced

File: roboguice/src/main/java/roboguice/inject/ViewListener.java
Patch:
@@ -50,7 +50,7 @@ public class ViewListener implements TypeListener {
             fragmentManagerClass = Class.forName("android.support.v4.app.FragmentManager");
             fragmentGetViewMethod = fragmentClass.getDeclaredMethod("getView");
             fragmentFindFragmentByIdMethod = fragmentManagerClass.getMethod("findFragmentById", int.class);
-            fragmentFindFragmentByTagMethod = fragmentManagerClass.getMethod("findFragmentByTag",Object.class);
+            fragmentFindFragmentByTagMethod = fragmentManagerClass.getMethod("findFragmentByTag", String.class);
         } catch( Throwable ignored ) {}
     }
 

File: roboguice/src/main/java/roboguice/inject/ViewListener.java
Patch:
@@ -50,7 +50,7 @@ public class ViewListener implements TypeListener {
             fragmentManagerClass = Class.forName("android.support.v4.app.FragmentManager");
             fragmentGetViewMethod = fragmentClass.getDeclaredMethod("getView");
             fragmentFindFragmentByIdMethod = fragmentManagerClass.getMethod("findFragmentById", int.class);
-            fragmentFindFragmentByTagMethod = fragmentManagerClass.getMethod("findFragmentByTag",Object.class);
+            fragmentFindFragmentByTagMethod = fragmentManagerClass.getMethod("findFragmentByTag", String.class);
         } catch( Throwable ignored ) {}
     }
 

File: roboguice/src/main/java/roboguice/activity/RoboSplashActivity.java
Patch:
@@ -1,7 +1,6 @@
 package roboguice.activity;
 
 import roboguice.RoboGuice;
-import roboguice.inject.ContextScope;
 
 import android.app.Activity;
 import android.app.Application;
@@ -35,7 +34,7 @@ public void run() {
                 // Set the execution context for this thread in case the user
                 // want to use the injector
                 final Application app = getApplication();
-                RoboGuice.getInjector(RoboSplashActivity.this).getInstance(ContextScope.class);
+                RoboGuice.getBaseApplicationInjector(getApplication());
 
 
                 doStuffInBackground(app);

File: roboguice/src/main/java/roboguice/RoboGuice.java
Patch:
@@ -102,7 +102,7 @@ public Void visit(StaticInjectionRequest element) {
      * This is a static value.
      */
     public static void setModulesResourceId(int modulesResourceId) {
-        modulesResourceId = modulesResourceId;
+        RoboGuice.modulesResourceId = modulesResourceId;
     }
 
     /**

File: roboguice/src/main/java/roboguice/RoboGuice.java
Patch:
@@ -160,7 +160,7 @@ public static <T> T injectMembers( Context context, T t ) {
 
     
     public static DefaultRoboModule newDefaultRoboModule(final Application application) {
-        return new DefaultRoboModule(application, new ContextScope(), getViewListener(application), getResourceListener(application));
+        return new DefaultRoboModule(application, new ContextScope(application), getViewListener(application), getResourceListener(application));
     }
 
 

File: roboguice/src/test/java/roboguice/application/ApplicationInjectionTest.java
Patch:
@@ -1,7 +1,6 @@
 package roboguice.application;
 
 import com.xtremelabs.robolectric.Robolectric;
-import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import roboguice.RoboGuice;
@@ -31,7 +30,6 @@ public void shouldBeAbleToInjectIntoApplication() {
     }
 
 
-    @Ignore("Gah, isn't supported yet")
     @Test
     public void shouldBeAbleToInjectContextScopedItemsIntoApplication() {
         Robolectric.application = new AppB();

File: roboguice/src/main/java/roboguice/util/Ln.java
Patch:
@@ -254,7 +254,7 @@ public static String logLevelToString( int loglevel ) {
     /** Default implementation logs to android.util.Log */
     public static class Print {
         public int println(int priority, String msg ) {
-            return Log.println(priority,getScope(), processMessage(msg));
+            return Log.println(priority,getScope(5), processMessage(msg));
         }
 
         protected String processMessage(String msg) {
@@ -263,9 +263,9 @@ protected String processMessage(String msg) {
             return msg;
         }
 
-        protected static String getScope() {
+        protected static String getScope(int skipDepth) {
             if( config.minimumLogLevel <= Log.DEBUG ) {
-                final StackTraceElement trace = Thread.currentThread().getStackTrace()[5];
+                final StackTraceElement trace = Thread.currentThread().getStackTrace()[skipDepth];
                 return config.scope + "/" + trace.getFileName() + ":" + trace.getLineNumber();
             }
 

File: roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
Patch:
@@ -152,7 +152,6 @@ protected void configure() {
         bind(AlarmManager.class).toProvider(new SystemServiceProvider<AlarmManager>(Context.ALARM_SERVICE));
         bind(NotificationManager.class).toProvider(new SystemServiceProvider<NotificationManager>(Context.NOTIFICATION_SERVICE));
         bind(KeyguardManager.class).toProvider(new SystemServiceProvider<KeyguardManager>(Context.KEYGUARD_SERVICE));
-        bind(SearchManager.class).toProvider(new SystemServiceProvider<SearchManager>(Context.SEARCH_SERVICE));
         bind(Vibrator.class).toProvider(new SystemServiceProvider<Vibrator>(Context.VIBRATOR_SERVICE));
         bind(ConnectivityManager.class).toProvider(new SystemServiceProvider<ConnectivityManager>(Context.CONNECTIVITY_SERVICE));
         bind(WifiManager.class).toProvider(new SystemServiceProvider<WifiManager>(Context.WIFI_SERVICE));
@@ -163,6 +162,7 @@ protected void configure() {
 
         // System Services that must be scoped to current context
         bind(LayoutInflater.class).toProvider(new ContextScopedSystemServiceProvider<LayoutInflater>(contextProvider,Context.LAYOUT_INFLATER_SERVICE));
+        bind(SearchManager.class).toProvider(new ContextScopedSystemServiceProvider<SearchManager>(contextProvider,Context.SEARCH_SERVICE));
 
 
         // Android Resources, Views and extras require special handling

File: roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
Patch:
@@ -64,15 +64,15 @@ public class DefaultRoboModule extends AbstractModule {
         Class c = null;
         try {
             c = Class.forName("android.support.v4.app.FragmentManager");
-        } catch( Exception ignored ) {}
+        } catch( Throwable ignored ) {}
         fragmentManagerClass = c;
     }
 
     static {
         Class c = null;
         try {
             c = Class.forName("android.accounts.AccountManager");
-        } catch( Exception ignored ) {}
+        } catch( Throwable ignored ) {}
         accountManagerClass = c;
     }
 

File: roboguice/src/main/java/roboguice/inject/ViewListener.java
Patch:
@@ -51,7 +51,7 @@ public class ViewListener implements TypeListener {
             fragmentGetViewMethod = fragmentClass.getDeclaredMethod("getView");
             fragmentFindFragmentByIdMethod = fragmentManagerClass.getMethod("findFragmentById", int.class);
             fragmentFindFragmentByTagMethod = fragmentManagerClass.getMethod("findFragmentByTag",Object.class);
-        } catch( Exception ignored ) {}
+        } catch( Throwable ignored ) {}
     }
 
     public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter) {

File: roboguice/src/main/java/roboguice/inject/ViewListener.java
Patch:
@@ -49,8 +49,8 @@ public class ViewListener implements TypeListener {
             fragmentClass = Class.forName("android.support.v4.app.Fragment");
             fragmentManagerClass = Class.forName("android.support.v4.app.FragmentManager");
             fragmentGetViewMethod = fragmentClass.getDeclaredMethod("getView");
-            fragmentFindFragmentByIdMethod = fragmentClass.getMethod("findFragmentById", int.class);
-            fragmentFindFragmentByTagMethod = fragmentClass.getMethod("findFragmentByTag",Object.class);
+            fragmentFindFragmentByIdMethod = fragmentManagerClass.getMethod("findFragmentById", int.class);
+            fragmentFindFragmentByTagMethod = fragmentManagerClass.getMethod("findFragmentByTag",Object.class);
         } catch( Exception ignored ) {}
     }
 

File: roboguice/src/main/java/roboguice/config/DefaultRoboModule.java
Patch:
@@ -23,6 +23,7 @@
 import android.net.ConnectivityManager;
 import android.net.wifi.WifiManager;
 import android.os.Build.VERSION;
+import android.os.Handler;
 import android.os.PowerManager;
 import android.os.Vibrator;
 import android.provider.Settings;
@@ -129,6 +130,7 @@ protected void configure() {
         bind(ContentResolver.class).toProvider(ContentResolverProvider.class);
         bind(Application.class).toInstance(application);
         bind(EventListenerThreadingDecorator.class).toInstance(observerThreadingDecorator);
+        bind(Handler.class).toProvider(HandlerProvider.class);
 
 
 

File: roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
Patch:
@@ -1,6 +1,7 @@
 package roboguice.util;
 
 import android.os.Handler;
+import android.os.Looper;
 import android.util.Log;
 
 import java.io.InterruptedIOException;
@@ -156,7 +157,7 @@ public static class Task<ResultT> implements Callable<Void> {
 
         public Task(SafeAsyncTask<ResultT> parent) {
             this.parent = parent;
-            this.handler = parent.handler!=null ? parent.handler : new Handler();
+            this.handler = parent.handler!=null ? parent.handler : new Handler(Looper.getMainLooper());
         }
 
         public Void call() throws Exception {

File: roboguice/src/main/java/roboguice/service/RoboIntentService.java
Patch:
@@ -64,7 +64,8 @@ public void onStart(Intent intent, int startId) {
     @Override
     public void onDestroy() {
         try {
-            eventManager.fire(new OnDestroyEvent() );
+            if(eventManager!=null) // may be null during test: http://code.google.com/p/roboguice/issues/detail?id=140
+                eventManager.fire(new OnDestroyEvent() );
         } finally {
             try {
                 RoboGuice.destroyInjector(this);

File: roboguice/src/main/java/roboguice/service/RoboService.java
Patch:
@@ -68,7 +68,8 @@ public void onStart(Intent intent, int startId) {
     @Override
     public void onDestroy() {
         try {
-            eventManager.fire(new OnDestroyEvent() );
+            if(eventManager!=null) // may be null during test: http://code.google.com/p/roboguice/issues/detail?id=140
+                eventManager.fire(new OnDestroyEvent() );
         } finally {
             try {
                 RoboGuice.destroyInjector(this);

File: astroboy/src/main/java/org/roboguice/astroboy/controller/AstroboyRemoteControl.java
Patch:
@@ -46,7 +46,7 @@ public void brushTeeth() {
     }
 
     public void say( String something ) {
-        Ln.d("Sent say(%d) command to Astroboy",something);
+        Ln.d("Sent say(%s) command to Astroboy",something);
         astroboy.say(something);
     }
 

File: astroboy/src/main/java/org/roboguice/astroboy/activity/AstroboyMasterConsole.java
Patch:
@@ -46,7 +46,7 @@ public class AstroboyMasterConsole extends RoboActivity {
     // will create a new instance for us using AstroboyRemoteControl's default constructor.
     // Contrast this with Vibrator, which is an Android service that is pre-bound by RoboGuice.
     // Injecting a Vibrator will return a new instance of a Vibrator obtained by calling
-    // context.getSystemService(VIBRATOR_SERVICE).  This is configured in RoboModule, which is
+    // context.getSystemService(VIBRATOR_SERVICE).  This is configured in DefaultRoboModule, which is
     // used by default to configure every RoboGuice injector.
     @Inject AstroboyRemoteControl remoteControl;
     @Inject Vibrator vibrator;

File: astroboy/src/main/java/org/roboguice/astroboy/controller/Astroboy.java
Patch:
@@ -32,7 +32,7 @@ public class Astroboy {
     // since the current context may change depending on what activity is using Astroboy
     // at the time.  Instead, inject a Provider of the current context, then we can
     // ask the provider for the context when we need it.
-    // Vibrator is bound to context.getSystemService(VIBRATOR_SERVICE) in RoboModule.
+    // Vibrator is bound to context.getSystemService(VIBRATOR_SERVICE) in DefaultRoboModule.
     // Random has no special bindings, so Guice will create a new instance for us.
     @Inject Provider<Context> contextProvider;
     @Inject Vibrator vibrator;

File: roboguice/src/test/java/roboguice/fragment/FragmentInjectionTest.java
Patch:
@@ -50,6 +50,8 @@ protected void onCreate(Bundle savedInstanceState) {
             super.onCreate(savedInstanceState);
 
             ref = new RoboFragmentA();
+            ref.onAttach(this);
+            ref.onCreate(null);
 
             final FragmentTransaction transaction = fragmentManager.beginTransaction();
             transaction.add(100,ref);

File: roboguice/src/main/java/roboguice/inject/ViewListener.java
Patch:
@@ -46,6 +46,8 @@ public <I> void hear(TypeLiteral<I> typeLiteral, TypeEncounter<I> typeEncounter)
                         throw new UnsupportedOperationException("Views may not be statically injected");
                     else if( !View.class.isAssignableFrom(field.getType()))
                         throw new UnsupportedOperationException("You may only use @InjectView on fields descended from type View");
+                    else if( Context.class.isAssignableFrom(field.getDeclaringClass()) && !Activity.class.isAssignableFrom(field.getDeclaringClass()))
+                        throw new UnsupportedOperationException("You may only use @InjectView in Activity contexts");
                     else
                         typeEncounter.register(new ViewMembersInjector<I>(field, field.getAnnotation(InjectView.class), typeEncounter.getProvider(Activity.class)));
 

File: roboguice/src/test/java/roboguice/service/ServiceInjectionTest.java
Patch:
@@ -10,6 +10,8 @@
 import android.os.IBinder;
 import android.view.View;
 
+import com.google.inject.ConfigurationException;
+
 import javax.inject.Inject;
 
 import static org.hamcrest.CoreMatchers.equalTo;
@@ -34,7 +36,7 @@ public void shouldBeAbleToInjectInRoboIntentService() {
         assertThat( roboService.context, equalTo((Context)roboService) );
     }
 
-    @Test(expected=UnsupportedOperationException.class)
+    @Test(expected=ConfigurationException.class)
     public void shouldNotAllowViewsInServices() {
         final RoboServiceB roboService = new RoboServiceB();
         roboService.onCreate();

File: roboguice/src/main/java/roboguice/event/EventManager.java
Patch:
@@ -143,7 +143,7 @@ public void onEvent(T event) {
                     Ln.w("trying to observe event %1$s on disposed context, consider explicitly calling EventManager.unregisterObserver", method.getName());
                 }
             } catch (InvocationTargetException e) {
-                Ln.e(e);
+                throw new RuntimeException(e);
             } catch (IllegalAccessException e) {
                 throw new RuntimeException(e);
             }

File: roboguice/src/main/java/roboguice/inject/ContextScope.java
Patch:
@@ -50,7 +50,7 @@
 public class ContextScope implements Scope {
 
     protected WeakHashMap<Context, Map<Key<?>, WeakReference<Object>>> scopedObjects = new WeakHashMap<Context, Map<Key<?>, WeakReference<Object>>>();
-    protected WeakReference<Context> contextRef = new WeakReference<Context>(null);
+    protected WeakReference<Context> contextRef = null;
 
 
     /**

File: roboguice/src/test/java/roboguice/activity/ActivityInjectionTest.java
Patch:
@@ -168,7 +168,6 @@ public void run() {
 
     }
 
-    @Ignore("This clearly should work, but need to figure out how to get it to work")
     @Test
     public void shouldBeAbleToGetContextProvidersInBackgroundThreads() throws Exception {
         final F f = new F();

File: astroboy/src/main/java/org/roboguice/astroboy/activity/FightForcesOfEvilActivity.java
Patch:
@@ -1,5 +1,6 @@
-package org.roboguice;
+package org.roboguice.astroboy.activity;
 
+import org.roboguice.astroboy.activity.AstroboyRemoteControl;
 import roboguice.activity.RoboActivity;
 
 import android.os.Bundle;

File: roboguice/src/main/java/roboguice/config/RoboModule.java
Patch:
@@ -49,7 +49,6 @@ public class RoboModule extends AbstractModule {
     protected ContextScope contextScope;
     protected ResourceListener resourceListener;
     protected ViewListener viewListener;
-    //protected EventManager eventManager;
 
 
     public RoboModule( final Application application, ContextScope contextScope, Provider<Context> contextProvider, ViewListener viewListener, ResourceListener resourceListener ) {

File: roboguice/src/test/java/roboguice/event/ContextObserverBase.java
Patch:
@@ -14,6 +14,7 @@
  *
  * @author John Ericksen
  */
+@SuppressWarnings({"UnusedParameters", "UnusedDeclaration"})
 public class ContextObserverBase {
 
     private Map<String, Map<Class<?>, Integer>> callCount = new HashMap<String, Map<Class<?>, Integer>>();

File: roboguice/src/main/java/roboguice/RoboGuice.java
Patch:
@@ -1,5 +1,6 @@
 package roboguice;
 
+import roboguice.config.AbstractRoboModule;
 import roboguice.config.RoboModule;
 import roboguice.inject.ContextScopedInjector;
 
@@ -71,7 +72,7 @@ public static Injector setApplicationInjector(Application application, Stage sta
             try {
                 for (String name : moduleNames) {
                     final Class<? extends Module> clazz = Class.forName(name).asSubclass(Module.class);
-                    modules.add( clazz.newInstance() );
+                    modules.add( AbstractRoboModule.class.isAssignableFrom(clazz) ? clazz.getConstructor(RoboModule.class).newInstance(roboModule) : clazz.newInstance() );
                 }
             } catch (Exception e) {
                 throw new RuntimeException(e);

File: roboguice/src/main/java/roboguice/inject/ContextScope.java
Patch:
@@ -57,9 +57,10 @@ public void enter(Context context) {
     public <T> Provider<T> scope(final Key<T> key, final Provider<T> unscoped) {
         return new Provider<T>() {
             public T get() {
-                Map<Key<?>, WeakReference<Object>> scopedObjects = getScopedObjectMap(key);
+                final Map<Key<?>, WeakReference<Object>> scopedObjects = getScopedObjectMap(key);
 
-                T current = (T) scopedObjects.get(key).get();
+                final WeakReference<Object> ref = scopedObjects.get(key);
+                T current = (T) (ref!=null ? ref.get() : null);
                 if (current == null && !scopedObjects.containsKey(key)) {
                     current = unscoped.get();
                     scopedObjects.put(key, new WeakReference<Object>(current));

File: roboguice/src/main/java/roboguice/inject/PreferenceListener.java
Patch:
@@ -108,7 +108,7 @@ public void reallyInjectMembers() {
 
 
             field.setAccessible(true);
-            field.set(instanceRef, value);
+            field.set(instance, value);
 
         } catch (IllegalAccessException e) {
             throw new RuntimeException(e);

File: astroboy/src/roboguice/astroboy/activity/DoctorTenma.java
Patch:
@@ -37,8 +37,8 @@
 
 import com.google.inject.Inject;
 import com.google.inject.Injector;
-import com.google.inject.internal.Nullable;
 
+import javax.annotation.Nullable;
 import java.util.Date;
 
 import static junit.framework.Assert.assertEquals;

File: roboguice/src/main/java/roboguice/inject/ContextScope.java
Patch:
@@ -59,7 +59,6 @@
 import com.google.inject.Key;
 import com.google.inject.Provider;
 import com.google.inject.Scope;
-import com.google.inject.internal.Maps;
 
 import java.lang.ref.WeakReference;
 import java.util.ArrayList;
@@ -156,7 +155,7 @@ protected <T> Map<Key<?>, Object> getScopedObjectMap(Key<T> key) {
 
         Map<Key<?>,Object> scopedObjects = values.get(context);
         if (scopedObjects == null) {
-            scopedObjects = Maps.newHashMap();
+            scopedObjects = com.google.inject.internal.util.$Maps.newHashMap();
             values.put(context, scopedObjects);
         }
 

File: roboguice/src/main/java/roboguice/inject/ExtrasListener.java
Patch:
@@ -22,7 +22,6 @@
 import android.os.Bundle;
 
 import com.google.inject.*;
-import com.google.inject.internal.Nullable;
 import com.google.inject.spi.TypeEncounter;
 import com.google.inject.spi.TypeListener;
 import com.google.inject.util.Types;
@@ -103,7 +102,7 @@ public void injectMembers(T instance) {
              * don't use @Nullable and a converter returns null, an exception will
              * be thrown (which I find to be the most logic behavior).
              */
-            if (value == null && field.getAnnotation(Nullable.class) == null) {
+            if (value == null && Nullable.notNullable(field) ) {
                 throw new NullPointerException(String.format("Can't inject null value into %s.%s when field is not @Nullable", field.getDeclaringClass(), field
                         .getName()));
             }

File: roboguice/src/main/java/roboguice/inject/InjectExtra.java
Patch:
@@ -22,7 +22,6 @@
 import java.lang.annotation.Target;
 
 import com.google.inject.BindingAnnotation;
-import com.google.inject.internal.Nullable;
 
 /**
  * Indicates that a variable member of a class (whether static or not) should be

File: roboguice/src/main/java/roboguice/inject/PreferenceListener.java
Patch:
@@ -18,16 +18,16 @@
 import android.app.Application;
 import android.content.Context;
 import android.preference.PreferenceActivity;
+
 import com.google.inject.MembersInjector;
 import com.google.inject.Provider;
 import com.google.inject.TypeLiteral;
-import com.google.inject.internal.Nullable;
 import com.google.inject.spi.TypeEncounter;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 
-import static com.google.inject.internal.Preconditions.checkNotNull;
+import static com.google.inject.internal.util.$Preconditions.checkNotNull;
 
 /**
  * 
@@ -101,7 +101,7 @@ public void reallyInjectMembers() {
 
             value = ((PreferenceActivity) contextProvider.get()).findPreference(annotation.value());
 
-            if (value == null && field.getAnnotation(Nullable.class) == null)
+            if (value == null && Nullable.notNullable(field) )
                 throw new NullPointerException(String.format("Can't inject null value into %s.%s when field is not @Nullable", field.getDeclaringClass(), field.getName()));
 
 

File: roboguice/src/main/java/roboguice/inject/ResourceListener.java
Patch:
@@ -25,7 +25,6 @@
 
 import com.google.inject.MembersInjector;
 import com.google.inject.TypeLiteral;
-import com.google.inject.internal.Nullable;
 import com.google.inject.spi.TypeEncounter;
 
 import java.lang.reflect.Field;
@@ -114,7 +113,7 @@ public void injectMembers(T instance) {
                     value = resources.getMovie(id);
                 }
                 
-                if (value == null && field.getAnnotation(Nullable.class) == null) {
+                if (value == null && Nullable.notNullable(field) ) {
                     throw new NullPointerException(String.format("Can't inject null value into %s.%s when field is not @Nullable", field.getDeclaringClass(), field
                             .getName()));
                 }

File: astroboy/src/roboguice/astroboy/activity/ExampleBackgroundTask.java
Patch:
@@ -17,7 +17,7 @@ public Void call() throws Exception {
     }
 
     @Override
-    protected void onInterrupted(InterruptedException e) {
+    protected void onInterrupted(Exception e) {
         Ln.d("Interrupting background task %s", this);
     }
 

File: astroboy/src/roboguice/astroboy/service/TalkingThingMockImpl.java
Patch:
@@ -15,18 +15,19 @@
  */
 package roboguice.astroboy.service;
 
-import roboguice.astroboy.AstroboyApplication;
 import roboguice.astroboy.R;
 import roboguice.inject.StringResourceFactory;
 
+import android.app.Application;
+
 import com.google.inject.Inject;
 
 /**
  * Demonstrate how a dependency to the Application instance is resolved.
  */
 public class TalkingThingMockImpl implements TalkingThing {
 
-    @Inject protected AstroboyApplication application;
+    @Inject protected Application application;
 
     @Inject
     protected StringResourceFactory stringRF;

File: roboguice/src/main/java/roboguice/event/Observes.java
Patch:
@@ -31,4 +31,5 @@
 @Retention(RUNTIME)
 @Target( { ElementType.PARAMETER })
 public @interface Observes {
+    EventThread value() default EventThread.CURRENT;
 }

File: roboguice/src/main/java/roboguice/inject/PreferenceListener.java
Patch:
@@ -27,6 +27,8 @@
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 
+import static com.google.inject.internal.util.$Preconditions.checkNotNull;
+
 /**
  * 
  * @author Mike Burton
@@ -91,8 +93,7 @@ public void injectMembers(T instance) {
     }
 
     public void reallyInjectMembers() {
-        //TODO:Runtime Exception?
-        assert instance != null;
+        checkNotNull(instance);
 
         Object value = null;
 

File: roboguice/src/main/java/roboguice/util/Ln.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
 import android.util.Log;
 
 import com.google.inject.Inject;
@@ -220,7 +219,7 @@ public BaseConfig(Context context) {
 
                 Ln.d("Configuring Logging, minimum log level is %s", logLevelToString(minimumLogLevel) );
 
-            } catch( PackageManager.NameNotFoundException e ) {
+            } catch( Exception e ) {
                 Log.e(packageName, "Error configuring logger", e);
             }
         }

File: roboguice/src/test/java/roboguice/event/EventOne.java
Patch:
@@ -1,7 +1,7 @@
 package roboguice.event;
 
 /**
- * Simple Event
+ * Simple Test Event
  *
  * @author John Ericksen
  */

File: roboguice/src/test/java/roboguice/event/EventTwo.java
Patch:
@@ -1,7 +1,7 @@
 package roboguice.event;
 
 /**
- * Simple Event
+ * Simple Test Event
  *
  * @author John Ericksen
  */

File: astroboy/src/roboguice/astroboy/activity/ExampleBackgroundTask.java
Patch:
@@ -17,7 +17,7 @@ public Void call() throws Exception {
     }
 
     @Override
-    protected void onInterrupted(InterruptedException e) {
+    protected void onInterrupted(Exception e) {
         Ln.d("Interrupting background task %s", this);
     }
 

File: tests/src/roboguice/test/SafeAsyncTest.java
Patch:
@@ -204,7 +204,7 @@ protected void onSuccess(Void ignored) throws Exception {
                     }
 
                     @Override
-                    protected void onInterrupted(InterruptedException e) {
+                    protected void onInterrupted(Exception e) {
                         state[0] = null; // expected
                     }
 

File: roboguice/src/main/java/roboguice/service/RoboIntentService.java
Patch:
@@ -75,8 +75,9 @@ public void onDestroy() {
 
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
+        final Configuration currentConfig = getResources().getConfiguration();
         super.onConfigurationChanged(newConfig);
-        eventManager.fire(new OnConfigurationChangedEvent() );
+        eventManager.fire(new OnConfigurationChangedEvent(currentConfig,newConfig) );
     }
 
 }

File: roboguice/src/main/java/roboguice/util/Ln.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
-import android.content.pm.PackageManager;
 import android.util.Log;
 
 import com.google.inject.Inject;
@@ -220,7 +219,7 @@ public BaseConfig(Context context) {
 
                 Ln.d("Configuring Logging, minimum log level is %s", logLevelToString(minimumLogLevel) );
 
-            } catch( PackageManager.NameNotFoundException e ) {
+            } catch( Exception e ) {
                 Log.e(packageName, "Error configuring logger", e);
             }
         }

File: roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
Patch:
@@ -162,21 +162,19 @@ public Void call() throws Exception {
             try {
                 doPreExecute();
                 doSuccess(doCall());
-                return null;
 
             } catch( final Exception e ) {
                 try {
                     doException(e);
                 } catch( Exception f ) {
                     // ignored, throw original instead
                 }
-                throw e;
 
             } finally {
                 doFinally();
             }
 
-
+            return null;
         }
 
         protected void doPreExecute() throws Exception {

File: roboguice/src/test/java/roboguice/event/ContextObserverTester.java
Patch:
@@ -1,6 +1,8 @@
 package roboguice.event;
 
 /**
+ * Context Observer testing interface
+ *
  * @author John Ericksen
  */
 public interface ContextObserverTester {

File: roboguice/src/test/java/roboguice/event/ContextObserverTesterImpl.java
Patch:
@@ -5,6 +5,8 @@
 import java.util.List;
 
 /**
+ * Context Observer testing class exercising the various implementation combinations.
+ *
  * @author John Ericksen
  */
 public class ContextObserverTesterImpl extends ContextObserverBase implements ContextObserverTester{

File: roboguice/src/test/java/roboguice/event/EventOne.java
Patch:
@@ -1,6 +1,8 @@
 package roboguice.event;
 
 /**
+ * Simple Event
+ *
  * @author John Ericksen
  */
 public class EventOne {

File: roboguice/src/test/java/roboguice/event/EventTwo.java
Patch:
@@ -1,6 +1,8 @@
 package roboguice.event;
 
 /**
+ * Simple Event
+ *
  * @author John Ericksen
  */
 public class EventTwo {

File: roboguice/src/main/java/roboguice/config/RoboModule.java
Patch:
@@ -74,13 +74,13 @@ protected void configure() {
         bindScope(ContextScoped.class, contextScope);
         bind(ContextScope.class).toInstance(contextScope);
         bind(Context.class).toProvider(throwingContextProvider).in(ContextScoped.class);
-        bind(Activity.class).toProvider(ActivityProvider.class).in(ContextScoped.class);
+        bind(Activity.class).toProvider(ActivityProvider.class);
+        bind(AssetManager.class).toProvider( AssetManagerProvider.class );
 
         // Sundry Android Classes
         bind(SharedPreferences.class).toProvider(SharedPreferencesProvider.class);
         bind(Resources.class).toProvider(ResourcesProvider.class);
         bind(ContentResolver.class).toProvider(ContentResolverProvider.class);
-        bind(AssetManager.class).toProvider( AssetManagerProvider.class );
 
         for (Class<?> c = application.getClass(); c != null && Application.class.isAssignableFrom(c); c = c.getSuperclass())
             bind((Class<Object>) c).toInstance(application);

File: roboguice/src/main/java/roboguice/inject/AssetManagerProvider.java
Patch:
@@ -6,7 +6,6 @@
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 
-@ContextScoped
 public class AssetManagerProvider implements Provider<AssetManager> {
     @Inject protected Context context;
 

File: roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
Patch:
@@ -116,12 +116,14 @@ protected void onNewIntent( Intent intent ) {
 
     @Override
     protected void onStop() {
+        scope.enter(this);
         eventManager.fire(new OnStopEvent());
         super.onStop();
     }
 
     @Override
     protected void onDestroy() {
+        scope.enter(this);
         eventManager.fire(new OnDestroyEvent());
         eventManager.clear(this);
         scope.exit(this);

File: roboguice/src/main/java/roboguice/activity/RoboActivity.java
Patch:
@@ -138,12 +138,14 @@ protected void onNewIntent( Intent intent ) {
 
     @Override
     protected void onStop() {
+        scope.enter(this);
         eventManager.fire(new OnStopEvent());
         super.onStop();
     }
 
     @Override
     protected void onDestroy() {
+        scope.enter(this);
         eventManager.fire(new OnDestroyEvent());
         eventManager.clear(this);
         scope.exit(this);

File: roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
Patch:
@@ -115,12 +115,14 @@ protected void onNewIntent( Intent intent ) {
 
     @Override
     protected void onStop() {
+        scope.enter(this);
         eventManager.fire(new OnStopEvent());
         super.onStop();
     }
 
     @Override
     protected void onDestroy() {
+        scope.enter(this);
         eventManager.fire(new OnDestroyEvent());
         eventManager.clear(this);
         scope.exit(this);

File: roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java
Patch:
@@ -116,12 +116,14 @@ protected void onNewIntent( Intent intent ) {
 
     @Override
     protected void onStop() {
+        scope.enter(this);
         eventManager.fire(new OnStopEvent());
         super.onStop();
     }
 
     @Override
     protected void onDestroy() {
+        scope.enter(this);
         eventManager.fire(new OnDestroyEvent());
         eventManager.clear(this);
         scope.exit(this);

File: roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java
Patch:
@@ -115,12 +115,14 @@ protected void onNewIntent( Intent intent ) {
 
     @Override
     protected void onStop() {
+        scope.enter(this);
         eventManager.fire(new OnStopEvent());
         super.onStop();
     }
 
     @Override
     protected void onDestroy() {
+        scope.enter(this);
         eventManager.fire(new OnDestroyEvent());
         eventManager.clear(this);
         scope.exit(this);

File: roboguice/src/main/java/roboguice/activity/RoboListActivity.java
Patch:
@@ -115,12 +115,14 @@ protected void onNewIntent( Intent intent ) {
 
     @Override
     protected void onStop() {
+        scope.enter(this);
         eventManager.fire(new OnStopEvent());
         super.onStop();
     }
 
     @Override
     protected void onDestroy() {
+        scope.enter(this);
         eventManager.fire(new OnDestroyEvent());
         eventManager.clear(this);
         scope.exit(this);

File: roboguice/src/main/java/roboguice/activity/RoboMapActivity.java
Patch:
@@ -115,12 +115,14 @@ public void onNewIntent( Intent intent ) {
 
     @Override
     protected void onStop() {
+        scope.enter(this);
         eventManager.fire(new OnStopEvent());
         super.onStop();
     }
 
     @Override
     protected void onDestroy() {
+        scope.enter(this);
         eventManager.fire(new OnDestroyEvent());
         eventManager.clear(this);
         scope.exit(this);

File: roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java
Patch:
@@ -128,12 +128,14 @@ protected void onNewIntent( Intent intent ) {
 
     @Override
     protected void onStop() {
+        scope.enter(this);
         eventManager.fire(new OnStopEvent());
         super.onStop();
     }
 
     @Override
     protected void onDestroy() {
+        scope.enter(this);
         eventManager.fire(new OnDestroyEvent());
         eventManager.clear(this);
         scope.exit(this);

File: roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
Patch:
@@ -115,12 +115,14 @@ protected void onNewIntent( Intent intent ) {
 
     @Override
     protected void onStop() {
+        scope.enter(this);
         eventManager.fire(new OnStopEvent());
         super.onStop();
     }
 
     @Override
     protected void onDestroy() {
+        scope.enter(this);
         eventManager.fire(new OnDestroyEvent());
         eventManager.clear(this);
         scope.exit(this);

File: roboguice/src/main/java/roboguice/config/RoboModule.java
Patch:
@@ -74,13 +74,13 @@ protected void configure() {
         bindScope(ContextScoped.class, contextScope);
         bind(ContextScope.class).toInstance(contextScope);
         bind(Context.class).toProvider(throwingContextProvider).in(ContextScoped.class);
-        bind(Activity.class).toProvider(ActivityProvider.class);
-        bind(AssetManager.class).toProvider( AssetManagerProvider.class );
+        bind(Activity.class).toProvider(ActivityProvider.class).in(ContextScoped.class);
 
         // Sundry Android Classes
         bind(SharedPreferences.class).toProvider(SharedPreferencesProvider.class);
         bind(Resources.class).toProvider(ResourcesProvider.class);
         bind(ContentResolver.class).toProvider(ContentResolverProvider.class);
+        bind(AssetManager.class).toProvider( AssetManagerProvider.class );
 
         for (Class<?> c = application.getClass(); c != null && Application.class.isAssignableFrom(c); c = c.getSuperclass())
             bind((Class<Object>) c).toInstance(application);

File: roboguice/src/main/java/roboguice/inject/AssetManagerProvider.java
Patch:
@@ -6,6 +6,7 @@
 import com.google.inject.Inject;
 import com.google.inject.Provider;
 
+@ContextScoped
 public class AssetManagerProvider implements Provider<AssetManager> {
     @Inject protected Context context;
 

File: roboguice/src/main/java/roboguice/activity/RoboAccountAuthenticatorActivity.java
Patch:
@@ -123,7 +123,7 @@ protected void onStop() {
     @Override
     protected void onDestroy() {
         eventManager.fire(new OnDestroyEvent());
-        eventManager.clear(this);
+        eventManager.clear();
         scope.exit(this);
         super.onDestroy();
     }

File: roboguice/src/main/java/roboguice/activity/RoboActivity.java
Patch:
@@ -145,7 +145,7 @@ protected void onStop() {
     @Override
     protected void onDestroy() {
         eventManager.fire(new OnDestroyEvent());
-        eventManager.clear(this);
+        eventManager.clear();
         scope.exit(this);
         super.onDestroy();
     }

File: roboguice/src/main/java/roboguice/activity/RoboActivityGroup.java
Patch:
@@ -122,7 +122,7 @@ protected void onStop() {
     @Override
     protected void onDestroy() {
         eventManager.fire(new OnDestroyEvent());
-        eventManager.clear(this);
+        eventManager.clear();
         scope.exit(this);
         super.onDestroy();
     }

File: roboguice/src/main/java/roboguice/activity/RoboExpandableListActivity.java
Patch:
@@ -123,7 +123,7 @@ protected void onStop() {
     @Override
     protected void onDestroy() {
         eventManager.fire(new OnDestroyEvent());
-        eventManager.clear(this);
+        eventManager.clear();
         scope.exit(this);
         super.onDestroy();
     }

File: roboguice/src/main/java/roboguice/activity/RoboLauncherActivity.java
Patch:
@@ -122,7 +122,7 @@ protected void onStop() {
     @Override
     protected void onDestroy() {
         eventManager.fire(new OnDestroyEvent());
-        eventManager.clear(this);
+        eventManager.clear();
         scope.exit(this);
         super.onDestroy();
     }

File: roboguice/src/main/java/roboguice/activity/RoboListActivity.java
Patch:
@@ -122,7 +122,7 @@ protected void onStop() {
     @Override
     protected void onDestroy() {
         eventManager.fire(new OnDestroyEvent());
-        eventManager.clear(this);
+        eventManager.clear();
         scope.exit(this);
         super.onDestroy();
     }

File: roboguice/src/main/java/roboguice/activity/RoboMapActivity.java
Patch:
@@ -122,7 +122,7 @@ protected void onStop() {
     @Override
     protected void onDestroy() {
         eventManager.fire(new OnDestroyEvent());
-        eventManager.clear(this);
+        eventManager.clear();
         scope.exit(this);
         super.onDestroy();
     }

File: roboguice/src/main/java/roboguice/activity/RoboPreferenceActivity.java
Patch:
@@ -132,7 +132,7 @@ protected void onStop() {
     @Override
     protected void onDestroy() {
         eventManager.fire(new OnDestroyEvent());
-        eventManager.clear(this);
+        eventManager.clear();
         scope.exit(this);
         super.onDestroy();
     }

File: roboguice/src/main/java/roboguice/activity/RoboTabActivity.java
Patch:
@@ -122,7 +122,7 @@ protected void onStop() {
     @Override
     protected void onDestroy() {
         eventManager.fire(new OnDestroyEvent());
-        eventManager.clear(this);
+        eventManager.clear();
         scope.exit(this);
         super.onDestroy();
     }

File: roboguice/src/main/java/roboguice/application/RoboApplication.java
Patch:
@@ -109,9 +109,9 @@ public Context get() {
         viewListener = new ViewListener(contextProvider, this, contextScope);
         extrasListener = new ExtrasListener(contextProvider);
         eventManager = allowContextObservers() ? new EventManager() : new NullEventManager();
-                
+
         if (allowPreferenceInjection())
-          preferenceListener = new PreferenceListener(contextProvider);
+          preferenceListener = new PreferenceListener(contextProvider, this, contextScope);
 
 
         staticTypeListeners = new ArrayList<StaticTypeListener>();

File: roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
Patch:
@@ -23,7 +23,7 @@
  * @param <ResultT>
  */
 public abstract class SafeAsyncTask<ResultT> implements Callable<ResultT> {
-    public static final int DEFAULT_POOL_SIZE = 4;
+    public static final int DEFAULT_POOL_SIZE = 25;
     protected static final Executor DEFAULT_EXECUTOR = Executors.newFixedThreadPool(DEFAULT_POOL_SIZE);
 
     protected Handler handler;

File: roboguice/src/main/java/roboguice/config/RoboModule.java
Patch:
@@ -1,7 +1,7 @@
 package roboguice.config;
 
 import roboguice.event.EventManager;
-import roboguice.event.ObserverTypeListener;
+import roboguice.event.ObservesTypeListener;
 import roboguice.inject.*;
 import roboguice.util.Ln;
 import roboguice.util.RoboAsyncTask;
@@ -119,7 +119,7 @@ protected void configure() {
           bindListener(Matchers.any(), preferenceListener);
 
         if (eventManager.isEnabled())
-            bindListener(Matchers.any(), new ObserverTypeListener(contextProvider, eventManager));
+            bindListener(Matchers.any(), new ObservesTypeListener(contextProvider, eventManager));
 
         requestStaticInjection( Ln.class );
         requestStaticInjection( RoboThread.class );

File: roboguice/src/main/java/roboguice/event/ObservesTypeListener.java
Patch:
@@ -18,11 +18,11 @@
  * @author Adam Tybor
  * @author John Ericksen
  */
-public class ObserverTypeListener implements TypeListener {
+public class ObservesTypeListener implements TypeListener {
     protected EventManager eventManager;
     protected Provider<Context> contextProvider;
 
-    public ObserverTypeListener(Provider<Context> contextProvider, EventManager eventManager) {
+    public ObservesTypeListener(Provider<Context> contextProvider, EventManager eventManager) {
         this.eventManager = eventManager;
         this.contextProvider = contextProvider;
     }

File: roboguice/src/main/java/roboguice/util/SafeAsyncTask.java
Patch:
@@ -23,7 +23,7 @@
  * @param <ResultT>
  */
 public abstract class SafeAsyncTask<ResultT> implements Callable<ResultT> {
-    public static final int DEFAULT_POOL_SIZE = 25;
+    public static final int DEFAULT_POOL_SIZE = 4;
     protected static final Executor DEFAULT_EXECUTOR = Executors.newFixedThreadPool(DEFAULT_POOL_SIZE);
 
     protected Handler handler;

File: roboguice/src/main/java/roboguice/activity/RoboActivity.java
Patch:
@@ -162,8 +162,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {
 
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
-        eventManager.notify( this, new OnKeyUpEvent(keyCode, event));
-        return super.onKeyUp(keyCode, event);
+        return eventManager.notifyWithResult( this, new OnKeyUpEvent(keyCode, event), false) || super.onKeyUp(keyCode, event);
     }
 
     @Override

File: roboguice/src/main/java/roboguice/activity/event/OnKeyUpEvent.java
Patch:
@@ -1,5 +1,7 @@
 package roboguice.activity.event;
 
+import roboguice.event.Returns;
+
 import android.view.KeyEvent;
 
 /**
@@ -8,6 +10,7 @@
  * @author Adam Tybor
  * @author John Ericksen
  */
+@Returns(boolean.class)
 public class OnKeyUpEvent {
 
         protected int keyCode;

File: roboguice/src/main/java/roboguice/activity/RoboActivity.java
Patch:
@@ -157,7 +157,7 @@ public void onConfigurationChanged(Configuration newConfig) {
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return eventManager.notifyWithResult( this, new OnKeyDownEvent(keyCode, event), boolean.class, false) || super.onKeyDown(keyCode,event);
+        return eventManager.notifyWithResult( this, new OnKeyDownEvent(keyCode, event), false) || super.onKeyDown(keyCode,event);
     }
 
     @Override

File: roboguice/src/main/java/roboguice/activity/event/OnKeyDownEvent.java
Patch:
@@ -1,5 +1,7 @@
 package roboguice.activity.event;
 
+import roboguice.event.Returns;
+
 import android.view.KeyEvent;
 
 /**
@@ -8,6 +10,7 @@
  * @author Adam Tybor
  * @author John Ericksen
  */
+@Returns(boolean.class)
 public class OnKeyDownEvent {
     
         protected int keyCode;

File: roboguice/src/main/java/roboguice/event/EventManager.java
Patch:
@@ -1,8 +1,8 @@
 package roboguice.event;
 
-import android.content.Context;
+import roboguice.inject.ContextScoped;
 
-import com.google.inject.Inject;
+import android.content.Context;
 
 import java.lang.ref.WeakReference;
 import java.lang.reflect.InvocationTargetException;

File: samples/src/roboguice/astroboy/activity/DoctorTenma.java
Patch:
@@ -47,7 +47,7 @@
 import static junit.framework.Assert.assertNull;
 
 public class DoctorTenma extends RoboActivity {
-    @Inject ContextObservingService mContextObservingService;
+    @Inject protected ContextObservingClassEventService mContextObservingService;
 
     // You can inject arbitrary View, String, and other types of resources.
     // See ResourceListener for details.
@@ -168,7 +168,7 @@ public void onClick(View arg0) {
     public boolean onKeyDown(int keyCode, KeyEvent event) {
         final BooleanResultHandler booleanReturnHandler = new BooleanResultHandler();
 
-        eventManager.notifyWithResult(this, roboActivityEventFactory.buildOnKeyDownEvent(keyCode, event), booleanReturnHandler);
+        eventManager.notifyWithResult(new OnKeyDownEvent(keyCode, event), booleanReturnHandler);
 
         if(booleanReturnHandler.isSuccess()){
             return true;

File: samples/src/roboguice/astroboy/service/ToastContextObserverService.java
Patch:
@@ -19,7 +19,7 @@ public ToastEvent buildToastEvent(String message) {
         return new ToastEvent(message);
     }
 
-    public class ToastEvent{
+    public static class ToastEvent{
         String message;
 
         public ToastEvent(String message) {

File: roboguice/src/main/java/roboguice/activity/event/OnConfigurationChangedEvent.java
Patch:
@@ -5,11 +5,12 @@
 /**
  * Class representing the event raised by RoboActivity.onConfigurationChanged()
  *
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnConfigurationChangedEvent {
 
-        private Configuration config;
+        protected final Configuration config;
 
         public OnConfigurationChangedEvent(Configuration config) {
             this.config = config;

File: roboguice/src/main/java/roboguice/activity/event/OnContentChangedEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onContentChanged()
  *
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnContentChangedEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnCreateEvent.java
Patch:
@@ -5,10 +5,12 @@
 /**
  * Class representing the event raised by RoboActivity.onCreate()
  *
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnCreateEvent{
-        private Bundle savedInstanceState;
+
+        protected final Bundle savedInstanceState;
 
         public OnCreateEvent(Bundle savedInstanceState) {
             this.savedInstanceState = savedInstanceState;

File: roboguice/src/main/java/roboguice/activity/event/OnDestroyEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onDestroy()
  *
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnDestroyEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnNewIntentEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onNewIntent()
  *
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnNewIntentEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnPauseEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onPause()
  *
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnPauseEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnRestartEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onRestart()
  *
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnRestartEvent {}

File: roboguice/src/main/java/roboguice/activity/event/OnResumeEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onResume()
  *
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnResumeEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnStartEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onStart()
  *
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnStartEvent {}

File: roboguice/src/main/java/roboguice/activity/event/OnStopEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onStop()
  *
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnStopEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/event/EventResultHandler.java
Patch:
@@ -1,6 +1,7 @@
-package roboguice.inject;
+package roboguice.event;
 
 /**
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public interface EventResultHandler {

File: roboguice/src/main/java/roboguice/event/NoOpResultHandler.java
Patch:
@@ -1,6 +1,7 @@
-package roboguice.inject;
+package roboguice.event;
 
 /**
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class NoOpResultHandler implements EventResultHandler {

File: samples/src/roboguice/astroboy/service/BooleanResultHandler.java
Patch:
@@ -1,13 +1,13 @@
 package roboguice.astroboy.service;
 
-import roboguice.inject.EventResultHandler;
+import roboguice.event.EventResultHandler;
 
 /**
  * @author John Ericksen
  */
 public class BooleanResultHandler implements EventResultHandler {
 
-    boolean success;
+    protected boolean success;
 
     public void handleReturn(Object value) {
         if(value instanceof Boolean && (Boolean) value){

File: samples/src/roboguice/astroboy/service/PreferenceChangeEventToastListener.java
Patch:
@@ -5,6 +5,8 @@
 import android.preference.Preference;
 
 import com.google.inject.Inject;
+import roboguice.activity.event.RoboActivityEventFactory;
+import roboguice.event.EventManager;
 
 /**
  * @author John Ericksen

File: samples/src/roboguice/astroboy/service/ToastContextObserverService.java
Patch:
@@ -3,15 +3,15 @@
 import android.content.Context;
 import android.widget.Toast;
 import com.google.inject.Inject;
-import roboguice.inject.ContextObserves;
+import roboguice.event.Observes;
 
 /**
  *@author John Ericksen
  */
 public class ToastContextObserverService {
     @Inject Context context;
 
-    public void toast(@ContextObserves ToastEvent event){
+    public void toast(@Observes ToastEvent event){
         Toast.makeText(context, event.getMessage(), Toast.LENGTH_LONG).show();
     }
 

File: roboguice/src/main/java/roboguice/activity/event/OnActivityResultEvent.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Class representing the event raised by RoboActivity.onActivityResult()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnActivityResultEvent {

File: roboguice/src/main/java/roboguice/activity/event/OnConfigurationChangedEvent.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Class representing the event raised by RoboActivity.onConfigurationChanged()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnConfigurationChangedEvent {

File: roboguice/src/main/java/roboguice/activity/event/OnContentChangedEvent.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onContentChanged()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnContentChangedEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnCreateEvent.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Class representing the event raised by RoboActivity.onCreate()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnCreateEvent{

File: roboguice/src/main/java/roboguice/activity/event/OnDestroyEvent.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onDestroy()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnDestroyEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnKeyDownEvent.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Class representing the event raised by RoboActivity.onKeyDown()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnKeyDownEvent {

File: roboguice/src/main/java/roboguice/activity/event/OnKeyUpEvent.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * Class representing the event raised by RoboActivity.onKeyUp()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnKeyUpEvent {

File: roboguice/src/main/java/roboguice/activity/event/OnNewIntentEvent.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onNewIntent()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnNewIntentEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnPauseEvent.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onPause()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnPauseEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnRestartEvent.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onRestart()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnRestartEvent {}

File: roboguice/src/main/java/roboguice/activity/event/OnResumeEvent.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onResume()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnResumeEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnStartEvent.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onStart()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnStartEvent {}

File: roboguice/src/main/java/roboguice/activity/event/OnStopEvent.java
Patch:
@@ -3,7 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onStop()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class OnStopEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/RoboActivityEventFactory.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * Factory for the @Observes and @Observer pre-defined RoboActivy Events.
  * 
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 @Singleton

File: roboguice/src/main/java/roboguice/event/EventManager.java
Patch:
@@ -19,7 +19,7 @@
  *      notify()
  *      notifyWithResult()
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 @Singleton

File: roboguice/src/main/java/roboguice/event/EventResultHandler.java
Patch:
@@ -1,7 +1,7 @@
 package roboguice.event;
 
 /**
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public interface EventResultHandler {

File: roboguice/src/main/java/roboguice/event/NoOpResultHandler.java
Patch:
@@ -1,7 +1,7 @@
 package roboguice.event;
 
 /**
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class NoOpResultHandler implements EventResultHandler {

File: roboguice/src/main/java/roboguice/event/Observer.java
Patch:
@@ -63,7 +63,7 @@
  *   }
  * }
  * }
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 @Retention(RUNTIME)

File: roboguice/src/main/java/roboguice/event/ObserverTypeListener.java
Patch:
@@ -14,7 +14,7 @@
  * Guice driven type listener which scans for the @Observer, @Observers, and @Observes annotations.
  * Registers these methods with the EventManager.
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 public class ObserverTypeListener implements TypeListener {

File: roboguice/src/main/java/roboguice/event/Observers.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * Annotation to allow a method to accept multiple @Observer annotations
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 @Retention(RUNTIME)

File: roboguice/src/main/java/roboguice/event/Observes.java
Patch:
@@ -25,7 +25,7 @@
  *     String data = event.getData() // "data"
  * }
  *
- * @author Adam Tabor
+ * @author Adam Tybor
  * @author John Ericksen
  */
 @Retention(RUNTIME)

File: roboguice/src/main/java/roboguice/activity/event/OnConfigurationChangedEvent.java
Patch:
@@ -5,11 +5,12 @@
 /**
  * Class representing the event raised by RoboActivity.onConfigurationChanged()
  *
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class OnConfigurationChangedEvent {
 
-        private Configuration config;
+        protected final Configuration config;
 
         public OnConfigurationChangedEvent(Configuration config) {
             this.config = config;

File: roboguice/src/main/java/roboguice/activity/event/OnContentChangedEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onContentChanged()
  *
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class OnContentChangedEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnCreateEvent.java
Patch:
@@ -5,10 +5,12 @@
 /**
  * Class representing the event raised by RoboActivity.onCreate()
  *
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class OnCreateEvent{
-        private Bundle savedInstanceState;
+
+        protected final Bundle savedInstanceState;
 
         public OnCreateEvent(Bundle savedInstanceState) {
             this.savedInstanceState = savedInstanceState;

File: roboguice/src/main/java/roboguice/activity/event/OnDestroyEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onDestroy()
  *
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class OnDestroyEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnNewIntentEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onNewIntent()
  *
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class OnNewIntentEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnPauseEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onPause()
  *
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class OnPauseEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnRestartEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onRestart()
  *
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class OnRestartEvent {}

File: roboguice/src/main/java/roboguice/activity/event/OnResumeEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onResume()
  *
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class OnResumeEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/activity/event/OnStartEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onStart()
  *
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class OnStartEvent {}

File: roboguice/src/main/java/roboguice/activity/event/OnStopEvent.java
Patch:
@@ -3,6 +3,7 @@
 /**
  * Class representing the event raised by RoboActivity.onStop()
  *
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class OnStopEvent {}
\ No newline at end of file

File: roboguice/src/main/java/roboguice/event/EventResultHandler.java
Patch:
@@ -1,6 +1,7 @@
-package roboguice.inject;
+package roboguice.event;
 
 /**
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public interface EventResultHandler {

File: roboguice/src/main/java/roboguice/event/NoOpResultHandler.java
Patch:
@@ -1,6 +1,7 @@
-package roboguice.inject;
+package roboguice.event;
 
 /**
+ * @author Adam Tabor
  * @author John Ericksen
  */
 public class NoOpResultHandler implements EventResultHandler {

File: samples/src/roboguice/astroboy/service/BooleanResultHandler.java
Patch:
@@ -1,13 +1,13 @@
 package roboguice.astroboy.service;
 
-import roboguice.inject.EventResultHandler;
+import roboguice.event.EventResultHandler;
 
 /**
  * @author John Ericksen
  */
 public class BooleanResultHandler implements EventResultHandler {
 
-    boolean success;
+    protected boolean success;
 
     public void handleReturn(Object value) {
         if(value instanceof Boolean && (Boolean) value){

File: samples/src/roboguice/astroboy/service/ToastContextObserverService.java
Patch:
@@ -3,15 +3,15 @@
 import android.content.Context;
 import android.widget.Toast;
 import com.google.inject.Inject;
-import roboguice.inject.ContextObserves;
+import roboguice.event.Observes;
 
 /**
  *@author John Ericksen
  */
 public class ToastContextObserverService {
     @Inject Context context;
 
-    public void toast(@ContextObserves ToastEvent event){
+    public void toast(@Observes ToastEvent event){
         Toast.makeText(context, event.getMessage(), Toast.LENGTH_LONG).show();
     }
 

File: roboguice/src/main/java/roboguice/inject/ContextObserverClassEventTypeListener.java
Patch:
@@ -11,7 +11,7 @@
 import java.lang.reflect.Method;
 
 /**
- * Injection type listener to bind the @ContextParameterObserver annotated methods to the
+ * Injection type listener to bind the @ContextObserves annotated methods to the
  * ContextObserverClassEventManager events.
  *
  * @author John Ericksen
@@ -32,9 +32,9 @@ public <I> void hear(TypeLiteral<I> iTypeLiteral, TypeEncounter<I> iTypeEncounte
                 Class<?>[] parameterTypes = method.getParameterTypes();
                 Class parameterType = parameterTypes[i];
                 for(Annotation annotation : annotationArray){
-                    if(annotation.annotationType().equals(ContextParameterObserver.class)){
+                    if(annotation.annotationType().equals(ContextObserves.class)){
                         if(parameterTypes.length > 1){
-                            throw new RuntimeException("Annotation @ContextParameterObserver must only annotate one parameter," +
+                            throw new RuntimeException("Annotation @ContextObserves must only annotate one parameter," +
                                     " which must be the only parameter in the listener method.");
                         }
                         iTypeEncounter.register(new ContextObserverClassEventMethodInjector<I>(contextProvider, observationManager, method, parameterType));;

File: roboguice/src/main/java/roboguice/inject/ContextObserves.java
Patch:
@@ -21,13 +21,13 @@
  *
  * triggers:
  *
- * public void handleEvent(@ContextParameterObserver EventParameter event){
+ * public void handleEvent(@ContextObserves EventParameter event){
  *     String data = event.getData() // "data"
  * }
  *
  * @author John Ericksen
  */
 @Retention(RUNTIME)
 @Target( { ElementType.PARAMETER })
-public @interface ContextParameterObserver {
+public @interface ContextObserves {
 }

File: samples/src/roboguice/astroboy/service/ContextObservingService.java
Patch:
@@ -33,10 +33,12 @@ public void onKeyDown(){
     }
 
     @ContextObserver(RoboActivityEvent.ON_KEY_DOWN)
-    public void onKeyDown(int keyCode, KeyEvent event) {
+    public boolean onKeyDown(int keyCode, KeyEvent event) {
         Ln.v("onKeyDown %1$s", event);
         if (keyCode == KeyEvent.KEYCODE_SEARCH) {
             Toast.makeText(context, "You pressed the search button", Toast.LENGTH_SHORT).show();
+            return true;
         }
+        return false;
     }
 }

File: samples/src/roboguice/astroboy/service/HybridObservingService.java
Patch:
@@ -8,7 +8,7 @@
 import roboguice.activity.RoboActivityEventFactory;
 import roboguice.inject.ContextObserver;
 import roboguice.inject.ContextObservers;
-import roboguice.inject.ContextParameterObserver;
+import roboguice.inject.ContextObserves;
 import roboguice.util.Ln;
 
 /**
@@ -32,7 +32,7 @@ public void onOutOfScopeLogger() {
         Ln.v("onOutOfScope; No idea which method was called");
     }
 
-    public void onKeyDown(@ContextParameterObserver RoboActivityEventFactory.OnKeyDownEvent onKeyDownEvent) {
+    public void onKeyDown(@ContextObserves RoboActivityEventFactory.OnKeyDownEvent onKeyDownEvent) {
         Ln.v("onKeyDown %1$s", onKeyDownEvent.getEvent());
         if (onKeyDownEvent.getKeyCode() == KeyEvent.KEYCODE_SEARCH) {
             Toast.makeText(context, "You pressed the search button", Toast.LENGTH_SHORT).show();

File: samples/src/roboguice/astroboy/service/ToastContextObserverService.java
Patch:
@@ -3,15 +3,15 @@
 import android.content.Context;
 import android.widget.Toast;
 import com.google.inject.Inject;
-import roboguice.inject.ContextParameterObserver;
+import roboguice.inject.ContextObserves;
 
 /**
  *@author John Ericksen
  */
 public class ToastContextObserverService {
     @Inject Context context;
 
-    public void toast(@ContextParameterObserver ToastEvent event){
+    public void toast(@ContextObserves ToastEvent event){
         Toast.makeText(context, event.getMessage(), Toast.LENGTH_LONG).show();
     }
 

File: samples/src/roboguice/astroboy/bean/Person.java
Patch:
@@ -19,8 +19,8 @@
 
 public class Person {
 
-    private final String name;
-    private final Date   age;
+    protected final String name;
+    protected final Date   age;
 
     public Person(String name) {
         this.name = name;

File: roboguice/src/main/java/roboguice/service/RoboService.java
Patch:
@@ -25,7 +25,7 @@
  * injection of collaborators, using Google Guice.<br /> <br />
  * 
  * Your own services that usually extend from {@link Service} should now extend from
- * {@link GuiceActivity}.<br /> <br />
+ * {@link RoboService}.<br /> <br />
  *
  * If we didn't provide what you need, you have two options : either post an issue on <a
  * href="http://code.google.com/p/roboguice/issues/list">the bug tracker</a>, or

File: tests/src/roboguice/test/SafeAsyncTest.java
Patch:
@@ -182,9 +182,11 @@ protected void onFinally() {
     }
 
 
+    /*
     @MediumTest
     public void testCancel() throws InterruptedException {
         throw new UnsupportedOperationException("not implemented yet");
     }
+    */
 
 }

File: roboguice/src/main/java/roboguice/activity/GuiceListActivity.java
Patch:
@@ -27,9 +27,9 @@
 import android.view.ViewGroup.LayoutParams;
 
 /**
- * A {@link GuiceListActivity} extends from {@link ListActivity} to provide dynamic injection of collaborators, using
- * Google Guice.<br />
- *
+ * A {@link GuiceListActivity} extends from {@link ListActivity} to provide
+ * dynamic injection of collaborators, using Google Guice.<br />
+ * 
  * @see GuiceActivity
  * 
  * @author Mike Burton

File: roboguice/src/main/java/roboguice/config/AbstractAndroidModule.java
Patch:
@@ -11,7 +11,7 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions
- * and limitations under the License. 
+ * and limitations under the License.
  */
 package roboguice.config;
 
@@ -31,8 +31,9 @@ public abstract class AbstractAndroidModule extends AbstractModule {
     @Override
     protected void requestStaticInjection(Class<?>... types) {
         super.requestStaticInjection(types);
-        for( StaticTypeListener l : listeners )
+        for (StaticTypeListener l : listeners) {
             l.requestStaticInjection(types);
+        }
     }
 
     public void setStaticTypeListeners(List<StaticTypeListener> listeners) {

File: roboguice/src/main/java/roboguice/inject/ActivityProvider.java
Patch:
@@ -28,7 +28,8 @@
  */
 @Singleton
 public class ActivityProvider implements Provider<Activity> {
-    @Inject Provider<Context> contextProvider;
+    @Inject
+    Provider<Context> contextProvider;
 
     public Activity get() {
         return (Activity) contextProvider.get();

File: roboguice/src/main/java/roboguice/inject/ContentResolverProvider.java
Patch:
@@ -27,7 +27,8 @@
  */
 @ContextScoped
 public class ContentResolverProvider implements Provider<ContentResolver> {
-    @Inject protected Context context;
+    @Inject
+    protected Context context;
 
     public ContentResolver get() {
         return context.getContentResolver();

File: roboguice/src/main/java/roboguice/inject/GuiceApplicationProvider.java
Patch:
@@ -26,7 +26,7 @@
  * @author Mike Burton
  */
 @Singleton
-public class GuiceApplicationProvider<T extends Application> implements Provider<T>{
+public class GuiceApplicationProvider<T extends Application> implements Provider<T> {
     @Inject
     protected Application application;
 

File: roboguice/src/main/java/roboguice/inject/InjectView.java
Patch:
@@ -24,8 +24,9 @@
 import com.google.inject.BindingAnnotation;
 
 /**
- * Indicates that a variable member of a class (whether static or not) should be injected with an Android view. The
- * value is compulsory, and correspond to the id of the view.<br />
+ * Indicates that a variable member of a class (whether static or not) should be
+ * injected with an Android view. The value is compulsory, and correspond to the
+ * id of the view.<br />
  * Usage example:<br /> {@code @InjectView(R.string.hello) protected TextView hello;}
  * 
  * @author Mike Burton

File: roboguice/src/main/java/roboguice/inject/SharedPreferencesProvider.java
Patch:
@@ -32,7 +32,8 @@ public class SharedPreferencesProvider implements Provider<SharedPreferences> {
     @SharedPreferencesName
     protected String preferencesName = DEFAULT;
 
-    @Inject protected Provider<Context> contextProvider;
+    @Inject
+    protected Provider<Context> contextProvider;
 
     public SharedPreferencesProvider() {
     }

File: roboguice/src/main/java/roboguice/application/GuiceApplication.java
Patch:
@@ -124,7 +124,8 @@ protected void initInstanceMembers() {
      */
     protected Injector createInjector() {
         ArrayList<Module> modules = new ArrayList<Module>();
-        Module roboguiceModule = new RoboGuiceModule(contextScope, throwingContextProvider, contextProvider, resourceListener, viewListener, extrasListener);
+        Module roboguiceModule = new RoboGuiceModule(contextScope, throwingContextProvider, contextProvider, resourceListener, viewListener, extrasListener,
+                this);
         modules.add(roboguiceModule);
         addApplicationModules(modules);
         for (Module m : modules) {

File: samples/src/roboguice/astroboy/AstroboyApplication.java
Patch:
@@ -25,7 +25,7 @@ public class AstroboyApplication extends GuiceApplication {
 
     @Override
     protected void addApplicationModules(List<Module> modules) {
-        modules.add(new AstroboyModule(this));
+        modules.add(new AstroboyModule());
     }
 
 }

File: samples/src/roboguice/astroboy/AstroboyModule.java
Patch:
@@ -26,9 +26,9 @@
 import roboguice.astroboy.service.TalkingThingMockImpl;
 import roboguice.config.AbstractAndroidModule;
 import roboguice.inject.ExtraConverter;
+import roboguice.inject.SharedPreferencesName;
 
 import com.google.inject.TypeLiteral;
-import com.google.inject.name.Names;
 
 public class AstroboyModule extends AbstractAndroidModule {
 
@@ -57,6 +57,6 @@ protected void configure() {
         }).to(DateTwiceExtraConverter.class);
 
         // BUG need a better way to set default preferences context
-        bindConstant().annotatedWith(Names.named("sharedPreferencesContext")).to("roboguice.astroboy");
+        bindConstant().annotatedWith(SharedPreferencesName.class).to("roboguice.astroboy");
     }
 }

File: roboguice/src/main/java/roboguice/activity/GuiceActivity.java
Patch:
@@ -47,7 +47,8 @@
  * You can have access to the Guice {@link Injector} at any time, by calling {@link #getInjector()}.<br />
  * However, you will not have access to Context scoped beans until {@link #onCreate(Bundle)} is called. <br />
  * <br />
- *
+ * 
+ * @author Mike Burton
  */
 public class GuiceActivity extends Activity implements InjectorProvider {
     protected ContextScope scope;

File: roboguice/src/main/java/roboguice/activity/GuiceExpandableListActivity.java
Patch:
@@ -31,6 +31,8 @@
  * collaborators, using Google Guice.<br />
  *
  * @see GuiceActivity
+ * 
+ * @author Mike Burton
  */
 public class GuiceExpandableListActivity extends ExpandableListActivity implements InjectorProvider {
     protected ContextScope scope;

File: roboguice/src/main/java/roboguice/activity/GuiceListActivity.java
Patch:
@@ -31,6 +31,8 @@
  * Google Guice.<br />
  *
  * @see GuiceActivity
+ * 
+ * @author Mike Burton
  */
 public class GuiceListActivity extends ListActivity implements InjectorProvider {
     protected ContextScope scope;

File: roboguice/src/main/java/roboguice/activity/GuiceMapActivity.java
Patch:
@@ -31,6 +31,8 @@
  * Google Guice.<br />
  *
  * @see GuiceActivity
+ * 
+ * @author Mike Burton
  */
 public abstract class GuiceMapActivity extends MapActivity implements InjectorProvider {
     protected ContextScope scope;

File: roboguice/src/main/java/roboguice/activity/GuiceSplashActivity.java
Patch:
@@ -17,7 +17,7 @@
  * To use, simply override onCreate to call setContentView.
  * Then override startNextActivity to specify where to go next.
  *
- * @author mike
+ * @author Mike Burton
  *
  */
 public abstract class GuiceSplashActivity extends Activity {

File: roboguice/src/main/java/roboguice/application/GuiceApplication.java
Patch:
@@ -79,6 +79,8 @@
  * android:name="roboguice.application.GuiceApplication"> [...] </application> }
  *
  * @see GuiceInjectableApplication How to get your Application injected as well.
+ *
+ * @author Mike Burton
  */
 public class GuiceApplication extends Application implements Module, InjectorProvider {
 

File: roboguice/src/main/java/roboguice/inject/ContextScoped.java
Patch:
@@ -28,6 +28,8 @@
 /**
  * Apply this to implementation classes when you want one instance per context
  * instance.
+ * 
+ * @author Mike Burton
  */
 @Target({ TYPE, METHOD, FIELD }) @Retention(RUNTIME) @ScopeAnnotation
 public @interface ContextScoped {}

File: roboguice/src/main/java/roboguice/inject/ExtraConverter.java
Patch:
@@ -43,7 +43,7 @@
  * @param <FROM>
  * @param <TO>
  *
- * @author py.ricau+roboguice@gmail.com (Pierre-Yves Ricau)
+ * @author Pierre-Yves Ricau (py.ricau+roboguice@gmail.com)
  */
 public interface ExtraConverter<FROM, TO> {
     /**

File: roboguice/src/main/java/roboguice/inject/InjectExtra.java
Patch:
@@ -47,6 +47,8 @@
  * <br />
  * Usage example:<br /> {@code @InjectExtra("someValue") protected Integer someValue;}<br />
  * <br />{@code @InjectExtra("someValue") @Nullable protected Integer someValue;}
+ * 
+ * @author Mike Burton
  */
 @Retention(RUNTIME)
 @Target( { ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD })

File: roboguice/src/main/java/roboguice/inject/InjectResource.java
Patch:
@@ -27,6 +27,8 @@
  * Indicates that a variable member of a class (whether static or not) should be injected with an Android resource. The
  * value is compulsory, and correspond to the id of the resource.<br />
  * Usage example:<br /> {@code @InjectResource(R.string.hello) protected String hello;}
+ * 
+ * @author Mike Burton
  */
 @Retention(RUNTIME)
 @Target( { ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD })

File: roboguice/src/main/java/roboguice/inject/InjectView.java
Patch:
@@ -27,6 +27,8 @@
  * Indicates that a variable member of a class (whether static or not) should be injected with an Android view. The
  * value is compulsory, and correspond to the id of the view.<br />
  * Usage example:<br /> {@code @InjectView(R.string.hello) protected TextView hello;}
+ * 
+ * @author Mike Burton
  */
 @Retention(RUNTIME)
 @Target( { ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD })

File: samples/src/roboguice/astroboy/AstroboyModule.java
Patch:
@@ -45,9 +45,6 @@ protected void configure() {
          */
         bind(TalkingThing.class).to(TalkingThingMockImpl.class);
 
-        // BUG it would be nice if this particular binding could be done automatically somehow
-        bind(AstroboyApplication.class).toInstance(application);
-
         bind(Person.class).toProvider(PersonFromNameExtraProvider.class);
 
         bind(new TypeLiteral<ExtraConverter<String, Person>>() {

File: samples/src/roboguice/astroboy/AstroboyApplication.java
Patch:
@@ -11,7 +11,7 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions
- * and limitations under the License. 
+ * and limitations under the License.
  */
 package roboguice.astroboy;
 
@@ -25,7 +25,7 @@ public class AstroboyApplication extends GuiceApplication {
 
     @Override
     protected void addApplicationModules(List<Module> modules) {
-        modules.add(new AstroboyModule());
+        modules.add(new AstroboyModule(this));
     }
 
 }

File: robo-guice/src/main/java/roboguice/activity/GuiceActivity.java
Patch:
@@ -11,12 +11,13 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions
- * and limitations under the License. 
+ * and limitations under the License.
  */
 package roboguice.activity;
 
 import roboguice.application.GuiceApplication;
 import roboguice.inject.ContextScope;
+import roboguice.inject.InjectorProvider;
 import android.app.Activity;
 import android.os.Bundle;
 import android.view.View;
@@ -47,7 +48,7 @@
  * <br />
  * 
  */
-public class GuiceActivity extends Activity {
+public class GuiceActivity extends Activity implements InjectorProvider {
     protected ContextScope scope;
 
     @Override

File: robo-guice/src/main/java/roboguice/activity/GuiceExpandableListActivity.java
Patch:
@@ -11,12 +11,13 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions
- * and limitations under the License. 
+ * and limitations under the License.
  */
 package roboguice.activity;
 
 import roboguice.application.GuiceApplication;
 import roboguice.inject.ContextScope;
+import roboguice.inject.InjectorProvider;
 import android.app.ExpandableListActivity;
 import android.os.Bundle;
 import android.view.View;
@@ -30,7 +31,7 @@
  * 
  * @see GuiceActivity
  */
-public class GuiceExpandableListActivity extends ExpandableListActivity {
+public class GuiceExpandableListActivity extends ExpandableListActivity implements InjectorProvider {
     protected ContextScope scope;
 
     @Override

File: robo-guice/src/main/java/roboguice/activity/GuiceListActivity.java
Patch:
@@ -11,12 +11,13 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions
- * and limitations under the License. 
+ * and limitations under the License.
  */
 package roboguice.activity;
 
 import roboguice.application.GuiceApplication;
 import roboguice.inject.ContextScope;
+import roboguice.inject.InjectorProvider;
 import android.app.ListActivity;
 import android.os.Bundle;
 import android.view.View;
@@ -30,7 +31,7 @@
  * 
  * @see GuiceActivity
  */
-public class GuiceListActivity extends ListActivity {
+public class GuiceListActivity extends ListActivity implements InjectorProvider {
     protected ContextScope scope;
 
     @Override

File: robo-guice/src/main/java/roboguice/activity/GuiceMapActivity.java
Patch:
@@ -11,12 +11,13 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions
- * and limitations under the License. 
+ * and limitations under the License.
  */
 package roboguice.activity;
 
 import roboguice.application.GuiceApplication;
 import roboguice.inject.ContextScope;
+import roboguice.inject.InjectorProvider;
 import android.os.Bundle;
 import android.view.View;
 import android.view.ViewGroup.LayoutParams;
@@ -30,7 +31,7 @@
  * 
  * @see GuiceActivity
  */
-public abstract class GuiceMapActivity extends MapActivity {
+public abstract class GuiceMapActivity extends MapActivity implements InjectorProvider {
     protected ContextScope scope;
 
     @Override

File: robo-guice/src/main/java/roboguice/application/GuiceApplication.java
Patch:
@@ -11,7 +11,7 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions
- * and limitations under the License. 
+ * and limitations under the License.
  */
 package roboguice.application;
 
@@ -24,6 +24,7 @@
 import roboguice.inject.ContextScoped;
 import roboguice.inject.ExtrasListener;
 import roboguice.inject.GuiceApplicationProvider;
+import roboguice.inject.InjectorProvider;
 import roboguice.inject.ResourceListener;
 import roboguice.inject.ResourcesProvider;
 import roboguice.inject.SharedPreferencesProvider;
@@ -77,7 +78,7 @@
  * 
  * @see GuiceInjectableApplication How to get your Application injected as well.
  */
-public class GuiceApplication extends Application implements Module {
+public class GuiceApplication extends Application implements Module, InjectorProvider {
 
     /**
      * The {@link Injector} of your application.

File: robo-guice/src/main/java/roboguice/inject/InjectExtra.java
Patch:
@@ -26,4 +26,5 @@
 @BindingAnnotation
 public @interface InjectExtra {
     String value();
+    boolean optional() default false;
 }

File: samples/src/roboguice/astroboy/activity/DoctorTenma.java
Patch:
@@ -26,7 +26,7 @@ public class DoctorTenma extends GuiceActivity {
     // equivalent to getIntent().getExtras().getXXX()
     // See ExtrasListener for details.
     // They can be @Nullable, or have @DefaultBoolean, Integer, String values.
-    @InjectExtra("someValue") @Nullable protected Integer someValue;
+    @InjectExtra(value="someValue", optional=true) @Nullable protected Integer someValue;
 
     // You can inject various useful android objects.
     // See GuiceApplication.configure to see what's available.

File: src/roboguice/inject/ExtrasListener.java
Patch:
@@ -83,7 +83,7 @@ public void injectMembers(T instance) {
             throw new RuntimeException(e);
 
         } catch (IllegalArgumentException f ) {
-            throw new IllegalArgumentException( String.format("Can't assign %s value %s to %s field %s", value.getClass(), value, field.getType(), field.getName() ));
+            throw new IllegalArgumentException( String.format("Can't assign %s value %s to %s field %s", value!=null ? value.getClass() : "(null)" , value, field.getType(), field.getName() ));
         }
     }
 

File: src/roboguice/inject/ResourceListener.java
Patch:
@@ -67,7 +67,7 @@ public void injectMembers(T instance) {
             throw new RuntimeException(e);
 
         } catch (IllegalArgumentException f ) {
-            throw new IllegalArgumentException( String.format("Can't assign %s value %s to %s field %s", value.getClass(), value, field.getType(), field.getName() ));
+            throw new IllegalArgumentException( String.format("Can't assign %s value %s to %s field %s", value!=null ? value.getClass() : "(null)", value, field.getType(), field.getName() ));
         }
     }
 }
\ No newline at end of file

