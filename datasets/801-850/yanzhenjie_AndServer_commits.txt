File: api/src/main/java/com/yanzhenjie/andserver/framework/body/StringBody.java
Patch:
@@ -47,12 +47,12 @@ public StringBody(String body, MediaType mediaType) {
 
         this.mMediaType = mediaType;
         if (mMediaType == null) {
-            mMediaType = new MediaType(MediaType.TEXT_PLAIN, Charsets.UTF_8);
+            mMediaType = new MediaType(MediaType.TEXT_PLAIN, Charsets.toCharset("utf-8"));
         }
 
         Charset charset = mMediaType.getCharset();
         if (charset == null) {
-            charset = Charsets.UTF_8;
+            charset = Charsets.toCharset("utf-8");
         }
         this.mBody = body.getBytes(charset);
     }
@@ -72,7 +72,7 @@ public long contentLength() {
     public MediaType contentType() {
         Charset charset = mMediaType.getCharset();
         if (charset == null) {
-            charset = Charsets.UTF_8;
+            charset = Charsets.toCharset("utf-8");
             return new MediaType(mMediaType.getType(), mMediaType.getSubtype(), charset);
         }
         return mMediaType;

File: api/src/main/java/com/yanzhenjie/andserver/http/StandardRequest.java
Patch:
@@ -545,7 +545,7 @@ private static MultiValueMap<String, String> parseParameters(@NonNull String inp
             if (end > 0 && end < element.length() - 1) {
                 String key = element.substring(0, end);
                 String value = element.substring(end + 1);
-                parameters.add(key, UrlCoder.urlDecode(value, Charsets.UTF_8));
+                parameters.add(key, UrlCoder.urlDecode(value, Charsets.toCharset("utf-8")));
             }
         }
         return parameters;

File: api/src/main/java/com/yanzhenjie/andserver/http/Uri.java
Patch:
@@ -393,7 +393,7 @@ public static MultiValueMap<String, String> queryToParameters(String query) {
                 if (end > 0 && end < element.length() - 1) {
                     String key = element.substring(0, end);
                     String value = element.substring(end + 1);
-                    valueMap.add(key, UrlCoder.urlDecode(value, Charsets.UTF_8));
+                    valueMap.add(key, UrlCoder.urlDecode(value, Charsets.toCharset("utf-8")));
                 }
             }
         }

File: api/src/main/java/com/yanzhenjie/andserver/http/multipart/StandardMultipartResolver.java
Patch:
@@ -162,10 +162,10 @@ private MultipartParsingResult parseRequest(HttpRequest request) throws Multipar
     private String determineEncoding(HttpRequest request) {
         MediaType mimeType = request.getContentType();
         if (mimeType == null) {
-            return Charsets.UTF_8.name();
+            return Charsets.toCharset("utf-8").name();
         }
         Charset charset = mimeType.getCharset();
-        return charset == null ? Charsets.UTF_8.name() : charset.name();
+        return charset == null ? Charsets.toCharset("utf-8").name() : charset.name();
     }
 
     /**

File: api/src/main/java/com/yanzhenjie/andserver/ComponentRegister.java
Patch:
@@ -64,7 +64,7 @@ public void register(Register register, String group)
 
         for (String path: pathList) {
             if (path.endsWith(ANDSERVER_REGISTER_SUFFIX)) {
-                String packageName = path.substring(0, path.indexOf(ANDSERVER_REGISTER_SUFFIX));
+                String packageName = path.substring(0, path.lastIndexOf(ANDSERVER_REGISTER_SUFFIX));
                 for (String clazz: REGISTER_LIST) {
                     String className = String.format("%s%s%s", packageName, PROCESSOR_PACKAGE, clazz);
                     registerClass(register, group, className);

File: api/src/main/java/com/yanzhenjie/andserver/framework/body/StringBody.java
Patch:
@@ -47,12 +47,12 @@ public StringBody(String body, MediaType mediaType) {
 
         this.mMediaType = mediaType;
         if (mMediaType == null) {
-            mMediaType = new MediaType(MediaType.TEXT_PLAIN, Charsets.UTF_8);
+            mMediaType = new MediaType(MediaType.TEXT_PLAIN, Charsets.toCharset("utf-8"));
         }
 
         Charset charset = mMediaType.getCharset();
         if (charset == null) {
-            charset = Charsets.UTF_8;
+            charset = Charsets.toCharset("utf-8");
         }
         this.mBody = body.getBytes(charset);
     }
@@ -72,7 +72,7 @@ public long contentLength() {
     public MediaType contentType() {
         Charset charset = mMediaType.getCharset();
         if (charset == null) {
-            charset = Charsets.UTF_8;
+            charset = Charsets.toCharset("utf-8");
             return new MediaType(mMediaType.getType(), mMediaType.getSubtype(), charset);
         }
         return mMediaType;

File: api/src/main/java/com/yanzhenjie/andserver/http/StandardRequest.java
Patch:
@@ -545,7 +545,7 @@ private static MultiValueMap<String, String> parseParameters(@NonNull String inp
             if (end > 0 && end < element.length() - 1) {
                 String key = element.substring(0, end);
                 String value = element.substring(end + 1);
-                parameters.add(key, UrlCoder.urlDecode(value, Charsets.UTF_8));
+                parameters.add(key, UrlCoder.urlDecode(value, Charsets.toCharset("utf-8")));
             }
         }
         return parameters;

File: api/src/main/java/com/yanzhenjie/andserver/http/Uri.java
Patch:
@@ -393,7 +393,7 @@ public static MultiValueMap<String, String> queryToParameters(String query) {
                 if (end > 0 && end < element.length() - 1) {
                     String key = element.substring(0, end);
                     String value = element.substring(end + 1);
-                    valueMap.add(key, UrlCoder.urlDecode(value, Charsets.UTF_8));
+                    valueMap.add(key, UrlCoder.urlDecode(value, Charsets.toCharset("utf-8")));
                 }
             }
         }

File: api/src/main/java/com/yanzhenjie/andserver/http/multipart/StandardMultipartResolver.java
Patch:
@@ -162,10 +162,10 @@ private MultipartParsingResult parseRequest(HttpRequest request) throws Multipar
     private String determineEncoding(HttpRequest request) {
         MediaType mimeType = request.getContentType();
         if (mimeType == null) {
-            return Charsets.UTF_8.name();
+            return Charsets.toCharset("utf-8").name();
         }
         Charset charset = mimeType.getCharset();
-        return charset == null ? Charsets.UTF_8.name() : charset.name();
+        return charset == null ? Charsets.toCharset("utf-8").name() : charset.name();
     }
 
     /**

File: api/src/main/java/com/yanzhenjie/andserver/ComponentRegister.java
Patch:
@@ -64,7 +64,7 @@ public void register(Register register, String group)
 
         for (String path: pathList) {
             if (path.endsWith(ANDSERVER_REGISTER_SUFFIX)) {
-                String packageName = path.substring(0, path.indexOf(ANDSERVER_REGISTER_SUFFIX));
+                String packageName = path.substring(0, path.lastIndexOf(ANDSERVER_REGISTER_SUFFIX));
                 for (String clazz: REGISTER_LIST) {
                     String className = String.format("%s%s%s", packageName, PROCESSOR_PACKAGE, clazz);
                     registerClass(register, group, className);

File: api/src/main/java/com/yanzhenjie/andserver/framework/website/AssetsWebsite.java
Patch:
@@ -108,13 +108,13 @@ private void tryScanFile() {
                 if (!isScanned) {
                     List<String> fileList = mReader.scanFile(mRootPath);
                     for (String filePath : fileList) {
-                        String httpPath = filePath.substring(mRootPath.length(), filePath.length());
+                        String httpPath = filePath.substring(mRootPath.length());
                         httpPath = addStartSlash(httpPath);
                         mPatternMap.put(httpPath, filePath);
 
                         String indexFileName = getIndexFileName();
-                        if (filePath.endsWith(indexFileName)) {
-                            httpPath = filePath.substring(0, filePath.indexOf(indexFileName) - 1);
+                        if (httpPath.endsWith(indexFileName)) {
+                            httpPath = httpPath.substring(0, httpPath.indexOf(indexFileName) - 1);
                             httpPath = addStartSlash(httpPath);
                             mPatternMap.put(httpPath, filePath);
                             mPatternMap.put(addEndSlash(httpPath), filePath);

File: processor/src/main/java/com/yanzhenjie/andserver/processor/ControllerProcessor.java
Patch:
@@ -1048,12 +1048,13 @@ private boolean isBasicType(TypeName typeName) {
     }
 
     private void createBasicParameter(CodeBlock.Builder builder, TypeName type, String name, int index) {
-        builder.addStatement("$T $L$L = null", type, name, index);
+        TypeName box = type.isBoxedPrimitive() ? type : type.box();
+        builder.addStatement("$T $L$L = null", box, name, index);
     }
 
     private void assignmentBasicParameter(CodeBlock.Builder builder, TypeName type, String name, int index) {
         builder.beginControlFlow("try");
-        TypeName box = type.isBoxedPrimitive() ? type.box() : type;
+        TypeName box = type.isBoxedPrimitive() ? type : type.box();
         builder.addStatement("$L$L = $T.valueOf($L$LStr)", name, index, box, name, index);
         builder.nextControlFlow("catch (Throwable e)").addStatement("throw new $T(e)", mParamError).endControlFlow();
     }

File: sample/src/main/java/com/yanzhenjie/andserver/sample/controller/TestController.java
Patch:
@@ -44,8 +44,8 @@ String info(@PathVariable(name = "userId") String userId) {
     }
 
     @PutMapping(path = "/get/{userId}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
-    String modify(@PathVariable("userId") String userId, @RequestParam(name = "sex") String sex) {
-        return String.format("The userId is %1$s, and the sex is %2$s.", userId, sex);
+    String modify(@PathVariable("userId") String userId, @RequestParam(name = "sex") String sex, @RequestParam(name = "age") int age) {
+        return String.format("The userId is %1$s, and the sex is %2$s, and the age is %3$s.", userId, sex, age);
     }
 
     @PostMapping(path = "/login", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)

File: processor/src/main/java/com/yanzhenjie/andserver/processor/ControllerProcessor.java
Patch:
@@ -1048,12 +1048,13 @@ private boolean isBasicType(TypeName typeName) {
     }
 
     private void createBasicParameter(CodeBlock.Builder builder, TypeName type, String name, int index) {
-        builder.addStatement("$T $L$L = null", type, name, index);
+        TypeName box = type.isBoxedPrimitive() ? type : type.box();
+        builder.addStatement("$T $L$L = null", box, name, index);
     }
 
     private void assignmentBasicParameter(CodeBlock.Builder builder, TypeName type, String name, int index) {
         builder.beginControlFlow("try");
-        TypeName box = type.isBoxedPrimitive() ? type.box() : type;
+        TypeName box = type.isBoxedPrimitive() ? type : type.box();
         builder.addStatement("$L$L = $T.valueOf($L$LStr)", name, index, box, name, index);
         builder.nextControlFlow("catch (Throwable e)").addStatement("throw new $T(e)", mParamError).endControlFlow();
     }

File: sample/src/main/java/com/yanzhenjie/andserver/sample/controller/TestController.java
Patch:
@@ -44,8 +44,8 @@ String info(@PathVariable(name = "userId") String userId) {
     }
 
     @PutMapping(path = "/get/{userId}", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
-    String modify(@PathVariable("userId") String userId, @RequestParam(name = "sex") String sex) {
-        return String.format("The userId is %1$s, and the sex is %2$s.", userId, sex);
+    String modify(@PathVariable("userId") String userId, @RequestParam(name = "sex") String sex, @RequestParam(name = "age") int age) {
+        return String.format("The userId is %1$s, and the sex is %2$s, and the age is %3$s.", userId, sex, age);
     }
 
     @PostMapping(path = "/login", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)

File: processor/src/main/java/com/yanzhenjie/andserver/processor/ControllerProcessor.java
Patch:
@@ -379,6 +379,9 @@ private Mapping getTypeMapping(TypeElement type) {
             DeleteMapping deleteMapping = type.getAnnotation(DeleteMapping.class);
             if (deleteMapping != null) mapping = new Delete(deleteMapping, isRest);
         }
+        if (mapping == null) {
+            mapping = new Null(isRest);
+        }
         return mapping;
     }
 

File: api/src/main/java/com/yanzhenjie/andserver/framework/handler/MappingHandler.java
Patch:
@@ -101,7 +101,7 @@ protected Map<String, String> getPathVariable(@NonNull String httpPath) {
         List<Path.Rule> ruleList = mMapping.getPath().getRuleList();
         for (Path.Rule rule : ruleList) {
             List<Path.Segment> segments = rule.getSegments();
-            if (httpSegments.size() != httpSegments.size()) continue;
+            if (httpSegments.size() != segments.size()) continue;
 
             String path = Path.listToPath(segments);
             if (path.equals(httpPath)) return Collections.emptyMap();

File: api/src/main/java/com/yanzhenjie/andserver/http/StandardRequest.java
Patch:
@@ -391,7 +391,7 @@ private void parseParameter() {
         }
 
         MediaType mediaType = getContentType();
-        if (MediaType.APPLICATION_FORM_URLENCODED.equals(mediaType)) {
+        if (MediaType.APPLICATION_FORM_URLENCODED.includes(mediaType)) {
             try {
                 RequestBody body = getBody();
                 String bodyString = body == null ? "" : body.string();

File: processor/src/main/java/com/yanzhenjie/andserver/processor/WebsiteProcessor.java
Patch:
@@ -109,7 +109,6 @@ private List<TypeElement> findAnnotation(RoundEnvironment roundEnv) {
 
                 if (mTypes.isSubtype(superclass, mWebstieMirror)) {
                     elements.add(typeElement);
-                    break;
                 } else {
                     mLog.w(String.format("The annotation Website must be used in a subclass of [Website] on %s.",
                         typeElement.getQualifiedName()));

File: andserver/src/main/java/com/yanzhenjie/andserver/Core.java
Patch:
@@ -103,7 +103,7 @@ public void run() {
                         .setSocketConfig(
                                 SocketConfig.custom()
                                         .setSoKeepAlive(true)
-                                        .setSoReuseAddress(false)
+                                        .setSoReuseAddress(true)
                                         .setSoTimeout(mTimeout)
                                         .setTcpNoDelay(false)
                                         .build()

File: andserver/src/main/java/com/yanzhenjie/andserver/Core.java
Patch:
@@ -103,7 +103,7 @@ public void run() {
                         .setSocketConfig(
                                 SocketConfig.custom()
                                         .setSoKeepAlive(true)
-                                        .setSoReuseAddress(false)
+                                        .setSoReuseAddress(true)
                                         .setSoTimeout(mTimeout)
                                         .setTcpNoDelay(false)
                                         .build()

File: andserver/src/main/java/com/yanzhenjie/andserver/DispatchRequestHandler.java
Patch:
@@ -117,7 +117,7 @@ private void handleRequest(RequestHandler handler, HttpRequest request, HttpResp
     /**
      * The processor that gets the current request.
      */
-    private RequestHandler getRequestHandler(HttpRequest request, HttpContext context) {
+    private RequestHandler getRequestHandler(HttpRequest request, HttpContext context) throws HttpException, IOException {
         String path = getRequestPath(request);
         if (mWebSite != null && mWebSite.intercept(request, context)) {
             return mWebSite;

File: andserver/src/main/java/com/yanzhenjie/andserver/SimpleRequestHandler.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.yanzhenjie.andserver;
 
+import com.yanzhenjie.andserver.view.View;
+
 import org.apache.httpcore.HttpException;
 import org.apache.httpcore.HttpRequest;
 import org.apache.httpcore.HttpResponse;

File: andserver/src/main/java/com/yanzhenjie/andserver/exception/resolver/SimpleExceptionResolver.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.yanzhenjie.andserver.exception.resolver;
 
-import com.yanzhenjie.andserver.View;
+import com.yanzhenjie.andserver.view.View;
 import com.yanzhenjie.andserver.exception.BaseException;
 
 import org.apache.httpcore.HttpEntity;

File: andserver/src/main/java/com/yanzhenjie/andserver/view/View.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.yanzhenjie.andserver;
+package com.yanzhenjie.andserver.view;
 
 import org.apache.httpcore.Header;
 import org.apache.httpcore.HttpEntity;

File: andserver/src/main/java/com/yanzhenjie/andserver/website/AssetsWebsite.java
Patch:
@@ -17,7 +17,7 @@
 
 import android.content.res.AssetManager;
 
-import com.yanzhenjie.andserver.View;
+import com.yanzhenjie.andserver.view.View;
 import com.yanzhenjie.andserver.exception.NotFoundException;
 import com.yanzhenjie.andserver.util.AssetsReader;
 

File: andserver/src/main/java/com/yanzhenjie/andserver/website/SimpleWebsite.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.yanzhenjie.andserver.website;
 
-import com.yanzhenjie.andserver.View;
+import com.yanzhenjie.andserver.view.View;
 import com.yanzhenjie.andserver.exception.NotFoundException;
 
 import org.apache.httpcore.HttpException;

File: andserver/src/main/java/com/yanzhenjie/andserver/website/StorageWebsite.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.yanzhenjie.andserver.website;
 
-import com.yanzhenjie.andserver.View;
+import com.yanzhenjie.andserver.view.View;
 import com.yanzhenjie.andserver.exception.NotFoundException;
 import com.yanzhenjie.andserver.protocol.ETag;
 import com.yanzhenjie.andserver.protocol.LastModified;

File: sample/src/main/java/com/yanzhenjie/andserver/sample/CoreService.java
Patch:
@@ -90,8 +90,9 @@ public void onDestroy() {
 
         stopServer(); // Stop server.
 
-        if (mAssetManager != null)
-            mAssetManager.close();
+        // If close assetManager here, the app will crash when create this service immediately
+//        if (mAssetManager != null)
+//            mAssetManager.close();
     }
 
     /**

File: sample/src/main/java/com/yanzhenjie/andserver/sample/CoreService.java
Patch:
@@ -90,8 +90,9 @@ public void onDestroy() {
 
         stopServer(); // Stop server.
 
-        if (mAssetManager != null)
-            mAssetManager.close();
+        // If close assetManager here, the app will crash when create this service immediately
+//        if (mAssetManager != null)
+//            mAssetManager.close();
     }
 
     /**

File: andserver/src/main/java/com/yanzhenjie/andserver/DefaultHttpRequestHandler.java
Patch:
@@ -26,7 +26,6 @@
 /**
  * Created by Yan Zhenjie on 2017/3/15.
  */
-
 public class DefaultHttpRequestHandler implements HttpRequestHandler {
 
     private RequestHandler mRequestHandler;
@@ -37,7 +36,7 @@ public DefaultHttpRequestHandler(RequestHandler requestHandler) {
 
     @Override
     public void handle(HttpRequest request, HttpResponse response, HttpContext context) throws HttpException, IOException {
-        // 跨域请求需要在头中声明。
+        // Cross domain.
         response.setHeader("Access-Control-Allow-Origin", "*");
         response.setHeader("Server", "AndServer");
         this.mRequestHandler.handle(request, response, context);

File: sample/src/main/java/com/yanzhenjie/andserver/sample/CoreService.java
Patch:
@@ -50,7 +50,7 @@ public void onCreate() {
                 .registerHandler("login", new RequestLoginHandler())
                 // .registerHandler("download", new RequestFileHandler("Your file path"))
                 .registerHandler("upload", new RequestUploadHandler())
-                .website(new AssetsWebsite(mAssetManager, ""))
+                .website(new AssetsWebsite(mAssetManager, "web"))
                 .listener(mListener)
                 .build();
 

