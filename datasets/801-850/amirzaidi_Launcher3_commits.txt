File: src/com/android/launcher3/Launcher.java
Patch:
@@ -940,9 +940,6 @@ public void onAnimationEnd(Animator animation) {
             mScrimAnimator.start();
         }
         mShouldFadeInScrim = false;
-
-        // Update theme if it changed
-        WallpaperManagerCompat.getInstance(this).updateAllListeners();
     }
 
     @Override

File: src/com/android/launcher3/compat/WallpaperColorsCompat.java
Patch:
@@ -22,7 +22,7 @@ public class WallpaperColorsCompat {
 
     public static final int HINT_SUPPORTS_DARK_TEXT = 0x1;
     public static final int HINT_SUPPORTS_DARK_THEME = 0x2;
-    public static final int HINT_SUPPORTS_TRANSPARENCY = 0x4;
+    public static final int HINT_SUPPORTS_TRANSPARENCY = 0x100;
 
     private final int mPrimaryColor;
     private final int mSecondaryColor;

File: src/com/google/android/apps/nexuslauncher/search/AppSearchProvider.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.android.launcher3.AllAppsList;
 import com.android.launcher3.AppInfo;
+import com.android.launcher3.BuildConfig;
 import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.LauncherModel;
 import com.android.launcher3.allapps.AppInfoComparator;
@@ -75,7 +76,7 @@ public static ComponentKey uriToComponent(final Uri uri, final Context context)
     public static Uri buildUri(final AppInfo appInfo, final UserManagerCompat userManagerCompat) {
         return new Uri.Builder()
                 .scheme("content")
-                .authority("com.google.android.apps.nexuslauncher.appssearch")
+                .authority(BuildConfig.APPLICATION_ID + ".appssearch")
                 .appendQueryParameter("component", appInfo.componentName.flattenToShortString())
                 .appendQueryParameter("user", Long.toString(userManagerCompat.getSerialNumberForUser(appInfo.user)))
                 .build();

File: src/com/google/android/apps/nexuslauncher/search/SearchThread.java
Patch:
@@ -7,6 +7,7 @@
 import android.os.HandlerThread;
 import android.os.Message;
 
+import com.android.launcher3.BuildConfig;
 import com.android.launcher3.allapps.search.AllAppsSearchBarController;
 import com.android.launcher3.allapps.search.SearchAlgorithm;
 
@@ -30,7 +31,7 @@ public SearchThread(Context context) {
     private void dj(SearchResult componentList) {
         Uri uri = new Uri.Builder()
                 .scheme("content")
-                .authority("com.google.android.apps.nexuslauncher.appssearch")
+                .authority(BuildConfig.APPLICATION_ID + ".appssearch")
                 .appendPath(componentList.mQuery)
                 .build();
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -942,7 +942,7 @@ public void onAnimationEnd(Animator animation) {
         mShouldFadeInScrim = false;
 
         // Update theme if it changed
-        WallpaperManagerCompat.getInstance(Launcher.this).updateAllListeners();
+        WallpaperManagerCompat.getInstance(this).updateAllListeners();
     }
 
     @Override

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -288,10 +288,10 @@ private void animateWorkspace(final TransitionStates states, final boolean anima
 
         mNewScale = 1.0f;
 
-        if (states.oldStateIsOverview) {
-            mWorkspace.disableFreeScroll();
-        } else if (states.stateIsOverview) {
+        if (states.stateIsOverview) {
             mWorkspace.enableFreeScroll();
+        } else if (states.oldStateIsOverview) {
+            mWorkspace.disableFreeScroll();
         }
 
         if (!states.stateIsNormal) {

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -342,6 +342,7 @@ public void preparePull(boolean start) {
             mHotseat.setBackgroundTransparent(true /* transparent */);
             if (!mLauncher.isAllAppsVisible()) {
                 mLauncher.tryAndUpdatePredictedApps();
+                mAppsView.reset();
                 mAppsView.setVisibility(View.VISIBLE);
                 if (!FeatureFlags.LAUNCHER3_GRADIENT_ALL_APPS) {
                     mAppsView.setRevealDrawableColor(mHotseatBackgroundColor);

File: src/com/google/android/apps/nexuslauncher/qsb/AllAppsQsbLayout.java
Patch:
@@ -160,7 +160,7 @@ protected void onAttachedToWindow() {
     public void onClick(final View view) {
         super.onClick(view);
         if (view == this) {
-            if (!Utilities.ATLEAST_NOUGAT) {
+            if (!Utilities.ATLEAST_OREO) {
                 searchFallback();
                 return;
             }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1986,7 +1986,7 @@ public boolean isWorkspaceLoading() {
         return mWorkspaceLoading;
     }
 
-    private void setWorkspaceLoading(boolean value) {
+    protected void setWorkspaceLoading(boolean value) {
         boolean isLocked = isWorkspaceLocked();
         mWorkspaceLoading = value;
         if (isLocked != isWorkspaceLocked()) {

File: src/com/google/android/apps/nexuslauncher/NexusLauncherActivity.java
Patch:
@@ -34,6 +34,7 @@ public void onCreate(Bundle savedInstanceState) {
             prefs.edit().remove(PREF_IS_RELOAD).apply();
             getWorkspace().setCurrentPage(0);
             showOverviewMode(false);
+            setWorkspaceLoading(false);
         }
     }
 

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -375,6 +375,7 @@ private void updateAllAppsBg(float progress) {
         if (mGradientView == null) {
             mGradientView = (GradientView) mLauncher.findViewById(R.id.gradient_bg);
             mGradientView.setVisibility(View.VISIBLE);
+            mGradientView.setShiftScrim(!Utilities.ATLEAST_MARSHMALLOW);
         }
         mGradientView.setProgress(progress);
     }

File: src/com/google/android/apps/nexuslauncher/CustomAppPredictor.java
Patch:
@@ -181,7 +181,7 @@ private boolean recursiveIsDrawer(View v) {
     }
 
     private boolean isPredictorEnabled() {
-        return Utilities.getPrefs(mContext).getBoolean(SettingsActivity.SHOW_PREDICTIONS_PREF, false);
+        return Utilities.getPrefs(mContext).getBoolean(SettingsActivity.SHOW_PREDICTIONS_PREF, true);
     }
 
     @Override

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -606,7 +606,7 @@ public boolean addViewToCellLayout(View child, int index, int childId, LayoutPar
         // Hotseat icons - remove text
         if (child instanceof BubbleTextView) {
             BubbleTextView bubbleChild = (BubbleTextView) child;
-            bubbleChild.setTextVisibility(bubbleChild.shouldTextBeVisible());
+            bubbleChild.setTextVisibility(mContainerType != HOTSEAT);
         }
 
         child.setScaleX(mChildScale);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -606,7 +606,7 @@ public boolean addViewToCellLayout(View child, int index, int childId, LayoutPar
         // Hotseat icons - remove text
         if (child instanceof BubbleTextView) {
             BubbleTextView bubbleChild = (BubbleTextView) child;
-            bubbleChild.setTextVisibility(bubbleChild.shouldTextBeVisible());
+            bubbleChild.setTextVisibility(mContainerType != HOTSEAT);
         }
 
         child.setScaleX(mChildScale);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -606,7 +606,7 @@ public boolean addViewToCellLayout(View child, int index, int childId, LayoutPar
         // Hotseat icons - remove text
         if (child instanceof BubbleTextView) {
             BubbleTextView bubbleChild = (BubbleTextView) child;
-            bubbleChild.setTextVisibility(bubbleChild.shouldTextBeVisible());
+            bubbleChild.setTextVisibility(mContainerType != HOTSEAT);
         }
 
         child.setScaleX(mChildScale);

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -142,9 +142,8 @@ private boolean checkScrollableRecursively(ViewGroup viewGroup) {
         return false;
     }
 
-    public boolean isReinflateRequired() {
+    public boolean isReinflateRequired(int orientation) {
         // Re-inflate is required if the orientation has changed since last inflated.
-        int orientation = mContext.getResources().getConfiguration().orientation;
         if (mPreviousOrientation != orientation) {
            return true;
        }

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -111,7 +111,7 @@ public void setOnClickListener(OnClickListener l) {
     }
 
     @Override
-    public boolean isReinflateRequired() {
+    public boolean isReinflateRequired(int orientation) {
         // Re inflate is required any time the widget restore status changes
         return mStartState != mInfo.restoreStatus;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1213,7 +1213,7 @@ protected void reinflateWidgetsIfNecessary() {
                         && v.getTag() instanceof LauncherAppWidgetInfo) {
                     LauncherAppWidgetInfo info = (LauncherAppWidgetInfo) v.getTag();
                     LauncherAppWidgetHostView lahv = (LauncherAppWidgetHostView) v;
-                    if (lahv.isReinflateRequired()) {
+                    if (lahv.isReinflateRequired(mLauncher.getOrientation())) {
                         // Remove and rebind the current widget (which was inflated in the wrong
                         // orientation), but don't delete it from the database
                         mLauncher.removeItem(lahv, info, false  /* deleteFromDb */);

File: src/com/android/launcher3/qsb/QsbWidgetHostView.java
Patch:
@@ -47,9 +47,9 @@ public void updateAppWidget(RemoteViews remoteViews) {
     }
 
 
-    public boolean isReinflateRequired() {
+    public boolean isReinflateRequired(int orientation) {
         // Re-inflate is required if the orientation has changed since last inflation.
-        return mPreviousOrientation != getResources().getConfiguration().orientation;
+        return mPreviousOrientation != orientation;
     }
 
 

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -142,9 +142,8 @@ private boolean checkScrollableRecursively(ViewGroup viewGroup) {
         return false;
     }
 
-    public boolean isReinflateRequired() {
+    public boolean isReinflateRequired(int orientation) {
         // Re-inflate is required if the orientation has changed since last inflated.
-        int orientation = mContext.getResources().getConfiguration().orientation;
         if (mPreviousOrientation != orientation) {
            return true;
        }

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -111,7 +111,7 @@ public void setOnClickListener(OnClickListener l) {
     }
 
     @Override
-    public boolean isReinflateRequired() {
+    public boolean isReinflateRequired(int orientation) {
         // Re inflate is required any time the widget restore status changes
         return mStartState != mInfo.restoreStatus;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1213,7 +1213,7 @@ protected void reinflateWidgetsIfNecessary() {
                         && v.getTag() instanceof LauncherAppWidgetInfo) {
                     LauncherAppWidgetInfo info = (LauncherAppWidgetInfo) v.getTag();
                     LauncherAppWidgetHostView lahv = (LauncherAppWidgetHostView) v;
-                    if (lahv.isReinflateRequired()) {
+                    if (lahv.isReinflateRequired(mLauncher.getOrientation())) {
                         // Remove and rebind the current widget (which was inflated in the wrong
                         // orientation), but don't delete it from the database
                         mLauncher.removeItem(lahv, info, false  /* deleteFromDb */);

File: src/com/android/launcher3/qsb/QsbContainerView.java
Patch:
@@ -36,6 +36,7 @@
 
 import com.android.launcher3.AppWidgetResizeFrame;
 import com.android.launcher3.InvariantDeviceProfile;
+import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.R;
 import com.android.launcher3.Utilities;
@@ -193,7 +194,8 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
         @Override
         public void onResume() {
             super.onResume();
-            if (mQsb != null && mQsb.isReinflateRequired()) {
+            int orientation = Launcher.getLauncher(getContext()).getOrientation();
+            if (mQsb != null && mQsb.isReinflateRequired(orientation)) {
                 rebindFragment();
             }
         }

File: src/com/android/launcher3/qsb/QsbWidgetHostView.java
Patch:
@@ -47,9 +47,9 @@ public void updateAppWidget(RemoteViews remoteViews) {
     }
 
 
-    public boolean isReinflateRequired() {
+    public boolean isReinflateRequired(int orientation) {
         // Re-inflate is required if the orientation has changed since last inflation.
-        return mPreviousOrientation != getResources().getConfiguration().orientation;
+        return mPreviousOrientation != orientation;
     }
 
 

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -184,7 +184,7 @@ public void applyFromShortcutInfo(ShortcutInfo info) {
     public void applyFromShortcutInfo(ShortcutInfo info, boolean promiseStateChanged) {
         applyIconAndLabel(info.iconBitmap, info);
         setTag(info);
-        if (promiseStateChanged || info.isPromise()) {
+        if (promiseStateChanged || (info.hasPromiseIconUi())) {
             applyPromiseState(promiseStateChanged);
         }
 
@@ -481,7 +481,7 @@ public void cancelLongPress() {
     public void applyPromiseState(boolean promiseStateChanged) {
         if (getTag() instanceof ShortcutInfo) {
             ShortcutInfo info = (ShortcutInfo) getTag();
-            final boolean isPromise = info.isPromise();
+            final boolean isPromise = info.hasPromiseIconUi();
             final int progressLevel = isPromise ?
                     ((info.hasStatusFlag(ShortcutInfo.FLAG_INSTALL_SESSION_ACTIVE) ?
                             info.getInstallProgress() : 0)) : 100;

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -149,7 +149,6 @@ void resetLayout() {
             allAppsButton.setOnKeyListener(new HotseatIconKeyEventListener());
             if (mLauncher != null) {
                 mLauncher.setAllAppsButton(allAppsButton);
-                allAppsButton.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
                 allAppsButton.setOnClickListener(mLauncher);
                 allAppsButton.setOnFocusChangeListener(mLauncher.mFocusHandler);
             }

File: src/com/android/launcher3/IconProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.pm.LauncherActivityInfo;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 
 import java.util.Locale;
 
@@ -17,7 +18,7 @@ public IconProvider() {
     }
 
     public void updateSystemStateString() {
-        mSystemState = Locale.getDefault().toString();
+        mSystemState = Locale.getDefault().toString() + "," + Build.VERSION.SDK_INT;
     }
 
     public String getIconSystemState(String packageName) {

File: src/com/android/launcher3/InfoDropTarget.java
Patch:
@@ -75,7 +75,7 @@ public static boolean startDetailsActivityForInfo(ItemInfo info, Launcher launch
         if (info instanceof AppInfo) {
             componentName = ((AppInfo) info).componentName;
         } else if (info instanceof ShortcutInfo) {
-            componentName = ((ShortcutInfo) info).intent.getComponent();
+            componentName = info.getTargetComponent();
         } else if (info instanceof PendingAddItemInfo) {
             componentName = ((PendingAddItemInfo) info).componentName;
         } else if (info instanceof LauncherAppWidgetInfo) {

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -92,7 +92,7 @@ public LauncherAppWidgetHostView(Context context) {
         setAccessibilityDelegate(Launcher.getLauncher(context).getAccessibilityDelegate());
         setBackgroundResource(R.drawable.widget_internal_focus_bg);
 
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             setExecutor(Utilities.THREAD_POOL_EXECUTOR);
         }
     }

File: src/com/android/launcher3/SessionCommitReceiver.java
Patch:
@@ -59,7 +59,7 @@ public class SessionCommitReceiver extends BroadcastReceiver {
 
     @Override
     public void onReceive(Context context, Intent intent) {
-        if (!isEnabled(context) || !Utilities.isAtLeastO()) {
+        if (!isEnabled(context) || !Utilities.ATLEAST_OREO) {
             // User has decided to not add icons on homescreen.
             return;
         }
@@ -92,7 +92,7 @@ public static boolean isEnabled(Context context) {
     }
 
     public static void applyDefaultUserPrefs(final Context context) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return;
         }
         SharedPreferences prefs = Utilities.getPrefs(context);

File: src/com/android/launcher3/SettingsActivity.java
Patch:
@@ -94,10 +94,12 @@ public void onCreate(Bundle savedInstanceState) {
 
             ButtonPreference iconBadgingPref =
                     (ButtonPreference) findPreference(ICON_BADGING_PREFERENCE_KEY);
-            if (!Utilities.isAtLeastO()) {
+            if (!Utilities.ATLEAST_OREO) {
                 getPreferenceScreen().removePreference(
                         findPreference(SessionCommitReceiver.ADD_ICON_PREFERENCE_KEY));
                 getPreferenceScreen().removePreference(iconBadgingPref);
+            } else if (!getResources().getBoolean(R.bool.notification_badging_enabled)) {
+                getPreferenceScreen().removePreference(iconBadgingPref);
             } else {
                 // Listen to system notification badge settings while this UI is active.
                 mIconBadgingObserver = new IconBadgingObserver(

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -50,6 +50,7 @@
 import com.android.launcher3.keyboard.FocusedItemDecorator;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;
 import com.android.launcher3.util.ComponentKey;
+import com.android.launcher3.util.ComponentKeyMapper;
 import com.android.launcher3.util.PackageUserKey;
 
 import java.util.List;
@@ -116,7 +117,7 @@ protected void updateBackground(
     /**
      * Sets the current set of predicted apps.
      */
-    public void setPredictedApps(List<ComponentKey> apps) {
+    public void setPredictedApps(List<ComponentKeyMapper<AppInfo>> apps) {
         mApps.setPredictedApps(apps);
     }
 
@@ -349,8 +350,6 @@ public void setInsets(Rect insets) {
             ViewGroup.LayoutParams navBarBgLp = navBarBg.getLayoutParams();
             navBarBgLp.height = insets.bottom;
             navBarBg.setLayoutParams(navBarBgLp);
-            navBarBg.setVisibility(FeatureFlags.LAUNCHER3_GRADIENT_ALL_APPS
-                    ? View.INVISIBLE : View.VISIBLE);
         }
     }
 

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AppWidgetManagerCompat {
     public static AppWidgetManagerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isAtLeastO()) {
+                if (Utilities.ATLEAST_OREO) {
                     sInstance = new AppWidgetManagerCompatVO(context.getApplicationContext());
                 } else {
                     sInstance = new AppWidgetManagerCompatVL(context.getApplicationContext());

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -53,7 +53,7 @@ protected LauncherAppsCompat() {
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isAtLeastO()) {
+                if (Utilities.ATLEAST_OREO) {
                     sInstance = new LauncherAppsCompatVO(context.getApplicationContext());
                 } else {
                     sInstance = new LauncherAppsCompatVL(context.getApplicationContext());

File: src/com/android/launcher3/compat/WallpaperManagerCompat.java
Patch:
@@ -31,10 +31,10 @@ public static WallpaperManagerCompat getInstance(Context context) {
             if (sInstance == null) {
                 context = context.getApplicationContext();
 
-                if (Utilities.isAtLeastO()) {
+                if (Utilities.ATLEAST_OREO) {
                     try {
                         sInstance = new WallpaperManagerCompatVOMR1(context);
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         // The wallpaper APIs do not yet exist
                     }
                 }

File: src/com/android/launcher3/config/BaseFlags.java
Patch:
@@ -56,8 +56,6 @@ abstract class BaseFlags {
     public static final boolean PULLDOWN_SEARCH = false;
     // When enabled the status bar may show dark icons based on the top of the wallpaper.
     public static final boolean LIGHT_STATUS_BAR = false;
-    // When enabled icons are badged with the number of notifications associated with that app.
-    public static final boolean BADGE_ICONS = true;
     // When enabled, icons not supporting {@link AdaptiveIconDrawable} will be wrapped in {@link FixedScaleDrawable}.
     public static final boolean LEGACY_ICON_TREATMENT = true;
     // When enabled, adaptive icons would have shadows baked when being stored to icon cache.

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -544,7 +544,6 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
 
     public void clearResizeFrame() {
         if (mCurrentResizeFrame != null) {
-            mCurrentResizeFrame.commitResize();
             removeView(mCurrentResizeFrame);
             mCurrentResizeFrame = null;
         }

File: src/com/android/launcher3/dragndrop/DragView.java
Patch:
@@ -193,7 +193,7 @@ public void onAnimationEnd(Animator animation) {
      */
     @TargetApi(Build.VERSION_CODES.O)
     public void setItemInfo(final ItemInfo info) {
-        if (!(FeatureFlags.LAUNCHER3_SPRING_ICONS && Utilities.isAtLeastO())) {
+        if (!(FeatureFlags.LAUNCHER3_SPRING_ICONS && Utilities.ATLEAST_OREO)) {
             return;
         }
         if (info.itemType != LauncherSettings.Favorites.ITEM_TYPE_APPLICATION &&

File: src/com/android/launcher3/dragndrop/PinItemDragListener.java
Patch:
@@ -128,7 +128,7 @@ public static RemoteViews getPreview(PinItemRequest request) {
     }
 
     public static boolean handleDragRequest(Launcher launcher, Intent intent) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return false;
         }
         if (intent == null || !Intent.ACTION_MAIN.equals(intent.getAction())) {

File: src/com/android/launcher3/graphics/DrawableFactory.java
Patch:
@@ -80,7 +80,7 @@ public PreloadIconDrawable newPendingIcon(Bitmap icon, Context context) {
 
 
     protected Path getPreloadProgressPath(Context context) {
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             try {
                 // Try to load the path from Mask Icon
                 Drawable icon = context.getDrawable(R.drawable.adaptive_icon_drawable_wrapper);

File: src/com/android/launcher3/graphics/IconNormalizer.java
Patch:
@@ -231,7 +231,7 @@ private boolean isTransparentBitmap(Bitmap bitmap) {
      */
     public synchronized float getScale(@NonNull Drawable d, @Nullable RectF outBounds,
             @Nullable Path path, @Nullable boolean[] outMaskShape) {
-        if (Utilities.isAtLeastO() && d instanceof AdaptiveIconDrawable &&
+        if (Utilities.ATLEAST_OREO && d instanceof AdaptiveIconDrawable &&
                 mAdaptiveIconScale != SCALE_NOT_INITIALIZED) {
             if (outBounds != null) {
                 outBounds.set(mAdaptiveIconBounds);
@@ -347,7 +347,7 @@ public synchronized float getScale(@NonNull Drawable d, @Nullable RectF outBound
         float areaScale = area / (width * height);
         // Use sqrt of the final ratio as the images is scaled across both width and height.
         float scale = areaScale > scaleRequired ? (float) Math.sqrt(scaleRequired / areaScale) : 1;
-        if (Utilities.isAtLeastO() && d instanceof AdaptiveIconDrawable &&
+        if (Utilities.ATLEAST_OREO && d instanceof AdaptiveIconDrawable &&
                 mAdaptiveIconScale == SCALE_NOT_INITIALIZED) {
             mAdaptiveIconScale = scale;
             mAdaptiveIconBounds.set(mBounds);

File: src/com/android/launcher3/graphics/IconShapeOverride.java
Patch:
@@ -59,7 +59,7 @@ public class IconShapeOverride {
     private static final int RESTART_REQUEST_CODE = 42; // the answer to everything
 
     public static boolean isSupported(Context context) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return false;
         }
         // Only supported when developer settings is enabled
@@ -82,7 +82,7 @@ public static boolean isSupported(Context context) {
     }
 
     public static void apply(Context context) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return;
         }
         String path = getAppliedValue(context);

File: src/com/android/launcher3/graphics/ShadowDrawable.java
Patch:
@@ -146,7 +146,7 @@ private void regenerateBitmapCache() {
             d.draw(canvas);
         }
 
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             bitmap = bitmap.copy(Bitmap.Config.HARDWARE, false);
         }
         mState.mLastDrawnBitmap = bitmap;

File: src/com/android/launcher3/model/CacheDataUpdatedTask.java
Patch:
@@ -88,7 +88,7 @@ public boolean isValidShortcut(ShortcutInfo si) {
             case OP_CACHE_UPDATE:
                 return true;
             case OP_SESSION_UPDATE:
-                return si.isPromise();
+                return si.hasPromiseIconUi();
             default:
                 return false;
         }

File: src/com/android/launcher3/notification/NotificationInfo.java
Patch:
@@ -94,6 +94,9 @@ public NotificationInfo(Context context, StatusBarNotification statusBarNotifica
 
     @Override
     public void onClick(View view) {
+        if (intent == null) {
+            return;
+        }
         final Launcher launcher = Launcher.getLauncher(view.getContext());
         Bundle activityOptions = ActivityOptions.makeClipRevealAnimation(
                 view, 0, 0, view.getWidth(), view.getHeight()).toBundle();

File: src/com/android/launcher3/pageindicators/PageIndicatorCaretLandscape.java
Patch:
@@ -48,7 +48,6 @@ public PageIndicatorCaretLandscape(Context context, AttributeSet attrs, int defS
         setCaretDrawable(caretDrawable);
 
         Launcher l = Launcher.getLauncher(context);
-        setOnTouchListener(l.getHapticFeedbackTouchListener());
         setOnClickListener(l);
         setOnFocusChangeListener(l.mFocusHandler);
     }

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -141,7 +141,6 @@ protected void onFinishInflate() {
         super.onFinishInflate();
         mAllAppsHandle = (ImageView) findViewById(R.id.all_apps_handle);
         mAllAppsHandle.setImageDrawable(getCaretDrawable());
-        mAllAppsHandle.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
         mAllAppsHandle.setOnClickListener(mLauncher);
         mAllAppsHandle.setOnFocusChangeListener(mLauncher.mFocusHandler);
         mLauncher.setAllAppsButton(mAllAppsHandle);

File: src/com/android/launcher3/popup/PopupContainerWithArrow.java
Patch:
@@ -275,8 +275,9 @@ private void addDummyViews(PopupPopulator.Item[] itemTypesToPopulate, int numNot
             if (itemTypeToPopulate == PopupPopulator.Item.NOTIFICATION) {
                 mNotificationItemView = (NotificationItemView) item;
                 boolean notificationFooterHasIcons = numNotifications > 1;
-                int footerHeight = notificationFooterHasIcons ?
-                        res.getDimensionPixelSize(R.dimen.notification_footer_height) : 0;
+                int footerHeight = res.getDimensionPixelSize(
+                        notificationFooterHasIcons ? R.dimen.notification_footer_height
+                                : R.dimen.notification_empty_footer_height);
                 item.findViewById(R.id.footer).getLayoutParams().height = footerHeight;
                 if (notificationFooterHasIcons) {
                     mNotificationItemView.findViewById(R.id.divider).setVisibility(VISIBLE);

File: src/com/android/launcher3/shortcuts/DeepShortcutManager.java
Patch:
@@ -66,7 +66,7 @@ private DeepShortcutManager(Context context) {
 
     public static boolean supportsShortcuts(ItemInfo info) {
         boolean isItemPromise = info instanceof com.android.launcher3.ShortcutInfo
-                && ((com.android.launcher3.ShortcutInfo) info).isPromise();
+                && ((com.android.launcher3.ShortcutInfo) info).hasPromiseIconUi();
         return info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION
                 && !info.isDisabled() && !isItemPromise;
     }

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -67,7 +67,7 @@ public static void onAllAppsLoaded(final Context context,
             return;
         }
 
-        if (Utilities.isAtLeastO() && !SessionCommitReceiver.isEnabled(context)) {
+        if (Utilities.ATLEAST_OREO && !SessionCommitReceiver.isEnabled(context)) {
             // Just mark the folder id preference to avoid new folder creation later.
             ufi.prefs.edit().putLong(ufi.folderIdKey, ItemInfo.NO_ID).apply();
             return;

File: src/com/android/launcher3/util/SystemUiController.java
Patch:
@@ -59,7 +59,7 @@ public void updateUiState(int uiState, int flags) {
         // Apply the state flags in priority order
         int newFlags = oldFlags;
         for (int stateFlag : mStates) {
-            if (Utilities.isAtLeastO()) {
+            if (Utilities.ATLEAST_OREO) {
                 if ((stateFlag & FLAG_LIGHT_NAV) != 0) {
                     newFlags |= View.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR;
                 } else if ((stateFlag & FLAG_DARK_NAV) != 0) {

File: tests/src/com/android/launcher3/ui/widget/RequestPinItemTest.java
Patch:
@@ -141,7 +141,7 @@ public boolean evaluate(ItemInfo info, View view) {
 
     private void runTest(String activityMethod, boolean isWidget, ItemOperator itemMatcher,
             Intent... commandIntents) throws Throwable {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return;
         }
         lockRotation(true);

File: src/com/android/launcher3/notification/NotificationInfo.java
Patch:
@@ -94,6 +94,9 @@ public NotificationInfo(Context context, StatusBarNotification statusBarNotifica
 
     @Override
     public void onClick(View view) {
+        if (intent == null) {
+            return;
+        }
         final Launcher launcher = Launcher.getLauncher(view.getContext());
         Bundle activityOptions = ActivityOptions.makeClipRevealAnimation(
                 view, 0, 0, view.getWidth(), view.getHeight()).toBundle();

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -149,7 +149,6 @@ void resetLayout() {
             allAppsButton.setOnKeyListener(new HotseatIconKeyEventListener());
             if (mLauncher != null) {
                 mLauncher.setAllAppsButton(allAppsButton);
-                allAppsButton.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
                 allAppsButton.setOnClickListener(mLauncher);
                 allAppsButton.setOnFocusChangeListener(mLauncher.mFocusHandler);
             }

File: src/com/android/launcher3/pageindicators/PageIndicatorCaretLandscape.java
Patch:
@@ -48,7 +48,6 @@ public PageIndicatorCaretLandscape(Context context, AttributeSet attrs, int defS
         setCaretDrawable(caretDrawable);
 
         Launcher l = Launcher.getLauncher(context);
-        setOnTouchListener(l.getHapticFeedbackTouchListener());
         setOnClickListener(l);
         setOnFocusChangeListener(l.mFocusHandler);
     }

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -141,7 +141,6 @@ protected void onFinishInflate() {
         super.onFinishInflate();
         mAllAppsHandle = (ImageView) findViewById(R.id.all_apps_handle);
         mAllAppsHandle.setImageDrawable(getCaretDrawable());
-        mAllAppsHandle.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
         mAllAppsHandle.setOnClickListener(mLauncher);
         mAllAppsHandle.setOnFocusChangeListener(mLauncher.mFocusHandler);
         mLauncher.setAllAppsButton(mAllAppsHandle);

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -149,7 +149,6 @@ void resetLayout() {
             allAppsButton.setOnKeyListener(new HotseatIconKeyEventListener());
             if (mLauncher != null) {
                 mLauncher.setAllAppsButton(allAppsButton);
-                allAppsButton.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
                 allAppsButton.setOnClickListener(mLauncher);
                 allAppsButton.setOnFocusChangeListener(mLauncher.mFocusHandler);
             }

File: src/com/android/launcher3/pageindicators/PageIndicatorCaretLandscape.java
Patch:
@@ -48,7 +48,6 @@ public PageIndicatorCaretLandscape(Context context, AttributeSet attrs, int defS
         setCaretDrawable(caretDrawable);
 
         Launcher l = Launcher.getLauncher(context);
-        setOnTouchListener(l.getHapticFeedbackTouchListener());
         setOnClickListener(l);
         setOnFocusChangeListener(l.mFocusHandler);
     }

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -141,7 +141,6 @@ protected void onFinishInflate() {
         super.onFinishInflate();
         mAllAppsHandle = (ImageView) findViewById(R.id.all_apps_handle);
         mAllAppsHandle.setImageDrawable(getCaretDrawable());
-        mAllAppsHandle.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
         mAllAppsHandle.setOnClickListener(mLauncher);
         mAllAppsHandle.setOnFocusChangeListener(mLauncher.mFocusHandler);
         mLauncher.setAllAppsButton(mAllAppsHandle);

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -123,7 +123,7 @@ public IconCache(Context context, InvariantDeviceProfile inv) {
     }
 
     private Drawable getFullResDefaultActivityIcon() {
-        return getFullResIcon(Resources.getSystem(), Utilities.isAtLeastO() ?
+        return getFullResIcon(Resources.getSystem(), Utilities.ATLEAST_OREO ?
                 android.R.drawable.sym_def_app_icon : android.R.mipmap.sym_def_app_icon);
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1132,7 +1132,7 @@ protected boolean hasSettings() {
             // On O and above we there is always some setting present settings (add icon to
             // home screen or icon badging). On earlier APIs we will have the allow rotation
             // setting, on devices with a locked orientation,
-            return Utilities.isAtLeastO() || !getResources().getBoolean(R.bool.allow_rotation);
+            return Utilities.ATLEAST_OREO || !getResources().getBoolean(R.bool.allow_rotation);
         }
     }
 
@@ -1414,7 +1414,7 @@ private void completeAddShortcut(Intent data, long container, long screenId, int
         CellLayout layout = getCellLayout(container, screenId);
 
         ShortcutInfo info = null;
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             info = LauncherAppsCompatVO.createShortcutInfoFromPinItemRequest(
                     this, LauncherAppsCompatVO.getPinItemRequest(data), 0);
         }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -92,7 +92,7 @@ public LauncherAppWidgetHostView(Context context) {
         setAccessibilityDelegate(Launcher.getLauncher(context).getAccessibilityDelegate());
         setBackgroundResource(R.drawable.widget_internal_focus_bg);
 
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             setExecutor(Utilities.THREAD_POOL_EXECUTOR);
         }
     }

File: src/com/android/launcher3/SessionCommitReceiver.java
Patch:
@@ -59,7 +59,7 @@ public class SessionCommitReceiver extends BroadcastReceiver {
 
     @Override
     public void onReceive(Context context, Intent intent) {
-        if (!isEnabled(context) || !Utilities.isAtLeastO()) {
+        if (!isEnabled(context) || !Utilities.ATLEAST_OREO) {
             // User has decided to not add icons on homescreen.
             return;
         }
@@ -92,7 +92,7 @@ public static boolean isEnabled(Context context) {
     }
 
     public static void applyDefaultUserPrefs(final Context context) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return;
         }
         SharedPreferences prefs = Utilities.getPrefs(context);

File: src/com/android/launcher3/SettingsActivity.java
Patch:
@@ -94,7 +94,7 @@ public void onCreate(Bundle savedInstanceState) {
 
             ButtonPreference iconBadgingPref =
                     (ButtonPreference) findPreference(ICON_BADGING_PREFERENCE_KEY);
-            if (!Utilities.isAtLeastO()) {
+            if (!Utilities.ATLEAST_OREO) {
                 getPreferenceScreen().removePreference(
                         findPreference(SessionCommitReceiver.ADD_ICON_PREFERENCE_KEY));
                 getPreferenceScreen().removePreference(iconBadgingPref);

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AppWidgetManagerCompat {
     public static AppWidgetManagerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isAtLeastO()) {
+                if (Utilities.ATLEAST_OREO) {
                     sInstance = new AppWidgetManagerCompatVO(context.getApplicationContext());
                 } else {
                     sInstance = new AppWidgetManagerCompatVL(context.getApplicationContext());

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -53,7 +53,7 @@ protected LauncherAppsCompat() {
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isAtLeastO()) {
+                if (Utilities.ATLEAST_OREO) {
                     sInstance = new LauncherAppsCompatVO(context.getApplicationContext());
                 } else {
                     sInstance = new LauncherAppsCompatVL(context.getApplicationContext());

File: src/com/android/launcher3/compat/WallpaperManagerCompat.java
Patch:
@@ -31,10 +31,10 @@ public static WallpaperManagerCompat getInstance(Context context) {
             if (sInstance == null) {
                 context = context.getApplicationContext();
 
-                if (Utilities.isAtLeastO()) {
+                if (Utilities.ATLEAST_OREO) {
                     try {
                         sInstance = new WallpaperManagerCompatVOMR1(context);
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         // The wallpaper APIs do not yet exist
                     }
                 }

File: src/com/android/launcher3/compat/WallpaperManagerCompatVOMR1.java
Patch:
@@ -35,8 +35,9 @@ public class WallpaperManagerCompatVOMR1 extends WallpaperManagerCompat {
     private final WallpaperManager mWm;
     private Method mWCColorHintsMethod;
 
-    WallpaperManagerCompatVOMR1(Context context) throws Exception {
+    WallpaperManagerCompatVOMR1(Context context) throws Throwable {
         mWm = context.getSystemService(WallpaperManager.class);
+        String className = WallpaperColors.class.getName();
         try {
             mWCColorHintsMethod = WallpaperColors.class.getDeclaredMethod("getColorHints");
         } catch (Exception exc) {

File: src/com/android/launcher3/dragndrop/DragView.java
Patch:
@@ -193,7 +193,7 @@ public void onAnimationEnd(Animator animation) {
      */
     @TargetApi(Build.VERSION_CODES.O)
     public void setItemInfo(final ItemInfo info) {
-        if (!(FeatureFlags.LAUNCHER3_SPRING_ICONS && Utilities.isAtLeastO())) {
+        if (!(FeatureFlags.LAUNCHER3_SPRING_ICONS && Utilities.ATLEAST_OREO)) {
             return;
         }
         if (info.itemType != LauncherSettings.Favorites.ITEM_TYPE_APPLICATION &&

File: src/com/android/launcher3/dragndrop/PinItemDragListener.java
Patch:
@@ -128,7 +128,7 @@ public static RemoteViews getPreview(PinItemRequest request) {
     }
 
     public static boolean handleDragRequest(Launcher launcher, Intent intent) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return false;
         }
         if (intent == null || !Intent.ACTION_MAIN.equals(intent.getAction())) {

File: src/com/android/launcher3/graphics/DrawableFactory.java
Patch:
@@ -80,7 +80,7 @@ public PreloadIconDrawable newPendingIcon(Bitmap icon, Context context) {
 
 
     protected Path getPreloadProgressPath(Context context) {
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             try {
                 // Try to load the path from Mask Icon
                 Drawable icon = context.getDrawable(R.drawable.adaptive_icon_drawable_wrapper);

File: src/com/android/launcher3/graphics/IconNormalizer.java
Patch:
@@ -231,7 +231,7 @@ private boolean isTransparentBitmap(Bitmap bitmap) {
      */
     public synchronized float getScale(@NonNull Drawable d, @Nullable RectF outBounds,
             @Nullable Path path, @Nullable boolean[] outMaskShape) {
-        if (Utilities.isAtLeastO() && d instanceof AdaptiveIconDrawable &&
+        if (Utilities.ATLEAST_OREO && d instanceof AdaptiveIconDrawable &&
                 mAdaptiveIconScale != SCALE_NOT_INITIALIZED) {
             if (outBounds != null) {
                 outBounds.set(mAdaptiveIconBounds);
@@ -347,7 +347,7 @@ public synchronized float getScale(@NonNull Drawable d, @Nullable RectF outBound
         float areaScale = area / (width * height);
         // Use sqrt of the final ratio as the images is scaled across both width and height.
         float scale = areaScale > scaleRequired ? (float) Math.sqrt(scaleRequired / areaScale) : 1;
-        if (Utilities.isAtLeastO() && d instanceof AdaptiveIconDrawable &&
+        if (Utilities.ATLEAST_OREO && d instanceof AdaptiveIconDrawable &&
                 mAdaptiveIconScale == SCALE_NOT_INITIALIZED) {
             mAdaptiveIconScale = scale;
             mAdaptiveIconBounds.set(mBounds);

File: src/com/android/launcher3/graphics/IconShapeOverride.java
Patch:
@@ -59,7 +59,7 @@ public class IconShapeOverride {
     private static final int RESTART_REQUEST_CODE = 42; // the answer to everything
 
     public static boolean isSupported(Context context) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return false;
         }
         // Only supported when developer settings is enabled
@@ -82,7 +82,7 @@ public static boolean isSupported(Context context) {
     }
 
     public static void apply(Context context) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return;
         }
         String path = getAppliedValue(context);

File: src/com/android/launcher3/graphics/ShadowDrawable.java
Patch:
@@ -146,7 +146,7 @@ private void regenerateBitmapCache() {
             d.draw(canvas);
         }
 
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             bitmap = bitmap.copy(Bitmap.Config.HARDWARE, false);
         }
         mState.mLastDrawnBitmap = bitmap;

File: src/com/android/launcher3/model/PackageUpdatedTask.java
Patch:
@@ -101,7 +101,7 @@ public void execute(LauncherAppState app, BgDataModel dataModel, AllAppsList app
                     appsList.addPackage(context, packages[i], mUser);
 
                     // Automatically add homescreen icon for work profile apps for below O device.
-                    if (!Utilities.isAtLeastO() && !Process.myUserHandle().equals(mUser)) {
+                    if (!Utilities.ATLEAST_OREO && !Process.myUserHandle().equals(mUser)) {
                         SessionCommitReceiver.queueAppIconAddition(context, packages[i], mUser);
                     }
                 }
@@ -345,7 +345,7 @@ public void execute(Callbacks callbacks) {
                     callbacks.notifyWidgetProvidersChanged();
                 }
             });
-        } else if (Utilities.isAtLeastO() && mOp == OP_ADD) {
+        } else if (Utilities.ATLEAST_OREO && mOp == OP_ADD) {
             // Load widgets for the new package.
             for (int i = 0; i < N; i++) {
                 dataModel.widgetsModel.update(app, new PackageUserKey(packages[i], mUser));

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -67,7 +67,7 @@ public static void onAllAppsLoaded(final Context context,
             return;
         }
 
-        if (Utilities.isAtLeastO() && !SessionCommitReceiver.isEnabled(context)) {
+        if (Utilities.ATLEAST_OREO && !SessionCommitReceiver.isEnabled(context)) {
             // Just mark the folder id preference to avoid new folder creation later.
             ufi.prefs.edit().putLong(ufi.folderIdKey, ItemInfo.NO_ID).apply();
             return;

File: src/com/android/launcher3/util/SystemUiController.java
Patch:
@@ -59,7 +59,7 @@ public void updateUiState(int uiState, int flags) {
         // Apply the state flags in priority order
         int newFlags = oldFlags;
         for (int stateFlag : mStates) {
-            if (Utilities.isAtLeastO()) {
+            if (Utilities.ATLEAST_OREO) {
                 if ((stateFlag & FLAG_LIGHT_NAV) != 0) {
                     newFlags |= View.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR;
                 } else if ((stateFlag & FLAG_DARK_NAV) != 0) {

File: tests/src/com/android/launcher3/ui/widget/RequestPinItemTest.java
Patch:
@@ -141,7 +141,7 @@ public boolean evaluate(ItemInfo info, View view) {
 
     private void runTest(String activityMethod, boolean isWidget, ItemOperator itemMatcher,
             Intent... commandIntents) throws Throwable {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return;
         }
         lockRotation(true);

File: src/com/android/launcher3/model/PackageUpdatedTask.java
Patch:
@@ -231,6 +231,9 @@ public void execute(Callbacks callbacks) {
                                             continue;
                                         }
                                     }
+                                } else {
+                                    si.status = ShortcutInfo.DEFAULT;
+                                    infoUpdated = true;
                                 }
                             }
 

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -123,7 +123,7 @@ public IconCache(Context context, InvariantDeviceProfile inv) {
     }
 
     private Drawable getFullResDefaultActivityIcon() {
-        return getFullResIcon(Resources.getSystem(), Utilities.isAtLeastO() ?
+        return getFullResIcon(Resources.getSystem(), Utilities.ATLEAST_OREO ?
                 android.R.drawable.sym_def_app_icon : android.R.mipmap.sym_def_app_icon);
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1132,7 +1132,7 @@ protected boolean hasSettings() {
             // On O and above we there is always some setting present settings (add icon to
             // home screen or icon badging). On earlier APIs we will have the allow rotation
             // setting, on devices with a locked orientation,
-            return Utilities.isAtLeastO() || !getResources().getBoolean(R.bool.allow_rotation);
+            return Utilities.ATLEAST_OREO || !getResources().getBoolean(R.bool.allow_rotation);
         }
     }
 
@@ -1414,7 +1414,7 @@ private void completeAddShortcut(Intent data, long container, long screenId, int
         CellLayout layout = getCellLayout(container, screenId);
 
         ShortcutInfo info = null;
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             info = LauncherAppsCompatVO.createShortcutInfoFromPinItemRequest(
                     this, LauncherAppsCompatVO.getPinItemRequest(data), 0);
         }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -92,7 +92,7 @@ public LauncherAppWidgetHostView(Context context) {
         setAccessibilityDelegate(Launcher.getLauncher(context).getAccessibilityDelegate());
         setBackgroundResource(R.drawable.widget_internal_focus_bg);
 
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             setExecutor(Utilities.THREAD_POOL_EXECUTOR);
         }
     }

File: src/com/android/launcher3/SessionCommitReceiver.java
Patch:
@@ -59,7 +59,7 @@ public class SessionCommitReceiver extends BroadcastReceiver {
 
     @Override
     public void onReceive(Context context, Intent intent) {
-        if (!isEnabled(context) || !Utilities.isAtLeastO()) {
+        if (!isEnabled(context) || !Utilities.ATLEAST_OREO) {
             // User has decided to not add icons on homescreen.
             return;
         }
@@ -92,7 +92,7 @@ public static boolean isEnabled(Context context) {
     }
 
     public static void applyDefaultUserPrefs(final Context context) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return;
         }
         SharedPreferences prefs = Utilities.getPrefs(context);

File: src/com/android/launcher3/SettingsActivity.java
Patch:
@@ -94,7 +94,7 @@ public void onCreate(Bundle savedInstanceState) {
 
             ButtonPreference iconBadgingPref =
                     (ButtonPreference) findPreference(ICON_BADGING_PREFERENCE_KEY);
-            if (!Utilities.isAtLeastO()) {
+            if (!Utilities.ATLEAST_OREO) {
                 getPreferenceScreen().removePreference(
                         findPreference(SessionCommitReceiver.ADD_ICON_PREFERENCE_KEY));
                 getPreferenceScreen().removePreference(iconBadgingPref);

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AppWidgetManagerCompat {
     public static AppWidgetManagerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isAtLeastO()) {
+                if (Utilities.ATLEAST_OREO) {
                     sInstance = new AppWidgetManagerCompatVO(context.getApplicationContext());
                 } else {
                     sInstance = new AppWidgetManagerCompatVL(context.getApplicationContext());

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -53,7 +53,7 @@ protected LauncherAppsCompat() {
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isAtLeastO()) {
+                if (Utilities.ATLEAST_OREO) {
                     sInstance = new LauncherAppsCompatVO(context.getApplicationContext());
                 } else {
                     sInstance = new LauncherAppsCompatVL(context.getApplicationContext());

File: src/com/android/launcher3/compat/WallpaperManagerCompat.java
Patch:
@@ -31,10 +31,10 @@ public static WallpaperManagerCompat getInstance(Context context) {
             if (sInstance == null) {
                 context = context.getApplicationContext();
 
-                if (Utilities.isAtLeastO()) {
+                if (Utilities.ATLEAST_OREO) {
                     try {
                         sInstance = new WallpaperManagerCompatVOMR1(context);
-                    } catch (Exception e) {
+                    } catch (Throwable e) {
                         // The wallpaper APIs do not yet exist
                     }
                 }

File: src/com/android/launcher3/compat/WallpaperManagerCompatVOMR1.java
Patch:
@@ -35,8 +35,9 @@ public class WallpaperManagerCompatVOMR1 extends WallpaperManagerCompat {
     private final WallpaperManager mWm;
     private Method mWCColorHintsMethod;
 
-    WallpaperManagerCompatVOMR1(Context context) throws Exception {
+    WallpaperManagerCompatVOMR1(Context context) throws Throwable {
         mWm = context.getSystemService(WallpaperManager.class);
+        String className = WallpaperColors.class.getName();
         try {
             mWCColorHintsMethod = WallpaperColors.class.getDeclaredMethod("getColorHints");
         } catch (Exception exc) {

File: src/com/android/launcher3/dragndrop/DragView.java
Patch:
@@ -193,7 +193,7 @@ public void onAnimationEnd(Animator animation) {
      */
     @TargetApi(Build.VERSION_CODES.O)
     public void setItemInfo(final ItemInfo info) {
-        if (!(FeatureFlags.LAUNCHER3_SPRING_ICONS && Utilities.isAtLeastO())) {
+        if (!(FeatureFlags.LAUNCHER3_SPRING_ICONS && Utilities.ATLEAST_OREO)) {
             return;
         }
         if (info.itemType != LauncherSettings.Favorites.ITEM_TYPE_APPLICATION &&

File: src/com/android/launcher3/dragndrop/PinItemDragListener.java
Patch:
@@ -128,7 +128,7 @@ public static RemoteViews getPreview(PinItemRequest request) {
     }
 
     public static boolean handleDragRequest(Launcher launcher, Intent intent) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return false;
         }
         if (intent == null || !Intent.ACTION_MAIN.equals(intent.getAction())) {

File: src/com/android/launcher3/graphics/DrawableFactory.java
Patch:
@@ -80,7 +80,7 @@ public PreloadIconDrawable newPendingIcon(Bitmap icon, Context context) {
 
 
     protected Path getPreloadProgressPath(Context context) {
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             try {
                 // Try to load the path from Mask Icon
                 Drawable icon = context.getDrawable(R.drawable.adaptive_icon_drawable_wrapper);

File: src/com/android/launcher3/graphics/IconNormalizer.java
Patch:
@@ -231,7 +231,7 @@ private boolean isTransparentBitmap(Bitmap bitmap) {
      */
     public synchronized float getScale(@NonNull Drawable d, @Nullable RectF outBounds,
             @Nullable Path path, @Nullable boolean[] outMaskShape) {
-        if (Utilities.isAtLeastO() && d instanceof AdaptiveIconDrawable &&
+        if (Utilities.ATLEAST_OREO && d instanceof AdaptiveIconDrawable &&
                 mAdaptiveIconScale != SCALE_NOT_INITIALIZED) {
             if (outBounds != null) {
                 outBounds.set(mAdaptiveIconBounds);
@@ -347,7 +347,7 @@ public synchronized float getScale(@NonNull Drawable d, @Nullable RectF outBound
         float areaScale = area / (width * height);
         // Use sqrt of the final ratio as the images is scaled across both width and height.
         float scale = areaScale > scaleRequired ? (float) Math.sqrt(scaleRequired / areaScale) : 1;
-        if (Utilities.isAtLeastO() && d instanceof AdaptiveIconDrawable &&
+        if (Utilities.ATLEAST_OREO && d instanceof AdaptiveIconDrawable &&
                 mAdaptiveIconScale == SCALE_NOT_INITIALIZED) {
             mAdaptiveIconScale = scale;
             mAdaptiveIconBounds.set(mBounds);

File: src/com/android/launcher3/graphics/IconShapeOverride.java
Patch:
@@ -59,7 +59,7 @@ public class IconShapeOverride {
     private static final int RESTART_REQUEST_CODE = 42; // the answer to everything
 
     public static boolean isSupported(Context context) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return false;
         }
         // Only supported when developer settings is enabled
@@ -82,7 +82,7 @@ public static boolean isSupported(Context context) {
     }
 
     public static void apply(Context context) {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return;
         }
         String path = getAppliedValue(context);

File: src/com/android/launcher3/graphics/ShadowDrawable.java
Patch:
@@ -146,7 +146,7 @@ private void regenerateBitmapCache() {
             d.draw(canvas);
         }
 
-        if (Utilities.isAtLeastO()) {
+        if (Utilities.ATLEAST_OREO) {
             bitmap = bitmap.copy(Bitmap.Config.HARDWARE, false);
         }
         mState.mLastDrawnBitmap = bitmap;

File: src/com/android/launcher3/model/PackageUpdatedTask.java
Patch:
@@ -101,7 +101,7 @@ public void execute(LauncherAppState app, BgDataModel dataModel, AllAppsList app
                     appsList.addPackage(context, packages[i], mUser);
 
                     // Automatically add homescreen icon for work profile apps for below O device.
-                    if (!Utilities.isAtLeastO() && !Process.myUserHandle().equals(mUser)) {
+                    if (!Utilities.ATLEAST_OREO && !Process.myUserHandle().equals(mUser)) {
                         SessionCommitReceiver.queueAppIconAddition(context, packages[i], mUser);
                     }
                 }
@@ -342,7 +342,7 @@ public void execute(Callbacks callbacks) {
                     callbacks.notifyWidgetProvidersChanged();
                 }
             });
-        } else if (Utilities.isAtLeastO() && mOp == OP_ADD) {
+        } else if (Utilities.ATLEAST_OREO && mOp == OP_ADD) {
             // Load widgets for the new package.
             for (int i = 0; i < N; i++) {
                 dataModel.widgetsModel.update(app, new PackageUserKey(packages[i], mUser));

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -67,7 +67,7 @@ public static void onAllAppsLoaded(final Context context,
             return;
         }
 
-        if (Utilities.isAtLeastO() && !SessionCommitReceiver.isEnabled(context)) {
+        if (Utilities.ATLEAST_OREO && !SessionCommitReceiver.isEnabled(context)) {
             // Just mark the folder id preference to avoid new folder creation later.
             ufi.prefs.edit().putLong(ufi.folderIdKey, ItemInfo.NO_ID).apply();
             return;

File: src/com/android/launcher3/util/SystemUiController.java
Patch:
@@ -59,7 +59,7 @@ public void updateUiState(int uiState, int flags) {
         // Apply the state flags in priority order
         int newFlags = oldFlags;
         for (int stateFlag : mStates) {
-            if (Utilities.isAtLeastO()) {
+            if (Utilities.ATLEAST_OREO) {
                 if ((stateFlag & FLAG_LIGHT_NAV) != 0) {
                     newFlags |= View.SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR;
                 } else if ((stateFlag & FLAG_DARK_NAV) != 0) {

File: tests/src/com/android/launcher3/ui/widget/RequestPinItemTest.java
Patch:
@@ -141,7 +141,7 @@ public boolean evaluate(ItemInfo info, View view) {
 
     private void runTest(String activityMethod, boolean isWidget, ItemOperator itemMatcher,
             Intent... commandIntents) throws Throwable {
-        if (!Utilities.isAtLeastO()) {
+        if (!Utilities.ATLEAST_OREO) {
             return;
         }
         lockRotation(true);

File: src/com/android/launcher3/popup/PopupContainerWithArrow.java
Patch:
@@ -275,8 +275,9 @@ private void addDummyViews(PopupPopulator.Item[] itemTypesToPopulate, int numNot
             if (itemTypeToPopulate == PopupPopulator.Item.NOTIFICATION) {
                 mNotificationItemView = (NotificationItemView) item;
                 boolean notificationFooterHasIcons = numNotifications > 1;
-                int footerHeight = notificationFooterHasIcons ?
-                        res.getDimensionPixelSize(R.dimen.notification_footer_height) : 0;
+                int footerHeight = res.getDimensionPixelSize(
+                        notificationFooterHasIcons ? R.dimen.notification_footer_height
+                                : R.dimen.notification_empty_footer_height);
                 item.findViewById(R.id.footer).getLayoutParams().height = footerHeight;
                 if (notificationFooterHasIcons) {
                     mNotificationItemView.findViewById(R.id.divider).setVisibility(VISIBLE);

File: src/com/android/launcher3/allapps/search/DefaultAppSearchAlgorithm.java
Patch:
@@ -141,8 +141,7 @@ private static boolean isBreak(int thisType, int prevType, int nextType) {
                 // Always a break point for a symbol
                 return true;
             default:
-                // Always a break point at first character
-                return  prevType == Character.UNASSIGNED;
+                return  false;
         }
     }
 

File: src/com/android/launcher3/graphics/IconShapeOverride.java
Patch:
@@ -130,7 +130,7 @@ private static class ResourcesOverride extends Resources {
         private final int mOverrideId;
         private final String mOverrideValue;
 
-        @SuppressWarnings("deprecated")
+        @SuppressWarnings("deprecation")
         public ResourcesOverride(Resources parent, int overrideId, String overrideValue) {
             super(parent.getAssets(), parent.getDisplayMetrics(), parent.getConfiguration());
             mOverrideId = overrideId;

File: src/com/android/launcher3/graphics/IconShapeOverride.java
Patch:
@@ -130,7 +130,7 @@ private static class ResourcesOverride extends Resources {
         private final int mOverrideId;
         private final String mOverrideValue;
 
-        @SuppressWarnings("deprecated")
+        @SuppressWarnings("deprecation")
         public ResourcesOverride(Resources parent, int overrideId, String overrideValue) {
             super(parent.getAssets(), parent.getDisplayMetrics(), parent.getConfiguration());
             mOverrideId = overrideId;

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -95,6 +95,4 @@ boolean startSearch(
     int SEARCH_BAR_HEIGHT_NORMAL = 0, SEARCH_BAR_HEIGHT_TALL = 1;
     /** Must return one of {@link #SEARCH_BAR_HEIGHT_NORMAL} or {@link #SEARCH_BAR_HEIGHT_TALL} */
     int getSearchBarHeight();
-
-    boolean shouldShowDiscoveryBounce();
 }

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -99,7 +99,7 @@ public class AllAppsTransitionController implements TouchController, SwipeDetect
 
     // Used in discovery bounce animation to provide the transition without workspace changing.
     private boolean mIsTranslateWithoutWorkspace = false;
-    private AnimatorSet mDiscoBounceAnimation;
+    private Animator mDiscoBounceAnimation;
     private GradientView mGradientView;
 
     private SpringAnimation mSearchSpring;
@@ -421,8 +421,8 @@ public void showDiscoveryBounce() {
         cancelDiscoveryAnimation();
 
         // assumption is that this variable is always null
-        mDiscoBounceAnimation = (AnimatorSet) AnimatorInflater.loadAnimator(mLauncher,
-                R.anim.discovery_bounce);
+        mDiscoBounceAnimation = AnimatorInflater.loadAnimator(mLauncher,
+                R.animator.discovery_bounce);
         mDiscoBounceAnimation.addListener(new AnimatorListenerAdapter() {
             @Override
             public void onAnimationStart(Animator animator) {

File: src/com/android/launcher3/IconProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.content.pm.LauncherActivityInfo;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 
 import java.util.Locale;
 
@@ -17,7 +18,7 @@ public IconProvider() {
     }
 
     public void updateSystemStateString() {
-        mSystemState = Locale.getDefault().toString();
+        mSystemState = Locale.getDefault().toString() + "," + Build.VERSION.SDK_INT;
     }
 
     public String getIconSystemState(String packageName) {

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -349,8 +349,6 @@ public void setInsets(Rect insets) {
             ViewGroup.LayoutParams navBarBgLp = navBarBg.getLayoutParams();
             navBarBgLp.height = insets.bottom;
             navBarBg.setLayoutParams(navBarBgLp);
-            navBarBg.setVisibility(FeatureFlags.LAUNCHER3_GRADIENT_ALL_APPS
-                    ? View.INVISIBLE : View.VISIBLE);
         }
     }
 

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -184,7 +184,7 @@ public void applyFromShortcutInfo(ShortcutInfo info) {
     public void applyFromShortcutInfo(ShortcutInfo info, boolean promiseStateChanged) {
         applyIconAndLabel(info.iconBitmap, info);
         setTag(info);
-        if (promiseStateChanged || info.isPromise()) {
+        if (promiseStateChanged || (info.hasPromiseIconUi())) {
             applyPromiseState(promiseStateChanged);
         }
 
@@ -481,7 +481,7 @@ public void cancelLongPress() {
     public void applyPromiseState(boolean promiseStateChanged) {
         if (getTag() instanceof ShortcutInfo) {
             ShortcutInfo info = (ShortcutInfo) getTag();
-            final boolean isPromise = info.isPromise();
+            final boolean isPromise = info.hasPromiseIconUi();
             final int progressLevel = isPromise ?
                     ((info.hasStatusFlag(ShortcutInfo.FLAG_INSTALL_SESSION_ACTIVE) ?
                             info.getInstallProgress() : 0)) : 100;

File: src/com/android/launcher3/InfoDropTarget.java
Patch:
@@ -75,7 +75,7 @@ public static boolean startDetailsActivityForInfo(ItemInfo info, Launcher launch
         if (info instanceof AppInfo) {
             componentName = ((AppInfo) info).componentName;
         } else if (info instanceof ShortcutInfo) {
-            componentName = ((ShortcutInfo) info).intent.getComponent();
+            componentName = info.getTargetComponent();
         } else if (info instanceof PendingAddItemInfo) {
             componentName = ((PendingAddItemInfo) info).componentName;
         } else if (info instanceof LauncherAppWidgetInfo) {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -113,14 +113,14 @@
 import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.popup.PopupDataProvider;
 import com.android.launcher3.shortcuts.DeepShortcutManager;
-import com.android.launcher3.shortcuts.ShortcutKey;
 import com.android.launcher3.userevent.nano.LauncherLogProto;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Action;
 import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.userevent.nano.LauncherLogProto.ControlType;
 import com.android.launcher3.util.ActivityResultInfo;
 import com.android.launcher3.util.RunnableWithId;
 import com.android.launcher3.util.ComponentKey;
+import com.android.launcher3.util.ComponentKeyMapper;
 import com.android.launcher3.util.ItemInfoMatcher;
 import com.android.launcher3.util.MultiHashMap;
 import com.android.launcher3.util.PackageManagerHelper;
@@ -2424,7 +2424,7 @@ protected void onClickAppShortcut(final View v) {
         }
 
         // Check for abandoned promise
-        if ((v instanceof BubbleTextView) && shortcut.isPromise()) {
+        if ((v instanceof BubbleTextView) && shortcut.hasPromiseIconUi()) {
             String packageName = shortcut.intent.getComponent() != null ?
                     shortcut.intent.getComponent().getPackageName() : shortcut.intent.getPackage();
             if (!TextUtils.isEmpty(packageName)) {
@@ -3068,7 +3068,7 @@ public void exitSpringLoadedDragMode() {
      */
     public void tryAndUpdatePredictedApps() {
         if (mLauncherCallbacks != null) {
-            List<ComponentKey> apps = mLauncherCallbacks.getPredictedApps();
+            List<ComponentKeyMapper<AppInfo>> apps = mLauncherCallbacks.getPredictedApps();
             if (apps != null) {
                 mAppsView.setPredictedApps(apps);
             }

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -21,7 +21,7 @@
 import android.view.Menu;
 import android.view.View;
 
-import com.android.launcher3.util.ComponentKey;
+import com.android.launcher3.util.ComponentKeyMapper;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -91,7 +91,7 @@ boolean startSearch(
      */
     boolean shouldMoveToDefaultScreenOnHomeIntent();
     boolean hasSettings();
-    List<ComponentKey> getPredictedApps();
+    List<ComponentKeyMapper<AppInfo>> getPredictedApps();
     int SEARCH_BAR_HEIGHT_NORMAL = 0, SEARCH_BAR_HEIGHT_TALL = 1;
     /** Must return one of {@link #SEARCH_BAR_HEIGHT_NORMAL} or {@link #SEARCH_BAR_HEIGHT_TALL} */
     int getSearchBarHeight();

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -50,6 +50,7 @@
 import com.android.launcher3.keyboard.FocusedItemDecorator;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;
 import com.android.launcher3.util.ComponentKey;
+import com.android.launcher3.util.ComponentKeyMapper;
 import com.android.launcher3.util.PackageUserKey;
 
 import java.util.List;
@@ -116,7 +117,7 @@ protected void updateBackground(
     /**
      * Sets the current set of predicted apps.
      */
-    public void setPredictedApps(List<ComponentKey> apps) {
+    public void setPredictedApps(List<ComponentKeyMapper<AppInfo>> apps) {
         mApps.setPredictedApps(apps);
     }
 

File: src/com/android/launcher3/model/PackageInstallStateChangedTask.java
Patch:
@@ -94,7 +94,7 @@ public void execute(Callbacks callbacks) {
                 if (info instanceof ShortcutInfo) {
                     ShortcutInfo si = (ShortcutInfo) info;
                     ComponentName cn = si.getTargetComponent();
-                    if (si.isPromise() && (cn != null)
+                    if (si.hasPromiseIconUi() && (cn != null)
                             && mInstallInfo.packageName.equals(cn.getPackageName())) {
                         si.setInstallProgress(mInstallInfo.progress);
                         if (mInstallInfo.state == PackageInstallerCompat.STATUS_FAILED) {

File: src/com/android/launcher3/shortcuts/DeepShortcutManager.java
Patch:
@@ -66,7 +66,7 @@ private DeepShortcutManager(Context context) {
 
     public static boolean supportsShortcuts(ItemInfo info) {
         boolean isItemPromise = info instanceof com.android.launcher3.ShortcutInfo
-                && ((com.android.launcher3.ShortcutInfo) info).isPromise();
+                && ((com.android.launcher3.ShortcutInfo) info).hasPromiseIconUi();
         return info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION
                 && !info.isDisabled() && !isItemPromise;
     }

File: src/com/android/launcher3/testing/LauncherExtension.java
Patch:
@@ -11,6 +11,7 @@
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherCallbacks;
 import com.android.launcher3.util.ComponentKey;
+import com.android.launcher3.util.ComponentKeyMapper;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -197,7 +198,7 @@ public boolean hasSettings() {
         }
 
         @Override
-        public List<ComponentKey> getPredictedApps() {
+        public List<ComponentKeyMapper<AppInfo>> getPredictedApps() {
             // To debug app predictions, enable AlphabeticalAppsList#DEBUG_PREDICTIONS
             return new ArrayList<>();
         }

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -544,7 +544,6 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
 
     public void clearResizeFrame() {
         if (mCurrentResizeFrame != null) {
-            mCurrentResizeFrame.commitResize();
             removeView(mCurrentResizeFrame);
             mCurrentResizeFrame = null;
         }

File: go/src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -25,4 +25,5 @@ private FeatureFlags() {}
 
     // Features to control Launcher3Go behavior
     public static final boolean GO_DISABLE_WIDGETS = true;
+    public static final boolean LAUNCHER3_SPRING_ICONS = false;
 }

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -62,7 +62,7 @@ public BaseContainerView(Context context, AttributeSet attrs) {
     public BaseContainerView(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
 
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && this instanceof AllAppsContainerView) {
+        if (this instanceof AllAppsContainerView) {
             mBaseDrawable = new ColorDrawable();
         } else {
             TypedArray a = context.obtainStyledAttributes(attrs,

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -592,6 +592,9 @@ public void reapplyItemInfo(ItemInfoWithIcon info) {
             mIconLoadRequest = null;
             mDisableRelayout = true;
 
+            // Optimization: Starting in N, pre-uploads the bitmap to RenderThread.
+            info.iconBitmap.prepareToDraw();
+
             if (info instanceof AppInfo) {
                 applyFromApplicationInfo((AppInfo) info);
             } else if (info instanceof ShortcutInfo) {

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -780,7 +780,7 @@ public int getCellWidth() {
         return mCellWidth;
     }
 
-    int getCellHeight() {
+    public int getCellHeight() {
         return mCellHeight;
     }
 

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -101,7 +101,7 @@ public void setInvertIfRtl(boolean invert) {
         mInvertIfRtl = invert;
     }
 
-    int getCellContentHeight() {
+    public int getCellContentHeight() {
         return Math.min(getMeasuredHeight(),
                 mLauncher.getDeviceProfile().getCellHeight(mContainerType));
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -671,7 +671,8 @@ public CellLayout insertNewWorkspaceScreen(long screenId, int insertIndex) {
         newScreen.setSoundEffectsEnabled(false);
 
         int paddingLeftRight = mLauncher.getDeviceProfile().cellLayoutPaddingLeftRightPx;
-        newScreen.setPadding(paddingLeftRight, 0, paddingLeftRight, 0);
+        int paddingBottom = mLauncher.getDeviceProfile().cellLayoutBottomPaddingPx;
+        newScreen.setPadding(paddingLeftRight, 0, paddingLeftRight, paddingBottom);
 
         mWorkspaceScreens.put(screenId, newScreen);
         mScreenOrder.add(insertIndex, screenId);

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -173,7 +173,7 @@ public void run() {
 
                         ArrayList<ItemInfo> itemList = new ArrayList<>();
                         itemList.add(info);
-                        mLauncher.bindItems(itemList, 0, itemList.size(), true);
+                        mLauncher.bindItems(itemList, true);
                     } else if (item instanceof PendingAddItemInfo) {
                         PendingAddItemInfo info = (PendingAddItemInfo) item;
                         Workspace workspace = mLauncher.getWorkspace();
@@ -205,7 +205,7 @@ public void run() {
                 public void run() {
                     ArrayList<ItemInfo> itemList = new ArrayList<>();
                     itemList.add(item);
-                    mLauncher.bindItems(itemList, 0, itemList.size(), true);
+                    mLauncher.bindItems(itemList, true);
                     announceConfirmation(R.string.item_moved);
                 }
             });

File: src/com/android/launcher3/accessibility/ShortcutMenuAccessibilityDelegate.java
Patch:
@@ -73,7 +73,7 @@ public void run() {
                             screenId, coordinates[0], coordinates[1]);
                     ArrayList<ItemInfo> itemList = new ArrayList<>();
                     itemList.add(info);
-                    mLauncher.bindItems(itemList, 0, itemList.size(), true);
+                    mLauncher.bindItems(itemList, true);
                     AbstractFloatingView.closeAllOpenViews(mLauncher);
                     announceConfirmation(R.string.item_added_to_workspace);
                 }

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -283,7 +283,9 @@ private void updateLightStatusBar(float shift) {
         }
 
         // Use a light system UI (dark icons) if all apps is behind at least half of the status bar.
-        boolean forceChange = shift <= mStatusBarHeight / 2;
+        boolean forceChange = FeatureFlags.LAUNCHER3_GRADIENT_ALL_APPS ?
+                shift <= mShiftRange / 4 :
+                shift <= mStatusBarHeight / 2;
         if (forceChange) {
             mLauncher.getSystemUiController().updateUiState(
                     SystemUiController.UI_STATE_ALL_APPS, !mIsDarkTheme);

File: src/com/android/launcher3/allapps/search/AppsSearchContainerLayout.java
Patch:
@@ -108,8 +108,7 @@ protected void onFinishInflate() {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP &&
-                !mLauncher.getDeviceProfile().isVerticalBarLayout()) {
+        if (!mLauncher.getDeviceProfile().isVerticalBarLayout()) {
             getLayoutParams().height = mLauncher.getDragLayer().getInsets().top + mMinHeight;
         }
         super.onMeasure(widthMeasureSpec, heightMeasureSpec);

File: src/com/android/launcher3/compat/WallpaperManagerCompatVOMR1.java
Patch:
@@ -20,6 +20,7 @@
 import android.content.Context;
 import android.graphics.Color;
 import android.os.Build;
+import android.os.Handler;
 import android.support.annotation.Nullable;
 import android.util.Log;
 
@@ -48,8 +49,7 @@ public class WallpaperManagerCompatVOMR1 extends WallpaperManagerCompat {
 
         mOCLClass = Class.forName("android.app.WallpaperManager$OnColorsChangedListener");
         mAddOCLMethod = WallpaperManager.class.getDeclaredMethod(
-                "addOnColorsChangedListener", mOCLClass);
-
+                "addOnColorsChangedListener", mOCLClass, Handler.class);
         mWCGetMethod = WallpaperManager.class.getDeclaredMethod("getWallpaperColors", int.class);
         Class wallpaperColorsClass = mWCGetMethod.getReturnType();
         mWCGetPrimaryColorMethod = wallpaperColorsClass.getDeclaredMethod("getPrimaryColor");
@@ -89,7 +89,7 @@ public Object invoke(Object o, Method method, Object[] objects)
                     }
                 });
         try {
-            mAddOCLMethod.invoke(mWm, onChangeListener);
+            mAddOCLMethod.invoke(mWm, onChangeListener, null);
         } catch (Exception e) {
             Log.e(TAG, "Error calling wallpaper API", e);
         }

File: src/com/android/launcher3/config/BaseFlags.java
Patch:
@@ -34,12 +34,11 @@ abstract class BaseFlags {
     public static boolean LAUNCHER3_DISABLE_ICON_NORMALIZATION = false;
     public static boolean LAUNCHER3_LEGACY_FOLDER_ICON = false;
     public static boolean LAUNCHER3_DISABLE_PINCH_TO_OVERVIEW = false;
-    public static boolean LAUNCHER3_ALL_APPS_PULL_UP = true;
     public static boolean LAUNCHER3_NEW_FOLDER_ANIMATION = true;
     // When enabled allows to use any point on the fast scrollbar to start dragging.
     public static final boolean LAUNCHER3_DIRECT_SCROLL = true;
     // When enabled while all-apps open, the soft input will be set to adjust resize .
-    public static final boolean LAUNCHER3_UPDATE_SOFT_INPUT_MODE = true;
+    public static final boolean LAUNCHER3_UPDATE_SOFT_INPUT_MODE = false;
     // When enabled the promise icon is visible in all apps while installation an app.
     public static final boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = false;
     // When enabled uses the AllAppsRadialGradientAndScrimDrawable for all apps

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -243,7 +243,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
             return true;
         }
 
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && mAllAppsController.onControllerInterceptTouchEvent(ev)) {
+        if (mAllAppsController.onControllerInterceptTouchEvent(ev)) {
             mActiveController = mAllAppsController;
             return true;
         }

File: src/com/android/launcher3/model/AddWorkspaceItemsTask.java
Patch:
@@ -158,7 +158,7 @@ public void execute(Callbacks callbacks) {
                         }
                     }
                     callbacks.bindAppsAdded(addedWorkspaceScreensFinal,
-                            addNotAnimated, addAnimated, null);
+                            addNotAnimated, addAnimated);
                 }
             });
         }

File: src/com/android/launcher3/model/CacheDataUpdatedTask.java
Patch:
@@ -77,7 +77,7 @@ && isValidShortcut(si) && cn != null
             scheduleCallbackTask(new CallbackTask() {
                 @Override
                 public void execute(Callbacks callbacks) {
-                    callbacks.bindAppsUpdated(updatedApps);
+                    callbacks.bindAppsAddedOrUpdated(updatedApps);
                 }
             });
         }

File: src/com/android/launcher3/util/SystemUiController.java
Patch:
@@ -30,14 +30,15 @@ public class SystemUiController {
     public static final int UI_STATE_BASE_WINDOW = 0;
     public static final int UI_STATE_ALL_APPS = 1;
     public static final int UI_STATE_WIDGET_BOTTOM_SHEET = 2;
+    public static final int UI_STATE_ROOT_VIEW = 3;
 
     public static final int FLAG_LIGHT_NAV = 1 << 0;
     public static final int FLAG_DARK_NAV = 1 << 1;
     public static final int FLAG_LIGHT_STATUS = 1 << 2;
     public static final int FLAG_DARK_STATUS = 1 << 3;
 
     private final Window mWindow;
-    private final int[] mStates = new int[3];
+    private final int[] mStates = new int[4];
 
     public SystemUiController(Window window) {
         mWindow = window;

File: tests/src/com/android/launcher3/model/AddWorkspaceItemsTaskTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.mockito.ArgumentCaptor;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
+import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -131,7 +131,7 @@ public void testAddItem_some_items_added() throws Exception {
         // only info2 should be added because info was already added to the workspace
         // in setupWorkspaceWithHoles()
         verify(callbacks).bindAppsAdded(any(ArrayList.class), notAnimated.capture(),
-                animated.capture(), any(ArrayList.class));
+                animated.capture());
         assertTrue(notAnimated.getValue().isEmpty());
 
         assertEquals(1, animated.getValue().size());

File: src/com/android/launcher3/compat/WallpaperManagerCompatVOMR1.java
Patch:
@@ -20,6 +20,7 @@
 import android.content.Context;
 import android.graphics.Color;
 import android.os.Build;
+import android.os.Handler;
 import android.support.annotation.Nullable;
 import android.util.Log;
 
@@ -48,8 +49,7 @@ public class WallpaperManagerCompatVOMR1 extends WallpaperManagerCompat {
 
         mOCLClass = Class.forName("android.app.WallpaperManager$OnColorsChangedListener");
         mAddOCLMethod = WallpaperManager.class.getDeclaredMethod(
-                "addOnColorsChangedListener", mOCLClass);
-
+                "addOnColorsChangedListener", mOCLClass, Handler.class);
         mWCGetMethod = WallpaperManager.class.getDeclaredMethod("getWallpaperColors", int.class);
         Class wallpaperColorsClass = mWCGetMethod.getReturnType();
         mWCGetPrimaryColorMethod = wallpaperColorsClass.getDeclaredMethod("getPrimaryColor");
@@ -89,7 +89,7 @@ public Object invoke(Object o, Method method, Object[] objects)
                     }
                 });
         try {
-            mAddOCLMethod.invoke(mWm, onChangeListener);
+            mAddOCLMethod.invoke(mWm, onChangeListener, null);
         } catch (Exception e) {
             Log.e(TAG, "Error calling wallpaper API", e);
         }

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -62,7 +62,7 @@ public BaseContainerView(Context context, AttributeSet attrs) {
     public BaseContainerView(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
 
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && this instanceof AllAppsContainerView) {
+        if (this instanceof AllAppsContainerView) {
             mBaseDrawable = new ColorDrawable();
         } else {
             TypedArray a = context.obtainStyledAttributes(attrs,

File: src/com/android/launcher3/allapps/search/AppsSearchContainerLayout.java
Patch:
@@ -108,8 +108,7 @@ protected void onFinishInflate() {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP &&
-                !mLauncher.getDeviceProfile().isVerticalBarLayout()) {
+        if (!mLauncher.getDeviceProfile().isVerticalBarLayout()) {
             getLayoutParams().height = mLauncher.getDragLayer().getInsets().top + mMinHeight;
         }
         super.onMeasure(widthMeasureSpec, heightMeasureSpec);

File: src/com/android/launcher3/config/BaseFlags.java
Patch:
@@ -34,7 +34,6 @@ abstract class BaseFlags {
     public static boolean LAUNCHER3_DISABLE_ICON_NORMALIZATION = false;
     public static boolean LAUNCHER3_LEGACY_FOLDER_ICON = false;
     public static boolean LAUNCHER3_DISABLE_PINCH_TO_OVERVIEW = false;
-    public static boolean LAUNCHER3_ALL_APPS_PULL_UP = true;
     public static boolean LAUNCHER3_NEW_FOLDER_ANIMATION = true;
     // When enabled allows to use any point on the fast scrollbar to start dragging.
     public static final boolean LAUNCHER3_DIRECT_SCROLL = true;

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -243,7 +243,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
             return true;
         }
 
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && mAllAppsController.onControllerInterceptTouchEvent(ev)) {
+        if (mAllAppsController.onControllerInterceptTouchEvent(ev)) {
             mActiveController = mAllAppsController;
             return true;
         }

File: tests/src/com/android/launcher3/ui/AbstractLauncherUiTest.java
Patch:
@@ -103,7 +103,7 @@ protected Instrumentation getInstrumentation() {
      */
     protected UiObject2 openAllApps() {
         mDevice.waitForIdle();
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP) {
+        if (FeatureFlags.NO_ALL_APPS_ICON) {
             // clicking on the page indicator brings up all apps tray on non tablets.
             findViewById(R.id.page_indicator).click();
         } else {

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -62,7 +62,7 @@ public BaseContainerView(Context context, AttributeSet attrs) {
     public BaseContainerView(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
 
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && this instanceof AllAppsContainerView) {
+        if (this instanceof AllAppsContainerView) {
             mBaseDrawable = new ColorDrawable();
         } else {
             TypedArray a = context.obtainStyledAttributes(attrs,

File: src/com/android/launcher3/allapps/search/AppsSearchContainerLayout.java
Patch:
@@ -108,8 +108,7 @@ protected void onFinishInflate() {
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP &&
-                !mLauncher.getDeviceProfile().isVerticalBarLayout()) {
+        if (!mLauncher.getDeviceProfile().isVerticalBarLayout()) {
             getLayoutParams().height = mLauncher.getDragLayer().getInsets().top + mMinHeight;
         }
         super.onMeasure(widthMeasureSpec, heightMeasureSpec);

File: src/com/android/launcher3/config/BaseFlags.java
Patch:
@@ -34,7 +34,6 @@ abstract class BaseFlags {
     public static boolean LAUNCHER3_DISABLE_ICON_NORMALIZATION = false;
     public static boolean LAUNCHER3_LEGACY_FOLDER_ICON = false;
     public static boolean LAUNCHER3_DISABLE_PINCH_TO_OVERVIEW = false;
-    public static boolean LAUNCHER3_ALL_APPS_PULL_UP = true;
     public static boolean LAUNCHER3_NEW_FOLDER_ANIMATION = true;
     // When enabled allows to use any point on the fast scrollbar to start dragging.
     public static final boolean LAUNCHER3_DIRECT_SCROLL = true;

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -243,7 +243,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
             return true;
         }
 
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && mAllAppsController.onControllerInterceptTouchEvent(ev)) {
+        if (mAllAppsController.onControllerInterceptTouchEvent(ev)) {
             mActiveController = mAllAppsController;
             return true;
         }

File: tests/src/com/android/launcher3/ui/AbstractLauncherUiTest.java
Patch:
@@ -103,7 +103,7 @@ protected Instrumentation getInstrumentation() {
      */
     protected UiObject2 openAllApps() {
         mDevice.waitForIdle();
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP) {
+        if (FeatureFlags.NO_ALL_APPS_ICON) {
             // clicking on the page indicator brings up all apps tray on non tablets.
             findViewById(R.id.page_indicator).click();
         } else {

File: src/com/android/launcher3/util/SystemUiController.java
Patch:
@@ -30,14 +30,15 @@ public class SystemUiController {
     public static final int UI_STATE_BASE_WINDOW = 0;
     public static final int UI_STATE_ALL_APPS = 1;
     public static final int UI_STATE_WIDGET_BOTTOM_SHEET = 2;
+    public static final int UI_STATE_ROOT_VIEW = 3;
 
     public static final int FLAG_LIGHT_NAV = 1 << 0;
     public static final int FLAG_DARK_NAV = 1 << 1;
     public static final int FLAG_LIGHT_STATUS = 1 << 2;
     public static final int FLAG_DARK_STATUS = 1 << 3;
 
     private final Window mWindow;
-    private final int[] mStates = new int[3];
+    private final int[] mStates = new int[4];
 
     public SystemUiController(Window window) {
         mWindow = window;

File: src/com/android/launcher3/util/SystemUiController.java
Patch:
@@ -30,14 +30,15 @@ public class SystemUiController {
     public static final int UI_STATE_BASE_WINDOW = 0;
     public static final int UI_STATE_ALL_APPS = 1;
     public static final int UI_STATE_WIDGET_BOTTOM_SHEET = 2;
+    public static final int UI_STATE_ROOT_VIEW = 3;
 
     public static final int FLAG_LIGHT_NAV = 1 << 0;
     public static final int FLAG_DARK_NAV = 1 << 1;
     public static final int FLAG_LIGHT_STATUS = 1 << 2;
     public static final int FLAG_DARK_STATUS = 1 << 3;
 
     private final Window mWindow;
-    private final int[] mStates = new int[3];
+    private final int[] mStates = new int[4];
 
     public SystemUiController(Window window) {
         mWindow = window;

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -173,7 +173,7 @@ public void run() {
 
                         ArrayList<ItemInfo> itemList = new ArrayList<>();
                         itemList.add(info);
-                        mLauncher.bindItems(itemList, 0, itemList.size(), true);
+                        mLauncher.bindItems(itemList, true);
                     } else if (item instanceof PendingAddItemInfo) {
                         PendingAddItemInfo info = (PendingAddItemInfo) item;
                         Workspace workspace = mLauncher.getWorkspace();
@@ -205,7 +205,7 @@ public void run() {
                 public void run() {
                     ArrayList<ItemInfo> itemList = new ArrayList<>();
                     itemList.add(item);
-                    mLauncher.bindItems(itemList, 0, itemList.size(), true);
+                    mLauncher.bindItems(itemList, true);
                     announceConfirmation(R.string.item_moved);
                 }
             });

File: src/com/android/launcher3/accessibility/ShortcutMenuAccessibilityDelegate.java
Patch:
@@ -73,7 +73,7 @@ public void run() {
                             screenId, coordinates[0], coordinates[1]);
                     ArrayList<ItemInfo> itemList = new ArrayList<>();
                     itemList.add(info);
-                    mLauncher.bindItems(itemList, 0, itemList.size(), true);
+                    mLauncher.bindItems(itemList, true);
                     AbstractFloatingView.closeAllOpenViews(mLauncher);
                     announceConfirmation(R.string.item_added_to_workspace);
                 }

File: src/com/android/launcher3/model/AddWorkspaceItemsTask.java
Patch:
@@ -158,7 +158,7 @@ public void execute(Callbacks callbacks) {
                         }
                     }
                     callbacks.bindAppsAdded(addedWorkspaceScreensFinal,
-                            addNotAnimated, addAnimated, null);
+                            addNotAnimated, addAnimated);
                 }
             });
         }

File: src/com/android/launcher3/model/CacheDataUpdatedTask.java
Patch:
@@ -77,7 +77,7 @@ && isValidShortcut(si) && cn != null
             scheduleCallbackTask(new CallbackTask() {
                 @Override
                 public void execute(Callbacks callbacks) {
-                    callbacks.bindAppsUpdated(updatedApps);
+                    callbacks.bindAppsAddedOrUpdated(updatedApps);
                 }
             });
         }

File: tests/src/com/android/launcher3/model/AddWorkspaceItemsTaskTest.java
Patch:
@@ -131,7 +131,7 @@ public void testAddItem_some_items_added() throws Exception {
         // only info2 should be added because info was already added to the workspace
         // in setupWorkspaceWithHoles()
         verify(callbacks).bindAppsAdded(any(ArrayList.class), notAnimated.capture(),
-                animated.capture(), isNull(ArrayList.class));
+                animated.capture());
         assertTrue(notAnimated.getValue().isEmpty());
 
         assertEquals(1, animated.getValue().size());

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -224,8 +224,8 @@ public void onFocusChange(View v, boolean hasFocus) {
         mAppsRecyclerView.setLayoutManager(mLayoutManager);
         mAppsRecyclerView.setAdapter(mAdapter);
         mAppsRecyclerView.setHasFixedSize(true);
-        // Removes the animation that can occur when updating the predicted apps in place.
-        mAppsRecyclerView.getItemAnimator().setChangeDuration(0);
+        // No animations will occur when changes occur to the items in this RecyclerView.
+        mAppsRecyclerView.setItemAnimator(null);
         if (FeatureFlags.LAUNCHER3_PHYSICS) {
             mAppsRecyclerView.setSpringAnimationHandler(mSpringAnimationHandler);
         }

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -224,8 +224,8 @@ public void onFocusChange(View v, boolean hasFocus) {
         mAppsRecyclerView.setLayoutManager(mLayoutManager);
         mAppsRecyclerView.setAdapter(mAdapter);
         mAppsRecyclerView.setHasFixedSize(true);
-        // Removes the animation that can occur when updating the predicted apps in place.
-        mAppsRecyclerView.getItemAnimator().setChangeDuration(0);
+        // No animations will occur when changes occur to the items in this RecyclerView.
+        mAppsRecyclerView.setItemAnimator(null);
         if (FeatureFlags.LAUNCHER3_PHYSICS) {
             mAppsRecyclerView.setSpringAnimationHandler(mSpringAnimationHandler);
         }

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -224,8 +224,8 @@ public void onFocusChange(View v, boolean hasFocus) {
         mAppsRecyclerView.setLayoutManager(mLayoutManager);
         mAppsRecyclerView.setAdapter(mAdapter);
         mAppsRecyclerView.setHasFixedSize(true);
-        // Removes the animation that can occur when updating the predicted apps in place.
-        mAppsRecyclerView.getItemAnimator().setChangeDuration(0);
+        // No animations will occur when changes occur to the items in this RecyclerView.
+        mAppsRecyclerView.setItemAnimator(null);
         if (FeatureFlags.LAUNCHER3_PHYSICS) {
             mAppsRecyclerView.setSpringAnimationHandler(mSpringAnimationHandler);
         }

File: src/com/android/launcher3/SettingsActivity.java
Patch:
@@ -98,6 +98,8 @@ public void onCreate(Bundle savedInstanceState) {
                 getPreferenceScreen().removePreference(
                         findPreference(SessionCommitReceiver.ADD_ICON_PREFERENCE_KEY));
                 getPreferenceScreen().removePreference(iconBadgingPref);
+            } else if (!getResources().getBoolean(R.bool.notification_badging_enabled)) {
+                getPreferenceScreen().removePreference(iconBadgingPref);
             } else {
                 // Listen to system notification badge settings while this UI is active.
                 mIconBadgingObserver = new IconBadgingObserver(

File: src/com/android/launcher3/config/BaseFlags.java
Patch:
@@ -57,8 +57,6 @@ abstract class BaseFlags {
     public static final boolean PULLDOWN_SEARCH = false;
     // When enabled the status bar may show dark icons based on the top of the wallpaper.
     public static final boolean LIGHT_STATUS_BAR = false;
-    // When enabled icons are badged with the number of notifications associated with that app.
-    public static final boolean BADGE_ICONS = true;
     // When enabled, icons not supporting {@link AdaptiveIconDrawable} will be wrapped in {@link FixedScaleDrawable}.
     public static final boolean LEGACY_ICON_TREATMENT = true;
     // When enabled, adaptive icons would have shadows baked when being stored to icon cache.

File: src/com/android/launcher3/allapps/AlphabeticalAppsList.java
Patch:
@@ -362,6 +362,7 @@ private void swapInNewPredictedApps(List<AppInfo> apps) {
         for (int i = 0; i < size; ++i) {
             AppInfo info = apps.get(i);
             AdapterItem appItem = AdapterItem.asPredictedApp(i, "", info, i);
+            appItem.rowAppIndex = i;
             mAdapterItems.set(i, appItem);
             mFilteredApps.set(i, info);
             mAdapter.notifyItemChanged(i);

File: src/com/android/launcher3/allapps/AlphabeticalAppsList.java
Patch:
@@ -362,6 +362,7 @@ private void swapInNewPredictedApps(List<AppInfo> apps) {
         for (int i = 0; i < size; ++i) {
             AppInfo info = apps.get(i);
             AdapterItem appItem = AdapterItem.asPredictedApp(i, "", info, i);
+            appItem.rowAppIndex = i;
             mAdapterItems.set(i, appItem);
             mFilteredApps.set(i, info);
             mAdapter.notifyItemChanged(i);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -671,7 +671,8 @@ public CellLayout insertNewWorkspaceScreen(long screenId, int insertIndex) {
         newScreen.setSoundEffectsEnabled(false);
 
         int paddingLeftRight = mLauncher.getDeviceProfile().cellLayoutPaddingLeftRightPx;
-        newScreen.setPadding(paddingLeftRight, 0, paddingLeftRight, 0);
+        int paddingBottom = mLauncher.getDeviceProfile().cellLayoutBottomPaddingPx;
+        newScreen.setPadding(paddingLeftRight, 0, paddingLeftRight, paddingBottom);
 
         mWorkspaceScreens.put(screenId, newScreen);
         mScreenOrder.add(insertIndex, screenId);

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -365,7 +365,7 @@ private void updateIconSize(float scale, Resources res, DisplayMetrics dm) {
         if (isVerticalBarLayout()) {
             hotseatBarSizePx = iconSizePx;
         }
-        hotseatCellHeightPx = iconSizePx + iconDrawablePaddingPx;
+        hotseatCellHeightPx = iconSizePx;
 
         if (!isVerticalBarLayout()) {
             int expectedWorkspaceHeight = availableHeightPx - hotseatBarSizePx

File: go/src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -25,4 +25,5 @@ private FeatureFlags() {}
 
     // Features to control Launcher3Go behavior
     public static final boolean GO_DISABLE_WIDGETS = true;
+    public static final boolean LAUNCHER3_SPRING_ICONS = false;
 }

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -780,7 +780,7 @@ public int getCellWidth() {
         return mCellWidth;
     }
 
-    int getCellHeight() {
+    public int getCellHeight() {
         return mCellHeight;
     }
 

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -101,7 +101,7 @@ public void setInvertIfRtl(boolean invert) {
         mInvertIfRtl = invert;
     }
 
-    int getCellContentHeight() {
+    public int getCellContentHeight() {
         return Math.min(getMeasuredHeight(),
                 mLauncher.getDeviceProfile().getCellHeight(mContainerType));
     }

File: go/src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -25,4 +25,5 @@ private FeatureFlags() {}
 
     // Features to control Launcher3Go behavior
     public static final boolean GO_DISABLE_WIDGETS = true;
+    public static final boolean LAUNCHER3_SPRING_ICONS = false;
 }

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -283,7 +283,9 @@ private void updateLightStatusBar(float shift) {
         }
 
         // Use a light system UI (dark icons) if all apps is behind at least half of the status bar.
-        boolean forceChange = shift <= mStatusBarHeight / 2;
+        boolean forceChange = FeatureFlags.LAUNCHER3_GRADIENT_ALL_APPS ?
+                shift <= mShiftRange / 4 :
+                shift <= mStatusBarHeight / 2;
         if (forceChange) {
             mLauncher.getSystemUiController().updateUiState(
                     SystemUiController.UI_STATE_ALL_APPS, !mIsDarkTheme);

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -592,6 +592,9 @@ public void reapplyItemInfo(ItemInfoWithIcon info) {
             mIconLoadRequest = null;
             mDisableRelayout = true;
 
+            // Optimization: Starting in N, pre-uploads the bitmap to RenderThread.
+            info.iconBitmap.prepareToDraw();
+
             if (info instanceof AppInfo) {
                 applyFromApplicationInfo((AppInfo) info);
             } else if (info instanceof ShortcutInfo) {

File: tests/src/com/android/launcher3/model/AddWorkspaceItemsTaskTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.mockito.ArgumentCaptor;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
+import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -131,7 +131,7 @@ public void testAddItem_some_items_added() throws Exception {
         // only info2 should be added because info was already added to the workspace
         // in setupWorkspaceWithHoles()
         verify(callbacks).bindAppsAdded(any(ArrayList.class), notAnimated.capture(),
-                animated.capture(), any(ArrayList.class));
+                animated.capture(), isNull(ArrayList.class));
         assertTrue(notAnimated.getValue().isEmpty());
 
         assertEquals(1, animated.getValue().size());

File: tests/src/com/android/launcher3/model/AddWorkspaceItemsTaskTest.java
Patch:
@@ -20,9 +20,9 @@
 import org.mockito.ArgumentCaptor;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
+import static org.mockito.Matchers.isNull;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -131,7 +131,7 @@ public void testAddItem_some_items_added() throws Exception {
         // only info2 should be added because info was already added to the workspace
         // in setupWorkspaceWithHoles()
         verify(callbacks).bindAppsAdded(any(ArrayList.class), notAnimated.capture(),
-                animated.capture(), any(ArrayList.class));
+                animated.capture(), isNull(ArrayList.class));
         assertTrue(notAnimated.getValue().isEmpty());
 
         assertEquals(1, animated.getValue().size());

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -958,6 +958,9 @@ protected void onResume() {
         } else if (mOnResumeState == State.WIDGETS) {
             showWidgetsView(false, false);
         }
+        if (mOnResumeState != State.APPS) {
+            tryAndUpdatePredictedApps();
+        }
         mOnResumeState = State.NONE;
 
         mPaused = false;

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -224,6 +224,8 @@ public void onFocusChange(View v, boolean hasFocus) {
         mAppsRecyclerView.setLayoutManager(mLayoutManager);
         mAppsRecyclerView.setAdapter(mAdapter);
         mAppsRecyclerView.setHasFixedSize(true);
+        // Removes the animation that can occur when updating the predicted apps in place.
+        mAppsRecyclerView.getItemAnimator().setChangeDuration(0);
         if (FeatureFlags.LAUNCHER3_PHYSICS) {
             mAppsRecyclerView.setSpringAnimationHandler(mSpringAnimationHandler);
         }

File: src/com/android/launcher3/model/ShortcutsChangedTask.java
Patch:
@@ -85,10 +85,10 @@ public void execute(LauncherAppState app, BgDataModel dataModel, AllAppsList app
                     removedShortcutInfos.addAll(shortcutInfos);
                     continue;
                 }
-                for (ShortcutInfo shortcutInfo : shortcutInfos) {
+                for (final ShortcutInfo shortcutInfo : shortcutInfos) {
                     shortcutInfo.updateFromDeepShortcutInfo(fullDetails, context);
-                    shortcutInfo.iconBitmap =
-                            LauncherIcons.createShortcutIcon(fullDetails, context);
+                    shortcutInfo.iconBitmap = LauncherIcons.createShortcutIcon(fullDetails, context,
+                            shortcutInfo.iconBitmap);
                     updatedShortcutInfos.add(shortcutInfo);
                 }
             }

File: src/com/android/launcher3/model/UserLockStateChangedTask.java
Patch:
@@ -85,7 +85,8 @@ public void execute(LauncherAppState app, BgDataModel dataModel, AllAppsList app
                     }
                     si.isDisabled &= ~ShortcutInfo.FLAG_DISABLED_LOCKED_USER;
                     si.updateFromDeepShortcutInfo(shortcut, context);
-                    si.iconBitmap = LauncherIcons.createShortcutIcon(shortcut, context);
+                    si.iconBitmap = LauncherIcons.createShortcutIcon(shortcut, context,
+                            si.iconBitmap);
                 } else {
                     si.isDisabled |= ShortcutInfo.FLAG_DISABLED_LOCKED_USER;
                 }

File: src/com/android/launcher3/widget/WidgetsBottomSheet.java
Patch:
@@ -276,7 +276,9 @@ public boolean onDrag(float displacement, float velocity) {
     public void setTranslationY(float translationY) {
         super.setTranslationY(translationY);
         if (mGradientBackground == null) return;
-        mGradientBackground.setProgress((mTranslationYClosed - translationY) / mTranslationYRange);
+        float p = (mTranslationYClosed - translationY) / mTranslationYRange;
+        boolean showScrim = p <= 0;
+        mGradientBackground.setProgress(p, showScrim);
     }
 
     @Override

File: src/com/android/launcher3/widget/WidgetsBottomSheet.java
Patch:
@@ -275,7 +275,9 @@ public boolean onDrag(float displacement, float velocity) {
     public void setTranslationY(float translationY) {
         super.setTranslationY(translationY);
         if (mGradientBackground == null) return;
-        mGradientBackground.setProgress((mTranslationYClosed - translationY) / mTranslationYRange);
+        float p = (mTranslationYClosed - translationY) / mTranslationYRange;
+        boolean showScrim = p <= 0;
+        mGradientBackground.setProgress(p, showScrim);
     }
 
     @Override

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -446,6 +446,8 @@ protected void dispatchDraw(Canvas canvas) {
 
         if (!mBackgroundIsVisible) return;
 
+        mPreviewItemManager.recomputePreviewDrawingParams();
+
         if (!mBackground.drawingDelegated()) {
             mBackground.drawBackground(canvas);
         }

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -446,6 +446,8 @@ protected void dispatchDraw(Canvas canvas) {
 
         if (!mBackgroundIsVisible) return;
 
+        mPreviewItemManager.recomputePreviewDrawingParams();
+
         if (!mBackground.drawingDelegated()) {
             mBackground.drawBackground(canvas);
         }

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -446,6 +446,8 @@ protected void dispatchDraw(Canvas canvas) {
 
         if (!mBackgroundIsVisible) return;
 
+        mPreviewItemManager.recomputePreviewDrawingParams();
+
         if (!mBackground.drawingDelegated()) {
             mBackground.drawBackground(canvas);
         }

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -387,7 +387,6 @@ private void playCommonTransitionAnimations(
     private void startAnimationToWorkspaceFromAllApps(final Workspace.State fromWorkspaceState,
             final Workspace.State toWorkspaceState, final boolean animated, int type,
             final Runnable onCompleteRunnable) {
-        final AllAppsContainerView appsView = mLauncher.getAppsView();
         // No alpha anim from all apps
         PrivateTransitionCallbacks cb = new PrivateTransitionCallbacks(1f) {
             @Override
@@ -417,12 +416,11 @@ public void onAnimationEnd(Animator animation) {
             @Override
             void onTransitionComplete() {
                 mLauncher.getUserEventDispatcher().resetElapsedContainerMillis();
-                appsView.reset();
             }
         };
         // Only animate the search bar if animating to spring loaded mode from all apps
         startAnimationToWorkspaceFromOverlay(fromWorkspaceState, toWorkspaceState,
-                mLauncher.getStartViewForAllAppsRevealAnimation(), appsView,
+                mLauncher.getStartViewForAllAppsRevealAnimation(), mLauncher.getAppsView(),
                 animated, type, onCompleteRunnable, cb);
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -133,7 +133,7 @@ public void run() {
         }
     };
 
-    public interface Callbacks {
+    public interface Callbacks extends LauncherAppWidgetHost.ProviderChangedListener {
         public boolean setLoadOnResume();
         public int getCurrentWorkspaceScreen();
         public void clearPendingBinds();
@@ -159,7 +159,6 @@ public void bindWorkspaceComponentsRemoved(
                 HashSet<String> packageNames, HashSet<ComponentName> components,
                 UserHandle user);
         public void bindAppInfosRemoved(ArrayList<AppInfo> appInfos);
-        public void notifyWidgetProvidersChanged();
         public void bindAllWidgets(MultiHashMap<PackageItemInfo, WidgetItem> widgets);
         public void onPageBoundSynchronously(int page);
         public void executeOnNextDraw(ViewOnDrawExecutor executor);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1031,7 +1031,7 @@ public long generateNewItemId() {
         }
 
         public AppWidgetHost newLauncherWidgetHost() {
-            return new AppWidgetHost(mContext, Launcher.APPWIDGET_HOST_ID);
+            return new LauncherAppWidgetHost(mContext);
         }
 
         @Override

File: tests/src/com/android/launcher3/ui/widget/BindWidgetTest.java
Patch:
@@ -28,6 +28,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 
 import com.android.launcher3.Launcher;
+import com.android.launcher3.LauncherAppWidgetHost;
 import com.android.launcher3.LauncherAppWidgetHostView;
 import com.android.launcher3.LauncherAppWidgetInfo;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
@@ -285,7 +286,7 @@ private LauncherAppWidgetInfo createWidgetInfo(
             pendingInfo.minSpanY = item.minSpanY;
             Bundle options = WidgetHostViewLoader.getDefaultOptionsForWidget(mTargetContext, pendingInfo);
 
-            AppWidgetHost host = new AppWidgetHost(mTargetContext, Launcher.APPWIDGET_HOST_ID);
+            AppWidgetHost host = new LauncherAppWidgetHost(mTargetContext);
             int widgetId = host.allocateAppWidgetId();
             if (!mWidgetManager.bindAppWidgetIdIfAllowed(widgetId, info, options)) {
                 host.deleteAppWidgetId(widgetId);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1401,7 +1401,7 @@ protected void overScroll(float amount) {
     @Override
     protected boolean shouldFlingForVelocity(int velocityX) {
         // When the overlay is moving, the fling or settle transition is controlled by the overlay.
-        return Float.compare(mOverlayTranslation, 0) == 0 &&
+        return Float.compare(Math.abs(mOverlayTranslation), 0) == 0 &&
                 super.shouldFlingForVelocity(velocityX);
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3049,7 +3049,6 @@ public void tryAndUpdatePredictedApps() {
             List<ComponentKey> apps = mLauncherCallbacks.getPredictedApps();
             if (apps != null) {
                 mAppsView.setPredictedApps(apps);
-                getUserEventDispatcher().setPredictedApps(apps);
             }
         }
     }

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -359,7 +359,7 @@ public void onDropCompleted(View target, DropTarget.DragObject d, boolean isFlin
 
     @Override
     public void fillInLogContainerData(View v, ItemInfo info, Target target, Target targetParent) {
-        targetParent.containerType = mAppsRecyclerView.getContainerType(v);
+        // This is filled in {@link AllAppsRecyclerView}
     }
 
     @Override

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1401,7 +1401,7 @@ protected void overScroll(float amount) {
     @Override
     protected boolean shouldFlingForVelocity(int velocityX) {
         // When the overlay is moving, the fling or settle transition is controlled by the overlay.
-        return Float.compare(mOverlayTranslation, 0) == 0 &&
+        return Float.compare(Math.abs(mOverlayTranslation), 0) == 0 &&
                 super.shouldFlingForVelocity(velocityX);
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1401,7 +1401,7 @@ protected void overScroll(float amount) {
     @Override
     protected boolean shouldFlingForVelocity(int velocityX) {
         // When the overlay is moving, the fling or settle transition is controlled by the overlay.
-        return Float.compare(mOverlayTranslation, 0) == 0 &&
+        return Float.compare(Math.abs(mOverlayTranslation), 0) == 0 &&
                 super.shouldFlingForVelocity(velocityX);
     }
 

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -436,7 +436,8 @@ public Point getCellSize() {
         // Since we are only concerned with the overall padding, layout direction does
         // not matter.
         Point padding = getTotalWorkspacePadding();
-        result.x = calculateCellWidth(availableWidthPx - padding.x, inv.numColumns);
+        int cellPadding = cellLayoutPaddingLeftRightPx * 2;
+        result.x = calculateCellWidth(availableWidthPx - padding.x - cellPadding, inv.numColumns);
         result.y = calculateCellHeight(availableHeightPx - padding.y, inv.numRows);
         return result;
     }

File: src/com/android/launcher3/folder/PreviewItemManager.java
Patch:
@@ -61,7 +61,7 @@ public class PreviewItemManager {
     static final int INITIAL_ITEM_ANIMATION_DURATION = 350;
     private static final int FINAL_ITEM_ANIMATION_DURATION = 200;
 
-    private static final int SLIDE_IN_FIRST_PAGE_ANIMATION_DURATION_DELAY = 200;
+    private static final int SLIDE_IN_FIRST_PAGE_ANIMATION_DURATION_DELAY = 100;
     private static final int SLIDE_IN_FIRST_PAGE_ANIMATION_DURATION = 300;
     private static final int ITEM_SLIDE_IN_OUT_DISTANCE_PX = 200;
 

File: src/com/android/launcher3/widget/PendingAddShortcutInfo.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.android.launcher3.widget;
 
-import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.PendingAddItemInfo;
 import com.android.launcher3.compat.ShortcutConfigActivityInfo;
 

File: src/com/android/launcher3/widget/PendingAddShortcutInfo.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.android.launcher3.widget;
 
-import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.PendingAddItemInfo;
 import com.android.launcher3.compat.ShortcutConfigActivityInfo;
 

File: src/com/android/launcher3/allapps/search/DefaultAppSearchAlgorithm.java
Patch:
@@ -132,7 +132,8 @@ private static boolean isBreak(int thisType, int prevType, int nextType) {
                 // Always a break point for a symbol
                 return true;
             default:
-                return false;
+                // Always a break point at first character
+                return  prevType == Character.UNASSIGNED;
         }
     }
 }

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -792,6 +792,7 @@ private void closeComplete(boolean wasAnimated) {
             mFolderIcon.setVisibility(View.VISIBLE);
             if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {
                 mFolderIcon.setBackgroundVisible(true);
+                mFolderIcon.mFolderName.setTextVisibility(true);
             }
             if (wasAnimated) {
                 if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -792,6 +792,7 @@ private void closeComplete(boolean wasAnimated) {
             mFolderIcon.setVisibility(View.VISIBLE);
             if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {
                 mFolderIcon.setBackgroundVisible(true);
+                mFolderIcon.mFolderName.setTextVisibility(true);
             }
             if (wasAnimated) {
                 if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -792,6 +792,7 @@ private void closeComplete(boolean wasAnimated) {
             mFolderIcon.setVisibility(View.VISIBLE);
             if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {
                 mFolderIcon.setBackgroundVisible(true);
+                mFolderIcon.mFolderName.setTextVisibility(true);
             }
             if (wasAnimated) {
                 if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {

File: src/com/android/launcher3/allapps/search/AppsSearchContainerLayout.java
Patch:
@@ -202,7 +202,8 @@ public void onLayoutChange(View v, int left, int top, int right, int bottom,
                 if (!dp.isVerticalBarLayout()) {
                     Rect insets = mLauncher.getDragLayer().getInsets();
                     int hotseatBottom = bottom - dp.hotseatBarBottomPaddingPx - insets.bottom;
-                    int searchTopMargin = insets.top + (mMinHeight - mSearchBoxHeight);
+                    int searchTopMargin = insets.top + (mMinHeight - mSearchBoxHeight)
+                            + ((MarginLayoutParams) getLayoutParams()).bottomMargin;
                     listener.onScrollRangeChanged(hotseatBottom - searchTopMargin);
                 } else {
                     listener.onScrollRangeChanged(bottom);

File: src/com/android/launcher3/pageindicators/PageIndicatorCaretLandscape.java
Patch:
@@ -57,7 +57,7 @@ public PageIndicatorCaretLandscape(Context context, AttributeSet attrs, int defS
     protected void onDraw(Canvas canvas) {
         Rect drawableBounds = getCaretDrawable().getBounds();
         int count = canvas.save();
-        canvas.translate(getWidth() - drawableBounds.width(),
+        canvas.translate((getWidth() - drawableBounds.width()) / 2,
                 getHeight() - drawableBounds.height());
         getCaretDrawable().draw(canvas);
         canvas.restoreToCount(count);

File: src/com/android/launcher3/provider/RestoreDbTask.java
Patch:
@@ -134,7 +134,7 @@ public static boolean isPending(Context context) {
     }
 
     public static void setPending(Context context, boolean isPending) {
-        FileLog.d(TAG, "Restore data received through full backup");
+        FileLog.d(TAG, "Restore data received through full backup " + isPending);
         Utilities.getPrefs(context).edit().putBoolean(RESTORE_TASK_PENDING, isPending).commit();
     }
 }

File: src/com/android/launcher3/provider/RestoreDbTask.java
Patch:
@@ -134,7 +134,7 @@ public static boolean isPending(Context context) {
     }
 
     public static void setPending(Context context, boolean isPending) {
-        FileLog.d(TAG, "Restore data received through full backup");
+        FileLog.d(TAG, "Restore data received through full backup " + isPending);
         Utilities.getPrefs(context).edit().putBoolean(RESTORE_TASK_PENDING, isPending).commit();
     }
 }

File: src/com/android/launcher3/allapps/search/DefaultAppSearchAlgorithm.java
Patch:
@@ -132,7 +132,8 @@ private static boolean isBreak(int thisType, int prevType, int nextType) {
                 // Always a break point for a symbol
                 return true;
             default:
-                return false;
+                // Always a break point at first character
+                return  prevType == Character.UNASSIGNED;
         }
     }
 }

File: src/com/android/launcher3/provider/RestoreDbTask.java
Patch:
@@ -134,7 +134,7 @@ public static boolean isPending(Context context) {
     }
 
     public static void setPending(Context context, boolean isPending) {
-        FileLog.d(TAG, "Restore data received through full backup");
+        FileLog.d(TAG, "Restore data received through full backup " + isPending);
         Utilities.getPrefs(context).edit().putBoolean(RESTORE_TASK_PENDING, isPending).commit();
     }
 }

File: src/com/android/launcher3/provider/RestoreDbTask.java
Patch:
@@ -134,7 +134,7 @@ public static boolean isPending(Context context) {
     }
 
     public static void setPending(Context context, boolean isPending) {
-        FileLog.d(TAG, "Restore data received through full backup");
+        FileLog.d(TAG, "Restore data received through full backup " + isPending);
         Utilities.getPrefs(context).edit().putBoolean(RESTORE_TASK_PENDING, isPending).commit();
     }
 }

File: src/com/android/launcher3/allapps/search/DefaultAppSearchAlgorithm.java
Patch:
@@ -132,7 +132,8 @@ private static boolean isBreak(int thisType, int prevType, int nextType) {
                 // Always a break point for a symbol
                 return true;
             default:
-                return false;
+                // Always a break point at first character
+                return  prevType == Character.UNASSIGNED;
         }
     }
 }

File: src/com/android/launcher3/allapps/DefaultAppSearchAlgorithm.java
Patch:
@@ -130,7 +130,8 @@ protected boolean isBreak(int thisType, int prevType, int nextType) {
                 // Always a break point for a symbol
                 return true;
             default:
-                return false;
+                // Always a break point at first character
+                return  prevType == Character.UNASSIGNED;
         }
     }
 }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3986,7 +3986,7 @@ public boolean evaluate(ItemInfo info, View view) {
 
     void moveToDefaultScreen(boolean animate) {
         int page = getDefaultPage();
-        if (!workspaceInModalState() && getCurrentPage() != page) {
+        if (!workspaceInModalState() && getNextPage() != page) {
             if (animate) {
                 snapToPage(page);
             } else {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3986,7 +3986,7 @@ public boolean evaluate(ItemInfo info, View view) {
 
     void moveToDefaultScreen(boolean animate) {
         int page = getDefaultPage();
-        if (!workspaceInModalState() && getCurrentPage() != page) {
+        if (!workspaceInModalState() && getNextPage() != page) {
             if (animate) {
                 snapToPage(page);
             } else {

File: src/com/android/launcher3/compat/WallpaperColorsCompat.java
Patch:
@@ -21,6 +21,7 @@
 public class WallpaperColorsCompat {
 
     public static final int HINT_SUPPORTS_DARK_TEXT = 0x1;
+    public static final int HINT_SUPPORTS_DARK_THEME = 0x2;
 
     private final int mPrimaryColor;
     private final int mSecondaryColor;

File: src/com/android/launcher3/dynamicui/WallpaperColorInfo.java
Patch:
@@ -81,9 +81,9 @@ private void update(WallpaperColorsCompat wallpaperColors) {
         mSupportsDarkText = wallpaperColors != null
                 ? (wallpaperColors.getColorHints()
                     & WallpaperColorsCompat.HINT_SUPPORTS_DARK_TEXT) > 0 : false;
-        float[] hsl = new float[3];
-        ColorUtils.colorToHSL(mMainColor, hsl);
-        mIsDark = hsl[2] < 0.2f;
+        mIsDark = wallpaperColors != null
+                ? (wallpaperColors.getColorHints()
+                    & WallpaperColorsCompat.HINT_SUPPORTS_DARK_THEME) > 0 : false;
     }
 
     public void setOnThemeChangeListener(OnThemeChangeListener onThemeChangeListener) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2370,7 +2370,7 @@ boolean createUserFolderIfNecessary(View newView, long container, CellLayout tar
                 fi.performCreateAnimation(destInfo, v, sourceInfo, dragView, folderLocation, scale,
                         postAnimationRunnable);
             } else {
-                fi.prepareCreate(v);
+                fi.prepareCreateAnimation(v);
                 fi.addItem(destInfo);
                 fi.addItem(sourceInfo);
             }

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -1280,7 +1280,7 @@ public void run() {
         };
         View finalChild = mContent.getLastItem();
         if (finalChild != null) {
-            mFolderIcon.performDestroyAnimation(finalChild, onCompleteRunnable);
+            mFolderIcon.performDestroyAnimation(onCompleteRunnable);
         } else {
             onCompleteRunnable.run();
         }

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -68,7 +68,7 @@ public class IconCache {
     private static final int INITIAL_ICON_CACHE_CAPACITY = 50;
 
     // Empty class name is used for storing package default entry.
-    private static final String EMPTY_CLASS_NAME = ".";
+    public static final String EMPTY_CLASS_NAME = ".";
 
     private static final boolean DEBUG = false;
     private static final boolean DEBUG_IGNORE_CACHE = false;

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -68,7 +68,7 @@ public class IconCache {
     private static final int INITIAL_ICON_CACHE_CAPACITY = 50;
 
     // Empty class name is used for storing package default entry.
-    private static final String EMPTY_CLASS_NAME = ".";
+    public static final String EMPTY_CLASS_NAME = ".";
 
     private static final boolean DEBUG = false;
     private static final boolean DEBUG_IGNORE_CACHE = false;

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -68,7 +68,7 @@ public class IconCache {
     private static final int INITIAL_ICON_CACHE_CAPACITY = 50;
 
     // Empty class name is used for storing package default entry.
-    private static final String EMPTY_CLASS_NAME = ".";
+    public static final String EMPTY_CLASS_NAME = ".";
 
     private static final boolean DEBUG = false;
     private static final boolean DEBUG_IGNORE_CACHE = false;

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -120,7 +120,8 @@ public IconCache(Context context, InvariantDeviceProfile inv) {
     }
 
     private Drawable getFullResDefaultActivityIcon() {
-        return getFullResIcon(Resources.getSystem(), android.R.drawable.sym_def_app_icon);
+        return getFullResIcon(Resources.getSystem(), Utilities.isAtLeastO() ?
+                android.R.drawable.sym_def_app_icon : android.R.mipmap.sym_def_app_icon);
     }
 
     private Drawable getFullResIcon(Resources resources, int iconId) {

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -120,7 +120,8 @@ public IconCache(Context context, InvariantDeviceProfile inv) {
     }
 
     private Drawable getFullResDefaultActivityIcon() {
-        return getFullResIcon(Resources.getSystem(), android.R.drawable.sym_def_app_icon);
+        return getFullResIcon(Resources.getSystem(), Utilities.isAtLeastO() ?
+                android.R.drawable.sym_def_app_icon : android.R.mipmap.sym_def_app_icon);
     }
 
     private Drawable getFullResIcon(Resources resources, int iconId) {

File: src/com/android/launcher3/folder/PreviewBackground.java
Patch:
@@ -306,6 +306,7 @@ void clipCanvasSoftware(Canvas canvas, Region.Op op) {
     // It is the callers responsibility to save and restore the canvas layers.
     void clipCanvasHardware(Canvas canvas) {
         mPaint.setColor(Color.BLACK);
+        mPaint.setStyle(Paint.Style.FILL);
         mPaint.setXfermode(mClipPorterDuffXfermode);
 
         float radius = getScaledRadius();
@@ -336,6 +337,7 @@ private void clearDrawingDelegate() {
         }
 
         mDrawingDelegate = null;
+        isClipping = true;
         invalidate();
     }
 

File: src/com/android/launcher3/folder/PreviewBackground.java
Patch:
@@ -306,6 +306,7 @@ void clipCanvasSoftware(Canvas canvas, Region.Op op) {
     // It is the callers responsibility to save and restore the canvas layers.
     void clipCanvasHardware(Canvas canvas) {
         mPaint.setColor(Color.BLACK);
+        mPaint.setStyle(Paint.Style.FILL);
         mPaint.setXfermode(mClipPorterDuffXfermode);
 
         float radius = getScaledRadius();
@@ -336,6 +337,7 @@ private void clearDrawingDelegate() {
         }
 
         mDrawingDelegate = null;
+        isClipping = true;
         invalidate();
     }
 

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -120,7 +120,8 @@ public IconCache(Context context, InvariantDeviceProfile inv) {
     }
 
     private Drawable getFullResDefaultActivityIcon() {
-        return getFullResIcon(Resources.getSystem(), android.R.drawable.sym_def_app_icon);
+        return getFullResIcon(Resources.getSystem(), Utilities.isAtLeastO() ?
+                android.R.drawable.sym_def_app_icon : android.R.mipmap.sym_def_app_icon);
     }
 
     private Drawable getFullResIcon(Resources resources, int iconId) {

File: src/com/android/launcher3/allapps/AllAppsRecyclerView.java
Patch:
@@ -495,7 +495,8 @@ public void onDragStart(boolean start) {
         public boolean onDrag(float displacement, float velocity) {
             // We are in overscroll iff we are trying to drag further down when we're already at
             // the bottom of All Apps.
-            mIsInOverScroll = !canScrollVertically(1) && displacement < 0;
+            mIsInOverScroll = !canScrollVertically(1) && displacement < 0
+                    && !mScrollbar.isDraggingThumb();
 
             if (mIsInOverScroll) {
                 displacement = getDampedOverScroll(displacement);

File: src/com/android/launcher3/folder/PreviewBackground.java
Patch:
@@ -306,6 +306,7 @@ void clipCanvasSoftware(Canvas canvas, Region.Op op) {
     // It is the callers responsibility to save and restore the canvas layers.
     void clipCanvasHardware(Canvas canvas) {
         mPaint.setColor(Color.BLACK);
+        mPaint.setStyle(Paint.Style.FILL);
         mPaint.setXfermode(mClipPorterDuffXfermode);
 
         float radius = getScaledRadius();
@@ -336,6 +337,7 @@ private void clearDrawingDelegate() {
         }
 
         mDrawingDelegate = null;
+        isClipping = true;
         invalidate();
     }
 

File: src/com/android/launcher3/dragndrop/DragView.java
Patch:
@@ -222,11 +222,11 @@ public void run() {
                     int w = mBitmap.getWidth();
                     int h = mBitmap.getHeight();
                     AdaptiveIconDrawable adaptiveIcon = (AdaptiveIconDrawable) dr;
-                    adaptiveIcon.setBounds(0, 0, w, h);
                     float blurSizeOutline = mLauncher.getResources()
                             .getDimension(R.dimen.blur_size_medium_outline);
                     float normalizationScale = IconNormalizer.getInstance(mLauncher)
                             .getScale(adaptiveIcon, null, null, null) * ((w - blurSizeOutline) / w);
+                    adaptiveIcon.setBounds(0, 0, w, h);
 
                     final Path mask = getMaskPath(adaptiveIcon, normalizationScale);
                     mFgImageView = setupImageView(adaptiveIcon.getForeground(), normalizationScale);

File: src/com/android/launcher3/dragndrop/DragView.java
Patch:
@@ -222,11 +222,11 @@ public void run() {
                     int w = mBitmap.getWidth();
                     int h = mBitmap.getHeight();
                     AdaptiveIconDrawable adaptiveIcon = (AdaptiveIconDrawable) dr;
-                    adaptiveIcon.setBounds(0, 0, w, h);
                     float blurSizeOutline = mLauncher.getResources()
                             .getDimension(R.dimen.blur_size_medium_outline);
                     float normalizationScale = IconNormalizer.getInstance(mLauncher)
                             .getScale(adaptiveIcon, null, null, null) * ((w - blurSizeOutline) / w);
+                    adaptiveIcon.setBounds(0, 0, w, h);
 
                     final Path mask = getMaskPath(adaptiveIcon, normalizationScale);
                     mFgImageView = setupImageView(adaptiveIcon.getForeground(), normalizationScale);

File: src/com/android/launcher3/dragndrop/DragView.java
Patch:
@@ -222,11 +222,11 @@ public void run() {
                     int w = mBitmap.getWidth();
                     int h = mBitmap.getHeight();
                     AdaptiveIconDrawable adaptiveIcon = (AdaptiveIconDrawable) dr;
-                    adaptiveIcon.setBounds(0, 0, w, h);
                     float blurSizeOutline = mLauncher.getResources()
                             .getDimension(R.dimen.blur_size_medium_outline);
                     float normalizationScale = IconNormalizer.getInstance(mLauncher)
                             .getScale(adaptiveIcon, null, null, null) * ((w - blurSizeOutline) / w);
+                    adaptiveIcon.setBounds(0, 0, w, h);
 
                     final Path mask = getMaskPath(adaptiveIcon, normalizationScale);
                     mFgImageView = setupImageView(adaptiveIcon.getForeground(), normalizationScale);

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -926,6 +926,7 @@ public void onChildViewAdded(View parent, View child) {
     @Override
     public void onChildViewRemoved(View parent, View child) {
         updateFreescrollBounds();
+        mCurrentPage = validateNewPage(mCurrentPage);
         invalidate();
     }
 

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -547,8 +547,8 @@ public void setFocusOnFirstChild() {
     }
 
     @Override
-    protected void notifyPageSwitchListener() {
-        super.notifyPageSwitchListener();
+    protected void notifyPageSwitchListener(int prevPage) {
+        super.notifyPageSwitchListener(prevPage);
         if (mFolder != null) {
             mFolder.updateTextViewFocus();
         }

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -547,8 +547,8 @@ public void setFocusOnFirstChild() {
     }
 
     @Override
-    protected void notifyPageSwitchListener() {
-        super.notifyPageSwitchListener();
+    protected void notifyPageSwitchListener(int prevPage) {
+        super.notifyPageSwitchListener(prevPage);
         if (mFolder != null) {
             mFolder.updateTextViewFocus();
         }

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -547,8 +547,8 @@ public void setFocusOnFirstChild() {
     }
 
     @Override
-    protected void notifyPageSwitchListener() {
-        super.notifyPageSwitchListener();
+    protected void notifyPageSwitchListener(int prevPage) {
+        super.notifyPageSwitchListener(prevPage);
         if (mFolder != null) {
             mFolder.updateTextViewFocus();
         }

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -120,7 +120,7 @@ public IconCache(Context context, InvariantDeviceProfile inv) {
     }
 
     private Drawable getFullResDefaultActivityIcon() {
-        return getFullResIcon(Resources.getSystem(), android.R.mipmap.sym_def_app_icon);
+        return getFullResIcon(Resources.getSystem(), android.R.drawable.sym_def_app_icon);
     }
 
     private Drawable getFullResIcon(Resources resources, int iconId) {

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -120,7 +120,7 @@ public IconCache(Context context, InvariantDeviceProfile inv) {
     }
 
     private Drawable getFullResDefaultActivityIcon() {
-        return getFullResIcon(Resources.getSystem(), android.R.mipmap.sym_def_app_icon);
+        return getFullResIcon(Resources.getSystem(), android.R.drawable.sym_def_app_icon);
     }
 
     private Drawable getFullResIcon(Resources resources, int iconId) {

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -423,8 +423,9 @@ public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
 
             // We only show the spring animation when at the top or bottom, so we wait until the
             // first or last row is visible to ensure that all animations run in sync.
-            if ((first == 0 && dy < 0) || (last == mAdapter.getItemCount() - 1 && dy > 0)) {
-                mSpringAnimationHandler.animateToFinalPosition(0);
+            boolean scrollUp = dy < 0;
+            if ((first == 0 && scrollUp) || (last == mAdapter.getItemCount() - 1 && dy > 0)) {
+                mSpringAnimationHandler.animateToFinalPosition(0, scrollUp ? 1 : -1);
             }
         }
 

File: src/com/android/launcher3/allapps/AllAppsRecyclerView.java
Patch:
@@ -511,7 +511,9 @@ public void onDragEnd(float velocity, boolean fling) {
                 if (FeatureFlags.LAUNCHER3_PHYSICS) {
                     // We calculate our own velocity to give the springs the desired effect.
                     velocity = y / getDampedOverScroll(getHeight()) * MAX_RELEASE_VELOCITY;
-                    mSpringAnimationHandler.animateToPositionWithVelocity(0, -velocity);
+                    // We want to negate the velocity because we are moving to 0 from -1 due to the
+                    // downward motion. (y-axis -1 is above 0).
+                    mSpringAnimationHandler.animateToPositionWithVelocity(0, -1, -velocity);
                 }
 
                 ObjectAnimator.ofFloat(AllAppsRecyclerView.this,

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -228,7 +228,8 @@ public void onDragEnd(float velocity, boolean fling) {
                 }
                 mLauncher.showAppsView(true /* animated */, false /* updatePredictedApps */);
                 if (hasSpringAnimationHandler()) {
-                    mSpringAnimationHandler.animateToFinalPosition(0);
+                    // The icons are moving upwards, so we go to 0 from 1. (y-axis 1 is below 0.)
+                    mSpringAnimationHandler.animateToFinalPosition(0 /* pos */, 1 /* startValue */);
                 }
             } else {
                 calculateDuration(velocity, Math.abs(mShiftRange - mAppsView.getTranslationY()));

File: src/com/android/launcher3/notification/NotificationListener.java
Patch:
@@ -127,8 +127,9 @@ public static void setNotificationsChangedListener(NotificationsChangedListener
         }
         sNotificationsChangedListener = listener;
 
-        if (sNotificationListenerInstance != null) {
-            sNotificationListenerInstance.onNotificationFullRefresh();
+        NotificationListener notificationListener = getInstanceIfConnected();
+        if (notificationListener != null) {
+            notificationListener.onNotificationFullRefresh();
         }
     }
 

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -606,7 +606,7 @@ public boolean addViewToCellLayout(View child, int index, int childId, LayoutPar
         // Hotseat icons - remove text
         if (child instanceof BubbleTextView) {
             BubbleTextView bubbleChild = (BubbleTextView) child;
-            bubbleChild.setTextVisibility(mContainerType != HOTSEAT);
+            bubbleChild.setTextVisibility(bubbleChild.shouldTextBeVisible());
         }
 
         child.setScaleX(mChildScale);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3792,7 +3792,7 @@ void mapOverItems(boolean recurse, ItemOperator op) {
                 ItemInfo info = (ItemInfo) item.getTag();
                 if (recurse && info instanceof FolderInfo && item instanceof FolderIcon) {
                     FolderIcon folder = (FolderIcon) item;
-                    ArrayList<View> folderChildren = folder.getFolder().getItemsInReadingOrder();
+                    ArrayList<View> folderChildren = folder.getFolder().getItemsInRankOrder();
                     // map over all the children in the folder
                     final int childCount = folderChildren.size();
                     for (int childIdx = 0; childIdx < childCount; childIdx++) {

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -369,7 +369,7 @@ public void beginAccessibleDrag(View item, ItemInfo info) {
 
         Folder folder = Folder.getOpen(mLauncher);
         if (folder != null) {
-            if (!folder.getItemsInReadingOrder().contains(item)) {
+            if (!folder.getItemsInRankOrder().contains(item)) {
                 folder.close(true);
                 folder = null;
             }

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -575,7 +575,7 @@ public List<BubbleTextView> getItemsToDisplay() {
         mPreviewVerifier.setFolderInfo(mFolder.getInfo());
 
         List<BubbleTextView> itemsToDisplay = new ArrayList<>();
-        List<View> allItems = mFolder.getItemsInReadingOrder();
+        List<View> allItems = mFolder.getItemsInRankOrder();
         int numItems = allItems.size();
         for (int rank = 0; rank < numItems; ++rank) {
             if (mPreviewVerifier.isItemInPreview(rank)) {

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -344,7 +344,7 @@ private void updateAvailableFolderCellDimensions(DisplayMetrics dm, Resources re
         updateFolderCellSize(1f, dm, res);
 
         // Don't let the folder get too close to the edges of the screen.
-        int folderMargin = 4 * edgeMarginPx;
+        int folderMargin = edgeMarginPx;
 
         // Check if the icons fit within the available height.
         float usedHeight = folderCellHeightPx * inv.numFolderRows + folderBottomPanelSize;
@@ -497,7 +497,7 @@ private int getWorkspacePageSpacing() {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return Math.max(defaultPageSpacingPx, getWorkspacePadding(null).left + 1);
+            return Math.max(defaultPageSpacingPx, getWorkspacePadding(null).left / 2 + 1);
         }
     }
 

File: src/com/android/launcher3/folder/PreviewBackground.java
Patch:
@@ -88,7 +88,7 @@ public class PreviewBackground {
     public boolean isClipping = true;
 
     // Drawing / animation configurations
-    private static final float ACCEPT_SCALE_FACTOR = 1.25f;
+    private static final float ACCEPT_SCALE_FACTOR = 1.20f;
     private static final float ACCEPT_COLOR_MULTIPLIER = 1.5f;
 
     // Expressed on a scale from 0 to 255.

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -344,7 +344,7 @@ private void updateAvailableFolderCellDimensions(DisplayMetrics dm, Resources re
         updateFolderCellSize(1f, dm, res);
 
         // Don't let the folder get too close to the edges of the screen.
-        int folderMargin = 4 * edgeMarginPx;
+        int folderMargin = edgeMarginPx;
 
         // Check if the icons fit within the available height.
         float usedHeight = folderCellHeightPx * inv.numFolderRows + folderBottomPanelSize;
@@ -497,7 +497,7 @@ private int getWorkspacePageSpacing() {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return Math.max(defaultPageSpacingPx, getWorkspacePadding(null).left + 1);
+            return Math.max(defaultPageSpacingPx, getWorkspacePadding(null).left / 2 + 1);
         }
     }
 

File: src/com/android/launcher3/folder/PreviewBackground.java
Patch:
@@ -88,7 +88,7 @@ public class PreviewBackground {
     public boolean isClipping = true;
 
     // Drawing / animation configurations
-    private static final float ACCEPT_SCALE_FACTOR = 1.25f;
+    private static final float ACCEPT_SCALE_FACTOR = 1.20f;
     private static final float ACCEPT_COLOR_MULTIPLIER = 1.5f;
 
     // Expressed on a scale from 0 to 255.

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -488,7 +488,7 @@ protected void overrideTheme(boolean isDark, boolean supportsDarkText) {
     }
 
     @Override
-    public View findViewById(int id) {
+    public <T extends View> T findViewById(int id) {
         return mLauncherView.findViewById(id);
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -598,12 +598,12 @@ public boolean onTouch(View v, MotionEvent ev) {
             // In transposed layout, we add the QSB in the Grid. As workspace does not touch the
             // edges, we do not need a full width QSB.
             qsb = LayoutInflater.from(getContext())
-                    .inflate(R.layout.qsb_container,firstPage, false);
+                    .inflate(R.layout.search_container_workspace,firstPage, false);
         }
 
         CellLayout.LayoutParams lp = new CellLayout.LayoutParams(0, 0, firstPage.getCountX(), 1);
         lp.canReorder = false;
-        if (!firstPage.addViewToCellLayout(qsb, 0, R.id.qsb_container, lp, true)) {
+        if (!firstPage.addViewToCellLayout(qsb, 0, R.id.search_container_workspace, lp, true)) {
             Log.e(TAG, "Failed to add to item at (0, 0) to CellLayout");
         }
     }
@@ -621,7 +621,7 @@ public void removeAllWorkspaceScreens() {
         }
 
         // Recycle the QSB widget
-        View qsb = findViewById(R.id.qsb_container);
+        View qsb = findViewById(R.id.search_container_workspace);
         if (qsb != null) {
             ((ViewGroup) qsb.getParent()).removeView(qsb);
         }

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -230,7 +230,7 @@ public void onFocusChange(View v, boolean hasFocus) {
             mAppsRecyclerView.addOnScrollListener(new SpringMotionOnScrollListener());
         }
 
-        mSearchContainer = findViewById(R.id.search_container);
+        mSearchContainer = findViewById(R.id.search_container_all_apps);
         mSearchUiManager = (SearchUiManager) mSearchContainer;
         mSearchUiManager.initialize(mApps, mAppsRecyclerView);
 

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -220,7 +220,7 @@ public void onFocusChange(View v, boolean hasFocus) {
         });
 
         // Load the all apps recycler view
-        mAppsRecyclerView = (AllAppsRecyclerView) findViewById(R.id.apps_list_view);
+        mAppsRecyclerView = findViewById(R.id.apps_list_view);
         mAppsRecyclerView.setApps(mApps);
         mAppsRecyclerView.setLayoutManager(mLayoutManager);
         mAppsRecyclerView.setAdapter(mAdapter);

File: src/com/android/launcher3/AppWidgetsRestoredReceiver.java
Patch:
@@ -12,6 +12,7 @@
 import android.util.Log;
 
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.model.LoaderTask;
 import com.android.launcher3.util.ContentWriter;
 
 public class AppWidgetsRestoredReceiver extends BroadcastReceiver {
@@ -52,7 +53,7 @@ static void restoreAppWidgetIds(Context context, PendingResult asyncResult,
 
             final AppWidgetProviderInfo provider = widgets.getAppWidgetInfo(newWidgetIds[i]);
             final int state;
-            if (LauncherModel.isValidProvider(provider)) {
+            if (LoaderTask.isValidProvider(provider)) {
                 // This will ensure that we show 'Click to setup' UI if required.
                 state = LauncherAppWidgetInfo.FLAG_UI_NOT_READY;
             } else {

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -102,8 +102,8 @@ protected void onFinishInflate() {
     protected void setDrawable(int resId) {
         // We do not set the drawable in the xml as that inflates two drawables corresponding to
         // drawableLeft and drawableStart.
-        mDrawable = getResources().getDrawable(resId);
-        setCompoundDrawablesRelativeWithIntrinsicBounds(mDrawable, null, null, null);
+        setCompoundDrawablesRelativeWithIntrinsicBounds(resId, 0, 0, 0);
+        mDrawable = getCompoundDrawablesRelative()[0];
     }
 
     public void setDropTargetBar(DropTargetBar dropTargetBar) {

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -40,7 +40,7 @@ protected void onFinishInflate() {
         // Get the hover color
         mHoverColor = getResources().getColor(R.color.delete_target_hover_tint);
 
-        setDrawable(R.drawable.ic_remove_launcher);
+        setDrawable(R.drawable.ic_remove_shadow);
     }
 
     @Override

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -22,7 +22,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.folder.Folder;
 import com.android.launcher3.folder.FolderPagedView;
 import com.android.launcher3.util.FocusLogic;
@@ -93,7 +93,7 @@ public boolean onKey(View v, int keyCode, KeyEvent e) {
             }
 
             if (!(v.getParent() instanceof ShortcutAndWidgetContainer)) {
-                if (ProviderConfig.IS_DOGFOOD_BUILD) {
+                if (FeatureFlags.IS_DOGFOOD_BUILD) {
                     throw new IllegalStateException("Parent of the focused item is not supported.");
                 } else {
                     return false;

File: src/com/android/launcher3/InsettableFrameLayout.java
Patch:
@@ -9,9 +9,6 @@
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
 
-import com.android.launcher3.allapps.AllAppsContainerView;
-import com.android.launcher3.config.FeatureFlags;
-
 public class InsettableFrameLayout extends FrameLayout implements
     ViewGroup.OnHierarchyChangeListener, Insettable {
 

File: src/com/android/launcher3/MainThreadExecutor.java
Patch:
@@ -18,14 +18,14 @@
 
 import android.os.Looper;
 
-import com.android.launcher3.util.LooperExecuter;
+import com.android.launcher3.util.LooperExecutor;
 
 /**
  * An executor service that executes its tasks on the main thread.
  *
  * Shutting down this executor is not supported.
  */
-public class MainThreadExecutor extends LooperExecuter {
+public class MainThreadExecutor extends LooperExecutor {
 
     public MainThreadExecutor() {
         super(Looper.getMainLooper());

File: src/com/android/launcher3/SettingsActivity.java
Patch:
@@ -26,7 +26,6 @@
 import android.preference.PreferenceFragment;
 import android.provider.Settings;
 import android.provider.Settings.System;
-import android.support.v4.os.BuildCompat;
 
 import com.android.launcher3.graphics.IconShapeOverride;
 
@@ -85,7 +84,7 @@ public void onCreate(Bundle savedInstanceState) {
             }
 
             Preference iconBadgingPref = findPreference(ICON_BADGING_PREFERENCE_KEY);
-            if (!BuildCompat.isAtLeastO()) {
+            if (!Utilities.isAtLeastO()) {
                 getPreferenceScreen().removePreference(
                         findPreference(SessionCommitReceiver.ADD_ICON_PREFERENCE_KEY));
                 getPreferenceScreen().removePreference(iconBadgingPref);

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -120,7 +120,9 @@ public void measureChild(View child) {
                 // Center the icon/folder
                 int cHeight = getCellContentHeight();
                 int cellPaddingY = (int) Math.max(0, ((lp.height - cHeight) / 2f));
-                int cellPaddingX = (int) (profile.edgeMarginPx / 2f);
+                int cellPaddingX = mContainerType == CellLayout.WORKSPACE
+                        ? profile.workspaceCellPaddingXPx
+                        : (int) (profile.edgeMarginPx / 2f);
                 child.setPadding(cellPaddingX, cellPaddingY, cellPaddingX, 0);
             }
         } else {

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -45,10 +45,10 @@ public class ShortcutInfo extends ItemInfoWithIcon {
      * be present along with {@link #FLAG_RESTORED_ICON}, and is set during default layout
      * parsing.
      */
-    public static final int FLAG_AUTOINTALL_ICON = 2; //0B10;
+    public static final int FLAG_AUTOINSTALL_ICON = 2; //0B10;
 
     /**
-     * The icon is being installed. If {@link #FLAG_RESTORED_ICON} or {@link #FLAG_AUTOINTALL_ICON}
+     * The icon is being installed. If {@link #FLAG_RESTORED_ICON} or {@link #FLAG_AUTOINSTALL_ICON}
      * is set, then the icon is either being installed or is in a broken state.
      */
     public static final int FLAG_INSTALL_SESSION_ACTIVE = 4; // 0B100;
@@ -185,7 +185,7 @@ public boolean hasStatusFlag(int flag) {
 
 
     public final boolean isPromise() {
-        return hasStatusFlag(FLAG_RESTORED_ICON | FLAG_AUTOINTALL_ICON);
+        return hasStatusFlag(FLAG_RESTORED_ICON | FLAG_AUTOINSTALL_ICON);
     }
 
     public int getInstallProgress() {

File: src/com/android/launcher3/accessibility/FolderAccessibilityHelper.java
Patch:
@@ -17,8 +17,8 @@
 package com.android.launcher3.accessibility;
 
 import com.android.launcher3.CellLayout;
-import com.android.launcher3.folder.FolderPagedView;
 import com.android.launcher3.R;
+import com.android.launcher3.folder.FolderPagedView;
 
 /**
  * Implementation of {@link DragAndDropAccessibilityDelegate} to support DnD in a folder.

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -18,7 +18,6 @@
 import com.android.launcher3.AppWidgetResizeFrame;
 import com.android.launcher3.BubbleTextView;
 import com.android.launcher3.CellLayout;
-import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.DeleteDropTarget;
 import com.android.launcher3.DropTarget.DragObject;
 import com.android.launcher3.FolderInfo;
@@ -27,7 +26,6 @@
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppWidgetHostView;
 import com.android.launcher3.LauncherAppWidgetInfo;
-import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.PendingAddItemInfo;
 import com.android.launcher3.R;
@@ -37,6 +35,7 @@
 import com.android.launcher3.dragndrop.DragController.DragListener;
 import com.android.launcher3.dragndrop.DragOptions;
 import com.android.launcher3.folder.Folder;
+import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.util.Thunk;
 

File: src/com/android/launcher3/accessibility/WorkspaceAccessibilityHelper.java
Patch:
@@ -27,9 +27,9 @@
 import com.android.launcher3.FolderInfo;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
-import com.android.launcher3.accessibility.LauncherAccessibilityDelegate.DragType;
 import com.android.launcher3.R;
 import com.android.launcher3.ShortcutInfo;
+import com.android.launcher3.accessibility.LauncherAccessibilityDelegate.DragType;
 import com.android.launcher3.dragndrop.DragLayer;
 
 /**

File: src/com/android/launcher3/allapps/AllAppsRecyclerViewContainerView.java
Patch:
@@ -20,7 +20,6 @@
 import android.util.AttributeSet;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.FrameLayout;
 import android.widget.RelativeLayout;
 
 import com.android.launcher3.BubbleTextView;

File: src/com/android/launcher3/anim/CircleRevealOutlineProvider.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.android.launcher3.util;
+package com.android.launcher3.anim;
 
 public class CircleRevealOutlineProvider extends RevealOutlineAnimation {
 

File: src/com/android/launcher3/badge/BadgeRenderer.java
Patch:
@@ -107,7 +107,8 @@ public void draw(Canvas canvas, IconPalette palette, @Nullable BadgeInfo badgeIn
         // Lazily load the background with shadow.
         Bitmap backgroundWithShadow = mBackgroundsWithShadow.get(numChars);
         if (backgroundWithShadow == null) {
-            backgroundWithShadow = ShadowGenerator.createPillWithShadow(Color.WHITE, width, mSize);
+            backgroundWithShadow = new ShadowGenerator.Builder(Color.WHITE)
+                    .setupBlurForSize(mSize).createPill(width, mSize);
             mBackgroundsWithShadow.put(numChars, backgroundWithShadow);
         }
         canvas.save(Canvas.MATRIX_SAVE_FLAG);

File: src/com/android/launcher3/discovery/AppDiscoveryItem.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.android.launcher3.discovery;
 
-import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
 

File: src/com/android/launcher3/dragndrop/DragOptions.java
Patch:
@@ -17,8 +17,6 @@
 package com.android.launcher3.dragndrop;
 
 import android.graphics.Point;
-import android.support.annotation.CallSuper;
-import android.view.View;
 
 import com.android.launcher3.DropTarget;
 

File: src/com/android/launcher3/dragndrop/LivePreviewWidgetCell.java
Patch:
@@ -4,7 +4,6 @@
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.util.AttributeSet;
-import android.util.Log;
 import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.RemoteViews;

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -791,6 +791,7 @@ private void closeComplete(boolean wasAnimated) {
         if (mFolderIcon != null) {
             mFolderIcon.setVisibility(View.VISIBLE);
             if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {
+                mFolderIcon.mFolderName.setTextVisibility(true);
                 mFolderIcon.setBackgroundVisible(true);
                 mFolderIcon.mBackground.fadeInBackgroundShadow();
             }

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -791,6 +791,7 @@ private void closeComplete(boolean wasAnimated) {
         if (mFolderIcon != null) {
             mFolderIcon.setVisibility(View.VISIBLE);
             if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {
+                mFolderIcon.mFolderName.setTextVisibility(true);
                 mFolderIcon.setBackgroundVisible(true);
                 mFolderIcon.mBackground.fadeInBackgroundShadow();
             }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -79,7 +79,6 @@
 import android.view.accessibility.AccessibilityManager;
 import android.view.animation.OvershootInterpolator;
 import android.view.inputmethod.InputMethodManager;
-import android.widget.TextView;
 import android.widget.Toast;
 
 import com.android.launcher3.DropTarget.DragObject;
@@ -2626,9 +2625,9 @@ public Bundle getActivityLaunchOptions(View v) {
         if (Utilities.ATLEAST_MARSHMALLOW) {
             int left = 0, top = 0;
             int width = v.getMeasuredWidth(), height = v.getMeasuredHeight();
-            if (v instanceof TextView) {
+            if (v instanceof BubbleTextView) {
                 // Launch from center of icon, not entire view
-                Drawable icon = Workspace.getTextViewIcon((TextView) v);
+                Drawable icon = ((BubbleTextView) v).getIcon();
                 if (icon != null) {
                     Rect bounds = icon.getBounds();
                     left = (width - bounds.width()) / 2;

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -210,13 +210,13 @@ public DragView startDrag(Bitmap b, int dragLayerX, int dragLayerY,
     }
 
     private void callOnDragStart() {
-        for (DragListener listener : new ArrayList<>(mListeners)) {
-            listener.onDragStart(mDragObject, mOptions);
-        }
         if (mOptions.preDragCondition != null) {
             mOptions.preDragCondition.onPreDragEnd(mDragObject, true /* dragStarted*/);
         }
         mIsInPreDrag = false;
+        for (DragListener listener : new ArrayList<>(mListeners)) {
+            listener.onDragStart(mDragObject, mOptions);
+        }
     }
 
     /**

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -79,7 +79,6 @@
 import android.view.accessibility.AccessibilityManager;
 import android.view.animation.OvershootInterpolator;
 import android.view.inputmethod.InputMethodManager;
-import android.widget.TextView;
 import android.widget.Toast;
 
 import com.android.launcher3.DropTarget.DragObject;
@@ -2626,9 +2625,9 @@ public Bundle getActivityLaunchOptions(View v) {
         if (Utilities.ATLEAST_MARSHMALLOW) {
             int left = 0, top = 0;
             int width = v.getMeasuredWidth(), height = v.getMeasuredHeight();
-            if (v instanceof TextView) {
+            if (v instanceof BubbleTextView) {
                 // Launch from center of icon, not entire view
-                Drawable icon = Workspace.getTextViewIcon((TextView) v);
+                Drawable icon = ((BubbleTextView) v).getIcon();
                 if (icon != null) {
                     Rect bounds = icon.getBounds();
                     left = (width - bounds.width()) / 2;

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -210,13 +210,13 @@ public DragView startDrag(Bitmap b, int dragLayerX, int dragLayerY,
     }
 
     private void callOnDragStart() {
-        for (DragListener listener : new ArrayList<>(mListeners)) {
-            listener.onDragStart(mDragObject, mOptions);
-        }
         if (mOptions.preDragCondition != null) {
             mOptions.preDragCondition.onPreDragEnd(mDragObject, true /* dragStarted*/);
         }
         mIsInPreDrag = false;
+        for (DragListener listener : new ArrayList<>(mListeners)) {
+            listener.onDragStart(mDragObject, mOptions);
+        }
     }
 
     /**

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -791,6 +791,7 @@ private void closeComplete(boolean wasAnimated) {
         if (mFolderIcon != null) {
             mFolderIcon.setVisibility(View.VISIBLE);
             if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {
+                mFolderIcon.mFolderName.setTextVisibility(true);
                 mFolderIcon.setBackgroundVisible(true);
                 mFolderIcon.mBackground.fadeInBackgroundShadow();
             }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -79,7 +79,6 @@
 import android.view.accessibility.AccessibilityManager;
 import android.view.animation.OvershootInterpolator;
 import android.view.inputmethod.InputMethodManager;
-import android.widget.TextView;
 import android.widget.Toast;
 
 import com.android.launcher3.DropTarget.DragObject;
@@ -2626,9 +2625,9 @@ public Bundle getActivityLaunchOptions(View v) {
         if (Utilities.ATLEAST_MARSHMALLOW) {
             int left = 0, top = 0;
             int width = v.getMeasuredWidth(), height = v.getMeasuredHeight();
-            if (v instanceof TextView) {
+            if (v instanceof BubbleTextView) {
                 // Launch from center of icon, not entire view
-                Drawable icon = Workspace.getTextViewIcon((TextView) v);
+                Drawable icon = ((BubbleTextView) v).getIcon();
                 if (icon != null) {
                     Rect bounds = icon.getBounds();
                     left = (width - bounds.width()) / 2;

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -210,13 +210,13 @@ public DragView startDrag(Bitmap b, int dragLayerX, int dragLayerY,
     }
 
     private void callOnDragStart() {
-        for (DragListener listener : new ArrayList<>(mListeners)) {
-            listener.onDragStart(mDragObject, mOptions);
-        }
         if (mOptions.preDragCondition != null) {
             mOptions.preDragCondition.onPreDragEnd(mDragObject, true /* dragStarted*/);
         }
         mIsInPreDrag = false;
+        for (DragListener listener : new ArrayList<>(mListeners)) {
+            listener.onDragStart(mDragObject, mOptions);
+        }
     }
 
     /**

File: src/com/android/launcher3/widget/WidgetsBottomSheet.java
Patch:
@@ -23,7 +23,6 @@
 import android.graphics.Rect;
 import android.support.v4.view.animation.FastOutSlowInInterpolator;
 import android.util.AttributeSet;
-import android.view.ContextThemeWrapper;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
@@ -77,7 +76,7 @@ public WidgetsBottomSheet(Context context, AttributeSet attrs) {
     }
 
     public WidgetsBottomSheet(Context context, AttributeSet attrs, int defStyleAttr) {
-        super(new ContextThemeWrapper(context, R.style.WidgetContainerTheme), attrs, defStyleAttr);
+        super(context, attrs, defStyleAttr);
         setWillNotDraw(false);
         mLauncher = Launcher.getLauncher(context);
         mOpenCloseAnimator = LauncherAnimUtils.ofPropertyValuesHolder(this);

File: src/com/android/launcher3/folder/ClippedFolderIconLayoutRule.java
Patch:
@@ -29,8 +29,8 @@ public void init(int availableSpace, float intrinsicIconSize, boolean rtl) {
     }
 
     @Override
-    public FolderIcon.PreviewItemDrawingParams computePreviewItemDrawingParams(int index,
-            int curNumItems, FolderIcon.PreviewItemDrawingParams params) {
+    public PreviewItemDrawingParams computePreviewItemDrawingParams(int index, int curNumItems,
+            PreviewItemDrawingParams params) {
 
         float totalScale = scaleForItem(index, curNumItems);
         float transX;
@@ -47,7 +47,7 @@ public FolderIcon.PreviewItemDrawingParams computePreviewItemDrawingParams(int i
         }
 
         if (params == null) {
-            params = new FolderIcon.PreviewItemDrawingParams(transX, transY, totalScale, overlayAlpha);
+            params = new PreviewItemDrawingParams(transX, transY, totalScale, overlayAlpha);
         } else {
             params.update(transX, transY, totalScale);
             params.overlayAlpha = overlayAlpha;

File: src/com/android/launcher3/folder/StackFolderIconLayoutRule.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.android.launcher3.folder;
 
-import com.android.launcher3.folder.FolderIcon.PreviewItemDrawingParams;
-
 public class StackFolderIconLayoutRule implements FolderIcon.PreviewLayoutRule {
 
     static final int MAX_NUM_ITEMS_IN_PREVIEW = 3;

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -344,7 +344,7 @@ private void updateAvailableFolderCellDimensions(DisplayMetrics dm, Resources re
         updateFolderCellSize(1f, dm, res);
 
         // Don't let the folder get too close to the edges of the screen.
-        int folderMargin = 4 * edgeMarginPx;
+        int folderMargin = edgeMarginPx;
 
         // Check if the icons fit within the available height.
         float usedHeight = folderCellHeightPx * inv.numFolderRows + folderBottomPanelSize;
@@ -497,7 +497,7 @@ private int getWorkspacePageSpacing() {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return Math.max(defaultPageSpacingPx, getWorkspacePadding(null).left + 1);
+            return Math.max(defaultPageSpacingPx, getWorkspacePadding(null).left / 2 + 1);
         }
     }
 

File: src/com/android/launcher3/folder/PreviewBackground.java
Patch:
@@ -88,7 +88,7 @@ public class PreviewBackground {
     public boolean isClipping = true;
 
     // Drawing / animation configurations
-    private static final float ACCEPT_SCALE_FACTOR = 1.25f;
+    private static final float ACCEPT_SCALE_FACTOR = 1.20f;
     private static final float ACCEPT_COLOR_MULTIPLIER = 1.5f;
 
     // Expressed on a scale from 0 to 255.

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -154,7 +154,7 @@ public class CellLayout extends ViewGroup implements BubbleTextShadowHandler {
 
     @ContainerType private final int mContainerType;
 
-    private final float mChildScale;
+    private final float mChildScale = 1f;
 
     public static final int MODE_SHOW_REORDER_HINT = 0;
     public static final int MODE_DRAG_OVER = 1;
@@ -218,8 +218,6 @@ public CellLayout(Context context, AttributeSet attrs, int defStyle) {
         mFolderLeaveBehind.delegateCellX = -1;
         mFolderLeaveBehind.delegateCellY = -1;
 
-        mChildScale = mContainerType == HOTSEAT ? grid.inv.hotseatScale : 1f;
-
         setAlwaysDrawnWithCacheEnabled(false);
         final Resources res = getResources();
 

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -753,7 +753,7 @@ public void scheduleNext() {
     }
 
     private static final class IconDB extends SQLiteCacheHelper {
-        private final static int DB_VERSION = 15;
+        private final static int DB_VERSION = 16;
 
         private final static int RELEASE_VERSION = DB_VERSION +
                 (FeatureFlags.LAUNCHER3_DISABLE_ICON_NORMALIZATION ? 0 : 1);

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -120,7 +120,9 @@ public void measureChild(View child) {
                 // Center the icon/folder
                 int cHeight = getCellContentHeight();
                 int cellPaddingY = (int) Math.max(0, ((lp.height - cHeight) / 2f));
-                int cellPaddingX = profile.cellPaddingXPx;
+                int cellPaddingX = mContainerType == CellLayout.WORKSPACE
+                        ? profile.workspaceCellPaddingXPx
+                        : (int) (profile.edgeMarginPx / 2f);
                 child.setPadding(cellPaddingX, cellPaddingY, cellPaddingX, 0);
             }
         } else {

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -111,7 +111,7 @@ public CancellationSignal getPreview(WidgetItem item, int previewWidth,
      * sizes (landscape vs portrait).
      */
     private static class CacheDb extends SQLiteCacheHelper {
-        private static final int DB_VERSION = 7;
+        private static final int DB_VERSION = 8;
 
         private static final String TABLE_NAME = "shortcut_and_widget_previews";
         private static final String COLUMN_COMPONENT = "componentName";

File: src/com/android/launcher3/folder/FolderAnimationManager.java
Patch:
@@ -57,7 +57,7 @@ public class FolderAnimationManager {
     private GradientDrawable mFolderBackground;
 
     private FolderIcon mFolderIcon;
-    private FolderIcon.PreviewBackground mPreviewBackground;
+    private PreviewBackground mPreviewBackground;
 
     private Context mContext;
     private Launcher mLauncher;

File: src/com/android/launcher3/dragndrop/DragView.java
Patch:
@@ -272,7 +272,7 @@ private Drawable getFullDrawable(ItemInfo info, LauncherAppState appState, Objec
                     .resolveActivity(info.getIntent(), info.user);
             outObj[0] = activityInfo;
             return (activityInfo != null) ? appState.getIconCache()
-                    .getFullResIcon(activityInfo) : null;
+                    .getFullResIcon(activityInfo, false) : null;
         } else if (info.itemType == LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT) {
             if (info instanceof PendingAddShortcutInfo) {
                 ShortcutConfigActivityInfo activityInfo =

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -471,7 +471,7 @@ private Bitmap generateShortcutPreview(BaseActivity launcher, ShortcutConfigActi
         RectF boxRect = drawBoxWithShadow(c, size, size);
 
         Bitmap icon = LauncherIcons.createScaledBitmapWithoutShadow(
-                mutateOnMainThread(info.getFullResIcon(mIconCache)), mContext, Build.VERSION_CODES.O);
+                mutateOnMainThread(info.getFullResIcon(mIconCache)), mContext, 0);
         Rect src = new Rect(0, 0, icon.getWidth(), icon.getHeight());
 
         boxRect.set(0, 0, iconSize, iconSize);

File: src/com/android/launcher3/graphics/LauncherIcons.java
Patch:
@@ -322,8 +322,7 @@ public static Bitmap createShortcutIcon(ShortcutInfoCompat shortcutInfo, Context
         IconCache cache = app.getIconCache();
         Bitmap unbadgedBitmap = unbadgedDrawable == null
                 ? cache.getDefaultIcon(Process.myUserHandle())
-                : LauncherIcons.createScaledBitmapWithoutShadow(unbadgedDrawable, context,
-                Build.VERSION_CODES.O);
+                : LauncherIcons.createScaledBitmapWithoutShadow(unbadgedDrawable, context, 0);
 
         if (!badged) {
             return unbadgedBitmap;

File: src/com/android/launcher3/widget/PendingItemDragHelper.java
Patch:
@@ -116,7 +116,7 @@ public void startDrag(Rect previewBounds, int previewBitmapWidth, int previewVie
         } else {
             PendingAddShortcutInfo createShortcutInfo = (PendingAddShortcutInfo) mAddInfo;
             Drawable icon = createShortcutInfo.activityInfo.getFullResIcon(app.getIconCache());
-            preview = LauncherIcons.createScaledBitmapWithoutShadow(icon, launcher, Build.VERSION_CODES.O);
+            preview = LauncherIcons.createScaledBitmapWithoutShadow(icon, launcher, 0);
             mAddInfo.spanX = mAddInfo.spanY = 1;
             scale = ((float) launcher.getDeviceProfile().iconSizePx) / preview.getWidth();
 

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -471,7 +471,7 @@ private Bitmap generateShortcutPreview(BaseActivity launcher, ShortcutConfigActi
         RectF boxRect = drawBoxWithShadow(c, size, size);
 
         Bitmap icon = LauncherIcons.createScaledBitmapWithoutShadow(
-                mutateOnMainThread(info.getFullResIcon(mIconCache)), mContext, Build.VERSION_CODES.O);
+                mutateOnMainThread(info.getFullResIcon(mIconCache)), mContext, 0);
         Rect src = new Rect(0, 0, icon.getWidth(), icon.getHeight());
 
         boxRect.set(0, 0, iconSize, iconSize);

File: src/com/android/launcher3/graphics/LauncherIcons.java
Patch:
@@ -322,8 +322,7 @@ public static Bitmap createShortcutIcon(ShortcutInfoCompat shortcutInfo, Context
         IconCache cache = app.getIconCache();
         Bitmap unbadgedBitmap = unbadgedDrawable == null
                 ? cache.getDefaultIcon(Process.myUserHandle())
-                : LauncherIcons.createScaledBitmapWithoutShadow(unbadgedDrawable, context,
-                Build.VERSION_CODES.O);
+                : LauncherIcons.createScaledBitmapWithoutShadow(unbadgedDrawable, context, 0);
 
         if (!badged) {
             return unbadgedBitmap;

File: src/com/android/launcher3/widget/PendingItemDragHelper.java
Patch:
@@ -116,7 +116,7 @@ public void startDrag(Rect previewBounds, int previewBitmapWidth, int previewVie
         } else {
             PendingAddShortcutInfo createShortcutInfo = (PendingAddShortcutInfo) mAddInfo;
             Drawable icon = createShortcutInfo.activityInfo.getFullResIcon(app.getIconCache());
-            preview = LauncherIcons.createScaledBitmapWithoutShadow(icon, launcher, Build.VERSION_CODES.O);
+            preview = LauncherIcons.createScaledBitmapWithoutShadow(icon, launcher, 0);
             mAddInfo.spanX = mAddInfo.spanY = 1;
             scale = ((float) launcher.getDeviceProfile().iconSizePx) / preview.getWidth();
 

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -468,7 +468,7 @@ private Bitmap generateShortcutPreview(BaseActivity launcher, ShortcutConfigActi
         RectF boxRect = drawBoxWithShadow(c, size, size);
 
         Bitmap icon = LauncherIcons.createScaledBitmapWithoutShadow(
-                mutateOnMainThread(info.getFullResIcon(mIconCache)), mContext, Build.VERSION_CODES.O);
+                mutateOnMainThread(info.getFullResIcon(mIconCache)), mContext, 0);
         Rect src = new Rect(0, 0, icon.getWidth(), icon.getHeight());
 
         boxRect.set(0, 0, iconSize, iconSize);

File: src/com/android/launcher3/graphics/LauncherIcons.java
Patch:
@@ -322,8 +322,7 @@ public static Bitmap createShortcutIcon(ShortcutInfoCompat shortcutInfo, Context
         IconCache cache = app.getIconCache();
         Bitmap unbadgedBitmap = unbadgedDrawable == null
                 ? cache.getDefaultIcon(Process.myUserHandle())
-                : LauncherIcons.createScaledBitmapWithoutShadow(unbadgedDrawable, context,
-                Build.VERSION_CODES.O);
+                : LauncherIcons.createScaledBitmapWithoutShadow(unbadgedDrawable, context, 0);
 
         if (!badged) {
             return unbadgedBitmap;

File: src/com/android/launcher3/widget/PendingItemDragHelper.java
Patch:
@@ -116,7 +116,7 @@ public void startDrag(Rect previewBounds, int previewBitmapWidth, int previewVie
         } else {
             PendingAddShortcutInfo createShortcutInfo = (PendingAddShortcutInfo) mAddInfo;
             Drawable icon = createShortcutInfo.activityInfo.getFullResIcon(app.getIconCache());
-            preview = LauncherIcons.createScaledBitmapWithoutShadow(icon, launcher, Build.VERSION_CODES.O);
+            preview = LauncherIcons.createScaledBitmapWithoutShadow(icon, launcher, 0);
             mAddInfo.spanX = mAddInfo.spanY = 1;
             scale = ((float) launcher.getDeviceProfile().iconSizePx) / preview.getWidth();
 

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -49,7 +49,7 @@ public class AllAppsTransitionController implements TouchController, VerticalPul
     private static final boolean DBG = false;
 
     private final Interpolator mWorkspaceAccelnterpolator = new AccelerateInterpolator(2f);
-    private final Interpolator mHotseatAccelInterpolator = new AccelerateInterpolator(.5f);
+    private final Interpolator mHotseatAccelInterpolator = new AccelerateInterpolator(1.5f);
     private final Interpolator mDecelInterpolator = new DecelerateInterpolator(3f);
     private final Interpolator mFastOutSlowInInterpolator = new FastOutSlowInInterpolator();
     private final VerticalPullDetector.ScrollInterpolator mScrollInterpolator

File: src/com/android/launcher3/folder/ClippedFolderIconLayoutRule.java
Patch:
@@ -20,7 +20,7 @@ public class ClippedFolderIconLayoutRule implements FolderIcon.PreviewLayoutRule
     private float mBaselineIconScale;
 
     @Override
-    public void init(int availableSpace, int intrinsicIconSize, boolean rtl) {
+    public void init(int availableSpace, float intrinsicIconSize, boolean rtl) {
         mAvailableSpace = availableSpace;
         mRadius = ITEM_RADIUS_SCALE_FACTOR * availableSpace / 2f;
         mIconSize = intrinsicIconSize;

File: src/com/android/launcher3/folder/StackFolderIconLayoutRule.java
Patch:
@@ -35,7 +35,7 @@ public class StackFolderIconLayoutRule implements FolderIcon.PreviewLayoutRule {
     private float mMaxPerspectiveShift;
 
     @Override
-    public void init(int availableSpace, int intrinsicIconSize, boolean rtl) {
+    public void init(int availableSpace, float intrinsicIconSize, boolean rtl) {
         mAvailableSpaceInPreview = availableSpace;
 
         // cos(45) = 0.707  + ~= 0.1) = 0.8f

File: src/com/android/launcher3/graphics/PreloadIconDrawable.java
Patch:
@@ -178,7 +178,7 @@ public void draw(Canvas canvas) {
         Rect bounds = getBounds();
 
         canvas.scale(mIconScale, mIconScale, bounds.exactCenterX(), bounds.exactCenterY());
-        drawInternal(canvas);
+        super.draw(canvas);
         canvas.restoreToCount(saveCount);
     }
 

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -299,10 +299,7 @@ public boolean dispatchKeyEvent(KeyEvent event) {
 
     @Override
     public boolean onLongClick(final View v) {
-        // Return early if this is not initiated from a touch
-        if (!v.isInTouchMode()) return false;
         // When we have exited all apps or are in transition, disregard long clicks
-
         if (!mLauncher.isAppsViewVisible() ||
                 mLauncher.getWorkspace().isSwitchingState()) return false;
         // Return if global dragging is not enabled or we are already dragging

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -283,9 +283,6 @@ public boolean startDrag(View v, DragOptions options) {
         Object tag = v.getTag();
         if (tag instanceof ShortcutInfo) {
             ShortcutInfo item = (ShortcutInfo) tag;
-            if (!v.isInTouchMode()) {
-                return false;
-            }
 
             mEmptyCellRank = item.rank;
             mCurrentDragView = v;

File: src/com/android/launcher3/shortcuts/ShortcutsItemView.java
Patch:
@@ -104,8 +104,8 @@ public boolean onTouch(View v, MotionEvent ev) {
 
     @Override
     public boolean onLongClick(View v) {
-        // Return early if this is not initiated from a touch or not the correct view
-        if (!v.isInTouchMode() || !(v.getParent() instanceof DeepShortcutView)) return false;
+        // Return early if not the correct view
+        if (!(v.getParent() instanceof DeepShortcutView)) return false;
         // Return early if global dragging is not enabled
         if (!mLauncher.isDraggingEnabled()) return false;
         // Return early if an item is already being dragged (e.g. when long-pressing two shortcuts)

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -139,8 +139,6 @@ public boolean handleLongClick(View v) {
         if (LOGD) {
             Log.d(TAG, String.format("onLongClick [v=%s]", v));
         }
-        // Return early if this is not initiated from a touch
-        if (!v.isInTouchMode()) return false;
         // When we  are in transition, disregard long clicks
         if (mLauncher.getWorkspace().isSwitchingState()) return false;
         // Return if global dragging is not enabled

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -335,6 +335,7 @@ public void onDragEnd() {
         if (mIsExternalDrag && mDragInProgress) {
             completeDragExit();
         }
+        mDragInProgress = false;
         mDragController.removeDragListener(this);
     }
 

File: src/com/android/launcher3/compat/ShortcutConfigActivityInfo.java
Patch:
@@ -125,7 +125,7 @@ public Drawable getFullResIcon(IconCache cache) {
     }
 
     @TargetApi(26)
-    static class ShortcutConfigActivityInfoVO extends ShortcutConfigActivityInfo {
+    public static class ShortcutConfigActivityInfoVO extends ShortcutConfigActivityInfo {
 
         private final LauncherActivityInfo mInfo;
 

File: src/com/android/launcher3/graphics/ShadowGenerator.java
Patch:
@@ -28,7 +28,6 @@
 import android.support.v4.graphics.ColorUtils;
 
 import com.android.launcher3.LauncherAppState;
-import com.android.launcher3.util.Preconditions;
 
 /**
  * Utility class to add shadows to bitmaps.
@@ -126,7 +125,9 @@ public static void drawShadow(Canvas c, RectF bounds, int color,
     }
 
     public static ShadowGenerator getInstance(Context context) {
-        Preconditions.assertNonUiThread();
+        // TODO: This currently fails as the system default icon also needs a shadow as it
+        // uses adaptive icon.
+        // Preconditions.assertNonUiThread();
         synchronized (LOCK) {
             if (sShadowGenerator == null) {
                 sShadowGenerator = new ShadowGenerator(context);

File: src/com/android/launcher3/dynamicui/WallpaperColorInfo.java
Patch:
@@ -61,7 +61,7 @@ public boolean supportsDarkText() {
 
     @Override
     public void onColorsChanged(WallpaperColorsCompat colors, int which) {
-        if (which == FLAG_SYSTEM) {
+        if ((which & FLAG_SYSTEM) != 0) {
             boolean wasDarkTheme = mIsDark;
             boolean didSupportDarkText = mSupportsDarkText;
             update(colors);

File: src/com/android/launcher3/dynamicui/WallpaperColorInfo.java
Patch:
@@ -61,7 +61,7 @@ public boolean supportsDarkText() {
 
     @Override
     public void onColorsChanged(WallpaperColorsCompat colors, int which) {
-        if (which == FLAG_SYSTEM) {
+        if ((which & FLAG_SYSTEM) != 0) {
             boolean wasDarkTheme = mIsDark;
             boolean didSupportDarkText = mSupportsDarkText;
             update(colors);

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -75,6 +75,7 @@
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragView;
+import com.android.launcher3.graphics.PreloadIconDrawable;
 import com.android.launcher3.util.Themes;
 import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.util.Thunk;
@@ -511,7 +512,8 @@ private void drawPreviewItem(Canvas canvas, PreviewItemDrawingParams params) {
         if (d != null) {
             mTempBounds.set(d.getBounds());
             d.setBounds(0, 0, mIntrinsicIconSize, mIntrinsicIconSize);
-            if (d instanceof FastBitmapDrawable) {
+            boolean isPreloadIcon = d instanceof PreloadIconDrawable;
+            if (!isPreloadIcon && d instanceof FastBitmapDrawable) {
                 FastBitmapDrawable fd = (FastBitmapDrawable) d;
                 fd.drawWithBrightness(canvas, params.overlayAlpha);
             } else {

File: src/com/android/launcher3/anim/RoundedRectRevealOutlineProvider.java
Patch:
@@ -56,7 +56,7 @@ public RoundedRectRevealOutlineProvider(float startRadius, float endRadius, Rect
 
     @Override
     public boolean shouldRemoveElevationDuringAnimation() {
-        return false;
+        return true;
     }
 
     @Override

File: src/com/android/launcher3/anim/RoundedRectRevealOutlineProvider.java
Patch:
@@ -56,7 +56,7 @@ public RoundedRectRevealOutlineProvider(float startRadius, float endRadius, Rect
 
     @Override
     public boolean shouldRemoveElevationDuringAnimation() {
-        return false;
+        return true;
     }
 
     @Override

File: src/com/android/launcher3/dynamicui/WallpaperColorInfo.java
Patch:
@@ -61,7 +61,7 @@ public boolean supportsDarkText() {
 
     @Override
     public void onColorsChanged(WallpaperColorsCompat colors, int which) {
-        if (which == FLAG_SYSTEM) {
+        if ((which & FLAG_SYSTEM) != 0) {
             boolean wasDarkTheme = mIsDark;
             boolean didSupportDarkText = mSupportsDarkText;
             update(colors);

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -37,7 +37,7 @@ private FeatureFlags() {}
     // When enabled while all-apps open, the soft input will be set to adjust resize .
     public static boolean LAUNCHER3_UPDATE_SOFT_INPUT_MODE = true;
     // When enabled the promise icon is visible in all apps while installation an app.
-    public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = true;
+    public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = false;
     // When enabled uses the AllAppsRadialGradientAndScrimDrawable for all apps
     public static boolean LAUNCHER3_GRADIENT_ALL_APPS = true;
     // When enabled allows use of physics based motions in the Launcher.

File: src/com/android/launcher3/anim/RoundedRectRevealOutlineProvider.java
Patch:
@@ -56,7 +56,7 @@ public RoundedRectRevealOutlineProvider(float startRadius, float endRadius, Rect
 
     @Override
     public boolean shouldRemoveElevationDuringAnimation() {
-        return false;
+        return true;
     }
 
     @Override

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -102,8 +102,8 @@ protected void onFinishInflate() {
     protected void setDrawable(int resId) {
         // We do not set the drawable in the xml as that inflates two drawables corresponding to
         // drawableLeft and drawableStart.
-        mDrawable = getResources().getDrawable(resId);
-        setCompoundDrawablesRelativeWithIntrinsicBounds(mDrawable, null, null, null);
+        setCompoundDrawablesRelativeWithIntrinsicBounds(resId, 0, 0, 0);
+        mDrawable = getCompoundDrawablesRelative()[0];
     }
 
     public void setDropTargetBar(DropTargetBar dropTargetBar) {

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -102,8 +102,8 @@ protected void onFinishInflate() {
     protected void setDrawable(int resId) {
         // We do not set the drawable in the xml as that inflates two drawables corresponding to
         // drawableLeft and drawableStart.
-        mDrawable = getResources().getDrawable(resId);
-        setCompoundDrawablesRelativeWithIntrinsicBounds(mDrawable, null, null, null);
+        setCompoundDrawablesRelativeWithIntrinsicBounds(resId, 0, 0, 0);
+        mDrawable = getCompoundDrawablesRelative()[0];
     }
 
     public void setDropTargetBar(DropTargetBar dropTargetBar) {

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -102,8 +102,8 @@ protected void onFinishInflate() {
     protected void setDrawable(int resId) {
         // We do not set the drawable in the xml as that inflates two drawables corresponding to
         // drawableLeft and drawableStart.
-        mDrawable = getResources().getDrawable(resId);
-        setCompoundDrawablesRelativeWithIntrinsicBounds(mDrawable, null, null, null);
+        setCompoundDrawablesRelativeWithIntrinsicBounds(resId, 0, 0, 0);
+        mDrawable = getCompoundDrawablesRelative()[0];
     }
 
     public void setDropTargetBar(DropTargetBar dropTargetBar) {

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -168,6 +168,7 @@ public BubbleTextView(Context context, AttributeSet attrs, int defStyle) {
         int defaultIconSize = grid.iconSizePx;
         if (display == DISPLAY_WORKSPACE) {
             setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.iconTextSizePx);
+            setCompoundDrawablePadding(grid.iconDrawablePaddingPx);
         } else if (display == DISPLAY_ALL_APPS) {
             setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.allAppsIconTextSizePx);
             setCompoundDrawablePadding(grid.allAppsIconDrawablePaddingPx);

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -749,7 +749,7 @@ public void scheduleNext() {
     }
 
     private static final class IconDB extends SQLiteCacheHelper {
-        private final static int DB_VERSION = 14;
+        private final static int DB_VERSION = 15;
 
         private final static int RELEASE_VERSION = DB_VERSION +
                 (FeatureFlags.LAUNCHER3_DISABLE_ICON_NORMALIZATION ? 0 : 1);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1413,7 +1413,6 @@ public View createShortcut(ViewGroup parent, ShortcutInfo info) {
         BubbleTextView favorite = (BubbleTextView) LayoutInflater.from(parent.getContext())
                 .inflate(R.layout.app_icon, parent, false);
         favorite.applyFromShortcutInfo(info);
-        favorite.setCompoundDrawablePadding(mDeviceProfile.iconDrawablePaddingPx);
         favorite.setOnClickListener(this);
         favorite.setOnFocusChangeListener(mFocusHandler);
         return favorite;

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -120,7 +120,7 @@ public void measureChild(View child) {
                 // Center the icon/folder
                 int cHeight = getCellContentHeight();
                 int cellPaddingY = (int) Math.max(0, ((lp.height - cHeight) / 2f));
-                int cellPaddingX = (int) (profile.edgeMarginPx / 2f);
+                int cellPaddingX = profile.cellPaddingXPx;
                 child.setPadding(cellPaddingX, cellPaddingY, cellPaddingX, 0);
             }
         } else {

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -111,7 +111,7 @@ public CancellationSignal getPreview(WidgetItem item, int previewWidth,
      * sizes (landscape vs portrait).
      */
     private static class CacheDb extends SQLiteCacheHelper {
-        private static final int DB_VERSION = 6;
+        private static final int DB_VERSION = 7;
 
         private static final String TABLE_NAME = "shortcut_and_widget_previews";
         private static final String COLUMN_COMPONENT = "componentName";

File: src/com/android/launcher3/dynamicui/WallpaperColorInfo.java
Patch:
@@ -78,7 +78,9 @@ private void update(WallpaperColorsCompat wallpaperColors) {
             mMainColor = FALLBACK_COLOR;
             mSecondaryColor = FALLBACK_COLOR;
         }
-        mSupportsDarkText = wallpaperColors != null ? wallpaperColors.supportsDarkText() : false;
+        mSupportsDarkText = wallpaperColors != null
+                ? (wallpaperColors.getColorHints()
+                    & WallpaperColorsCompat.HINT_SUPPORTS_DARK_TEXT) > 0 : false;
         float[] hsl = new float[3];
         ColorUtils.colorToHSL(mMainColor, hsl);
         mIsDark = hsl[2] < 0.2f;

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -165,7 +165,7 @@ public DragView startDrag(Bitmap b, int dragLayerX, int dragLayerY,
                 ? res.getDimensionPixelSize(R.dimen.pre_drag_view_scale) : 0f;
         final DragView dragView = mDragObject.dragView = new DragView(mLauncher, b, registrationX,
                 registrationY, initialDragViewScale, scaleDps);
-
+        dragView.setItemInfo(dragInfo);
         mDragObject.dragComplete = false;
         if (mOptions.isAccessibleDrag) {
             // For an accessible drag, we assume the view is being dragged from the center.

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -60,7 +60,6 @@
 import com.android.launcher3.LogDecelerateInterpolator;
 import com.android.launcher3.OnAlarmListener;
 import com.android.launcher3.PagedView;
-import com.android.launcher3.PendingAddItemInfo;
 import com.android.launcher3.R;
 import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.UninstallDropTarget.DropTargetSource;
@@ -634,7 +633,9 @@ public void run() {
             @Override
             public void onAnimationStart(Animator animation) {
                 if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {
+                    mFolderIcon.setBackgroundVisible(false);
                     mFolderIcon.drawLeaveBehindIfExists();
+                } else {
                     mFolderIcon.setVisibility(INVISIBLE);
                 }
 
@@ -787,6 +788,7 @@ private void closeComplete(boolean wasAnimated) {
         mDragController.removeDropTarget(this);
         clearFocus();
         if (mFolderIcon != null) {
+            mFolderIcon.setBackgroundVisible(true);
             mFolderIcon.setVisibility(View.VISIBLE);
             if (wasAnimated) {
                 mFolderIcon.mBackground.animateBackgroundStroke();

File: src/com/android/launcher3/folder/FolderAnimationManager.java
Patch:
@@ -208,6 +208,7 @@ public AnimatorSet getAnimator() {
         play(a, getAnimator(mFolder, SCALE_PROPERTY, initialScale, finalScale));
         play(a, getAnimator(items, ITEMS_TEXT_COLOR_PROPERTY, Color.TRANSPARENT, finalTextColor));
         play(a, getAnimator(mFolderBackground, "color", initialColor, finalColor));
+        play(a, mFolderIcon.mFolderName.createTextAlphaAnimator(!mIsOpening));
         play(a, new RoundedRectRevealOutlineProvider(initialRadius, finalRadius, startRect,
                 endRect).createRevealAnimator(mFolder, !mIsOpening));
 

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -32,7 +32,6 @@
 
 import com.android.launcher3.CellLayout.ContainerType;
 import com.android.launcher3.badge.BadgeRenderer;
-import com.android.launcher3.config.FeatureFlags;
 
 import java.util.ArrayList;
 
@@ -181,7 +180,8 @@ public DeviceProfile(Context context, InvariantDeviceProfile inv,
         overviewModeMaxIconZoneHeightPx =
                 res.getDimensionPixelSize(R.dimen.dynamic_grid_overview_max_icon_zone_height);
         overviewModeBarItemWidthPx =
-                res.getDimensionPixelSize(R.dimen.dynamic_grid_overview_bar_item_width);
+                (int) (res.getDimensionPixelSize(R.dimen.dynamic_grid_overview_bar_item_width)
+                        * (isLandscape ? 1.5f : 1f));
         overviewModeBarSpacerWidthPx =
                 res.getDimensionPixelSize(R.dimen.dynamic_grid_overview_bar_spacer_width);
         overviewModeIconZoneRatio =

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -247,6 +247,7 @@ public View createNewView(ShortcutInfo item) {
         final BubbleTextView textView = (BubbleTextView) mInflater.inflate(
                 R.layout.folder_application, null, false);
         textView.applyFromShortcutInfo(item);
+        textView.setHapticFeedbackEnabled(false);
         textView.setOnClickListener(mFolder);
         textView.setOnLongClickListener(mFolder);
         textView.setOnFocusChangeListener(mFocusIndicatorHelper);

File: src/com/android/launcher3/popup/PopupContainerWithArrow.java
Patch:
@@ -827,6 +827,9 @@ protected void animateClose() {
         revealAnim.setDuration((long) res.getInteger(R.integer.config_popupOpenCloseDuration));
         revealAnim.setInterpolator(new AccelerateDecelerateInterpolator());
 
+        // Animate original icon's text back in.
+        closeAnim.play(mOriginalIcon.createTextAlphaAnimator(true /* fadeIn */));
+
         closeAnim.addListener(new AnimatorListenerAdapter() {
             @Override
             public void onAnimationEnd(Animator animation) {

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -790,6 +790,9 @@ private void closeComplete(boolean wasAnimated) {
             mFolderIcon.setVisibility(View.VISIBLE);
             if (wasAnimated) {
                 mFolderIcon.mBackground.animateBackgroundStroke();
+                if (mFolderIcon.hasBadge()) {
+                    mFolderIcon.createBadgeScaleAnimator(0f, 1f).start();
+                }
                 mFolderIcon.requestFocus();
             }
         }

File: src/com/android/launcher3/notification/NotificationInfo.java
Patch:
@@ -27,6 +27,7 @@
 import android.service.notification.StatusBarNotification;
 import android.view.View;
 
+import com.android.launcher3.AbstractFloatingView;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.graphics.IconPalette;
@@ -105,7 +106,8 @@ public void onClick(View view) {
         if (autoCancel) {
             launcher.getPopupDataProvider().cancelNotification(notificationKey);
         }
-        PopupContainerWithArrow.getOpen(launcher).close(true);
+        AbstractFloatingView.closeOpenContainer(launcher, AbstractFloatingView
+                .TYPE_POPUP_CONTAINER_WITH_ARROW);
     }
 
     public Drawable getIconForBackground(Context context, int background) {

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -151,7 +151,6 @@ void resetLayout() {
                 mLauncher.setAllAppsButton(allAppsButton);
                 allAppsButton.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
                 allAppsButton.setOnClickListener(mLauncher);
-                allAppsButton.setOnLongClickListener(mLauncher);
                 allAppsButton.setOnFocusChangeListener(mLauncher.mFocusHandler);
             }
 

File: src/com/android/launcher3/pageindicators/PageIndicatorCaretLandscape.java
Patch:
@@ -50,7 +50,6 @@ public PageIndicatorCaretLandscape(Context context, AttributeSet attrs, int defS
         Launcher l = Launcher.getLauncher(context);
         setOnTouchListener(l.getHapticFeedbackTouchListener());
         setOnClickListener(l);
-        setOnLongClickListener(l);
         setOnFocusChangeListener(l.mFocusHandler);
     }
 

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -137,7 +137,6 @@ protected void onFinishInflate() {
         mAllAppsHandle.setImageDrawable(getCaretDrawable());
         mAllAppsHandle.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
         mAllAppsHandle.setOnClickListener(mLauncher);
-        mAllAppsHandle.setOnLongClickListener(mLauncher);
         mAllAppsHandle.setOnFocusChangeListener(mLauncher.mFocusHandler);
         mLauncher.setAllAppsButton(mAllAppsHandle);
     }

File: src/com/android/launcher3/graphics/PreloadIconDrawable.java
Patch:
@@ -69,7 +69,7 @@ public void set(PreloadIconDrawable object, Float value) {
     private static final int COLOR_TRACK = 0x77EEEEEE;
     private static final int COLOR_SHADOW = 0x55000000;
 
-    private static final float SMALL_SCALE = 0.75f;
+    private static final float SMALL_SCALE = 0.6f;
 
     private static final SparseArray<WeakReference<Bitmap>> sShadowCache = new SparseArray<>();
 

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -25,11 +25,9 @@
 import android.os.Bundle;
 import android.os.UserHandle;
 import android.support.annotation.Nullable;
-
 import com.android.launcher3.Utilities;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
 import com.android.launcher3.util.PackageUserKey;
-
 import java.util.List;
 
 public abstract class LauncherAppsCompat {
@@ -50,7 +48,7 @@ protected LauncherAppsCompat() {
     }
 
     private static LauncherAppsCompat sInstance;
-    private static Object sInstanceLock = new Object();
+    private static final Object sInstanceLock = new Object();
 
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -25,11 +25,9 @@
 import android.os.Bundle;
 import android.os.UserHandle;
 import android.support.annotation.Nullable;
-
 import com.android.launcher3.Utilities;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
 import com.android.launcher3.util.PackageUserKey;
-
 import java.util.List;
 
 public abstract class LauncherAppsCompat {
@@ -50,7 +48,7 @@ protected LauncherAppsCompat() {
     }
 
     private static LauncherAppsCompat sInstance;
-    private static Object sInstanceLock = new Object();
+    private static final Object sInstanceLock = new Object();
 
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -25,11 +25,9 @@
 import android.os.Bundle;
 import android.os.UserHandle;
 import android.support.annotation.Nullable;
-
 import com.android.launcher3.Utilities;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
 import com.android.launcher3.util.PackageUserKey;
-
 import java.util.List;
 
 public abstract class LauncherAppsCompat {
@@ -50,7 +48,7 @@ protected LauncherAppsCompat() {
     }
 
     private static LauncherAppsCompat sInstance;
-    private static Object sInstanceLock = new Object();
+    private static final Object sInstanceLock = new Object();
 
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -51,7 +51,6 @@
 import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.graphics.PreloadIconDrawable;
 import com.android.launcher3.model.PackageItemInfo;
-import com.android.launcher3.util.Themes;
 
 import java.text.NumberFormat;
 

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -51,7 +51,6 @@
 import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.graphics.PreloadIconDrawable;
 import com.android.launcher3.model.PackageItemInfo;
-import com.android.launcher3.util.Themes;
 
 import java.text.NumberFormat;
 

File: src/com/android/launcher3/util/MultiHashMap.java
Patch:
@@ -16,13 +16,13 @@
 
 package com.android.launcher3.util;
 
-import android.support.v4.util.ArrayMap;
 import java.util.ArrayList;
+import java.util.HashMap;
 
 /**
  * A utility map from keys to an ArrayList of values.
  */
-public class MultiHashMap<K, V> extends ArrayMap<K, ArrayList<V>> {
+public class MultiHashMap<K, V> extends HashMap<K, ArrayList<V>> {
 
     public MultiHashMap() { }
 

File: src/com/android/launcher3/util/MultiHashMap.java
Patch:
@@ -16,13 +16,13 @@
 
 package com.android.launcher3.util;
 
+import android.support.v4.util.ArrayMap;
 import java.util.ArrayList;
-import java.util.HashMap;
 
 /**
  * A utility map from keys to an ArrayList of values.
  */
-public class MultiHashMap<K, V> extends HashMap<K, ArrayList<V>> {
+public class MultiHashMap<K, V> extends ArrayMap<K, ArrayList<V>> {
 
     public MultiHashMap() { }
 

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -124,7 +124,7 @@ protected void drawInternal(Canvas canvas) {
     public IconPalette getIconPalette() {
         if (mIconPalette == null) {
             mIconPalette = IconPalette.fromDominantColor(Utilities
-                    .findDominantColorByHue(mBitmap, 20));
+                    .findDominantColorByHue(mBitmap, 20), true /* desaturateBackground */);
         }
         return mIconPalette;
     }

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -61,7 +61,6 @@
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Locale;
-import java.util.Set;
 import java.util.concurrent.Executor;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -110,6 +109,8 @@ public static boolean isAtLeastO() {
     // An intent extra to indicate the horizontal scroll of the wallpaper.
     public static final String EXTRA_WALLPAPER_OFFSET = "com.android.launcher3.WALLPAPER_OFFSET";
 
+    public static final int COLOR_EXTRACTION_JOB_ID = 1;
+
     // These values are same as that in {@link AsyncTask}.
     private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();
     private static final int CORE_POOL_SIZE = CPU_COUNT + 1;

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -75,6 +75,7 @@
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragView;
+import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -885,7 +886,8 @@ protected void dispatchDraw(Canvas canvas) {
             // If we are animating to the accepting state, animate the badge out.
             float badgeScale = Math.max(0, mBadgeScale - mBackground.getScaleProgress());
             mTempSpaceForBadgeOffset.set(getWidth() - mTempBounds.right, mTempBounds.top);
-            mBadgeRenderer.draw(canvas, mBadgeInfo, mTempBounds,
+            IconPalette badgePalette = IconPalette.getFolderBadgePalette(getResources());
+            mBadgeRenderer.draw(canvas, badgePalette, mBadgeInfo, mTempBounds,
                     badgeScale, mTempSpaceForBadgeOffset);
         }
     }

File: src/com/android/launcher3/graphics/LauncherIcons.java
Patch:
@@ -266,9 +266,10 @@ public static Bitmap createIconBitmap(Drawable icon, Context context, float scal
 
             sOldBounds.set(icon.getBounds());
             if (Utilities.isAtLeastO() && icon instanceof AdaptiveIconDrawable) {
-                int offset = Math.min(left, top);
+                int offset = Math.max((int)(ShadowGenerator.BLUR_FACTOR * iconBitmapSize),
+                        Math.min(left, top));
                 int size = Math.max(width, height);
-                icon.setBounds(offset, offset, offset + size, offset + size);
+                icon.setBounds(offset, offset, size, size);
             } else {
                 icon.setBounds(left, top, left+width, top+height);
             }

File: src/com/android/launcher3/graphics/ShadowGenerator.java
Patch:
@@ -35,7 +35,7 @@ public class ShadowGenerator {
 
     // Percent of actual icon size
     private static final float HALF_DISTANCE = 0.5f;
-    private static final float BLUR_FACTOR = 0.5f/48;
+    public static final float BLUR_FACTOR = 0.5f/48;
 
     // Percent of actual icon size
     private static final float KEY_SHADOW_DISTANCE = 1f/48;

File: src/com/android/launcher3/graphics/TintedDrawableSpan.java
Patch:
@@ -34,6 +34,7 @@ public TintedDrawableSpan(Context context, int resourceId) {
         super(ALIGN_BOTTOM);
         mDrawable = context.getDrawable(resourceId);
         mOldTint = 0;
+        mDrawable.setTint(0);
     }
 
     @Override

File: src/com/android/launcher3/graphics/TintedDrawableSpan.java
Patch:
@@ -34,6 +34,7 @@ public TintedDrawableSpan(Context context, int resourceId) {
         super(ALIGN_BOTTOM);
         mDrawable = context.getDrawable(resourceId);
         mOldTint = 0;
+        mDrawable.setTint(0);
     }
 
     @Override

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -111,6 +111,7 @@ public static boolean isAtLeastO() {
     public static final String EXTRA_WALLPAPER_OFFSET = "com.android.launcher3.WALLPAPER_OFFSET";
 
     public static final int COLOR_EXTRACTION_JOB_ID = 1;
+    public static final int WALLPAPER_COMPAT_JOB_ID = 2;
 
     // These values are same as that in {@link AsyncTask}.
     private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();

File: src/com/android/launcher3/model/AddWorkspaceItemsTask.java
Patch:
@@ -47,7 +47,7 @@
 /**
  * Task to add auto-created workspace items.
  */
-public class AddWorkspaceItemsTask extends ExtendedModelTask {
+public class AddWorkspaceItemsTask extends BaseModelUpdateTask {
 
     private final Provider<List<Pair<ItemInfo, Object>>> mAppsProvider;
 

File: src/com/android/launcher3/model/CacheDataUpdatedTask.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Handles changes due to cache updates.
  */
-public class CacheDataUpdatedTask extends ExtendedModelTask {
+public class CacheDataUpdatedTask extends BaseModelUpdateTask {
 
     public static final int OP_CACHE_UPDATE = 1;
     public static final int OP_SESSION_UPDATE = 2;

File: src/com/android/launcher3/model/PackageInstallStateChangedTask.java
Patch:
@@ -35,7 +35,7 @@
 /**
  * Handles changes due to a sessions updates for a currently installing app.
  */
-public class PackageInstallStateChangedTask extends ExtendedModelTask {
+public class PackageInstallStateChangedTask extends BaseModelUpdateTask {
 
     private final PackageInstallInfo mInstallInfo;
 

File: src/com/android/launcher3/model/PackageUpdatedTask.java
Patch:
@@ -30,7 +30,6 @@
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.LauncherAppWidgetInfo;
-import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherModel.CallbackTask;
 import com.android.launcher3.LauncherModel.Callbacks;
 import com.android.launcher3.LauncherSettings;
@@ -44,7 +43,6 @@
 import com.android.launcher3.graphics.LauncherIcons;
 import com.android.launcher3.util.FlagOp;
 import com.android.launcher3.util.ItemInfoMatcher;
-import com.android.launcher3.util.MultiHashMap;
 import com.android.launcher3.util.PackageManagerHelper;
 import com.android.launcher3.util.PackageUserKey;
 
@@ -58,7 +56,7 @@
  * Handles updates due to changes in package manager (app installed/updated/removed)
  * or when a user availability changes.
  */
-public class PackageUpdatedTask extends ExtendedModelTask {
+public class PackageUpdatedTask extends BaseModelUpdateTask {
 
     private static final boolean DEBUG = false;
     private static final String TAG = "PackageUpdatedTask";

File: src/com/android/launcher3/model/ShortcutsChangedTask.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Handles changes due to shortcut manager updates (deep shortcut changes)
  */
-public class ShortcutsChangedTask extends ExtendedModelTask {
+public class ShortcutsChangedTask extends BaseModelUpdateTask {
 
     private final String mPackageName;
     private final List<ShortcutInfoCompat> mShortcuts;

File: src/com/android/launcher3/model/UserLockStateChangedTask.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * Task to handle changing of lock state of the user
  */
-public class UserLockStateChangedTask extends ExtendedModelTask {
+public class UserLockStateChangedTask extends BaseModelUpdateTask {
 
     private final UserHandle mUser;
 

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -91,9 +91,8 @@ public AllAppsContainerView(Context context, AttributeSet attrs, int defStyleAtt
 
         mLauncher = Launcher.getLauncher(context);
         mApps = new AlphabeticalAppsList(context);
-        mSpringAnimationHandler = new SpringAnimationHandler(SpringAnimationHandler.Y_DIRECTION);
-        mAdapter = new AllAppsGridAdapter(mLauncher, mApps, mLauncher, this,
-                mSpringAnimationHandler);
+        mAdapter = new AllAppsGridAdapter(mLauncher, mApps, mLauncher, this);
+        mSpringAnimationHandler = mAdapter.getSpringAnimationHandler();
         mApps.setAdapter(mAdapter);
         mLayoutManager = mAdapter.getLayoutManager();
         mSearchQueryBuilder = new SpannableStringBuilder();

File: src/com/android/launcher3/notification/NotificationItemView.java
Patch:
@@ -99,7 +99,7 @@ public void updateHeader(int notificationCount, @Nullable IconPalette palette) {
             if (mNotificationHeaderTextColor == Notification.COLOR_DEFAULT) {
                 mNotificationHeaderTextColor =
                         IconPalette.resolveContrastColor(getContext(), palette.dominantColor,
-                                Themes.getAttrColor(getContext(), R.attr.popupColorSecondary));
+                                Themes.getAttrColor(getContext(), R.attr.popupColorPrimary));
             }
             mHeaderCount.setTextColor(mNotificationHeaderTextColor);
         }

File: src/com/android/launcher3/notification/NotificationItemView.java
Patch:
@@ -34,6 +34,7 @@
 import com.android.launcher3.logging.UserEventDispatcher.LogContainerProvider;
 import com.android.launcher3.popup.PopupItemView;
 import com.android.launcher3.userevent.nano.LauncherLogProto;
+import com.android.launcher3.util.Themes;
 
 import java.util.List;
 
@@ -98,7 +99,7 @@ public void updateHeader(int notificationCount, @Nullable IconPalette palette) {
             if (mNotificationHeaderTextColor == Notification.COLOR_DEFAULT) {
                 mNotificationHeaderTextColor =
                         IconPalette.resolveContrastColor(getContext(), palette.dominantColor,
-                            getResources().getColor(R.color.popup_header_background_color));
+                                Themes.getAttrColor(getContext(), R.attr.popupColorSecondary));
             }
             mHeaderCount.setTextColor(mNotificationHeaderTextColor);
         }

File: src/com/android/launcher3/anim/SpringAnimationHandler.java
Patch:
@@ -178,7 +178,7 @@ private boolean isVerticalDirection() {
         return mDirection == Y_DIRECTION;
     }
 
-    public SpringAnimation createSpringAnimation(View view) {
+    private SpringAnimation createSpringAnimation(View view) {
         DynamicAnimation.ViewProperty property = isVerticalDirection()
                 ? DynamicAnimation.TRANSLATION_Y
                 : DynamicAnimation.TRANSLATION_X;

File: src/com/android/launcher3/AppWidgetsRestoredReceiver.java
Patch:
@@ -12,6 +12,7 @@
 import android.util.Log;
 
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.model.LoaderTask;
 import com.android.launcher3.util.ContentWriter;
 
 public class AppWidgetsRestoredReceiver extends BroadcastReceiver {
@@ -52,7 +53,7 @@ static void restoreAppWidgetIds(Context context, PendingResult asyncResult,
 
             final AppWidgetProviderInfo provider = widgets.getAppWidgetInfo(newWidgetIds[i]);
             final int state;
-            if (LauncherModel.isValidProvider(provider)) {
+            if (LoaderTask.isValidProvider(provider)) {
                 // This will ensure that we show 'Click to setup' UI if required.
                 state = LauncherAppWidgetInfo.FLAG_UI_NOT_READY;
             } else {

File: src/com/android/launcher3/notification/NotificationFooterLayout.java
Patch:
@@ -205,6 +205,7 @@ private void removeViewFromIconRow(View child) {
                 collapseFooter.addListener(new AnimatorListenerAdapter() {
                     @Override
                     public void onAnimationEnd(Animator animation) {
+                        ((ViewGroup) getParent()).findViewById(R.id.divider).setVisibility(GONE);
                         ((ViewGroup) getParent()).removeView(NotificationFooterLayout.this);
                     }
                 });

File: src/com/android/launcher3/popup/PopupContainerWithArrow.java
Patch:
@@ -278,6 +278,9 @@ private void addDummyViews(PopupPopulator.Item[] itemTypesToPopulate,
                 int footerHeight = notificationFooterHasIcons ?
                         res.getDimensionPixelSize(R.dimen.notification_footer_height) : 0;
                 item.findViewById(R.id.footer).getLayoutParams().height = footerHeight;
+                if (notificationFooterHasIcons) {
+                    mNotificationItemView.findViewById(R.id.divider).setVisibility(VISIBLE);
+                }
 
                 int roundedCorners = ROUNDED_TOP_CORNERS | ROUNDED_BOTTOM_CORNERS;
                 if (shouldUnroundTopCorners) {

File: src/com/android/launcher3/notification/NotificationFooterLayout.java
Patch:
@@ -205,6 +205,7 @@ private void removeViewFromIconRow(View child) {
                 collapseFooter.addListener(new AnimatorListenerAdapter() {
                     @Override
                     public void onAnimationEnd(Animator animation) {
+                        ((ViewGroup) getParent()).findViewById(R.id.divider).setVisibility(GONE);
                         ((ViewGroup) getParent()).removeView(NotificationFooterLayout.this);
                     }
                 });

File: src/com/android/launcher3/popup/PopupContainerWithArrow.java
Patch:
@@ -278,6 +278,9 @@ private void addDummyViews(PopupPopulator.Item[] itemTypesToPopulate,
                 int footerHeight = notificationFooterHasIcons ?
                         res.getDimensionPixelSize(R.dimen.notification_footer_height) : 0;
                 item.findViewById(R.id.footer).getLayoutParams().height = footerHeight;
+                if (notificationFooterHasIcons) {
+                    mNotificationItemView.findViewById(R.id.divider).setVisibility(VISIBLE);
+                }
 
                 int roundedCorners = ROUNDED_TOP_CORNERS | ROUNDED_BOTTOM_CORNERS;
                 if (shouldUnroundTopCorners) {

File: src/com/android/launcher3/notification/NotificationFooterLayout.java
Patch:
@@ -205,6 +205,7 @@ private void removeViewFromIconRow(View child) {
                 collapseFooter.addListener(new AnimatorListenerAdapter() {
                     @Override
                     public void onAnimationEnd(Animator animation) {
+                        ((ViewGroup) getParent()).findViewById(R.id.divider).setVisibility(GONE);
                         ((ViewGroup) getParent()).removeView(NotificationFooterLayout.this);
                     }
                 });

File: src/com/android/launcher3/popup/PopupContainerWithArrow.java
Patch:
@@ -278,6 +278,9 @@ private void addDummyViews(PopupPopulator.Item[] itemTypesToPopulate,
                 int footerHeight = notificationFooterHasIcons ?
                         res.getDimensionPixelSize(R.dimen.notification_footer_height) : 0;
                 item.findViewById(R.id.footer).getLayoutParams().height = footerHeight;
+                if (notificationFooterHasIcons) {
+                    mNotificationItemView.findViewById(R.id.divider).setVisibility(VISIBLE);
+                }
 
                 int roundedCorners = ROUNDED_TOP_CORNERS | ROUNDED_BOTTOM_CORNERS;
                 if (shouldUnroundTopCorners) {

File: src/com/android/launcher3/anim/SpringAnimationHandler.java
Patch:
@@ -178,7 +178,7 @@ private boolean isVerticalDirection() {
         return mDirection == Y_DIRECTION;
     }
 
-    private SpringAnimation createSpringAnimation(View view) {
+    public SpringAnimation createSpringAnimation(View view) {
         DynamicAnimation.ViewProperty property = isVerticalDirection()
                 ? DynamicAnimation.TRANSLATION_Y
                 : DynamicAnimation.TRANSLATION_X;

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -61,7 +61,6 @@
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Locale;
-import java.util.Set;
 import java.util.concurrent.Executor;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -110,6 +109,8 @@ public static boolean isAtLeastO() {
     // An intent extra to indicate the horizontal scroll of the wallpaper.
     public static final String EXTRA_WALLPAPER_OFFSET = "com.android.launcher3.WALLPAPER_OFFSET";
 
+    public static final int COLOR_EXTRACTION_JOB_ID = 1;
+
     // These values are same as that in {@link AsyncTask}.
     private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();
     private static final int CORE_POOL_SIZE = CPU_COUNT + 1;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3970,7 +3970,7 @@ public void notifyWidgetProvidersChanged() {
      *                    refreshes the widgets and shortcuts associated with the given package/user
      */
     public void refreshAndBindWidgetsForPackageUser(@Nullable PackageUserKey packageUser) {
-        mModel.refreshAndBindWidgetsAndShortcuts(this, mWidgetsView.isEmpty(), packageUser);
+        mModel.refreshAndBindWidgetsAndShortcuts(packageUser);
     }
 
     public void lockScreenOrientation() {

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -93,9 +93,7 @@ private LauncherAppState(Context context) {
         mInvariantDeviceProfile = new InvariantDeviceProfile(mContext);
         mIconCache = new IconCache(mContext, mInvariantDeviceProfile);
         mWidgetCache = new WidgetPreviewLoader(mContext, mIconCache);
-
-        mModel = new LauncherModel(this, mIconCache,
-                Utilities.getOverrideObject(AppFilter.class, mContext, R.string.app_filter_class));
+        mModel = new LauncherModel(this, mIconCache, AppFilter.newInstance(mContext));
 
         LauncherAppsCompat.getInstance(mContext).addOnAppsChangedCallback(mModel);
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2533,8 +2533,8 @@ public void onClickWallpaperPicker(View v) {
                 .putExtra(Utilities.EXTRA_WALLPAPER_OFFSET, offset);
 
         String pickerPackage = getString(R.string.wallpaper_picker_package);
-        boolean hasTargetPackage = TextUtils.isEmpty(pickerPackage);
-        if (!hasTargetPackage) {
+        boolean hasTargetPackage = !TextUtils.isEmpty(pickerPackage);
+        if (hasTargetPackage) {
             intent.setPackage(pickerPackage);
         }
 

File: src/com/android/launcher3/shortcuts/DeepShortcutManager.java
Patch:
@@ -65,8 +65,10 @@ private DeepShortcutManager(Context context) {
     }
 
     public static boolean supportsShortcuts(ItemInfo info) {
+        boolean isItemPromise = info instanceof com.android.launcher3.ShortcutInfo
+                && ((com.android.launcher3.ShortcutInfo) info).isPromise();
         return info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION
-                && !info.isDisabled();
+                && !info.isDisabled() && !isItemPromise;
     }
 
     public boolean wasLastCallSuccess() {

File: src/com/android/launcher3/BaseActivity.java
Patch:
@@ -39,7 +39,7 @@ public AccessibilityDelegate getAccessibilityDelegate() {
     public final UserEventDispatcher getUserEventDispatcher() {
         if (mUserEventDispatcher == null) {
             mUserEventDispatcher = UserEventDispatcher.newInstance(this,
-                    isInMultiWindowModeCompat());
+                    mDeviceProfile.isLandscape, isInMultiWindowModeCompat());
         }
         return mUserEventDispatcher;
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4061,8 +4061,8 @@ public void onProvideKeyboardShortcuts(
             shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.custom_actions),
                     KeyEvent.KEYCODE_O, KeyEvent.META_CTRL_ON));
         }
-        if (currentFocus instanceof BubbleTextView &&
-                ((BubbleTextView) currentFocus).hasDeepShortcuts()) {
+        if (currentFocus.getTag() instanceof ItemInfo
+                && DeepShortcutManager.supportsShortcuts((ItemInfo) currentFocus.getTag())) {
             shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.action_deep_shortcut),
                     KeyEvent.KEYCODE_S, KeyEvent.META_CTRL_ON));
         }

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -37,6 +37,7 @@
 import com.android.launcher3.dragndrop.DragController.DragListener;
 import com.android.launcher3.dragndrop.DragOptions;
 import com.android.launcher3.folder.Folder;
+import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -104,8 +105,7 @@ public void addSupportedActions(View host, AccessibilityNodeInfo info, boolean f
 
         // If the request came from keyboard, do not add custom shortcuts as that is already
         // exposed as a direct shortcut
-        if (!fromKeyboard && host instanceof BubbleTextView
-                && ((BubbleTextView) host).hasDeepShortcuts()) {
+        if (!fromKeyboard && DeepShortcutManager.supportsShortcuts(item)) {
             info.addAction(mActions.get(DEEP_SHORTCUTS));
         }
 

File: src/com/android/launcher3/discovery/AppDiscoveryItemView.java
Patch:
@@ -82,7 +82,7 @@ public void apply(@NonNull AppDiscoveryAppInfo info) {
         mPrice.setText(info.priceFormatted != null ? info.priceFormatted : "");
         mReviewCount.setVisibility(SHOW_REVIEW_COUNT ? View.VISIBLE : View.GONE);
         if (info.rating >= 0) {
-            mRatingText.setText(new DecimalFormat("#.#").format(info.rating));
+            mRatingText.setText(new DecimalFormat("#.0").format(info.rating));
             mRatingView.setRating(info.rating);
             mRatingView.setVisibility(View.VISIBLE);
             String reviewCountFormatted = NumberFormat.getInstance().format(info.reviewCount);

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -75,7 +75,6 @@
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragView;
-import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -886,7 +885,7 @@ protected void dispatchDraw(Canvas canvas) {
             // If we are animating to the accepting state, animate the badge out.
             float badgeScale = Math.max(0, mBadgeScale - mBackground.getScaleProgress());
             mTempSpaceForBadgeOffset.set(getWidth() - mTempBounds.right, mTempBounds.top);
-            mBadgeRenderer.draw(canvas, IconPalette.FOLDER_ICON_PALETTE, mBadgeInfo, mTempBounds,
+            mBadgeRenderer.draw(canvas, mBadgeInfo, mTempBounds,
                     badgeScale, mTempSpaceForBadgeOffset);
         }
     }

File: src/com/android/launcher3/notification/NotificationFooterLayout.java
Patch:
@@ -141,6 +141,7 @@ private View addNotificationIconForInfo(NotificationInfo info) {
         icon.setBackground(info.getIconForBackground(getContext(), mBackgroundColor));
         icon.setOnClickListener(info);
         icon.setTag(info);
+        icon.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);
         mIconRow.addView(icon, 0, mIconLayoutParams);
         return icon;
     }

File: src/com/android/launcher3/notification/NotificationMainView.java
Patch:
@@ -122,7 +122,7 @@ public View getChildAtPosition(MotionEvent ev) {
 
     @Override
     public boolean canChildBeDismissed(View v) {
-        return mNotificationInfo.dismissable;
+        return mNotificationInfo != null && mNotificationInfo.dismissable;
     }
 
     @Override

File: src/com/android/launcher3/BaseActivity.java
Patch:
@@ -39,7 +39,7 @@ public AccessibilityDelegate getAccessibilityDelegate() {
     public final UserEventDispatcher getUserEventDispatcher() {
         if (mUserEventDispatcher == null) {
             mUserEventDispatcher = UserEventDispatcher.newInstance(this,
-                    isInMultiWindowModeCompat());
+                    mDeviceProfile.isLandscape, isInMultiWindowModeCompat());
         }
         return mUserEventDispatcher;
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4061,8 +4061,8 @@ public void onProvideKeyboardShortcuts(
             shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.custom_actions),
                     KeyEvent.KEYCODE_O, KeyEvent.META_CTRL_ON));
         }
-        if (currentFocus instanceof BubbleTextView &&
-                ((BubbleTextView) currentFocus).hasDeepShortcuts()) {
+        if (currentFocus.getTag() instanceof ItemInfo
+                && DeepShortcutManager.supportsShortcuts((ItemInfo) currentFocus.getTag())) {
             shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.action_deep_shortcut),
                     KeyEvent.KEYCODE_S, KeyEvent.META_CTRL_ON));
         }

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -37,6 +37,7 @@
 import com.android.launcher3.dragndrop.DragController.DragListener;
 import com.android.launcher3.dragndrop.DragOptions;
 import com.android.launcher3.folder.Folder;
+import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -104,8 +105,7 @@ public void addSupportedActions(View host, AccessibilityNodeInfo info, boolean f
 
         // If the request came from keyboard, do not add custom shortcuts as that is already
         // exposed as a direct shortcut
-        if (!fromKeyboard && host instanceof BubbleTextView
-                && ((BubbleTextView) host).hasDeepShortcuts()) {
+        if (!fromKeyboard && DeepShortcutManager.supportsShortcuts(item)) {
             info.addAction(mActions.get(DEEP_SHORTCUTS));
         }
 

File: src/com/android/launcher3/discovery/AppDiscoveryItemView.java
Patch:
@@ -82,7 +82,7 @@ public void apply(@NonNull AppDiscoveryAppInfo info) {
         mPrice.setText(info.priceFormatted != null ? info.priceFormatted : "");
         mReviewCount.setVisibility(SHOW_REVIEW_COUNT ? View.VISIBLE : View.GONE);
         if (info.rating >= 0) {
-            mRatingText.setText(new DecimalFormat("#.#").format(info.rating));
+            mRatingText.setText(new DecimalFormat("#.0").format(info.rating));
             mRatingView.setRating(info.rating);
             mRatingView.setVisibility(View.VISIBLE);
             String reviewCountFormatted = NumberFormat.getInstance().format(info.reviewCount);

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -75,7 +75,6 @@
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragView;
-import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -886,7 +885,7 @@ protected void dispatchDraw(Canvas canvas) {
             // If we are animating to the accepting state, animate the badge out.
             float badgeScale = Math.max(0, mBadgeScale - mBackground.getScaleProgress());
             mTempSpaceForBadgeOffset.set(getWidth() - mTempBounds.right, mTempBounds.top);
-            mBadgeRenderer.draw(canvas, IconPalette.FOLDER_ICON_PALETTE, mBadgeInfo, mTempBounds,
+            mBadgeRenderer.draw(canvas, mBadgeInfo, mTempBounds,
                     badgeScale, mTempSpaceForBadgeOffset);
         }
     }

File: src/com/android/launcher3/notification/NotificationFooterLayout.java
Patch:
@@ -141,6 +141,7 @@ private View addNotificationIconForInfo(NotificationInfo info) {
         icon.setBackground(info.getIconForBackground(getContext(), mBackgroundColor));
         icon.setOnClickListener(info);
         icon.setTag(info);
+        icon.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);
         mIconRow.addView(icon, 0, mIconLayoutParams);
         return icon;
     }

File: src/com/android/launcher3/notification/NotificationMainView.java
Patch:
@@ -122,7 +122,7 @@ public View getChildAtPosition(MotionEvent ev) {
 
     @Override
     public boolean canChildBeDismissed(View v) {
-        return mNotificationInfo.dismissable;
+        return mNotificationInfo != null && mNotificationInfo.dismissable;
     }
 
     @Override

File: src/com/android/launcher3/BaseActivity.java
Patch:
@@ -39,7 +39,7 @@ public AccessibilityDelegate getAccessibilityDelegate() {
     public final UserEventDispatcher getUserEventDispatcher() {
         if (mUserEventDispatcher == null) {
             mUserEventDispatcher = UserEventDispatcher.newInstance(this,
-                    isInMultiWindowModeCompat());
+                    mDeviceProfile.isLandscape, isInMultiWindowModeCompat());
         }
         return mUserEventDispatcher;
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4061,8 +4061,8 @@ public void onProvideKeyboardShortcuts(
             shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.custom_actions),
                     KeyEvent.KEYCODE_O, KeyEvent.META_CTRL_ON));
         }
-        if (currentFocus instanceof BubbleTextView &&
-                ((BubbleTextView) currentFocus).hasDeepShortcuts()) {
+        if (currentFocus.getTag() instanceof ItemInfo
+                && DeepShortcutManager.supportsShortcuts((ItemInfo) currentFocus.getTag())) {
             shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.action_deep_shortcut),
                     KeyEvent.KEYCODE_S, KeyEvent.META_CTRL_ON));
         }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -100,7 +100,7 @@ public LauncherAppWidgetHostView(Context context) {
         if (Utilities.isAtLeastO()) {
             try {
                 Method asyncMethod = AppWidgetHostView.class
-                        .getMethod("setAsyncExecutor", Executor.class);
+                        .getMethod("setExecutor", Executor.class);
                 asyncMethod.invoke(this, Utilities.THREAD_POOL_EXECUTOR);
             } catch (Exception e) {
                 Log.e(TAG, "Unable to set async executor", e);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -755,7 +755,6 @@ protected void onDataUpgrade(SQLiteDatabase db, int oldVersion) {
                     }
                 }
                 case 2:
-                    removeGhostWidgets(db);
                 case 3:
                     // data updated
                     return;

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -37,6 +37,7 @@
 import com.android.launcher3.dragndrop.DragController.DragListener;
 import com.android.launcher3.dragndrop.DragOptions;
 import com.android.launcher3.folder.Folder;
+import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -104,8 +105,7 @@ public void addSupportedActions(View host, AccessibilityNodeInfo info, boolean f
 
         // If the request came from keyboard, do not add custom shortcuts as that is already
         // exposed as a direct shortcut
-        if (!fromKeyboard && host instanceof BubbleTextView
-                && ((BubbleTextView) host).hasDeepShortcuts()) {
+        if (!fromKeyboard && DeepShortcutManager.supportsShortcuts(item)) {
             info.addAction(mActions.get(DEEP_SHORTCUTS));
         }
 

File: src/com/android/launcher3/discovery/AppDiscoveryItemView.java
Patch:
@@ -82,7 +82,7 @@ public void apply(@NonNull AppDiscoveryAppInfo info) {
         mPrice.setText(info.priceFormatted != null ? info.priceFormatted : "");
         mReviewCount.setVisibility(SHOW_REVIEW_COUNT ? View.VISIBLE : View.GONE);
         if (info.rating >= 0) {
-            mRatingText.setText(new DecimalFormat("#.#").format(info.rating));
+            mRatingText.setText(new DecimalFormat("#.0").format(info.rating));
             mRatingView.setRating(info.rating);
             mRatingView.setVisibility(View.VISIBLE);
             String reviewCountFormatted = NumberFormat.getInstance().format(info.reviewCount);

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -75,7 +75,6 @@
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragView;
-import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -886,7 +885,7 @@ protected void dispatchDraw(Canvas canvas) {
             // If we are animating to the accepting state, animate the badge out.
             float badgeScale = Math.max(0, mBadgeScale - mBackground.getScaleProgress());
             mTempSpaceForBadgeOffset.set(getWidth() - mTempBounds.right, mTempBounds.top);
-            mBadgeRenderer.draw(canvas, IconPalette.FOLDER_ICON_PALETTE, mBadgeInfo, mTempBounds,
+            mBadgeRenderer.draw(canvas, mBadgeInfo, mTempBounds,
                     badgeScale, mTempSpaceForBadgeOffset);
         }
     }

File: src/com/android/launcher3/notification/NotificationFooterLayout.java
Patch:
@@ -141,6 +141,7 @@ private View addNotificationIconForInfo(NotificationInfo info) {
         icon.setBackground(info.getIconForBackground(getContext(), mBackgroundColor));
         icon.setOnClickListener(info);
         icon.setTag(info);
+        icon.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);
         mIconRow.addView(icon, 0, mIconLayoutParams);
         return icon;
     }

File: src/com/android/launcher3/notification/NotificationMainView.java
Patch:
@@ -122,7 +122,7 @@ public View getChildAtPosition(MotionEvent ev) {
 
     @Override
     public boolean canChildBeDismissed(View v) {
-        return mNotificationInfo.dismissable;
+        return mNotificationInfo != null && mNotificationInfo.dismissable;
     }
 
     @Override

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -39,7 +39,7 @@ private FeatureFlags() {}
     // When enabled the promise icon is visible in all apps while installation an app.
     public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = true;
     // When enabled uses the AllAppsRadialGradientAndScrimDrawable for all apps
-    public static boolean LAUNCHER3_GRADIENT_ALL_APPS = false;
+    public static boolean LAUNCHER3_GRADIENT_ALL_APPS = true;
     // When enabled allows use of physics based motions in the Launcher.
     public static boolean LAUNCHER3_PHYSICS = true;
 

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -39,7 +39,7 @@ private FeatureFlags() {}
     // When enabled the promise icon is visible in all apps while installation an app.
     public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = true;
     // When enabled uses the AllAppsRadialGradientAndScrimDrawable for all apps
-    public static boolean LAUNCHER3_GRADIENT_ALL_APPS = false;
+    public static boolean LAUNCHER3_GRADIENT_ALL_APPS = true;
     // When enabled allows use of physics based motions in the Launcher.
     public static boolean LAUNCHER3_PHYSICS = true;
 

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -39,7 +39,7 @@ private FeatureFlags() {}
     // When enabled the promise icon is visible in all apps while installation an app.
     public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = true;
     // When enabled uses the AllAppsRadialGradientAndScrimDrawable for all apps
-    public static boolean LAUNCHER3_GRADIENT_ALL_APPS = false;
+    public static boolean LAUNCHER3_GRADIENT_ALL_APPS = true;
     // When enabled allows use of physics based motions in the Launcher.
     public static boolean LAUNCHER3_PHYSICS = true;
 

File: src/com/android/launcher3/anim/SpringAnimationHandler.java
Patch:
@@ -164,7 +164,7 @@ private void setStartVelocity(float velocity) {
     }
 
     private void computeVelocity() {
-        getVelocityTracker().computeCurrentVelocity(300);
+        getVelocityTracker().computeCurrentVelocity(175);
 
         mCurrentVelocity = isVerticalDirection()
                 ? getVelocityTracker().getYVelocity()

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -1437,6 +1437,9 @@ public void showItem(ShortcutInfo info) {
     @Override
     public void onAdd(ShortcutInfo item, int rank) {
         View view = mContent.createAndAddViewForRank(item, rank);
+        mLauncher.getModelWriter().addOrMoveItemInDatabase(item, mInfo.id, 0, item.cellX,
+                item.cellY);
+
         ArrayList<View> items = new ArrayList<>(getItemsInReadingOrder());
         items.add(rank, view);
         mContent.arrangeChildren(items, items.size());

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -1437,6 +1437,9 @@ public void showItem(ShortcutInfo info) {
     @Override
     public void onAdd(ShortcutInfo item, int rank) {
         View view = mContent.createAndAddViewForRank(item, rank);
+        mLauncher.getModelWriter().addOrMoveItemInDatabase(item, mInfo.id, 0, item.cellX,
+                item.cellY);
+
         ArrayList<View> items = new ArrayList<>(getItemsInReadingOrder());
         items.add(rank, view);
         mContent.arrangeChildren(items, items.size());

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -40,6 +40,8 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = true;
     // When enabled uses the AllAppsRadialGradientAndScrimDrawable for all apps
     public static boolean LAUNCHER3_GRADIENT_ALL_APPS = false;
+    // When enabled allows use of physics based motions in the Launcher.
+    public static boolean LAUNCHER3_PHYSICS = false;
 
     // Feature flag to enable moving the QSB on the 0th screen of the workspace.
     public static final boolean QSB_ON_FIRST_SCREEN = true;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -451,7 +451,7 @@ public void onDragStart(DropTarget.DragObject dragObject, DragOptions options) {
         mLauncher.lockScreenOrientation();
         mLauncher.onInteractionBegin();
         // Prevent any Un/InstallShortcutReceivers from updating the db while we are dragging
-        InstallShortcutReceiver.enableInstallQueue();
+        InstallShortcutReceiver.enableInstallQueue(InstallShortcutReceiver.FLAG_DRAG_AND_DROP);
 
         // Do not add a new page if it is a accessible drag which was not started by the workspace.
         // We do not support accessibility drag from other sources and instead provide a direct
@@ -504,7 +504,8 @@ public void onDragEnd() {
         mLauncher.unlockScreenOrientation(false);
 
         // Re-enable any Un/InstallShortcutReceiver and now process any queued items
-        InstallShortcutReceiver.disableAndFlushInstallQueue(getContext());
+        InstallShortcutReceiver.disableAndFlushInstallQueue(
+                InstallShortcutReceiver.FLAG_DRAG_AND_DROP, getContext());
 
         mOutlineProvider = null;
         mDragInfo = null;

File: src/com/android/launcher3/compat/UserManagerCompatVL.java
Patch:
@@ -22,8 +22,8 @@
 import android.os.UserHandle;
 import android.os.UserManager;
 
-import com.android.launcher3.Utilities;
 import com.android.launcher3.util.LongArrayMap;
+import com.android.launcher3.util.ManagedProfileHeuristic;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -122,7 +122,7 @@ public CharSequence getBadgedLabelForUser(CharSequence label, UserHandle user) {
 
     @Override
     public long getUserCreationTime(UserHandle user) {
-        SharedPreferences prefs = Utilities.getPrefs(mContext);
+        SharedPreferences prefs = ManagedProfileHeuristic.prefs(mContext);
         String key = USER_CREATION_TIME_KEY + getSerialNumberForUser(user);
         if (!prefs.contains(key)) {
             prefs.edit().putLong(key, System.currentTimeMillis()).apply();

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1831,7 +1831,7 @@ public void onPackageIconsUpdated(HashSet<String> updatedPackages, UserHandle us
                 CacheDataUpdatedTask.OP_CACHE_UPDATE, user, updatedPackages));
     }
 
-    void enqueueModelUpdateTask(BaseModelUpdateTask task) {
+    public void enqueueModelUpdateTask(BaseModelUpdateTask task) {
         if (!mModelLoaded && mLoaderTask == null) {
             if (DEBUG_LOADERS) {
                 Log.d(TAG, "enqueueModelUpdateTask Ignoring task since loader is pending=" + task);

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -259,7 +259,7 @@ public static float shrinkRect(Rect r, float scaleX, float scaleY) {
         return scale;
     }
 
-    static boolean isSystemApp(Context context, Intent intent) {
+    public static boolean isSystemApp(Context context, Intent intent) {
         PackageManager pm = context.getPackageManager();
         ComponentName cn = intent.getComponent();
         String packageName = null;

File: src/com/android/launcher3/allapps/search/DefaultAppSearchAlgorithm.java
Patch:
@@ -54,7 +54,7 @@ public void run() {
         });
     }
 
-    protected ArrayList<ComponentKey> getTitleMatchResult(String query) {
+    public ArrayList<ComponentKey> getTitleMatchResult(String query) {
         // Do an intersection of the words in the query and each title, and filter out all the
         // apps that don't match all of the words in the query.
         final String queryTextLower = query.toLowerCase();
@@ -67,7 +67,7 @@ protected ArrayList<ComponentKey> getTitleMatchResult(String query) {
         return result;
     }
 
-    protected boolean matches(AppInfo info, String query) {
+    public boolean matches(AppInfo info, String query) {
         int queryLength = query.length();
 
         String title = info.title.toString();

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -113,9 +113,9 @@ public interface LauncherLayoutChangeListener {
     public int hotseatCellHeightPx;
     public int hotseatIconSizePx;
     public int hotseatBarHeightPx;
-    private int hotseatBarTopPaddingPx;
-    private int hotseatBarBottomPaddingPx;
-    private int hotseatLandGutterPx;
+    public int hotseatBarTopPaddingPx;
+    public int hotseatBarBottomPaddingPx;
+    public int hotseatLandGutterPx;
 
     // All apps
     public int allAppsNumCols;

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -457,7 +457,7 @@ private void drawBadgeIfNecessary(Canvas canvas) {
             final int scrollX = getScrollX();
             final int scrollY = getScrollY();
             canvas.translate(scrollX, scrollY);
-            mBadgeRenderer.draw(canvas, mIconPalette, mBadgeInfo, mTempIconBounds, mBadgeScale,
+            mBadgeRenderer.draw(canvas, mBadgeInfo, mTempIconBounds, mBadgeScale,
                     mTempSpaceForBadgeOffset);
             canvas.translate(-scrollX, -scrollY);
         }

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -75,7 +75,6 @@
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragView;
-import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -933,7 +932,7 @@ protected void dispatchDraw(Canvas canvas) {
             // If we are animating to the accepting state, animate the badge out.
             float badgeScale = Math.max(0, mBadgeScale - mBackground.getScaleProgress());
             mTempSpaceForBadgeOffset.set(getWidth() - mTempBounds.right, mTempBounds.top);
-            mBadgeRenderer.draw(canvas, IconPalette.FOLDER_ICON_PALETTE, mBadgeInfo, mTempBounds,
+            mBadgeRenderer.draw(canvas, mBadgeInfo, mTempBounds,
                     badgeScale, mTempSpaceForBadgeOffset);
         }
     }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -457,7 +457,7 @@ private void drawBadgeIfNecessary(Canvas canvas) {
             final int scrollX = getScrollX();
             final int scrollY = getScrollY();
             canvas.translate(scrollX, scrollY);
-            mBadgeRenderer.draw(canvas, mIconPalette, mBadgeInfo, mTempIconBounds, mBadgeScale,
+            mBadgeRenderer.draw(canvas, mBadgeInfo, mTempIconBounds, mBadgeScale,
                     mTempSpaceForBadgeOffset);
             canvas.translate(-scrollX, -scrollY);
         }

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -75,7 +75,6 @@
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragView;
-import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -933,7 +932,7 @@ protected void dispatchDraw(Canvas canvas) {
             // If we are animating to the accepting state, animate the badge out.
             float badgeScale = Math.max(0, mBadgeScale - mBackground.getScaleProgress());
             mTempSpaceForBadgeOffset.set(getWidth() - mTempBounds.right, mTempBounds.top);
-            mBadgeRenderer.draw(canvas, IconPalette.FOLDER_ICON_PALETTE, mBadgeInfo, mTempBounds,
+            mBadgeRenderer.draw(canvas, mBadgeInfo, mTempBounds,
                     badgeScale, mTempSpaceForBadgeOffset);
         }
     }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -453,7 +453,7 @@ private void drawBadgeIfNecessary(Canvas canvas) {
             final int scrollX = getScrollX();
             final int scrollY = getScrollY();
             canvas.translate(scrollX, scrollY);
-            mBadgeRenderer.draw(canvas, mIconPalette, mBadgeInfo, mTempIconBounds, mBadgeScale,
+            mBadgeRenderer.draw(canvas, mBadgeInfo, mTempIconBounds, mBadgeScale,
                     mTempSpaceForBadgeOffset);
             canvas.translate(-scrollX, -scrollY);
         }

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -75,7 +75,6 @@
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragView;
-import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -886,7 +885,7 @@ protected void dispatchDraw(Canvas canvas) {
             // If we are animating to the accepting state, animate the badge out.
             float badgeScale = Math.max(0, mBadgeScale - mBackground.getScaleProgress());
             mTempSpaceForBadgeOffset.set(getWidth() - mTempBounds.right, mTempBounds.top);
-            mBadgeRenderer.draw(canvas, IconPalette.FOLDER_ICON_PALETTE, mBadgeInfo, mTempBounds,
+            mBadgeRenderer.draw(canvas, mBadgeInfo, mTempBounds,
                     badgeScale, mTempSpaceForBadgeOffset);
         }
     }

File: src/com/android/launcher3/BaseRecyclerView.java
Patch:
@@ -113,6 +113,7 @@ public void onTouchEvent(RecyclerView rv, MotionEvent ev) {
      * it is already showing).
      */
     private boolean handleTouchEvent(MotionEvent ev) {
+        ev.offsetLocation(0, -getPaddingTop());
         int action = ev.getAction();
         int x = (int) ev.getX();
         int y = (int) ev.getY();
@@ -136,6 +137,7 @@ private boolean handleTouchEvent(MotionEvent ev) {
                 mScrollbar.handleTouchEvent(ev, mDownX, mDownY, mLastY);
                 break;
         }
+        ev.offsetLocation(0, getPaddingTop());
         return mScrollbar.isDraggingThumb();
     }
 
@@ -162,7 +164,7 @@ protected boolean shouldStopScroll(MotionEvent ev) {
      * Returns the height of the fast scroll bar
      */
     protected int getScrollbarTrackHeight() {
-        return getHeight();
+        return getHeight() - getPaddingTop() - getPaddingBottom();
     }
 
     /**

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -231,9 +231,6 @@ DeviceProfile getMultiWindowProfile(Context context, Point mwSize) {
         profile.cellHeightPx = profile.iconSizePx + profile.iconDrawablePaddingPx
                 + Utilities.calculateTextHeight(profile.iconTextSizePx);
 
-        // The nav bar is black so we add bottom padding to visually center hotseat icons.
-        profile.hotseatBarBottomPaddingPx = profile.hotseatBarTopPaddingPx;
-
         // We use these scales to measure and layout the widgets using their full invariant profile
         // sizes and then draw them scaled and centered to fit in their multi-window mode cellspans.
         float appWidgetScaleX = (float) profile.getCellSize().x / getCellSize().x;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4054,8 +4054,8 @@ public void onProvideKeyboardShortcuts(
             shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.custom_actions),
                     KeyEvent.KEYCODE_O, KeyEvent.META_CTRL_ON));
         }
-        if (currentFocus instanceof BubbleTextView &&
-                ((BubbleTextView) currentFocus).hasDeepShortcuts()) {
+        if (currentFocus.getTag() instanceof ItemInfo
+                && DeepShortcutManager.supportsShortcuts((ItemInfo) currentFocus.getTag())) {
             shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.action_deep_shortcut),
                     KeyEvent.KEYCODE_S, KeyEvent.META_CTRL_ON));
         }

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -36,6 +36,7 @@
 import com.android.launcher3.dragndrop.DragOptions;
 import com.android.launcher3.folder.Folder;
 import com.android.launcher3.popup.PopupContainerWithArrow;
+import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -103,8 +104,7 @@ public void addSupportedActions(View host, AccessibilityNodeInfo info, boolean f
 
         // If the request came from keyboard, do not add custom shortcuts as that is already
         // exposed as a direct shortcut
-        if (!fromKeyboard && host instanceof BubbleTextView
-                && ((BubbleTextView) host).hasDeepShortcuts()) {
+        if (!fromKeyboard && DeepShortcutManager.supportsShortcuts(item)) {
             info.addAction(mActions.get(DEEP_SHORTCUTS));
         }
 

File: src/com/android/launcher3/notification/NotificationFooterLayout.java
Patch:
@@ -141,6 +141,7 @@ private View addNotificationIconForInfo(NotificationInfo info) {
         icon.setBackground(info.getIconForBackground(getContext(), mBackgroundColor));
         icon.setOnClickListener(info);
         icon.setTag(info);
+        icon.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);
         mIconRow.addView(icon, 0, mIconLayoutParams);
         return icon;
     }

File: src/com/android/launcher3/notification/NotificationMainView.java
Patch:
@@ -122,7 +122,7 @@ public View getChildAtPosition(MotionEvent ev) {
 
     @Override
     public boolean canChildBeDismissed(View v) {
-        return mNotificationInfo.dismissable;
+        return mNotificationInfo != null && mNotificationInfo.dismissable;
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4061,8 +4061,8 @@ public void onProvideKeyboardShortcuts(
             shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.custom_actions),
                     KeyEvent.KEYCODE_O, KeyEvent.META_CTRL_ON));
         }
-        if (currentFocus instanceof BubbleTextView &&
-                ((BubbleTextView) currentFocus).hasDeepShortcuts()) {
+        if (currentFocus.getTag() instanceof ItemInfo
+                && DeepShortcutManager.supportsShortcuts((ItemInfo) currentFocus.getTag())) {
             shortcutInfos.add(new KeyboardShortcutInfo(getString(R.string.action_deep_shortcut),
                     KeyEvent.KEYCODE_S, KeyEvent.META_CTRL_ON));
         }

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -37,6 +37,7 @@
 import com.android.launcher3.dragndrop.DragController.DragListener;
 import com.android.launcher3.dragndrop.DragOptions;
 import com.android.launcher3.folder.Folder;
+import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -104,8 +105,7 @@ public void addSupportedActions(View host, AccessibilityNodeInfo info, boolean f
 
         // If the request came from keyboard, do not add custom shortcuts as that is already
         // exposed as a direct shortcut
-        if (!fromKeyboard && host instanceof BubbleTextView
-                && ((BubbleTextView) host).hasDeepShortcuts()) {
+        if (!fromKeyboard && DeepShortcutManager.supportsShortcuts(item)) {
             info.addAction(mActions.get(DEEP_SHORTCUTS));
         }
 

File: src/com/android/launcher3/notification/NotificationFooterLayout.java
Patch:
@@ -141,6 +141,7 @@ private View addNotificationIconForInfo(NotificationInfo info) {
         icon.setBackground(info.getIconForBackground(getContext(), mBackgroundColor));
         icon.setOnClickListener(info);
         icon.setTag(info);
+        icon.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);
         mIconRow.addView(icon, 0, mIconLayoutParams);
         return icon;
     }

File: src/com/android/launcher3/notification/NotificationMainView.java
Patch:
@@ -122,7 +122,7 @@ public View getChildAtPosition(MotionEvent ev) {
 
     @Override
     public boolean canChildBeDismissed(View v) {
-        return mNotificationInfo.dismissable;
+        return mNotificationInfo != null && mNotificationInfo.dismissable;
     }
 
     @Override

File: src/com/android/launcher3/allapps/AllAppsBackgroundDrawable.java
Patch:
@@ -25,6 +25,7 @@
 import android.graphics.drawable.Drawable;
 import android.view.Gravity;
 
+import com.android.launcher3.LauncherAnimUtils;
 import com.android.launcher3.R;
 
 /**
@@ -119,7 +120,8 @@ public void animateBgAlpha(float finalAlpha, int duration) {
         int finalAlphaI = (int) (finalAlpha * 255f);
         if (getAlpha() != finalAlphaI) {
             mBackgroundAnim = cancelAnimator(mBackgroundAnim);
-            mBackgroundAnim = ObjectAnimator.ofInt(this, "alpha", finalAlphaI);
+            mBackgroundAnim = ObjectAnimator.ofInt(this, LauncherAnimUtils.DRAWABLE_ALPHA,
+                    finalAlphaI);
             mBackgroundAnim.setDuration(duration);
             mBackgroundAnim.start();
         }

File: src/com/android/launcher3/InterruptibleInOutAnimator.java
Patch:
@@ -48,7 +48,7 @@ public class InterruptibleInOutAnimator {
     @Thunk int mDirection = STOPPED;
 
     public InterruptibleInOutAnimator(View view, long duration, float fromValue, float toValue) {
-        mAnimator = LauncherAnimUtils.ofFloat(view, fromValue, toValue).setDuration(duration);
+        mAnimator = LauncherAnimUtils.ofFloat(fromValue, toValue).setDuration(duration);
         mOriginalDuration = duration;
         mOriginalFromValue = fromValue;
         mOriginalToValue = toValue;

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -92,7 +92,6 @@ public boolean startSearch(
     /*
      * Extensions points for adding / replacing some other aspects of the Launcher experience.
      */
-    public UserEventDispatcher getUserEventDispatcher();
     public boolean shouldMoveToDefaultScreenOnHomeIntent();
     public boolean hasSettings();
     public AllAppsSearchBarController getAllAppsSearchBarController();

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -37,7 +37,7 @@ static interface ChangeLogColumns extends BaseColumns {
         public static final String MODIFIED = "modified";
     }
 
-    static interface BaseLauncherColumns extends ChangeLogColumns {
+    static public interface BaseLauncherColumns extends ChangeLogColumns {
         /**
          * Descriptive name of the gesture that can be displayed to the user.
          * <P>Type: TEXT</P>
@@ -291,7 +291,6 @@ public static final class Settings {
         public static final String METHOD_NEW_SCREEN_ID = "generate_new_screen_id";
 
         public static final String METHOD_CREATE_EMPTY_DB = "create_empty_db";
-        public static final String METHOD_DELETE_DB = "delete_db";
 
         public static final String METHOD_LOAD_DEFAULT_FAVORITES = "load_default_favorites";
 
@@ -300,6 +299,8 @@ public static final class Settings {
         public static final String EXTRA_EXTRACTED_COLORS = "extra_extractedColors";
         public static final String EXTRA_WALLPAPER_ID = "extra_wallpaperId";
 
+        public static final String METHOD_REMOVE_GHOST_WIDGETS = "remove_ghost_widgets";
+
         public static final String EXTRA_VALUE = "value";
 
         public static Bundle call(ContentResolver cr, String method) {

File: src/com/android/launcher3/PendingAddItemInfo.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Meta data that is used for deferred binding.
- * e.g., this object is used to pass information on dragable targets when they are dropped onto
+ * e.g., this object is used to pass information on draggable targets when they are dropped onto
  * the workspace from another container.
  */
 public class PendingAddItemInfo extends ItemInfo {

File: src/com/android/launcher3/InterruptibleInOutAnimator.java
Patch:
@@ -48,7 +48,7 @@ public class InterruptibleInOutAnimator {
     @Thunk int mDirection = STOPPED;
 
     public InterruptibleInOutAnimator(View view, long duration, float fromValue, float toValue) {
-        mAnimator = LauncherAnimUtils.ofFloat(view, fromValue, toValue).setDuration(duration);
+        mAnimator = LauncherAnimUtils.ofFloat(fromValue, toValue).setDuration(duration);
         mOriginalDuration = duration;
         mOriginalFromValue = fromValue;
         mOriginalToValue = toValue;

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -92,7 +92,6 @@ public boolean startSearch(
     /*
      * Extensions points for adding / replacing some other aspects of the Launcher experience.
      */
-    public UserEventDispatcher getUserEventDispatcher();
     public boolean shouldMoveToDefaultScreenOnHomeIntent();
     public boolean hasSettings();
     public AllAppsSearchBarController getAllAppsSearchBarController();

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -37,7 +37,7 @@ static interface ChangeLogColumns extends BaseColumns {
         public static final String MODIFIED = "modified";
     }
 
-    static interface BaseLauncherColumns extends ChangeLogColumns {
+    static public interface BaseLauncherColumns extends ChangeLogColumns {
         /**
          * Descriptive name of the gesture that can be displayed to the user.
          * <P>Type: TEXT</P>
@@ -291,7 +291,6 @@ public static final class Settings {
         public static final String METHOD_NEW_SCREEN_ID = "generate_new_screen_id";
 
         public static final String METHOD_CREATE_EMPTY_DB = "create_empty_db";
-        public static final String METHOD_DELETE_DB = "delete_db";
 
         public static final String METHOD_LOAD_DEFAULT_FAVORITES = "load_default_favorites";
 
@@ -300,6 +299,8 @@ public static final class Settings {
         public static final String EXTRA_EXTRACTED_COLORS = "extra_extractedColors";
         public static final String EXTRA_WALLPAPER_ID = "extra_wallpaperId";
 
+        public static final String METHOD_REMOVE_GHOST_WIDGETS = "remove_ghost_widgets";
+
         public static final String EXTRA_VALUE = "value";
 
         public static Bundle call(ContentResolver cr, String method) {

File: src/com/android/launcher3/PendingAddItemInfo.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Meta data that is used for deferred binding.
- * e.g., this object is used to pass information on dragable targets when they are dropped onto
+ * e.g., this object is used to pass information on draggable targets when they are dropped onto
  * the workspace from another container.
  */
 public class PendingAddItemInfo extends ItemInfo {

File: src/com/android/launcher3/InterruptibleInOutAnimator.java
Patch:
@@ -48,7 +48,7 @@ public class InterruptibleInOutAnimator {
     @Thunk int mDirection = STOPPED;
 
     public InterruptibleInOutAnimator(View view, long duration, float fromValue, float toValue) {
-        mAnimator = LauncherAnimUtils.ofFloat(view, fromValue, toValue).setDuration(duration);
+        mAnimator = LauncherAnimUtils.ofFloat(fromValue, toValue).setDuration(duration);
         mOriginalDuration = duration;
         mOriginalFromValue = fromValue;
         mOriginalToValue = toValue;

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -92,7 +92,6 @@ public boolean startSearch(
     /*
      * Extensions points for adding / replacing some other aspects of the Launcher experience.
      */
-    public UserEventDispatcher getUserEventDispatcher();
     public boolean shouldMoveToDefaultScreenOnHomeIntent();
     public boolean hasSettings();
     public AllAppsSearchBarController getAllAppsSearchBarController();

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -37,7 +37,7 @@ static interface ChangeLogColumns extends BaseColumns {
         public static final String MODIFIED = "modified";
     }
 
-    static interface BaseLauncherColumns extends ChangeLogColumns {
+    static public interface BaseLauncherColumns extends ChangeLogColumns {
         /**
          * Descriptive name of the gesture that can be displayed to the user.
          * <P>Type: TEXT</P>
@@ -291,7 +291,6 @@ public static final class Settings {
         public static final String METHOD_NEW_SCREEN_ID = "generate_new_screen_id";
 
         public static final String METHOD_CREATE_EMPTY_DB = "create_empty_db";
-        public static final String METHOD_DELETE_DB = "delete_db";
 
         public static final String METHOD_LOAD_DEFAULT_FAVORITES = "load_default_favorites";
 
@@ -300,6 +299,8 @@ public static final class Settings {
         public static final String EXTRA_EXTRACTED_COLORS = "extra_extractedColors";
         public static final String EXTRA_WALLPAPER_ID = "extra_wallpaperId";
 
+        public static final String METHOD_REMOVE_GHOST_WIDGETS = "remove_ghost_widgets";
+
         public static final String EXTRA_VALUE = "value";
 
         public static Bundle call(ContentResolver cr, String method) {

File: src/com/android/launcher3/PendingAddItemInfo.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Meta data that is used for deferred binding.
- * e.g., this object is used to pass information on dragable targets when they are dropped onto
+ * e.g., this object is used to pass information on draggable targets when they are dropped onto
  * the workspace from another container.
  */
 public class PendingAddItemInfo extends ItemInfo {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -75,6 +75,7 @@
 import com.android.launcher3.graphics.DragPreviewProvider;
 import com.android.launcher3.graphics.PreloadIconDrawable;
 import com.android.launcher3.popup.PopupContainerWithArrow;
+import com.android.launcher3.shortcuts.ShortcutDragPreviewProvider;
 import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;
 import com.android.launcher3.util.ItemInfoMatcher;
@@ -2262,6 +2263,8 @@ public DragView beginDragShared(View child, DragSource source, ItemInfo dragObje
             int previewSize = grid.folderIconSizePx;
             dragVisualizeOffset = new Point(- halfPadding, halfPadding - child.getPaddingTop());
             dragRect = new Rect(0, child.getPaddingTop(), child.getWidth(), previewSize);
+        } else if (previewProvider instanceof ShortcutDragPreviewProvider) {
+            dragVisualizeOffset = new Point(- halfPadding, halfPadding);
         }
 
         // Clear the pressed state if necessary

File: src/com/android/launcher3/shortcuts/ShortcutsItemView.java
Patch:
@@ -109,7 +109,7 @@ public boolean onLongClick(View v) {
         mIconShift.x = mIconLastTouchPos.x - sv.getIconCenter().x;
         mIconShift.y = mIconLastTouchPos.y - mLauncher.getDeviceProfile().iconSizePx;
 
-        DragView dv = mLauncher.getWorkspace().beginDragShared(sv.getBubbleText(),
+        DragView dv = mLauncher.getWorkspace().beginDragShared(sv.getIconView(),
                 (PopupContainerWithArrow) getParent(), sv.getFinalInfo(),
                 new ShortcutDragPreviewProvider(sv.getIconView(), mIconShift), new DragOptions());
         dv.animateShift(-mIconShift.x, -mIconShift.y);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -75,6 +75,7 @@
 import com.android.launcher3.graphics.DragPreviewProvider;
 import com.android.launcher3.graphics.PreloadIconDrawable;
 import com.android.launcher3.popup.PopupContainerWithArrow;
+import com.android.launcher3.shortcuts.ShortcutDragPreviewProvider;
 import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;
 import com.android.launcher3.util.ItemInfoMatcher;
@@ -2262,6 +2263,8 @@ public DragView beginDragShared(View child, DragSource source, ItemInfo dragObje
             int previewSize = grid.folderIconSizePx;
             dragVisualizeOffset = new Point(- halfPadding, halfPadding - child.getPaddingTop());
             dragRect = new Rect(0, child.getPaddingTop(), child.getWidth(), previewSize);
+        } else if (previewProvider instanceof ShortcutDragPreviewProvider) {
+            dragVisualizeOffset = new Point(- halfPadding, halfPadding);
         }
 
         // Clear the pressed state if necessary

File: src/com/android/launcher3/shortcuts/ShortcutsItemView.java
Patch:
@@ -109,7 +109,7 @@ public boolean onLongClick(View v) {
         mIconShift.x = mIconLastTouchPos.x - sv.getIconCenter().x;
         mIconShift.y = mIconLastTouchPos.y - mLauncher.getDeviceProfile().iconSizePx;
 
-        DragView dv = mLauncher.getWorkspace().beginDragShared(sv.getBubbleText(),
+        DragView dv = mLauncher.getWorkspace().beginDragShared(sv.getIconView(),
                 (PopupContainerWithArrow) getParent(), sv.getFinalInfo(),
                 new ShortcutDragPreviewProvider(sv.getIconView(), mIconShift), new DragOptions());
         dv.animateShift(-mIconShift.x, -mIconShift.y);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -75,6 +75,7 @@
 import com.android.launcher3.graphics.DragPreviewProvider;
 import com.android.launcher3.graphics.PreloadIconDrawable;
 import com.android.launcher3.popup.PopupContainerWithArrow;
+import com.android.launcher3.shortcuts.ShortcutDragPreviewProvider;
 import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;
 import com.android.launcher3.util.ItemInfoMatcher;
@@ -2257,6 +2258,8 @@ public DragView beginDragShared(View child, DragSource source, ItemInfo dragObje
             int previewSize = grid.folderIconSizePx;
             dragVisualizeOffset = new Point(- halfPadding, halfPadding - child.getPaddingTop());
             dragRect = new Rect(0, child.getPaddingTop(), child.getWidth(), previewSize);
+        } else if (previewProvider instanceof ShortcutDragPreviewProvider) {
+            dragVisualizeOffset = new Point(- halfPadding, halfPadding);
         }
 
         // Clear the pressed state if necessary

File: src/com/android/launcher3/shortcuts/ShortcutsItemView.java
Patch:
@@ -109,7 +109,7 @@ public boolean onLongClick(View v) {
         mIconShift.x = mIconLastTouchPos.x - sv.getIconCenter().x;
         mIconShift.y = mIconLastTouchPos.y - mLauncher.getDeviceProfile().iconSizePx;
 
-        DragView dv = mLauncher.getWorkspace().beginDragShared(sv.getBubbleText(),
+        DragView dv = mLauncher.getWorkspace().beginDragShared(sv.getIconView(),
                 (PopupContainerWithArrow) getParent(), sv.getFinalInfo(),
                 new ShortcutDragPreviewProvider(sv.getIconView(), mIconShift), new DragOptions());
         dv.animateShift(-mIconShift.x, -mIconShift.y);

File: src/com/android/launcher3/provider/LauncherDbUtils.java
Patch:
@@ -52,6 +52,7 @@ public static boolean prepareScreenZeroToHostQsb(Context context, SQLiteDatabase
 
             if (screenIds.isEmpty()) {
                 // No update needed
+                t.commit();
                 return true;
             }
             if (screenIds.get(0) != 0) {
@@ -71,6 +72,7 @@ public static boolean prepareScreenZeroToHostQsb(Context context, SQLiteDatabase
             if (DatabaseUtils.queryNumEntries(db, Favorites.TABLE_NAME,
                     "container = -100 and screen = 0 and cellY = 0") == 0) {
                 // First row is empty, no need to migrate.
+                t.commit();
                 return true;
             }
 

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -97,6 +97,4 @@ boolean startSearch(
     int getSearchBarHeight();
 
     boolean shouldShowDiscoveryBounce();
-
-    void onExtractedColorsChanged();
 }

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -42,7 +42,7 @@
  * closer to top or closer to the page indicator.
  */
 public class AllAppsTransitionController implements TouchController, VerticalPullDetector.Listener,
-        View.OnLayoutChangeListener {
+        View.OnLayoutChangeListener, ExtractedColors.OnChangeListener {
 
     private static final String TAG = "AllAppsTrans";
     private static final boolean DBG = false;
@@ -107,6 +107,7 @@ public AllAppsTransitionController(Launcher l) {
 
         mEvaluator = new ArgbEvaluator();
         mAllAppsBackgroundColor = Themes.getAttrColor(l, android.R.attr.colorPrimary);
+        mLauncher.getExtractedColors().addOnChangeListener(this);
     }
 
     @Override
@@ -288,6 +289,7 @@ private void updateAllAppsBg(float progress) {
         mScrimView.setProgress(progress);
     }
 
+    @Override
     public void onExtractedColorsChanged() {
         if (FeatureFlags.LAUNCHER3_GRADIENT_ALL_APPS) {
             if (mGradientView != null) {

File: src/com/android/launcher3/testing/LauncherExtension.java
Patch:
@@ -219,8 +219,5 @@ public void onDetachedFromWindow() {
         public boolean shouldShowDiscoveryBounce() {
             return false;
         }
-
-        @Override
-        public void onExtractedColorsChanged() { }
     }
 }

File: src/com/android/launcher3/allapps/search/DefaultAppSearchAlgorithm.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.android.launcher3.allapps;
+package com.android.launcher3.allapps.search;
 
 import android.os.Handler;
 

File: src/com/android/launcher3/allapps/search/HeaderElevationController.java
Patch:
@@ -1,4 +1,4 @@
-package com.android.launcher3.allapps;
+package com.android.launcher3.allapps.search;
 
 import android.content.res.Resources;
 import android.graphics.Outline;

File: tests/src/com/android/launcher3/allapps/search/DefaultAppSearchAlgorithmTest.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.android.launcher3.allapps;
+package com.android.launcher3.allapps.search;
 
 import android.content.ComponentName;
 import android.test.InstrumentationTestCase;

File: src/com/android/launcher3/model/PackageUpdatedTask.java
Patch:
@@ -226,7 +226,9 @@ public void execute(Callbacks callbacks) {
                         if (cn != null && matcher.matches(si, cn)) {
                             AppInfo appInfo = addedOrUpdatedApps.get(cn);
 
-                            if (si.isPromise() && mOp == OP_ADD) {
+                            // For system apps, package manager send OP_UPDATE when an
+                            // app is enabled.
+                            if (si.isPromise() && (mOp == OP_ADD || mOp == OP_UPDATE)) {
                                 if (si.hasStatusFlag(ShortcutInfo.FLAG_AUTOINSTALL_ICON)) {
                                     // Auto install icon
                                     LauncherAppsCompat launcherApps

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -100,7 +100,7 @@ public LauncherAppWidgetHostView(Context context) {
         if (Utilities.isAtLeastO()) {
             try {
                 Method asyncMethod = AppWidgetHostView.class
-                        .getMethod("setAsyncExecutor", Executor.class);
+                        .getMethod("setExecutor", Executor.class);
                 asyncMethod.invoke(this, Utilities.THREAD_POOL_EXECUTOR);
             } catch (Exception e) {
                 Log.e(TAG, "Unable to set async executor", e);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -755,7 +755,6 @@ protected void onDataUpgrade(SQLiteDatabase db, int oldVersion) {
                     }
                 }
                 case 2:
-                    removeGhostWidgets(db);
                 case 3:
                     // data updated
                     return;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1062,7 +1062,8 @@ private void loadWorkspace() {
                                     info = c.loadSimpleShortcut();
 
                                     // Shortcuts are only available on the primary profile
-                                    if (pmHelper.isAppSuspended(targetPkg, c.user)) {
+                                    if (!TextUtils.isEmpty(targetPkg)
+                                            && pmHelper.isAppSuspended(targetPkg, c.user)) {
                                         disabledState |= ShortcutInfo.FLAG_DISABLED_SUSPENDED;
                                     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2555,6 +2555,7 @@ public void onClickSettingsButton(View v) {
         Intent intent = new Intent(Intent.ACTION_APPLICATION_PREFERENCES)
                 .setPackage(getPackageName());
         intent.setSourceBounds(getViewBounds(v));
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         startActivity(intent, getActivityLaunchOptions(v));
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3613,6 +3613,9 @@ private LauncherAppWidgetInfo completeRestoreAppWidget(int appWidgetId, int fina
 
         LauncherAppWidgetInfo info = (LauncherAppWidgetInfo) view.getTag();
         info.restoreStatus = finalRestoreFlag;
+        if (info.restoreStatus == LauncherAppWidgetInfo.RESTORE_COMPLETED) {
+            info.pendingItemInfo = null;
+        }
 
         mWorkspace.reinflateWidgetsIfNecessary();
         getModelWriter().updateItemInDatabase(info);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -124,6 +124,7 @@ public boolean onCreate() {
         // always available in the main process.
         FileLog.setDir(getContext().getApplicationContext().getFilesDir());
         IconShapeOverride.apply(getContext());
+        SessionCommitReceiver.applyDefaultUserPrefs(getContext());
         return true;
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -466,7 +466,9 @@ public View findViewById(int id) {
     @Override
     public void onExtractedColorsChanged() {
         loadExtractedColorsAndColorItems();
-
+        if (mAllAppsController != null) {
+            mAllAppsController.onExtractedColorsChanged();
+        }
         if (mLauncherCallbacks != null) {
             mLauncherCallbacks.onExtractedColorsChanged();
         }

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -492,7 +492,8 @@ public void setInsets(Rect insets) {
             ViewGroup.LayoutParams navBarBgLp = navBarBg.getLayoutParams();
             navBarBgLp.height = insets.bottom;
             navBarBg.setLayoutParams(navBarBgLp);
-            navBarBg.setVisibility(View.VISIBLE);
+            navBarBg.setVisibility(FeatureFlags.LAUNCHER3_GRADIENT_ALL_APPS
+                    ? View.INVISIBLE : View.VISIBLE);
         }
     }
 

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -38,6 +38,8 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_UPDATE_SOFT_INPUT_MODE = true;
     // When enabled the promise icon is visible in all apps while installation an app.
     public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = true;
+    // When enabled uses the AllAppsRadialGradientAndScrimDrawable for all apps
+    public static boolean LAUNCHER3_GRADIENT_ALL_APPS = false;
 
     // Feature flag to enable moving the QSB on the 0th screen of the workspace.
     public static final boolean QSB_ON_FIRST_SCREEN = true;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2668,7 +2668,7 @@ && checkSelfPermission(Manifest.permission.CALL_PHONE) !=
     }
 
     @TargetApi(Build.VERSION_CODES.M)
-    private Bundle getActivityLaunchOptions(View v) {
+    public Bundle getActivityLaunchOptions(View v) {
         if (Utilities.ATLEAST_MARSHMALLOW) {
             int left = 0, top = 0;
             int width = v.getMeasuredWidth(), height = v.getMeasuredHeight();
@@ -2694,7 +2694,7 @@ private Bundle getActivityLaunchOptions(View v) {
         return null;
     }
 
-    private Rect getViewBounds(View v) {
+    public Rect getViewBounds(View v) {
         int[] pos = new int[2];
         v.getLocationOnScreen(pos);
         return new Rect(pos[0], pos[1], pos[0] + v.getWidth(), pos[1] + v.getHeight());

File: src/com/android/launcher3/compat/LauncherAppsCompatVL.java
Patch:
@@ -95,8 +95,9 @@ public ApplicationInfo getApplicationInfo(String packageName, int flags, UserHan
     }
 
     @Override
-    public void showAppDetailsForProfile(ComponentName component, UserHandle user) {
-        mLauncherApps.startAppDetailsActivity(component, user, null, null);
+    public void showAppDetailsForProfile(ComponentName component, UserHandle user,
+            Rect sourceBounds, Bundle opts) {
+        mLauncherApps.startAppDetailsActivity(component, user, sourceBounds, opts);
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3902,6 +3902,7 @@ public void run() {
         // Update AllApps
         if (mAppsView != null) {
             mAppsView.removeApps(appInfos);
+            tryAndUpdatePredictedApps();
         }
     }
 

File: src/com/android/launcher3/popup/SystemShortcut.java
Patch:
@@ -4,6 +4,7 @@
 import android.graphics.drawable.Drawable;
 import android.view.View;
 
+import com.android.launcher3.AbstractFloatingView;
 import com.android.launcher3.InfoDropTarget;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
@@ -60,7 +61,7 @@ public View.OnClickListener getOnClickListener(final Launcher launcher,
             return new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
-                    PopupContainerWithArrow.getOpen(launcher).close(true);
+                    AbstractFloatingView.closeAllOpenViews(launcher);
                     WidgetsBottomSheet widgetsBottomSheet =
                             (WidgetsBottomSheet) launcher.getLayoutInflater().inflate(
                                     R.layout.widgets_bottom_sheet, launcher.getDragLayer(), false);

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -783,6 +783,7 @@ private void closeComplete(boolean wasAnimated) {
         if (mFolderIcon != null) {
             mFolderIcon.setVisibility(View.VISIBLE);
             if (wasAnimated) {
+                mFolderIcon.mBackground.animateBackgroundStroke();
                 mFolderIcon.requestFocus();
             }
         }

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -40,7 +40,7 @@ protected void onFinishInflate() {
         // Get the hover color
         mHoverColor = getResources().getColor(R.color.delete_target_hover_tint);
 
-        setDrawable(R.drawable.ic_remove_launcher);
+        setDrawable(R.drawable.ic_remove_shadow);
     }
 
     @Override

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -180,7 +180,7 @@ public void fillInLogContainerData(View v, ItemInfo info, Target target, Target
 
     public void updateColor(ExtractedColors extractedColors, boolean animate) {
         if (!mHasVerticalHotseat) {
-            int color = extractedColors.getColor(ExtractedColors.HOTSEAT_INDEX, Color.TRANSPARENT);
+            int color = extractedColors.getColor(ExtractedColors.HOTSEAT_INDEX);
             if (mBackgroundColorAnimator != null) {
                 mBackgroundColorAnimator.cancel();
             }

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -107,4 +107,6 @@ boolean startSearch(
     void setLauncherSearchCallback(Object callbacks);
 
     boolean shouldShowDiscoveryBounce();
+
+    void onExtractedColorsChanged();
 }

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -221,7 +221,7 @@ public void setShouldAutoHide(boolean shouldAutoHide) {
      */
     public void updateColor(ExtractedColors extractedColors) {
         int originalLineAlpha = mLinePaint.getAlpha();
-        int color = extractedColors.getColor(ExtractedColors.HOTSEAT_INDEX, Color.TRANSPARENT);
+        int color = extractedColors.getColor(ExtractedColors.HOTSEAT_INDEX);
         if (color != Color.TRANSPARENT) {
             color = ColorUtils.setAlphaComponent(color, 255);
             if (color == Color.BLACK) {

File: src/com/android/launcher3/testing/LauncherExtension.java
Patch:
@@ -230,5 +230,8 @@ public void onDetachedFromWindow() {
         public boolean shouldShowDiscoveryBounce() {
             return false;
         }
+
+        @Override
+        public void onExtractedColorsChanged() { }
     }
 }

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -55,4 +55,6 @@ private FeatureFlags() {}
     public static final boolean ADAPTIVE_ICON_SHADOW = true;
     // When enabled, app discovery will be enabled if service is implemented
     public static final boolean DISCOVERY_ENABLED = false;
+    // When enabled, the qsb will be moved to the hotseat.
+    public static final boolean QSB_IN_HOTSEAT = true;
 }

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -197,8 +197,6 @@ public DeviceProfile(Context context, InvariantDeviceProfile inv,
         hotseatBarBottomPaddingPx = 0;
         hotseatLandGutterPx = res.getDimensionPixelSize(R.dimen.dynamic_grid_hotseat_gutter_width);
 
-        mBadgeRenderer = new BadgeRenderer(context);
-
         // Determine sizes.
         widthPx = width;
         heightPx = height;
@@ -213,6 +211,9 @@ public DeviceProfile(Context context, InvariantDeviceProfile inv,
         // Calculate the remaining vars
         updateAvailableDimensions(dm, res);
         computeAllAppsButtonSize(context);
+
+        // This is done last, after iconSizePx is calculated above.
+        mBadgeRenderer = new BadgeRenderer(context, iconSizePx);
     }
 
     DeviceProfile getMultiWindowProfile(Context context, Point mwSize) {

File: src/com/android/launcher3/graphics/IconPalette.java
Patch:
@@ -173,12 +173,12 @@ private static int findContrastColor(int color, int other, boolean findFg, doubl
     }
 
     private static int getMutedColor(int color) {
-        int alpha = (int) (255 * 0.15f);
-        return ColorUtils.compositeColors(ColorUtils.setAlphaComponent(color, alpha), Color.WHITE);
+        int whiteScrim = ColorUtils.setAlphaComponent(Color.WHITE, (int) (255 * 0.87f));
+        return ColorUtils.compositeColors(whiteScrim, color);
     }
 
     private static int getTextColorForBackground(int backgroundColor) {
-        return getLighterOrDarkerVersionOfColor(backgroundColor, 3f);
+        return getLighterOrDarkerVersionOfColor(backgroundColor, 4.5f);
     }
 
     private static int getLowContrastColor(int color) {

File: src/com/android/launcher3/popup/PopupContainerWithArrow.java
Patch:
@@ -210,8 +210,8 @@ public void populateAndShow(final BubbleTextView originalIcon, final List<String
         animateOpen();
 
         mOriginalIcon = originalIcon;
-
         mLauncher.getDragController().addDragListener(this);
+        mOriginalIcon.forceHideBadge(true);
 
         // Load the shortcuts on a background thread and update the container as it animates.
         final Looper workerLooper = LauncherModel.getWorkerLooper();
@@ -799,6 +799,7 @@ public void onAnimationEnd(Animator animation) {
         });
         mOpenCloseAnimator = shortcutAnims;
         shortcutAnims.start();
+        mOriginalIcon.forceHideBadge(false);
     }
 
     /**
@@ -814,6 +815,7 @@ protected void closeComplete() {
         boolean isInHotseat = ((ItemInfo) mOriginalIcon.getTag()).container
                 == LauncherSettings.Favorites.CONTAINER_HOTSEAT;
         mOriginalIcon.setTextVisibility(!isInHotseat);
+        mOriginalIcon.forceHideBadge(false);
         mLauncher.getDragController().removeDragListener(this);
         mLauncher.getDragLayer().removeView(this);
     }

File: src/com/android/launcher3/popup/SystemShortcut.java
Patch:
@@ -43,7 +43,6 @@ public String getLabel(Context context) {
     public abstract View.OnClickListener getOnClickListener(final Launcher launcher,
             final ItemInfo itemInfo);
 
-
     public static class Widgets extends SystemShortcut {
 
         public Widgets() {

File: src/com/android/launcher3/popup/SystemShortcut.java
Patch:
@@ -31,7 +31,7 @@ public SystemShortcut(int iconResId, int labelResId) {
     }
 
     public Drawable getIcon(Context context, int colorAttr) {
-        Drawable icon = context.getResources().getDrawable(mIconResId);
+        Drawable icon = context.getResources().getDrawable(mIconResId, context.getTheme()).mutate();
         icon.setTint(Themes.getAttrColor(context, colorAttr));
         return icon;
     }

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -767,7 +767,7 @@ public void scheduleNext() {
     }
 
     private static final class IconDB extends SQLiteCacheHelper {
-        private final static int DB_VERSION = 11;
+        private final static int DB_VERSION = 12;
 
         private final static int RELEASE_VERSION = DB_VERSION +
                 (FeatureFlags.LAUNCHER3_DISABLE_ICON_NORMALIZATION ? 0 : 1);

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -45,8 +45,8 @@ private FeatureFlags() {}
     public static final boolean LIGHT_STATUS_BAR = false;
     // When enabled icons are badged with the number of notifications associated with that app.
     public static final boolean BADGE_ICONS = true;
-    // When enabled, icons not supporting {@link MaskableIconDrawable} will be wrapped in this class.
-    public static final boolean LEGACY_ICON_TREATMENT = false;
+    // When enabled, icons not supporting {@link AdaptiveIconDrawable} will be wrapped in this class.
+    public static final boolean LEGACY_ICON_TREATMENT = true;
     // When enabled, adaptive icons would have shadows baked when being stored to icon cache.
     public static final boolean ADAPTIVE_ICON_SHADOW = true;
     // When enabled, app discovery will be enabled if service is implemented

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -299,6 +299,8 @@ public static final class Settings {
         public static final String EXTRA_EXTRACTED_COLORS = "extra_extractedColors";
         public static final String EXTRA_WALLPAPER_ID = "extra_wallpaperId";
 
+        public static final String METHOD_REMOVE_GHOST_WIDGETS = "remove_ghost_widgets";
+
         public static final String EXTRA_VALUE = "value";
 
         public static Bundle call(ContentResolver cr, String method) {

File: src/com/android/launcher3/AbstractFloatingView.java
Patch:
@@ -37,13 +37,13 @@ public abstract class AbstractFloatingView extends LinearLayout {
     @IntDef(flag = true, value = {
             TYPE_FOLDER,
             TYPE_POPUP_CONTAINER_WITH_ARROW,
-            TYPE_WIDGETS_AND_MORE
+            TYPE_WIDGETS_BOTTOM_SHEET
     })
     @Retention(RetentionPolicy.SOURCE)
     public @interface FloatingViewType {}
     public static final int TYPE_FOLDER = 1 << 0;
     public static final int TYPE_POPUP_CONTAINER_WITH_ARROW = 1 << 1;
-    public static final int TYPE_WIDGETS_AND_MORE = 1 << 2;
+    public static final int TYPE_WIDGETS_BOTTOM_SHEET = 1 << 2;
 
     protected boolean mIsOpen;
 
@@ -139,7 +139,7 @@ public static void closeAllOpenViews(Launcher launcher) {
 
     public static AbstractFloatingView getTopOpenView(Launcher launcher) {
         return getOpenView(launcher, TYPE_FOLDER | TYPE_POPUP_CONTAINER_WITH_ARROW
-                | TYPE_WIDGETS_AND_MORE);
+                | TYPE_WIDGETS_BOTTOM_SHEET);
     }
 
     public abstract int getLogContainerType();

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -767,7 +767,7 @@ public void scheduleNext() {
     }
 
     private static final class IconDB extends SQLiteCacheHelper {
-        private final static int DB_VERSION = 11;
+        private final static int DB_VERSION = 12;
 
         private final static int RELEASE_VERSION = DB_VERSION +
                 (FeatureFlags.LAUNCHER3_DISABLE_ICON_NORMALIZATION ? 0 : 1);

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -45,8 +45,8 @@ private FeatureFlags() {}
     public static final boolean LIGHT_STATUS_BAR = false;
     // When enabled icons are badged with the number of notifications associated with that app.
     public static final boolean BADGE_ICONS = true;
-    // When enabled, icons not supporting {@link MaskableIconDrawable} will be wrapped in this class.
-    public static final boolean LEGACY_ICON_TREATMENT = false;
+    // When enabled, icons not supporting {@link AdaptiveIconDrawable} will be wrapped in this class.
+    public static final boolean LEGACY_ICON_TREATMENT = true;
     // When enabled, adaptive icons would have shadows baked when being stored to icon cache.
     public static final boolean ADAPTIVE_ICON_SHADOW = true;
     // When enabled, app discovery will be enabled if service is implemented

File: src/com/android/launcher3/popup/PopupContainerWithArrow.java
Patch:
@@ -193,7 +193,7 @@ public void populateAndShow(final BubbleTextView originalIcon, final List<String
                 : mShortcutsItemView.getDeepShortcutViews(reverseOrder);
         List<View> systemShortcutViews = mShortcutsItemView == null
                 ? Collections.EMPTY_LIST
-                : mShortcutsItemView.getSystemShortcutViews(reverseOrder || true);
+                : mShortcutsItemView.getSystemShortcutViews(reverseOrder);
         if (mNotificationItemView != null) {
             BadgeInfo badgeInfo = mLauncher.getPopupDataProvider()
                     .getBadgeInfoForItem(originalItemInfo);

File: src/com/android/launcher3/shortcuts/ShortcutsItemView.java
Patch:
@@ -151,7 +151,9 @@ public List<DeepShortcutView> getDeepShortcutViews(boolean reverseOrder) {
     }
 
     public List<View> getSystemShortcutViews(boolean reverseOrder) {
-        if (reverseOrder) {
+        // Always reverse system shortcut icons (in the header)
+        // so they are in priority order from right to left.
+        if (reverseOrder || mSystemShortcutIcons != null) {
             Collections.reverse(mSystemShortcutViews);
         }
         return mSystemShortcutViews;

File: src/com/android/launcher3/popup/SystemShortcut.java
Patch:
@@ -47,7 +47,7 @@ public abstract View.OnClickListener getOnClickListener(final Launcher launcher,
     public static class Widgets extends SystemShortcut {
 
         public Widgets() {
-            super(R.drawable.ic_widget, R.string.widgets_and_more);
+            super(R.drawable.ic_widget, R.string.widget_button_text);
         }
 
         @Override

File: src/com/android/launcher3/widget/WidgetsAndMore.java
Patch:
@@ -53,8 +53,6 @@
 import java.util.Iterator;
 import java.util.List;
 
-import static android.R.attr.bottom;
-
 /**
  * Bottom sheet for the "Widgets & more" long-press option.
  */

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -167,7 +167,7 @@ protected void drawBadgeIfNecessary(Canvas canvas) {
         }
     }
 
-    protected IconPalette getIconPalette() {
+    public IconPalette getIconPalette() {
         if (mIconPalette == null) {
             mIconPalette = IconPalette.fromDominantColor(Utilities
                     .findDominantColorByHue(mBitmap, 20));

File: src/com/android/launcher3/shortcuts/DeepShortcutTextView.java
Patch:
@@ -47,7 +47,7 @@ public DeepShortcutTextView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
 
         Resources resources = getResources();
-        mDragHandleWidth = resources.getDimensionPixelSize(R.dimen.deep_shortcut_padding_end)
+        mDragHandleWidth = resources.getDimensionPixelSize(R.dimen.popup_padding_end)
                 + resources.getDimensionPixelSize(R.dimen.deep_shortcut_drag_handle_size)
                 + resources.getDimensionPixelSize(R.dimen.deep_shortcut_drawable_padding) / 2;
     }

File: src/com/android/launcher3/graphics/IconShapeOverride.java
Patch:
@@ -38,7 +38,7 @@
 import com.android.launcher3.LauncherModel;
 import com.android.launcher3.R;
 import com.android.launcher3.Utilities;
-import com.android.launcher3.util.LooperExecuter;
+import com.android.launcher3.util.LooperExecutor;
 
 import java.lang.reflect.Field;
 
@@ -169,7 +169,7 @@ public boolean onPreferenceChange(Preference preference, Object o) {
                         mContext.getString(R.string.icon_shape_override_progress),
                         true /* indeterminate */,
                         false /* cancelable */);
-                new LooperExecuter(LauncherModel.getWorkerLooper()).execute(
+                new LooperExecutor(LauncherModel.getWorkerLooper()).execute(
                         new OverrideApplyHandler(mContext, newValue));
             }
             return false;

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -33,6 +33,7 @@
 import com.android.launcher3.graphics.LauncherIcons;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
 import com.android.launcher3.util.LooperExecuter;
+import com.android.launcher3.util.PackageUserKey;
 
 import java.util.List;
 
@@ -83,7 +84,8 @@ public abstract ApplicationInfo getApplicationInfo(
     public abstract boolean isPackageEnabledForProfile(String packageName, UserHandle user);
     public abstract boolean isActivityEnabledForProfile(ComponentName component,
             UserHandle user);
-    public abstract List<ShortcutConfigActivityInfo> getCustomShortcutActivityList();
+    public abstract List<ShortcutConfigActivityInfo> getCustomShortcutActivityList(
+            @Nullable PackageUserKey packageUser);
 
     /**
      * request.accept() will initiate the following flow:

File: src/com/android/launcher3/popup/PopupPopulator.java
Patch:
@@ -38,6 +38,7 @@
 import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.shortcuts.DeepShortcutView;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
+import com.android.launcher3.util.PackageUserKey;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -219,7 +220,8 @@ public void run() {
                 uiHandler.post(new Runnable() {
                     @Override
                     public void run() {
-                        launcher.notifyWidgetProvidersChanged(true /* force */);
+                        launcher.refreshAndBindWidgetsForPackageUser(
+                                PackageUserKey.fromItemInfo(originalInfo));
                     }
                 });
             }

File: src/com/android/launcher3/popup/PopupDataProvider.java
Patch:
@@ -50,8 +50,8 @@ public class PopupDataProvider implements NotificationListener.NotificationsChan
 
     /** Note that these are in order of priority. */
     public static final SystemShortcut[] SYSTEM_SHORTCUTS = new SystemShortcut[] {
-            new SystemShortcut.Widgets(),
             new SystemShortcut.AppInfo(),
+            new SystemShortcut.Widgets(),
     };
 
     private final Launcher mLauncher;

File: src/com/android/launcher3/popup/PopupDataProvider.java
Patch:
@@ -50,8 +50,8 @@ public class PopupDataProvider implements NotificationListener.NotificationsChan
 
     /** Note that these are in order of priority. */
     public static final SystemShortcut[] SYSTEM_SHORTCUTS = new SystemShortcut[] {
-            new SystemShortcut.Widgets(),
             new SystemShortcut.AppInfo(),
+            new SystemShortcut.Widgets(),
     };
 
     private final Launcher mLauncher;

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -762,7 +762,7 @@ public void scheduleNext() {
     }
 
     private static final class IconDB extends SQLiteCacheHelper {
-        private final static int DB_VERSION = 10;
+        private final static int DB_VERSION = 11;
 
         private final static int RELEASE_VERSION = DB_VERSION +
                 (FeatureFlags.LAUNCHER3_DISABLE_ICON_NORMALIZATION ? 0 : 1);

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -32,7 +32,7 @@
 import com.android.launcher3.Utilities;
 import com.android.launcher3.graphics.LauncherIcons;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
-import com.android.launcher3.util.LooperExecuter;
+import com.android.launcher3.util.LooperExecutor;
 
 import java.util.List;
 
@@ -113,7 +113,7 @@ public static ShortcutInfo createShortcutInfoFromPinItemRequest(
                 }
             } else {
                 // Block the worker thread until the accept() is called.
-                new LooperExecuter(LauncherModel.getWorkerLooper()).execute(new Runnable() {
+                new LooperExecutor(LauncherModel.getWorkerLooper()).execute(new Runnable() {
                     @Override
                     public void run() {
                         try {

File: src/com/android/launcher3/AbstractFloatingView.java
Patch:
@@ -92,6 +92,9 @@ public final boolean isOpen() {
         return mIsOpen;
     }
 
+    protected void onWidgetsBound() {
+    }
+
     protected abstract boolean isOfType(@FloatingViewType int type);
 
     protected static <T extends AbstractFloatingView> T getOpenView(

File: src/com/android/launcher3/popup/PopupItemView.java
Patch:
@@ -156,7 +156,8 @@ public void onAnimationEnd(Animator animation) {
      * Returns the position of the center of the icon relative to the container.
      */
     public Point getIconCenter() {
-        sTempPoint.y = sTempPoint.x = getMeasuredHeight() / 2;
+        sTempPoint.y = getMeasuredHeight() / 2;
+        sTempPoint.x = getResources().getDimensionPixelSize(R.dimen.bg_popup_item_height) / 2;
         if (Utilities.isRtl(getResources())) {
             sTempPoint.x = getMeasuredWidth() - sTempPoint.x;
         }

File: src/com/android/launcher3/util/PackageUserKey.java
Patch:
@@ -11,8 +11,8 @@
 /** Creates a hash key based on package name and user. */
 public class PackageUserKey {
 
-    private String mPackageName;
-    private UserHandle mUser;
+    public String mPackageName;
+    public UserHandle mUser;
     private int mHashCode;
 
     public static PackageUserKey fromItemInfo(ItemInfo info) {

File: tests/src/com/android/launcher3/ui/ShortcutsLaunchTest.java
Patch:
@@ -60,7 +60,7 @@ private void performTest() throws Exception {
         // Verify that launching a shortcut opens a page with the same text
         assertTrue(deepShortcutsContainer.getChildCount() > 0);
         UiObject2 shortcut = deepShortcutsContainer.getChildren().get(0)
-                .findObject(getSelectorForId(R.id.deep_shortcut));
+                .findObject(getSelectorForId(R.id.bubble_text));
         shortcut.click();
         assertTrue(mDevice.wait(Until.hasObject(By.pkg(
                 mSettingsApp.getComponentName().getPackageName())

File: tests/src/com/android/launcher3/ui/ShortcutsToHomeTest.java
Patch:
@@ -61,7 +61,7 @@ private void performTest() throws Throwable {
         // Drag the first shortcut to the home screen.
         assertTrue(deepShortcutsContainer.getChildCount() > 0);
         UiObject2 shortcut = deepShortcutsContainer.getChildren().get(0)
-                .findObject(getSelectorForId(R.id.deep_shortcut));
+                .findObject(getSelectorForId(R.id.bubble_text));
         String shortcutName = shortcut.getText();
         dragToWorkspace(shortcut, false);
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -89,7 +89,6 @@
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.PinItemRequestCompat;
-import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.dragndrop.DragController;

File: src/com/android/launcher3/anim/RoundedRectRevealOutlineProvider.java
Patch:
@@ -42,7 +42,7 @@ public RoundedRectRevealOutlineProvider(float startRadius, float endRadius, Rect
 
     @Override
     public boolean shouldRemoveElevationDuringAnimation() {
-        return false;
+        return true;
     }
 
     @Override

File: src/com/android/launcher3/anim/RoundedRectRevealOutlineProvider.java
Patch:
@@ -42,7 +42,7 @@ public RoundedRectRevealOutlineProvider(float startRadius, float endRadius, Rect
 
     @Override
     public boolean shouldRemoveElevationDuringAnimation() {
-        return false;
+        return true;
     }
 
     @Override

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -393,7 +393,7 @@ public long parseAndAdd(XmlResourceParser parser) {
                 return -1;
             }
 
-            mValues.put(Favorites.RESTORED, ShortcutInfo.FLAG_AUTOINTALL_ICON);
+            mValues.put(Favorites.RESTORED, ShortcutInfo.FLAG_AUTOINSTALL_ICON);
             final Intent intent = new Intent(Intent.ACTION_MAIN, null)
                 .addCategory(Intent.CATEGORY_LAUNCHER)
                 .setComponent(new ComponentName(packageName, className))

File: src/com/android/launcher3/InsettableFrameLayout.java
Patch:
@@ -9,9 +9,6 @@
 import android.view.ViewGroup;
 import android.widget.FrameLayout;
 
-import com.android.launcher3.allapps.AllAppsContainerView;
-import com.android.launcher3.config.FeatureFlags;
-
 public class InsettableFrameLayout extends FrameLayout implements
     ViewGroup.OnHierarchyChangeListener, Insettable {
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -90,7 +90,6 @@
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.PinItemRequestCompat;
-import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dragndrop.DragController;
 import com.android.launcher3.dragndrop.DragLayer;

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -23,9 +23,7 @@
 import android.animation.ValueAnimator;
 import android.util.Property;
 import android.view.View;
-import android.view.ViewGroup;
 import android.view.ViewTreeObserver;
-import android.widget.ViewAnimator;
 
 import java.util.HashSet;
 import java.util.WeakHashMap;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -25,7 +25,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.content.pm.ApplicationInfo;
 import android.content.pm.LauncherActivityInfo;
 import android.content.pm.PackageInstaller;
 import android.net.Uri;
@@ -930,7 +929,7 @@ private void loadWorkspace() {
                                         // no special handling necessary for this item
                                         c.markRestored();
                                     } else {
-                                        if (c.hasRestoreFlag(ShortcutInfo.FLAG_AUTOINTALL_ICON)) {
+                                        if (c.hasRestoreFlag(ShortcutInfo.FLAG_AUTOINSTALL_ICON)) {
                                             // We allow auto install apps to have their intent
                                             // updated after an install.
                                             intent = pmHelper.getAppLaunchIntent(targetPkg, c.user);

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -31,8 +31,8 @@
 import com.android.launcher3.allapps.AllAppsContainerView;
 import com.android.launcher3.allapps.AllAppsTransitionController;
 import com.android.launcher3.anim.AnimationLayerSet;
-import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.anim.CircleRevealOutlineProvider;
+import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.util.Thunk;
 import com.android.launcher3.widget.WidgetsContainerView;
 

File: src/com/android/launcher3/PromiseAppInfo.java
Patch:
@@ -40,7 +40,7 @@ public ShortcutInfo makeShortcut() {
         ShortcutInfo shortcut = new ShortcutInfo(this);
         shortcut.setInstallProgress(level);
         // We need to update the component name when the apk is installed
-        shortcut.status |= ShortcutInfo.FLAG_AUTOINTALL_ICON;
+        shortcut.status |= ShortcutInfo.FLAG_AUTOINSTALL_ICON;
         // Since the user is manually placing it on homescreen, it should not be auto-removed later
         shortcut.status |= ShortcutInfo.FLAG_RESTORE_STARTED;
         return shortcut;

File: src/com/android/launcher3/SessionCommitReceiver.java
Patch:
@@ -29,7 +29,6 @@
 import android.util.Log;
 
 import com.android.launcher3.compat.LauncherAppsCompat;
-import com.android.launcher3.compat.UserManagerCompat;
 
 import java.util.List;
 

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -45,10 +45,10 @@ public class ShortcutInfo extends ItemInfoWithIcon {
      * be present along with {@link #FLAG_RESTORED_ICON}, and is set during default layout
      * parsing.
      */
-    public static final int FLAG_AUTOINTALL_ICON = 2; //0B10;
+    public static final int FLAG_AUTOINSTALL_ICON = 2; //0B10;
 
     /**
-     * The icon is being installed. If {@link #FLAG_RESTORED_ICON} or {@link #FLAG_AUTOINTALL_ICON}
+     * The icon is being installed. If {@link #FLAG_RESTORED_ICON} or {@link #FLAG_AUTOINSTALL_ICON}
      * is set, then the icon is either being installed or is in a broken state.
      */
     public static final int FLAG_INSTALL_SESSION_ACTIVE = 4; // 0B100;
@@ -185,7 +185,7 @@ public boolean hasStatusFlag(int flag) {
 
 
     public final boolean isPromise() {
-        return hasStatusFlag(FLAG_RESTORED_ICON | FLAG_AUTOINTALL_ICON);
+        return hasStatusFlag(FLAG_RESTORED_ICON | FLAG_AUTOINSTALL_ICON);
     }
 
     public int getInstallProgress() {

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -61,7 +61,6 @@
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Locale;
-import java.util.Set;
 import java.util.concurrent.Executor;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.ThreadPoolExecutor;

File: src/com/android/launcher3/accessibility/FolderAccessibilityHelper.java
Patch:
@@ -17,8 +17,8 @@
 package com.android.launcher3.accessibility;
 
 import com.android.launcher3.CellLayout;
-import com.android.launcher3.folder.FolderPagedView;
 import com.android.launcher3.R;
+import com.android.launcher3.folder.FolderPagedView;
 
 /**
  * Implementation of {@link DragAndDropAccessibilityDelegate} to support DnD in a folder.

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -18,7 +18,6 @@
 import com.android.launcher3.AppWidgetResizeFrame;
 import com.android.launcher3.BubbleTextView;
 import com.android.launcher3.CellLayout;
-import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.DeleteDropTarget;
 import com.android.launcher3.DropTarget.DragObject;
 import com.android.launcher3.FolderInfo;
@@ -27,7 +26,6 @@
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppWidgetHostView;
 import com.android.launcher3.LauncherAppWidgetInfo;
-import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.PendingAddItemInfo;
 import com.android.launcher3.R;
@@ -37,6 +35,7 @@
 import com.android.launcher3.dragndrop.DragController.DragListener;
 import com.android.launcher3.dragndrop.DragOptions;
 import com.android.launcher3.folder.Folder;
+import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;

File: src/com/android/launcher3/accessibility/ShortcutMenuAccessibilityDelegate.java
Patch:
@@ -22,7 +22,6 @@
 import com.android.launcher3.AbstractFloatingView;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
-import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.R;
 import com.android.launcher3.ShortcutInfo;

File: src/com/android/launcher3/accessibility/WorkspaceAccessibilityHelper.java
Patch:
@@ -27,9 +27,9 @@
 import com.android.launcher3.FolderInfo;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
-import com.android.launcher3.accessibility.LauncherAccessibilityDelegate.DragType;
 import com.android.launcher3.R;
 import com.android.launcher3.ShortcutInfo;
+import com.android.launcher3.accessibility.LauncherAccessibilityDelegate.DragType;
 import com.android.launcher3.dragndrop.DragLayer;
 
 /**

File: src/com/android/launcher3/allapps/AllAppsGridAdapter.java
Patch:
@@ -33,12 +33,12 @@
 import android.view.accessibility.AccessibilityEvent;
 import android.widget.TextView;
 
-import com.android.launcher3.discovery.AppDiscoveryAppInfo;
 import com.android.launcher3.AppInfo;
 import com.android.launcher3.BubbleTextView;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.R;
 import com.android.launcher3.allapps.AlphabeticalAppsList.AdapterItem;
+import com.android.launcher3.discovery.AppDiscoveryAppInfo;
 import com.android.launcher3.discovery.AppDiscoveryItemView;
 
 import java.util.List;

File: src/com/android/launcher3/allapps/AllAppsRecyclerViewContainerView.java
Patch:
@@ -20,7 +20,6 @@
 import android.util.AttributeSet;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.FrameLayout;
 import android.widget.RelativeLayout;
 
 import com.android.launcher3.BubbleTextView;

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -22,7 +22,6 @@
 import android.appwidget.AppWidgetProviderInfo;
 import android.content.ComponentName;
 import android.content.Context;
-import android.graphics.Bitmap;
 import android.os.Bundle;
 import android.os.UserHandle;
 

File: src/com/android/launcher3/compat/LauncherAppsCompatVO.java
Patch:
@@ -25,10 +25,11 @@
 import android.os.UserHandle;
 import android.util.Log;
 
+import com.android.launcher3.compat.ShortcutConfigActivityInfo.ShortcutConfigActivityInfoVO;
+
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
-import com.android.launcher3.compat.ShortcutConfigActivityInfo.*;
 
 public class LauncherAppsCompatVO extends LauncherAppsCompatVL {
 

File: src/com/android/launcher3/discovery/AppDiscoveryItem.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.android.launcher3.discovery;
 
-import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
 

File: src/com/android/launcher3/dragndrop/AddItemActivity.java
Patch:
@@ -31,7 +31,9 @@
 import android.os.Bundle;
 import android.view.MotionEvent;
 import android.view.View;
-import android.view.View.*;
+import android.view.View.DragShadowBuilder;
+import android.view.View.OnLongClickListener;
+import android.view.View.OnTouchListener;
 
 import com.android.launcher3.BaseActivity;
 import com.android.launcher3.InstallShortcutReceiver;

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -58,7 +58,6 @@
 import com.android.launcher3.folder.FolderIcon;
 import com.android.launcher3.keyboard.ViewGroupFocusHelper;
 import com.android.launcher3.logging.LoggerUtils;
-import com.android.launcher3.userevent.nano.LauncherLogProto;
 import com.android.launcher3.util.Thunk;
 import com.android.launcher3.util.TouchController;
 

File: src/com/android/launcher3/dragndrop/DragOptions.java
Patch:
@@ -17,8 +17,6 @@
 package com.android.launcher3.dragndrop;
 
 import android.graphics.Point;
-import android.support.annotation.CallSuper;
-import android.view.View;
 
 import com.android.launcher3.DropTarget;
 

File: src/com/android/launcher3/dragndrop/LivePreviewWidgetCell.java
Patch:
@@ -4,7 +4,6 @@
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
 import android.util.AttributeSet;
-import android.util.Log;
 import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.RemoteViews;

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -25,7 +25,6 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.Rect;
-import android.support.v4.os.BuildCompat;
 import android.text.InputType;
 import android.text.Selection;
 import android.util.AttributeSet;
@@ -69,6 +68,7 @@
 import com.android.launcher3.Workspace.ItemOperator;
 import com.android.launcher3.accessibility.AccessibleDragListenerAdapter;
 import com.android.launcher3.anim.AnimationLayerSet;
+import com.android.launcher3.anim.CircleRevealOutlineProvider;
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dragndrop.DragController;
 import com.android.launcher3.dragndrop.DragController.DragListener;
@@ -77,7 +77,6 @@
 import com.android.launcher3.pageindicators.PageIndicatorDots;
 import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;
-import com.android.launcher3.anim.CircleRevealOutlineProvider;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;

File: src/com/android/launcher3/folder/PreviewImageView.java
Patch:
@@ -22,7 +22,6 @@
 import android.graphics.PorterDuff;
 import android.graphics.Rect;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.ImageView;
 
 import com.android.launcher3.Launcher;

File: src/com/android/launcher3/graphics/IconNormalizer.java
Patch:
@@ -27,8 +27,8 @@
 import android.graphics.PorterDuffXfermode;
 import android.graphics.Rect;
 import android.graphics.RectF;
-import android.graphics.drawable.Drawable;
 import android.graphics.drawable.AdaptiveIconDrawable;
+import android.graphics.drawable.Drawable;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Log;

File: src/com/android/launcher3/keyboard/CustomActionsPopup.java
Patch:
@@ -24,10 +24,10 @@
 import android.widget.PopupMenu;
 import android.widget.PopupMenu.OnMenuItemClickListener;
 
-import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.accessibility.LauncherAccessibilityDelegate;
+import com.android.launcher3.popup.PopupContainerWithArrow;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: src/com/android/launcher3/logging/LoggerUtils.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.android.launcher3.logging;
 
-import android.text.TextUtils;
 import android.util.ArrayMap;
 import android.util.SparseArray;
 import android.view.View;

File: src/com/android/launcher3/model/AddWorkspaceItemsTask.java
Patch:
@@ -179,7 +179,7 @@ protected boolean shortcutExists(BgDataModel dataModel, Intent intent, UserHandl
                         // checking for existing promise icon with same package name
                         if (isLauncherAppTarget
                                 && info.isPromise()
-                                && info.hasStatusFlag(ShortcutInfo.FLAG_AUTOINTALL_ICON)
+                                && info.hasStatusFlag(ShortcutInfo.FLAG_AUTOINSTALL_ICON)
                                 && info.getTargetComponent() != null
                                 && compPkgName != null
                                 && compPkgName.equals(info.getTargetComponent().getPackageName())) {

File: src/com/android/launcher3/model/BgDataModel.java
Patch:
@@ -29,12 +29,12 @@
 import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.logging.DumpTargetWrapper;
-import com.android.launcher3.shortcuts.DeepShortcutManager;
-import com.android.launcher3.shortcuts.ShortcutInfoCompat;
-import com.android.launcher3.shortcuts.ShortcutKey;
 import com.android.launcher3.model.nano.LauncherDumpProto;
 import com.android.launcher3.model.nano.LauncherDumpProto.ContainerType;
 import com.android.launcher3.model.nano.LauncherDumpProto.DumpTarget;
+import com.android.launcher3.shortcuts.DeepShortcutManager;
+import com.android.launcher3.shortcuts.ShortcutInfoCompat;
+import com.android.launcher3.shortcuts.ShortcutKey;
 import com.android.launcher3.util.ComponentKey;
 import com.android.launcher3.util.LongArrayMap;
 import com.android.launcher3.util.MultiHashMap;

File: src/com/android/launcher3/model/CacheDataUpdatedTask.java
Patch:
@@ -26,7 +26,6 @@
 import com.android.launcher3.LauncherModel.CallbackTask;
 import com.android.launcher3.LauncherModel.Callbacks;
 import com.android.launcher3.LauncherSettings;
-import com.android.launcher3.LauncherSettings.Favorites;
 import com.android.launcher3.ShortcutInfo;
 
 import java.util.ArrayList;

File: src/com/android/launcher3/model/LoaderCursor.java
Patch:
@@ -219,7 +219,7 @@ public ShortcutInfo getRestoredItemInfo(Intent intent) {
             if (!TextUtils.isEmpty(title)) {
                 info.title = Utilities.trim(title);
             }
-        } else if  (hasRestoreFlag(ShortcutInfo.FLAG_AUTOINTALL_ICON)) {
+        } else if  (hasRestoreFlag(ShortcutInfo.FLAG_AUTOINSTALL_ICON)) {
             if (TextUtils.isEmpty(info.title)) {
                 info.title = getTitle();
             }

File: src/com/android/launcher3/model/PackageUpdatedTask.java
Patch:
@@ -225,7 +225,7 @@ public void execute(Callbacks callbacks) {
                             AppInfo appInfo = addedOrUpdatedApps.get(cn);
 
                             if (si.isPromise() && mOp == OP_ADD) {
-                                if (si.hasStatusFlag(ShortcutInfo.FLAG_AUTOINTALL_ICON)) {
+                                if (si.hasStatusFlag(ShortcutInfo.FLAG_AUTOINSTALL_ICON)) {
                                     // Auto install icon
                                     LauncherAppsCompat launcherApps
                                             = LauncherAppsCompat.getInstance(context);

File: src/com/android/launcher3/model/SdCardAvailableReceiver.java
Patch:
@@ -19,7 +19,6 @@
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.content.pm.PackageManager;
 import android.os.UserHandle;
 
 import com.android.launcher3.LauncherModel;

File: src/com/android/launcher3/model/ShortcutsChangedTask.java
Patch:
@@ -21,7 +21,6 @@
 import com.android.launcher3.AllAppsList;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.LauncherAppState;
-import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.graphics.LauncherIcons;

File: src/com/android/launcher3/model/UserLockStateChangedTask.java
Patch:
@@ -21,7 +21,6 @@
 import com.android.launcher3.AllAppsList;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.LauncherAppState;
-import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.compat.UserManagerCompat;

File: src/com/android/launcher3/pageindicators/CaretDrawable.java
Patch:
@@ -22,12 +22,11 @@
 import android.graphics.Paint;
 import android.graphics.Path;
 import android.graphics.PixelFormat;
+import android.graphics.drawable.Drawable;
 
 import com.android.launcher3.R;
 import com.android.launcher3.util.Themes;
 
-import android.graphics.drawable.Drawable;
-
 public class CaretDrawable extends Drawable {
     public static final float PROGRESS_CARET_POINTING_UP = -1f;
     public static final float PROGRESS_CARET_POINTING_DOWN = 1f;

File: src/com/android/launcher3/pageindicators/PageIndicatorCaretLandscape.java
Patch:
@@ -16,9 +16,7 @@
 package com.android.launcher3.pageindicators;
 
 import android.content.Context;
-import android.content.res.Resources;
 import android.graphics.Canvas;
-import android.graphics.Paint;
 import android.graphics.Rect;
 import android.util.AttributeSet;
 

File: src/com/android/launcher3/provider/LossyScreenMigrationTask.java
Patch:
@@ -21,7 +21,6 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.graphics.Point;
-import android.util.Log;
 
 import com.android.launcher3.InvariantDeviceProfile;
 import com.android.launcher3.LauncherSettings.Favorites;
@@ -31,7 +30,6 @@
 import com.android.launcher3.util.LongArrayMap;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 
 /**
  * An extension of {@link GridSizeMigrationTask} which migrates only one screen and

File: src/com/android/launcher3/shortcuts/ShortcutDragPreviewProvider.java
Patch:
@@ -23,10 +23,10 @@
 import android.graphics.drawable.Drawable;
 import android.view.View;
 
-import com.android.launcher3.graphics.HolographicOutlineHelper;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.graphics.DragPreviewProvider;
+import com.android.launcher3.graphics.HolographicOutlineHelper;
 
 /**
  * Extension of {@link DragPreviewProvider} which generates bitmaps scaled to the default icon size.

File: src/com/android/launcher3/testing/LauncherExtension.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.Intent;
 import android.graphics.Color;
-import android.graphics.Rect;
 import android.os.Bundle;
 import android.view.Menu;
 import android.view.View;
@@ -12,7 +11,6 @@
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherCallbacks;
 import com.android.launcher3.allapps.AllAppsSearchBarController;
-import com.android.launcher3.logging.UserEventDispatcher;
 import com.android.launcher3.util.ComponentKey;
 
 import java.io.FileDescriptor;

File: src/com/android/launcher3/util/FocusLogic.java
Patch:
@@ -23,7 +23,6 @@
 
 import com.android.launcher3.CellLayout;
 import com.android.launcher3.DeviceProfile;
-import com.android.launcher3.InvariantDeviceProfile;
 import com.android.launcher3.ShortcutAndWidgetContainer;
 import com.android.launcher3.config.FeatureFlags;
 

File: src/com/android/launcher3/util/TestingUtils.java
Patch:
@@ -3,15 +3,13 @@
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
-import android.content.SharedPreferences;
 import android.util.Log;
 import android.view.Gravity;
 import android.view.View;
 import android.widget.FrameLayout;
 
 import com.android.launcher3.CustomAppWidget;
 import com.android.launcher3.Launcher;
-import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.R;
 import com.android.launcher3.Utilities;
 

File: src/com/android/launcher3/widget/WidgetsListAdapter.java
Patch:
@@ -22,7 +22,6 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.LinearLayout;
 
 import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.R;

File: src/com/android/launcher3/widget/WidgetsRecyclerView.java
Patch:
@@ -21,9 +21,8 @@
 import android.support.v7.widget.LinearLayoutManager;
 import android.util.AttributeSet;
 import android.view.View;
+
 import com.android.launcher3.BaseRecyclerView;
-import com.android.launcher3.model.PackageItemInfo;
-import com.android.launcher3.model.WidgetsModel;
 
 /**
  * The widgets recycler view.

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -35,7 +35,7 @@ private FeatureFlags() {}
     // When enabled allows to use any point on the fast scrollbar to start dragging.
     public static boolean LAUNCHER3_DIRECT_SCROLL = true;
     // When enabled while all-apps open, the soft input will be set to adjust resize .
-    public static boolean LAUNCHER3_UPDATE_SOFT_INPUT_MODE = false;
+    public static boolean LAUNCHER3_UPDATE_SOFT_INPUT_MODE = true;
     // When enabled the promise icon is visible in all apps while installation an app.
     public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = true;
 

File: src/com/android/launcher3/graphics/IconNormalizer.java
Patch:
@@ -220,7 +220,9 @@ public synchronized float getScale(@NonNull Drawable d, @Nullable RectF outBound
             @Nullable Path path, @Nullable boolean[] outMaskShape) {
         if (Utilities.isAtLeastO() && d instanceof AdaptiveIconDrawable &&
                 mAdaptiveIconScale != SCALE_NOT_INITIALIZED) {
-            outBounds.set(mBounds);
+            if (outBounds != null) {
+                outBounds.set(mBounds);
+            }
             return mAdaptiveIconScale;
         }
         int width = d.getIntrinsicWidth();

File: src/com/android/launcher3/graphics/IconNormalizer.java
Patch:
@@ -220,7 +220,9 @@ public synchronized float getScale(@NonNull Drawable d, @Nullable RectF outBound
             @Nullable Path path, @Nullable boolean[] outMaskShape) {
         if (Utilities.isAtLeastO() && d instanceof AdaptiveIconDrawable &&
                 mAdaptiveIconScale != SCALE_NOT_INITIALIZED) {
-            outBounds.set(mBounds);
+            if (outBounds != null) {
+                outBounds.set(mBounds);
+            }
             return mAdaptiveIconScale;
         }
         int width = d.getIntrinsicWidth();

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -1085,6 +1085,9 @@ public void notifyDrop() {
     }
 
     public boolean isDropEnabled() {
+        if (FeatureFlags.LAUNCHER3_NEW_FOLDER_ANIMATION) {
+            return mState != STATE_ANIMATING;
+        }
         return true;
     }
 

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -195,7 +195,7 @@ public int loadLayout(SQLiteDatabase db, ArrayList<Long> screenIds) {
         try {
             return parseLayout(mLayoutId, screenIds);
         } catch (Exception e) {
-            Log.w(TAG, "Got exception parsing layout.", e);
+            Log.e(TAG, "Error parsing layout: " + e);
             return -1;
         }
     }
@@ -362,7 +362,7 @@ public long parseAndAdd(XmlResourceParser parser) {
                     return addShortcut(info.loadLabel(mPackageManager).toString(),
                             intent, Favorites.ITEM_TYPE_APPLICATION);
                 } catch (PackageManager.NameNotFoundException e) {
-                    Log.e(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
+                    Log.e(TAG, "Favorite not found: " + packageName + "/" + className);
                 }
                 return -1;
             } else {

File: src/com/android/launcher3/notification/NotificationInfo.java
Patch:
@@ -38,7 +38,7 @@
  * only be created when we need to show the notification contents on the UI; until then, a
  * {@link com.android.launcher3.badge.BadgeInfo} with only the notification key should
  * be passed around, and then this can be constructed using the StatusBarNotification from
- * {@link NotificationListener#getNotificationsForKeys(String[])}.
+ * {@link NotificationListener#getNotificationsForKeys(java.util.List)}.
  */
 public class NotificationInfo implements View.OnClickListener {
 

File: src/com/android/launcher3/dragndrop/PinItemDragListener.java
Patch:
@@ -42,6 +42,7 @@
 import com.android.launcher3.compat.PinItemRequestCompat;
 import com.android.launcher3.folder.Folder;
 import com.android.launcher3.userevent.nano.LauncherLogProto;
+import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.widget.PendingAddShortcutInfo;
 import com.android.launcher3.widget.PendingAddWidgetInfo;
 import com.android.launcher3.widget.PendingItemDragHelper;
@@ -240,7 +241,7 @@ public void onDropCompleted(View target, DropTarget.DragObject d, boolean isFlin
     @Override
     public void fillInLogContainerData(View v, ItemInfo info, LauncherLogProto.Target target,
             LauncherLogProto.Target targetParent) {
-        // TODO: We should probably log something
+        targetParent.containerType = ContainerType.PINITEM;
     }
 
     private void postCleanup() {

File: src/com/android/launcher3/widget/PendingAddShortcutInfo.java
Patch:
@@ -32,6 +32,6 @@ public PendingAddShortcutInfo(ShortcutConfigActivityInfo activityInfo) {
         this.activityInfo = activityInfo;
         componentName = activityInfo.getComponent();
         user = activityInfo.getUser();
-        itemType = LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
+        itemType = activityInfo.getItemType();
     }
 }

File: src/com/android/launcher3/allapps/AllAppsFastScrollHelper.java
Patch:
@@ -210,7 +210,9 @@ private void updateTrackedViewsFastScrollFocusState() {
         for (RecyclerView.ViewHolder viewHolder : mTrackedFastScrollViews) {
             int pos = viewHolder.getAdapterPosition();
             boolean isActive = false;
-            if (mCurrentFastScrollSection != null && pos > -1) {
+            if (mCurrentFastScrollSection != null
+                    && pos > RecyclerView.NO_POSITION
+                    && pos < mApps.getAdapterItems().size()) {
                 AlphabeticalAppsList.AdapterItem item = mApps.getAdapterItems().get(pos);
                 isActive = item != null &&
                         mCurrentFastScrollSection.equals(item.sectionName) &&

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -366,7 +366,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         // Load configuration-specific DeviceProfile
         mDeviceProfile = app.getInvariantDeviceProfile().getDeviceProfile(this);
-        if (Utilities.ATLEAST_NOUGAT && isInMultiWindowMode()) {
+        if (isInMultiWindowModeCompat()) {
             Display display = getWindowManager().getDefaultDisplay();
             Point mwSize = new Point();
             display.getSize(mwSize);

File: src/com/android/launcher3/compat/PackageInstallerCompatVL.java
Patch:
@@ -154,7 +154,7 @@ private PackageInstaller.SessionInfo verify(PackageInstaller.SessionInfo session
         if (sessionInfo == null || sessionInfo.getInstallerPackageName() == null) {
             return null;
         }
-        String pkg = sessionInfo.getAppPackageName();
+        String pkg = sessionInfo.getInstallerPackageName();
         synchronized (mSessionVerifiedMap) {
             if (!mSessionVerifiedMap.containsKey(pkg)) {
                 LauncherAppsCompat launcherApps = LauncherAppsCompat.getInstance(mAppContext);

File: src/com/android/launcher3/model/PackageInstallStateChangedTask.java
Patch:
@@ -62,8 +62,7 @@ public void execute(LauncherAppState app, BgDataModel dataModel, AllAppsList app
                         if (mInstallInfo.state == PackageInstallerCompat.STATUS_INSTALLING) {
                             promiseAppInfo.level = mInstallInfo.progress;
                             updated = promiseAppInfo;
-                        } else if (mInstallInfo.state == PackageInstallerCompat.STATUS_FAILED
-                                || mInstallInfo.state == PackageInstallerCompat.STATUS_INSTALLED) {
+                        } else if (mInstallInfo.state == PackageInstallerCompat.STATUS_FAILED) {
                             apps.removePromiseApp(appInfo);
                             removed.add(appInfo);
                         }

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -37,7 +37,7 @@ private FeatureFlags() {}
     // When enabled while all-apps open, the soft input will be set to adjust resize .
     public static boolean LAUNCHER3_UPDATE_SOFT_INPUT_MODE = false;
     // When enabled the promise icon is visible in all apps while installation an app.
-    public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = false;
+    public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = true;
 
     // Feature flag to enable moving the QSB on the 0th screen of the workspace.
     public static final boolean QSB_ON_FIRST_SCREEN = true;

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -260,7 +260,7 @@ private void updateLightStatusBar(float shift) {
         // Use a light status bar (dark icons) if all apps is behind at least half of the status
         // bar. If the status bar is already light due to wallpaper extraction, keep it that way.
         boolean forceLight = shift <= mStatusBarHeight / 2;
-        mLauncher.activateLightStatusBar(forceLight, true);
+        mLauncher.activateLightSystemBars(forceLight, true /* statusBar */, true /* navBar */);
     }
 
     /**

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -28,7 +28,6 @@
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.dynamicui.ExtractionUtils;
-import com.android.launcher3.model.GridSizeMigrationTask;
 import com.android.launcher3.util.ConfigMonitor;
 import com.android.launcher3.util.Preconditions;
 import com.android.launcher3.util.TestingUtils;
@@ -54,8 +53,6 @@ public static LauncherAppState getInstance(final Context context) {
         if (INSTANCE == null) {
             if (Looper.myLooper() == Looper.getMainLooper()) {
                 INSTANCE = new LauncherAppState(context.getApplicationContext());
-                GridSizeMigrationTask.logDeviceProfileIfChanged(
-                        INSTANCE.getInvariantDeviceProfile(), context);
             } else {
                 try {
                     return new MainThreadExecutor().submit(new Callable<LauncherAppState>() {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -195,6 +195,7 @@ public void bindAppsAdded(ArrayList<Long> newScreens,
                                   ArrayList<ItemInfo> addAnimated,
                                   ArrayList<AppInfo> addedApps);
         public void bindAppsUpdated(ArrayList<AppInfo> apps);
+        public void bindPromiseAppProgressUpdated(PromiseAppInfo app);
         public void bindShortcutsChanged(ArrayList<ShortcutInfo> updated,
                 ArrayList<ShortcutInfo> removed, UserHandle user);
         public void bindWidgetsRestored(ArrayList<LauncherAppWidgetInfo> widgets);

File: src/com/android/launcher3/util/PendingRequestArgs.java
Patch:
@@ -53,6 +53,7 @@ private PendingRequestArgs(int arg1, int objectType, Parcelable object) {
 
     public PendingRequestArgs(Parcel parcel) {
         readFromValues(ContentValues.CREATOR.createFromParcel(parcel));
+        user = parcel.readParcelable(null);
 
         mArg1 = parcel.readInt();
         mObjectType = parcel.readInt();
@@ -69,6 +70,7 @@ public void writeToParcel(Parcel dest, int flags) {
         ContentValues itemValues = new ContentValues();
         writeToValues(new ContentWriter(itemValues, null));
         itemValues.writeToParcel(dest, flags);
+        dest.writeParcelable(user, flags);
 
         dest.writeInt(mArg1);
         dest.writeInt(mObjectType);

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -73,7 +73,7 @@ public PendingAppWidgetHostView(Context context, LauncherAppWidgetInfo info,
         mPaint.setColor(Themes.getAttrColor(getContext(), android.R.attr.textColorPrimary));
         mPaint.setTextSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX,
                 mLauncher.getDeviceProfile().iconTextSizePx, getResources().getDisplayMetrics()));
-        setBackgroundResource(R.drawable.round_rect_primary);
+        setBackgroundResource(R.drawable.pending_widget_bg);
         setWillNotDraw(false);
 
         setElevation(getResources().getDimension(R.dimen.pending_widget_elevation));

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -437,9 +437,10 @@ public void run() {
      * Updates {@param application} only if a valid entry is found.
      */
     public synchronized void updateTitleAndIcon(AppInfo application) {
+        boolean usePackageIcon = application instanceof PromiseAppInfo;
         CacheEntry entry = cacheLocked(application.componentName,
                 Provider.<LauncherActivityInfo>of(null),
-                application.user, false, application.usingLowResIcon);
+                application.user, usePackageIcon, application.usingLowResIcon);
         if (entry.icon != null && !isDefaultIcon(entry.icon, application.user)) {
             applyCacheEntry(entry, application);
         }

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -36,7 +36,8 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_DIRECT_SCROLL = true;
     // When enabled while all-apps open, the soft input will be set to adjust resize .
     public static boolean LAUNCHER3_UPDATE_SOFT_INPUT_MODE = false;
-
+    // When enabled the promise icon is visible in all apps while installation an app.
+    public static boolean LAUNCHER3_PROMISE_APPS_IN_ALL_APPS = false;
 
     // Feature flag to enable moving the QSB on the 0th screen of the workspace.
     public static final boolean QSB_ON_FIRST_SCREEN = true;

File: tests/src/com/android/launcher3/model/PackageInstallStateChangedTaskTest.java
Patch:
@@ -21,9 +21,8 @@ protected void setUp() throws Exception {
     }
 
     private PackageInstallStateChangedTask newTask(String pkg, int progress) {
-        PackageInstallInfo installInfo = new PackageInstallInfo(pkg);
-        installInfo.progress = progress;
-        installInfo.state = PackageInstallerCompat.STATUS_INSTALLING;
+        int state = PackageInstallerCompat.STATUS_INSTALLING;
+        PackageInstallInfo installInfo = new PackageInstallInfo(pkg, state, progress);
         return new PackageInstallStateChangedTask(installInfo);
     }
 

File: src/com/android/launcher3/AppInfo.java
Patch:
@@ -44,7 +44,7 @@ public class AppInfo extends ItemInfoWithIcon {
     public int isDisabled = ShortcutInfo.DEFAULT;
 
     public AppInfo() {
-        itemType = LauncherSettings.BaseLauncherColumns.ITEM_TYPE_SHORTCUT;
+        itemType = LauncherSettings.Favorites.ITEM_TYPE_APPLICATION;
     }
 
     @Override

File: src/com/android/launcher3/AppInfo.java
Patch:
@@ -44,7 +44,7 @@ public class AppInfo extends ItemInfoWithIcon {
     public int isDisabled = ShortcutInfo.DEFAULT;
 
     public AppInfo() {
-        itemType = LauncherSettings.BaseLauncherColumns.ITEM_TYPE_SHORTCUT;
+        itemType = LauncherSettings.Favorites.ITEM_TYPE_APPLICATION;
     }
 
     @Override

File: src/com/android/launcher3/popup/PopupDataProvider.java
Patch:
@@ -75,6 +75,9 @@ public void onNotificationPosted(PackageUserKey postedPackageUserKey, String not
             notificationWasAddedOrRemoved = shouldBeFilteredOut
                     ? badgeInfo.removeNotificationKey(notificationKey)
                     : badgeInfo.addNotificationKeyIfNotExists(notificationKey);
+            if (badgeInfo.getNotificationCount() == 0) {
+                mPackageUserToBadgeInfos.remove(postedPackageUserKey);
+            }
         }
         updateLauncherIconBadges(Utilities.singletonHashSet(postedPackageUserKey),
                 notificationWasAddedOrRemoved);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -643,7 +643,8 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         // of workspace despite that it's not a true child.
         // Note that it relies on the strict ordering of measuring the workspace before the QSB
         // at the dragLayer level.
-        if (getChildCount() > 0) {
+        // Only measure the QSB when the view is enabled
+        if (FeatureFlags.QSB_ON_FIRST_SCREEN && getChildCount() > 0) {
             CellLayout firstPage = (CellLayout) getChildAt(0);
             int cellHeight = firstPage.getCellHeight();
 

File: src/com/android/launcher3/MainThreadExecutor.java
Patch:
@@ -18,14 +18,14 @@
 
 import android.os.Looper;
 
-import com.android.launcher3.util.LooperExecuter;
+import com.android.launcher3.util.LooperExecutor;
 
 /**
  * An executor service that executes its tasks on the main thread.
  *
  * Shutting down this executor is not supported.
  */
-public class MainThreadExecutor extends LooperExecuter {
+public class MainThreadExecutor extends LooperExecutor {
 
     public MainThreadExecutor() {
         super(Looper.getMainLooper());

File: src/com/android/launcher3/model/ModelWriter.java
Patch:
@@ -34,7 +34,7 @@
 import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.util.ContentWriter;
 import com.android.launcher3.util.ItemInfoMatcher;
-import com.android.launcher3.util.LooperExecuter;
+import com.android.launcher3.util.LooperExecutor;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -55,7 +55,7 @@ public class ModelWriter {
     public ModelWriter(Context context, BgDataModel dataModel, boolean hasVerticalHotseat) {
         mContext = context;
         mBgDataModel = dataModel;
-        mWorkerExecutor = new LooperExecuter(LauncherModel.getWorkerLooper());
+        mWorkerExecutor = new LooperExecutor(LauncherModel.getWorkerLooper());
         mHasVerticalHotseat = hasVerticalHotseat;
     }
 

File: src/com/android/launcher3/util/LooperExecutor.java
Patch:
@@ -25,11 +25,11 @@
 /**
  * Extension of {@link AbstractExecutorService} which executed on a provided looper.
  */
-public class LooperExecuter extends AbstractExecutorService {
+public class LooperExecutor extends AbstractExecutorService {
 
     private final Handler mHandler;
 
-    public LooperExecuter(Looper looper) {
+    public LooperExecutor(Looper looper) {
         mHandler = new Handler(looper);
     }
 

File: tests/src/com/android/launcher3/ui/widget/BindWidgetTest.java
Patch:
@@ -39,13 +39,12 @@
 import com.android.launcher3.compat.PackageInstallerCompat;
 import com.android.launcher3.ui.LauncherInstrumentationTestCase;
 import com.android.launcher3.util.ContentWriter;
-import com.android.launcher3.util.LooperExecuter;
+import com.android.launcher3.util.LooperExecutor;
 import com.android.launcher3.widget.PendingAddWidgetInfo;
 import com.android.launcher3.widget.WidgetHostViewLoader;
 
 import java.util.Set;
 import java.util.concurrent.Callable;
-import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -340,7 +339,7 @@ public Set<String> call() throws Exception {
      * Blocks the current thread until all the jobs in the main worker thread are complete.
      */
     private void waitUntilLoaderIdle() throws Exception {
-        new LooperExecuter(LauncherModel.getWorkerLooper())
+        new LooperExecutor(LauncherModel.getWorkerLooper())
                 .submit(new Runnable() {
                     @Override
                     public void run() { }

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -51,7 +51,7 @@
 import com.android.launcher3.accessibility.FolderAccessibilityHelper;
 import com.android.launcher3.accessibility.WorkspaceAccessibilityHelper;
 import com.android.launcher3.anim.PropertyListBuilder;
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.folder.FolderIcon;
 import com.android.launcher3.graphics.DragPreviewProvider;
 import com.android.launcher3.util.CellAndSpan;
@@ -568,7 +568,7 @@ public void restoreInstanceState(SparseArray<Parcelable> states) {
         try {
             dispatchRestoreInstanceState(states);
         } catch (IllegalArgumentException ex) {
-            if (ProviderConfig.IS_DOGFOOD_BUILD) {
+            if (FeatureFlags.IS_DOGFOOD_BUILD) {
                 throw ex;
             }
             // Mismatched viewId / viewType preventing restore. Skip restore on production builds.

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -22,7 +22,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.folder.Folder;
 import com.android.launcher3.folder.FolderPagedView;
 import com.android.launcher3.util.FocusLogic;
@@ -93,7 +93,7 @@ public boolean onKey(View v, int keyCode, KeyEvent e) {
             }
 
             if (!(v.getParent() instanceof ShortcutAndWidgetContainer)) {
-                if (ProviderConfig.IS_DOGFOOD_BUILD) {
+                if (FeatureFlags.IS_DOGFOOD_BUILD) {
                     throw new IllegalStateException("Parent of the focused item is not supported.");
                 } else {
                     return false;

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -28,7 +28,6 @@
 import android.view.WindowManager;
 
 import com.android.launcher3.config.FeatureFlags;
-import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.logging.FileLog;
 import com.android.launcher3.util.Thunk;
 
@@ -335,7 +334,7 @@ private InvariantDeviceProfile multiply(float w) {
     }
 
     public int getAllAppsButtonRank() {
-        if (ProviderConfig.IS_DOGFOOD_BUILD && FeatureFlags.NO_ALL_APPS_ICON) {
+        if (FeatureFlags.IS_DOGFOOD_BUILD && FeatureFlags.NO_ALL_APPS_ICON) {
             throw new IllegalAccessError("Accessing all apps rank when all-apps is disabled");
         }
         return numHotseatIcons / 2;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -91,7 +91,6 @@
 import com.android.launcher3.compat.PinItemRequestCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.config.FeatureFlags;
-import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.dragndrop.DragController;
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragOptions;
@@ -3386,7 +3385,7 @@ public void run() {
                     Object tag = v.getTag();
                     String desc = "Collision while binding workspace item: " + item
                             + ". Collides with " + tag;
-                    if (ProviderConfig.IS_DOGFOOD_BUILD) {
+                    if (FeatureFlags.IS_DOGFOOD_BUILD) {
                         throw (new RuntimeException(desc));
                     } else {
                         Log.d(TAG, desc);

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -26,7 +26,7 @@
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.PackageInstallerCompat;
 import com.android.launcher3.compat.UserManagerCompat;
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dynamicui.ExtractionUtils;
 import com.android.launcher3.model.GridSizeMigrationTask;
 import com.android.launcher3.util.ConfigMonitor;
@@ -38,7 +38,7 @@
 
 public class LauncherAppState {
 
-    public static final boolean PROFILE_STARTUP = ProviderConfig.IS_DOGFOOD_BUILD;
+    public static final boolean PROFILE_STARTUP = FeatureFlags.IS_DOGFOOD_BUILD;
 
     // We do not need any synchronization for this variable as its only written on UI thread.
     private static LauncherAppState INSTANCE;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -44,7 +44,7 @@
 import com.android.launcher3.compat.PackageInstallerCompat;
 import com.android.launcher3.compat.PackageInstallerCompat.PackageInstallInfo;
 import com.android.launcher3.compat.UserManagerCompat;
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dynamicui.ExtractionUtils;
 import com.android.launcher3.folder.Folder;
 import com.android.launcher3.folder.FolderIcon;
@@ -1408,7 +1408,7 @@ public int compare(ItemInfo lhs, ItemInfo rhs) {
                                 return Utilities.longCompare(lhs.screenId, rhs.screenId);
                             }
                             default:
-                                if (ProviderConfig.IS_DOGFOOD_BUILD) {
+                                if (FeatureFlags.IS_DOGFOOD_BUILD) {
                                     throw new RuntimeException("Unexpected container type when " +
                                             "sorting workspace items.");
                                 }

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -51,7 +51,7 @@
 import android.view.accessibility.AccessibilityEvent;
 import android.view.accessibility.AccessibilityManager;
 
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.config.FeatureFlags;
 
 import java.io.ByteArrayOutputStream;
 import java.io.Closeable;
@@ -575,7 +575,7 @@ public static void closeSilently(Closeable c) {
             try {
                 c.close();
             } catch (IOException e) {
-                if (ProviderConfig.IS_DOGFOOD_BUILD) {
+                if (FeatureFlags.IS_DOGFOOD_BUILD) {
                     Log.d(TAG, "Error closing", e);
                 }
             }

File: src/com/android/launcher3/allapps/AlphabeticalAppsList.java
Patch:
@@ -24,7 +24,7 @@
 import com.android.launcher3.AppInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.compat.AlphabeticIndexCompat;
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.discovery.AppDiscoveryAppInfo;
 import com.android.launcher3.discovery.AppDiscoveryItem;
 import com.android.launcher3.discovery.AppDiscoveryUpdateState;
@@ -440,7 +440,7 @@ private void refillAdapterItems() {
                 if (info != null) {
                     mPredictedApps.add(info);
                 } else {
-                    if (ProviderConfig.IS_DOGFOOD_BUILD) {
+                    if (FeatureFlags.IS_DOGFOOD_BUILD) {
                         Log.e(TAG, "Predicted app not found: " + ck);
                     }
                 }

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -69,7 +69,6 @@
 import com.android.launcher3.accessibility.AccessibleDragListenerAdapter;
 import com.android.launcher3.anim.AnimationLayerSet;
 import com.android.launcher3.config.FeatureFlags;
-import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.dragndrop.DragController;
 import com.android.launcher3.dragndrop.DragController.DragListener;
 import com.android.launcher3.dragndrop.DragLayer;
@@ -591,7 +590,7 @@ public void animateOpen() {
             dragLayer.addView(this);
             mDragController.addDropTarget(this);
         } else {
-            if (ProviderConfig.IS_DOGFOOD_BUILD) {
+            if (FeatureFlags.IS_DOGFOOD_BUILD) {
                 Log.e(TAG, "Opening folder (" + this + ") which already has a parent:"
                         + getParent());
             }

File: src/com/android/launcher3/graphics/DragPreviewProvider.java
Patch:
@@ -29,7 +29,7 @@
 import com.android.launcher3.LauncherAppWidgetHostView;
 import com.android.launcher3.R;
 import com.android.launcher3.Workspace;
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.folder.FolderIcon;
 
 /**
@@ -138,7 +138,7 @@ public Bitmap createDragBitmap(Canvas canvas) {
     }
 
     public final void generateDragOutline(Canvas canvas) {
-        if (ProviderConfig.IS_DOGFOOD_BUILD && generatedDragOutline != null) {
+        if (FeatureFlags.IS_DOGFOOD_BUILD && generatedDragOutline != null) {
             throw new RuntimeException("Drag outline generated twice");
         }
 

File: src/com/android/launcher3/graphics/HolographicOutlineHelper.java
Patch:
@@ -31,7 +31,7 @@
 
 import com.android.launcher3.BubbleTextView;
 import com.android.launcher3.R;
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.config.FeatureFlags;
 
 import java.nio.ByteBuffer;
 
@@ -86,7 +86,7 @@ public static HolographicOutlineHelper getInstance(Context context) {
      * bitmap.
      */
     public void applyExpensiveOutlineWithBlur(Bitmap srcDst, Canvas srcDstCanvas) {
-        if (ProviderConfig.IS_DOGFOOD_BUILD && srcDst.getConfig() != Bitmap.Config.ALPHA_8) {
+        if (FeatureFlags.IS_DOGFOOD_BUILD && srcDst.getConfig() != Bitmap.Config.ALPHA_8) {
             throw new RuntimeException("Outline blue is only supported on alpha bitmaps");
         }
 

File: src/com/android/launcher3/logging/UserEventDispatcher.java
Patch:
@@ -29,8 +29,7 @@
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.R;
 import com.android.launcher3.Utilities;
-import com.android.launcher3.config.ProviderConfig;
-import com.android.launcher3.userevent.nano.LauncherLogProto;
+import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Action;
 import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.userevent.nano.LauncherLogProto.LauncherEvent;
@@ -61,7 +60,7 @@ public class UserEventDispatcher {
 
     private static final String TAG = "UserEvent";
     private static final boolean IS_VERBOSE =
-            ProviderConfig.IS_DOGFOOD_BUILD && Utilities.isPropertyEnabled(LogConfig.USEREVENT);
+            FeatureFlags.IS_DOGFOOD_BUILD && Utilities.isPropertyEnabled(LogConfig.USEREVENT);
 
     private static UserEventDispatcher sInstance;
     private static final Object LOCK = new Object();

File: src/com/android/launcher3/util/SQLiteCacheHelper.java
Patch:
@@ -10,7 +10,7 @@
 import android.util.Log;
 
 import com.android.launcher3.Utilities;
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.config.FeatureFlags;
 
 /**
  * An extension of {@link SQLiteOpenHelper} with utility methods for a single table cache DB.
@@ -19,7 +19,7 @@
 public abstract class SQLiteCacheHelper {
     private static final String TAG = "SQLiteCacheHelper";
 
-    private static final boolean NO_ICON_CACHE = ProviderConfig.IS_DOGFOOD_BUILD &&
+    private static final boolean NO_ICON_CACHE = FeatureFlags.IS_DOGFOOD_BUILD &&
             Utilities.isPropertyEnabled(LogConfig.MEMORY_ONLY_ICON_CACHE);
 
     private final String mTableName;

File: src_flags/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -20,6 +20,9 @@
  * Defines a set of flags used to control various launcher behaviors
  */
 public final class FeatureFlags {
+
+    public static final boolean IS_DOGFOOD_BUILD = true;
+
     private FeatureFlags() {}
 
     // Custom flags go below this

File: tests/src/com/android/launcher3/model/AddWorkspaceItemsTaskTest.java
Patch:
@@ -10,9 +10,9 @@
 import android.util.Pair;
 
 import com.android.launcher3.ItemInfo;
+import com.android.launcher3.LauncherProvider;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.ShortcutInfo;
-import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.util.GridOccupancy;
 import com.android.launcher3.util.LongArrayMap;
 import com.android.launcher3.util.Provider;
@@ -178,6 +178,6 @@ private void commitScreensToDb() throws Exception {
             v.put(LauncherSettings.WorkspaceScreens.SCREEN_RANK, i);
             ops.add(ContentProviderOperation.newInsert(uri).withValues(v).build());
         }
-        getMockContentResolver().applyBatch(ProviderConfig.AUTHORITY, ops);
+        getMockContentResolver().applyBatch(LauncherProvider.AUTHORITY, ops);
     }
 }

File: tests/src/com/android/launcher3/model/BaseModelUpdateTaskTestCase.java
Patch:
@@ -24,7 +24,7 @@
 import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherModel.BaseModelUpdateTask;
 import com.android.launcher3.LauncherModel.Callbacks;
-import com.android.launcher3.config.ProviderConfig;
+import com.android.launcher3.LauncherProvider;
 import com.android.launcher3.util.ComponentKey;
 import com.android.launcher3.util.Provider;
 import com.android.launcher3.util.TestLauncherProvider;
@@ -64,7 +64,7 @@ public class BaseModelUpdateTaskTestCase extends ProviderTestCase2<TestLauncherP
     public Callbacks callbacks;
 
     public BaseModelUpdateTaskTestCase() {
-        super(TestLauncherProvider.class, ProviderConfig.AUTHORITY);
+        super(TestLauncherProvider.class, LauncherProvider.AUTHORITY);
     }
 
     @Override

File: tests/src/com/android/launcher3/model/GridSizeMigrationTaskTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.android.launcher3.model;
 
 import android.content.ContentValues;
-import android.content.Context;
 import android.content.Intent;
 import android.database.Cursor;
 import android.graphics.Point;
@@ -10,9 +9,9 @@
 
 import com.android.launcher3.InvariantDeviceProfile;
 import com.android.launcher3.LauncherModel;
+import com.android.launcher3.LauncherProvider;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.config.FeatureFlags;
-import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.model.GridSizeMigrationTask.MultiStepMigrationTask;
 import com.android.launcher3.util.TestLauncherProvider;
 
@@ -40,7 +39,7 @@ public class GridSizeMigrationTaskTest extends ProviderTestCase2<TestLauncherPro
     private InvariantDeviceProfile mIdp;
 
     public GridSizeMigrationTaskTest() {
-        super(TestLauncherProvider.class, ProviderConfig.AUTHORITY);
+        super(TestLauncherProvider.class, LauncherProvider.AUTHORITY);
     }
 
     @Override

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -28,7 +28,7 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_USE_SYSTEM_DRAG_DRIVER = true;
     public static boolean LAUNCHER3_DISABLE_PINCH_TO_OVERVIEW = false;
     public static boolean LAUNCHER3_ALL_APPS_PULL_UP = true;
-    public static boolean LAUNCHER3_NEW_FOLDER_ANIMATION = false;
+    public static boolean LAUNCHER3_NEW_FOLDER_ANIMATION = true;
     // When enabled allows to use any point on the fast scrollbar to start dragging.
     public static boolean LAUNCHER3_DIRECT_SCROLL = true;
     // When enabled while all-apps open, the soft input will be set to adjust resize .

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -44,4 +44,6 @@ private FeatureFlags() {}
     public static final boolean BADGE_ICONS = true;
     // When enabled, icons not supporting {@link MaskableIconDrawable} will be wrapped in this class.
     public static final boolean LEGACY_ICON_TREATMENT = false;
+    // When enabled, adaptive icons would have shadows baked when being stored to icon cache.
+    public static final boolean ADAPTIVE_ICON_SHADOW = true;
 }

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -44,4 +44,6 @@ private FeatureFlags() {}
     public static final boolean BADGE_ICONS = true;
     // When enabled, icons not supporting {@link MaskableIconDrawable} will be wrapped in this class.
     public static final boolean LEGACY_ICON_TREATMENT = false;
+    // When enabled, adaptive icons would have shadows baked when being stored to icon cache.
+    public static final boolean ADAPTIVE_ICON_SHADOW = true;
 }

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -44,4 +44,6 @@ private FeatureFlags() {}
     public static final boolean BADGE_ICONS = true;
     // When enabled, icons not supporting {@link MaskableIconDrawable} will be wrapped in this class.
     public static final boolean LEGACY_ICON_TREATMENT = false;
+    // When enabled, adaptive icons would have shadows baked when being stored to icon cache.
+    public static final boolean ADAPTIVE_ICON_SHADOW = true;
 }

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -167,7 +167,7 @@ protected void drawBadgeIfNecessary(Canvas canvas) {
         }
     }
 
-    public IconPalette getIconPalette() {
+    protected IconPalette getIconPalette() {
         if (mIconPalette == null) {
             mIconPalette = IconPalette.fromDominantColor(Utilities
                     .findDominantColorByHue(mBitmap, 20));

File: src/com/android/launcher3/compat/LauncherAppsCompatVL.java
Patch:
@@ -81,7 +81,8 @@ public ApplicationInfo getApplicationInfo(String packageName, int flags, UserHan
                     mContext.getPackageManager().getApplicationInfo(packageName, flags);
             // There is no way to check if the app is installed for managed profile. But for
             // primary profile, we can still have this check.
-            if (isPrimaryUser && ((info.flags & ApplicationInfo.FLAG_INSTALLED) == 0)) {
+            if (isPrimaryUser && ((info.flags & ApplicationInfo.FLAG_INSTALLED) == 0)
+                    || !info.enabled) {
                 return null;
             }
             return info;

File: src/com/android/launcher3/compat/LauncherAppsCompatVO.java
Patch:
@@ -37,7 +37,8 @@ public class LauncherAppsCompatVO extends LauncherAppsCompatVL {
     @Override
     public ApplicationInfo getApplicationInfo(String packageName, int flags, UserHandle user) {
         ApplicationInfo info = mLauncherApps.getApplicationInfo(packageName, flags, user);
-        return info == null || (info.flags & ApplicationInfo.FLAG_INSTALLED) == 0 ? null : info;
+        return info == null || (info.flags & ApplicationInfo.FLAG_INSTALLED) == 0 || !info.enabled
+                ? null : info;
     }
 
     @Override

File: src/com/android/launcher3/compat/LauncherAppsCompatVL.java
Patch:
@@ -81,7 +81,8 @@ public ApplicationInfo getApplicationInfo(String packageName, int flags, UserHan
                     mContext.getPackageManager().getApplicationInfo(packageName, flags);
             // There is no way to check if the app is installed for managed profile. But for
             // primary profile, we can still have this check.
-            if (isPrimaryUser && ((info.flags & ApplicationInfo.FLAG_INSTALLED) == 0)) {
+            if (isPrimaryUser && ((info.flags & ApplicationInfo.FLAG_INSTALLED) == 0)
+                    || !info.enabled) {
                 return null;
             }
             return info;

File: src/com/android/launcher3/compat/LauncherAppsCompatVO.java
Patch:
@@ -37,7 +37,8 @@ public class LauncherAppsCompatVO extends LauncherAppsCompatVL {
     @Override
     public ApplicationInfo getApplicationInfo(String packageName, int flags, UserHandle user) {
         ApplicationInfo info = mLauncherApps.getApplicationInfo(packageName, flags, user);
-        return info == null || (info.flags & ApplicationInfo.FLAG_INSTALLED) == 0 ? null : info;
+        return info == null || (info.flags & ApplicationInfo.FLAG_INSTALLED) == 0 || !info.enabled
+                ? null : info;
     }
 
     @Override

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -73,7 +73,8 @@ public abstract LauncherActivityInfo resolveActivity(Intent intent,
             UserHandle user);
     public abstract void startActivityForProfile(ComponentName component, UserHandle user,
             Rect sourceBounds, Bundle opts);
-    public abstract ApplicationInfo getApplicationInfo(String packageName, UserHandle user);
+    public abstract ApplicationInfo getApplicationInfo(
+            String packageName, int flags, UserHandle user);
     public abstract void showAppDetailsForProfile(ComponentName component, UserHandle user);
     public abstract void addOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);
     public abstract void removeOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);

File: src/com/android/launcher3/compat/LauncherAppsCompatVO.java
Patch:
@@ -35,8 +35,9 @@ public class LauncherAppsCompatVO extends LauncherAppsCompatVL {
     }
 
     @Override
-    public ApplicationInfo getApplicationInfo(String packageName, UserHandle user) {
-        return mLauncherApps.getApplicationInfo(packageName, 0, user);
+    public ApplicationInfo getApplicationInfo(String packageName, int flags, UserHandle user) {
+        ApplicationInfo info = mLauncherApps.getApplicationInfo(packageName, flags, user);
+        return info == null || (info.flags & ApplicationInfo.FLAG_INSTALLED) == 0 ? null : info;
     }
 
     @Override

File: src/com/android/launcher3/model/SdCardAvailableReceiver.java
Patch:
@@ -63,7 +63,7 @@ public void onReceive(Context context, Intent intent) {
 
             for (String pkg : new HashSet<>(entry.getValue())) {
                 if (!launcherApps.isPackageEnabledForProfile(pkg, user)) {
-                    if (pmHelper.isAppOnSdcard(pkg)) {
+                    if (pmHelper.isAppOnSdcard(pkg, user)) {
                         packagesUnavailable.add(pkg);
                     } else {
                         packagesRemoved.add(pkg);

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -73,7 +73,8 @@ public abstract LauncherActivityInfo resolveActivity(Intent intent,
             UserHandle user);
     public abstract void startActivityForProfile(ComponentName component, UserHandle user,
             Rect sourceBounds, Bundle opts);
-    public abstract ApplicationInfo getApplicationInfo(String packageName, UserHandle user);
+    public abstract ApplicationInfo getApplicationInfo(
+            String packageName, int flags, UserHandle user);
     public abstract void showAppDetailsForProfile(ComponentName component, UserHandle user);
     public abstract void addOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);
     public abstract void removeOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);

File: src/com/android/launcher3/compat/LauncherAppsCompatVO.java
Patch:
@@ -35,8 +35,9 @@ public class LauncherAppsCompatVO extends LauncherAppsCompatVL {
     }
 
     @Override
-    public ApplicationInfo getApplicationInfo(String packageName, UserHandle user) {
-        return mLauncherApps.getApplicationInfo(packageName, 0, user);
+    public ApplicationInfo getApplicationInfo(String packageName, int flags, UserHandle user) {
+        ApplicationInfo info = mLauncherApps.getApplicationInfo(packageName, flags, user);
+        return info == null || (info.flags & ApplicationInfo.FLAG_INSTALLED) == 0 ? null : info;
     }
 
     @Override

File: src/com/android/launcher3/model/SdCardAvailableReceiver.java
Patch:
@@ -63,7 +63,7 @@ public void onReceive(Context context, Intent intent) {
 
             for (String pkg : new HashSet<>(entry.getValue())) {
                 if (!launcherApps.isPackageEnabledForProfile(pkg, user)) {
-                    if (pmHelper.isAppOnSdcard(pkg)) {
+                    if (pmHelper.isAppOnSdcard(pkg, user)) {
                         packagesUnavailable.add(pkg);
                     } else {
                         packagesRemoved.add(pkg);

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -73,7 +73,8 @@ public abstract LauncherActivityInfo resolveActivity(Intent intent,
             UserHandle user);
     public abstract void startActivityForProfile(ComponentName component, UserHandle user,
             Rect sourceBounds, Bundle opts);
-    public abstract ApplicationInfo getApplicationInfo(String packageName, UserHandle user);
+    public abstract ApplicationInfo getApplicationInfo(
+            String packageName, int flags, UserHandle user);
     public abstract void showAppDetailsForProfile(ComponentName component, UserHandle user);
     public abstract void addOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);
     public abstract void removeOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);

File: src/com/android/launcher3/compat/LauncherAppsCompatVO.java
Patch:
@@ -35,8 +35,9 @@ public class LauncherAppsCompatVO extends LauncherAppsCompatVL {
     }
 
     @Override
-    public ApplicationInfo getApplicationInfo(String packageName, UserHandle user) {
-        return mLauncherApps.getApplicationInfo(packageName, 0, user);
+    public ApplicationInfo getApplicationInfo(String packageName, int flags, UserHandle user) {
+        ApplicationInfo info = mLauncherApps.getApplicationInfo(packageName, flags, user);
+        return info == null || (info.flags & ApplicationInfo.FLAG_INSTALLED) == 0 ? null : info;
     }
 
     @Override

File: src/com/android/launcher3/model/SdCardAvailableReceiver.java
Patch:
@@ -63,7 +63,7 @@ public void onReceive(Context context, Intent intent) {
 
             for (String pkg : new HashSet<>(entry.getValue())) {
                 if (!launcherApps.isPackageEnabledForProfile(pkg, user)) {
-                    if (pmHelper.isAppOnSdcard(pkg)) {
+                    if (pmHelper.isAppOnSdcard(pkg, user)) {
                         packagesUnavailable.add(pkg);
                     } else {
                         packagesRemoved.add(pkg);

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -42,6 +42,7 @@
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragOptions;
 import com.android.launcher3.dragndrop.DragView;
+import com.android.launcher3.util.Themes;
 import com.android.launcher3.util.Thunk;
 
 /**
@@ -142,8 +143,8 @@ private void animateTextColor(int targetColor) {
             mCurrentFilter = new ColorMatrix();
         }
 
-        DragView.setColorScale(getTextColor(), mSrcFilter);
-        DragView.setColorScale(targetColor, mDstFilter);
+        Themes.setColorScaleOnMatrix(getTextColor(), mSrcFilter);
+        Themes.setColorScaleOnMatrix(targetColor, mDstFilter);
         ValueAnimator anim1 = ValueAnimator.ofObject(
                 new FloatArrayEvaluator(mCurrentFilter.getArray()),
                 mSrcFilter.getArray(), mDstFilter.getArray());

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -1138,6 +1138,7 @@ PreviewItemDrawingParams computePreviewItemDrawingParams(int index, int curNumIt
             PreviewItemDrawingParams params);
         void init(int availableSpace, int intrinsicIconSize, boolean rtl);
         float scaleForItem(int index, int totalNumItems);
+        float getIconSize();
         int maxNumItems();
         boolean clipToBackground();
     }

File: src/com/android/launcher3/AbstractFloatingView.java
Patch:
@@ -95,7 +95,7 @@ protected static <T extends AbstractFloatingView> T getOpenView(
         return null;
     }
 
-    protected static void closeOpenContainer(Launcher launcher, @FloatingViewType int type) {
+    public static void closeOpenContainer(Launcher launcher, @FloatingViewType int type) {
         AbstractFloatingView view = getOpenView(launcher, type);
         if (view != null) {
             view.close(true);

File: src/com/android/launcher3/badge/BadgeRenderer.java
Patch:
@@ -22,7 +22,6 @@
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.Rect;
-import android.graphics.RectF;
 import android.graphics.Shader;
 import android.support.annotation.Nullable;
 

File: src/com/android/launcher3/popup/PopupPopulator.java
Patch:
@@ -196,7 +196,8 @@ public UpdateShortcutChild(PopupContainerWithArrow container, DeepShortcutView s
 
         @Override
         public void run() {
-            mShortcutChild.applyShortcutInfo(mShortcutChildInfo, mDetail, mContainer);
+            mShortcutChild.applyShortcutInfo(mShortcutChildInfo, mDetail,
+                    mContainer.mShortcutsItemView);
         }
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -884,6 +884,8 @@ private void loadWorkspace() {
                     Intent intent;
                     String targetPkg;
 
+                    FolderIconPreviewVerifier verifier =
+                            new FolderIconPreviewVerifier(mApp.getInvariantDeviceProfile());
                     while (!mStopped && c.moveToNext()) {
                         try {
                             if (c.user == null) {
@@ -1008,7 +1010,7 @@ private void loadWorkspace() {
                                 }
 
                                 boolean useLowResIcon = !c.isOnWorkspaceOrHotseat() &&
-                                        c.getInt(rankIndex) >= FolderIcon.NUM_ITEMS_IN_PREVIEW;
+                                        !verifier.isItemInPreview(c.getInt(rankIndex));
 
                                 if (c.restoreFlag != 0) {
                                     // Already verified above that user is same as default user

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -331,6 +331,8 @@ private void arrangeChildren(ArrayList<View> list, int itemCount, boolean saveCh
         int position = 0;
         int newX, newY, rank;
 
+        FolderIconPreviewVerifier verifier = new FolderIconPreviewVerifier(
+                Launcher.getLauncher(getContext()).getDeviceProfile().inv);
         rank = 0;
         for (int i = 0; i < itemCount; i++) {
             View v = list.size() > i ? list.get(i) : null;
@@ -363,7 +365,7 @@ private void arrangeChildren(ArrayList<View> list, int itemCount, boolean saveCh
                 currentPage.addViewToCellLayout(
                         v, -1, mFolder.mLauncher.getViewIdForItem(info), lp, true);
 
-                if (rank < FolderIcon.NUM_ITEMS_IN_PREVIEW && v instanceof BubbleTextView) {
+                if (verifier.isItemInPreview(rank) && v instanceof BubbleTextView) {
                     ((BubbleTextView) v).verifyHighRes();
                 }
             }

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -114,9 +114,9 @@ public void itemsChanged(boolean animate) {
         }
     }
 
-    public void prepareAutoAdd() {
+    public void prepareAutoUpdate() {
         for (int i = 0; i < listeners.size(); i++) {
-            listeners.get(i).prepareAutoAdd();
+            listeners.get(i).prepareAutoUpdate();
         }
     }
 
@@ -125,7 +125,7 @@ public interface FolderListener {
         public void onRemove(ShortcutInfo item);
         public void onTitleChanged(CharSequence title);
         public void onItemsChanged(boolean animate);
-        public void prepareAutoAdd();
+        public void prepareAutoUpdate();
     }
 
     public boolean hasOption(int optionFlag) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3885,7 +3885,9 @@ public void removeItemsByMatcher(final ItemInfoMatcher matcher) {
                     // The item may belong to a folder.
                     View parent = idToViewMap.get(itemToRemove.container);
                     if (parent != null) {
-                        ((FolderInfo) parent.getTag()).remove((ShortcutInfo) itemToRemove, false);
+                        FolderInfo folderInfo = (FolderInfo) parent.getTag();
+                        folderInfo.prepareAutoUpdate();
+                        folderInfo.remove((ShortcutInfo) itemToRemove, false);
                     }
                 }
             }

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -1413,7 +1413,7 @@ public void onItemsChanged(boolean animate) {
     }
 
     @Override
-    public void prepareAutoAdd() {
+    public void prepareAutoUpdate() {
         close(false);
     }
 

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -981,7 +981,7 @@ public void onItemsChanged(boolean animate) {
     }
 
     @Override
-    public void prepareAutoAdd() {
+    public void prepareAutoUpdate() {
     }
 
     @Override

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -163,7 +163,7 @@ private void finalizeWorkFolder(
 
                     @Override
                     public void run() {
-                        workFolder.prepareAutoAdd();
+                        workFolder.prepareAutoUpdate();
                         for (ShortcutInfo info : workFolderApps) {
                             workFolder.add(info, false);
                         }

File: src/com/android/launcher3/graphics/PreloadIconDrawable.java
Patch:
@@ -217,6 +217,9 @@ private void updateInternalState(float finalProgress, boolean shouldAnimate, boo
         if (Float.compare(finalProgress, mInternalStateProgress) == 0) {
             return;
         }
+        if (finalProgress < mInternalStateProgress) {
+            shouldAnimate = false;
+        }
         if (!shouldAnimate || mRanFinishAnimation) {
             setInternalProgress(finalProgress);
         } else {

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -92,7 +92,6 @@ public boolean startSearch(
     /*
      * Extensions points for adding / replacing some other aspects of the Launcher experience.
      */
-    public UserEventDispatcher getUserEventDispatcher();
     public boolean shouldMoveToDefaultScreenOnHomeIntent();
     public boolean hasSettings();
     public AllAppsSearchBarController getAllAppsSearchBarController();

File: src/com/android/launcher3/testing/LauncherExtension.java
Patch:
@@ -179,9 +179,6 @@ public void populateCustomContentContainer() {
             addToCustomContentPage(customContent, mCustomContentCallbacks, "");
         }
 
-        @Override
-        public UserEventDispatcher getUserEventDispatcher() { return null; }
-
         @Override
         public View getQsbBar() {
             return null;

File: src/com/android/launcher3/graphics/PreloadIconDrawable.java
Patch:
@@ -217,6 +217,9 @@ private void updateInternalState(float finalProgress, boolean shouldAnimate, boo
         if (Float.compare(finalProgress, mInternalStateProgress) == 0) {
             return;
         }
+        if (finalProgress < mInternalStateProgress) {
+            shouldAnimate = false;
+        }
         if (!shouldAnimate || mRanFinishAnimation) {
             setInternalProgress(finalProgress);
         } else {

File: src/com/android/launcher3/badge/BadgeRenderer.java
Patch:
@@ -51,6 +51,7 @@ public BadgeRenderer(Context context) {
         mSmallIconDrawer = new IconDrawer(res.getDimensionPixelSize(R.dimen.badge_large_padding));
         mTextPaint.setTextAlign(Paint.Align.CENTER);
         mTextPaint.setTextSize(res.getDimensionPixelSize(R.dimen.badge_text_size));
+        mTextPaint.setFakeBoldText(true);
         // Measure the text height.
         Rect tempTextHeight = new Rect();
         mTextPaint.getTextBounds("0", 0, 1, tempTextHeight);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2272,6 +2272,9 @@ public void onClick(View v) {
 
         if (v instanceof Workspace) {
             if (mWorkspace.isInOverviewMode()) {
+                getUserEventDispatcher().logActionOnContainer(LauncherLogProto.Action.Type.TOUCH,
+                        LauncherLogProto.Action.Direction.NONE,
+                        LauncherLogProto.ContainerType.OVERVIEW, mWorkspace.getCurrentPage());
                 showWorkspace(true);
             }
             return;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -815,7 +815,7 @@ private void loadWorkspace() {
             if (clearDb) {
                 Log.d(TAG, "loadWorkspace: resetting launcher database");
                 LauncherSettings.Settings.call(contentResolver,
-                        LauncherSettings.Settings.METHOD_DELETE_DB);
+                        LauncherSettings.Settings.METHOD_CREATE_EMPTY_DB);
             }
 
             Log.d(TAG, "loadWorkspace: loading default favorites");

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -291,7 +291,6 @@ public static final class Settings {
         public static final String METHOD_NEW_SCREEN_ID = "generate_new_screen_id";
 
         public static final String METHOD_CREATE_EMPTY_DB = "create_empty_db";
-        public static final String METHOD_DELETE_DB = "delete_db";
 
         public static final String METHOD_LOAD_DEFAULT_FAVORITES = "load_default_favorites";
 

File: tests/src/com/android/launcher3/ui/AllAppsIconToHomeTest.java
Patch:
@@ -22,6 +22,7 @@ public class AllAppsIconToHomeTest extends LauncherInstrumentationTestCase {
     @Override
     protected void setUp() throws Exception {
         super.setUp();
+        setDefaultLauncher();
 
         mSettingsApp = LauncherAppsCompat.getInstance(mTargetContext)
                 .getActivityList("com.android.settings", Process.myUserHandle()).get(0);

File: tests/src/com/android/launcher3/ui/ShortcutsLaunchTest.java
Patch:
@@ -25,6 +25,7 @@ public class ShortcutsLaunchTest extends LauncherInstrumentationTestCase {
     @Override
     protected void setUp() throws Exception {
         super.setUp();
+        setDefaultLauncher();
 
         mSettingsApp = LauncherAppsCompat.getInstance(mTargetContext)
                 .getActivityList("com.android.settings", Process.myUserHandle()).get(0);

File: tests/src/com/android/launcher3/ui/ShortcutsToHomeTest.java
Patch:
@@ -25,6 +25,7 @@ public class ShortcutsToHomeTest extends LauncherInstrumentationTestCase {
     @Override
     protected void setUp() throws Exception {
         super.setUp();
+        setDefaultLauncher();
 
         mSettingsApp = LauncherAppsCompat.getInstance(mTargetContext)
                 .getActivityList("com.android.settings", Process.myUserHandle()).get(0);

File: tests/src/com/android/launcher3/ui/widget/AddWidgetTest.java
Patch:
@@ -41,6 +41,7 @@ public class AddWidgetTest extends LauncherInstrumentationTestCase {
     @Override
     protected void setUp() throws Exception {
         super.setUp();
+        grantWidgetPermission();
 
         widgetInfo = findWidgetProvider(false /* hasConfigureScreen */);
     }

File: src/com/android/launcher3/AppWidgetsRestoredReceiver.java
Patch:
@@ -83,7 +83,7 @@ static void restoreAppWidgetIds(Context context, PendingResult asyncResult,
 
         LauncherAppState app = LauncherAppState.getInstanceNoCreate();
         if (app != null) {
-            app.reloadWorkspace();
+            app.getModel().forceReload();
         }
         asyncResult.finish();
     }

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -174,7 +174,7 @@ private void reloadLauncherIfExternal() {
         if (Utilities.ATLEAST_MARSHMALLOW && Binder.getCallingPid() != Process.myPid()) {
             LauncherAppState app = LauncherAppState.getInstanceNoCreate();
             if (app != null) {
-                app.reloadWorkspace();
+                app.getModel().forceReload();
             }
         }
     }
@@ -205,7 +205,7 @@ public Uri insert(Uri uri, ContentValues initialValues) {
             // Deprecated behavior to support legacy devices which rely on provider callbacks.
             LauncherAppState app = LauncherAppState.getInstanceNoCreate();
             if (app != null && "true".equals(uri.getQueryParameter("isExternalAdd"))) {
-                app.reloadWorkspace();
+                app.getModel().forceReload();
             }
 
             String notify = uri.getQueryParameter("notify");

File: tests/src/com/android/launcher3/ui/LauncherInstrumentationTestCase.java
Patch:
@@ -236,8 +236,7 @@ protected void resetLoaderState() {
                 @Override
                 public void run() {
                     ManagedProfileHeuristic.markExistingUsersForNoFolderCreation(mTargetContext);
-                    LauncherAppState.getInstance(mTargetContext).getModel()
-                            .resetLoadedState(true, true);
+                    LauncherAppState.getInstance(mTargetContext).getModel().forceReload();
                 }
             });
         } catch (Throwable t) {

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -163,6 +163,7 @@ private void finalizeWorkFolder(
 
                     @Override
                     public void run() {
+                        workFolder.prepareAutoAdd();
                         for (ShortcutInfo info : workFolderApps) {
                             workFolder.add(info, false);
                         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3209,6 +3209,9 @@ public void startBinding() {
         if (LauncherAppState.PROFILE_STARTUP) {
             Trace.beginSection("Starting page bind");
         }
+
+        AbstractFloatingView.closeAllOpenViews(this);
+
         setWorkspaceLoading(true);
 
         // Clear the workspace because it's going to be rebound

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -19,6 +19,7 @@
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.ApplicationInfo;
 import android.content.pm.LauncherActivityInfo;
 import android.graphics.Rect;
 import android.os.Bundle;
@@ -72,6 +73,7 @@ public abstract LauncherActivityInfo resolveActivity(Intent intent,
             UserHandle user);
     public abstract void startActivityForProfile(ComponentName component, UserHandle user,
             Rect sourceBounds, Bundle opts);
+    public abstract ApplicationInfo getApplicationInfo(String packageName, UserHandle user);
     public abstract void showAppDetailsForProfile(ComponentName component, UserHandle user);
     public abstract void addOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);
     public abstract void removeOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);

File: src/com/android/launcher3/shortcuts/DeepShortcutManager.java
Patch:
@@ -65,7 +65,8 @@ private DeepShortcutManager(Context context) {
     }
 
     public static boolean supportsShortcuts(ItemInfo info) {
-        return info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION;
+        return info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION
+                && !info.isDisabled();
     }
 
     public boolean wasLastCallSuccess() {

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -19,6 +19,7 @@
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.ApplicationInfo;
 import android.content.pm.LauncherActivityInfo;
 import android.graphics.Rect;
 import android.os.Bundle;
@@ -72,6 +73,7 @@ public abstract LauncherActivityInfo resolveActivity(Intent intent,
             UserHandle user);
     public abstract void startActivityForProfile(ComponentName component, UserHandle user,
             Rect sourceBounds, Bundle opts);
+    public abstract ApplicationInfo getApplicationInfo(String packageName, UserHandle user);
     public abstract void showAppDetailsForProfile(ComponentName component, UserHandle user);
     public abstract void addOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);
     public abstract void removeOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);

File: src/com/android/launcher3/shortcuts/DeepShortcutManager.java
Patch:
@@ -65,7 +65,8 @@ private DeepShortcutManager(Context context) {
     }
 
     public static boolean supportsShortcuts(ItemInfo info) {
-        return info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION;
+        return info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION
+                && !info.isDisabled();
     }
 
     public boolean wasLastCallSuccess() {

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -535,7 +535,6 @@ public void animateOpen() {
         }
 
         mIsOpen = true;
-        mFolderIcon.growAndFadeOut();
 
         mContent.completePendingPageChanges();
         if (!mDragInProgress) {
@@ -552,6 +551,8 @@ public void animateOpen() {
         prepareReveal();
         centerAboutIcon();
 
+        mFolderIcon.growAndFadeOut();
+
         AnimatorSet anim = LauncherAnimUtils.createAnimatorSet();
         int width = getPaddingLeft() + getPaddingRight() + mContent.getDesiredWidth();
         int height = getFolderHeight();
@@ -1088,6 +1089,7 @@ private void centerAboutIcon() {
         int folderPivotY = height / 2 + (centeredTop - top);
         setPivotX(folderPivotX);
         setPivotY(folderPivotY);
+
         mFolderIconPivotX = (int) (mFolderIcon.getMeasuredWidth() *
                 (1.0f * folderPivotX / width));
         mFolderIconPivotY = (int) (mFolderIcon.getMeasuredHeight() *

File: src/com/android/launcher3/popup/PopupDataProvider.java
Patch:
@@ -172,7 +172,7 @@ private void updateLauncherIconBadges(Set<PackageUserKey> updatedBadges,
     private boolean updateBadgeIcon(BadgeInfo badgeInfo) {
         boolean hadNotificationToShow = badgeInfo.hasNotificationToShow();
         NotificationInfo notificationInfo = null;
-        NotificationListener notificationListener = NotificationListener.getInstance();
+        NotificationListener notificationListener = NotificationListener.getInstanceIfConnected();
         if (notificationListener != null && badgeInfo.getNotificationKeys().size() == 1) {
             StatusBarNotification[] activeNotifications = notificationListener
                     .getActiveNotifications(new String[] {badgeInfo.getNotificationKeys().get(0)});
@@ -222,13 +222,13 @@ public String[] getNotificationKeysForItem(ItemInfo info) {
 
     /** This makes a potentially expensive binder call and should be run on a background thread. */
     public List<StatusBarNotification> getStatusBarNotificationsForKeys(String[] notificationKeys) {
-        NotificationListener notificationListener = NotificationListener.getInstance();
+        NotificationListener notificationListener = NotificationListener.getInstanceIfConnected();
         return notificationListener == null ? Collections.EMPTY_LIST
                 : notificationListener.getNotificationsForKeys(notificationKeys);
     }
 
     public void cancelNotification(String notificationKey) {
-        NotificationListener notificationListener = NotificationListener.getInstance();
+        NotificationListener notificationListener = NotificationListener.getInstanceIfConnected();
         if (notificationListener == null) {
             return;
         }

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -57,6 +57,7 @@
 import com.android.launcher3.util.CellAndSpan;
 import com.android.launcher3.util.GridOccupancy;
 import com.android.launcher3.util.ParcelableSparseArray;
+import com.android.launcher3.util.Themes;
 import com.android.launcher3.util.Thunk;
 
 import java.lang.annotation.Retention;
@@ -236,7 +237,7 @@ public CellLayout(Context context, AttributeSet attrs, int defStyle) {
         for (int i = 0; i < mDragOutlines.length; i++) {
             mDragOutlines[i] = new Rect(-1, -1, -1, -1);
         }
-        mDragOutlinePaint.setColor(getResources().getColor(R.color.outline_color));
+        mDragOutlinePaint.setColor(Themes.getAttrColor(context, android.R.attr.textColorPrimary));
 
         // When dragging things around the home screens, we show a green outline of
         // where the item will land. The outlines gradually fade out, leaving a trail

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -65,6 +65,7 @@
 import android.view.KeyEvent;
 import android.view.KeyboardShortcutGroup;
 import android.view.KeyboardShortcutInfo;
+import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MotionEvent;
 import android.view.View;
@@ -1432,8 +1433,8 @@ View createShortcut(ShortcutInfo info) {
      * @return A View inflated from layoutResId.
      */
     public View createShortcut(ViewGroup parent, ShortcutInfo info) {
-        BubbleTextView favorite = (BubbleTextView) getLayoutInflater().inflate(R.layout.app_icon,
-                parent, false);
+        BubbleTextView favorite = (BubbleTextView) LayoutInflater.from(parent.getContext())
+                .inflate(R.layout.app_icon, parent, false);
         favorite.applyFromShortcutInfo(info);
         favorite.setCompoundDrawablePadding(mDeviceProfile.iconDrawablePaddingPx);
         favorite.setOnClickListener(this);

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -177,7 +177,8 @@ public static FolderIcon fromXml(int resId, Launcher launcher, ViewGroup group,
         }
 
         DeviceProfile grid = launcher.getDeviceProfile();
-        FolderIcon icon = (FolderIcon) LayoutInflater.from(launcher).inflate(resId, group, false);
+        FolderIcon icon = (FolderIcon) LayoutInflater.from(group.getContext())
+                .inflate(resId, group, false);
 
         // For performance and compatibility reasons we render the preview using a software layer.
         // In particular, hardware path clipping has spotty ecosystem support and bad performance.

File: src/com/android/launcher3/pageindicators/CaretDrawable.java
Patch:
@@ -46,7 +46,7 @@ public CaretDrawable(Context context) {
         final int strokeWidth = res.getDimensionPixelSize(R.dimen.all_apps_caret_stroke_width);
         final int shadowSpread = res.getDimensionPixelSize(R.dimen.all_apps_caret_shadow_spread);
 
-        mCaretPaint.setColor(res.getColor(R.color.workspace_icon_text_color));
+        mCaretPaint.setColor(Themes.getAttrColor(context, android.R.attr.textColorPrimary));
         mCaretPaint.setAntiAlias(true);
         mCaretPaint.setStrokeWidth(strokeWidth);
         mCaretPaint.setStyle(Paint.Style.STROKE);

File: src/com/android/launcher3/PinchAnimationManager.java
Patch:
@@ -24,6 +24,7 @@
 import android.view.View;
 import android.view.animation.LinearInterpolator;
 
+import com.android.launcher3.anim.AnimationLayerSet;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Action;
 import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 
@@ -211,7 +212,8 @@ private void animateScrim(boolean show) {
     }
 
     private void animateShowHideView(int index, final View view, boolean show) {
-        Animator animator = new LauncherViewPropertyAnimator(view).alpha(show ? 1 : 0).withLayer();
+        Animator animator = ObjectAnimator.ofFloat(view, View.ALPHA, show ? 1 : 0);
+        animator.addListener(new AnimationLayerSet(view));
         if (show) {
             view.setVisibility(View.VISIBLE);
         } else {

File: src/com/android/launcher3/notification/NotificationMainView.java
Patch:
@@ -32,7 +32,6 @@
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAnimUtils;
-import com.android.launcher3.LauncherViewPropertyAnimator;
 import com.android.launcher3.R;
 import com.android.launcher3.graphics.IconPalette;
 import com.android.launcher3.userevent.nano.LauncherLogProto;
@@ -102,8 +101,8 @@ public void applyNotificationInfo(NotificationInfo mainNotification, View iconVi
         setTag(new ItemInfo());
         if (animate) {
             AnimatorSet animation = LauncherAnimUtils.createAnimatorSet();
-            Animator textFade = new LauncherViewPropertyAnimator(mTextView).alpha(1);
-            Animator titleFade = new LauncherViewPropertyAnimator(mTitleView).alpha(1);
+            Animator textFade = ObjectAnimator.ofFloat(mTextView, View.ALPHA, 1);
+            Animator titleFade = ObjectAnimator.ofFloat(mTitleView, View.ALPHA, 1);
             ValueAnimator colorChange = ObjectAnimator.ofObject(mColorBackground, "color",
                     mArgbEvaluator, mIconPalette.secondaryColor, mIconPalette.backgroundColor);
             animation.playTogether(textFade, titleFade, colorChange);

File: src/com/android/launcher3/model/GridSizeMigrationTask.java
Patch:
@@ -918,7 +918,7 @@ public static boolean migrateGridIfNeeded(Context context) {
         String gridSizeString = getPointString(idp.numColumns, idp.numRows);
 
         if (gridSizeString.equals(prefs.getString(KEY_MIGRATION_SRC_WORKSPACE_SIZE, "")) &&
-                idp.numHotseatIcons != prefs.getInt(KEY_MIGRATION_SRC_HOTSEAT_COUNT, idp.numHotseatIcons)) {
+                idp.numHotseatIcons == prefs.getInt(KEY_MIGRATION_SRC_HOTSEAT_COUNT, idp.numHotseatIcons)) {
             // Skip if workspace and hotseat sizes have not changed.
             return true;
         }

File: src/com/android/launcher3/dynamicui/ColorExtractionService.java
Patch:
@@ -98,7 +98,7 @@ private Palette getHotseatPalette() {
                 if (bitmap != null) {
                     return Palette.from(bitmap).clearFilters().generate();
                 }
-            } catch (IOException e) {
+            } catch (IOException | NullPointerException e) {
                 Log.e(TAG, "Fetching partial bitmap failed, trying old method", e);
             }
         }
@@ -129,7 +129,7 @@ private Palette getStatusBarPalette() {
                 if (bitmap != null) {
                     return Palette.from(bitmap).clearFilters().generate();
                 }
-            } catch (IOException e) {
+            } catch (IOException | NullPointerException e) {
                 Log.e(TAG, "Fetching partial bitmap failed, trying old method", e);
             }
         }

File: src/com/android/launcher3/model/GridSizeMigrationTask.java
Patch:
@@ -900,7 +900,7 @@ public static boolean migrateGridIfNeeded(Context context) {
         String gridSizeString = getPointString(idp.numColumns, idp.numRows);
 
         if (gridSizeString.equals(prefs.getString(KEY_MIGRATION_SRC_WORKSPACE_SIZE, "")) &&
-                idp.numHotseatIcons != prefs.getInt(KEY_MIGRATION_SRC_HOTSEAT_COUNT, idp.numHotseatIcons)) {
+                idp.numHotseatIcons == prefs.getInt(KEY_MIGRATION_SRC_HOTSEAT_COUNT, idp.numHotseatIcons)) {
             // Skip if workspace and hotseat sizes have not changed.
             return true;
         }

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -28,6 +28,7 @@
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.dynamicui.ExtractionUtils;
+import com.android.launcher3.model.GridSizeMigrationTask;
 import com.android.launcher3.util.ConfigMonitor;
 import com.android.launcher3.util.Preconditions;
 import com.android.launcher3.util.TestingUtils;
@@ -53,6 +54,8 @@ public static LauncherAppState getInstance(final Context context) {
         if (INSTANCE == null) {
             if (Looper.myLooper() == Looper.getMainLooper()) {
                 INSTANCE = new LauncherAppState(context.getApplicationContext());
+                GridSizeMigrationTask.logDeviceProfileIfChanged(
+                        INSTANCE.getInvariantDeviceProfile(), context);
             } else {
                 try {
                     return new MainThreadExecutor().submit(new Callable<LauncherAppState>() {

File: src/com/android/launcher3/graphics/ShadowGenerator.java
Patch:
@@ -39,9 +39,9 @@ public class ShadowGenerator {
 
     // Percent of actual icon size
     private static final float KEY_SHADOW_DISTANCE = 1f/48;
-    private static final int KEY_SHADOW_ALPHA = 61;
+    public static final int KEY_SHADOW_ALPHA = 61;
 
-    private static final int AMBIENT_SHADOW_ALPHA = 30;
+    public static final int AMBIENT_SHADOW_ALPHA = 30;
 
     private static final Object LOCK = new Object();
     // Singleton object guarded by {@link #LOCK}

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -69,10 +69,10 @@ public PendingAppWidgetHostView(Context context, LauncherAppWidgetInfo info,
         mDisabledForSafeMode = disabledForSafeMode;
 
         mPaint = new TextPaint();
-        mPaint.setColor(0xFFFFFFFF);
+        mPaint.setColor(Utilities.getAttrColor(getContext(), android.R.attr.textColorPrimary));
         mPaint.setTextSize(TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX,
                 mLauncher.getDeviceProfile().iconTextSizePx, getResources().getDisplayMetrics()));
-        setBackgroundResource(R.drawable.quantum_panel_dark);
+        setBackgroundResource(R.drawable.round_rect_primary);
         setWillNotDraw(false);
 
         setElevation(getResources().getDimension(R.dimen.pending_widget_elevation));

File: src/com/android/launcher3/graphics/ShadowGenerator.java
Patch:
@@ -39,9 +39,9 @@ public class ShadowGenerator {
 
     // Percent of actual icon size
     private static final float KEY_SHADOW_DISTANCE = 1f/48;
-    private static final int KEY_SHADOW_ALPHA = 61;
+    public static final int KEY_SHADOW_ALPHA = 61;
 
-    private static final int AMBIENT_SHADOW_ALPHA = 30;
+    public static final int AMBIENT_SHADOW_ALPHA = 30;
 
     private static final Object LOCK = new Object();
     // Singleton object guarded by {@link #LOCK}

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3993,7 +3993,7 @@ public boolean evaluate(ItemInfo info, View v) {
                 if (info instanceof ShortcutInfo && v instanceof BubbleTextView
                         && packageUserKey.updateFromItemInfo(info)) {
                     if (updatedBadges.contains(packageUserKey)) {
-                        ((BubbleTextView) v).applyBadgeState(info);
+                        ((BubbleTextView) v).applyBadgeState(info, true /* animate */);
                         folderIds.add(info.container);
                     }
                 }

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -582,8 +582,8 @@ private void drop(DropTarget dropTarget, Runnable flingAnimation) {
             }
         }
         final View dropTargetAsView = dropTarget instanceof View ? (View) dropTarget : null;
-        mLauncher.getUserEventDispatcher().logDragNDrop(mDragObject, dropTargetAsView);
         if (!mIsInPreDrag) {
+            mLauncher.getUserEventDispatcher().logDragNDrop(mDragObject, dropTargetAsView);
             mDragObject.dragSource.onDropCompleted(
                     dropTargetAsView, mDragObject, flingAnimation != null, accepted);
         }

File: src/com/android/launcher3/notification/NotificationInfo.java
Patch:
@@ -85,6 +85,7 @@ public void onClick(View view) {
                 view, 0, 0, view.getWidth(), view.getHeight()).toBundle();
         try {
             intent.send(null, 0, null, null, null, null, activityOptions);
+            launcher.getUserEventDispatcher().logNotificationLaunch(view, intent);
         } catch (PendingIntent.CanceledException e) {
             e.printStackTrace();
         }

File: src/com/android/launcher3/popup/PopupContainerWithArrow.java
Patch:
@@ -696,7 +696,7 @@ public void onDragEnd() {
     @Override
     public void fillInLogContainerData(View v, ItemInfo info, Target target, Target targetParent) {
         target.itemType = ItemType.DEEPSHORTCUT;
-        // TODO: add target.rank
+        target.rank = info.rank;
         targetParent.containerType = ContainerType.DEEPSHORTCUTS;
     }
 

File: src/com/android/launcher3/popup/PopupPopulator.java
Patch:
@@ -171,6 +171,7 @@ public void run() {
                     // Use unbadged icon for the menu.
                     si.iconBitmap = LauncherIcons.createShortcutIcon(
                             shortcut, launcher, false /* badged */);
+                    si.rank = i;
                     uiHandler.post(new UpdateShortcutChild(container, shortcutViews.get(i),
                             si, shortcut));
                 }

File: src/com/android/launcher3/graphics/IconPalette.java
Patch:
@@ -32,6 +32,8 @@ public class IconPalette {
     private static final boolean DEBUG = false;
     private static final String TAG = "IconPalette";
 
+    public static final IconPalette FOLDER_ICON_PALETTE = new IconPalette(Color.WHITE);
+
     private static final float MIN_PRELOAD_COLOR_SATURATION = 0.2f;
     private static final float MIN_PRELOAD_COLOR_LIGHTNESS = 0.6f;
     private static final int DEFAULT_PRELOAD_COLOR = 0xFF009688;

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -196,9 +196,7 @@ public DeviceProfile(Context context, InvariantDeviceProfile inv,
         hotseatBarBottomPaddingPx = 0;
         hotseatLandGutterPx = res.getDimensionPixelSize(R.dimen.dynamic_grid_hotseat_gutter_width);
 
-        int badgeSize = res.getDimensionPixelSize(R.dimen.badge_size);
-        int badgeTextSize = res.getDimensionPixelSize(R.dimen.badge_text_size);
-        mBadgeRenderer = new BadgeRenderer(badgeSize, badgeTextSize);
+        mBadgeRenderer = new BadgeRenderer(context);
 
         // Determine sizes.
         widthPx = width;

File: src/com/android/launcher3/notification/NotificationListener.java
Patch:
@@ -24,7 +24,6 @@
 import android.service.notification.StatusBarNotification;
 import android.support.annotation.Nullable;
 import android.support.v4.util.Pair;
-import android.util.Log;
 
 import com.android.launcher3.LauncherModel;
 import com.android.launcher3.config.FeatureFlags;

File: src/com/android/launcher3/notification/NotificationMainView.java
Patch:
@@ -20,7 +20,6 @@
 import android.animation.AnimatorSet;
 import android.animation.ValueAnimator;
 import android.content.Context;
-import android.support.annotation.Nullable;
 import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.View;

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -28,6 +28,7 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_USE_SYSTEM_DRAG_DRIVER = true;
     public static boolean LAUNCHER3_DISABLE_PINCH_TO_OVERVIEW = false;
     public static boolean LAUNCHER3_ALL_APPS_PULL_UP = true;
+    public static boolean LAUNCHER3_NEW_FOLDER_ANIMATION = false;
 
     // Feature flag to enable moving the QSB on the 0th screen of the workspace.
     public static final boolean QSB_ON_FIRST_SCREEN = true;

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -120,7 +120,7 @@ public float getInterpolation(float input) {
 
     public FastBitmapDrawable(Bitmap b) {
         mBitmap = b;
-        setBounds(0, 0, b.getWidth(), b.getHeight());
+        setFilterBitmap(true);
     }
 
     public void applyIconBadge(BadgeInfo badgeInfo, BadgeRenderer badgeRenderer) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -72,6 +72,7 @@
 import com.android.launcher3.folder.Folder;
 import com.android.launcher3.folder.FolderIcon;
 import com.android.launcher3.graphics.DragPreviewProvider;
+import com.android.launcher3.graphics.PreloadIconDrawable;
 import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3987,8 +3987,8 @@ public void updateIconBadges(final Set<PackageUserKey> updatedBadges) {
         mapOverItems(MAP_RECURSE, new ItemOperator() {
             @Override
             public boolean evaluate(ItemInfo info, View v) {
-                if (info instanceof ShortcutInfo && v instanceof BubbleTextView) {
-                    packageUserKey.updateFromItemInfo(info);
+                if (info instanceof ShortcutInfo && v instanceof BubbleTextView
+                        && packageUserKey.updateFromItemInfo(info)) {
                     if (updatedBadges.contains(packageUserKey)) {
                         ((BubbleTextView) v).applyBadgeState(info);
                     }

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -478,8 +478,7 @@ public void setInsets(Rect insets) {
     public void updateIconBadges(Set<PackageUserKey> updatedBadges) {
         final PackageUserKey packageUserKey = new PackageUserKey(null, null);
         for (AlphabeticalAppsList.AdapterItem app : mApps.getAdapterItems()) {
-            if (app.appInfo != null) {
-                packageUserKey.updateFromItemInfo(app.appInfo);
+            if (app.appInfo != null && packageUserKey.updateFromItemInfo(app.appInfo)) {
                 if (updatedBadges.contains(packageUserKey)) {
                     mAdapter.notifyItemChanged(app.position);
                 }

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -163,8 +163,8 @@ public void onReceive(Context context, Intent data) {
         if (info != null) {
             if (!info.isLauncherActivity()) {
                 // Since its a custom shortcut, verify that it is safe to launch.
-                if (!PackageManagerHelper.hasPermissionForActivity(
-                        context, info.launchIntent, null)) {
+                if (!new PackageManagerHelper(context).hasPermissionForActivity(
+                        info.launchIntent, null)) {
                     // Target cannot be launched, or requires some special permission to launch
                     Log.e(TAG, "Ignoring malicious intent " + info.launchIntent.toUri(0));
                     return;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1464,8 +1464,8 @@ private void completeAddShortcut(Intent data, long container, long screenId, int
         if (info == null) {
             info = InstallShortcutReceiver.fromShortcutIntent(this, data);
 
-            if (info == null || !PackageManagerHelper.hasPermissionForActivity(
-                    this, info.intent, args.getPendingIntent().getComponent().getPackageName())) {
+            if (info == null || !new PackageManagerHelper(this).hasPermissionForActivity(
+                    info.intent, args.getPendingIntent().getComponent().getPackageName())) {
                 // The app is trying to add a shortcut without sufficient permissions
                 Log.e(TAG, "Ignoring malicious intent " + info.intent.toUri(0));
                 return;

File: src/com/android/launcher3/model/SdCardAvailableReceiver.java
Patch:
@@ -54,7 +54,7 @@ public SdCardAvailableReceiver(LauncherModel model, Context context,
     @Override
     public void onReceive(Context context, Intent intent) {
         final LauncherAppsCompat launcherApps = LauncherAppsCompat.getInstance(context);
-        final PackageManager manager = context.getPackageManager();
+        final PackageManagerHelper pmHelper = new PackageManagerHelper(context);
         for (Entry<UserHandle, ArrayList<String>> entry : mPackages.entrySet()) {
             UserHandle user = entry.getKey();
 
@@ -63,7 +63,7 @@ public void onReceive(Context context, Intent intent) {
 
             for (String pkg : new HashSet<>(entry.getValue())) {
                 if (!launcherApps.isPackageEnabledForProfile(pkg, user)) {
-                    if (PackageManagerHelper.isAppOnSdcard(manager, pkg)) {
+                    if (pmHelper.isAppOnSdcard(pkg)) {
                         packagesUnavailable.add(pkg);
                     } else {
                         packagesRemoved.add(pkg);

File: src/com/android/launcher3/popup/PopupDataProvider.java
Patch:
@@ -148,7 +148,7 @@ public BadgeInfo getBadgeInfoForItem(ItemInfo info) {
     }
 
     public String[] getNotificationKeysForItem(ItemInfo info) {
-        BadgeInfo badgeInfo = mPackageUserToBadgeInfos.get(PackageUserKey.fromItemInfo(info));
+        BadgeInfo badgeInfo = getBadgeInfoForItem(info);
         if (badgeInfo == null) { return new String[0]; }
         List<String> notificationKeys = badgeInfo.getNotificationKeys();
         return notificationKeys.toArray(new String[notificationKeys.size()]);

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -229,7 +229,7 @@ public void run() {
             }
         };
         dragLayer.animateView(d.dragView, from, to, scale, 1f, 1f, 0.1f, 0.1f,
-                mLauncher.getDragController().isExternalDrag() ? 1 : DRAG_VIEW_DROP_DURATION,
+                DRAG_VIEW_DROP_DURATION,
                 new DecelerateInterpolator(2),
                 new LinearInterpolator(), onAnimationEndRunnable,
                 DragLayer.ANIMATION_END_DISAPPEAR, null);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2109,7 +2109,7 @@ private void processShortcutFromDrop(PendingAddShortcutInfo info) {
     private void addAppWidgetFromDrop(PendingAddWidgetInfo info) {
         AppWidgetHostView hostView = info.boundWidget;
         int appWidgetId;
-        WidgetAddFlowHandler addFlowHandler = info.getHander();
+        WidgetAddFlowHandler addFlowHandler = info.getHandler();
         if (hostView != null) {
             // In the case where we've prebound the widget, we remove it from the DragLayer
             if (LOGD) {

File: src/com/android/launcher3/widget/PendingAddWidgetInfo.java
Patch:
@@ -52,7 +52,7 @@ public PendingAddWidgetInfo(LauncherAppWidgetProviderInfo i) {
         minSpanY = i.minSpanY;
     }
 
-    public WidgetAddFlowHandler getHander() {
+    public WidgetAddFlowHandler getHandler() {
         return new WidgetAddFlowHandler(info);
     }
 }

File: src/com/android/launcher3/notification/NotificationFooterLayout.java
Patch:
@@ -40,7 +40,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 /**
  * A {@link LinearLayout} that contains icons of notifications. If there is only one icon,
@@ -191,7 +190,7 @@ public void onAnimationEnd(Animator animation) {
         animation.start();
     }
 
-    public void trimNotifications(Set<String> notifications) {
+    public void trimNotifications(List<String> notifications) {
         if (!isAttachedToWindow() || mIconRow.getChildCount() == 0) {
             return;
         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -85,7 +85,7 @@
 import com.android.launcher3.allapps.AllAppsTransitionController;
 import com.android.launcher3.allapps.DefaultAppSearchController;
 import com.android.launcher3.anim.AnimationLayerSet;
-import com.android.launcher3.badge.NotificationListener;
+import com.android.launcher3.notification.NotificationListener;
 import com.android.launcher3.popup.PopupDataProvider;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;

File: src/com/android/launcher3/badge/BadgeInfo.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.launcher3.badge;
 
+import com.android.launcher3.notification.NotificationInfo;
 import com.android.launcher3.util.PackageUserKey;
 
 import java.util.HashSet;

File: src/com/android/launcher3/graphics/IconPalette.java
Patch:
@@ -26,16 +26,18 @@ public class IconPalette {
 
     public int backgroundColor;
     public int textColor;
+    public int secondaryColor;
 
     public static IconPalette fromDominantColor(int dominantColor) {
         IconPalette palette = new IconPalette();
         palette.backgroundColor = getMutedColor(dominantColor);
         palette.textColor = getTextColorForBackground(palette.backgroundColor);
+        palette.secondaryColor = getLowContrastColor(palette.backgroundColor);
         return palette;
     }
 
     private static int getMutedColor(int color) {
-        int alpha = (int) (255 * 0.2f);
+        int alpha = (int) (255 * 0.15f);
         return ColorUtils.compositeColors(ColorUtils.setAlphaComponent(color, alpha), Color.WHITE);
     }
 

File: src/com/android/launcher3/notification/NotificationListener.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.android.launcher3.badge;
+package com.android.launcher3.notification;
 
 import android.app.Notification;
 import android.os.Handler;
@@ -24,6 +24,7 @@
 import android.service.notification.StatusBarNotification;
 import android.support.annotation.Nullable;
 import android.support.v4.util.Pair;
+import android.util.Log;
 
 import com.android.launcher3.LauncherModel;
 import com.android.launcher3.config.FeatureFlags;

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -221,7 +221,7 @@ public DragView startDrag(Bitmap b, int dragLayerX, int dragLayerY,
         if (!mIsInPreDrag) {
             callOnDragStart();
         } else if (mOptions.preDragCondition != null) {
-            mOptions.preDragCondition.onPreDragStart();
+            mOptions.preDragCondition.onPreDragStart(mDragObject);
         }
 
         mLastTouch[0] = mMotionDownX;
@@ -236,7 +236,7 @@ private void callOnDragStart() {
             listener.onDragStart(mDragObject, mOptions);
         }
         if (mOptions.preDragCondition != null) {
-            mOptions.preDragCondition.onPreDragEnd(true /* dragStarted*/);
+            mOptions.preDragCondition.onPreDragEnd(mDragObject, true /* dragStarted*/);
         }
         mIsInPreDrag = false;
     }
@@ -335,7 +335,7 @@ public void run() {
 
     private void callOnDragEnd() {
         if (mIsInPreDrag && mOptions.preDragCondition != null) {
-            mOptions.preDragCondition.onPreDragEnd(false /* dragStarted*/);
+            mOptions.preDragCondition.onPreDragEnd(mDragObject, false /* dragStarted*/);
         }
         mIsInPreDrag = false;
         mOptions = null;

File: src/com/android/launcher3/popup/PopupContainerWithArrow.java
Patch:
@@ -474,12 +474,12 @@ public boolean shouldStartDrag(double distanceDragged) {
             }
 
             @Override
-            public void onPreDragStart() {
+            public void onPreDragStart(DropTarget.DragObject dragObject) {
                 mOriginalIcon.setVisibility(INVISIBLE);
             }
 
             @Override
-            public void onPreDragEnd(boolean dragStarted) {
+            public void onPreDragEnd(DropTarget.DragObject dragObject, boolean dragStarted) {
                 if (!dragStarted) {
                     mOriginalIcon.setVisibility(VISIBLE);
                     mLauncher.getUserEventDispatcher().logDeepShortcutsOpen(mOriginalIcon);

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -37,7 +37,7 @@ static interface ChangeLogColumns extends BaseColumns {
         public static final String MODIFIED = "modified";
     }
 
-    static interface BaseLauncherColumns extends ChangeLogColumns {
+    static public interface BaseLauncherColumns extends ChangeLogColumns {
         /**
          * Descriptive name of the gesture that can be displayed to the user.
          * <P>Type: TEXT</P>

File: tests/src/com/android/launcher3/model/LoaderCursorTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 
+import static com.android.launcher3.LauncherSettings.BaseLauncherColumns.INTENT;
 import static com.android.launcher3.LauncherSettings.Favorites.CELLX;
 import static com.android.launcher3.LauncherSettings.Favorites.CELLY;
 import static com.android.launcher3.LauncherSettings.Favorites.CONTAINER;
@@ -73,7 +74,7 @@ public void setup() {
         mCursor = new MatrixCursor(new String[] {
                 ICON, ICON_PACKAGE, ICON_RESOURCE, TITLE,
                 _ID, CONTAINER, ITEM_TYPE, PROFILE_ID,
-                SCREEN, CELLX, CELLY, RESTORED
+                SCREEN, CELLX, CELLY, RESTORED, INTENT
         });
         mContext = InstrumentationRegistry.getTargetContext();
 

File: src/com/android/launcher3/AbstractFloatingView.java
Patch:
@@ -32,11 +32,11 @@
  */
 public abstract class AbstractFloatingView extends LinearLayout {
 
-    @IntDef(flag = true, value = {TYPE_FOLDER, TYPE_DEEPSHORTCUT_CONTAINER})
+    @IntDef(flag = true, value = {TYPE_FOLDER, TYPE_POPUP_CONTAINER_WITH_ARROW})
     @Retention(RetentionPolicy.SOURCE)
     public @interface FloatingViewType {}
     public static final int TYPE_FOLDER = 1 << 0;
-    public static final int TYPE_DEEPSHORTCUT_CONTAINER = 1 << 1;
+    public static final int TYPE_POPUP_CONTAINER_WITH_ARROW = 1 << 1;
 
     protected boolean mIsOpen;
 
@@ -119,6 +119,6 @@ public static void closeAllOpenViews(Launcher launcher) {
     }
 
     public static AbstractFloatingView getTopOpenView(Launcher launcher) {
-        return getOpenView(launcher, TYPE_FOLDER | TYPE_DEEPSHORTCUT_CONTAINER);
+        return getOpenView(launcher, TYPE_FOLDER | TYPE_POPUP_CONTAINER_WITH_ARROW);
     }
 }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -41,14 +41,12 @@
 import com.android.launcher3.IconCache.ItemInfoUpdateReceiver;
 import com.android.launcher3.badge.BadgeInfo;
 import com.android.launcher3.badge.BadgeRenderer;
-import com.android.launcher3.badging.NotificationInfo;
 import com.android.launcher3.folder.FolderIcon;
 import com.android.launcher3.graphics.DrawableFactory;
 import com.android.launcher3.graphics.HolographicOutlineHelper;
 import com.android.launcher3.model.PackageItemInfo;
 
 import java.text.NumberFormat;
-import java.util.List;
 
 /**
  * TextView that draws a bubble behind the text. We cannot use a LineBackgroundSpan

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -18,6 +18,7 @@
 import com.android.launcher3.AppWidgetResizeFrame;
 import com.android.launcher3.BubbleTextView;
 import com.android.launcher3.CellLayout;
+import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.DeleteDropTarget;
 import com.android.launcher3.DropTarget.DragObject;
 import com.android.launcher3.FolderInfo;
@@ -36,7 +37,6 @@
 import com.android.launcher3.dragndrop.DragController.DragListener;
 import com.android.launcher3.dragndrop.DragOptions;
 import com.android.launcher3.folder.Folder;
-import com.android.launcher3.shortcuts.DeepShortcutsContainer;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -231,7 +231,7 @@ public void onClick(DialogInterface dialog, int which) {
                 .show();
             return true;
         } else if (action == DEEP_SHORTCUTS) {
-            return DeepShortcutsContainer.showForIcon((BubbleTextView) host) != null;
+            return PopupContainerWithArrow.showForIcon((BubbleTextView) host) != null;
         }
         return false;
     }

File: src/com/android/launcher3/badge/BadgeInfo.java
Patch:
@@ -30,7 +30,7 @@ public class BadgeInfo {
     private PackageUserKey mPackageUserKey;
     /**
      * The keys of the notifications that this badge represents. These keys can later be
-     * used to retrieve {@link com.android.launcher3.badging.NotificationInfo}'s.
+     * used to retrieve {@link NotificationInfo}'s.
      */
     private Set<String> mNotificationKeys;
 

File: src/com/android/launcher3/badge/NotificationInfo.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.android.launcher3.badging;
+package com.android.launcher3.badge;
 
 import android.app.Notification;
 import android.app.PendingIntent;
@@ -25,7 +25,7 @@
 import android.view.View;
 
 import com.android.launcher3.Launcher;
-import com.android.launcher3.shortcuts.DeepShortcutsContainer;
+import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.util.PackageUserKey;
 
 /**
@@ -77,6 +77,6 @@ public void onClick(View view) {
         if (autoCancel) {
             launcher.getPopupDataProvider().cancelNotification(notificationKey);
         }
-        DeepShortcutsContainer.getOpen(launcher).close(true);
+        PopupContainerWithArrow.getOpen(launcher).close(true);
     }
 }

File: src/com/android/launcher3/badge/NotificationListener.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.android.launcher3.badging;
+package com.android.launcher3.badge;
 
 import android.app.Notification;
 import android.os.Handler;

File: src/com/android/launcher3/keyboard/CustomActionsPopup.java
Patch:
@@ -24,10 +24,10 @@
 import android.widget.PopupMenu;
 import android.widget.PopupMenu.OnMenuItemClickListener;
 
+import com.android.launcher3.popup.PopupContainerWithArrow;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.accessibility.LauncherAccessibilityDelegate;
-import com.android.launcher3.shortcuts.DeepShortcutsContainer;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -46,7 +46,7 @@ public class CustomActionsPopup implements OnMenuItemClickListener {
     public CustomActionsPopup(Launcher launcher, View icon) {
         mLauncher = launcher;
         mIcon = icon;
-        DeepShortcutsContainer container = DeepShortcutsContainer.getOpen(launcher);
+        PopupContainerWithArrow container = PopupContainerWithArrow.getOpen(launcher);
         if (container != null) {
             mDelegate = container.getAccessibilityDelegate();
         } else {

File: src/com/android/launcher3/popup/PopupDataProvider.java
Patch:
@@ -23,7 +23,7 @@
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.badge.BadgeInfo;
-import com.android.launcher3.badging.NotificationListener;
+import com.android.launcher3.badge.NotificationListener;
 import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.util.ComponentKey;
 import com.android.launcher3.util.MultiHashMap;

File: src/com/android/launcher3/badge/BadgeRenderer.java
Patch:
@@ -61,7 +61,7 @@ public void draw(Canvas canvas, IconPalette palette, BadgeInfo badgeInfo, Rect i
         mBackgroundRect.set(iconBounds.right - size, iconBounds.top, iconBounds.right,
                 iconBounds.top + size);
         canvas.drawOval(mBackgroundRect, mBackgroundPaint);
-        String notificationCount = badgeInfo.getNotificationCount();
+        String notificationCount = String.valueOf(badgeInfo.getNotificationCount());
         canvas.drawText(notificationCount,
                 mBackgroundRect.centerX(),
                 mBackgroundRect.centerY() + mTextHeight / 2,

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -718,7 +718,8 @@ public static DeepShortcutsContainer showForIcon(BubbleTextView icon) {
             icon.clearFocus();
             return null;
         }
-        List<String> ids = launcher.getShortcutIdsForItem((ItemInfo) icon.getTag());
+        List<String> ids = launcher.getPopupDataProvider().getShortcutIdsForItem(
+                (ItemInfo) icon.getTag());
         if (!ids.isEmpty()) {
             final DeepShortcutsContainer container =
                     (DeepShortcutsContainer) launcher.getLayoutInflater().inflate(

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -39,4 +39,6 @@ private FeatureFlags() {}
     public static final boolean LIGHT_STATUS_BAR = false;
     // When enabled allows to use any point on the fast scrollbar to start dragging.
     public static final boolean LAUNCHER3_DIRECT_SCROLL = true;
+    // When enabled icons are badged with the number of notifications associated with that app.
+    public static final boolean BADGE_ICONS = true;
 }

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -37,7 +37,7 @@ static interface ChangeLogColumns extends BaseColumns {
         public static final String MODIFIED = "modified";
     }
 
-    static interface BaseLauncherColumns extends ChangeLogColumns {
+    static public interface BaseLauncherColumns extends ChangeLogColumns {
         /**
          * Descriptive name of the gesture that can be displayed to the user.
          * <P>Type: TEXT</P>

File: tests/src/com/android/launcher3/model/LoaderCursorTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 
+import static com.android.launcher3.LauncherSettings.BaseLauncherColumns.INTENT;
 import static com.android.launcher3.LauncherSettings.Favorites.CELLX;
 import static com.android.launcher3.LauncherSettings.Favorites.CELLY;
 import static com.android.launcher3.LauncherSettings.Favorites.CONTAINER;
@@ -73,7 +74,7 @@ public void setup() {
         mCursor = new MatrixCursor(new String[] {
                 ICON, ICON_PACKAGE, ICON_RESOURCE, TITLE,
                 _ID, CONTAINER, ITEM_TYPE, PROFILE_ID,
-                SCREEN, CELLX, CELLY, RESTORED
+                SCREEN, CELLX, CELLY, RESTORED, INTENT
         });
         mContext = InstrumentationRegistry.getTargetContext();
 

File: src/com/android/launcher3/compat/ShortcutConfigActivityInfo.java
Patch:
@@ -35,6 +35,7 @@
 import android.widget.Toast;
 
 import com.android.launcher3.IconCache;
+import com.android.launcher3.Launcher;
 import com.android.launcher3.R;
 import com.android.launcher3.Utilities;
 
@@ -67,7 +68,7 @@ public UserHandle getUser() {
 
     public abstract Drawable getFullResIcon(IconCache cache);
 
-    public boolean startConfigActivity(Activity activity, int requestCode) {
+    public boolean startConfigActivity(Launcher activity, int requestCode) {
         Intent intent = new Intent(Intent.ACTION_CREATE_SHORTCUT)
                 .setComponent(getComponent());
         try {
@@ -136,7 +137,7 @@ public Drawable getFullResIcon(IconCache cache) {
         }
 
         @Override
-        public boolean startConfigActivity(Activity activity, int requestCode) {
+        public boolean startConfigActivity(Launcher activity, int requestCode) {
             if (getUser().equals(Process.myUserHandle())) {
                 return super.startConfigActivity(activity, requestCode);
             }

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -36,7 +36,6 @@
 import com.android.launcher3.R;
 import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.accessibility.DragViewStateAnnouncer;
-import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.util.ItemInfoMatcher;
 import com.android.launcher3.util.Thunk;
 import com.android.launcher3.util.TouchController;
@@ -447,7 +446,8 @@ public boolean onControllerInterceptTouchEvent(MotionEvent ev) {
     /**
      * Call this from a drag source view.
      */
-    public boolean onDragEvent(DragEvent event) {
+    public boolean onDragEvent(long dragStartTime, DragEvent event) {
+        mFlingToDeleteHelper.recordDragEvent(dragStartTime, event);
         return mDragDriver != null && mDragDriver.onDragEvent(event);
     }
 

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -135,8 +135,6 @@ public void updateAppWidget(RemoteViews remoteViews) {
 
         // The provider info or the views might have changed.
         checkIfAutoAdvance();
-
-        mIsScrollable = checkScrollableRecursively(this);
     }
 
     private boolean checkScrollableRecursively(ViewGroup viewGroup) {
@@ -383,6 +381,8 @@ public void run() {
                 }
             });
         }
+
+        mIsScrollable = checkScrollableRecursively(this);
     }
 
     @Override

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -135,8 +135,6 @@ public void updateAppWidget(RemoteViews remoteViews) {
 
         // The provider info or the views might have changed.
         checkIfAutoAdvance();
-
-        mIsScrollable = checkScrollableRecursively(this);
     }
 
     private boolean checkScrollableRecursively(ViewGroup viewGroup) {
@@ -383,6 +381,8 @@ public void run() {
                 }
             });
         }
+
+        mIsScrollable = checkScrollableRecursively(this);
     }
 
     @Override

File: src/com/android/launcher3/LauncherAppWidgetInfo.java
Patch:
@@ -76,7 +76,7 @@ public class LauncherAppWidgetInfo extends ItemInfo {
      * Identifier for this widget when talking with
      * {@link android.appwidget.AppWidgetManager} for updates.
      */
-    int appWidgetId = NO_ID;
+    public int appWidgetId = NO_ID;
 
     public ComponentName providerName;
 

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -224,7 +224,7 @@ private boolean beginDraggingWidget(WidgetCell v) {
             scale = bounds.width() / (float) preview.getWidth();
         } else {
             PendingAddShortcutInfo createShortcutInfo = (PendingAddShortcutInfo) v.getTag();
-            Drawable icon = mIconCache.getFullResIcon(createShortcutInfo.activityInfo);
+            Drawable icon = createShortcutInfo.activityInfo.getFullResIcon(mIconCache);
             preview = LauncherIcons.createIconBitmap(icon, mLauncher);
             createItemInfo.spanX = createItemInfo.spanY = 1;
             scale = ((float) mLauncher.getDeviceProfile().iconSizePx) / preview.getWidth();

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -498,7 +498,9 @@ private static PendingInstallShortcutInfo decode(String encoded, Context context
                 DeepShortcutManager sm = DeepShortcutManager.getInstance(context);
                 List<ShortcutInfoCompat> si = sm.queryForFullDetails(
                         decoder.launcherIntent.getPackage(),
-                        Arrays.asList(ShortcutInfoCompat.EXTRA_SHORTCUT_ID), decoder.user);
+                        Arrays.asList(decoder.launcherIntent.getStringExtra(
+                                ShortcutInfoCompat.EXTRA_SHORTCUT_ID)),
+                        decoder.user);
                 if (si.isEmpty()) {
                     return null;
                 } else {

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -306,7 +306,7 @@ static boolean isSystemApp(Context context, Intent intent) {
      * @param bitmap The bitmap to scan
      * @param samples The approximate max number of samples to use.
      */
-    static int findDominantColorByHue(Bitmap bitmap, int samples) {
+    public static int findDominantColorByHue(Bitmap bitmap, int samples) {
         final int height = bitmap.getHeight();
         final int width = bitmap.getWidth();
         int sampleStride = (int) Math.sqrt((height * width) / samples);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3972,7 +3972,7 @@ public void updateRestoreItems(final HashSet<ItemInfo> updates) {
             public boolean evaluate(ItemInfo info, View v) {
                 if (info instanceof ShortcutInfo && v instanceof BubbleTextView
                         && updates.contains(info)) {
-                    ((BubbleTextView) v).applyState(false);
+                    ((BubbleTextView) v).applyPromiseState(false /* promiseStateChanged */);
                 } else if (v instanceof PendingAppWidgetHostView
                         && info instanceof LauncherAppWidgetInfo
                         && updates.contains(info)) {

File: tests/src/com/android/launcher3/model/LoaderCursorTest.java
Patch:
@@ -37,6 +37,7 @@
 import static com.android.launcher3.LauncherSettings.Favorites.ITEM_TYPE_APPLICATION;
 import static com.android.launcher3.LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
 import static com.android.launcher3.LauncherSettings.Favorites.PROFILE_ID;
+import static com.android.launcher3.LauncherSettings.Favorites.RESTORED;
 import static com.android.launcher3.LauncherSettings.Favorites.SCREEN;
 import static com.android.launcher3.LauncherSettings.Favorites.TITLE;
 import static com.android.launcher3.LauncherSettings.Favorites._ID;
@@ -72,7 +73,7 @@ public void setup() {
         mCursor = new MatrixCursor(new String[] {
                 ICON, ICON_PACKAGE, ICON_RESOURCE, TITLE,
                 _ID, CONTAINER, ITEM_TYPE, PROFILE_ID,
-                SCREEN, CELLX, CELLY,
+                SCREEN, CELLX, CELLY, RESTORED
         });
         mContext = InstrumentationRegistry.getTargetContext();
 

File: src/com/android/launcher3/model/LoaderCursor.java
Patch:
@@ -188,7 +188,7 @@ private String getTitle() {
     public ShortcutInfo getRestoredItemInfo(Intent intent, int promiseType) {
         final ShortcutInfo info = new ShortcutInfo();
         info.user = user;
-        info.promisedIntent = intent;
+        info.intent = intent;
 
         info.iconBitmap = loadIcon(info);
         // the fallback icon

File: src/com/android/launcher3/model/PackageUpdatedTask.java
Patch:
@@ -242,12 +242,10 @@ public void execute(Callbacks callbacks) {
                                             removedShortcuts.add(si);
                                             continue;
                                         }
-                                        si.promisedIntent = intent;
+                                        si.intent = intent;
                                     }
                                 }
 
-                                si.intent = si.promisedIntent;
-                                si.promisedIntent = null;
                                 si.status = ShortcutInfo.DEFAULT;
                                 infoUpdated = true;
                                 if (si.itemType == Favorites.ITEM_TYPE_APPLICATION) {

File: src/com/android/launcher3/IconProvider.java
Patch:
@@ -1,9 +1,8 @@
 package com.android.launcher3;
 
+import android.content.pm.LauncherActivityInfo;
 import android.graphics.drawable.Drawable;
 
-import com.android.launcher3.compat.LauncherActivityInfoCompat;
-
 import java.util.Locale;
 
 public class IconProvider {
@@ -26,7 +25,7 @@ public String getIconSystemState(String packageName) {
     }
 
 
-    public Drawable getIcon(LauncherActivityInfoCompat info, int iconDpi) {
+    public Drawable getIcon(LauncherActivityInfo info, int iconDpi) {
         return info.getIcon(iconDpi);
     }
 }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -25,6 +25,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
+import android.content.pm.LauncherActivityInfo;
 import android.content.pm.PackageManager;
 import android.net.Uri;
 import android.os.Handler;
@@ -40,7 +41,6 @@
 import android.util.MutableInt;
 
 import com.android.launcher3.compat.AppWidgetManagerCompat;
-import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.PackageInstallerCompat;
 import com.android.launcher3.compat.PackageInstallerCompat.PackageInstallInfo;
@@ -2015,7 +2015,7 @@ private void loadAllApps() {
             for (UserHandle user : profiles) {
                 // Query for the set of apps
                 final long qiaTime = DEBUG_LOADERS ? SystemClock.uptimeMillis() : 0;
-                final List<LauncherActivityInfoCompat> apps = mLauncherApps.getActivityList(null, user);
+                final List<LauncherActivityInfo> apps = mLauncherApps.getActivityList(null, user);
                 if (DEBUG_LOADERS) {
                     Log.d(TAG, "getActivityList took "
                             + (SystemClock.uptimeMillis()-qiaTime) + "ms for user " + user);
@@ -2029,7 +2029,7 @@ private void loadAllApps() {
                 boolean quietMode = mUserManager.isQuietModeEnabled(user);
                 // Create the ApplicationInfos
                 for (int i = 0; i < apps.size(); i++) {
-                    LauncherActivityInfoCompat app = apps.get(i);
+                    LauncherActivityInfo app = apps.get(i);
                     // This builds the icon bitmaps.
                     mBgAllAppsList.add(new AppInfo(mContext, app, user, quietMode), app);
                 }

File: src/com/android/launcher3/UninstallDropTarget.java
Patch:
@@ -4,14 +4,14 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ApplicationInfo;
+import android.content.pm.LauncherActivityInfo;
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.UserHandle;
 import android.os.UserManager;
 import android.util.AttributeSet;
 import android.widget.Toast;
 
-import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
 
 public class UninstallDropTarget extends ButtonDropTarget {
@@ -69,7 +69,7 @@ private static ComponentName getUninstallTarget(Context context, Object item) {
             }
         }
         if (intent != null) {
-            LauncherActivityInfoCompat info = LauncherAppsCompat.getInstance(context)
+            LauncherActivityInfo info = LauncherAppsCompat.getInstance(context)
                     .resolveActivity(intent, user);
             if (info != null
                     && (info.getApplicationInfo().flags & ApplicationInfo.FLAG_SYSTEM) == 0) {

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -19,6 +19,7 @@
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.LauncherActivityInfo;
 import android.graphics.Rect;
 import android.os.Bundle;
 import android.os.UserHandle;
@@ -56,9 +57,9 @@ public static LauncherAppsCompat getInstance(Context context) {
         }
     }
 
-    public abstract List<LauncherActivityInfoCompat> getActivityList(String packageName,
+    public abstract List<LauncherActivityInfo> getActivityList(String packageName,
             UserHandle user);
-    public abstract LauncherActivityInfoCompat resolveActivity(Intent intent,
+    public abstract LauncherActivityInfo resolveActivity(Intent intent,
             UserHandle user);
     public abstract void startActivityForProfile(ComponentName component, UserHandle user,
             Rect sourceBounds, Bundle opts);

File: src/com/android/launcher3/model/LoaderCursor.java
Patch:
@@ -21,6 +21,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.Intent.ShortcutIconResource;
+import android.content.pm.LauncherActivityInfo;
 import android.database.Cursor;
 import android.database.CursorWrapper;
 import android.graphics.Bitmap;
@@ -39,7 +40,6 @@
 import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
-import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.config.FeatureFlags;
@@ -234,7 +234,7 @@ public ShortcutInfo getAppShortcutInfo(
         Intent newIntent = new Intent(Intent.ACTION_MAIN, null);
         newIntent.addCategory(Intent.CATEGORY_LAUNCHER);
         newIntent.setComponent(componentName);
-        LauncherActivityInfoCompat lai = LauncherAppsCompat.getInstance(mContext)
+        LauncherActivityInfo lai = LauncherAppsCompat.getInstance(mContext)
                 .resolveActivity(newIntent, user);
         if ((lai == null) && !allowMissingTarget) {
             Log.d(TAG, "Missing activity found in getShortcutInfo: " + componentName);

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -18,6 +18,7 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.content.pm.LauncherActivityInfo;
 import android.os.Process;
 import android.os.UserHandle;
 
@@ -31,7 +32,6 @@
 import com.android.launcher3.MainThreadExecutor;
 import com.android.launcher3.R;
 import com.android.launcher3.ShortcutInfo;
-import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
 
@@ -92,7 +92,7 @@ public void processPackageAdd(String[] packages) {
         }
     }
 
-    public void processUserApps(List<LauncherActivityInfoCompat> apps) {
+    public void processUserApps(List<LauncherActivityInfo> apps) {
         Preconditions.assertWorkerThread();
         new ManagedProfilePackageHandler().processUserApps(apps, mUser);
     }

File: tests/src/com/android/launcher3/model/BaseModelUpdateTaskTestCase.java
Patch:
@@ -3,6 +3,7 @@
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.LauncherActivityInfo;
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.Bitmap.Config;
@@ -23,7 +24,6 @@
 import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherModel.BaseModelUpdateTask;
 import com.android.launcher3.LauncherModel.Callbacks;
-import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.util.ComponentKey;
 import com.android.launcher3.util.Provider;
@@ -189,7 +189,7 @@ public MyIconCache(Context context, InvariantDeviceProfile idp) {
         @Override
         protected CacheEntry cacheLocked(
                 @NonNull ComponentName componentName,
-                @NonNull Provider<LauncherActivityInfoCompat> infoProvider,
+                @NonNull Provider<LauncherActivityInfo> infoProvider,
                 UserHandle user, boolean usePackageIcon, boolean useLowResIcon) {
             CacheEntry entry = mCache.get(new ComponentKey(componentName, user));
             if (entry == null) {

File: tests/src/com/android/launcher3/ui/AllAppsAppLaunchTest.java
Patch:
@@ -1,12 +1,12 @@
 package com.android.launcher3.ui;
 
+import android.content.pm.LauncherActivityInfo;
 import android.os.Process;
 import android.support.test.uiautomator.By;
 import android.support.test.uiautomator.UiObject2;
 import android.support.test.uiautomator.Until;
 import android.test.suitebuilder.annotation.LargeTest;
 
-import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.util.Condition;
 import com.android.launcher3.util.Wait;
@@ -17,7 +17,7 @@
 @LargeTest
 public class AllAppsAppLaunchTest extends LauncherInstrumentationTestCase {
 
-    private LauncherActivityInfoCompat mSettingsApp;
+    private LauncherActivityInfo mSettingsApp;
 
     @Override
     protected void setUp() throws Exception {

File: tests/src/com/android/launcher3/ui/AllAppsIconToHomeTest.java
Patch:
@@ -1,12 +1,12 @@
 package com.android.launcher3.ui;
 
+import android.content.pm.LauncherActivityInfo;
 import android.os.Process;
 import android.support.test.uiautomator.By;
 import android.support.test.uiautomator.UiObject2;
 import android.support.test.uiautomator.Until;
 import android.test.suitebuilder.annotation.LargeTest;
 
-import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.util.Condition;
 import com.android.launcher3.util.Wait;
@@ -17,7 +17,7 @@
 @LargeTest
 public class AllAppsIconToHomeTest extends LauncherInstrumentationTestCase {
 
-    private LauncherActivityInfoCompat mSettingsApp;
+    private LauncherActivityInfo mSettingsApp;
 
     @Override
     protected void setUp() throws Exception {

File: tests/src/com/android/launcher3/ui/ShortcutsLaunchTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.android.launcher3.ui;
 
+import android.content.pm.LauncherActivityInfo;
 import android.graphics.Point;
 import android.os.Process;
 import android.support.test.uiautomator.By;
@@ -9,7 +10,6 @@
 import android.view.MotionEvent;
 
 import com.android.launcher3.R;
-import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.util.Condition;
 import com.android.launcher3.util.Wait;
@@ -20,7 +20,7 @@
 @LargeTest
 public class ShortcutsLaunchTest extends LauncherInstrumentationTestCase {
 
-    private LauncherActivityInfoCompat mSettingsApp;
+    private LauncherActivityInfo mSettingsApp;
 
     @Override
     protected void setUp() throws Exception {

File: tests/src/com/android/launcher3/ui/ShortcutsToHomeTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.android.launcher3.ui;
 
+import android.content.pm.LauncherActivityInfo;
 import android.graphics.Point;
 import android.os.Process;
 import android.support.test.uiautomator.By;
@@ -9,7 +10,6 @@
 import android.view.MotionEvent;
 
 import com.android.launcher3.R;
-import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.util.Condition;
 import com.android.launcher3.util.Wait;
@@ -20,7 +20,7 @@
 @LargeTest
 public class ShortcutsToHomeTest extends LauncherInstrumentationTestCase {
 
-    private LauncherActivityInfoCompat mSettingsApp;
+    private LauncherActivityInfo mSettingsApp;
 
     @Override
     protected void setUp() throws Exception {

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -320,7 +320,7 @@ static void updateWidgetSizeRanges(AppWidgetHostView widgetView, Launcher launch
 
     public static Rect getWidgetSizeRanges(Context context, int spanX, int spanY, Rect rect) {
         if (sCellSize == null) {
-            InvariantDeviceProfile inv = LauncherAppState.getInstance().getInvariantDeviceProfile();
+            InvariantDeviceProfile inv = LauncherAppState.getIDP(context);
 
             // Initiate cell sizes.
             sCellSize = new Point[2];

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -79,7 +79,7 @@ static AutoInstallsLayout get(Context context, AppWidgetHost appWidgetHost,
 
     static AutoInstallsLayout get(Context context, String pkg, Resources targetRes,
             AppWidgetHost appWidgetHost, LayoutParserCallback callback) {
-        InvariantDeviceProfile grid = LauncherAppState.getInstance().getInvariantDeviceProfile();
+        InvariantDeviceProfile grid = LauncherAppState.getIDP(context);
 
         // Try with grid size and hotseat count
         String layoutName = String.format(Locale.ENGLISH, FORMATTED_LAYOUT_RES_WITH_HOSTEAT,
@@ -182,7 +182,7 @@ public AutoInstallsLayout(Context context, AppWidgetHost appWidgetHost,
         mSourceRes = res;
         mLayoutId = layoutId;
 
-        mIdp = LauncherAppState.getInstance().getInvariantDeviceProfile();
+        mIdp = LauncherAppState.getIDP(context);
         mRowCount = mIdp.numRows;
         mColumnCount = mIdp.numColumns;
     }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -587,7 +587,7 @@ public void verifyHighRes() {
         if (getTag() instanceof ItemInfoWithIcon) {
             ItemInfoWithIcon info = (ItemInfoWithIcon) getTag();
             if (info.usingLowResIcon) {
-                mIconLoadRequest = LauncherAppState.getInstance().getIconCache()
+                mIconLoadRequest = LauncherAppState.getInstance(getContext()).getIconCache()
                         .updateIconInBackground(BubbleTextView.this, info);
             }
         }

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -734,7 +734,7 @@ public void run() {
 
                 if (mAppsToUpdate.isEmpty() && !mUpdatedPackages.isEmpty()) {
                     // No more app to update. Notify model.
-                    LauncherAppState.getInstance().getModel().onPackageIconsUpdated(
+                    LauncherAppState.getInstance(mContext).getModel().onPackageIconsUpdated(
                             mUpdatedPackages, mUserManager.getUserForSerialNumber(mUserSerial));
                 }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -356,7 +356,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         super.onCreate(savedInstanceState);
 
-        LauncherAppState app = LauncherAppState.getInstance();
+        LauncherAppState app = LauncherAppState.getInstance(this);
 
         // Load configuration-specific DeviceProfile
         mDeviceProfile =
@@ -1815,7 +1815,7 @@ public void onDestroy() {
         // been created. In this case, don't interfere with the new Launcher.
         if (mModel.isCurrentCallbacks(this)) {
             mModel.stopLoader();
-            LauncherAppState.getInstance().setLauncher(null);
+            LauncherAppState.getInstance(this).setLauncher(null);
         }
 
         if (mRotationPrefChangeHandler != null) {

File: src/com/android/launcher3/LauncherAppWidgetProviderInfo.java
Patch:
@@ -65,7 +65,7 @@ public LauncherAppWidgetProviderInfo(Context context, CustomAppWidget widget) {
     }
 
     public void initSpans(Context context) {
-        InvariantDeviceProfile idp = LauncherAppState.getInstance().getInvariantDeviceProfile();
+        InvariantDeviceProfile idp = LauncherAppState.getIDP(context);
 
         Point paddingLand = idp.landscapeProfile.getTotalWorkspacePadding();
         Point paddingPort = idp.portraitProfile.getTotalWorkspacePadding();
@@ -107,8 +107,7 @@ public Drawable getIcon(Context context, IconCache cache) {
         if (isCustomWidget) {
             return cache.getFullResIcon(provider.getPackageName(), icon);
         }
-        return super.loadIcon(context,
-                LauncherAppState.getInstance().getInvariantDeviceProfile().fillResIconDpi);
+        return super.loadIcon(context, LauncherAppState.getIDP(context).fillResIconDpi);
     }
 
     public String toString(PackageManager pm) {

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -556,8 +556,7 @@ private AutoInstallsLayout createWorkspaceLoaderFromAppRestriction(AppWidgetHost
     }
 
     private DefaultLayoutParser getDefaultLayoutParser(AppWidgetHost widgetHost) {
-        int defaultLayout = LauncherAppState.getInstance()
-                .getInvariantDeviceProfile().defaultLayoutId;
+        int defaultLayout = LauncherAppState.getIDP(getContext()).defaultLayoutId;
         return new DefaultLayoutParser(getContext(), widgetHost,
                 mOpenHelper, getContext().getResources(), defaultLayout);
     }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -235,7 +235,7 @@ public void updateFromDeepShortcutInfo(ShortcutInfoCompat shortcutInfo, Context
         disabledMessage = shortcutInfo.getDisabledMessage();
 
         // TODO: Use cache for this
-        LauncherAppState launcherAppState = LauncherAppState.getInstance();
+        LauncherAppState launcherAppState = LauncherAppState.getInstance(context);
         Drawable unbadgedDrawable = DeepShortcutManager.getInstance(context)
                 .getShortcutIconDrawable(shortcutInfo,
                         launcherAppState.getInvariantDeviceProfile().fillResIconDpi);
@@ -249,7 +249,7 @@ public void updateFromDeepShortcutInfo(ShortcutInfoCompat shortcutInfo, Context
 
     protected Bitmap getBadgedIcon(Bitmap unbadgedBitmap, ShortcutInfoCompat shortcutInfo,
             IconCache cache, Context context) {
-        unbadgedBitmap = LauncherIcons.addShadowToIcon(unbadgedBitmap);
+        unbadgedBitmap = LauncherIcons.addShadowToIcon(unbadgedBitmap, context);
         // Get the app info for the source activity.
         AppInfo appInfo = new AppInfo();
         appInfo.user = user;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1613,8 +1613,7 @@ protected void setWallpaperDimension() {
         Utilities.THREAD_POOL_EXECUTOR.execute(new Runnable() {
             @Override
             public void run() {
-                final Point size = LauncherAppState.getInstance()
-                        .getInvariantDeviceProfile().defaultWallpaperSize;
+                final Point size = LauncherAppState.getIDP(getContext()).defaultWallpaperSize;
                 if (size.x != mWallpaperManager.getDesiredMinimumWidth()
                         || size.y != mWallpaperManager.getDesiredMinimumHeight()) {
                     mWallpaperManager.suggestDesiredDimensions(size.x, size.y);

File: src/com/android/launcher3/compat/PackageInstallerCompatVL.java
Patch:
@@ -42,7 +42,7 @@ public class PackageInstallerCompatVL extends PackageInstallerCompat {
 
     PackageInstallerCompatVL(Context context) {
         mInstaller = context.getPackageManager().getPackageInstaller();
-        mCache = LauncherAppState.getInstance().getIconCache();
+        mCache = LauncherAppState.getInstance(context).getIconCache();
         mWorker = new Handler(LauncherModel.getWorkerLooper());
 
         mInstaller.registerSessionCallback(mCallback, mWorker);

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -96,9 +96,7 @@ public class FolderPagedView extends PagedView {
 
     public FolderPagedView(Context context, AttributeSet attrs) {
         super(context, attrs);
-        LauncherAppState app = LauncherAppState.getInstance();
-
-        InvariantDeviceProfile profile = app.getInvariantDeviceProfile();
+        InvariantDeviceProfile profile = LauncherAppState.getIDP(context);
         mMaxCountX = profile.numFolderColumns;
         mMaxCountY = profile.numFolderRows;
 

File: src/com/android/launcher3/model/LoaderCursor.java
Patch:
@@ -349,7 +349,7 @@ public void applyCommonProperties(ItemInfo info) {
      */
     public void checkAndAddItem(ItemInfo info, BgDataModel dataModel) {
         if (checkItemPlacement(info, dataModel.workspaceScreens)) {
-            dataModel.addItem(info, false);
+            dataModel.addItem(mContext, info, false);
         } else {
             markDeleted("Item position overlap");
         }

File: src/com/android/launcher3/provider/LauncherDbUtils.java
Patch:
@@ -76,8 +76,7 @@ public static boolean prepareScreenZeroToHostQsb(Context context, SQLiteDatabase
                 }
             }
 
-            new LossyScreenMigrationTask(
-                    context, LauncherAppState.getInstance().getInvariantDeviceProfile(), db)
+            new LossyScreenMigrationTask(context, LauncherAppState.getIDP(context), db)
                     .migrateScreen0();
             db.setTransactionSuccessful();
             return true;

File: src/com/android/launcher3/qsb/QsbContainerView.java
Patch:
@@ -102,7 +102,7 @@ private View createQsb(ViewGroup container) {
             }
 
             AppWidgetManagerCompat widgetManager = AppWidgetManagerCompat.getInstance(activity);
-            InvariantDeviceProfile idp = LauncherAppState.getInstance().getInvariantDeviceProfile();
+            InvariantDeviceProfile idp = LauncherAppState.getIDP(activity);
 
             Bundle opts = new Bundle();
             Rect size = AppWidgetResizeFrame.getWidgetSizeRanges(activity, idp.numColumns, 1, null);

File: src/com/android/launcher3/testing/ToggleWeightWatcher.java
Patch:
@@ -22,7 +22,7 @@ protected void onCreate(Bundle savedInstanceState) {
         show = !show;
         sp.edit().putBoolean(TestingUtils.SHOW_WEIGHT_WATCHER, show).apply();
 
-        Launcher launcher = (Launcher) LauncherAppState.getInstance().getModel().getCallback();
+        Launcher launcher = (Launcher) LauncherAppState.getInstance(this).getModel().getCallback();
         if (launcher != null && launcher.mWeightWatcher != null) {
             launcher.mWeightWatcher.setVisibility(show ? View.VISIBLE : View.GONE);
         }

File: src/com/android/launcher3/util/ContentWriter.java
Patch:
@@ -93,9 +93,9 @@ public ContentWriter put(String key, UserHandle user) {
      * Commits any pending validation and returns the final values.
      * Must not be called on UI thread.
      */
-    public ContentValues getValues() {
+    public ContentValues getValues(Context context) {
         Preconditions.assertNonUiThread();
-        if (mIcon != null && !LauncherAppState.getInstance().getIconCache()
+        if (mIcon != null && !LauncherAppState.getInstance(context).getIconCache()
                 .isDefaultIcon(mIcon, mUser)) {
             mValues.put(LauncherSettings.Favorites.ICON, Utilities.flattenBitmap(mIcon));
             mIcon = null;
@@ -105,7 +105,7 @@ public ContentValues getValues() {
 
     public int commit() {
         if (mCommitParams != null) {
-            return mContext.getContentResolver().update(mCommitParams.mUri, getValues(),
+            return mContext.getContentResolver().update(mCommitParams.mUri, getValues(mContext),
                     mCommitParams.mWhere, mCommitParams.mSelectionArgs);
         }
         return 0;

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -72,8 +72,8 @@ public static ManagedProfileHeuristic get(Context context, UserHandle user) {
     private ManagedProfileHeuristic(Context context, UserHandle user) {
         mContext = context;
         mUser = user;
-        mModel = LauncherAppState.getInstance().getModel();
-        mIconCache = LauncherAppState.getInstance().getIconCache();
+        mModel = LauncherAppState.getInstance(context).getModel();
+        mIconCache = LauncherAppState.getInstance(context).getIconCache();
     }
 
     public void processPackageRemoved(String[] packages) {

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -87,7 +87,7 @@ public WidgetsContainerView(Context context, AttributeSet attrs, int defStyleAtt
         mLauncher = Launcher.getLauncher(context);
         mDragController = mLauncher.getDragController();
         mAdapter = new WidgetsListAdapter(this, this, context);
-        mIconCache = (LauncherAppState.getInstance()).getIconCache();
+        mIconCache = LauncherAppState.getInstance(context).getIconCache();
         if (LOGD) {
             Log.d(TAG, "WidgetsContainerView constructor");
         }
@@ -303,7 +303,7 @@ public boolean isEmpty() {
 
     private WidgetPreviewLoader getWidgetPreviewLoader() {
         if (mWidgetPreviewLoader == null) {
-            mWidgetPreviewLoader = LauncherAppState.getInstance().getWidgetCache();
+            mWidgetPreviewLoader = LauncherAppState.getInstance(getContext()).getWidgetCache();
         }
         return mWidgetPreviewLoader;
     }

File: src/com/android/launcher3/widget/WidgetsListAdapter.java
Patch:
@@ -68,7 +68,7 @@ public WidgetsListAdapter(View.OnClickListener iconClickListener,
             View.OnLongClickListener iconLongClickListener,
             Context context) {
         mLayoutInflater = LayoutInflater.from(context);
-        mWidgetPreviewLoader = LauncherAppState.getInstance().getWidgetCache();
+        mWidgetPreviewLoader = LauncherAppState.getInstance(context).getWidgetCache();
 
         mIndexer = new AlphabeticIndexCompat(context);
 

File: tests/src/com/android/launcher3/model/AddWorkspaceItemsTaskTest.java
Patch:
@@ -164,7 +164,7 @@ private int setupWorkspaceWithHoles(int startId, long screenId, Rect... holes) {
                 info.cellX = x;
                 info.cellY = y;
                 info.container = LauncherSettings.Favorites.CONTAINER_DESKTOP;
-                bgDataModel.addItem(info, false);
+                bgDataModel.addItem(targetContext, info, false);
             }
         }
         return startId;

File: tests/src/com/android/launcher3/model/BaseModelUpdateTaskTestCase.java
Patch:
@@ -128,7 +128,7 @@ public void initializeData(String resourceName) throws Exception {
                         classMap.put(commands[1], Class.forName(commands[2]));
                         break;
                     case "bgItem":
-                        bgDataModel.addItem(
+                        bgDataModel.addItem(targetContext,
                                 (ItemInfo) initItem(classMap.get(commands[1]), commands, 2), false);
                         break;
                     case "allApps":

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -116,8 +116,9 @@ protected void onLauncherAppsAdded(
                     .isQuietModeEnabled(user);
             for (int i = 0; i < count; i++) {
                 LauncherActivityInstallInfo info = apps.get(i);
-                ShortcutInfo si = new AppInfo(mContext, info.info, user, mIconCache,
-                        quietModeEnabled, false /* useLowResIcon */).makeShortcut();
+                AppInfo appInfo = new AppInfo(mContext, info.info, user, quietModeEnabled);
+                mIconCache.getTitleAndIcon(appInfo, info.info, false /* useLowResIcon */);
+                ShortcutInfo si = appInfo.makeShortcut();
                 ((info.installTime <= folderCreationTime) ? workFolderApps : homescreenApps).add(si);
             }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2337,13 +2337,14 @@ public void onClickPendingWidget(final PendingAppWidgetHostView v) {
             showBrokenAppInstallDialog(packageName,
                 new DialogInterface.OnClickListener() {
                     public void onClick(DialogInterface dialog, int id) {
-                        startActivitySafely(v, LauncherModel.getMarketIntent(packageName), info);
+                        startActivitySafely(
+                                v, PackageManagerHelper.getMarketIntent(packageName), info);
                     }
                 });
         } else {
             // Download has started.
             final String packageName = info.providerName.getPackageName();
-            startActivitySafely(v, LauncherModel.getMarketIntent(packageName), info);
+            startActivitySafely(v, PackageManagerHelper.getMarketIntent(packageName), info);
         }
     }
 

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -254,6 +254,9 @@ protected Bitmap getBadgedIcon(Bitmap unbadgedBitmap, ShortcutInfoCompat shortcu
         AppInfo appInfo = new AppInfo();
         appInfo.user = user;
         appInfo.componentName = shortcutInfo.getActivity();
+        appInfo.intent = new Intent(Intent.ACTION_MAIN)
+                .addCategory(Intent.CATEGORY_LAUNCHER)
+                .setComponent(shortcutInfo.getActivity());
         cache.getTitleAndIcon(appInfo, false);
         return LauncherIcons.badgeWithBitmap(unbadgedBitmap, appInfo.iconBitmap, context);
     }

File: src/com/android/launcher3/logging/FileLog.java
Patch:
@@ -40,7 +40,7 @@ public final class FileLog {
     private static File sLogsDirectory = null;
 
     public static void setDir(File logsDir) {
-        if (ProviderConfig.IS_DOGFOOD_BUILD) {
+        if (ProviderConfig.IS_DOGFOOD_BUILD || Utilities.IS_DEBUG_DEVICE) {
             synchronized (DATE_FORMAT) {
                 // If the target directory changes, stop any active thread.
                 if (sHandler != null && !logsDir.equals(sLogsDirectory)) {

File: src/com/android/launcher3/provider/ImportDataTask.java
Patch:
@@ -89,10 +89,12 @@ public boolean importWorkspace() throws Exception {
         ArrayList<Long> allScreens = LauncherDbUtils.getScreenIdsFromCursor(
                 mContext.getContentResolver().query(mOtherScreensUri, null, null, null,
                         LauncherSettings.WorkspaceScreens.SCREEN_RANK));
+        FileLog.d(TAG, "Importing DB from " + mOtherFavoritesUri);
 
         // During import we reset the screen IDs to 0-indexed values.
         if (allScreens.isEmpty()) {
             // No thing to migrate
+            FileLog.e(TAG, "No data found to import");
             return false;
         }
 
@@ -293,6 +295,7 @@ private void importWorkspaceItems(
                 }
             }
         }
+        FileLog.d(TAG, totalItemsOnWorkspace + " items imported from external source");
         if (totalItemsOnWorkspace < MIN_ITEM_COUNT_FOR_SUCCESSFUL_MIGRATION) {
             throw new Exception("Insufficient data");
         }

File: src/com/android/launcher3/provider/RestoreDbTask.java
Patch:
@@ -142,6 +142,7 @@ public static boolean isPending(Context context) {
     }
 
     public static void setPending(Context context, boolean isPending) {
+        FileLog.d(TAG, "Restore data received through full backup");
         Utilities.getPrefs(context).edit().putBoolean(RESTORE_TASK_PENDING, isPending).commit();
     }
 }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -68,6 +68,7 @@ public class ShortcutInfo extends ItemInfoWithIcon {
      * Indicates if it represents a common type mentioned in {@link CommonAppTypeParser}.
      * Upto 15 different types supported.
      */
+    @Deprecated
     public static final int FLAG_RESTORED_APP_TYPE = 0B0011110000;
 
     /**

File: src/com/android/launcher3/model/PackageItemInfo.java
Patch:
@@ -28,7 +28,7 @@ public class PackageItemInfo extends ItemInfoWithIcon {
      */
     public String packageName;
 
-    PackageItemInfo(String packageName) {
+    public PackageItemInfo(String packageName) {
         this.packageName = packageName;
     }
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -563,7 +563,7 @@ protected boolean computeScrollHelper() {
     protected boolean computeScrollHelper(boolean shouldInvalidate) {
         if (mScroller.computeScrollOffset()) {
             // Don't bother scrolling if the page does not need to be moved
-            if (getScrollX() != mScroller.getCurrX()
+            if (getUnboundedScrollX() != mScroller.getCurrX()
                     || getScrollY() != mScroller.getCurrY()) {
                 float scaleX = mFreeScroll ? getScaleX() : 1f;
                 int scrollX = (int) (mScroller.getCurrX() * (1 / scaleX));
@@ -1945,6 +1945,7 @@ protected void snapToPage(int whichPage, int delta, int duration, boolean immedi
         // Trigger a compute() to finish switching pages if necessary
         if (immediate) {
             computeScroll();
+            pageEndTransition();
         }
 
         invalidate();

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -563,7 +563,7 @@ protected boolean computeScrollHelper() {
     protected boolean computeScrollHelper(boolean shouldInvalidate) {
         if (mScroller.computeScrollOffset()) {
             // Don't bother scrolling if the page does not need to be moved
-            if (getScrollX() != mScroller.getCurrX()
+            if (getUnboundedScrollX() != mScroller.getCurrX()
                     || getScrollY() != mScroller.getCurrY()) {
                 float scaleX = mFreeScroll ? getScaleX() : 1f;
                 int scrollX = (int) (mScroller.getCurrX() * (1 / scaleX));
@@ -1945,6 +1945,7 @@ protected void snapToPage(int whichPage, int delta, int duration, boolean immedi
         // Trigger a compute() to finish switching pages if necessary
         if (immediate) {
             computeScroll();
+            pageEndTransition();
         }
 
         invalidate();

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -37,4 +37,6 @@ private FeatureFlags() {}
     public static final boolean PULLDOWN_SEARCH = false;
     // When enabled the status bar may show dark icons based on the top of the wallpaper.
     public static final boolean LIGHT_STATUS_BAR = false;
+    // When enabled allows to use any point on the fast scrollbar to start dragging.
+    public static final boolean LAUNCHER3_DIRECT_SCROLL = true;
 }

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -354,8 +354,7 @@ public void run() {
     }
 
     public void snapToWidget(boolean animate) {
-        DeviceProfile profile = mLauncher.getDeviceProfile();
-        float scale = Math.min(profile.appWidgetScale.x, profile.appWidgetScale.y);
+        float scale = mWidgetView.getScaleToFit();
 
         mDragLayer.getViewRectRelativeToSelf(mWidgetView, sTmpRect);
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -735,7 +735,7 @@ public void run() {
             } else if (resultCode == RESULT_OK) {
                 addAppWidgetImpl(
                         appWidgetId, requestArgs, null,
-                        requestArgs.getWidgetProvider(),
+                        requestArgs.getWidgetProvider(this),
                         ON_ACTIVITY_RESULT_ANIMATION_DELAY);
             }
             return;
@@ -894,7 +894,7 @@ private long ensurePendingDropLayoutExists(long screenId) {
         if (resultCode == RESULT_OK) {
             animationType = Workspace.COMPLETE_TWO_STAGE_WIDGET_DROP_ANIMATION;
             final AppWidgetHostView layout = mAppWidgetHost.createView(this, appWidgetId,
-                    requestArgs.getWidgetProvider());
+                    requestArgs.getWidgetProvider(this));
             boundWidget = layout;
             onCompleteRunnable = new Runnable() {
                 @Override

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -128,7 +128,7 @@ protected void onProviderChanged(int appWidgetId, AppWidgetProviderInfo appWidge
         super.onProviderChanged(appWidgetId, info);
         // The super method updates the dimensions of the providerInfo. Update the
         // launcher spans accordingly.
-        info.initSpans();
+        info.initSpans(mLauncher);
     }
 
     @Override

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -796,7 +796,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 case 26:
                     // QSB was moved to the grid. Clear the first row on screen 0.
                     if (FeatureFlags.QSB_ON_FIRST_SCREEN &&
-                            !LauncherDbUtils.prepareScreenZeroToHostQsb(db)) {
+                            !LauncherDbUtils.prepareScreenZeroToHostQsb(mContext, db)) {
                         break;
                     }
                 case 27: {

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -115,7 +115,7 @@ public void addSupportedActions(View host, AccessibilityNodeInfo info, boolean f
         if (UninstallDropTarget.supportsDrop(host.getContext(), item)) {
             info.addAction(mActions.get(UNINSTALL));
         }
-        if (InfoDropTarget.supportsDrop(item)) {
+        if (InfoDropTarget.supportsDrop(host.getContext(), item)) {
             info.addAction(mActions.get(INFO));
         }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -247,7 +247,6 @@ public enum Direction {
     private boolean mStripScreensOnPageStopMoving = false;
 
     private DragPreviewProvider mOutlineProvider = null;
-    public static final int DRAG_BITMAP_PADDING = DragPreviewProvider.DRAG_BITMAP_PADDING;
     private boolean mWorkspaceFadeInAdjacentScreens;
 
     final WallpaperOffsetInterpolator mWallpaperOffset;

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -655,7 +655,7 @@ public void animateViewIntoPosition(DragView dragView, final View child, int dur
         } else if (child instanceof FolderIcon) {
             // Account for holographic blur padding on the drag view
             toY += Math.round(scale * (child.getPaddingTop() - dragView.getDragRegionTop()));
-            toY -= scale * Workspace.DRAG_BITMAP_PADDING / 2;
+            toY -= scale * dragView.getBlurSizeOutline() / 2;
             toY -= (1 - scale) * dragView.getMeasuredHeight() / 2;
             // Center in the x coordinate about the target's drawable
             toX -= (dragView.getMeasuredWidth() - Math.round(scale * child.getMeasuredWidth())) / 2;

File: src/com/android/launcher3/shortcuts/ShortcutDragPreviewProvider.java
Patch:
@@ -64,13 +64,13 @@ private Bitmap drawScaledPreview(Canvas canvas, Bitmap.Config config) {
         int size = Launcher.getLauncher(mView.getContext()).getDeviceProfile().iconSizePx;
 
         final Bitmap b = Bitmap.createBitmap(
-                size + DRAG_BITMAP_PADDING,
-                size + DRAG_BITMAP_PADDING,
+                size + blurSizeOutline,
+                size + blurSizeOutline,
                 config);
 
         canvas.setBitmap(b);
         canvas.save(Canvas.MATRIX_SAVE_FLAG);
-        canvas.translate(DRAG_BITMAP_PADDING / 2, DRAG_BITMAP_PADDING / 2);
+        canvas.translate(blurSizeOutline / 2, blurSizeOutline / 2);
         canvas.scale(((float) size) / bounds.width(), ((float) size) / bounds.height(), 0, 0);
         canvas.translate(bounds.left, bounds.top);
         d.draw(canvas);

File: src/com/android/launcher3/widget/PendingItemPreviewProvider.java
Patch:
@@ -53,8 +53,8 @@ public Bitmap createDragOutline(Canvas canvas) {
         canvas.setBitmap(b);
 
         Rect src = new Rect(0, 0, mPreviewBitmap.getWidth(), mPreviewBitmap.getHeight());
-        float scaleFactor = Math.min((w - DRAG_BITMAP_PADDING) / (float) mPreviewBitmap.getWidth(),
-                (h - DRAG_BITMAP_PADDING) / (float) mPreviewBitmap.getHeight());
+        float scaleFactor = Math.min((w - blurSizeOutline) / (float) mPreviewBitmap.getWidth(),
+                (h - blurSizeOutline) / (float) mPreviewBitmap.getHeight());
         int scaledWidth = (int) (scaleFactor * mPreviewBitmap.getWidth());
         int scaledHeight = (int) (scaleFactor * mPreviewBitmap.getHeight());
         Rect dst = new Rect(0, 0, scaledWidth, scaledHeight);

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -354,8 +354,7 @@ public void run() {
     }
 
     public void snapToWidget(boolean animate) {
-        DeviceProfile profile = mLauncher.getDeviceProfile();
-        float scale = Math.min(profile.appWidgetScale.x, profile.appWidgetScale.y);
+        float scale = mWidgetView.getScaleToFit();
 
         mDragLayer.getViewRectRelativeToSelf(mWidgetView, sTmpRect);
 

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -21,7 +21,6 @@
 import android.animation.TimeInterpolator;
 import android.animation.ValueAnimator;
 import android.animation.ValueAnimator.AnimatorUpdateListener;
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
@@ -33,7 +32,6 @@
 import android.graphics.Rect;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
-import android.os.Build;
 import android.os.Parcelable;
 import android.support.annotation.IntDef;
 import android.support.v4.view.ViewCompat;
@@ -297,7 +295,6 @@ public void onAnimationEnd(Animator animation) {
         addView(mShortcutsAndWidgets);
     }
 
-    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public void enableAccessibleDrag(boolean enable, int dragType) {
         mUseTouchHelper = enable;
         if (!enable) {

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -302,7 +302,7 @@ public Bitmap generateWidgetPreview(Launcher launcher, LauncherAppWidgetProvider
         Drawable drawable = null;
         if (info.previewImage != 0) {
             try {
-                drawable = mWidgetManager.loadPreview(info);
+                drawable = info.loadPreviewImage(launcher.getApplicationContext(), 0);
             } catch (OutOfMemoryError e) {
                 Log.w(TAG, "Error loading widget preview for: " + info.provider, e);
                 // During OutOfMemoryError, the previous heap stack is not affected. Catching
@@ -395,7 +395,7 @@ public Bitmap generateWidgetPreview(Launcher launcher, LauncherAppWidgetProvider
             float iconScale = Math.min((float) smallestSide / (appIconSize + 2 * minOffset), scale);
 
             try {
-                Drawable icon = mWidgetManager.loadIcon(info, mIconCache);
+                Drawable icon = info.getIcon(launcher, mIconCache);
                 if (icon != null) {
                     icon = mutateOnMainThread(icon);
                     int hoffset = (int) ((tileW - appIconSize * iconScale) / 2) + x;

File: src/com/android/launcher3/accessibility/OverviewScreenAccessibilityDelegate.java
Patch:
@@ -16,21 +16,19 @@
 
 package com.android.launcher3.accessibility;
 
-import android.annotation.TargetApi;
 import android.content.Context;
-import android.os.Build;
 import android.os.Bundle;
 import android.util.SparseArray;
 import android.view.View;
 import android.view.View.AccessibilityDelegate;
 import android.view.accessibility.AccessibilityNodeInfo;
 import android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction;
+
 import com.android.launcher3.R;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
 import com.android.launcher3.config.FeatureFlags;
 
-@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class OverviewScreenAccessibilityDelegate extends AccessibilityDelegate {
 
     private static final int MOVE_BACKWARD = R.id.action_move_screen_backwards;

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -261,9 +261,7 @@ public void onFocusChange(View v, boolean hasFocus) {
                 0, 1, Spannable.SPAN_EXCLUSIVE_INCLUSIVE);
         mSearchInput.setHint(spanned);
 
-        mElevationController = Utilities.ATLEAST_LOLLIPOP
-                ? new HeaderElevationController.ControllerVL(mSearchContainer)
-                : new HeaderElevationController.ControllerV16(mSearchContainer);
+        mElevationController = new HeaderElevationController(mSearchContainer);
 
         // Load the all apps recycler view
         mAppsRecyclerView = (AllAppsRecyclerView) findViewById(R.id.apps_list_view);

File: src/com/android/launcher3/compat/LauncherActivityInfoCompatVL.java
Patch:
@@ -16,15 +16,12 @@
 
 package com.android.launcher3.compat;
 
-import android.annotation.TargetApi;
 import android.content.ComponentName;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.LauncherActivityInfo;
 import android.graphics.drawable.Drawable;
-import android.os.Build;
 import android.os.UserHandle;
 
-@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class LauncherActivityInfoCompatVL extends LauncherActivityInfoCompat {
     private LauncherActivityInfo mLauncherActivityInfo;
 

File: src/com/android/launcher3/compat/PackageInstallerCompatVL.java
Patch:
@@ -16,12 +16,10 @@
 
 package com.android.launcher3.compat;
 
-import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.pm.PackageInstaller;
 import android.content.pm.PackageInstaller.SessionCallback;
 import android.content.pm.PackageInstaller.SessionInfo;
-import android.os.Build;
 import android.os.Handler;
 import android.os.Process;
 import android.os.UserHandle;
@@ -34,7 +32,6 @@
 
 import java.util.HashMap;
 
-@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class PackageInstallerCompatVL extends PackageInstallerCompat {
 
     @Thunk final SparseArray<String> mActiveSessions = new SparseArray<>();

File: src/com/android/launcher3/keyboard/FocusIndicatorHelper.java
Patch:
@@ -23,12 +23,10 @@
 import android.animation.RectEvaluator;
 import android.animation.ValueAnimator;
 import android.animation.ValueAnimator.AnimatorUpdateListener;
-import android.annotation.TargetApi;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Paint;
 import android.graphics.Rect;
-import android.os.Build.VERSION_CODES;
 import android.util.Property;
 import android.view.View;
 import android.view.View.OnFocusChangeListener;
@@ -38,7 +36,6 @@
 /**
  * A helper class to draw background of a focused view.
  */
-@TargetApi(VERSION_CODES.LOLLIPOP)
 public abstract class FocusIndicatorHelper implements
         OnFocusChangeListener, AnimatorUpdateListener {
 

File: src/com/android/launcher3/util/PillRevealOutlineProvider.java
Patch:
@@ -16,12 +16,9 @@
 
 package com.android.launcher3.util;
 
-import android.annotation.TargetApi;
 import android.graphics.Rect;
-import android.os.Build;
 import android.view.ViewOutlineProvider;
 
-@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 /**
  * A {@link ViewOutlineProvider} that animates a reveal in a "pill" shape.
  * A pill is simply a round rect, but we assume the width is greater than

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -140,7 +140,7 @@ public void applyFromCellItem(WidgetItem item, WidgetPreviewLoader loader) {
         if (item.activityInfo != null) {
             setTag(new PendingAddShortcutInfo(item.activityInfo));
         } else {
-            setTag(new PendingAddWidgetInfo(mLauncher, item.widgetInfo));
+            setTag(new PendingAddWidgetInfo(item.widgetInfo));
         }
     }
 

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -41,6 +41,7 @@
 import android.os.DeadObjectException;
 import android.os.PowerManager;
 import android.os.TransactionTooLargeException;
+import android.support.v4.os.BuildCompat;
 import android.text.Spannable;
 import android.text.SpannableString;
 import android.text.TextUtils;
@@ -89,9 +90,7 @@ public final class Utilities {
     private static final Matrix sInverseMatrix = new Matrix();
 
     public static boolean isAtLeastO() {
-        // TODO: Clean this up: b/32610406
-        return !"REL".equals(Build.VERSION.CODENAME)
-                && "O".compareTo(Build.VERSION.CODENAME) <= 0;
+        return BuildCompat.isAtLeastO();
     }
 
     public static final boolean ATLEAST_NOUGAT_MR1 =

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -17,8 +17,8 @@
 package com.android.launcher3;
 
 import android.content.Context;
+import android.os.Process;
 
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.ContentWriter;
 
 import java.util.ArrayList;
@@ -56,7 +56,7 @@ public class FolderInfo extends ItemInfo {
 
     public FolderInfo() {
         itemType = LauncherSettings.Favorites.ITEM_TYPE_FOLDER;
-        user = UserHandleCompat.myUserHandle();
+        user = Process.myUserHandle();
     }
 
     /**

File: src/com/android/launcher3/LauncherAppWidgetInfo.java
Patch:
@@ -19,8 +19,8 @@
 import android.appwidget.AppWidgetHostView;
 import android.content.ComponentName;
 import android.content.Intent;
+import android.os.Process;
 
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.ContentWriter;
 
 /**
@@ -112,7 +112,7 @@ public LauncherAppWidgetInfo(int appWidgetId, ComponentName providerName) {
         spanX = -1;
         spanY = -1;
         // We only support app widgets on current user.
-        user = UserHandleCompat.myUserHandle();
+        user = Process.myUserHandle();
         restoreStatus = RESTORE_COMPLETED;
     }
 

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -45,14 +45,14 @@
 import android.os.Message;
 import android.os.Process;
 import android.os.Trace;
+import android.os.UserHandle;
 import android.os.UserManager;
 import android.text.TextUtils;
 import android.util.Log;
 
 import com.android.launcher3.AutoInstallsLayout.LayoutParserCallback;
 import com.android.launcher3.LauncherSettings.Favorites;
 import com.android.launcher3.LauncherSettings.WorkspaceScreens;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.config.ProviderConfig;
@@ -657,13 +657,13 @@ protected void onEmptyDbCreated() {
             Utilities.getPrefs(mContext).edit().putBoolean(EMPTY_DATABASE_CREATED, true).commit();
 
             // When a new DB is created, remove all previously stored managed profile information.
-            ManagedProfileHeuristic.processAllUsers(Collections.<UserHandleCompat>emptyList(),
+            ManagedProfileHeuristic.processAllUsers(Collections.<UserHandle>emptyList(),
                     mContext);
         }
 
         public long getDefaultUserSerial() {
             return UserManagerCompat.getInstance(mContext).getSerialNumberForUser(
-                    UserHandleCompat.myUserHandle());
+                    Process.myUserHandle());
         }
 
         private void addFavoritesTable(SQLiteDatabase db, boolean optional) {

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -23,10 +23,11 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
+import android.os.Process;
+import android.os.UserHandle;
 import android.text.TextUtils;
 
 import com.android.launcher3.LauncherSettings.Favorites;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.graphics.LauncherIcons;
 import com.android.launcher3.shortcuts.DeepShortcutManager;
@@ -257,7 +258,7 @@ public void updateFromDeepShortcutInfo(ShortcutInfoCompat shortcutInfo, Context
 
         IconCache cache = launcherAppState.getIconCache();
         Bitmap unbadgedBitmap = unbadgedDrawable == null
-                ? cache.getDefaultIcon(UserHandleCompat.myUserHandle())
+                ? cache.getDefaultIcon(Process.myUserHandle())
                 : LauncherIcons.createScaledBitmapWithoutShadow(unbadgedDrawable, context);
         iconBitmap = getBadgedIcon(unbadgedBitmap, shortcutInfo, cache, context);
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -38,6 +38,7 @@
 import android.os.Handler;
 import android.os.IBinder;
 import android.os.Parcelable;
+import android.os.UserHandle;
 import android.util.AttributeSet;
 import android.util.Log;
 import android.util.Property;
@@ -61,7 +62,6 @@
 import com.android.launcher3.accessibility.WorkspaceAccessibilityHelper;
 import com.android.launcher3.anim.AnimationLayerSet;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.dragndrop.DragController;
@@ -4016,7 +4016,7 @@ public boolean evaluate(ItemInfo info, View v) {
         });
     }
 
-    public void removeAbandonedPromise(String packageName, UserHandleCompat user) {
+    public void removeAbandonedPromise(String packageName, UserHandle user) {
         HashSet<String> packages = new HashSet<>(1);
         packages.add(packageName);
         ItemInfoMatcher matcher = ItemInfoMatcher.ofPackages(packages, user);

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -25,6 +25,7 @@
 import android.graphics.Bitmap;
 import android.graphics.drawable.Drawable;
 import android.os.Bundle;
+import android.os.UserHandle;
 
 import com.android.launcher3.IconCache;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
@@ -77,7 +78,7 @@ public LauncherAppWidgetProviderInfo getLauncherAppWidgetInfo(int appWidgetId) {
     public abstract boolean bindAppWidgetIdIfAllowed(
             int appWidgetId, AppWidgetProviderInfo info, Bundle options);
 
-    public abstract UserHandleCompat getUser(LauncherAppWidgetProviderInfo info);
+    public abstract UserHandle getUser(LauncherAppWidgetProviderInfo info);
 
     public abstract void startConfigActivity(AppWidgetProviderInfo info, int widgetId,
             Activity activity, AppWidgetHost host, int requestCode);
@@ -90,7 +91,7 @@ public abstract Bitmap getBadgeBitmap(LauncherAppWidgetProviderInfo info, Bitmap
             int imageWidth, int imageHeight);
 
     public abstract LauncherAppWidgetProviderInfo findProvider(
-            ComponentName provider, UserHandleCompat user);
+            ComponentName provider, UserHandle user);
 
     public abstract HashMap<ComponentKey, AppWidgetProviderInfo> getAllProvidersMap();
 }

File: src/com/android/launcher3/compat/LauncherActivityInfoCompat.java
Patch:
@@ -19,14 +19,15 @@
 import android.content.ComponentName;
 import android.content.pm.ApplicationInfo;
 import android.graphics.drawable.Drawable;
+import android.os.UserHandle;
 
 public abstract class LauncherActivityInfoCompat {
 
     LauncherActivityInfoCompat() {
     }
 
     public abstract ComponentName getComponentName();
-    public abstract UserHandleCompat getUser();
+    public abstract UserHandle getUser();
     public abstract CharSequence getLabel();
     public abstract Drawable getIcon(int density);
     public abstract ApplicationInfo getApplicationInfo();

File: src/com/android/launcher3/compat/LauncherActivityInfoCompatVL.java
Patch:
@@ -22,6 +22,7 @@
 import android.content.pm.LauncherActivityInfo;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
+import android.os.UserHandle;
 
 @TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class LauncherActivityInfoCompatVL extends LauncherActivityInfoCompat {
@@ -36,8 +37,8 @@ public ComponentName getComponentName() {
         return mLauncherActivityInfo.getComponentName();
     }
 
-    public UserHandleCompat getUser() {
-        return UserHandleCompat.fromUser(mLauncherActivityInfo.getUser());
+    public UserHandle getUser() {
+        return mLauncherActivityInfo.getUser();
     }
 
     public CharSequence getLabel() {

File: src/com/android/launcher3/compat/UserManagerCompatVM.java
Patch:
@@ -19,6 +19,7 @@
 import android.annotation.TargetApi;
 import android.content.Context;
 import android.os.Build;
+import android.os.UserHandle;
 
 @TargetApi(Build.VERSION_CODES.M)
 public class UserManagerCompatVM extends UserManagerCompatVL {
@@ -28,7 +29,7 @@ public class UserManagerCompatVM extends UserManagerCompatVL {
     }
 
     @Override
-    public long getUserCreationTime(UserHandleCompat user) {
-        return mUserManager.getUserCreationTime(user.getUser());
+    public long getUserCreationTime(UserHandle user) {
+        return mUserManager.getUserCreationTime(user);
     }
 }

File: src/com/android/launcher3/model/AddWorkspaceItemsTask.java
Patch:
@@ -17,6 +17,7 @@
 
 import android.content.Context;
 import android.content.Intent;
+import android.os.UserHandle;
 import android.util.LongSparseArray;
 import android.util.Pair;
 
@@ -32,7 +33,6 @@
 import com.android.launcher3.LauncherModel.Callbacks;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.ShortcutInfo;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.GridOccupancy;
 import com.android.launcher3.util.Provider;
 
@@ -141,7 +141,7 @@ protected void updateScreens(Context context, ArrayList<Long> workspaceScreens)
      * Returns true if the shortcuts already exists on the workspace. This must be called after
      * the workspace has been loaded. We identify a shortcut by its intent.
      */
-    protected boolean shortcutExists(BgDataModel dataModel, Intent intent, UserHandleCompat user) {
+    protected boolean shortcutExists(BgDataModel dataModel, Intent intent, UserHandle user) {
         final String intentWithPkg, intentWithoutPkg;
         if (intent.getComponent() != null) {
             // If component is not null, an intent with null package will produce

File: src/com/android/launcher3/model/BgDataModel.java
Patch:
@@ -16,6 +16,7 @@
 package com.android.launcher3.model;
 
 import android.content.Context;
+import android.os.UserHandle;
 import android.util.Log;
 import android.util.MutableInt;
 
@@ -26,7 +27,6 @@
 import com.android.launcher3.LauncherAppWidgetInfo;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.ShortcutInfo;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
@@ -216,7 +216,7 @@ public synchronized FolderInfo findOrMakeFolder(long id) {
      * Clear all the deep shortcuts for the given package, and re-add the new shortcuts.
      */
     public synchronized void updateDeepShortcutMap(
-            String packageName, UserHandleCompat user, List<ShortcutInfoCompat> shortcuts) {
+            String packageName, UserHandle user, List<ShortcutInfoCompat> shortcuts) {
         if (packageName != null) {
             Iterator<ComponentKey> keysIter = deepShortcutMap.keySet().iterator();
             while (keysIter.hasNext()) {

File: src/com/android/launcher3/model/CacheDataUpdatedTask.java
Patch:
@@ -16,6 +16,7 @@
 package com.android.launcher3.model;
 
 import android.content.ComponentName;
+import android.os.UserHandle;
 
 import com.android.launcher3.AllAppsList;
 import com.android.launcher3.AppInfo;
@@ -27,7 +28,6 @@
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.LauncherSettings.Favorites;
 import com.android.launcher3.ShortcutInfo;
-import com.android.launcher3.compat.UserHandleCompat;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -41,10 +41,10 @@ public class CacheDataUpdatedTask extends ExtendedModelTask {
     public static final int OP_SESSION_UPDATE = 2;
 
     private final int mOp;
-    private final UserHandleCompat mUser;
+    private final UserHandle mUser;
     private final HashSet<String> mPackages;
 
-    public CacheDataUpdatedTask(int op, UserHandleCompat user, HashSet<String> packages) {
+    public CacheDataUpdatedTask(int op, UserHandle user, HashSet<String> packages) {
         mOp = op;
         mUser = user;
         mPackages = packages;

File: src/com/android/launcher3/model/PackageUpdatedTask.java
Patch:
@@ -21,6 +21,7 @@
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
 import android.graphics.Bitmap;
+import android.os.UserHandle;
 import android.util.Log;
 
 import com.android.launcher3.AllAppsList;
@@ -38,7 +39,6 @@
 import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.compat.LauncherAppsCompat;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.graphics.LauncherIcons;
 import com.android.launcher3.util.FlagOp;
@@ -70,10 +70,10 @@ public class PackageUpdatedTask extends ExtendedModelTask {
     public static final int OP_USER_AVAILABILITY_CHANGE = 7; // user available/unavailable
 
     private final int mOp;
-    private final UserHandleCompat mUser;
+    private final UserHandle mUser;
     private final String[] mPackages;
 
-    public PackageUpdatedTask(int op, UserHandleCompat user, String... packages) {
+    public PackageUpdatedTask(int op, UserHandle user, String... packages) {
         mOp = op;
         mUser = user;
         mPackages = packages;

File: src/com/android/launcher3/model/ShortcutsChangedTask.java
Patch:
@@ -16,14 +16,14 @@
 package com.android.launcher3.model;
 
 import android.content.Context;
+import android.os.UserHandle;
 
 import com.android.launcher3.AllAppsList;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.ShortcutInfo;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
 import com.android.launcher3.util.MultiHashMap;
@@ -38,11 +38,11 @@ public class ShortcutsChangedTask extends ExtendedModelTask {
 
     private final String mPackageName;
     private final List<ShortcutInfoCompat> mShortcuts;
-    private final UserHandleCompat mUser;
+    private final UserHandle mUser;
     private final boolean mUpdateIdMap;
 
     public ShortcutsChangedTask(String packageName, List<ShortcutInfoCompat> shortcuts,
-            UserHandleCompat user, boolean updateIdMap) {
+            UserHandle user, boolean updateIdMap) {
         mPackageName = packageName;
         mShortcuts = shortcuts;
         mUser = user;

File: src/com/android/launcher3/model/UserLockStateChangedTask.java
Patch:
@@ -16,14 +16,14 @@
 package com.android.launcher3.model;
 
 import android.content.Context;
+import android.os.UserHandle;
 
 import com.android.launcher3.AllAppsList;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.ShortcutInfo;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
@@ -40,9 +40,9 @@
  */
 public class UserLockStateChangedTask extends ExtendedModelTask {
 
-    private final UserHandleCompat mUser;
+    private final UserHandle mUser;
 
-    public UserLockStateChangedTask(UserHandleCompat user) {
+    public UserLockStateChangedTask(UserHandle user) {
         mUser = user;
     }
 

File: src/com/android/launcher3/model/WidgetsModel.java
Patch:
@@ -6,6 +6,8 @@
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
+import android.os.Process;
+import android.os.UserHandle;
 import android.util.Log;
 
 import com.android.launcher3.AppFilter;
@@ -15,7 +17,6 @@
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.util.MultiHashMap;
 import com.android.launcher3.util.Preconditions;
@@ -99,7 +100,7 @@ private void setWidgetsAndShortcuts(ArrayList<WidgetItem> rawWidgetsShortcuts) {
         mWidgetsList.clear();
 
         InvariantDeviceProfile idp = LauncherAppState.getInstance().getInvariantDeviceProfile();
-        UserHandleCompat myUser = UserHandleCompat.myUserHandle();
+        UserHandle myUser = Process.myUserHandle();
 
         // add and update.
         for (WidgetItem item: rawWidgetsShortcuts) {

File: src/com/android/launcher3/provider/ImportDataTask.java
Patch:
@@ -44,7 +44,6 @@
 import com.android.launcher3.R;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.config.ProviderConfig;
@@ -130,7 +129,7 @@ public boolean importWorkspace() throws Exception {
     private void importWorkspaceItems(
             long firsetScreenId, LongSparseArray<Long> screenIdMap) throws Exception {
         String profileId = Long.toString(UserManagerCompat.getInstance(mContext)
-                .getSerialNumberForUser(UserHandleCompat.myUserHandle()));
+                .getSerialNumberForUser(Process.myUserHandle()));
 
         boolean createEmptyRowOnFirstScreen = false;
         if (FeatureFlags.QSB_ON_FIRST_SCREEN) {

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -34,6 +34,7 @@
 import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
+import android.os.UserHandle;
 import android.util.AttributeSet;
 import android.view.Gravity;
 import android.view.LayoutInflater;
@@ -60,7 +61,6 @@
 import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.accessibility.ShortcutMenuAccessibilityDelegate;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.dragndrop.DragController;
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragOptions;
@@ -161,7 +161,7 @@ public void populateAndShow(final BubbleTextView originalIcon, final List<String
         final Looper workerLooper = LauncherModel.getWorkerLooper();
         final Handler uiHandler = new Handler(Looper.getMainLooper());
         final ItemInfo originalInfo = (ItemInfo) originalIcon.getTag();
-        final UserHandleCompat user = originalInfo.user;
+        final UserHandle user = originalInfo.user;
         final ComponentName activity = originalInfo.getTargetComponent();
         new Handler(workerLooper).postAtFrontOfQueue(new Runnable() {
             @Override

File: src/com/android/launcher3/shortcuts/ShortcutInfoCompat.java
Patch:
@@ -22,11 +22,11 @@
 import android.content.Intent;
 import android.content.pm.ShortcutInfo;
 import android.os.Build;
+import android.os.UserHandle;
 
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.compat.DeferredLauncherActivityInfo;
 import com.android.launcher3.compat.LauncherActivityInfoCompat;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 
 /**
@@ -86,8 +86,8 @@ public ComponentName getActivity() {
         return mShortcutInfo.getActivity();
     }
 
-    public UserHandleCompat getUserHandle() {
-        return UserHandleCompat.fromUser(mShortcutInfo.getUserHandle());
+    public UserHandle getUserHandle() {
+        return mShortcutInfo.getUserHandle();
     }
 
     public boolean hasKeyFieldsOnly() {

File: src/com/android/launcher3/shortcuts/ShortcutKey.java
Patch:
@@ -2,17 +2,17 @@
 
 import android.content.ComponentName;
 import android.content.Intent;
+import android.os.UserHandle;
 
 import com.android.launcher3.ShortcutInfo;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.ComponentKey;
 
 /**
  * A key that uniquely identifies a shortcut using its package, id, and user handle.
  */
 public class ShortcutKey extends ComponentKey {
 
-    public ShortcutKey(String packageName, UserHandleCompat user, String id) {
+    public ShortcutKey(String packageName, UserHandle user, String id) {
         // Use the id as the class name.
         super(new ComponentName(packageName, id), user);
     }
@@ -26,7 +26,7 @@ public static ShortcutKey fromInfo(ShortcutInfoCompat shortcutInfo) {
                 shortcutInfo.getId());
     }
 
-    public static ShortcutKey fromIntent(Intent intent, UserHandleCompat user) {
+    public static ShortcutKey fromIntent(Intent intent, UserHandle user) {
         String shortcutId = intent.getStringExtra(
                 ShortcutInfoCompat.EXTRA_SHORTCUT_ID);
         return new ShortcutKey(intent.getPackage(), user, shortcutId);

File: tests/src/com/android/launcher3/ui/AllAppsAppLaunchTest.java
Patch:
@@ -1,13 +1,13 @@
 package com.android.launcher3.ui;
 
+import android.os.Process;
 import android.support.test.uiautomator.By;
 import android.support.test.uiautomator.UiObject2;
 import android.support.test.uiautomator.Until;
 import android.test.suitebuilder.annotation.LargeTest;
 
 import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.Condition;
 import com.android.launcher3.util.Wait;
 
@@ -24,7 +24,7 @@ protected void setUp() throws Exception {
         super.setUp();
 
         mSettingsApp = LauncherAppsCompat.getInstance(mTargetContext)
-                .getActivityList("com.android.settings", UserHandleCompat.myUserHandle()).get(0);
+                .getActivityList("com.android.settings", Process.myUserHandle()).get(0);
     }
 
     public void testAppLauncher_portrait() throws Exception {

File: tests/src/com/android/launcher3/ui/AllAppsIconToHomeTest.java
Patch:
@@ -1,13 +1,13 @@
 package com.android.launcher3.ui;
 
+import android.os.Process;
 import android.support.test.uiautomator.By;
 import android.support.test.uiautomator.UiObject2;
 import android.support.test.uiautomator.Until;
 import android.test.suitebuilder.annotation.LargeTest;
 
 import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.Condition;
 import com.android.launcher3.util.Wait;
 
@@ -24,7 +24,7 @@ protected void setUp() throws Exception {
         super.setUp();
 
         mSettingsApp = LauncherAppsCompat.getInstance(mTargetContext)
-                .getActivityList("com.android.settings", UserHandleCompat.myUserHandle()).get(0);
+                .getActivityList("com.android.settings", Process.myUserHandle()).get(0);
     }
 
     public void testDragIcon_portrait() throws Throwable {

File: tests/src/com/android/launcher3/ui/ShortcutsLaunchTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.android.launcher3.ui;
 
 import android.graphics.Point;
+import android.os.Process;
 import android.support.test.uiautomator.By;
 import android.support.test.uiautomator.UiObject2;
 import android.support.test.uiautomator.Until;
@@ -10,7 +11,6 @@
 import com.android.launcher3.R;
 import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.Condition;
 import com.android.launcher3.util.Wait;
 
@@ -27,7 +27,7 @@ protected void setUp() throws Exception {
         super.setUp();
 
         mSettingsApp = LauncherAppsCompat.getInstance(mTargetContext)
-                .getActivityList("com.android.settings", UserHandleCompat.myUserHandle()).get(0);
+                .getActivityList("com.android.settings", Process.myUserHandle()).get(0);
     }
 
     public void testAppLauncher_portrait() throws Exception {

File: tests/src/com/android/launcher3/ui/ShortcutsToHomeTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.android.launcher3.ui;
 
 import android.graphics.Point;
+import android.os.Process;
 import android.support.test.uiautomator.By;
 import android.support.test.uiautomator.UiObject2;
 import android.support.test.uiautomator.Until;
@@ -10,7 +11,6 @@
 import com.android.launcher3.R;
 import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
-import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.Condition;
 import com.android.launcher3.util.Wait;
 
@@ -27,7 +27,7 @@ protected void setUp() throws Exception {
         super.setUp();
 
         mSettingsApp = LauncherAppsCompat.getInstance(mTargetContext)
-                .getActivityList("com.android.settings", UserHandleCompat.myUserHandle()).get(0);
+                .getActivityList("com.android.settings", Process.myUserHandle()).get(0);
     }
 
     public void testDragIcon_portrait() throws Throwable {

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -38,7 +38,7 @@
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.dynamicui.ExtractedColors;
 import com.android.launcher3.logging.UserEventDispatcher;
-import com.android.launcher3.userevent.nano.LauncherLogProto;
+import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;
 
 public class Hotseat extends FrameLayout
@@ -175,7 +175,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
     public void fillInLogContainerData(View v, ItemInfo info, Target target, Target targetParent) {
         target.gridX = info.cellX;
         target.gridY = info.cellY;
-        targetParent.containerType = LauncherLogProto.HOTSEAT;
+        targetParent.containerType = ContainerType.HOTSEAT;
     }
 
     public void updateColor(ExtractedColors extractedColors, boolean animate) {

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -76,7 +76,7 @@
 import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.dragndrop.DragOptions;
 import com.android.launcher3.pageindicators.PageIndicatorDots;
-import com.android.launcher3.userevent.nano.LauncherLogProto;
+import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;
 import com.android.launcher3.util.CircleRevealOutlineProvider;
 import com.android.launcher3.util.Thunk;
@@ -1448,7 +1448,7 @@ public void fillInLogContainerData(View v, ItemInfo info, Target target, Target
         target.gridX = info.cellX;
         target.gridY = info.cellY;
         target.pageIndex = mContent.getCurrentPage();
-        targetParent.containerType = LauncherLogProto.FOLDER;
+        targetParent.containerType = ContainerType.FOLDER;
     }
 
     private class OnScrollHintListener implements OnAlarmListener {

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -46,6 +46,7 @@
 import com.android.launcher3.model.PackageItemInfo;
 import com.android.launcher3.model.WidgetItem;
 import com.android.launcher3.userevent.nano.LauncherLogProto;
+import com.android.launcher3.userevent.nano.LauncherLogProto.ContainerType;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;
 import com.android.launcher3.util.MultiHashMap;
 import com.android.launcher3.util.Thunk;
@@ -309,6 +310,6 @@ private WidgetPreviewLoader getWidgetPreviewLoader() {
 
     @Override
     public void fillInLogContainerData(View v, ItemInfo info, Target target, Target targetParent) {
-        targetParent.containerType = LauncherLogProto.WIDGETS;
+        targetParent.containerType = ContainerType.WIDGETS;
     }
 }
\ No newline at end of file

File: src_config/com/android/launcher3/config/ProviderConfig.java
Patch:
@@ -20,5 +20,5 @@ public class ProviderConfig {
 
     public static final String AUTHORITY = "com.android.launcher3.settings".intern();
 
-    public static boolean IS_DOGFOOD_BUILD = true;
+    public static final boolean IS_DOGFOOD_BUILD = true;
 }

File: src/com/android/launcher3/dragndrop/ExternalDragPreviewProvider.java
Patch:
@@ -45,7 +45,7 @@ public ExternalDragPreviewProvider(Launcher launcher, ItemInfo addInfo) {
         mLauncher = launcher;
         mAddInfo = addInfo;
 
-        mOutlineSize = mLauncher.getWorkspace().estimateItemSize(mAddInfo, false);
+        mOutlineSize = mLauncher.getWorkspace().estimateItemSize(mAddInfo, false, false);
     }
 
     public Rect getPreviewBounds() {

File: src/com/android/launcher3/widget/PendingItemPreviewProvider.java
Patch:
@@ -45,7 +45,7 @@ public PendingItemPreviewProvider(View view, PendingAddItemInfo addInfo, Bitmap
     @Override
     public Bitmap createDragOutline(Canvas canvas) {
         Workspace workspace = Launcher.getLauncher(mView.getContext()).getWorkspace();
-        int[] size = workspace.estimateItemSize(mAddInfo, false);
+        int[] size = workspace.estimateItemSize(mAddInfo, false, false);
 
         int w = size[0];
         int h = size[1];

File: src/com/android/launcher3/widget/WidgetHostViewLoader.java
Patch:
@@ -130,7 +130,7 @@ public void run() {
                 mWidgetLoadingId = -1;
 
                 hostView.setVisibility(View.INVISIBLE);
-                int[] unScaledSize = mLauncher.getWorkspace().estimateItemSize(mInfo, false);
+                int[] unScaledSize = mLauncher.getWorkspace().estimateItemSize(mInfo, false, true);
                 // We want the first widget layout to be the correct size. This will be important
                 // for width size reporting to the AppWidgetManager.
                 DragLayer.LayoutParams lp = new DragLayer.LayoutParams(unScaledSize[0],

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -200,7 +200,7 @@ private boolean beginDraggingWidget(WidgetCell v) {
             // the widget if this is null, so we break out.
 
             PendingAddWidgetInfo createWidgetInfo = (PendingAddWidgetInfo) createItemInfo;
-            int[] size = mLauncher.getWorkspace().estimateItemSize(createWidgetInfo, true);
+            int[] size = mLauncher.getWorkspace().estimateItemSize(createWidgetInfo, true, false);
 
             Bitmap icon = image.getBitmap();
             float minScale = 1.25f;

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -490,7 +490,7 @@ public synchronized void getTitleAndIcon(ShortcutInfo shortcutInfo, Intent inten
         // null info means not installed, but if we have a component from the intent then
         // we should still look in the cache for restored app icons.
         if (component == null) {
-            shortcutInfo.setIcon(getDefaultIcon(user));
+            shortcutInfo.iconBitmap = getDefaultIcon(user);
             shortcutInfo.title = "";
             shortcutInfo.contentDescription = "";
             shortcutInfo.usingLowResIcon = false;
@@ -507,7 +507,7 @@ public synchronized void getTitleAndIcon(
             ShortcutInfo shortcutInfo, ComponentName component, LauncherActivityInfoCompat info,
             UserHandleCompat user, boolean usePkgIcon, boolean useLowResIcon) {
         CacheEntry entry = cacheLocked(component, info, user, usePkgIcon, useLowResIcon);
-        shortcutInfo.setIcon(getNonNullIcon(entry, user));
+        shortcutInfo.iconBitmap = getNonNullIcon(entry, user);
         shortcutInfo.title = Utilities.trim(entry.title);
         shortcutInfo.contentDescription = entry.contentDescription;
         shortcutInfo.usingLowResIcon = entry.isLowResIcon;

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -146,7 +146,7 @@ private void init() {
     }
 
     public static FolderIcon fromXml(int resId, Launcher launcher, ViewGroup group,
-            FolderInfo folderInfo, IconCache iconCache) {
+            FolderInfo folderInfo) {
         @SuppressWarnings("all") // suppress dead code warning
         final boolean error = INITIAL_ITEM_ANIMATION_DURATION >= DROP_IN_ANIMATION_DURATION;
         if (error) {

File: src/com/android/launcher3/util/CursorIconInfo.java
Patch:
@@ -60,7 +60,7 @@ public Bitmap loadIcon(Cursor c, ShortcutInfo info) {
             info.iconResource = new ShortcutIconResource();
             info.iconResource.packageName = packageName;
             info.iconResource.resourceName = resourceName;
-            icon = LauncherIcons.createIconBitmap(packageName, resourceName, mContext);
+            icon = LauncherIcons.createIconBitmap(info.iconResource, mContext);
         }
         if (icon == null) {
             // Failed to load from resource, try loading from DB.

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -168,7 +168,7 @@ void resetLayout() {
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         // We don't want any clicks to go through to the hotseat unless the workspace is in
         // the normal state or an accessible drag is in progress.
-        return mLauncher.getWorkspace().workspaceInModalState() &&
+        return !mLauncher.getWorkspace().workspaceIconsCanBeDragged() &&
                 !mLauncher.getAccessibilityDelegate().isInAccessibleDrag();
     }
 

File: src/com/android/launcher3/PreloadIconDrawable.java
Patch:
@@ -177,8 +177,9 @@ protected boolean onLevelChange(int level) {
             // Set the paint color only when the level changes, so that the dominant color
             // is only calculated when needed.
             mPaint.setColor(getIndicatorColor());
-        } else if (mIcon instanceof FastBitmapDrawable) {
-            ((FastBitmapDrawable) mIcon).setIsDisabled(true);
+        }
+        if (mIcon instanceof FastBitmapDrawable) {
+            ((FastBitmapDrawable) mIcon).setIsDisabled(level < 100);
         }
 
         invalidateSelf();

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -1041,7 +1041,7 @@ void visualizeDropLocation(View v, DragPreviewProvider outlineProvider, int cell
                     // Offsets due to the size difference between the View and the dragOutline.
                     // There is a size difference to account for the outer blur, which may lie
                     // outside the bounds of the view.
-                    top += (v.getHeight() - dragOutline.getHeight()) / 2;
+                    top += ((mCellHeight * spanY) - dragOutline.getHeight()) / 2;
                     // We center about the x axis
                     left += ((mCellWidth * spanX) - dragOutline.getWidth()) / 2;
                 } else {

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -1225,8 +1225,7 @@ public void run() {
                         // We add the child after removing the folder to prevent both from existing
                         // at the same time in the CellLayout.  We need to add the new item with
                         // addInScreenFromBind() to ensure that hotseat items are placed correctly.
-                        mLauncher.getWorkspace().addInScreenFromBind(newIcon, mInfo.container,
-                                mInfo.screenId, mInfo.cellX, mInfo.cellY, mInfo.spanX, mInfo.spanY);
+                        mLauncher.getWorkspace().addInScreenFromBind(newIcon, mInfo);
 
                         // Focus the newly created child
                         newIcon.requestFocus();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -48,7 +48,6 @@
 import android.view.ViewDebug;
 import android.view.ViewGroup;
 import android.view.accessibility.AccessibilityManager;
-import android.view.animation.Animation.AnimationListener;
 import android.view.animation.DecelerateInterpolator;
 import android.view.animation.Interpolator;
 import android.widget.TextView;
@@ -2056,7 +2055,7 @@ public Animator setStateWithAnimation(State toState, boolean animated,
         StateTransitionListener listener = new StateTransitionListener();
         if (animated) {
             ValueAnimator stepAnimator = ValueAnimator.ofFloat(0, 1);
-            stepAnimator.addListener(listener);
+            stepAnimator.addUpdateListener(listener);
 
             workspaceAnim.play(stepAnimator);
             workspaceAnim.addListener(listener);

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -364,7 +364,6 @@ private void updateFilter() {
 
     private AnimatorSet cancelAnimator(AnimatorSet animator) {
         if (animator != null) {
-            animator.removeAllListeners();
             animator.cancel();
         }
         return null;

File: src/com/android/launcher3/allapps/AllAppsBackgroundDrawable.java
Patch:
@@ -188,7 +188,6 @@ public int getOpacity() {
 
     private ObjectAnimator cancelAnimator(ObjectAnimator animator) {
         if (animator != null) {
-            animator.removeAllListeners();
             animator.cancel();
         }
         return null;

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -121,7 +121,7 @@ protected void onLauncherAppsAdded(
             // getting filled with the managed user apps, when it start with a fresh DB (or after
             // a very long time).
             if (userAppsExisted && !homescreenApps.isEmpty()) {
-                mModel.addAndBindAddedWorkspaceItems(homescreenApps);
+                mModel.addAndBindAddedWorkspaceItems(new ArrayList<ItemInfo>(homescreenApps));
             }
         }
 
@@ -173,7 +173,7 @@ public void run() {
                 }
 
                 // Add the item to home screen and DB. This also generates an item id synchronously.
-                ArrayList<ItemInfo> itemList = new ArrayList<ItemInfo>(1);
+                ArrayList<ItemInfo> itemList = new ArrayList<>(1);
                 itemList.add(workFolder);
                 mModel.addAndBindAddedWorkspaceItems(itemList);
                 mPrefs.edit().putLong(folderIdKey, workFolder.id).apply();

File: tests/src/com/android/launcher3/model/AddWorkspaceItemsTaskTest.java
Patch:
@@ -15,6 +15,7 @@
 import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.util.GridOccupancy;
 import com.android.launcher3.util.LongArrayMap;
+import com.android.launcher3.util.Provider;
 
 import org.mockito.ArgumentCaptor;
 
@@ -48,8 +49,8 @@ protected void setUp() throws Exception {
         idp.numRows = 5;
     }
 
-    private <T extends ItemInfo> AddWorkspaceItemsTask newTask(T... items) {
-        return new AddWorkspaceItemsTask(new ArrayList<>(Arrays.asList(items))) {
+    private AddWorkspaceItemsTask newTask(ItemInfo... items) {
+        return new AddWorkspaceItemsTask(Provider.of(Arrays.asList(items))) {
 
             @Override
             protected void addItemToDatabase(Context context, ItemInfo item,

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -650,7 +650,7 @@ protected void onEmptyDbCreated() {
             if (mWidgetHostResetHandler != null) {
                 new AppWidgetHost(mContext, Launcher.APPWIDGET_HOST_ID).deleteHost();
                 mWidgetHostResetHandler.sendEmptyMessage(
-                        ChangeListenerWrapper.MSG_EXTRACTED_COLORS_CHANGED);
+                        ChangeListenerWrapper.MSG_APP_WIDGET_HOST_RESET);
             }
 
             // Set the flag for empty DB

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -650,7 +650,7 @@ protected void onEmptyDbCreated() {
             if (mWidgetHostResetHandler != null) {
                 new AppWidgetHost(mContext, Launcher.APPWIDGET_HOST_ID).deleteHost();
                 mWidgetHostResetHandler.sendEmptyMessage(
-                        ChangeListenerWrapper.MSG_EXTRACTED_COLORS_CHANGED);
+                        ChangeListenerWrapper.MSG_APP_WIDGET_HOST_RESET);
             }
 
             // Set the flag for empty DB

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -364,7 +364,6 @@ private void updateFilter() {
 
     private AnimatorSet cancelAnimator(AnimatorSet animator) {
         if (animator != null) {
-            animator.removeAllListeners();
             animator.cancel();
         }
         return null;

File: src/com/android/launcher3/allapps/AllAppsBackgroundDrawable.java
Patch:
@@ -188,7 +188,6 @@ public int getOpacity() {
 
     private ObjectAnimator cancelAnimator(ObjectAnimator animator) {
         if (animator != null) {
-            animator.removeAllListeners();
             animator.cancel();
         }
         return null;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2594,7 +2594,7 @@ private void startShortcutIntentSafely(Intent intent, Bundle optsBundle, ItemInf
                 if (info.itemType == LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT) {
                     String id = ((ShortcutInfo) info).getDeepShortcutId();
                     String packageName = intent.getPackage();
-                    LauncherAppState.getInstance().getShortcutManager().startShortcut(
+                    DeepShortcutManager.getInstance(this).startShortcut(
                             packageName, id, intent.getSourceBounds(), optsBundle, info.user);
                 } else {
                     // Could be launching some bookkeeping activity

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -32,6 +32,7 @@
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.folder.FolderIcon;
 import com.android.launcher3.graphics.LauncherIcons;
+import com.android.launcher3.shortcuts.DeepShortcutManager;
 import com.android.launcher3.shortcuts.ShortcutInfoCompat;
 
 /**
@@ -308,7 +309,7 @@ public void updateFromDeepShortcutInfo(ShortcutInfoCompat shortcutInfo, Context
 
         // TODO: Use cache for this
         LauncherAppState launcherAppState = LauncherAppState.getInstance();
-        Drawable unbadgedDrawable = launcherAppState.getShortcutManager()
+        Drawable unbadgedDrawable = DeepShortcutManager.getInstance(context)
                 .getShortcutIconDrawable(shortcutInfo,
                         launcherAppState.getInvariantDeviceProfile().fillResIconDpi);
 

File: src/com/android/launcher3/model/ShortcutsChangedTask.java
Patch:
@@ -51,7 +51,8 @@ public ShortcutsChangedTask(String packageName, List<ShortcutInfoCompat> shortcu
 
     @Override
     public void execute(LauncherAppState app, BgDataModel dataModel, AllAppsList apps) {
-        DeepShortcutManager deepShortcutManager = app.getShortcutManager();
+        final Context context = app.getContext();
+        DeepShortcutManager deepShortcutManager = DeepShortcutManager.getInstance(context);
         deepShortcutManager.onShortcutsChanged(mShortcuts);
 
         // Find ShortcutInfo's that have changed on the workspace.
@@ -67,7 +68,6 @@ public void execute(LauncherAppState app, BgDataModel dataModel, AllAppsList app
             }
         }
 
-        final Context context = LauncherAppState.getInstance().getContext();
         final ArrayList<ShortcutInfo> updatedShortcutInfos = new ArrayList<>();
         if (!idsToWorkspaceShortcutInfos.isEmpty()) {
             // Update the workspace to reflect the changes to updated shortcuts residing on it.

File: src/com/android/launcher3/model/UserLockStateChangedTask.java
Patch:
@@ -50,7 +50,7 @@ public UserLockStateChangedTask(UserHandleCompat user) {
     public void execute(LauncherAppState app, BgDataModel dataModel, AllAppsList apps) {
         Context context = app.getContext();
         boolean isUserUnlocked = UserManagerCompat.getInstance(context).isUserUnlocked(mUser);
-        DeepShortcutManager deepShortcutManager = app.getShortcutManager();
+        DeepShortcutManager deepShortcutManager = DeepShortcutManager.getInstance(context);
 
         HashMap<ShortcutKey, ShortcutInfoCompat> pinnedShortcuts = new HashMap<>();
         if (isUserUnlocked) {

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -52,7 +52,6 @@
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAnimUtils;
-import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.LauncherModel;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.LauncherViewPropertyAnimator;
@@ -103,7 +102,7 @@ public class DeepShortcutsContainer extends AbstractFloatingView
     public DeepShortcutsContainer(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
         mLauncher = Launcher.getLauncher(context);
-        mDeepShortcutsManager = LauncherAppState.getInstance().getShortcutManager();
+        mDeepShortcutsManager = DeepShortcutManager.getInstance(context);
 
         mStartDragThreshold = getResources().getDimensionPixelSize(
                 R.dimen.deep_shortcuts_start_drag_threshold);

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -17,7 +17,6 @@
 package com.android.launcher3;
 
 import android.appwidget.AppWidgetHost;
-import android.appwidget.AppWidgetManager;
 import android.content.ComponentName;
 import android.content.ContentValues;
 import android.content.Context;
@@ -437,7 +436,8 @@ public long parseAndAdd(XmlResourceParser parser) {
                 return -1;
             }
 
-            ItemInfo.writeBitmap(mValues, LauncherIcons.createIconBitmap(icon, mContext));
+            mValues.put(LauncherSettings.Favorites.ICON,
+                    Utilities.flattenBitmap(LauncherIcons.createIconBitmap(icon, mContext)));
             mValues.put(Favorites.ICON_PACKAGE, mIconRes.getResourcePackageName(iconId));
             mValues.put(Favorites.ICON_RESOURCE, mIconRes.getResourceName(iconId));
 

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -494,7 +494,6 @@ public synchronized void getTitleAndIcon(ShortcutInfo shortcutInfo, Intent inten
             shortcutInfo.setIcon(getDefaultIcon(user));
             shortcutInfo.title = "";
             shortcutInfo.contentDescription = "";
-            shortcutInfo.usingFallbackIcon = true;
             shortcutInfo.usingLowResIcon = false;
         } else {
             LauncherActivityInfoCompat info = mLauncherApps.resolveActivity(intent, user);
@@ -512,7 +511,6 @@ public synchronized void getTitleAndIcon(
         shortcutInfo.setIcon(getNonNullIcon(entry, user));
         shortcutInfo.title = Utilities.trim(entry.title);
         shortcutInfo.contentDescription = entry.contentDescription;
-        shortcutInfo.usingFallbackIcon = isDefaultIcon(entry.icon, user);
         shortcutInfo.usingLowResIcon = entry.isLowResIcon;
     }
 

File: src/com/android/launcher3/model/PackageUpdatedTask.java
Patch:
@@ -213,7 +213,6 @@ public void execute(Callbacks callbacks) {
                                     si.iconResource.resourceName, context);
                             if (icon != null) {
                                 si.setIcon(icon);
-                                si.usingFallbackIcon = false;
                                 infoUpdated = true;
                             }
                         }

File: src/com/android/launcher3/util/PendingRequestArgs.java
Patch:
@@ -73,7 +73,7 @@ public int describeContents() {
     @Override
     public void writeToParcel(Parcel dest, int flags) {
         ContentValues itemValues = new ContentValues();
-        writeToValues(itemValues);
+        writeToValues(new ContentWriter(itemValues, null));
         itemValues.writeToParcel(dest, flags);
 
         dest.writeInt(mArg1);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -618,7 +618,9 @@ public int getCountY() {
 
     public void setIsHotseat(boolean isHotseat) {
         mIsHotseat = isHotseat;
-        mShortcutsAndWidgets.setIsHotseat(isHotseat);
+        mShortcutsAndWidgets.setContainerType(isHotseat
+                ? ShortcutAndWidgetContainer.HOTSEAT
+                : ShortcutAndWidgetContainer.DEFAULT);
     }
 
     public boolean isHotseat() {

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -256,6 +256,7 @@ private CellLayout createAndAddNewPage() {
         CellLayout page = new CellLayout(getContext());
         page.setCellDimensions(grid.folderCellWidthPx, grid.folderCellHeightPx);
         page.getShortcutsAndWidgets().setMotionEventSplittingEnabled(false);
+        page.getShortcutsAndWidgets().setContainerType(ShortcutAndWidgetContainer.FOLDER);
         page.setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);
         page.setInvertIfRtl(true);
         page.setGridSize(mGridCountX, mGridCountY);

File: tests/src/com/android/launcher3/ui/AddWidgetTest.java
Patch:
@@ -5,7 +5,6 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.view.View;
 
-import com.android.launcher3.CellLayout;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppWidgetInfo;
@@ -51,7 +50,7 @@ private void performTest() throws Throwable {
         // Drag widget to homescreen
         UiObject2 widget = scrollAndFind(widgetContainer, By.clazz(WidgetCell.class)
                 .hasDescendant(By.text(widgetInfo.getLabel(mTargetContext.getPackageManager()))));
-        dragToWorkspace(widget);
+        dragToWorkspace(widget, false);
 
         assertNotNull(launcher.getWorkspace().getFirstMatch(new ItemOperator() {
             @Override

File: tests/src/com/android/launcher3/ui/AllAppsIconToHomeTest.java
Patch:
@@ -47,7 +47,7 @@ private void performTest() throws Throwable {
 
         // Drag icon to homescreen.
         UiObject2 icon = scrollAndFind(appsContainer, By.text(mSettingsApp.getLabel().toString()));
-        dragToWorkspace(icon);
+        dragToWorkspace(icon, true);
 
         // Verify that the icon works on homescreen.
         mDevice.findObject(By.text(mSettingsApp.getLabel().toString())).click();

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -134,7 +134,7 @@ public void updateIcon(IconCache cache) {
             //   3) Setup icon in the center and app icon in the top right corner.
             if (mDisabledForSafeMode) {
                 FastBitmapDrawable disabledIcon = mLauncher.createIconDrawable(mIcon);
-                disabledIcon.setState(FastBitmapDrawable.State.DISABLED);
+                disabledIcon.setIsDisabled(true);
                 mCenterDrawable = disabledIcon;
                 mSettingIconDrawable = null;
             } else if (isReadyForClickSetup()) {

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -315,7 +315,8 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             if (!grid.isVerticalBarLayout()) {
                 MarginLayoutParams searchContainerLp =
                         (MarginLayoutParams) mSearchContainer.getLayoutParams();
-                searchContainerLp.height = grid.hotseatBarHeightPx;
+                searchContainerLp.height = mLauncher.getDragLayer().getInsets().top
+                        + grid.hotseatCellHeightPx;
                 mSearchContainer.setLayoutParams(searchContainerLp);
             }
             super.onMeasure(widthMeasureSpec, heightMeasureSpec);

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -128,7 +128,9 @@ public BubbleTextView(Context context, AttributeSet attrs, int defStyle) {
             setCompoundDrawablePadding(grid.allAppsIconDrawablePaddingPx);
             defaultIconSize = grid.allAppsIconSizePx;
         } else if (display == DISPLAY_FOLDER) {
+            setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.folderChildTextSizePx);
             setCompoundDrawablePadding(grid.folderChildDrawablePaddingPx);
+            defaultIconSize = grid.folderChildIconSizePx;
         }
         mCenterVertically = a.getBoolean(R.styleable.BubbleTextView_centerVertically, false);
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1678,7 +1678,7 @@ private void updatePageAlphaValues() {
         if (mWorkspaceFadeInAdjacentScreens &&
                 !workspaceInModalState() &&
                 !mIsSwitchingState) {
-            int screenCenter = getScrollX() + getViewportOffsetX() + getViewportWidth() / 2;
+            int screenCenter = getScrollX() + getViewportWidth() / 2;
             for (int i = numCustomPages(); i < getChildCount(); i++) {
                 CellLayout child = (CellLayout) getChildAt(i);
                 if (child != null) {
@@ -1815,7 +1815,7 @@ public void endTransition(LayoutTransition transition, ViewGroup container,
                 }
             });
         }
-
+        updatePageAlphaValues();
     }
 
     @Override

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1678,7 +1678,7 @@ private void updatePageAlphaValues() {
         if (mWorkspaceFadeInAdjacentScreens &&
                 !workspaceInModalState() &&
                 !mIsSwitchingState) {
-            int screenCenter = getScrollX() + getViewportOffsetX() + getViewportWidth() / 2;
+            int screenCenter = getScrollX() + getViewportWidth() / 2;
             for (int i = numCustomPages(); i < getChildCount(); i++) {
                 CellLayout child = (CellLayout) getChildAt(i);
                 if (child != null) {
@@ -1815,7 +1815,7 @@ public void endTransition(LayoutTransition transition, ViewGroup container,
                 }
             });
         }
-
+        updatePageAlphaValues();
     }
 
     @Override

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -242,7 +242,7 @@ public void removeObsoletePreviews(ArrayList<? extends ComponentKey> list) {
                     CacheDb.COLUMN_COMPONENT + " = ? AND " + CacheDb.COLUMN_USER + " = ? AND "
                             + CacheDb.COLUMN_SIZE + " = ?",
                     new String[]{
-                            key.componentName.flattenToString(),
+                            key.componentName.flattenToShortString(),
                             Long.toString(mUserManager.getSerialNumberForUser(key.user)),
                             key.size
                     });

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -85,6 +85,7 @@
 import com.android.launcher3.allapps.AllAppsContainerView;
 import com.android.launcher3.allapps.AllAppsTransitionController;
 import com.android.launcher3.allapps.DefaultAppSearchController;
+import com.android.launcher3.anim.AnimationLayerSet;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
@@ -2954,7 +2955,7 @@ private boolean showAppsOrWidgets(State toState, boolean animated, boolean focus
      * new state.
      */
     public Animator startWorkspaceStateChangeAnimation(Workspace.State toState,
-            boolean animated, HashMap<View, Integer> layerViews) {
+            boolean animated, AnimationLayerSet layerViews) {
         Workspace.State fromState = mWorkspace.getState();
         Animator anim = mWorkspace.setStateWithAnimation(toState, animated, layerViews);
         updateInteraction(fromState, toState);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -60,6 +60,7 @@
 import com.android.launcher3.accessibility.OverviewAccessibilityDelegate;
 import com.android.launcher3.accessibility.OverviewScreenAccessibilityDelegate;
 import com.android.launcher3.accessibility.WorkspaceAccessibilityHelper;
+import com.android.launcher3.anim.AnimationLayerSet;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.config.FeatureFlags;
@@ -86,7 +87,6 @@
 import com.android.launcher3.widget.PendingAddWidgetInfo;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.HashSet;
 
 /**
@@ -2029,7 +2029,7 @@ float getOverviewModeShrinkFactor() {
      * to that new state.
      */
     public Animator setStateWithAnimation(State toState, boolean animated,
-            HashMap<View, Integer> layerViews) {
+            AnimationLayerSet layerViews) {
         // Create the animation to the new state
         AnimatorSet workspaceAnim =  mStateTransitionAnimation.getAnimationToState(mState,
                 toState, animated, layerViews);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3656,8 +3656,10 @@ void setup(DragController dragController) {
     public void onDropCompleted(final View target, final DragObject d,
             final boolean isFlingToDelete, final boolean success) {
         if (mDeferDropAfterUninstall) {
+            final CellLayout.CellInfo dragInfo = mDragInfo;
             mDeferredAction = new Runnable() {
                 public void run() {
+                    mDragInfo = dragInfo; // Restore the drag info that was cleared in onDragEnd()
                     onDropCompleted(target, d, isFlingToDelete, success);
                     mDeferredAction = null;
                 }
@@ -3685,6 +3687,7 @@ public void run() {
                 && mDragInfo.cell != null) {
             mDragInfo.cell.setVisibility(VISIBLE);
         }
+        mDragInfo = null;
 
         if (!isFlingToDelete) {
             // Fling to delete already exits spring loaded mode after the animation finishes.

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -427,8 +427,10 @@ public boolean onTouch(View v, MotionEvent ev) {
     public boolean onLongClick(View v) {
         // Return early if this is not initiated from a touch or not the correct view
         if (!v.isInTouchMode() || !(v.getParent() instanceof DeepShortcutView)) return false;
-        // Return if global dragging is not enabled
+        // Return early if global dragging is not enabled
         if (!mLauncher.isDraggingEnabled()) return false;
+        // Return early if an item is already being dragged (e.g. when long-pressing two shortcuts)
+        if (mLauncher.getDragController().isDragging()) return false;
 
         // Long clicked on a shortcut.
         mDeferContainerRemoval = true;

File: src/com/android/launcher3/allapps/DefaultAppSearchAlgorithm.java
Patch:
@@ -115,7 +115,7 @@ protected boolean isBreak(int thisType, int prevType, int nextType) {
                 return prevType != Character.UPPERCASE_LETTER;
             case Character.LOWERCASE_LETTER:
                 // Break point if previous was not a letter.
-                return prevType > Character.OTHER_LETTER;
+                return prevType > Character.OTHER_LETTER || prevType <= Character.UNASSIGNED;
             case Character.DECIMAL_DIGIT_NUMBER:
             case Character.LETTER_NUMBER:
             case Character.OTHER_NUMBER:

File: src/com/android/launcher3/allapps/DefaultAppSearchAlgorithm.java
Patch:
@@ -115,7 +115,7 @@ protected boolean isBreak(int thisType, int prevType, int nextType) {
                 return prevType != Character.UPPERCASE_LETTER;
             case Character.LOWERCASE_LETTER:
                 // Break point if previous was not a letter.
-                return prevType > Character.OTHER_LETTER;
+                return prevType > Character.OTHER_LETTER || prevType <= Character.UNASSIGNED;
             case Character.DECIMAL_DIGIT_NUMBER:
             case Character.LETTER_NUMBER:
             case Character.OTHER_NUMBER:

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -63,8 +63,6 @@ public class LauncherAppWidgetHostView extends AppWidgetHostView implements Touc
     @ViewDebug.ExportedProperty(category = "launcher")
     private boolean mChildrenFocused;
 
-    protected int mErrorViewId = R.layout.appwidget_error;
-
     private boolean mIsAttachedToWindow;
     private boolean mIsAutoAdvanceRegistered;
     private Runnable mAutoAdvanceRunnable;
@@ -81,7 +79,7 @@ public LauncherAppWidgetHostView(Context context) {
 
     @Override
     protected View getErrorView() {
-        return mInflater.inflate(mErrorViewId, this, false);
+        return mInflater.inflate(R.layout.appwidget_error, this, false);
     }
 
     public void updateLastInflationOrientation() {

File: src/com/android/launcher3/util/PendingRequestArgs.java
Patch:
@@ -74,6 +74,7 @@ public int describeContents() {
     public void writeToParcel(Parcel dest, int flags) {
         ContentValues itemValues = new ContentValues();
         writeToValues(itemValues);
+        itemValues.writeToParcel(dest, flags);
 
         dest.writeInt(mArg1);
         dest.writeInt(mObjectType);

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -702,6 +702,7 @@ protected void handleClose(boolean animate) {
         }
 
         if (!(getParent() instanceof DragLayer)) return;
+        DragLayer parent = (DragLayer) getParent();
 
         if (animate) {
             animateClosed();
@@ -711,8 +712,7 @@ protected void handleClose(boolean animate) {
 
         // Notify the accessibility manager that this folder "window" has disappeared and no
         // longer occludes the workspace items
-        ((DragLayer) getParent())
-                .sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
+        parent.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
     }
 
     private void animateClosed() {

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -702,6 +702,7 @@ protected void handleClose(boolean animate) {
         }
 
         if (!(getParent() instanceof DragLayer)) return;
+        DragLayer parent = (DragLayer) getParent();
 
         if (animate) {
             animateClosed();
@@ -711,8 +712,7 @@ protected void handleClose(boolean animate) {
 
         // Notify the accessibility manager that this folder "window" has disappeared and no
         // longer occludes the workspace items
-        ((DragLayer) getParent())
-                .sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
+        parent.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
     }
 
     private void animateClosed() {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -499,9 +499,9 @@ private void loadExtractedColorsAndColorItems() {
      * @param activate if true, make sure the status bar is light, otherwise base on wallpaper.
      */
     public void activateLightStatusBar(boolean activate) {
-        boolean lightStatusBar = activate
-                || mExtractedColors.getColor(ExtractedColors.STATUS_BAR_INDEX,
-                ExtractedColors.DEFAULT_DARK) == ExtractedColors.DEFAULT_LIGHT;
+        boolean lightStatusBar = activate || (FeatureFlags.LIGHT_STATUS_BAR
+                && mExtractedColors.getColor(ExtractedColors.STATUS_BAR_INDEX,
+                ExtractedColors.DEFAULT_DARK) == ExtractedColors.DEFAULT_LIGHT);
         int oldSystemUiFlags = getWindow().getDecorView().getSystemUiVisibility();
         int newSystemUiFlags = oldSystemUiFlags;
         if (lightStatusBar) {

File: src/com/android/launcher3/dynamicui/ExtractedColors.java
Patch:
@@ -47,7 +47,7 @@ public class ExtractedColors {
     // public static final int MUTED_LIGHT_INDEX = 7;
 
     public static final int NUM_COLOR_PROFILES = 2;
-    private static final int VERSION = 2;
+    private static final int VERSION = 1;
 
     private static final String COLOR_SEPARATOR = ",";
 

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -37,4 +37,6 @@ private FeatureFlags() {}
     public static final boolean NO_ALL_APPS_ICON = true;
     // When enabled fling down gesture on the first workspace triggers search.
     public static final boolean PULLDOWN_SEARCH = false;
+    // When enabled the status bar may show dark icons based on the top of the wallpaper.
+    public static final boolean LIGHT_STATUS_BAR = false;
 }

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -80,7 +80,7 @@ public AppWidgetResizeFrame(Context context,
             LauncherAppWidgetHostView widgetView, CellLayout cellLayout, DragLayer dragLayer) {
 
         super(context);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mCellLayout = cellLayout;
         mWidgetView = widgetView;
         LauncherAppWidgetProviderInfo info = (LauncherAppWidgetProviderInfo)

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -83,7 +83,7 @@ public ButtonDropTarget(Context context, AttributeSet attrs) {
 
     public ButtonDropTarget(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
 
         Resources resources = getResources();
         mBottomDragPadding = resources.getDimensionPixelSize(R.dimen.drop_target_drag_padding);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -196,7 +196,7 @@ public CellLayout(Context context, AttributeSet attrs, int defStyle) {
         // the user where a dragged item will land when dropped.
         setWillNotDraw(false);
         setClipToPadding(false);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
 
         DeviceProfile grid = mLauncher.getDeviceProfile();
 

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -204,7 +204,7 @@ static boolean handleHotseatButtonKeyEvent(View v, int keyCode, KeyEvent e) {
             return consume;
         }
 
-        final Launcher launcher = (Launcher) v.getContext();
+        final Launcher launcher = Launcher.getLauncher(v.getContext());
         final DeviceProfile profile = launcher.getDeviceProfile();
 
         if (DEBUG) {
@@ -341,7 +341,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
             return consume;
         }
 
-        Launcher launcher = (Launcher) v.getContext();
+        Launcher launcher = Launcher.getLauncher(v.getContext());
         DeviceProfile profile = launcher.getDeviceProfile();
 
         if (DEBUG) {

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -67,7 +67,7 @@ public Hotseat(Context context, AttributeSet attrs) {
 
     public Hotseat(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mHasVerticalHotseat = mLauncher.getDeviceProfile().isVerticalBarLayout();
         mBackgroundColor = ColorUtils.setAlphaComponent(
                 ContextCompat.getColor(context, R.color.all_apps_container_color), 0);

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1834,7 +1834,7 @@ protected void onScrollInteractionEnd() {
     }
 
     protected void onUnhandledTap(MotionEvent ev) {
-        ((Launcher) getContext()).onClick(this);
+        Launcher.getLauncher(getContext()).onClick(this);
     }
 
     @Override

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -48,7 +48,7 @@ public class ShortcutAndWidgetContainer extends ViewGroup {
 
     public ShortcutAndWidgetContainer(Context context) {
         super(context);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mWallpaperManager = WallpaperManager.getInstance(context);
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -338,7 +338,7 @@ public Workspace(Context context, AttributeSet attrs) {
     public Workspace(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
 
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mStateTransitionAnimation = new WorkspaceStateTransitionAnimation(mLauncher, this);
         final Resources res = getResources();
         DeviceProfile grid = mLauncher.getDeviceProfile();

File: src/com/android/launcher3/accessibility/DragAndDropAccessibilityDelegate.java
Patch:
@@ -50,7 +50,7 @@ public DragAndDropAccessibilityDelegate(CellLayout forView) {
         super(forView);
         mView = forView;
         mContext = mView.getContext();
-        mDelegate = ((Launcher) mContext).getAccessibilityDelegate();
+        mDelegate = Launcher.getLauncher(mContext).getAccessibilityDelegate();
     }
 
     @Override

File: src/com/android/launcher3/accessibility/OverviewAccessibilityDelegate.java
Patch:
@@ -53,7 +53,7 @@ public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo i
 
     @Override
     public boolean performAccessibilityAction(View host, int action, Bundle args) {
-        Launcher launcher = (Launcher) host.getContext();
+        Launcher launcher = Launcher.getLauncher(host.getContext());
         if (action == OVERVIEW) {
             launcher.showOverviewMode(true);
             return true;

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -696,7 +696,7 @@ private boolean handleTouchEvent(MotionEvent ev) {
                     float distance = (float) Math.hypot(dx, dy);
                     if (distance < viewConfig.getScaledTouchSlop()) {
                         // The background was clicked, so just go home
-                        Launcher launcher = (Launcher) getContext();
+                        Launcher launcher = Launcher.getLauncher(getContext());
                         launcher.showWorkspace(true);
                         return true;
                     }

File: src/com/android/launcher3/allapps/AllAppsRecyclerViewContainerView.java
Patch:
@@ -49,7 +49,7 @@ public AllAppsRecyclerViewContainerView(Context context, AttributeSet attrs) {
     public AllAppsRecyclerViewContainerView(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
 
-        Launcher launcher = (Launcher) context;
+        Launcher launcher = Launcher.getLauncher(context);
         DeviceProfile grid = launcher.getDeviceProfile();
 
         mTouchFeedbackView = new ClickShadowView(context);

File: src/com/android/launcher3/allapps/AlphabeticalAppsList.java
Patch:
@@ -209,7 +209,7 @@ boolean continueMerging(SectionInfo section, SectionInfo withSection,
     private int mNumAppRowsInAdapter;
 
     public AlphabeticalAppsList(Context context) {
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mIndexer = new AlphabeticIndexCompat(context);
         mAppNameComparator = new AppNameComparator(context);
     }

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -212,7 +212,7 @@ public Folder(Context context, AttributeSet attrs) {
         if (sHintText == null) {
             sHintText = res.getString(R.string.folder_hint_text);
         }
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         // We need this view to be focusable in touch mode so that when text editing of the folder
         // name is complete, we have something to focus on, thus hiding the cursor and giving
         // reliable behavior when clicking the text field (since it will always gain focus on click).

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -252,7 +252,7 @@ public CellLayout getCurrentCellLayout() {
     }
 
     private CellLayout createAndAddNewPage() {
-        DeviceProfile grid = ((Launcher) getContext()).getDeviceProfile();
+        DeviceProfile grid = Launcher.getLauncher(getContext()).getDeviceProfile();
         CellLayout page = new CellLayout(getContext());
         page.setCellDimensions(grid.folderCellWidthPx, grid.folderCellHeightPx);
         page.getShortcutsAndWidgets().setMotionEventSplittingEnabled(false);

File: src/com/android/launcher3/pageindicators/PageIndicatorCaretLandscape.java
Patch:
@@ -49,7 +49,7 @@ public PageIndicatorCaretLandscape(Context context, AttributeSet attrs, int defS
         caretDrawable.setBounds(0, 0, caretSize, caretSize);
         setCaretDrawable(caretDrawable);
 
-        Launcher l = (Launcher) context;
+        Launcher l = Launcher.getLauncher(context);
         setOnTouchListener(l.getHapticFeedbackTouchListener());
         setOnClickListener(l);
         setOnLongClickListener(l);

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -125,7 +125,7 @@ public PageIndicatorLineCaret(Context context, AttributeSet attrs, int defStyle)
         mLinePaint = new Paint();
         mLinePaint.setAlpha(0);
 
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mLineHeight = res.getDimensionPixelSize(R.dimen.dynamic_grid_page_indicator_line_height);
         setCaretDrawable(new CaretDrawable(context));
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2760,6 +2760,9 @@ public void run() {
             }
             parent.onDropChild(cell);
         }
+        if (d.stateAnnouncer != null) {
+            d.stateAnnouncer.completeAction(R.string.item_moved);
+        }
     }
 
     /**

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -284,7 +284,8 @@ private void updateIconSize(float scale, int drawablePadding, Resources res,
                 Utilities.calculateTextHeight(res.getDimension(R.dimen.folder_child_text_size));
 
         final int folderBottomPanelSize =
-                2 * res.getDimensionPixelSize(R.dimen.folder_label_padding)
+                res.getDimensionPixelSize(R.dimen.folder_label_padding_top)
+                 + res.getDimensionPixelSize(R.dimen.folder_label_padding_bottom)
                 + Utilities.calculateTextHeight(res.getDimension(R.dimen.folder_label_text_size));
 
         // Don't let the folder get too close to the edges of the screen.

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -80,7 +80,7 @@ public AppWidgetResizeFrame(Context context,
             LauncherAppWidgetHostView widgetView, CellLayout cellLayout, DragLayer dragLayer) {
 
         super(context);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mCellLayout = cellLayout;
         mWidgetView = widgetView;
         LauncherAppWidgetProviderInfo info = (LauncherAppWidgetProviderInfo)

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -83,7 +83,7 @@ public ButtonDropTarget(Context context, AttributeSet attrs) {
 
     public ButtonDropTarget(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
 
         Resources resources = getResources();
         mBottomDragPadding = resources.getDimensionPixelSize(R.dimen.drop_target_drag_padding);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -196,7 +196,7 @@ public CellLayout(Context context, AttributeSet attrs, int defStyle) {
         // the user where a dragged item will land when dropped.
         setWillNotDraw(false);
         setClipToPadding(false);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
 
         DeviceProfile grid = mLauncher.getDeviceProfile();
 

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -204,7 +204,7 @@ static boolean handleHotseatButtonKeyEvent(View v, int keyCode, KeyEvent e) {
             return consume;
         }
 
-        final Launcher launcher = (Launcher) v.getContext();
+        final Launcher launcher = Launcher.getLauncher(v.getContext());
         final DeviceProfile profile = launcher.getDeviceProfile();
 
         if (DEBUG) {
@@ -341,7 +341,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
             return consume;
         }
 
-        Launcher launcher = (Launcher) v.getContext();
+        Launcher launcher = Launcher.getLauncher(v.getContext());
         DeviceProfile profile = launcher.getDeviceProfile();
 
         if (DEBUG) {

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -67,7 +67,7 @@ public Hotseat(Context context, AttributeSet attrs) {
 
     public Hotseat(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mHasVerticalHotseat = mLauncher.getDeviceProfile().isVerticalBarLayout();
         mBackgroundColor = ColorUtils.setAlphaComponent(
                 ContextCompat.getColor(context, R.color.all_apps_container_color), 0);

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1834,7 +1834,7 @@ protected void onScrollInteractionEnd() {
     }
 
     protected void onUnhandledTap(MotionEvent ev) {
-        ((Launcher) getContext()).onClick(this);
+        Launcher.getLauncher(getContext()).onClick(this);
     }
 
     @Override

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -48,7 +48,7 @@ public class ShortcutAndWidgetContainer extends ViewGroup {
 
     public ShortcutAndWidgetContainer(Context context) {
         super(context);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mWallpaperManager = WallpaperManager.getInstance(context);
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -338,7 +338,7 @@ public Workspace(Context context, AttributeSet attrs) {
     public Workspace(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
 
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mStateTransitionAnimation = new WorkspaceStateTransitionAnimation(mLauncher, this);
         final Resources res = getResources();
         DeviceProfile grid = mLauncher.getDeviceProfile();

File: src/com/android/launcher3/accessibility/DragAndDropAccessibilityDelegate.java
Patch:
@@ -50,7 +50,7 @@ public DragAndDropAccessibilityDelegate(CellLayout forView) {
         super(forView);
         mView = forView;
         mContext = mView.getContext();
-        mDelegate = ((Launcher) mContext).getAccessibilityDelegate();
+        mDelegate = Launcher.getLauncher(mContext).getAccessibilityDelegate();
     }
 
     @Override

File: src/com/android/launcher3/accessibility/OverviewAccessibilityDelegate.java
Patch:
@@ -53,7 +53,7 @@ public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo i
 
     @Override
     public boolean performAccessibilityAction(View host, int action, Bundle args) {
-        Launcher launcher = (Launcher) host.getContext();
+        Launcher launcher = Launcher.getLauncher(host.getContext());
         if (action == OVERVIEW) {
             launcher.showOverviewMode(true);
             return true;

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -696,7 +696,7 @@ private boolean handleTouchEvent(MotionEvent ev) {
                     float distance = (float) Math.hypot(dx, dy);
                     if (distance < viewConfig.getScaledTouchSlop()) {
                         // The background was clicked, so just go home
-                        Launcher launcher = (Launcher) getContext();
+                        Launcher launcher = Launcher.getLauncher(getContext());
                         launcher.showWorkspace(true);
                         return true;
                     }

File: src/com/android/launcher3/allapps/AllAppsRecyclerViewContainerView.java
Patch:
@@ -49,7 +49,7 @@ public AllAppsRecyclerViewContainerView(Context context, AttributeSet attrs) {
     public AllAppsRecyclerViewContainerView(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
 
-        Launcher launcher = (Launcher) context;
+        Launcher launcher = Launcher.getLauncher(context);
         DeviceProfile grid = launcher.getDeviceProfile();
 
         mTouchFeedbackView = new ClickShadowView(context);

File: src/com/android/launcher3/allapps/AlphabeticalAppsList.java
Patch:
@@ -209,7 +209,7 @@ boolean continueMerging(SectionInfo section, SectionInfo withSection,
     private int mNumAppRowsInAdapter;
 
     public AlphabeticalAppsList(Context context) {
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mIndexer = new AlphabeticIndexCompat(context);
         mAppNameComparator = new AppNameComparator(context);
     }

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -212,7 +212,7 @@ public Folder(Context context, AttributeSet attrs) {
         if (sHintText == null) {
             sHintText = res.getString(R.string.folder_hint_text);
         }
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         // We need this view to be focusable in touch mode so that when text editing of the folder
         // name is complete, we have something to focus on, thus hiding the cursor and giving
         // reliable behavior when clicking the text field (since it will always gain focus on click).

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -252,7 +252,7 @@ public CellLayout getCurrentCellLayout() {
     }
 
     private CellLayout createAndAddNewPage() {
-        DeviceProfile grid = ((Launcher) getContext()).getDeviceProfile();
+        DeviceProfile grid = Launcher.getLauncher(getContext()).getDeviceProfile();
         CellLayout page = new CellLayout(getContext());
         page.setCellDimensions(grid.folderCellWidthPx, grid.folderCellHeightPx);
         page.getShortcutsAndWidgets().setMotionEventSplittingEnabled(false);

File: src/com/android/launcher3/pageindicators/PageIndicatorCaretLandscape.java
Patch:
@@ -49,7 +49,7 @@ public PageIndicatorCaretLandscape(Context context, AttributeSet attrs, int defS
         caretDrawable.setBounds(0, 0, caretSize, caretSize);
         setCaretDrawable(caretDrawable);
 
-        Launcher l = (Launcher) context;
+        Launcher l = Launcher.getLauncher(context);
         setOnTouchListener(l.getHapticFeedbackTouchListener());
         setOnClickListener(l);
         setOnLongClickListener(l);

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -125,7 +125,7 @@ public PageIndicatorLineCaret(Context context, AttributeSet attrs, int defStyle)
         mLinePaint = new Paint();
         mLinePaint.setAlpha(0);
 
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mLineHeight = res.getDimensionPixelSize(R.dimen.dynamic_grid_page_indicator_line_height);
         setCaretDrawable(new CaretDrawable(context));
     }

File: src/com/android/launcher3/QsbContainerView.java
Patch:
@@ -109,6 +109,8 @@ private View createQsb(LayoutInflater inflater, ViewGroup container) {
             if (mWidgetInfo == null) {
                 // There is no search provider, just show the default widget.
                 return getDefaultView(inflater, container, false);
+            } else {
+                mWidgetInfo = LauncherAppWidgetProviderInfo.fromProviderInfo(launcher, mWidgetInfo);
             }
 
             SharedPreferences prefs = Utilities.getPrefs(launcher);

File: src/com/android/launcher3/QsbContainerView.java
Patch:
@@ -109,6 +109,8 @@ private View createQsb(LayoutInflater inflater, ViewGroup container) {
             if (mWidgetInfo == null) {
                 // There is no search provider, just show the default widget.
                 return getDefaultView(inflater, container, false);
+            } else {
+                mWidgetInfo = LauncherAppWidgetProviderInfo.fromProviderInfo(launcher, mWidgetInfo);
             }
 
             SharedPreferences prefs = Utilities.getPrefs(launcher);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -599,6 +599,7 @@ public boolean onTouch(View v, MotionEvent ev) {
                     if (shouldConsumeTouch(v)) return true;
                     if (super.onTouch(v, ev)) {
                         mLauncher.startSearch("", false, null, false);
+                        return true;
                     }
                     return false;
                 }
@@ -610,6 +611,7 @@ public boolean onTouch(View v, MotionEvent ev) {
                     if (shouldConsumeTouch(v)) return true;
                     if (super.onTouch(v, ev)) {
                         mLauncher.startSearch("", false, null, false);
+                        return true;
                     }
                     return false;
                 }

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -277,8 +277,8 @@ private void updateLightStatusBar(float shift) {
         }
         // Use a light status bar (dark icons) if all apps is behind at least half of the status
         // bar. If the status bar is already light due to wallpaper extraction, keep it that way.
-        boolean enable = shift <= mStatusBarHeight / 2 || mLauncher.shouldBeLightStatusBar();
-        mLauncher.setLightStatusBar(enable);
+        boolean forceLight = shift <= mStatusBarHeight / 2;
+        mLauncher.activateLightStatusBar(forceLight);
     }
 
     /**

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -277,8 +277,8 @@ private void updateLightStatusBar(float shift) {
         }
         // Use a light status bar (dark icons) if all apps is behind at least half of the status
         // bar. If the status bar is already light due to wallpaper extraction, keep it that way.
-        boolean enable = shift <= mStatusBarHeight / 2 || mLauncher.shouldBeLightStatusBar();
-        mLauncher.setLightStatusBar(enable);
+        boolean forceLight = shift <= mStatusBarHeight / 2;
+        mLauncher.activateLightStatusBar(forceLight);
     }
 
     /**

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -277,8 +277,8 @@ private void updateLightStatusBar(float shift) {
         }
         // Use a light status bar (dark icons) if all apps is behind at least half of the status
         // bar. If the status bar is already light due to wallpaper extraction, keep it that way.
-        boolean enable = shift <= mStatusBarHeight / 2 || mLauncher.shouldBeLightStatusBar();
-        mLauncher.setLightStatusBar(enable);
+        boolean forceLight = shift <= mStatusBarHeight / 2;
+        mLauncher.activateLightStatusBar(forceLight);
     }
 
     /**

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -916,7 +916,7 @@ public void run() {
             if (mDeleteFolderOnDropCompleted && !mItemAddedBackToSelfViaIcon && target != this) {
                 replaceFolderWithFinalItem();
             }
-        } else {
+        } else if (!mDragController.isDeferringDrag()) {
             // The drag failed, we need to return the item to the folder
             ShortcutInfo info = (ShortcutInfo) d.dragInfo;
             View icon = (mCurrentDragView != null && mCurrentDragView.getTag() == info)

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1565,7 +1565,7 @@ public void onReceive(Context context, Intent intent) {
             final String action = intent.getAction();
             if (Intent.ACTION_SCREEN_OFF.equals(action)) {
                 mUserPresent = false;
-                mDragLayer.clearAllResizeFrames();
+                mDragLayer.clearResizeFrame();
                 updateAutoAdvanceState();
 
                 // Reset AllApps to its initial state only if we are not in the middle of

File: src/com/android/launcher3/PinchToOverviewListener.java
Patch:
@@ -61,12 +61,12 @@ public PinchToOverviewListener(Launcher launcher) {
         mPinchDetector = new ScaleGestureDetector((Context) mLauncher, this);
     }
 
-    public boolean onInterceptTouchEvent(MotionEvent ev) {
+    public boolean onControllerInterceptTouchEvent(MotionEvent ev) {
         mPinchDetector.onTouchEvent(ev);
         return mPinchStarted;
     }
 
-    public boolean onTouchEvent(MotionEvent ev) {
+    public boolean onControllerTouchEvent(MotionEvent ev) {
         if (mPinchStarted) {
             if (ev.getPointerCount() > 2) {
                 // Using more than two fingers causes weird behavior, so just cancel the pinch.

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -106,7 +106,7 @@ public AllAppsTransitionController(Launcher l) {
     }
 
     @Override
-    public boolean onInterceptTouchEvent(MotionEvent ev) {
+    public boolean onControllerInterceptTouchEvent(MotionEvent ev) {
         if (ev.getAction() == MotionEvent.ACTION_DOWN) {
             mNoIntercept = false;
             if (mLauncher.getWorkspace().isInOverviewMode() || mLauncher.isWidgetsViewVisible()) {
@@ -173,7 +173,7 @@ private boolean shouldPossiblyIntercept(MotionEvent ev) {
     }
 
     @Override
-    public boolean onTouchEvent(MotionEvent ev) {
+    public boolean onControllerTouchEvent(MotionEvent ev) {
         return mDetector.onTouchEvent(ev);
     }
 

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -439,7 +439,7 @@ public void onDriverDragCancel() {
     /**
      * Call this from a drag source view.
      */
-    public boolean onInterceptTouchEvent(MotionEvent ev) {
+    public boolean onControllerInterceptTouchEvent(MotionEvent ev) {
         if (mOptions != null && mOptions.isAccessibleDrag) {
             return false;
         }
@@ -582,7 +582,7 @@ private void checkTouchMove(DropTarget dropTarget) {
     /**
      * Call this from a drag source view.
      */
-    public boolean onTouchEvent(MotionEvent ev) {
+    public boolean onControllerTouchEvent(MotionEvent ev) {
         if (mDragDriver == null || mOptions == null || mOptions.isAccessibleDrag) {
             return false;
         }

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -447,7 +447,7 @@ public boolean onTouchEvent(MotionEvent ev) {
                 cleanupDeferredDrag(true);
                 mDeferredDragIcon.getParent().requestDisallowInterceptTouchEvent(false);
                 mDeferredDragIcon.getOnLongClickListener().onLongClick(mDeferredDragIcon);
-                mLauncher.getDragController().onTouchEvent(ev);
+                mLauncher.getDragController().onControllerTouchEvent(ev);
                 return true;
             } else if (mDistanceDragged > mDragDeadzone) {
                 // After dragging further than a small deadzone,

File: src/com/android/launcher3/keyboard/FocusIndicatorHelper.java
Patch:
@@ -143,7 +143,7 @@ public void draw(Canvas c) {
     }
 
     private Rect getDrawRect() {
-        if (mCurrentView != null) {
+        if (mCurrentView != null && mCurrentView.isAttachedToWindow()) {
             viewToRect(mCurrentView, sTempRect1);
 
             if (mShift > 0 && mTargetView != null) {

File: src/com/android/launcher3/util/FocusLogic.java
Patch:
@@ -79,8 +79,7 @@ public static boolean shouldConsume(int keyCode) {
         return (keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT ||
                 keyCode == KeyEvent.KEYCODE_DPAD_UP || keyCode == KeyEvent.KEYCODE_DPAD_DOWN ||
                 keyCode == KeyEvent.KEYCODE_MOVE_HOME || keyCode == KeyEvent.KEYCODE_MOVE_END ||
-                keyCode == KeyEvent.KEYCODE_PAGE_UP || keyCode == KeyEvent.KEYCODE_PAGE_DOWN ||
-                keyCode == KeyEvent.KEYCODE_DEL || keyCode == KeyEvent.KEYCODE_FORWARD_DEL);
+                keyCode == KeyEvent.KEYCODE_PAGE_UP || keyCode == KeyEvent.KEYCODE_PAGE_DOWN);
     }
 
     public static int handleKeyEvent(int keyCode, int [][] map, int iconIdx, int pageIndex,

File: tests/src/com/android/launcher3/util/FocusLogicTest.java
Patch:
@@ -49,8 +49,6 @@ public void testShouldConsume() {
          assertTrue(FocusLogic.shouldConsume(KeyEvent.KEYCODE_MOVE_END));
          assertTrue(FocusLogic.shouldConsume(KeyEvent.KEYCODE_PAGE_UP));
          assertTrue(FocusLogic.shouldConsume(KeyEvent.KEYCODE_PAGE_DOWN));
-         assertTrue(FocusLogic.shouldConsume(KeyEvent.KEYCODE_DEL));
-         assertTrue(FocusLogic.shouldConsume(KeyEvent.KEYCODE_FORWARD_DEL));
     }
 
     public void testCreateSparseMatrix() {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3101,7 +3101,6 @@ public boolean onLongClick(View v) {
                     mWorkspace.startReordering(v);
                 } else {
                     showOverviewMode(true);
-                    mHotseat.requestDisallowInterceptTouchEvent(true);
                 }
             } else {
                 final boolean isAllAppsButton =
@@ -3229,6 +3228,9 @@ public void run() {
         mStateTransitionAnimation.startAnimationToWorkspace(mState, mWorkspace.getState(),
                 Workspace.State.OVERVIEW, animated, postAnimRunnable);
         mState = State.WORKSPACE;
+        // If animated from long press, then don't allow any of the controller in the drag
+        // layer to intercept any remaining touch.
+        mWorkspace.requestDisallowInterceptTouchEvent(animated);
     }
 
     /**

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3101,7 +3101,6 @@ public boolean onLongClick(View v) {
                     mWorkspace.startReordering(v);
                 } else {
                     showOverviewMode(true);
-                    mHotseat.requestDisallowInterceptTouchEvent(true);
                 }
             } else {
                 final boolean isAllAppsButton =
@@ -3229,6 +3228,9 @@ public void run() {
         mStateTransitionAnimation.startAnimationToWorkspace(mState, mWorkspace.getState(),
                 Workspace.State.OVERVIEW, animated, postAnimRunnable);
         mState = State.WORKSPACE;
+        // If animated from long press, then don't allow any of the controller in the drag
+        // layer to intercept any remaining touch.
+        mWorkspace.requestDisallowInterceptTouchEvent(animated);
     }
 
     /**

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3235,7 +3235,6 @@ public boolean onLongClick(View v) {
                     mWorkspace.startReordering(v);
                 } else {
                     showOverviewMode(true);
-                    mHotseat.requestDisallowInterceptTouchEvent(true);
                 }
             } else {
                 final boolean isAllAppsButton =
@@ -3386,6 +3385,9 @@ public void run() {
         mStateTransitionAnimation.startAnimationToWorkspace(mState, mWorkspace.getState(),
                 Workspace.State.OVERVIEW, animated, postAnimRunnable);
         mState = State.WORKSPACE;
+        // If animated from long press, then don't allow any of the controller in the drag
+        // layer to intercept any remaining touch.
+        mWorkspace.requestDisallowInterceptTouchEvent(animated);
     }
 
     /**

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3235,7 +3235,6 @@ public boolean onLongClick(View v) {
                     mWorkspace.startReordering(v);
                 } else {
                     showOverviewMode(true);
-                    mHotseat.requestDisallowInterceptTouchEvent(true);
                 }
             } else {
                 final boolean isAllAppsButton =
@@ -3386,6 +3385,9 @@ public void run() {
         mStateTransitionAnimation.startAnimationToWorkspace(mState, mWorkspace.getState(),
                 Workspace.State.OVERVIEW, animated, postAnimRunnable);
         mState = State.WORKSPACE;
+        // If animated from long press, then don't allow any of the controller in the drag
+        // layer to intercept any remaining touch.
+        mWorkspace.requestDisallowInterceptTouchEvent(animated);
     }
 
     /**

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -135,6 +135,8 @@ public void applyFromCellItem(WidgetItem item, WidgetPreviewLoader loader) {
         mWidgetName.setText(mItem.label);
         mWidgetDims.setText(getContext().getString(R.string.widget_dims_format,
                 mItem.spanX, mItem.spanY));
+        mWidgetDims.setContentDescription(getContext().getString(
+                R.string.widget_accessible_dims_format, mItem.spanX, mItem.spanY));
         mWidgetPreviewLoader = loader;
 
         if (item.activityInfo != null) {

File: src/com/android/launcher3/allapps/AllAppsSearchBarController.java
Patch:
@@ -127,10 +127,9 @@ public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
 
     @Override
     public boolean onBackKey() {
-        // Only hide the search field if there is no query, or if there
-        // are no filtered results
+        // Only hide the search field if there is no query
         String query = Utilities.trim(mInput.getEditableText().toString());
-        if (query.isEmpty() || mApps.hasNoFilteredResults()) {
+        if (query.isEmpty()) {
             reset();
             return true;
         }

File: src/com/android/launcher3/util/VerticalFlingDetector.java
Patch:
@@ -79,6 +79,9 @@ public boolean onTouch(View v, MotionEvent ev) {
     }
 
     private void cleanUp() {
+        if (mVelocityTracker == null) {
+            return;
+        }
         mVelocityTracker.recycle();
         mVelocityTracker = null;
     }

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -31,8 +31,10 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_DISABLE_PINCH_TO_OVERVIEW = false;
     public static boolean LAUNCHER3_ALL_APPS_PULL_UP = true;
 
-    // Feature flag to enable moving the QSB on the 0th screen of the workspace
+    // Feature flag to enable moving the QSB on the 0th screen of the workspace.
     public static final boolean QSB_ON_FIRST_SCREEN = true;
     // When enabled the all-apps icon is not added to the hotseat.
     public static final boolean NO_ALL_APPS_ICON = true;
+    // When enabled fling down gesture on the first workspace triggers search.
+    public static final boolean PULLDOWN_SEARCH = true;
 }

File: src/com/android/launcher3/util/VerticalFlingDetector.java
Patch:
@@ -79,6 +79,9 @@ public boolean onTouch(View v, MotionEvent ev) {
     }
 
     private void cleanUp() {
+        if (mVelocityTracker == null) {
+            return;
+        }
         mVelocityTracker.recycle();
         mVelocityTracker = null;
     }

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -31,8 +31,10 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_DISABLE_PINCH_TO_OVERVIEW = false;
     public static boolean LAUNCHER3_ALL_APPS_PULL_UP = true;
 
-    // Feature flag to enable moving the QSB on the 0th screen of the workspace
+    // Feature flag to enable moving the QSB on the 0th screen of the workspace.
     public static final boolean QSB_ON_FIRST_SCREEN = true;
     // When enabled the all-apps icon is not added to the hotseat.
     public static final boolean NO_ALL_APPS_ICON = true;
+    // When enabled fling down gesture on the first workspace triggers search.
+    public static final boolean PULLDOWN_SEARCH = true;
 }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -65,6 +65,7 @@ public class BubbleTextView extends TextView
 
     private static final int DISPLAY_WORKSPACE = 0;
     private static final int DISPLAY_ALL_APPS = 1;
+    private static final int DISPLAY_FOLDER = 2;
 
     private final Launcher mLauncher;
     private Drawable mIcon;
@@ -125,12 +126,13 @@ public BubbleTextView(Context context, AttributeSet attrs, int defStyle) {
             setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.allAppsIconTextSizePx);
             setCompoundDrawablePadding(grid.allAppsIconDrawablePaddingPx);
             defaultIconSize = grid.allAppsIconSizePx;
+        } else if (display == DISPLAY_FOLDER) {
+            setCompoundDrawablePadding(grid.folderChildDrawablePaddingPx);
         }
         mCenterVertically = a.getBoolean(R.styleable.BubbleTextView_centerVertically, false);
 
         mIconSize = a.getDimensionPixelSize(R.styleable.BubbleTextView_iconSizeOverride,
                 defaultIconSize);
-
         a.recycle();
 
         if (mCustomShadowsEnabled) {

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -686,11 +686,11 @@ public static String trim(CharSequence s) {
     /**
      * Calculates the height of a given string at a specific text size.
      */
-    public static float calculateTextHeight(float textSizePx) {
+    public static int calculateTextHeight(float textSizePx) {
         Paint p = new Paint();
         p.setTextSize(textSizePx);
         Paint.FontMetrics fm = p.getFontMetrics();
-        return -fm.top + fm.bottom;
+        return (int) Math.ceil(fm.bottom - fm.top);
     }
 
     /**

File: src/com/android/launcher3/util/VerticalFlingDetector.java
Patch:
@@ -79,6 +79,9 @@ public boolean onTouch(View v, MotionEvent ev) {
     }
 
     private void cleanUp() {
+        if (mVelocityTracker == null) {
+            return;
+        }
         mVelocityTracker.recycle();
         mVelocityTracker = null;
     }

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -31,8 +31,10 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_DISABLE_PINCH_TO_OVERVIEW = false;
     public static boolean LAUNCHER3_ALL_APPS_PULL_UP = true;
 
-    // Feature flag to enable moving the QSB on the 0th screen of the workspace
+    // Feature flag to enable moving the QSB on the 0th screen of the workspace.
     public static final boolean QSB_ON_FIRST_SCREEN = true;
     // When enabled the all-apps icon is not added to the hotseat.
     public static final boolean NO_ALL_APPS_ICON = true;
+    // When enabled fling down gesture on the first workspace triggers search.
+    public static final boolean PULLDOWN_SEARCH = true;
 }

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -25,6 +25,7 @@
 import android.graphics.Rect;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.graphics.ColorUtils;
 import android.util.AttributeSet;
 import android.view.LayoutInflater;
@@ -69,7 +70,7 @@ public Hotseat(Context context, AttributeSet attrs, int defStyle) {
         mLauncher = (Launcher) context;
         mHasVerticalHotseat = mLauncher.getDeviceProfile().isVerticalBarLayout();
         mBackgroundColor = ColorUtils.setAlphaComponent(
-                context.getColor(R.color.all_apps_container_color), 0);
+                ContextCompat.getColor(context, R.color.all_apps_container_color), 0);
         mBackground = new ColorDrawable(mBackgroundColor);
         setBackground(mBackground);
     }

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -6,6 +6,7 @@
 import android.animation.AnimatorSet;
 import android.animation.ArgbEvaluator;
 import android.animation.ObjectAnimator;
+import android.support.v4.content.ContextCompat;
 import android.support.v4.view.animation.FastOutSlowInInterpolator;
 import android.util.Log;
 import android.view.MotionEvent;
@@ -101,7 +102,7 @@ public AllAppsTransitionController(Launcher l) {
                 R.dimen.all_apps_bezel_swipe_height);
 
         mEvaluator = new ArgbEvaluator();
-        mAllAppsBackgroundColor = l.getColor(R.color.all_apps_container_color);
+        mAllAppsBackgroundColor = ContextCompat.getColor(l, R.color.all_apps_container_color);
     }
 
     @Override

File: src/com/android/launcher3/dragndrop/ExternalDragPreviewProvider.java
Patch:
@@ -23,10 +23,10 @@
 import android.graphics.Rect;
 
 import com.android.launcher3.DeviceProfile;
-import com.android.launcher3.HolographicOutlineHelper;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.graphics.DragPreviewProvider;
+import com.android.launcher3.graphics.HolographicOutlineHelper;
 
 /**
  * Extension of {@link DragPreviewProvider} which provides a dummy outline when drag starts from
@@ -72,7 +72,7 @@ public Bitmap createDragOutline(Canvas canvas) {
         canvas.drawCircle(DRAG_BITMAP_PADDING / 2 + radius,
                 DRAG_BITMAP_PADDING / 2 + radius, radius * 0.9f, paint);
 
-        HolographicOutlineHelper.obtain(mLauncher).applyExpensiveOutlineWithBlur(b, canvas);
+        HolographicOutlineHelper.getInstance(mLauncher).applyExpensiveOutlineWithBlur(b, canvas);
         canvas.setBitmap(null);
         return b;
     }

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -854,8 +854,7 @@ private ContentValues newContentValues(Bitmap icon, Bitmap lowResIcon, String la
         values.put(IconDB.COLUMN_ICON_LOW_RES, Utilities.flattenBitmap(lowResIcon));
 
         values.put(IconDB.COLUMN_LABEL, label);
-        values.put(IconDB.COLUMN_SYSTEM_STATE,
-                mIconProvider.getIconSystemState(mIconProvider.getIconSystemState(packageName)));
+        values.put(IconDB.COLUMN_SYSTEM_STATE, mIconProvider.getIconSystemState(packageName));
 
         return values;
     }

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -853,8 +853,7 @@ private ContentValues newContentValues(Bitmap icon, Bitmap lowResIcon, String la
         values.put(IconDB.COLUMN_ICON_LOW_RES, Utilities.flattenBitmap(lowResIcon));
 
         values.put(IconDB.COLUMN_LABEL, label);
-        values.put(IconDB.COLUMN_SYSTEM_STATE,
-                mIconProvider.getIconSystemState(mIconProvider.getIconSystemState(packageName)));
+        values.put(IconDB.COLUMN_SYSTEM_STATE, mIconProvider.getIconSystemState(packageName));
 
         return values;
     }

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -853,8 +853,7 @@ private ContentValues newContentValues(Bitmap icon, Bitmap lowResIcon, String la
         values.put(IconDB.COLUMN_ICON_LOW_RES, Utilities.flattenBitmap(lowResIcon));
 
         values.put(IconDB.COLUMN_LABEL, label);
-        values.put(IconDB.COLUMN_SYSTEM_STATE,
-                mIconProvider.getIconSystemState(mIconProvider.getIconSystemState(packageName)));
+        values.put(IconDB.COLUMN_SYSTEM_STATE, mIconProvider.getIconSystemState(packageName));
 
         return values;
     }

File: src/com/android/launcher3/AppInfo.java
Patch:
@@ -62,7 +62,7 @@ public class AppInfo extends ItemInfo {
      */
     int isDisabled = ShortcutInfo.DEFAULT;
 
-    AppInfo() {
+    public AppInfo() {
         itemType = LauncherSettings.BaseLauncherColumns.ITEM_TYPE_SHORTCUT;
     }
 

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -579,8 +579,7 @@ public void onDragEnd() {
             } else {
                 // Close animation is not running.
                 if (mDeferContainerRemoval) {
-                    mDeferContainerRemoval = false;
-                    mLauncher.getDragLayer().removeView(this);
+                    close();
                 }
             }
         }
@@ -601,7 +600,6 @@ public void animateClose() {
             mOpenCloseAnimator.cancel();
         }
         mIsOpen = false;
-        mLauncher.getDragController().removeDragListener(this);
 
         final AnimatorSet shortcutAnims = LauncherAnimUtils.createAnimatorSet();
         final int shortcutCount = getShortcutCount();

File: src/com/android/launcher3/InfoDropTarget.java
Patch:
@@ -100,6 +100,7 @@ public static boolean supportsDrop(ItemInfo info) {
                 Settings.Global.DEVELOPMENT_SETTINGS_ENABLED, 0) == 1;
         return developmentSettingsEnabled
                 && (info instanceof AppInfo || info instanceof ShortcutInfo
-                || info instanceof PendingAddItemInfo || info instanceof LauncherAppWidgetInfo);
+                || info instanceof PendingAddItemInfo || info instanceof LauncherAppWidgetInfo)
+                && info.itemType != LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
     }
 }

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -578,8 +578,7 @@ public void onDragEnd() {
             } else {
                 // Close animation is not running.
                 if (mDeferContainerRemoval) {
-                    mDeferContainerRemoval = false;
-                    mLauncher.getDragLayer().removeView(this);
+                    close();
                 }
             }
         }
@@ -600,7 +599,6 @@ public void animateClose() {
             mOpenCloseAnimator.cancel();
         }
         mIsOpen = false;
-        mLauncher.getDragController().removeDragListener(this);
 
         final AnimatorSet shortcutAnims = LauncherAnimUtils.createAnimatorSet();
         final int shortcutCount = getShortcutCount();

File: src/com/android/launcher3/InfoDropTarget.java
Patch:
@@ -100,6 +100,7 @@ public static boolean supportsDrop(ItemInfo info) {
                 Settings.Global.DEVELOPMENT_SETTINGS_ENABLED, 0) == 1;
         return developmentSettingsEnabled
                 && (info instanceof AppInfo || info instanceof ShortcutInfo
-                || info instanceof PendingAddItemInfo || info instanceof LauncherAppWidgetInfo);
+                || info instanceof PendingAddItemInfo || info instanceof LauncherAppWidgetInfo)
+                && info.itemType != LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
     }
 }

File: src/com/android/launcher3/InfoDropTarget.java
Patch:
@@ -100,6 +100,7 @@ public static boolean supportsDrop(ItemInfo info) {
                 Settings.Global.DEVELOPMENT_SETTINGS_ENABLED, 0) == 1;
         return developmentSettingsEnabled
                 && (info instanceof AppInfo || info instanceof ShortcutInfo
-                || info instanceof PendingAddItemInfo || info instanceof LauncherAppWidgetInfo);
+                || info instanceof PendingAddItemInfo || info instanceof LauncherAppWidgetInfo)
+                && info.itemType != LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
     }
 }

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -578,8 +578,7 @@ public void onDragEnd() {
             } else {
                 // Close animation is not running.
                 if (mDeferContainerRemoval) {
-                    mDeferContainerRemoval = false;
-                    mLauncher.getDragLayer().removeView(this);
+                    close();
                 }
             }
         }
@@ -600,7 +599,6 @@ public void animateClose() {
             mOpenCloseAnimator.cancel();
         }
         mIsOpen = false;
-        mLauncher.getDragController().removeDragListener(this);
 
         final AnimatorSet shortcutAnims = LauncherAnimUtils.createAnimatorSet();
         final int shortcutCount = getShortcutCount();

File: src/com/android/launcher3/allapps/AllAppsBackgroundDrawable.java
Patch:
@@ -96,14 +96,14 @@ public class AllAppsBackgroundDrawable extends Drawable {
     public AllAppsBackgroundDrawable(Context context) {
         Resources res = context.getResources();
         mHand = new TransformedImageDrawable(res, R.drawable.ic_all_apps_bg_hand,
-                0.575f, 0.1f, Gravity.CENTER_HORIZONTAL);
+                0.575f, 0.f, Gravity.CENTER_HORIZONTAL);
         mIcons = new TransformedImageDrawable[4];
         mIcons[0] = new TransformedImageDrawable(res, R.drawable.ic_all_apps_bg_icon_1,
                 0.375f, 0, Gravity.CENTER_HORIZONTAL);
         mIcons[1] = new TransformedImageDrawable(res, R.drawable.ic_all_apps_bg_icon_2,
-                0.3125f, 0.25f, Gravity.CENTER_HORIZONTAL);
+                0.3125f, 0.2f, Gravity.CENTER_HORIZONTAL);
         mIcons[2] = new TransformedImageDrawable(res, R.drawable.ic_all_apps_bg_icon_3,
-                0.475f, 0.4f, Gravity.CENTER_HORIZONTAL);
+                0.475f, 0.26f, Gravity.CENTER_HORIZONTAL);
         mIcons[3] = new TransformedImageDrawable(res, R.drawable.ic_all_apps_bg_icon_4,
                 0.7f, 0.125f, Gravity.CENTER_HORIZONTAL);
         mWidth = res.getDimensionPixelSize(R.dimen.all_apps_background_canvas_width);

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -506,7 +506,9 @@ public void getViewRectRelativeToSelf(View v, Rect r) {
 
     @Override
     public boolean dispatchUnhandledMove(View focused, int direction) {
-        return mDragController.dispatchUnhandledMove(focused, direction);
+        // Consume the unhandled move if a container is open, to avoid switching pages underneath.
+        boolean isContainerOpen = mLauncher.getTopFloatingView() != null;
+        return isContainerOpen || mDragController.dispatchUnhandledMove(focused, direction);
     }
 
     @Override

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -533,7 +533,6 @@ public void layout(Launcher launcher, boolean notifyListeners) {
             } else {
                 // Put the page indicators above the hotseat
                 lp.gravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
-                lp.width = LayoutParams.WRAP_CONTENT;
                 lp.height = pageIndicatorHeightPx;
                 lp.bottomMargin = hotseatBarHeightPx + mInsets.bottom;
             }

File: src/com/android/launcher3/pageindicators/PageIndicator.java
Patch:
@@ -18,20 +18,21 @@
 import android.content.Context;
 import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
-import android.view.View;
+import android.widget.FrameLayout;
 
 import com.android.launcher3.dynamicui.ExtractedColors;
 
 /**
  * Base class for a page indicator.
  */
-public abstract class PageIndicator extends View {
+public abstract class PageIndicator extends FrameLayout {
     private CaretDrawable mCaretDrawable;
 
     protected int mNumPages = 1;
 
     public PageIndicator(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
+        setWillNotDraw(false);
     }
 
     public void setScroll(int currentScroll, int totalScroll) {}

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -533,7 +533,6 @@ public void layout(Launcher launcher, boolean notifyListeners) {
             } else {
                 // Put the page indicators above the hotseat
                 lp.gravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
-                lp.width = LayoutParams.WRAP_CONTENT;
                 lp.height = pageIndicatorHeightPx;
                 lp.bottomMargin = hotseatBarHeightPx + mInsets.bottom;
             }

File: src/com/android/launcher3/pageindicators/PageIndicator.java
Patch:
@@ -18,20 +18,21 @@
 import android.content.Context;
 import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
-import android.view.View;
+import android.widget.FrameLayout;
 
 import com.android.launcher3.dynamicui.ExtractedColors;
 
 /**
  * Base class for a page indicator.
  */
-public abstract class PageIndicator extends View {
+public abstract class PageIndicator extends FrameLayout {
     private CaretDrawable mCaretDrawable;
 
     protected int mNumPages = 1;
 
     public PageIndicator(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
+        setWillNotDraw(false);
     }
 
     public void setScroll(int currentScroll, int totalScroll) {}

File: src/com/android/launcher3/DragSource.java
Patch:
@@ -19,11 +19,12 @@
 import android.view.View;
 
 import com.android.launcher3.DropTarget.DragObject;
+import com.android.launcher3.logging.UserEventDispatcher.LaunchSourceProvider;
 
 /**
  * Interface defining an object that can originate a drag.
  */
-public interface DragSource {
+public interface DragSource extends LaunchSourceProvider {
 
     /**
      * @return whether items dragged from this source supports

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -92,8 +92,7 @@
  */
 public class Folder extends LinearLayout implements DragSource, View.OnClickListener,
         View.OnLongClickListener, DropTarget, FolderListener, TextView.OnEditorActionListener,
-        View.OnFocusChangeListener, DragListener, DropTargetSource, AccessibilityDragSource,
-        LaunchSourceProvider {
+        View.OnFocusChangeListener, DragListener, DropTargetSource, AccessibilityDragSource {
     private static final String TAG = "Launcher.Folder";
 
     /**

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -76,8 +76,7 @@
  */
 @TargetApi(Build.VERSION_CODES.N)
 public class DeepShortcutsContainer extends LinearLayout implements View.OnLongClickListener,
-        View.OnTouchListener, DragSource, DragController.DragListener,
-        UserEventDispatcher.LaunchSourceProvider {
+        View.OnTouchListener, DragSource, DragController.DragListener {
     private static final String TAG = "ShortcutsContainer";
 
     private final Point mIconShift = new Point();

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1800,6 +1800,7 @@ mCurrentPage < getChildCount() - 1) {
         case MotionEvent.ACTION_CANCEL:
             if (mTouchState == TOUCH_STATE_SCROLLING) {
                 snapToDestination();
+                onScrollInteractionEnd();
             }
             resetTouchState();
             break;

File: src/com/android/launcher3/PinchToOverviewListener.java
Patch:
@@ -102,8 +102,8 @@ public boolean onScaleBegin(ScaleGestureDetector detector) {
             // once the state switching animation is complete.
             return false;
         }
-        if (mWorkspace.getOpenFolder() != null) {
-            // Don't listen for the pinch gesture if a folder is open.
+        if (mLauncher.getTopFloatingView() != null) {
+            // Don't listen for the pinch gesture if a floating view is open.
             return false;
         }
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1800,6 +1800,7 @@ mCurrentPage < getChildCount() - 1) {
         case MotionEvent.ACTION_CANCEL:
             if (mTouchState == TOUCH_STATE_SCROLLING) {
                 snapToDestination();
+                onScrollInteractionEnd();
             }
             resetTouchState();
             break;

File: src/com/android/launcher3/PinchToOverviewListener.java
Patch:
@@ -102,8 +102,8 @@ public boolean onScaleBegin(ScaleGestureDetector detector) {
             // once the state switching animation is complete.
             return false;
         }
-        if (mWorkspace.getOpenFolder() != null) {
-            // Don't listen for the pinch gesture if a folder is open.
+        if (mLauncher.getTopFloatingView() != null) {
+            // Don't listen for the pinch gesture if a floating view is open.
             return false;
         }
 

File: src/com/android/launcher3/DragSource.java
Patch:
@@ -19,11 +19,12 @@
 import android.view.View;
 
 import com.android.launcher3.DropTarget.DragObject;
+import com.android.launcher3.logging.UserEventDispatcher.LaunchSourceProvider;
 
 /**
  * Interface defining an object that can originate a drag.
  */
-public interface DragSource {
+public interface DragSource extends LaunchSourceProvider {
 
     /**
      * @return whether items dragged from this source supports

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -92,8 +92,7 @@
  */
 public class Folder extends LinearLayout implements DragSource, View.OnClickListener,
         View.OnLongClickListener, DropTarget, FolderListener, TextView.OnEditorActionListener,
-        View.OnFocusChangeListener, DragListener, DropTargetSource, AccessibilityDragSource,
-        LaunchSourceProvider {
+        View.OnFocusChangeListener, DragListener, DropTargetSource, AccessibilityDragSource {
     private static final String TAG = "Launcher.Folder";
 
     /**

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -76,8 +76,7 @@
  */
 @TargetApi(Build.VERSION_CODES.N)
 public class DeepShortcutsContainer extends LinearLayout implements View.OnLongClickListener,
-        View.OnTouchListener, DragSource, DragController.DragListener,
-        UserEventDispatcher.LaunchSourceProvider {
+        View.OnTouchListener, DragSource, DragController.DragListener {
     private static final String TAG = "ShortcutsContainer";
 
     private final Point mIconShift = new Point();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2954,7 +2954,8 @@ public boolean startActivitySafely(View v, Intent intent, ItemInfo item) {
         try {
             if (Utilities.ATLEAST_MARSHMALLOW && item != null
                     && (item.itemType == Favorites.ITEM_TYPE_SHORTCUT
-                    || item.itemType == Favorites.ITEM_TYPE_DEEP_SHORTCUT)) {
+                    || item.itemType == Favorites.ITEM_TYPE_DEEP_SHORTCUT)
+                    && ((ShortcutInfo) item).promisedIntent == null) {
                 // Shortcuts need some special checks due to legacy reasons.
                 startShortcutIntentSafely(intent, optsBundle, item);
             } else if (user == null || user.equals(UserHandleCompat.myUserHandle())) {
@@ -4267,7 +4268,7 @@ public void run() {
 
             for (ShortcutInfo si : removed) {
                 if (si.itemType == Favorites.ITEM_TYPE_DEEP_SHORTCUT) {
-                    removedDeepShortcuts.add(ShortcutKey.fromItemInfo(si));
+                    removedDeepShortcuts.add(ShortcutKey.fromShortcutInfo(si));
                 } else {
                     removedComponents.add(si.getTargetComponent());
                 }

File: src/com/android/launcher3/shortcuts/ShortcutKey.java
Patch:
@@ -3,7 +3,7 @@
 import android.content.ComponentName;
 import android.content.Intent;
 
-import com.android.launcher3.ItemInfo;
+import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.ComponentKey;
 
@@ -32,7 +32,7 @@ public static ShortcutKey fromIntent(Intent intent, UserHandleCompat user) {
         return new ShortcutKey(intent.getPackage(), user, shortcutId);
     }
 
-    public static ShortcutKey fromItemInfo(ItemInfo info) {
-        return fromIntent(info.getIntent(), info.user);
+    public static ShortcutKey fromShortcutInfo(ShortcutInfo info) {
+        return fromIntent(info.getPromisedIntent(), info.user);
     }
 }

File: src/com/android/launcher3/util/ItemInfoMatcher.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.shortcuts.ShortcutKey;
 
@@ -57,7 +58,7 @@ public static ItemInfoMatcher ofShortcutKeys(final HashSet<ShortcutKey> keys) {
             @Override
             public boolean matches(ItemInfo info, ComponentName cn) {
                 return info.itemType == Favorites.ITEM_TYPE_DEEP_SHORTCUT &&
-                        keys.contains(ShortcutKey.fromItemInfo(info));
+                        keys.contains(ShortcutKey.fromShortcutInfo((ShortcutInfo) info));
             }
         };
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2932,7 +2932,8 @@ public boolean startActivitySafely(View v, Intent intent, ItemInfo item) {
         try {
             if (Utilities.ATLEAST_MARSHMALLOW && item != null
                     && (item.itemType == Favorites.ITEM_TYPE_SHORTCUT
-                    || item.itemType == Favorites.ITEM_TYPE_DEEP_SHORTCUT)) {
+                    || item.itemType == Favorites.ITEM_TYPE_DEEP_SHORTCUT)
+                    && ((ShortcutInfo) item).promisedIntent == null) {
                 // Shortcuts need some special checks due to legacy reasons.
                 startShortcutIntentSafely(intent, optsBundle, item);
             } else if (user == null || user.equals(UserHandleCompat.myUserHandle())) {
@@ -4238,7 +4239,7 @@ public void run() {
 
             for (ShortcutInfo si : removed) {
                 if (si.itemType == Favorites.ITEM_TYPE_DEEP_SHORTCUT) {
-                    removedDeepShortcuts.add(ShortcutKey.fromItemInfo(si));
+                    removedDeepShortcuts.add(ShortcutKey.fromShortcutInfo(si));
                 } else {
                     removedComponents.add(si.getTargetComponent());
                 }

File: src/com/android/launcher3/shortcuts/ShortcutKey.java
Patch:
@@ -3,7 +3,7 @@
 import android.content.ComponentName;
 import android.content.Intent;
 
-import com.android.launcher3.ItemInfo;
+import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.ComponentKey;
 
@@ -32,7 +32,7 @@ public static ShortcutKey fromIntent(Intent intent, UserHandleCompat user) {
         return new ShortcutKey(intent.getPackage(), user, shortcutId);
     }
 
-    public static ShortcutKey fromItemInfo(ItemInfo info) {
-        return fromIntent(info.getIntent(), info.user);
+    public static ShortcutKey fromShortcutInfo(ShortcutInfo info) {
+        return fromIntent(info.getPromisedIntent(), info.user);
     }
 }

File: src/com/android/launcher3/util/ItemInfoMatcher.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.shortcuts.ShortcutKey;
 
@@ -57,7 +58,7 @@ public static ItemInfoMatcher ofShortcutKeys(final HashSet<ShortcutKey> keys) {
             @Override
             public boolean matches(ItemInfo info, ComponentName cn) {
                 return info.itemType == Favorites.ITEM_TYPE_DEEP_SHORTCUT &&
-                        keys.contains(ShortcutKey.fromItemInfo(info));
+                        keys.contains(ShortcutKey.fromShortcutInfo((ShortcutInfo) info));
             }
         };
     }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -862,7 +862,9 @@ private void assertWorkspaceLoaded() {
                     Intent targetIntent = info.promisedIntent == null
                             ? info.intent : info.promisedIntent;
                     if (targetIntent != null && info.user.equals(user)) {
-                        String s = targetIntent.toUri(0);
+                        Intent copyIntent = new Intent(targetIntent);
+                        copyIntent.setSourceBounds(intent.getSourceBounds());
+                        String s = copyIntent.toUri(0);
                         if (intentWithPkg.equals(s) || intentWithoutPkg.equals(s)) {
                             return true;
                         }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -862,7 +862,9 @@ private void assertWorkspaceLoaded() {
                     Intent targetIntent = info.promisedIntent == null
                             ? info.intent : info.promisedIntent;
                     if (targetIntent != null && info.user.equals(user)) {
-                        String s = targetIntent.toUri(0);
+                        Intent copyIntent = new Intent(targetIntent);
+                        copyIntent.setSourceBounds(intent.getSourceBounds());
+                        String s = copyIntent.toUri(0);
                         if (intentWithPkg.equals(s) || intentWithoutPkg.equals(s)) {
                             return true;
                         }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1800,6 +1800,7 @@ mCurrentPage < getChildCount() - 1) {
         case MotionEvent.ACTION_CANCEL:
             if (mTouchState == TOUCH_STATE_SCROLLING) {
                 snapToDestination();
+                onScrollInteractionEnd();
             }
             resetTouchState();
             break;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1800,6 +1800,7 @@ mCurrentPage < getChildCount() - 1) {
         case MotionEvent.ACTION_CANCEL:
             if (mTouchState == TOUCH_STATE_SCROLLING) {
                 snapToDestination();
+                onScrollInteractionEnd();
             }
             resetTouchState();
             break;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1800,6 +1800,7 @@ mCurrentPage < getChildCount() - 1) {
         case MotionEvent.ACTION_CANCEL:
             if (mTouchState == TOUCH_STATE_SCROLLING) {
                 snapToDestination();
+                onScrollInteractionEnd();
             }
             resetTouchState();
             break;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1090,6 +1090,9 @@ protected void onResume() {
         if (!isWorkspaceLoading()) {
             // Process any items that were added while Launcher was away.
             InstallShortcutReceiver.disableAndFlushInstallQueue(this);
+
+            // Refresh shortcuts if the permission changed.
+            mModel.refreshShortcutsIfRequired();
         }
 
         if (shouldShowDiscoveryBounce()) {

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -563,7 +563,7 @@ public boolean supportsAppInfoDropTarget() {
 
     @Override
     public boolean supportsDeleteDropTarget() {
-        return true;
+        return false;
     }
 
     @Override

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2849,8 +2849,7 @@ private void updateDeepShortcutMap(
     }
 
     public void bindDeepShortcuts() {
-        final MultiHashMap<ComponentKey, String> shortcutMapCopy = new MultiHashMap<>();
-        shortcutMapCopy.putAll(mBgDeepShortcutMap);
+        final MultiHashMap<ComponentKey, String> shortcutMapCopy = mBgDeepShortcutMap.clone();
         Runnable r = new Runnable() {
             @Override
             public void run() {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2849,8 +2849,7 @@ private void updateDeepShortcutMap(
     }
 
     public void bindDeepShortcuts() {
-        final MultiHashMap<ComponentKey, String> shortcutMapCopy = new MultiHashMap<>();
-        shortcutMapCopy.putAll(mBgDeepShortcutMap);
+        final MultiHashMap<ComponentKey, String> shortcutMapCopy = mBgDeepShortcutMap.clone();
         Runnable r = new Runnable() {
             @Override
             public void run() {

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -265,7 +265,6 @@ private void startAnimationToOverlay(
             toView.setScaleY(1.0f);
             toView.setAlpha(1.0f);
             toView.setVisibility(View.VISIBLE);
-            toView.bringToFront();
 
             // Show the content view
             contentView.setVisibility(View.VISIBLE);

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -262,10 +262,10 @@ public void preparePull(boolean start) {
             // Initialize values that should not change until #onDragEnd
             mStatusBarHeight = mLauncher.getDragLayer().getInsets().top;
             mHotseat.setVisibility(View.VISIBLE);
+            mHotseatBackgroundColor = mHotseat.getBackgroundDrawableColor();
+            mHotseat.setBackgroundTransparent(true /* transparent */);
             if (!mLauncher.isAllAppsVisible()) {
                 mLauncher.tryAndUpdatePredictedApps();
-                mHotseatBackgroundColor = mHotseat.getBackgroundDrawableColor();
-                mHotseat.setBackgroundTransparent(true /* transparent */);
                 mAppsView.setVisibility(View.VISIBLE);
                 mAppsView.setRevealDrawableColor(mHotseatBackgroundColor);
             }

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -265,7 +265,6 @@ private void startAnimationToOverlay(
             toView.setScaleY(1.0f);
             toView.setAlpha(1.0f);
             toView.setVisibility(View.VISIBLE);
-            toView.bringToFront();
 
             // Show the content view
             contentView.setVisibility(View.VISIBLE);

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -262,10 +262,10 @@ public void preparePull(boolean start) {
             // Initialize values that should not change until #onDragEnd
             mStatusBarHeight = mLauncher.getDragLayer().getInsets().top;
             mHotseat.setVisibility(View.VISIBLE);
+            mHotseatBackgroundColor = mHotseat.getBackgroundDrawableColor();
+            mHotseat.setBackgroundTransparent(true /* transparent */);
             if (!mLauncher.isAllAppsVisible()) {
                 mLauncher.tryAndUpdatePredictedApps();
-                mHotseatBackgroundColor = mHotseat.getBackgroundDrawableColor();
-                mHotseat.setBackgroundTransparent(true /* transparent */);
                 mAppsView.setVisibility(View.VISIBLE);
                 mAppsView.setRevealDrawableColor(mHotseatBackgroundColor);
             }

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -265,7 +265,6 @@ private AnimatorSet startAnimationToOverlay(
             toView.setScaleY(1.0f);
             toView.setAlpha(1.0f);
             toView.setVisibility(View.VISIBLE);
-            toView.bringToFront();
 
             // Show the content view
             contentView.setVisibility(View.VISIBLE);

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -271,10 +271,10 @@ public void preparePull(boolean start) {
             // Initialize values that should not change until #onDragEnd
             mStatusBarHeight = mLauncher.getDragLayer().getInsets().top;
             mHotseat.setVisibility(View.VISIBLE);
+            mHotseatBackgroundColor = mHotseat.getBackgroundDrawableColor();
+            mHotseat.setBackgroundTransparent(true /* transparent */);
             if (!mLauncher.isAllAppsVisible()) {
                 mLauncher.tryAndUpdatePredictedApps();
-                mHotseatBackgroundColor = mHotseat.getBackgroundDrawableColor();
-                mHotseat.setBackgroundTransparent(true /* transparent */);
                 mAppsView.setVisibility(View.VISIBLE);
                 mAppsView.setRevealDrawableColor(mHotseatBackgroundColor);
             }

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -295,6 +295,8 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
         }
         clearAllResizeFrames();
 
+        mActiveController = null;
+
         if (mDragController.onInterceptTouchEvent(ev)) {
             mActiveController = mDragController;
             return true;

File: src/com/android/launcher3/allapps/AllAppsSearchBarController.java
Patch:
@@ -20,6 +20,7 @@
 import android.graphics.Rect;
 import android.net.Uri;
 import android.text.Editable;
+import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.view.KeyEvent;
 import android.view.View;
@@ -102,7 +103,7 @@ public void afterTextChanged(final Editable s) {
     }
 
     protected void refreshSearchResult() {
-        if (mQuery == null) {
+        if (TextUtils.isEmpty(mQuery)) {
             return;
         }
         // If play store continues auto updating an app, we want to show partial result.
@@ -143,7 +144,6 @@ public void reset() {
         unfocusSearchField();
         mCb.clearSearchResult();
         mInput.setText("");
-        // We need to reset this after we clear the input text
         mQuery = null;
         hideKeyboard();
     }

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -418,6 +418,9 @@ public void onAnimationEnd(Animator animator) {
         mAppsView.post(new Runnable() {
             @Override
             public void run() {
+                if (mDiscoBounceAnimation == null) {
+                    return;
+                }
                 mDiscoBounceAnimation.start();
             }
         });

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -418,6 +418,9 @@ public void onAnimationEnd(Animator animator) {
         mAppsView.post(new Runnable() {
             @Override
             public void run() {
+                if (mDiscoBounceAnimation == null) {
+                    return;
+                }
                 mDiscoBounceAnimation.start();
             }
         });

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -432,6 +432,9 @@ public void onAnimationEnd(Animator animator) {
         mAppsView.post(new Runnable() {
             @Override
             public void run() {
+                if (mDiscoBounceAnimation == null) {
+                    return;
+                }
                 mDiscoBounceAnimation.start();
             }
         });

File: src/com/android/launcher3/util/WallpaperOffsetInterpolator.java
Patch:
@@ -208,8 +208,9 @@ public void setFinalX(float x) {
         scheduleUpdate();
         mFinalOffset = Math.max(0f, Math.min(x, 1f));
         if (getNumScreensExcludingEmptyAndCustom() != mNumScreens) {
-            if (mNumScreens > 0) {
-                // Don't animate if we're going from 0 screens
+            if (mNumScreens > 0 && Float.compare(mCurrentOffset, mFinalOffset) != 0) {
+                // Don't animate if we're going from 0 screens, or if the final offset is the same
+                // as the current offset
                 animateToFinal();
             }
             mNumScreens = getNumScreensExcludingEmptyAndCustom();

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -585,6 +585,7 @@ public void run() {
                 public void run() {
                     mContent.setLayerType(LAYER_TYPE_NONE, null);
                     mFooter.setLayerType(LAYER_TYPE_NONE, null);
+                    mLauncher.getUserEventDispatcher().resetElapsedContainerMillis();
                 }
             };
         }

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -176,6 +176,8 @@ public void populateAndShow(final BubbleTextView originalIcon, final List<String
         final int arrowVerticalOffset = resources.getDimensionPixelSize(
                 R.dimen.deep_shortcuts_arrow_vertical_offset);
         mArrow = addArrowView(mArrowHorizontalOffset, arrowVerticalOffset, arrowWidth, arrowHeight);
+        mArrow.setPivotX(arrowWidth / 2);
+        mArrow.setPivotY(mIsAboveIcon ? 0 : arrowHeight);
 
         animateOpen();
 

File: src/com/android/launcher3/compat/UserManagerCompat.java
Patch:
@@ -57,4 +57,5 @@ public static UserManagerCompat getInstance(Context context) {
     public abstract CharSequence getBadgedLabelForUser(CharSequence label, UserHandleCompat user);
     public abstract long getUserCreationTime(UserHandleCompat user);
     public abstract boolean isQuietModeEnabled(UserHandleCompat user);
+    public abstract boolean isUserUnlocked(UserHandleCompat user);
 }

File: src/com/android/launcher3/shortcuts/DeepShortcutManager.java
Patch:
@@ -98,7 +98,7 @@ public List<ShortcutInfoCompat> queryForShortcutsContainer(ComponentName activit
     public void unpinShortcut(final ShortcutKey key) {
         if (Utilities.isNycMR1OrAbove()) {
             String packageName = key.componentName.getPackageName();
-            String id = key.id;
+            String id = key.getId();
             UserHandleCompat user = key.user;
             List<String> pinnedIds = extractIds(queryForPinnedShortcuts(packageName, user));
             pinnedIds.remove(id);
@@ -120,7 +120,7 @@ public void unpinShortcut(final ShortcutKey key) {
     public void pinShortcut(final ShortcutKey key) {
         if (Utilities.isNycMR1OrAbove()) {
             String packageName = key.componentName.getPackageName();
-            String id = key.id;
+            String id = key.getId();
             UserHandleCompat user = key.user;
             List<String> pinnedIds = extractIds(queryForPinnedShortcuts(packageName, user));
             pinnedIds.add(id);

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2842,7 +2842,9 @@ private void updateDeepShortcutMap(
 
         // Now add the new shortcuts to the map.
         for (ShortcutInfoCompat shortcut : shortcuts) {
-            if (shortcut.isEnabled()) {
+            boolean shouldShowInContainer = shortcut.isEnabled()
+                    && (shortcut.isDeclaredInManifest() || shortcut.isDynamic());
+            if (shouldShowInContainer) {
                 ComponentKey targetComponent
                         = new ComponentKey(shortcut.getActivity(), shortcut.getUserHandle());
                 mBgDeepShortcutMap.addToList(targetComponent, shortcut.getId());

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2655,6 +2655,8 @@ protected void onClickAppShortcut(final View v) {
                 int error = R.string.activity_not_available;
                 if ((shortcut.isDisabled & ShortcutInfo.FLAG_DISABLED_SAFEMODE) != 0) {
                     error = R.string.safemode_shortcut_error;
+                } else if ((shortcut.isDisabled & ShortcutInfo.FLAG_DISABLED_BY_PUBLISHER) != 0) {
+                    error = R.string.shortcut_not_available;
                 }
                 Toast.makeText(this, error, Toast.LENGTH_SHORT).show();
                 return;

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -43,6 +43,7 @@
 import android.view.animation.DecelerateInterpolator;
 import android.widget.LinearLayout;
 
+import com.android.launcher3.AppInfo;
 import com.android.launcher3.BubbleTextView;
 import com.android.launcher3.DragSource;
 import com.android.launcher3.DropTarget;
@@ -718,7 +719,8 @@ public void close() {
         }
         mIsOpen = false;
         mDeferContainerRemoval = false;
-        cleanupDeferredDrag(true);
+        // Make the original icon visible in All Apps, but not in Workspace or Folders.
+        cleanupDeferredDrag(mDeferredDragIcon.getTag() instanceof AppInfo);
         mLauncher.getDragController().removeDragListener(this);
         mLauncher.getDragLayer().removeView(this);
     }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -28,7 +28,6 @@
 
 import com.android.launcher3.LauncherSettings.Favorites;
 import com.android.launcher3.compat.LauncherActivityInfoCompat;
-import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.folder.FolderIcon;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3132,6 +3132,7 @@ public void closeFolder(Folder folder, boolean animate) {
     public void closeShortcutsContainer() {
         DeepShortcutsContainer deepShortcutsContainer = getOpenShortcutsContainer();
         if (deepShortcutsContainer != null) {
+            deepShortcutsContainer.cleanupDeferredDrag(true);
             mDragController.removeDragListener(deepShortcutsContainer);
             mDragLayer.removeView(deepShortcutsContainer);
         }

File: src/com/android/launcher3/allapps/AllAppsSearchBarController.java
Patch:
@@ -140,10 +140,11 @@ public boolean onBackKey() {
      * Resets the search bar state.
      */
     public void reset() {
-        mQuery = null;
         unfocusSearchField();
         mCb.clearSearchResult();
         mInput.setText("");
+        // We need to reset this after we clear the input text
+        mQuery = null;
         hideKeyboard();
     }
 

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -348,7 +348,7 @@ public String encodeToString() {
 
         public ShortcutInfo getShortcutInfo() {
             if (activityInfo != null) {
-                return ShortcutInfo.fromActivityInfo(activityInfo, mContext);
+                return new ShortcutInfo(activityInfo, mContext);
             } else {
                 return LauncherAppState.getInstance().getModel().infoFromShortcutIntent(mContext, data);
             }

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -111,7 +111,7 @@ protected void onLauncherAppsAdded(
             for (int i = 0; i < count; i++) {
                 LauncherActivityInstallInfo info = apps.get(i);
 
-                ShortcutInfo si = ShortcutInfo.fromActivityInfo(info.info, mContext);
+                ShortcutInfo si = new ShortcutInfo(info.info, mContext);
                 ((info.installTime <= folderCreationTime) ? workFolderApps : homescreenApps).add(si);
             }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2584,6 +2584,7 @@ boolean createUserFolderIfNecessary(View newView, long container, CellLayout tar
                 fi.performCreateAnimation(destInfo, v, sourceInfo, dragView, folderLocation, scale,
                         postAnimationRunnable);
             } else {
+                fi.prepareCreate(v);
                 fi.addItem(destInfo);
                 fi.addItem(sourceInfo);
             }

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -197,7 +197,7 @@ public ArrayList<ShortcutInfo> bindItems(ArrayList<ShortcutInfo> items) {
      */
     public int allocateRankForNewItem(ShortcutInfo info) {
         int rank = getItemCount();
-        ArrayList<View> views = new ArrayList<View>(mFolder.getItemsInReadingOrder());
+        ArrayList<View> views = new ArrayList<>(mFolder.getItemsInReadingOrder());
         views.add(rank, null);
         arrangeChildren(views, views.size(), false);
         setCurrentPage(rank / mMaxItemsPerPage);

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -388,6 +388,8 @@ public boolean onTouchEvent(MotionEvent ev) {
                     break;
                 }
             }
+        } else if (action == MotionEvent.ACTION_CANCEL) {
+            cleanupDeferredDrag();
         }
         return true;
     }

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -388,6 +388,8 @@ public boolean onTouchEvent(MotionEvent ev) {
                     break;
                 }
             }
+        } else if (action == MotionEvent.ACTION_CANCEL) {
+            cleanupDeferredDrag();
         }
         return true;
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2591,7 +2591,7 @@ private void startRestoredWidgetReconfigActivity(
     protected void onClickAllAppsButton(View v) {
         if (LOGD) Log.d(TAG, "onClickAllAppsButton");
         if (!isAppsViewVisible()) {
-            mUserEventDispatcher.logActionOnControl(LauncherLogProto.Action.TAP,
+            getUserEventDispatcher().logActionOnControl(LauncherLogProto.Action.TAP,
                     LauncherLogProto.ALL_APPS_BUTTON);
             showAppsView(true /* animated */, false /* resetListToTop */,
                     true /* updatePredictedApps */, false /* focusSearchBar */);
@@ -2601,7 +2601,7 @@ protected void onClickAllAppsButton(View v) {
     protected void onLongClickAllAppsButton(View v) {
         if (LOGD) Log.d(TAG, "onLongClickAllAppsButton");
         if (!isAppsViewVisible()) {
-            mUserEventDispatcher.logActionOnControl(LauncherLogProto.Action.LONGPRESS,
+            getUserEventDispatcher().logActionOnControl(LauncherLogProto.Action.LONGPRESS,
                     LauncherLogProto.ALL_APPS_BUTTON);
             showAppsView(true /* animated */, false /* resetListToTop */,
                     true /* updatePredictedApps */, true /* focusSearchBar */);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2591,7 +2591,7 @@ private void startRestoredWidgetReconfigActivity(
     protected void onClickAllAppsButton(View v) {
         if (LOGD) Log.d(TAG, "onClickAllAppsButton");
         if (!isAppsViewVisible()) {
-            mUserEventDispatcher.logActionOnControl(LauncherLogProto.Action.TAP,
+            getUserEventDispatcher().logActionOnControl(LauncherLogProto.Action.TAP,
                     LauncherLogProto.ALL_APPS_BUTTON);
             showAppsView(true /* animated */, false /* resetListToTop */,
                     true /* updatePredictedApps */, false /* focusSearchBar */);
@@ -2601,7 +2601,7 @@ protected void onClickAllAppsButton(View v) {
     protected void onLongClickAllAppsButton(View v) {
         if (LOGD) Log.d(TAG, "onLongClickAllAppsButton");
         if (!isAppsViewVisible()) {
-            mUserEventDispatcher.logActionOnControl(LauncherLogProto.Action.LONGPRESS,
+            getUserEventDispatcher().logActionOnControl(LauncherLogProto.Action.LONGPRESS,
                     LauncherLogProto.ALL_APPS_BUTTON);
             showAppsView(true /* animated */, false /* resetListToTop */,
                     true /* updatePredictedApps */, true /* focusSearchBar */);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -406,7 +406,8 @@ public void setPressedIcon(BubbleTextView icon, Bitmap background) {
             mTouchFeedbackView.animate().cancel();
         } else {
             if (mTouchFeedbackView.setBitmap(background)) {
-                mTouchFeedbackView.alignWithIconView(icon, mShortcutsAndWidgets);
+                mTouchFeedbackView.alignWithIconView(icon, mShortcutsAndWidgets,
+                        null /* clipAgainstView */);
                 mTouchFeedbackView.animateShadow();
             }
         }

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -113,8 +113,8 @@ public static boolean isNycMR1OrAbove() {
                 && "NMR1".compareTo(VERSION.CODENAME) <= 0;
     }
 
-    // TODO: use Build.VERSION_CODES when available
-    public static final boolean ATLEAST_MARSHMALLOW = Build.VERSION.SDK_INT >= 23;
+    public static final boolean ATLEAST_MARSHMALLOW =
+            Build.VERSION.SDK_INT >= Build.VERSION_CODES.M;
 
     public static final boolean ATLEAST_LOLLIPOP_MR1 =
             Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1;

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -406,7 +406,8 @@ public void setPressedIcon(BubbleTextView icon, Bitmap background) {
             mTouchFeedbackView.animate().cancel();
         } else {
             if (mTouchFeedbackView.setBitmap(background)) {
-                mTouchFeedbackView.alignWithIconView(icon, mShortcutsAndWidgets);
+                mTouchFeedbackView.alignWithIconView(icon, mShortcutsAndWidgets,
+                        null /* clipAgainstView */);
                 mTouchFeedbackView.animateShadow();
             }
         }

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -113,8 +113,8 @@ public static boolean isNycMR1OrAbove() {
                 && "NMR1".compareTo(VERSION.CODENAME) <= 0;
     }
 
-    // TODO: use Build.VERSION_CODES when available
-    public static final boolean ATLEAST_MARSHMALLOW = Build.VERSION.SDK_INT >= 23;
+    public static final boolean ATLEAST_MARSHMALLOW =
+            Build.VERSION.SDK_INT >= Build.VERSION_CODES.M;
 
     public static final boolean ATLEAST_LOLLIPOP_MR1 =
             Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1;

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -406,7 +406,8 @@ public void setPressedIcon(BubbleTextView icon, Bitmap background) {
             mTouchFeedbackView.animate().cancel();
         } else {
             if (mTouchFeedbackView.setBitmap(background)) {
-                mTouchFeedbackView.alignWithIconView(icon, mShortcutsAndWidgets);
+                mTouchFeedbackView.alignWithIconView(icon, mShortcutsAndWidgets,
+                        null /* clipAgainstView */);
                 mTouchFeedbackView.animateShadow();
             }
         }

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -113,8 +113,8 @@ public static boolean isNycMR1OrAbove() {
                 && "NMR1".compareTo(VERSION.CODENAME) <= 0;
     }
 
-    // TODO: use Build.VERSION_CODES when available
-    public static final boolean ATLEAST_MARSHMALLOW = Build.VERSION.SDK_INT >= 23;
+    public static final boolean ATLEAST_MARSHMALLOW =
+            Build.VERSION.SDK_INT >= Build.VERSION_CODES.M;
 
     public static final boolean ATLEAST_LOLLIPOP_MR1 =
             Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1;

File: src/com/android/launcher3/allapps/AlphabeticalAppsList.java
Patch:
@@ -440,7 +440,7 @@ private void updateAdapterItems() {
                     mPredictedApps.add(info);
                 } else {
                     if (ProviderConfig.IS_DOGFOOD_BUILD) {
-                        Log.e(TAG, "Predicted app not found: " + ck.flattenToString(mLauncher));
+                        Log.e(TAG, "Predicted app not found: " + ck);
                     }
                 }
                 // Stop at the number of predicted apps

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -392,7 +392,7 @@ private int getWorkspacePageSpacing() {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return Math.max(defaultPageSpacingPx, 2 * getWorkspacePadding(null).left);
+            return Math.max(defaultPageSpacingPx, getWorkspacePadding(null).left + 1);
         }
     }
 

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -148,7 +148,8 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         super.onLayout(changed, left, top, right, bottom);
         // Top/center align the caret in the page indicator space
         int l = (right - left) / 2 - mCaretSizePx / 2;
-        getCaretDrawable().setBounds(l, mCaretWorkspaceOffsetPx, l + mCaretSizePx, mCaretSizePx);
+        getCaretDrawable().setBounds(l, mCaretWorkspaceOffsetPx, l + mCaretSizePx,
+                mCaretWorkspaceOffsetPx + mCaretSizePx);
 
         // The touch area is expanded below this view by #mTouchExtensionHeight
         // which extends to the top of the hotseat.

File: src/com/android/launcher3/allapps/AlphabeticalAppsList.java
Patch:
@@ -440,7 +440,7 @@ private void updateAdapterItems() {
                     mPredictedApps.add(info);
                 } else {
                     if (ProviderConfig.IS_DOGFOOD_BUILD) {
-                        Log.e(TAG, "Predicted app not found: " + ck.flattenToString(mLauncher));
+                        Log.e(TAG, "Predicted app not found: " + ck);
                     }
                 }
                 // Stop at the number of predicted apps

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -392,7 +392,7 @@ private int getWorkspacePageSpacing() {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return Math.max(defaultPageSpacingPx, 2 * getWorkspacePadding(null).left);
+            return Math.max(defaultPageSpacingPx, getWorkspacePadding(null).left + 1);
         }
     }
 

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -148,7 +148,8 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         super.onLayout(changed, left, top, right, bottom);
         // Top/center align the caret in the page indicator space
         int l = (right - left) / 2 - mCaretSizePx / 2;
-        getCaretDrawable().setBounds(l, mCaretWorkspaceOffsetPx, l + mCaretSizePx, mCaretSizePx);
+        getCaretDrawable().setBounds(l, mCaretWorkspaceOffsetPx, l + mCaretSizePx,
+                mCaretWorkspaceOffsetPx + mCaretSizePx);
 
         // The touch area is expanded below this view by #mTouchExtensionHeight
         // which extends to the top of the hotseat.

File: src/com/android/launcher3/allapps/AlphabeticalAppsList.java
Patch:
@@ -440,7 +440,7 @@ private void updateAdapterItems() {
                     mPredictedApps.add(info);
                 } else {
                     if (ProviderConfig.IS_DOGFOOD_BUILD) {
-                        Log.e(TAG, "Predicted app not found: " + ck.flattenToString(mLauncher));
+                        Log.e(TAG, "Predicted app not found: " + ck);
                     }
                 }
                 // Stop at the number of predicted apps

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -72,6 +72,7 @@ public class IconCache {
     private static final String EMPTY_CLASS_NAME = ".";
 
     private static final boolean DEBUG = false;
+    private static final boolean DEBUG_IGNORE_CACHE = false;
 
     private static final int LOW_RES_SCALE_FACTOR = 5;
 
@@ -552,7 +553,7 @@ private CacheEntry cacheLocked(ComponentName componentName, LauncherActivityInfo
             mCache.put(cacheKey, entry);
 
             // Check the DB first.
-            if (!getEntryFromDB(cacheKey, entry, useLowResIcon)) {
+            if (!getEntryFromDB(cacheKey, entry, useLowResIcon) || DEBUG_IGNORE_CACHE) {
                 if (info != null) {
                     entry.icon = Utilities.createBadgedIconBitmap(
                             mIconProvider.getIcon(info, mIconDpi), info.getUser(),

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -129,7 +129,7 @@ public void measureChild(View child) {
             if (child instanceof LauncherAppWidgetHostView) {
                 // Widgets have their own padding, so skip
             } else {
-                // Otherwise, center the icon
+                // Otherwise, center the icon/folder
                 int cHeight = getCellContentHeight();
                 int cellPaddingY = (int) Math.max(0, ((lp.height - cHeight) / 2f));
                 int cellPaddingX = (int) (grid.edgeMarginPx / 2f);

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -80,8 +80,8 @@
 import com.android.launcher3.pageindicators.PageIndicatorDots;
 import com.android.launcher3.userevent.nano.LauncherLogProto;
 import com.android.launcher3.userevent.nano.LauncherLogProto.Target;
+import com.android.launcher3.util.CircleRevealOutlineProvider;
 import com.android.launcher3.util.Thunk;
-import com.android.launcher3.util.UiThreadCircularReveal;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -554,8 +554,8 @@ public void run() {
             int ry = (int) Math.max(Math.max(height - getPivotY(), 0), getPivotY());
             float radius = (float) Math.hypot(rx, ry);
 
-            Animator reveal = UiThreadCircularReveal.createCircularReveal(this, (int) getPivotX(),
-                    (int) getPivotY(), 0, radius);
+            Animator reveal = new CircleRevealOutlineProvider((int) getPivotX(),
+                    (int) getPivotY(), 0, radius).createRevealAnimator(this);
             reveal.setDuration(mMaterialExpandDuration);
             reveal.setInterpolator(new LogDecelerateInterpolator(100, 0));
 

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -5,7 +5,6 @@
 import android.animation.AnimatorSet;
 import android.animation.ArgbEvaluator;
 import android.animation.ObjectAnimator;
-import android.graphics.Color;
 import android.util.Log;
 import android.view.MotionEvent;
 import android.view.View;

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -888,8 +888,8 @@ public void onAnimationEnd(Animator animation) {
             mAllAppsController.animateToWorkspace(animation, revealDuration, false);
 
             // Dispatch the prepare transition signal
-            dispatchOnLauncherTransitionPrepare(fromView, animated, false);
-            dispatchOnLauncherTransitionPrepare(toView, animated, false);
+            dispatchOnLauncherTransitionPrepare(fromView, animated, multiplePagesVisible);
+            dispatchOnLauncherTransitionPrepare(toView, animated, multiplePagesVisible);
 
             final AnimatorSet stateAnimation = animation;
             final Runnable startAnimRunnable = new Runnable() {

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -167,7 +167,7 @@ protected void onDraw(Canvas canvas) {
         int lineWidth = (int) (availableWidth / mNumPagesFloat);
         int lineLeft = (int) (progress * (availableWidth - lineWidth));
         int lineRight = lineLeft + lineWidth;
-        canvas.drawRect(lineLeft, canvas.getHeight() + mLineHeight, lineRight, canvas.getHeight(),
+        canvas.drawRect(lineLeft, canvas.getHeight() - mLineHeight, lineRight, canvas.getHeight(),
                 mLinePaint);
     }
 

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -888,8 +888,8 @@ public void onAnimationEnd(Animator animation) {
             mAllAppsController.animateToWorkspace(animation, revealDuration, false);
 
             // Dispatch the prepare transition signal
-            dispatchOnLauncherTransitionPrepare(fromView, animated, false);
-            dispatchOnLauncherTransitionPrepare(toView, animated, false);
+            dispatchOnLauncherTransitionPrepare(fromView, animated, multiplePagesVisible);
+            dispatchOnLauncherTransitionPrepare(toView, animated, multiplePagesVisible);
 
             final AnimatorSet stateAnimation = animation;
             final Runnable startAnimRunnable = new Runnable() {

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -167,7 +167,7 @@ protected void onDraw(Canvas canvas) {
         int lineWidth = (int) (availableWidth / mNumPagesFloat);
         int lineLeft = (int) (progress * (availableWidth - lineWidth));
         int lineRight = lineLeft + lineWidth;
-        canvas.drawRect(lineLeft, canvas.getHeight() + mLineHeight, lineRight, canvas.getHeight(),
+        canvas.drawRect(lineLeft, canvas.getHeight() - mLineHeight, lineRight, canvas.getHeight(),
                 mLinePaint);
     }
 

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -167,7 +167,7 @@ protected void onDraw(Canvas canvas) {
         int lineWidth = (int) (availableWidth / mNumPagesFloat);
         int lineLeft = (int) (progress * (availableWidth - lineWidth));
         int lineRight = lineLeft + lineWidth;
-        canvas.drawRect(lineLeft, canvas.getHeight() + mLineHeight, lineRight, canvas.getHeight(),
+        canvas.drawRect(lineLeft, canvas.getHeight() - mLineHeight, lineRight, canvas.getHeight(),
                 mLinePaint);
     }
 

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -888,8 +888,8 @@ public void onAnimationEnd(Animator animation) {
             mAllAppsController.animateToWorkspace(animation, revealDuration, false);
 
             // Dispatch the prepare transition signal
-            dispatchOnLauncherTransitionPrepare(fromView, animated, false);
-            dispatchOnLauncherTransitionPrepare(toView, animated, false);
+            dispatchOnLauncherTransitionPrepare(fromView, animated, multiplePagesVisible);
+            dispatchOnLauncherTransitionPrepare(toView, animated, multiplePagesVisible);
 
             final AnimatorSet stateAnimation = animation;
             final Runnable startAnimRunnable = new Runnable() {

File: src/com/android/launcher3/PinchAnimationManager.java
Patch:
@@ -149,11 +149,11 @@ public void animateThreshold(float threshold, Workspace.State startState,
             if (startState == OVERVIEW) {
                 animateOverviewPanelButtons(goingTowards == OVERVIEW);
             } else if (startState == NORMAL) {
-                animateHotseatAndPageIndicator(goingTowards == NORMAL);
+                animateHotseatAndQsb(goingTowards == NORMAL);
             }
         } else if (threshold == PinchThresholdManager.THRESHOLD_TWO) {
             if (startState == OVERVIEW) {
-                animateHotseatAndPageIndicator(goingTowards == NORMAL);
+                animateHotseatAndQsb(goingTowards == NORMAL);
                 animateScrim(goingTowards == OVERVIEW);
             } else if (startState == NORMAL) {
                 animateOverviewPanelButtons(goingTowards == OVERVIEW);
@@ -188,7 +188,7 @@ private void setOverviewPanelsAlpha(float alpha, int duration) {
         }
     }
 
-    private void animateHotseatAndPageIndicator(boolean show) {
+    private void animateHotseatAndQsb(boolean show) {
         startAnimator(INDEX_HOTSEAT,
                 mWorkspace.createHotseatAlphaAnimator(show ? 1 : 0), THRESHOLD_ANIM_DURATION);
         startAnimator(INDEX_QSB, mWorkspace.mQsbAlphaController.animateAlphaAtIndex(

File: src/com/android/launcher3/PinchAnimationManager.java
Patch:
@@ -149,11 +149,11 @@ public void animateThreshold(float threshold, Workspace.State startState,
             if (startState == OVERVIEW) {
                 animateOverviewPanelButtons(goingTowards == OVERVIEW);
             } else if (startState == NORMAL) {
-                animateHotseatAndPageIndicator(goingTowards == NORMAL);
+                animateHotseatAndQsb(goingTowards == NORMAL);
             }
         } else if (threshold == PinchThresholdManager.THRESHOLD_TWO) {
             if (startState == OVERVIEW) {
-                animateHotseatAndPageIndicator(goingTowards == NORMAL);
+                animateHotseatAndQsb(goingTowards == NORMAL);
                 animateScrim(goingTowards == OVERVIEW);
             } else if (startState == NORMAL) {
                 animateOverviewPanelButtons(goingTowards == OVERVIEW);
@@ -188,7 +188,7 @@ private void setOverviewPanelsAlpha(float alpha, int duration) {
         }
     }
 
-    private void animateHotseatAndPageIndicator(boolean show) {
+    private void animateHotseatAndQsb(boolean show) {
         startAnimator(INDEX_HOTSEAT,
                 mWorkspace.createHotseatAlphaAnimator(show ? 1 : 0), THRESHOLD_ANIM_DURATION);
         startAnimator(INDEX_QSB, mWorkspace.mQsbAlphaController.animateAlphaAtIndex(

File: src/com/android/launcher3/shortcuts/DeepShortcutManager.java
Patch:
@@ -58,8 +58,7 @@ public DeepShortcutManager(Context context, ShortcutCache shortcutCache) {
     }
 
     public static boolean supportsShortcuts(ItemInfo info) {
-        return info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION
-                || info.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
+        return info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION;
     }
 
     public boolean wasLastCallSuccess() {

File: src/com/android/launcher3/shortcuts/ShortcutsContainerListener.java
Patch:
@@ -243,8 +243,7 @@ private void onLongPress() {
     private boolean onTouchForwarded(MotionEvent srcEvent) {
         final View src = mSrcIcon;
 
-        final DeepShortcutsContainer dst = (DeepShortcutsContainer)
-                mDragLayer.findViewById(R.id.deep_shortcuts_container);
+        final DeepShortcutsContainer dst = mLauncher.getOpenShortcutsContainer();
         if (dst == null) {
             return false;
         }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -62,8 +62,8 @@ public LauncherAppWidgetHostView(Context context) {
         mLongPressHelper = new CheckLongPressHelper(this);
         mStylusEventHelper = new StylusEventHelper(new SimpleOnStylusPressListener(this), this);
         mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        mDragLayer = ((Launcher) context).getDragLayer();
-        setAccessibilityDelegate(((Launcher) context).getAccessibilityDelegate());
+        mDragLayer = Launcher.getLauncher(context).getDragLayer();
+        setAccessibilityDelegate(Launcher.getLauncher(context).getAccessibilityDelegate());
 
         setBackgroundResource(R.drawable.widget_internal_focus_bg);
     }

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -283,6 +283,7 @@ public static final class Settings {
                 ProviderConfig.AUTHORITY + "/settings");
 
         public static final String METHOD_CLEAR_EMPTY_DB_FLAG = "clear_empty_db_flag";
+        public static final String METHOD_WAS_EMPTY_DB_CREATED = "get_empty_db_flag";
 
         public static final String METHOD_DELETE_EMPTY_FOLDERS = "delete_empty_folders";
 

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -32,6 +32,7 @@
 import android.text.StaticLayout;
 import android.text.TextPaint;
 import android.util.TypedValue;
+import android.view.ContextThemeWrapper;
 import android.view.View;
 import android.view.View.OnClickListener;
 
@@ -63,9 +64,9 @@ public class PendingAppWidgetHostView extends LauncherAppWidgetHostView implemen
     @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public PendingAppWidgetHostView(Context context, LauncherAppWidgetInfo info,
             boolean disabledForSafeMode) {
-        super(context);
+        super(new ContextThemeWrapper(context, R.style.WidgetContainerTheme));
 
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mInfo = info;
         mStartState = info.restoreStatus;
         mIconLookupIntent = new Intent().setComponent(info.providerName);

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -62,8 +62,8 @@ public LauncherAppWidgetHostView(Context context) {
         mLongPressHelper = new CheckLongPressHelper(this);
         mStylusEventHelper = new StylusEventHelper(new SimpleOnStylusPressListener(this), this);
         mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        mDragLayer = ((Launcher) context).getDragLayer();
-        setAccessibilityDelegate(((Launcher) context).getAccessibilityDelegate());
+        mDragLayer = Launcher.getLauncher(context).getDragLayer();
+        setAccessibilityDelegate(Launcher.getLauncher(context).getAccessibilityDelegate());
 
         setBackgroundResource(R.drawable.widget_internal_focus_bg);
     }

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -283,6 +283,7 @@ public static final class Settings {
                 ProviderConfig.AUTHORITY + "/settings");
 
         public static final String METHOD_CLEAR_EMPTY_DB_FLAG = "clear_empty_db_flag";
+        public static final String METHOD_WAS_EMPTY_DB_CREATED = "get_empty_db_flag";
 
         public static final String METHOD_DELETE_EMPTY_FOLDERS = "delete_empty_folders";
 

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -32,6 +32,7 @@
 import android.text.StaticLayout;
 import android.text.TextPaint;
 import android.util.TypedValue;
+import android.view.ContextThemeWrapper;
 import android.view.View;
 import android.view.View.OnClickListener;
 
@@ -63,9 +64,9 @@ public class PendingAppWidgetHostView extends LauncherAppWidgetHostView implemen
     @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public PendingAppWidgetHostView(Context context, LauncherAppWidgetInfo info,
             boolean disabledForSafeMode) {
-        super(context);
+        super(new ContextThemeWrapper(context, R.style.WidgetContainerTheme));
 
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mInfo = info;
         mStartState = info.restoreStatus;
         mIconLookupIntent = new Intent().setComponent(info.providerName);

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -299,7 +299,7 @@ public void updateFromDeepShortcutInfo(ShortcutInfoCompat shortcutInfo, Context
         if (TextUtils.isEmpty(label)) {
             label = shortcutInfo.getShortLabel();
         }
-        this.contentDescription = UserManagerCompat.getInstance(context)
+        contentDescription = UserManagerCompat.getInstance(context)
                 .getBadgedLabelForUser(label, user);
 
         LauncherAppState launcherAppState = LauncherAppState.getInstance();

File: src/com/android/launcher3/BaseRecyclerView.java
Patch:
@@ -273,7 +273,7 @@ protected boolean supportsFastScrolling() {
      *
      * @return the scroll top of this recycler view.
      */
-    protected abstract int getCurrentScrollY();
+    public abstract int getCurrentScrollY();
 
     /**
      * Maps the touch (from 0..1) to the adapter position that should be visible.

File: src/com/android/launcher3/allapps/AllAppsRecyclerView.java
Patch:
@@ -375,7 +375,7 @@ protected boolean supportsFastScrolling() {
     }
 
     @Override
-    protected int getCurrentScrollY() {
+    public int getCurrentScrollY() {
         // Return early if there are no items or we haven't been measured
         List<AlphabeticalAppsList.AdapterItem> items = mApps.getAdapterItems();
         if (items.isEmpty() || mNumAppsPerRow == 0 || getChildCount() == 0) {

File: src/com/android/launcher3/allapps/HeaderElevationController.java
Patch:
@@ -12,6 +12,7 @@
 import android.view.ViewOutlineProvider;
 import android.widget.FrameLayout;
 
+import com.android.launcher3.BaseRecyclerView;
 import com.android.launcher3.R;
 
 /**
@@ -28,7 +29,7 @@ public void reset() {
 
     @Override
     public final void onScrolled(RecyclerView recyclerView, int dx, int dy) {
-        mCurrentY += dy;
+        mCurrentY = ((BaseRecyclerView) recyclerView).getCurrentScrollY();
         onScroll(mCurrentY);
     }
 

File: src/com/android/launcher3/widget/WidgetsRecyclerView.java
Patch:
@@ -129,7 +129,7 @@ public void onUpdateScrollbar(int dy) {
     }
 
     @Override
-    protected int getCurrentScrollY() {
+    public int getCurrentScrollY() {
         // Skip early if widgets are not bound.
         if (isModelNotReady() || getChildCount() == 0) {
             return -1;

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -299,7 +299,7 @@ public void updateFromDeepShortcutInfo(ShortcutInfoCompat shortcutInfo, Context
         if (TextUtils.isEmpty(label)) {
             label = shortcutInfo.getShortLabel();
         }
-        this.contentDescription = UserManagerCompat.getInstance(context)
+        contentDescription = UserManagerCompat.getInstance(context)
                 .getBadgedLabelForUser(label, user);
 
         LauncherAppState launcherAppState = LauncherAppState.getInstance();

File: src/com/android/launcher3/BaseRecyclerView.java
Patch:
@@ -273,7 +273,7 @@ protected boolean supportsFastScrolling() {
      *
      * @return the scroll top of this recycler view.
      */
-    protected abstract int getCurrentScrollY();
+    public abstract int getCurrentScrollY();
 
     /**
      * Maps the touch (from 0..1) to the adapter position that should be visible.

File: src/com/android/launcher3/allapps/AllAppsRecyclerView.java
Patch:
@@ -375,7 +375,7 @@ protected boolean supportsFastScrolling() {
     }
 
     @Override
-    protected int getCurrentScrollY() {
+    public int getCurrentScrollY() {
         // Return early if there are no items or we haven't been measured
         List<AlphabeticalAppsList.AdapterItem> items = mApps.getAdapterItems();
         if (items.isEmpty() || mNumAppsPerRow == 0 || getChildCount() == 0) {

File: src/com/android/launcher3/allapps/HeaderElevationController.java
Patch:
@@ -12,6 +12,7 @@
 import android.view.ViewOutlineProvider;
 import android.widget.FrameLayout;
 
+import com.android.launcher3.BaseRecyclerView;
 import com.android.launcher3.R;
 
 /**
@@ -28,7 +29,7 @@ public void reset() {
 
     @Override
     public final void onScrolled(RecyclerView recyclerView, int dx, int dy) {
-        mCurrentY += dy;
+        mCurrentY = ((BaseRecyclerView) recyclerView).getCurrentScrollY();
         onScroll(mCurrentY);
     }
 

File: src/com/android/launcher3/widget/WidgetsRecyclerView.java
Patch:
@@ -129,7 +129,7 @@ public void onUpdateScrollbar(int dy) {
     }
 
     @Override
-    protected int getCurrentScrollY() {
+    public int getCurrentScrollY() {
         // Skip early if widgets are not bound.
         if (isModelNotReady() || getChildCount() == 0) {
             return -1;

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -299,7 +299,7 @@ public void updateFromDeepShortcutInfo(ShortcutInfoCompat shortcutInfo, Context
         if (TextUtils.isEmpty(label)) {
             label = shortcutInfo.getShortLabel();
         }
-        this.contentDescription = UserManagerCompat.getInstance(context)
+        contentDescription = UserManagerCompat.getInstance(context)
                 .getBadgedLabelForUser(label, user);
 
         LauncherAppState launcherAppState = LauncherAppState.getInstance();

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -256,7 +256,7 @@ public void preparePull(boolean start) {
     }
 
     private void updateLightStatusBar(float progress) {
-        boolean enable = (progress < mStatusBarHeight / 2);
+        boolean enable = progress <= mStatusBarHeight / 2;
         // Do not modify status bar on landscape as all apps is not full bleed.
         if (mLauncher.getDeviceProfile().isVerticalBarLayout()) {
             return;
@@ -404,7 +404,7 @@ public void onAnimationEnd(Animator animation) {
         }
     }
 
-    private void finishPullUp() {
+    public void finishPullUp() {
         mHotseat.setVisibility(View.INVISIBLE);
         setProgress(0f);
     }

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -256,7 +256,7 @@ public void preparePull(boolean start) {
     }
 
     private void updateLightStatusBar(float progress) {
-        boolean enable = (progress < mStatusBarHeight / 2);
+        boolean enable = progress <= mStatusBarHeight / 2;
         // Do not modify status bar on landscape as all apps is not full bleed.
         if (mLauncher.getDeviceProfile().isVerticalBarLayout()) {
             return;
@@ -404,7 +404,7 @@ public void onAnimationEnd(Animator animation) {
         }
     }
 
-    private void finishPullUp() {
+    public void finishPullUp() {
         mHotseat.setVisibility(View.INVISIBLE);
         setProgress(0f);
     }

File: src/com/android/launcher3/allapps/AllAppsFastScrollHelper.java
Patch:
@@ -18,7 +18,6 @@
 import android.support.v7.widget.RecyclerView;
 import android.view.View;
 
-import com.android.launcher3.BaseRecyclerView;
 import com.android.launcher3.BaseRecyclerViewFastScrollBar;
 import com.android.launcher3.FastBitmapDrawable;
 import com.android.launcher3.util.Thunk;
@@ -144,8 +143,8 @@ private void smoothSnapToPosition(int scrollY, int availableScrollHeight,
 
         // Calculate the full animation from the current scroll position to the final scroll
         // position, and then run the animation for the duration.
-        int newScrollY = Math.min(availableScrollHeight,
-                mRv.getPaddingTop() + mRv.getTop(info.fastScrollToItem.rowIndex));
+        int newPosition = info.fastScrollToItem.position;
+        int newScrollY = Math.min(availableScrollHeight, mRv.getCurrentScrollY(newPosition, 0));
         int numFrames = mFastScrollFrames.length;
         for (int i = 0; i < numFrames; i++) {
             // TODO(winsonc): We can interpolate this as well.

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -62,8 +62,8 @@ public LauncherAppWidgetHostView(Context context) {
         mLongPressHelper = new CheckLongPressHelper(this);
         mStylusEventHelper = new StylusEventHelper(new SimpleOnStylusPressListener(this), this);
         mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
-        mDragLayer = ((Launcher) context).getDragLayer();
-        setAccessibilityDelegate(((Launcher) context).getAccessibilityDelegate());
+        mDragLayer = Launcher.getLauncher(context).getDragLayer();
+        setAccessibilityDelegate(Launcher.getLauncher(context).getAccessibilityDelegate());
 
         setBackgroundResource(R.drawable.widget_internal_focus_bg);
     }

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -283,6 +283,7 @@ public static final class Settings {
                 ProviderConfig.AUTHORITY + "/settings");
 
         public static final String METHOD_CLEAR_EMPTY_DB_FLAG = "clear_empty_db_flag";
+        public static final String METHOD_WAS_EMPTY_DB_CREATED = "get_empty_db_flag";
 
         public static final String METHOD_DELETE_EMPTY_FOLDERS = "delete_empty_folders";
 

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -32,6 +32,7 @@
 import android.text.StaticLayout;
 import android.text.TextPaint;
 import android.util.TypedValue;
+import android.view.ContextThemeWrapper;
 import android.view.View;
 import android.view.View.OnClickListener;
 
@@ -63,9 +64,9 @@ public class PendingAppWidgetHostView extends LauncherAppWidgetHostView implemen
     @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public PendingAppWidgetHostView(Context context, LauncherAppWidgetInfo info,
             boolean disabledForSafeMode) {
-        super(context);
+        super(new ContextThemeWrapper(context, R.style.WidgetContainerTheme));
 
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mInfo = info;
         mStartState = info.restoreStatus;
         mIconLookupIntent = new Intent().setComponent(info.providerName);

File: src/com/android/launcher3/model/GridSizeMigrationTask.java
Patch:
@@ -24,7 +24,6 @@
 import com.android.launcher3.LauncherSettings.Favorites;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
-import com.android.launcher3.backup.nano.BackupProtos;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.compat.PackageInstallerCompat;
 import com.android.launcher3.config.FeatureFlags;

File: tests/src/com/android/launcher3/model/GridSizeMigrationTaskTest.java
Patch:
@@ -15,7 +15,6 @@
 import com.android.launcher3.util.TestLauncherProvider;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.HashSet;
 
 /**
@@ -231,7 +230,7 @@ public void testWorkspace_first_row_blocked() throws Exception {
                 {  5,  2,  7, -1},
         }}, 0);
 
-        new GridSizeMigrationTask(getMockContext(), mIdp, mValidPackages, new HashMap<String, Point>(),
+        new GridSizeMigrationTask(getMockContext(), mIdp, mValidPackages,
                 new Point(4, 4), new Point(3, 4)).migrateWorkspace();
 
         // Items in the second column of the first screen should get placed on a new screen.
@@ -254,7 +253,7 @@ public void testWorkspace_items_moved_to_empty_first_row() throws Exception {
                 {  5,  6,  7, -1},
         }}, 0);
 
-        new GridSizeMigrationTask(getMockContext(), mIdp, mValidPackages, new HashMap<String, Point>(),
+        new GridSizeMigrationTask(getMockContext(), mIdp, mValidPackages,
                 new Point(4, 4), new Point(3, 3)).migrateWorkspace();
 
         // Items in the second column of the first screen should get placed on a new screen.

File: src/com/android/launcher3/model/GridSizeMigrationTask.java
Patch:
@@ -24,7 +24,6 @@
 import com.android.launcher3.LauncherSettings.Favorites;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
-import com.android.launcher3.backup.nano.BackupProtos;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.compat.PackageInstallerCompat;
 import com.android.launcher3.config.FeatureFlags;

File: tests/src/com/android/launcher3/model/GridSizeMigrationTaskTest.java
Patch:
@@ -15,7 +15,6 @@
 import com.android.launcher3.util.TestLauncherProvider;
 
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.HashSet;
 
 /**
@@ -231,7 +230,7 @@ public void testWorkspace_first_row_blocked() throws Exception {
                 {  5,  2,  7, -1},
         }}, 0);
 
-        new GridSizeMigrationTask(getMockContext(), mIdp, mValidPackages, new HashMap<String, Point>(),
+        new GridSizeMigrationTask(getMockContext(), mIdp, mValidPackages,
                 new Point(4, 4), new Point(3, 4)).migrateWorkspace();
 
         // Items in the second column of the first screen should get placed on a new screen.
@@ -254,7 +253,7 @@ public void testWorkspace_items_moved_to_empty_first_row() throws Exception {
                 {  5,  6,  7, -1},
         }}, 0);
 
-        new GridSizeMigrationTask(getMockContext(), mIdp, mValidPackages, new HashMap<String, Point>(),
+        new GridSizeMigrationTask(getMockContext(), mIdp, mValidPackages,
                 new Point(4, 4), new Point(3, 3)).migrateWorkspace();
 
         // Items in the second column of the first screen should get placed on a new screen.

File: src/com/android/launcher3/BaseRecyclerView.java
Patch:
@@ -264,7 +264,7 @@ protected void synchronizeScrollBarThumbOffsetToViewScroll(ScrollPositionState s
         // Calculate the current scroll position, the scrollY of the recycler view accounts for the
         // view padding, while the scrollBarY is drawn right up to the background padding (ignoring
         // padding)
-        int scrollY = getScrollTop(scrollPosState);
+        int scrollY = Math.max(0, getScrollTop(scrollPosState));
         int scrollBarY = mBackgroundPadding.top +
                 (int) (((float) scrollY / availableScrollHeight) * availableScrollBarHeight);
 

File: src/com/android/launcher3/allapps/AllAppsGridAdapter.java
Patch:
@@ -203,7 +203,6 @@ public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
                             continue;
                         }
 
-
                         // Find the section name bounds
                         PointF sectionBounds = getAndCacheSectionBounds(sectionName);
 

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -220,11 +220,10 @@ public void onAnimationUpdate(ValueAnimator animation) {
     }
 
     public void setBackgroundTransparent(boolean enable) {
-        // This causes re-layout. Should replace the logic with simply setting the background alpha
         if (enable) {
-            setBackground(null);
+            mBackground.setAlpha(0);
         } else {
-            setBackground(mBackground);
+            mBackground.setAlpha(255);
         }
     }
 

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -444,5 +444,6 @@ public void onLayoutChange(View v, int left, int top, int right, int bottom,
         if (!mLauncher.isAllAppsVisible()) {
             setProgress(mShiftRange);
         }
+        mHotseat.removeOnLayoutChangeListener(this);
     }
 }

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -273,7 +273,8 @@ private void animateWorkspace(final TransitionStates states, final boolean anima
         // Update the workspace state
         float finalBackgroundAlpha = (states.stateIsSpringLoaded || states.stateIsOverview) ?
                 1.0f : 0f;
-        float finalHotseatAlpha = (states.stateIsNormal || states.stateIsSpringLoaded) ? 1f : 0f;
+        float finalHotseatAlpha = (states.stateIsNormal || states.stateIsSpringLoaded ||
+                (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && states.stateIsNormalHidden)) ? 1f : 0f;
         float finalOverviewPanelAlpha = states.stateIsOverview ? 1f : 0f;
 
         float finalWorkspaceTranslationY = 0;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -495,7 +495,6 @@ protected void onCreate(Bundle savedInstanceState) {
             showIntroScreen();
         } else {
             showFirstRunActivity();
-            showFirstRunClings();
         }
     }
 

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -273,7 +273,8 @@ private void animateWorkspace(final TransitionStates states, final boolean anima
         // Update the workspace state
         float finalBackgroundAlpha = (states.stateIsSpringLoaded || states.stateIsOverview) ?
                 1.0f : 0f;
-        float finalHotseatAlpha = (states.stateIsNormal || states.stateIsSpringLoaded) ? 1f : 0f;
+        float finalHotseatAlpha = (states.stateIsNormal || states.stateIsSpringLoaded ||
+                (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && states.stateIsNormalHidden)) ? 1f : 0f;
         float finalOverviewPanelAlpha = states.stateIsOverview ? 1f : 0f;
 
         float finalWorkspaceTranslationY = 0;

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -359,6 +359,8 @@ public boolean onLongClick(View v) {
         mLauncher.getDragLayer().setController(mLauncher.getDragController());
         mLauncher.getWorkspace().beginDragShared(v, mIconLastTouchPos, this, false);
         ((DragLayer) getParent()).removeView(this);
+        // TODO: support dragging from within folder without having to close it
+        mLauncher.closeFolder();
         return false;
     }
 

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -359,6 +359,8 @@ public boolean onLongClick(View v) {
         mLauncher.getDragLayer().setController(mLauncher.getDragController());
         mLauncher.getWorkspace().beginDragShared(v, mIconLastTouchPos, this, false);
         ((DragLayer) getParent()).removeView(this);
+        // TODO: support dragging from within folder without having to close it
+        mLauncher.closeFolder();
         return false;
     }
 

File: src/com/android/launcher3/shortcuts/DeepShortcutsContainer.java
Patch:
@@ -359,6 +359,8 @@ public boolean onLongClick(View v) {
         mLauncher.getDragLayer().setController(mLauncher.getDragController());
         mLauncher.getWorkspace().beginDragShared(v, mIconLastTouchPos, this, false);
         ((DragLayer) getParent()).removeView(this);
+        // TODO: support dragging from within folder without having to close it
+        mLauncher.closeFolder();
         return false;
     }
 

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -273,7 +273,8 @@ private void animateWorkspace(final TransitionStates states, final boolean anima
         // Update the workspace state
         float finalBackgroundAlpha = (states.stateIsSpringLoaded || states.stateIsOverview) ?
                 1.0f : 0f;
-        float finalHotseatAlpha = (states.stateIsNormal || states.stateIsSpringLoaded) ? 1f : 0f;
+        float finalHotseatAlpha = (states.stateIsNormal || states.stateIsSpringLoaded ||
+                (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && states.stateIsNormalHidden)) ? 1f : 0f;
         float finalOverviewPanelAlpha = states.stateIsOverview ? 1f : 0f;
 
         float finalWorkspaceTranslationY = 0;

File: src/com/android/launcher3/CheckLongPressHelper.java
Patch:
@@ -22,10 +22,12 @@
 
 public class CheckLongPressHelper {
 
+    public static final int DEFAULT_LONG_PRESS_TIMEOUT = 300;
+
     @Thunk View mView;
     @Thunk View.OnLongClickListener mListener;
     @Thunk boolean mHasPerformedLongPress;
-    private int mLongPressTimeout = 300;
+    private int mLongPressTimeout = DEFAULT_LONG_PRESS_TIMEOUT;
     private CheckForLongPress mPendingCheckForLongPress;
 
     class CheckForLongPress implements Runnable {

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -25,7 +25,6 @@
 import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.res.Resources;
-import android.graphics.Point;
 import android.graphics.PointF;
 import android.graphics.Rect;
 import android.os.Build;
@@ -295,7 +294,7 @@ private boolean beginDrag(View v, boolean accessible) {
                 return false;
             }
 
-            mLauncher.getWorkspace().beginDragShared(v, new Point(), this, accessible);
+            mLauncher.getWorkspace().beginDragShared(v, this, accessible);
 
             mCurrentDragInfo = item;
             mEmptyCellRank = item.rank;

File: src/com/android/launcher3/shortcuts/ShortcutCache.java
Patch:
@@ -56,6 +56,7 @@ public void removeShortcuts(List<ShortcutInfoCompat> shortcuts) {
         for (ShortcutInfoCompat shortcut : shortcuts) {
             ShortcutKey key = ShortcutKey.fromInfo(shortcut);
             mCachedShortcuts.remove(key);
+            mPinnedShortcuts.remove(key);
         }
     }
 

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -802,7 +802,7 @@ public void scheduleNext() {
     }
 
     private static final class IconDB extends SQLiteCacheHelper {
-        private final static int DB_VERSION = 9;
+        private final static int DB_VERSION = 10;
 
         private final static int RELEASE_VERSION = DB_VERSION +
                 (FeatureFlags.LAUNCHER3_DISABLE_ICON_NORMALIZATION ? 0 : 1);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1447,7 +1447,7 @@ public void setAllAppsButton(View allAppsButton) {
     }
 
     public View getStartViewForAllAppsRevealAnimation() {
-        return FeatureFlags.NO_ALL_APPS_ICON ? mPageIndicator : mAllAppsButton;
+        return FeatureFlags.NO_ALL_APPS_ICON ? mWorkspace.getPageIndicator() : mAllAppsButton;
     }
 
     public View getWidgetsButton() {

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -120,6 +120,7 @@ public void setFolder(Folder folder) {
         mFolder = folder;
         mKeyListener = new PagedFolderKeyEventListener(folder);
         mPageIndicator = (PageIndicator) folder.findViewById(R.id.folder_page_indicator);
+        initParentViews(folder);
     }
 
     /**

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1447,7 +1447,7 @@ public void setAllAppsButton(View allAppsButton) {
     }
 
     public View getStartViewForAllAppsRevealAnimation() {
-        return FeatureFlags.NO_ALL_APPS_ICON ? mPageIndicator : mAllAppsButton;
+        return FeatureFlags.NO_ALL_APPS_ICON ? mWorkspace.getPageIndicator() : mAllAppsButton;
     }
 
     public View getWidgetsButton() {

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -120,6 +120,7 @@ public void setFolder(Folder folder) {
         mFolder = folder;
         mKeyListener = new PagedFolderKeyEventListener(folder);
         mPageIndicator = (PageIndicator) folder.findViewById(R.id.folder_page_indicator);
+        initParentViews(folder);
     }
 
     /**

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -120,6 +120,7 @@ public void setFolder(Folder folder) {
         mFolder = folder;
         mKeyListener = new PagedFolderKeyEventListener(folder);
         mPageIndicator = (PageIndicator) folder.findViewById(R.id.folder_page_indicator);
+        initParentViews(folder);
     }
 
     /**

File: src/com/android/launcher3/model/GridSizeMigrationTask.java
Patch:
@@ -150,7 +150,7 @@ private boolean applyOperations() throws Exception {
     protected boolean migrateHotseat() throws Exception {
         ArrayList<DbEntry> items = loadHotseatEntries();
 
-        int requiredCount = mDestHotseatSize - 1;
+        int requiredCount = FeatureFlags.NO_ALL_APPS_ICON ? mDestHotseatSize : mDestHotseatSize - 1;
 
         while (items.size() > requiredCount) {
             // Pick the center item by default.

File: src/com/android/launcher3/model/GridSizeMigrationTask.java
Patch:
@@ -150,7 +150,7 @@ private boolean applyOperations() throws Exception {
     protected boolean migrateHotseat() throws Exception {
         ArrayList<DbEntry> items = loadHotseatEntries();
 
-        int requiredCount = mDestHotseatSize - 1;
+        int requiredCount = FeatureFlags.NO_ALL_APPS_ICON ? mDestHotseatSize : mDestHotseatSize - 1;
 
         while (items.size() > requiredCount) {
             // Pick the center item by default.

File: src/com/android/launcher3/compat/AlphabeticIndexCompat.java
Patch:
@@ -20,7 +20,7 @@ public AlphabeticIndexCompat(Context context) {
         BaseIndex index = null;
 
         try {
-            if (Utilities.isNycOrAbove()) {
+            if (Utilities.ATLEAST_N) {
                 index = new AlphabeticIndexVN(context);
             }
         } catch (Exception e) {

File: src/com/android/launcher3/compat/AlphabeticIndexCompat.java
Patch:
@@ -20,7 +20,7 @@ public AlphabeticIndexCompat(Context context) {
         BaseIndex index = null;
 
         try {
-            if (Utilities.isNycOrAbove()) {
+            if (Utilities.ATLEAST_N) {
                 index = new AlphabeticIndexVN(context);
             }
         } catch (Exception e) {

File: src/com/android/launcher3/compat/AlphabeticIndexCompat.java
Patch:
@@ -20,7 +20,7 @@ public AlphabeticIndexCompat(Context context) {
         BaseIndex index = null;
 
         try {
-            if (Utilities.isNycOrAbove()) {
+            if (Utilities.ATLEAST_N) {
                 index = new AlphabeticIndexVN(context);
             }
         } catch (Exception e) {

File: src/com/android/launcher3/compat/AlphabeticIndexCompat.java
Patch:
@@ -20,7 +20,7 @@ public AlphabeticIndexCompat(Context context) {
         BaseIndex index = null;
 
         try {
-            if (Utilities.isNycOrAbove()) {
+            if (Utilities.ATLEAST_N) {
                 index = new AlphabeticIndexVN(context);
             }
         } catch (Exception e) {

File: src/com/android/launcher3/compat/AlphabeticIndexCompat.java
Patch:
@@ -20,7 +20,7 @@ public AlphabeticIndexCompat(Context context) {
         BaseIndex index = null;
 
         try {
-            if (Utilities.isNycOrAbove()) {
+            if (Utilities.ATLEAST_N) {
                 index = new AlphabeticIndexVN(context);
             }
         } catch (Exception e) {

File: src/com/android/launcher3/ItemInfo.java
Patch:
@@ -32,7 +32,7 @@ public class ItemInfo {
     /**
      * Intent extra to store the profile. Format: UserHandle
      */
-    static final String EXTRA_PROFILE = "profile";
+    public static final String EXTRA_PROFILE = "profile";
 
     public static final int NO_ID = -1;
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -59,7 +59,6 @@
 import com.android.launcher3.Launcher.CustomContentCallbacks;
 import com.android.launcher3.Launcher.LauncherOverlay;
 import com.android.launcher3.UninstallDropTarget.DropTargetSource;
-import com.android.launcher3.accessibility.LauncherAccessibilityDelegate;
 import com.android.launcher3.accessibility.LauncherAccessibilityDelegate.AccessibilityDragSource;
 import com.android.launcher3.accessibility.OverviewScreenAccessibilityDelegate;
 import com.android.launcher3.accessibility.WorkspaceAccessibilityHelper;
@@ -2554,7 +2553,8 @@ boolean willCreateUserFolder(ItemInfo info, View dropOverView, boolean considerT
         boolean aboveShortcut = (dropOverView.getTag() instanceof ShortcutInfo);
         boolean willBecomeShortcut =
                 (info.itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION ||
-                        info.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT);
+                        info.itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT ||
+                        info.itemType == LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT);
 
         return (aboveShortcut && willBecomeShortcut);
     }
@@ -3488,6 +3488,7 @@ public void run() {
             switch (info.itemType) {
             case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
             case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
+            case LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT:
                 if (info.container == NO_ID && info instanceof AppInfo) {
                     // Came from all apps -- make a copy
                     info = ((AppInfo) info).makeShortcut();

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -510,7 +510,7 @@ public void animateOpen() {
         }
 
         // This is set to true in close(), but isn't reset to false until onDropCompleted(). This
-        // leads to an consistent state if you drag out of the folder and drag back in without
+        // leads to an inconsistent state if you drag out of the folder and drag back in without
         // dropping. One resulting issue is that replaceFolderWithFinalItem() can be called twice.
         mDeleteFolderOnDropCompleted = false;
 
@@ -737,7 +737,8 @@ public boolean acceptDrop(DragObject d) {
         final ItemInfo item = d.dragInfo;
         final int itemType = item.itemType;
         return ((itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION ||
-                    itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT) &&
+                itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT ||
+                itemType == LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT) &&
                     !isFull());
     }
 

File: src/com/android/launcher3/folder/FolderIcon.java
Patch:
@@ -213,7 +213,8 @@ public FolderInfo getFolderInfo() {
     private boolean willAcceptItem(ItemInfo item) {
         final int itemType = item.itemType;
         return ((itemType == LauncherSettings.Favorites.ITEM_TYPE_APPLICATION ||
-                itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT) &&
+                itemType == LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT ||
+                itemType == LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT) &&
                 !mFolder.isFull() && item != mInfo && !mInfo.opened);
     }
 

File: src/com/android/launcher3/util/CachedPackageTracker.java
Patch:
@@ -170,7 +170,7 @@ protected abstract void onLauncherAppsAdded(List<LauncherActivityInstallInfo> ap
      */
     protected abstract void onLauncherPackageRemoved(String packageName, UserHandleCompat user);
 
-    protected static class LauncherActivityInstallInfo
+    public static class LauncherActivityInstallInfo
             implements Comparable<LauncherActivityInstallInfo> {
         public final LauncherActivityInfoCompat info;
         public final long installTime;

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -53,7 +53,7 @@ public BaseContainerView(Context context, AttributeSet attrs, int defStyleAttr)
         Launcher launcher = Launcher.getLauncher(context);
         int width = launcher.getDeviceProfile().availableWidthPx;
         if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP &&
-                this instanceof AllAppsContainerView && launcher.getDeviceProfile().isLandscape) {
+                this instanceof AllAppsContainerView && !launcher.getDeviceProfile().isLandscape) {
             mHorizontalPadding = 0;
         } else {
             mHorizontalPadding = DeviceProfile.getContainerPadding(context, width);

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -53,7 +53,7 @@ public BaseContainerView(Context context, AttributeSet attrs, int defStyleAttr)
         Launcher launcher = Launcher.getLauncher(context);
         int width = launcher.getDeviceProfile().availableWidthPx;
         if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP &&
-                this instanceof AllAppsContainerView && launcher.getDeviceProfile().isLandscape) {
+                this instanceof AllAppsContainerView && !launcher.getDeviceProfile().isLandscape) {
             mHorizontalPadding = 0;
         } else {
             mHorizontalPadding = DeviceProfile.getContainerPadding(context, width);

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -53,7 +53,7 @@ public BaseContainerView(Context context, AttributeSet attrs, int defStyleAttr)
         Launcher launcher = Launcher.getLauncher(context);
         int width = launcher.getDeviceProfile().availableWidthPx;
         if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP &&
-                this instanceof AllAppsContainerView && launcher.getDeviceProfile().isLandscape) {
+                this instanceof AllAppsContainerView && !launcher.getDeviceProfile().isLandscape) {
             mHorizontalPadding = 0;
         } else {
             mHorizontalPadding = DeviceProfile.getContainerPadding(context, width);

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -25,6 +25,7 @@
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.PackageInstallerCompat;
 import com.android.launcher3.compat.UserManagerCompat;
+import com.android.launcher3.config.ProviderConfig;
 import com.android.launcher3.dynamicui.ExtractionUtils;
 import com.android.launcher3.logging.FileLog;
 import com.android.launcher3.util.ConfigMonitor;
@@ -35,6 +36,8 @@
 
 public class LauncherAppState {
 
+    public static final boolean PROFILE_STARTUP = ProviderConfig.IS_DOGFOOD_BUILD;
+
     private final AppFilter mAppFilter;
     @Thunk final LauncherModel mModel;
     private final IconCache mIconCache;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1396,6 +1396,8 @@ private void setupViews() {
         mDragController.addDropTarget(mWorkspace);
         mDropTargetBar.setup(mDragController);
 
+        mAllAppsController.setupViews(mAppsView, mHotseat, mWorkspace);
+
         if (TestingUtils.MEMORY_DUMP_ENABLED) {
             TestingUtils.addWeightWatcher(this);
         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1396,6 +1396,8 @@ private void setupViews() {
         mDragController.addDropTarget(mWorkspace);
         mDropTargetBar.setup(mDragController);
 
+        mAllAppsController.setupViews(mAppsView, mHotseat, mWorkspace);
+
         if (TestingUtils.MEMORY_DUMP_ENABLED) {
             TestingUtils.addWeightWatcher(this);
         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1395,6 +1395,8 @@ private void setupViews() {
         mDragController.addDropTarget(mWorkspace);
         mDropTargetBar.setup(mDragController);
 
+        mAllAppsController.setupViews(mAppsView, mHotseat, mWorkspace);
+
         if (TestingUtils.MEMORY_DUMP_ENABLED) {
             TestingUtils.addWeightWatcher(this);
         }

File: src/com/android/launcher3/BaseRecyclerViewFastScrollBar.java
Patch:
@@ -81,9 +81,7 @@ public BaseRecyclerViewFastScrollBar(BaseRecyclerView rv, Resources res) {
         mTrackPaint = new Paint();
         mTrackPaint.setColor(rv.getFastScrollerTrackColor(Color.BLACK));
         mTrackPaint.setAlpha(MAX_TRACK_ALPHA);
-        mThumbInactiveColor = rv.getFastScrollerThumbInactiveColor(
-                res.getColor(R.color.container_fastscroll_thumb_inactive_color));
-        mThumbActiveColor = res.getColor(R.color.container_fastscroll_thumb_active_color);
+        mThumbActiveColor = mThumbInactiveColor = Utilities.getColorAccent(rv.getContext());
         mThumbPaint = new Paint();
         mThumbPaint.setAntiAlias(true);
         mThumbPaint.setColor(mThumbInactiveColor);

File: src/com/android/launcher3/BaseRecyclerViewFastScrollPopup.java
Patch:
@@ -53,7 +53,7 @@ public BaseRecyclerViewFastScrollPopup(BaseRecyclerView rv, Resources res) {
         mRes = res;
         mRv = rv;
         mBgOriginalSize = res.getDimensionPixelSize(R.dimen.container_fastscroll_popup_size);
-        mBg = res.getDrawable(R.drawable.container_fastscroll_popup_bg);
+        mBg = rv.getContext().getDrawable(R.drawable.container_fastscroll_popup_bg);
         mBg.setBounds(0, 0, mBgOriginalSize, mBgOriginalSize);
         mTextPaint = new Paint();
         mTextPaint.setColor(Color.WHITE);

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -103,7 +103,7 @@ public BubbleTextView(Context context, AttributeSet attrs) {
 
     public BubbleTextView(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         DeviceProfile grid = mLauncher.getDeviceProfile();
 
         TypedArray a = context.obtainStyledAttributes(attrs,

File: src/com/android/launcher3/InfoDropTarget.java
Patch:
@@ -43,7 +43,7 @@ public InfoDropTarget(Context context, AttributeSet attrs, int defStyle) {
     protected void onFinishInflate() {
         super.onFinishInflate();
         // Get the hover color
-        mHoverColor = getResources().getColor(R.color.info_target_hover_tint);
+        mHoverColor = Utilities.getColorAccent(getContext());
 
         setDrawable(R.drawable.ic_info_launcher);
     }

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -584,7 +584,7 @@ protected Bitmap doInBackground(Void... params) {
                 // which would gets re-written next time.
                 mVersions = getPackageVersion(mKey.componentName.getPackageName());
 
-                Launcher launcher = (Launcher) mCaller.getContext();
+                Launcher launcher = Launcher.getLauncher(mCaller.getContext());
 
                 // it's not in the db... we need to generate it
                 preview = generatePreview(launcher, mInfo, unusedBitmap, mPreviewWidth, mPreviewHeight);

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -178,7 +178,7 @@ public AllAppsContainerView(Context context, AttributeSet attrs, int defStyleAtt
         super(context, attrs, defStyleAttr);
         Resources res = context.getResources();
 
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mSectionNamesMargin = res.getDimensionPixelSize(R.dimen.all_apps_grid_view_start_margin);
         mApps = new AlphabeticalAppsList(context);
         mAdapter = new AllAppsGridAdapter(mLauncher, mApps, this, mLauncher, this);

File: src/com/android/launcher3/allapps/AllAppsGridAdapter.java
Patch:
@@ -378,7 +378,7 @@ public AllAppsGridAdapter(Launcher launcher, AlphabeticalAppsList apps,
         mSectionTextPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
         mSectionTextPaint.setTextSize(res.getDimensionPixelSize(
                 R.dimen.all_apps_grid_section_text_size));
-        mSectionTextPaint.setColor(res.getColor(R.color.all_apps_grid_section_text_color));
+        mSectionTextPaint.setColor(Utilities.getColorAccent(launcher));
 
         mPredictedAppsDividerPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
         mPredictedAppsDividerPaint.setStrokeWidth(Utilities.pxFromDp(1f, res.getDisplayMetrics()));

File: src/com/android/launcher3/pageindicators/PageIndicatorDots.java
Patch:
@@ -123,7 +123,7 @@ public PageIndicatorDots(Context context, AttributeSet attrs, int defStyleAttr)
         mDotRadius = getResources().getDimension(R.dimen.page_indicator_dot_size) / 2;
         setOutlineProvider(new MyOutlineProver());
 
-        mActiveColor = getResources().getColor(R.color.launcher_accent_color);
+        mActiveColor = Utilities.getColorAccent(context);
         mInActiveColor = getResources().getColor(R.color.page_indicator_dot_color);
 
         mIsRtl = Utilities.isRtl(getResources());

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -88,7 +88,7 @@ public WidgetCell(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
 
         final Resources r = context.getResources();
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mStylusEventHelper = new StylusEventHelper(new SimpleOnStylusPressListener(this), this);
 
         setContainerWidth();

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -82,9 +82,9 @@ public WidgetsContainerView(Context context, AttributeSet attrs) {
 
     public WidgetsContainerView(Context context, AttributeSet attrs, int defStyleAttr) {
         super(context, attrs, defStyleAttr);
-        mLauncher = (Launcher) context;
+        mLauncher = Launcher.getLauncher(context);
         mDragController = mLauncher.getDragController();
-        mAdapter = new WidgetsListAdapter(this, this, mLauncher);
+        mAdapter = new WidgetsListAdapter(this, this, context);
         mIconCache = (LauncherAppState.getInstance()).getIconCache();
         if (LOGD) {
             Log.d(TAG, "WidgetsContainerView constructor");

File: src/com/android/launcher3/allapps/AllAppsTransitionController.java
Patch:
@@ -20,6 +20,7 @@
 import com.android.launcher3.LauncherAnimUtils;
 import com.android.launcher3.PagedView;
 import com.android.launcher3.Workspace;
+import com.android.launcher3.Workspace.Direction;
 import com.android.launcher3.util.TouchController;
 
 /**
@@ -239,10 +240,10 @@ public void setProgress(float progress) {
                 mDecelInterpolator.getInterpolation(alpha))));
         mAppsView.getContentView().setAlpha(alpha);
         mAppsView.setTranslationY(progress);
-        mWorkspace.setWorkspaceTranslation(View.TRANSLATION_Y,
+        mWorkspace.setWorkspaceTranslation(Direction.Y,
                 PARALLAX_COEFFICIENT *(-mTranslation + progress),
                 mAccelInterpolator.getInterpolation(workspaceHotseatAlpha));
-        mWorkspace.setHotseatTranslation(View.TRANSLATION_Y, -mTranslation + progress,
+        mWorkspace.setHotseatTranslation(Direction.Y, -mTranslation + progress,
                 mAccelInterpolator.getInterpolation(workspaceHotseatAlpha));
     }
 

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -164,7 +164,7 @@ public TransitionStates(final Workspace.State fromState, final Workspace.State t
         workspaceToAllApps = (oldStateIsNormal && stateIsNormalHidden);
         overviewToWorkspace = (oldStateIsOverview && stateIsNormal);
         overviewToAllApps = (oldStateIsOverview && stateIsOverviewHidden);
-        allAppsToWorkspace = (stateIsNormalHidden && stateIsNormal);
+        allAppsToWorkspace = (oldStateIsNormalHidden && stateIsNormal);
     }
 }
 

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -164,7 +164,7 @@ public TransitionStates(final Workspace.State fromState, final Workspace.State t
         workspaceToAllApps = (oldStateIsNormal && stateIsNormalHidden);
         overviewToWorkspace = (oldStateIsOverview && stateIsNormal);
         overviewToAllApps = (oldStateIsOverview && stateIsOverviewHidden);
-        allAppsToWorkspace = (stateIsNormalHidden && stateIsNormal);
+        allAppsToWorkspace = (oldStateIsNormalHidden && stateIsNormal);
     }
 }
 

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -439,7 +439,6 @@ private DeviceProfieData initDeviceProfileData(InvariantDeviceProfile profile) {
         data.desktopRows = profile.numRows;
         data.desktopCols = profile.numColumns;
         data.hotseatCount = profile.numHotseatIcons;
-        data.allappsRank = profile.hotseatAllAppsRank;
         return data;
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -196,7 +196,6 @@ public void bindWorkspaceComponentsRemoved(
         public void bindAppInfosRemoved(ArrayList<AppInfo> appInfos);
         public void notifyWidgetProvidersChanged();
         public void bindWidgetsModel(WidgetsModel model);
-        public boolean isAllAppsButtonRank(int rank);
         public void onPageBoundSynchronously(int page);
         public void executeOnNextDraw(ViewOnDrawExecutor executor);
     }
@@ -1450,8 +1449,8 @@ private boolean checkItemPlacement(LongArrayMap<GridOccupancy> occupied, ItemInf
             long containerIndex = item.screenId;
             if (item.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
                 // Return early if we detect that an item is under the hotseat button
-                if (mCallbacks == null ||
-                        mCallbacks.get().isAllAppsButtonRank((int) item.screenId)) {
+                if (!FeatureFlags.NO_ALL_APPS_ICON &&
+                        profile.isAllAppsButtonRank((int) item.screenId)) {
                     Log.e(TAG, "Error loading shortcut into hotseat " + item
                             + " into position (" + item.screenId + ":" + item.cellX + ","
                             + item.cellY + ") occupied by all apps");

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -142,7 +142,7 @@ public LauncherStateTransitionAnimation(Launcher l, AllAppsTransitionController
     public void startAnimationToAllApps(final Workspace.State fromWorkspaceState,
             final boolean animated, final boolean startSearchAfterTransition) {
         final AllAppsContainerView toView = mLauncher.getAppsView();
-        final View buttonView = mLauncher.getAllAppsButton();
+        final View buttonView = mLauncher.getStartViewForAllAppsRevealAnimation();
         PrivateTransitionCallbacks cb = new PrivateTransitionCallbacks(1f) {
             @Override
             public float getMaterialRevealViewStartFinalRadius() {
@@ -525,7 +525,7 @@ void onTransitionComplete() {
         };
         // Only animate the search bar if animating to spring loaded mode from all apps
         mCurrentAnimation = startAnimationToWorkspaceFromOverlay(fromWorkspaceState, toWorkspaceState,
-                mLauncher.getAllAppsButton(), appsView,
+                mLauncher.getStartViewForAllAppsRevealAnimation(), appsView,
                 animated, type, onCompleteRunnable, cb);
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2509,9 +2509,9 @@ public boolean acceptDrop(DragObject d) {
                 // Don't show the message if we are dropping on the AllApps button and the hotseat
                 // is full
                 boolean isHotseat = mLauncher.isHotseatLayout(dropTargetLayout);
-                if (mTargetCell != null && isHotseat) {
+                if (mTargetCell != null && isHotseat && !FeatureFlags.NO_ALL_APPS_ICON) {
                     Hotseat hotseat = mLauncher.getHotseat();
-                    if (hotseat.isAllAppsButtonRank(
+                    if (mLauncher.getDeviceProfile().inv.isAllAppsButtonRank(
                             hotseat.getOrderInHotseat(mTargetCell[0], mTargetCell[1]))) {
                         return false;
                     }

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -33,4 +33,6 @@ private FeatureFlags() {}
 
     // Feature flag to enable moving the QSB on the 0th screen of the workspace
     public static final boolean QSB_ON_FIRST_SCREEN = true;
+    // When enabled the all-apps icon is not added to the hotseat.
+    public static final boolean NO_ALL_APPS_ICON = true;
 }

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -439,7 +439,6 @@ private DeviceProfieData initDeviceProfileData(InvariantDeviceProfile profile) {
         data.desktopRows = profile.numRows;
         data.desktopCols = profile.numColumns;
         data.hotseatCount = profile.numHotseatIcons;
-        data.allappsRank = profile.hotseatAllAppsRank;
         return data;
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -196,7 +196,6 @@ public void bindWorkspaceComponentsRemoved(
         public void bindAppInfosRemoved(ArrayList<AppInfo> appInfos);
         public void notifyWidgetProvidersChanged();
         public void bindWidgetsModel(WidgetsModel model);
-        public boolean isAllAppsButtonRank(int rank);
         public void onPageBoundSynchronously(int page);
         public void executeOnNextDraw(ViewOnDrawExecutor executor);
     }
@@ -1450,8 +1449,8 @@ private boolean checkItemPlacement(LongArrayMap<GridOccupancy> occupied, ItemInf
             long containerIndex = item.screenId;
             if (item.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
                 // Return early if we detect that an item is under the hotseat button
-                if (mCallbacks == null ||
-                        mCallbacks.get().isAllAppsButtonRank((int) item.screenId)) {
+                if (!FeatureFlags.NO_ALL_APPS_ICON &&
+                        profile.isAllAppsButtonRank((int) item.screenId)) {
                     Log.e(TAG, "Error loading shortcut into hotseat " + item
                             + " into position (" + item.screenId + ":" + item.cellX + ","
                             + item.cellY + ") occupied by all apps");

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -142,7 +142,7 @@ public LauncherStateTransitionAnimation(Launcher l, AllAppsTransitionController
     public void startAnimationToAllApps(final Workspace.State fromWorkspaceState,
             final boolean animated, final boolean startSearchAfterTransition) {
         final AllAppsContainerView toView = mLauncher.getAppsView();
-        final View buttonView = mLauncher.getAllAppsButton();
+        final View buttonView = mLauncher.getStartViewForAllAppsRevealAnimation();
         PrivateTransitionCallbacks cb = new PrivateTransitionCallbacks(1f) {
             @Override
             public float getMaterialRevealViewStartFinalRadius() {
@@ -525,7 +525,7 @@ void onTransitionComplete() {
         };
         // Only animate the search bar if animating to spring loaded mode from all apps
         mCurrentAnimation = startAnimationToWorkspaceFromOverlay(fromWorkspaceState, toWorkspaceState,
-                mLauncher.getAllAppsButton(), appsView,
+                mLauncher.getStartViewForAllAppsRevealAnimation(), appsView,
                 animated, type, onCompleteRunnable, cb);
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2509,9 +2509,9 @@ public boolean acceptDrop(DragObject d) {
                 // Don't show the message if we are dropping on the AllApps button and the hotseat
                 // is full
                 boolean isHotseat = mLauncher.isHotseatLayout(dropTargetLayout);
-                if (mTargetCell != null && isHotseat) {
+                if (mTargetCell != null && isHotseat && !FeatureFlags.NO_ALL_APPS_ICON) {
                     Hotseat hotseat = mLauncher.getHotseat();
-                    if (hotseat.isAllAppsButtonRank(
+                    if (mLauncher.getDeviceProfile().inv.isAllAppsButtonRank(
                             hotseat.getOrderInHotseat(mTargetCell[0], mTargetCell[1]))) {
                         return false;
                     }

File: src_config/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -33,4 +33,6 @@ private FeatureFlags() {}
 
     // Feature flag to enable moving the QSB on the 0th screen of the workspace
     public static final boolean QSB_ON_FIRST_SCREEN = true;
+    // When enabled the all-apps icon is not added to the hotseat.
+    public static final boolean NO_ALL_APPS_ICON = true;
 }

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -51,7 +51,9 @@ public BaseContainerView(Context context, AttributeSet attrs, int defStyleAttr)
         super(context, attrs, defStyleAttr);
 
         int width = ((Launcher) context).getDeviceProfile().availableWidthPx;
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && (this instanceof AllAppsContainerView)) {
+        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP &&
+                this instanceof AllAppsContainerView &&
+                !((Launcher) context).getDeviceProfile().isLandscape) {
             mHorizontalPadding = 0;
         } else {
             mHorizontalPadding = DeviceProfile.getContainerPadding(context, width);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3447,7 +3447,7 @@ void exitSpringLoadedDragMode() {
      * Updates the set of predicted apps if it hasn't been updated since the last time Launcher was
      * resumed.
      */
-    private void tryAndUpdatePredictedApps() {
+    public void tryAndUpdatePredictedApps() {
         if (mLauncherCallbacks != null) {
             List<ComponentKey> apps = mLauncherCallbacks.getPredictedApps();
             if (apps != null) {

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -490,7 +490,8 @@ private void animateBackgroundGradient(TransitionStates states,
 
         final DragLayer dragLayer = mLauncher.getDragLayer();
         final float startAlpha = dragLayer.getBackgroundAlpha();
-        float finalAlpha = states.stateIsNormal ? 0 : mWorkspaceScrimAlpha;
+        float finalAlpha = states.stateIsNormal || states.stateIsNormalHidden ?
+                0 : mWorkspaceScrimAlpha;
 
         if (finalAlpha != startAlpha) {
             if (animated) {

File: src/com/android/launcher3/allapps/VerticalPullDetector.java
Patch:
@@ -135,7 +135,7 @@ public boolean onTouchEvent(MotionEvent ev) {
                 mDisplacementY = ev.getY() - mDownY;
                 mVelocity = computeVelocity(ev, mVelocity);
 
-                if (mState == State.SCROLLING && shouldRecatchScrollStart()){
+                if (mState == State.SCROLLING && Math.abs(mDisplacementY) > mTouchSlop ){
                     setState(State.DRAG);
                     reportScrollStart(true /* recatch */);
                 }

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -51,7 +51,9 @@ public BaseContainerView(Context context, AttributeSet attrs, int defStyleAttr)
         super(context, attrs, defStyleAttr);
 
         int width = ((Launcher) context).getDeviceProfile().availableWidthPx;
-        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP && (this instanceof AllAppsContainerView)) {
+        if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP &&
+                this instanceof AllAppsContainerView &&
+                !((Launcher) context).getDeviceProfile().isLandscape) {
             mHorizontalPadding = 0;
         } else {
             mHorizontalPadding = DeviceProfile.getContainerPadding(context, width);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3447,7 +3447,7 @@ void exitSpringLoadedDragMode() {
      * Updates the set of predicted apps if it hasn't been updated since the last time Launcher was
      * resumed.
      */
-    private void tryAndUpdatePredictedApps() {
+    public void tryAndUpdatePredictedApps() {
         if (mLauncherCallbacks != null) {
             List<ComponentKey> apps = mLauncherCallbacks.getPredictedApps();
             if (apps != null) {

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -490,7 +490,8 @@ private void animateBackgroundGradient(TransitionStates states,
 
         final DragLayer dragLayer = mLauncher.getDragLayer();
         final float startAlpha = dragLayer.getBackgroundAlpha();
-        float finalAlpha = states.stateIsNormal ? 0 : mWorkspaceScrimAlpha;
+        float finalAlpha = states.stateIsNormal || states.stateIsNormalHidden ?
+                0 : mWorkspaceScrimAlpha;
 
         if (finalAlpha != startAlpha) {
             if (animated) {

File: src/com/android/launcher3/allapps/VerticalPullDetector.java
Patch:
@@ -135,7 +135,7 @@ public boolean onTouchEvent(MotionEvent ev) {
                 mDisplacementY = ev.getY() - mDownY;
                 mVelocity = computeVelocity(ev, mVelocity);
 
-                if (mState == State.SCROLLING && shouldRecatchScrollStart()){
+                if (mState == State.SCROLLING && Math.abs(mDisplacementY) > mTouchSlop ){
                     setState(State.DRAG);
                     reportScrollStart(true /* recatch */);
                 }

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -151,7 +151,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         // which extends to the top of the hotseat.
         View parent = mLauncher.getDragLayer();
         sTempCoords[0] = sTempCoords[1] = 0;
-        Utilities.getDescendantCoordRelativeToParent(this, parent, sTempCoords, true);
+        Utilities.getDescendantCoordRelativeToAncestor(this, parent, sTempCoords, true);
         mTouchHitRect.set(sTempCoords[0], sTempCoords[1], sTempCoords[0] + this.getWidth(),
                 sTempCoords[1] + getHeight() + mTouchExtensionHeight);
         parent.setTouchDelegate(new TouchDelegate(mTouchHitRect, this));

File: src/com/android/launcher3/pageindicators/PageIndicatorLineCaret.java
Patch:
@@ -151,7 +151,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         // which extends to the top of the hotseat.
         View parent = mLauncher.getDragLayer();
         sTempCoords[0] = sTempCoords[1] = 0;
-        Utilities.getDescendantCoordRelativeToParent(this, parent, sTempCoords, true);
+        Utilities.getDescendantCoordRelativeToAncestor(this, parent, sTempCoords, true);
         mTouchHitRect.set(sTempCoords[0], sTempCoords[1], sTempCoords[0] + this.getWidth(),
                 sTempCoords[1] + getHeight() + mTouchExtensionHeight);
         parent.setTouchDelegate(new TouchDelegate(mTouchHitRect, this));

File: WallpaperPicker/src/com/android/gallery3d/common/BitmapCropTask.java
Patch:
@@ -181,7 +181,7 @@ public boolean cropBitmap(int whichWallpaper) {
                 failure = true;
             }
             return !failure;
-        } else if (mSetWallpaper && Utilities.isNycOrAbove()
+        } else if (mSetWallpaper && Utilities.ATLEAST_N
                 && mRotation == 0 && mOutWidth > 0 && mOutHeight > 0) {
             Rect hint = new Rect();
             mCropBounds.roundOut(hint);
@@ -404,7 +404,7 @@ public boolean cropBitmap(int whichWallpaper) {
 
     @Override
     protected Boolean doInBackground(Integer... params) {
-        return cropBitmap(params.length == 0 ? NycWallpaperUtils.FLAG_SET_SYSTEM : params[0]);
+        return cropBitmap(params.length == 0 ? WallpaperManager.FLAG_SYSTEM : params[0]);
     }
 
     @Override
@@ -418,7 +418,7 @@ protected void onPostExecute(Boolean cropSucceeded) {
     }
 
     private void setWallpaper(InputStream in, Rect crop, int whichWallpaper) throws IOException {
-        if (!Utilities.isNycOrAbove()) {
+        if (!Utilities.ATLEAST_N) {
             WallpaperManager.getInstance(mContext.getApplicationContext()).setStream(in);
         } else {
             NycWallpaperUtils.setStream(mContext, in, crop, true, whichWallpaper);

File: src/com/android/launcher3/compat/UserManagerCompat.java
Patch:
@@ -32,7 +32,7 @@ protected UserManagerCompat() {
     public static UserManagerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isNycOrAbove()) {
+                if (Utilities.ATLEAST_N) {
                     sInstance = new UserManagerCompatVN(context.getApplicationContext());
                 } else if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new UserManagerCompatVL(context.getApplicationContext());

File: src/com/android/launcher3/model/GridSizeMigrationTask.java
Patch:
@@ -39,7 +39,7 @@
  */
 public class GridSizeMigrationTask {
 
-    public static boolean ENABLED = Utilities.isNycOrAbove();
+    public static boolean ENABLED = Utilities.ATLEAST_N;
 
     private static final String TAG = "GridSizeMigrationTask";
     private static final boolean DEBUG = true;

File: src/com/android/launcher3/util/PackageManagerHelper.java
Patch:
@@ -62,7 +62,7 @@ public static boolean isAppSuspended(ApplicationInfo info) {
         // The value of FLAG_SUSPENDED was reused by a hidden constant
         // ApplicationInfo.FLAG_PRIVILEGED prior to N, so only check for suspended flag on N
         // or later.
-        if (Utilities.isNycOrAbove()) {
+        if (Utilities.ATLEAST_N) {
             return (info.flags & FLAG_SUSPENDED) != 0;
         } else {
             return false;

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -42,7 +42,6 @@
 import android.widget.TextView;
 
 import com.android.launcher3.AppWidgetResizeFrame;
-import com.android.launcher3.BaseContainerView;
 import com.android.launcher3.CellLayout;
 import com.android.launcher3.InsettableFrameLayout;
 import com.android.launcher3.ItemInfo;
@@ -56,7 +55,6 @@
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
 import com.android.launcher3.accessibility.LauncherAccessibilityDelegate;
-import com.android.launcher3.allapps.AllAppsContainerView;
 import com.android.launcher3.allapps.AllAppsTransitionController;
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.folder.Folder;
@@ -468,7 +466,7 @@ public float getDescendantCoordRelativeToSelf(View descendant, int[] coord) {
      */
     public float getDescendantCoordRelativeToSelf(View descendant, int[] coord,
             boolean includeRootScroll) {
-        return Utilities.getDescendantCoordRelativeToParent(descendant, this,
+        return Utilities.getDescendantCoordRelativeToAncestor(descendant, this,
                 coord, includeRootScroll);
     }
 

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -42,7 +42,6 @@
 import android.widget.TextView;
 
 import com.android.launcher3.AppWidgetResizeFrame;
-import com.android.launcher3.BaseContainerView;
 import com.android.launcher3.CellLayout;
 import com.android.launcher3.InsettableFrameLayout;
 import com.android.launcher3.ItemInfo;
@@ -56,7 +55,6 @@
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
 import com.android.launcher3.accessibility.LauncherAccessibilityDelegate;
-import com.android.launcher3.allapps.AllAppsContainerView;
 import com.android.launcher3.allapps.AllAppsTransitionController;
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.folder.Folder;
@@ -468,7 +466,7 @@ public float getDescendantCoordRelativeToSelf(View descendant, int[] coord) {
      */
     public float getDescendantCoordRelativeToSelf(View descendant, int[] coord,
             boolean includeRootScroll) {
-        return Utilities.getDescendantCoordRelativeToParent(descendant, this,
+        return Utilities.getDescendantCoordRelativeToAncestor(descendant, this,
                 coord, includeRootScroll);
     }
 

File: src/com/android/launcher3/dragndrop/DragLayer.java
Patch:
@@ -42,7 +42,6 @@
 import android.widget.TextView;
 
 import com.android.launcher3.AppWidgetResizeFrame;
-import com.android.launcher3.BaseContainerView;
 import com.android.launcher3.CellLayout;
 import com.android.launcher3.InsettableFrameLayout;
 import com.android.launcher3.ItemInfo;
@@ -56,7 +55,6 @@
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
 import com.android.launcher3.accessibility.LauncherAccessibilityDelegate;
-import com.android.launcher3.allapps.AllAppsContainerView;
 import com.android.launcher3.allapps.AllAppsTransitionController;
 import com.android.launcher3.config.FeatureFlags;
 import com.android.launcher3.folder.Folder;
@@ -468,7 +466,7 @@ public float getDescendantCoordRelativeToSelf(View descendant, int[] coord) {
      */
     public float getDescendantCoordRelativeToSelf(View descendant, int[] coord,
             boolean includeRootScroll) {
-        return Utilities.getDescendantCoordRelativeToParent(descendant, this,
+        return Utilities.getDescendantCoordRelativeToAncestor(descendant, this,
                 coord, includeRootScroll);
     }
 

File: src/com/android/launcher3/BaseRecyclerViewFastScrollBar.java
Patch:
@@ -27,7 +27,6 @@
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.view.MotionEvent;
-import android.view.VelocityTracker;
 import android.view.ViewConfiguration;
 
 import com.android.launcher3.util.Thunk;
@@ -293,7 +292,7 @@ private void updateThumbPath() {
     /**
      * Returns whether the specified points are near the scroll bar bounds.
      */
-    private boolean isNearThumb(int x, int y) {
+    public boolean isNearThumb(int x, int y) {
         mTmpRect.set(mThumbOffset.x, mThumbOffset.y, mThumbOffset.x + mThumbWidth,
                 mThumbOffset.y + mThumbHeight);
         mTmpRect.inset(mTouchInset, mTouchInset);

File: src/com/android/launcher3/BaseRecyclerViewFastScrollBar.java
Patch:
@@ -27,7 +27,6 @@
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.view.MotionEvent;
-import android.view.VelocityTracker;
 import android.view.ViewConfiguration;
 
 import com.android.launcher3.util.Thunk;
@@ -293,7 +292,7 @@ private void updateThumbPath() {
     /**
      * Returns whether the specified points are near the scroll bar bounds.
      */
-    private boolean isNearThumb(int x, int y) {
+    public boolean isNearThumb(int x, int y) {
         mTmpRect.set(mThumbOffset.x, mThumbOffset.y, mThumbOffset.x + mThumbWidth,
                 mThumbOffset.y + mThumbHeight);
         mTmpRect.inset(mTouchInset, mTouchInset);

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1971,7 +1971,7 @@ protected void snapToDestination() {
         snapToPage(getPageNearestToCenterOfScreen(), PAGE_SNAP_ANIMATION_DURATION);
     }
 
-    private static class ScrollInterpolator implements Interpolator {
+    public static class ScrollInterpolator implements Interpolator {
         public ScrollInterpolator() {
         }
 

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -18,6 +18,7 @@
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.res.Resources;
+import android.graphics.Color;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.support.v7.widget.LinearLayoutManager;
@@ -450,6 +451,7 @@ private void updatePaddingsAndMargins() {
             mSearchInput.setLayoutParams(llp);
 
             lp.height = height;
+            mSearchContainer.setBackground(null);
         }
         mSearchContainer.setLayoutParams(lp);
     }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1971,7 +1971,7 @@ protected void snapToDestination() {
         snapToPage(getPageNearestToCenterOfScreen(), PAGE_SNAP_ANIMATION_DURATION);
     }
 
-    private static class ScrollInterpolator implements Interpolator {
+    public static class ScrollInterpolator implements Interpolator {
         public ScrollInterpolator() {
         }
 

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -18,6 +18,7 @@
 import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.res.Resources;
+import android.graphics.Color;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.support.v7.widget.LinearLayoutManager;
@@ -450,6 +451,7 @@ private void updatePaddingsAndMargins() {
             mSearchInput.setLayoutParams(llp);
 
             lp.height = height;
+            mSearchContainer.setBackground(null);
         }
         mSearchContainer.setLayoutParams(lp);
     }

File: src/com/android/launcher3/SettingsActivity.java
Patch:
@@ -59,7 +59,7 @@ public void onCreate(Bundle savedInstanceState) {
                 // Launcher supports rotation by default. No need to show this setting.
                 getPreferenceScreen().removePreference(rotationPref);
             } else {
-                ContentResolver resolver = getContext().getContentResolver();
+                ContentResolver resolver = getActivity().getContentResolver();
                 mRotationLockObserver = new SystemDisplayRotationLockObserver(rotationPref, resolver);
 
                 // Register a content observer to listen for system setting changes while
@@ -70,14 +70,14 @@ public void onCreate(Bundle savedInstanceState) {
 
                 // Initialize the UI once
                 mRotationLockObserver.onChange(true);
-                rotationPref.setDefaultValue(Utilities.getAllowRotationDefaultValue(getContext()));
+                rotationPref.setDefaultValue(Utilities.getAllowRotationDefaultValue(getActivity()));
             }
         }
 
         @Override
         public void onDestroy() {
             if (mRotationLockObserver != null) {
-                getContext().getContentResolver().unregisterContentObserver(mRotationLockObserver);
+                getActivity().getContentResolver().unregisterContentObserver(mRotationLockObserver);
                 mRotationLockObserver = null;
             }
             super.onDestroy();

File: src/com/android/launcher3/SettingsActivity.java
Patch:
@@ -59,7 +59,7 @@ public void onCreate(Bundle savedInstanceState) {
                 // Launcher supports rotation by default. No need to show this setting.
                 getPreferenceScreen().removePreference(rotationPref);
             } else {
-                ContentResolver resolver = getContext().getContentResolver();
+                ContentResolver resolver = getActivity().getContentResolver();
                 mRotationLockObserver = new SystemDisplayRotationLockObserver(rotationPref, resolver);
 
                 // Register a content observer to listen for system setting changes while
@@ -70,14 +70,14 @@ public void onCreate(Bundle savedInstanceState) {
 
                 // Initialize the UI once
                 mRotationLockObserver.onChange(true);
-                rotationPref.setDefaultValue(Utilities.getAllowRotationDefaultValue(getContext()));
+                rotationPref.setDefaultValue(Utilities.getAllowRotationDefaultValue(getActivity()));
             }
         }
 
         @Override
         public void onDestroy() {
             if (mRotationLockObserver != null) {
-                getContext().getContentResolver().unregisterContentObserver(mRotationLockObserver);
+                getActivity().getContentResolver().unregisterContentObserver(mRotationLockObserver);
                 mRotationLockObserver = null;
             }
             super.onDestroy();

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -118,7 +118,9 @@ public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo i
                     info.addAction(mActions.get(RESIZE));
                 }
             }
-        } if ((item instanceof AppInfo) || (item instanceof PendingAddItemInfo)) {
+        }
+
+        if ((item instanceof AppInfo) || (item instanceof PendingAddItemInfo)) {
             info.addAction(mActions.get(ADD_TO_WORKSPACE));
         }
     }

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -677,7 +677,7 @@ private AnimatorSet startAnimationToWorkspaceFromOverlay(
                     animated, initialized, animation, revealDuration, layerViews);
         }
         if (!animated || !initialized) {
-            if (!FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP) {
+            if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP) {
                 mAllAppsController.finishPullDown();
             }
             fromView.setVisibility(View.GONE);

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -677,7 +677,7 @@ private AnimatorSet startAnimationToWorkspaceFromOverlay(
                     animated, initialized, animation, revealDuration, layerViews);
         }
         if (!animated || !initialized) {
-            if (!FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP) {
+            if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP) {
                 mAllAppsController.finishPullDown();
             }
             fromView.setVisibility(View.GONE);

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -677,7 +677,7 @@ private AnimatorSet startAnimationToWorkspaceFromOverlay(
                     animated, initialized, animation, revealDuration, layerViews);
         }
         if (!animated || !initialized) {
-            if (!FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP) {
+            if (FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP) {
                 mAllAppsController.finishPullDown();
             }
             fromView.setVisibility(View.GONE);

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -118,7 +118,9 @@ public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo i
                     info.addAction(mActions.get(RESIZE));
                 }
             }
-        } if ((item instanceof AppInfo) || (item instanceof PendingAddItemInfo)) {
+        }
+
+        if ((item instanceof AppInfo) || (item instanceof PendingAddItemInfo)) {
             info.addAction(mActions.get(ADD_TO_WORKSPACE));
         }
     }

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -118,7 +118,9 @@ public void onInitializeAccessibilityNodeInfo(View host, AccessibilityNodeInfo i
                     info.addAction(mActions.get(RESIZE));
                 }
             }
-        } if ((item instanceof AppInfo) || (item instanceof PendingAddItemInfo)) {
+        }
+
+        if ((item instanceof AppInfo) || (item instanceof PendingAddItemInfo)) {
             info.addAction(mActions.get(ADD_TO_WORKSPACE));
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4444,7 +4444,7 @@ public void bindWidgetsModel(WidgetsModel model) {
 
     @Override
     public void notifyWidgetProvidersChanged() {
-        if (mWorkspace.getState().shouldUpdateWidget) {
+        if (mWorkspace != null && mWorkspace.getState().shouldUpdateWidget) {
             mModel.refreshAndBindWidgetsAndShortcuts(this, mWidgetsView.isEmpty());
         }
     }

File: tests/src/com/android/launcher3/ui/AddWidgetTest.java
Patch:
@@ -44,7 +44,7 @@ private void performTest() throws Throwable {
         clearHomescreen();
         Launcher launcher = startLauncher();
 
-        // Open all apps and wait for load complete.
+        // Open widget tray and wait for load complete.
         final UiObject2 widgetContainer = openWidgetsTray();
         assertTrue(Wait.atMost(Condition.minChildCount(widgetContainer, 2), DEFAULT_UI_TIMEOUT));
 

File: tests/src/com/android/launcher3/ui/AddWidgetTest.java
Patch:
@@ -44,7 +44,7 @@ private void performTest() throws Throwable {
         clearHomescreen();
         Launcher launcher = startLauncher();
 
-        // Open all apps and wait for load complete.
+        // Open widget tray and wait for load complete.
         final UiObject2 widgetContainer = openWidgetsTray();
         assertTrue(Wait.atMost(Condition.minChildCount(widgetContainer, 2), DEFAULT_UI_TIMEOUT));
 

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -849,7 +849,7 @@ public static boolean isWallapaperAllowed(Context context) {
         if (isNycOrAbove()) {
             try {
                 WallpaperManager wm = context.getSystemService(WallpaperManager.class);
-                return (Boolean) wm.getClass().getDeclaredMethod("isWallpaperSettingAllowed")
+                return (Boolean) wm.getClass().getDeclaredMethod("isSetWallpaperAllowed")
                         .invoke(wm);
             } catch (Exception e) { }
         }

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -827,7 +827,7 @@ public static boolean isWallapaperAllowed(Context context) {
         if (isNycOrAbove()) {
             try {
                 WallpaperManager wm = context.getSystemService(WallpaperManager.class);
-                return (Boolean) wm.getClass().getDeclaredMethod("isWallpaperSettingAllowed")
+                return (Boolean) wm.getClass().getDeclaredMethod("isSetWallpaperAllowed")
                         .invoke(wm);
             } catch (Exception e) { }
         }

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -827,7 +827,7 @@ public static boolean isWallapaperAllowed(Context context) {
         if (isNycOrAbove()) {
             try {
                 WallpaperManager wm = context.getSystemService(WallpaperManager.class);
-                return (Boolean) wm.getClass().getDeclaredMethod("isWallpaperSettingAllowed")
+                return (Boolean) wm.getClass().getDeclaredMethod("isSetWallpaperAllowed")
                         .invoke(wm);
             } catch (Exception e) { }
         }

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -537,7 +537,6 @@ public void layout(Launcher launcher) {
                 lp = (FrameLayout.LayoutParams) pageIndicator.getLayoutParams();
                 lp.gravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
                 lp.width = LayoutParams.WRAP_CONTENT;
-                lp.height = LayoutParams.WRAP_CONTENT;
                 lp.bottomMargin = hotseatBarHeightPx;
                 pageIndicator.setLayoutParams(lp);
             }

File: src/com/android/launcher3/PinchAnimationManager.java
Patch:
@@ -194,7 +194,7 @@ private void animateHotseatAndPageIndicator(boolean show) {
         animateShowHideView(INDEX_HOTSEAT, mLauncher.getHotseat(), show);
         if (mWorkspace.getPageIndicator() != null) {
             // There aren't page indicators in landscape mode on phones, hence the null check.
-            animateShowHideView(INDEX_PAGE_INDICATOR, mWorkspace.getPageIndicator(), show);
+            animateShowHideView(INDEX_PAGE_INDICATOR, mWorkspace.getPageIndicator().getView(), show);
         }
     }
 

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -288,7 +288,7 @@ private void animateWorkspace(final TransitionStates states, final boolean anima
         float finalBackgroundAlpha = (states.stateIsSpringLoaded || states.stateIsOverview) ?
                 1.0f : 0f;
         float finalHotseatAlpha = (states.stateIsNormal || states.stateIsSpringLoaded) ? 1f : 0f;
-        float finalPageIndicatorAlpha = states.stateIsNormal ? 1f : 0f;
+        float finalPageIndicatorAlpha = finalHotseatAlpha;
         float finalOverviewPanelAlpha = states.stateIsOverview ? 1f : 0f;
 
         float finalWorkspaceTranslationY = 0;
@@ -357,7 +357,7 @@ private void animateWorkspace(final TransitionStates states, final boolean anima
 
         final ViewGroup overviewPanel = mLauncher.getOverviewPanel();
         final View hotseat = mLauncher.getHotseat();
-        final View pageIndicator = mWorkspace.getPageIndicator();
+        final View pageIndicator = mWorkspace.getPageIndicator().getView();
         if (animated) {
             LauncherViewPropertyAnimator scale = new LauncherViewPropertyAnimator(mWorkspace);
             scale.scaleX(mNewScale)

File: src/com/android/launcher3/LauncherTransitionable.java
Patch:
@@ -20,7 +20,7 @@
  * An interface to get callbacks during a launcher transition.
  */
 public interface LauncherTransitionable {
-    void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean toWorkspace);
+    void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean multiplePagesVisible);
     void onLauncherTransitionStart(Launcher l, boolean animated, boolean toWorkspace);
     void onLauncherTransitionStep(Launcher l, float t);
     void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWorkspace);

File: src/com/android/launcher3/PinchToOverviewListener.java
Patch:
@@ -108,6 +108,7 @@ public boolean onScaleBegin(ScaleGestureDetector detector) {
         mInterpolator = mWorkspace.isInOverviewMode() ? new LogDecelerateInterpolator(100, 0)
                 : new LogAccelerateInterpolator(100, 0);
         mPinchStarted = true;
+        mWorkspace.onLauncherTransitionPrepare(mLauncher, false, true);
         return true;
     }
 
@@ -137,6 +138,7 @@ public void onScaleEnd(ScaleGestureDetector detector) {
                     mThresholdManager);
         } else {
             mThresholdManager.reset();
+            mWorkspace.onLauncherTransitionEnd(mLauncher, false, true);
         }
         mPinchStarted = false;
         mPinchCanceled = false;
@@ -206,6 +208,4 @@ public boolean onScale(ScaleGestureDetector detector) {
         mPreviousTimeMillis = System.currentTimeMillis();
         return false;
     }
-
-
 }
\ No newline at end of file

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -514,7 +514,8 @@ public void onDropCompleted(View target, DropTarget.DragObject d, boolean isFlin
     }
 
     @Override
-    public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean toWorkspace) {
+    public void onLauncherTransitionPrepare(Launcher l, boolean animated,
+            boolean multiplePagesVisible) {
         // Do nothing
     }
 

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -251,7 +251,7 @@ protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyF
     @Override
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
-        dispatchChildFocus(focused != null);
+        dispatchChildFocus(mChildrenFocused && focused != null);
         if (focused != null) {
             focused.setFocusableInTouchMode(false);
         }

File: src/com/android/launcher3/LogAccelerateInterpolator.java
Patch:
@@ -20,6 +20,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LogDecelerateInterpolator.java
Patch:
@@ -21,6 +21,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return computeLog(t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : computeLog(t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -251,7 +251,7 @@ protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyF
     @Override
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
-        dispatchChildFocus(focused != null);
+        dispatchChildFocus(mChildrenFocused && focused != null);
         if (focused != null) {
             focused.setFocusableInTouchMode(false);
         }

File: src/com/android/launcher3/LogAccelerateInterpolator.java
Patch:
@@ -20,6 +20,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LogDecelerateInterpolator.java
Patch:
@@ -21,6 +21,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return computeLog(t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : computeLog(t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -251,7 +251,7 @@ protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyF
     @Override
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
-        dispatchChildFocus(focused != null);
+        dispatchChildFocus(mChildrenFocused && focused != null);
         if (focused != null) {
             focused.setFocusableInTouchMode(false);
         }

File: src/com/android/launcher3/LogAccelerateInterpolator.java
Patch:
@@ -20,6 +20,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LogDecelerateInterpolator.java
Patch:
@@ -21,6 +21,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return computeLog(t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : computeLog(t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -251,7 +251,7 @@ protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyF
     @Override
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
-        dispatchChildFocus(focused != null);
+        dispatchChildFocus(mChildrenFocused && focused != null);
         if (focused != null) {
             focused.setFocusableInTouchMode(false);
         }

File: src/com/android/launcher3/LogAccelerateInterpolator.java
Patch:
@@ -20,6 +20,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LogDecelerateInterpolator.java
Patch:
@@ -21,6 +21,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return computeLog(t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : computeLog(t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -251,7 +251,7 @@ protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyF
     @Override
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
-        dispatchChildFocus(focused != null);
+        dispatchChildFocus(mChildrenFocused && focused != null);
         if (focused != null) {
             focused.setFocusableInTouchMode(false);
         }

File: src/com/android/launcher3/LogAccelerateInterpolator.java
Patch:
@@ -20,6 +20,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LogDecelerateInterpolator.java
Patch:
@@ -21,6 +21,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return computeLog(t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : computeLog(t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -156,7 +156,7 @@ public abstract class PagedView extends ViewGroup implements ViewGroup.OnHierarc
 
     protected boolean mIsPageMoving = false;
 
-    private boolean mWasInOverscroll = false;
+    protected boolean mWasInOverscroll = false;
 
     // Page Indicator
     @Thunk int mPageIndicatorViewId;

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -436,7 +436,6 @@ public long parseAndAdd(XmlResourceParser parser) {
             }
 
             ItemInfo.writeBitmap(mValues, Utilities.createIconBitmap(icon, mContext));
-            mValues.put(Favorites.ICON_TYPE, Favorites.ICON_TYPE_RESOURCE);
             mValues.put(Favorites.ICON_PACKAGE, mIconRes.getResourcePackageName(iconId));
             mValues.put(Favorites.ICON_RESOURCE, mIconRes.getResourceName(iconId));
 

File: src/com/android/launcher3/CommonAppTypeParser.java
Patch:
@@ -68,7 +68,6 @@ public long insertAndCheck(SQLiteDatabase db, ContentValues values) {
         parsedValues = values;
 
         // Remove unwanted values
-        values.put(Favorites.ICON_TYPE, (Integer) null);
         values.put(Favorites.ICON_PACKAGE, (String) null);
         values.put(Favorites.ICON_RESOURCE, (String) null);
         values.put(Favorites.ICON, (byte[]) null);

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3473,7 +3473,6 @@ ShortcutInfo infoFromShortcutIntent(Context context, Intent data) {
         info.title = Utilities.trim(name);
         info.contentDescription = mUserManager.getBadgedLabelForUser(info.title, info.user);
         info.intent = intent;
-        info.customIcon = customIcon;
         info.iconResource = iconResource;
 
         return info;

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -436,7 +436,6 @@ public long parseAndAdd(XmlResourceParser parser) {
             }
 
             ItemInfo.writeBitmap(mValues, Utilities.createIconBitmap(icon, mContext));
-            mValues.put(Favorites.ICON_TYPE, Favorites.ICON_TYPE_RESOURCE);
             mValues.put(Favorites.ICON_PACKAGE, mIconRes.getResourcePackageName(iconId));
             mValues.put(Favorites.ICON_RESOURCE, mIconRes.getResourceName(iconId));
 

File: src/com/android/launcher3/CommonAppTypeParser.java
Patch:
@@ -68,7 +68,6 @@ public long insertAndCheck(SQLiteDatabase db, ContentValues values) {
         parsedValues = values;
 
         // Remove unwanted values
-        values.put(Favorites.ICON_TYPE, (Integer) null);
         values.put(Favorites.ICON_PACKAGE, (String) null);
         values.put(Favorites.ICON_RESOURCE, (String) null);
         values.put(Favorites.ICON, (byte[]) null);

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3473,7 +3473,6 @@ ShortcutInfo infoFromShortcutIntent(Context context, Intent data) {
         info.title = Utilities.trim(name);
         info.contentDescription = mUserManager.getBadgedLabelForUser(info.title, info.user);
         info.intent = intent;
-        info.customIcon = customIcon;
         info.iconResource = iconResource;
 
         return info;

File: tests/src/com/android/launcher3/LauncherBackupAgentTest.java
Patch:
@@ -60,7 +60,7 @@ private class MyDatabaseHelper extends DatabaseHelper {
         private final long mProfileId;
 
         public MyDatabaseHelper(long profileId) {
-            super(getContext(), null, null, null);
+            super(getContext(), null, null);
             mProfileId = profileId;
         }
 

File: tests/src/com/android/launcher3/LauncherBackupAgentTest.java
Patch:
@@ -60,7 +60,7 @@ private class MyDatabaseHelper extends DatabaseHelper {
         private final long mProfileId;
 
         public MyDatabaseHelper(long profileId) {
-            super(getContext(), null, null, null);
+            super(getContext(), null, null);
             mProfileId = profileId;
         }
 

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -251,7 +251,7 @@ protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyF
     @Override
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
-        dispatchChildFocus(focused != null);
+        dispatchChildFocus(mChildrenFocused && focused != null);
         if (focused != null) {
             focused.setFocusableInTouchMode(false);
         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -496,9 +496,10 @@ public void onExtractedColorsChanged() {
     }
 
     private void loadExtractedColorsAndColorItems() {
-        if (mExtractedColors != null) {
+        // TODO: do this in pre-N as well, once the extraction part is complete.
+        if (mExtractedColors != null && Utilities.isNycOrAbove()) {
             mExtractedColors.load(this);
-            // TODO: pass mExtractedColors to interested items such as hotseat.
+            mHotseat.updateColor(mExtractedColors, !mPaused);
         }
     }
 

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -46,7 +46,6 @@
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.PaintDrawable;
 import android.os.Build;
-import android.os.Build.VERSION_CODES;
 import android.os.Bundle;
 import android.os.PowerManager;
 import android.text.Spannable;

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -256,7 +256,7 @@ protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyF
     @Override
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
-        dispatchChildFocus(focused != null);
+        dispatchChildFocus(mChildrenFocused && focused != null);
         if (focused != null) {
             focused.setFocusableInTouchMode(false);
         }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -251,7 +251,7 @@ protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyF
     @Override
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
-        dispatchChildFocus(focused != null);
+        dispatchChildFocus(mChildrenFocused && focused != null);
         if (focused != null) {
             focused.setFocusableInTouchMode(false);
         }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -256,7 +256,7 @@ protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyF
     @Override
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
-        dispatchChildFocus(focused != null);
+        dispatchChildFocus(mChildrenFocused && focused != null);
         if (focused != null) {
             focused.setFocusableInTouchMode(false);
         }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -256,7 +256,7 @@ protected void onFocusChanged(boolean gainFocus, int direction, Rect previouslyF
     @Override
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
-        dispatchChildFocus(focused != null);
+        dispatchChildFocus(mChildrenFocused && focused != null);
         if (focused != null) {
             focused.setFocusableInTouchMode(false);
         }

File: src/com/android/launcher3/LogAccelerateInterpolator.java
Patch:
@@ -20,6 +20,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LogDecelerateInterpolator.java
Patch:
@@ -21,6 +21,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return computeLog(t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : computeLog(t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LogAccelerateInterpolator.java
Patch:
@@ -20,6 +20,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : 1 - computeLog(1 - t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/LogDecelerateInterpolator.java
Patch:
@@ -21,6 +21,8 @@ static float computeLog(float t, int base, int drift) {
 
     @Override
     public float getInterpolation(float t) {
-        return computeLog(t, mBase, mDrift) * mLogScale;
+        // Due to rounding issues, the interpolation doesn't quite reach 1 even though it should.
+        // To account for this, we short-circuit to return 1 if the input is 1.
+        return Float.compare(t, 1f) == 0 ? 1f : computeLog(t, mBase, mDrift) * mLogScale;
     }
 }

File: src/com/android/launcher3/SettingsActivity.java
Patch:
@@ -77,8 +77,8 @@ private void setBooleanPrefUsingContentProvider(final TwoStatePreference pref) {
                 @Override
                 protected Boolean doInBackground(Void... params) {
                     Bundle extras = new Bundle();
-                    extras.putBoolean(LauncherSettings.Settings.EXTRA_DEFAULT_VALUE, false);
-                    Bundle value = getActivity().getContentResolver().call(
+                    extras.putBoolean(LauncherSettings.Settings.EXTRA_DEFAULT_VALUE, true);
+                    Bundle value = pref.getContext().getContentResolver().call(
                             LauncherSettings.Settings.CONTENT_URI,
                             LauncherSettings.Settings.METHOD_GET_BOOLEAN,
                             pref.getKey(), extras);

File: src/com/android/launcher3/SettingsActivity.java
Patch:
@@ -77,8 +77,8 @@ private void setBooleanPrefUsingContentProvider(final TwoStatePreference pref) {
                 @Override
                 protected Boolean doInBackground(Void... params) {
                     Bundle extras = new Bundle();
-                    extras.putBoolean(LauncherSettings.Settings.EXTRA_DEFAULT_VALUE, false);
-                    Bundle value = getActivity().getContentResolver().call(
+                    extras.putBoolean(LauncherSettings.Settings.EXTRA_DEFAULT_VALUE, true);
+                    Bundle value = pref.getContext().getContentResolver().call(
                             LauncherSettings.Settings.CONTENT_URI,
                             LauncherSettings.Settings.METHOD_GET_BOOLEAN,
                             pref.getKey(), extras);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1384,8 +1384,9 @@ private void setupViews() {
         mWorkspace.setPageSwitchListener(this);
         mPageIndicators = mDragLayer.findViewById(R.id.page_indicator);
 
-        mLauncherView.setSystemUiVisibility(
-                View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
+        mLauncherView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
+                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
+                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
         mWorkspaceBackgroundDrawable = getResources().getDrawable(R.drawable.workspace_bg);
 
         // Setup the drag layer

File: WallpaperPicker/src/com/android/launcher3/ThirdPartyWallpaperPickerListAdapter.java
Patch:
@@ -54,7 +54,9 @@ public void onClick(WallpaperPickerActivity a) {
             final ComponentName itemComponentName = new ComponentName(
                     mResolveInfo.activityInfo.packageName, mResolveInfo.activityInfo.name);
             Intent launchIntent = new Intent(Intent.ACTION_SET_WALLPAPER);
-            launchIntent.setComponent(itemComponentName);
+            launchIntent.setComponent(itemComponentName)
+            .putExtra(WallpaperPickerActivity.EXTRA_WALLPAPER_OFFSET,
+                    a.getWallpaperParallaxOffset());
             a.startActivityForResultSafely(
                     launchIntent, WallpaperPickerActivity.PICK_WALLPAPER_THIRD_PARTY_ACTIVITY);
         }

File: WallpaperPicker/src/com/android/launcher3/ThirdPartyWallpaperPickerListAdapter.java
Patch:
@@ -54,7 +54,9 @@ public void onClick(WallpaperPickerActivity a) {
             final ComponentName itemComponentName = new ComponentName(
                     mResolveInfo.activityInfo.packageName, mResolveInfo.activityInfo.name);
             Intent launchIntent = new Intent(Intent.ACTION_SET_WALLPAPER);
-            launchIntent.setComponent(itemComponentName);
+            launchIntent.setComponent(itemComponentName)
+            .putExtra(WallpaperPickerActivity.EXTRA_WALLPAPER_OFFSET,
+                    a.getWallpaperParallaxOffset());
             a.startActivityForResultSafely(
                     launchIntent, WallpaperPickerActivity.PICK_WALLPAPER_THIRD_PARTY_ACTIVITY);
         }

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -106,6 +106,9 @@ private LauncherAppState() {
         sContext.registerReceiver(mModel, filter);
         UserManagerCompat.getInstance(sContext).enableAndResetCache();
         new ConfigMonitor(sContext).register();
+
+        sContext.registerReceiver(
+                new WallpaperChangedReceiver(), new IntentFilter(Intent.ACTION_WALLPAPER_CHANGED));
     }
 
     /**

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -104,6 +104,9 @@ private LauncherAppState() {
         sContext.registerReceiver(mModel, filter);
         UserManagerCompat.getInstance(sContext).enableAndResetCache();
         new ConfigMonitor(sContext).register();
+
+        sContext.registerReceiver(
+                new WallpaperChangedReceiver(), new IntentFilter(Intent.ACTION_WALLPAPER_CHANGED));
     }
 
     /**

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -849,7 +849,7 @@ protected void onRestoreInstanceState(Bundle savedInstanceState) {
                 (int) rotatedBounds[0], (int) rotatedBounds[1], width, height, leftAligned);
         cropTask.setCropBounds(cropRect);
 
-        if (cropTask.cropBitmap()) {
+        if (cropTask.cropBitmap(NycWallpaperUtils.FLAG_SET_SYSTEM)) {
             return cropTask.getCroppedBitmap();
         } else {
             return null;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3061,7 +3061,7 @@ public void run() {
                     flagOp = mOp == OP_SUSPEND ?
                             FlagOp.addFlag(ShortcutInfo.FLAG_DISABLED_SUSPENDED) :
                                     FlagOp.removeFlag(ShortcutInfo.FLAG_DISABLED_SUSPENDED);
-                    if (DEBUG_LOADERS) Log.d(TAG, "mAllAppsList.(un)suspend " + packages);
+                    if (DEBUG_LOADERS) Log.d(TAG, "mAllAppsList.(un)suspend " + N);
                     mBgAllAppsList.updatePackageFlags(pkgFilter, mUser, flagOp);
                     break;
                 case OP_USER_AVAILABILITY_CHANGE:

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -802,7 +802,7 @@ public void scheduleNext() {
     }
 
     private static final class IconDB extends SQLiteCacheHelper {
-        private final static int DB_VERSION = 8;
+        private final static int DB_VERSION = 9;
 
         private final static int RELEASE_VERSION = DB_VERSION +
                 (FeatureFlags.LAUNCHER3_DISABLE_ICON_NORMALIZATION ? 0 : 1);

File: src/com/android/launcher3/util/IconNormalizer.java
Patch:
@@ -28,7 +28,7 @@
 public class IconNormalizer {
 
     // Ratio of icon visible area to full icon size for a square shaped icon
-    private static final float MAX_SQUARE_AREA_FACTOR = 359.0f / 576;
+    private static final float MAX_SQUARE_AREA_FACTOR = 375.0f / 576;
     // Ratio of icon visible area to full icon size for a circular shaped icon
     private static final float MAX_CIRCLE_AREA_FACTOR = 380.0f / 576;
 

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -100,7 +100,8 @@ private LauncherAppState() {
         // For handling managed profiles
         filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_ADDED);
         filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_REMOVED);
-        filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_AVAILABILITY_CHANGED);
+        filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_AVAILABLE);
+        filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_UNAVAILABLE);
 
         sContext.registerReceiver(mModel, filter);
         UserManagerCompat.getInstance(sContext).enableAndResetCache();

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1277,7 +1277,8 @@ public void onReceive(Context context, Intent intent) {
                 || LauncherAppsCompat.ACTION_MANAGED_PROFILE_REMOVED.equals(action)) {
             UserManagerCompat.getInstance(context).enableAndResetCache();
             forceReload();
-        } else if (LauncherAppsCompat.ACTION_MANAGED_PROFILE_AVAILABILITY_CHANGED.equals(action)) {
+        } else if (LauncherAppsCompat.ACTION_MANAGED_PROFILE_AVAILABLE.equals(action) ||
+                LauncherAppsCompat.ACTION_MANAGED_PROFILE_UNAVAILABLE.equals(action)) {
             UserHandleCompat user = UserHandleCompat.fromIntent(intent);
             if (user != null) {
                 enqueuePackageUpdated(new PackageUpdatedTask(

File: src/com/android/launcher3/AllAppsList.java
Patch:
@@ -23,6 +23,7 @@
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.FlagOp;
+import com.android.launcher3.util.StringFilter;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -122,12 +123,12 @@ public void removePackage(String packageName, UserHandleCompat user) {
     /**
      * Updates the apps for the given packageName and user based on {@param op}.
      */
-    public void updatePackageFlags(String packageName, UserHandleCompat user, FlagOp op) {
+    public void updatePackageFlags(StringFilter pkgFilter, UserHandleCompat user, FlagOp op) {
         final List<AppInfo> data = this.data;
         for (int i = data.size() - 1; i >= 0; i--) {
             AppInfo info = data.get(i);
             final ComponentName component = info.intent.getComponent();
-            if (info.user.equals(user) && packageName.equals(component.getPackageName())) {
+            if (info.user.equals(user) && pkgFilter.matches(component.getPackageName())) {
                 info.isDisabled = op.apply(info.isDisabled);
                 modified.add(info);
             }

File: src/com/android/launcher3/DragController.java
Patch:
@@ -341,7 +341,8 @@ public void cancelDrag() {
         }
         endDrag();
     }
-    public void onAppsRemoved(final ArrayList<String> packageNames, HashSet<ComponentName> cns) {
+
+    public void onAppsRemoved(final HashSet<String> packageNames, HashSet<ComponentName> cns) {
         // Cancel the current drag if we are removing an app that we are dragging
         if (mDragObject != null) {
             Object rawDragInfo = mDragObject.dragInfo;

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -87,7 +87,7 @@ private static void addToInstallQueue(
         }
     }
 
-    public static void removeFromInstallQueue(Context context, ArrayList<String> packageNames,
+    public static void removeFromInstallQueue(Context context, HashSet<String> packageNames,
             UserHandleCompat user) {
         if (packageNames.isEmpty()) {
             return;

File: src/com/android/launcher3/LauncherFiles.java
Patch:
@@ -34,7 +34,7 @@ public class LauncherFiles {
             WALLPAPER_CROP_PREFERENCES_KEY + XML,
             WALLPAPER_IMAGES_DB,
             WIDGET_PREVIEWS_DB,
-            MANAGED_USER_PREFERENCES_KEY,
+            MANAGED_USER_PREFERENCES_KEY + XML,
             APP_ICONS_DB));
 
     // TODO: Delete these files on upgrade

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -702,7 +702,7 @@ public void run() {
     private void startWorkspaceSearchBarAnimation(
             final Workspace.State toWorkspaceState, int duration, AnimatorSet animation) {
         final SearchDropTargetBar.State toSearchBarState =
-                toWorkspaceState.getSearchDropTargetBarState();
+                toWorkspaceState.searchDropTargetBarState;
         mLauncher.getSearchDropTargetBar().animateToState(toSearchBarState, duration, animation);
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -488,11 +488,11 @@ protected void onCreate(Bundle savedInstanceState) {
         IntentFilter filter = new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
         registerReceiver(mCloseSystemDialogsReceiver, filter);
 
-        mRotationEnabled = Utilities.isRotationAllowedForDevice(getApplicationContext());
+        mRotationEnabled = getResources().getBoolean(R.bool.allow_rotation);
         // In case we are on a device with locked rotation, we should look at preferences to check
         // if the user has specifically allowed rotation.
         if (!mRotationEnabled) {
-            mRotationEnabled = Utilities.isAllowRotationPrefEnabled(getApplicationContext(), false);
+            mRotationEnabled = Utilities.isAllowRotationPrefEnabled(getApplicationContext());
         }
 
         // On large interfaces, or on devices that a user has specifically enabled screen rotation,
@@ -1205,7 +1205,7 @@ protected boolean hasSettings() {
         } else {
             // On devices with a locked orientation, we will at least have the allow rotation
             // setting.
-            return !Utilities.isRotationAllowedForDevice(this);
+            return !getResources().getBoolean(R.bool.allow_rotation);
         }
     }
 

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -83,7 +83,7 @@ public class InvariantDeviceProfile {
     DeviceProfile landscapeProfile;
     DeviceProfile portraitProfile;
 
-    InvariantDeviceProfile() {
+    public InvariantDeviceProfile() {
     }
 
     public InvariantDeviceProfile(InvariantDeviceProfile p) {

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -113,7 +113,7 @@ public static final class WorkspaceScreens implements ChangeLogColumns {
         /**
          * The content:// style URL for this table
          */
-        static final Uri CONTENT_URI = Uri.parse("content://" +
+        public static final Uri CONTENT_URI = Uri.parse("content://" +
                 ProviderConfig.AUTHORITY + "/" + TABLE_NAME);
 
         /**

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -73,12 +73,12 @@ public class InvariantDeviceProfile {
     /**
      * Number of icons inside the hotseat area.
      */
-    int numHotseatIcons;
+    public int numHotseatIcons;
     float hotseatIconSize;
     int defaultLayoutId;
 
     // Derived invariant properties
-    int hotseatAllAppsRank;
+    public int hotseatAllAppsRank;
 
     DeviceProfile landscapeProfile;
     DeviceProfile portraitProfile;

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -52,7 +52,7 @@
 import com.android.launcher3.backup.nano.BackupProtos.Widget;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
-import com.android.launcher3.model.MigrateFromRestoreTask;
+import com.android.launcher3.model.GridSizeMigrationTask;
 import com.android.launcher3.util.Thunk;
 import com.google.protobuf.nano.InvalidProtocolBufferNanoException;
 import com.google.protobuf.nano.MessageNano;
@@ -315,7 +315,7 @@ private boolean isBackupCompatible(Journal oldState) {
             return true;
         }
 
-        if (MigrateFromRestoreTask.ENABLED &&
+        if (GridSizeMigrationTask.ENABLED &&
                 (oldProfile.desktopCols - currentProfile.desktopCols <= 1) &&
                 (oldProfile.desktopRows - currentProfile.desktopRows <= 1)) {
             // Allow desktop migration when row and/or column count contracts by 1.

File: src/com/android/launcher3/compat/LauncherActivityInfoCompat.java
Patch:
@@ -24,6 +24,8 @@
 
 public abstract class LauncherActivityInfoCompat {
 
+    public static final int FLAG_SUSPENDED = 1<<30;
+
     LauncherActivityInfoCompat() {
     }
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1565,6 +1565,8 @@ private void setEnableFreeScroll(boolean freeScroll) {
             } else if (getCurrentPage() > mTempVisiblePagesRange[1]) {
                 setCurrentPage(mTempVisiblePagesRange[1]);
             }
+        } else {
+            setCurrentPage(getPageNearestToCenterOfScreen());
         }
 
         setEnableOverscroll(!freeScroll);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2379,7 +2379,7 @@ public boolean removeItem(View v, ItemInfo itemInfo, boolean deleteFromDb) {
             // Remove the shortcut from the folder before removing it from launcher
             View folderIcon = mWorkspace.getHomescreenIconByItemId(itemInfo.container);
             if (folderIcon instanceof FolderIcon) {
-                ((FolderInfo) folderIcon.getTag()).remove((ShortcutInfo) itemInfo);
+                ((FolderInfo) folderIcon.getTag()).remove((ShortcutInfo) itemInfo, true);
             } else {
                 mWorkspace.removeWorkspaceItem(v);
             }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1986,7 +1986,7 @@ private void loadWorkspace() {
                                         // Item is in a user folder
                                         FolderInfo folderInfo =
                                                 findOrMakeFolder(sBgFolders, container);
-                                        folderInfo.add(info);
+                                        folderInfo.add(info, false);
                                         break;
                                     }
                                     sBgItemsIdMap.put(info.id, info);

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -174,7 +174,7 @@ public void run() {
             Folder folder = mLauncher.getWorkspace().getOpenFolder();
             mLauncher.closeFolder(folder, true);
             ShortcutInfo info = (ShortcutInfo) item;
-            folder.getInfo().remove(info);
+            folder.getInfo().remove(info, false);
 
             final int[] coordinates = new int[2];
             final long screenId = findSpaceOnWorkspace(item, coordinates);

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -454,7 +454,7 @@ public View iterateOverItems(ItemOperator op) {
             for (int j = 0; j < page.getCountY(); j++) {
                 for (int i = 0; i < page.getCountX(); i++) {
                     View v = page.getChildAt(i, j);
-                    if ((v != null) && op.evaluate((ItemInfo) v.getTag(), v, this)) {
+                    if ((v != null) && op.evaluate((ItemInfo) v.getTag(), v)) {
                         return v;
                     }
                 }

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -188,7 +188,7 @@ private void finalizeWorkFolder() {
                 @Override
                 public void run() {
                     for (ShortcutInfo info : shortcuts) {
-                        workFolder.add(info);
+                        workFolder.add(info, false);
                     }
                 }
             });
@@ -200,7 +200,7 @@ public void run() {
 
             // Add all shortcuts before adding it to the UI, as an empty folder might get deleted.
             for (ShortcutInfo info : mWorkFolderApps) {
-                workFolder.add(info);
+                workFolder.add(info, false);
             }
 
             // Add the item to home screen and DB. This also generates an item id synchronously.

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2379,7 +2379,7 @@ public boolean removeItem(View v, ItemInfo itemInfo, boolean deleteFromDb) {
             // Remove the shortcut from the folder before removing it from launcher
             View folderIcon = mWorkspace.getHomescreenIconByItemId(itemInfo.container);
             if (folderIcon instanceof FolderIcon) {
-                ((FolderInfo) folderIcon.getTag()).remove((ShortcutInfo) itemInfo);
+                ((FolderInfo) folderIcon.getTag()).remove((ShortcutInfo) itemInfo, true);
             } else {
                 mWorkspace.removeWorkspaceItem(v);
             }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1986,7 +1986,7 @@ private void loadWorkspace() {
                                         // Item is in a user folder
                                         FolderInfo folderInfo =
                                                 findOrMakeFolder(sBgFolders, container);
-                                        folderInfo.add(info);
+                                        folderInfo.add(info, false);
                                         break;
                                     }
                                     sBgItemsIdMap.put(info.id, info);

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -174,7 +174,7 @@ public void run() {
             Folder folder = mLauncher.getWorkspace().getOpenFolder();
             mLauncher.closeFolder(folder, true);
             ShortcutInfo info = (ShortcutInfo) item;
-            folder.getInfo().remove(info);
+            folder.getInfo().remove(info, false);
 
             final int[] coordinates = new int[2];
             final long screenId = findSpaceOnWorkspace(item, coordinates);

File: src/com/android/launcher3/folder/FolderPagedView.java
Patch:
@@ -454,7 +454,7 @@ public View iterateOverItems(ItemOperator op) {
             for (int j = 0; j < page.getCountY(); j++) {
                 for (int i = 0; i < page.getCountX(); i++) {
                     View v = page.getChildAt(i, j);
-                    if ((v != null) && op.evaluate((ItemInfo) v.getTag(), v, this)) {
+                    if ((v != null) && op.evaluate((ItemInfo) v.getTag(), v)) {
                         return v;
                     }
                 }

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -188,7 +188,7 @@ private void finalizeWorkFolder() {
                 @Override
                 public void run() {
                     for (ShortcutInfo info : shortcuts) {
-                        workFolder.add(info);
+                        workFolder.add(info, false);
                     }
                 }
             });
@@ -200,7 +200,7 @@ public void run() {
 
             // Add all shortcuts before adding it to the UI, as an empty folder might get deleted.
             for (ShortcutInfo info : mWorkFolderApps) {
-                workFolder.add(info);
+                workFolder.add(info, false);
             }
 
             // Add the item to home screen and DB. This also generates an item id synchronously.

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -48,7 +48,7 @@ public BaseContainerView(Context context, AttributeSet attrs, int defStyleAttr)
         super(context, attrs, defStyleAttr);
 
         int width = ((Launcher) context).getDeviceProfile().availableWidthPx;
-        mHorizontalPadding = DeviceProfile.getMaxContainerWidth(context, width);
+        mHorizontalPadding = DeviceProfile.getContainerPadding(context, width);
 
         TypedArray a = context.obtainStyledAttributes(attrs,
                 R.styleable.BaseContainerView, defStyleAttr, 0);

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -596,7 +596,7 @@ private int getCurrentHeight() {
     }
 
 
-    public static final int getMaxContainerWidth(Context context, int availableWidth) {
+    public static final int getContainerPadding(Context context, int availableWidth) {
         Resources res = context.getResources();
 
         int maxSize = res.getDimensionPixelSize(R.dimen.container_max_width);

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -48,7 +48,7 @@ public BaseContainerView(Context context, AttributeSet attrs, int defStyleAttr)
         super(context, attrs, defStyleAttr);
 
         int width = ((Launcher) context).getDeviceProfile().availableWidthPx;
-        mHorizontalPadding = DeviceProfile.getMaxContainerWidth(context, width);
+        mHorizontalPadding = DeviceProfile.getContainerPadding(context, width);
 
         TypedArray a = context.obtainStyledAttributes(attrs,
                 R.styleable.BaseContainerView, defStyleAttr, 0);

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -596,7 +596,7 @@ private int getCurrentHeight() {
     }
 
 
-    public static final int getMaxContainerWidth(Context context, int availableWidth) {
+    public static final int getContainerPadding(Context context, int availableWidth) {
         Resources res = context.getResources();
 
         int maxSize = res.getDimensionPixelSize(R.dimen.container_max_width);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -113,7 +113,8 @@ public class CellLayout extends ViewGroup implements BubbleTextShadowHandler {
 
     private float mBackgroundAlpha;
 
-    private static final int BACKGROUND_ACTIVATE_DURATION = 120;
+    private static final int BACKGROUND_ACTIVATE_DURATION =
+            FeatureFlags.LAUNCHER3_LEGACY_WORKSPACE_DND ? 120 : 0;
     private final TransitionDrawable mBackground;
 
     // These values allow a fixed measurement to be set on the CellLayout.

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -108,7 +108,8 @@ private LauncherAppState() {
         // For handling managed profiles
         filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_ADDED);
         filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_REMOVED);
-        filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_AVAILABILITY_CHANGED);
+        filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_AVAILABLE);
+        filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_UNAVAILABLE);
         // For extracting colors from the wallpaper
         if (Utilities.isNycOrAbove()) {
             // TODO: add a broadcast entry to the manifest for pre-N.

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1217,7 +1217,8 @@ public void onReceive(Context context, Intent intent) {
                 || LauncherAppsCompat.ACTION_MANAGED_PROFILE_REMOVED.equals(action)) {
             UserManagerCompat.getInstance(context).enableAndResetCache();
             forceReload();
-        } else if (LauncherAppsCompat.ACTION_MANAGED_PROFILE_AVAILABILITY_CHANGED.equals(action)) {
+        } else if (LauncherAppsCompat.ACTION_MANAGED_PROFILE_AVAILABLE.equals(action) ||
+                LauncherAppsCompat.ACTION_MANAGED_PROFILE_UNAVAILABLE.equals(action)) {
             UserHandleCompat user = UserHandleCompat.fromIntent(intent);
             if (user != null) {
                 enqueuePackageUpdated(new PackageUpdatedTask(

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -522,7 +522,6 @@ private void loadExtractedColorsAndColorItems() {
         if (mExtractedColors != null) {
             mExtractedColors.load(this);
             // TODO: pass mExtractedColors to interested items such as hotseat.
-            mHotseat.setBackgroundColor(mExtractedColors.getColor(ExtractedColors.VIBRANT_INDEX));
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -522,7 +522,6 @@ private void loadExtractedColorsAndColorItems() {
         if (mExtractedColors != null) {
             mExtractedColors.load(this);
             // TODO: pass mExtractedColors to interested items such as hotseat.
-            mHotseat.setBackgroundColor(mExtractedColors.getColor(ExtractedColors.VIBRANT_INDEX));
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -997,7 +997,7 @@ protected void onResume() {
         mPaused = false;
         if (mRestoring || mOnResumeNeedsLoad) {
             setWorkspaceLoading(true);
-            mModel.startLoader(PagedView.INVALID_RESTORE_PAGE);
+            mModel.startLoader(getCurrentWorkspaceScreen());
             mRestoring = false;
             mOnResumeNeedsLoad = false;
         }
@@ -3664,6 +3664,7 @@ public void addOnResumeCallback(Runnable run) {
      * @return true if we are currently paused.  The caller might be able to
      * skip some work in that case since we will come back again.
      */
+    @Override
     public boolean setLoadOnResume() {
         if (mPaused) {
             if (LOGD) Log.d(TAG, "setLoadOnResume");
@@ -3677,6 +3678,7 @@ public boolean setLoadOnResume() {
     /**
      * Implementation of the method from LauncherModel.Callbacks.
      */
+    @Override
     public int getCurrentWorkspaceScreen() {
         if (mWorkspace != null) {
             return mWorkspace.getCurrentPage();
@@ -4046,7 +4048,6 @@ public void run() {
      * Restores a pending widget.
      *
      * @param appWidgetId The app widget id
-     * @param cellInfo The position on screen where to create the widget.
      */
     private void completeRestoreAppWidget(final int appWidgetId) {
         LauncherAppWidgetHostView view = mWorkspace.getWidgetForAppWidgetId(appWidgetId);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -997,7 +997,7 @@ protected void onResume() {
         mPaused = false;
         if (mRestoring || mOnResumeNeedsLoad) {
             setWorkspaceLoading(true);
-            mModel.startLoader(PagedView.INVALID_RESTORE_PAGE);
+            mModel.startLoader(getCurrentWorkspaceScreen());
             mRestoring = false;
             mOnResumeNeedsLoad = false;
         }
@@ -3664,6 +3664,7 @@ public void addOnResumeCallback(Runnable run) {
      * @return true if we are currently paused.  The caller might be able to
      * skip some work in that case since we will come back again.
      */
+    @Override
     public boolean setLoadOnResume() {
         if (mPaused) {
             if (LOGD) Log.d(TAG, "setLoadOnResume");
@@ -3677,6 +3678,7 @@ public boolean setLoadOnResume() {
     /**
      * Implementation of the method from LauncherModel.Callbacks.
      */
+    @Override
     public int getCurrentWorkspaceScreen() {
         if (mWorkspace != null) {
             return mWorkspace.getCurrentPage();
@@ -4046,7 +4048,6 @@ public void run() {
      * Restores a pending widget.
      *
      * @param appWidgetId The app widget id
-     * @param cellInfo The position on screen where to create the widget.
      */
     private void completeRestoreAppWidget(final int appWidgetId) {
         LauncherAppWidgetHostView view = mWorkspace.getWidgetForAppWidgetId(appWidgetId);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -997,7 +997,7 @@ protected void onResume() {
         mPaused = false;
         if (mRestoring || mOnResumeNeedsLoad) {
             setWorkspaceLoading(true);
-            mModel.startLoader(PagedView.INVALID_RESTORE_PAGE);
+            mModel.startLoader(getCurrentWorkspaceScreen());
             mRestoring = false;
             mOnResumeNeedsLoad = false;
         }
@@ -3664,6 +3664,7 @@ public void addOnResumeCallback(Runnable run) {
      * @return true if we are currently paused.  The caller might be able to
      * skip some work in that case since we will come back again.
      */
+    @Override
     public boolean setLoadOnResume() {
         if (mPaused) {
             if (LOGD) Log.d(TAG, "setLoadOnResume");
@@ -3677,6 +3678,7 @@ public boolean setLoadOnResume() {
     /**
      * Implementation of the method from LauncherModel.Callbacks.
      */
+    @Override
     public int getCurrentWorkspaceScreen() {
         if (mWorkspace != null) {
             return mWorkspace.getCurrentPage();
@@ -4046,7 +4048,6 @@ public void run() {
      * Restores a pending widget.
      *
      * @param appWidgetId The app widget id
-     * @param cellInfo The position on screen where to create the widget.
      */
     private void completeRestoreAppWidget(final int appWidgetId) {
         LauncherAppWidgetHostView view = mWorkspace.getWidgetForAppWidgetId(appWidgetId);

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -577,7 +577,7 @@ public void run() {
                 @Override
                 public void run() {
                     mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
-                    mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
+                    mFooter.setLayerType(LAYER_TYPE_NONE, null);
                 }
             };
         }

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -577,7 +577,7 @@ public void run() {
                 @Override
                 public void run() {
                     mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
-                    mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
+                    mFooter.setLayerType(LAYER_TYPE_NONE, null);
                 }
             };
         }

File: src/com/android/launcher3/folder/Folder.java
Patch:
@@ -577,7 +577,7 @@ public void run() {
                 @Override
                 public void run() {
                     mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
-                    mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
+                    mFooter.setLayerType(LAYER_TYPE_NONE, null);
                 }
             };
         }

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -19,6 +19,7 @@
 import android.animation.TimeInterpolator;
 import android.content.Context;
 import android.graphics.PointF;
+import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.View;
 import android.view.animation.AnimationUtils;
@@ -69,7 +70,7 @@ protected boolean supportsDrop(DragSource source, ItemInfo info) {
      * Set the drop target's text to either "Remove" or "Cancel" depending on the drag source.
      */
     public void setTextBasedOnDragSource(DragSource dragSource) {
-        if (!mDeviceProfile.isVerticalBarLayout()) {
+        if (!TextUtils.isEmpty(getText())) {
             setText(dragSource.supportsDeleteDropTarget() ? R.string.remove_drop_target_label
                     : android.R.string.cancel);
         }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2988,7 +2988,7 @@ public void run() {
                     flagOp = mOp == OP_SUSPEND ?
                             FlagOp.addFlag(ShortcutInfo.FLAG_DISABLED_SUSPENDED) :
                                     FlagOp.removeFlag(ShortcutInfo.FLAG_DISABLED_SUSPENDED);
-                    if (DEBUG_LOADERS) Log.d(TAG, "mAllAppsList.(un)suspend " + packages);
+                    if (DEBUG_LOADERS) Log.d(TAG, "mAllAppsList.(un)suspend " + N);
                     mBgAllAppsList.updatePackageFlags(pkgFilter, mUser, flagOp);
                     break;
                 case OP_USER_AVAILABILITY_CHANGE:

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2988,7 +2988,7 @@ public void run() {
                     flagOp = mOp == OP_SUSPEND ?
                             FlagOp.addFlag(ShortcutInfo.FLAG_DISABLED_SUSPENDED) :
                                     FlagOp.removeFlag(ShortcutInfo.FLAG_DISABLED_SUSPENDED);
-                    if (DEBUG_LOADERS) Log.d(TAG, "mAllAppsList.(un)suspend " + packages);
+                    if (DEBUG_LOADERS) Log.d(TAG, "mAllAppsList.(un)suspend " + N);
                     mBgAllAppsList.updatePackageFlags(pkgFilter, mUser, flagOp);
                     break;
                 case OP_USER_AVAILABILITY_CHANGE:

File: src/com/android/launcher3/AllAppsList.java
Patch:
@@ -23,6 +23,7 @@
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.FlagOp;
+import com.android.launcher3.util.StringFilter;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -122,12 +123,12 @@ public void removePackage(String packageName, UserHandleCompat user) {
     /**
      * Updates the apps for the given packageName and user based on {@param op}.
      */
-    public void updatePackageFlags(String packageName, UserHandleCompat user, FlagOp op) {
+    public void updatePackageFlags(StringFilter pkgFilter, UserHandleCompat user, FlagOp op) {
         final List<AppInfo> data = this.data;
         for (int i = data.size() - 1; i >= 0; i--) {
             AppInfo info = data.get(i);
             final ComponentName component = info.intent.getComponent();
-            if (info.user.equals(user) && packageName.equals(component.getPackageName())) {
+            if (info.user.equals(user) && pkgFilter.matches(component.getPackageName())) {
                 info.isDisabled = op.apply(info.isDisabled);
                 modified.add(info);
             }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1331,8 +1331,9 @@ private void setupViews() {
         mWorkspace.setPageSwitchListener(this);
         mPageIndicators = mDragLayer.findViewById(R.id.page_indicator);
 
-        mLauncherView.setSystemUiVisibility(
-                View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
+        mLauncherView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
+                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
+                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
         mWorkspaceBackgroundDrawable = getResources().getDrawable(R.drawable.workspace_bg);
 
         // Setup the drag layer

File: src/com/android/launcher3/LauncherFiles.java
Patch:
@@ -34,7 +34,7 @@ public class LauncherFiles {
             WALLPAPER_CROP_PREFERENCES_KEY + XML,
             WALLPAPER_IMAGES_DB,
             WIDGET_PREVIEWS_DB,
-            MANAGED_USER_PREFERENCES_KEY,
+            MANAGED_USER_PREFERENCES_KEY + XML,
             APP_ICONS_DB));
 
     // TODO: Delete these files on upgrade

File: src/com/android/launcher3/LauncherFiles.java
Patch:
@@ -34,7 +34,7 @@ public class LauncherFiles {
             WALLPAPER_CROP_PREFERENCES_KEY + XML,
             WALLPAPER_IMAGES_DB,
             WIDGET_PREVIEWS_DB,
-            MANAGED_USER_PREFERENCES_KEY,
+            MANAGED_USER_PREFERENCES_KEY + XML,
             APP_ICONS_DB));
 
     // TODO: Delete these files on upgrade

File: src/com/android/launcher3/LauncherFiles.java
Patch:
@@ -34,7 +34,7 @@ public class LauncherFiles {
             WALLPAPER_CROP_PREFERENCES_KEY + XML,
             WALLPAPER_IMAGES_DB,
             WIDGET_PREVIEWS_DB,
-            MANAGED_USER_PREFERENCES_KEY,
+            MANAGED_USER_PREFERENCES_KEY + XML,
             APP_ICONS_DB));
 
     // TODO: Delete these files on upgrade

File: src/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -37,6 +37,7 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_LEGACY_FOLDER_ICON = false;
     public static boolean LAUNCHER3_LEGACY_LOGGING = false;
     public static boolean LAUNCHER3_USE_SYSTEM_DRAG_DRIVER = false;
+    public static boolean LAUNCHER3_DISABLE_PINCH_TO_OVERVIEW = false;
 
     // This flags is only defined to resolve some build issues.
     public static boolean LAUNCHER3_ICON_NORMALIZATION = false;

File: tests/src/com/android/launcher3/BindWidgetTest.java
Patch:
@@ -109,7 +109,7 @@ public void testBindNormalWidget_withoutConfig() {
     public void testUnboundWidget_removed() throws Exception {
         LauncherAppWidgetProviderInfo info = findWidgetProvider(false);
         LauncherAppWidgetInfo item = createWidgetInfo(info, false);
-        item.appWidgetId = 33;
+        item.appWidgetId = -33;
 
         // Since there is no widget to verify, just wait until the workspace is ready.
         setupAndVerifyContents(item, Workspace.class, null);
@@ -253,6 +253,7 @@ private void setupAndVerifyContents(
             runTestOnUiThread(new Runnable() {
                 @Override
                 public void run() {
+                    LauncherClings.markFirstRunClingDismissed(mTargetContext);
                     ManagedProfileHeuristic.markExistingUsersForNoFolderCreation(mTargetContext);
                     LauncherAppState.getInstance().getModel().resetLoadedState(true, true);
                 }

File: tests/src/com/android/launcher3/util/TestLauncherProvider.java
Patch:
@@ -26,7 +26,8 @@ protected void notifyListeners() { }
 
     private static class MyDatabaseHelper extends DatabaseHelper {
         public MyDatabaseHelper(Context context, LauncherProvider provider) {
-            super(context, provider, null);
+            super(context, provider, null, null);
+            initIds();
         }
 
         @Override

File: tests/src/com/android/launcher3/BindWidgetTest.java
Patch:
@@ -109,7 +109,7 @@ public void testBindNormalWidget_withoutConfig() {
     public void testUnboundWidget_removed() throws Exception {
         LauncherAppWidgetProviderInfo info = findWidgetProvider(false);
         LauncherAppWidgetInfo item = createWidgetInfo(info, false);
-        item.appWidgetId = 33;
+        item.appWidgetId = -33;
 
         // Since there is no widget to verify, just wait until the workspace is ready.
         setupAndVerifyContents(item, Workspace.class, null);
@@ -253,6 +253,7 @@ private void setupAndVerifyContents(
             runTestOnUiThread(new Runnable() {
                 @Override
                 public void run() {
+                    LauncherClings.markFirstRunClingDismissed(mTargetContext);
                     ManagedProfileHeuristic.markExistingUsersForNoFolderCreation(mTargetContext);
                     LauncherAppState.getInstance().getModel().resetLoadedState(true, true);
                 }

File: tests/src/com/android/launcher3/util/TestLauncherProvider.java
Patch:
@@ -26,7 +26,8 @@ protected void notifyListeners() { }
 
     private static class MyDatabaseHelper extends DatabaseHelper {
         public MyDatabaseHelper(Context context, LauncherProvider provider) {
-            super(context, provider, null);
+            super(context, provider, null, null);
+            initIds();
         }
 
         @Override

File: tests/src/com/android/launcher3/BindWidgetTest.java
Patch:
@@ -109,7 +109,7 @@ public void testBindNormalWidget_withoutConfig() {
     public void testUnboundWidget_removed() throws Exception {
         LauncherAppWidgetProviderInfo info = findWidgetProvider(false);
         LauncherAppWidgetInfo item = createWidgetInfo(info, false);
-        item.appWidgetId = 33;
+        item.appWidgetId = -33;
 
         // Since there is no widget to verify, just wait until the workspace is ready.
         setupAndVerifyContents(item, Workspace.class, null);
@@ -253,6 +253,7 @@ private void setupAndVerifyContents(
             runTestOnUiThread(new Runnable() {
                 @Override
                 public void run() {
+                    LauncherClings.markFirstRunClingDismissed(mTargetContext);
                     ManagedProfileHeuristic.markExistingUsersForNoFolderCreation(mTargetContext);
                     LauncherAppState.getInstance().getModel().resetLoadedState(true, true);
                 }

File: tests/src/com/android/launcher3/util/TestLauncherProvider.java
Patch:
@@ -26,7 +26,8 @@ protected void notifyListeners() { }
 
     private static class MyDatabaseHelper extends DatabaseHelper {
         public MyDatabaseHelper(Context context, LauncherProvider provider) {
-            super(context, provider, null);
+            super(context, provider, null, null);
+            initIds();
         }
 
         @Override

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -87,7 +87,7 @@ private static void addToInstallQueue(
         }
     }
 
-    public static void removeFromInstallQueue(Context context, ArrayList<String> packageNames,
+    public static void removeFromInstallQueue(Context context, HashSet<String> packageNames,
             UserHandleCompat user) {
         if (packageNames.isEmpty()) {
             return;

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -314,7 +314,7 @@ public void cancelDrag() {
         endDrag();
     }
 
-    public void onAppsRemoved(final ArrayList<String> packageNames, HashSet<ComponentName> cns) {
+    public void onAppsRemoved(final HashSet<String> packageNames, HashSet<ComponentName> cns) {
         // Cancel the current drag if we are removing an app that we are dragging
         if (mDragObject != null) {
             Object rawDragInfo = mDragObject.dragInfo;

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -87,7 +87,7 @@ private static void addToInstallQueue(
         }
     }
 
-    public static void removeFromInstallQueue(Context context, ArrayList<String> packageNames,
+    public static void removeFromInstallQueue(Context context, HashSet<String> packageNames,
             UserHandleCompat user) {
         if (packageNames.isEmpty()) {
             return;

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -314,7 +314,7 @@ public void cancelDrag() {
         endDrag();
     }
 
-    public void onAppsRemoved(final ArrayList<String> packageNames, HashSet<ComponentName> cns) {
+    public void onAppsRemoved(final HashSet<String> packageNames, HashSet<ComponentName> cns) {
         // Cancel the current drag if we are removing an app that we are dragging
         if (mDragObject != null) {
             Object rawDragInfo = mDragObject.dragInfo;

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -105,6 +105,7 @@ public boolean startSearch(String initialQuery, boolean selectInitialQuery,
     public View getIntroScreen();
     public boolean shouldMoveToDefaultScreenOnHomeIntent();
     public boolean hasSettings();
+    @Deprecated
     public boolean overrideWallpaperDimensions();
     public boolean isLauncherPreinstalled();
     public AllAppsSearchBarController getAllAppsSearchBarController();

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -119,6 +119,9 @@ public final class Utilities {
     public static final boolean ATLEAST_JB_MR2 =
             Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;
 
+    // An intent extra to indicate the horizontal scroll of the wallpaper.
+    public static final String EXTRA_WALLPAPER_OFFSET = "com.android.launcher3.WALLPAPER_OFFSET";
+
     // These values are same as that in {@link AsyncTask}.
     private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();
     private static final int CORE_POOL_SIZE = CPU_COUNT + 1;

File: src/com/android/launcher3/allapps/AllAppsSearchBarController.java
Patch:
@@ -175,6 +175,7 @@ public interface Callbacks {
         /**
          * Called when the bounds of the search bar has changed.
          */
+        @Deprecated
         void onBoundsChanged(Rect newBounds);
 
         /**

File: src/com/android/launcher3/util/SQLiteCacheHelper.java
Patch:
@@ -98,7 +98,7 @@ public Cursor query(String[] columns, String selection, String[] selectionArgs)
     private class MySQLiteOpenHelper extends SQLiteOpenHelper {
 
         public MySQLiteOpenHelper(Context context, String name, int version) {
-            super(context, name, null, version);
+            super(new NoLocaleSqliteContext(context), name, null, version);
         }
 
         @Override

File: src/com/android/launcher3/Folder.java
Patch:
@@ -526,7 +526,7 @@ public void run() {
                 @Override
                 public void run() {
                     mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
-                    mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
+                    mFooter.setLayerType(LAYER_TYPE_NONE, null);
                 }
             };
         }

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -55,7 +55,7 @@ public Hotseat(Context context, AttributeSet attrs, int defStyle) {
         mHasVerticalHotseat = mLauncher.getDeviceProfile().isVerticalBarLayout();
     }
 
-    CellLayout getLayout() {
+    public CellLayout getLayout() {
         return mContent;
     }
 

File: src/com/android/launcher3/Folder.java
Patch:
@@ -526,7 +526,7 @@ public void run() {
                 @Override
                 public void run() {
                     mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
-                    mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
+                    mFooter.setLayerType(LAYER_TYPE_NONE, null);
                 }
             };
         }

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -800,7 +800,7 @@ private void updateSystemStateString() {
     }
 
     private static final class IconDB extends SQLiteCacheHelper {
-        private final static int DB_VERSION = 7;
+        private final static int DB_VERSION = 8;
 
         private final static int RELEASE_VERSION = DB_VERSION +
                 (FeatureFlags.LAUNCHER3_DISABLE_ICON_NORMALIZATION ? 0 : 1);
@@ -859,6 +859,7 @@ private Bitmap generateLowResIcon(Bitmap icon, int lowResBackgroundColor) {
             Bitmap lowResIcon = Bitmap.createBitmap(icon.getWidth() / LOW_RES_SCALE_FACTOR,
                     icon.getHeight() / LOW_RES_SCALE_FACTOR, Bitmap.Config.RGB_565);
             synchronized (this) {
+                mLowResCanvas.setBitmap(lowResIcon);
                 mLowResCanvas.drawColor(lowResBackgroundColor);
                 mLowResCanvas.drawBitmap(icon, new Rect(0, 0, icon.getWidth(), icon.getHeight()),
                         new Rect(0, 0, lowResIcon.getWidth(), lowResIcon.getHeight()),

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -800,7 +800,7 @@ private void updateSystemStateString() {
     }
 
     private static final class IconDB extends SQLiteCacheHelper {
-        private final static int DB_VERSION = 7;
+        private final static int DB_VERSION = 8;
 
         private final static int RELEASE_VERSION = DB_VERSION +
                 (FeatureFlags.LAUNCHER3_DISABLE_ICON_NORMALIZATION ? 0 : 1);
@@ -859,6 +859,7 @@ private Bitmap generateLowResIcon(Bitmap icon, int lowResBackgroundColor) {
             Bitmap lowResIcon = Bitmap.createBitmap(icon.getWidth() / LOW_RES_SCALE_FACTOR,
                     icon.getHeight() / LOW_RES_SCALE_FACTOR, Bitmap.Config.RGB_565);
             synchronized (this) {
+                mLowResCanvas.setBitmap(lowResIcon);
                 mLowResCanvas.drawColor(lowResBackgroundColor);
                 mLowResCanvas.drawBitmap(icon, new Rect(0, 0, icon.getWidth(), icon.getHeight()),
                         new Rect(0, 0, lowResIcon.getWidth(), lowResIcon.getHeight()),

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -397,7 +397,7 @@ private void playCommonTransitionAnimations(
 
         // Animate the search bar
         final SearchDropTargetBar.State toSearchBarState =
-                toWorkspaceState.getSearchDropTargetBarState();
+                toWorkspaceState.searchDropTargetBarState;
         mLauncher.getSearchDropTargetBar().animateToState(toSearchBarState,
                 animated ? revealDuration : 0, animation);
 

File: src/com/android/launcher3/Stats.java
Patch:
@@ -146,6 +146,8 @@ public void recordLaunch(View v, Intent intent, ShortcutInfo shortcut) {
         LaunchSourceUtils.populateSourceDataFromAncestorProvider(v, sourceExtras);
         broadcastIntent.putExtra(EXTRA_SOURCE, sourceExtras);
         mLauncher.sendBroadcast(broadcastIntent, mLaunchBroadcastPermission);
-        mLauncher.getLogger().logAppLaunch(intent.getComponent().getPackageName(), shortcut, sourceExtras);
+        if (intent.getComponent() != null) {
+            mLauncher.getLogger().logAppLaunch(intent.getComponent().getPackageName(), shortcut, sourceExtras);
+        }
     }
 }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3136,6 +3136,7 @@ public void closeFolder(Folder folder, boolean animate) {
         getDragLayer().sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
     }
 
+    @Override
     public boolean onLongClick(View v) {
         if (!isDraggingEnabled()) return false;
         if (isWorkspaceLocked()) return false;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1445,6 +1445,8 @@ protected void determineScrollingStart(MotionEvent ev, float touchSlopScale) {
             mLastMotionXRemainder = 0;
             onScrollInteractionBegin();
             pageBeginMoving();
+            // Stop listening for things like pinches.
+            requestDisallowInterceptTouchEvent(true);
         }
     }
 

File: src/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -37,4 +37,7 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_LEGACY_FOLDER_ICON = false;
     public static boolean LAUNCHER3_LEGACY_LOGGING = false;
     public static boolean LAUNCHER3_USE_SYSTEM_DRAG_DRIVER = false;
+
+    // This flags is only defined to resolve some build issues.
+    public static boolean LAUNCHER3_ICON_NORMALIZATION = false;
 }

File: src/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -37,4 +37,7 @@ private FeatureFlags() {}
     public static boolean LAUNCHER3_LEGACY_FOLDER_ICON = false;
     public static boolean LAUNCHER3_LEGACY_LOGGING = false;
     public static boolean LAUNCHER3_USE_SYSTEM_DRAG_DRIVER = false;
+
+    // This flags is only defined to resolve some build issues.
+    public static boolean LAUNCHER3_ICON_NORMALIZATION = false;
 }

File: src/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -31,8 +31,8 @@ private FeatureFlags() {}
     public static boolean IS_RELEASE_BUILD = true;
 
     // Custom flags go below this
-    // As opposed to the new spring-loaded workspace.
     public static boolean LAUNCHER3_DISABLE_ICON_NORMALIZATION = false;
+    // As opposed to the new spring-loaded workspace.
     public static boolean LAUNCHER3_LEGACY_WORKSPACE_DND = false;
     public static boolean LAUNCHER3_LEGACY_FOLDER_ICON = false;
     public static boolean LAUNCHER3_LEGACY_LOGGING = false;

File: src/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -31,8 +31,8 @@ private FeatureFlags() {}
     public static boolean IS_RELEASE_BUILD = true;
 
     // Custom flags go below this
-    // As opposed to the new spring-loaded workspace.
     public static boolean LAUNCHER3_DISABLE_ICON_NORMALIZATION = false;
+    // As opposed to the new spring-loaded workspace.
     public static boolean LAUNCHER3_LEGACY_WORKSPACE_DND = false;
     public static boolean LAUNCHER3_LEGACY_FOLDER_ICON = false;
     public static boolean LAUNCHER3_LEGACY_LOGGING = false;

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -228,7 +228,7 @@ public void setSearchBarController(AllAppsSearchBarController searchController)
             throw new RuntimeException("Expected search bar controller to only be set once");
         }
         mSearchBarController = searchController;
-        mSearchBarController.initialize(mApps, mSearchInput, mAppsRecyclerView, this);
+        mSearchBarController.initialize(mApps, mSearchInput, mLauncher, this);
 
         updateBackgroundAndPaddings();
     }

File: src/com/android/launcher3/allapps/AllAppsGridAdapter.java
Patch:
@@ -567,7 +567,7 @@ public int getItemViewType(int position) {
     /**
      * Creates a new market search intent.
      */
-    private Intent createMarketSearchIntent(String query) {
+    public static Intent createMarketSearchIntent(String query) {
         Uri marketSearchUri = Uri.parse("market://search")
                 .buildUpon()
                 .appendQueryParameter("q", query)

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -85,6 +85,7 @@ public class DeviceProfile {
     // Folder
     public int folderBackgroundOffset;
     public int folderIconSizePx;
+    public int folderIconPreviewPadding;
     public int folderCellWidthPx;
     public int folderCellHeightPx;
 
@@ -262,6 +263,7 @@ private void updateIconSize(float scale, int drawablePadding, Resources res,
         folderCellHeightPx = cellHeightPx + edgeMarginPx;
         folderBackgroundOffset = -edgeMarginPx;
         folderIconSizePx = iconSizePx + 2 * -folderBackgroundOffset;
+        folderIconPreviewPadding = res.getDimensionPixelSize(R.dimen.folder_preview_padding);
     }
 
     /**

File: src/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -34,7 +34,7 @@ private FeatureFlags() {}
     // As opposed to the new spring-loaded workspace.
     public static boolean LAUNCHER3_LEGACY_WORKSPACE_DND = false;
     public static boolean LAUNCHER3_ICON_NORMALIZATION = true;
-    public static boolean LAUNCHER3_CLIPPED_FOLDER_ICON = false;
+    public static boolean LAUNCHER3_LEGACY_FOLDER_ICON = false;
     public static boolean LAUNCHER3_LEGACY_LOGGING = false;
     public static boolean LAUNCHER3_USE_SYSTEM_DRAG_DRIVER = false;
 }

File: src/com/android/launcher3/folder/StackFolderIconLayoutRule.java
Patch:
@@ -85,7 +85,7 @@ public int numItems() {
     }
 
     @Override
-    public Path getClipPath() {
-        return null;
+    public boolean clipToBackground() {
+        return false;
     }
 }

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -229,7 +229,7 @@ public void setSearchBarController(AllAppsSearchBarController searchController)
             throw new RuntimeException("Expected search bar controller to only be set once");
         }
         mSearchBarController = searchController;
-        mSearchBarController.initialize(mApps, mSearchInput, mAppsRecyclerView, this);
+        mSearchBarController.initialize(mApps, mSearchInput, mLauncher, this);
 
         updateBackgroundAndPaddings();
     }

File: src/com/android/launcher3/allapps/AllAppsGridAdapter.java
Patch:
@@ -566,7 +566,7 @@ public int getItemViewType(int position) {
     /**
      * Creates a new market search intent.
      */
-    private Intent createMarketSearchIntent(String query) {
+    public static Intent createMarketSearchIntent(String query) {
         Uri marketSearchUri = Uri.parse("market://search")
                 .buildUpon()
                 .appendQueryParameter("q", query)

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -149,7 +149,7 @@ public abstract class PagedView extends ViewGroup implements ViewGroup.OnHierarc
 
     protected boolean mIsPageMoving = false;
 
-    private boolean mWasInOverscroll = false;
+    protected boolean mWasInOverscroll = false;
 
     // Page Indicator
     @Thunk int mPageIndicatorViewId;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -149,7 +149,7 @@ public abstract class PagedView extends ViewGroup implements ViewGroup.OnHierarc
 
     protected boolean mIsPageMoving = false;
 
-    private boolean mWasInOverscroll = false;
+    protected boolean mWasInOverscroll = false;
 
     // Page Indicator
     @Thunk int mPageIndicatorViewId;

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -318,6 +318,7 @@ public boolean onTouchEvent(MotionEvent event) {
     void setStayPressed(boolean stayPressed) {
         mStayPressed = stayPressed;
         if (!stayPressed) {
+            HolographicOutlineHelper.obtain(getContext()).recycleShadowBitmap(mPressedBackground);
             mPressedBackground = null;
         } else {
             if (mPressedBackground == null) {

File: tests/src/com/android/launcher3/InvariantDeviceProfileTest.java
Patch:
@@ -168,7 +168,9 @@ public void testQsbTallHeight() {
                 resources.getDisplayMetrics());
         if (portraitProfile.isPhone) {
             // This fails on some devices due to http://b/26884580 (portraitHeight is 101, not 100).
-            assertEquals(4 + 94 + 2, portraitHeight);
+            // TODO: Remove the comparision against 101 once b/26884580 is fixed
+            // assertEquals(4 + 94 + 2, portraitHeight);
+            assertTrue(portraitHeight == (4 + 94 + 2) || portraitHeight == (4 + 95 + 2));
         } else {
             assertEquals(8 + 94 + 24, portraitHeight);
         }

File: tests/src/com/android/launcher3/InvariantDeviceProfileTest.java
Patch:
@@ -168,7 +168,9 @@ public void testQsbTallHeight() {
                 resources.getDisplayMetrics());
         if (portraitProfile.isPhone) {
             // This fails on some devices due to http://b/26884580 (portraitHeight is 101, not 100).
-            assertEquals(4 + 94 + 2, portraitHeight);
+            // TODO: Remove the comparision against 101 once b/26884580 is fixed
+            // assertEquals(4 + 94 + 2, portraitHeight);
+            assertTrue(portraitHeight == (4 + 94 + 2) || portraitHeight == (4 + 95 + 2));
         } else {
             assertEquals(8 + 94 + 24, portraitHeight);
         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -482,7 +482,7 @@ protected void onCreate(Bundle savedInstanceState) {
         IntentFilter filter = new IntentFilter(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
         registerReceiver(mCloseSystemDialogsReceiver, filter);
 
-        mRotationEnabled = Utilities.isRotationAllowedForDevice(getApplicationContext());
+        mRotationEnabled = getResources().getBoolean(R.bool.allow_rotation);
         // In case we are on a device with locked rotation, we should look at preferences to check
         // if the user has specifically allowed rotation.
         if (!mRotationEnabled) {
@@ -1189,7 +1189,7 @@ protected boolean hasSettings() {
         } else {
             // On devices with a locked orientation, we will at least have the allow rotation
             // setting.
-            return !Utilities.isRotationAllowedForDevice(this);
+            return !getResources().getBoolean(R.bool.allow_rotation);
         }
     }
 

File: src/com/android/launcher3/PreloadIconDrawable.java
Patch:
@@ -60,7 +60,7 @@ public PreloadIconDrawable(Drawable icon, Theme theme) {
 
     public void applyPreloaderTheme(Theme t) {
         TypedArray ta = t.obtainStyledAttributes(R.styleable.PreloadIconDrawable);
-        mBgDrawable = ta.getDrawable(R.styleable.PreloadIconDrawable_background);
+        mBgDrawable = ta.getDrawable(R.styleable.PreloadIconDrawable_ringBackground);
         mBgDrawable.setFilterBitmap(true);
         mPaint.setStrokeWidth(ta.getDimension(R.styleable.PreloadIconDrawable_indicatorSize, 0));
         mRingOutset = ta.getDimensionPixelSize(R.styleable.PreloadIconDrawable_ringOutset, 0);

File: src/com/android/launcher3/widget/WidgetsListAdapter.java
Patch:
@@ -16,7 +16,9 @@
 package com.android.launcher3.widget;
 
 import android.annotation.TargetApi;
+import android.content.Context;
 import android.content.pm.ResolveInfo;
+import android.content.res.Resources;
 import android.os.Build;
 import android.support.v7.widget.RecyclerView;
 import android.support.v7.widget.RecyclerView.Adapter;
@@ -25,10 +27,10 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewGroup.LayoutParams;
-import android.view.ViewGroup.MarginLayoutParams;
 import android.widget.LinearLayout;
 
 import com.android.launcher3.BubbleTextView;
+import com.android.launcher3.DeviceProfile;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -93,7 +93,7 @@ public float getInterpolation(float input) {
     private static final ColorMatrix sTempBrightnessMatrix = new ColorMatrix();
     private static final ColorMatrix sTempFilterMatrix = new ColorMatrix();
 
-    private final Paint mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
+    private final Paint mPaint = new Paint(Paint.FILTER_BITMAP_FLAG | Paint.ANTI_ALIAS_FLAG);
     private final Bitmap mBitmap;
     private State mState = State.NORMAL;
 

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -40,13 +40,13 @@
 import com.android.launcher3.DragSource;
 import com.android.launcher3.DropTarget;
 import com.android.launcher3.ExtendedEditText;
+import com.android.launcher3.folder.Folder;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherTransitionable;
 import com.android.launcher3.R;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
-import com.android.launcher3.folder.Folder;
 import com.android.launcher3.util.ComponentKey;
 
 import java.nio.charset.Charset;

File: src/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -31,7 +31,8 @@ private FeatureFlags() {}
     public static boolean IS_RELEASE_BUILD = true;
 
     // Custom flags go below this
-    public static boolean LAUNCHER3_ICON_NORMALIZATION = false;
     // As opposed to the new spring-loaded workspace.
     public static boolean LAUNCHER3_LEGACY_WORKSPACE_DND = false;
+    public static boolean LAUNCHER3_ICON_NORMALIZATION = true;
+    public static boolean LAUNCHER3_CLIPPED_FOLDER_ICON = false;
 }

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -270,7 +270,7 @@ public void updateAppsViewNumCols(Resources res, int recyclerViewWidth) {
         int allAppsCellWidthGap =
                 res.getDimensionPixelSize(R.dimen.all_apps_icon_width_gap);
         int availableAppsWidthPx = (recyclerViewWidth > 0) ? recyclerViewWidth : availableWidthPx;
-        int numAppsCols = (availableAppsWidthPx - appsViewLeftMarginPx) /
+        int numAppsCols = (availableAppsWidthPx + allAppsCellWidthGap - appsViewLeftMarginPx) /
                 (allAppsIconSizePx + allAppsCellWidthGap);
         int numPredictiveAppCols = Math.max(inv.minAllAppsPredictionColumns, numAppsCols);
         allAppsNumCols = numAppsCols;

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -40,14 +40,13 @@
 import com.android.launcher3.DragSource;
 import com.android.launcher3.DropTarget;
 import com.android.launcher3.ExtendedEditText;
-import com.android.launcher3.Folder;
-import com.android.launcher3.folder.Folder;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherTransitionable;
 import com.android.launcher3.R;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.Workspace;
+import com.android.launcher3.folder.Folder;
 import com.android.launcher3.util.ComponentKey;
 
 import java.nio.charset.Charset;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4098,7 +4098,8 @@ public void run() {
             AppWidgetProviderInfo info = mAppWidgetManager.getAppWidgetInfo(appWidgetId);
             if (info == null || appWidgetInfo == null ||
                     !info.provider.equals(appWidgetInfo.provider)) {
-                Log.e(TAG, "Removing invalid widget: id=" + item.appWidgetId);
+                Log.e(TAG, "Removing invalid widget: id=" + item.appWidgetId + " info=" + info
+                        + " appWidgetInfo=" + appWidgetInfo);
                 deleteWidgetInfo(item);
                 return;
             }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4053,7 +4053,8 @@ public void run() {
             AppWidgetProviderInfo info = mAppWidgetManager.getAppWidgetInfo(appWidgetId);
             if (info == null || appWidgetInfo == null ||
                     !info.provider.equals(appWidgetInfo.provider)) {
-                Log.e(TAG, "Removing invalid widget: id=" + item.appWidgetId);
+                Log.e(TAG, "Removing invalid widget: id=" + item.appWidgetId + " info=" + info
+                        + " appWidgetInfo=" + appWidgetInfo);
                 deleteWidgetInfo(item);
                 return;
             }

File: src/com/android/launcher3/SearchDropTargetBar.java
Patch:
@@ -116,6 +116,8 @@ protected void onFinishInflate() {
 
         // Create the various fade animations
         mDropTargetBar.setAlpha(0f);
+        AlphaUpdateListener.updateVisibility(mDropTargetBar, mAccessibilityEnabled);
+
         mDropTargetBarAnimator = new LauncherViewPropertyAnimator(mDropTargetBar);
         mDropTargetBarAnimator.setInterpolator(sAccelerateInterpolator);
         mDropTargetBarAnimator.addListener(new AnimatorListenerAdapter() {

File: src/com/android/launcher3/SearchDropTargetBar.java
Patch:
@@ -116,6 +116,8 @@ protected void onFinishInflate() {
 
         // Create the various fade animations
         mDropTargetBar.setAlpha(0f);
+        AlphaUpdateListener.updateVisibility(mDropTargetBar, mAccessibilityEnabled);
+
         mDropTargetBarAnimator = new LauncherViewPropertyAnimator(mDropTargetBar);
         mDropTargetBarAnimator.setInterpolator(sAccelerateInterpolator);
         mDropTargetBarAnimator.addListener(new AnimatorListenerAdapter() {

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -270,6 +270,9 @@ public Bundle call(String method, String arg, Bundle extras) {
                 if (mListener != null) {
                     mListener.onSettingsChanged(arg, value);
                 }
+                if (extras.getBoolean(LauncherSettings.Settings.NOTIFY_BACKUP)) {
+                    LauncherBackupAgentHelper.dataChanged(getContext());
+                }
                 Bundle result = new Bundle();
                 result.putBoolean(LauncherSettings.Settings.EXTRA_VALUE, value);
                 return result;

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -324,5 +324,8 @@ public static final class Settings {
 
         public static final String EXTRA_VALUE = "value";
         public static final String EXTRA_DEFAULT_VALUE = "default_value";
+
+        // Extra for set_boolean method to also notify the backup manager of the change.
+        public static final String NOTIFY_BACKUP = "notify_backup";
     }
 }

File: src/com/android/launcher3/Folder.java
Patch:
@@ -526,7 +526,7 @@ public void run() {
                 @Override
                 public void run() {
                     mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
-                    mContentWrapper.setLayerType(LAYER_TYPE_NONE, null);
+                    mFooter.setLayerType(LAYER_TYPE_NONE, null);
                 }
             };
         }

File: src/com/android/launcher3/compat/LauncherActivityInfoCompat.java
Patch:
@@ -24,6 +24,8 @@
 
 public abstract class LauncherActivityInfoCompat {
 
+    public static final int FLAG_SUSPENDED = 1<<30;
+
     LauncherActivityInfoCompat() {
     }
 

File: tests/src/com/android/launcher3/util/FocusLogicTest.java
Patch:
@@ -216,7 +216,7 @@ public void testCrossingAllAppsColumn() {
                 { -1, -1, -1,  0, -1},
                 {-11,-11,-11,-11,  2},
                 { -1,  1, -1, -1, -1},
-                { -1, -1  -1, -1, -1},
+                { -1, -1, -1, -1, -1},
         });
         i = FocusLogic.handleKeyEvent(KeyEvent.KEYCODE_DPAD_LEFT, map, 0, 1, 1, true);
         assertEquals(1, i);

File: tests/src/com/android/launcher3/util/FocusLogicTest.java
Patch:
@@ -216,7 +216,7 @@ public void testCrossingAllAppsColumn() {
                 { -1, -1, -1,  0, -1},
                 {-11,-11,-11,-11,  2},
                 { -1,  1, -1, -1, -1},
-                { -1, -1  -1, -1, -1},
+                { -1, -1, -1, -1, -1},
         });
         i = FocusLogic.handleKeyEvent(KeyEvent.KEYCODE_DPAD_LEFT, map, 0, 1, 1, true);
         assertEquals(1, i);

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -83,7 +83,7 @@ public class InvariantDeviceProfile {
     DeviceProfile landscapeProfile;
     DeviceProfile portraitProfile;
 
-    InvariantDeviceProfile() {
+    public InvariantDeviceProfile() {
     }
 
     public InvariantDeviceProfile(InvariantDeviceProfile p) {

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -115,7 +115,7 @@ public static final class WorkspaceScreens implements ChangeLogColumns {
         /**
          * The content:// style URL for this table
          */
-        static final Uri CONTENT_URI = Uri.parse("content://" +
+        public static final Uri CONTENT_URI = Uri.parse("content://" +
                 ProviderConfig.AUTHORITY + "/" + TABLE_NAME);
 
         /**

File: src/com/android/launcher3/config/FeatureFlags.java
Patch:
@@ -32,6 +32,6 @@ private FeatureFlags() {}
     public static final boolean IS_RELEASE_BUILD = true;
 
     // Custom flags go below this
-    public static final boolean LAUNCHER3_ICON_NORMALIZATION = true;
+    public static final boolean LAUNCHER3_ICON_NORMALIZATION = false;
 
 }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -798,7 +798,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     childWidthMode = MeasureSpec.EXACTLY;
                     childHeightMode = MeasureSpec.EXACTLY;
 
-                    childWidth = getViewportWidth() - mInsets.left - mInsets.right;
+                    childWidth = getViewportWidth();
                     childHeight = getViewportHeight();
                 }
                 if (referenceChildWidth == 0) {

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -819,7 +819,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     childWidthMode = MeasureSpec.EXACTLY;
                     childHeightMode = MeasureSpec.EXACTLY;
 
-                    childWidth = getViewportWidth() - mInsets.left - mInsets.right;
+                    childWidth = getViewportWidth();
                     childHeight = getViewportHeight();
                 }
                 if (referenceChildWidth == 0) {

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -266,9 +266,9 @@ protected int parseAndAddNode(
         mValues.put(Favorites.SCREEN, screenId);
 
         mValues.put(Favorites.CELLX,
-                convertToDistanceFromEnd(getAttributeValue(parser, ATTR_X), mColumnCount);
+                convertToDistanceFromEnd(getAttributeValue(parser, ATTR_X), mColumnCount));
         mValues.put(Favorites.CELLY,
-                convertToDistanceFromEnd(getAttributeValue(parser, ATTR_Y), mRowCount);
+                convertToDistanceFromEnd(getAttributeValue(parser, ATTR_Y), mRowCount));
 
         TagParser tagParser = tagParserMap.get(parser.getName());
         if (tagParser == null) {

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -266,9 +266,9 @@ protected int parseAndAddNode(
         mValues.put(Favorites.SCREEN, screenId);
 
         mValues.put(Favorites.CELLX,
-                convertToDistanceFromEnd(getAttributeValue(parser, ATTR_X), mColumnCount);
+                convertToDistanceFromEnd(getAttributeValue(parser, ATTR_X), mColumnCount));
         mValues.put(Favorites.CELLY,
-                convertToDistanceFromEnd(getAttributeValue(parser, ATTR_Y), mRowCount);
+                convertToDistanceFromEnd(getAttributeValue(parser, ATTR_Y), mRowCount));
 
         TagParser tagParser = tagParserMap.get(parser.getName());
         if (tagParser == null) {

File: src/com/android/launcher3/CommonAppTypeParser.java
Patch:
@@ -93,7 +93,7 @@ private class MyLayoutParser extends DefaultLayoutParser {
 
         public MyLayoutParser() {
             super(CommonAppTypeParser.this.mContext, null, CommonAppTypeParser.this,
-                    CommonAppTypeParser.this.mContext.getResources(), mResId, TAG_RESOLVE, 0);
+                    CommonAppTypeParser.this.mContext.getResources(), mResId, TAG_RESOLVE);
         }
 
         @Override

File: src/com/android/launcher3/DefaultLayoutParser.java
Patch:
@@ -48,9 +48,8 @@ public DefaultLayoutParser(Context context, AppWidgetHost appWidgetHost,
     }
 
     public DefaultLayoutParser(Context context, AppWidgetHost appWidgetHost,
-            LayoutParserCallback callback, Resources sourceRes, int layoutId, String rootTag,
-            int hotseatAllAppsRank) {
-        super(context, appWidgetHost, callback, sourceRes, layoutId, rootTag, hotseatAllAppsRank);
+            LayoutParserCallback callback, Resources sourceRes, int layoutId, String rootTag) {
+        super(context, appWidgetHost, callback, sourceRes, layoutId, rootTag);
     }
 
     @Override

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -173,9 +173,9 @@ ArrayList<InvariantDeviceProfile> getPredefinedDeviceProfiles() {
         // width, height, #rows, #columns, #folder rows, #folder columns,
         // iconSize, iconTextSize, #hotseat, #hotseatIconSize, defaultLayoutId.
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Super Short Stubby",
-                255, 300,     2, 3, 2, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_4x4));
+                255, 300,     2, 3, 2, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_3x3));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Shorter Stubby",
-                255, 400,     3, 3, 3, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_4x4));
+                255, 400,     3, 3, 3, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_3x3));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Short Stubby",
                 275, 420,     3, 4, 3, 4, 4, 48, 13, 5, 48, R.xml.default_workspace_4x4));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Stubby",
@@ -196,7 +196,7 @@ ArrayList<InvariantDeviceProfile> getPredefinedDeviceProfiles() {
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Nexus 10",
                 727, 1207,    5, 6, 4, 5, 4, 76, 14.4f,  7, 76, R.xml.default_workspace_5x6));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("20-inch Tablet",
-                1527, 2527,   7, 7, 6, 6, 4, 100, 20,  7, 72, R.xml.default_workspace_4x4));
+                1527, 2527,   7, 7, 6, 6, 4, 100, 20,  7, 72, R.xml.default_workspace_5x6));
         return predefinedDeviceProfiles;
     }
 

File: src/com/android/launcher3/CommonAppTypeParser.java
Patch:
@@ -25,7 +25,7 @@
 
 import com.android.launcher3.AutoInstallsLayout.LayoutParserCallback;
 import com.android.launcher3.LauncherSettings.Favorites;
-import com.android.launcher3.backup.BackupProtos.Favorite;
+import com.android.launcher3.backup.nano.BackupProtos.Favorite;
 import com.android.launcher3.util.Thunk;
 
 import org.xmlpull.v1.XmlPullParserException;

File: src/com/android/launcher3/CommonAppTypeParser.java
Patch:
@@ -93,7 +93,7 @@ private class MyLayoutParser extends DefaultLayoutParser {
 
         public MyLayoutParser() {
             super(CommonAppTypeParser.this.mContext, null, CommonAppTypeParser.this,
-                    CommonAppTypeParser.this.mContext.getResources(), mResId, TAG_RESOLVE, 0);
+                    CommonAppTypeParser.this.mContext.getResources(), mResId, TAG_RESOLVE);
         }
 
         @Override

File: src/com/android/launcher3/DefaultLayoutParser.java
Patch:
@@ -48,9 +48,8 @@ public DefaultLayoutParser(Context context, AppWidgetHost appWidgetHost,
     }
 
     public DefaultLayoutParser(Context context, AppWidgetHost appWidgetHost,
-            LayoutParserCallback callback, Resources sourceRes, int layoutId, String rootTag,
-            int hotseatAllAppsRank) {
-        super(context, appWidgetHost, callback, sourceRes, layoutId, rootTag, hotseatAllAppsRank);
+            LayoutParserCallback callback, Resources sourceRes, int layoutId, String rootTag) {
+        super(context, appWidgetHost, callback, sourceRes, layoutId, rootTag);
     }
 
     @Override

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -173,9 +173,9 @@ ArrayList<InvariantDeviceProfile> getPredefinedDeviceProfiles() {
         // width, height, #rows, #columns, #folder rows, #folder columns,
         // iconSize, iconTextSize, #hotseat, #hotseatIconSize, defaultLayoutId.
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Super Short Stubby",
-                255, 300,     2, 3, 2, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_4x4));
+                255, 300,     2, 3, 2, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_3x3));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Shorter Stubby",
-                255, 400,     3, 3, 3, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_4x4));
+                255, 400,     3, 3, 3, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_3x3));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Short Stubby",
                 275, 420,     3, 4, 3, 4, 4, 48, 13, 5, 48, R.xml.default_workspace_4x4));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Stubby",
@@ -196,7 +196,7 @@ ArrayList<InvariantDeviceProfile> getPredefinedDeviceProfiles() {
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Nexus 10",
                 727, 1207,    5, 6, 4, 5, 4, 76, 14.4f,  7, 76, R.xml.default_workspace_5x6));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("20-inch Tablet",
-                1527, 2527,   7, 7, 6, 6, 4, 100, 20,  7, 72, R.xml.default_workspace_4x4));
+                1527, 2527,   7, 7, 6, 6, 4, 100, 20,  7, 72, R.xml.default_workspace_5x6));
         return predefinedDeviceProfiles;
     }
 

File: src/com/android/launcher3/CommonAppTypeParser.java
Patch:
@@ -25,7 +25,7 @@
 
 import com.android.launcher3.AutoInstallsLayout.LayoutParserCallback;
 import com.android.launcher3.LauncherSettings.Favorites;
-import com.android.launcher3.backup.BackupProtos.Favorite;
+import com.android.launcher3.backup.nano.BackupProtos.Favorite;
 import com.android.launcher3.util.Thunk;
 
 import org.xmlpull.v1.XmlPullParserException;

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -73,12 +73,12 @@ public class InvariantDeviceProfile {
     /**
      * Number of icons inside the hotseat area.
      */
-    int numHotseatIcons;
+    public int numHotseatIcons;
     float hotseatIconSize;
     int defaultLayoutId;
 
     // Derived invariant properties
-    int hotseatAllAppsRank;
+    public int hotseatAllAppsRank;
 
     DeviceProfile landscapeProfile;
     DeviceProfile portraitProfile;

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -52,7 +52,7 @@
 import com.android.launcher3.backup.BackupProtos.Widget;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
-import com.android.launcher3.model.MigrateFromRestoreTask;
+import com.android.launcher3.model.GridSizeMigrationTask;
 import com.android.launcher3.util.Thunk;
 import com.google.protobuf.nano.InvalidProtocolBufferNanoException;
 import com.google.protobuf.nano.MessageNano;
@@ -315,7 +315,7 @@ private boolean isBackupCompatible(Journal oldState) {
             return true;
         }
 
-        if (MigrateFromRestoreTask.ENABLED &&
+        if (GridSizeMigrationTask.ENABLED &&
                 (oldProfile.desktopCols - currentProfile.desktopCols <= 1) &&
                 (oldProfile.desktopRows - currentProfile.desktopRows <= 1)) {
             // Allow desktop migration when row and/or column count contracts by 1.

File: src/com/android/launcher3/CommonAppTypeParser.java
Patch:
@@ -93,7 +93,7 @@ private class MyLayoutParser extends DefaultLayoutParser {
 
         public MyLayoutParser() {
             super(CommonAppTypeParser.this.mContext, null, CommonAppTypeParser.this,
-                    CommonAppTypeParser.this.mContext.getResources(), mResId, TAG_RESOLVE, 0);
+                    CommonAppTypeParser.this.mContext.getResources(), mResId, TAG_RESOLVE);
         }
 
         @Override

File: src/com/android/launcher3/DefaultLayoutParser.java
Patch:
@@ -48,9 +48,8 @@ public DefaultLayoutParser(Context context, AppWidgetHost appWidgetHost,
     }
 
     public DefaultLayoutParser(Context context, AppWidgetHost appWidgetHost,
-            LayoutParserCallback callback, Resources sourceRes, int layoutId, String rootTag,
-            int hotseatAllAppsRank) {
-        super(context, appWidgetHost, callback, sourceRes, layoutId, rootTag, hotseatAllAppsRank);
+            LayoutParserCallback callback, Resources sourceRes, int layoutId, String rootTag) {
+        super(context, appWidgetHost, callback, sourceRes, layoutId, rootTag);
     }
 
     @Override

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -173,9 +173,9 @@ ArrayList<InvariantDeviceProfile> getPredefinedDeviceProfiles() {
         // width, height, #rows, #columns, #folder rows, #folder columns,
         // iconSize, iconTextSize, #hotseat, #hotseatIconSize, defaultLayoutId.
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Super Short Stubby",
-                255, 300,     2, 3, 2, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_4x4));
+                255, 300,     2, 3, 2, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_3x3));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Shorter Stubby",
-                255, 400,     3, 3, 3, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_4x4));
+                255, 400,     3, 3, 3, 3, 3, 48, 13, 3, 48, R.xml.default_workspace_3x3));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Short Stubby",
                 275, 420,     3, 4, 3, 4, 4, 48, 13, 5, 48, R.xml.default_workspace_4x4));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Stubby",
@@ -196,7 +196,7 @@ ArrayList<InvariantDeviceProfile> getPredefinedDeviceProfiles() {
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Nexus 10",
                 727, 1207,    5, 6, 4, 5, 4, 76, 14.4f,  7, 76, R.xml.default_workspace_5x6));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("20-inch Tablet",
-                1527, 2527,   7, 7, 6, 6, 4, 100, 20,  7, 72, R.xml.default_workspace_4x4));
+                1527, 2527,   7, 7, 6, 6, 4, 100, 20,  7, 72, R.xml.default_workspace_5x6));
         return predefinedDeviceProfiles;
     }
 

File: src/com/android/launcher3/Folder.java
Patch:
@@ -902,7 +902,6 @@ public void run() {
             // Show the animation, next time something is added to the folder.
             mInfo.setOption(FolderInfo.FLAG_MULTI_PAGE_ANIMATION, false, mLauncher);
         }
-
     }
 
     @Override
@@ -1122,7 +1121,7 @@ public int getItemCount() {
         Runnable onCompleteRunnable = new Runnable() {
             @Override
             public void run() {
-                int itemCount = getItemCount();
+                int itemCount = mInfo.contents.size();
                 if (itemCount <= 1) {
                     View newIcon = null;
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4002,8 +4002,7 @@ public void run() {
                 pendingInfo.spanY = item.spanY;
                 pendingInfo.minSpanX = item.minSpanX;
                 pendingInfo.minSpanY = item.minSpanY;
-                Bundle options = null;
-                        WidgetHostViewLoader.getDefaultOptionsForWidget(this, pendingInfo);
+                Bundle options = WidgetHostViewLoader.getDefaultOptionsForWidget(this, pendingInfo);
 
                 int newWidgetId = mAppWidgetHost.allocateAppWidgetId();
                 boolean success = mAppWidgetManager.bindAppWidgetIdIfAllowed(

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3455,7 +3455,7 @@ public ShortcutInfo getAppShortcutInfo(PackageManager manager, Intent intent,
 
         ComponentName componentName = intent.getComponent();
         if (componentName == null) {
-            Log.d(TAG, "Missing component found in getShortcutInfo: " + componentName);
+            Log.d(TAG, "Missing component found in getShortcutInfo");
             return null;
         }
 

File: src/com/android/launcher3/compat/AppWidgetManagerCompatVL.java
Patch:
@@ -90,9 +90,7 @@ public void startConfigActivity(AppWidgetProviderInfo info, int widgetId, Activi
             AppWidgetHost host, int requestCode) {
         try {
             host.startAppWidgetConfigureActivityForResult(activity, widgetId, 0, requestCode, null);
-        } catch (ActivityNotFoundException e) {
-            Toast.makeText(activity, R.string.activity_not_found, Toast.LENGTH_SHORT).show();
-        } catch (SecurityException e) {
+        } catch (ActivityNotFoundException | SecurityException e) {
             Toast.makeText(activity, R.string.activity_not_found, Toast.LENGTH_SHORT).show();
         }
     }

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -321,8 +321,7 @@ public void onAppsRemoved(final ArrayList<String> packageNames, HashSet<Componen
             if (rawDragInfo instanceof ShortcutInfo) {
                 ShortcutInfo dragInfo = (ShortcutInfo) rawDragInfo;
                 for (ComponentName componentName : cns) {
-                    // Added null checks to prevent NPE we've seen in the wild
-                    if (dragInfo != null && dragInfo.intent != null) {
+                    if (dragInfo.intent != null) {
                         ComponentName cn = dragInfo.intent.getComponent();
                         boolean isSameComponent = cn != null && (cn.equals(componentName) ||
                                 packageNames.contains(cn.getPackageName()));

File: src/com/android/launcher3/DragController.java
Patch:
@@ -348,8 +348,7 @@ public void onAppsRemoved(final ArrayList<String> packageNames, HashSet<Componen
             if (rawDragInfo instanceof ShortcutInfo) {
                 ShortcutInfo dragInfo = (ShortcutInfo) rawDragInfo;
                 for (ComponentName componentName : cns) {
-                    // Added null checks to prevent NPE we've seen in the wild
-                    if (dragInfo != null && dragInfo.intent != null) {
+                    if (dragInfo.intent != null) {
                         ComponentName cn = dragInfo.intent.getComponent();
                         boolean isSameComponent = cn != null && (cn.equals(componentName) ||
                                 packageNames.contains(cn.getPackageName()));

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4052,8 +4052,7 @@ public void run() {
                 pendingInfo.spanY = item.spanY;
                 pendingInfo.minSpanX = item.minSpanX;
                 pendingInfo.minSpanY = item.minSpanY;
-                Bundle options = null;
-                        WidgetHostViewLoader.getDefaultOptionsForWidget(this, pendingInfo);
+                Bundle options = WidgetHostViewLoader.getDefaultOptionsForWidget(this, pendingInfo);
 
                 int newWidgetId = mAppWidgetHost.allocateAppWidgetId();
                 boolean success = mAppWidgetManager.bindAppWidgetIdIfAllowed(

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3553,7 +3553,7 @@ public ShortcutInfo getAppShortcutInfo(PackageManager manager, Intent intent,
 
         ComponentName componentName = intent.getComponent();
         if (componentName == null) {
-            Log.d(TAG, "Missing component found in getShortcutInfo: " + componentName);
+            Log.d(TAG, "Missing component found in getShortcutInfo");
             return null;
         }
 

File: src/com/android/launcher3/compat/AppWidgetManagerCompatVL.java
Patch:
@@ -90,9 +90,7 @@ public void startConfigActivity(AppWidgetProviderInfo info, int widgetId, Activi
             AppWidgetHost host, int requestCode) {
         try {
             host.startAppWidgetConfigureActivityForResult(activity, widgetId, 0, requestCode, null);
-        } catch (ActivityNotFoundException e) {
-            Toast.makeText(activity, R.string.activity_not_found, Toast.LENGTH_SHORT).show();
-        } catch (SecurityException e) {
+        } catch (ActivityNotFoundException | SecurityException e) {
             Toast.makeText(activity, R.string.activity_not_found, Toast.LENGTH_SHORT).show();
         }
     }

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -471,7 +471,7 @@ protected void updateWallpaperDimensions(int width, int height) {
             editor.remove(WALLPAPER_WIDTH_KEY);
             editor.remove(WALLPAPER_HEIGHT_KEY);
         }
-        editor.commit();
+        editor.apply();
         WallpaperUtils.suggestWallpaperDimension(getResources(),
                 sp, getWindowManager(), WallpaperManager.getInstance(getContext()), true);
     }

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -82,7 +82,7 @@ private static void addToInstallQueue(
                     strings = new HashSet<String>(strings);
                 }
                 strings.add(encoded);
-                sharedPrefs.edit().putStringSet(APPS_PENDING_INSTALL, strings).commit();
+                sharedPrefs.edit().putStringSet(APPS_PENDING_INSTALL, strings).apply();
             }
         }
     }
@@ -110,7 +110,7 @@ public static void removeFromInstallQueue(Context context, ArrayList<String> pac
                         newStringsIter.remove();
                     }
                 }
-                sp.edit().putStringSet(APPS_PENDING_INSTALL, newStrings).commit();
+                sp.edit().putStringSet(APPS_PENDING_INSTALL, newStrings).apply();
             }
         }
     }
@@ -131,7 +131,7 @@ private static ArrayList<PendingInstallShortcutInfo> getAndClearInstallQueue(
                     infos.add(info);
                 }
             }
-            sharedPrefs.edit().putStringSet(APPS_PENDING_INSTALL, new HashSet<String>()).commit();
+            sharedPrefs.edit().putStringSet(APPS_PENDING_INSTALL, new HashSet<String>()).apply();
             return infos;
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3672,7 +3672,7 @@ public View getOrCreateQsbBar() {
                 mSharedPrefs.edit()
                     .putInt(QSB_WIDGET_ID, widgetId)
                     .putString(QSB_WIDGET_PROVIDER, searchProvider.provider.flattenToString())
-                    .commit();
+                    .apply();
             }
 
             mAppWidgetHost.setQsbWidgetId(widgetId);

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -30,7 +30,7 @@
 
 public class LauncherBackupAgentHelper extends BackupAgentHelper {
 
-    private static final String TAG = "LauncherBackupAgentHelper";
+    private static final String TAG = "LauncherBAHelper";
 
     private static final String LAUNCHER_DATA_PREFIX = "L";
 
@@ -91,7 +91,7 @@ public void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescri
 
         if (hasData && mHelper.restoreSuccessful) {
             LauncherAppState.getLauncherProvider().clearFlagEmptyDbCreated();
-            LauncherClings.synchonouslyMarkFirstRunClingDismissed(this);
+            LauncherClings.markFirstRunClingDismissed(this);
 
             // Rank was added in v4.
             if (mHelper.restoredBackupVersion <= 3) {

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -57,7 +57,6 @@
 import com.android.launcher3.util.ManagedProfileHeuristic;
 import com.android.launcher3.util.Thunk;
 
-import java.io.File;
 import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -686,7 +685,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                     // available (tablet users). Because one of the possible cling flows (migration)
                     // is very destructive (wipes out workspaces), we want to prevent this from showing
                     // until clear data. We do so by marking that the clings have been shown.
-                    LauncherClings.synchonouslyMarkFirstRunClingDismissed(mContext);
+                    LauncherClings.markFirstRunClingDismissed(mContext);
                 }
                 case 17: {
                     // No-op

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -203,7 +203,7 @@ private void updateAvailableDimensions(DisplayMetrics dm, Resources res) {
     private void updateIconSize(float scale, int drawablePadding, Resources res,
                                 DisplayMetrics dm) {
         iconSizePx = (int) (Utilities.pxFromDp(inv.iconSize, dm) * scale);
-        iconTextSizePx = (int) (Utilities.pxFromDp(inv.iconTextSize, dm) * scale);
+        iconTextSizePx = (int) (Utilities.pxFromSp(inv.iconTextSize, dm) * scale);
         iconDrawablePaddingPx = drawablePadding;
         hotseatIconSizePx = (int) (Utilities.pxFromDp(inv.hotseatIconSize, dm) * scale);
 

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -27,6 +27,7 @@
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.PackageInstallerCompat;
 import com.android.launcher3.compat.UserManagerCompat;
+import com.android.launcher3.util.ConfigMonitor;
 import com.android.launcher3.util.TestingUtils;
 import com.android.launcher3.util.Thunk;
 
@@ -104,6 +105,7 @@ private LauncherAppState() {
 
         sContext.registerReceiver(mModel, filter);
         UserManagerCompat.getInstance(sContext).enableAndResetCache();
+        new ConfigMonitor(sContext).register();
     }
 
     /**

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -113,7 +113,7 @@ public BubbleTextView(Context context, AttributeSet attrs, int defStyle) {
         if (display == DISPLAY_WORKSPACE) {
             setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.iconTextSizePx);
         } else if (display == DISPLAY_ALL_APPS) {
-            setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.allAppsIconTextSizePx);
+            setTextSize(TypedValue.COMPLEX_UNIT_SP, grid.allAppsIconTextSizeSp);
             defaultIconSize = grid.allAppsIconSizePx;
         }
 

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -98,7 +98,7 @@ public class DeviceProfile {
     public int allAppsNumPredictiveCols;
     public int allAppsButtonVisualSize;
     public final int allAppsIconSizePx;
-    public final int allAppsIconTextSizePx;
+    public final float allAppsIconTextSizeSp;
 
     // QSB
     private int searchBarWidgetInternalPaddingTop, searchBarWidgetInternalPaddingBottom;
@@ -150,7 +150,7 @@ public DeviceProfile(Context context, InvariantDeviceProfile inv,
                 res.getDimensionPixelSize(R.dimen.dynamic_grid_icon_drawable_padding);
 
         // AllApps uses the original non-scaled icon text size
-        allAppsIconTextSizePx = Utilities.pxFromDp(inv.iconTextSize, dm);
+        allAppsIconTextSizeSp = inv.iconTextSize;
 
         // AllApps uses the original non-scaled icon size
         allAppsIconSizePx = Utilities.pxFromDp(inv.iconSize, dm);
@@ -203,7 +203,7 @@ private void updateAvailableDimensions(DisplayMetrics dm, Resources res) {
     private void updateIconSize(float scale, int drawablePadding, Resources res,
                                 DisplayMetrics dm) {
         iconSizePx = (int) (Utilities.pxFromDp(inv.iconSize, dm) * scale);
-        iconTextSizePx = (int) (Utilities.pxFromSp(inv.iconTextSize, dm) * scale);
+        iconTextSizePx = (int) (Utilities.pxFromDp(inv.iconTextSize, dm) * scale);
         iconDrawablePaddingPx = drawablePadding;
         hotseatIconSizePx = (int) (Utilities.pxFromDp(inv.hotseatIconSize, dm) * scale);
 

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -113,7 +113,7 @@ public BubbleTextView(Context context, AttributeSet attrs, int defStyle) {
         if (display == DISPLAY_WORKSPACE) {
             setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.iconTextSizePx);
         } else if (display == DISPLAY_ALL_APPS) {
-            setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.allAppsIconTextSizePx);
+            setTextSize(TypedValue.COMPLEX_UNIT_SP, grid.allAppsIconTextSizeSp);
             defaultIconSize = grid.allAppsIconSizePx;
         }
 

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -98,7 +98,7 @@ public class DeviceProfile {
     public int allAppsNumPredictiveCols;
     public int allAppsButtonVisualSize;
     public final int allAppsIconSizePx;
-    public final int allAppsIconTextSizePx;
+    public final float allAppsIconTextSizeSp;
 
     // QSB
     private int searchBarWidgetInternalPaddingTop, searchBarWidgetInternalPaddingBottom;
@@ -150,7 +150,7 @@ public DeviceProfile(Context context, InvariantDeviceProfile inv,
                 res.getDimensionPixelSize(R.dimen.dynamic_grid_icon_drawable_padding);
 
         // AllApps uses the original non-scaled icon text size
-        allAppsIconTextSizePx = Utilities.pxFromDp(inv.iconTextSize, dm);
+        allAppsIconTextSizeSp = inv.iconTextSize;
 
         // AllApps uses the original non-scaled icon size
         allAppsIconSizePx = Utilities.pxFromDp(inv.iconSize, dm);
@@ -203,7 +203,7 @@ private void updateAvailableDimensions(DisplayMetrics dm, Resources res) {
     private void updateIconSize(float scale, int drawablePadding, Resources res,
                                 DisplayMetrics dm) {
         iconSizePx = (int) (Utilities.pxFromDp(inv.iconSize, dm) * scale);
-        iconTextSizePx = (int) (Utilities.pxFromSp(inv.iconTextSize, dm) * scale);
+        iconTextSizePx = (int) (Utilities.pxFromDp(inv.iconTextSize, dm) * scale);
         iconDrawablePaddingPx = drawablePadding;
         hotseatIconSizePx = (int) (Utilities.pxFromDp(inv.hotseatIconSize, dm) * scale);
 

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -113,7 +113,7 @@ public BubbleTextView(Context context, AttributeSet attrs, int defStyle) {
         if (display == DISPLAY_WORKSPACE) {
             setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.iconTextSizePx);
         } else if (display == DISPLAY_ALL_APPS) {
-            setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.allAppsIconTextSizePx);
+            setTextSize(TypedValue.COMPLEX_UNIT_SP, grid.allAppsIconTextSizeSp);
             defaultIconSize = grid.allAppsIconSizePx;
         }
 

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -98,7 +98,7 @@ public class DeviceProfile {
     public int allAppsNumPredictiveCols;
     public int allAppsButtonVisualSize;
     public final int allAppsIconSizePx;
-    public final int allAppsIconTextSizePx;
+    public final float allAppsIconTextSizeSp;
 
     // QSB
     private int searchBarWidgetInternalPaddingTop, searchBarWidgetInternalPaddingBottom;
@@ -150,7 +150,7 @@ public DeviceProfile(Context context, InvariantDeviceProfile inv,
                 res.getDimensionPixelSize(R.dimen.dynamic_grid_icon_drawable_padding);
 
         // AllApps uses the original non-scaled icon text size
-        allAppsIconTextSizePx = Utilities.pxFromDp(inv.iconTextSize, dm);
+        allAppsIconTextSizeSp = inv.iconTextSize;
 
         // AllApps uses the original non-scaled icon size
         allAppsIconSizePx = Utilities.pxFromDp(inv.iconSize, dm);
@@ -203,7 +203,7 @@ private void updateAvailableDimensions(DisplayMetrics dm, Resources res) {
     private void updateIconSize(float scale, int drawablePadding, Resources res,
                                 DisplayMetrics dm) {
         iconSizePx = (int) (Utilities.pxFromDp(inv.iconSize, dm) * scale);
-        iconTextSizePx = (int) (Utilities.pxFromSp(inv.iconTextSize, dm) * scale);
+        iconTextSizePx = (int) (Utilities.pxFromDp(inv.iconTextSize, dm) * scale);
         iconDrawablePaddingPx = drawablePadding;
         hotseatIconSizePx = (int) (Utilities.pxFromDp(inv.hotseatIconSize, dm) * scale);
 

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -373,7 +373,7 @@ public void onAlarm(Alarm alarm) {
                 item = (ShortcutInfo) mDragInfo;
             }
             mFolder.beginExternalDrag(item);
-            mLauncher.openFolder(FolderIcon.this);
+            mLauncher.openFolder(FolderIcon.this, true);
         }
     };
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2529,6 +2529,9 @@ public void onAppWidgetHostReset() {
         if (mAppWidgetHost != null) {
             mAppWidgetHost.startListening();
         }
+
+        // Recreate the QSB, as the widget has been reset.
+        bindSearchProviderChanged();
     }
 
     /**

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -653,6 +653,8 @@ public void addToCustomContentPage(View customContent, CustomContentCallbacks ca
         customScreen.removeAllViews();
         customContent.setFocusable(true);
         customContent.setOnKeyListener(new FullscreenKeyEventListener());
+        customContent.setOnFocusChangeListener(mLauncher.mFocusHandler
+                .getHideIndicatorOnFocusListener());
         customScreen.addViewToCellLayout(customContent, 0, 0, lp, true);
         mCustomContentDescription = description;
 

File: tests/src/com/android/launcher3/util/FocusLogicTest.java
Patch:
@@ -80,7 +80,7 @@ public void testMoveFromBottomRightToTopLeft() {
                 {100, -1, -1, -1, -1, -1},
         });
         int i = FocusLogic.handleKeyEvent(KeyEvent.KEYCODE_DPAD_RIGHT, 6, 5, map, 100, 1, 2, false);
-        assertEquals(0, i);
+        assertEquals(FocusLogic.NEXT_PAGE_FIRST_ITEM, i);
     }
 
     public void testMoveIntoHotseatWithEqualHotseatAndWorkspaceColumns() {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -900,8 +900,7 @@ private long ensurePendingDropLayoutExists(long screenId) {
     }
 
     @Thunk void completeTwoStageWidgetDrop(final int resultCode, final int appWidgetId) {
-        CellLayout cellLayout =
-                (CellLayout) mWorkspace.getScreenWithId(mPendingAddInfo.screenId);
+        CellLayout cellLayout = mWorkspace.getScreenWithId(mPendingAddInfo.screenId);
         Runnable onCompleteRunnable = null;
         int animationType = 0;
 

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -163,8 +163,7 @@ public void measureChild(View child) {
             lp.height = getMeasuredHeight();
         }
         int childWidthMeasureSpec = MeasureSpec.makeMeasureSpec(lp.width, MeasureSpec.EXACTLY);
-        int childheightMeasureSpec = MeasureSpec.makeMeasureSpec(lp.height,
-                MeasureSpec.EXACTLY);
+        int childheightMeasureSpec = MeasureSpec.makeMeasureSpec(lp.height, MeasureSpec.EXACTLY);
         child.measure(childWidthMeasureSpec, childheightMeasureSpec);
     }
 

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -782,7 +782,7 @@ private void updateSystemStateString() {
     }
 
     private static final class IconDB extends SQLiteOpenHelper {
-        private final static int DB_VERSION = 7;
+        private final static int DB_VERSION = 8;
 
         private final static String TABLE_NAME = "icons";
         private final static String COLUMN_ROWID = "rowid";

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -455,7 +455,6 @@ protected void initWorkspace() {
         setWallpaperDimension();
 
         setEdgeGlowColor(getResources().getColor(R.color.workspace_edge_effect_color));
-        mIgnoreRightInset = app.getInvariantDeviceProfile().isRightInsetOpaque;
     }
 
     private void setupLayoutTransition() {

File: src/com/android/launcher3/compat/LauncherActivityInfoCompat.java
Patch:
@@ -33,7 +33,6 @@ public abstract class LauncherActivityInfoCompat {
     public abstract Drawable getIcon(int density);
     public abstract ApplicationInfo getApplicationInfo();
     public abstract long getFirstInstallTime();
-    public abstract Drawable getBadgedIcon(int density);
 
     /**
      * Creates a LauncherActivityInfoCompat for the primary user.

File: src/com/android/launcher3/compat/UserHandleCompat.java
Patch:
@@ -49,7 +49,7 @@ public static UserHandleCompat fromUser(UserHandle user) {
         }
     }
 
-    UserHandle getUser() {
+    public UserHandle getUser() {
         return mUser;
     }
 

File: src/com/android/launcher3/compat/UserManagerCompat.java
Patch:
@@ -17,8 +17,6 @@
 package com.android.launcher3.compat;
 
 import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
 
 import com.android.launcher3.Utilities;
 
@@ -54,7 +52,6 @@ public static UserManagerCompat getInstance(Context context) {
     public abstract List<UserHandleCompat> getUserProfiles();
     public abstract long getSerialNumberForUser(UserHandleCompat user);
     public abstract UserHandleCompat getUserForSerialNumber(long serialNumber);
-    public abstract Drawable getBadgedDrawableForUser(Drawable unbadged, UserHandleCompat user);
     public abstract CharSequence getBadgedLabelForUser(CharSequence label, UserHandleCompat user);
     public abstract long getUserCreationTime(UserHandleCompat user);
 }

File: src/com/android/launcher3/LauncherStateTransitionAnimation.java
Patch:
@@ -641,11 +641,11 @@ private AnimatorSet startAnimationToWorkspaceFromOverlay(final Workspace.State f
                     }
                     animation.play(reveal);
                 }
-
-                dispatchOnLauncherTransitionPrepare(fromView, animated, true);
-                dispatchOnLauncherTransitionPrepare(toView, animated, true);
             }
 
+            dispatchOnLauncherTransitionPrepare(fromView, animated, true);
+            dispatchOnLauncherTransitionPrepare(toView, animated, true);
+
             animation.addListener(new AnimatorListenerAdapter() {
                 @Override
                 public void onAnimationEnd(Animator animation) {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3226,7 +3226,7 @@ public void closeFolder(Folder folder, boolean animate) {
         if (animate) {
             folder.animateClosed();
         } else {
-            folder.close();
+            folder.close(false);
         }
 
         // Notify the accessibility manager that this folder "window" has disappeared and no

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -245,7 +245,9 @@ private void updateIconSize(float scale, int drawablePadding, Resources res,
         hotseatCellHeightPx = iconSizePx;
 
         // Folder
-        folderCellWidthPx = Math.min(cellWidthPx + 6 * edgeMarginPx,
+        int folderCellPadding = isTablet || isLandscape ? 6 * edgeMarginPx : 3 * edgeMarginPx;
+        // Don't let the folder get too close to the edges of the screen.
+        folderCellWidthPx = Math.min(cellWidthPx + folderCellPadding,
                 (availableWidthPx - 4 * edgeMarginPx) / inv.numFolderColumns);
         folderCellHeightPx = cellHeightPx + edgeMarginPx;
         folderBackgroundOffset = -edgeMarginPx;

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -23,7 +23,6 @@
 import android.graphics.Rect;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.ViewGroup.LayoutParams;
 
 public class ShortcutAndWidgetContainer extends ViewGroup {
     static final String TAG = "CellLayoutChildren";

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -70,7 +70,7 @@ public boolean hasIcons() {
     public void setOnLongClickListener(OnLongClickListener l) {
         mContent.setOnLongClickListener(l);
     }
-  
+
     /* Get the orientation invariant order of the item in the hotseat for persistence. */
     int getOrderInHotseat(int x, int y) {
         return mHasVerticalHotseat ? (mContent.getCountY() - y - 1) : x;

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -20,6 +20,7 @@
 import android.appwidget.AppWidgetHostView;
 import android.appwidget.AppWidgetProviderInfo;
 import android.content.Context;
+import android.os.DeadObjectException;
 import android.os.TransactionTooLargeException;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -69,7 +70,8 @@ public void startListening() {
         try {
             super.startListening();
         } catch (Exception e) {
-            if (e.getCause() instanceof TransactionTooLargeException) {
+            if (e.getCause() instanceof TransactionTooLargeException ||
+                    e.getCause() instanceof DeadObjectException) {
                 // We're willing to let this slide. The exception is being caused by the list of
                 // RemoteViews which is being passed back. The startListening relationship will
                 // have been established by this point, and we will end up populating the

File: src/com/android/launcher3/util/FocusLogic.java
Patch:
@@ -494,9 +494,9 @@ private static void printMatrix(int[][] matrix) {
     /**
      * @param edgeColumn the column of the new icon. either {@link #NEXT_PAGE_LEFT_COLUMN} or
      * {@link #NEXT_PAGE_RIGHT_COLUMN}
-     * @return the view adjacent to {@param oldView} in the {@param nextPage}.
+     * @return the view adjacent to {@param oldView} in the {@param nextPage} of the folder.
      */
-    public static View getAdjacentChildInNextPage(
+    public static View getAdjacentChildInNextFolderPage(
             ShortcutAndWidgetContainer nextPage, View oldView, int edgeColumn) {
         final int newRow = ((CellLayout.LayoutParams) oldView.getLayoutParams()).cellY;
 

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -397,7 +397,6 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
                 if (newIconIndex == FocusLogic.PREVIOUS_PAGE_LEFT_COLUMN) {
                     newPageIndex = pageIndex - 1;
                 }
-                workspace.snapToPage(newPageIndex);
                 row = ((CellLayout.LayoutParams) v.getLayoutParams()).cellY;
                 parent = getCellLayoutChildrenForIndex(workspace, newPageIndex);
                 if (parent != null) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -431,6 +431,7 @@ private static boolean findNextAvailableIconSpaceInScreen(ArrayList<ItemInfo> oc
      * @return screenId and the coordinates for the item.
      */
     @Thunk Pair<Long, int[]> findSpaceForItem(
+            Context context,
             ArrayList<Long> workspaceScreens,
             ArrayList<Long> addedWorkspaceScreensFinal,
             int spanX, int spanY) {
@@ -526,7 +527,7 @@ public void run() {
                         }
 
                         // Find appropriate space for the item.
-                        Pair<Long, int[]> coords = findSpaceForItem(
+                        Pair<Long, int[]> coords = findSpaceForItem(context,
                                 workspaceScreens, addedWorkspaceScreensFinal, 1, 1);
                         long screenId = coords.first;
                         int[] cordinates = coords.second;

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -309,7 +309,7 @@ public float getScale(Point wallpaperSize, RectF crop) {
 
                 @Override
                 public float getParallaxOffset() {
-                    return 0;
+                    return 0.5f;
                 }
             };
             req.result = new DrawableTileSource(a.getContext(),

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -428,8 +428,9 @@ public Bitmap generateWidgetPreview(Launcher launcher, LauncherAppWidgetProvider
             float iconScale = Math.min((float) smallestSide / (appIconSize + 2 * minOffset), scale);
 
             try {
-                Drawable icon = mutateOnMainThread(mManager.loadIcon(info, mIconCache));
+                Drawable icon = mManager.loadIcon(info, mIconCache);
                 if (icon != null) {
+                    icon = mutateOnMainThread(icon);
                     int hoffset = (int) ((tileW - appIconSize * iconScale) / 2) + x;
                     int yoffset = (int) ((tileH - appIconSize * iconScale) / 2);
                     icon.setBounds(hoffset, yoffset,

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -428,8 +428,9 @@ public Bitmap generateWidgetPreview(Launcher launcher, LauncherAppWidgetProvider
             float iconScale = Math.min((float) smallestSide / (appIconSize + 2 * minOffset), scale);
 
             try {
-                Drawable icon = mutateOnMainThread(mManager.loadIcon(info, mIconCache));
+                Drawable icon = mManager.loadIcon(info, mIconCache);
                 if (icon != null) {
+                    icon = mutateOnMainThread(icon);
                     int hoffset = (int) ((tileW - appIconSize * iconScale) / 2) + x;
                     int yoffset = (int) ((tileH - appIconSize * iconScale) / 2);
                     icon.setBounds(hoffset, yoffset,

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -123,6 +123,7 @@ protected void init() {
                 new View.OnClickListener() {
                     @Override
                     public void onClick(View v) {
+                        actionBar.hide();
                         boolean finishActivityWhenDone = true;
                         // Never fade on finish because we return to the app that started us (e.g.
                         // Photos), not the home screen.

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -172,7 +172,7 @@ public void run() {
             return true;
         } else if (action == MOVE_TO_WORKSPACE) {
             Folder folder = mLauncher.getWorkspace().getOpenFolder();
-            mLauncher.closeFolder(folder);
+            mLauncher.closeFolder(folder, true);
             ShortcutInfo info = (ShortcutInfo) item;
             folder.getInfo().remove(info);
 

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -252,6 +252,9 @@ private void updateIconState() {
             FastBitmapDrawable d = (FastBitmapDrawable) mIcon;
             if (isPressed() || mStayPressed) {
                 d.animateState(FastBitmapDrawable.State.PRESSED);
+            } else if (getTag() instanceof ShortcutInfo
+                    && ((ShortcutInfo) getTag()).isDisabled != 0) {
+                d.animateState(FastBitmapDrawable.State.DISABLED);
             } else {
                 d.animateState(FastBitmapDrawable.State.NORMAL);
             }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -252,6 +252,9 @@ private void updateIconState() {
             FastBitmapDrawable d = (FastBitmapDrawable) mIcon;
             if (isPressed() || mStayPressed) {
                 d.animateState(FastBitmapDrawable.State.PRESSED);
+            } else if (getTag() instanceof ShortcutInfo
+                    && ((ShortcutInfo) getTag()).isDisabled != 0) {
+                d.animateState(FastBitmapDrawable.State.DISABLED);
             } else {
                 d.animateState(FastBitmapDrawable.State.NORMAL);
             }

File: src/com/android/launcher3/util/FocusLogic.java
Patch:
@@ -48,7 +48,7 @@ public class FocusLogic {
     private static final String TAG = "FocusLogic";
     private static final boolean DEBUG = false;
 
-    // Item and page index related constant used by {@link #handleKeyEvent}.
+    /** Item and page index related constant used by {@link #handleKeyEvent}. */
     public static final int NOOP = -1;
 
     public static final int PREVIOUS_PAGE_RIGHT_COLUMN  = -2;
@@ -91,15 +91,15 @@ public static int handleKeyEvent(int keyCode, int cntX, int cntY,
         switch (keyCode) {
             case KeyEvent.KEYCODE_DPAD_LEFT:
                 newIndex = handleDpadHorizontal(iconIdx, cntX, cntY, map, -1 /*increment*/);
-                if (isRtl && newIndex == NOOP && pageIndex > 0) {
+                if (!isRtl && newIndex == NOOP && pageIndex > 0) {
                     newIndex = PREVIOUS_PAGE_RIGHT_COLUMN;
                 } else if (isRtl && newIndex == NOOP && pageIndex < pageCount - 1) {
                     newIndex = NEXT_PAGE_RIGHT_COLUMN;
                 }
                 break;
             case KeyEvent.KEYCODE_DPAD_RIGHT:
                 newIndex = handleDpadHorizontal(iconIdx, cntX, cntY, map, 1 /*increment*/);
-                if (isRtl && newIndex == NOOP && pageIndex < pageCount - 1) {
+                if (!isRtl && newIndex == NOOP && pageIndex < pageCount - 1) {
                     newIndex = NEXT_PAGE_LEFT_COLUMN;
                 } else if (isRtl && newIndex == NOOP && pageIndex > 0) {
                     newIndex = PREVIOUS_PAGE_LEFT_COLUMN;

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -252,6 +252,9 @@ private void updateIconState() {
             FastBitmapDrawable d = (FastBitmapDrawable) mIcon;
             if (isPressed() || mStayPressed) {
                 d.animateState(FastBitmapDrawable.State.PRESSED);
+            } else if (getTag() instanceof ShortcutInfo
+                    && ((ShortcutInfo) getTag()).isDisabled != 0) {
+                d.animateState(FastBitmapDrawable.State.DISABLED);
             } else {
                 d.animateState(FastBitmapDrawable.State.NORMAL);
             }

File: src/com/android/launcher3/compat/LauncherActivityInfoCompat.java
Patch:
@@ -33,7 +33,6 @@ public abstract class LauncherActivityInfoCompat {
     public abstract Drawable getIcon(int density);
     public abstract ApplicationInfo getApplicationInfo();
     public abstract long getFirstInstallTime();
-    public abstract Drawable getBadgedIcon(int density);
 
     /**
      * Creates a LauncherActivityInfoCompat for the primary user.

File: src/com/android/launcher3/compat/UserHandleCompat.java
Patch:
@@ -49,7 +49,7 @@ public static UserHandleCompat fromUser(UserHandle user) {
         }
     }
 
-    UserHandle getUser() {
+    public UserHandle getUser() {
         return mUser;
     }
 

File: src/com/android/launcher3/compat/UserManagerCompat.java
Patch:
@@ -17,8 +17,6 @@
 package com.android.launcher3.compat;
 
 import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.os.Build;
 
 import com.android.launcher3.Utilities;
 
@@ -54,7 +52,6 @@ public static UserManagerCompat getInstance(Context context) {
     public abstract List<UserHandleCompat> getUserProfiles();
     public abstract long getSerialNumberForUser(UserHandleCompat user);
     public abstract UserHandleCompat getUserForSerialNumber(long serialNumber);
-    public abstract Drawable getBadgedDrawableForUser(Drawable unbadged, UserHandleCompat user);
     public abstract CharSequence getBadgedLabelForUser(CharSequence label, UserHandleCompat user);
     public abstract long getUserCreationTime(UserHandleCompat user);
 }

File: src/com/android/launcher3/Folder.java
Patch:
@@ -1347,7 +1347,7 @@ public void getHitRectRelativeToDragLayer(Rect outRect) {
     }
 
     @Override
-    public void fillInLaunchSourceData(Bundle sourceData) {
+    public void fillInLaunchSourceData(View v, Bundle sourceData) {
         // Fill in from the folder icon's launch source provider first
         Stats.LaunchSourceUtils.populateSourceDataFromAncestorProvider(mFolderIcon, sourceData);
         sourceData.putString(Stats.SOURCE_EXTRA_SUB_CONTAINER, Stats.SUB_CONTAINER_FOLDER);

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -23,6 +23,7 @@
 import android.util.AttributeSet;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
+import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.TextView;
 
@@ -153,7 +154,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
     }
 
     @Override
-    public void fillInLaunchSourceData(Bundle sourceData) {
+    public void fillInLaunchSourceData(View v, Bundle sourceData) {
         sourceData.putString(Stats.SOURCE_EXTRA_CONTAINER, Stats.CONTAINER_HOTSEAT);
     }
 }

File: src/com/android/launcher3/Stats.java
Patch:
@@ -31,7 +31,7 @@ public class Stats {
      * Implemented by containers to provide a launch source for a given child.
      */
     public interface LaunchSourceProvider {
-        void fillInLaunchSourceData(Bundle sourceData);
+        void fillInLaunchSourceData(View v, Bundle sourceData);
     }
 
     /**
@@ -70,7 +70,7 @@ public static void populateSourceDataFromAncestorProvider(View v, Bundle sourceD
             }
 
             if (provider != null) {
-                provider.fillInLaunchSourceData(sourceData);
+                provider.fillInLaunchSourceData(v, sourceData);
             } else if (LauncherAppState.isDogfoodBuild()) {
                 throw new RuntimeException("Expected LaunchSourceProvider");
             }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4496,7 +4496,7 @@ public void getLocationInDragLayer(int[] loc) {
     }
 
     @Override
-    public void fillInLaunchSourceData(Bundle sourceData) {
+    public void fillInLaunchSourceData(View v, Bundle sourceData) {
         sourceData.putString(Stats.SOURCE_EXTRA_CONTAINER, Stats.CONTAINER_HOMESCREEN);
         sourceData.putInt(Stats.SOURCE_EXTRA_CONTAINER_PAGE, getCurrentPage());
     }

File: src/com/android/launcher3/Folder.java
Patch:
@@ -1347,7 +1347,7 @@ public void getHitRectRelativeToDragLayer(Rect outRect) {
     }
 
     @Override
-    public void fillInLaunchSourceData(Bundle sourceData) {
+    public void fillInLaunchSourceData(View v, Bundle sourceData) {
         // Fill in from the folder icon's launch source provider first
         Stats.LaunchSourceUtils.populateSourceDataFromAncestorProvider(mFolderIcon, sourceData);
         sourceData.putString(Stats.SOURCE_EXTRA_SUB_CONTAINER, Stats.SUB_CONTAINER_FOLDER);

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -23,6 +23,7 @@
 import android.util.AttributeSet;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
+import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.TextView;
 
@@ -153,7 +154,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
     }
 
     @Override
-    public void fillInLaunchSourceData(Bundle sourceData) {
+    public void fillInLaunchSourceData(View v, Bundle sourceData) {
         sourceData.putString(Stats.SOURCE_EXTRA_CONTAINER, Stats.CONTAINER_HOTSEAT);
     }
 }

File: src/com/android/launcher3/Stats.java
Patch:
@@ -31,7 +31,7 @@ public class Stats {
      * Implemented by containers to provide a launch source for a given child.
      */
     public interface LaunchSourceProvider {
-        void fillInLaunchSourceData(Bundle sourceData);
+        void fillInLaunchSourceData(View v, Bundle sourceData);
     }
 
     /**
@@ -70,7 +70,7 @@ public static void populateSourceDataFromAncestorProvider(View v, Bundle sourceD
             }
 
             if (provider != null) {
-                provider.fillInLaunchSourceData(sourceData);
+                provider.fillInLaunchSourceData(v, sourceData);
             } else if (LauncherAppState.isDogfoodBuild()) {
                 throw new RuntimeException("Expected LaunchSourceProvider");
             }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4500,7 +4500,7 @@ public void getLocationInDragLayer(int[] loc) {
     }
 
     @Override
-    public void fillInLaunchSourceData(Bundle sourceData) {
+    public void fillInLaunchSourceData(View v, Bundle sourceData) {
         sourceData.putString(Stats.SOURCE_EXTRA_CONTAINER, Stats.CONTAINER_HOMESCREEN);
         sourceData.putInt(Stats.SOURCE_EXTRA_CONTAINER_PAGE, getCurrentPage());
     }

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -83,6 +83,7 @@ public boolean startSearch(String initialQuery, boolean selectInitialQuery,
     public boolean hasCustomContentToLeft();
     public void populateCustomContentContainer();
     public View getQsbBar();
+    public Bundle getAdditionalSearchWidgetOptions();
 
     /*
      * Extensions points for adding / replacing some other aspects of the Launcher experience.

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -87,6 +87,8 @@ public final class Utilities {
     private static final int[] sLoc0 = new int[2];
     private static final int[] sLoc1 = new int[2];
 
+    public static final boolean ATLEAST_MARSHMALLOW = Build.VERSION.SDK_INT >= 23;
+
     // To turn on these properties, type
     // adb shell setprop log.tag.PROPERTY_NAME [VERBOSE | SUPPRESS]
     private static final String FORCE_ENABLE_ROTATION_PROPERTY = "launcher_force_rotate";

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -229,7 +229,8 @@ private void updateIconSize(float scale, int drawablePadding, Resources res,
         hotseatCellHeightPx = iconSizePx;
 
         // Folder
-        folderCellWidthPx = cellWidthPx + 3 * edgeMarginPx;
+        folderCellWidthPx = Math.min(cellWidthPx + 6 * edgeMarginPx,
+                (availableWidthPx - 4 * edgeMarginPx) / inv.numFolderColumns);
         folderCellHeightPx = cellHeightPx + edgeMarginPx;
         folderBackgroundOffset = -edgeMarginPx;
         folderIconSizePx = iconSizePx + 2 * -folderBackgroundOffset;

File: src/com/android/launcher3/compat/PackageInstallerCompatVL.java
Patch:
@@ -107,7 +107,7 @@ public void onFinished(int sessionId, boolean success) {
         @Override
         public void onProgressChanged(int sessionId, float progress) {
             SessionInfo session = mInstaller.getSessionInfo(sessionId);
-            if (session != null) {
+            if (session != null && session.getAppPackageName() != null) {
                 sendUpdate(new PackageInstallInfo(session.getAppPackageName(),
                         STATUS_INSTALLING,
                         (int) (session.getProgress() * 100)));
@@ -124,7 +124,7 @@ public void onBadgingChanged(int sessionId) {
 
         private void pushSessionDisplayToLauncher(int sessionId) {
             SessionInfo session = mInstaller.getSessionInfo(sessionId);
-            if (session != null) {
+            if (session != null && session.getAppPackageName() != null) {
                 addSessionInfoToCahce(session, UserHandleCompat.myUserHandle());
                 LauncherAppState app = LauncherAppState.getInstanceNoCreate();
 

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -74,7 +74,7 @@ public class InvariantDeviceProfile {
     /**
      * Number of icons inside the hotseat area.
      */
-    float numHotseatIcons;
+    int numHotseatIcons;
     float hotseatIconSize;
     int defaultLayoutId;
 
@@ -95,7 +95,7 @@ public InvariantDeviceProfile(InvariantDeviceProfile p) {
     }
 
     InvariantDeviceProfile(String n, float w, float h, int r, int c, int fr, int fc, int maapc,
-            float is, float its, float hs, float his, int dlId) {
+            float is, float its, int hs, float his, int dlId) {
         // Ensure that we have an odd number of hotseat items (since we need to place all apps)
         if (hs % 2 == 0) {
             throw new RuntimeException("All Device Profiles must have an odd number of hotseat spaces");
@@ -195,7 +195,7 @@ ArrayList<InvariantDeviceProfile> getPredefinedDeviceProfiles() {
                 575, 904,     5, 6, 4, 5, 4, 72, 14.4f,  7, 60, R.xml.default_workspace_5x6));
         // Larger tablet profiles always have system bars on the top & bottom
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("Nexus 10",
-                727, 1207,    5, 6, 4, 5, 4, 76, 14.4f,  7, 64, R.xml.default_workspace_5x6));
+                727, 1207,    5, 6, 4, 5, 4, 76, 14.4f,  7, 76, R.xml.default_workspace_5x6));
         predefinedDeviceProfiles.add(new InvariantDeviceProfile("20-inch Tablet",
                 1527, 2527,   7, 7, 6, 6, 4, 100, 20,  7, 72, R.xml.default_workspace_4x4));
         return predefinedDeviceProfiles;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -436,6 +436,7 @@ protected void initWorkspace() {
         setWallpaperDimension();
 
         setEdgeGlowColor(getResources().getColor(R.color.workspace_edge_effect_color));
+        mIgnoreRightInset = app.getInvariantDeviceProfile().isRightInsetOpaque;
     }
 
     private int getDefaultPage() {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -138,7 +138,7 @@ public class Launcher extends Activity
     static final boolean LOGD = false;
 
     static final boolean PROFILE_STARTUP = false;
-    static final boolean DEBUG_WIDGETS = true;
+    static final boolean DEBUG_WIDGETS = false;
     static final boolean DEBUG_STRICT_MODE = false;
     static final boolean DEBUG_RESUME_TIME = false;
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2365,6 +2365,7 @@ public boolean removeItem(View v, ItemInfo itemInfo, boolean deleteFromDb) {
         } else if (itemInfo instanceof LauncherAppWidgetInfo) {
             final LauncherAppWidgetInfo widgetInfo = (LauncherAppWidgetInfo) itemInfo;
             unbindAppWidget(widgetInfo, deleteFromDb);
+            mWorkspace.removeWorkspaceItem(v);
             if (deleteFromDb) {
                 LauncherModel.deleteItemFromDatabase(this, widgetInfo);
             }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -455,6 +455,7 @@ protected void initWorkspace() {
         setWallpaperDimension();
 
         setEdgeGlowColor(getResources().getColor(R.color.workspace_edge_effect_color));
+        mIgnoreRightInset = app.getInvariantDeviceProfile().isRightInsetOpaque;
     }
 
     private void setupLayoutTransition() {

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -250,7 +250,7 @@ private int getSearchBarTopOffset() {
     /** Returns the search bar bounds in the current orientation */
     public Rect getSearchBarBounds(boolean isLayoutRtl) {
         Rect bounds = new Rect();
-        if (isLandscape && transposeLayoutWithOrientation) {
+        if (isVerticalBarLayout()) {
             if (isLayoutRtl) {
                 bounds.set(availableWidthPx - searchBarSpaceHeightPx, edgeMarginPx,
                         availableWidthPx, availableHeightPx - edgeMarginPx);
@@ -284,7 +284,7 @@ public Rect getSearchBarBounds(boolean isLayoutRtl) {
     Rect getWorkspacePadding(boolean isLayoutRtl) {
         Rect searchBarBounds = getSearchBarBounds(isLayoutRtl);
         Rect padding = new Rect();
-        if (isLandscape && transposeLayoutWithOrientation) {
+        if (isVerticalBarLayout()) {
             // Pad the left and right of the workspace with search/hotseat bar sizes
             if (isLayoutRtl) {
                 padding.set(hotseatBarHeightPx, edgeMarginPx,
@@ -320,7 +320,7 @@ Rect getWorkspacePadding(boolean isLayoutRtl) {
     }
 
     private int getWorkspacePageSpacing(boolean isLayoutRtl) {
-        if ((isLandscape && transposeLayoutWithOrientation) || isLargeTablet) {
+        if (isVerticalBarLayout() || isLargeTablet) {
             // In landscape mode the page spacing is set to the default.
             return defaultPageSpacingPx;
         } else {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3824,6 +3824,7 @@ public void run() {
      *
      * Implementation of the method from LauncherModel.Callbacks.
      */
+    @Override
     public void bindItems(final ArrayList<ItemInfo> shortcuts, final int start, final int end,
                           final boolean forceAnimateIcons) {
         Runnable r = new Runnable() {

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -125,5 +125,8 @@ protected void onProviderChanged(int appWidgetId, AppWidgetProviderInfo appWidge
         LauncherAppWidgetProviderInfo info = LauncherAppWidgetProviderInfo.fromProviderInfo(
                 mLauncher, appWidget);
         super.onProviderChanged(appWidgetId, info);
+        // The super method updates the dimensions of the providerInfo. Update the
+        // launcher spans accordingly.
+        info.initSpans();
     }
 }

File: src/com/android/launcher3/LauncherAppWidgetProviderInfo.java
Patch:
@@ -59,7 +59,7 @@ public LauncherAppWidgetProviderInfo(Context context, CustomAppWidget widget) {
         initSpans();
     }
 
-    private void initSpans() {
+    public void initSpans() {
         LauncherAppState app = LauncherAppState.getInstance();
         InvariantDeviceProfile idp = app.getInvariantDeviceProfile();
 

File: src/com/android/launcher3/compat/PackageInstallerCompatVL.java
Patch:
@@ -107,7 +107,7 @@ public void onFinished(int sessionId, boolean success) {
         @Override
         public void onProgressChanged(int sessionId, float progress) {
             SessionInfo session = mInstaller.getSessionInfo(sessionId);
-            if (session != null) {
+            if (session != null && session.getAppPackageName() != null) {
                 sendUpdate(new PackageInstallInfo(session.getAppPackageName(),
                         STATUS_INSTALLING,
                         (int) (session.getProgress() * 100)));
@@ -124,7 +124,7 @@ public void onBadgingChanged(int sessionId) {
 
         private void pushSessionDisplayToLauncher(int sessionId) {
             SessionInfo session = mInstaller.getSessionInfo(sessionId);
-            if (session != null) {
+            if (session != null && session.getAppPackageName() != null) {
                 addSessionInfoToCahce(session, UserHandleCompat.myUserHandle());
                 LauncherAppState app = LauncherAppState.getInstanceNoCreate();
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -579,6 +579,7 @@ public void createCustomContentContainer() {
         CellLayout customScreen = (CellLayout)
                 mLauncher.getLayoutInflater().inflate(R.layout.workspace_screen, this, false);
         customScreen.disableDragTarget();
+        customScreen.disableJailContent();
 
         mWorkspaceScreens.put(CUSTOM_CONTENT_SCREEN_ID, customScreen);
         mScreenOrder.add(0, CUSTOM_CONTENT_SCREEN_ID);

File: src/com/android/launcher3/AppInfoDropTargetBar.java
Patch:
@@ -54,12 +54,12 @@ public void setup(Launcher launcher, DragController dragController) {
     }
 
     @Override
-    public void showDropTarget() {
+    public void showDropTargets() {
         animateDropTargetBarToAlpha(1f, DEFAULT_DRAG_FADE_DURATION);
     }
 
     @Override
-    public void hideDropTarget() {
+    public void hideDropTargets() {
         animateDropTargetBarToAlpha(0f, DEFAULT_DRAG_FADE_DURATION);
     }
 

File: src/com/android/launcher3/DragSource.java
Patch:
@@ -37,7 +37,7 @@ public interface DragSource {
 
     /**
      * @return whether items dragged from this source supports 'Delete' drop target (e.g. to remove
-     * a shortcut.
+     * a shortcut.) If this returns false, the drop target will say "Cancel" instead of "Remove."
      */
     boolean supportsDeleteDropTarget();
 

File: src/com/android/launcher3/SearchDropTargetBar.java
Patch:
@@ -103,12 +103,12 @@ public void setup(Launcher launcher, DragController dragController) {
     }
 
     @Override
-    public void showDropTarget() {
+    public void showDropTargets() {
         animateToState(State.DROP_TARGET, DEFAULT_DRAG_FADE_DURATION);
     }
 
     @Override
-    public void hideDropTarget() {
+    public void hideDropTargets() {
         animateToState(State.SEARCH_BAR, DEFAULT_DRAG_FADE_DURATION);
     }
 

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -455,9 +455,6 @@ public void onDriverDragEnd(float x, float y, DropTarget dropTargetOverride) {
             dropTarget = dropTargetOverride;
         } else {
             vec = isFlingingToDelete(mDragObject.dragSource);
-            if (!DeleteDropTarget.supportsDrop(mDragObject.dragInfo)) {
-                vec = null;
-            }
             if (vec != null) {
                 dropTarget = mFlingToDeleteDropTarget;
             } else {

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -271,7 +271,7 @@ private boolean beginDraggingWidget(WidgetCell v) {
 
     @Override
     public boolean supportsFlingToDelete() {
-        return false;
+        return true;
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -136,7 +136,7 @@ public class Launcher extends Activity
     static final boolean LOGD = false;
 
     static final boolean PROFILE_STARTUP = false;
-    static final boolean DEBUG_WIDGETS = true;
+    static final boolean DEBUG_WIDGETS = false;
     static final boolean DEBUG_STRICT_MODE = false;
     static final boolean DEBUG_RESUME_TIME = false;
     static final boolean DEBUG_DUMP_LOG = false;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -135,7 +135,7 @@ public class Launcher extends Activity
     static final boolean LOGD = false;
 
     static final boolean PROFILE_STARTUP = false;
-    static final boolean DEBUG_WIDGETS = true;
+    static final boolean DEBUG_WIDGETS = false;
     static final boolean DEBUG_STRICT_MODE = false;
     static final boolean DEBUG_RESUME_TIME = false;
     static final boolean DEBUG_DUMP_LOG = false;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2447,6 +2447,7 @@ public boolean removeItem(View v, ItemInfo itemInfo, boolean deleteFromDb) {
         } else if (itemInfo instanceof LauncherAppWidgetInfo) {
             final LauncherAppWidgetInfo widgetInfo = (LauncherAppWidgetInfo) itemInfo;
             unbindAppWidget(widgetInfo, deleteFromDb);
+            mWorkspace.removeWorkspaceItem(v);
             if (deleteFromDb) {
                 LauncherModel.deleteItemFromDatabase(this, widgetInfo);
             }

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -218,7 +218,7 @@ private void updateDrawableBounds() {
             mRect.offsetTo((getWidth() - mRect.width()) / 2, (getHeight() - mRect.height()) / 2);
             mCenterDrawable.setBounds(mRect);
         } else  {
-            float iconSize = Math.min(availableWidth, availableHeight);
+            float iconSize = Math.max(0, Math.min(availableWidth, availableHeight));
 
             // Use twice the setting size factor, as the setting is drawn at a corner and the
             // icon is drawn in the center.

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1047,7 +1047,9 @@ protected void onResume() {
         // Consequently, the widgets will be inflated in the orientation of the foreground activity
         // (framework issue). On resuming, we ensure that any widgets are inflated for the current
         // orientation.
-        getWorkspace().reinflateWidgetsIfNecessary();
+        if (!isWorkspaceLoading()) {
+            getWorkspace().reinflateWidgetsIfNecessary();
+        }
         reinflateQSBIfNecessary();
 
         if (DEBUG_RESUME_TIME) {

File: src/com/android/launcher3/dragndrop/DragController.java
Patch:
@@ -233,8 +233,10 @@ public DragView startDrag(Bitmap b, int dragLayerX, int dragLayerY,
 
         mDragObject = new DropTarget.DragObject();
 
+        float finalDragViewScale = mLauncher.getWorkspace().getSpringLoadedShrinkFactor();
         final DragView dragView = mDragObject.dragView = new DragView(mLauncher, b, registrationX,
-                registrationY, 0, 0, b.getWidth(), b.getHeight(), initialDragViewScale);
+                registrationY, 0, 0, b.getWidth(), b.getHeight(),
+                initialDragViewScale, finalDragViewScale);
 
         mDragObject.dragComplete = false;
         if (mIsAccessibleDrag) {

File: src/com/android/launcher3/dragndrop/DragView.java
Patch:
@@ -77,22 +77,22 @@ public class DragView extends View {
      * <p>
      * The registration point is the point inside our view that the touch events should
      * be centered upon.
-     *
      * @param launcher The Launcher instance
      * @param bitmap The view that we're dragging around.  We scale it up when we draw it.
      * @param registrationX The x coordinate of the registration point.
      * @param registrationY The y coordinate of the registration point.
      */
     @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public DragView(Launcher launcher, Bitmap bitmap, int registrationX, int registrationY,
-            int left, int top, int width, int height, final float initialScale) {
+            int left, int top, int width, int height, final float initialScale,
+            float finalDragViewScale) {
         super(launcher);
         mDragLayer = launcher.getDragLayer();
         mDragController = launcher.getDragController();
 
         final Resources res = getResources();
         final float scaleDps = res.getDimensionPixelSize(R.dimen.dragViewScale);
-        final float scale = (width + scaleDps) / width;
+        final float scale = finalDragViewScale * (width + scaleDps) / width;
 
         // Set the initial scale to avoid any jumps
         setScaleX(initialScale);

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -252,8 +252,8 @@ ArrayList<InvariantDeviceProfile> findClosestDeviceProfiles(
         ArrayList<InvariantDeviceProfile> pointsByNearness = points;
         Collections.sort(pointsByNearness, new Comparator<InvariantDeviceProfile>() {
             public int compare(InvariantDeviceProfile a, InvariantDeviceProfile b) {
-                return (int) (dist(width, height, a.minWidthDps, a.minHeightDps)
-                        - dist(width, height, b.minWidthDps, b.minHeightDps));
+                return Float.compare(dist(width, height, a.minWidthDps, a.minHeightDps),
+                        dist(width, height, b.minWidthDps, b.minHeightDps));
             }
         });
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2469,7 +2469,7 @@ public int compare(ItemInfo lhs, ItemInfo rhs) {
                             lhs.cellY * cellCountX + lhs.cellX);
                     long rr = (rhs.container * containerOffset + rhs.screenId * screenOffset +
                             rhs.cellY * cellCountX + rhs.cellX);
-                    return (int) (lr - rr);
+                    return Long.compare(lr, rr);
                 }
             });
         }

File: src/com/android/launcher3/InvariantDeviceProfile.java
Patch:
@@ -252,8 +252,8 @@ ArrayList<InvariantDeviceProfile> findClosestDeviceProfiles(
         ArrayList<InvariantDeviceProfile> pointsByNearness = points;
         Collections.sort(pointsByNearness, new Comparator<InvariantDeviceProfile>() {
             public int compare(InvariantDeviceProfile a, InvariantDeviceProfile b) {
-                return (int) (dist(width, height, a.minWidthDps, a.minHeightDps)
-                        - dist(width, height, b.minWidthDps, b.minHeightDps));
+                return Float.compare(dist(width, height, a.minWidthDps, a.minHeightDps),
+                        dist(width, height, b.minWidthDps, b.minHeightDps));
             }
         });
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2469,7 +2469,7 @@ public int compare(ItemInfo lhs, ItemInfo rhs) {
                             lhs.cellY * cellCountX + lhs.cellX);
                     long rr = (rhs.container * containerOffset + rhs.screenId * screenOffset +
                             rhs.cellY * cellCountX + rhs.cellX);
-                    return (int) (lr - rr);
+                    return Long.compare(lr, rr);
                 }
             });
         }

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -133,7 +133,7 @@ public void updateIcon(IconCache cache) {
             //   3) Setup icon in the center and app icon in the top right corner.
             if (mDisabledForSafeMode) {
                 FastBitmapDrawable disabledIcon = mLauncher.createIconDrawable(mIcon);
-                disabledIcon.setGhostModeEnabled(true);
+                disabledIcon.setState(FastBitmapDrawable.State.DISABLED);
                 mCenterDrawable = disabledIcon;
                 mSettingIconDrawable = null;
             } else if (isReadyForClickSetup()) {

File: src/com/android/launcher3/PreloadIconDrawable.java
Patch:
@@ -179,7 +179,8 @@ protected boolean onLevelChange(int level) {
             mPaint.setColor(getIndicatorColor());
         }
         if (mIcon instanceof FastBitmapDrawable) {
-            ((FastBitmapDrawable) mIcon).setGhostModeEnabled(level <= 0);
+            ((FastBitmapDrawable) mIcon).setState(level <= 0 ?
+                    FastBitmapDrawable.State.DISABLED : FastBitmapDrawable.State.NORMAL);
         }
 
         invalidateSelf();

File: src/com/android/launcher3/HolographicOutlineHelper.java
Patch:
@@ -164,6 +164,9 @@ Bitmap createMediumDropShadow(BubbleTextView view) {
 
         int bitmapWidth = (int) (rect.width() * view.getScaleX());
         int bitmapHeight = (int) (rect.height() * view.getScaleY());
+        if (bitmapHeight <= 0 || bitmapWidth <= 0) {
+            return null;
+        }
 
         int key = (bitmapWidth << 16) | bitmapHeight;
         Bitmap cache = mBitmapCache.get(key);

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -208,7 +208,7 @@ public static Bitmap createIconBitmap(Drawable icon, Context context) {
                 // Ensure the bitmap has a density.
                 BitmapDrawable bitmapDrawable = (BitmapDrawable) icon;
                 Bitmap bitmap = bitmapDrawable.getBitmap();
-                if (bitmap.getDensity() == Bitmap.DENSITY_NONE) {
+                if (bitmap != null && bitmap.getDensity() == Bitmap.DENSITY_NONE) {
                     bitmapDrawable.setTargetDensity(context.getResources().getDisplayMetrics());
                 }
             }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2387,7 +2387,7 @@ private void filterCurrentWorkspaceItems(long currentScreenId,
             Collections.sort(allWorkspaceItems, new Comparator<ItemInfo>() {
                 @Override
                 public int compare(ItemInfo lhs, ItemInfo rhs) {
-                    return (int) (lhs.container - rhs.container);
+                    return Long.compare(lhs.container, rhs.container);
                 }
             });
             for (ItemInfo info : allWorkspaceItems) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4404,7 +4404,7 @@ private String getPageDescription(int page) {
             }
             nScreens--;
         }
-        return String.format(getContext().getString(R.string.workspace_scroll_format),
+        return getContext().getString(R.string.workspace_scroll_format,
                 page + 1 - delta, nScreens);
     }
 

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -34,6 +34,7 @@
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.ViewGroup;
+import android.view.accessibility.AccessibilityEvent;
 import android.view.animation.DecelerateInterpolator;
 import android.view.animation.LinearInterpolator;
 import android.widget.TextView;
@@ -123,6 +124,7 @@ public final void onDragEnter(DragObject d) {
             mDrawable.setColorFilter(new ColorMatrixColorFilter(mCurrentFilter));
             setTextColor(mHoverColor);
         }
+        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_SELECTED);
     }
 
     @Override

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -73,7 +73,7 @@ public static boolean removeWorkspaceOrFolderItem(Launcher launcher, ItemInfo it
         // Remove the item from launcher and the db, we can ignore the containerInfo in this call
         // because we already remove the drag view from the folder (if the drag originated from
         // a folder) in Folder.beginDrag()
-        launcher.removeItem(view, null, item, true /* deleteFromDb */);
+        launcher.removeItem(view, item, true /* deleteFromDb */);
         launcher.getWorkspace().stripEmptyScreens();
         return true;
     }

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -248,7 +248,7 @@ static boolean handleHotseatButtonKeyEvent(View v, int keyCode, KeyEvent e) {
             }
         } else if (isDeleteKeyChord(e)) {
             matrix = FocusLogic.createSparseMatrix(iconLayout);
-            launcher.removeItem(v, null, itemInfo, true /* deleteFromDb */);
+            launcher.removeItem(v, itemInfo, true /* deleteFromDb */);
         } else {
             // For other KEYCODE_DPAD_LEFT and KEYCODE_DPAD_RIGHT navigation, do not use the
             // matrix extended with hotseat.
@@ -342,7 +342,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
             }
         } else if (isDeleteKeyChord(e)) {
             matrix = FocusLogic.createSparseMatrix(iconLayout);
-            launcher.removeItem(v, null, itemInfo, true /* deleteFromDb */);
+            launcher.removeItem(v, itemInfo, true /* deleteFromDb */);
         } else {
             matrix = FocusLogic.createSparseMatrix(iconLayout);
         }

File: src/com/android/launcher3/Folder.java
Patch:
@@ -1125,7 +1125,7 @@ public void run() {
 
                 // Remove the folder
                 if (getItemCount() <= 1) {
-                    mLauncher.removeItem(mFolderIcon, null, mInfo, true /* deleteFromDb */);
+                    mLauncher.removeItem(mFolderIcon, mInfo, true /* deleteFromDb */);
                     if (mFolderIcon instanceof DropTarget) {
                         mDragController.removeDropTarget((DropTarget) mFolderIcon);
                     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1105,7 +1105,7 @@ protected void reinflateWidgetsIfNecessary() {
                     if (lahv != null && lahv.isReinflateRequired()) {
                         // Remove and rebind the current widget (which was inflated in the wrong
                         // orientation), but don't delete it from the database
-                        mLauncher.removeItem(lahv, null, info, false  /* deleteFromDb */);
+                        mLauncher.removeItem(lahv, info, false  /* deleteFromDb */);
                         mLauncher.bindAppWidget(info);
                     }
                 }
@@ -4441,7 +4441,7 @@ public void run() {
                 if (info.hostView instanceof PendingAppWidgetHostView) {
                     // Remove and rebind the current widget, but don't delete it from the database
                     PendingAppWidgetHostView view = (PendingAppWidgetHostView) info.hostView;
-                    mLauncher.removeItem(view, null, info, false /* deleteFromDb */);
+                    mLauncher.removeItem(view, info, false /* deleteFromDb */);
                     mLauncher.bindAppWidget(info);
                 }
             }

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -73,7 +73,7 @@ public static boolean removeWorkspaceOrFolderItem(Launcher launcher, ItemInfo it
         // Remove the item from launcher and the db, we can ignore the containerInfo in this call
         // because we already remove the drag view from the folder (if the drag originated from
         // a folder) in Folder.beginDrag()
-        launcher.removeItem(view, null, item, true /* deleteFromDb */);
+        launcher.removeItem(view, item, true /* deleteFromDb */);
         launcher.getWorkspace().stripEmptyScreens();
         return true;
     }

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -247,7 +247,7 @@ static boolean handleHotseatButtonKeyEvent(View v, int keyCode, KeyEvent e) {
             }
         } else if (isDeleteKeyChord(e)) {
             matrix = FocusLogic.createSparseMatrix(iconLayout);
-            launcher.removeItem(v, null, itemInfo, true /* deleteFromDb */);
+            launcher.removeItem(v, itemInfo, true /* deleteFromDb */);
         } else {
             // For other KEYCODE_DPAD_LEFT and KEYCODE_DPAD_RIGHT navigation, do not use the
             // matrix extended with hotseat.
@@ -341,7 +341,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
             }
         } else if (isDeleteKeyChord(e)) {
             matrix = FocusLogic.createSparseMatrix(iconLayout);
-            launcher.removeItem(v, null, itemInfo, true /* deleteFromDb */);
+            launcher.removeItem(v, itemInfo, true /* deleteFromDb */);
         } else {
             matrix = FocusLogic.createSparseMatrix(iconLayout);
         }

File: src/com/android/launcher3/Folder.java
Patch:
@@ -1115,7 +1115,7 @@ public void run() {
 
                 // Remove the folder
                 if (getItemCount() <= 1) {
-                    mLauncher.removeItem(mFolderIcon, null, mInfo, true /* deleteFromDb */);
+                    mLauncher.removeItem(mFolderIcon, mInfo, true /* deleteFromDb */);
                     if (mFolderIcon instanceof DropTarget) {
                         mDragController.removeDropTarget((DropTarget) mFolderIcon);
                     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1120,7 +1120,7 @@ protected void reinflateWidgetsIfNecessary() {
                     if (lahv != null && lahv.isReinflateRequired()) {
                         // Remove and rebind the current widget (which was inflated in the wrong
                         // orientation), but don't delete it from the database
-                        mLauncher.removeItem(lahv, null, info, false  /* deleteFromDb */);
+                        mLauncher.removeItem(lahv, info, false  /* deleteFromDb */);
                         mLauncher.bindAppWidget(info);
                     }
                 }
@@ -4525,7 +4525,7 @@ public void run() {
                 if (info.hostView instanceof PendingAppWidgetHostView) {
                     // Remove and rebind the current widget, but don't delete it from the database
                     PendingAppWidgetHostView view = (PendingAppWidgetHostView) info.hostView;
-                    mLauncher.removeItem(view, null, info, false /* deleteFromDb */);
+                    mLauncher.removeItem(view, info, false /* deleteFromDb */);
                     mLauncher.bindAppWidget(info);
                 }
             }

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -341,6 +341,9 @@ public void cropImageAndSetWallpaper(Resources res, int resId, boolean shouldFad
     public void cropImageAndSetWallpaper(Uri uri,
             BitmapCropTask.OnBitmapCroppedHandler onBitmapCroppedHandler,
             boolean shouldFadeOutOnFinish) {
+        // Give some feedback so user knows something is happening.
+        mProgressView.setVisibility(View.VISIBLE);
+
         boolean centerCrop = getResources().getBoolean(R.bool.center_crop);
         // Get the crop
         boolean ltr = mCropView.getLayoutDirection() == View.LAYOUT_DIRECTION_LTR;

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -361,6 +361,9 @@ public void run(boolean cropSucceeded) {
     protected void cropImageAndSetWallpaper(Uri uri,
             BitmapCropTask.OnBitmapCroppedHandler onBitmapCroppedHandler,
             final boolean finishActivityWhenDone, final boolean shouldFadeOutOnFinish) {
+        // Give some feedback so user knows something is happening.
+        mProgressView.setVisibility(View.VISIBLE);
+
         boolean centerCrop = getResources().getBoolean(R.bool.center_crop);
         // Get the crop
         boolean ltr = mCropView.getLayoutDirection() == View.LAYOUT_DIRECTION_LTR;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -454,6 +454,7 @@ protected void initWorkspace() {
         setWallpaperDimension();
 
         setEdgeGlowColor(getResources().getColor(R.color.workspace_edge_effect_color));
+        mIgnoreRightInset = app.getInvariantDeviceProfile().isRightInsetOpaque;
     }
 
     private void setupLayoutTransition() {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1596,7 +1596,7 @@ public int numCustomPages() {
     }
 
     public boolean isOnOrMovingToCustomContent() {
-        return hasCustomContent() && getNextPage() == 0;
+        return hasCustomContent() && getNextPage() == 0 && mRestorePage == INVALID_RESTORE_PAGE;
     }
 
     private void updateStateForCustomContent(int screenCenter) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1610,7 +1610,7 @@ public int numCustomPages() {
     }
 
     public boolean isOnOrMovingToCustomContent() {
-        return hasCustomContent() && getNextPage() == 0;
+        return hasCustomContent() && getNextPage() == 0 && mRestorePage == INVALID_RESTORE_PAGE;
     }
 
     private void updateStateForCustomContent(int screenCenter) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1610,7 +1610,7 @@ public int numCustomPages() {
     }
 
     public boolean isOnOrMovingToCustomContent() {
-        return hasCustomContent() && getNextPage() == 0;
+        return hasCustomContent() && getNextPage() == 0 && mRestorePage == INVALID_RESTORE_PAGE;
     }
 
     private void updateStateForCustomContent(int screenCenter) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1606,7 +1606,7 @@ public int numCustomPages() {
     }
 
     public boolean isOnOrMovingToCustomContent() {
-        return hasCustomContent() && getNextPage() == 0;
+        return hasCustomContent() && getNextPage() == 0 && mRestorePage == INVALID_RESTORE_PAGE;
     }
 
     private void updateStateForCustomContent(int screenCenter) {

File: src/com/android/launcher3/InfoDropTarget.java
Patch:
@@ -50,6 +50,8 @@ public static boolean startDetailsActivityForInfo(ItemInfo info, Launcher launch
             componentName = ((ShortcutInfo) info).intent.getComponent();
         } else if (info instanceof PendingAddItemInfo) {
             componentName = ((PendingAddItemInfo) info).componentName;
+        } else if (info instanceof LauncherAppWidgetInfo) {
+            componentName = ((LauncherAppWidgetInfo) info).providerName;
         }
         if (componentName != null) {
             launcher.startApplicationDetailsActivity(componentName, info.user);
@@ -70,6 +72,6 @@ protected boolean supportsDrop(DragSource source, ItemInfo info) {
 
     public static boolean supportsDrop(Context context, ItemInfo info) {
         return info instanceof AppInfo || info instanceof ShortcutInfo
-                || info instanceof PendingAddItemInfo;
+                || info instanceof PendingAddItemInfo || info instanceof LauncherAppWidgetInfo;
     }
 }

File: WallpaperPicker/src/com/android/launcher3/ThirdPartyWallpaperPickerListAdapter.java
Patch:
@@ -54,7 +54,9 @@ public void onClick(WallpaperPickerActivity a) {
             final ComponentName itemComponentName = new ComponentName(
                     mResolveInfo.activityInfo.packageName, mResolveInfo.activityInfo.name);
             Intent launchIntent = new Intent(Intent.ACTION_SET_WALLPAPER);
-            launchIntent.setComponent(itemComponentName);
+            launchIntent.setComponent(itemComponentName)
+            .putExtra(WallpaperPickerActivity.EXTRA_WALLPAPER_OFFSET,
+                    a.getWallpaperParallaxOffset());
             a.startActivityForResultSafely(
                     launchIntent, WallpaperPickerActivity.PICK_WALLPAPER_THIRD_PARTY_ACTIVITY);
         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -704,6 +704,9 @@ public void run() {
             return;
         } else if (requestCode == REQUEST_PICK_WALLPAPER) {
             if (resultCode == RESULT_OK && mWorkspace.isInOverviewMode()) {
+                // User could have free-scrolled between pages before picking a wallpaper; make sure
+                // we move to the closest one now.
+                mWorkspace.setCurrentPage(mWorkspace.getPageNearestToCenterOfScreen());
                 showWorkspace(false);
             }
             return;

File: src/com/android/launcher3/allapps/AllAppsBackgroundDrawable.java
Patch:
@@ -35,6 +35,7 @@ class TransformedImageDrawable {
     private float mXPercent;
     private float mYPercent;
     private int mGravity;
+    private int mAlpha;
 
     /**
      * @param gravity If one of the Gravity center values, the x and y offset will take the width
@@ -50,10 +51,11 @@ public TransformedImageDrawable(Resources res, int resourceId, float xPct, float
 
     public void setAlpha(int alpha) {
         mImage.setAlpha(alpha);
+        mAlpha = alpha;
     }
 
     public int getAlpha() {
-        return mImage.getAlpha();
+        return mAlpha;
     }
 
     public void updateBounds(Rect bounds) {

File: src/com/android/launcher3/allapps/AllAppsBackgroundDrawable.java
Patch:
@@ -35,6 +35,7 @@ class TransformedImageDrawable {
     private float mXPercent;
     private float mYPercent;
     private int mGravity;
+    private int mAlpha;
 
     /**
      * @param gravity If one of the Gravity center values, the x and y offset will take the width
@@ -50,10 +51,11 @@ public TransformedImageDrawable(Resources res, int resourceId, float xPct, float
 
     public void setAlpha(int alpha) {
         mImage.setAlpha(alpha);
+        mAlpha = alpha;
     }
 
     public int getAlpha() {
-        return mImage.getAlpha();
+        return mAlpha;
     }
 
     public void updateBounds(Rect bounds) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3417,7 +3417,7 @@ public void run() {
                 List<ResolveInfo> providers = packageManager.queryIntentActivities(shortcutsIntent, 0);
                 sBgShortcutProviders = providers;
             } catch (RuntimeException e) {
-                if (!LauncherAppState.isDogfoodBuild() &&
+                if (!ProviderConfig.IS_DOGFOOD_BUILD &&
                         (e.getCause() instanceof TransactionTooLargeException ||
                                 e.getCause() instanceof DeadObjectException)) {
                     /**

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3450,7 +3450,7 @@ public void run() {
                 List<ResolveInfo> providers = packageManager.queryIntentActivities(shortcutsIntent, 0);
                 sBgShortcutProviders = providers;
             } catch (RuntimeException e) {
-                if (!LauncherAppState.isDogfoodBuild() &&
+                if (!ProviderConfig.IS_DOGFOOD_BUILD &&
                         (e.getCause() instanceof TransactionTooLargeException ||
                                 e.getCause() instanceof DeadObjectException)) {
                     /**

File: src/com/android/launcher3/allapps/AllAppsBackgroundDrawable.java
Patch:
@@ -35,6 +35,7 @@ class TransformedImageDrawable {
     private float mXPercent;
     private float mYPercent;
     private int mGravity;
+    private int mAlpha;
 
     /**
      * @param gravity If one of the Gravity center values, the x and y offset will take the width
@@ -50,10 +51,11 @@ public TransformedImageDrawable(Resources res, int resourceId, float xPct, float
 
     public void setAlpha(int alpha) {
         mImage.setAlpha(alpha);
+        mAlpha = alpha;
     }
 
     public int getAlpha() {
-        return mImage.getAlpha();
+        return mAlpha;
     }
 
     public void updateBounds(Rect bounds) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3320,7 +3320,7 @@ public void run() {
                                             .setPackage(pkg), 0);
                             needToRefresh |= widgets != null && !widgets.isEmpty();
                         } catch (RuntimeException e) {
-                            if (LauncherAppState.isDogfoodBuild()) {
+                            if (ProviderConfig.IS_DOGFOOD_BUILD) {
                                 throw e;
                             }
                             // Ignore the crash. We can live with a state widget list.
@@ -3377,7 +3377,7 @@ public static List<LauncherAppWidgetProviderInfo> getWidgetProviders(Context con
                 return results;
             }
         } catch (Exception e) {
-            if (!LauncherAppState.isDogfoodBuild() &&
+            if (!ProviderConfig.IS_DOGFOOD_BUILD &&
                     (e.getCause() instanceof TransactionTooLargeException ||
                     e.getCause() instanceof DeadObjectException)) {
                 // the returned value may be incomplete and will not be refreshed until the next

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3319,7 +3319,7 @@ public void run() {
                                     new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE)
                                             .setPackage(pkg), 0).isEmpty();
                         } catch (RuntimeException e) {
-                            if (LauncherAppState.isDogfoodBuild()) {
+                            if (ProviderConfig.IS_DOGFOOD_BUILD) {
                                 throw e;
                             }
                             // Ignore the crash. We can live with a state widget list.
@@ -3376,7 +3376,7 @@ public static List<LauncherAppWidgetProviderInfo> getWidgetProviders(Context con
                 return results;
             }
         } catch (Exception e) {
-            if (!LauncherAppState.isDogfoodBuild() &&
+            if (!ProviderConfig.IS_DOGFOOD_BUILD &&
                     (e.getCause() instanceof TransactionTooLargeException ||
                     e.getCause() instanceof DeadObjectException)) {
                 // the returned value may be incomplete and will not be refreshed until the next

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3307,9 +3307,10 @@ public void run() {
                     PackageManager pm = context.getPackageManager();
                     for (String pkg : mPackages) {
                         try {
-                            needToRefresh |= !pm.queryBroadcastReceivers(
+                            List<ResolveInfo> widgets = pm.queryBroadcastReceivers(
                                     new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE)
-                                            .setPackage(pkg), 0).isEmpty();
+                                            .setPackage(pkg), 0);
+                            needToRefresh |= widgets != null && !widgets.isEmpty();
                         } catch (RuntimeException e) {
                             // Ignore the crash. We can live with a state widget list.
                             Log.e(TAG, "PM call failed for " + pkg, e);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -2667,6 +2667,7 @@ void onDropChild(View child) {
             LayoutParams lp = (LayoutParams) child.getLayoutParams();
             lp.dropped = true;
             child.requestLayout();
+            markCellsAsOccupiedForView(child);
         }
     }
 

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -75,8 +75,8 @@ public AppWidgetResizeFrame(Context context,
         mResizeMode = info.resizeMode;
         mDragLayer = dragLayer;
 
-        mMinHSpan = info.getMinSpanX(mLauncher);
-        mMinVSpan = info.getMinSpanY(mLauncher);
+        mMinHSpan = info.minSpanX;
+        mMinVSpan = info.minSpanY;
 
         setBackgroundResource(R.drawable.widget_resize_shadow);
         setForeground(getResources().getDrawable(R.drawable.widget_resize_frame));

File: src/com/android/launcher3/AppWidgetsRestoredReceiver.java
Patch:
@@ -13,6 +13,7 @@
 import android.util.Log;
 
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.compat.AppWidgetManagerCompat;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -48,7 +49,8 @@ static void restoreAppWidgetIds(Context context, int[] oldWidgetIds, int[] newWi
             final AppWidgetProviderInfo provider = widgets.getAppWidgetInfo(newWidgetIds[i]);
             final int state;
             if (LauncherModel.isValidProvider(provider)) {
-                state = LauncherAppWidgetInfo.RESTORE_COMPLETED;
+                // This will ensure that we show 'Click to setup' UI if required.
+                state = LauncherAppWidgetInfo.FLAG_UI_NOT_READY;
             } else {
                 state = LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY;
             }

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -355,7 +355,7 @@ public long parseAndAdd(XmlResourceParser parser) {
                     return addShortcut(info.loadLabel(mPackageManager).toString(),
                             intent, Favorites.ITEM_TYPE_APPLICATION);
                 } catch (PackageManager.NameNotFoundException e) {
-                    if (LOGD) Log.w(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
+                    Log.e(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
                 }
                 return -1;
             } else {
@@ -367,7 +367,7 @@ public long parseAndAdd(XmlResourceParser parser) {
          * Helper method to allow extending the parser capabilities
          */
         protected long invalidPackageOrClass(XmlResourceParser parser) {
-            if (LOGD) Log.d(TAG, "Skipping invalid <favorite> with no component");
+            Log.w(TAG, "Skipping invalid <favorite> with no component");
             return -1;
         }
     }

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -159,7 +159,7 @@ private boolean isEventOverFolder(Folder folder, MotionEvent ev) {
     }
 
     private boolean isEventOverDropTargetBar(MotionEvent ev) {
-        getDescendantRectRelativeToSelf(mLauncher.getSearchBar(), mHitRect);
+        getDescendantRectRelativeToSelf(mLauncher.getSearchDropTargetBar(), mHitRect);
         if (mHitRect.contains((int) ev.getX(), (int) ev.getY())) {
             return true;
         }
@@ -321,7 +321,7 @@ public void addChildrenForAccessibility(ArrayList<View> childrenForAccessibility
             childrenForAccessibility.add(currentFolder);
 
             if (isInAccessibleDrag()) {
-                childrenForAccessibility.add(mLauncher.getSearchBar());
+                childrenForAccessibility.add(mLauncher.getSearchDropTargetBar());
             }
         } else {
             super.addChildrenForAccessibility(childrenForAccessibility);

File: src/com/android/launcher3/DragView.java
Patch:
@@ -131,7 +131,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
         measure(ms, ms);
         mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
 
-        if (Utilities.isLmpOrAbove()) {
+        if (Utilities.ATLEAST_LOLLIPOP) {
             setElevation(getResources().getDimension(R.dimen.drag_elevation));
         }
     }
@@ -252,14 +252,14 @@ public void setColor(int color) {
             setColorScale(color, m2);
             m1.postConcat(m2);
 
-            if (Utilities.isLmpOrAbove()) {
+            if (Utilities.ATLEAST_LOLLIPOP) {
                 animateFilterTo(m1.getArray());
             } else {
                 mPaint.setColorFilter(new ColorMatrixColorFilter(m1));
                 invalidate();
             }
         } else {
-            if (!Utilities.isLmpOrAbove() || mCurrentFilter == null) {
+            if (!Utilities.ATLEAST_LOLLIPOP || mCurrentFilter == null) {
                 mPaint.setColorFilter(null);
                 invalidate();
             } else {

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -95,8 +95,6 @@ public void removeProviderChangeListener(Runnable callback) {
     }
 
     protected void onProvidersChanged() {
-        mLauncher.getModel().loadAndBindWidgetsAndShortcuts(mLauncher, mLauncher,
-                true /* refresh */);
         if (!mProviderChangeListeners.isEmpty()) {
             for (Runnable callback : new ArrayList<>(mProviderChangeListeners)) {
                 callback.run();

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -77,6 +77,7 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions,
     public boolean providesSearch();
     public boolean startSearch(String initialQuery, boolean selectInitialQuery,
             Bundle appSearchData, Rect sourceBounds);
+    public boolean startSearchFromAllApps(String query);
     @Deprecated
     public void startVoice();
     public boolean hasCustomContentToLeft();

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -143,7 +143,7 @@ public static final class Favorites implements BaseLauncherColumns {
          *
          * @return The unique content URL for the specified row.
          */
-        static Uri getContentUri(long id) {
+        public static Uri getContentUri(long id) {
             return Uri.parse("content://" + ProviderConfig.AUTHORITY +
                     "/" + TABLE_NAME + "/" + id);
         }

File: src/com/android/launcher3/LauncherViewPropertyAnimator.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.EnumSet;
 
 public class LauncherViewPropertyAnimator extends Animator implements AnimatorListener {
+
     enum Properties {
             TRANSLATION_X,
             TRANSLATION_Y,
@@ -51,13 +52,12 @@ enum Properties {
     long mStartDelay;
     long mDuration;
     TimeInterpolator mInterpolator;
-    ArrayList<Animator.AnimatorListener> mListeners;
+    ArrayList<Animator.AnimatorListener> mListeners = new ArrayList<>();
     boolean mRunning = false;
     FirstFrameAnimatorHelper mFirstFrameHelper;
 
     public LauncherViewPropertyAnimator(View target) {
         mTarget = target;
-        mListeners = new ArrayList<Animator.AnimatorListener>();
     }
 
     @Override

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2293,7 +2293,7 @@ public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
         // Besides disabling the accessibility long-click, this also prevents this view from getting
         // accessibility focus.
         info.setLongClickable(false);
-        if (Utilities.isLmpOrAbove()) {
+        if (Utilities.ATLEAST_LOLLIPOP) {
             info.removeAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_LONG_CLICK);
         }
     }

File: src/com/android/launcher3/UninstallDropTarget.java
Patch:
@@ -38,7 +38,7 @@ protected boolean supportsDrop(DragSource source, Object info) {
 
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     public static boolean supportsDrop(Context context, Object info) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+        if (Utilities.ATLEAST_JB_MR2) {
             UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);
             Bundle restrictions = userManager.getUserRestrictions();
             if (restrictions.getBoolean(UserManager.DISALLOW_APPS_CONTROL, false)

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AppWidgetManagerCompat {
     public static AppWidgetManagerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new AppWidgetManagerCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new AppWidgetManagerCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/AppWidgetManagerCompatV16.java
Patch:
@@ -54,10 +54,10 @@ public String loadLabel(LauncherAppWidgetProviderInfo info) {
     @Override
     public boolean bindAppWidgetIdIfAllowed(int appWidgetId, AppWidgetProviderInfo info,
             Bundle options) {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider);
-        } else {
+        if (Utilities.ATLEAST_JB_MR1) {
             return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider, options);
+        } else {
+            return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider);
         }
     }
 

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -53,7 +53,7 @@ protected LauncherAppsCompat() {
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new LauncherAppsCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new LauncherAppsCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/LauncherAppsCompatV16.java
Patch:
@@ -31,6 +31,7 @@
 import android.os.Bundle;
 import android.provider.Settings;
 
+import com.android.launcher3.Utilities;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -188,7 +189,7 @@ public void onReceive(Context context, Intent intent) {
                 // when moving a package or mounting/un-mounting external storage. Assume that
                 // it is a replacing operation.
                 final boolean replacing = intent.getBooleanExtra(Intent.EXTRA_REPLACING,
-                        Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT);
+                        !Utilities.ATLEAST_KITKAT);
                 String[] packages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
                 for (OnAppsChangedCallbackCompat callback : getCallbacks()) {
                     callback.onPackagesAvailable(packages, user, replacing);

File: src/com/android/launcher3/compat/PackageInstallerCompat.java
Patch:
@@ -34,7 +34,7 @@ public abstract class PackageInstallerCompat {
     public static PackageInstallerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new PackageInstallerCompatVL(context);
                 } else {
                     sInstance = new PackageInstallerCompatV16();

File: src/com/android/launcher3/model/AppNameComparator.java
Patch:
@@ -68,8 +68,6 @@ public int compare(String o1, String o2) {
      * Returns a locale-aware comparator that will alphabetically order a list of applications.
      */
     public Comparator<ItemInfo> getAppInfoComparator() {
-        // Clear the user serial cache so that we get serials as needed in the comparator
-        mAppInfoComparator.clearUserCache();
         return mAppInfoComparator;
     }
 

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -68,7 +68,7 @@ public class ManagedProfileHeuristic {
     private static final long AUTO_ADD_TO_FOLDER_DURATION = 8 * 60 * 60 * 1000;
 
     public static ManagedProfileHeuristic get(Context context, UserHandleCompat user) {
-        if (Utilities.isLmpOrAbove() && !UserHandleCompat.myUserHandle().equals(user)) {
+        if (Utilities.ATLEAST_LOLLIPOP && !UserHandleCompat.myUserHandle().equals(user)) {
             return new ManagedProfileHeuristic(context, user);
         }
         return null;
@@ -296,7 +296,7 @@ private boolean getUserApps(HashSet<String> outExistingApps) {
      * Verifies that entries corresponding to {@param users} exist and removes all invalid entries.
      */
     public static void processAllUsers(List<UserHandleCompat> users, Context context) {
-        if (!Utilities.isLmpOrAbove()) {
+        if (!Utilities.ATLEAST_LOLLIPOP) {
             return;
         }
         UserManagerCompat userManager = UserManagerCompat.getInstance(context);

File: src/com/android/launcher3/util/UiThreadCircularReveal.java
Patch:
@@ -47,7 +47,7 @@ public void onAnimationUpdate(ValueAnimator arg0) {
                 float progress = arg0.getAnimatedFraction();
                 outlineProvider.setProgress(progress);
                 revealView.invalidateOutline();
-                if (!Utilities.isLmpMR1OrAbove()) {
+                if (!Utilities.ATLEAST_LOLLIPOP_MR1) {
                     revealView.invalidate();
                 }
             }

File: src/com/android/launcher3/util/WallpaperUtils.java
Patch:
@@ -24,6 +24,8 @@
 import android.os.Build;
 import android.view.WindowManager;
 
+import com.android.launcher3.Utilities;
+
 /**
  * Utility methods for wallpaper management.
  */
@@ -99,7 +101,7 @@ public static Point getDefaultWallpaperSize(Resources res, WindowManager windowM
             int maxDim = Math.max(maxDims.x, maxDims.y);
             int minDim = Math.max(minDims.x, minDims.y);
 
-            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            if (Utilities.ATLEAST_JB_MR1) {
                 Point realSize = new Point();
                 windowManager.getDefaultDisplay().getRealSize(realSize);
                 maxDim = Math.max(realSize.x, realSize.y);

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -146,8 +146,8 @@ public void applyFromAppWidgetProviderInfo(LauncherAppWidgetProviderInfo info,
         mInfo = info;
         // TODO(hyunyoungs): setup a cache for these labels.
         mWidgetName.setText(AppWidgetManagerCompat.getInstance(getContext()).loadLabel(info));
-        int hSpan = Math.min(info.getSpanX(mLauncher), profile.numColumns);
-        int vSpan = Math.min(info.getSpanY(mLauncher), profile.numRows);
+        int hSpan = Math.min(info.spanX, profile.numColumns);
+        int vSpan = Math.min(info.spanY, profile.numRows);
         mWidgetDims.setText(String.format(mDimensionsFormatString, hSpan, vSpan));
         mWidgetPreviewLoader = loader;
     }

File: src/com/android/launcher3/widget/WidgetHostViewLoader.java
Patch:
@@ -15,6 +15,7 @@
 import com.android.launcher3.DragSource;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
+import com.android.launcher3.Utilities;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.util.Thunk;
 
@@ -131,7 +132,7 @@ public void run() {
     public static Bundle getDefaultOptionsForWidget(Launcher launcher, PendingAddWidgetInfo info) {
         Bundle options = null;
         Rect rect = new Rect();
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+        if (Utilities.ATLEAST_JB_MR1) {
             AppWidgetResizeFrame.getWidgetSizeRanges(launcher, info.spanX, info.spanY, rect);
             Rect padding = AppWidgetHostView.getDefaultPaddingForWidget(launcher,
                     info.componentName, null);

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -319,7 +319,6 @@ public void onDropCompleted(View target, DragObject d, boolean isFlingToDelete,
                 CellLayout layout = (CellLayout) workspace.getChildAt(currentScreen);
                 ItemInfo itemInfo = (ItemInfo) d.dragInfo;
                 if (layout != null) {
-                    layout.calculateSpans(itemInfo);
                     showOutOfSpaceMessage =
                             !layout.findCellForSpan(null, itemInfo.spanX, itemInfo.spanY);
                 }

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -75,8 +75,8 @@ public AppWidgetResizeFrame(Context context,
         mResizeMode = info.resizeMode;
         mDragLayer = dragLayer;
 
-        mMinHSpan = info.getMinSpanX(mLauncher);
-        mMinVSpan = info.getMinSpanY(mLauncher);
+        mMinHSpan = info.minSpanX;
+        mMinVSpan = info.minSpanY;
 
         setBackgroundResource(R.drawable.widget_resize_shadow);
         setForeground(getResources().getDrawable(R.drawable.widget_resize_frame));

File: src/com/android/launcher3/AppWidgetsRestoredReceiver.java
Patch:
@@ -13,6 +13,7 @@
 import android.util.Log;
 
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.compat.AppWidgetManagerCompat;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -48,7 +49,8 @@ static void restoreAppWidgetIds(Context context, int[] oldWidgetIds, int[] newWi
             final AppWidgetProviderInfo provider = widgets.getAppWidgetInfo(newWidgetIds[i]);
             final int state;
             if (LauncherModel.isValidProvider(provider)) {
-                state = LauncherAppWidgetInfo.RESTORE_COMPLETED;
+                // This will ensure that we show 'Click to setup' UI if required.
+                state = LauncherAppWidgetInfo.FLAG_UI_NOT_READY;
             } else {
                 state = LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY;
             }

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -355,7 +355,7 @@ public long parseAndAdd(XmlResourceParser parser) {
                     return addShortcut(info.loadLabel(mPackageManager).toString(),
                             intent, Favorites.ITEM_TYPE_APPLICATION);
                 } catch (PackageManager.NameNotFoundException e) {
-                    if (LOGD) Log.w(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
+                    Log.e(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
                 }
                 return -1;
             } else {
@@ -367,7 +367,7 @@ public long parseAndAdd(XmlResourceParser parser) {
          * Helper method to allow extending the parser capabilities
          */
         protected long invalidPackageOrClass(XmlResourceParser parser) {
-            if (LOGD) Log.d(TAG, "Skipping invalid <favorite> with no component");
+            Log.w(TAG, "Skipping invalid <favorite> with no component");
             return -1;
         }
     }

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -159,7 +159,7 @@ private boolean isEventOverFolder(Folder folder, MotionEvent ev) {
     }
 
     private boolean isEventOverDropTargetBar(MotionEvent ev) {
-        getDescendantRectRelativeToSelf(mLauncher.getSearchBar(), mHitRect);
+        getDescendantRectRelativeToSelf(mLauncher.getSearchDropTargetBar(), mHitRect);
         if (mHitRect.contains((int) ev.getX(), (int) ev.getY())) {
             return true;
         }
@@ -321,7 +321,7 @@ public void addChildrenForAccessibility(ArrayList<View> childrenForAccessibility
             childrenForAccessibility.add(currentFolder);
 
             if (isInAccessibleDrag()) {
-                childrenForAccessibility.add(mLauncher.getSearchBar());
+                childrenForAccessibility.add(mLauncher.getSearchDropTargetBar());
             }
         } else {
             super.addChildrenForAccessibility(childrenForAccessibility);

File: src/com/android/launcher3/DragView.java
Patch:
@@ -131,7 +131,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
         measure(ms, ms);
         mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
 
-        if (Utilities.isLmpOrAbove()) {
+        if (Utilities.ATLEAST_LOLLIPOP) {
             setElevation(getResources().getDimension(R.dimen.drag_elevation));
         }
     }
@@ -252,14 +252,14 @@ public void setColor(int color) {
             setColorScale(color, m2);
             m1.postConcat(m2);
 
-            if (Utilities.isLmpOrAbove()) {
+            if (Utilities.ATLEAST_LOLLIPOP) {
                 animateFilterTo(m1.getArray());
             } else {
                 mPaint.setColorFilter(new ColorMatrixColorFilter(m1));
                 invalidate();
             }
         } else {
-            if (!Utilities.isLmpOrAbove() || mCurrentFilter == null) {
+            if (!Utilities.ATLEAST_LOLLIPOP || mCurrentFilter == null) {
                 mPaint.setColorFilter(null);
                 invalidate();
             } else {

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -95,8 +95,6 @@ public void removeProviderChangeListener(Runnable callback) {
     }
 
     protected void onProvidersChanged() {
-        mLauncher.getModel().loadAndBindWidgetsAndShortcuts(mLauncher, mLauncher,
-                true /* refresh */);
         if (!mProviderChangeListeners.isEmpty()) {
             for (Runnable callback : new ArrayList<>(mProviderChangeListeners)) {
                 callback.run();

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -77,6 +77,7 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions,
     public boolean providesSearch();
     public boolean startSearch(String initialQuery, boolean selectInitialQuery,
             Bundle appSearchData, Rect sourceBounds);
+    public boolean startSearchFromAllApps(String query);
     @Deprecated
     public void startVoice();
     public boolean hasCustomContentToLeft();

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -143,7 +143,7 @@ public static final class Favorites implements BaseLauncherColumns {
          *
          * @return The unique content URL for the specified row.
          */
-        static Uri getContentUri(long id) {
+        public static Uri getContentUri(long id) {
             return Uri.parse("content://" + ProviderConfig.AUTHORITY +
                     "/" + TABLE_NAME + "/" + id);
         }

File: src/com/android/launcher3/LauncherViewPropertyAnimator.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.EnumSet;
 
 public class LauncherViewPropertyAnimator extends Animator implements AnimatorListener {
+
     enum Properties {
             TRANSLATION_X,
             TRANSLATION_Y,
@@ -51,13 +52,12 @@ enum Properties {
     long mStartDelay;
     long mDuration;
     TimeInterpolator mInterpolator;
-    ArrayList<Animator.AnimatorListener> mListeners;
+    ArrayList<Animator.AnimatorListener> mListeners = new ArrayList<>();
     boolean mRunning = false;
     FirstFrameAnimatorHelper mFirstFrameHelper;
 
     public LauncherViewPropertyAnimator(View target) {
         mTarget = target;
-        mListeners = new ArrayList<Animator.AnimatorListener>();
     }
 
     @Override

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2293,7 +2293,7 @@ public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
         // Besides disabling the accessibility long-click, this also prevents this view from getting
         // accessibility focus.
         info.setLongClickable(false);
-        if (Utilities.isLmpOrAbove()) {
+        if (Utilities.ATLEAST_LOLLIPOP) {
             info.removeAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_LONG_CLICK);
         }
     }

File: src/com/android/launcher3/UninstallDropTarget.java
Patch:
@@ -38,7 +38,7 @@ protected boolean supportsDrop(DragSource source, Object info) {
 
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     public static boolean supportsDrop(Context context, Object info) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+        if (Utilities.ATLEAST_JB_MR2) {
             UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);
             Bundle restrictions = userManager.getUserRestrictions();
             if (restrictions.getBoolean(UserManager.DISALLOW_APPS_CONTROL, false)

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AppWidgetManagerCompat {
     public static AppWidgetManagerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new AppWidgetManagerCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new AppWidgetManagerCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/AppWidgetManagerCompatV16.java
Patch:
@@ -54,10 +54,10 @@ public String loadLabel(LauncherAppWidgetProviderInfo info) {
     @Override
     public boolean bindAppWidgetIdIfAllowed(int appWidgetId, AppWidgetProviderInfo info,
             Bundle options) {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider);
-        } else {
+        if (Utilities.ATLEAST_JB_MR1) {
             return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider, options);
+        } else {
+            return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider);
         }
     }
 

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -53,7 +53,7 @@ protected LauncherAppsCompat() {
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new LauncherAppsCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new LauncherAppsCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/LauncherAppsCompatV16.java
Patch:
@@ -31,6 +31,7 @@
 import android.os.Bundle;
 import android.provider.Settings;
 
+import com.android.launcher3.Utilities;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -188,7 +189,7 @@ public void onReceive(Context context, Intent intent) {
                 // when moving a package or mounting/un-mounting external storage. Assume that
                 // it is a replacing operation.
                 final boolean replacing = intent.getBooleanExtra(Intent.EXTRA_REPLACING,
-                        Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT);
+                        !Utilities.ATLEAST_KITKAT);
                 String[] packages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
                 for (OnAppsChangedCallbackCompat callback : getCallbacks()) {
                     callback.onPackagesAvailable(packages, user, replacing);

File: src/com/android/launcher3/compat/PackageInstallerCompat.java
Patch:
@@ -34,7 +34,7 @@ public abstract class PackageInstallerCompat {
     public static PackageInstallerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new PackageInstallerCompatVL(context);
                 } else {
                     sInstance = new PackageInstallerCompatV16();

File: src/com/android/launcher3/model/AppNameComparator.java
Patch:
@@ -68,8 +68,6 @@ public int compare(String o1, String o2) {
      * Returns a locale-aware comparator that will alphabetically order a list of applications.
      */
     public Comparator<ItemInfo> getAppInfoComparator() {
-        // Clear the user serial cache so that we get serials as needed in the comparator
-        mAppInfoComparator.clearUserCache();
         return mAppInfoComparator;
     }
 

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -68,7 +68,7 @@ public class ManagedProfileHeuristic {
     private static final long AUTO_ADD_TO_FOLDER_DURATION = 8 * 60 * 60 * 1000;
 
     public static ManagedProfileHeuristic get(Context context, UserHandleCompat user) {
-        if (Utilities.isLmpOrAbove() && !UserHandleCompat.myUserHandle().equals(user)) {
+        if (Utilities.ATLEAST_LOLLIPOP && !UserHandleCompat.myUserHandle().equals(user)) {
             return new ManagedProfileHeuristic(context, user);
         }
         return null;
@@ -296,7 +296,7 @@ private boolean getUserApps(HashSet<String> outExistingApps) {
      * Verifies that entries corresponding to {@param users} exist and removes all invalid entries.
      */
     public static void processAllUsers(List<UserHandleCompat> users, Context context) {
-        if (!Utilities.isLmpOrAbove()) {
+        if (!Utilities.ATLEAST_LOLLIPOP) {
             return;
         }
         UserManagerCompat userManager = UserManagerCompat.getInstance(context);

File: src/com/android/launcher3/util/UiThreadCircularReveal.java
Patch:
@@ -47,7 +47,7 @@ public void onAnimationUpdate(ValueAnimator arg0) {
                 float progress = arg0.getAnimatedFraction();
                 outlineProvider.setProgress(progress);
                 revealView.invalidateOutline();
-                if (!Utilities.isLmpMR1OrAbove()) {
+                if (!Utilities.ATLEAST_LOLLIPOP_MR1) {
                     revealView.invalidate();
                 }
             }

File: src/com/android/launcher3/util/WallpaperUtils.java
Patch:
@@ -24,6 +24,8 @@
 import android.os.Build;
 import android.view.WindowManager;
 
+import com.android.launcher3.Utilities;
+
 /**
  * Utility methods for wallpaper management.
  */
@@ -99,7 +101,7 @@ public static Point getDefaultWallpaperSize(Resources res, WindowManager windowM
             int maxDim = Math.max(maxDims.x, maxDims.y);
             int minDim = Math.max(minDims.x, minDims.y);
 
-            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            if (Utilities.ATLEAST_JB_MR1) {
                 Point realSize = new Point();
                 windowManager.getDefaultDisplay().getRealSize(realSize);
                 maxDim = Math.max(realSize.x, realSize.y);

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -146,8 +146,8 @@ public void applyFromAppWidgetProviderInfo(LauncherAppWidgetProviderInfo info,
         mInfo = info;
         // TODO(hyunyoungs): setup a cache for these labels.
         mWidgetName.setText(AppWidgetManagerCompat.getInstance(getContext()).loadLabel(info));
-        int hSpan = Math.min(info.getSpanX(mLauncher), profile.numColumns);
-        int vSpan = Math.min(info.getSpanY(mLauncher), profile.numRows);
+        int hSpan = Math.min(info.spanX, profile.numColumns);
+        int vSpan = Math.min(info.spanY, profile.numRows);
         mWidgetDims.setText(String.format(mDimensionsFormatString, hSpan, vSpan));
         mWidgetPreviewLoader = loader;
     }

File: src/com/android/launcher3/widget/WidgetHostViewLoader.java
Patch:
@@ -15,6 +15,7 @@
 import com.android.launcher3.DragSource;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
+import com.android.launcher3.Utilities;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.util.Thunk;
 
@@ -131,7 +132,7 @@ public void run() {
     public static Bundle getDefaultOptionsForWidget(Launcher launcher, PendingAddWidgetInfo info) {
         Bundle options = null;
         Rect rect = new Rect();
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+        if (Utilities.ATLEAST_JB_MR1) {
             AppWidgetResizeFrame.getWidgetSizeRanges(launcher, info.spanX, info.spanY, rect);
             Rect padding = AppWidgetHostView.getDefaultPaddingForWidget(launcher,
                     info.componentName, null);

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -319,7 +319,6 @@ public void onDropCompleted(View target, DragObject d, boolean isFlingToDelete,
                 CellLayout layout = (CellLayout) workspace.getChildAt(currentScreen);
                 ItemInfo itemInfo = (ItemInfo) d.dragInfo;
                 if (layout != null) {
-                    layout.calculateSpans(itemInfo);
                     showOutOfSpaceMessage =
                             !layout.findCellForSpan(null, itemInfo.spanX, itemInfo.spanY);
                 }

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -75,8 +75,8 @@ public AppWidgetResizeFrame(Context context,
         mResizeMode = info.resizeMode;
         mDragLayer = dragLayer;
 
-        mMinHSpan = info.getMinSpanX(mLauncher);
-        mMinVSpan = info.getMinSpanY(mLauncher);
+        mMinHSpan = info.minSpanX;
+        mMinVSpan = info.minSpanY;
 
         setBackgroundResource(R.drawable.widget_resize_shadow);
         setForeground(getResources().getDrawable(R.drawable.widget_resize_frame));

File: src/com/android/launcher3/AppWidgetsRestoredReceiver.java
Patch:
@@ -13,6 +13,7 @@
 import android.util.Log;
 
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.compat.AppWidgetManagerCompat;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -48,7 +49,8 @@ static void restoreAppWidgetIds(Context context, int[] oldWidgetIds, int[] newWi
             final AppWidgetProviderInfo provider = widgets.getAppWidgetInfo(newWidgetIds[i]);
             final int state;
             if (LauncherModel.isValidProvider(provider)) {
-                state = LauncherAppWidgetInfo.RESTORE_COMPLETED;
+                // This will ensure that we show 'Click to setup' UI if required.
+                state = LauncherAppWidgetInfo.FLAG_UI_NOT_READY;
             } else {
                 state = LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY;
             }

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -355,7 +355,7 @@ public long parseAndAdd(XmlResourceParser parser) {
                     return addShortcut(info.loadLabel(mPackageManager).toString(),
                             intent, Favorites.ITEM_TYPE_APPLICATION);
                 } catch (PackageManager.NameNotFoundException e) {
-                    if (LOGD) Log.w(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
+                    Log.e(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
                 }
                 return -1;
             } else {
@@ -367,7 +367,7 @@ public long parseAndAdd(XmlResourceParser parser) {
          * Helper method to allow extending the parser capabilities
          */
         protected long invalidPackageOrClass(XmlResourceParser parser) {
-            if (LOGD) Log.d(TAG, "Skipping invalid <favorite> with no component");
+            Log.w(TAG, "Skipping invalid <favorite> with no component");
             return -1;
         }
     }

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -159,7 +159,7 @@ private boolean isEventOverFolder(Folder folder, MotionEvent ev) {
     }
 
     private boolean isEventOverDropTargetBar(MotionEvent ev) {
-        getDescendantRectRelativeToSelf(mLauncher.getSearchBar(), mHitRect);
+        getDescendantRectRelativeToSelf(mLauncher.getSearchDropTargetBar(), mHitRect);
         if (mHitRect.contains((int) ev.getX(), (int) ev.getY())) {
             return true;
         }
@@ -321,7 +321,7 @@ public void addChildrenForAccessibility(ArrayList<View> childrenForAccessibility
             childrenForAccessibility.add(currentFolder);
 
             if (isInAccessibleDrag()) {
-                childrenForAccessibility.add(mLauncher.getSearchBar());
+                childrenForAccessibility.add(mLauncher.getSearchDropTargetBar());
             }
         } else {
             super.addChildrenForAccessibility(childrenForAccessibility);

File: src/com/android/launcher3/DragView.java
Patch:
@@ -131,7 +131,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
         measure(ms, ms);
         mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
 
-        if (Utilities.isLmpOrAbove()) {
+        if (Utilities.ATLEAST_LOLLIPOP) {
             setElevation(getResources().getDimension(R.dimen.drag_elevation));
         }
     }
@@ -252,14 +252,14 @@ public void setColor(int color) {
             setColorScale(color, m2);
             m1.postConcat(m2);
 
-            if (Utilities.isLmpOrAbove()) {
+            if (Utilities.ATLEAST_LOLLIPOP) {
                 animateFilterTo(m1.getArray());
             } else {
                 mPaint.setColorFilter(new ColorMatrixColorFilter(m1));
                 invalidate();
             }
         } else {
-            if (!Utilities.isLmpOrAbove() || mCurrentFilter == null) {
+            if (!Utilities.ATLEAST_LOLLIPOP || mCurrentFilter == null) {
                 mPaint.setColorFilter(null);
                 invalidate();
             } else {

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -95,8 +95,6 @@ public void removeProviderChangeListener(Runnable callback) {
     }
 
     protected void onProvidersChanged() {
-        mLauncher.getModel().loadAndBindWidgetsAndShortcuts(mLauncher, mLauncher,
-                true /* refresh */);
         if (!mProviderChangeListeners.isEmpty()) {
             for (Runnable callback : new ArrayList<>(mProviderChangeListeners)) {
                 callback.run();

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -77,6 +77,7 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions,
     public boolean providesSearch();
     public boolean startSearch(String initialQuery, boolean selectInitialQuery,
             Bundle appSearchData, Rect sourceBounds);
+    public boolean startSearchFromAllApps(String query);
     @Deprecated
     public void startVoice();
     public boolean hasCustomContentToLeft();

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -143,7 +143,7 @@ public static final class Favorites implements BaseLauncherColumns {
          *
          * @return The unique content URL for the specified row.
          */
-        static Uri getContentUri(long id) {
+        public static Uri getContentUri(long id) {
             return Uri.parse("content://" + ProviderConfig.AUTHORITY +
                     "/" + TABLE_NAME + "/" + id);
         }

File: src/com/android/launcher3/LauncherViewPropertyAnimator.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.EnumSet;
 
 public class LauncherViewPropertyAnimator extends Animator implements AnimatorListener {
+
     enum Properties {
             TRANSLATION_X,
             TRANSLATION_Y,
@@ -51,13 +52,12 @@ enum Properties {
     long mStartDelay;
     long mDuration;
     TimeInterpolator mInterpolator;
-    ArrayList<Animator.AnimatorListener> mListeners;
+    ArrayList<Animator.AnimatorListener> mListeners = new ArrayList<>();
     boolean mRunning = false;
     FirstFrameAnimatorHelper mFirstFrameHelper;
 
     public LauncherViewPropertyAnimator(View target) {
         mTarget = target;
-        mListeners = new ArrayList<Animator.AnimatorListener>();
     }
 
     @Override

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2293,7 +2293,7 @@ public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
         // Besides disabling the accessibility long-click, this also prevents this view from getting
         // accessibility focus.
         info.setLongClickable(false);
-        if (Utilities.isLmpOrAbove()) {
+        if (Utilities.ATLEAST_LOLLIPOP) {
             info.removeAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_LONG_CLICK);
         }
     }

File: src/com/android/launcher3/UninstallDropTarget.java
Patch:
@@ -38,7 +38,7 @@ protected boolean supportsDrop(DragSource source, Object info) {
 
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     public static boolean supportsDrop(Context context, Object info) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+        if (Utilities.ATLEAST_JB_MR2) {
             UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);
             Bundle restrictions = userManager.getUserRestrictions();
             if (restrictions.getBoolean(UserManager.DISALLOW_APPS_CONTROL, false)

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AppWidgetManagerCompat {
     public static AppWidgetManagerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new AppWidgetManagerCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new AppWidgetManagerCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/AppWidgetManagerCompatV16.java
Patch:
@@ -54,10 +54,10 @@ public String loadLabel(LauncherAppWidgetProviderInfo info) {
     @Override
     public boolean bindAppWidgetIdIfAllowed(int appWidgetId, AppWidgetProviderInfo info,
             Bundle options) {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider);
-        } else {
+        if (Utilities.ATLEAST_JB_MR1) {
             return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider, options);
+        } else {
+            return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider);
         }
     }
 

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -53,7 +53,7 @@ protected LauncherAppsCompat() {
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new LauncherAppsCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new LauncherAppsCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/LauncherAppsCompatV16.java
Patch:
@@ -31,6 +31,7 @@
 import android.os.Bundle;
 import android.provider.Settings;
 
+import com.android.launcher3.Utilities;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -188,7 +189,7 @@ public void onReceive(Context context, Intent intent) {
                 // when moving a package or mounting/un-mounting external storage. Assume that
                 // it is a replacing operation.
                 final boolean replacing = intent.getBooleanExtra(Intent.EXTRA_REPLACING,
-                        Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT);
+                        !Utilities.ATLEAST_KITKAT);
                 String[] packages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
                 for (OnAppsChangedCallbackCompat callback : getCallbacks()) {
                     callback.onPackagesAvailable(packages, user, replacing);

File: src/com/android/launcher3/compat/PackageInstallerCompat.java
Patch:
@@ -34,7 +34,7 @@ public abstract class PackageInstallerCompat {
     public static PackageInstallerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new PackageInstallerCompatVL(context);
                 } else {
                     sInstance = new PackageInstallerCompatV16();

File: src/com/android/launcher3/model/AppNameComparator.java
Patch:
@@ -68,8 +68,6 @@ public int compare(String o1, String o2) {
      * Returns a locale-aware comparator that will alphabetically order a list of applications.
      */
     public Comparator<ItemInfo> getAppInfoComparator() {
-        // Clear the user serial cache so that we get serials as needed in the comparator
-        mAppInfoComparator.clearUserCache();
         return mAppInfoComparator;
     }
 

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -68,7 +68,7 @@ public class ManagedProfileHeuristic {
     private static final long AUTO_ADD_TO_FOLDER_DURATION = 8 * 60 * 60 * 1000;
 
     public static ManagedProfileHeuristic get(Context context, UserHandleCompat user) {
-        if (Utilities.isLmpOrAbove() && !UserHandleCompat.myUserHandle().equals(user)) {
+        if (Utilities.ATLEAST_LOLLIPOP && !UserHandleCompat.myUserHandle().equals(user)) {
             return new ManagedProfileHeuristic(context, user);
         }
         return null;
@@ -296,7 +296,7 @@ private boolean getUserApps(HashSet<String> outExistingApps) {
      * Verifies that entries corresponding to {@param users} exist and removes all invalid entries.
      */
     public static void processAllUsers(List<UserHandleCompat> users, Context context) {
-        if (!Utilities.isLmpOrAbove()) {
+        if (!Utilities.ATLEAST_LOLLIPOP) {
             return;
         }
         UserManagerCompat userManager = UserManagerCompat.getInstance(context);

File: src/com/android/launcher3/util/UiThreadCircularReveal.java
Patch:
@@ -47,7 +47,7 @@ public void onAnimationUpdate(ValueAnimator arg0) {
                 float progress = arg0.getAnimatedFraction();
                 outlineProvider.setProgress(progress);
                 revealView.invalidateOutline();
-                if (!Utilities.isLmpMR1OrAbove()) {
+                if (!Utilities.ATLEAST_LOLLIPOP_MR1) {
                     revealView.invalidate();
                 }
             }

File: src/com/android/launcher3/util/WallpaperUtils.java
Patch:
@@ -24,6 +24,8 @@
 import android.os.Build;
 import android.view.WindowManager;
 
+import com.android.launcher3.Utilities;
+
 /**
  * Utility methods for wallpaper management.
  */
@@ -99,7 +101,7 @@ public static Point getDefaultWallpaperSize(Resources res, WindowManager windowM
             int maxDim = Math.max(maxDims.x, maxDims.y);
             int minDim = Math.max(minDims.x, minDims.y);
 
-            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            if (Utilities.ATLEAST_JB_MR1) {
                 Point realSize = new Point();
                 windowManager.getDefaultDisplay().getRealSize(realSize);
                 maxDim = Math.max(realSize.x, realSize.y);

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -146,8 +146,8 @@ public void applyFromAppWidgetProviderInfo(LauncherAppWidgetProviderInfo info,
         mInfo = info;
         // TODO(hyunyoungs): setup a cache for these labels.
         mWidgetName.setText(AppWidgetManagerCompat.getInstance(getContext()).loadLabel(info));
-        int hSpan = Math.min(info.getSpanX(mLauncher), profile.numColumns);
-        int vSpan = Math.min(info.getSpanY(mLauncher), profile.numRows);
+        int hSpan = Math.min(info.spanX, profile.numColumns);
+        int vSpan = Math.min(info.spanY, profile.numRows);
         mWidgetDims.setText(String.format(mDimensionsFormatString, hSpan, vSpan));
         mWidgetPreviewLoader = loader;
     }

File: src/com/android/launcher3/widget/WidgetHostViewLoader.java
Patch:
@@ -15,6 +15,7 @@
 import com.android.launcher3.DragSource;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
+import com.android.launcher3.Utilities;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.util.Thunk;
 
@@ -131,7 +132,7 @@ public void run() {
     public static Bundle getDefaultOptionsForWidget(Launcher launcher, PendingAddWidgetInfo info) {
         Bundle options = null;
         Rect rect = new Rect();
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+        if (Utilities.ATLEAST_JB_MR1) {
             AppWidgetResizeFrame.getWidgetSizeRanges(launcher, info.spanX, info.spanY, rect);
             Rect padding = AppWidgetHostView.getDefaultPaddingForWidget(launcher,
                     info.componentName, null);

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -319,7 +319,6 @@ public void onDropCompleted(View target, DragObject d, boolean isFlingToDelete,
                 CellLayout layout = (CellLayout) workspace.getChildAt(currentScreen);
                 ItemInfo itemInfo = (ItemInfo) d.dragInfo;
                 if (layout != null) {
-                    layout.calculateSpans(itemInfo);
                     showOutOfSpaceMessage =
                             !layout.findCellForSpan(null, itemInfo.spanX, itemInfo.spanY);
                 }

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -75,8 +75,8 @@ public AppWidgetResizeFrame(Context context,
         mResizeMode = info.resizeMode;
         mDragLayer = dragLayer;
 
-        mMinHSpan = info.getMinSpanX(mLauncher);
-        mMinVSpan = info.getMinSpanY(mLauncher);
+        mMinHSpan = info.minSpanX;
+        mMinVSpan = info.minSpanY;
 
         setBackgroundResource(R.drawable.widget_resize_shadow);
         setForeground(getResources().getDrawable(R.drawable.widget_resize_frame));

File: src/com/android/launcher3/AppWidgetsRestoredReceiver.java
Patch:
@@ -13,6 +13,7 @@
 import android.util.Log;
 
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.compat.AppWidgetManagerCompat;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -48,7 +49,8 @@ static void restoreAppWidgetIds(Context context, int[] oldWidgetIds, int[] newWi
             final AppWidgetProviderInfo provider = widgets.getAppWidgetInfo(newWidgetIds[i]);
             final int state;
             if (LauncherModel.isValidProvider(provider)) {
-                state = LauncherAppWidgetInfo.RESTORE_COMPLETED;
+                // This will ensure that we show 'Click to setup' UI if required.
+                state = LauncherAppWidgetInfo.FLAG_UI_NOT_READY;
             } else {
                 state = LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY;
             }

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -355,7 +355,7 @@ public long parseAndAdd(XmlResourceParser parser) {
                     return addShortcut(info.loadLabel(mPackageManager).toString(),
                             intent, Favorites.ITEM_TYPE_APPLICATION);
                 } catch (PackageManager.NameNotFoundException e) {
-                    if (LOGD) Log.w(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
+                    Log.e(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
                 }
                 return -1;
             } else {
@@ -367,7 +367,7 @@ public long parseAndAdd(XmlResourceParser parser) {
          * Helper method to allow extending the parser capabilities
          */
         protected long invalidPackageOrClass(XmlResourceParser parser) {
-            if (LOGD) Log.d(TAG, "Skipping invalid <favorite> with no component");
+            Log.w(TAG, "Skipping invalid <favorite> with no component");
             return -1;
         }
     }

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -159,7 +159,7 @@ private boolean isEventOverFolder(Folder folder, MotionEvent ev) {
     }
 
     private boolean isEventOverDropTargetBar(MotionEvent ev) {
-        getDescendantRectRelativeToSelf(mLauncher.getSearchBar(), mHitRect);
+        getDescendantRectRelativeToSelf(mLauncher.getSearchDropTargetBar(), mHitRect);
         if (mHitRect.contains((int) ev.getX(), (int) ev.getY())) {
             return true;
         }
@@ -321,7 +321,7 @@ public void addChildrenForAccessibility(ArrayList<View> childrenForAccessibility
             childrenForAccessibility.add(currentFolder);
 
             if (isInAccessibleDrag()) {
-                childrenForAccessibility.add(mLauncher.getSearchBar());
+                childrenForAccessibility.add(mLauncher.getSearchDropTargetBar());
             }
         } else {
             super.addChildrenForAccessibility(childrenForAccessibility);

File: src/com/android/launcher3/DragView.java
Patch:
@@ -131,7 +131,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
         measure(ms, ms);
         mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
 
-        if (Utilities.isLmpOrAbove()) {
+        if (Utilities.ATLEAST_LOLLIPOP) {
             setElevation(getResources().getDimension(R.dimen.drag_elevation));
         }
     }
@@ -252,14 +252,14 @@ public void setColor(int color) {
             setColorScale(color, m2);
             m1.postConcat(m2);
 
-            if (Utilities.isLmpOrAbove()) {
+            if (Utilities.ATLEAST_LOLLIPOP) {
                 animateFilterTo(m1.getArray());
             } else {
                 mPaint.setColorFilter(new ColorMatrixColorFilter(m1));
                 invalidate();
             }
         } else {
-            if (!Utilities.isLmpOrAbove() || mCurrentFilter == null) {
+            if (!Utilities.ATLEAST_LOLLIPOP || mCurrentFilter == null) {
                 mPaint.setColorFilter(null);
                 invalidate();
             } else {

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -95,8 +95,6 @@ public void removeProviderChangeListener(Runnable callback) {
     }
 
     protected void onProvidersChanged() {
-        mLauncher.getModel().loadAndBindWidgetsAndShortcuts(mLauncher, mLauncher,
-                true /* refresh */);
         if (!mProviderChangeListeners.isEmpty()) {
             for (Runnable callback : new ArrayList<>(mProviderChangeListeners)) {
                 callback.run();

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -77,6 +77,7 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions,
     public boolean providesSearch();
     public boolean startSearch(String initialQuery, boolean selectInitialQuery,
             Bundle appSearchData, Rect sourceBounds);
+    public boolean startSearchFromAllApps(String query);
     @Deprecated
     public void startVoice();
     public boolean hasCustomContentToLeft();

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -143,7 +143,7 @@ public static final class Favorites implements BaseLauncherColumns {
          *
          * @return The unique content URL for the specified row.
          */
-        static Uri getContentUri(long id) {
+        public static Uri getContentUri(long id) {
             return Uri.parse("content://" + ProviderConfig.AUTHORITY +
                     "/" + TABLE_NAME + "/" + id);
         }

File: src/com/android/launcher3/LauncherViewPropertyAnimator.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.EnumSet;
 
 public class LauncherViewPropertyAnimator extends Animator implements AnimatorListener {
+
     enum Properties {
             TRANSLATION_X,
             TRANSLATION_Y,
@@ -51,13 +52,12 @@ enum Properties {
     long mStartDelay;
     long mDuration;
     TimeInterpolator mInterpolator;
-    ArrayList<Animator.AnimatorListener> mListeners;
+    ArrayList<Animator.AnimatorListener> mListeners = new ArrayList<>();
     boolean mRunning = false;
     FirstFrameAnimatorHelper mFirstFrameHelper;
 
     public LauncherViewPropertyAnimator(View target) {
         mTarget = target;
-        mListeners = new ArrayList<Animator.AnimatorListener>();
     }
 
     @Override

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2293,7 +2293,7 @@ public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
         // Besides disabling the accessibility long-click, this also prevents this view from getting
         // accessibility focus.
         info.setLongClickable(false);
-        if (Utilities.isLmpOrAbove()) {
+        if (Utilities.ATLEAST_LOLLIPOP) {
             info.removeAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_LONG_CLICK);
         }
     }

File: src/com/android/launcher3/UninstallDropTarget.java
Patch:
@@ -38,7 +38,7 @@ protected boolean supportsDrop(DragSource source, Object info) {
 
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     public static boolean supportsDrop(Context context, Object info) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+        if (Utilities.ATLEAST_JB_MR2) {
             UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);
             Bundle restrictions = userManager.getUserRestrictions();
             if (restrictions.getBoolean(UserManager.DISALLOW_APPS_CONTROL, false)

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AppWidgetManagerCompat {
     public static AppWidgetManagerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new AppWidgetManagerCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new AppWidgetManagerCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/AppWidgetManagerCompatV16.java
Patch:
@@ -54,10 +54,10 @@ public String loadLabel(LauncherAppWidgetProviderInfo info) {
     @Override
     public boolean bindAppWidgetIdIfAllowed(int appWidgetId, AppWidgetProviderInfo info,
             Bundle options) {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider);
-        } else {
+        if (Utilities.ATLEAST_JB_MR1) {
             return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider, options);
+        } else {
+            return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider);
         }
     }
 

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -53,7 +53,7 @@ protected LauncherAppsCompat() {
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new LauncherAppsCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new LauncherAppsCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/LauncherAppsCompatV16.java
Patch:
@@ -31,6 +31,7 @@
 import android.os.Bundle;
 import android.provider.Settings;
 
+import com.android.launcher3.Utilities;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -188,7 +189,7 @@ public void onReceive(Context context, Intent intent) {
                 // when moving a package or mounting/un-mounting external storage. Assume that
                 // it is a replacing operation.
                 final boolean replacing = intent.getBooleanExtra(Intent.EXTRA_REPLACING,
-                        Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT);
+                        !Utilities.ATLEAST_KITKAT);
                 String[] packages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
                 for (OnAppsChangedCallbackCompat callback : getCallbacks()) {
                     callback.onPackagesAvailable(packages, user, replacing);

File: src/com/android/launcher3/compat/PackageInstallerCompat.java
Patch:
@@ -34,7 +34,7 @@ public abstract class PackageInstallerCompat {
     public static PackageInstallerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new PackageInstallerCompatVL(context);
                 } else {
                     sInstance = new PackageInstallerCompatV16();

File: src/com/android/launcher3/model/AppNameComparator.java
Patch:
@@ -68,8 +68,6 @@ public int compare(String o1, String o2) {
      * Returns a locale-aware comparator that will alphabetically order a list of applications.
      */
     public Comparator<ItemInfo> getAppInfoComparator() {
-        // Clear the user serial cache so that we get serials as needed in the comparator
-        mAppInfoComparator.clearUserCache();
         return mAppInfoComparator;
     }
 

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -68,7 +68,7 @@ public class ManagedProfileHeuristic {
     private static final long AUTO_ADD_TO_FOLDER_DURATION = 8 * 60 * 60 * 1000;
 
     public static ManagedProfileHeuristic get(Context context, UserHandleCompat user) {
-        if (Utilities.isLmpOrAbove() && !UserHandleCompat.myUserHandle().equals(user)) {
+        if (Utilities.ATLEAST_LOLLIPOP && !UserHandleCompat.myUserHandle().equals(user)) {
             return new ManagedProfileHeuristic(context, user);
         }
         return null;
@@ -296,7 +296,7 @@ private boolean getUserApps(HashSet<String> outExistingApps) {
      * Verifies that entries corresponding to {@param users} exist and removes all invalid entries.
      */
     public static void processAllUsers(List<UserHandleCompat> users, Context context) {
-        if (!Utilities.isLmpOrAbove()) {
+        if (!Utilities.ATLEAST_LOLLIPOP) {
             return;
         }
         UserManagerCompat userManager = UserManagerCompat.getInstance(context);

File: src/com/android/launcher3/util/UiThreadCircularReveal.java
Patch:
@@ -47,7 +47,7 @@ public void onAnimationUpdate(ValueAnimator arg0) {
                 float progress = arg0.getAnimatedFraction();
                 outlineProvider.setProgress(progress);
                 revealView.invalidateOutline();
-                if (!Utilities.isLmpMR1OrAbove()) {
+                if (!Utilities.ATLEAST_LOLLIPOP_MR1) {
                     revealView.invalidate();
                 }
             }

File: src/com/android/launcher3/util/WallpaperUtils.java
Patch:
@@ -24,6 +24,8 @@
 import android.os.Build;
 import android.view.WindowManager;
 
+import com.android.launcher3.Utilities;
+
 /**
  * Utility methods for wallpaper management.
  */
@@ -99,7 +101,7 @@ public static Point getDefaultWallpaperSize(Resources res, WindowManager windowM
             int maxDim = Math.max(maxDims.x, maxDims.y);
             int minDim = Math.max(minDims.x, minDims.y);
 
-            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            if (Utilities.ATLEAST_JB_MR1) {
                 Point realSize = new Point();
                 windowManager.getDefaultDisplay().getRealSize(realSize);
                 maxDim = Math.max(realSize.x, realSize.y);

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -146,8 +146,8 @@ public void applyFromAppWidgetProviderInfo(LauncherAppWidgetProviderInfo info,
         mInfo = info;
         // TODO(hyunyoungs): setup a cache for these labels.
         mWidgetName.setText(AppWidgetManagerCompat.getInstance(getContext()).loadLabel(info));
-        int hSpan = Math.min(info.getSpanX(mLauncher), profile.numColumns);
-        int vSpan = Math.min(info.getSpanY(mLauncher), profile.numRows);
+        int hSpan = Math.min(info.spanX, profile.numColumns);
+        int vSpan = Math.min(info.spanY, profile.numRows);
         mWidgetDims.setText(String.format(mDimensionsFormatString, hSpan, vSpan));
         mWidgetPreviewLoader = loader;
     }

File: src/com/android/launcher3/widget/WidgetHostViewLoader.java
Patch:
@@ -15,6 +15,7 @@
 import com.android.launcher3.DragSource;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
+import com.android.launcher3.Utilities;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.util.Thunk;
 
@@ -131,7 +132,7 @@ public void run() {
     public static Bundle getDefaultOptionsForWidget(Launcher launcher, PendingAddWidgetInfo info) {
         Bundle options = null;
         Rect rect = new Rect();
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+        if (Utilities.ATLEAST_JB_MR1) {
             AppWidgetResizeFrame.getWidgetSizeRanges(launcher, info.spanX, info.spanY, rect);
             Rect padding = AppWidgetHostView.getDefaultPaddingForWidget(launcher,
                     info.componentName, null);

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -319,7 +319,6 @@ public void onDropCompleted(View target, DragObject d, boolean isFlingToDelete,
                 CellLayout layout = (CellLayout) workspace.getChildAt(currentScreen);
                 ItemInfo itemInfo = (ItemInfo) d.dragInfo;
                 if (layout != null) {
-                    layout.calculateSpans(itemInfo);
                     showOutOfSpaceMessage =
                             !layout.findCellForSpan(null, itemInfo.spanX, itemInfo.spanY);
                 }

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -75,8 +75,8 @@ public AppWidgetResizeFrame(Context context,
         mResizeMode = info.resizeMode;
         mDragLayer = dragLayer;
 
-        mMinHSpan = info.getMinSpanX(mLauncher);
-        mMinVSpan = info.getMinSpanY(mLauncher);
+        mMinHSpan = info.minSpanX;
+        mMinVSpan = info.minSpanY;
 
         setBackgroundResource(R.drawable.widget_resize_shadow);
         setForeground(getResources().getDrawable(R.drawable.widget_resize_frame));

File: src/com/android/launcher3/AppWidgetsRestoredReceiver.java
Patch:
@@ -13,6 +13,7 @@
 import android.util.Log;
 
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.compat.AppWidgetManagerCompat;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -48,7 +49,8 @@ static void restoreAppWidgetIds(Context context, int[] oldWidgetIds, int[] newWi
             final AppWidgetProviderInfo provider = widgets.getAppWidgetInfo(newWidgetIds[i]);
             final int state;
             if (LauncherModel.isValidProvider(provider)) {
-                state = LauncherAppWidgetInfo.RESTORE_COMPLETED;
+                // This will ensure that we show 'Click to setup' UI if required.
+                state = LauncherAppWidgetInfo.FLAG_UI_NOT_READY;
             } else {
                 state = LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY;
             }

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -355,7 +355,7 @@ public long parseAndAdd(XmlResourceParser parser) {
                     return addShortcut(info.loadLabel(mPackageManager).toString(),
                             intent, Favorites.ITEM_TYPE_APPLICATION);
                 } catch (PackageManager.NameNotFoundException e) {
-                    if (LOGD) Log.w(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
+                    Log.e(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
                 }
                 return -1;
             } else {
@@ -367,7 +367,7 @@ public long parseAndAdd(XmlResourceParser parser) {
          * Helper method to allow extending the parser capabilities
          */
         protected long invalidPackageOrClass(XmlResourceParser parser) {
-            if (LOGD) Log.d(TAG, "Skipping invalid <favorite> with no component");
+            Log.w(TAG, "Skipping invalid <favorite> with no component");
             return -1;
         }
     }

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -159,7 +159,7 @@ private boolean isEventOverFolder(Folder folder, MotionEvent ev) {
     }
 
     private boolean isEventOverDropTargetBar(MotionEvent ev) {
-        getDescendantRectRelativeToSelf(mLauncher.getSearchBar(), mHitRect);
+        getDescendantRectRelativeToSelf(mLauncher.getSearchDropTargetBar(), mHitRect);
         if (mHitRect.contains((int) ev.getX(), (int) ev.getY())) {
             return true;
         }
@@ -321,7 +321,7 @@ public void addChildrenForAccessibility(ArrayList<View> childrenForAccessibility
             childrenForAccessibility.add(currentFolder);
 
             if (isInAccessibleDrag()) {
-                childrenForAccessibility.add(mLauncher.getSearchBar());
+                childrenForAccessibility.add(mLauncher.getSearchDropTargetBar());
             }
         } else {
             super.addChildrenForAccessibility(childrenForAccessibility);

File: src/com/android/launcher3/DragView.java
Patch:
@@ -131,7 +131,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
         measure(ms, ms);
         mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
 
-        if (Utilities.isLmpOrAbove()) {
+        if (Utilities.ATLEAST_LOLLIPOP) {
             setElevation(getResources().getDimension(R.dimen.drag_elevation));
         }
     }
@@ -252,14 +252,14 @@ public void setColor(int color) {
             setColorScale(color, m2);
             m1.postConcat(m2);
 
-            if (Utilities.isLmpOrAbove()) {
+            if (Utilities.ATLEAST_LOLLIPOP) {
                 animateFilterTo(m1.getArray());
             } else {
                 mPaint.setColorFilter(new ColorMatrixColorFilter(m1));
                 invalidate();
             }
         } else {
-            if (!Utilities.isLmpOrAbove() || mCurrentFilter == null) {
+            if (!Utilities.ATLEAST_LOLLIPOP || mCurrentFilter == null) {
                 mPaint.setColorFilter(null);
                 invalidate();
             } else {

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -95,8 +95,6 @@ public void removeProviderChangeListener(Runnable callback) {
     }
 
     protected void onProvidersChanged() {
-        mLauncher.getModel().loadAndBindWidgetsAndShortcuts(mLauncher, mLauncher,
-                true /* refresh */);
         if (!mProviderChangeListeners.isEmpty()) {
             for (Runnable callback : new ArrayList<>(mProviderChangeListeners)) {
                 callback.run();

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -77,6 +77,7 @@ public void onRequestPermissionsResult(int requestCode, String[] permissions,
     public boolean providesSearch();
     public boolean startSearch(String initialQuery, boolean selectInitialQuery,
             Bundle appSearchData, Rect sourceBounds);
+    public boolean startSearchFromAllApps(String query);
     @Deprecated
     public void startVoice();
     public boolean hasCustomContentToLeft();

File: src/com/android/launcher3/LauncherSettings.java
Patch:
@@ -143,7 +143,7 @@ public static final class Favorites implements BaseLauncherColumns {
          *
          * @return The unique content URL for the specified row.
          */
-        static Uri getContentUri(long id) {
+        public static Uri getContentUri(long id) {
             return Uri.parse("content://" + ProviderConfig.AUTHORITY +
                     "/" + TABLE_NAME + "/" + id);
         }

File: src/com/android/launcher3/LauncherViewPropertyAnimator.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.EnumSet;
 
 public class LauncherViewPropertyAnimator extends Animator implements AnimatorListener {
+
     enum Properties {
             TRANSLATION_X,
             TRANSLATION_Y,
@@ -51,13 +52,12 @@ enum Properties {
     long mStartDelay;
     long mDuration;
     TimeInterpolator mInterpolator;
-    ArrayList<Animator.AnimatorListener> mListeners;
+    ArrayList<Animator.AnimatorListener> mListeners = new ArrayList<>();
     boolean mRunning = false;
     FirstFrameAnimatorHelper mFirstFrameHelper;
 
     public LauncherViewPropertyAnimator(View target) {
         mTarget = target;
-        mListeners = new ArrayList<Animator.AnimatorListener>();
     }
 
     @Override

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2293,7 +2293,7 @@ public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info) {
         // Besides disabling the accessibility long-click, this also prevents this view from getting
         // accessibility focus.
         info.setLongClickable(false);
-        if (Utilities.isLmpOrAbove()) {
+        if (Utilities.ATLEAST_LOLLIPOP) {
             info.removeAction(AccessibilityNodeInfo.AccessibilityAction.ACTION_LONG_CLICK);
         }
     }

File: src/com/android/launcher3/UninstallDropTarget.java
Patch:
@@ -38,7 +38,7 @@ protected boolean supportsDrop(DragSource source, Object info) {
 
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     public static boolean supportsDrop(Context context, Object info) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+        if (Utilities.ATLEAST_JB_MR2) {
             UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);
             Bundle restrictions = userManager.getUserRestrictions();
             if (restrictions.getBoolean(UserManager.DISALLOW_APPS_CONTROL, false)

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AppWidgetManagerCompat {
     public static AppWidgetManagerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new AppWidgetManagerCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new AppWidgetManagerCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/AppWidgetManagerCompatV16.java
Patch:
@@ -54,10 +54,10 @@ public String loadLabel(LauncherAppWidgetProviderInfo info) {
     @Override
     public boolean bindAppWidgetIdIfAllowed(int appWidgetId, AppWidgetProviderInfo info,
             Bundle options) {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider);
-        } else {
+        if (Utilities.ATLEAST_JB_MR1) {
             return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider, options);
+        } else {
+            return mAppWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId, info.provider);
         }
     }
 

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -53,7 +53,7 @@ protected LauncherAppsCompat() {
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new LauncherAppsCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new LauncherAppsCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/LauncherAppsCompatV16.java
Patch:
@@ -31,6 +31,7 @@
 import android.os.Bundle;
 import android.provider.Settings;
 
+import com.android.launcher3.Utilities;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;
@@ -188,7 +189,7 @@ public void onReceive(Context context, Intent intent) {
                 // when moving a package or mounting/un-mounting external storage. Assume that
                 // it is a replacing operation.
                 final boolean replacing = intent.getBooleanExtra(Intent.EXTRA_REPLACING,
-                        Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT);
+                        !Utilities.ATLEAST_KITKAT);
                 String[] packages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
                 for (OnAppsChangedCallbackCompat callback : getCallbacks()) {
                     callback.onPackagesAvailable(packages, user, replacing);

File: src/com/android/launcher3/compat/PackageInstallerCompat.java
Patch:
@@ -34,7 +34,7 @@ public abstract class PackageInstallerCompat {
     public static PackageInstallerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmpOrAbove()) {
+                if (Utilities.ATLEAST_LOLLIPOP) {
                     sInstance = new PackageInstallerCompatVL(context);
                 } else {
                     sInstance = new PackageInstallerCompatV16();

File: src/com/android/launcher3/model/AppNameComparator.java
Patch:
@@ -68,8 +68,6 @@ public int compare(String o1, String o2) {
      * Returns a locale-aware comparator that will alphabetically order a list of applications.
      */
     public Comparator<ItemInfo> getAppInfoComparator() {
-        // Clear the user serial cache so that we get serials as needed in the comparator
-        mAppInfoComparator.clearUserCache();
         return mAppInfoComparator;
     }
 

File: src/com/android/launcher3/util/ManagedProfileHeuristic.java
Patch:
@@ -68,7 +68,7 @@ public class ManagedProfileHeuristic {
     private static final long AUTO_ADD_TO_FOLDER_DURATION = 8 * 60 * 60 * 1000;
 
     public static ManagedProfileHeuristic get(Context context, UserHandleCompat user) {
-        if (Utilities.isLmpOrAbove() && !UserHandleCompat.myUserHandle().equals(user)) {
+        if (Utilities.ATLEAST_LOLLIPOP && !UserHandleCompat.myUserHandle().equals(user)) {
             return new ManagedProfileHeuristic(context, user);
         }
         return null;
@@ -296,7 +296,7 @@ private boolean getUserApps(HashSet<String> outExistingApps) {
      * Verifies that entries corresponding to {@param users} exist and removes all invalid entries.
      */
     public static void processAllUsers(List<UserHandleCompat> users, Context context) {
-        if (!Utilities.isLmpOrAbove()) {
+        if (!Utilities.ATLEAST_LOLLIPOP) {
             return;
         }
         UserManagerCompat userManager = UserManagerCompat.getInstance(context);

File: src/com/android/launcher3/util/UiThreadCircularReveal.java
Patch:
@@ -47,7 +47,7 @@ public void onAnimationUpdate(ValueAnimator arg0) {
                 float progress = arg0.getAnimatedFraction();
                 outlineProvider.setProgress(progress);
                 revealView.invalidateOutline();
-                if (!Utilities.isLmpMR1OrAbove()) {
+                if (!Utilities.ATLEAST_LOLLIPOP_MR1) {
                     revealView.invalidate();
                 }
             }

File: src/com/android/launcher3/util/WallpaperUtils.java
Patch:
@@ -24,6 +24,8 @@
 import android.os.Build;
 import android.view.WindowManager;
 
+import com.android.launcher3.Utilities;
+
 /**
  * Utility methods for wallpaper management.
  */
@@ -99,7 +101,7 @@ public static Point getDefaultWallpaperSize(Resources res, WindowManager windowM
             int maxDim = Math.max(maxDims.x, maxDims.y);
             int minDim = Math.max(minDims.x, minDims.y);
 
-            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            if (Utilities.ATLEAST_JB_MR1) {
                 Point realSize = new Point();
                 windowManager.getDefaultDisplay().getRealSize(realSize);
                 maxDim = Math.max(realSize.x, realSize.y);

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -146,8 +146,8 @@ public void applyFromAppWidgetProviderInfo(LauncherAppWidgetProviderInfo info,
         mInfo = info;
         // TODO(hyunyoungs): setup a cache for these labels.
         mWidgetName.setText(AppWidgetManagerCompat.getInstance(getContext()).loadLabel(info));
-        int hSpan = Math.min(info.getSpanX(mLauncher), profile.numColumns);
-        int vSpan = Math.min(info.getSpanY(mLauncher), profile.numRows);
+        int hSpan = Math.min(info.spanX, profile.numColumns);
+        int vSpan = Math.min(info.spanY, profile.numRows);
         mWidgetDims.setText(String.format(mDimensionsFormatString, hSpan, vSpan));
         mWidgetPreviewLoader = loader;
     }

File: src/com/android/launcher3/widget/WidgetHostViewLoader.java
Patch:
@@ -15,6 +15,7 @@
 import com.android.launcher3.DragSource;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
+import com.android.launcher3.Utilities;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.util.Thunk;
 
@@ -131,7 +132,7 @@ public void run() {
     public static Bundle getDefaultOptionsForWidget(Launcher launcher, PendingAddWidgetInfo info) {
         Bundle options = null;
         Rect rect = new Rect();
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+        if (Utilities.ATLEAST_JB_MR1) {
             AppWidgetResizeFrame.getWidgetSizeRanges(launcher, info.spanX, info.spanY, rect);
             Rect padding = AppWidgetHostView.getDefaultPaddingForWidget(launcher,
                     info.componentName, null);

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -319,7 +319,6 @@ public void onDropCompleted(View target, DragObject d, boolean isFlingToDelete,
                 CellLayout layout = (CellLayout) workspace.getChildAt(currentScreen);
                 ItemInfo itemInfo = (ItemInfo) d.dragInfo;
                 if (layout != null) {
-                    layout.calculateSpans(itemInfo);
                     showOutOfSpaceMessage =
                             !layout.findCellForSpan(null, itemInfo.spanX, itemInfo.spanY);
                 }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1120,7 +1120,7 @@ protected void reinflateWidgetsIfNecessary() {
                     if (lahv != null && lahv.isReinflateRequired()) {
                         // Remove and rebind the current widget (which was inflated in the wrong
                         // orientation), but don't delete it from the database
-                        mLauncher.removeItem(lahv, info, false  /* deleteFromDb */);
+                        mLauncher.removeItem(lahv, null, info, false  /* deleteFromDb */);
                         mLauncher.bindAppWidget(info);
                     }
                 }
@@ -4521,7 +4521,7 @@ public void run() {
                 if (info.hostView instanceof PendingAppWidgetHostView) {
                     // Remove and rebind the current widget, but don't delete it from the database
                     PendingAppWidgetHostView view = (PendingAppWidgetHostView) info.hostView;
-                    mLauncher.removeItem(view, info, false /* deleteFromDb */);
+                    mLauncher.removeItem(view, null, info, false /* deleteFromDb */);
                     mLauncher.bindAppWidget(info);
                 }
             }

File: WallpaperPicker/src/com/android/launcher3/ThirdPartyWallpaperPickerListAdapter.java
Patch:
@@ -54,7 +54,9 @@ public void onClick(WallpaperPickerActivity a) {
             final ComponentName itemComponentName = new ComponentName(
                     mResolveInfo.activityInfo.packageName, mResolveInfo.activityInfo.name);
             Intent launchIntent = new Intent(Intent.ACTION_SET_WALLPAPER);
-            launchIntent.setComponent(itemComponentName);
+            launchIntent.setComponent(itemComponentName)
+            .putExtra(WallpaperPickerActivity.EXTRA_WALLPAPER_OFFSET,
+                    a.getWallpaperParallaxOffset());
             a.startActivityForResultSafely(
                     launchIntent, WallpaperPickerActivity.PICK_WALLPAPER_THIRD_PARTY_ACTIVITY);
         }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -441,7 +441,7 @@ private int validateNewPage(int newPage) {
                     Math.min(newPage, mTempVisiblePagesRange[1]));
         }
         // Ensure that it is clamped by the actual set of children in all cases
-        validatedPage = Math.max(0, Math.min(validatedPage, getPageCount() - 1));
+        validatedPage = Utilities.boundInRange(validatedPage, 0, getPageCount() - 1);
         return validatedPage;
     }
 

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -253,9 +253,11 @@ private boolean beginDraggingWidget(WidgetCell v) {
 
         // Start the drag
         mLauncher.lockScreenOrientation();
-        mLauncher.getWorkspace().onDragStartedWithItem(createItemInfo, preview, clipAlpha);
         mDragController.startDrag(image, preview, this, createItemInfo,
                 bounds, DragController.DRAG_ACTION_COPY, scale);
+        // This call expects the extra empty screen to already be created, which is why we call it
+        // after mDragController.startDrag().
+        mLauncher.getWorkspace().onDragStartedWithItem(createItemInfo, preview, clipAlpha);
 
         preview.recycle();
         return true;

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -169,7 +169,7 @@ protected void onPostExecute(List<LiveWallpaperInfo> result) {
 
         // Populate the third-party wallpaper pickers
         populateWallpapers((LinearLayout) findViewById(R.id.third_party_wallpaper_list),
-                ThirdPartyWallpaperInfo.getAll(this), false);
+                ThirdPartyWallpaperInfo.getAll(this), false /* addLongPressHandler */);
 
         // Add a tile for the Gallery
         LinearLayout masterWallpaperList = (LinearLayout) findViewById(R.id.master_wallpaper_list);

File: WallpaperPicker/src/com/android/launcher3/wallpapertileinfo/FileWallpaperInfo.java
Patch:
@@ -36,7 +36,8 @@ public void run() {
 
     @Override
     public void onSave(WallpaperPickerActivity a) {
-        a.setWallpaper(Uri.fromFile(mFile));
+        boolean shouldFadeOutOnFinish = a.getWallpaperParallaxOffset() == 0f;
+        a.setWallpaper(Uri.fromFile(mFile), shouldFadeOutOnFinish);
     }
 
     @Override

File: WallpaperPicker/src/com/android/launcher3/wallpapertileinfo/ResourceWallpaperInfo.java
Patch:
@@ -50,7 +50,7 @@ public void run() {
 
     @Override
     public void onSave(WallpaperPickerActivity a) {
-        a.cropImageAndSetWallpaper(mResources, mResId);
+        a.cropImageAndSetWallpaper(mResources, mResId, true /* shouldFadeOutOnFinish */);
     }
 
     @Override

File: WallpaperPicker/src/com/android/launcher3/wallpapertileinfo/ThirdPartyWallpaperInfo.java
Patch:
@@ -34,7 +34,9 @@ public void onClick(WallpaperPickerActivity a) {
         final ComponentName itemComponentName = new ComponentName(
                 mResolveInfo.activityInfo.packageName, mResolveInfo.activityInfo.name);
         Intent launchIntent = new Intent(Intent.ACTION_SET_WALLPAPER)
-            .setComponent(itemComponentName);
+            .setComponent(itemComponentName)
+            .putExtra(WallpaperPickerActivity.EXTRA_WALLPAPER_OFFSET,
+                    a.getWallpaperParallaxOffset());
         a.startActivityForResultSafely(
                 launchIntent, WallpaperPickerActivity.PICK_WALLPAPER_THIRD_PARTY_ACTIVITY);
     }

File: WallpaperPicker/src/com/android/launcher3/wallpapertileinfo/UriWallpaperInfo.java
Patch:
@@ -60,7 +60,8 @@ public void onBitmapCropped(byte[] imageBytes) {
                 a.getSavedImages().writeImage(thumb, imageBytes);
             }
         };
-        a.cropImageAndSetWallpaper(mUri, h);
+        boolean shouldFadeOutOnFinish = a.getWallpaperParallaxOffset() == 0f;
+        a.cropImageAndSetWallpaper(mUri, h, shouldFadeOutOnFinish);
     }
 
     @Override

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -847,9 +847,9 @@ private void addTemporaryWallpaperTile(final Uri uri, boolean fromRestore) {
         int indexOfExistingTile = 0;
         for (; indexOfExistingTile < mWallpapersView.getChildCount(); indexOfExistingTile++) {
             FrameLayout thumbnail = (FrameLayout) mWallpapersView.getChildAt(indexOfExistingTile);
-            Object tag = thumbNail.getTag();
+            Object tag = thumbnail.getTag();
             if (tag instanceof UriWallpaperInfo && ((UriWallpaperInfo) tag).mUri.equals(uri)) {
-                existingImageThumbnail = thumbNail;
+                existingImageThumbnail = thumbnail;
                 break;
             }
         }

File: WallpaperPicker/src/com/android/launcher3/CropView.java
Patch:
@@ -193,10 +193,10 @@ public void onScaleEnd(ScaleGestureDetector detector) {
      * Offsets wallpaper preview according to the state it will be displayed in upon returning home.
      * @param offset Ranges from 0 to 1, where 0 is the leftmost parallax and 1 is the rightmost.
      */
-    public void setParallaxOffset(float offset) {
+    public void setParallaxOffset(float offset, RectF crop) {
         offset = Math.max(0, Math.min(offset, 1)); // Make sure the offset is in the correct range.
         float screenWidth = getWidth() / mRenderer.scale;
-        mCenterX = screenWidth / 2 + offset * (getSourceDimensions().x - screenWidth);
+        mCenterX = screenWidth / 2 + offset * (crop.width() - screenWidth) + crop.left;
         updateCenter();
     }
 

File: WallpaperPicker/src/com/android/launcher3/wallpapertileinfo/DefaultWallpaperInfo.java
Patch:
@@ -9,6 +9,7 @@
 import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
 import android.graphics.Point;
+import android.graphics.RectF;
 import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.os.Build;
@@ -19,7 +20,6 @@
 import com.android.launcher3.Utilities;
 import com.android.launcher3.WallpaperCropActivity.CropViewScaleAndOffsetProvider;
 import com.android.launcher3.WallpaperPickerActivity;
-import com.android.photos.views.TiledImageRenderer.TileSource;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -38,7 +38,7 @@ public void onClick(WallpaperPickerActivity a) {
         a.setCropViewTileSource(null, false, false, new CropViewScaleAndOffsetProvider() {
 
             @Override
-            public float getScale(TileSource src) {
+            public float getScale(Point wallpaperSize, RectF crop) {
                 return 1f;
             }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1868,8 +1868,6 @@ protected void onNewIntent(Intent intent) {
         boolean alreadyOnHome = mHasFocus && ((intent.getFlags() &
                 Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT)
                 != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
-        boolean moveToDefaultScreen = mLauncherCallbacks != null ?
-                mLauncherCallbacks.shouldMoveToDefaultScreenOnHomeIntent() : true;
         boolean isActionMain = Intent.ACTION_MAIN.equals(intent.getAction());
         if (isActionMain) {
             // also will cancel mWaitingForResult.
@@ -1923,6 +1921,8 @@ protected void onNewIntent(Intent intent) {
         // as slow logic in the callbacks eat into the time the scroller expects for the snapToPage
         // animation.
         if (isActionMain) {
+            boolean moveToDefaultScreen = mLauncherCallbacks != null ?
+                    mLauncherCallbacks.shouldMoveToDefaultScreenOnHomeIntent() : true;
             if (alreadyOnHome && mState == State.WORKSPACE && !mWorkspace.isTouchActive() &&
                     openFolder == null && moveToDefaultScreen) {
                 mWorkspace.post(new Runnable() {

File: src/com/android/launcher3/BaseRecyclerViewFastScrollBar.java
Patch:
@@ -189,7 +189,8 @@ public void handleTouchEvent(MotionEvent ev, int downX, int downY, int lastY) {
                 // Check if we should start scrolling, but ignore this fastscroll gesture if we have
                 // exceeded some fixed movement
                 mIgnoreDragGesture |= Math.abs(y - downY) > config.getScaledPagingTouchSlop();
-                if (!mIsDragging && !mIgnoreDragGesture && isNearThumb(downX, lastY) &&
+                if (!mIsDragging && !mIgnoreDragGesture && mRv.supportsFastScrolling() &&
+                        isNearThumb(downX, lastY) &&
                         Math.abs(y - downY) > config.getScaledTouchSlop()) {
                     mRv.getParent().requestDisallowInterceptTouchEvent(true);
                     mIsDragging = true;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1811,8 +1811,6 @@ protected void onNewIntent(Intent intent) {
         boolean alreadyOnHome = mHasFocus && ((intent.getFlags() &
                 Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT)
                 != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
-        boolean moveToDefaultScreen = mLauncherCallbacks != null ?
-                mLauncherCallbacks.shouldMoveToDefaultScreenOnHomeIntent() : true;
         boolean isActionMain = Intent.ACTION_MAIN.equals(intent.getAction());
         if (isActionMain) {
             // also will cancel mWaitingForResult.
@@ -1866,6 +1864,8 @@ protected void onNewIntent(Intent intent) {
         // as slow logic in the callbacks eat into the time the scroller expects for the snapToPage
         // animation.
         if (isActionMain) {
+            boolean moveToDefaultScreen = mLauncherCallbacks != null ?
+                    mLauncherCallbacks.shouldMoveToDefaultScreenOnHomeIntent() : true;
             if (alreadyOnHome && mState == State.WORKSPACE && !mWorkspace.isTouchActive() &&
                     openFolder == null && moveToDefaultScreen) {
                 mWorkspace.post(new Runnable() {

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -251,7 +251,7 @@ protected void onLoadRequestComplete(LoadRequest req, boolean success) {
             }
             if (req.scaleAndOffsetProvider != null) {
                 mCropView.setScale(req.scaleAndOffsetProvider.getScale(req.result));
-                mCropView.addParallaxOffset(req.scaleAndOffsetProvider.getParallaxOffset());
+                mCropView.setParallaxOffset(req.scaleAndOffsetProvider.getParallaxOffset());
             }
 
             // Free last image

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4089,7 +4089,7 @@ public View getHomescreenIconByItemId(final long id) {
 
             @Override
             public boolean evaluate(ItemInfo info, View v, View parent) {
-                return info.id == id;
+                return info != null && info.id == id;
             }
         });
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1865,8 +1865,6 @@ protected void onNewIntent(Intent intent) {
         boolean alreadyOnHome = mHasFocus && ((intent.getFlags() &
                 Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT)
                 != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
-        boolean moveToDefaultScreen = mLauncherCallbacks != null ?
-                mLauncherCallbacks.shouldMoveToDefaultScreenOnHomeIntent() : true;
         boolean isActionMain = Intent.ACTION_MAIN.equals(intent.getAction());
         if (isActionMain) {
             // also will cancel mWaitingForResult.
@@ -1920,6 +1918,8 @@ protected void onNewIntent(Intent intent) {
         // as slow logic in the callbacks eat into the time the scroller expects for the snapToPage
         // animation.
         if (isActionMain) {
+            boolean moveToDefaultScreen = mLauncherCallbacks != null ?
+                    mLauncherCallbacks.shouldMoveToDefaultScreenOnHomeIntent() : true;
             if (alreadyOnHome && mState == State.WORKSPACE && !mWorkspace.isTouchActive() &&
                     openFolder == null && moveToDefaultScreen) {
                 mWorkspace.post(new Runnable() {

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -846,9 +846,9 @@ private void addTemporaryWallpaperTile(final Uri uri, boolean fromRestore) {
         int indexOfExistingTile = 0;
         for (; indexOfExistingTile < mWallpapersView.getChildCount(); indexOfExistingTile++) {
             FrameLayout thumbnail = (FrameLayout) mWallpapersView.getChildAt(indexOfExistingTile);
-            Object tag = thumbNail.getTag();
+            Object tag = thumbnail.getTag();
             if (tag instanceof UriWallpaperInfo && ((UriWallpaperInfo) tag).mUri.equals(uri)) {
-                existingImageThumbnail = thumbNail;
+                existingImageThumbnail = thumbnail;
                 break;
             }
         }

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -913,11 +913,12 @@ private void addLongPressHandler(View v) {
         v.setOnLongClickListener(mLongClickListener);
 
         // Enable stylus button to also trigger long click.
-        final StylusEventHelper stylusEventHelper = new StylusEventHelper(v);
+        final StylusEventHelper stylusEventHelper =
+                new StylusEventHelper(new SimpleOnStylusPressListener(v), v);
         v.setOnTouchListener(new View.OnTouchListener() {
             @Override
             public boolean onTouch(View view, MotionEvent event) {
-                return stylusEventHelper.checkAndPerformStylusEvent(event);
+                return stylusEventHelper.onMotionEvent(event);
             }
         });
     }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -144,7 +144,7 @@ public BubbleTextView(Context context, AttributeSet attrs, int defStyle) {
         }
 
         mLongPressHelper = new CheckLongPressHelper(this);
-        mStylusEventHelper = new StylusEventHelper(this);
+        mStylusEventHelper = new StylusEventHelper(new SimpleOnStylusPressListener(this), this);
 
         mOutlineHelper = HolographicOutlineHelper.obtain(getContext());
         if (mCustomShadowsEnabled) {
@@ -270,7 +270,7 @@ public boolean onTouchEvent(MotionEvent event) {
         boolean result = super.onTouchEvent(event);
 
         // Check for a stylus button press, if it occurs cancel any long press checks.
-        if (mStylusEventHelper.checkAndPerformStylusEvent(event)) {
+        if (mStylusEventHelper.onMotionEvent(event)) {
             mLongPressHelper.cancelLongPress();
             result = true;
         }

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -277,7 +277,7 @@ public void onAnimationEnd(Animator animation) {
         mShortcutsAndWidgets.setCellDimensions(mCellWidth, mCellHeight, mWidthGap, mHeightGap,
                 mCountX, mCountY);
 
-        mStylusEventHelper = new StylusEventHelper(this);
+        mStylusEventHelper = new StylusEventHelper(new SimpleOnStylusPressListener(this), this);
 
         mTouchFeedbackView = new ClickShadowView(context);
         addView(mTouchFeedbackView);
@@ -339,7 +339,7 @@ public boolean onTouchEvent(MotionEvent ev) {
         // enabled to allow rearranging the different home screens. So check what mode
         // the workspace is in, and only perform stylus button presses while in overview mode.
         if (mLauncher.mWorkspace.isInOverviewMode()
-                && mStylusEventHelper.checkAndPerformStylusEvent(ev)) {
+                && mStylusEventHelper.onMotionEvent(ev)) {
             return true;
         }
         return handled;

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -131,7 +131,7 @@ public FolderIcon(Context context) {
 
     private void init() {
         mLongPressHelper = new CheckLongPressHelper(this);
-        mStylusEventHelper = new StylusEventHelper(this);
+        mStylusEventHelper = new StylusEventHelper(new SimpleOnStylusPressListener(this), this);
         setAccessibilityDelegate(LauncherAppState.getInstance().getAccessibilityDelegate());
     }
 
@@ -725,7 +725,7 @@ public boolean onTouchEvent(MotionEvent event) {
         boolean result = super.onTouchEvent(event);
 
         // Check for a stylus button press, if it occurs cancel any long press checks.
-        if (mStylusEventHelper.checkAndPerformStylusEvent(event)) {
+        if (mStylusEventHelper.onMotionEvent(event)) {
             mLongPressHelper.cancelLongPress();
             return true;
         }

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -48,7 +48,7 @@ public LauncherAppWidgetHostView(Context context) {
         super(context);
         mContext = context;
         mLongPressHelper = new CheckLongPressHelper(this);
-        mStylusEventHelper = new StylusEventHelper(this);
+        mStylusEventHelper = new StylusEventHelper(new SimpleOnStylusPressListener(this), this);
         mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
         mDragLayer = ((Launcher) context).getDragLayer();
         setAccessibilityDelegate(LauncherAppState.getInstance().getAccessibilityDelegate());
@@ -94,7 +94,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
         // Watch for longpress or stylus button press events at this level to
         // make sure users can always pick up this widget
-        if (mStylusEventHelper.checkAndPerformStylusEvent(ev)) {
+        if (mStylusEventHelper.onMotionEvent(ev)) {
             mLongPressHelper.cancelLongPress();
             return true;
         }

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -36,6 +36,7 @@
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
+import com.android.launcher3.SimpleOnStylusPressListener;
 import com.android.launcher3.R;
 import com.android.launcher3.StylusEventHelper;
 import com.android.launcher3.WidgetPreviewLoader;
@@ -93,7 +94,7 @@ public WidgetCell(Context context, AttributeSet attrs, int defStyle) {
 
         final Resources r = context.getResources();
         mLauncher = (Launcher) context;
-        mStylusEventHelper = new StylusEventHelper(this);
+        mStylusEventHelper = new StylusEventHelper(new SimpleOnStylusPressListener(this), this);
 
         mDimensionsFormatString = r.getString(R.string.widget_dims_format);
         setContainerWidth();
@@ -211,7 +212,7 @@ public int getActualItemWidth() {
     @Override
     public boolean onTouchEvent(MotionEvent ev) {
         boolean handled = super.onTouchEvent(ev);
-        if (mStylusEventHelper.checkAndPerformStylusEvent(ev)) {
+        if (mStylusEventHelper.onMotionEvent(ev)) {
             return true;
         }
         return handled;

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -555,8 +555,9 @@ public void onLauncherTransitionStep(Launcher l, float t) {
     @Override
     public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWorkspace) {
         if (toWorkspace) {
-            // Reset the search bar after transitioning home
+            // Reset the search bar and base recycler view after transitioning home
             mSearchBarController.reset();
+            mAppsRecyclerView.reset();
         }
     }
 

File: src/com/android/launcher3/AnotherWindowDropTarget.java
Patch:
@@ -27,7 +27,7 @@
 public class AnotherWindowDropTarget implements DropTarget {
     final Launcher mLauncher;
 
-    AnotherWindowDropTarget (Context context) { mLauncher = (Launcher) context; }
+    public AnotherWindowDropTarget (Context context) { mLauncher = (Launcher) context; }
 
     @Override
     public boolean isDropEnabled() { return true; }

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -1,5 +1,7 @@
 package com.android.launcher3;
 
+import com.android.launcher3.dragndrop.DragLayer;
+
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -38,6 +38,9 @@
 import android.view.animation.LinearInterpolator;
 import android.widget.TextView;
 
+import com.android.launcher3.dragndrop.DragController;
+import com.android.launcher3.dragndrop.DragLayer;
+import com.android.launcher3.dragndrop.DragView;
 import com.android.launcher3.util.Thunk;
 
 /**

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -24,6 +24,7 @@
 import android.view.View;
 import android.view.animation.AnimationUtils;
 
+import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.util.FlingAnimation;
 import com.android.launcher3.util.Thunk;
 

File: src/com/android/launcher3/DropTarget.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.android.launcher3;
 
+import com.android.launcher3.dragndrop.DragView;
+
 import android.graphics.PointF;
 import android.graphics.Rect;
 

File: src/com/android/launcher3/Folder.java
Patch:
@@ -52,11 +52,13 @@
 import android.widget.TextView;
 
 import com.android.launcher3.CellLayout.CellInfo;
-import com.android.launcher3.DragController.DragListener;
 import com.android.launcher3.FolderInfo.FolderListener;
 import com.android.launcher3.UninstallDropTarget.UninstallSource;
 import com.android.launcher3.Workspace.ItemOperator;
 import com.android.launcher3.accessibility.LauncherAccessibilityDelegate.AccessibilityDragSource;
+import com.android.launcher3.dragndrop.DragController;
+import com.android.launcher3.dragndrop.DragController.DragListener;
+import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.util.Thunk;
 import com.android.launcher3.util.UiThreadCircularReveal;
 

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -43,6 +43,8 @@
 
 import com.android.launcher3.DropTarget.DragObject;
 import com.android.launcher3.FolderInfo.FolderListener;
+import com.android.launcher3.dragndrop.DragLayer;
+import com.android.launcher3.dragndrop.DragView;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;

File: src/com/android/launcher3/FolderPagedView.java
Patch:
@@ -30,6 +30,7 @@
 import com.android.launcher3.FocusHelper.PagedFolderKeyEventListener;
 import com.android.launcher3.PageIndicator.PageMarkerResources;
 import com.android.launcher3.Workspace.ItemOperator;
+import com.android.launcher3.dragndrop.DragController;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -26,7 +26,8 @@
 import android.view.ViewGroup;
 import android.widget.RemoteViews;
 
-import com.android.launcher3.DragLayer.TouchCompleteListener;
+import com.android.launcher3.dragndrop.DragLayer;
+import com.android.launcher3.dragndrop.DragLayer.TouchCompleteListener;
 
 /**
  * {@inheritDoc}

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -63,7 +63,7 @@ public abstract class PagedView extends ViewGroup implements ViewGroup.OnHierarc
     // the min drag distance for a fling to register, to prevent random page shifts
     private static final int MIN_LENGTH_FOR_FLING = 25;
 
-    protected static final int PAGE_SNAP_ANIMATION_DURATION = 750;
+    public static final int PAGE_SNAP_ANIMATION_DURATION = 750;
     protected static final int SLOW_PAGE_SNAP_ANIMATION_DURATION = 950;
 
     private static final float RETURN_TO_ORIGINAL_PAGE_THRESHOLD = 0.33f;
@@ -381,7 +381,7 @@ public int getCurrentPage() {
     /**
      * Returns the index of page to be shown immediately afterwards.
      */
-    int getNextPage() {
+    public int getNextPage() {
         return (mNextPage != INVALID_PAGE) ? mNextPage : mCurrentPage;
     }
 

File: src/com/android/launcher3/SearchDropTargetBar.java
Patch:
@@ -26,6 +26,7 @@
 import android.view.animation.AccelerateInterpolator;
 import android.widget.FrameLayout;
 
+import com.android.launcher3.dragndrop.DragController;
 import com.android.launcher3.util.Thunk;
 
 /*

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -70,7 +70,7 @@ public class ShortcutInfo extends ItemInfo {
     /**
      * The intent used to start the application.
      */
-    Intent intent;
+    public Intent intent;
 
     /**
      * Indicates whether the icon comes from an application's resource (if false)

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -30,6 +30,7 @@
 import android.view.accessibility.AccessibilityNodeInfo;
 import android.view.animation.DecelerateInterpolator;
 
+import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.util.Thunk;
 
 import java.util.HashMap;

File: src/com/android/launcher3/accessibility/LauncherAccessibilityDelegate.java
Patch:
@@ -20,7 +20,6 @@
 import com.android.launcher3.AppWidgetResizeFrame;
 import com.android.launcher3.CellLayout;
 import com.android.launcher3.DeleteDropTarget;
-import com.android.launcher3.DragController.DragListener;
 import com.android.launcher3.DragSource;
 import com.android.launcher3.Folder;
 import com.android.launcher3.FolderInfo;
@@ -36,6 +35,7 @@
 import com.android.launcher3.ShortcutInfo;
 import com.android.launcher3.UninstallDropTarget;
 import com.android.launcher3.Workspace;
+import com.android.launcher3.dragndrop.DragController.DragListener;
 import com.android.launcher3.util.Thunk;
 
 import java.util.ArrayList;

File: src/com/android/launcher3/dragndrop/DragScroller.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.android.launcher3;
+package com.android.launcher3.dragndrop;
 
 /**
  * Handles scrolling while dragging

File: src/com/android/launcher3/util/FlingAnimation.java
Patch:
@@ -7,9 +7,9 @@
 import android.graphics.Rect;
 import android.view.animation.DecelerateInterpolator;
 
-import com.android.launcher3.DragLayer;
-import com.android.launcher3.DragView;
 import com.android.launcher3.DropTarget.DragObject;
+import com.android.launcher3.dragndrop.DragLayer;
+import com.android.launcher3.dragndrop.DragView;
 
 public class FlingAnimation implements AnimatorUpdateListener {
 

File: src/com/android/launcher3/widget/WidgetHostViewLoader.java
Patch:
@@ -10,14 +10,14 @@
 import android.view.View;
 
 import com.android.launcher3.AppWidgetResizeFrame;
-import com.android.launcher3.DragController.DragListener;
-import com.android.launcher3.DragLayer;
 import com.android.launcher3.DragSource;
 import com.android.launcher3.ItemInfo;
 import com.android.launcher3.Launcher;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
 import com.android.launcher3.Utilities;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
+import com.android.launcher3.dragndrop.DragController.DragListener;
+import com.android.launcher3.dragndrop.DragLayer;
 import com.android.launcher3.util.Thunk;
 
 public class WidgetHostViewLoader implements DragListener {

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -32,7 +32,6 @@
 import com.android.launcher3.CellLayout;
 import com.android.launcher3.DeleteDropTarget;
 import com.android.launcher3.DeviceProfile;
-import com.android.launcher3.DragController;
 import com.android.launcher3.DragSource;
 import com.android.launcher3.DropTarget.DragObject;
 import com.android.launcher3.Folder;
@@ -45,6 +44,7 @@
 import com.android.launcher3.Utilities;
 import com.android.launcher3.WidgetPreviewLoader;
 import com.android.launcher3.Workspace;
+import com.android.launcher3.dragndrop.DragController;
 import com.android.launcher3.model.WidgetsModel;
 import com.android.launcher3.util.Thunk;
 

File: src/com/android/launcher3/AppWidgetsRestoredReceiver.java
Patch:
@@ -13,6 +13,7 @@
 import android.util.Log;
 
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.compat.AppWidgetManagerCompat;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -48,7 +49,8 @@ static void restoreAppWidgetIds(Context context, int[] oldWidgetIds, int[] newWi
             final AppWidgetProviderInfo provider = widgets.getAppWidgetInfo(newWidgetIds[i]);
             final int state;
             if (LauncherModel.isValidProvider(provider)) {
-                state = LauncherAppWidgetInfo.RESTORE_COMPLETED;
+                // This will ensure that we show 'Click to setup' UI if required.
+                state = LauncherAppWidgetInfo.FLAG_UI_NOT_READY;
             } else {
                 state = LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY;
             }

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -550,7 +550,8 @@ public void onLayoutChange(View v, int left, int top, int right, int bottom,
                 new View.OnClickListener() {
                     @Override
                     public void onClick(View v) {
-                        if (mSelectedTile != null) {
+                        // Ensure that a tile is slelected and loaded.
+                        if (mSelectedTile != null && mCropView.getTileSource() != null) {
                             // Prevent user from selecting any new tile.
                             mWallpaperStrip.setVisibility(View.GONE);
                             actionBar.hide();

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -95,8 +95,6 @@ public void removeProviderChangeListener(Runnable callback) {
     }
 
     protected void onProvidersChanged() {
-        mLauncher.getModel().loadAndBindWidgetsAndShortcuts(mLauncher, mLauncher,
-                true /* refresh */);
         if (!mProviderChangeListeners.isEmpty()) {
             for (Runnable callback : new ArrayList<>(mProviderChangeListeners)) {
                 callback.run();

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -105,7 +105,7 @@ public PreviewLoadRequest getPreview(final Object o, int previewWidth,
      * sizes (landscape vs portrait).
      */
     private static class CacheDb extends SQLiteOpenHelper {
-        private static final int DB_VERSION = 3;
+        private static final int DB_VERSION = 4;
 
         private static final String TABLE_NAME = "shortcut_and_widget_previews";
         private static final String COLUMN_COMPONENT = "componentName";

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4334,8 +4334,9 @@ public boolean evaluate(ItemInfo info, View v, View parent) {
                         updates.contains(info)) {
                     ShortcutInfo si = (ShortcutInfo) info;
                     BubbleTextView shortcut = (BubbleTextView) v;
-                    boolean oldPromiseState = getTextViewIcon(shortcut)
-                            instanceof PreloadIconDrawable;
+                    Drawable oldIcon = getTextViewIcon(shortcut);
+                    boolean oldPromiseState = (oldIcon instanceof PreloadIconDrawable)
+                            && ((PreloadIconDrawable) oldIcon).hasNotCompleted();
                     shortcut.applyFromShortcutInfo(si, mIconCache,
                             si.isPromise() != oldPromiseState);
 

File: src/com/android/launcher3/DragView.java
Patch:
@@ -199,8 +199,8 @@ public void drawDragShadow(Canvas canvas) {
     public void provideDragShadowMetrics(Point size, Point touch) {
         size.set((int)(mBitmap.getWidth() * getScaleX()), (int)(mBitmap.getHeight() * getScaleY()));
 
-        final float xGrowth = mBitmap.getWidth() * (getScaleX() - mInitialScale);
-        final float yGrowth = mBitmap.getHeight() * (getScaleY() - mInitialScale);
+        final float xGrowth = mBitmap.getWidth() * (getScaleX() - 1);
+        final float yGrowth = mBitmap.getHeight() * (getScaleY() - 1);
         touch.set(
                 mRegistrationX + (int)Math.round(xGrowth / 2),
                 mRegistrationY + (int)Math.round(yGrowth / 2));

File: src/com/android/launcher3/DragDriver.java
Patch:
@@ -32,6 +32,7 @@ public abstract class DragDriver {
 
     public interface EventListener {
         void onDriverDragMove(float x, float y);
+        void onDriverDragExitWindow();
         void onDriverDragEnd(float x, float y, DropTarget dropTargetOverride);
         void onDriverDragCancel();
     }
@@ -165,6 +166,7 @@ public boolean onDragEvent (DragEvent event) {
                 return true;
 
             case DragEvent.ACTION_DRAG_EXITED:
+                mEventListener.onDriverDragExitWindow();
                 return true;
 
             case DragEvent.ACTION_DRAG_ENDED:

File: src/com/android/launcher3/DragDriver.java
Patch:
@@ -32,6 +32,7 @@ public abstract class DragDriver {
 
     public interface EventListener {
         void onDriverDragMove(float x, float y);
+        void onDriverDragExitWindow();
         void onDriverDragEnd(float x, float y, DropTarget dropTargetOverride);
         void onDriverDragCancel();
     }
@@ -165,6 +166,7 @@ public boolean onDragEvent (DragEvent event) {
                 return true;
 
             case DragEvent.ACTION_DRAG_EXITED:
+                mEventListener.onDriverDragExitWindow();
                 return true;
 
             case DragEvent.ACTION_DRAG_ENDED:

File: src/com/android/launcher3/DragView.java
Patch:
@@ -199,8 +199,8 @@ public void drawDragShadow(Canvas canvas) {
     public void provideDragShadowMetrics(Point size, Point touch) {
         size.set((int)(mBitmap.getWidth() * getScaleX()), (int)(mBitmap.getHeight() * getScaleY()));
 
-        final float xGrowth = mBitmap.getWidth() * (getScaleX() - mInitialScale);
-        final float yGrowth = mBitmap.getHeight() * (getScaleY() - mInitialScale);
+        final float xGrowth = mBitmap.getWidth() * (getScaleX() - 1);
+        final float yGrowth = mBitmap.getHeight() * (getScaleY() - 1);
         touch.set(
                 mRegistrationX + (int)Math.round(xGrowth / 2),
                 mRegistrationY + (int)Math.round(yGrowth / 2));

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -355,7 +355,7 @@ public long parseAndAdd(XmlResourceParser parser) {
                     return addShortcut(info.loadLabel(mPackageManager).toString(),
                             intent, Favorites.ITEM_TYPE_APPLICATION);
                 } catch (PackageManager.NameNotFoundException e) {
-                    if (LOGD) Log.w(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
+                    Log.e(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
                 }
                 return -1;
             } else {
@@ -367,7 +367,7 @@ public long parseAndAdd(XmlResourceParser parser) {
          * Helper method to allow extending the parser capabilities
          */
         protected long invalidPackageOrClass(XmlResourceParser parser) {
-            if (LOGD) Log.d(TAG, "Skipping invalid <favorite> with no component");
+            Log.w(TAG, "Skipping invalid <favorite> with no component");
             return -1;
         }
     }

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -355,7 +355,7 @@ public long parseAndAdd(XmlResourceParser parser) {
                     return addShortcut(info.loadLabel(mPackageManager).toString(),
                             intent, Favorites.ITEM_TYPE_APPLICATION);
                 } catch (PackageManager.NameNotFoundException e) {
-                    if (LOGD) Log.w(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
+                    Log.e(TAG, "Unable to add favorite: " + packageName + "/" + className, e);
                 }
                 return -1;
             } else {
@@ -367,7 +367,7 @@ public long parseAndAdd(XmlResourceParser parser) {
          * Helper method to allow extending the parser capabilities
          */
         protected long invalidPackageOrClass(XmlResourceParser parser) {
-            if (LOGD) Log.d(TAG, "Skipping invalid <favorite> with no component");
+            Log.w(TAG, "Skipping invalid <favorite> with no component");
             return -1;
         }
     }

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -25,7 +25,6 @@
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.util.DisplayMetrics;
-import android.util.Size;
 import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
@@ -385,7 +384,7 @@ public void layout(Launcher launcher) {
         final boolean isLayoutRtl = Utilities.isRtl(launcher.getResources());
 
         // Layout the search bar space
-        View searchBar = launcher.getSearchBar();
+        View searchBar = launcher.getSearchDropTargetBar();
         lp = (FrameLayout.LayoutParams) searchBar.getLayoutParams();
         if (hasVerticalBarLayout) {
             // Vertical search bar space -- The search bar is fixed in the layout to be on the left

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -159,7 +159,7 @@ private boolean isEventOverFolder(Folder folder, MotionEvent ev) {
     }
 
     private boolean isEventOverDropTargetBar(MotionEvent ev) {
-        getDescendantRectRelativeToSelf(mLauncher.getSearchBar(), mHitRect);
+        getDescendantRectRelativeToSelf(mLauncher.getSearchDropTargetBar(), mHitRect);
         if (mHitRect.contains((int) ev.getX(), (int) ev.getY())) {
             return true;
         }
@@ -321,7 +321,7 @@ public void addChildrenForAccessibility(ArrayList<View> childrenForAccessibility
             childrenForAccessibility.add(currentFolder);
 
             if (isInAccessibleDrag()) {
-                childrenForAccessibility.add(mLauncher.getSearchBar());
+                childrenForAccessibility.add(mLauncher.getSearchDropTargetBar());
             }
         } else {
             super.addChildrenForAccessibility(childrenForAccessibility);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -275,7 +275,7 @@ public void startDrag(CellInfo cellInfo, boolean accessible) {
 
     @Override
     public void enableAccessibleDrag(boolean enable) {
-        mLauncher.getSearchBar().enableAccessibleDrag(enable);
+        mLauncher.getSearchDropTargetBar().enableAccessibleDrag(enable);
         for (int i = 0; i < mContent.getChildCount(); i++) {
             mContent.getPageAt(i).enableAccessibleDrag(enable, CellLayout.FOLDER_ACCESSIBILITY_DRAG);
         }

File: src/com/android/launcher3/LauncherViewPropertyAnimator.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.EnumSet;
 
 public class LauncherViewPropertyAnimator extends Animator implements AnimatorListener {
+
     enum Properties {
             TRANSLATION_X,
             TRANSLATION_Y,
@@ -51,13 +52,12 @@ enum Properties {
     long mStartDelay;
     long mDuration;
     TimeInterpolator mInterpolator;
-    ArrayList<Animator.AnimatorListener> mListeners;
+    ArrayList<Animator.AnimatorListener> mListeners = new ArrayList<>();
     boolean mRunning = false;
     FirstFrameAnimatorHelper mFirstFrameHelper;
 
     public LauncherViewPropertyAnimator(View target) {
         mTarget = target;
-        mListeners = new ArrayList<Animator.AnimatorListener>();
     }
 
     @Override

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -20,11 +20,13 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
+import android.os.UserManager;
 import android.util.Log;
 
 import com.android.launcher3.accessibility.LauncherAccessibilityDelegate;
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.PackageInstallerCompat;
+import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.util.Thunk;
 
 import java.lang.ref.WeakReference;
@@ -100,6 +102,7 @@ private LauncherAppState() {
         filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_REMOVED);
 
         sContext.registerReceiver(mModel, filter);
+        UserManagerCompat.getInstance(sContext).enableAndResetCache();
     }
 
     /**

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1288,6 +1288,7 @@ public void onReceive(Context context, Intent intent) {
             }
         } else if (LauncherAppsCompat.ACTION_MANAGED_PROFILE_ADDED.equals(action)
                 || LauncherAppsCompat.ACTION_MANAGED_PROFILE_REMOVED.equals(action)) {
+            UserManagerCompat.getInstance(context).enableAndResetCache();
             forceReload();
         }
     }

File: src/com/android/launcher3/model/AppNameComparator.java
Patch:
@@ -68,8 +68,6 @@ public int compare(String o1, String o2) {
      * Returns a locale-aware comparator that will alphabetically order a list of applications.
      */
     public Comparator<ItemInfo> getAppInfoComparator() {
-        // Clear the user serial cache so that we get serials as needed in the comparator
-        mAppInfoComparator.clearUserCache();
         return mAppInfoComparator;
     }
 

File: src/com/android/launcher3/Folder.java
Patch:
@@ -1389,7 +1389,7 @@ public void onAlarm(Alarm alarm) {
     }
 
     // Compares item position based on rank and position giving priority to the rank.
-    private static final Comparator<ItemInfo> ITEM_POS_COMPARATOR = new Comparator<ItemInfo>() {
+    public static final Comparator<ItemInfo> ITEM_POS_COMPARATOR = new Comparator<ItemInfo>() {
 
         @Override
         public int compare(ItemInfo lhs, ItemInfo rhs) {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2662,6 +2662,7 @@ protected void onClickFolderIcon(View v) {
             throw new IllegalArgumentException("Input must be a FolderIcon");
         }
 
+        // TODO(sunnygoyal): Re-evaluate this code.
         FolderIcon folderIcon = (FolderIcon) v;
         final FolderInfo info = folderIcon.getFolderInfo();
         Folder openFolder = mWorkspace.getFolderForTag(info);

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -75,8 +75,8 @@ public AppWidgetResizeFrame(Context context,
         mResizeMode = info.resizeMode;
         mDragLayer = dragLayer;
 
-        mMinHSpan = info.getMinSpanX(mLauncher);
-        mMinVSpan = info.getMinSpanY(mLauncher);
+        mMinHSpan = info.minSpanX;
+        mMinVSpan = info.minSpanY;
 
         setBackgroundResource(R.drawable.widget_resize_shadow);
         setForeground(getResources().getDrawable(R.drawable.widget_resize_frame));

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -361,8 +361,8 @@ public Bitmap generateWidgetPreview(Launcher launcher, LauncherAppWidgetProvider
         }
 
         final boolean widgetPreviewExists = (drawable != null);
-        final int spanX = info.getSpanX(launcher) < 1 ? 1 : info.getSpanX(launcher);
-        final int spanY = info.getSpanY(launcher) < 1 ? 1 : info.getSpanY(launcher);
+        final int spanX = info.spanX;
+        final int spanY = info.spanY;
 
         int previewWidth;
         int previewHeight;

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -528,7 +528,6 @@ public void onDropCompleted(View target, DropTarget.DragObject d, boolean isFlin
                 CellLayout layout = (CellLayout) workspace.getChildAt(currentScreen);
                 ItemInfo itemInfo = (ItemInfo) d.dragInfo;
                 if (layout != null) {
-                    layout.calculateSpans(itemInfo);
                     showOutOfSpaceMessage =
                             !layout.findCellForSpan(null, itemInfo.spanX, itemInfo.spanY);
                 }

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -146,8 +146,8 @@ public void applyFromAppWidgetProviderInfo(LauncherAppWidgetProviderInfo info,
         mInfo = info;
         // TODO(hyunyoungs): setup a cache for these labels.
         mWidgetName.setText(AppWidgetManagerCompat.getInstance(getContext()).loadLabel(info));
-        int hSpan = Math.min(info.getSpanX(mLauncher), profile.numColumns);
-        int vSpan = Math.min(info.getSpanY(mLauncher), profile.numRows);
+        int hSpan = Math.min(info.spanX, profile.numColumns);
+        int vSpan = Math.min(info.spanY, profile.numRows);
         mWidgetDims.setText(String.format(mDimensionsFormatString, hSpan, vSpan));
         mWidgetPreviewLoader = loader;
     }

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -319,7 +319,6 @@ public void onDropCompleted(View target, DragObject d, boolean isFlingToDelete,
                 CellLayout layout = (CellLayout) workspace.getChildAt(currentScreen);
                 ItemInfo itemInfo = (ItemInfo) d.dragInfo;
                 if (layout != null) {
-                    layout.calculateSpans(itemInfo);
                     showOutOfSpaceMessage =
                             !layout.findCellForSpan(null, itemInfo.spanX, itemInfo.spanY);
                 }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4101,7 +4101,7 @@ protected Rect getSearchBarBounds() {
         return mDeviceProfile.getSearchBarBounds(Utilities.isRtl(getResources()));
     }
 
-    public void bindSearchablesChanged() {
+    public void bindSearchProviderChanged() {
         if (mSearchDropTargetBar == null) {
             return;
         }

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -96,7 +96,6 @@ private LauncherAppState() {
         IntentFilter filter = new IntentFilter();
         filter.addAction(Intent.ACTION_LOCALE_CHANGED);
         filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);
-        filter.addAction(SearchManager.INTENT_ACTION_SEARCHABLES_CHANGED);
         // For handling managed profiles
         filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_ADDED);
         filter.addAction(LauncherAppsCompat.ACTION_MANAGED_PROFILE_REMOVED);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2276,6 +2276,8 @@ public void beginDragShared(View child, Point relativeTouchPos, DragSource sourc
             dragRect = new Rect(left, top, right, bottom);
         } else if (child instanceof FolderIcon) {
             int previewSize = grid.folderIconSizePx;
+            dragVisualizeOffset = new Point(-padding.get() / 2,
+                    padding.get() / 2 - child.getPaddingTop());
             dragRect = new Rect(0, child.getPaddingTop(), child.getWidth(), previewSize);
         }
 

File: src/com/android/launcher3/model/WidgetsModel.java
Patch:
@@ -39,7 +39,7 @@ public class WidgetsModel {
     private ArrayList<Object> mRawList;
 
     private final AppWidgetManagerCompat mAppWidgetMgr;
-    private final Comparator mWidgetAndShortcutNameComparator;
+    private final WidgetsAndShortcutNameComparator mWidgetAndShortcutNameComparator;
     private final Comparator mAppNameComparator;
     private final IconCache mIconCache;
     private final AppFilter mAppFilter;
@@ -103,6 +103,7 @@ public void setWidgetsAndShortcuts(ArrayList<Object> rawWidgetsShortcuts) {
         // clear the lists.
         mWidgetsList.clear();
         mPackageItemInfos.clear();
+        mWidgetAndShortcutNameComparator.reset();
 
         // add and update.
         for (Object o: rawWidgetsShortcuts) {
@@ -139,7 +140,7 @@ public void setWidgetsAndShortcuts(ArrayList<Object> rawWidgetsShortcuts) {
             if (widgetsShortcutsList != null) {
                 widgetsShortcutsList.add(o);
             } else {
-                widgetsShortcutsList = new ArrayList<Object>();
+                widgetsShortcutsList = new ArrayList<>();
                 widgetsShortcutsList.add(o);
                 pInfo = new PackageItemInfo(packageName);
                 mIconCache.getTitleAndIconForApp(packageName, userHandle,

File: src/com/android/launcher3/model/WidgetsModel.java
Patch:
@@ -39,7 +39,7 @@ public class WidgetsModel {
     private ArrayList<Object> mRawList;
 
     private final AppWidgetManagerCompat mAppWidgetMgr;
-    private final Comparator mWidgetAndShortcutNameComparator;
+    private final WidgetsAndShortcutNameComparator mWidgetAndShortcutNameComparator;
     private final Comparator mAppNameComparator;
     private final IconCache mIconCache;
     private final AppFilter mAppFilter;
@@ -103,6 +103,7 @@ public void setWidgetsAndShortcuts(ArrayList<Object> rawWidgetsShortcuts) {
         // clear the lists.
         mWidgetsList.clear();
         mPackageItemInfos.clear();
+        mWidgetAndShortcutNameComparator.reset();
 
         // add and update.
         for (Object o: rawWidgetsShortcuts) {
@@ -139,7 +140,7 @@ public void setWidgetsAndShortcuts(ArrayList<Object> rawWidgetsShortcuts) {
             if (widgetsShortcutsList != null) {
                 widgetsShortcutsList.add(o);
             } else {
-                widgetsShortcutsList = new ArrayList<Object>();
+                widgetsShortcutsList = new ArrayList<>();
                 widgetsShortcutsList.add(o);
                 pInfo = new PackageItemInfo(packageName);
                 mIconCache.getTitleAndIconForApp(packageName, userHandle,

File: src/com/android/launcher3/model/MigrateFromRestoreTask.java
Patch:
@@ -38,7 +38,7 @@
 public class MigrateFromRestoreTask {
 
     private static final String TAG = "MigrateFromRestoreTask";
-    private static final boolean DEBUG = false;
+    private static final boolean DEBUG = true;
 
     private static final String KEY_MIGRATION_SOURCE_SIZE = "migration_restore_src_size";
     private static final String KEY_MIGRATION_WIDGET_MINSIZE = "migration_widget_min_size";

File: src/com/android/launcher3/ItemInfo.java
Patch:
@@ -134,7 +134,7 @@ public void copyFrom(ItemInfo info) {
     }
 
     public Intent getIntent() {
-        throw new RuntimeException("Unexpected Intent");
+        return null;
     }
 
     /**

File: WallpaperPicker/src/com/android/launcher3/CropView.java
Patch:
@@ -21,7 +21,6 @@
 import android.graphics.Point;
 import android.graphics.RectF;
 import android.util.AttributeSet;
-import android.util.FloatMath;
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
 import android.view.ScaleGestureDetector.OnScaleGestureListener;
@@ -300,12 +299,12 @@ public boolean onTouchEvent(MotionEvent event) {
                     adjustment[0] = (edges.right - getWidth()) / scale;
                 }
                 if (edges.top > 0) {
-                    adjustment[1] = FloatMath.ceil(edges.top / scale);
+                    adjustment[1] = (float) Math.ceil(edges.top / scale);
                 } else if (edges.bottom < getHeight()) {
                     adjustment[1] = (edges.bottom - getHeight()) / scale;
                 }
                 for (int dim = 0; dim <= 1; dim++) {
-                    if (coef[dim] > 0) adjustment[dim] = FloatMath.ceil(adjustment[dim]);
+                    if (coef[dim] > 0) adjustment[dim] = (float) Math.ceil(adjustment[dim]);
                 }
 
                 mInverseRotateMatrix.mapPoints(adjustment);

File: src/com/android/launcher3/LauncherScroller.java
Patch:
@@ -20,7 +20,6 @@
 import android.content.Context;
 import android.hardware.SensorManager;
 import android.os.Build;
-import android.util.FloatMath;
 import android.view.ViewConfiguration;
 import android.view.animation.AnimationUtils;
 import android.view.animation.Interpolator;
@@ -409,7 +408,7 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
 
             float dx = (float) (mFinalX - mStartX);
             float dy = (float) (mFinalY - mStartY);
-            float hyp = FloatMath.sqrt(dx * dx + dy * dy);
+            float hyp = (float) Math.sqrt(dx * dx + dy * dy);
 
             float ndx = dx / hyp;
             float ndy = dy / hyp;
@@ -426,7 +425,7 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
         mMode = FLING_MODE;
         mFinished = false;
 
-        float velocity = FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);
+        float velocity = (float) Math.sqrt(velocityX * velocityX + velocityY * velocityY);
 
         mVelocity = velocity;
         mDuration = getSplineFlingDuration(velocity);

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -210,8 +210,9 @@ public WorkspaceStateTransitionAnimation(Launcher launcher, Workspace workspace)
         mOverlayTransitionTime = res.getInteger(R.integer.config_overlayTransitionTime);
         mSpringLoadedShrinkFactor =
                 res.getInteger(R.integer.config_workspaceSpringLoadShrinkPercentage) / 100f;
+        mOverviewModeShrinkFactor =
+                res.getInteger(R.integer.config_workspaceOverviewShrinkPercentage) / 100f;
         mWorkspaceScrimAlpha = res.getInteger(R.integer.config_workspaceScrimAlpha) / 100f;
-        mOverviewModeShrinkFactor = grid.getOverviewModeScale(Utilities.isRtl(res));
         mWorkspaceFadeInAdjacentScreens = grid.shouldFadeAdjacentWorkspaceScreens();
     }
 

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -211,8 +211,9 @@ public WorkspaceStateTransitionAnimation(Launcher launcher, Workspace workspace)
         mOverlayTransitionTime = res.getInteger(R.integer.config_overlayTransitionTime);
         mSpringLoadedShrinkFactor =
                 res.getInteger(R.integer.config_workspaceSpringLoadShrinkPercentage) / 100f;
+        mOverviewModeShrinkFactor =
+                res.getInteger(R.integer.config_workspaceOverviewShrinkPercentage) / 100f;
         mWorkspaceScrimAlpha = res.getInteger(R.integer.config_workspaceScrimAlpha) / 100f;
-        mOverviewModeShrinkFactor = grid.getOverviewModeScale(Utilities.isRtl(res));
         mWorkspaceFadeInAdjacentScreens = grid.shouldFadeAdjacentWorkspaceScreens();
     }
 

File: src/com/android/launcher3/model/WidgetsModel.java
Patch:
@@ -39,7 +39,7 @@ public class WidgetsModel {
     private ArrayList<Object> mRawList;
 
     private final AppWidgetManagerCompat mAppWidgetMgr;
-    private final Comparator mWidgetAndShortcutNameComparator;
+    private final WidgetsAndShortcutNameComparator mWidgetAndShortcutNameComparator;
     private final Comparator mAppNameComparator;
     private final IconCache mIconCache;
     private final AppFilter mAppFilter;
@@ -103,6 +103,7 @@ public void setWidgetsAndShortcuts(ArrayList<Object> rawWidgetsShortcuts) {
         // clear the lists.
         mWidgetsList.clear();
         mPackageItemInfos.clear();
+        mWidgetAndShortcutNameComparator.reset();
 
         // add and update.
         for (Object o: rawWidgetsShortcuts) {
@@ -139,7 +140,7 @@ public void setWidgetsAndShortcuts(ArrayList<Object> rawWidgetsShortcuts) {
             if (widgetsShortcutsList != null) {
                 widgetsShortcutsList.add(o);
             } else {
-                widgetsShortcutsList = new ArrayList<Object>();
+                widgetsShortcutsList = new ArrayList<>();
                 widgetsShortcutsList.add(o);
                 pInfo = new PackageItemInfo(packageName);
                 mIconCache.getTitleAndIconForApp(packageName, userHandle,

File: WallpaperPicker/src/com/android/gallery3d/exif/ExifInterface.java
Patch:
@@ -1247,7 +1247,7 @@ public Long getTagLongValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Long(l[0]);
+        return Long.valueOf(l[0]);
     }
 
     /**
@@ -1266,7 +1266,7 @@ public Integer getTagIntValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Integer(l[0]);
+        return Integer.valueOf(l[0]);
     }
 
     /**
@@ -1285,7 +1285,7 @@ public Byte getTagByteValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Byte(l[0]);
+        return Byte.valueOf(l[0]);
     }
 
     /**

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/BasicTexture.java
Patch:
@@ -27,7 +27,6 @@
 // If a BasicTexture is loaded into GL memory, it has a GL texture id.
 public abstract class BasicTexture implements Texture {
 
-    @SuppressWarnings("unused")
     private static final String TAG = "BasicTexture";
     protected static final int UNSPECIFIED = -1;
 

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/BitmapTexture.java
Patch:
@@ -18,7 +18,7 @@
 
 import android.graphics.Bitmap;
 
-import junit.framework.Assert;
+import com.android.gallery3d.common.Utils;
 
 // BitmapTexture is a texture whose content is specified by a fixed Bitmap.
 //
@@ -34,7 +34,7 @@ public BitmapTexture(Bitmap bitmap) {
 
     public BitmapTexture(Bitmap bitmap, boolean hasBorder) {
         super(hasBorder);
-        Assert.assertTrue(bitmap != null && !bitmap.isRecycled());
+        Utils.assertTrue(bitmap != null && !bitmap.isRecycled());
         mContentBitmap = bitmap;
     }
 

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/GLES20Canvas.java
Patch:
@@ -23,8 +23,6 @@
 import android.opengl.Matrix;
 import android.util.Log;
 
-import com.android.gallery3d.util.IntArray;
-
 import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
@@ -698,6 +696,7 @@ private ShaderParameter[] prepareTexture(BasicTexture texture) {
     }
 
     private void prepareTexture(BasicTexture texture, int program, ShaderParameter[] params) {
+        deleteRecycledResources();
         GLES20.glUseProgram(program);
         checkError();
         enableBlending(!texture.isOpaque() || getAlpha() < OPAQUE_ALPHA);

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/GLPaint.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.android.gallery3d.glrenderer;
 
-import junit.framework.Assert;
+import com.android.gallery3d.common.Utils;
 
 public class GLPaint {
     private float mLineWidth = 1f;
@@ -31,7 +31,7 @@ public int getColor() {
     }
 
     public void setLineWidth(float width) {
-        Assert.assertTrue(width >= 0);
+        Utils.assertTrue(width >= 0);
         mLineWidth = width;
     }
 

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/IntArray.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.android.gallery3d.util;
+package com.android.gallery3d.glrenderer;
 
 public class IntArray {
     private static final int INIT_CAPACITY = 8;

File: WallpaperPicker/src/com/android/launcher3/CropView.java
Patch:
@@ -21,7 +21,6 @@
 import android.graphics.Point;
 import android.graphics.RectF;
 import android.util.AttributeSet;
-import android.util.FloatMath;
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
 import android.view.ScaleGestureDetector.OnScaleGestureListener;
@@ -300,12 +299,12 @@ public boolean onTouchEvent(MotionEvent event) {
                     adjustment[0] = (edges.right - getWidth()) / scale;
                 }
                 if (edges.top > 0) {
-                    adjustment[1] = FloatMath.ceil(edges.top / scale);
+                    adjustment[1] = (float) Math.ceil(edges.top / scale);
                 } else if (edges.bottom < getHeight()) {
                     adjustment[1] = (edges.bottom - getHeight()) / scale;
                 }
                 for (int dim = 0; dim <= 1; dim++) {
-                    if (coef[dim] > 0) adjustment[dim] = FloatMath.ceil(adjustment[dim]);
+                    if (coef[dim] > 0) adjustment[dim] = (float) Math.ceil(adjustment[dim]);
                 }
 
                 mInverseRotateMatrix.mapPoints(adjustment);

File: WallpaperPicker/src/com/android/launcher3/SavedWallpaperImages.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.android.launcher3;
 
-import android.app.Activity;
 import android.content.ContentValues;
 import android.content.Context;
 import android.database.Cursor;
@@ -60,13 +59,13 @@ public void onDelete(WallpaperPickerActivity a) {
         }
     }
 
-    public SavedWallpaperImages(Activity context) {
+    public SavedWallpaperImages(Context context) {
         // We used to store the saved images in the cache directory, but that meant they'd get
         // deleted sometimes-- move them to the data directory
         ImageDb.moveFromCacheDirectoryIfNecessary(context);
         mDb = new ImageDb(context);
         mContext = context;
-        mLayoutInflater = context.getLayoutInflater();
+        mLayoutInflater = LayoutInflater.from(context);
     }
 
     public void loadThumbnailsAndImageIdList() {

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -91,11 +91,12 @@ public void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescri
             LauncherAppState.getLauncherProvider().clearFlagEmptyDbCreated();
             LauncherClings.synchonouslyMarkFirstRunClingDismissed(this);
 
-            // TODO: Update the backup set to include rank.
+            // Rank was added in v4.
             if (mHelper.restoredBackupVersion <= 3) {
                 LauncherAppState.getLauncherProvider().updateFolderItemsRank();
-                LauncherAppState.getLauncherProvider().convertShortcutsToLauncherActivities();
             }
+
+            LauncherAppState.getLauncherProvider().convertShortcutsToLauncherActivities();
         } else {
             if (VERBOSE) Log.v(TAG, "Nothing was restored, clearing DB");
             LauncherAppState.getLauncherProvider().createEmptyDB();

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -92,7 +92,7 @@ public void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescri
             LauncherClings.synchonouslyMarkFirstRunClingDismissed(this);
 
             // TODO: Update the backup set to include rank.
-            if (mHelper.restoredBackupVersion <= 2) {
+            if (mHelper.restoredBackupVersion <= 3) {
                 LauncherAppState.getLauncherProvider().updateFolderItemsRank();
                 LauncherAppState.getLauncherProvider().convertShortcutsToLauncherActivities();
             }

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -92,7 +92,7 @@ public void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescri
             LauncherClings.synchonouslyMarkFirstRunClingDismissed(this);
 
             // TODO: Update the backup set to include rank.
-            if (mHelper.restoredBackupVersion <= 2) {
+            if (mHelper.restoredBackupVersion <= 3) {
                 LauncherAppState.getLauncherProvider().updateFolderItemsRank();
             }
         } else {

File: src/com/android/launcher3/widget/PendingAddWidgetInfo.java
Patch:
@@ -23,6 +23,7 @@
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.PendingAddItemInfo;
+import com.android.launcher3.compat.AppWidgetManagerCompat;
 
 /**
  * Meta data used for late binding of {@link LauncherAppWidgetProviderInfo}.
@@ -47,6 +48,7 @@ public PendingAddWidgetInfo(Launcher launcher, LauncherAppWidgetProviderInfo i,
             itemType = LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET;
         }
         this.info = i;
+        user = AppWidgetManagerCompat.getInstance(launcher).getUser(i);
         componentName = i.provider;
         minWidth = i.minWidth;
         minHeight = i.minHeight;

File: src/com/android/launcher3/widget/PendingAddWidgetInfo.java
Patch:
@@ -23,6 +23,7 @@
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.PendingAddItemInfo;
+import com.android.launcher3.compat.AppWidgetManagerCompat;
 
 /**
  * Meta data used for late binding of {@link LauncherAppWidgetProviderInfo}.
@@ -47,6 +48,7 @@ public PendingAddWidgetInfo(Launcher launcher, LauncherAppWidgetProviderInfo i,
             itemType = LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET;
         }
         this.info = i;
+        user = AppWidgetManagerCompat.getInstance(launcher).getUser(i);
         componentName = i.provider;
         minWidth = i.minWidth;
         minHeight = i.minHeight;

File: src/com/android/launcher3/widget/PendingAddWidgetInfo.java
Patch:
@@ -23,6 +23,7 @@
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
 import com.android.launcher3.LauncherSettings;
 import com.android.launcher3.PendingAddItemInfo;
+import com.android.launcher3.compat.AppWidgetManagerCompat;
 
 /**
  * Meta data used for late binding of {@link LauncherAppWidgetProviderInfo}.
@@ -47,6 +48,7 @@ public PendingAddWidgetInfo(Launcher launcher, LauncherAppWidgetProviderInfo i,
             itemType = LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET;
         }
         this.info = i;
+        user = AppWidgetManagerCompat.getInstance(launcher).getUser(i);
         componentName = i.provider;
         minWidth = i.minWidth;
         minHeight = i.minHeight;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2281,6 +2281,8 @@ public void beginDragShared(View child, Point relativeTouchPos, DragSource sourc
             dragRect = new Rect(left, top, right, bottom);
         } else if (child instanceof FolderIcon) {
             int previewSize = grid.folderIconSizePx;
+            dragVisualizeOffset = new Point(-padding.get() / 2,
+                    padding.get() / 2 - child.getPaddingTop());
             dragRect = new Rect(0, child.getPaddingTop(), child.getWidth(), previewSize);
         }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2281,6 +2281,8 @@ public void beginDragShared(View child, Point relativeTouchPos, DragSource sourc
             dragRect = new Rect(left, top, right, bottom);
         } else if (child instanceof FolderIcon) {
             int previewSize = grid.folderIconSizePx;
+            dragVisualizeOffset = new Point(-padding.get() / 2,
+                    padding.get() / 2 - child.getPaddingTop());
             dragRect = new Rect(0, child.getPaddingTop(), child.getWidth(), previewSize);
         }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2204,6 +2204,7 @@ private void loadWorkspace() {
                                     appWidgetInfo.cellY = c.getInt(cellYIndex);
                                     appWidgetInfo.spanX = c.getInt(spanXIndex);
                                     appWidgetInfo.spanY = c.getInt(spanYIndex);
+                                    appWidgetInfo.user = user;
 
                                     if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP &&
                                         container != LauncherSettings.Favorites.CONTAINER_HOTSEAT) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2209,6 +2209,7 @@ private void loadWorkspace() {
                                     appWidgetInfo.cellY = c.getInt(cellYIndex);
                                     appWidgetInfo.spanX = c.getInt(spanXIndex);
                                     appWidgetInfo.spanY = c.getInt(spanYIndex);
+                                    appWidgetInfo.user = user;
 
                                     if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP &&
                                         container != LauncherSettings.Favorites.CONTAINER_HOTSEAT) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2213,6 +2213,7 @@ private boolean loadWorkspace() {
                                 boolean customWidget = itemType ==
                                     LauncherSettings.Favorites.ITEM_TYPE_CUSTOM_APPWIDGET;
 
+                                id = c.getLong(idIndex);
                                 int appWidgetId = c.getInt(appWidgetIdIndex);
                                 serialNumber= c.getLong(profileIdIndex);
                                 user = mUserManager.getUserForSerialNumber(serialNumber);
@@ -2222,7 +2223,6 @@ private boolean loadWorkspace() {
                                     continue;
                                 }
                                 String savedProvider = c.getString(appWidgetProviderIndex);
-                                id = c.getLong(idIndex);
                                 final ComponentName component =
                                         ComponentName.unflattenFromString(savedProvider);
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2213,6 +2213,7 @@ private boolean loadWorkspace() {
                                 boolean customWidget = itemType ==
                                     LauncherSettings.Favorites.ITEM_TYPE_CUSTOM_APPWIDGET;
 
+                                id = c.getLong(idIndex);
                                 int appWidgetId = c.getInt(appWidgetIdIndex);
                                 serialNumber= c.getLong(profileIdIndex);
                                 user = mUserManager.getUserForSerialNumber(serialNumber);
@@ -2222,7 +2223,6 @@ private boolean loadWorkspace() {
                                     continue;
                                 }
                                 String savedProvider = c.getString(appWidgetProviderIndex);
-                                id = c.getLong(idIndex);
                                 final ComponentName component =
                                         ComponentName.unflattenFromString(savedProvider);
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2209,6 +2209,7 @@ private void loadWorkspace() {
                                     appWidgetInfo.cellY = c.getInt(cellYIndex);
                                     appWidgetInfo.spanX = c.getInt(spanXIndex);
                                     appWidgetInfo.spanY = c.getInt(spanYIndex);
+                                    appWidgetInfo.user = user;
 
                                     if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP &&
                                         container != LauncherSettings.Favorites.CONTAINER_HOTSEAT) {

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -466,7 +466,7 @@ public synchronized Bitmap getIcon(Intent intent, UserHandleCompat user) {
         }
 
         LauncherActivityInfoCompat launcherActInfo = mLauncherApps.resolveActivity(intent, user);
-        CacheEntry entry = cacheLocked(component, launcherActInfo, user, true, true);
+        CacheEntry entry = cacheLocked(component, launcherActInfo, user, true, false /* useLowRes */);
         return entry.icon;
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1994,7 +1994,7 @@ private void loadWorkspace() {
                                                 "constructing info for partially restored package",
                                                 true);
                                         info = getRestoredItemInfo(c, titleIndex, intent,
-                                                promiseType, cursorIconInfo, context);
+                                                promiseType, itemType, cursorIconInfo, context);
                                         intent = getRestoredItemIntent(c, context, intent);
                                     } else {
                                         // Don't restore items for other profiles.
@@ -3392,7 +3392,7 @@ public static boolean isValidPackage(Context context, String packageName,
      * to a package that is not yet installed on the system.
      */
     public ShortcutInfo getRestoredItemInfo(Cursor c, int titleIndex, Intent intent,
-            int promiseType, CursorIconInfo iconInfo, Context context) {
+            int promiseType, int itemType, CursorIconInfo iconInfo, Context context) {
         final ShortcutInfo info = new ShortcutInfo();
         info.user = UserHandleCompat.myUserHandle();
 
@@ -3418,7 +3418,7 @@ public ShortcutInfo getRestoredItemInfo(Cursor c, int titleIndex, Intent intent,
         }
 
         info.contentDescription = mUserManager.getBadgedLabelForUser(info.title, info.user);
-        info.itemType = LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
+        info.itemType = itemType;
         info.promisedIntent = intent;
         info.status = promiseType;
         return info;

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -772,7 +772,7 @@ public void createEmptyDB(SQLiteDatabase db) {
 
                     long id = c.getLong(idIndex);
                     updateStmt.bindLong(1, id);
-                    updateStmt.execute();
+                    updateStmt.executeUpdateDelete();
                 }
                 db.setTransactionSuccessful();
             } catch (SQLException ex) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1999,7 +1999,7 @@ private void loadWorkspace() {
                                                 "constructing info for partially restored package",
                                                 true);
                                         info = getRestoredItemInfo(c, titleIndex, intent,
-                                                promiseType, cursorIconInfo, context);
+                                                promiseType, itemType, cursorIconInfo, context);
                                         intent = getRestoredItemIntent(c, context, intent);
                                     } else {
                                         // Don't restore items for other profiles.
@@ -3380,7 +3380,7 @@ public static boolean isValidPackage(Context context, String packageName,
      * to a package that is not yet installed on the system.
      */
     public ShortcutInfo getRestoredItemInfo(Cursor c, int titleIndex, Intent intent,
-            int promiseType, CursorIconInfo iconInfo, Context context) {
+            int promiseType, int itemType, CursorIconInfo iconInfo, Context context) {
         final ShortcutInfo info = new ShortcutInfo();
         info.user = UserHandleCompat.myUserHandle();
 
@@ -3406,7 +3406,7 @@ public ShortcutInfo getRestoredItemInfo(Cursor c, int titleIndex, Intent intent,
         }
 
         info.contentDescription = mUserManager.getBadgedLabelForUser(info.title, info.user);
-        info.itemType = LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
+        info.itemType = itemType;
         info.promisedIntent = intent;
         info.status = promiseType;
         return info;

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -772,7 +772,7 @@ public void createEmptyDB(SQLiteDatabase db) {
 
                     long id = c.getLong(idIndex);
                     updateStmt.bindLong(1, id);
-                    updateStmt.execute();
+                    updateStmt.executeUpdateDelete();
                 }
                 db.setTransactionSuccessful();
             } catch (SQLException ex) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1999,7 +1999,7 @@ private void loadWorkspace() {
                                                 "constructing info for partially restored package",
                                                 true);
                                         info = getRestoredItemInfo(c, titleIndex, intent,
-                                                promiseType, cursorIconInfo, context);
+                                                promiseType, itemType, cursorIconInfo, context);
                                         intent = getRestoredItemIntent(c, context, intent);
                                     } else {
                                         // Don't restore items for other profiles.
@@ -3380,7 +3380,7 @@ public static boolean isValidPackage(Context context, String packageName,
      * to a package that is not yet installed on the system.
      */
     public ShortcutInfo getRestoredItemInfo(Cursor c, int titleIndex, Intent intent,
-            int promiseType, CursorIconInfo iconInfo, Context context) {
+            int promiseType, int itemType, CursorIconInfo iconInfo, Context context) {
         final ShortcutInfo info = new ShortcutInfo();
         info.user = UserHandleCompat.myUserHandle();
 
@@ -3406,7 +3406,7 @@ public ShortcutInfo getRestoredItemInfo(Cursor c, int titleIndex, Intent intent,
         }
 
         info.contentDescription = mUserManager.getBadgedLabelForUser(info.title, info.user);
-        info.itemType = LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
+        info.itemType = itemType;
         info.promisedIntent = intent;
         info.status = promiseType;
         return info;

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -772,7 +772,7 @@ public void createEmptyDB(SQLiteDatabase db) {
 
                     long id = c.getLong(idIndex);
                     updateStmt.bindLong(1, id);
-                    updateStmt.execute();
+                    updateStmt.executeUpdateDelete();
                 }
                 db.setTransactionSuccessful();
             } catch (SQLException ex) {

File: src/com/android/launcher3/model/WidgetsModel.java
Patch:
@@ -122,8 +122,10 @@ public void setWidgetsAndShortcuts(ArrayList<Object> rawWidgetsShortcuts) {
                 continue;
             }
             if (mAppFilter != null && !mAppFilter.shouldShowApp(componentName)) {
-                Log.d(TAG, String.format("%s is filtered and not added to the widget tray.",
+                if (DEBUG) {
+                    Log.d(TAG, String.format("%s is filtered and not added to the widget tray.",
                         packageName));
+                }
                 continue;
             }
 

File: src/com/android/launcher3/model/WidgetsModel.java
Patch:
@@ -122,8 +122,10 @@ public void setWidgetsAndShortcuts(ArrayList<Object> rawWidgetsShortcuts) {
                 continue;
             }
             if (mAppFilter != null && !mAppFilter.shouldShowApp(componentName)) {
-                Log.d(TAG, String.format("%s is filtered and not added to the widget tray.",
+                if (DEBUG) {
+                    Log.d(TAG, String.format("%s is filtered and not added to the widget tray.",
                         packageName));
+                }
                 continue;
             }
 

File: src/com/android/launcher3/model/WidgetsModel.java
Patch:
@@ -122,8 +122,10 @@ public void setWidgetsAndShortcuts(ArrayList<Object> rawWidgetsShortcuts) {
                 continue;
             }
             if (mAppFilter != null && !mAppFilter.shouldShowApp(componentName)) {
-                Log.d(TAG, String.format("%s is filtered and not added to the widget tray.",
+                if (DEBUG) {
+                    Log.d(TAG, String.format("%s is filtered and not added to the widget tray.",
                         packageName));
+                }
                 continue;
             }
 

File: src/com/android/launcher3/WorkspaceStateTransitionAnimation.java
Patch:
@@ -211,8 +211,9 @@ public WorkspaceStateTransitionAnimation(Launcher launcher, Workspace workspace)
         mOverlayTransitionTime = res.getInteger(R.integer.config_overlayTransitionTime);
         mSpringLoadedShrinkFactor =
                 res.getInteger(R.integer.config_workspaceSpringLoadShrinkPercentage) / 100f;
+        mOverviewModeShrinkFactor =
+                res.getInteger(R.integer.config_workspaceOverviewShrinkPercentage) / 100f;
         mWorkspaceScrimAlpha = res.getInteger(R.integer.config_workspaceScrimAlpha) / 100f;
-        mOverviewModeShrinkFactor = grid.getOverviewModeScale(Utilities.isRtl(res));
         mWorkspaceFadeInAdjacentScreens = grid.shouldFadeAdjacentWorkspaceScreens();
     }
 

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -123,9 +123,10 @@ void resetLayout() {
         allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));
         allAppsButton.setOnKeyListener(new HotseatIconKeyEventListener());
         if (mLauncher != null) {
-            allAppsButton.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
             mLauncher.setAllAppsButton(allAppsButton);
+            allAppsButton.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
             allAppsButton.setOnClickListener(mLauncher);
+            allAppsButton.setOnLongClickListener(mLauncher);
             allAppsButton.setOnFocusChangeListener(mLauncher.mFocusHandler);
         }
 

File: src/com/android/launcher3/allapps/AllAppsSearchBarController.java
Patch:
@@ -72,6 +72,7 @@ public final void initialize(AlphabeticalAppsList apps, Callbacks cb) {
      * Returns whether the prediction bar should currently be visible depending on the state of
      * the search bar.
      */
+    @Deprecated
     public abstract boolean shouldShowPredictionBar();
 
     /**

File: src/com/android/launcher3/allapps/DefaultAppSearchController.java
Patch:
@@ -125,8 +125,7 @@ public void reset() {
 
     @Override
     public boolean shouldShowPredictionBar() {
-        // Keep showing the prediction bar if the input query is empty
-        return mSearchBarEditView.getEditableText().toString().isEmpty();
+        return false;
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3500,6 +3500,7 @@ public View getOrCreateQsbBar() {
                     .commit();
             }
 
+            mAppWidgetHost.setQsbWidgetId(widgetId);
             if (widgetId != -1) {
                 mQsb = mAppWidgetHost.createView(this, widgetId, searchProvider);
                 mQsb.updateAppWidgetOptions(opts);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3500,6 +3500,7 @@ public View getOrCreateQsbBar() {
                     .commit();
             }
 
+            mAppWidgetHost.setQsbWidgetId(widgetId);
             if (widgetId != -1) {
                 mQsb = mAppWidgetHost.createView(this, widgetId, searchProvider);
                 mQsb.updateAppWidgetOptions(opts);

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -580,19 +580,22 @@ public long parseAndAdd(XmlResourceParser parser)
 
             int type;
             int folderDepth = parser.getDepth();
+            int rank = 0;
             while ((type = parser.next()) != XmlPullParser.END_TAG ||
                     parser.getDepth() > folderDepth) {
                 if (type != XmlPullParser.START_TAG) {
                     continue;
                 }
                 mValues.clear();
                 mValues.put(Favorites.CONTAINER, folderId);
+                mValues.put(Favorites.RANK, rank);
 
                 TagParser tagParser = mFolderElements.get(parser.getName());
                 if (tagParser != null) {
                     final long id = tagParser.parseAndAdd(parser);
                     if (id >= 0) {
                         folderItems.add(id);
+                        rank++;
                     }
                 } else {
                     throw new RuntimeException("Invalid folder item " + parser.getName());

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/UploadedTexture.java
Patch:
@@ -219,7 +219,7 @@ private void uploadToCanvas(GLCanvas canvas) {
                 int texWidth = getTextureWidth();
                 int texHeight = getTextureHeight();
 
-                assertTrue(bWidth <= texWidth && bHeight <= texHeight);
+                Utils.assertTrue(bWidth <= texWidth && bHeight <= texHeight);
 
                 // Upload the bitmap to a new texture.
                 mId = canvas.getGLId().generateTexture();

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/BitmapTexture.java
Patch:
@@ -18,7 +18,7 @@
 
 import android.graphics.Bitmap;
 
-import junit.framework.Assert;
+import com.android.gallery3d.common.Utils;
 
 // BitmapTexture is a texture whose content is specified by a fixed Bitmap.
 //
@@ -34,7 +34,7 @@ public BitmapTexture(Bitmap bitmap) {
 
     public BitmapTexture(Bitmap bitmap, boolean hasBorder) {
         super(hasBorder);
-        Assert.assertTrue(bitmap != null && !bitmap.isRecycled());
+        Utils.assertTrue(bitmap != null && !bitmap.isRecycled());
         mContentBitmap = bitmap;
     }
 

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/GLPaint.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.android.gallery3d.glrenderer;
 
-import junit.framework.Assert;
+import com.android.gallery3d.common.Utils;
 
 public class GLPaint {
     private float mLineWidth = 1f;
@@ -31,7 +31,7 @@ public int getColor() {
     }
 
     public void setLineWidth(float width) {
-        Assert.assertTrue(width >= 0);
+        Utils.assertTrue(width >= 0);
         mLineWidth = width;
     }
 

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/UploadedTexture.java
Patch:
@@ -20,7 +20,7 @@
 import android.graphics.Bitmap.Config;
 import android.opengl.GLUtils;
 
-import junit.framework.Assert;
+import com.android.gallery3d.common.Utils;
 
 import java.util.HashMap;
 
@@ -144,7 +144,7 @@ private Bitmap getBitmap() {
     }
 
     private void freeBitmap() {
-        Assert.assertTrue(mBitmap != null);
+        Utils.assertTrue(mBitmap != null);
         onFreeBitmap(mBitmap);
         mBitmap = null;
     }
@@ -219,7 +219,7 @@ private void uploadToCanvas(GLCanvas canvas) {
                 int texWidth = getTextureWidth();
                 int texHeight = getTextureHeight();
 
-                Assert.assertTrue(bWidth <= texWidth && bHeight <= texHeight);
+                assertTrue(bWidth <= texWidth && bHeight <= texHeight);
 
                 // Upload the bitmap to a new texture.
                 mId = canvas.getGLId().generateTexture();

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/BitmapTexture.java
Patch:
@@ -18,7 +18,7 @@
 
 import android.graphics.Bitmap;
 
-import junit.framework.Assert;
+import com.android.gallery3d.common.Utils;
 
 // BitmapTexture is a texture whose content is specified by a fixed Bitmap.
 //
@@ -34,7 +34,7 @@ public BitmapTexture(Bitmap bitmap) {
 
     public BitmapTexture(Bitmap bitmap, boolean hasBorder) {
         super(hasBorder);
-        Assert.assertTrue(bitmap != null && !bitmap.isRecycled());
+        Utils.assertTrue(bitmap != null && !bitmap.isRecycled());
         mContentBitmap = bitmap;
     }
 

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/GLPaint.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.android.gallery3d.glrenderer;
 
-import junit.framework.Assert;
+import com.android.gallery3d.common.Utils;
 
 public class GLPaint {
     private float mLineWidth = 1f;
@@ -31,7 +31,7 @@ public int getColor() {
     }
 
     public void setLineWidth(float width) {
-        Assert.assertTrue(width >= 0);
+        Utils.assertTrue(width >= 0);
         mLineWidth = width;
     }
 

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -766,7 +766,7 @@ public void createEmptyDB(SQLiteDatabase db) {
                         continue;
                     }
 
-                    if (!InstallShortcutReceiver.isLauncherActivity(intent, mContext)) {
+                    if (!Utilities.isLauncherAppTarget(intent)) {
                         continue;
                     }
 

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -76,8 +76,9 @@ public class ShortcutInfo extends ItemInfo {
     /**
      * Indicates whether the icon comes from an application's resource (if false)
      * or from a custom Bitmap (if true.)
+     * TODO: remove this flag
      */
-    boolean customIcon;
+    public boolean customIcon;
 
     /**
      * Indicates whether we're using the default fallback icon instead of something from the
@@ -94,7 +95,7 @@ public class ShortcutInfo extends ItemInfo {
      * If isShortcut=true and customIcon=false, this contains a reference to the
      * shortcut icon as an application's resource.
      */
-    Intent.ShortcutIconResource iconResource;
+    public Intent.ShortcutIconResource iconResource;
 
     /**
      * The application icon.

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -766,7 +766,7 @@ public void createEmptyDB(SQLiteDatabase db) {
                         continue;
                     }
 
-                    if (!InstallShortcutReceiver.isLauncherActivity(intent, mContext)) {
+                    if (!Utilities.isLauncherAppTarget(intent)) {
                         continue;
                     }
 

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -76,8 +76,9 @@ public class ShortcutInfo extends ItemInfo {
     /**
      * Indicates whether the icon comes from an application's resource (if false)
      * or from a custom Bitmap (if true.)
+     * TODO: remove this flag
      */
-    boolean customIcon;
+    public boolean customIcon;
 
     /**
      * Indicates whether we're using the default fallback icon instead of something from the
@@ -94,7 +95,7 @@ public class ShortcutInfo extends ItemInfo {
      * If isShortcut=true and customIcon=false, this contains a reference to the
      * shortcut icon as an application's resource.
      */
-    Intent.ShortcutIconResource iconResource;
+    public Intent.ShortcutIconResource iconResource;
 
     /**
      * The application icon.

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -766,7 +766,7 @@ public void createEmptyDB(SQLiteDatabase db) {
                         continue;
                     }
 
-                    if (!InstallShortcutReceiver.isLauncherActivity(intent, mContext)) {
+                    if (!Utilities.isLauncherAppTarget(intent)) {
                         continue;
                     }
 

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -76,8 +76,9 @@ public class ShortcutInfo extends ItemInfo {
     /**
      * Indicates whether the icon comes from an application's resource (if false)
      * or from a custom Bitmap (if true.)
+     * TODO: remove this flag
      */
-    boolean customIcon;
+    public boolean customIcon;
 
     /**
      * Indicates whether we're using the default fallback icon instead of something from the
@@ -94,7 +95,7 @@ public class ShortcutInfo extends ItemInfo {
      * If isShortcut=true and customIcon=false, this contains a reference to the
      * shortcut icon as an application's resource.
      */
-    Intent.ShortcutIconResource iconResource;
+    public Intent.ShortcutIconResource iconResource;
 
     /**
      * The application icon.

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -417,7 +417,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     new SimpleSectionMergeAlgorithm((int) Math.ceil(mNumAppsPerRow / 2f),
                             MIN_ROWS_IN_MERGED_SECTION_PHONE, MAX_NUM_MERGES_PHONE);
 
-            mAppsRecyclerView.setNumAppsPerRow(mNumAppsPerRow);
+            mAppsRecyclerView.setNumAppsPerRow(grid, mNumAppsPerRow);
             mAdapter.setNumAppsPerRow(mNumAppsPerRow);
             mApps.setNumAppsPerRow(mNumAppsPerRow, mNumPredictedAppsPerRow, mergeAlgorithm);
         }

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -417,7 +417,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     new SimpleSectionMergeAlgorithm((int) Math.ceil(mNumAppsPerRow / 2f),
                             MIN_ROWS_IN_MERGED_SECTION_PHONE, MAX_NUM_MERGES_PHONE);
 
-            mAppsRecyclerView.setNumAppsPerRow(mNumAppsPerRow);
+            mAppsRecyclerView.setNumAppsPerRow(grid, mNumAppsPerRow);
             mAdapter.setNumAppsPerRow(mNumAppsPerRow);
             mApps.setNumAppsPerRow(mNumAppsPerRow, mNumPredictedAppsPerRow, mergeAlgorithm);
         }

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -70,10 +70,12 @@ public interface LauncherCallbacks {
     /*
      * Extension points for replacing the search experience
      */
+    @Deprecated
     public boolean forceDisableVoiceButtonProxy();
     public boolean providesSearch();
     public boolean startSearch(String initialQuery, boolean selectInitialQuery,
             Bundle appSearchData, Rect sourceBounds);
+    @Deprecated
     public void startVoice();
     public boolean hasCustomContentToLeft();
     public void populateCustomContentContainer();

File: src/com/android/launcher3/allapps/AllAppsGridAdapter.java
Patch:
@@ -337,7 +337,7 @@ public AllAppsGridAdapter(Context context, AlphabeticalAppsList apps,
         mPredictedAppsDividerPaint.setColor(0x1E000000);
         mPredictedAppsDividerPaint.setAntiAlias(true);
         mPredictionBarBottomPadding =
-                res.getDimensionPixelSize(R.dimen.all_apps_prediction_bar_top_bottom_padding);
+                res.getDimensionPixelSize(R.dimen.all_apps_prediction_bar_bottom_padding);
     }
 
     /**

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -345,9 +345,11 @@ protected void onUpdateBackgroundAndPaddings(Rect searchBarBounds, Rect padding)
         InsetDrawable background = new InsetDrawable(
                 getResources().getDrawable(R.drawable.quantum_panel_shape_dark), padding.left, 0,
                 padding.right, 0);
+        Rect bgPadding = new Rect();
+        background.getPadding(bgPadding);
         mView.setBackground(background);
         getRevealView().setBackground(background.getConstantState().newDrawable());
-        mView.updateBackgroundPadding(padding);
+        mView.updateBackgroundPadding(bgPadding);
     }
 
     /**

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1173,8 +1173,7 @@ public void draw(Canvas canvas) {
             if (!mEdgeGlowRight.isFinished()) {
                 final int restoreCount = canvas.save();
                 Rect display = mViewport;
-                canvas.translate(display.left +
-                        display.width() * (getChildCount() - 1), display.top);
+                canvas.translate(display.left + mPageScrolls[getChildCount() - 1], display.top);
                 canvas.rotate(90);
 
                 getEdgeVerticalPostion(sTmpIntPoint);

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1173,8 +1173,7 @@ public void draw(Canvas canvas) {
             if (!mEdgeGlowRight.isFinished()) {
                 final int restoreCount = canvas.save();
                 Rect display = mViewport;
-                canvas.translate(display.left +
-                        display.width() * (getChildCount() - 1), display.top);
+                canvas.translate(display.left + mPageScrolls[getChildCount() - 1], display.top);
                 canvas.rotate(90);
 
                 getEdgeVerticalPostion(sTmpIntPoint);

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -95,7 +95,6 @@ private LauncherAppState() {
         // Register intent receivers
         IntentFilter filter = new IntentFilter();
         filter.addAction(Intent.ACTION_LOCALE_CHANGED);
-        filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
         filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);
         filter.addAction(SearchManager.INTENT_ACTION_SEARCHABLES_CHANGED);
         // For handling managed profiles

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -93,17 +93,16 @@
 import android.widget.ImageView;
 import android.widget.TextView;
 import android.widget.Toast;
-
 import com.android.launcher3.DropTarget.DragObject;
 import com.android.launcher3.PagedView.PageSwitchListener;
 import com.android.launcher3.allapps.AllAppsContainerView;
-import com.android.launcher3.allapps.AllAppsSearchBarController;
 import com.android.launcher3.compat.AppWidgetManagerCompat;
 import com.android.launcher3.compat.LauncherActivityInfoCompat;
 import com.android.launcher3.compat.LauncherAppsCompat;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.compat.UserManagerCompat;
 import com.android.launcher3.model.WidgetsModel;
+import com.android.launcher3.util.ComponentKey;
 import com.android.launcher3.util.LongArrayMap;
 import com.android.launcher3.util.Thunk;
 import com.android.launcher3.widget.PendingAddWidgetInfo;
@@ -3436,7 +3435,7 @@ void exitSpringLoadedDragMode() {
      */
     private void tryAndUpdatePredictedApps() {
         if (mLauncherCallbacks != null) {
-            List<ComponentName> apps = mLauncherCallbacks.getPredictedApps();
+            List<ComponentKey> apps = mLauncherCallbacks.getPredictedApps();
             if (!apps.isEmpty()) {
                 mAppsView.setPredictedApps(apps);
             }

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -8,6 +8,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import com.android.launcher3.allapps.AllAppsSearchBarController;
+import com.android.launcher3.util.ComponentKey;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -92,7 +93,7 @@ public boolean startSearch(String initialQuery, boolean selectInitialQuery,
     public boolean overrideWallpaperDimensions();
     public boolean isLauncherPreinstalled();
     public AllAppsSearchBarController getAllAppsSearchBarController();
-    public List<ComponentName> getPredictedApps();
+    public List<ComponentKey> getPredictedApps();
 
     /**
      * Returning true will immediately result in a call to {@link #setLauncherOverlayView(ViewGroup,

File: src/com/android/launcher3/LauncherExtension.java
Patch:
@@ -12,6 +12,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import com.android.launcher3.allapps.AllAppsSearchBarController;
+import com.android.launcher3.util.ComponentKey;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
@@ -253,7 +254,7 @@ public AllAppsSearchBarController getAllAppsSearchBarController() {
         }
 
         @Override
-        public List<ComponentName> getPredictedApps() {
+        public List<ComponentKey> getPredictedApps() {
             return new ArrayList<>();
         }
 

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -207,7 +207,7 @@ public AllAppsContainerView(Context context, AttributeSet attrs, int defStyleAtt
     /**
      * Sets the current set of predicted apps.
      */
-    public void setPredictedApps(List<ComponentName> apps) {
+    public void setPredictedApps(List<ComponentKey> apps) {
         mApps.setPredictedApps(apps);
     }
 

File: src/com/android/launcher3/widget/WidgetsListAdapter.java
Patch:
@@ -54,7 +54,7 @@
 public class WidgetsListAdapter extends Adapter<WidgetsRowViewHolder> {
 
     private static final String TAG = "WidgetsListAdapter";
-    private static final boolean DEBUG = true;
+    private static final boolean DEBUG = false;
 
     private Launcher mLauncher;
     private LayoutInflater mLayoutInflater;

File: src/com/android/launcher3/widget/WidgetsListAdapter.java
Patch:
@@ -54,7 +54,7 @@
 public class WidgetsListAdapter extends Adapter<WidgetsRowViewHolder> {
 
     private static final String TAG = "WidgetsListAdapter";
-    private static final boolean DEBUG = true;
+    private static final boolean DEBUG = false;
 
     private Launcher mLauncher;
     private LayoutInflater mLayoutInflater;

File: src/com/android/launcher3/widget/WidgetsListAdapter.java
Patch:
@@ -54,7 +54,7 @@
 public class WidgetsListAdapter extends Adapter<WidgetsRowViewHolder> {
 
     private static final String TAG = "WidgetsListAdapter";
-    private static final boolean DEBUG = true;
+    private static final boolean DEBUG = false;
 
     private Launcher mLauncher;
     private LayoutInflater mLayoutInflater;

File: src/com/android/launcher3/allapps/DefaultAppSearchController.java
Patch:
@@ -83,7 +83,7 @@ public View getView(ViewGroup parent) {
         mDismissSearchButtonView = mSearchBarContainerView.findViewById(R.id.dismiss_search_button);
         mDismissSearchButtonView.setOnClickListener(this);
         mSearchBarEditView = (AllAppsSearchEditView)
-                mSearchBarContainerView.findViewById(R.id.search_box);
+                mSearchBarContainerView.findViewById(R.id.search_box_input);
         mSearchBarEditView.addTextChangedListener(this);
         mSearchBarEditView.setOnEditorActionListener(this);
         mSearchBarEditView.setOnBackKeyListener(

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -59,7 +59,7 @@ public class WidgetPreviewLoader {
      * Note: synchronized block used for this variable is expensive and the block should always
      * be posted to a background thread.
      */
-    @Thunk Set<Bitmap> mUnusedBitmaps =
+    @Thunk final Set<Bitmap> mUnusedBitmaps =
             Collections.newSetFromMap(new WeakHashMap<Bitmap, Boolean>());
 
     private final Context mContext;
@@ -540,7 +540,7 @@ public Drawable call() throws Exception {
      */
     public class PreviewLoadRequest {
 
-        private final PreviewLoadTask mTask;
+        @Thunk final PreviewLoadTask mTask;
 
         public PreviewLoadRequest(PreviewLoadTask task) {
             mTask = task;

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -59,7 +59,7 @@ public class WidgetPreviewLoader {
      * Note: synchronized block used for this variable is expensive and the block should always
      * be posted to a background thread.
      */
-    @Thunk Set<Bitmap> mUnusedBitmaps =
+    @Thunk final Set<Bitmap> mUnusedBitmaps =
             Collections.newSetFromMap(new WeakHashMap<Bitmap, Boolean>());
 
     private final Context mContext;
@@ -540,7 +540,7 @@ public Drawable call() throws Exception {
      */
     public class PreviewLoadRequest {
 
-        private final PreviewLoadTask mTask;
+        @Thunk final PreviewLoadTask mTask;
 
         public PreviewLoadRequest(PreviewLoadTask task) {
             mTask = task;

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -59,7 +59,7 @@ public class WidgetPreviewLoader {
      * Note: synchronized block used for this variable is expensive and the block should always
      * be posted to a background thread.
      */
-    @Thunk Set<Bitmap> mUnusedBitmaps =
+    @Thunk final Set<Bitmap> mUnusedBitmaps =
             Collections.newSetFromMap(new WeakHashMap<Bitmap, Boolean>());
 
     private final Context mContext;
@@ -540,7 +540,7 @@ public Drawable call() throws Exception {
      */
     public class PreviewLoadRequest {
 
-        private final PreviewLoadTask mTask;
+        @Thunk final PreviewLoadTask mTask;
 
         public PreviewLoadRequest(PreviewLoadTask task) {
             mTask = task;

File: src/com/android/launcher3/LauncherTransitionable.java
Patch:
@@ -16,13 +16,10 @@
 
 package com.android.launcher3;
 
-import android.view.View;
-
 /**
  * An interface to get callbacks during a launcher transition.
  */
 public interface LauncherTransitionable {
-    View getContent();
     void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean toWorkspace);
     void onLauncherTransitionStart(Launcher l, boolean animated, boolean toWorkspace);
     void onLauncherTransitionStep(Launcher l, float t);

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -1147,6 +1147,6 @@ public boolean enableRotation() {
             return true;
 
         // Check if the user has specifically enabled rotation via preferences.
-        return Utilities.isAllowRotationPrefEnabled(getApplicationContext());
+        return Utilities.isAllowRotationPrefEnabled(getApplicationContext(), true);
     }
 }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -515,7 +515,7 @@ protected void onCreate(Bundle savedInstanceState) {
         // In case we are on a device with locked rotation, we should look at preferences to check
         // if the user has specifically allowed rotation.
         if (!mRotationEnabled) {
-            mRotationEnabled = Utilities.isAllowRotationPrefEnabled(getApplicationContext());
+            mRotationEnabled = Utilities.isAllowRotationPrefEnabled(getApplicationContext(), false);
         }
 
         // On large interfaces, or on devices that a user has specifically enabled screen rotation,

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -97,9 +97,10 @@ public static boolean isPropertyEnabled(String propertyName) {
         return Log.isLoggable(propertyName, Log.VERBOSE);
     }
 
-    public static boolean isAllowRotationPrefEnabled(Context context) {
+    public static boolean isAllowRotationPrefEnabled(Context context, boolean multiProcess) {
         SharedPreferences sharedPrefs = context.getSharedPreferences(
-                LauncherAppState.getSharedPreferencesKey(), Context.MODE_PRIVATE);
+                LauncherAppState.getSharedPreferencesKey(), Context.MODE_PRIVATE | (multiProcess ?
+                        Context.MODE_MULTI_PROCESS : 0));
         boolean allowRotationPref = sharedPrefs.getBoolean(ALLOW_ROTATION_PREFERENCE_KEY, false);
         return sForceEnableRotation || allowRotationPref;
     }

File: src/com/android/launcher3/ClickShadowView.java
Patch:
@@ -96,12 +96,14 @@ public void alignWithIconView(BubbleTextView view, ViewGroup viewParent) {
         float drawableWidth = view.getIcon().getBounds().width();
 
         setTranslationX(leftShift
+                + viewParent.getTranslationX()
                 + view.getCompoundPaddingLeft() * view.getScaleX()
                 + (iconHSpace - drawableWidth) * view.getScaleX() / 2  /* drawable gap */
                 + iconWidth * (1 - view.getScaleX()) / 2  /* gap due to scale */
                 - mShadowPadding  /* extra shadow size */
                 );
         setTranslationY(topShift
+                + viewParent.getTranslationY()
                 + view.getPaddingTop() * view.getScaleY()  /* drawable gap */
                 + view.getHeight() * (1 - view.getScaleY()) / 2  /* gap due to scale */
                 - mShadowPadding  /* extra shadow size */

File: src/com/android/launcher3/ClickShadowView.java
Patch:
@@ -96,12 +96,14 @@ public void alignWithIconView(BubbleTextView view, ViewGroup viewParent) {
         float drawableWidth = view.getIcon().getBounds().width();
 
         setTranslationX(leftShift
+                + viewParent.getTranslationX()
                 + view.getCompoundPaddingLeft() * view.getScaleX()
                 + (iconHSpace - drawableWidth) * view.getScaleX() / 2  /* drawable gap */
                 + iconWidth * (1 - view.getScaleX()) / 2  /* gap due to scale */
                 - mShadowPadding  /* extra shadow size */
                 );
         setTranslationY(topShift
+                + viewParent.getTranslationY()
                 + view.getPaddingTop() * view.getScaleY()  /* drawable gap */
                 + view.getHeight() * (1 - view.getScaleY()) / 2  /* gap due to scale */
                 - mShadowPadding  /* extra shadow size */

File: src/com/android/launcher3/ClickShadowView.java
Patch:
@@ -96,12 +96,14 @@ public void alignWithIconView(BubbleTextView view, ViewGroup viewParent) {
         float drawableWidth = view.getIcon().getBounds().width();
 
         setTranslationX(leftShift
+                + viewParent.getTranslationX()
                 + view.getCompoundPaddingLeft() * view.getScaleX()
                 + (iconHSpace - drawableWidth) * view.getScaleX() / 2  /* drawable gap */
                 + iconWidth * (1 - view.getScaleX()) / 2  /* gap due to scale */
                 - mShadowPadding  /* extra shadow size */
                 );
         setTranslationY(topShift
+                + viewParent.getTranslationY()
                 + view.getPaddingTop() * view.getScaleY()  /* drawable gap */
                 + view.getHeight() * (1 - view.getScaleY()) / 2  /* gap due to scale */
                 - mShadowPadding  /* extra shadow size */

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -301,7 +301,7 @@ private void updateDBIcons(UserHandleCompat user, List<LauncherActivityInfoCompa
         c.close();
         if (!itemsToRemove.isEmpty()) {
             mIconDb.getWritableDatabase().delete(IconDB.TABLE_NAME,
-                    IconDB.COLUMN_ROWID + " IN ( " + TextUtils.join(", ", itemsToRemove) +" )",
+                    Utilities.createDbSelectionQuery(IconDB.COLUMN_ROWID, itemsToRemove),
                     null);
         }
 

File: src/com/android/launcher3/compat/LauncherAppsCompatVL.java
Patch:
@@ -51,7 +51,7 @@ public List<LauncherActivityInfoCompat> getActivityList(String packageName,
         List<LauncherActivityInfo> list = mLauncherApps.getActivityList(packageName,
                 user.getUser());
         if (list.size() == 0) {
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
         }
         ArrayList<LauncherActivityInfoCompat> compatList =
                 new ArrayList<LauncherActivityInfoCompat>(list.size());

File: src/com/android/launcher3/compat/UserManagerCompatVL.java
Patch:
@@ -46,7 +46,7 @@ public class UserManagerCompatVL extends UserManagerCompatV17 {
     public List<UserHandleCompat> getUserProfiles() {
         List<UserHandle> users = mUserManager.getUserProfiles();
         if (users == null) {
-            return Collections.EMPTY_LIST;
+            return Collections.emptyList();
         }
         ArrayList<UserHandleCompat> compatUsers = new ArrayList<UserHandleCompat>(
                 users.size());

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.util.Log;
 

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.util.Log;
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -465,7 +465,6 @@ protected void onCreate(Bundle savedInstanceState) {
                         app.getInvariantDeviceProfile().landscapeProfile
                             : app.getInvariantDeviceProfile().portraitProfile;
 
-        // the LauncherApplication should call this, but in case of Instrumentation it might not be present yet
         mSharedPrefs = getSharedPreferences(LauncherAppState.getSharedPreferencesKey(),
                 Context.MODE_PRIVATE);
         mIsSafeModeEnabled = getPackageManager().isSafeMode();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -465,7 +465,6 @@ protected void onCreate(Bundle savedInstanceState) {
                         app.getInvariantDeviceProfile().landscapeProfile
                             : app.getInvariantDeviceProfile().portraitProfile;
 
-        // the LauncherApplication should call this, but in case of Instrumentation it might not be present yet
         mSharedPrefs = getSharedPreferences(LauncherAppState.getSharedPreferencesKey(),
                 Context.MODE_PRIVATE);
         mIsSafeModeEnabled = getPackageManager().isSafeMode();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2380,6 +2380,9 @@ private void addAppWidgetFromDrop(PendingAddWidgetInfo info, long container, lon
         if (hostView != null) {
             appWidgetId = hostView.getAppWidgetId();
             addAppWidgetImpl(appWidgetId, info, hostView, info.info);
+
+            // Clear the boundWidget so that it doesn't get destroyed.
+            info.boundWidget = null;
         } else {
             // In this case, we either need to start an activity to get permission to bind
             // the widget, or we need to start an activity to configure the widget, or both.

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2380,6 +2380,9 @@ private void addAppWidgetFromDrop(PendingAddWidgetInfo info, long container, lon
         if (hostView != null) {
             appWidgetId = hostView.getAppWidgetId();
             addAppWidgetImpl(appWidgetId, info, hostView, info.info);
+
+            // Clear the boundWidget so that it doesn't get destroyed.
+            info.boundWidget = null;
         } else {
             // In this case, we either need to start an activity to get permission to bind
             // the widget, or we need to start an activity to configure the widget, or both.

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -21,7 +21,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.util.Log;
 

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -432,6 +432,7 @@ public void onBindPredictionBar() {
                 icon = (BubbleTextView) mLayoutInflater.inflate(
                         R.layout.all_apps_prediction_bar_icon, mPredictionBarView, false);
                 icon.setFocusable(true);
+                icon.setLongPressTimeout(ViewConfiguration.get(getContext()).getLongPressTimeout());
                 mPredictionBarView.addView(icon);
             }
 

File: src/com/android/launcher3/allapps/AllAppsGridAdapter.java
Patch:
@@ -27,6 +27,7 @@
 import android.support.v7.widget.RecyclerView;
 import android.view.LayoutInflater;
 import android.view.View;
+import android.view.ViewConfiguration;
 import android.view.ViewGroup;
 import android.widget.TextView;
 import com.android.launcher3.AppInfo;
@@ -418,6 +419,8 @@ public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
                 icon.setOnTouchListener(mTouchListener);
                 icon.setOnClickListener(mIconClickListener);
                 icon.setOnLongClickListener(mIconLongClickListener);
+                icon.setLongPressTimeout(ViewConfiguration.get(parent.getContext())
+                        .getLongPressTimeout());
                 icon.setFocusable(true);
                 return new ViewHolder(icon);
             default:

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -52,7 +52,6 @@ public class BubbleTextView extends TextView {
     private static final float SHADOW_Y_OFFSET = 2.0f;
     private static final int SHADOW_LARGE_COLOUR = 0xDD000000;
     private static final int SHADOW_SMALL_COLOUR = 0xCC000000;
-    static final float PADDING_V = 3.0f;
 
     private static final int DISPLAY_WORKSPACE = 0;
     private static final int DISPLAY_ALL_APPS = 1;

File: src/com/android/launcher3/FolderPagedView.java
Patch:
@@ -87,8 +87,8 @@ public FolderPagedView(Context context, AttributeSet attrs) {
         LauncherAppState app = LauncherAppState.getInstance();
 
         InvariantDeviceProfile profile = app.getInvariantDeviceProfile();
-        mMaxCountX = (int) profile.numFolderColumns;
-        mMaxCountY = (int) profile.numFolderRows;
+        mMaxCountX = profile.numFolderColumns;
+        mMaxCountY = profile.numFolderRows;
 
         mMaxItemsPerPage = mMaxCountX * mMaxCountY;
 

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -43,7 +43,7 @@ protected void onFinishInflate() {
         // Get the hover color
         mHoverColor = getResources().getColor(R.color.delete_target_hover_tint);
 
-        setDrawable(R.drawable.ic_launcher_remove_normal);
+        setDrawable(R.drawable.ic_remove_launcher);
     }
 
     public static boolean supportsDrop(Object info) {

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -222,8 +222,8 @@ public FolderRingAnimator(Launcher launcher, FolderIcon folderIcon) {
                 DeviceProfile grid = launcher.getDeviceProfile();
                 sPreviewSize = grid.folderIconSizePx;
                 sPreviewPadding = res.getDimensionPixelSize(R.dimen.folder_preview_padding);
-                sSharedOuterRingDrawable = res.getDrawable(R.drawable.portal_ring_outer_holo);
-                sSharedInnerRingDrawable = res.getDrawable(R.drawable.portal_ring_inner_nolip_holo);
+                sSharedOuterRingDrawable = res.getDrawable(R.drawable.portal_ring_outer);
+                sSharedInnerRingDrawable = res.getDrawable(R.drawable.portal_ring_inner_nolip);
                 sSharedFolderLeaveBehind = res.getDrawable(R.drawable.portal_ring_rest);
                 sStaticValuesDirty = false;
             }

File: src/com/android/launcher3/InfoDropTarget.java
Patch:
@@ -41,7 +41,7 @@ protected void onFinishInflate() {
         // Get the hover color
         mHoverColor = getResources().getColor(R.color.info_target_hover_tint);
 
-        setDrawable(R.drawable.ic_launcher_info_normal);
+        setDrawable(R.drawable.ic_info_launcher);
     }
 
     public static void startDetailsActivityForInfo(Object info, Launcher launcher) {

File: src/com/android/launcher3/UninstallDropTarget.java
Patch:
@@ -28,7 +28,7 @@ protected void onFinishInflate() {
         // Get the hover color
         mHoverColor = getResources().getColor(R.color.uninstall_target_hover_tint);
 
-        setDrawable(R.drawable.ic_launcher_uninstall_normal);
+        setDrawable(R.drawable.ic_uninstall_launcher);
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -465,7 +465,6 @@ protected void onCreate(Bundle savedInstanceState) {
                         app.getInvariantDeviceProfile().landscapeProfile
                             : app.getInvariantDeviceProfile().portraitProfile;
 
-        // the LauncherApplication should call this, but in case of Instrumentation it might not be present yet
         mSharedPrefs = getSharedPreferences(LauncherAppState.getSharedPreferencesKey(),
                 Context.MODE_PRIVATE);
         mIsSafeModeEnabled = getPackageManager().isSafeMode();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1620,7 +1620,7 @@ private void updateStateForCustomContent(int screenCenter) {
         // We should only update the drag layer background alpha if we are not in all apps or the
         // widgets tray
         if (mState == State.NORMAL) {
-            mLauncher.getDragLayer().setBackgroundAlpha(progress * 0.8f);
+            mLauncher.getDragLayer().setBackgroundAlpha(progress == 1 ? 0 : progress * 0.8f);
         }
 
         if (mLauncher.getHotseat() != null) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2932,6 +2932,9 @@ public void run() {
                 }
             });
         }
+
+        // Reload widget list. No need to refresh, as we only want to update the icons and labels.
+        loadAndBindWidgetsAndShortcuts(mApp.getContext(), callbacks, false);
     }
 
     void enqueuePackageUpdated(PackageUpdatedTask task) {

File: src/com/android/launcher3/model/WidgetsModel.java
Patch:
@@ -8,7 +8,6 @@
 import com.android.launcher3.IconCache;
 import com.android.launcher3.LauncherAppState;
 import com.android.launcher3.LauncherAppWidgetProviderInfo;
-
 import com.android.launcher3.Utilities;
 import com.android.launcher3.compat.AlphabeticIndexCompat;
 import com.android.launcher3.compat.UserHandleCompat;

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -131,7 +131,7 @@ void resetLayout() {
                 inflater.inflate(R.layout.all_apps_button, mContent, false);
         Drawable d = context.getResources().getDrawable(R.drawable.all_apps_button_icon);
 
-        Utilities.resizeIconDrawable(d);
+        mLauncher.resizeIconDrawable(d);
         allAppsButton.setCompoundDrawables(null, d, null, null);
 
         allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));

File: src/com/android/launcher3/LauncherAppWidgetProviderInfo.java
Patch:
@@ -67,7 +67,8 @@ public Drawable getIcon(Context context, IconCache cache) {
         if (isCustomWidget) {
             return cache.getFullResIcon(provider.getPackageName(), icon);
         }
-        return super.loadIcon(context, cache.getFullResIconDpi());
+        return super.loadIcon(context,
+                LauncherAppState.getInstance().getInvariantDeviceProfile().fillResIconDpi);
     }
 
     public String toString(PackageManager pm) {

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -121,7 +121,7 @@ public void updateIcon(IconCache cache) {
             //   2) Preload icon in the center
             //   3) Setup icon in the center and app icon in the top right corner.
             if (mDisabledForSafeMode) {
-                FastBitmapDrawable disabledIcon = Utilities.createIconDrawable(mIcon);
+                FastBitmapDrawable disabledIcon = mLauncher.createIconDrawable(mIcon);
                 disabledIcon.setGhostModeEnabled(true);
                 mCenterDrawable = disabledIcon;
                 mTopCornerDrawable = null;
@@ -134,7 +134,7 @@ public void updateIcon(IconCache cache) {
                     sPreloaderTheme.applyStyle(R.style.PreloadIcon, true);
                 }
 
-                FastBitmapDrawable drawable = Utilities.createIconDrawable(mIcon);
+                FastBitmapDrawable drawable = mLauncher.createIconDrawable(mIcon);
                 mCenterDrawable = new PreloadIconDrawable(drawable, sPreloaderTheme);
                 mCenterDrawable.setCallback(this);
                 mTopCornerDrawable = null;

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -241,6 +241,7 @@ private boolean beginDraggingWidget(WidgetCell v) {
             Drawable icon = mIconCache.getFullResIcon(createShortcutInfo.activityInfo);
             preview = Utilities.createIconBitmap(icon, mLauncher);
             createItemInfo.spanX = createItemInfo.spanY = 1;
+            scale = ((float) mLauncher.getDeviceProfile().iconSizePx) / preview.getWidth();
         }
 
         // Don't clip alpha values for the drag outline if we're using the default widget preview

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -131,7 +131,7 @@ void resetLayout() {
                 inflater.inflate(R.layout.all_apps_button, mContent, false);
         Drawable d = context.getResources().getDrawable(R.drawable.all_apps_button_icon);
 
-        Utilities.resizeIconDrawable(d);
+        mLauncher.resizeIconDrawable(d);
         allAppsButton.setCompoundDrawables(null, d, null, null);
 
         allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));

File: src/com/android/launcher3/LauncherAppWidgetProviderInfo.java
Patch:
@@ -67,7 +67,8 @@ public Drawable getIcon(Context context, IconCache cache) {
         if (isCustomWidget) {
             return cache.getFullResIcon(provider.getPackageName(), icon);
         }
-        return super.loadIcon(context, cache.getFullResIconDpi());
+        return super.loadIcon(context,
+                LauncherAppState.getInstance().getInvariantDeviceProfile().fillResIconDpi);
     }
 
     public String toString(PackageManager pm) {

File: src/com/android/launcher3/PendingAppWidgetHostView.java
Patch:
@@ -121,7 +121,7 @@ public void updateIcon(IconCache cache) {
             //   2) Preload icon in the center
             //   3) Setup icon in the center and app icon in the top right corner.
             if (mDisabledForSafeMode) {
-                FastBitmapDrawable disabledIcon = Utilities.createIconDrawable(mIcon);
+                FastBitmapDrawable disabledIcon = mLauncher.createIconDrawable(mIcon);
                 disabledIcon.setGhostModeEnabled(true);
                 mCenterDrawable = disabledIcon;
                 mTopCornerDrawable = null;
@@ -134,7 +134,7 @@ public void updateIcon(IconCache cache) {
                     sPreloaderTheme.applyStyle(R.style.PreloadIcon, true);
                 }
 
-                FastBitmapDrawable drawable = Utilities.createIconDrawable(mIcon);
+                FastBitmapDrawable drawable = mLauncher.createIconDrawable(mIcon);
                 mCenterDrawable = new PreloadIconDrawable(drawable, sPreloaderTheme);
                 mCenterDrawable.setCallback(this);
                 mTopCornerDrawable = null;

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -241,6 +241,7 @@ private boolean beginDraggingWidget(WidgetCell v) {
             Drawable icon = mIconCache.getFullResIcon(createShortcutInfo.activityInfo);
             preview = Utilities.createIconBitmap(icon, mLauncher);
             createItemInfo.spanX = createItemInfo.spanY = 1;
+            scale = ((float) mLauncher.getDeviceProfile().iconSizePx) / preview.getWidth();
         }
 
         // Don't clip alpha values for the drag outline if we're using the default widget preview

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -28,15 +28,13 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 import android.util.AttributeSet;
-import android.util.Log;
 import android.util.SparseArray;
 import android.util.TypedValue;
 import android.view.KeyEvent;
 import android.view.MotionEvent;
 import android.view.ViewConfiguration;
 import android.view.ViewParent;
 import android.widget.TextView;
-
 import com.android.launcher3.IconCache.IconLoadRequest;
 import com.android.launcher3.model.PackageItemInfo;
 

File: src/com/android/launcher3/LauncherCallbacks.java
Patch:
@@ -56,6 +56,8 @@ public interface LauncherCallbacks {
     public void bindAllApplications(ArrayList<AppInfo> apps);
     public void onClickFolderIcon(View v);
     public void onClickAppShortcut(View v);
+
+    @Deprecated
     public void onClickPagedViewIcon(View v);
     public void onClickWallpaperPicker(View v);
     public void onClickSettingsButton(View v);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2370,6 +2370,9 @@ private void addAppWidgetFromDrop(PendingAddWidgetInfo info, long container, lon
         if (hostView != null) {
             appWidgetId = hostView.getAppWidgetId();
             addAppWidgetImpl(appWidgetId, info, hostView, info.info);
+
+            // Clear the boundWidget so that it doesn't get destroyed.
+            info.boundWidget = null;
         } else {
             // In this case, we either need to start an activity to get permission to bind
             // the widget, or we need to start an activity to configure the widget, or both.

File: src/com/android/launcher3/allapps/AlphabeticalAppsList.java
Patch:
@@ -29,8 +29,8 @@
 import com.android.launcher3.model.AppNameComparator;
 import com.android.launcher3.util.Thunk;
 
+import java.nio.charset.Charset;
 import java.nio.charset.CharsetEncoder;
-import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -178,7 +178,7 @@ public PhoneMergeAlgorithm(int minAppsPerRow, int minRowsInMergedSection, int ma
             mMinAppsPerRow = minAppsPerRow;
             mMinRowsInMergedSection = minRowsInMergedSection;
             mMaxAllowableMerges = maxNumMerges;
-            mAsciiEncoder = StandardCharsets.US_ASCII.newEncoder();
+            mAsciiEncoder = Charset.forName("US-ASCII").newEncoder();
         }
 
         @Override

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -734,6 +734,7 @@ public void run() {
                 fadeAndRemoveEmptyScreen(SNAP_OFF_EMPTY_SCREEN_DURATION, FADE_EMPTY_SCREEN_DURATION,
                         onComplete, stripEmptyScreens);
             } else {
+                snapToPage(getNextPage(), 0);
                 fadeAndRemoveEmptyScreen(0, FADE_EMPTY_SCREEN_DURATION,
                         onComplete, stripEmptyScreens);
             }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -734,6 +734,7 @@ public void run() {
                 fadeAndRemoveEmptyScreen(SNAP_OFF_EMPTY_SCREEN_DURATION, FADE_EMPTY_SCREEN_DURATION,
                         onComplete, stripEmptyScreens);
             } else {
+                snapToPage(getNextPage(), 0);
                 fadeAndRemoveEmptyScreen(0, FADE_EMPTY_SCREEN_DURATION,
                         onComplete, stripEmptyScreens);
             }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -731,6 +731,7 @@ public void run() {
                 fadeAndRemoveEmptyScreen(SNAP_OFF_EMPTY_SCREEN_DURATION, FADE_EMPTY_SCREEN_DURATION,
                         onComplete, stripEmptyScreens);
             } else {
+                snapToPage(getNextPage(), 0);
                 fadeAndRemoveEmptyScreen(0, FADE_EMPTY_SCREEN_DURATION,
                         onComplete, stripEmptyScreens);
             }

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -918,7 +918,7 @@ void onExitScrollArea() {
     void showPageHints() {
         mShowPageHints = true;
         Workspace workspace = mLauncher.getWorkspace();
-        getDescendantRectRelativeToSelf(workspace.getChildAt(workspace.getChildCount() - 1),
+        getDescendantRectRelativeToSelf(workspace.getChildAt(workspace.numCustomPages()),
                 mScrollChildPosition);
         invalidate();
     }

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -447,7 +447,6 @@ public void onBindPredictionBar() {
     @Override
     protected void onFixedBoundsUpdated() {
         // Update the number of items in the grid
-        LauncherAppState app = LauncherAppState.getInstance();
         DeviceProfile grid = mLauncher.getDeviceProfile();
         if (grid.updateAppsViewNumCols(getContext().getResources(), mFixedBounds.width())) {
             mNumAppsPerRow = grid.allAppsNumCols;

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -918,7 +918,7 @@ void onExitScrollArea() {
     void showPageHints() {
         mShowPageHints = true;
         Workspace workspace = mLauncher.getWorkspace();
-        getDescendantRectRelativeToSelf(workspace.getChildAt(workspace.getChildCount() - 1),
+        getDescendantRectRelativeToSelf(workspace.getChildAt(workspace.numCustomPages()),
                 mScrollChildPosition);
         invalidate();
     }

File: src/com/android/launcher3/allapps/AllAppsContainerView.java
Patch:
@@ -447,7 +447,6 @@ public void onBindPredictionBar() {
     @Override
     protected void onFixedBoundsUpdated() {
         // Update the number of items in the grid
-        LauncherAppState app = LauncherAppState.getInstance();
         DeviceProfile grid = mLauncher.getDeviceProfile();
         if (grid.updateAppsViewNumCols(getContext().getResources(), mFixedBounds.width())) {
             mNumAppsPerRow = grid.allAppsNumCols;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2078,7 +2078,7 @@ protected void snapToPageWithVelocity(int whichPage, int velocity) {
         snapToPage(whichPage, delta, duration);
     }
 
-    protected void snapToPage(int whichPage) {
+    public void snapToPage(int whichPage) {
         snapToPage(whichPage, getPageSnapDuration());
     }
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2078,7 +2078,7 @@ protected void snapToPageWithVelocity(int whichPage, int velocity) {
         snapToPage(whichPage, delta, duration);
     }
 
-    protected void snapToPage(int whichPage) {
+    public void snapToPage(int whichPage) {
         snapToPage(whichPage, getPageSnapDuration());
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1055,8 +1055,8 @@ protected void onResume() {
         }
 
         // Background was set to gradient in onPause(), restore to transparent if in all apps.
-        setWorkspaceBackground(mState == State.WORKSPACE ? WORKSPACE_BACKGROUND_TRANSPARENT
-                : WORKSPACE_BACKGROUND_GRADIENT);
+        setWorkspaceBackground(mState == State.WORKSPACE ? WORKSPACE_BACKGROUND_GRADIENT
+                : WORKSPACE_BACKGROUND_TRANSPARENT);
 
         mPaused = false;
         if (mRestoring || mOnResumeNeedsLoad) {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1055,8 +1055,8 @@ protected void onResume() {
         }
 
         // Background was set to gradient in onPause(), restore to transparent if in all apps.
-        setWorkspaceBackground(mState == State.WORKSPACE ? WORKSPACE_BACKGROUND_TRANSPARENT
-                : WORKSPACE_BACKGROUND_GRADIENT);
+        setWorkspaceBackground(mState == State.WORKSPACE ? WORKSPACE_BACKGROUND_GRADIENT
+                : WORKSPACE_BACKGROUND_TRANSPARENT);
 
         mPaused = false;
         if (mRestoring || mOnResumeNeedsLoad) {

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -263,6 +263,7 @@ protected void onLoadRequestComplete(LoadRequest req, boolean success) {
         if (req.postExecute != null) {
             req.postExecute.run();
         }
+        mProgressView.setVisibility(View.GONE);
     }
 
     public final void setCropViewTileSource(BitmapSource bitmapSource, boolean touchEnabled,

File: src/com/android/launcher3/AppsContainerView.java
Patch:
@@ -210,7 +210,8 @@ public AppsContainerView(Context context, AttributeSet attrs, int defStyleAttr)
         mLayoutInflater = LayoutInflater.from(context);
         mNumAppsPerRow = grid.appsViewNumCols;
         mNumPredictedAppsPerRow = grid.appsViewNumPredictiveCols;
-        mApps = new AlphabeticalAppsList(context, this, mNumAppsPerRow, mNumPredictedAppsPerRow);
+        mApps = new AlphabeticalAppsList(context, mNumAppsPerRow, mNumPredictedAppsPerRow);
+        mApps.setAppsUpdatedCallback(this);
         mAdapter = new AppsGridAdapter(context, mApps, mNumAppsPerRow, this, this, mLauncher, this);
         mAdapter.setEmptySearchText(res.getString(R.string.loading_apps_message));
         mAdapter.setNumAppsPerRow(mNumAppsPerRow);

File: src/com/android/launcher3/AppsContainerView.java
Patch:
@@ -210,7 +210,8 @@ public AppsContainerView(Context context, AttributeSet attrs, int defStyleAttr)
         mLayoutInflater = LayoutInflater.from(context);
         mNumAppsPerRow = grid.appsViewNumCols;
         mNumPredictedAppsPerRow = grid.appsViewNumPredictiveCols;
-        mApps = new AlphabeticalAppsList(context, this, mNumAppsPerRow, mNumPredictedAppsPerRow);
+        mApps = new AlphabeticalAppsList(context, mNumAppsPerRow, mNumPredictedAppsPerRow);
+        mApps.setAppsUpdatedCallback(this);
         mAdapter = new AppsGridAdapter(context, mApps, mNumAppsPerRow, this, this, mLauncher, this);
         mAdapter.setEmptySearchText(res.getString(R.string.loading_apps_message));
         mAdapter.setNumAppsPerRow(mNumAppsPerRow);

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -94,6 +94,7 @@ public void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescri
             // TODO: Update the backup set to include rank.
             if (mHelper.restoredBackupVersion <= 2) {
                 LauncherAppState.getLauncherProvider().updateFolderItemsRank();
+                LauncherAppState.getLauncherProvider().convertShortcutsToLauncherActivities();
             }
         } else {
             if (VERBOSE) Log.v(TAG, "Nothing was restored, clearing DB");

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2027,7 +2027,7 @@ private void loadWorkspace() {
                                                 "constructing info for partially restored package",
                                                 true);
                                         info = getRestoredItemInfo(c, titleIndex, intent,
-                                                promiseType, useLowResIcon);
+                                                promiseType);
                                         intent = getRestoredItemIntent(c, context, intent);
                                     } else {
                                         // Don't restore items for other profiles.
@@ -3402,10 +3402,10 @@ public static boolean isValidPackage(Context context, String packageName,
      * to a package that is not yet installed on the system.
      */
     public ShortcutInfo getRestoredItemInfo(Cursor cursor, int titleIndex, Intent intent,
-            int promiseType, boolean useLowResIcon) {
+            int promiseType) {
         final ShortcutInfo info = new ShortcutInfo();
         info.user = UserHandleCompat.myUserHandle();
-        mIconCache.getTitleAndIcon(info, intent, info.user, useLowResIcon);
+        mIconCache.getTitleAndIcon(info, intent, info.user, false /* useLowResIcon */);
 
         if ((promiseType & ShortcutInfo.FLAG_RESTORED_ICON) != 0) {
             String title = (cursor != null) ? cursor.getString(titleIndex) : null;

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -94,6 +94,7 @@ public void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescri
             // TODO: Update the backup set to include rank.
             if (mHelper.restoredBackupVersion <= 2) {
                 LauncherAppState.getLauncherProvider().updateFolderItemsRank();
+                LauncherAppState.getLauncherProvider().convertShortcutsToLauncherActivities();
             }
         } else {
             if (VERBOSE) Log.v(TAG, "Nothing was restored, clearing DB");

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2027,7 +2027,7 @@ private void loadWorkspace() {
                                                 "constructing info for partially restored package",
                                                 true);
                                         info = getRestoredItemInfo(c, titleIndex, intent,
-                                                promiseType, useLowResIcon);
+                                                promiseType);
                                         intent = getRestoredItemIntent(c, context, intent);
                                     } else {
                                         // Don't restore items for other profiles.
@@ -3402,10 +3402,10 @@ public static boolean isValidPackage(Context context, String packageName,
      * to a package that is not yet installed on the system.
      */
     public ShortcutInfo getRestoredItemInfo(Cursor cursor, int titleIndex, Intent intent,
-            int promiseType, boolean useLowResIcon) {
+            int promiseType) {
         final ShortcutInfo info = new ShortcutInfo();
         info.user = UserHandleCompat.myUserHandle();
-        mIconCache.getTitleAndIcon(info, intent, info.user, useLowResIcon);
+        mIconCache.getTitleAndIcon(info, intent, info.user, false /* useLowResIcon */);
 
         if ((promiseType & ShortcutInfo.FLAG_RESTORED_ICON) != 0) {
             String title = (cursor != null) ? cursor.getString(titleIndex) : null;

File: src/com/android/launcher3/AppsContainerView.java
Patch:
@@ -210,7 +210,8 @@ public AppsContainerView(Context context, AttributeSet attrs, int defStyleAttr)
         mLayoutInflater = LayoutInflater.from(context);
         mNumAppsPerRow = grid.appsViewNumCols;
         mNumPredictedAppsPerRow = grid.appsViewNumPredictiveCols;
-        mApps = new AlphabeticalAppsList(context, this, mNumAppsPerRow, mNumPredictedAppsPerRow);
+        mApps = new AlphabeticalAppsList(context, mNumAppsPerRow, mNumPredictedAppsPerRow);
+        mApps.setAppsUpdatedCallback(this);
         mAdapter = new AppsGridAdapter(context, mApps, mNumAppsPerRow, this, this, mLauncher, this);
         mAdapter.setEmptySearchText(res.getString(R.string.loading_apps_message));
         mAdapter.setNumAppsPerRow(mNumAppsPerRow);

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -94,6 +94,7 @@ public void onRestore(BackupDataInput data, int appVersionCode, ParcelFileDescri
             // TODO: Update the backup set to include rank.
             if (mHelper.restoredBackupVersion <= 2) {
                 LauncherAppState.getLauncherProvider().updateFolderItemsRank();
+                LauncherAppState.getLauncherProvider().convertShortcutsToLauncherActivities();
             }
         } else {
             if (VERBOSE) Log.v(TAG, "Nothing was restored, clearing DB");

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2027,7 +2027,7 @@ private void loadWorkspace() {
                                                 "constructing info for partially restored package",
                                                 true);
                                         info = getRestoredItemInfo(c, titleIndex, intent,
-                                                promiseType, useLowResIcon);
+                                                promiseType);
                                         intent = getRestoredItemIntent(c, context, intent);
                                     } else {
                                         // Don't restore items for other profiles.
@@ -3402,10 +3402,10 @@ public static boolean isValidPackage(Context context, String packageName,
      * to a package that is not yet installed on the system.
      */
     public ShortcutInfo getRestoredItemInfo(Cursor cursor, int titleIndex, Intent intent,
-            int promiseType, boolean useLowResIcon) {
+            int promiseType) {
         final ShortcutInfo info = new ShortcutInfo();
         info.user = UserHandleCompat.myUserHandle();
-        mIconCache.getTitleAndIcon(info, intent, info.user, useLowResIcon);
+        mIconCache.getTitleAndIcon(info, intent, info.user, false /* useLowResIcon */);
 
         if ((promiseType & ShortcutInfo.FLAG_RESTORED_ICON) != 0) {
             String title = (cursor != null) ? cursor.getString(titleIndex) : null;

File: src/com/android/launcher3/AppsContainerView.java
Patch:
@@ -136,7 +136,7 @@ public void disable() { }
  */
 public class AppsContainerView extends BaseContainerView implements DragSource, Insettable,
         TextWatcher, TextView.OnEditorActionListener, LauncherTransitionable,
-        AlphabeticalAppsList.FilterChangedCallback, AppsGridAdapter.PredictionBarSpacerCallbacks,
+        AlphabeticalAppsList.AdapterChangedCallback, AppsGridAdapter.PredictionBarSpacerCallbacks,
         View.OnTouchListener, View.OnClickListener, View.OnLongClickListener,
         ViewTreeObserver.OnPreDrawListener {
 
@@ -686,7 +686,7 @@ public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
     }
 
     @Override
-    public void onFilterChanged() {
+    public void onAdapterItemsChanged() {
         updatePredictionBarVisibility();
     }
 

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -92,7 +92,7 @@ public void remove(ShortcutInfo item) {
     }
 
     public void setTitle(CharSequence title) {
-        this.title = Utilities.trim(title);
+        this.title = title;
         for (int i = 0; i < listeners.size(); i++) {
             listeners.get(i).onTitleChanged(title);
         }

File: src/com/android/launcher3/widget/WidgetsListAdapter.java
Patch:
@@ -183,7 +183,6 @@ public void onViewRecycled(WidgetsRowViewHolder holder) {
         }
     }
 
-    @Override
     public boolean onFailedToRecycleView(WidgetsRowViewHolder holder) {
         // If child views are animating, then the RecyclerView may choose not to recycle the view,
         // causing extraneous onCreateViewHolder() calls.  It is safe in this case to continue

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -633,9 +633,6 @@ private void sendScrollAccessibilityEvent() {
             if (mCurrentPage != getNextPage()) {
                 AccessibilityEvent ev =
                         AccessibilityEvent.obtain(AccessibilityEvent.TYPE_VIEW_SCROLLED);
-                ev.setItemCount(getChildCount());
-                ev.setFromIndex(getNextPage());
-                ev.setToIndex(getNextPage());
 
                 sendAccessibilityEventUnchecked(ev);
             }

File: src/com/android/launcher3/widget/WidgetsListAdapter.java
Patch:
@@ -183,7 +183,6 @@ public void onViewRecycled(WidgetsRowViewHolder holder) {
         }
     }
 
-    @Override
     public boolean onFailedToRecycleView(WidgetsRowViewHolder holder) {
         // If child views are animating, then the RecyclerView may choose not to recycle the view,
         // causing extraneous onCreateViewHolder() calls.  It is safe in this case to continue

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -633,9 +633,6 @@ private void sendScrollAccessibilityEvent() {
             if (mCurrentPage != getNextPage()) {
                 AccessibilityEvent ev =
                         AccessibilityEvent.obtain(AccessibilityEvent.TYPE_VIEW_SCROLLED);
-                ev.setItemCount(getChildCount());
-                ev.setFromIndex(getNextPage());
-                ev.setToIndex(getNextPage());
 
                 sendAccessibilityEventUnchecked(ev);
             }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -639,9 +639,6 @@ private void sendScrollAccessibilityEvent() {
             if (mCurrentPage != getNextPage()) {
                 AccessibilityEvent ev =
                         AccessibilityEvent.obtain(AccessibilityEvent.TYPE_VIEW_SCROLLED);
-                ev.setItemCount(getChildCount());
-                ev.setFromIndex(getNextPage());
-                ev.setToIndex(getNextPage());
 
                 sendAccessibilityEventUnchecked(ev);
             }

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -131,7 +131,7 @@ public void onClick(View v) {
 
         // Load image in background
         final BitmapRegionTileSource.UriBitmapSource bitmapSource =
-                new BitmapRegionTileSource.UriBitmapSource(getContext(), imageUri, 1024);
+                new BitmapRegionTileSource.UriBitmapSource(getContext(), imageUri);
         mSetWallpaperButton.setEnabled(false);
         Runnable onLoad = new Runnable() {
             public void run() {

File: src/com/android/launcher3/widget/WidgetCell.java
Patch:
@@ -118,6 +118,7 @@ public void clear() {
         if (DEBUG) {
             Log.d(TAG, "reset called on:" + mWidgetName.getText());
         }
+        mWidgetImage.animate().cancel();
         mWidgetImage.setImageDrawable(null);
         mWidgetName.setText(null);
         mWidgetDims.setText(null);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -406,9 +406,9 @@ public void run() {
      *
      * @return A new UserFolder.
      */
+    @SuppressLint("InflateParams")
     static Folder fromXml(Launcher launcher) {
-        return (Folder) LayoutInflater.from(launcher).inflate(R.layout.user_folder,
-                launcher.getDragLayer(), false);
+        return (Folder) launcher.getLayoutInflater().inflate(R.layout.user_folder, null);
     }
 
     /**

File: src/com/android/launcher3/Folder.java
Patch:
@@ -406,9 +406,9 @@ public void run() {
      *
      * @return A new UserFolder.
      */
+    @SuppressLint("InflateParams")
     static Folder fromXml(Launcher launcher) {
-        return (Folder) LayoutInflater.from(launcher).inflate(R.layout.user_folder,
-                launcher.getDragLayer(), false);
+        return (Folder) launcher.getLayoutInflater().inflate(R.layout.user_folder, null);
     }
 
     /**

File: src/com/android/launcher3/Folder.java
Patch:
@@ -406,9 +406,9 @@ public void run() {
      *
      * @return A new UserFolder.
      */
+    @SuppressLint("InflateParams")
     static Folder fromXml(Launcher launcher) {
-        return (Folder) LayoutInflater.from(launcher).inflate(R.layout.user_folder,
-                launcher.getDragLayer(), false);
+        return (Folder) launcher.getLayoutInflater().inflate(R.layout.user_folder, null);
     }
 
     /**

File: src/com/android/launcher3/AppsContainerView.java
Patch:
@@ -396,6 +396,7 @@ protected void onUpdateBackgrounds() {
                 inset, 0, inset, 0);
         mContentView.setBackground(background);
         mAppsRecyclerView.updateBackgroundPadding(background);
+        mAdapter.updateBackgroundPadding(background);
         getRevealView().setBackground(background.getConstantState().newDrawable());
     }
 

File: src/com/android/launcher3/AppsContainerView.java
Patch:
@@ -396,6 +396,7 @@ protected void onUpdateBackgrounds() {
                 inset, 0, inset, 0);
         mContentView.setBackground(background);
         mAppsRecyclerView.updateBackgroundPadding(background);
+        mAdapter.updateBackgroundPadding(background);
         getRevealView().setBackground(background.getConstantState().newDrawable());
     }
 

File: src/com/android/launcher3/AppsContainerView.java
Patch:
@@ -396,6 +396,7 @@ protected void onUpdateBackgrounds() {
                 inset, 0, inset, 0);
         mContentView.setBackground(background);
         mAppsRecyclerView.updateBackgroundPadding(background);
+        mAdapter.updateBackgroundPadding(background);
         getRevealView().setBackground(background.getConstantState().newDrawable());
     }
 

File: WallpaperPicker/src/com/android/gallery3d/exif/ExifInterface.java
Patch:
@@ -1247,7 +1247,7 @@ public Long getTagLongValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Long(l[0]);
+        return Long.valueOf(l[0]);
     }
 
     /**
@@ -1266,7 +1266,7 @@ public Integer getTagIntValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Integer(l[0]);
+        return Integer.valueOf(l[0]);
     }
 
     /**
@@ -1285,7 +1285,7 @@ public Byte getTagByteValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Byte(l[0]);
+        return Byte.valueOf(l[0]);
     }
 
     /**

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -665,7 +665,7 @@ public void setWallpaperButtonEnabled(boolean enabled) {
     }
 
     @Thunk void initializeScrollForRtl() {
-        if (mWallpaperScrollContainer.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
+        if (Utilities.isRtl(getResources())) {
             final ViewTreeObserver observer = mWallpaperScrollContainer.getViewTreeObserver();
             observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
                 public void onGlobalLayout() {
@@ -838,7 +838,7 @@ protected Bitmap doInBackground(Void...args) {
                     int rotation = BitmapUtils.getRotationFromExif(context, uri);
                     return createThumbnail(defaultSize, context, uri, null, null, 0, rotation, false);
                 } catch (SecurityException securityException) {
-                    if (isDestroyed()) {
+                    if (isActivityDestroyed()) {
                         // Temporarily granted permissions are revoked when the activity
                         // finishes, potentially resulting in a SecurityException here.
                         // Even though {@link #isDestroyed} might also return true in different

File: src/com/android/launcher3/DragView.java
Patch:
@@ -76,6 +76,7 @@ public class DragView extends View {
      * @param registrationX The x coordinate of the registration point.
      * @param registrationY The y coordinate of the registration point.
      */
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public DragView(Launcher launcher, Bitmap bitmap, int registrationX, int registrationY,
             int left, int top, int width, int height, final float initialScale) {
         super(launcher);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -22,6 +22,7 @@
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
 import android.animation.ValueAnimator;
+import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.ActivityManager;
@@ -64,7 +65,6 @@
 import android.os.Message;
 import android.os.StrictMode;
 import android.os.SystemClock;
-import android.preference.PreferenceManager;
 import android.text.Selection;
 import android.text.SpannableStringBuilder;
 import android.text.TextUtils;
@@ -2582,6 +2582,7 @@ public void onClickPagedViewIcon(View v) {
         }
     }
 
+    @SuppressLint("ClickableViewAccessibility")
     public boolean onTouch(View v, MotionEvent event) {
         return false;
     }
@@ -2850,6 +2851,7 @@ public void performHapticFeedbackOnTouchDown(View v) {
     public View.OnTouchListener getHapticFeedbackTouchListener() {
         if (mHapticFeedbackTouchListener == null) {
             mHapticFeedbackTouchListener = new View.OnTouchListener() {
+                @SuppressLint("ClickableViewAccessibility")
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
                     if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_DOWN) {

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -21,10 +21,11 @@
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
 import android.animation.ValueAnimator;
+import android.annotation.TargetApi;
+import android.os.Build;
 import android.view.View;
 import android.view.ViewAnimationUtils;
 import android.view.ViewTreeObserver;
-
 import java.util.HashSet;
 import java.util.WeakHashMap;
 
@@ -128,6 +129,7 @@ public static ObjectAnimator ofPropertyValuesHolder(Object target,
         return anim;
     }
 
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public static Animator createCircularReveal(View view, int centerX,
             int centerY, float startRadius, float endRadius) {
         Animator anim = ViewAnimationUtils.createCircularReveal(view, centerX,

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -20,10 +20,12 @@
 import android.accounts.AccountManager;
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
+import android.annotation.TargetApi;
 import android.app.ActivityManager;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.UserManager;
 import android.provider.Settings;
@@ -34,7 +36,6 @@
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver.OnGlobalLayoutListener;
 import android.view.accessibility.AccessibilityManager;
-
 import com.android.launcher3.util.Thunk;
 
 class LauncherClings implements OnClickListener {
@@ -212,6 +213,7 @@ public void run() {
     }
 
     /** Returns whether the clings are enabled or should be shown */
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     private boolean areClingsEnabled() {
         if (DISABLE_CLINGS) {
             return false;

File: src/com/android/launcher3/MemoryTracker.java
Patch:
@@ -101,7 +101,7 @@ public int[] getTrackedProcesses() {
 
     public void startTrackingProcess(int pid, String name, long start) {
         synchronized (mLock) {
-            final Long lpid = new Long(pid);
+            final Long lpid = Long.valueOf(pid);
 
             if (mPids.contains(lpid)) return;
 

File: src/com/android/launcher3/UninstallDropTarget.java
Patch:
@@ -1,13 +1,13 @@
 package com.android.launcher3;
 
+import android.annotation.TargetApi;
 import android.content.ComponentName;
 import android.content.Context;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.UserManager;
 import android.util.AttributeSet;
 import android.util.Pair;
-
 import com.android.launcher3.R;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.Thunk;
@@ -36,6 +36,7 @@ protected boolean supportsDrop(DragSource source, Object info) {
         return supportsDrop(getContext(), info);
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     public static boolean supportsDrop(Context context, Object info) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
             UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);

File: src/com/android/launcher3/compat/AppWidgetManagerCompatV16.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.appwidget.AppWidgetHost;
 import android.appwidget.AppWidgetManager;
@@ -49,6 +50,7 @@ public String loadLabel(LauncherAppWidgetProviderInfo info) {
         return Utilities.trim(info.label);
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
     @Override
     public boolean bindAppWidgetIdIfAllowed(int appWidgetId, AppWidgetProviderInfo info,
             Bundle options) {

File: src/com/android/launcher3/compat/LauncherActivityInfoCompatVL.java
Patch:
@@ -16,12 +16,14 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.ComponentName;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.LauncherActivityInfo;
 import android.graphics.drawable.Drawable;
-import android.os.UserHandle;
+import android.os.Build;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class LauncherActivityInfoCompatVL extends LauncherActivityInfoCompat {
     private LauncherActivityInfo mLauncherActivityInfo;
 

File: src/com/android/launcher3/compat/LauncherAppsCompatVL.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
@@ -32,6 +33,7 @@
 import java.util.List;
 import java.util.Map;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class LauncherAppsCompatVL extends LauncherAppsCompat {
 
     private LauncherApps mLauncherApps;

File: src/com/android/launcher3/compat/PackageInstallerCompatVL.java
Patch:
@@ -16,10 +16,12 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.pm.PackageInstaller;
 import android.content.pm.PackageInstaller.SessionCallback;
 import android.content.pm.PackageInstaller.SessionInfo;
+import android.os.Build;
 import android.os.Handler;
 import android.util.SparseArray;
 
@@ -30,6 +32,7 @@
 
 import java.util.HashMap;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class PackageInstallerCompatVL extends PackageInstallerCompat {
 
     @Thunk final SparseArray<String> mActiveSessions = new SparseArray<>();

File: src/com/android/launcher3/compat/UserHandleCompat.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.Intent;
 import android.os.Build;
 import android.os.UserHandle;
-
 import com.android.launcher3.Utilities;
 
 public class UserHandleCompat {
@@ -32,6 +32,7 @@ private UserHandleCompat(UserHandle user) {
     private UserHandleCompat() {
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
     public static UserHandleCompat myUserHandle() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
             return new UserHandleCompat(android.os.Process.myUserHandle());

File: src/com/android/launcher3/compat/UserManagerCompatVL.java
Patch:
@@ -17,18 +17,19 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.os.UserHandle;
-
 import com.android.launcher3.LauncherAppState;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class UserManagerCompatVL extends UserManagerCompatV17 {
     private static final String USER_CREATION_TIME_KEY = "user_creation_time_";
 

File: WallpaperPicker/src/com/android/gallery3d/exif/ExifInterface.java
Patch:
@@ -1247,7 +1247,7 @@ public Long getTagLongValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Long(l[0]);
+        return Long.valueOf(l[0]);
     }
 
     /**
@@ -1266,7 +1266,7 @@ public Integer getTagIntValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Integer(l[0]);
+        return Integer.valueOf(l[0]);
     }
 
     /**
@@ -1285,7 +1285,7 @@ public Byte getTagByteValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Byte(l[0]);
+        return Byte.valueOf(l[0]);
     }
 
     /**

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -665,7 +665,7 @@ public void setWallpaperButtonEnabled(boolean enabled) {
     }
 
     @Thunk void initializeScrollForRtl() {
-        if (mWallpaperScrollContainer.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
+        if (Utilities.isRtl(getResources())) {
             final ViewTreeObserver observer = mWallpaperScrollContainer.getViewTreeObserver();
             observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
                 public void onGlobalLayout() {
@@ -838,7 +838,7 @@ protected Bitmap doInBackground(Void...args) {
                     int rotation = BitmapUtils.getRotationFromExif(context, uri);
                     return createThumbnail(defaultSize, context, uri, null, null, 0, rotation, false);
                 } catch (SecurityException securityException) {
-                    if (isDestroyed()) {
+                    if (isActivityDestroyed()) {
                         // Temporarily granted permissions are revoked when the activity
                         // finishes, potentially resulting in a SecurityException here.
                         // Even though {@link #isDestroyed} might also return true in different

File: src/com/android/launcher3/DragView.java
Patch:
@@ -76,6 +76,7 @@ public class DragView extends View {
      * @param registrationX The x coordinate of the registration point.
      * @param registrationY The y coordinate of the registration point.
      */
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public DragView(Launcher launcher, Bitmap bitmap, int registrationX, int registrationY,
             int left, int top, int width, int height, final float initialScale) {
         super(launcher);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -22,6 +22,7 @@
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
 import android.animation.ValueAnimator;
+import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.ActivityManager;
@@ -64,7 +65,6 @@
 import android.os.Message;
 import android.os.StrictMode;
 import android.os.SystemClock;
-import android.preference.PreferenceManager;
 import android.text.Selection;
 import android.text.SpannableStringBuilder;
 import android.text.TextUtils;
@@ -2582,6 +2582,7 @@ public void onClickPagedViewIcon(View v) {
         }
     }
 
+    @SuppressLint("ClickableViewAccessibility")
     public boolean onTouch(View v, MotionEvent event) {
         return false;
     }
@@ -2850,6 +2851,7 @@ public void performHapticFeedbackOnTouchDown(View v) {
     public View.OnTouchListener getHapticFeedbackTouchListener() {
         if (mHapticFeedbackTouchListener == null) {
             mHapticFeedbackTouchListener = new View.OnTouchListener() {
+                @SuppressLint("ClickableViewAccessibility")
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
                     if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_DOWN) {

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -21,10 +21,11 @@
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
 import android.animation.ValueAnimator;
+import android.annotation.TargetApi;
+import android.os.Build;
 import android.view.View;
 import android.view.ViewAnimationUtils;
 import android.view.ViewTreeObserver;
-
 import java.util.HashSet;
 import java.util.WeakHashMap;
 
@@ -128,6 +129,7 @@ public static ObjectAnimator ofPropertyValuesHolder(Object target,
         return anim;
     }
 
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public static Animator createCircularReveal(View view, int centerX,
             int centerY, float startRadius, float endRadius) {
         Animator anim = ViewAnimationUtils.createCircularReveal(view, centerX,

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -20,10 +20,12 @@
 import android.accounts.AccountManager;
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
+import android.annotation.TargetApi;
 import android.app.ActivityManager;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.UserManager;
 import android.provider.Settings;
@@ -34,7 +36,6 @@
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver.OnGlobalLayoutListener;
 import android.view.accessibility.AccessibilityManager;
-
 import com.android.launcher3.util.Thunk;
 
 class LauncherClings implements OnClickListener {
@@ -212,6 +213,7 @@ public void run() {
     }
 
     /** Returns whether the clings are enabled or should be shown */
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     private boolean areClingsEnabled() {
         if (DISABLE_CLINGS) {
             return false;

File: src/com/android/launcher3/MemoryTracker.java
Patch:
@@ -101,7 +101,7 @@ public int[] getTrackedProcesses() {
 
     public void startTrackingProcess(int pid, String name, long start) {
         synchronized (mLock) {
-            final Long lpid = new Long(pid);
+            final Long lpid = Long.valueOf(pid);
 
             if (mPids.contains(lpid)) return;
 

File: src/com/android/launcher3/UninstallDropTarget.java
Patch:
@@ -1,13 +1,13 @@
 package com.android.launcher3;
 
+import android.annotation.TargetApi;
 import android.content.ComponentName;
 import android.content.Context;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.UserManager;
 import android.util.AttributeSet;
 import android.util.Pair;
-
 import com.android.launcher3.R;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.Thunk;
@@ -36,6 +36,7 @@ protected boolean supportsDrop(DragSource source, Object info) {
         return supportsDrop(getContext(), info);
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     public static boolean supportsDrop(Context context, Object info) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
             UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);

File: src/com/android/launcher3/compat/AppWidgetManagerCompatV16.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.appwidget.AppWidgetHost;
 import android.appwidget.AppWidgetManager;
@@ -49,6 +50,7 @@ public String loadLabel(LauncherAppWidgetProviderInfo info) {
         return Utilities.trim(info.label);
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
     @Override
     public boolean bindAppWidgetIdIfAllowed(int appWidgetId, AppWidgetProviderInfo info,
             Bundle options) {

File: src/com/android/launcher3/compat/LauncherActivityInfoCompatVL.java
Patch:
@@ -16,12 +16,14 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.ComponentName;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.LauncherActivityInfo;
 import android.graphics.drawable.Drawable;
-import android.os.UserHandle;
+import android.os.Build;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class LauncherActivityInfoCompatVL extends LauncherActivityInfoCompat {
     private LauncherActivityInfo mLauncherActivityInfo;
 

File: src/com/android/launcher3/compat/LauncherAppsCompatVL.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
@@ -32,6 +33,7 @@
 import java.util.List;
 import java.util.Map;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class LauncherAppsCompatVL extends LauncherAppsCompat {
 
     private LauncherApps mLauncherApps;

File: src/com/android/launcher3/compat/PackageInstallerCompatVL.java
Patch:
@@ -16,10 +16,12 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.pm.PackageInstaller;
 import android.content.pm.PackageInstaller.SessionCallback;
 import android.content.pm.PackageInstaller.SessionInfo;
+import android.os.Build;
 import android.os.Handler;
 import android.util.SparseArray;
 
@@ -30,6 +32,7 @@
 
 import java.util.HashMap;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class PackageInstallerCompatVL extends PackageInstallerCompat {
 
     @Thunk final SparseArray<String> mActiveSessions = new SparseArray<>();

File: src/com/android/launcher3/compat/UserHandleCompat.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.Intent;
 import android.os.Build;
 import android.os.UserHandle;
-
 import com.android.launcher3.Utilities;
 
 public class UserHandleCompat {
@@ -32,6 +32,7 @@ private UserHandleCompat(UserHandle user) {
     private UserHandleCompat() {
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
     public static UserHandleCompat myUserHandle() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
             return new UserHandleCompat(android.os.Process.myUserHandle());

File: src/com/android/launcher3/compat/UserManagerCompatVL.java
Patch:
@@ -17,18 +17,19 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.os.UserHandle;
-
 import com.android.launcher3.LauncherAppState;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class UserManagerCompatVL extends UserManagerCompatV17 {
     private static final String USER_CREATION_TIME_KEY = "user_creation_time_";
 

File: WallpaperPicker/src/com/android/gallery3d/exif/ExifInterface.java
Patch:
@@ -1247,7 +1247,7 @@ public Long getTagLongValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Long(l[0]);
+        return Long.valueOf(l[0]);
     }
 
     /**
@@ -1266,7 +1266,7 @@ public Integer getTagIntValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Integer(l[0]);
+        return Integer.valueOf(l[0]);
     }
 
     /**
@@ -1285,7 +1285,7 @@ public Byte getTagByteValue(int tagId, int ifdId) {
         if (l == null || l.length <= 0) {
             return null;
         }
-        return new Byte(l[0]);
+        return Byte.valueOf(l[0]);
     }
 
     /**

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -665,7 +665,7 @@ public void setWallpaperButtonEnabled(boolean enabled) {
     }
 
     @Thunk void initializeScrollForRtl() {
-        if (mWallpaperScrollContainer.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
+        if (Utilities.isRtl(getResources())) {
             final ViewTreeObserver observer = mWallpaperScrollContainer.getViewTreeObserver();
             observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
                 public void onGlobalLayout() {
@@ -838,7 +838,7 @@ protected Bitmap doInBackground(Void...args) {
                     int rotation = BitmapUtils.getRotationFromExif(context, uri);
                     return createThumbnail(defaultSize, context, uri, null, null, 0, rotation, false);
                 } catch (SecurityException securityException) {
-                    if (isDestroyed()) {
+                    if (isActivityDestroyed()) {
                         // Temporarily granted permissions are revoked when the activity
                         // finishes, potentially resulting in a SecurityException here.
                         // Even though {@link #isDestroyed} might also return true in different

File: src/com/android/launcher3/DragView.java
Patch:
@@ -76,6 +76,7 @@ public class DragView extends View {
      * @param registrationX The x coordinate of the registration point.
      * @param registrationY The y coordinate of the registration point.
      */
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public DragView(Launcher launcher, Bitmap bitmap, int registrationX, int registrationY,
             int left, int top, int width, int height, final float initialScale) {
         super(launcher);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -22,6 +22,7 @@
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
 import android.animation.ValueAnimator;
+import android.annotation.SuppressLint;
 import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.ActivityManager;
@@ -64,7 +65,6 @@
 import android.os.Message;
 import android.os.StrictMode;
 import android.os.SystemClock;
-import android.preference.PreferenceManager;
 import android.text.Selection;
 import android.text.SpannableStringBuilder;
 import android.text.TextUtils;
@@ -2582,6 +2582,7 @@ public void onClickPagedViewIcon(View v) {
         }
     }
 
+    @SuppressLint("ClickableViewAccessibility")
     public boolean onTouch(View v, MotionEvent event) {
         return false;
     }
@@ -2850,6 +2851,7 @@ public void performHapticFeedbackOnTouchDown(View v) {
     public View.OnTouchListener getHapticFeedbackTouchListener() {
         if (mHapticFeedbackTouchListener == null) {
             mHapticFeedbackTouchListener = new View.OnTouchListener() {
+                @SuppressLint("ClickableViewAccessibility")
                 @Override
                 public boolean onTouch(View v, MotionEvent event) {
                     if ((event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_DOWN) {

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -21,10 +21,11 @@
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
 import android.animation.ValueAnimator;
+import android.annotation.TargetApi;
+import android.os.Build;
 import android.view.View;
 import android.view.ViewAnimationUtils;
 import android.view.ViewTreeObserver;
-
 import java.util.HashSet;
 import java.util.WeakHashMap;
 
@@ -128,6 +129,7 @@ public static ObjectAnimator ofPropertyValuesHolder(Object target,
         return anim;
     }
 
+    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public static Animator createCircularReveal(View view, int centerX,
             int centerY, float startRadius, float endRadius) {
         Animator anim = ViewAnimationUtils.createCircularReveal(view, centerX,

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -20,10 +20,12 @@
 import android.accounts.AccountManager;
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
+import android.annotation.TargetApi;
 import android.app.ActivityManager;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.UserManager;
 import android.provider.Settings;
@@ -34,7 +36,6 @@
 import android.view.ViewGroup;
 import android.view.ViewTreeObserver.OnGlobalLayoutListener;
 import android.view.accessibility.AccessibilityManager;
-
 import com.android.launcher3.util.Thunk;
 
 class LauncherClings implements OnClickListener {
@@ -212,6 +213,7 @@ public void run() {
     }
 
     /** Returns whether the clings are enabled or should be shown */
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     private boolean areClingsEnabled() {
         if (DISABLE_CLINGS) {
             return false;

File: src/com/android/launcher3/MemoryTracker.java
Patch:
@@ -101,7 +101,7 @@ public int[] getTrackedProcesses() {
 
     public void startTrackingProcess(int pid, String name, long start) {
         synchronized (mLock) {
-            final Long lpid = new Long(pid);
+            final Long lpid = Long.valueOf(pid);
 
             if (mPids.contains(lpid)) return;
 

File: src/com/android/launcher3/UninstallDropTarget.java
Patch:
@@ -1,13 +1,13 @@
 package com.android.launcher3;
 
+import android.annotation.TargetApi;
 import android.content.ComponentName;
 import android.content.Context;
 import android.os.Build;
 import android.os.Bundle;
 import android.os.UserManager;
 import android.util.AttributeSet;
 import android.util.Pair;
-
 import com.android.launcher3.R;
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.Thunk;
@@ -36,6 +36,7 @@ protected boolean supportsDrop(DragSource source, Object info) {
         return supportsDrop(getContext(), info);
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR2)
     public static boolean supportsDrop(Context context, Object info) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
             UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);

File: src/com/android/launcher3/compat/AppWidgetManagerCompatV16.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.app.Activity;
 import android.appwidget.AppWidgetHost;
 import android.appwidget.AppWidgetManager;
@@ -49,6 +50,7 @@ public String loadLabel(LauncherAppWidgetProviderInfo info) {
         return Utilities.trim(info.label);
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
     @Override
     public boolean bindAppWidgetIdIfAllowed(int appWidgetId, AppWidgetProviderInfo info,
             Bundle options) {

File: src/com/android/launcher3/compat/LauncherActivityInfoCompatVL.java
Patch:
@@ -16,12 +16,14 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.ComponentName;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.LauncherActivityInfo;
 import android.graphics.drawable.Drawable;
-import android.os.UserHandle;
+import android.os.Build;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class LauncherActivityInfoCompatVL extends LauncherActivityInfoCompat {
     private LauncherActivityInfo mLauncherActivityInfo;
 

File: src/com/android/launcher3/compat/LauncherAppsCompatVL.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
@@ -32,6 +33,7 @@
 import java.util.List;
 import java.util.Map;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class LauncherAppsCompatVL extends LauncherAppsCompat {
 
     private LauncherApps mLauncherApps;

File: src/com/android/launcher3/compat/PackageInstallerCompatVL.java
Patch:
@@ -16,10 +16,12 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.pm.PackageInstaller;
 import android.content.pm.PackageInstaller.SessionCallback;
 import android.content.pm.PackageInstaller.SessionInfo;
+import android.os.Build;
 import android.os.Handler;
 import android.util.SparseArray;
 
@@ -30,6 +32,7 @@
 
 import java.util.HashMap;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class PackageInstallerCompatVL extends PackageInstallerCompat {
 
     @Thunk final SparseArray<String> mActiveSessions = new SparseArray<>();

File: src/com/android/launcher3/compat/UserHandleCompat.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.Intent;
 import android.os.Build;
 import android.os.UserHandle;
-
 import com.android.launcher3.Utilities;
 
 public class UserHandleCompat {
@@ -32,6 +32,7 @@ private UserHandleCompat(UserHandle user) {
     private UserHandleCompat() {
     }
 
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
     public static UserHandleCompat myUserHandle() {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
             return new UserHandleCompat(android.os.Process.myUserHandle());

File: src/com/android/launcher3/compat/UserManagerCompatVL.java
Patch:
@@ -17,18 +17,19 @@
 
 package com.android.launcher3.compat;
 
+import android.annotation.TargetApi;
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.os.UserHandle;
-
 import com.android.launcher3.LauncherAppState;
-
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class UserManagerCompatVL extends UserManagerCompatV17 {
     private static final String USER_CREATION_TIME_KEY = "user_creation_time_";
 

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -443,7 +443,7 @@ public boolean updateAppsViewNumCols(Resources res, int containerWidth) {
         int availableAppsWidthPx = (containerWidth > 0) ? containerWidth : availableWidthPx;
         int numAppsCols = (availableAppsWidthPx - appsViewLeftMarginPx) /
                 (allAppsCellWidthPx + 2 * allAppsCellPaddingPx);
-        int numPredictiveAppCols = isPhone() ? numColumns : numAppsCols;
+        int numPredictiveAppCols = Math.max(numColumns, numAppsCols);
         if ((numAppsCols != appsViewNumCols) ||
                 (numPredictiveAppCols != appsViewNumPredictiveCols)) {
             appsViewNumCols = numAppsCols;

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -443,7 +443,7 @@ public boolean updateAppsViewNumCols(Resources res, int containerWidth) {
         int availableAppsWidthPx = (containerWidth > 0) ? containerWidth : availableWidthPx;
         int numAppsCols = (availableAppsWidthPx - appsViewLeftMarginPx) /
                 (allAppsCellWidthPx + 2 * allAppsCellPaddingPx);
-        int numPredictiveAppCols = isPhone() ? numColumns : numAppsCols;
+        int numPredictiveAppCols = Math.max(numColumns, numAppsCols);
         if ((numAppsCols != appsViewNumCols) ||
                 (numPredictiveAppCols != appsViewNumPredictiveCols)) {
             appsViewNumCols = numAppsCols;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1319,7 +1319,9 @@ private void restoreState(Bundle savedState) {
             mPendingAddInfo.spanY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_Y);
             AppWidgetProviderInfo info = savedState.getParcelable(
                     RUNTIME_STATE_PENDING_ADD_WIDGET_INFO);
-            mPendingAddWidgetInfo = LauncherAppWidgetProviderInfo.fromProviderInfo(this, info);
+            mPendingAddWidgetInfo = info == null ?
+                    null : LauncherAppWidgetProviderInfo.fromProviderInfo(this, info);
+
             mPendingAddWidgetId = savedState.getInt(RUNTIME_STATE_PENDING_ADD_WIDGET_ID);
             setWaitingForResult(true);
             mRestoring = true;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1377,7 +1377,9 @@ private void restoreState(Bundle savedState) {
             mPendingAddInfo.spanY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_Y);
             AppWidgetProviderInfo info = savedState.getParcelable(
                     RUNTIME_STATE_PENDING_ADD_WIDGET_INFO);
-            mPendingAddWidgetInfo = LauncherAppWidgetProviderInfo.fromProviderInfo(this, info);
+            mPendingAddWidgetInfo = info == null ?
+                    null : LauncherAppWidgetProviderInfo.fromProviderInfo(this, info);
+
             mPendingAddWidgetId = savedState.getInt(RUNTIME_STATE_PENDING_ADD_WIDGET_ID);
             setWaitingForResult(true);
             mRestoring = true;

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -100,9 +100,9 @@ public BubbleTextView(Context context, AttributeSet attrs, int defStyle) {
         int display = a.getInteger(R.styleable.BubbleTextView_iconDisplay, DISPLAY_WORKSPACE);
         int defaultIconSize = grid.iconSizePx;
         if (display == DISPLAY_WORKSPACE) {
-            setTextSize(grid.iconTextSizePx);
+            setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.iconTextSizePx);
         } else if (display == DISPLAY_ALL_APPS) {
-            setTextSize(grid.allAppsIconTextSizePx);
+            setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.allAppsIconTextSizePx);
             defaultIconSize = grid.allAppsIconSizePx;
         }
 

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -100,9 +100,9 @@ public BubbleTextView(Context context, AttributeSet attrs, int defStyle) {
         int display = a.getInteger(R.styleable.BubbleTextView_iconDisplay, DISPLAY_WORKSPACE);
         int defaultIconSize = grid.iconSizePx;
         if (display == DISPLAY_WORKSPACE) {
-            setTextSize(grid.iconTextSizePx);
+            setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.iconTextSizePx);
         } else if (display == DISPLAY_ALL_APPS) {
-            setTextSize(grid.allAppsIconTextSizePx);
+            setTextSize(TypedValue.COMPLEX_UNIT_PX, grid.allAppsIconTextSizePx);
             defaultIconSize = grid.allAppsIconSizePx;
         }
 

File: src/com/android/launcher3/BaseContainerView.java
Patch:
@@ -59,11 +59,12 @@ final public void setFixedBounds(Rect fixedBounds) {
             mFixedBounds.set(fixedBounds);
             if (Launcher.DISABLE_ALL_APPS_SEARCH_INTEGRATION) {
                 mFixedBounds.top = mInsets.top;
-                mFixedBounds.bottom = getMeasuredHeight();
+                mFixedBounds.bottom = mInsets.bottom;
             }
             // To ensure that the child RecyclerView has the full width to handle touches right to
             // the edge of the screen, we only apply the top and bottom padding to the bounds
-            mFixedBounds.inset(0, mFixedBoundsContainerInset);
+            mFixedBounds.top += mFixedBoundsContainerInset;
+            mFixedBounds.bottom += mFixedBoundsContainerInset;
             onFixedBoundsUpdated();
         }
         // Post the updates since they can trigger a relayout, and this call can be triggered from

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -373,7 +373,7 @@ protected void onUpdatePaddings() {
         } else {
             // If there are fixed bounds, then we update the padding to reflect the fixed bounds.
             setPadding(mFixedBounds.left, mFixedBounds.top, getMeasuredWidth() - mFixedBounds.right,
-                    mInsets.bottom);
+                    mFixedBounds.bottom);
         }
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4185,7 +4185,7 @@ public boolean evaluate(ItemInfo info, View v, View parent) {
                             && packageNames.contains(cn.getPackageName())) {
                         shortcutInfo.isDisabled |= reason;
                         BubbleTextView shortcut = (BubbleTextView) v;
-                        shortcut.applyFromShortcutInfo(shortcutInfo, mIconCache, true, false);
+                        shortcut.applyFromShortcutInfo(shortcutInfo, mIconCache, false);
 
                         if (parent != null) {
                             parent.invalidate();
@@ -4371,7 +4371,7 @@ public boolean evaluate(ItemInfo info, View v, View parent) {
                     BubbleTextView shortcut = (BubbleTextView) v;
                     boolean oldPromiseState = getTextViewIcon(shortcut)
                             instanceof PreloadIconDrawable;
-                    shortcut.applyFromShortcutInfo(si, mIconCache, true,
+                    shortcut.applyFromShortcutInfo(si, mIconCache, false,
                             si.isPromise() != oldPromiseState);
 
                     if (parent != null) {

File: src/com/android/launcher3/Folder.java
Patch:
@@ -275,6 +275,9 @@ public void enableAccessibleDrag(boolean enable) {
         for (int i = 0; i < mContent.getChildCount(); i++) {
             mContent.getPageAt(i).enableAccessibleDrag(enable, CellLayout.FOLDER_ACCESSIBILITY_DRAG);
         }
+
+        mFooter.setImportantForAccessibility(enable ? IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS :
+            IMPORTANT_FOR_ACCESSIBILITY_AUTO);
         mLauncher.getWorkspace().setAddNewPageOnDrag(!enable);
     }
 

File: src/com/android/launcher3/Folder.java
Patch:
@@ -275,6 +275,9 @@ public void enableAccessibleDrag(boolean enable) {
         for (int i = 0; i < mContent.getChildCount(); i++) {
             mContent.getPageAt(i).enableAccessibleDrag(enable, CellLayout.FOLDER_ACCESSIBILITY_DRAG);
         }
+
+        mFooter.setImportantForAccessibility(enable ? IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS :
+            IMPORTANT_FOR_ACCESSIBILITY_AUTO);
         mLauncher.getWorkspace().setAddNewPageOnDrag(!enable);
     }
 

File: src/com/android/launcher3/AlphabeticalAppsList.java
Patch:
@@ -29,8 +29,7 @@ public AppNameComparator(Context context) {
         mAppNameComparator = new Comparator<AppInfo>() {
             public final int compare(AppInfo a, AppInfo b) {
                 // Order by the title
-                int result = collator.compare(a.title.toString().trim(),
-                        b.title.toString().trim());
+                int result = collator.compare(a.title.toString(), b.title.toString());
                 if (result == 0) {
                     // If two apps have the same title, then order by the component name
                     result = a.componentName.compareTo(b.componentName);
@@ -349,7 +348,7 @@ private void onAppsUpdated() {
         int appIndex = 0;
         int numApps = mApps.size();
         for (AppInfo info : mApps) {
-            String sectionName = mIndexer.computeSectionName(info.title.toString().trim());
+            String sectionName = mIndexer.computeSectionName(info.title);
 
             // Check if we want to retain this app
             if (mFilter != null && !mFilter.retainApp(info, sectionName)) {

File: src/com/android/launcher3/AppInfo.java
Patch:
@@ -105,7 +105,7 @@ public static int initFlags(LauncherActivityInfoCompat info) {
     public AppInfo(AppInfo info) {
         super(info);
         componentName = info.componentName;
-        title = info.title.toString();
+        title = Utilities.trim(info.title);
         intent = new Intent(info.intent);
         flags = info.flags;
         firstInstallTime = info.firstInstallTime;
@@ -114,7 +114,7 @@ public AppInfo(AppInfo info) {
 
     @Override
     public String toString() {
-        return "ApplicationInfo(title=" + title.toString() + " id=" + this.id
+        return "ApplicationInfo(title=" + title + " id=" + this.id
                 + " type=" + this.itemType + " container=" + this.container
                 + " screen=" + screenId + " cellX=" + cellX + " cellY=" + cellY
                 + " spanX=" + spanX + " spanY=" + spanY + " dropPos=" + Arrays.toString(dropPos)

File: src/com/android/launcher3/Folder.java
Patch:
@@ -296,13 +296,14 @@ public void doneEditingFolderName(boolean commit) {
         mFolderName.setHint(sHintText);
         // Convert to a string here to ensure that no other state associated with the text field
         // gets saved.
-        String newTitle = mFolderName.getText().toString();
+        CharSequence newTitle = mFolderName.getText();
         mInfo.setTitle(newTitle);
         LauncherModel.updateItemInDatabase(mLauncher, mInfo);
 
         if (commit) {
             sendCustomAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED,
-                    String.format(getContext().getString(R.string.folder_renamed), newTitle));
+                    String.format(getContext().getString(R.string.folder_renamed),
+                            newTitle.toString()));
         }
         // In order to clear the focus from the text field, we set the focus on ourself. This
         // ensures that every time the field is clicked, focus is gained, giving reliable behavior.

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -710,7 +710,7 @@ public void onRemove(ShortcutInfo item) {
     }
 
     public void onTitleChanged(CharSequence title) {
-        mFolderName.setText(title.toString());
+        mFolderName.setText(title);
         setContentDescription(String.format(getContext().getString(R.string.folder_name_format),
                 title));
     }

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -87,7 +87,7 @@ public void remove(ShortcutInfo item) {
     }
 
     public void setTitle(CharSequence title) {
-        this.title = title;
+        this.title = Utilities.trim(title);
         for (int i = 0; i < listeners.size(); i++) {
             listeners.get(i).onTitleChanged(title);
         }

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -247,7 +247,7 @@ static boolean isValidShortcutLaunchIntent(Intent launchIntent) {
             try {
                 PackageManager pm = context.getPackageManager();
                 ActivityInfo info = pm.getActivityInfo(intent.getComponent(), 0);
-                name = info.loadLabel(pm).toString();
+                name = info.loadLabel(pm);
             } catch (PackageManager.NameNotFoundException nnfe) {
                 return "";
             }

File: src/com/android/launcher3/LauncherAppWidgetProviderInfo.java
Patch:
@@ -66,7 +66,7 @@ public LauncherAppWidgetProviderInfo(Context context, CustomAppWidget widget) {
 
     public String getLabel(PackageManager packageManager) {
         if (isCustomWidget) {
-            return label.toString().trim();
+            return Utilities.trim(label);
         }
         return super.loadLabel(packageManager);
     }

File: src/com/android/launcher3/accessibility/WorkspaceAccessibilityHelper.java
Patch:
@@ -145,7 +145,7 @@ protected String getLocationDescriptionForIconDrop(int id) {
             if (info instanceof ShortcutInfo) {
                 return mContext.getString(R.string.create_folder_with, info.title);
             } else if (info instanceof FolderInfo) {
-                if (TextUtils.isEmpty(info.title.toString().trim())) {
+                if (TextUtils.isEmpty(info.title)) {
                     // Find the first item in the folder.
                     FolderInfo folder = (FolderInfo) info;
                     ShortcutInfo firstItem = null;

File: src/com/android/launcher3/compat/AppWidgetManagerCompatV16.java
Patch:
@@ -46,7 +46,7 @@ public List<AppWidgetProviderInfo> getAllProviders() {
 
     @Override
     public String loadLabel(LauncherAppWidgetProviderInfo info) {
-        return info.label.trim();
+        return Utilities.trim(info.label);
     }
 
     @Override

File: src/com/android/launcher3/widget/PackageItemInfo.java
Patch:
@@ -49,7 +49,7 @@ public class PackageItemInfo extends ItemInfo {
 
     @Override
     public String toString() {
-        return "PackageItemInfo(title=" + title.toString() + " id=" + this.id
+        return "PackageItemInfo(title=" + title + " id=" + this.id
                 + " type=" + this.itemType + " container=" + this.container
                 + " screen=" + screenId + " cellX=" + cellX + " cellY=" + cellY
                 + " spanX=" + spanX + " spanY=" + spanY + " dropPos=" + Arrays.toString(dropPos)

File: src/com/android/launcher3/AppsContainerView.java
Patch:
@@ -46,7 +46,6 @@ public class AppsContainerView extends BaseContainerView implements DragSource,
         View.OnClickListener, View.OnLongClickListener {
 
     public static final boolean GRID_MERGE_SECTIONS = true;
-    public static final boolean GRID_MERGE_SECTION_HEADERS = false;
     public static final boolean GRID_HIDE_SECTION_HEADERS = false;
 
     private static final boolean ALLOW_SINGLE_APP_LAUNCH = true;

File: src/com/android/launcher3/AppsContainerView.java
Patch:
@@ -46,7 +46,6 @@ public class AppsContainerView extends BaseContainerView implements DragSource,
         View.OnClickListener, View.OnLongClickListener {
 
     public static final boolean GRID_MERGE_SECTIONS = true;
-    public static final boolean GRID_MERGE_SECTION_HEADERS = false;
     public static final boolean GRID_HIDE_SECTION_HEADERS = false;
 
     private static final boolean ALLOW_SINGLE_APP_LAUNCH = true;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -528,7 +528,8 @@ public void onAllAppsBoundsChanged(Rect bounds) {
                 if (LOGD) {
                     Log.d(TAG, "onAllAppsBoundsChanged(Rect): " + bounds);
                 }
-                mAppsView.setFixedBounds(Launcher.this, bounds);
+                mAppsView.setFixedBounds(bounds);
+                mWidgetsView.setFixedBounds(bounds);
             }
 
             @Override

File: src/com/android/launcher3/widget/WidgetsContainerRecyclerView.java
Patch:
@@ -51,7 +51,7 @@ public WidgetsContainerRecyclerView(Context context, AttributeSet attrs, int def
         mDeltaThreshold = getResources().getDisplayMetrics().density * SCROLL_DELTA_THRESHOLD;
 
         ScrollListener listener = new ScrollListener();
-        addOnScrollListener(listener);
+        setOnScrollListener(listener);
     }
 
     private class ScrollListener extends RecyclerView.OnScrollListener {

File: src/com/android/launcher3/Folder.java
Patch:
@@ -275,6 +275,9 @@ public void enableAccessibleDrag(boolean enable) {
         for (int i = 0; i < mContent.getChildCount(); i++) {
             mContent.getPageAt(i).enableAccessibleDrag(enable, CellLayout.FOLDER_ACCESSIBILITY_DRAG);
         }
+
+        mFooter.setImportantForAccessibility(enable ? IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS :
+            IMPORTANT_FOR_ACCESSIBILITY_AUTO);
         mLauncher.getWorkspace().setAddNewPageOnDrag(!enable);
     }
 

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -79,7 +79,8 @@ public void removeProviderChangeListener(Runnable callback) {
     }
 
     protected void onProvidersChanged() {
-        mLauncher.getModel().loadAndBindWidgetsAndShortcuts(mLauncher, mLauncher);
+        mLauncher.getModel().loadAndBindWidgetsAndShortcuts(mLauncher, mLauncher,
+                true /* refresh */);
         if (!mProviderChangeListeners.isEmpty()) {
             for (Runnable callback : new ArrayList<>(mProviderChangeListeners)) {
                 callback.run();

File: src/com/android/launcher3/AlphabeticalAppsList.java
Patch:
@@ -254,7 +254,7 @@ private int findAppByComponent(List<AppInfo> apps, AppInfo targetInfo) {
         int length = apps.size();
         for (int i = 0; i < length; ++i) {
             AppInfo info = apps.get(i);
-            if (info.user.equals(info.user)
+            if (info.user.equals(targetInfo.user)
                     && info.intent.getComponent().equals(targetComponent)) {
                 return i;
             }

File: src/com/android/launcher3/AlphabeticalAppsList.java
Patch:
@@ -254,7 +254,7 @@ private int findAppByComponent(List<AppInfo> apps, AppInfo targetInfo) {
         int length = apps.size();
         for (int i = 0; i < length; ++i) {
             AppInfo info = apps.get(i);
-            if (info.user.equals(info.user)
+            if (info.user.equals(targetInfo.user)
                     && info.intent.getComponent().equals(targetComponent)) {
                 return i;
             }

File: src/com/android/launcher3/AlphabeticalAppsList.java
Patch:
@@ -254,7 +254,7 @@ private int findAppByComponent(List<AppInfo> apps, AppInfo targetInfo) {
         int length = apps.size();
         for (int i = 0; i < length; ++i) {
             AppInfo info = apps.get(i);
-            if (info.user.equals(info.user)
+            if (info.user.equals(targetInfo.user)
                     && info.intent.getComponent().equals(targetComponent)) {
                 return i;
             }

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -310,7 +310,6 @@ public void onAnimationEnd(Animator animation) {
     @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public void enableAccessibleDrag(boolean enable, int dragType) {
         mUseTouchHelper = enable;
-        Log.e("HIGHRES", getParent() + "  " + enable + "  " + dragType, new Exception());
         if (!enable) {
             ViewCompat.setAccessibilityDelegate(this, null);
             setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -310,7 +310,6 @@ public void onAnimationEnd(Animator animation) {
     @TargetApi(Build.VERSION_CODES.LOLLIPOP)
     public void enableAccessibleDrag(boolean enable, int dragType) {
         mUseTouchHelper = enable;
-        Log.e("HIGHRES", getParent() + "  " + enable + "  " + dragType, new Exception());
         if (!enable) {
             ViewCompat.setAccessibilityDelegate(this, null);
             setImportantForAccessibility(IMPORTANT_FOR_ACCESSIBILITY_NO);

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -203,6 +203,9 @@ DRAG_VIEW_DROP_DURATION, new DecelerateInterpolator(2),
                 DragLayer.ANIMATION_END_DISAPPEAR, null);
     }
 
+    @Override
+    public void prepareAccessibilityDrop() { }
+
     @Thunk abstract void completeDrop(DragObject d);
 
     @Override

File: src/com/android/launcher3/DragController.java
Patch:
@@ -658,6 +658,7 @@ public void completeAccessibleDrag(int[] location) {
         mDragObject.y = coordinates[1];
         checkTouchMove(dropTarget);
 
+        dropTarget.prepareAccessibilityDrop();
         // Perform the drop
         drop(location[0], location[1]);
         endDrag();

File: src/com/android/launcher3/DropTarget.java
Patch:
@@ -183,6 +183,8 @@ public void onDragEnd() {
      */
     boolean acceptDrop(DragObject dragObject);
 
+    void prepareAccessibilityDrop();
+
     // These methods are implemented in Views
     void getHitRectRelativeToDragLayer(Rect outRect);
     void getLocationInDragLayer(int[] loc);

File: src/com/android/launcher3/widget/WidgetsRowViewHolder.java
Patch:
@@ -25,7 +25,7 @@ public class WidgetsRowViewHolder extends ViewHolder {
 
     ViewGroup mContent;
 
-   public WidgetsRowViewHolder(ViewGroup v) {
+    public WidgetsRowViewHolder(ViewGroup v) {
         super(v);
         mContent = v;
     }

File: src/com/android/launcher3/widget/WidgetsRowViewHolder.java
Patch:
@@ -25,7 +25,7 @@ public class WidgetsRowViewHolder extends ViewHolder {
 
     ViewGroup mContent;
 
-   public WidgetsRowViewHolder(ViewGroup v) {
+    public WidgetsRowViewHolder(ViewGroup v) {
         super(v);
         mContent = v;
     }

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -557,7 +557,7 @@ private String getLocationDescriptionForIconDrop(int id) {
             Resources res = getContext().getResources();
             View child = getChildAt(x, y);
             if (child == null || child == dragInfo.item) {
-                return res.getString(R.string.move_to_empty_cell, x, y);
+                return res.getString(R.string.move_to_empty_cell, x + 1, y + 1);
             } else {
                 ItemInfo info = (ItemInfo) child.getTag();
                 if (info instanceof AppInfo || info instanceof ShortcutInfo) {

File: src/com/android/launcher3/DragController.java
Patch:
@@ -462,8 +462,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
                 mLastTouchUpTime = System.currentTimeMillis();
                 if (mDragging) {
                     PointF vec = isFlingingToDelete(mDragObject.dragSource);
-                    if (!DeleteDropTarget.willAcceptDrop(mDragObject.dragSource,
-                            mDragObject.dragInfo)) {
+                    if (!DeleteDropTarget.supportsDrop(mDragObject.dragInfo)) {
                         vec = null;
                     }
                     if (vec != null) {
@@ -617,7 +616,7 @@ public boolean onTouchEvent(MotionEvent ev) {
 
             if (mDragging) {
                 PointF vec = isFlingingToDelete(mDragObject.dragSource);
-                if (!DeleteDropTarget.willAcceptDrop(mDragObject.dragSource, mDragObject.dragInfo)) {
+                if (!DeleteDropTarget.supportsDrop(mDragObject.dragInfo)) {
                     vec = null;
                 }
                 if (vec != null) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1615,6 +1615,7 @@ public void enableAccessibleDrag(boolean enable) {
             // Reset our click listener
             setOnClickListener(mLauncher);
         }
+        mLauncher.getSearchBar().enableAccessibleDrag(enable);
         mLauncher.getHotseat().getLayout().enableAccessibleDrag(enable);
     }
 

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -557,7 +557,7 @@ private String getLocationDescriptionForIconDrop(int id) {
             Resources res = getContext().getResources();
             View child = getChildAt(x, y);
             if (child == null || child == dragInfo.item) {
-                return res.getString(R.string.move_to_empty_cell, x, y);
+                return res.getString(R.string.move_to_empty_cell, x + 1, y + 1);
             } else {
                 ItemInfo info = (ItemInfo) child.getTag();
                 if (info instanceof AppInfo || info instanceof ShortcutInfo) {

File: src/com/android/launcher3/DragController.java
Patch:
@@ -462,8 +462,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
                 mLastTouchUpTime = System.currentTimeMillis();
                 if (mDragging) {
                     PointF vec = isFlingingToDelete(mDragObject.dragSource);
-                    if (!DeleteDropTarget.willAcceptDrop(mDragObject.dragSource,
-                            mDragObject.dragInfo)) {
+                    if (!DeleteDropTarget.supportsDrop(mDragObject.dragInfo)) {
                         vec = null;
                     }
                     if (vec != null) {
@@ -617,7 +616,7 @@ public boolean onTouchEvent(MotionEvent ev) {
 
             if (mDragging) {
                 PointF vec = isFlingingToDelete(mDragObject.dragSource);
-                if (!DeleteDropTarget.willAcceptDrop(mDragObject.dragSource, mDragObject.dragInfo)) {
+                if (!DeleteDropTarget.supportsDrop(mDragObject.dragInfo)) {
                     vec = null;
                 }
                 if (vec != null) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1615,6 +1615,7 @@ public void enableAccessibleDrag(boolean enable) {
             // Reset our click listener
             setOnClickListener(mLauncher);
         }
+        mLauncher.getSearchBar().enableAccessibleDrag(enable);
         mLauncher.getHotseat().getLayout().enableAccessibleDrag(enable);
     }
 

File: src/com/android/launcher3/LauncherFiles.java
Patch:
@@ -42,5 +42,6 @@ public class LauncherFiles {
     // TODO: Delete these files on upgrade
     public static final List<String> OBSOLETE_FILES = Collections.unmodifiableList(Arrays.asList(
             "launches.log",
-            "stats.log"));
+            "stats.log",
+            "com.android.launcher3.compat.PackageInstallerCompatV16.queue"));
 }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -214,6 +214,7 @@ void onAddToDatabase(Context context, ContentValues values) {
         String uri = promisedIntent != null ? promisedIntent.toUri(0)
                 : (intent != null ? intent.toUri(0) : null);
         values.put(LauncherSettings.BaseLauncherColumns.INTENT, uri);
+        values.put(LauncherSettings.Favorites.RESTORED, status);
 
         if (customIcon) {
             values.put(LauncherSettings.BaseLauncherColumns.ICON_TYPE,

File: src/com/android/launcher3/LauncherFiles.java
Patch:
@@ -42,5 +42,6 @@ public class LauncherFiles {
     // TODO: Delete these files on upgrade
     public static final List<String> OBSOLETE_FILES = Collections.unmodifiableList(Arrays.asList(
             "launches.log",
-            "stats.log"));
+            "stats.log",
+            "com.android.launcher3.compat.PackageInstallerCompatV16.queue"));
 }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -214,6 +214,7 @@ void onAddToDatabase(Context context, ContentValues values) {
         String uri = promisedIntent != null ? promisedIntent.toUri(0)
                 : (intent != null ? intent.toUri(0) : null);
         values.put(LauncherSettings.BaseLauncherColumns.INTENT, uri);
+        values.put(LauncherSettings.Favorites.RESTORED, status);
 
         if (customIcon) {
             values.put(LauncherSettings.BaseLauncherColumns.ICON_TYPE,

File: src/com/android/launcher3/LauncherFiles.java
Patch:
@@ -42,5 +42,6 @@ public class LauncherFiles {
     // TODO: Delete these files on upgrade
     public static final List<String> OBSOLETE_FILES = Collections.unmodifiableList(Arrays.asList(
             "launches.log",
-            "stats.log"));
+            "stats.log",
+            "com.android.launcher3.compat.PackageInstallerCompatV16.queue"));
 }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -214,6 +214,7 @@ void onAddToDatabase(Context context, ContentValues values) {
         String uri = promisedIntent != null ? promisedIntent.toUri(0)
                 : (intent != null ? intent.toUri(0) : null);
         values.put(LauncherSettings.BaseLauncherColumns.INTENT, uri);
+        values.put(LauncherSettings.Favorites.RESTORED, status);
 
         if (customIcon) {
             values.put(LauncherSettings.BaseLauncherColumns.ICON_TYPE,

File: WallpaperPicker/src/com/android/launcher3/CropView.java
Patch:
@@ -21,7 +21,6 @@
 import android.graphics.Point;
 import android.graphics.RectF;
 import android.util.AttributeSet;
-import android.util.FloatMath;
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
 import android.view.ScaleGestureDetector.OnScaleGestureListener;
@@ -300,12 +299,12 @@ public boolean onTouchEvent(MotionEvent event) {
                     adjustment[0] = (edges.right - getWidth()) / scale;
                 }
                 if (edges.top > 0) {
-                    adjustment[1] = FloatMath.ceil(edges.top / scale);
+                    adjustment[1] = (float) Math.ceil(edges.top / scale);
                 } else if (edges.bottom < getHeight()) {
                     adjustment[1] = (edges.bottom - getHeight()) / scale;
                 }
                 for (int dim = 0; dim <= 1; dim++) {
-                    if (coef[dim] > 0) adjustment[dim] = FloatMath.ceil(adjustment[dim]);
+                    if (coef[dim] > 0) adjustment[dim] = (float) Math.ceil(adjustment[dim]);
                 }
 
                 mInverseRotateMatrix.mapPoints(adjustment);

File: src/com/android/launcher3/LauncherScroller.java
Patch:
@@ -20,7 +20,6 @@
 import android.content.Context;
 import android.hardware.SensorManager;
 import android.os.Build;
-import android.util.FloatMath;
 import android.view.ViewConfiguration;
 import android.view.animation.AnimationUtils;
 import android.view.animation.Interpolator;
@@ -409,7 +408,7 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
 
             float dx = (float) (mFinalX - mStartX);
             float dy = (float) (mFinalY - mStartY);
-            float hyp = FloatMath.sqrt(dx * dx + dy * dy);
+            float hyp = (float) Math.hypot(dx, dy);
 
             float ndx = dx / hyp;
             float ndy = dy / hyp;
@@ -426,7 +425,7 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
         mMode = FLING_MODE;
         mFinished = false;
 
-        float velocity = FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);
+        float velocity = (float) Math.hypot(velocityX, velocityY);
 
         mVelocity = velocity;
         mDuration = getSplineFlingDuration(velocity);

File: src/com/android/launcher3/widget/WidgetsContainerView.java
Patch:
@@ -126,7 +126,7 @@ protected void onFinishInflate() {
     //
 
     public View getContentView() {
-        return findViewById(R.id.widgets_list_view);
+        return findViewById(R.id.widgets_content);
     }
 
     public View getRevealView() {

File: src/com/android/launcher3/DragController.java
Patch:
@@ -377,7 +377,7 @@ private void endDrag() {
 
             // Only end the drag if we are not deferred
             if (!isDeferred) {
-                for (DragListener listener : mListeners) {
+                for (DragListener listener : new ArrayList<>(mListeners)) {
                     listener.onDragEnd();
                 }
             }
@@ -394,7 +394,7 @@ void onDeferredEndDrag(DragView dragView) {
 
         if (mDragObject.deferDragViewCleanupPostAnimation) {
             // If we skipped calling onDragEnd() before, do it now
-            for (DragListener listener : mListeners) {
+            for (DragListener listener : new ArrayList<>(mListeners)) {
                 listener.onDragEnd();
             }
         }

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -177,7 +177,7 @@ public void measureChild(View child) {
         child.measure(childWidthMeasureSpec, childheightMeasureSpec);
     }
 
-    private boolean invertLayoutHorizontally() {
+    public boolean invertLayoutHorizontally() {
         return mInvertIfRtl && isLayoutRtl();
     }
 

File: src/com/android/launcher3/DragController.java
Patch:
@@ -377,7 +377,7 @@ private void endDrag() {
 
             // Only end the drag if we are not deferred
             if (!isDeferred) {
-                for (DragListener listener : mListeners) {
+                for (DragListener listener : new ArrayList<>(mListeners)) {
                     listener.onDragEnd();
                 }
             }
@@ -394,7 +394,7 @@ void onDeferredEndDrag(DragView dragView) {
 
         if (mDragObject.deferDragViewCleanupPostAnimation) {
             // If we skipped calling onDragEnd() before, do it now
-            for (DragListener listener : mListeners) {
+            for (DragListener listener : new ArrayList<>(mListeners)) {
                 listener.onDragEnd();
             }
         }

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -177,7 +177,7 @@ public void measureChild(View child) {
         child.measure(childWidthMeasureSpec, childheightMeasureSpec);
     }
 
-    private boolean invertLayoutHorizontally() {
+    public boolean invertLayoutHorizontally() {
         return mInvertIfRtl && isLayoutRtl();
     }
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -475,13 +475,14 @@ protected boolean isDataReady() {
 
     /**
      * Returns the index of the currently displayed page.
-     *
-     * @return The index of the currently displayed page.
      */
     int getCurrentPage() {
         return mCurrentPage;
     }
 
+    /**
+     * Returns the index of page to be shown immediately afterwards.
+     */
     int getNextPage() {
         return (mNextPage != INVALID_PAGE) ? mNextPage : mCurrentPage;
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1003,7 +1003,7 @@ protected void onResume() {
         super.onResume();
 
         // Restore the previous launcher state
-        if (mOnResumeState == State.WORKSPACE || mOnResumeState == State.NONE) {
+        if (mOnResumeState == State.WORKSPACE) {
             showWorkspace(false);
         } else if (mOnResumeState == State.APPS) {
             showAppsView(false /* animated */, false /* resetListToTop */);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1003,7 +1003,7 @@ protected void onResume() {
         super.onResume();
 
         // Restore the previous launcher state
-        if (mOnResumeState == State.WORKSPACE || mOnResumeState == State.NONE) {
+        if (mOnResumeState == State.WORKSPACE) {
             showWorkspace(false);
         } else if (mOnResumeState == State.APPS) {
             showAppsView(false /* animated */, false /* resetListToTop */);

File: src/com/android/launcher3/DragController.java
Patch:
@@ -377,7 +377,7 @@ private void endDrag() {
 
             // Only end the drag if we are not deferred
             if (!isDeferred) {
-                for (DragListener listener : mListeners) {
+                for (DragListener listener : new ArrayList<>(mListeners)) {
                     listener.onDragEnd();
                 }
             }
@@ -394,7 +394,7 @@ void onDeferredEndDrag(DragView dragView) {
 
         if (mDragObject.deferDragViewCleanupPostAnimation) {
             // If we skipped calling onDragEnd() before, do it now
-            for (DragListener listener : mListeners) {
+            for (DragListener listener : new ArrayList<>(mListeners)) {
                 listener.onDragEnd();
             }
         }

File: WallpaperPicker/src/com/android/launcher3/CropView.java
Patch:
@@ -21,7 +21,6 @@
 import android.graphics.Point;
 import android.graphics.RectF;
 import android.util.AttributeSet;
-import android.util.FloatMath;
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
 import android.view.ScaleGestureDetector.OnScaleGestureListener;
@@ -300,12 +299,12 @@ public boolean onTouchEvent(MotionEvent event) {
                     adjustment[0] = (edges.right - getWidth()) / scale;
                 }
                 if (edges.top > 0) {
-                    adjustment[1] = FloatMath.ceil(edges.top / scale);
+                    adjustment[1] = (float) Math.ceil(edges.top / scale);
                 } else if (edges.bottom < getHeight()) {
                     adjustment[1] = (edges.bottom - getHeight()) / scale;
                 }
                 for (int dim = 0; dim <= 1; dim++) {
-                    if (coef[dim] > 0) adjustment[dim] = FloatMath.ceil(adjustment[dim]);
+                    if (coef[dim] > 0) adjustment[dim] = (float) Math.ceil(adjustment[dim]);
                 }
 
                 mInverseRotateMatrix.mapPoints(adjustment);

File: src/com/android/launcher3/LauncherScroller.java
Patch:
@@ -20,7 +20,6 @@
 import android.content.Context;
 import android.hardware.SensorManager;
 import android.os.Build;
-import android.util.FloatMath;
 import android.view.ViewConfiguration;
 import android.view.animation.AnimationUtils;
 import android.view.animation.Interpolator;
@@ -409,7 +408,7 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
 
             float dx = (float) (mFinalX - mStartX);
             float dy = (float) (mFinalY - mStartY);
-            float hyp = FloatMath.sqrt(dx * dx + dy * dy);
+            float hyp = (float) Math.hypot(dx, dy);
 
             float ndx = dx / hyp;
             float ndy = dy / hyp;
@@ -426,7 +425,7 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
         mMode = FLING_MODE;
         mFinished = false;
 
-        float velocity = FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);
+        float velocity = (float) Math.hypot(velocityX, velocityY);
 
         mVelocity = velocity;
         mDuration = getSplineFlingDuration(velocity);

File: src/com/android/launcher3/widget/WidgetsModel.java
Patch:
@@ -71,8 +71,10 @@ public void addWidgetsAndShortcuts(ArrayList<Object> widgetsShortcuts, PackageMa
         // Temporary list for {@link PackageItemInfos} to avoid having to go through
         // {@link mPackageItemInfos} to locate the key to be used for {@link #mWidgetsList}
         HashMap<String, PackageItemInfo> tmpPackageItemInfos = new HashMap<>();
+
         // clear the lists.
         mWidgetsList.clear();
+        mPackageItemInfos.clear();
 
         // add and update.
         for (Object o: widgetsShortcuts) {

File: src/com/android/launcher3/widget/WidgetsModel.java
Patch:
@@ -71,8 +71,10 @@ public void addWidgetsAndShortcuts(ArrayList<Object> widgetsShortcuts, PackageMa
         // Temporary list for {@link PackageItemInfos} to avoid having to go through
         // {@link mPackageItemInfos} to locate the key to be used for {@link #mWidgetsList}
         HashMap<String, PackageItemInfo> tmpPackageItemInfos = new HashMap<>();
+
         // clear the lists.
         mWidgetsList.clear();
+        mPackageItemInfos.clear();
 
         // add and update.
         for (Object o: widgetsShortcuts) {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -132,7 +132,7 @@ public class Launcher extends Activity
         implements View.OnClickListener, OnLongClickListener, LauncherModel.Callbacks,
                    View.OnTouchListener, PageSwitchListener, LauncherProviderChangeListener,
                    LauncherStateTransitionAnimation.Callbacks {
-    static final String TAG = "Launcher - MERONG";
+    static final String TAG = "Launcher";
     static final boolean LOGD = true;
 
     static final boolean PROFILE_STARTUP = false;

File: src/com/android/launcher3/widget/PackageItemInfo.java
Patch:
@@ -39,11 +39,12 @@ public class PackageItemInfo extends ItemInfo {
      */
     public boolean usingLowResIcon;
 
-    public ComponentName componentName;
+    public String packageName;
 
     int flags = 0;
 
-    PackageItemInfo() {
+    PackageItemInfo(String packageName) {
+        this.packageName = packageName;
     }
 
     @Override

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -283,8 +283,8 @@ public HashSet<String> updateDBIcons(UserHandleCompat user, List<LauncherActivit
             }
             ContentValues values = updateCacheAndGetContentValues(app);
             mIconDb.getWritableDatabase().update(IconDB.TABLE_NAME, values,
-                    IconDB.COLUMN_COMPONENT + " = ?",
-                    new String[] { cn });
+                    IconDB.COLUMN_COMPONENT + " = ? AND " + IconDB.COLUMN_USER + " = ?",
+                    new String[] {cn, Long.toString(userSerial)});
 
             updatedPackages.add(component.getPackageName());
         }

File: src/com/android/launcher3/LauncherAccessibilityDelegate.java
Patch:
@@ -124,7 +124,7 @@ public int getScreenIndex(ArrayList<Long> screenIDs) {
                 mLauncher.showWorkspace(true, new Runnable() {
                     @Override
                     public void run() {
-                        mLauncher.getModel().addAndBindAddedWorkspaceApps(
+                        mLauncher.getModel().addAndBindAddedWorkspaceItems(
                                 mLauncher, addShortcuts, screenProvider, 0, true);
                         announceConfirmation(R.string.item_added_to_workspace);
                     }

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -149,7 +149,7 @@ public IconCache getIconCache() {
         return mIconCache;
     }
 
-    LauncherModel getModel() {
+    public LauncherModel getModel() {
         return mModel;
     }
 

File: src/com/android/launcher3/LauncherFiles.java
Patch:
@@ -21,6 +21,7 @@ public class LauncherFiles {
     public static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
     public static final String WALLPAPER_CROP_PREFERENCES_KEY =
             "com.android.launcher3.WallpaperCropActivity";
+    public static final String MANAGED_USER_PREFERENCES_KEY = "com.android.launcher3.managedusers.prefs";
 
     public static final String WALLPAPER_IMAGES_DB = "saved_wallpaper_images.db";
     public static final String WIDGET_PREVIEWS_DB = "widgetpreviews.db";
@@ -35,6 +36,7 @@ public class LauncherFiles {
             WALLPAPER_CROP_PREFERENCES_KEY + XML,
             WALLPAPER_IMAGES_DB,
             WIDGET_PREVIEWS_DB,
+            MANAGED_USER_PREFERENCES_KEY,
             APP_ICONS_DB));
 
     // TODO: Delete these files on upgrade

File: src/com/android/launcher3/compat/UserManagerCompat.java
Patch:
@@ -43,4 +43,5 @@ public static UserManagerCompat getInstance(Context context) {
     public abstract UserHandleCompat getUserForSerialNumber(long serialNumber);
     public abstract Drawable getBadgedDrawableForUser(Drawable unbadged, UserHandleCompat user);
     public abstract CharSequence getBadgedLabelForUser(CharSequence label, UserHandleCompat user);
+    public abstract long getUserCreationTime(UserHandleCompat user);
 }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1003,7 +1003,7 @@ protected void onResume() {
         super.onResume();
 
         // Restore the previous launcher state
-        if (mOnResumeState == State.WORKSPACE || mOnResumeState == State.NONE) {
+        if (mOnResumeState == State.WORKSPACE) {
             showWorkspace(false);
         } else if (mOnResumeState == State.APPS) {
             showAppsView(false /* animated */, false /* resetListToTop */);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -45,7 +45,6 @@
 import android.util.SparseArray;
 import android.view.MotionEvent;
 import android.view.View;
-import android.view.View.OnClickListener;
 import android.view.ViewDebug;
 import android.view.ViewGroup;
 import android.view.accessibility.AccessibilityEvent;
@@ -56,6 +55,7 @@
 import com.android.launcher3.FolderIcon.FolderRingAnimator;
 import com.android.launcher3.LauncherAccessibilityDelegate.DragType;
 import com.android.launcher3.util.Thunk;
+import com.android.launcher3.widget.PendingAddWidgetInfo;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -3025,7 +3025,7 @@ boolean existsEmptyCell() {
      *
      * @return True if a vacant cell of the specified dimension was found, false otherwise.
      */
-    boolean findCellForSpan(int[] cellXY, int spanX, int spanY) {
+    public boolean findCellForSpan(int[] cellXY, int spanX, int spanY) {
         return findCellForSpanThatIntersectsIgnoring(cellXY, spanX, spanY, -1, -1, null, mOccupied);
     }
 

File: src/com/android/launcher3/DragSource.java
Patch:
@@ -22,9 +22,9 @@
 
 /**
  * Interface defining an object that can originate a drag.
- *
  */
 public interface DragSource {
+
     /**
      * @return whether items dragged from this source supports
      */

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -32,7 +32,7 @@
 import android.graphics.drawable.Drawable;
 import android.util.SparseArray;
 
-class FastBitmapDrawable extends Drawable {
+public class FastBitmapDrawable extends Drawable {
 
     static final TimeInterpolator CLICK_FEEDBACK_INTERPOLATOR = new TimeInterpolator() {
 
@@ -72,7 +72,7 @@ public float getInterpolation(float input) {
     private boolean mPressed = false;
     private ObjectAnimator mPressedAnimator;
 
-    FastBitmapDrawable(Bitmap b) {
+    public FastBitmapDrawable(Bitmap b) {
         mAlpha = 255;
         mBitmap = b;
         setBounds(0, 0, b.getWidth(), b.getHeight());

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -141,7 +141,7 @@ LauncherModel setLauncher(Launcher launcher) {
         return mModel;
     }
 
-    LauncherAccessibilityDelegate getAccessibilityDelegate() {
+    public LauncherAccessibilityDelegate getAccessibilityDelegate() {
         return mAccessibilityDelegate;
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3628,7 +3628,7 @@ public static class WidgetAndShortcutNameComparator implements Comparator<Object
         private final HashMap<Object, String> mLabelCache;
         private final Collator mCollator;
 
-        WidgetAndShortcutNameComparator(Context context) {
+        public WidgetAndShortcutNameComparator(Context context) {
             mManager = AppWidgetManagerCompat.getInstance(context);
             mPackageManager = context.getPackageManager();
             mLabelCache = new HashMap<Object, String>();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -71,6 +71,8 @@
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.Thunk;
 import com.android.launcher3.util.WallpaperUtils;
+import com.android.launcher3.widget.PendingAddShortcutInfo;
+import com.android.launcher3.widget.PendingAddWidgetInfo;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -45,7 +45,6 @@
 import android.util.SparseArray;
 import android.view.MotionEvent;
 import android.view.View;
-import android.view.View.OnClickListener;
 import android.view.ViewDebug;
 import android.view.ViewGroup;
 import android.view.accessibility.AccessibilityEvent;
@@ -56,6 +55,7 @@
 import com.android.launcher3.FolderIcon.FolderRingAnimator;
 import com.android.launcher3.LauncherAccessibilityDelegate.DragType;
 import com.android.launcher3.util.Thunk;
+import com.android.launcher3.widget.PendingAddWidgetInfo;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -3025,7 +3025,7 @@ boolean existsEmptyCell() {
      *
      * @return True if a vacant cell of the specified dimension was found, false otherwise.
      */
-    boolean findCellForSpan(int[] cellXY, int spanX, int spanY) {
+    public boolean findCellForSpan(int[] cellXY, int spanX, int spanY) {
         return findCellForSpanThatIntersectsIgnoring(cellXY, spanX, spanY, -1, -1, null, mOccupied);
     }
 

File: src/com/android/launcher3/DragSource.java
Patch:
@@ -22,9 +22,9 @@
 
 /**
  * Interface defining an object that can originate a drag.
- *
  */
 public interface DragSource {
+
     /**
      * @return whether items dragged from this source supports
      */

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -32,7 +32,7 @@
 import android.graphics.drawable.Drawable;
 import android.util.SparseArray;
 
-class FastBitmapDrawable extends Drawable {
+public class FastBitmapDrawable extends Drawable {
 
     static final TimeInterpolator CLICK_FEEDBACK_INTERPOLATOR = new TimeInterpolator() {
 
@@ -72,7 +72,7 @@ public float getInterpolation(float input) {
     private boolean mPressed = false;
     private ObjectAnimator mPressedAnimator;
 
-    FastBitmapDrawable(Bitmap b) {
+    public FastBitmapDrawable(Bitmap b) {
         mAlpha = 255;
         mBitmap = b;
         setBounds(0, 0, b.getWidth(), b.getHeight());

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -141,7 +141,7 @@ LauncherModel setLauncher(Launcher launcher) {
         return mModel;
     }
 
-    LauncherAccessibilityDelegate getAccessibilityDelegate() {
+    public LauncherAccessibilityDelegate getAccessibilityDelegate() {
         return mAccessibilityDelegate;
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3628,7 +3628,7 @@ public static class WidgetAndShortcutNameComparator implements Comparator<Object
         private final HashMap<Object, String> mLabelCache;
         private final Collator mCollator;
 
-        WidgetAndShortcutNameComparator(Context context) {
+        public WidgetAndShortcutNameComparator(Context context) {
             mManager = AppWidgetManagerCompat.getInstance(context);
             mPackageManager = context.getPackageManager();
             mLabelCache = new HashMap<Object, String>();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -71,6 +71,8 @@
 import com.android.launcher3.compat.UserHandleCompat;
 import com.android.launcher3.util.Thunk;
 import com.android.launcher3.util.WallpaperUtils;
+import com.android.launcher3.widget.PendingAddShortcutInfo;
+import com.android.launcher3.widget.PendingAddWidgetInfo;
 
 import java.util.ArrayList;
 import java.util.HashMap;

File: src/com/android/launcher3/AppsContainerRecyclerView.java
Patch:
@@ -339,7 +339,7 @@ private void updateVerticalScrollbarBounds() {
         int childCount = getChildCount();
         for (int i = 0; i < childCount; i++) {
             View child = getChildAt(i);
-            int position = getChildAdapterPosition(child);
+            int position = getChildPosition(child);
             if (position != NO_POSITION) {
                 AlphabeticalAppsList.AdapterItem item = mApps.getAdapterItems().get(position);
                 if (!item.isSectionHeader) {

File: src/com/android/launcher3/AppsGridAdapter.java
Patch:
@@ -79,10 +79,10 @@ public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
                     GridLayoutManager.LayoutParams lp = (GridLayoutManager.LayoutParams)
                             child.getLayoutParams();
                     if (!holder.mIsSectionRow && !holder.mIsEmptyRow && !lp.isItemRemoved()) {
-                        if (items.get(holder.getAdapterPosition() - 1).isSectionHeader) {
+                        if (items.get(holder.getPosition() - 1).isSectionHeader) {
                             // Draw at the parent
                             AlphabeticalAppsList.AdapterItem item =
-                                    items.get(holder.getAdapterPosition());
+                                    items.get(holder.getPosition());
                             String section = item.sectionName;
                             mSectionTextPaint.getTextBounds(section, 0, section.length(),
                                     mTmpBounds);

File: src/com/android/launcher3/AppsContainerRecyclerView.java
Patch:
@@ -339,7 +339,7 @@ private void updateVerticalScrollbarBounds() {
         int childCount = getChildCount();
         for (int i = 0; i < childCount; i++) {
             View child = getChildAt(i);
-            int position = getChildAdapterPosition(child);
+            int position = getChildPosition(child);
             if (position != NO_POSITION) {
                 AlphabeticalAppsList.AdapterItem item = mApps.getAdapterItems().get(position);
                 if (!item.isSectionHeader) {

File: src/com/android/launcher3/AppsGridAdapter.java
Patch:
@@ -79,10 +79,10 @@ public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
                     GridLayoutManager.LayoutParams lp = (GridLayoutManager.LayoutParams)
                             child.getLayoutParams();
                     if (!holder.mIsSectionRow && !holder.mIsEmptyRow && !lp.isItemRemoved()) {
-                        if (items.get(holder.getAdapterPosition() - 1).isSectionHeader) {
+                        if (items.get(holder.getPosition() - 1).isSectionHeader) {
                             // Draw at the parent
                             AlphabeticalAppsList.AdapterItem item =
-                                    items.get(holder.getAdapterPosition());
+                                    items.get(holder.getPosition());
                             String section = item.sectionName;
                             mSectionTextPaint.getTextBounds(section, 0, section.length(),
                                     mTmpBounds);

File: src/com/android/launcher3/AppsContainerRecyclerView.java
Patch:
@@ -339,7 +339,7 @@ private void updateVerticalScrollbarBounds() {
         int childCount = getChildCount();
         for (int i = 0; i < childCount; i++) {
             View child = getChildAt(i);
-            int position = getChildAdapterPosition(child);
+            int position = getChildPosition(child);
             if (position != NO_POSITION) {
                 AlphabeticalAppsList.AdapterItem item = mApps.getAdapterItems().get(position);
                 if (!item.isSectionHeader) {

File: src/com/android/launcher3/AppsGridAdapter.java
Patch:
@@ -79,10 +79,10 @@ public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {
                     GridLayoutManager.LayoutParams lp = (GridLayoutManager.LayoutParams)
                             child.getLayoutParams();
                     if (!holder.mIsSectionRow && !holder.mIsEmptyRow && !lp.isItemRemoved()) {
-                        if (items.get(holder.getAdapterPosition() - 1).isSectionHeader) {
+                        if (items.get(holder.getPosition() - 1).isSectionHeader) {
                             // Draw at the parent
                             AlphabeticalAppsList.AdapterItem item =
-                                    items.get(holder.getAdapterPosition());
+                                    items.get(holder.getPosition());
                             String section = item.sectionName;
                             mSectionTextPaint.getTextBounds(section, 0, section.length(),
                                     mTmpBounds);

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -766,7 +766,8 @@ public void layout(Launcher launcher) {
             lp.gravity = Gravity.BOTTOM;
             lp.width = LayoutParams.MATCH_PARENT;
             lp.height = hotseatBarHeightPx;
-            hotseat.setPadding(2 * edgeMarginPx, 0, 2 * edgeMarginPx, 0);
+            hotseat.findViewById(R.id.layout).setPadding(2 * edgeMarginPx, 0,
+                    2 * edgeMarginPx, 0);
         }
         hotseat.setLayoutParams(lp);
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -402,7 +402,6 @@ public void onDragStart(final DragSource source, Object info, int dragAction) {
         setChildrenBackgroundAlphaMultipliers(1f);
         // Prevent any Un/InstallShortcutReceivers from updating the db while we are dragging
         InstallShortcutReceiver.enableInstallQueue();
-        UninstallShortcutReceiver.enableUninstallQueue();
         post(new Runnable() {
             @Override
             public void run() {
@@ -430,7 +429,6 @@ public void onDragEnd() {
 
         // Re-enable any Un/InstallShortcutReceiver and now process any queued items
         InstallShortcutReceiver.disableAndFlushInstallQueue(getContext());
-        UninstallShortcutReceiver.disableAndFlushUninstallQueue(getContext());
 
         mDragSourceInternal = null;
         mLauncher.onInteractionEnd();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1317,7 +1317,9 @@ private void restoreState(Bundle savedState) {
             mPendingAddInfo.cellY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_CELL_Y);
             mPendingAddInfo.spanX = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_X);
             mPendingAddInfo.spanY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_Y);
-            mPendingAddWidgetInfo = savedState.getParcelable(RUNTIME_STATE_PENDING_ADD_WIDGET_INFO);
+            AppWidgetProviderInfo info = savedState.getParcelable(
+                    RUNTIME_STATE_PENDING_ADD_WIDGET_INFO);
+            mPendingAddWidgetInfo = LauncherAppWidgetProviderInfo.fromProviderInfo(this, info);
             mPendingAddWidgetId = savedState.getInt(RUNTIME_STATE_PENDING_ADD_WIDGET_ID);
             setWaitingForResult(true);
             mRestoring = true;

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -656,8 +656,8 @@ private void clearDB(SQLiteDatabase db) {
 
         public ContentValues newContentValues(Bitmap icon, String label) {
             ContentValues values = new ContentValues();
-            values.put(IconDB.COLUMN_ICON, ItemInfo.flattenBitmap(icon));
-            values.put(IconDB.COLUMN_ICON_LOW_RES, ItemInfo.flattenBitmap(
+            values.put(IconDB.COLUMN_ICON, Utilities.flattenBitmap(icon));
+            values.put(IconDB.COLUMN_ICON_LOW_RES, Utilities.flattenBitmap(
                     Bitmap.createScaledBitmap(icon,
                             icon.getWidth() / LOW_RES_SCALE_FACTOR,
                             icon.getHeight() / LOW_RES_SCALE_FACTOR, true)));

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -331,7 +331,7 @@ public String encodeToString() {
                     .key(LAUNCH_INTENT_KEY).value(launchIntent.toUri(0))
                     .key(NAME_KEY).value(name);
                 if (icon != null) {
-                    byte[] iconByteArray = ItemInfo.flattenBitmap(icon);
+                    byte[] iconByteArray = Utilities.flattenBitmap(icon);
                     json = json.key(ICON_KEY).value(
                             Base64.encodeToString(
                                     iconByteArray, 0, iconByteArray.length, Base64.DEFAULT));

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3872,7 +3872,7 @@ public void run() {
         final Workspace workspace = mWorkspace;
 
         LauncherAppWidgetProviderInfo appWidgetInfo =
-                LauncherModel.getProviderInfo(this, item.providerName);
+                LauncherModel.getProviderInfo(this, item.providerName, item.user);
 
         if (!mIsSafeModeEnabled
                 && ((item.restoreStatus & LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY) == 0)

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4878,7 +4878,8 @@ void widgetsRestored(ArrayList<LauncherAppWidgetInfo> changedInfo) {
             DeferredWidgetRefresh widgetRefresh = new DeferredWidgetRefresh(changedInfo,
                     mLauncher.getAppWidgetHost());
             if (LauncherModel.getProviderInfo(getContext(),
-                    changedInfo.get(0).providerName) != null) {
+                    changedInfo.get(0).providerName,
+                    changedInfo.get(0).user) != null) {
                 // Re-inflate the widgets which have changed status
                 widgetRefresh.run();
             } else {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4371,7 +4371,7 @@ public void run() {
         final Workspace workspace = mWorkspace;
 
         LauncherAppWidgetProviderInfo appWidgetInfo =
-                LauncherModel.getProviderInfo(this, item.providerName);
+                LauncherModel.getProviderInfo(this, item.providerName, item.user);
 
         if (!mIsSafeModeEnabled
                 && ((item.restoreStatus & LauncherAppWidgetInfo.FLAG_PROVIDER_NOT_READY) == 0)

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4974,7 +4974,8 @@ void widgetsRestored(ArrayList<LauncherAppWidgetInfo> changedInfo) {
             DeferredWidgetRefresh widgetRefresh = new DeferredWidgetRefresh(changedInfo,
                     mLauncher.getAppWidgetHost());
             if (LauncherModel.getProviderInfo(getContext(),
-                    changedInfo.get(0).providerName) != null) {
+                    changedInfo.get(0).providerName,
+                    changedInfo.get(0).user) != null) {
                 // Re-inflate the widgets which have changed status
                 widgetRefresh.run();
             } else {

File: src/com/android/launcher3/Folder.java
Patch:
@@ -1172,11 +1172,11 @@ public void showItem(ShortcutInfo info) {
     }
 
     public void onAdd(ShortcutInfo item) {
-        mItemsInvalidated = true;
         // If the item was dropped onto this open folder, we have done the work associated
         // with adding the item to the folder, as indicated by mSuppressOnAdd being set
         if (mSuppressOnAdd) return;
         mContent.createAndAddViewForRank(item, mContent.allocateRankForNewItem(item));
+        mItemsInvalidated = true;
         LauncherModel.addOrMoveItemInDatabase(
                 mLauncher, item, mInfo.id, 0, item.cellX, item.cellY);
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4103,7 +4103,7 @@ public void bindAllApplications(final ArrayList<AppInfo> apps) {
         }
         if (mAppsCustomizeContent != null) {
             mAppsCustomizeContent.onPackagesUpdated(
-                    LauncherModel.getSortedWidgetsAndShortcuts(this));
+                    LauncherModel.getSortedWidgetsAndShortcuts(this, false /* refresh */));
         }
         if (mLauncherCallbacks != null) {
             mLauncherCallbacks.bindAllApplications(apps);

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -81,7 +81,8 @@ public void removeProviderChangeListener(Runnable callback) {
     protected void onProvidersChanged() {
         // Once we get the message that widget packages are updated, we need to rebind items
         // in AppsCustomize accordingly.
-        mLauncher.bindPackagesUpdated(LauncherModel.getSortedWidgetsAndShortcuts(mLauncher));
+        mLauncher.bindPackagesUpdated(LauncherModel.getSortedWidgetsAndShortcuts(mLauncher,
+                true /* refresh */));
 
         for (Runnable callback : mProviderChangeListeners) {
             callback.run();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4608,13 +4608,13 @@ public void bindAllApplications(final ArrayList<AppInfo> apps) {
             }
             if (mAppsCustomizeContent != null) {
                 mAppsCustomizeContent.onPackagesUpdated(
-                        LauncherModel.getSortedWidgetsAndShortcuts(this));
+                        LauncherModel.getSortedWidgetsAndShortcuts(this, false /* refresh */));
             }
         } else {
             if (mAppsCustomizeContent != null) {
                 mAppsCustomizeContent.setApps(apps);
                 mAppsCustomizeContent.onPackagesUpdated(
-                        LauncherModel.getSortedWidgetsAndShortcuts(this));
+                        LauncherModel.getSortedWidgetsAndShortcuts(this, false /* refresh */));
             }
         }
         if (mLauncherCallbacks != null) {

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -81,7 +81,8 @@ public void removeProviderChangeListener(Runnable callback) {
     protected void onProvidersChanged() {
         // Once we get the message that widget packages are updated, we need to rebind items
         // in AppsCustomize accordingly.
-        mLauncher.bindPackagesUpdated(LauncherModel.getSortedWidgetsAndShortcuts(mLauncher));
+        mLauncher.bindPackagesUpdated(LauncherModel.getSortedWidgetsAndShortcuts(mLauncher,
+                true /* refresh */));
 
         for (Runnable callback : mProviderChangeListeners) {
             callback.run();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4103,7 +4103,7 @@ public void bindAllApplications(final ArrayList<AppInfo> apps) {
         }
         if (mAppsCustomizeContent != null) {
             mAppsCustomizeContent.onPackagesUpdated(
-                    LauncherModel.getSortedWidgetsAndShortcuts(this));
+                    LauncherModel.getSortedWidgetsAndShortcuts(this, false /* refresh */));
         }
         if (mLauncherCallbacks != null) {
             mLauncherCallbacks.bindAllApplications(apps);

File: src/com/android/launcher3/LauncherAppWidgetHost.java
Patch:
@@ -81,7 +81,8 @@ public void removeProviderChangeListener(Runnable callback) {
     protected void onProvidersChanged() {
         // Once we get the message that widget packages are updated, we need to rebind items
         // in AppsCustomize accordingly.
-        mLauncher.bindPackagesUpdated(LauncherModel.getSortedWidgetsAndShortcuts(mLauncher));
+        mLauncher.bindPackagesUpdated(LauncherModel.getSortedWidgetsAndShortcuts(mLauncher,
+                true /* refresh */));
 
         for (Runnable callback : mProviderChangeListeners) {
             callback.run();

File: src/com/android/launcher3/DropTarget.java
Patch:
@@ -54,6 +54,9 @@ class DragObject {
         /** Where the drag originated */
         public DragSource dragSource = null;
 
+        /** The object is part of an accessible drag operation */
+        public boolean accessibleDrag;
+
         /** Post drag animation runnable */
         public Runnable postAnimationRunnable = null;
 

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -62,7 +62,7 @@ public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static LauncherAppState INSTANCE;
 
     private DynamicGrid mDynamicGrid;
-    private AccessibilityDelegate mAccessibilityDelegate;
+    private LauncherAccessibilityDelegate mAccessibilityDelegate;
 
     public static LauncherAppState getInstance() {
         if (INSTANCE == null) {
@@ -168,7 +168,7 @@ LauncherModel setLauncher(Launcher launcher) {
         return mModel;
     }
 
-    AccessibilityDelegate getAccessibilityDelegate() {
+    LauncherAccessibilityDelegate getAccessibilityDelegate() {
         return mAccessibilityDelegate;
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4169,7 +4169,7 @@ public void run() {
         boolean beingCalledAfterUninstall = mDeferredAction != null;
 
         if (success && !(beingCalledAfterUninstall && !mUninstallSuccessful)) {
-            if (mDragInfo != null) {
+            if (target != this && mDragInfo != null) {
                 removeWorkspaceItem(mDragInfo.cell);
             }
         } else if (mDragInfo != null) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4169,7 +4169,7 @@ public void run() {
         boolean beingCalledAfterUninstall = mDeferredAction != null;
 
         if (success && !(beingCalledAfterUninstall && !mUninstallSuccessful)) {
-            if (mDragInfo != null) {
+            if (target != this && mDragInfo != null) {
                 removeWorkspaceItem(mDragInfo.cell);
             }
         } else if (mDragInfo != null) {

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -326,7 +326,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
                 parent = getCellLayoutChildrenForIndex(workspace, pageIndex - 1);
                 if (parent != null) {
                     iconLayout = (CellLayout) parent.getParent();
-                    matrix = FocusLogic.createSparseMatrix(iconLayout, orientation,
+                    matrix = FocusLogic.createSparseMatrix(iconLayout,
                         iconLayout.getCountX(), row);
                     newIconIndex = FocusLogic.handleKeyEvent(keyCode, countX + 1, countY, matrix,
                         FocusLogic.PIVOT, pageIndex - 1, pageCount);
@@ -353,7 +353,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
                 parent = getCellLayoutChildrenForIndex(workspace, pageIndex + 1);
                 if (parent != null) {
                     iconLayout = (CellLayout) parent.getParent();
-                    matrix = FocusLogic.createSparseMatrix(iconLayout, orientation, -1, row);
+                    matrix = FocusLogic.createSparseMatrix(iconLayout, -1, row);
                     newIconIndex = FocusLogic.handleKeyEvent(keyCode, countX + 1, countY, matrix,
                         FocusLogic.PIVOT, pageIndex, pageCount);
                     newIcon = parent.getChildAt(newIconIndex);

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -326,7 +326,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
                 parent = getCellLayoutChildrenForIndex(workspace, pageIndex - 1);
                 if (parent != null) {
                     iconLayout = (CellLayout) parent.getParent();
-                    matrix = FocusLogic.createSparseMatrix(iconLayout, orientation,
+                    matrix = FocusLogic.createSparseMatrix(iconLayout,
                         iconLayout.getCountX(), row);
                     newIconIndex = FocusLogic.handleKeyEvent(keyCode, countX + 1, countY, matrix,
                         FocusLogic.PIVOT, pageIndex - 1, pageCount);
@@ -353,7 +353,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
                 parent = getCellLayoutChildrenForIndex(workspace, pageIndex + 1);
                 if (parent != null) {
                     iconLayout = (CellLayout) parent.getParent();
-                    matrix = FocusLogic.createSparseMatrix(iconLayout, orientation, -1, row);
+                    matrix = FocusLogic.createSparseMatrix(iconLayout, -1, row);
                     newIconIndex = FocusLogic.handleKeyEvent(keyCode, countX + 1, countY, matrix,
                         FocusLogic.PIVOT, pageIndex, pageCount);
                     newIcon = parent.getChildAt(newIconIndex);

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -326,7 +326,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
                 parent = getCellLayoutChildrenForIndex(workspace, pageIndex - 1);
                 if (parent != null) {
                     iconLayout = (CellLayout) parent.getParent();
-                    matrix = FocusLogic.createSparseMatrix(iconLayout, orientation,
+                    matrix = FocusLogic.createSparseMatrix(iconLayout,
                         iconLayout.getCountX(), row);
                     newIconIndex = FocusLogic.handleKeyEvent(keyCode, countX + 1, countY, matrix,
                         FocusLogic.PIVOT, pageIndex - 1, pageCount);
@@ -353,7 +353,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
                 parent = getCellLayoutChildrenForIndex(workspace, pageIndex + 1);
                 if (parent != null) {
                     iconLayout = (CellLayout) parent.getParent();
-                    matrix = FocusLogic.createSparseMatrix(iconLayout, orientation, -1, row);
+                    matrix = FocusLogic.createSparseMatrix(iconLayout, -1, row);
                     newIconIndex = FocusLogic.handleKeyEvent(keyCode, countX + 1, countY, matrix,
                         FocusLogic.PIVOT, pageIndex, pageCount);
                     newIcon = parent.getChildAt(newIconIndex);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3206,7 +3206,7 @@ boolean isHotseatLayout(View layout) {
     /**
      * Returns the CellLayout of the specified container at the specified screen.
      */
-    CellLayout getCellLayout(long container, long screenId) {
+    public CellLayout getCellLayout(long container, long screenId) {
         if (container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
             if (mHotseat != null) {
                 return mHotseat.getLayout();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3206,7 +3206,7 @@ boolean isHotseatLayout(View layout) {
     /**
      * Returns the CellLayout of the specified container at the specified screen.
      */
-    CellLayout getCellLayout(long container, long screenId) {
+    public CellLayout getCellLayout(long container, long screenId) {
         if (container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
             if (mHotseat != null) {
                 return mHotseat.getLayout();

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -151,7 +151,7 @@ public Uri insert(Uri uri, ContentValues initialValues) {
         SQLiteDatabase db = mOpenHelper.getWritableDatabase();
         addModifiedTime(initialValues);
         final long rowId = dbInsertAndCheck(mOpenHelper, db, args.table, null, initialValues);
-        if (rowId <= 0) return null;
+        if (rowId < 0) return null;
 
         uri = ContentUris.withAppendedId(uri, rowId);
         sendNotify(uri);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -151,7 +151,7 @@ public Uri insert(Uri uri, ContentValues initialValues) {
         SQLiteDatabase db = mOpenHelper.getWritableDatabase();
         addModifiedTime(initialValues);
         final long rowId = dbInsertAndCheck(mOpenHelper, db, args.table, null, initialValues);
-        if (rowId <= 0) return null;
+        if (rowId < 0) return null;
 
         uri = ContentUris.withAppendedId(uri, rowId);
         sendNotify(uri);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -153,7 +153,7 @@ public Uri insert(Uri uri, ContentValues initialValues) {
         SQLiteDatabase db = mOpenHelper.getWritableDatabase();
         addModifiedTime(initialValues);
         final long rowId = dbInsertAndCheck(mOpenHelper, db, args.table, null, initialValues);
-        if (rowId <= 0) return null;
+        if (rowId < 0) return null;
 
         uri = ContentUris.withAppendedId(uri, rowId);
         sendNotify(uri);

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/GLES20Canvas.java
Patch:
@@ -696,6 +696,7 @@ private ShaderParameter[] prepareTexture(BasicTexture texture) {
     }
 
     private void prepareTexture(BasicTexture texture, int program, ShaderParameter[] params) {
+        deleteRecycledResources();
         GLES20.glUseProgram(program);
         checkError();
         enableBlending(!texture.isOpaque() || getAlpha() < OPAQUE_ALPHA);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4231,6 +4231,9 @@ public void run() {
         mDragInfo = null;
     }
 
+    /**
+     * For opposite operation. See {@link #addInScreen}.
+     */
     public void removeWorkspaceItem(View v) {
         CellLayout parentCell = getParentCellLayoutForView(v);
         if (parentCell != null) {

File: WallpaperPicker/src/com/android/gallery3d/glrenderer/GLES20Canvas.java
Patch:
@@ -696,6 +696,7 @@ private ShaderParameter[] prepareTexture(BasicTexture texture) {
     }
 
     private void prepareTexture(BasicTexture texture, int program, ShaderParameter[] params) {
+        deleteRecycledResources();
         GLES20.glUseProgram(program);
         checkError();
         enableBlending(!texture.isOpaque() || getAlpha() < OPAQUE_ALPHA);

File: WallpaperPicker/src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -122,8 +122,8 @@ public void onClick(WallpaperPickerActivity a) {
             Intent preview = new Intent(WallpaperManager.ACTION_CHANGE_LIVE_WALLPAPER);
             preview.putExtra(WallpaperManager.EXTRA_LIVE_WALLPAPER_COMPONENT,
                     mInfo.getComponent());
-            a.onLiveWallpaperPickerLaunch(mInfo);
-            a.startActivityForResultSafely(preview, WallpaperPickerActivity.PICK_LIVE_WALLPAPER);
+            a.startActivityForResultSafely(preview,
+                    WallpaperPickerActivity.PICK_WALLPAPER_THIRD_PARTY_ACTIVITY);
         }
     }
 

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -145,9 +145,9 @@ public void cancelLongPress() {
     @Override
     public AppWidgetProviderInfo getAppWidgetInfo() {
         AppWidgetProviderInfo info = super.getAppWidgetInfo();
-        if (!(info instanceof LauncherAppWidgetProviderInfo)) {
+        if (info != null && !(info instanceof LauncherAppWidgetProviderInfo)) {
             throw new IllegalStateException("Launcher widget must have"
-                    + "LauncherAppWidgetProviderInfo");
+                    + " LauncherAppWidgetProviderInfo");
         }
         return info;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3151,9 +3151,8 @@ public void onDrop(final DragObject d) {
                         // in its final location
 
                         final LauncherAppWidgetHostView hostView = (LauncherAppWidgetHostView) cell;
-                        LauncherAppWidgetProviderInfo pInfo = (LauncherAppWidgetProviderInfo)
-                                hostView.getAppWidgetInfo();
-                        if (pInfo.resizeMode != AppWidgetProviderInfo.RESIZE_NONE) {
+                        AppWidgetProviderInfo pInfo = hostView.getAppWidgetInfo();
+                        if (pInfo != null && pInfo.resizeMode != AppWidgetProviderInfo.RESIZE_NONE) {
                             final Runnable addResizeFrame = new Runnable() {
                                 public void run() {
                                     DragLayer dragLayer = mLauncher.getDragLayer();

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -145,9 +145,9 @@ public void cancelLongPress() {
     @Override
     public AppWidgetProviderInfo getAppWidgetInfo() {
         AppWidgetProviderInfo info = super.getAppWidgetInfo();
-        if (!(info instanceof LauncherAppWidgetProviderInfo)) {
+        if (info != null && !(info instanceof LauncherAppWidgetProviderInfo)) {
             throw new IllegalStateException("Launcher widget must have"
-                    + "LauncherAppWidgetProviderInfo");
+                    + " LauncherAppWidgetProviderInfo");
         }
         return info;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3177,9 +3177,8 @@ public void onDrop(final DragObject d) {
                         // in its final location
 
                         final LauncherAppWidgetHostView hostView = (LauncherAppWidgetHostView) cell;
-                        LauncherAppWidgetProviderInfo pInfo = (LauncherAppWidgetProviderInfo)
-                                hostView.getAppWidgetInfo();
-                        if (pInfo.resizeMode != AppWidgetProviderInfo.RESIZE_NONE) {
+                        AppWidgetProviderInfo pInfo = hostView.getAppWidgetInfo();
+                        if (pInfo != null && pInfo.resizeMode != AppWidgetProviderInfo.RESIZE_NONE) {
                             final Runnable addResizeFrame = new Runnable() {
                                 public void run() {
                                     DragLayer dragLayer = mLauncher.getDragLayer();

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -145,9 +145,9 @@ public void cancelLongPress() {
     @Override
     public AppWidgetProviderInfo getAppWidgetInfo() {
         AppWidgetProviderInfo info = super.getAppWidgetInfo();
-        if (!(info instanceof LauncherAppWidgetProviderInfo)) {
+        if (info != null && !(info instanceof LauncherAppWidgetProviderInfo)) {
             throw new IllegalStateException("Launcher widget must have"
-                    + "LauncherAppWidgetProviderInfo");
+                    + " LauncherAppWidgetProviderInfo");
         }
         return info;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3166,9 +3166,8 @@ public void onDrop(final DragObject d) {
                         // in its final location
 
                         final LauncherAppWidgetHostView hostView = (LauncherAppWidgetHostView) cell;
-                        LauncherAppWidgetProviderInfo pInfo = (LauncherAppWidgetProviderInfo)
-                                hostView.getAppWidgetInfo();
-                        if (pInfo.resizeMode != AppWidgetProviderInfo.RESIZE_NONE) {
+                        AppWidgetProviderInfo pInfo = hostView.getAppWidgetInfo();
+                        if (pInfo != null && pInfo.resizeMode != AppWidgetProviderInfo.RESIZE_NONE) {
                             final Runnable addResizeFrame = new Runnable() {
                                 public void run() {
                                     DragLayer dragLayer = mLauncher.getDragLayer();

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -500,10 +500,9 @@ public void onChanged() {
         if (lastPhoto != null) {
             ImageView galleryThumbnailBg =
                     (ImageView) pickImageTile.findViewById(R.id.wallpaper_image);
-            galleryThumbnailBg.setImageBitmap(getThumbnailOfLastPhoto());
+            galleryThumbnailBg.setImageBitmap(lastPhoto);
             int colorOverlay = getResources().getColor(R.color.wallpaper_picker_translucent_gray);
             galleryThumbnailBg.setColorFilter(colorOverlay, PorterDuff.Mode.SRC_ATOP);
-
         }
 
         PickImageInfo pickImageInfo = new PickImageInfo();

File: WallpaperPicker/src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -122,8 +122,8 @@ public void onClick(WallpaperPickerActivity a) {
             Intent preview = new Intent(WallpaperManager.ACTION_CHANGE_LIVE_WALLPAPER);
             preview.putExtra(WallpaperManager.EXTRA_LIVE_WALLPAPER_COMPONENT,
                     mInfo.getComponent());
-            a.onLiveWallpaperPickerLaunch(mInfo);
-            a.startActivityForResultSafely(preview, WallpaperPickerActivity.PICK_LIVE_WALLPAPER);
+            a.startActivityForResultSafely(preview,
+                    WallpaperPickerActivity.PICK_WALLPAPER_THIRD_PARTY_ACTIVITY);
         }
     }
 

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -500,10 +500,9 @@ public void onChanged() {
         if (lastPhoto != null) {
             ImageView galleryThumbnailBg =
                     (ImageView) pickImageTile.findViewById(R.id.wallpaper_image);
-            galleryThumbnailBg.setImageBitmap(getThumbnailOfLastPhoto());
+            galleryThumbnailBg.setImageBitmap(lastPhoto);
             int colorOverlay = getResources().getColor(R.color.wallpaper_picker_translucent_gray);
             galleryThumbnailBg.setColorFilter(colorOverlay, PorterDuff.Mode.SRC_ATOP);
-
         }
 
         PickImageInfo pickImageInfo = new PickImageInfo();

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -620,7 +620,8 @@ private boolean updateFolderItemsRank(SQLiteDatabase db, boolean addRankColumn)
                         new String[] {Integer.toString(LauncherSettings.Favorites.ITEM_TYPE_FOLDER)});
 
                 while (c.moveToNext()) {
-                    db.execSQL("UPDATE favorites SET rank=cellX+(cellY*?) WHERE container=?;",
+                    db.execSQL("UPDATE favorites SET rank=cellX+(cellY*?) WHERE "
+                            + "container=? AND cellX IS NOT NULL AND cellY IS NOT NULL;",
                             new Object[] {c.getLong(1) + 1, c.getLong(0)});
                 }
 

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -638,7 +638,8 @@ private boolean updateFolderItemsRank(SQLiteDatabase db, boolean addRankColumn)
                         new String[] {Integer.toString(LauncherSettings.Favorites.ITEM_TYPE_FOLDER)});
 
                 while (c.moveToNext()) {
-                    db.execSQL("UPDATE favorites SET rank=cellX+(cellY*?) WHERE container=?;",
+                    db.execSQL("UPDATE favorites SET rank=cellX+(cellY*?) WHERE "
+                            + "container=? AND cellX IS NOT NULL AND cellY IS NOT NULL;",
                             new Object[] {c.getLong(1) + 1, c.getLong(0)});
                 }
 

File: src/com/android/launcher3/UninstallShortcutReceiver.java
Patch:
@@ -104,7 +104,9 @@ private static void removeShortcut(Context context, Intent data) {
             try {
                 while (c.moveToNext()) {
                     try {
-                        if (intent.filterEquals(Intent.parseUri(c.getString(intentIndex), 0))) {
+                        String intentStr = c.getString(intentIndex);
+                        if (intentStr != null
+                                && intent.filterEquals(Intent.parseUri(intentStr, 0))) {
                             final long id = c.getLong(idIndex);
                             final Uri uri = LauncherSettings.Favorites.getContentUri(id, false);
                             cr.delete(uri, null, null);

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -108,7 +108,7 @@ public static boolean isRotationEnabled(Context c) {
      * Indicates if the device is running LMP or higher.
      */
     public static boolean isLmpOrAbove() {
-        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.L;
+        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;
     }
 
     /**

File: src/com/android/launcher3/compat/AppWidgetManagerCompatVL.java
Patch:
@@ -43,7 +43,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@TargetApi(Build.VERSION_CODES.L)
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 class AppWidgetManagerCompatVL extends AppWidgetManagerCompat {
 
     private final UserManager mUserManager;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3868,7 +3868,7 @@ public final int compare(Object a, Object b) {
                 labelB = mLabelCache.get(b);
             } else {
                 labelB = (b instanceof LauncherAppWidgetProviderInfo)
-                        ? mManager.loadLabel((LauncherAppWidgetProviderInfo) a)
+                        ? mManager.loadLabel((LauncherAppWidgetProviderInfo) b)
                         : ((ResolveInfo) b).loadLabel(mPackageManager).toString().trim();
                 mLabelCache.put(b, labelB);
             }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3859,7 +3859,7 @@ public final int compare(Object a, Object b) {
                 labelB = mLabelCache.get(b);
             } else {
                 labelB = (b instanceof LauncherAppWidgetProviderInfo)
-                        ? mManager.loadLabel((LauncherAppWidgetProviderInfo) a)
+                        ? mManager.loadLabel((LauncherAppWidgetProviderInfo) b)
                         : ((ResolveInfo) b).loadLabel(mPackageManager).toString().trim();
                 mLabelCache.put(b, labelB);
             }

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -86,7 +86,7 @@ public class LauncherProvider extends ContentProvider {
     @Override
     public boolean onCreate() {
         final Context context = getContext();
-        StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskReads();
+        StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskWrites();
         mOpenHelper = new DatabaseHelper(context);
         StrictMode.setThreadPolicy(oldPolicy);
         LauncherAppState.setLauncherProvider(this);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -36,6 +36,7 @@
 import android.database.sqlite.SQLiteOpenHelper;
 import android.database.sqlite.SQLiteQueryBuilder;
 import android.net.Uri;
+import android.os.StrictMode;
 import android.text.TextUtils;
 import android.util.Log;
 import android.util.SparseArray;
@@ -85,7 +86,9 @@ public class LauncherProvider extends ContentProvider {
     @Override
     public boolean onCreate() {
         final Context context = getContext();
+        StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskReads();
         mOpenHelper = new DatabaseHelper(context);
+        StrictMode.setThreadPolicy(oldPolicy);
         LauncherAppState.setLauncherProvider(this);
         return true;
     }

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -127,6 +127,7 @@ public FolderIcon(Context context) {
 
     private void init() {
         mLongPressHelper = new CheckLongPressHelper(this);
+        setAccessibilityDelegate(LauncherAppState.getInstance().getAccessibilityDelegate());
     }
 
     public boolean isDropEnabled() {

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -48,6 +48,7 @@ public LauncherAppWidgetHostView(Context context) {
         mLongPressHelper = new CheckLongPressHelper(this);
         mInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
         mDragLayer = ((Launcher) context).getDragLayer();
+        setAccessibilityDelegate(LauncherAppState.getInstance().getAccessibilityDelegate());
     }
 
     @Override

File: src/com/android/launcher3/PagedViewWidget.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.android.launcher3;
 
-import android.appwidget.AppWidgetProviderInfo;
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
@@ -67,6 +66,7 @@ public PagedViewWidget(Context context, AttributeSet attrs, int defStyle) {
 
         setWillNotDraw(false);
         setClipToPadding(false);
+        setAccessibilityDelegate(LauncherAppState.getInstance().getAccessibilityDelegate());
     }
 
     @Override

File: src/com/android/launcher3/PreloadIconDrawable.java
Patch:
@@ -54,12 +54,11 @@ public PreloadIconDrawable(Drawable icon, Theme theme) {
         mPaint.setStrokeCap(Paint.Cap.ROUND);
 
         setBounds(icon.getBounds());
-        applyTheme(theme);
+        applyPreloaderTheme(theme);
         onLevelChange(0);
     }
 
-    @Override
-    public void applyTheme(Theme t) {
+    public void applyPreloaderTheme(Theme t) {
         TypedArray ta = t.obtainStyledAttributes(R.styleable.PreloadIconDrawable);
         mBgDrawable = ta.getDrawable(R.styleable.PreloadIconDrawable_background);
         mBgDrawable.setFilterBitmap(true);

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -19,7 +19,6 @@
 import android.app.backup.BackupDataOutput;
 import android.app.backup.BackupHelper;
 import android.app.backup.BackupManager;
-import android.appwidget.AppWidgetManager;
 import android.appwidget.AppWidgetProviderInfo;
 import android.content.ComponentName;
 import android.content.ContentResolver;
@@ -60,7 +59,6 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.HashSet;
-import java.util.List;
 import java.util.zip.CRC32;
 
 /**
@@ -148,6 +146,7 @@ public class LauncherBackupHelper implements BackupHelper {
 
     private DeviceProfieData mCurrentProfile;
     boolean restoreSuccessful;
+    int restoredBackupVersion = 1;
 
     public LauncherBackupHelper(Context context) {
         mContext = context;
@@ -299,6 +298,7 @@ public void restoreEntity(BackupDataInputStream data) {
                 MessageNano.mergeFrom(journal, readCheckedBytes(mBuffer, dataSize));
                 applyJournal(journal);
                 restoreSuccessful = isBackupCompatible(journal);
+                restoredBackupVersion = journal.backupVersion;
                 return;
             }
 

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -108,7 +108,7 @@ public static boolean isRotationEnabled(Context c) {
      * Indicates if the device is running LMP or higher.
      */
     public static boolean isLmpOrAbove() {
-        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.L;
+        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;
     }
 
     /**

File: src/com/android/launcher3/compat/AppWidgetManagerCompatVL.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@TargetApi(Build.VERSION_CODES.L)
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 class AppWidgetManagerCompatVL extends AppWidgetManagerCompat {
 
     private final UserManager mUserManager;

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -193,7 +193,7 @@ static void flushInstallQueue(Context context) {
 
                 // If the intent specifies a package, make sure the package exists
                 String packageName = pendingInfo.getTargetPackage();
-                if (TextUtils.isEmpty(packageName)) {
+                if (!TextUtils.isEmpty(packageName)) {
                     UserHandleCompat myUserHandle = UserHandleCompat.myUserHandle();
                     if (!LauncherModel.isValidPackage(context, packageName, myUserHandle)) {
                         if (DBG) Log.d(TAG, "Ignoring shortcut for absent package:" + intent);

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -193,7 +193,7 @@ static void flushInstallQueue(Context context) {
 
                 // If the intent specifies a package, make sure the package exists
                 String packageName = pendingInfo.getTargetPackage();
-                if (TextUtils.isEmpty(packageName)) {
+                if (!TextUtils.isEmpty(packageName)) {
                     UserHandleCompat myUserHandle = UserHandleCompat.myUserHandle();
                     if (!LauncherModel.isValidPackage(context, packageName, myUserHandle)) {
                         if (DBG) Log.d(TAG, "Ignoring shortcut for absent package:" + intent);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3815,10 +3815,9 @@ public void onTrimMemory(int level) {
             // 3MB of memory for caching which isn't necessary.
             SQLiteDatabase.releaseMemory();
 
-            // We reset the apps customize tray in order to
-            // to free all the memory associated with widget previews
+            // This clears all widget bitmaps from the widget tray
             if (mAppsCustomizeTabHost != null) {
-                mAppsCustomizeTabHost.reset();
+                mAppsCustomizeTabHost.trimMemory();
             }
         }
     }

File: src/com/android/launcher3/PagedViewWithDraggableItems.java
Patch:
@@ -91,7 +91,7 @@ public boolean onTouchEvent(MotionEvent ev) {
         return super.onTouchEvent(ev);
     }
 
-    public void reset() {
+    public void trimMemory() {
         mLastTouchedItem = null;
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3815,10 +3815,9 @@ public void onTrimMemory(int level) {
             // 3MB of memory for caching which isn't necessary.
             SQLiteDatabase.releaseMemory();
 
-            // We reset the apps customize tray in order to
-            // to free all the memory associated with widget previews
+            // This clears all widget bitmaps from the widget tray
             if (mAppsCustomizeTabHost != null) {
-                mAppsCustomizeTabHost.reset();
+                mAppsCustomizeTabHost.trimMemory();
             }
         }
     }

File: src/com/android/launcher3/PagedViewWithDraggableItems.java
Patch:
@@ -91,7 +91,7 @@ public boolean onTouchEvent(MotionEvent ev) {
         return super.onTouchEvent(ev);
     }
 
-    public void reset() {
+    public void trimMemory() {
         mLastTouchedItem = null;
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3960,11 +3960,11 @@ public View getQsbBar() {
             SharedPreferences sp = getSharedPreferences(
                     LauncherAppState.getSharedPreferencesKey(), MODE_PRIVATE);
             int widgetId = sp.getInt(QSB_WIDGET_ID, -1);
+            AppWidgetProviderInfo widgetInfo = mAppWidgetManager.getAppWidgetInfo(widgetId);
             if (!searchProvider.provider.flattenToString().equals(
                     sp.getString(QSB_WIDGET_PROVIDER, null))
-                    || (widgetId == -1)
-                    || !mAppWidgetManager.getAppWidgetInfo(widgetId).provider
-                        .equals(searchProvider.provider)) {
+                    || (widgetInfo == null)
+                    || !widgetInfo.provider.equals(searchProvider.provider)) {
                 // A valid widget is not already bound.
                 if (widgetId > -1) {
                     mAppWidgetHost.deleteAppWidgetId(widgetId);

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -388,6 +388,9 @@ private static PendingInstallShortcutInfo decode(String encoded, Context context
                 // The is an internal launcher target shortcut.
                 UserHandleCompat user = UserManagerCompat.getInstance(context)
                         .getUserForSerialNumber(object.getLong(USER_HANDLE_KEY));
+                if (user == null) {
+                    return null;
+                }
 
                 LauncherActivityInfoCompat info = LauncherAppsCompat.getInstance(context)
                         .resolveActivity(launcherIntent, user);

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -388,6 +388,9 @@ private static PendingInstallShortcutInfo decode(String encoded, Context context
                 // The is an internal launcher target shortcut.
                 UserHandleCompat user = UserManagerCompat.getInstance(context)
                         .getUserForSerialNumber(object.getLong(USER_HANDLE_KEY));
+                if (user == null) {
+                    return null;
+                }
 
                 LauncherActivityInfoCompat info = LauncherAppsCompat.getInstance(context)
                         .resolveActivity(launcherIntent, user);

File: src/com/android/launcher3/PagedViewWidgetImageView.java
Patch:
@@ -21,7 +21,7 @@
 import android.util.AttributeSet;
 import android.widget.ImageView;
 
-class PagedViewWidgetImageView extends ImageView {
+public class PagedViewWidgetImageView extends ImageView {
     public boolean mAllowRequestLayout = true;
 
     public PagedViewWidgetImageView(Context context, AttributeSet attrs) {

File: src/com/android/launcher3/PagedViewWidgetImageView.java
Patch:
@@ -21,7 +21,7 @@
 import android.util.AttributeSet;
 import android.widget.ImageView;
 
-class PagedViewWidgetImageView extends ImageView {
+public class PagedViewWidgetImageView extends ImageView {
     public boolean mAllowRequestLayout = true;
 
     public PagedViewWidgetImageView(Context context, AttributeSet attrs) {

File: src/com/android/launcher3/PagedViewWidgetImageView.java
Patch:
@@ -21,7 +21,7 @@
 import android.util.AttributeSet;
 import android.widget.ImageView;
 
-class PagedViewWidgetImageView extends ImageView {
+public class PagedViewWidgetImageView extends ImageView {
     public boolean mAllowRequestLayout = true;
 
     public PagedViewWidgetImageView(Context context, AttributeSet attrs) {

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -1476,7 +1476,9 @@ public void updateApps(ArrayList<AppInfo> list) {
         }
     }
 
+    @Override
     public void reset() {
+        super.reset();
         // If we have reset, then we should not continue to restore the previous state
         mSaveInstanceStateItemIndex = -1;
 

File: src/com/android/launcher3/InsettableFrameLayout.java
Patch:
@@ -63,7 +63,7 @@ protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) {
         return new LayoutParams(p);
     }
 
-    class LayoutParams extends FrameLayout.LayoutParams {
+    public static class LayoutParams extends FrameLayout.LayoutParams {
         boolean ignoreInsets = false;
 
         public LayoutParams(Context c, AttributeSet attrs) {

File: src/com/android/launcher3/InsettableFrameLayout.java
Patch:
@@ -63,7 +63,7 @@ protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) {
         return new LayoutParams(p);
     }
 
-    class LayoutParams extends FrameLayout.LayoutParams {
+    public static class LayoutParams extends FrameLayout.LayoutParams {
         boolean ignoreInsets = false;
 
         public LayoutParams(Context c, AttributeSet attrs) {

File: src/com/android/launcher3/InsettableFrameLayout.java
Patch:
@@ -63,7 +63,7 @@ protected LayoutParams generateLayoutParams(ViewGroup.LayoutParams p) {
         return new LayoutParams(p);
     }
 
-    class LayoutParams extends FrameLayout.LayoutParams {
+    public static class LayoutParams extends FrameLayout.LayoutParams {
         boolean ignoreInsets = false;
 
         public LayoutParams(Context c, AttributeSet attrs) {

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -638,7 +638,7 @@ private Bitmap generateShortcutPreview(
             c.setBitmap(null);
         }
         // Render the icon
-        Drawable icon = mutateOnMainThread(mIconCache.getFullResIcon(info));
+        Drawable icon = mutateOnMainThread(mIconCache.getFullResIcon(info.activityInfo));
 
         int paddingTop = mContext.
                 getResources().getDimensionPixelOffset(R.dimen.shortcut_preview_padding_top);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1291,6 +1291,7 @@ private boolean initializeExternalAdd(ContentValues values) {
                         int appWidgetId = mAppWidgetHost.allocateAppWidgetId();
                         values.put(LauncherSettings.Favorites.APPWIDGET_ID, appWidgetId);
                         if (!appWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId,cn)) {
+                            return false;
                         }
                     } catch (RuntimeException e) {
                         Log.e(TAG, "Failed to initialize external widget", e);

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -354,7 +354,7 @@ private void restoreFavorite(Key key, byte[] buffer, int dataSize, ArrayList<Key
         try {
             ContentResolver cr = mContext.getContentResolver();
             ContentValues values = unpackFavorite(buffer, 0, dataSize);
-            cr.insert(Favorites.CONTENT_URI, values);
+            cr.insert(Favorites.CONTENT_URI_NO_NOTIFICATION, values);
         } catch (InvalidProtocolBufferNanoException e) {
             Log.e(TAG, "failed to decode favorite", e);
         }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -174,7 +174,7 @@ public Bitmap getIcon(IconCache iconCache) {
     }
 
     public void updateIcon(IconCache iconCache) {
-        mIcon = iconCache.getIcon(intent, user);
+        mIcon = iconCache.getIcon(promisedIntent != null ? promisedIntent : intent, user);
         usingFallbackIcon = iconCache.isDefaultIcon(mIcon, user);
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -73,6 +73,7 @@
 import android.text.method.TextKeyListener;
 import android.util.DisplayMetrics;
 import android.util.Log;
+import android.view.ContextThemeWrapper;
 import android.view.Display;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
@@ -2555,7 +2556,7 @@ protected void onClickAllAppsButton(View v) {
 
     private void showBrokenAppInstallDialog(final String packageName,
             DialogInterface.OnClickListener onSearchClickListener) {
-        new AlertDialog.Builder(this)
+        new AlertDialog.Builder(new ContextThemeWrapper(this, android.R.style.Theme_DeviceDefault))
             .setTitle(R.string.abandoned_promises_title)
             .setMessage(R.string.abandoned_promise_explanation)
             .setPositiveButton(R.string.abandoned_search, onSearchClickListener)

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1291,6 +1291,7 @@ private boolean initializeExternalAdd(ContentValues values) {
                         int appWidgetId = mAppWidgetHost.allocateAppWidgetId();
                         values.put(LauncherSettings.Favorites.APPWIDGET_ID, appWidgetId);
                         if (!appWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId,cn)) {
+                            return false;
                         }
                     } catch (RuntimeException e) {
                         Log.e(TAG, "Failed to initialize external widget", e);

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -354,7 +354,7 @@ private void restoreFavorite(Key key, byte[] buffer, int dataSize, ArrayList<Key
         try {
             ContentResolver cr = mContext.getContentResolver();
             ContentValues values = unpackFavorite(buffer, 0, dataSize);
-            cr.insert(Favorites.CONTENT_URI, values);
+            cr.insert(Favorites.CONTENT_URI_NO_NOTIFICATION, values);
         } catch (InvalidProtocolBufferNanoException e) {
             Log.e(TAG, "failed to decode favorite", e);
         }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -174,7 +174,7 @@ public Bitmap getIcon(IconCache iconCache) {
     }
 
     public void updateIcon(IconCache iconCache) {
-        mIcon = iconCache.getIcon(intent, user);
+        mIcon = iconCache.getIcon(promisedIntent != null ? promisedIntent : intent, user);
         usingFallbackIcon = iconCache.isDefaultIcon(mIcon, user);
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -73,6 +73,7 @@
 import android.text.method.TextKeyListener;
 import android.util.DisplayMetrics;
 import android.util.Log;
+import android.view.ContextThemeWrapper;
 import android.view.Display;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
@@ -2555,7 +2556,7 @@ protected void onClickAllAppsButton(View v) {
 
     private void showBrokenAppInstallDialog(final String packageName,
             DialogInterface.OnClickListener onSearchClickListener) {
-        new AlertDialog.Builder(this)
+        new AlertDialog.Builder(new ContextThemeWrapper(this, android.R.style.Theme_DeviceDefault))
             .setTitle(R.string.abandoned_promises_title)
             .setMessage(R.string.abandoned_promise_explanation)
             .setPositiveButton(R.string.abandoned_search, onSearchClickListener)

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1291,6 +1291,7 @@ private boolean initializeExternalAdd(ContentValues values) {
                         int appWidgetId = mAppWidgetHost.allocateAppWidgetId();
                         values.put(LauncherSettings.Favorites.APPWIDGET_ID, appWidgetId);
                         if (!appWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId,cn)) {
+                            return false;
                         }
                     } catch (RuntimeException e) {
                         Log.e(TAG, "Failed to initialize external widget", e);

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -354,7 +354,7 @@ private void restoreFavorite(Key key, byte[] buffer, int dataSize, ArrayList<Key
         try {
             ContentResolver cr = mContext.getContentResolver();
             ContentValues values = unpackFavorite(buffer, 0, dataSize);
-            cr.insert(Favorites.CONTENT_URI, values);
+            cr.insert(Favorites.CONTENT_URI_NO_NOTIFICATION, values);
         } catch (InvalidProtocolBufferNanoException e) {
             Log.e(TAG, "failed to decode favorite", e);
         }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -174,7 +174,7 @@ public Bitmap getIcon(IconCache iconCache) {
     }
 
     public void updateIcon(IconCache iconCache) {
-        mIcon = iconCache.getIcon(intent, user);
+        mIcon = iconCache.getIcon(promisedIntent != null ? promisedIntent : intent, user);
         usingFallbackIcon = iconCache.isDefaultIcon(mIcon, user);
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -73,6 +73,7 @@
 import android.text.method.TextKeyListener;
 import android.util.DisplayMetrics;
 import android.util.Log;
+import android.view.ContextThemeWrapper;
 import android.view.Display;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
@@ -2555,7 +2556,7 @@ protected void onClickAllAppsButton(View v) {
 
     private void showBrokenAppInstallDialog(final String packageName,
             DialogInterface.OnClickListener onSearchClickListener) {
-        new AlertDialog.Builder(this)
+        new AlertDialog.Builder(new ContextThemeWrapper(this, android.R.style.Theme_DeviceDefault))
             .setTitle(R.string.abandoned_promises_title)
             .setMessage(R.string.abandoned_promise_explanation)
             .setPositiveButton(R.string.abandoned_search, onSearchClickListener)

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4993,7 +4993,7 @@ private void showFirstRunClings() {
             if (mModel.canMigrateFromOldLauncherDb(this)) {
                 launcherClings.showMigrationCling();
             } else {
-                launcherClings.showLongPressCling(false);
+                launcherClings.showLongPressCling(true);
             }
         }
     }

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1291,6 +1291,7 @@ private boolean initializeExternalAdd(ContentValues values) {
                         int appWidgetId = mAppWidgetHost.allocateAppWidgetId();
                         values.put(LauncherSettings.Favorites.APPWIDGET_ID, appWidgetId);
                         if (!appWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId,cn)) {
+                            return false;
                         }
                     } catch (RuntimeException e) {
                         Log.e(TAG, "Failed to initialize external widget", e);

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -354,7 +354,7 @@ private void restoreFavorite(Key key, byte[] buffer, int dataSize, ArrayList<Key
         try {
             ContentResolver cr = mContext.getContentResolver();
             ContentValues values = unpackFavorite(buffer, 0, dataSize);
-            cr.insert(Favorites.CONTENT_URI, values);
+            cr.insert(Favorites.CONTENT_URI_NO_NOTIFICATION, values);
         } catch (InvalidProtocolBufferNanoException e) {
             Log.e(TAG, "failed to decode favorite", e);
         }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -174,7 +174,7 @@ public Bitmap getIcon(IconCache iconCache) {
     }
 
     public void updateIcon(IconCache iconCache) {
-        mIcon = iconCache.getIcon(intent, user);
+        mIcon = iconCache.getIcon(promisedIntent != null ? promisedIntent : intent, user);
         usingFallbackIcon = iconCache.isDefaultIcon(mIcon, user);
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -73,6 +73,7 @@
 import android.text.method.TextKeyListener;
 import android.util.DisplayMetrics;
 import android.util.Log;
+import android.view.ContextThemeWrapper;
 import android.view.Display;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
@@ -2555,7 +2556,7 @@ protected void onClickAllAppsButton(View v) {
 
     private void showBrokenAppInstallDialog(final String packageName,
             DialogInterface.OnClickListener onSearchClickListener) {
-        new AlertDialog.Builder(this)
+        new AlertDialog.Builder(new ContextThemeWrapper(this, android.R.style.Theme_DeviceDefault))
             .setTitle(R.string.abandoned_promises_title)
             .setMessage(R.string.abandoned_promise_explanation)
             .setPositiveButton(R.string.abandoned_search, onSearchClickListener)

File: src/com/android/launcher3/compat/AppWidgetManagerCompatVL.java
Patch:
@@ -43,7 +43,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@TargetApi(Build.VERSION_CODES.L)
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
 class AppWidgetManagerCompatVL extends AppWidgetManagerCompat {
 
     private final UserManager mUserManager;

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -106,7 +106,7 @@ public static boolean isRotationEnabled(Context c) {
      * Indicates if the device is running LMP or higher.
      */
     public static boolean isLmpOrAbove() {
-        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.L;
+        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;
     }
 
     /**

File: WallpaperPicker/src/com/android/launcher3/CropView.java
Patch:
@@ -21,7 +21,6 @@
 import android.graphics.Point;
 import android.graphics.RectF;
 import android.util.AttributeSet;
-import android.util.FloatMath;
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
 import android.view.ScaleGestureDetector.OnScaleGestureListener;
@@ -300,12 +299,12 @@ public boolean onTouchEvent(MotionEvent event) {
                     adjustment[0] = (edges.right - getWidth()) / scale;
                 }
                 if (edges.top > 0) {
-                    adjustment[1] = FloatMath.ceil(edges.top / scale);
+                    adjustment[1] = (float) Math.ceil(edges.top / scale);
                 } else if (edges.bottom < getHeight()) {
                     adjustment[1] = (edges.bottom - getHeight()) / scale;
                 }
                 for (int dim = 0; dim <= 1; dim++) {
-                    if (coef[dim] > 0) adjustment[dim] = FloatMath.ceil(adjustment[dim]);
+                    if (coef[dim] > 0) adjustment[dim] = (float) Math.ceil(adjustment[dim]);
                 }
 
                 mInverseRotateMatrix.mapPoints(adjustment);

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -385,8 +385,7 @@ void updateFromConfiguration(Context context, Resources resources, int wPx, int
     }
 
     private float dist(PointF p0, PointF p1) {
-        return (float) Math.sqrt((p1.x - p0.x)*(p1.x-p0.x) +
-                (p1.y-p0.y)*(p1.y-p0.y));
+        return (float) Math.hypot(p1.x - p0.x, p1.y-p0.y);
     }
 
     private float weight(PointF a, PointF b,

File: src/com/android/launcher3/DragController.java
Patch:
@@ -488,8 +488,7 @@ private void handleMoveEvent(int x, int y) {
         checkTouchMove(dropTarget);
 
         // Check if we are hovering over the scroll areas
-        mDistanceSinceScroll +=
-            Math.sqrt(Math.pow(mLastTouch[0] - x, 2) + Math.pow(mLastTouch[1] - y, 2));
+        mDistanceSinceScroll += Math.hypot(mLastTouch[0] - x, mLastTouch[1] - y);
         mLastTouch[0] = x;
         mLastTouch[1] = y;
         checkScrollState(x, y);

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -612,8 +612,7 @@ public void animateView(final DragView view, final Rect from, final Rect to,
             final Runnable onCompleteRunnable, final int animationEndStyle, View anchorView) {
 
         // Calculate the duration of the animation based on the object's distance
-        final float dist = (float) Math.sqrt(Math.pow(to.left - from.left, 2) +
-                Math.pow(to.top - from.top, 2));
+        final float dist = (float) Math.hypot(to.left - from.left, to.top - from.top);
         final Resources res = getResources();
         final float maxDist = (float) res.getInteger(R.integer.config_dropAnimMaxDist);
 

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -637,8 +637,8 @@ private static View getClosestIconOnLine(CellLayout layout, ViewGroup parent, Vi
                 boolean satisfiesRow = (lineDelta < 0) ? (tmpLp.cellY < row) : (tmpLp.cellY > row);
                 if (satisfiesRow &&
                         (newV instanceof BubbleTextView || newV instanceof FolderIcon)) {
-                    float tmpDistance = (float) Math.sqrt(Math.pow(tmpLp.cellX - lp.cellX, 2) +
-                            Math.pow(tmpLp.cellY - lp.cellY, 2));
+                    float tmpDistance = (float) Math.hypot(
+                            tmpLp.cellX - lp.cellX, tmpLp.cellY - lp.cellY);
                     if (tmpDistance < closestDistance) {
                         closestIndex = index;
                         closestDistance = tmpDistance;

File: src/com/android/launcher3/LauncherScroller.java
Patch:
@@ -20,7 +20,6 @@
 import android.content.Context;
 import android.hardware.SensorManager;
 import android.os.Build;
-import android.util.FloatMath;
 import android.view.ViewConfiguration;
 import android.view.animation.AnimationUtils;
 import android.view.animation.Interpolator;
@@ -409,7 +408,7 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
 
             float dx = (float) (mFinalX - mStartX);
             float dy = (float) (mFinalY - mStartY);
-            float hyp = FloatMath.sqrt(dx * dx + dy * dy);
+            float hyp = (float) Math.hypot(dx, dy);
 
             float ndx = dx / hyp;
             float ndy = dy / hyp;
@@ -426,7 +425,7 @@ public void fling(int startX, int startY, int velocityX, int velocityY,
         mMode = FLING_MODE;
         mFinished = false;
 
-        float velocity = FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);
+        float velocity = (float) Math.hypot(velocityX, velocityY);
 
         mVelocity = velocity;
         mDuration = getSplineFlingDuration(velocity);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1369,9 +1369,6 @@ public void onClick(View arg0) {
             settingsButton.setOnTouchListener(getHapticFeedbackTouchListener());
         } else {
             settingsButton.setVisibility(View.GONE);
-            FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) widgetButton.getLayoutParams();
-            lp.gravity = Gravity.END | Gravity.TOP;
-            widgetButton.requestLayout();
         }
 
         mOverviewPanel.setAlpha(0f);

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -638,7 +638,7 @@ private Bitmap generateShortcutPreview(
             c.setBitmap(null);
         }
         // Render the icon
-        Drawable icon = mutateOnMainThread(mIconCache.getFullResIcon(info));
+        Drawable icon = mutateOnMainThread(mIconCache.getFullResIcon(info.activityInfo));
 
         int paddingTop = mContext.
                 getResources().getDimensionPixelOffset(R.dimen.shortcut_preview_padding_top);

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -728,7 +728,8 @@ private void endDragging(View target, boolean isFlingToDelete, boolean success)
                 !(target instanceof DeleteDropTarget) && !(target instanceof Folder))) {
             // Exit spring loaded mode if we have not successfully dropped or have not handled the
             // drop in Workspace
-            mLauncher.exitSpringLoadedDragMode();
+            mLauncher.exitSpringLoadedDragModeDelayed(true,
+                    Launcher.EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT, null);
             mLauncher.unlockScreenOrientation(false);
         } else {
             mLauncher.unlockScreenOrientation(false);

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2278,7 +2278,7 @@ private boolean loadWorkspace() {
                                             // App restore has started. Update the flag
                                             appWidgetInfo.restoreStatus |=
                                                     LauncherAppWidgetInfo.FLAG_RESTORE_STARTED;
-                                        } else if (REMOVE_UNRESTORED_ICONS) {
+                                        } else if (REMOVE_UNRESTORED_ICONS && !isSafeMode) {
                                             Launcher.addDumpLog(TAG,
                                                     "Unrestored widget removed: " + component, true);
                                             itemsToRemove.add(id);

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -202,7 +202,7 @@ public boolean enableRotation() {
     }
 
     public static String getSharedPreferencesKey() {
-        return WallpaperCropActivity.class.getName();
+        return LauncherFiles.WALLPAPER_CROP_PREFERENCES_KEY;
     }
 
     // As a ratio of screen height, the total distance we want the parallax effect to span

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -616,7 +616,7 @@ private static class LocaleConfiguration {
     private static void readConfiguration(Context context, LocaleConfiguration configuration) {
         DataInputStream in = null;
         try {
-            in = new DataInputStream(context.openFileInput(LauncherFiles.LAUNCHER_PREFS));
+            in = new DataInputStream(context.openFileInput(LauncherFiles.LAUNCHER_PREFERENCES));
             configuration.locale = in.readUTF();
             configuration.mcc = in.readInt();
             configuration.mnc = in.readInt();
@@ -639,7 +639,7 @@ private static void writeConfiguration(Context context, LocaleConfiguration conf
         DataOutputStream out = null;
         try {
             out = new DataOutputStream(context.openFileOutput(
-                    LauncherFiles.LAUNCHER_PREFS, MODE_PRIVATE));
+                    LauncherFiles.LAUNCHER_PREFERENCES, MODE_PRIVATE));
             out.writeUTF(configuration.locale);
             out.writeInt(configuration.mcc);
             out.writeInt(configuration.mnc);
@@ -648,7 +648,7 @@ private static void writeConfiguration(Context context, LocaleConfiguration conf
             // Ignore
         } catch (IOException e) {
             //noinspection ResultOfMethodCallIgnored
-            context.getFileStreamPath(LauncherFiles.LAUNCHER_PREFS).delete();
+            context.getFileStreamPath(LauncherFiles.LAUNCHER_PREFERENCES).delete();
         } finally {
             if (out != null) {
                 try {

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -36,7 +36,6 @@
 
 public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static final String TAG = "LauncherAppState";
-    private static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
 
     private static final boolean DEBUG = false;
 
@@ -186,7 +185,7 @@ static LauncherProvider getLauncherProvider() {
     }
 
     public static String getSharedPreferencesKey() {
-        return SHARED_PREFERENCES_KEY;
+        return LauncherFiles.SHARED_PREFERENCES_KEY;
     }
 
     DeviceProfile initDynamicGrid(Context context, int minWidth, int minHeight,

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1434,7 +1434,7 @@ private void completeAddShortcut(Intent data, long container, long screenId, int
 
         boolean foundCellSpan = false;
 
-        ShortcutInfo info = mModel.infoFromShortcutIntent(this, data, null);
+        ShortcutInfo info = mModel.infoFromShortcutIntent(this, data);
         if (info == null) {
             return;
         }

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1289,6 +1289,7 @@ private boolean initializeExternalAdd(ContentValues values) {
                         int appWidgetId = mAppWidgetHost.allocateAppWidgetId();
                         values.put(LauncherSettings.Favorites.APPWIDGET_ID, appWidgetId);
                         if (!appWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId,cn)) {
+                            return false;
                         }
                     } catch (RuntimeException e) {
                         Log.e(TAG, "Failed to initialize external widget", e);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1289,6 +1289,7 @@ private boolean initializeExternalAdd(ContentValues values) {
                         int appWidgetId = mAppWidgetHost.allocateAppWidgetId();
                         values.put(LauncherSettings.Favorites.APPWIDGET_ID, appWidgetId);
                         if (!appWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId,cn)) {
+                            return false;
                         }
                     } catch (RuntimeException e) {
                         Log.e(TAG, "Failed to initialize external widget", e);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1291,6 +1291,7 @@ private boolean initializeExternalAdd(ContentValues values) {
                         int appWidgetId = mAppWidgetHost.allocateAppWidgetId();
                         values.put(LauncherSettings.Favorites.APPWIDGET_ID, appWidgetId);
                         if (!appWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId,cn)) {
+                            return false;
                         }
                     } catch (RuntimeException e) {
                         Log.e(TAG, "Failed to initialize external widget", e);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1291,6 +1291,7 @@ private boolean initializeExternalAdd(ContentValues values) {
                         int appWidgetId = mAppWidgetHost.allocateAppWidgetId();
                         values.put(LauncherSettings.Favorites.APPWIDGET_ID, appWidgetId);
                         if (!appWidgetManager.bindAppWidgetIdIfAllowed(appWidgetId,cn)) {
+                            return false;
                         }
                     } catch (RuntimeException e) {
                         Log.e(TAG, "Failed to initialize external widget", e);

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -29,6 +29,7 @@
 import android.util.Log;
 
 import com.android.launcher3.compat.LauncherAppsCompat;
+import com.android.launcher3.compat.PackageInstallerCompat;
 import com.android.launcher3.compat.PackageInstallerCompat.PackageInstallInfo;
 
 import java.lang.ref.WeakReference;
@@ -135,6 +136,7 @@ public void onTerminate() {
         sContext.unregisterReceiver(mModel);
         final LauncherAppsCompat launcherApps = LauncherAppsCompat.getInstance(sContext);
         launcherApps.removeOnAppsChangedCallback(mModel);
+        PackageInstallerCompat.getInstance(sContext).onStop();
 
         ContentResolver resolver = sContext.getContentResolver();
         resolver.unregisterContentObserver(mFavoritesObserver);

File: src/com/android/launcher3/compat/PackageInstallerCompatVL.java
Patch:
@@ -81,7 +81,6 @@ private void addSessionInfoToCahce(SessionInfo info, UserHandleCompat user) {
 
     @Override
     public void onStop() {
-        mInstaller.unregisterSessionCallback(mCallback);
     }
 
     @Override
@@ -112,7 +111,7 @@ private void replayUpdates(PackageInstallInfo newInfo) {
             // Not yet ready
             return;
         }
-        if ((mPendingReplays.size() == 0) && (newInfo == null)) {
+        if ((mPendingReplays.size() == 0) && (newInfo == null) && mPendingBadgeUpdates.isEmpty()) {
             // Nothing to update
             return;
         }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -122,7 +122,7 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache,
         LauncherAppState app = LauncherAppState.getInstance();
 
         FastBitmapDrawable iconDrawable = Utilities.createIconDrawable(b);
-        iconDrawable.setGhostModeEnabled(info.isDisabled);
+        iconDrawable.setGhostModeEnabled(info.isDisabled != 0);
 
         setCompoundDrawables(null, iconDrawable, null, null);
         if (setDefaultPadding) {

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -27,7 +27,6 @@
 import android.os.Bundle;
 import android.os.UserManager;
 import android.provider.Settings;
-import android.view.ContextThemeWrapper;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.View.OnClickListener;
@@ -56,8 +55,7 @@ class LauncherClings implements OnClickListener {
     /** Ctor */
     public LauncherClings(Launcher launcher) {
         mLauncher = launcher;
-        mInflater = LayoutInflater.from(new
-                ContextThemeWrapper(mLauncher, android.R.style.Theme_DeviceDefault));
+        mInflater = LayoutInflater.from(mLauncher);
     }
 
     @Override

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -27,7 +27,6 @@
 import android.os.Bundle;
 import android.os.UserManager;
 import android.provider.Settings;
-import android.view.ContextThemeWrapper;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.View.OnClickListener;
@@ -56,8 +55,7 @@ class LauncherClings implements OnClickListener {
     /** Ctor */
     public LauncherClings(Launcher launcher) {
         mLauncher = launcher;
-        mInflater = LayoutInflater.from(new
-                ContextThemeWrapper(mLauncher, android.R.style.Theme_DeviceDefault));
+        mInflater = LayoutInflater.from(mLauncher);
     }
 
     @Override

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -27,7 +27,6 @@
 import android.os.Bundle;
 import android.os.UserManager;
 import android.provider.Settings;
-import android.view.ContextThemeWrapper;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.View.OnClickListener;
@@ -56,8 +55,7 @@ class LauncherClings implements OnClickListener {
     /** Ctor */
     public LauncherClings(Launcher launcher) {
         mLauncher = launcher;
-        mInflater = LayoutInflater.from(new
-                ContextThemeWrapper(mLauncher, android.R.style.Theme_DeviceDefault));
+        mInflater = LayoutInflater.from(mLauncher);
     }
 
     @Override

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -121,7 +121,7 @@ public Drawable getFullResDefaultActivityIcon() {
                 android.R.mipmap.sym_def_app_icon);
     }
 
-    public Drawable getFullResIcon(Resources resources, int iconId) {
+    private Drawable getFullResIcon(Resources resources, int iconId) {
         Drawable d;
         try {
             d = resources.getDrawableForDensity(iconId, mIconDpi);

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -29,7 +29,6 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
-import android.graphics.drawable.BitmapDrawable;
 import android.graphics.drawable.Drawable;
 import android.text.TextUtils;
 import android.util.Log;
@@ -390,8 +389,7 @@ public void cachePackageInstallInfo(String packageName, UserHandleCompat user,
             entry.title = title;
         }
         if (icon != null) {
-            entry.icon = Utilities.createIconBitmap(
-                    new BitmapDrawable(mContext.getResources(), icon), mContext);
+            entry.icon = Utilities.createIconBitmap(icon, mContext);
         }
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3485,8 +3485,8 @@ ShortcutInfo infoFromShortcutIntent(Context context, Intent data, Bitmap fallbac
         boolean customIcon = false;
         ShortcutIconResource iconResource = null;
 
-        if (bitmap != null && bitmap instanceof Bitmap) {
-            icon = Utilities.createIconBitmap(new FastBitmapDrawable((Bitmap)bitmap), context);
+        if (bitmap instanceof Bitmap) {
+            icon = Utilities.createIconBitmap((Bitmap) bitmap, context);
             customIcon = true;
         } else {
             Parcelable extra = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1050,7 +1050,7 @@ private void normalizeIcons(SQLiteDatabase db) {
                     long id = c.getLong(idIndex);
                     byte[] data = c.getBlob(iconIndex);
                     try {
-                        Bitmap bitmap = Utilities.resampleIconBitmap(
+                        Bitmap bitmap = Utilities.createIconBitmap(
                                 BitmapFactory.decodeByteArray(data, 0, data.length),
                                 mContext);
                         if (bitmap != null) {

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -73,8 +73,6 @@ public class LauncherProvider extends ContentProvider {
     private static final String TAG = "Launcher.LauncherProvider";
     private static final boolean LOGD = false;
 
-    private static final String DATABASE_NAME = "launcher.db";
-
     private static final int DATABASE_VERSION = 20;
 
     static final String OLD_AUTHORITY = "com.android.launcher2.settings";
@@ -431,7 +429,7 @@ private static class DatabaseHelper extends SQLiteOpenHelper implements LayoutPa
         private boolean mNewDbCreated = false;
 
         DatabaseHelper(Context context) {
-            super(context, DATABASE_NAME, null, DATABASE_VERSION);
+            super(context, LauncherFiles.LAUNCHER_DB, null, DATABASE_VERSION);
             mContext = context;
             mPackageManager = context.getPackageManager();
             mAppWidgetHost = new AppWidgetHost(context, Launcher.APPWIDGET_HOST_ID);

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -287,15 +287,15 @@ public void recycleBitmap(Object o, Bitmap bitmapToRecycle) {
 
     static class CacheDb extends SQLiteOpenHelper {
         final static int DB_VERSION = 2;
-        final static String DB_NAME = "widgetpreviews.db";
         final static String TABLE_NAME = "shortcut_and_widget_previews";
         final static String COLUMN_NAME = "name";
         final static String COLUMN_SIZE = "size";
         final static String COLUMN_PREVIEW_BITMAP = "preview_bitmap";
         Context mContext;
 
         public CacheDb(Context context) {
-            super(context, new File(context.getCacheDir(), DB_NAME).getPath(), null, DB_VERSION);
+            super(context, new File(context.getCacheDir(),
+                    LauncherFiles.WIDGET_PREVIEWS_DB).getPath(), null, DB_VERSION);
             // Store the context for later use
             mContext = context;
         }

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -354,7 +354,7 @@ private void restoreFavorite(Key key, byte[] buffer, int dataSize, ArrayList<Key
         try {
             ContentResolver cr = mContext.getContentResolver();
             ContentValues values = unpackFavorite(buffer, 0, dataSize);
-            cr.insert(Favorites.CONTENT_URI, values);
+            cr.insert(Favorites.CONTENT_URI_NO_NOTIFICATION, values);
         } catch (InvalidProtocolBufferNanoException e) {
             Log.e(TAG, "failed to decode favorite", e);
         }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -174,7 +174,7 @@ public Bitmap getIcon(IconCache iconCache) {
     }
 
     public void updateIcon(IconCache iconCache) {
-        mIcon = iconCache.getIcon(intent, user);
+        mIcon = iconCache.getIcon(promisedIntent != null ? promisedIntent : intent, user);
         usingFallbackIcon = iconCache.isDefaultIcon(mIcon, user);
     }
 

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -354,7 +354,7 @@ private void restoreFavorite(Key key, byte[] buffer, int dataSize, ArrayList<Key
         try {
             ContentResolver cr = mContext.getContentResolver();
             ContentValues values = unpackFavorite(buffer, 0, dataSize);
-            cr.insert(Favorites.CONTENT_URI, values);
+            cr.insert(Favorites.CONTENT_URI_NO_NOTIFICATION, values);
         } catch (InvalidProtocolBufferNanoException e) {
             Log.e(TAG, "failed to decode favorite", e);
         }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -174,7 +174,7 @@ public Bitmap getIcon(IconCache iconCache) {
     }
 
     public void updateIcon(IconCache iconCache) {
-        mIcon = iconCache.getIcon(intent, user);
+        mIcon = iconCache.getIcon(promisedIntent != null ? promisedIntent : intent, user);
         usingFallbackIcon = iconCache.isDefaultIcon(mIcon, user);
     }
 

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -354,7 +354,7 @@ private void restoreFavorite(Key key, byte[] buffer, int dataSize, ArrayList<Key
         try {
             ContentResolver cr = mContext.getContentResolver();
             ContentValues values = unpackFavorite(buffer, 0, dataSize);
-            cr.insert(Favorites.CONTENT_URI, values);
+            cr.insert(Favorites.CONTENT_URI_NO_NOTIFICATION, values);
         } catch (InvalidProtocolBufferNanoException e) {
             Log.e(TAG, "failed to decode favorite", e);
         }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -174,7 +174,7 @@ public Bitmap getIcon(IconCache iconCache) {
     }
 
     public void updateIcon(IconCache iconCache) {
-        mIcon = iconCache.getIcon(intent, user);
+        mIcon = iconCache.getIcon(promisedIntent != null ? promisedIntent : intent, user);
         usingFallbackIcon = iconCache.isDefaultIcon(mIcon, user);
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -73,6 +73,7 @@
 import android.text.method.TextKeyListener;
 import android.util.DisplayMetrics;
 import android.util.Log;
+import android.view.ContextThemeWrapper;
 import android.view.Display;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
@@ -2555,7 +2556,7 @@ protected void onClickAllAppsButton(View v) {
 
     private void showBrokenAppInstallDialog(final String packageName,
             DialogInterface.OnClickListener onSearchClickListener) {
-        new AlertDialog.Builder(this)
+        new AlertDialog.Builder(new ContextThemeWrapper(this, android.R.style.Theme_DeviceDefault))
             .setTitle(R.string.abandoned_promises_title)
             .setMessage(R.string.abandoned_promise_explanation)
             .setPositiveButton(R.string.abandoned_search, onSearchClickListener)

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -73,6 +73,7 @@
 import android.text.method.TextKeyListener;
 import android.util.DisplayMetrics;
 import android.util.Log;
+import android.view.ContextThemeWrapper;
 import android.view.Display;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
@@ -2555,7 +2556,7 @@ protected void onClickAllAppsButton(View v) {
 
     private void showBrokenAppInstallDialog(final String packageName,
             DialogInterface.OnClickListener onSearchClickListener) {
-        new AlertDialog.Builder(this)
+        new AlertDialog.Builder(new ContextThemeWrapper(this, android.R.style.Theme_DeviceDefault))
             .setTitle(R.string.abandoned_promises_title)
             .setMessage(R.string.abandoned_promise_explanation)
             .setPositiveButton(R.string.abandoned_search, onSearchClickListener)

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -73,6 +73,7 @@
 import android.text.method.TextKeyListener;
 import android.util.DisplayMetrics;
 import android.util.Log;
+import android.view.ContextThemeWrapper;
 import android.view.Display;
 import android.view.Gravity;
 import android.view.HapticFeedbackConstants;
@@ -2555,7 +2556,7 @@ protected void onClickAllAppsButton(View v) {
 
     private void showBrokenAppInstallDialog(final String packageName,
             DialogInterface.OnClickListener onSearchClickListener) {
-        new AlertDialog.Builder(this)
+        new AlertDialog.Builder(new ContextThemeWrapper(this, android.R.style.Theme_DeviceDefault))
             .setTitle(R.string.abandoned_promises_title)
             .setMessage(R.string.abandoned_promise_explanation)
             .setPositiveButton(R.string.abandoned_search, onSearchClickListener)

File: src/com/android/launcher3/AutoInstallsLayout.java
Patch:
@@ -57,7 +57,7 @@ public class AutoInstallsLayout implements WorkspaceLoader {
 
     /** Marker action used to discover a package which defines launcher customization */
     static final String ACTION_LAUNCHER_CUSTOMIZATION =
-            "com.android.launcher3.action.LAUNCHER_CUSTOMIZATION";
+            "android.autoinstalls.config.action.PLAY_AUTO_INSTALL";
 
     private static final String LAYOUT_RES = "default_layout";
 

File: src/com/android/launcher3/compat/PackageInstallerCompat.java
Patch:
@@ -20,6 +20,8 @@
 
 import com.android.launcher3.Utilities;
 
+import java.util.HashSet;
+
 public abstract class PackageInstallerCompat {
 
     public static final int STATUS_INSTALLED = 0;
@@ -42,7 +44,7 @@ public static PackageInstallerCompat getInstance(Context context) {
         }
     }
 
-    public abstract void updateActiveSessionCache();
+    public abstract HashSet<String> updateAndGetActiveSessionCache();
 
     public abstract void onPause();
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4993,7 +4993,7 @@ private void showFirstRunClings() {
             if (mModel.canMigrateFromOldLauncherDb(this)) {
                 launcherClings.showMigrationCling();
             } else {
-                launcherClings.showLongPressCling(false);
+                launcherClings.showLongPressCling(true);
             }
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4993,7 +4993,7 @@ private void showFirstRunClings() {
             if (mModel.canMigrateFromOldLauncherDb(this)) {
                 launcherClings.showMigrationCling();
             } else {
-                launcherClings.showLongPressCling(false);
+                launcherClings.showLongPressCling(true);
             }
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4993,7 +4993,7 @@ private void showFirstRunClings() {
             if (mModel.canMigrateFromOldLauncherDb(this)) {
                 launcherClings.showMigrationCling();
             } else {
-                launcherClings.showLongPressCling(false);
+                launcherClings.showLongPressCling(true);
             }
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4991,7 +4991,7 @@ private void showFirstRunClings() {
             if (mModel.canMigrateFromOldLauncherDb(this)) {
                 launcherClings.showMigrationCling();
             } else {
-                launcherClings.showLongPressCling(false);
+                launcherClings.showLongPressCling(true);
             }
         }
     }

File: src/com/android/launcher3/Folder.java
Patch:
@@ -461,7 +461,7 @@ public void animateOpen() {
 
         Animator openFolderAnim = null;
         final Runnable onCompleteRunnable;
-        if (!Utilities.isLmp()) {
+        if (!Utilities.isLmpOrAbove()) {
             positionAndSizeAsIcon();
             centerAboutIcon();
 

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -38,9 +38,8 @@ public abstract class AppWidgetManagerCompat {
 
     public static AppWidgetManagerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
-            // TODO change this to use api version once L gets an API number.
             if (sInstance == null) {
-                if (Utilities.isLmp()) {
+                if (Utilities.isLmpOrAbove()) {
                     sInstance = new AppWidgetManagerCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new AppWidgetManagerCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -23,6 +23,8 @@
 import android.os.Build;
 import android.os.Bundle;
 
+import com.android.launcher3.Utilities;
+
 import java.util.List;
 
 public abstract class LauncherAppsCompat {
@@ -48,9 +50,8 @@ protected LauncherAppsCompat() {
 
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
-            // STOPSHIP(kennyguy) change this to use api version once L gets an API number.
             if (sInstance == null) {
-                if ("L".equals(Build.VERSION.CODENAME)) {
+                if (Utilities.isLmpOrAbove()) {
                     sInstance = new LauncherAppsCompatVL(context.getApplicationContext());
                 } else {
                     sInstance = new LauncherAppsCompatV16(context.getApplicationContext());

File: src/com/android/launcher3/compat/PackageInstallerCompat.java
Patch:
@@ -32,7 +32,7 @@ public abstract class PackageInstallerCompat {
     public static PackageInstallerCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
             if (sInstance == null) {
-                if (Utilities.isLmp()) {
+                if (Utilities.isLmpOrAbove()) {
                     sInstance = new PackageInstallerCompatVL(context);
                 } else {
                     sInstance = new PackageInstallerCompatV16(context) { };

File: src/com/android/launcher3/compat/UserManagerCompat.java
Patch:
@@ -20,15 +20,16 @@
 import android.graphics.drawable.Drawable;
 import android.os.Build;
 
+import com.android.launcher3.Utilities;
+
 import java.util.List;
 
 public abstract class UserManagerCompat {
     protected UserManagerCompat() {
     }
 
     public static UserManagerCompat getInstance(Context context) {
-        // TODO change this to use api version once L gets an API number.
-        if ("L".equals(Build.VERSION.CODENAME)) {
+        if (Utilities.isLmpOrAbove()) {
             return new UserManagerCompatVL(context);
         } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
             return new UserManagerCompatV17(context);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1107,7 +1107,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
         case MotionEvent.ACTION_UP:
             if (mTouchState == TOUCH_STATE_REST) {
                 final CellLayout currentPage = (CellLayout) getChildAt(mCurrentPage);
-                if (!currentPage.lastDownOnOccupiedCell()) {
+                if (currentPage != null && !currentPage.lastDownOnOccupiedCell()) {
                     onWallpaperTap(ev);
                 }
             }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1107,7 +1107,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
         case MotionEvent.ACTION_UP:
             if (mTouchState == TOUCH_STATE_REST) {
                 final CellLayout currentPage = (CellLayout) getChildAt(mCurrentPage);
-                if (!currentPage.lastDownOnOccupiedCell()) {
+                if (currentPage != null && !currentPage.lastDownOnOccupiedCell()) {
                     onWallpaperTap(ev);
                 }
             }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1107,7 +1107,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
         case MotionEvent.ACTION_UP:
             if (mTouchState == TOUCH_STATE_REST) {
                 final CellLayout currentPage = (CellLayout) getChildAt(mCurrentPage);
-                if (!currentPage.lastDownOnOccupiedCell()) {
+                if (currentPage != null && !currentPage.lastDownOnOccupiedCell()) {
                     onWallpaperTap(ev);
                 }
             }

File: src/com/android/launcher3/compat/PackageInstallerCompatVL.java
Patch:
@@ -42,6 +42,7 @@ public class PackageInstallerCompatVL extends PackageInstallerCompat {
 
     PackageInstallerCompatVL(Context context) {
         mInstaller = context.getPackageManager().getPackageInstaller();
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         mCache = LauncherAppState.getInstance().getIconCache();
 
         mResumed = false;

File: src/com/android/launcher3/compat/AppWidgetManagerCompat.java
Patch:
@@ -41,9 +41,9 @@ public static AppWidgetManagerCompat getInstance(Context context) {
             // TODO change this to use api version once L gets an API number.
             if (sInstance == null) {
                 if (Utilities.isLmp()) {
-                    sInstance = new AppWidgetManagerCompatVL(context);
+                    sInstance = new AppWidgetManagerCompatVL(context.getApplicationContext());
                 } else {
-                    sInstance = new AppWidgetManagerCompatV16(context);
+                    sInstance = new AppWidgetManagerCompatV16(context.getApplicationContext());
                 }
             }
             return sInstance;

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -51,9 +51,9 @@ public static LauncherAppsCompat getInstance(Context context) {
             // STOPSHIP(kennyguy) change this to use api version once L gets an API number.
             if (sInstance == null) {
                 if ("L".equals(Build.VERSION.CODENAME)) {
-                    sInstance = new LauncherAppsCompatVL(context);
+                    sInstance = new LauncherAppsCompatVL(context.getApplicationContext());
                 } else {
-                    sInstance = new LauncherAppsCompatV16(context);
+                    sInstance = new LauncherAppsCompatV16(context.getApplicationContext());
                 }
             }
             return sInstance;

File: src/com/android/launcher3/compat/LauncherAppsCompatV16.java
Patch:
@@ -22,19 +22,17 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.pm.ActivityInfo;
+import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
-import android.content.pm.PackageInfo;
 import android.content.pm.ResolveInfo;
 import android.graphics.Rect;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
-import android.os.UserHandle;
 import android.provider.Settings;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 /**

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -229,7 +229,8 @@ public void flushInvalidIcons(DeviceProfile grid) {
             Iterator<Entry<CacheKey, CacheEntry>> it = mCache.entrySet().iterator();
             while (it.hasNext()) {
                 final CacheEntry e = it.next().getValue();
-                if (e.icon.getWidth() < grid.iconSizePx || e.icon.getHeight() < grid.iconSizePx) {
+                if ((e.icon != null) && (e.icon.getWidth() < grid.iconSizePx
+                        || e.icon.getHeight() < grid.iconSizePx)) {
                     it.remove();
                 }
             }

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -62,7 +62,7 @@ public class IconCache {
     // Empty class name is used for storing package default entry.
     private static final String EMPTY_CLASS_NAME = ".";
 
-    private static final boolean DEBUG = true;
+    private static final boolean DEBUG = false;
 
     private static class CacheEntry {
         public Bitmap icon;
@@ -511,7 +511,7 @@ private Bitmap getPreloadedIcon(ComponentName componentName, UserHandleCompat us
                 Log.w(TAG, "failed to decode pre-load icon for " + key);
             }
         } catch (FileNotFoundException e) {
-            if (DEBUG) Log.d(TAG, "there is no restored icon for: " + key, e);
+            if (DEBUG) Log.d(TAG, "there is no restored icon for: " + key);
         } catch (IOException e) {
             Log.w(TAG, "failed to read pre-load icon for: " + key, e);
         } finally {

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -62,7 +62,7 @@ public class IconCache {
     // Empty class name is used for storing package default entry.
     private static final String EMPTY_CLASS_NAME = ".";
 
-    private static final boolean DEBUG = true;
+    private static final boolean DEBUG = false;
 
     private static class CacheEntry {
         public Bitmap icon;
@@ -511,7 +511,7 @@ private Bitmap getPreloadedIcon(ComponentName componentName, UserHandleCompat us
                 Log.w(TAG, "failed to decode pre-load icon for " + key);
             }
         } catch (FileNotFoundException e) {
-            if (DEBUG) Log.d(TAG, "there is no restored icon for: " + key, e);
+            if (DEBUG) Log.d(TAG, "there is no restored icon for: " + key);
         } catch (IOException e) {
             Log.w(TAG, "failed to read pre-load icon for: " + key, e);
         } finally {

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -62,7 +62,7 @@ public class IconCache {
     // Empty class name is used for storing package default entry.
     private static final String EMPTY_CLASS_NAME = ".";
 
-    private static final boolean DEBUG = true;
+    private static final boolean DEBUG = false;
 
     private static class CacheEntry {
         public Bitmap icon;
@@ -511,7 +511,7 @@ private Bitmap getPreloadedIcon(ComponentName componentName, UserHandleCompat us
                 Log.w(TAG, "failed to decode pre-load icon for " + key);
             }
         } catch (FileNotFoundException e) {
-            if (DEBUG) Log.d(TAG, "there is no restored icon for: " + key, e);
+            if (DEBUG) Log.d(TAG, "there is no restored icon for: " + key);
         } catch (IOException e) {
             Log.w(TAG, "failed to read pre-load icon for: " + key, e);
         } finally {

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -38,7 +38,7 @@ public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static final String TAG = "LauncherAppState";
     private static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
 
-    private static final boolean DEBUG = true;  // STOPSHIP(cwren) temporary for debugging
+    private static final boolean DEBUG = false;
 
     private final AppFilter mAppFilter;
     private final BuildInfo mBuildInfo;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -85,7 +85,7 @@
 public class LauncherModel extends BroadcastReceiver
         implements LauncherAppsCompat.OnAppsChangedCallbackCompat {
     static final boolean DEBUG_LOADERS = false;
-    private static final boolean DEBUG_RECEIVER = true;  // STOPSHIP(cwren) temporary for debugging
+    private static final boolean DEBUG_RECEIVER = false;
 
     static final String TAG = "Launcher.Model";
 

File: src/com/android/launcher3/compat/AppWidgetManagerCompatVL.java
Patch:
@@ -127,7 +127,7 @@ public Bitmap getBadgeBitmap(AppWidgetProviderInfo info, Bitmap bitmap) {
         try {
             drawable = mPm.getUserBadgedDrawableForDensity(new BitmapDrawable(res, bitmap),
                     info.getProfile(), badgeLocation, 0);
-        } catch (Exception e) {
+        } catch (Throwable e) {
             return bitmap;
         }
 

File: src/com/android/launcher3/compat/UserManagerCompatVL.java
Patch:
@@ -55,7 +55,7 @@ public Drawable getBadgedDrawableForUser(Drawable unbadged, UserHandleCompat use
         // This hack is just to prevent crash in older builds.
         try {
             return mPm.getUserBadgedIcon(unbadged, user.getUser());
-        } catch (Exception e) {
+        } catch (Throwable e) {
             return unbadged;
         }
     }
@@ -68,8 +68,8 @@ public CharSequence getBadgedLabelForUser(CharSequence label, UserHandleCompat u
         // STOPSHIP(mokani): Remove catch block once dogfood build is bigger than LRW70.
         // This hack is just to prevent crash in older builds.
         try {
-        return mPm.getUserBadgedLabel(label, user.getUser());
-        } catch (Exception e) {
+            return mPm.getUserBadgedLabel(label, user.getUser());
+        } catch (Throwable e) {
             return label;
         }
     }

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -38,7 +38,7 @@ public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static final String TAG = "LauncherAppState";
     private static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
 
-    private static final boolean DEBUG = true;  // STOPSHIP(cwren) temporary for debugging
+    private static final boolean DEBUG = false;
 
     private final AppFilter mAppFilter;
     private final BuildInfo mBuildInfo;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -85,7 +85,7 @@
 public class LauncherModel extends BroadcastReceiver
         implements LauncherAppsCompat.OnAppsChangedCallbackCompat {
     static final boolean DEBUG_LOADERS = false;
-    private static final boolean DEBUG_RECEIVER = true;  // STOPSHIP(cwren) temporary for debugging
+    private static final boolean DEBUG_RECEIVER = false;
 
     static final String TAG = "Launcher.Model";
 

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -38,7 +38,7 @@ public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static final String TAG = "LauncherAppState";
     private static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
 
-    private static final boolean DEBUG = true;  // STOPSHIP(cwren) temporary for debugging
+    private static final boolean DEBUG = false;
 
     private final AppFilter mAppFilter;
     private final BuildInfo mBuildInfo;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -85,7 +85,7 @@
 public class LauncherModel extends BroadcastReceiver
         implements LauncherAppsCompat.OnAppsChangedCallbackCompat {
     static final boolean DEBUG_LOADERS = false;
-    private static final boolean DEBUG_RECEIVER = true;  // STOPSHIP(cwren) temporary for debugging
+    private static final boolean DEBUG_RECEIVER = false;
 
     static final String TAG = "Launcher.Model";
 

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -38,7 +38,7 @@ public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static final String TAG = "LauncherAppState";
     private static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
 
-    private static final boolean DEBUG = true;  // STOPSHIP(cwren) temporary for debugging
+    private static final boolean DEBUG = false;
 
     private final AppFilter mAppFilter;
     private final BuildInfo mBuildInfo;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -85,7 +85,7 @@
 public class LauncherModel extends BroadcastReceiver
         implements LauncherAppsCompat.OnAppsChangedCallbackCompat {
     static final boolean DEBUG_LOADERS = false;
-    private static final boolean DEBUG_RECEIVER = true;  // STOPSHIP(cwren) temporary for debugging
+    private static final boolean DEBUG_RECEIVER = false;
 
     static final String TAG = "Launcher.Model";
 

File: src/com/android/launcher3/compat/AppWidgetManagerCompatVL.java
Patch:
@@ -127,7 +127,7 @@ public Bitmap getBadgeBitmap(AppWidgetProviderInfo info, Bitmap bitmap) {
         try {
             drawable = mPm.getUserBadgedDrawableForDensity(new BitmapDrawable(res, bitmap),
                     info.getProfile(), badgeLocation, 0);
-        } catch (Exception e) {
+        } catch (Throwable e) {
             return bitmap;
         }
 

File: src/com/android/launcher3/compat/UserManagerCompatVL.java
Patch:
@@ -55,7 +55,7 @@ public Drawable getBadgedDrawableForUser(Drawable unbadged, UserHandleCompat use
         // This hack is just to prevent crash in older builds.
         try {
             return mPm.getUserBadgedIcon(unbadged, user.getUser());
-        } catch (Exception e) {
+        } catch (Throwable e) {
             return unbadged;
         }
     }
@@ -68,8 +68,8 @@ public CharSequence getBadgedLabelForUser(CharSequence label, UserHandleCompat u
         // STOPSHIP(mokani): Remove catch block once dogfood build is bigger than LRW70.
         // This hack is just to prevent crash in older builds.
         try {
-        return mPm.getUserBadgedLabel(label, user.getUser());
-        } catch (Exception e) {
+            return mPm.getUserBadgedLabel(label, user.getUser());
+        } catch (Throwable e) {
             return label;
         }
     }

File: src/com/android/launcher3/compat/AppWidgetManagerCompatVL.java
Patch:
@@ -127,7 +127,7 @@ public Bitmap getBadgeBitmap(AppWidgetProviderInfo info, Bitmap bitmap) {
         try {
             drawable = mPm.getUserBadgedDrawableForDensity(new BitmapDrawable(res, bitmap),
                     info.getProfile(), badgeLocation, 0);
-        } catch (Exception e) {
+        } catch (Throwable e) {
             return bitmap;
         }
 

File: src/com/android/launcher3/compat/UserManagerCompatVL.java
Patch:
@@ -55,7 +55,7 @@ public Drawable getBadgedDrawableForUser(Drawable unbadged, UserHandleCompat use
         // This hack is just to prevent crash in older builds.
         try {
             return mPm.getUserBadgedIcon(unbadged, user.getUser());
-        } catch (Exception e) {
+        } catch (Throwable e) {
             return unbadged;
         }
     }
@@ -68,8 +68,8 @@ public CharSequence getBadgedLabelForUser(CharSequence label, UserHandleCompat u
         // STOPSHIP(mokani): Remove catch block once dogfood build is bigger than LRW70.
         // This hack is just to prevent crash in older builds.
         try {
-        return mPm.getUserBadgedLabel(label, user.getUser());
-        } catch (Exception e) {
+            return mPm.getUserBadgedLabel(label, user.getUser());
+        } catch (Throwable e) {
             return label;
         }
     }

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -62,7 +62,7 @@ public class IconCache {
     // Empty class name is used for storing package default entry.
     private static final String EMPTY_CLASS_NAME = ".";
 
-    private static final boolean DEBUG = true;
+    private static final boolean DEBUG = false;
 
     private static class CacheEntry {
         public Bitmap icon;
@@ -511,7 +511,7 @@ private Bitmap getPreloadedIcon(ComponentName componentName, UserHandleCompat us
                 Log.w(TAG, "failed to decode pre-load icon for " + key);
             }
         } catch (FileNotFoundException e) {
-            if (DEBUG) Log.d(TAG, "there is no restored icon for: " + key, e);
+            if (DEBUG) Log.d(TAG, "there is no restored icon for: " + key);
         } catch (IOException e) {
             Log.w(TAG, "failed to read pre-load icon for: " + key, e);
         } finally {

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -113,12 +113,12 @@ public int getAlpha() {
 
     @Override
     public int getIntrinsicWidth() {
-        return getBounds().width();
+        return mBitmap.getWidth();
     }
 
     @Override
     public int getIntrinsicHeight() {
-        return getBounds().height();
+        return mBitmap.getHeight();
     }
 
     @Override

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -113,12 +113,12 @@ public int getAlpha() {
 
     @Override
     public int getIntrinsicWidth() {
-        return getBounds().width();
+        return mBitmap.getWidth();
     }
 
     @Override
     public int getIntrinsicHeight() {
-        return getBounds().height();
+        return mBitmap.getHeight();
     }
 
     @Override

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -113,12 +113,12 @@ public int getAlpha() {
 
     @Override
     public int getIntrinsicWidth() {
-        return getBounds().width();
+        return mBitmap.getWidth();
     }
 
     @Override
     public int getIntrinsicHeight() {
-        return getBounds().height();
+        return mBitmap.getHeight();
     }
 
     @Override

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -113,12 +113,12 @@ public int getAlpha() {
 
     @Override
     public int getIntrinsicWidth() {
-        return getBounds().width();
+        return mBitmap.getWidth();
     }
 
     @Override
     public int getIntrinsicHeight() {
-        return getBounds().height();
+        return mBitmap.getHeight();
     }
 
     @Override

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -925,7 +925,7 @@ private ArrayList<WallpaperTileInfo> findBundledWallpapers() {
         Partner partner = Partner.get(pm);
         if (partner != null) {
             final Resources partnerRes = partner.getResources();
-            final int resId = partnerRes.getIdentifier(Partner.RESOURCE_WALLPAPERS, "array",
+            final int resId = partnerRes.getIdentifier(Partner.RES_WALLPAPERS, "array",
                     partner.getPackageName());
             if (resId != 0) {
                 addWallpapers(bundled, partnerRes, partner.getPackageName(), resId);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -327,7 +327,7 @@ synchronized public void loadDefaultFavoritesIfNecessary() {
                 final Partner partner = Partner.get(getContext().getPackageManager());
                 if (partner != null && partner.hasDefaultLayout()) {
                     final Resources partnerRes = partner.getResources();
-                    int workspaceResId = partnerRes.getIdentifier(Partner.RESOURCE_DEFAULT_LAYOUT,
+                    int workspaceResId = partnerRes.getIdentifier(Partner.RES_DEFAULT_LAYOUT,
                             "xml", partner.getPackageName());
                     if (workspaceResId != 0) {
                         loader = new SimpleWorkspaceLoader(mOpenHelper, partnerRes, workspaceResId);
@@ -1509,7 +1509,7 @@ private int loadFavoritesRecursive(SQLiteDatabase db, Resources res, int workspa
                         final Partner partner = Partner.get(mPackageManager);
                         if (partner != null) {
                             final Resources partnerRes = partner.getResources();
-                            final int resId = partnerRes.getIdentifier(Partner.RESOURCE_FOLDER,
+                            final int resId = partnerRes.getIdentifier(Partner.RES_FOLDER,
                                     "xml", partner.getPackageName());
                             if (resId != 0) {
                                 final XmlResourceParser partnerParser = partnerRes.getXml(resId);

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -48,7 +48,7 @@ protected LauncherAppsCompat() {
 
     public static LauncherAppsCompat getInstance(Context context) {
         synchronized (sInstanceLock) {
-            // TODO change this to use api version once L gets an API number.
+            // STOPSHIP(kennyguy) change this to use api version once L gets an API number.
             if (sInstance == null) {
                 if ("L".equals(Build.VERSION.CODENAME)) {
                     sInstance = new LauncherAppsCompatVL(context);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1274,9 +1274,6 @@ protected void notifyPageSwitchListener() {
                 mLauncher.updateVoiceButtonProxyVisible(false);
             }
         }
-        if (getPageIndicator() != null) {
-            getPageIndicator().setContentDescription(getPageIndicatorDescription());
-        }
     }
 
     protected CustomContentCallbacks getCustomContentCallbacks() {

File: src/com/android/launcher3/AppsCustomizeCellLayout.java
Patch:
@@ -68,4 +68,4 @@ public void resetChildrenOnKeyListeners() {
             children.getChildAt(j).setOnKeyListener(null);
         }
     }
-}
\ No newline at end of file
+}

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -996,9 +996,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         }
 
         if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < getChildCount()) {
-            setHorizontalScrollBarEnabled(false);
             updateCurrentPageScroll();
-            setHorizontalScrollBarEnabled(true);
             mFirstLayout = false;
         }
 

File: src/com/android/launcher3/AppsCustomizeCellLayout.java
Patch:
@@ -68,4 +68,4 @@ public void resetChildrenOnKeyListeners() {
             children.getChildAt(j).setOnKeyListener(null);
         }
     }
-}
\ No newline at end of file
+}

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -996,9 +996,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         }
 
         if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < getChildCount()) {
-            setHorizontalScrollBarEnabled(false);
             updateCurrentPageScroll();
-            setHorizontalScrollBarEnabled(true);
             mFirstLayout = false;
         }
 

File: src/com/android/launcher3/Folder.java
Patch:
@@ -1295,6 +1295,8 @@ public void run() {
         mSuppressOnAdd = true;
         mInfo.add(si);
         mSuppressOnAdd = false;
+        // Clear the drag info, as it is no longer being dragged.
+        mCurrentDragInfo = null;
     }
 
     // This is used so the item doesn't immediately appear in the folder when added. In one case

File: src/com/android/launcher3/AppsCustomizeCellLayout.java
Patch:
@@ -68,4 +68,4 @@ public void resetChildrenOnKeyListeners() {
             children.getChildAt(j).setOnKeyListener(null);
         }
     }
-}
\ No newline at end of file
+}

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -996,9 +996,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         }
 
         if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < getChildCount()) {
-            setHorizontalScrollBarEnabled(false);
             updateCurrentPageScroll();
-            setHorizontalScrollBarEnabled(true);
             mFirstLayout = false;
         }
 

File: src/com/android/launcher3/AppsCustomizeCellLayout.java
Patch:
@@ -68,4 +68,4 @@ public void resetChildrenOnKeyListeners() {
             children.getChildAt(j).setOnKeyListener(null);
         }
     }
-}
\ No newline at end of file
+}

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -996,9 +996,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
         }
 
         if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < getChildCount()) {
-            setHorizontalScrollBarEnabled(false);
             updateCurrentPageScroll();
-            setHorizontalScrollBarEnabled(true);
             mFirstLayout = false;
         }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -506,7 +506,7 @@ protected void onCreate(Bundle savedInstanceState) {
             if (mModel.canMigrateFromOldLauncherDb(this)) {
                 launcherClings.showMigrationCling();
             } else {
-                launcherClings.showLongPressCling(true);
+                launcherClings.showLongPressCling(false);
             }
         }
     }

File: src/com/android/launcher3/PagedViewWidget.java
Patch:
@@ -30,6 +30,8 @@
 import android.widget.LinearLayout;
 import android.widget.TextView;
 
+import com.android.launcher3.compat.AppWidgetManagerCompat;
+
 /**
  * The linear layout used strictly for the widget/wallpaper tab of the customization tray
  */
@@ -127,7 +129,7 @@ public void applyFromAppWidgetProviderInfo(AppWidgetProviderInfo info,
             image.setMaxWidth(maxWidth);
         }
         final TextView name = (TextView) findViewById(R.id.widget_name);
-        name.setText(info.label);
+        name.setText(AppWidgetManagerCompat.getInstance(getContext()).loadLabel(info));
         final TextView dims = (TextView) findViewById(R.id.widget_dims);
         if (dims != null) {
             int hSpan = Math.min(cellSpan[0], (int) grid.numColumns);

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -78,7 +78,7 @@ public final class Utilities {
     /**
      * Returns a FastBitmapDrawable with the icon, accurately sized.
      */
-    static FastBitmapDrawable createIconDrawable(Bitmap icon) {
+    public static FastBitmapDrawable createIconDrawable(Bitmap icon) {
         FastBitmapDrawable d = new FastBitmapDrawable(icon);
         d.setFilterBitmap(true);
         resizeIconDrawable(d);

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -64,7 +64,6 @@ public Hotseat(Context context, AttributeSet attrs, int defStyle) {
 
     public void setup(Launcher launcher) {
         mLauncher = launcher;
-        setOnKeyListener(new HotseatIconKeyEventListener());
     }
 
     CellLayout getLayout() {
@@ -155,6 +154,7 @@ void resetLayout() {
             allAppsButton.setCompoundDrawables(null, d, null, null);
 
             allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));
+            allAppsButton.setOnKeyListener(new HotseatIconKeyEventListener());
             if (mLauncher != null) {
                 allAppsButton.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
                 mLauncher.setAllAppsButton(allAppsButton);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -999,7 +999,7 @@ void addInScreen(View child, long container, long screenId, int x, int y, int sp
         final CellLayout layout;
         if (container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
             layout = mLauncher.getHotseat().getLayout();
-            child.setOnKeyListener(null);
+            child.setOnKeyListener(new HotseatIconKeyEventListener());
 
             // Hide folder title in the hotseat
             if (child instanceof FolderIcon) {

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -583,9 +583,10 @@ private void drawPreviewItem(Canvas canvas, PreviewItemDrawingParams params) {
             d.setBounds(0, 0, mIntrinsicIconSize, mIntrinsicIconSize);
             if (d instanceof FastBitmapDrawable) {
                 FastBitmapDrawable fd = (FastBitmapDrawable) d;
-                fd.addBrightness(params.overlayAlpha);
+                int oldBrightness = fd.getBrightness();
+                fd.setBrightness(params.overlayAlpha);
                 d.draw(canvas);
-                fd.addBrightness(-params.overlayAlpha);
+                fd.setBrightness(oldBrightness);
             } else {
                 d.setColorFilter(Color.argb(params.overlayAlpha, 255, 255, 255),
                         PorterDuff.Mode.SRC_ATOP);

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -1041,6 +1041,7 @@ public void syncAppsPageItems(int page, boolean immediate) {
             icon.setOnLongClickListener(this);
             icon.setOnTouchListener(this);
             icon.setOnKeyListener(this);
+            icon.setOnFocusChangeListener(layout.mFocusHandlerView);
 
             int index = i - startIndex;
             int x = index % mCellCountX;

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -178,6 +178,7 @@ static FolderIcon fromXml(int resId, Launcher launcher, ViewGroup group,
         icon.mFolderRingAnimator = new FolderRingAnimator(launcher, icon);
         folderInfo.addListener(icon);
 
+        icon.setOnFocusChangeListener(launcher.mFocusHandler);
         return icon;
     }
 

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -159,6 +159,7 @@ void resetLayout() {
                 allAppsButton.setOnTouchListener(mLauncher.getHapticFeedbackTouchListener());
                 mLauncher.setAllAppsButton(allAppsButton);
                 allAppsButton.setOnClickListener(mLauncher);
+                allAppsButton.setOnFocusChangeListener(mLauncher.mFocusHandler);
             }
 
             // Note: We do this to ensure that the hotseat is always laid out in the orientation of

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -692,6 +692,9 @@ private void restoreWidget(Key key, byte[] buffer, int dataSize, ArrayList<Key>
                         .decodeByteArray(widget.icon.data, 0, widget.icon.data.length);
                 if (icon == null) {
                     Log.w(TAG, "failed to unpack widget icon for " + key.name);
+                } else {
+                    IconCache.preloadIcon(mContext, ComponentName.unflattenFromString(widget.provider),
+                            icon, widget.icon.dpi);
                 }
             }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3089,7 +3089,7 @@ public ShortcutInfo getRestoredItemInfo(Cursor cursor, int titleIndex, Intent in
         info.user = UserHandleCompat.myUserHandle();
         info.contentDescription = mUserManager.getBadgedLabelForUser(
                 info.title.toString(), info.user);
-        info.setIcon(mIconCache.getIcon(intent, info.title.toString(), info.user));
+        info.setIcon(mIconCache.getIcon(intent, info.title.toString(), info.user, false));
         info.itemType = LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
         info.restoredIntent = intent;
         info.wasPromise = true;
@@ -3378,7 +3378,7 @@ ShortcutInfo addShortcut(Context context, Intent data, long container, int scree
     /**
      * Attempts to find an AppWidgetProviderInfo that matches the given component.
      */
-    AppWidgetProviderInfo findAppWidgetProviderInfoWithComponent(Context context,
+    static AppWidgetProviderInfo findAppWidgetProviderInfoWithComponent(Context context,
             ComponentName component) {
         List<AppWidgetProviderInfo> widgets =
             AppWidgetManager.getInstance(context).getInstalledProviders();

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1860,7 +1860,7 @@ private boolean loadWorkspace() {
             } else {
                 // Make sure the default workspace is loaded
                 Launcher.addDumpLog(TAG, "loadWorkspace: loading default favorites", false);
-                LauncherAppState.getLauncherProvider().loadDefaultFavoritesIfNecessary(0);
+                LauncherAppState.getLauncherProvider().loadDefaultFavoritesIfNecessary();
             }
 
             // This code path is for our old migration code and should no longer be exercised

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -380,7 +380,7 @@ public void performCreateAnimation(final ShortcutInfo destInfo, final View destV
             float scaleRelativeToDragLayer, Runnable postAnimationRunnable) {
 
         // These correspond two the drawable and view that the icon was dropped _onto_
-        Drawable animateDrawable = ((TextView) destView).getCompoundDrawables()[1];
+        Drawable animateDrawable = getTopDrawable((TextView) destView);
         computePreviewDrawingParams(animateDrawable.getIntrinsicWidth(),
                 destView.getMeasuredWidth());
 
@@ -394,7 +394,7 @@ public void performCreateAnimation(final ShortcutInfo destInfo, final View destV
     }
 
     public void performDestroyAnimation(final View finalView, Runnable onCompleteRunnable) {
-        Drawable animateDrawable = ((TextView) finalView).getCompoundDrawables()[1];
+        Drawable animateDrawable = getTopDrawable((TextView) finalView);
         computePreviewDrawingParams(animateDrawable.getIntrinsicWidth(),
                 finalView.getMeasuredWidth());
 

File: src/com/android/launcher3/compat/LauncherAppsCompat.java
Patch:
@@ -66,6 +66,7 @@ public abstract LauncherActivityInfoCompat resolveActivity(Intent intent,
             UserHandleCompat user);
     public abstract void startActivityForProfile(ComponentName component, UserHandleCompat user,
             Rect sourceBounds, Bundle opts);
+    public abstract void showAppDetailsForProfile(ComponentName component, UserHandleCompat user);
     public abstract void addOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);
     public abstract void removeOnAppsChangedCallback(OnAppsChangedCallbackCompat listener);
     public abstract boolean isPackageEnabledForProfile(String packageName, UserHandleCompat user);

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1404,7 +1404,7 @@ private int loadFavoritesRecursive(SQLiteDatabase db, Resources res, int workspa
                         }
                     } else if (TAG_FOLDER.equals(name)) {
                         // Folder contents are nested in this XML file
-                        added = loadFolder(db, values, mContext.getResources(), parser);
+                        added = loadFolder(db, values, res, parser);
 
                     } else if (TAG_PARTNER_FOLDER.equals(name)) {
                         // Folder contents come from an external XML resource

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1839,7 +1839,7 @@ private boolean loadWorkspace() {
             final boolean isSafeMode = manager.isSafeMode();
             final LauncherAppsCompat launcherApps = LauncherAppsCompat.getInstance(context);
             final boolean isSdCardReady = context.registerReceiver(null,
-                    new IntentFilter(StartupReceiver.SYESTEM_READY)) != null;
+                    new IntentFilter(StartupReceiver.SYSTEM_READY)) != null;
 
             LauncherAppState app = LauncherAppState.getInstance();
             DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
@@ -2267,7 +2267,7 @@ private boolean loadWorkspace() {
 
                 if (!isSdCardReady && !sPendingPackages.isEmpty()) {
                     context.registerReceiver(new AppsAvailabilityCheck(),
-                            new IntentFilter(StartupReceiver.SYESTEM_READY),
+                            new IntentFilter(StartupReceiver.SYSTEM_READY),
                             null, sWorker);
                 }
 

File: src/com/android/launcher3/StartupReceiver.java
Patch:
@@ -6,10 +6,10 @@
 
 public class StartupReceiver extends BroadcastReceiver {
 
-    static final String SYESTEM_READY = "com.android.launcher3.SYESTEM_READY";
+    static final String SYSTEM_READY = "com.android.launcher3.SYSTEM_READY";
 
     @Override
     public void onReceive(Context context, Intent intent) {
-        context.sendStickyBroadcast(new Intent(SYESTEM_READY));
+        context.sendStickyBroadcast(new Intent(SYSTEM_READY));
     }
 }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1839,7 +1839,7 @@ private boolean loadWorkspace() {
             final boolean isSafeMode = manager.isSafeMode();
             final LauncherAppsCompat launcherApps = LauncherAppsCompat.getInstance(context);
             final boolean isSdCardReady = context.registerReceiver(null,
-                    new IntentFilter(StartupReceiver.SYESTEM_READY)) != null;
+                    new IntentFilter(StartupReceiver.SYSTEM_READY)) != null;
 
             LauncherAppState app = LauncherAppState.getInstance();
             DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
@@ -2267,7 +2267,7 @@ private boolean loadWorkspace() {
 
                 if (!isSdCardReady && !sPendingPackages.isEmpty()) {
                     context.registerReceiver(new AppsAvailabilityCheck(),
-                            new IntentFilter(StartupReceiver.SYESTEM_READY),
+                            new IntentFilter(StartupReceiver.SYSTEM_READY),
                             null, sWorker);
                 }
 

File: src/com/android/launcher3/StartupReceiver.java
Patch:
@@ -6,10 +6,10 @@
 
 public class StartupReceiver extends BroadcastReceiver {
 
-    static final String SYESTEM_READY = "com.android.launcher3.SYESTEM_READY";
+    static final String SYSTEM_READY = "com.android.launcher3.SYSTEM_READY";
 
     @Override
     public void onReceive(Context context, Intent intent) {
-        context.sendStickyBroadcast(new Intent(SYESTEM_READY));
+        context.sendStickyBroadcast(new Intent(SYSTEM_READY));
     }
 }

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1447,7 +1447,7 @@ private int loadFavoritesRecursive(SQLiteDatabase db, Resources res, int workspa
                         }
                     } else if (TAG_FOLDER.equals(name)) {
                         // Folder contents are nested in this XML file
-                        added = loadFolder(db, values, mContext.getResources(), parser);
+                        added = loadFolder(db, values, res, parser);
 
                     } else if (TAG_PARTNER_FOLDER.equals(name)) {
                         // Folder contents come from an external XML resource

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -185,7 +185,8 @@ void onAddToDatabase(Context context, ContentValues values) {
         String titleStr = title != null ? title.toString() : null;
         values.put(LauncherSettings.BaseLauncherColumns.TITLE, titleStr);
 
-        String uri = intent != null ? intent.toUri(0) : null;
+        String uri = restoredIntent != null ? restoredIntent.toUri(0)
+                : (intent != null ? intent.toUri(0) : null);
         values.put(LauncherSettings.BaseLauncherColumns.INTENT, uri);
 
         if (customIcon) {

File: src/com/android/launcher3/AppsCustomizeTabHost.java
Patch:
@@ -150,7 +150,7 @@ public void onTrimMemory() {
     }
 
     @Override
-    public View getContent() {
+    public ViewGroup getContent() {
         return mPagedView;
     }
 

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -185,7 +185,8 @@ void onAddToDatabase(Context context, ContentValues values) {
         String titleStr = title != null ? title.toString() : null;
         values.put(LauncherSettings.BaseLauncherColumns.TITLE, titleStr);
 
-        String uri = intent != null ? intent.toUri(0) : null;
+        String uri = restoredIntent != null ? restoredIntent.toUri(0)
+                : (intent != null ? intent.toUri(0) : null);
         values.put(LauncherSettings.BaseLauncherColumns.INTENT, uri);
 
         if (customIcon) {

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -308,10 +308,10 @@ private static int getRotationFromExifHelper(
         return 0;
     }
 
-    protected void setWallpaper(String filePath, final boolean finishActivityWhenDone) {
-        int rotation = getRotationFromExif(filePath);
+    protected void setWallpaper(Uri uri, final boolean finishActivityWhenDone) {
+        int rotation = getRotationFromExif(this, uri);
         BitmapCropTask cropTask = new BitmapCropTask(
-                this, filePath, null, rotation, 0, 0, true, false, null);
+                this, uri, null, rotation, 0, 0, true, false, null);
         final Point bounds = cropTask.getImageBounds();
         Runnable onEndCrop = new Runnable() {
             public void run() {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3583,18 +3583,18 @@ public static class ShortcutNameComparator implements Comparator<LauncherActivit
             mCollator = Collator.getInstance();
         }
         public final int compare(LauncherActivityInfoCompat a, LauncherActivityInfoCompat b) {
-            CharSequence labelA, labelB;
+            String labelA, labelB;
             ComponentName keyA = a.getComponentName();
             ComponentName keyB = b.getComponentName();
             if (mLabelCache.containsKey(keyA)) {
-                labelA = mLabelCache.get(keyA);
+                labelA = mLabelCache.get(keyA).toString();
             } else {
                 labelA = a.getLabel().toString().trim();
 
                 mLabelCache.put(keyA, labelA);
             }
             if (mLabelCache.containsKey(keyB)) {
-                labelB = mLabelCache.get(keyB);
+                labelB = mLabelCache.get(keyB).toString();
             } else {
                 labelB = b.getLabel().toString().trim();
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -3554,18 +3554,18 @@ public static class ShortcutNameComparator implements Comparator<LauncherActivit
             mCollator = Collator.getInstance();
         }
         public final int compare(LauncherActivityInfoCompat a, LauncherActivityInfoCompat b) {
-            CharSequence labelA, labelB;
+            String labelA, labelB;
             ComponentName keyA = a.getComponentName();
             ComponentName keyB = b.getComponentName();
             if (mLabelCache.containsKey(keyA)) {
-                labelA = mLabelCache.get(keyA);
+                labelA = mLabelCache.get(keyA).toString();
             } else {
                 labelA = a.getLabel().toString().trim();
 
                 mLabelCache.put(keyA, labelA);
             }
             if (mLabelCache.containsKey(keyB)) {
-                labelB = mLabelCache.get(keyB);
+                labelB = mLabelCache.get(keyB).toString();
             } else {
                 labelB = b.getLabel().toString().trim();
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3302,7 +3302,7 @@ public void onAnimationEnd(Animator animation) {
 
                 width = revealView.getMeasuredWidth();
 
-                ValueAnimator reveal =
+                Animator reveal =
                         ViewAnimationUtils.createCircularReveal(revealView, width / 2,
                                 height / 2 + 100, 0f, revealRadius);
                 reveal.setDuration(revealDuration);
@@ -3528,7 +3528,7 @@ public void onAnimationEnd(Animator animation) {
 
                 width = revealView.getMeasuredWidth();
 
-                ValueAnimator reveal =
+                Animator reveal =
                         ViewAnimationUtils.createCircularReveal(revealView, width / 2,
                                 height / 2 + 100, revealRadius, 0f);
                 reveal.setInterpolator(new LogDecelerateInterpolator(100, 0));

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -64,8 +64,8 @@ public class IconCache {
 
     private static class CacheEntry {
         public Bitmap icon;
-        public String title;
-        public String contentDescription;
+        public CharSequence title;
+        public CharSequence contentDescription;
     }
 
     private static class CacheKey {

File: src/com/android/launcher3/ItemInfo.java
Patch:
@@ -110,7 +110,7 @@ public class ItemInfo {
     /**
      * Content description of the item.
      */
-    String contentDescription;
+    CharSequence contentDescription;
 
     /**
      * The position of the item in a drag-and-drop operation.

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4720,7 +4720,7 @@ public ItemInfo createShortcutDragInfo(Intent shortcutIntent, CharSequence capti
     public ItemInfo createShortcutDragInfo(Intent shortcutIntent, CharSequence caption,
             Bitmap icon, UserHandleCompat user) {
         UserManagerCompat userManager = UserManagerCompat.getInstance(this);
-        String contentDescription = userManager.getBadgedLabelForUser(caption.toString(), user);
+        CharSequence contentDescription = userManager.getBadgedLabelForUser(caption, user);
         return new ShortcutInfo(shortcutIntent, caption, contentDescription, icon, user);
     }
 

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -126,7 +126,7 @@ public void restore() {
         }
     }
 
-    ShortcutInfo(Intent intent, CharSequence title, String contentDescription,
+    ShortcutInfo(Intent intent, CharSequence title, CharSequence contentDescription,
             Bitmap icon, UserHandleCompat user) {
         this();
         this.intent = intent;

File: src/com/android/launcher3/compat/UserManagerCompat.java
Patch:
@@ -41,5 +41,5 @@ public static UserManagerCompat getInstance(Context context) {
     public abstract long getSerialNumberForUser(UserHandleCompat user);
     public abstract UserHandleCompat getUserForSerialNumber(long serialNumber);
     public abstract Drawable getBadgedDrawableForUser(Drawable unbadged, UserHandleCompat user);
-    public abstract String getBadgedLabelForUser(String label, UserHandleCompat user);
+    public abstract CharSequence getBadgedLabelForUser(CharSequence label, UserHandleCompat user);
 }

File: src/com/android/launcher3/compat/UserManagerCompatV16.java
Patch:
@@ -45,7 +45,7 @@ public long getSerialNumberForUser(UserHandleCompat user) {
         return 0;
     }
 
-    public String getBadgedLabelForUser(String label, UserHandleCompat user) {
+    public CharSequence getBadgedLabelForUser(CharSequence label, UserHandleCompat user) {
         return label;
     }
 }

File: src/com/android/launcher3/compat/UserManagerCompatVL.java
Patch:
@@ -49,11 +49,12 @@ public Drawable getBadgedDrawableForUser(Drawable unbadged, UserHandleCompat use
         return mUserManager.getBadgedDrawableForUser(unbadged, user.getUser());
     }
 
-    public String getBadgedLabelForUser(String label, UserHandleCompat user) {
+    public CharSequence getBadgedLabelForUser(CharSequence label, UserHandleCompat user) {
         if (user == null) {
             return label;
         }
-        return mUserManager.getBadgedLabelForUser(label, user.getUser());
+        // TODO Remove casts when API has made it from lmp-dev -> sdk
+        return (CharSequence) mUserManager.getBadgedLabelForUser((String) label, user.getUser());
     }
 }
 

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -326,7 +326,7 @@ public void run() {
 
             final LauncherAppWidgetInfo launcherAppWidgetInfo = (LauncherAppWidgetInfo) item;
             final LauncherAppWidgetHost appWidgetHost = mLauncher.getAppWidgetHost();
-            if (appWidgetHost != null) {
+            if ((appWidgetHost != null) && launcherAppWidgetInfo.isWidgetIdValid()) {
                 // Deleting an app widget ID is a void call but writes to disk before returning
                 // to the caller...
                 new AsyncTask<Void, Void, Void>() {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2047,6 +2047,8 @@ private boolean loadWorkspace() {
                                     info.spanX = 1;
                                     info.spanY = 1;
                                     info.intent.putExtra(ItemInfo.EXTRA_PROFILE, serialNumber);
+                                    info.isDisabled = isSafeMode
+                                            && !Utilities.isSystemApp(context, intent);
 
                                     // check & update map of what's occupied
                                     deleteOnInvalidPlacement.set(false);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4790,7 +4790,7 @@ private void updateShortcut(HashMap<ComponentName, AppInfo> appsMap, ItemInfo in
                 shortcutInfo.updateIcon(mIconCache);
                 shortcutInfo.title = appInfo.title.toString();
                 shortcutInfo.contentDescription = appInfo.contentDescription;
-                shortcut.applyFromShortcutInfo(shortcutInfo, mIconCache);
+                shortcut.applyFromShortcutInfo(shortcutInfo, mIconCache, true);
             }
         }
     }

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -167,7 +167,7 @@ void resetLayout() {
             int y = getCellYFromOrder(mAllAppsButtonRank);
             CellLayout.LayoutParams lp = new CellLayout.LayoutParams(x,y,1,1);
             lp.canReorder = false;
-            mContent.addViewToCellLayout(allAppsButton, -1, 0, lp, true);
+            mContent.addViewToCellLayout(allAppsButton, -1, allAppsButton.getId(), lp, true);
         }
     }
 

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -300,10 +300,10 @@ private static int getRotationFromExifHelper(
         return 0;
     }
 
-    protected void setWallpaper(String filePath, final boolean finishActivityWhenDone) {
-        int rotation = getRotationFromExif(filePath);
+    protected void setWallpaper(Uri uri, final boolean finishActivityWhenDone) {
+        int rotation = getRotationFromExif(this, uri);
         BitmapCropTask cropTask = new BitmapCropTask(
-                this, filePath, null, rotation, 0, 0, true, false, null);
+                this, uri, null, rotation, 0, 0, true, false, null);
         final Point bounds = cropTask.getImageBounds();
         Runnable onEndCrop = new Runnable() {
             public void run() {

File: src/com/android/launcher3/AllAppsList.java
Patch:
@@ -154,7 +154,7 @@ public void updatePackage(Context context, String packageName, UserHandleCompat
                 final LauncherActivityInfoCompat info = matches.get(i);
                 AppInfo applicationInfo = findApplicationInfoLocked(
                         info.getComponentName().getPackageName(), user,
-                        info.getComponentName().getShortClassName());
+                        info.getComponentName().getClassName());
                 if (applicationInfo == null) {
                     add(new AppInfo(context, info, user, mIconCache, null));
                 } else {

File: src/com/android/launcher3/AllAppsList.java
Patch:
@@ -154,7 +154,7 @@ public void updatePackage(Context context, String packageName, UserHandleCompat
                 final LauncherActivityInfoCompat info = matches.get(i);
                 AppInfo applicationInfo = findApplicationInfoLocked(
                         info.getComponentName().getPackageName(), user,
-                        info.getComponentName().getShortClassName());
+                        info.getComponentName().getClassName());
                 if (applicationInfo == null) {
                     add(new AppInfo(context, info, user, mIconCache, null));
                 } else {

File: src/com/android/launcher3/AllAppsList.java
Patch:
@@ -154,7 +154,7 @@ public void updatePackage(Context context, String packageName, UserHandleCompat
                 final LauncherActivityInfoCompat info = matches.get(i);
                 AppInfo applicationInfo = findApplicationInfoLocked(
                         info.getComponentName().getPackageName(), user,
-                        info.getComponentName().getShortClassName());
+                        info.getComponentName().getClassName());
                 if (applicationInfo == null) {
                     add(new AppInfo(context, info, user, mIconCache, null));
                 } else {

File: src/com/android/launcher3/Folder.java
Patch:
@@ -575,6 +575,7 @@ protected View createAndAddShortcut(ShortcutInfo item) {
         textView.setTextColor(getResources().getColor(R.color.folder_items_text_color));
         textView.setShadowsEnabled(false);
         textView.setGlowColor(getResources().getColor(R.color.folder_items_glow_color));
+        textView.applyState();
 
         textView.setOnClickListener(this);
         textView.setOnLongClickListener(this);

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -61,7 +61,7 @@ public void onDestroy() {
     @Override
     public void onCreate() {
         boolean restoreEnabled = 0 != Settings.Secure.getInt(
-                getContentResolver(), SETTING_RESTORE_ENABLED, 0);
+                getContentResolver(), SETTING_RESTORE_ENABLED, 1);
         if (VERBOSE) Log.v(TAG, "restore is " + (restoreEnabled ? "enabled" : "disabled"));
 
         addHelper(LauncherBackupHelper.LAUNCHER_PREFS_PREFIX,

File: src/com/android/launcher3/AppInfo.java
Patch:
@@ -94,7 +94,7 @@ public AppInfo(Context context, LauncherActivityInfoCompat info, UserHandleCompa
     }
 
     private static int initFlags(LauncherActivityInfoCompat info) {
-        int appFlags = info.getApplicationInfo().flags;
+        int appFlags = info.getApplicationFlags();
         int flags = 0;
         if ((appFlags & android.content.pm.ApplicationInfo.FLAG_SYSTEM) == 0) {
             flags |= DOWNLOADED_FLAG;

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -125,9 +125,6 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         setCompoundDrawables(null, iconDrawable, null, null);
         setCompoundDrawablePadding(grid.iconDrawablePaddingPx);
         setText(info.title);
-        if (info.contentDescription != null) {
-            setContentDescription(info.contentDescription);
-        }
         setTag(info);
         if (info.isPromise()) {
             setState(ShortcutInfo.PACKAGE_STATE_UNKNOWN); // TODO: persist this state somewhere

File: src/com/android/launcher3/Folder.java
Patch:
@@ -571,9 +571,6 @@ protected View createAndAddShortcut(ShortcutInfo item) {
         textView.setCompoundDrawables(null,
                 Utilities.createIconDrawable(item.getIcon(mIconCache)), null, null);
         textView.setText(item.title);
-        if (item.contentDescription != null) {
-            textView.setContentDescription(item.contentDescription);
-        }
         textView.setTag(item);
         textView.setTextColor(getResources().getColor(R.color.folder_items_text_color));
         textView.setShadowsEnabled(false);

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -95,7 +95,7 @@ private LauncherAppState() {
         mBuildInfo = BuildInfo.loadByName(sContext.getString(R.string.build_info_class));
         mModel = new LauncherModel(this, mIconCache, mAppFilter);
         final LauncherAppsCompat launcherApps = LauncherAppsCompat.getInstance(sContext);
-        launcherApps.addOnAppsChangedCallback(mModel);
+        launcherApps.addOnAppsChangedListener(mModel);
 
         // Register intent receivers
         IntentFilter filter = new IntentFilter();
@@ -128,7 +128,7 @@ public void recreateWidgetPreviewDb() {
     public void onTerminate() {
         sContext.unregisterReceiver(mModel);
         final LauncherAppsCompat launcherApps = LauncherAppsCompat.getInstance(sContext);
-        launcherApps.removeOnAppsChangedCallback(mModel);
+        launcherApps.removeOnAppsChangedListener(mModel);
 
         ContentResolver resolver = sContext.getContentResolver();
         resolver.unregisterContentObserver(mFavoritesObserver);

File: src/com/android/launcher3/PagedViewIcon.java
Patch:
@@ -77,9 +77,6 @@ public void applyFromApplicationInfo(AppInfo info, boolean scaleUp,
         setCompoundDrawables(null, icon, null, null);
         setCompoundDrawablePadding(grid.iconDrawablePaddingPx);
         setText(info.title);
-        if (info.contentDescription != null) {
-            setContentDescription(info.contentDescription);
-        }
         setTag(info);
     }
 

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -113,12 +113,10 @@ public void restore() {
         }
     }
 
-    ShortcutInfo(Intent intent, CharSequence title, String contentDescrition,
-            Bitmap icon, UserHandleCompat user) {
+    ShortcutInfo(Intent intent, CharSequence title, Bitmap icon, UserHandleCompat user) {
         this();
         this.intent = intent;
         this.title = title;
-        this.contentDescription = contentDescription;
         mIcon = icon;
         this.user = user;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4781,7 +4781,6 @@ private void updateShortcut(HashMap<ComponentName, AppInfo> appsMap, ItemInfo in
                 shortcutInfo.restore();
                 shortcutInfo.updateIcon(mIconCache);
                 shortcutInfo.title = appInfo.title.toString();
-                shortcutInfo.contentDescription = appInfo.contentDescription;
                 shortcut.applyFromShortcutInfo(shortcutInfo, mIconCache);
             }
         }

File: src/com/android/launcher3/compat/LauncherActivityInfoCompat.java
Patch:
@@ -17,7 +17,6 @@
 package com.android.launcher3.compat;
 
 import android.content.ComponentName;
-import android.content.pm.ApplicationInfo;
 import android.graphics.drawable.Drawable;
 
 public abstract class LauncherActivityInfoCompat {
@@ -29,7 +28,7 @@ public abstract class LauncherActivityInfoCompat {
     public abstract UserHandleCompat getUser();
     public abstract CharSequence getLabel();
     public abstract Drawable getIcon(int density);
-    public abstract ApplicationInfo getApplicationInfo();
+    public abstract int getApplicationFlags();
     public abstract long getFirstInstallTime();
     public abstract Drawable getBadgedIcon(int density);
 }

File: src/com/android/launcher3/compat/LauncherActivityInfoCompatV16.java
Patch:
@@ -18,7 +18,6 @@
 
 import android.content.ComponentName;
 import android.content.Context;
-import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
@@ -76,8 +75,8 @@ public Drawable getIcon(int density) {
         return d;
     }
 
-    public ApplicationInfo getApplicationInfo() {
-        return mActivityInfo.applicationInfo;
+    public int getApplicationFlags() {
+        return mActivityInfo.applicationInfo.flags;
     }
 
     public long getFirstInstallTime() {

File: src/com/android/launcher3/compat/UserManagerCompat.java
Patch:
@@ -41,5 +41,4 @@ public static UserManagerCompat getInstance(Context context) {
     public abstract long getSerialNumberForUser(UserHandleCompat user);
     public abstract UserHandleCompat getUserForSerialNumber(long serialNumber);
     public abstract Drawable getBadgedDrawableForUser(Drawable unbadged, UserHandleCompat user);
-    public abstract String getBadgedLabelForUser(String label, UserHandleCompat user);
 }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -125,6 +125,9 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         setCompoundDrawables(null, iconDrawable, null, null);
         setCompoundDrawablePadding(grid.iconDrawablePaddingPx);
         setText(info.title);
+        if (info.contentDescription != null) {
+            setContentDescription(info.contentDescription);
+        }
         setTag(info);
         if (info.isPromise()) {
             setState(ShortcutInfo.PACKAGE_STATE_UNKNOWN); // TODO: persist this state somewhere

File: src/com/android/launcher3/Folder.java
Patch:
@@ -571,6 +571,9 @@ protected View createAndAddShortcut(ShortcutInfo item) {
         textView.setCompoundDrawables(null,
                 Utilities.createIconDrawable(item.getIcon(mIconCache)), null, null);
         textView.setText(item.title);
+        if (item.contentDescription != null) {
+            textView.setContentDescription(item.contentDescription);
+        }
         textView.setTag(item);
         textView.setTextColor(getResources().getColor(R.color.folder_items_text_color));
         textView.setShadowsEnabled(false);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4674,7 +4674,9 @@ public ItemInfo createShortcutDragInfo(Intent shortcutIntent, CharSequence capti
 
     public ItemInfo createShortcutDragInfo(Intent shortcutIntent, CharSequence caption,
             Bitmap icon, UserHandleCompat user) {
-        return new ShortcutInfo(shortcutIntent, caption, icon, user);
+        UserManagerCompat userManager = UserManagerCompat.getInstance(this);
+        String contentDescription = userManager.getBadgedLabelForUser(caption.toString(), user);
+        return new ShortcutInfo(shortcutIntent, caption, contentDescription, icon, user);
     }
 
     protected void moveWorkspaceToDefaultScreen() {

File: src/com/android/launcher3/PagedViewIcon.java
Patch:
@@ -77,6 +77,9 @@ public void applyFromApplicationInfo(AppInfo info, boolean scaleUp,
         setCompoundDrawables(null, icon, null, null);
         setCompoundDrawablePadding(grid.iconDrawablePaddingPx);
         setText(info.title);
+        if (info.contentDescription != null) {
+            setContentDescription(info.contentDescription);
+        }
         setTag(info);
     }
 

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -113,10 +113,12 @@ public void restore() {
         }
     }
 
-    ShortcutInfo(Intent intent, CharSequence title, Bitmap icon, UserHandleCompat user) {
+    ShortcutInfo(Intent intent, CharSequence title, String contentDescrition,
+            Bitmap icon, UserHandleCompat user) {
         this();
         this.intent = intent;
         this.title = title;
+        this.contentDescription = contentDescription;
         mIcon = icon;
         this.user = user;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4781,6 +4781,7 @@ private void updateShortcut(HashMap<ComponentName, AppInfo> appsMap, ItemInfo in
                 shortcutInfo.restore();
                 shortcutInfo.updateIcon(mIconCache);
                 shortcutInfo.title = appInfo.title.toString();
+                shortcutInfo.contentDescription = appInfo.contentDescription;
                 shortcut.applyFromShortcutInfo(shortcutInfo, mIconCache);
             }
         }

File: src/com/android/launcher3/DragController.java
Patch:
@@ -329,8 +329,8 @@ public void onAppsRemoved(final ArrayList<String> packageNames, ArrayList<AppInf
                     if (dragInfo != null &&
                             dragInfo.intent != null && info != null) {
                         ComponentName cn = dragInfo.intent.getComponent();
-                        boolean isSameComponent = cn.equals(info.componentName) ||
-                                packageNames.contains(cn.getPackageName());
+                        boolean isSameComponent = cn != null && (cn.equals(info.componentName) ||
+                                packageNames.contains(cn.getPackageName()));
                         if (isSameComponent) {
                             cancelDrag();
                             return;

File: src/com/android/launcher3/DragController.java
Patch:
@@ -329,8 +329,8 @@ public void onAppsRemoved(final ArrayList<String> packageNames, ArrayList<AppInf
                     if (dragInfo != null &&
                             dragInfo.intent != null && info != null) {
                         ComponentName cn = dragInfo.intent.getComponent();
-                        boolean isSameComponent = cn.equals(info.componentName) ||
-                                packageNames.contains(cn.getPackageName());
+                        boolean isSameComponent = cn != null && (cn.equals(info.componentName) ||
+                                packageNames.contains(cn.getPackageName()));
                         if (isSameComponent) {
                             cancelDrag();
                             return;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2890,6 +2890,8 @@ public boolean onLongClick(View v) {
                 } else {
                     return false;
                 }
+            } else {
+                return false;
             }
         }
 
@@ -2911,7 +2913,6 @@ public boolean onLongClick(View v) {
                 // User long pressed on empty space
                 mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
                         HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
-                // Disabling reordering until we sort out some issues.
                 if (mWorkspace.isInOverviewMode()) {
                     mWorkspace.startReordering(v);
                 } else {

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2482,7 +2482,7 @@ protected void onEndReordering() {
     public boolean startReordering(View v) {
         int dragViewIndex = indexOfChild(v);
 
-        if (mTouchState != TOUCH_STATE_REST) return false;
+        if (mTouchState != TOUCH_STATE_REST || dragViewIndex == -1) return false;
 
         mTempVisiblePagesRange[0] = 0;
         mTempVisiblePagesRange[1] = getPageCount() - 1;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2937,6 +2937,8 @@ public boolean onLongClick(View v) {
                 } else {
                     return false;
                 }
+            } else {
+                return false;
             }
         }
 
@@ -2958,7 +2960,6 @@ public boolean onLongClick(View v) {
                 // User long pressed on empty space
                 mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
                         HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
-                // Disabling reordering until we sort out some issues.
                 if (mWorkspace.isInOverviewMode()) {
                     mWorkspace.startReordering(v);
                 } else {

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2482,7 +2482,7 @@ protected void onEndReordering() {
     public boolean startReordering(View v) {
         int dragViewIndex = indexOfChild(v);
 
-        if (mTouchState != TOUCH_STATE_REST) return false;
+        if (mTouchState != TOUCH_STATE_REST || dragViewIndex == -1) return false;
 
         mTempVisiblePagesRange[0] = 0;
         mTempVisiblePagesRange[1] = getPageCount() - 1;

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -75,7 +75,6 @@ protected Drawable getCurrentDrawable() {
                 return drawables[i];
             }
         }
-        System.out.println("No drawable, returning null " + this);
         return null;
     }
 

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -75,6 +75,7 @@ protected Drawable getCurrentDrawable() {
                 return drawables[i];
             }
         }
+        System.out.println("No drawable, returning null " + this);
         return null;
     }
 

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -75,7 +75,6 @@ protected Drawable getCurrentDrawable() {
                 return drawables[i];
             }
         }
-        System.out.println("No drawable, returning null " + this);
         return null;
     }
 

File: src/com/android/launcher3/ButtonDropTarget.java
Patch:
@@ -75,6 +75,7 @@ protected Drawable getCurrentDrawable() {
                 return drawables[i];
             }
         }
+        System.out.println("No drawable, returning null " + this);
         return null;
     }
 

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -61,7 +61,7 @@ public void onDestroy() {
     @Override
     public void onCreate() {
         boolean restoreEnabled = 0 != Settings.Secure.getInt(
-                getContentResolver(), SETTING_RESTORE_ENABLED, 1);
+                getContentResolver(), SETTING_RESTORE_ENABLED, 0);
         if (VERBOSE) Log.v(TAG, "restore is " + (restoreEnabled ? "enabled" : "disabled"));
 
         addHelper(LauncherBackupHelper.LAUNCHER_PREFS_PREFIX,

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -61,7 +61,7 @@ public void onDestroy() {
     @Override
     public void onCreate() {
         boolean restoreEnabled = 0 != Settings.Secure.getInt(
-                getContentResolver(), SETTING_RESTORE_ENABLED, 1);
+                getContentResolver(), SETTING_RESTORE_ENABLED, 0);
         if (VERBOSE) Log.v(TAG, "restore is " + (restoreEnabled ? "enabled" : "disabled"));
 
         addHelper(LauncherBackupHelper.LAUNCHER_PREFS_PREFIX,

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -577,6 +577,7 @@ private void restoreIcon(Key key, byte[] buffer, int dataSize, ArrayList<Key> ke
                 }
                 return;
             } else {
+                if (VERBOSE) Log.v(TAG, "saving restored icon as: " + key.name);
                 IconCache.preloadIcon(mContext, ComponentName.unflattenFromString(key.name),
                         icon, res.dpi);
             }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1276,7 +1276,8 @@ public Void doInBackground(Void ... args) {
                 SharedPreferences sp =
                         mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
                 LauncherWallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
-                        sp, mLauncher.getWindowManager(), mWallpaperManager);
+                        sp, mLauncher.getWindowManager(), mWallpaperManager,
+                        mLauncher.overrideWallpaperDimensions());
                 return null;
             }
         }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Void) null);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1276,7 +1276,8 @@ public Void doInBackground(Void ... args) {
                 SharedPreferences sp =
                         mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
                 LauncherWallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
-                        sp, mLauncher.getWindowManager(), mWallpaperManager);
+                        sp, mLauncher.getWindowManager(), mWallpaperManager,
+                        mLauncher.overrideWallpaperDimensions());
                 return null;
             }
         }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Void) null);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -460,7 +460,7 @@ protected void initWorkspace() {
         mFlingThresholdVelocity = (int) (FLING_THRESHOLD_VELOCITY * mDensity);
 
         // Set the wallpaper dimensions when Launcher starts up
-        //setWallpaperDimension();
+        setWallpaperDimension();
     }
 
     private void setupLayoutTransition() {
@@ -1269,7 +1269,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
         return mCustomContentCallbacks;
     }
 
-    public void setWallpaperDimension() {
+    protected void setWallpaperDimension() {
         new AsyncTask<Void, Void, Void>() {
             public Void doInBackground(Void ... args) {
                 String spKey = WallpaperCropActivity.getSharedPreferencesKey();
@@ -1764,7 +1764,7 @@ protected void onResume() {
         // Update wallpaper dimensions if they were changed since last onResume
         // (we also always set the wallpaper dimensions in the constructor)
         if (LauncherAppState.getInstance().hasWallpaperChangedSinceLastCheck()) {
-            //setWallpaperDimension();
+            setWallpaperDimension();
         }
         mWallpaperIsLiveWallpaper = mWallpaperManager.getWallpaperInfo() != null;
         // Force the wallpaper offset steps to be set again, because another app might have changed

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -460,7 +460,7 @@ protected void initWorkspace() {
         mFlingThresholdVelocity = (int) (FLING_THRESHOLD_VELOCITY * mDensity);
 
         // Set the wallpaper dimensions when Launcher starts up
-        setWallpaperDimension();
+        //setWallpaperDimension();
     }
 
     private void setupLayoutTransition() {
@@ -1269,7 +1269,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
         return mCustomContentCallbacks;
     }
 
-    protected void setWallpaperDimension() {
+    public void setWallpaperDimension() {
         new AsyncTask<Void, Void, Void>() {
             public Void doInBackground(Void ... args) {
                 String spKey = WallpaperCropActivity.getSharedPreferencesKey();
@@ -1764,7 +1764,7 @@ protected void onResume() {
         // Update wallpaper dimensions if they were changed since last onResume
         // (we also always set the wallpaper dimensions in the constructor)
         if (LauncherAppState.getInstance().hasWallpaperChangedSinceLastCheck()) {
-            setWallpaperDimension();
+            //setWallpaperDimension();
         }
         mWallpaperIsLiveWallpaper = mWallpaperManager.getWallpaperInfo() != null;
         // Force the wallpaper offset steps to be set again, because another app might have changed

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -460,7 +460,7 @@ protected void initWorkspace() {
         mFlingThresholdVelocity = (int) (FLING_THRESHOLD_VELOCITY * mDensity);
 
         // Set the wallpaper dimensions when Launcher starts up
-        //setWallpaperDimension();
+        setWallpaperDimension();
     }
 
     private void setupLayoutTransition() {
@@ -1269,7 +1269,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
         return mCustomContentCallbacks;
     }
 
-    public void setWallpaperDimension() {
+    protected void setWallpaperDimension() {
         new AsyncTask<Void, Void, Void>() {
             public Void doInBackground(Void ... args) {
                 String spKey = WallpaperCropActivity.getSharedPreferencesKey();
@@ -1764,7 +1764,7 @@ protected void onResume() {
         // Update wallpaper dimensions if they were changed since last onResume
         // (we also always set the wallpaper dimensions in the constructor)
         if (LauncherAppState.getInstance().hasWallpaperChangedSinceLastCheck()) {
-            //setWallpaperDimension();
+            setWallpaperDimension();
         }
         mWallpaperIsLiveWallpaper = mWallpaperManager.getWallpaperInfo() != null;
         // Force the wallpaper offset steps to be set again, because another app might have changed

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -460,7 +460,7 @@ protected void initWorkspace() {
         mFlingThresholdVelocity = (int) (FLING_THRESHOLD_VELOCITY * mDensity);
 
         // Set the wallpaper dimensions when Launcher starts up
-        //setWallpaperDimension();
+        setWallpaperDimension();
     }
 
     private void setupLayoutTransition() {
@@ -1269,7 +1269,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
         return mCustomContentCallbacks;
     }
 
-    public void setWallpaperDimension() {
+    protected void setWallpaperDimension() {
         new AsyncTask<Void, Void, Void>() {
             public Void doInBackground(Void ... args) {
                 String spKey = WallpaperCropActivity.getSharedPreferencesKey();
@@ -1764,7 +1764,7 @@ protected void onResume() {
         // Update wallpaper dimensions if they were changed since last onResume
         // (we also always set the wallpaper dimensions in the constructor)
         if (LauncherAppState.getInstance().hasWallpaperChangedSinceLastCheck()) {
-            //setWallpaperDimension();
+            setWallpaperDimension();
         }
         mWallpaperIsLiveWallpaper = mWallpaperManager.getWallpaperInfo() != null;
         // Force the wallpaper offset steps to be set again, because another app might have changed

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -460,7 +460,7 @@ protected void initWorkspace() {
         mFlingThresholdVelocity = (int) (FLING_THRESHOLD_VELOCITY * mDensity);
 
         // Set the wallpaper dimensions when Launcher starts up
-        setWallpaperDimension();
+        //setWallpaperDimension();
     }
 
     private void setupLayoutTransition() {
@@ -1269,7 +1269,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
         return mCustomContentCallbacks;
     }
 
-    protected void setWallpaperDimension() {
+    public void setWallpaperDimension() {
         new AsyncTask<Void, Void, Void>() {
             public Void doInBackground(Void ... args) {
                 String spKey = WallpaperCropActivity.getSharedPreferencesKey();
@@ -1764,7 +1764,7 @@ protected void onResume() {
         // Update wallpaper dimensions if they were changed since last onResume
         // (we also always set the wallpaper dimensions in the constructor)
         if (LauncherAppState.getInstance().hasWallpaperChangedSinceLastCheck()) {
-            setWallpaperDimension();
+            //setWallpaperDimension();
         }
         mWallpaperIsLiveWallpaper = mWallpaperManager.getWallpaperInfo() != null;
         // Force the wallpaper offset steps to be set again, because another app might have changed

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -460,7 +460,7 @@ protected void initWorkspace() {
         mFlingThresholdVelocity = (int) (FLING_THRESHOLD_VELOCITY * mDensity);
 
         // Set the wallpaper dimensions when Launcher starts up
-        setWallpaperDimension();
+        //setWallpaperDimension();
     }
 
     private void setupLayoutTransition() {
@@ -1269,7 +1269,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
         return mCustomContentCallbacks;
     }
 
-    protected void setWallpaperDimension() {
+    public void setWallpaperDimension() {
         new AsyncTask<Void, Void, Void>() {
             public Void doInBackground(Void ... args) {
                 String spKey = WallpaperCropActivity.getSharedPreferencesKey();
@@ -1764,7 +1764,7 @@ protected void onResume() {
         // Update wallpaper dimensions if they were changed since last onResume
         // (we also always set the wallpaper dimensions in the constructor)
         if (LauncherAppState.getInstance().hasWallpaperChangedSinceLastCheck()) {
-            setWallpaperDimension();
+            //setWallpaperDimension();
         }
         mWallpaperIsLiveWallpaper = mWallpaperManager.getWallpaperInfo() != null;
         // Force the wallpaper offset steps to be set again, because another app might have changed

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4434,6 +4434,9 @@ protected boolean isLauncherPreinstalled() {
         }
     }
 
+    protected boolean shouldClingFocusHotseatApp() {
+        return false;
+    }
     protected String getFirstRunClingSearchBarHint() {
         return "";
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1275,8 +1275,8 @@ public Void doInBackground(Void ... args) {
                 String spKey = WallpaperCropActivity.getSharedPreferencesKey();
                 SharedPreferences sp =
                         mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
-                //LauncherWallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
-                //        sp, mLauncher.getWindowManager(), mWallpaperManager);
+                LauncherWallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
+                        sp, mLauncher.getWindowManager(), mWallpaperManager);
                 return null;
             }
         }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Void) null);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1275,8 +1275,8 @@ public Void doInBackground(Void ... args) {
                 String spKey = WallpaperCropActivity.getSharedPreferencesKey();
                 SharedPreferences sp =
                         mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
-                //LauncherWallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
-                //        sp, mLauncher.getWindowManager(), mWallpaperManager);
+                LauncherWallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
+                        sp, mLauncher.getWindowManager(), mWallpaperManager);
                 return null;
             }
         }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Void) null);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1275,8 +1275,8 @@ public Void doInBackground(Void ... args) {
                 String spKey = WallpaperCropActivity.getSharedPreferencesKey();
                 SharedPreferences sp =
                         mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
-                LauncherWallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
-                        sp, mLauncher.getWindowManager(), mWallpaperManager);
+                //LauncherWallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
+                //        sp, mLauncher.getWindowManager(), mWallpaperManager);
                 return null;
             }
         }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Void) null);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1275,8 +1275,8 @@ public Void doInBackground(Void ... args) {
                 String spKey = WallpaperCropActivity.getSharedPreferencesKey();
                 SharedPreferences sp =
                         mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
-                LauncherWallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
-                        sp, mLauncher.getWindowManager(), mWallpaperManager);
+                //LauncherWallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
+                //        sp, mLauncher.getWindowManager(), mWallpaperManager);
                 return null;
             }
         }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, (Void) null);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4429,7 +4429,9 @@ public void dismissWorkspaceCling(View v) {
     public void dismissFolderCling(View v) {
         mLauncherClings.dismissFolderCling(v);
     }
-
+    public void markFolderClingDismissedIfNecessary() {
+        mLauncherClings.markFolderClingDismissedIfNecessary();
+    }
 
     /**
      * To be overridden by subclasses to indicate that there is an activity to launch

File: src/com/android/launcher3/AppInfo.java
Patch:
@@ -87,6 +87,7 @@ public AppInfo(Context context, LauncherActivityInfoCompat info, UserHandleCompa
         intent = new Intent(Intent.ACTION_MAIN);
         intent.addCategory(Intent.CATEGORY_LAUNCHER);
         intent.setComponent(info.getComponentName());
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
         long serialNumber = UserManagerCompat.getInstance(context).getSerialNumberForUser(user);
         intent.putExtra(EXTRA_PROFILE, serialNumber);
         this.user = user;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2629,7 +2629,7 @@ boolean startApplicationUninstallActivity(ComponentName componentName, int flags
     }
 
     boolean startActivity(View v, Intent intent, Object tag) {
-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
+        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         try {
             // Only launch using the new animation if the shortcut has not opted out (this is a
             // private contract between launcher and may be ignored in the future).

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -411,8 +411,6 @@ public void deferRemoveExtraEmptyScreen() {
     }
 
     public void onDragEnd() {
-        System.out.println("onDrag end workspace");
-
         if (!mDeferRemoveExtraEmptyScreen) {
             removeExtraEmptyScreen(true, mDragSourceInternal != null);
         }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -411,8 +411,6 @@ public void deferRemoveExtraEmptyScreen() {
     }
 
     public void onDragEnd() {
-        System.out.println("onDrag end workspace");
-
         if (!mDeferRemoveExtraEmptyScreen) {
             removeExtraEmptyScreen(true, mDragSourceInternal != null);
         }

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -114,7 +114,7 @@ private LauncherAppState() {
         resolver.registerContentObserver(LauncherSettings.Favorites.CONTENT_URI, true,
                 mFavoritesObserver);
     }
-    
+
     public void recreateWidgetPreviewDb() {
         if (mWidgetPreviewCacheDb != null) {
             mWidgetPreviewCacheDb.close();
@@ -127,6 +127,8 @@ public void recreateWidgetPreviewDb() {
      */
     public void onTerminate() {
         sContext.unregisterReceiver(mModel);
+        final LauncherAppsCompat launcherApps = LauncherAppsCompat.getInstance(sContext);
+        launcherApps.removeOnAppsChangedListener(mModel);
 
         ContentResolver resolver = sContext.getContentResolver();
         resolver.unregisterContentObserver(mFavoritesObserver);

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -902,7 +902,7 @@ static ArrayList<ItemInfo> getItemsInLocalCoordinates(Context context) {
                 item.container = c.getInt(containerIndex);
                 item.itemType = c.getInt(itemTypeIndex);
                 item.screenId = c.getInt(screenIndex);
-                int serialNumber = c.getInt(profileIdIndex);
+                long serialNumber = c.getInt(profileIdIndex);
                 item.user = userManager.getUserForSerialNumber(serialNumber);
                 // Skip if user has been deleted.
                 if (item.user != null) {
@@ -1894,7 +1894,7 @@ private boolean loadWorkspace() {
                             case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
                                 id = c.getLong(idIndex);
                                 intentDescription = c.getString(intentIndex);
-                                int serialNumber = c.getInt(profileIdIndex);
+                                long serialNumber = c.getInt(profileIdIndex);
                                 user = mUserManager.getUserForSerialNumber(serialNumber);
                                 if (user == null) {
                                     // User has been deleted remove the item.

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -114,7 +114,7 @@ private LauncherAppState() {
         resolver.registerContentObserver(LauncherSettings.Favorites.CONTENT_URI, true,
                 mFavoritesObserver);
     }
-    
+
     public void recreateWidgetPreviewDb() {
         if (mWidgetPreviewCacheDb != null) {
             mWidgetPreviewCacheDb.close();
@@ -127,6 +127,8 @@ public void recreateWidgetPreviewDb() {
      */
     public void onTerminate() {
         sContext.unregisterReceiver(mModel);
+        final LauncherAppsCompat launcherApps = LauncherAppsCompat.getInstance(sContext);
+        launcherApps.removeOnAppsChangedListener(mModel);
 
         ContentResolver resolver = sContext.getContentResolver();
         resolver.unregisterContentObserver(mFavoritesObserver);

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -902,7 +902,7 @@ static ArrayList<ItemInfo> getItemsInLocalCoordinates(Context context) {
                 item.container = c.getInt(containerIndex);
                 item.itemType = c.getInt(itemTypeIndex);
                 item.screenId = c.getInt(screenIndex);
-                int serialNumber = c.getInt(profileIdIndex);
+                long serialNumber = c.getInt(profileIdIndex);
                 item.user = userManager.getUserForSerialNumber(serialNumber);
                 // Skip if user has been deleted.
                 if (item.user != null) {
@@ -1894,7 +1894,7 @@ private boolean loadWorkspace() {
                             case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
                                 id = c.getLong(idIndex);
                                 intentDescription = c.getString(intentIndex);
-                                int serialNumber = c.getInt(profileIdIndex);
+                                long serialNumber = c.getInt(profileIdIndex);
                                 user = mUserManager.getUserForSerialNumber(serialNumber);
                                 if (user == null) {
                                     // User has been deleted remove the item.

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1256,7 +1256,7 @@ public void onReceive(Context context, Intent intent) {
         }
     }
 
-    private void forceReload() {
+    void forceReload() {
         resetLoadedState(true, true);
 
         // Do this here because if the launcher activity is running it will be restarted.

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -126,7 +126,7 @@ public class Workspace extends SmoothPagedView
     private static boolean sAccessibilityEnabled;
 
     // The screen id used for the empty screen always present to the right.
-    private final static long EXTRA_EMPTY_SCREEN_ID = -201;
+    final static long EXTRA_EMPTY_SCREEN_ID = -201;
     private final static long CUSTOM_CONTENT_SCREEN_ID = -301;
 
     private HashMap<Long, CellLayout> mWorkspaceScreens = new HashMap<Long, CellLayout>();

File: src/com/android/launcher3/AppInfo.java
Patch:
@@ -26,6 +26,7 @@
 import android.util.Log;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 
 /**
@@ -137,7 +138,8 @@ public String toString() {
         return "ApplicationInfo(title=" + title.toString() + " id=" + this.id
                 + " type=" + this.itemType + " container=" + this.container
                 + " screen=" + screenId + " cellX=" + cellX + " cellY=" + cellY
-                + " spanX=" + spanX + " spanY=" + spanY + " dropPos=" + dropPos + ")";
+                + " spanX=" + spanX + " spanY=" + spanY + " dropPos=" + Arrays.toString(dropPos)
+                + ")";
     }
 
     public static void dumpApplicationInfoList(String tag, String label, ArrayList<AppInfo> list) {

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -19,6 +19,7 @@
 import android.content.ContentValues;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 
 /**
  * Represents a folder containing shortcuts or apps.
@@ -114,6 +115,6 @@ public String toString() {
         return "FolderInfo(id=" + this.id + " type=" + this.itemType
                 + " container=" + this.container + " screen=" + screenId
                 + " cellX=" + cellX + " cellY=" + cellY + " spanX=" + spanX
-                + " spanY=" + spanY + " dropPos=" + dropPos + ")";
+                + " spanY=" + spanY + " dropPos=" + Arrays.toString(dropPos) + ")";
     }
 }

File: src/com/android/launcher3/ItemInfo.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.util.Arrays;
 
 /**
  * Represents an item in the launcher.
@@ -182,6 +183,6 @@ void unbind() {
     public String toString() {
         return "Item(id=" + this.id + " type=" + this.itemType + " container=" + this.container
             + " screen=" + screenId + " cellX=" + cellX + " cellY=" + cellY + " spanX=" + spanX
-            + " spanY=" + spanY + " dropPos=" + dropPos + ")";
+            + " spanY=" + spanY + " dropPos=" + Arrays.toString(dropPos) + ")";
     }
 }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -27,6 +27,7 @@
 import android.util.Log;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 
 /**
  * Represents a launchable icon on the workspaces and in folders.
@@ -226,7 +227,7 @@ public String toString() {
         return "ShortcutInfo(title=" + title.toString() + "intent=" + intent + "id=" + this.id
                 + " type=" + this.itemType + " container=" + this.container + " screen=" + screenId
                 + " cellX=" + cellX + " cellY=" + cellY + " spanX=" + spanX + " spanY=" + spanY
-                + " dropPos=" + dropPos + ")";
+                + " dropPos=" + Arrays.toString(dropPos) + ")";
     }
 
     public static void dumpShortcutInfoList(String tag, String label,

File: src/com/android/launcher3/AppInfo.java
Patch:
@@ -26,6 +26,7 @@
 import android.util.Log;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashMap;
 
 /**
@@ -137,7 +138,8 @@ public String toString() {
         return "ApplicationInfo(title=" + title.toString() + " id=" + this.id
                 + " type=" + this.itemType + " container=" + this.container
                 + " screen=" + screenId + " cellX=" + cellX + " cellY=" + cellY
-                + " spanX=" + spanX + " spanY=" + spanY + " dropPos=" + dropPos + ")";
+                + " spanX=" + spanX + " spanY=" + spanY + " dropPos=" + Arrays.toString(dropPos)
+                + ")";
     }
 
     public static void dumpApplicationInfoList(String tag, String label, ArrayList<AppInfo> list) {

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -19,6 +19,7 @@
 import android.content.ContentValues;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 
 /**
  * Represents a folder containing shortcuts or apps.
@@ -114,6 +115,6 @@ public String toString() {
         return "FolderInfo(id=" + this.id + " type=" + this.itemType
                 + " container=" + this.container + " screen=" + screenId
                 + " cellX=" + cellX + " cellY=" + cellY + " spanX=" + spanX
-                + " spanY=" + spanY + " dropPos=" + dropPos + ")";
+                + " spanY=" + spanY + " dropPos=" + Arrays.toString(dropPos) + ")";
     }
 }

File: src/com/android/launcher3/ItemInfo.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
+import java.util.Arrays;
 
 /**
  * Represents an item in the launcher.
@@ -182,6 +183,6 @@ void unbind() {
     public String toString() {
         return "Item(id=" + this.id + " type=" + this.itemType + " container=" + this.container
             + " screen=" + screenId + " cellX=" + cellX + " cellY=" + cellY + " spanX=" + spanX
-            + " spanY=" + spanY + " dropPos=" + dropPos + ")";
+            + " spanY=" + spanY + " dropPos=" + Arrays.toString(dropPos) + ")";
     }
 }

File: src/com/android/launcher3/ShortcutInfo.java
Patch:
@@ -27,6 +27,7 @@
 import android.util.Log;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 
 /**
  * Represents a launchable icon on the workspaces and in folders.
@@ -226,7 +227,7 @@ public String toString() {
         return "ShortcutInfo(title=" + title.toString() + "intent=" + intent + "id=" + this.id
                 + " type=" + this.itemType + " container=" + this.container + " screen=" + screenId
                 + " cellX=" + cellX + " cellY=" + cellY + " spanX=" + spanX + " spanY=" + spanY
-                + " dropPos=" + dropPos + ")";
+                + " dropPos=" + Arrays.toString(dropPos) + ")";
     }
 
     public static void dumpShortcutInfoList(String tag, String label,

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -30,7 +30,7 @@ public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static final String TAG = "LauncherAppState";
     private static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
 
-    private static final boolean DEBUG = false;
+    private static final boolean DEBUG = true;  // STOPSHIP(cwren) temporary for debugging
 
     private final AppFilter mAppFilter;
     private final BuildInfo mBuildInfo;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -69,12 +69,13 @@
  */
 public class LauncherModel extends BroadcastReceiver {
     static final boolean DEBUG_LOADERS = false;
+    private static final boolean DEBUG_RECEIVER = true;  // STOPSHIP(cwren) temporary for debugging
+
     static final String TAG = "Launcher.Model";
 
     // true = use a "More Apps" folder for non-workspace apps on upgrade
     // false = strew non-workspace apps across the workspace on upgrade
     public static final boolean UPGRADE_USE_MORE_APPS_FOLDER = false;
-
     public static final int LOADER_FLAG_NONE = 0;
     public static final int LOADER_FLAG_CLEAR_WORKSPACE = 1 << 0;
     public static final int LOADER_FLAG_MIGRATE_SHORTCUTS = 1 << 1;
@@ -1161,7 +1162,7 @@ public void initialize(Callbacks callbacks) {
      */
     @Override
     public void onReceive(Context context, Intent intent) {
-        if (DEBUG_LOADERS) Log.d(TAG, "onReceive intent=" + intent);
+        if (DEBUG_RECEIVER) Log.d(TAG, "onReceive intent=" + intent);
 
         final String action = intent.getAction();
 

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -30,7 +30,7 @@ public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static final String TAG = "LauncherAppState";
     private static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
 
-    private static final boolean DEBUG = false;
+    private static final boolean DEBUG = true;  // STOPSHIP(cwren) temporary for debugging
 
     private final AppFilter mAppFilter;
     private final BuildInfo mBuildInfo;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -69,12 +69,13 @@
  */
 public class LauncherModel extends BroadcastReceiver {
     static final boolean DEBUG_LOADERS = false;
+    private static final boolean DEBUG_RECEIVER = true;  // STOPSHIP(cwren) temporary for debugging
+
     static final String TAG = "Launcher.Model";
 
     // true = use a "More Apps" folder for non-workspace apps on upgrade
     // false = strew non-workspace apps across the workspace on upgrade
     public static final boolean UPGRADE_USE_MORE_APPS_FOLDER = false;
-
     public static final int LOADER_FLAG_NONE = 0;
     public static final int LOADER_FLAG_CLEAR_WORKSPACE = 1 << 0;
     public static final int LOADER_FLAG_MIGRATE_SHORTCUTS = 1 << 1;
@@ -1161,7 +1162,7 @@ public void initialize(Callbacks callbacks) {
      */
     @Override
     public void onReceive(Context context, Intent intent) {
-        if (DEBUG_LOADERS) Log.d(TAG, "onReceive intent=" + intent);
+        if (DEBUG_RECEIVER) Log.d(TAG, "onReceive intent=" + intent);
 
         final String action = intent.getAction();
 

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -30,7 +30,7 @@ public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static final String TAG = "LauncherAppState";
     private static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
 
-    private static final boolean DEBUG = true; // TODO STOPSHIP: set this to false
+    private static final boolean DEBUG = false;
 
     private final AppFilter mAppFilter;
     private final BuildInfo mBuildInfo;

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -30,7 +30,7 @@ public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static final String TAG = "LauncherAppState";
     private static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
 
-    private static final boolean DEBUG = true; // TODO STOPSHIP: set this to false
+    private static final boolean DEBUG = false;
 
     private final AppFilter mAppFilter;
     private final BuildInfo mBuildInfo;

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -30,7 +30,7 @@ public class LauncherAppState implements DeviceProfile.DeviceProfileCallbacks {
     private static final String TAG = "LauncherAppState";
     private static final String SHARED_PREFERENCES_KEY = "com.android.launcher3.prefs";
 
-    private static final boolean DEBUG = true; // TODO STOPSHIP: set this to false
+    private static final boolean DEBUG = false;
 
     private final AppFilter mAppFilter;
     private final BuildInfo mBuildInfo;

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -804,7 +804,9 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 // which no longer exist. Since this can cause other problems, and since the user
                 // will never see these items anyway, we use database upgrade as an opportunity to
                 // clean things up.
-                removeOrphanedItems(db);
+
+                // TODO: this needs to be fixed, currently causes data loss.
+                //removeOrphanedItems(db);
                 version = 18;
             }
 

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -804,7 +804,9 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 // which no longer exist. Since this can cause other problems, and since the user
                 // will never see these items anyway, we use database upgrade as an opportunity to
                 // clean things up.
-                removeOrphanedItems(db);
+
+                // TODO: this needs to be fixed, currently causes data loss.
+                //removeOrphanedItems(db);
                 version = 18;
             }
 

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -804,7 +804,9 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 // which no longer exist. Since this can cause other problems, and since the user
                 // will never see these items anyway, we use database upgrade as an opportunity to
                 // clean things up.
-                removeOrphanedItems(db);
+
+                // TODO: this needs to be fixed, currently causes data loss.
+                //removeOrphanedItems(db);
                 version = 18;
             }
 

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -804,7 +804,9 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
                 // which no longer exist. Since this can cause other problems, and since the user
                 // will never see these items anyway, we use database upgrade as an opportunity to
                 // clean things up.
-                removeOrphanedItems(db);
+
+                // TODO: this needs to be fixed, currently causes data loss.
+                //removeOrphanedItems(db);
                 version = 18;
             }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -214,7 +214,7 @@ private enum State { NONE, WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOAD
     public static final int EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT = 300;
     public static final int EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT_FOLDER_CLOSE = 400;
     private static final int ON_ACTIVITY_RESULT_ANIMATION_DELAY = 500;
-    private static final int ACTIVITY_START_DELAY = 500;
+    private static final int ACTIVITY_START_DELAY = 800;
 
     private static final Object sLock = new Object();
     private static int sScreen = DEFAULT_SCREEN;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -214,7 +214,7 @@ private enum State { NONE, WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOAD
     public static final int EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT = 300;
     public static final int EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT_FOLDER_CLOSE = 400;
     private static final int ON_ACTIVITY_RESULT_ANIMATION_DELAY = 500;
-    private static final int ACTIVITY_START_DELAY = 500;
+    private static final int ACTIVITY_START_DELAY = 800;
 
     private static final Object sLock = new Object();
     private static int sScreen = DEFAULT_SCREEN;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -214,7 +214,7 @@ private enum State { NONE, WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOAD
     public static final int EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT = 300;
     public static final int EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT_FOLDER_CLOSE = 400;
     private static final int ON_ACTIVITY_RESULT_ANIMATION_DELAY = 500;
-    private static final int ACTIVITY_START_DELAY = 500;
+    private static final int ACTIVITY_START_DELAY = 800;
 
     private static final Object sLock = new Object();
     private static int sScreen = DEFAULT_SCREEN;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -214,7 +214,7 @@ private enum State { NONE, WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOAD
     public static final int EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT = 300;
     public static final int EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT_FOLDER_CLOSE = 400;
     private static final int ON_ACTIVITY_RESULT_ANIMATION_DELAY = 500;
-    private static final int ACTIVITY_START_DELAY = 500;
+    private static final int ACTIVITY_START_DELAY = 800;
 
     private static final Object sLock = new Object();
     private static int sScreen = DEFAULT_SCREEN;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -971,14 +971,15 @@ static void addItemToDatabase(Context context, final ItemInfo item, final long c
         values.put(LauncherSettings.Favorites._ID, item.id);
         item.updateValuesWithCoordinates(values, item.cellX, item.cellY);
 
+        final StackTraceElement[] stackTrace = new Throwable().getStackTrace();
         Runnable r = new Runnable() {
             public void run() {
                 cr.insert(notify ? LauncherSettings.Favorites.CONTENT_URI :
                         LauncherSettings.Favorites.CONTENT_URI_NO_NOTIFICATION, values);
 
                 // Lock on mBgLock *after* the db operation
                 synchronized (sBgLock) {
-                    checkItemInfoLocked(item.id, item, null);
+                    checkItemInfoLocked(item.id, item, stackTrace);
                     sBgItemsIdMap.put(item.id, item);
                     switch (item.itemType) {
                         case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -971,14 +971,15 @@ static void addItemToDatabase(Context context, final ItemInfo item, final long c
         values.put(LauncherSettings.Favorites._ID, item.id);
         item.updateValuesWithCoordinates(values, item.cellX, item.cellY);
 
+        final StackTraceElement[] stackTrace = new Throwable().getStackTrace();
         Runnable r = new Runnable() {
             public void run() {
                 cr.insert(notify ? LauncherSettings.Favorites.CONTENT_URI :
                         LauncherSettings.Favorites.CONTENT_URI_NO_NOTIFICATION, values);
 
                 // Lock on mBgLock *after* the db operation
                 synchronized (sBgLock) {
-                    checkItemInfoLocked(item.id, item, null);
+                    checkItemInfoLocked(item.id, item, stackTrace);
                     sBgItemsIdMap.put(item.id, item);
                     switch (item.itemType) {
                         case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -971,14 +971,15 @@ static void addItemToDatabase(Context context, final ItemInfo item, final long c
         values.put(LauncherSettings.Favorites._ID, item.id);
         item.updateValuesWithCoordinates(values, item.cellX, item.cellY);
 
+        final StackTraceElement[] stackTrace = new Throwable().getStackTrace();
         Runnable r = new Runnable() {
             public void run() {
                 cr.insert(notify ? LauncherSettings.Favorites.CONTENT_URI :
                         LauncherSettings.Favorites.CONTENT_URI_NO_NOTIFICATION, values);
 
                 // Lock on mBgLock *after* the db operation
                 synchronized (sBgLock) {
-                    checkItemInfoLocked(item.id, item, null);
+                    checkItemInfoLocked(item.id, item, stackTrace);
                     sBgItemsIdMap.put(item.id, item);
                     switch (item.itemType) {
                         case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -193,7 +193,7 @@ public interface ItemInfoFilter {
 
         mAppsCanBeOnRemoveableStorage = Environment.isExternalStorageRemovable();
         ContentProviderClient client = contentResolver.acquireContentProviderClient(
-                LauncherSettings.Favorites.OLD_CONTENT_URI);
+                Uri.parse(context.getString(R.string.old_launcher_provider_uri)));
         mOldContentProviderExists = (client != null);
         if (client != null) {
             client.release();

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -329,7 +329,7 @@ synchronized public void loadDefaultFavoritesIfNecessary(int origWorkspaceResId)
 
     public void migrateLauncher2Shortcuts() {
         mOpenHelper.migrateLauncher2Shortcuts(mOpenHelper.getWritableDatabase(),
-                LauncherSettings.Favorites.OLD_CONTENT_URI);
+                Uri.parse(getContext().getString(R.string.old_launcher_provider_uri)));
     }
 
     private static int getDefaultWorkspaceResourceId() {
@@ -466,7 +466,7 @@ public void onRow(ContentValues values) {
                         "/old_favorites?notify=true");
                 if (!convertDatabase(db, uri, permuteScreensCb, true)) {
                     // Try and upgrade from the Launcher2 db
-                    uri = LauncherSettings.Favorites.OLD_CONTENT_URI;
+                    uri = Uri.parse(mContext.getString(R.string.old_launcher_provider_uri));
                     if (!convertDatabase(db, uri, permuteScreensCb, false)) {
                         // If we fail, then set a flag to load the default workspace
                         setFlagEmptyDbCreated();

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -971,14 +971,15 @@ static void addItemToDatabase(Context context, final ItemInfo item, final long c
         values.put(LauncherSettings.Favorites._ID, item.id);
         item.updateValuesWithCoordinates(values, item.cellX, item.cellY);
 
+        final StackTraceElement[] stackTrace = new Throwable().getStackTrace();
         Runnable r = new Runnable() {
             public void run() {
                 cr.insert(notify ? LauncherSettings.Favorites.CONTENT_URI :
                         LauncherSettings.Favorites.CONTENT_URI_NO_NOTIFICATION, values);
 
                 // Lock on mBgLock *after* the db operation
                 synchronized (sBgLock) {
-                    checkItemInfoLocked(item.id, item, null);
+                    checkItemInfoLocked(item.id, item, stackTrace);
                     sBgItemsIdMap.put(item.id, item);
                     switch (item.itemType) {
                         case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -828,7 +828,6 @@ public void run() {
                 }
             });
         } else {
-            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
             mLauncher.unlockScreenOrientation(false);
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2632,6 +2632,9 @@ public void beginDragShared(View child, DragSource source) {
         if (child instanceof BubbleTextView) {
             BubbleTextView icon = (BubbleTextView) child;
             icon.clearPressedOrFocusedBackground();
+        } else if (child instanceof FolderIcon) {
+            // Dismiss the folder cling if we haven't already
+            mLauncher.getLauncherClings().markFolderClingDismissed();
         }
 
         if (child.getTag() == null || !(child.getTag() instanceof ItemInfo)) {

File: WallpaperPicker/src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -122,7 +122,7 @@ public void onClick(WallpaperPickerActivity a) {
             Intent preview = new Intent(WallpaperManager.ACTION_CHANGE_LIVE_WALLPAPER);
             preview.putExtra(WallpaperManager.EXTRA_LIVE_WALLPAPER_COMPONENT,
                     mInfo.getComponent());
-            a.onLiveWallpaperPickerLaunch();
+            a.onLiveWallpaperPickerLaunch(mInfo);
             a.startActivityForResultSafely(preview, WallpaperPickerActivity.PICK_LIVE_WALLPAPER);
         }
     }

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -75,7 +75,7 @@ public class WallpaperCropActivity extends Activity {
 
     protected CropView mCropView;
     protected Uri mUri;
-    private View mSetWallpaperButton;
+    protected View mSetWallpaperButton;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -117,7 +117,7 @@ public void onClick(View v) {
         // Load image in background
         final BitmapRegionTileSource.UriBitmapSource bitmapSource =
                 new BitmapRegionTileSource.UriBitmapSource(this, imageUri, 1024);
-        mSetWallpaperButton.setVisibility(View.INVISIBLE);
+        mSetWallpaperButton.setEnabled(false);
         Runnable onLoad = new Runnable() {
             public void run() {
                 if (bitmapSource.getLoadingState() != BitmapSource.State.LOADED) {
@@ -126,7 +126,7 @@ public void run() {
                             Toast.LENGTH_LONG).show();
                     finish();
                 } else {
-                    mSetWallpaperButton.setVisibility(View.VISIBLE);
+                    mSetWallpaperButton.setEnabled(true);
                 }
             }
         };

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -828,6 +828,7 @@ public void run() {
                 }
             });
         } else {
+            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
             mLauncher.unlockScreenOrientation(false);
         }
     }

File: src/com/android/launcher3/AllAppsList.java
Patch:
@@ -32,7 +32,7 @@
  */
 class AllAppsList {
     public static final int DEFAULT_APPLICATIONS_NUMBER = 42;
-    
+
     /** The list off all apps. */
     public ArrayList<AppInfo> data =
             new ArrayList<AppInfo>(DEFAULT_APPLICATIONS_NUMBER);
@@ -115,8 +115,7 @@ public void removePackage(String packageName) {
                 data.remove(i);
             }
         }
-        // This is more aggressive than it needs to be.
-        mIconCache.flush();
+        mIconCache.remove(packageName);
     }
 
     /**

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -304,7 +304,7 @@ else if (exists && !allowDuplicate) {
             // Add the new apps to the model and bind them
             if (!addShortcuts.isEmpty()) {
                 LauncherAppState app = LauncherAppState.getInstance();
-                app.getModel().addAndBindAddedApps(context, addShortcuts, new ArrayList<AppInfo>());
+                app.getModel().addAndBindAddedWorkspaceApps(context, addShortcuts);
             }
         }
     }

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -193,7 +193,7 @@ public void performBackup(ParcelFileDescriptor oldState, BackupDataOutput data,
             Log.e(TAG, "launcher backup has failed", e);
         }
 
-        out.key = keys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = keys.toArray(new BackupProtos.Key[keys.size()]);
         writeJournal(newState, out);
         Log.v(TAG, "onBackup: wrote " + out.bytes + "b in " + out.rows + " rows.");
     }
@@ -266,7 +266,7 @@ public void writeNewStateDescription(ParcelFileDescriptor newState) {
         // will catch any changes the restore process might have made
         Journal out = new Journal();
         out.t = 0;
-        out.key = mKeys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = mKeys.toArray(new BackupProtos.Key[mKeys.size()]);
         writeJournal(newState, out);
         Log.v(TAG, "onRestore: read " + mKeys.size() + " rows");
         mKeys.clear();

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -461,7 +461,8 @@ private void backupIcons(Journal in, BackupDataOutput data, Journal out,
 
         int startRows = out.rows;
         if (DEBUG) Log.d(TAG, "starting here: " + startRows);
-        String where = Favorites.ITEM_TYPE + "=" + Favorites.ITEM_TYPE_APPLICATION;
+        String where = Favorites.ITEM_TYPE + "=" + Favorites.ITEM_TYPE_APPLICATION + " OR " +
+                Favorites.ITEM_TYPE + "=" + Favorites.ITEM_TYPE_SHORTCUT;
         Cursor cursor = cr.query(Favorites.CONTENT_URI, FAVORITE_PROJECTION,
                 where, null, null);
         Set<String> currentIds = new HashSet<String>(cursor.getCount());

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -61,7 +61,7 @@ public void onDestroy() {
     @Override
     public void onCreate() {
         boolean restoreEnabled = 0 != Settings.Secure.getInt(
-                getContentResolver(), SETTING_RESTORE_ENABLED, 0);
+                getContentResolver(), SETTING_RESTORE_ENABLED, 1);
         if (VERBOSE) Log.v(TAG, "restore is " + (restoreEnabled ? "enabled" : "disabled"));
 
         addHelper(LauncherBackupHelper.LAUNCHER_PREFS_PREFIX,

File: src/com/android/launcher3/LauncherBackupAgentHelper.java
Patch:
@@ -61,7 +61,7 @@ public void onDestroy() {
     @Override
     public void onCreate() {
         boolean restoreEnabled = 0 != Settings.Secure.getInt(
-                getContentResolver(), SETTING_RESTORE_ENABLED, 0);
+                getContentResolver(), SETTING_RESTORE_ENABLED, 1);
         if (VERBOSE) Log.v(TAG, "restore is " + (restoreEnabled ? "enabled" : "disabled"));
 
         addHelper(LauncherBackupHelper.LAUNCHER_PREFS_PREFIX,

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1215,7 +1215,7 @@ protected void notifyPageSwitchListener() {
         if (hasCustomContent() && getNextPage() == 0 && !mCustomContentShowing) {
             mCustomContentShowing = true;
             if (mCustomContentCallbacks != null) {
-                mCustomContentCallbacks.onShow();
+                mCustomContentCallbacks.onShow(false);
                 mCustomContentShowTime = System.currentTimeMillis();
                 mLauncher.updateVoiceButtonProxyVisible(false);
             }

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -828,7 +828,6 @@ public void run() {
                 }
             });
         } else {
-            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
             mLauncher.unlockScreenOrientation(false);
         }
     }

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -828,7 +828,6 @@ public void run() {
                 }
             });
         } else {
-            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
             mLauncher.unlockScreenOrientation(false);
         }
     }

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -828,7 +828,6 @@ public void run() {
                 }
             });
         } else {
-            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
             mLauncher.unlockScreenOrientation(false);
         }
     }

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -828,7 +828,6 @@ public void run() {
                 }
             });
         } else {
-            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
             mLauncher.unlockScreenOrientation(false);
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2632,6 +2632,9 @@ public void beginDragShared(View child, DragSource source) {
         if (child instanceof BubbleTextView) {
             BubbleTextView icon = (BubbleTextView) child;
             icon.clearPressedOrFocusedBackground();
+        } else if (child instanceof FolderIcon) {
+            // Dismiss the folder cling if we haven't already
+            mLauncher.getLauncherClings().markFolderClingDismissed();
         }
 
         if (child.getTag() == null || !(child.getTag() instanceof ItemInfo)) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2632,6 +2632,9 @@ public void beginDragShared(View child, DragSource source) {
         if (child instanceof BubbleTextView) {
             BubbleTextView icon = (BubbleTextView) child;
             icon.clearPressedOrFocusedBackground();
+        } else if (child instanceof FolderIcon) {
+            // Dismiss the folder cling if we haven't already
+            mLauncher.getLauncherClings().markFolderClingDismissed();
         }
 
         if (child.getTag() == null || !(child.getTag() instanceof ItemInfo)) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2632,6 +2632,9 @@ public void beginDragShared(View child, DragSource source) {
         if (child instanceof BubbleTextView) {
             BubbleTextView icon = (BubbleTextView) child;
             icon.clearPressedOrFocusedBackground();
+        } else if (child instanceof FolderIcon) {
+            // Dismiss the folder cling if we haven't already
+            mLauncher.getLauncherClings().markFolderClingDismissed();
         }
 
         if (child.getTag() == null || !(child.getTag() instanceof ItemInfo)) {

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -828,6 +828,7 @@ public void run() {
                 }
             });
         } else {
+            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
             mLauncher.unlockScreenOrientation(false);
         }
     }

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -828,6 +828,7 @@ public void run() {
                 }
             });
         } else {
+            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
             mLauncher.unlockScreenOrientation(false);
         }
     }

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -828,6 +828,7 @@ public void run() {
                 }
             });
         } else {
+            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
             mLauncher.unlockScreenOrientation(false);
         }
     }

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -828,6 +828,7 @@ public void run() {
                 }
             });
         } else {
+            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
             mLauncher.unlockScreenOrientation(false);
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -863,7 +863,7 @@ public void stripEmptyScreens() {
         // Log to disk
         Launcher.addDumpLog(TAG, "11683562 - stripEmptyScreens()", true);
 
-        if (isWorkspaceLoading()) {
+        if (mLauncher.isWorkspaceLoading()) {
             // Don't strip empty screens if the workspace is still loading
             Launcher.addDumpLog(TAG, "    - workspace loading, skip", true);
             return;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -863,7 +863,7 @@ public void stripEmptyScreens() {
         // Log to disk
         Launcher.addDumpLog(TAG, "11683562 - stripEmptyScreens()", true);
 
-        if (isWorkspaceLoading()) {
+        if (mLauncher.isWorkspaceLoading()) {
             // Don't strip empty screens if the workspace is still loading
             Launcher.addDumpLog(TAG, "    - workspace loading, skip", true);
             return;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -863,7 +863,7 @@ public void stripEmptyScreens() {
         // Log to disk
         Launcher.addDumpLog(TAG, "11683562 - stripEmptyScreens()", true);
 
-        if (isWorkspaceLoading()) {
+        if (mLauncher.isWorkspaceLoading()) {
             // Don't strip empty screens if the workspace is still loading
             Launcher.addDumpLog(TAG, "    - workspace loading, skip", true);
             return;

File: WallpaperPicker/src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -122,7 +122,7 @@ public void onClick(WallpaperPickerActivity a) {
             Intent preview = new Intent(WallpaperManager.ACTION_CHANGE_LIVE_WALLPAPER);
             preview.putExtra(WallpaperManager.EXTRA_LIVE_WALLPAPER_COMPONENT,
                     mInfo.getComponent());
-            a.onLiveWallpaperPickerLaunch();
+            a.onLiveWallpaperPickerLaunch(mInfo);
             a.startActivityForResultSafely(preview, WallpaperPickerActivity.PICK_LIVE_WALLPAPER);
         }
     }

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -75,7 +75,7 @@ public class WallpaperCropActivity extends Activity {
 
     protected CropView mCropView;
     protected Uri mUri;
-    private View mSetWallpaperButton;
+    protected View mSetWallpaperButton;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -117,7 +117,7 @@ public void onClick(View v) {
         // Load image in background
         final BitmapRegionTileSource.UriBitmapSource bitmapSource =
                 new BitmapRegionTileSource.UriBitmapSource(this, imageUri, 1024);
-        mSetWallpaperButton.setVisibility(View.INVISIBLE);
+        mSetWallpaperButton.setEnabled(false);
         Runnable onLoad = new Runnable() {
             public void run() {
                 if (bitmapSource.getLoadingState() != BitmapSource.State.LOADED) {
@@ -126,7 +126,7 @@ public void run() {
                             Toast.LENGTH_LONG).show();
                     finish();
                 } else {
-                    mSetWallpaperButton.setVisibility(View.VISIBLE);
+                    mSetWallpaperButton.setEnabled(true);
                 }
             }
         };

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -257,6 +257,7 @@ public void onClick(WallpaperPickerActivity a) {
         public void onSave(WallpaperPickerActivity a) {
             try {
                 WallpaperManager.getInstance(a).clear();
+                a.setResult(RESULT_OK);
             } catch (IOException e) {
                 Log.w("Setting wallpaper to default threw exception", e);
             }

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -257,6 +257,7 @@ public void onClick(WallpaperPickerActivity a) {
         public void onSave(WallpaperPickerActivity a) {
             try {
                 WallpaperManager.getInstance(a).clear();
+                a.setResult(RESULT_OK);
             } catch (IOException e) {
                 Log.w("Setting wallpaper to default threw exception", e);
             }

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -257,6 +257,7 @@ public void onClick(WallpaperPickerActivity a) {
         public void onSave(WallpaperPickerActivity a) {
             try {
                 WallpaperManager.getInstance(a).clear();
+                a.setResult(RESULT_OK);
             } catch (IOException e) {
                 Log.w("Setting wallpaper to default threw exception", e);
             }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2887,7 +2887,7 @@ private void setWorkspaceBackground(boolean workspace) {
                 mWorkspaceBackgroundDrawable : null);
     }
 
-    protected void changeWallpaperVisiblity(boolean visible) {
+    void updateWallpaperVisibility(boolean visible) {
         int wpflags = visible ? WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER : 0;
         int curflags = getWindow().getAttributes().flags
                 & WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -334,6 +334,7 @@ public void onClick(View v) {
                     }
                     return;
                 }
+                mSetWallpaperButton.setVisibility(View.VISIBLE);
                 WallpaperTileInfo info = (WallpaperTileInfo) v.getTag();
                 if (info.isSelectable() && v.getVisibility() == View.VISIBLE) {
                     selectTile(v);

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -334,6 +334,7 @@ public void onClick(View v) {
                     }
                     return;
                 }
+                mSetWallpaperButton.setVisibility(View.VISIBLE);
                 WallpaperTileInfo info = (WallpaperTileInfo) v.getTag();
                 if (info.isSelectable() && v.getVisibility() == View.VISIBLE) {
                     selectTile(v);

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -334,6 +334,7 @@ public void onClick(View v) {
                     }
                     return;
                 }
+                mSetWallpaperButton.setVisibility(View.VISIBLE);
                 WallpaperTileInfo info = (WallpaperTileInfo) v.getTag();
                 if (info.isSelectable() && v.getVisibility() == View.VISIBLE) {
                     selectTile(v);

File: WallpaperPicker/src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -334,6 +334,7 @@ public void onClick(View v) {
                     }
                     return;
                 }
+                mSetWallpaperButton.setVisibility(View.VISIBLE);
                 WallpaperTileInfo info = (WallpaperTileInfo) v.getTag();
                 if (info.isSelectable() && v.getVisibility() == View.VISIBLE) {
                     selectTile(v);

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -196,7 +196,8 @@ public boolean shouldShowFirstRunOrMigrationClings() {
         SharedPreferences sharedPrefs = mLauncher.getSharedPrefs();
         return areClingsEnabled() &&
             !sharedPrefs.getBoolean(FIRST_RUN_CLING_DISMISSED_KEY, false) &&
-            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false);
+            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false) &&
+            LauncherAppState.getLauncherProvider().wasNewDbCreated();
     }
 
     public void removeFirstRunAndMigrationClings() {

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -557,7 +557,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return 2 * getWorkspacePadding().left;
+            return Math.max(defaultPageSpacingPx, 2 * getWorkspacePadding().left);
         }
     }
 

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -71,6 +71,8 @@ public DynamicGrid(Context context, Resources resources,
                 296, 491.33f,  4, 4,  48, 13, (hasAA ? 5 : 5), 48));
         deviceProfiles.add(new DeviceProfile("Nexus 4",
                 359, 518,  4, 4,  DEFAULT_ICON_SIZE_DP, 13, (hasAA ? 5 : 5), 56));
+        deviceProfiles.add(new DeviceProfile("Large Phone",
+                400, 680,  5, 5,  64, 14.4f,  5, 56));
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -665,7 +665,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
         final CellLayout layout = (CellLayout) parent.getParent();
         final Workspace workspace = (Workspace) layout.getParent();
         final ViewGroup launcher = (ViewGroup) workspace.getParent();
-        final ViewGroup tabs = (ViewGroup) launcher.findViewById(R.id.qsb_bar);
+        final ViewGroup tabs = (ViewGroup) launcher.findViewById(R.id.search_drop_target_bar);
         final ViewGroup hotseat = (ViewGroup) launcher.findViewById(R.id.hotseat);
         int pageIndex = workspace.indexOfChild(layout);
         int pageCount = workspace.getChildCount();

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2709,7 +2709,7 @@ public static ArrayList<Object> getSortedWidgetsAndShortcuts(Context context) {
         return widgetsAndShortcuts;
     }
 
-    private boolean isPackageDisabled(PackageManager pm, String packageName) {
+    private static boolean isPackageDisabled(PackageManager pm, String packageName) {
         try {
             PackageInfo pi = pm.getPackageInfo(packageName, 0);
             return !pi.applicationInfo.enabled;
@@ -2718,7 +2718,8 @@ private boolean isPackageDisabled(PackageManager pm, String packageName) {
         }
         return false;
     }
-    private boolean isValidPackageComponent(PackageManager pm, ComponentName cn) {
+
+    public static boolean isValidPackageComponent(PackageManager pm, ComponentName cn) {
         if (cn == null) {
             return false;
         }

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -196,7 +196,8 @@ public boolean shouldShowFirstRunOrMigrationClings() {
         SharedPreferences sharedPrefs = mLauncher.getSharedPrefs();
         return areClingsEnabled() &&
             !sharedPrefs.getBoolean(FIRST_RUN_CLING_DISMISSED_KEY, false) &&
-            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false);
+            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false) &&
+            LauncherAppState.getLauncherProvider().wasNewDbCreated();
     }
 
     public void removeFirstRunAndMigrationClings() {

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -557,7 +557,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return 2 * getWorkspacePadding().left;
+            return Math.max(defaultPageSpacingPx, 2 * getWorkspacePadding().left);
         }
     }
 

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -71,6 +71,8 @@ public DynamicGrid(Context context, Resources resources,
                 296, 491.33f,  4, 4,  48, 13, (hasAA ? 5 : 5), 48));
         deviceProfiles.add(new DeviceProfile("Nexus 4",
                 359, 518,  4, 4,  DEFAULT_ICON_SIZE_DP, 13, (hasAA ? 5 : 5), 56));
+        deviceProfiles.add(new DeviceProfile("Large Phone",
+                400, 680,  5, 5,  64, 14.4f,  5, 56));
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -665,7 +665,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
         final CellLayout layout = (CellLayout) parent.getParent();
         final Workspace workspace = (Workspace) layout.getParent();
         final ViewGroup launcher = (ViewGroup) workspace.getParent();
-        final ViewGroup tabs = (ViewGroup) launcher.findViewById(R.id.qsb_bar);
+        final ViewGroup tabs = (ViewGroup) launcher.findViewById(R.id.search_drop_target_bar);
         final ViewGroup hotseat = (ViewGroup) launcher.findViewById(R.id.hotseat);
         int pageIndex = workspace.indexOfChild(layout);
         int pageCount = workspace.getChildCount();

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2709,7 +2709,7 @@ public static ArrayList<Object> getSortedWidgetsAndShortcuts(Context context) {
         return widgetsAndShortcuts;
     }
 
-    private boolean isPackageDisabled(PackageManager pm, String packageName) {
+    private static boolean isPackageDisabled(PackageManager pm, String packageName) {
         try {
             PackageInfo pi = pm.getPackageInfo(packageName, 0);
             return !pi.applicationInfo.enabled;
@@ -2718,7 +2718,8 @@ private boolean isPackageDisabled(PackageManager pm, String packageName) {
         }
         return false;
     }
-    private boolean isValidPackageComponent(PackageManager pm, ComponentName cn) {
+
+    public static boolean isValidPackageComponent(PackageManager pm, ComponentName cn) {
         if (cn == null) {
             return false;
         }

File: src/com/android/launcher3/AppsCustomizeTabHost.java
Patch:
@@ -407,7 +407,7 @@ public void onLauncherTransitionStart(Launcher l, boolean animated, boolean toWo
         }
 
         // Dismiss the workspace cling
-        l.dismissWorkspaceCling(null);
+        l.getLauncherClings().dismissWorkspaceCling(null);
     }
 
     @Override

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -168,7 +168,8 @@ private boolean handleTouchDown(MotionEvent ev, boolean intercept) {
         }
 
         Folder currentFolder = mLauncher.getWorkspace().getOpenFolder();
-        if (currentFolder != null && !mLauncher.isFolderClingVisible() && intercept) {
+        if (currentFolder != null && !mLauncher.getLauncherClings().isFolderClingVisible() &&
+                intercept) {
             if (currentFolder.isEditingName()) {
                 if (!isEventOverFolderTextRegion(currentFolder, ev)) {
                     currentFolder.dismissEditingName();

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -56,7 +56,7 @@ public DynamicGrid(Context context, Resources resources,
         DisplayMetrics dm = resources.getDisplayMetrics();
         ArrayList<DeviceProfile> deviceProfiles =
                 new ArrayList<DeviceProfile>();
-        boolean hasAA = !AppsCustomizePagedView.DISABLE_ALL_APPS;
+        boolean hasAA = !LauncherAppState.isDisableAllApps();
         DEFAULT_ICON_SIZE_PX = pxFromDp(DEFAULT_ICON_SIZE_DP, dm);
         // Our phone profiles include the bar sizes in each orientation
         deviceProfiles.add(new DeviceProfile("Super Short Stubby",

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -272,7 +272,7 @@ static void flushInstallQueue(Context context) {
                 final Intent intent = pendingInfo.launchIntent;
                 final String name = pendingInfo.name;
 
-                if (AppsCustomizePagedView.DISABLE_ALL_APPS && !isValidShortcutLaunchIntent(intent)) {
+                if (LauncherAppState.isDisableAllApps() && !isValidShortcutLaunchIntent(intent)) {
                     if (DBG) Log.d(TAG, "Ignoring shortcut with launchIntent:" + intent);
                     continue;
                 }

File: src/com/android/launcher3/WallpaperChangedReceiver.java
Patch:
@@ -22,6 +22,7 @@
 
 public class WallpaperChangedReceiver extends BroadcastReceiver {
     public void onReceive(Context context, Intent data) {
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState appState = LauncherAppState.getInstance();
         appState.onWallpaperChanged();
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -579,7 +579,7 @@ public void createCustomContentPage() {
         mDefaultPage = mOriginalDefaultPage + 1;
 
         // Update the custom content hint
-        mLauncher.updateCustomContentHintVisibility();
+        mLauncher.getLauncherClings().updateCustomContentHintVisibility();
         if (mRestorePage != INVALID_RESTORE_PAGE) {
             mRestorePage = mRestorePage + 1;
         } else {
@@ -608,7 +608,7 @@ public void removeCustomContentPage() {
         mDefaultPage = mOriginalDefaultPage - 1;
 
         // Update the custom content hint
-        mLauncher.updateCustomContentHintVisibility();
+        mLauncher.getLauncherClings().updateCustomContentHintVisibility();
         if (mRestorePage != INVALID_RESTORE_PAGE) {
             mRestorePage = mRestorePage - 1;
         } else {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1200,7 +1200,7 @@ protected void onPageEndMoving() {
     @Override
     protected void notifyPageSwitchListener() {
         super.notifyPageSwitchListener();
-        Launcher.setScreen(mCurrentPage);
+        Launcher.setScreen(getNextPage());
 
         if (hasCustomContent() && getNextPage() == 0 && !mCustomContentShowing) {
             mCustomContentShowing = true;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1657,7 +1657,7 @@ protected void screenScrolled(int screenCenter) {
                 cl.setOverscrollTransformsDirty(true);
             }
         } else {
-            if (mOverscrollTransformsSet) {
+            if (mOverscrollTransformsSet && getChildCount() > 0) {
                 mOverscrollTransformsSet = false;
                 ((CellLayout) getChildAt(0)).resetOverscrollTransforms();
                 ((CellLayout) getChildAt(getChildCount() - 1)).resetOverscrollTransforms();

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -74,10 +74,10 @@ public DynamicGrid(Context context, Resources resources,
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",
-                575, 904,  5, 5,  72, 14.4f,  7, 60));
+                575, 904,  5, 6,  72, 14.4f,  7, 60));
         // Larger tablet profiles always have system bars on the top & bottom
         deviceProfiles.add(new DeviceProfile("Nexus 10",
-                727, 1207,  5, 5,  80, 14.4f,  7, 64));
+                727, 1207,  5, 6,  76, 14.4f,  7, 64));
         /*
         deviceProfiles.add(new DeviceProfile("Nexus 7",
                 600, 960,  5, 5,  72, 14.4f,  5, 60));

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -2632,9 +2632,9 @@ int[] performReorder(int pixelX, int pixelY, int minSpanX, int minSpanY, int spa
         }
 
         if (mode == MODE_SHOW_REORDER_HINT) {
-            beginOrAdjustReorderPreviewAnimations(finalSolution, dragView, 0,
-                    ReorderPreviewAnimation.MODE_HINT);
             if (finalSolution != null) {
+                beginOrAdjustReorderPreviewAnimations(finalSolution, dragView, 0,
+                        ReorderPreviewAnimation.MODE_HINT);
                 result[0] = finalSolution.dragViewX;
                 result[1] = finalSolution.dragViewY;
                 resultSpan[0] = finalSolution.dragViewSpanX;

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import java.util.ArrayList;
-
 import android.content.ContentValues;
 
+import java.util.ArrayList;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,8 +584,9 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
+            if (modelItem != null &&
+                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import android.content.ContentValues;
-
 import java.util.ArrayList;
 
+import android.content.ContentValues;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,9 +584,8 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem != null &&
-                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
+            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import java.util.ArrayList;
-
 import android.content.ContentValues;
 
+import java.util.ArrayList;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,8 +584,9 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
+            if (modelItem != null &&
+                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/Folder.java
Patch:
@@ -82,7 +82,7 @@ public class Folder extends LinearLayout implements DragSource, View.OnClickList
     private int mState = STATE_NONE;
     private static final int REORDER_ANIMATION_DURATION = 230;
     private static final int REORDER_DELAY = 250;
-    private static final int ON_EXIT_CLOSE_DELAY = 800;
+    private static final int ON_EXIT_CLOSE_DELAY = 400;
     private boolean mRearrangeOnClose = false;
     private FolderIcon mFolderIcon;
     private int mMaxCountX;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1398,7 +1398,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
                 if (finishedScrolling) {
                     mTouchState = TOUCH_STATE_REST;
-                    if (!mScroller.isFinished()) {
+                    if (!mScroller.isFinished() && !mFreeScroll) {
                         setCurrentPage(getNextPage());
                         pageEndMoving();
                     }

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -716,7 +716,8 @@ public void layout(Launcher launcher) {
                 paddingTB = Math.min(paddingTB, (int)((paddingLR + paddingTB) * 0.75f));
                 int maxAllAppsWidth = (allAppsNumCols * (allAppsCellWidthPx + 2 * paddingLR));
                 int gridPaddingLR = (availableWidthPx - maxAllAppsWidth) / 2;
-                if (gridPaddingLR > (allAppsCellWidthPx / 4)) {
+                // Only adjust the side paddings on landscape phones, or tablets
+                if ((isTablet() || isLandscape) && gridPaddingLR > (allAppsCellWidthPx / 4)) {
                     padding.left = padding.right = gridPaddingLR;
                 }
                 // The icons are centered, so we can't just offset by the page indicator height

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1765,7 +1765,7 @@ protected void onNewIntent(Intent intent) {
             }
 
             // Reset the apps customize page
-            if (mAppsCustomizeTabHost != null) {
+            if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
                 mAppsCustomizeTabHost.reset();
             }
 
@@ -2375,7 +2375,7 @@ public void startVoice() {
      * @param v The view that was clicked.
      */
     public void onClickAllAppsButton(View v) {
-        showAllApps(true, AppsCustomizePagedView.ContentType.Applications, true);
+        showAllApps(true, AppsCustomizePagedView.ContentType.Applications, false);
     }
 
     public void onTouchDownAllAppsButton(View v) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2298,7 +2298,7 @@ public void run() {
                 r = new Runnable() {
                     public void run() {
                         Callbacks callbacks = tryGetCallbacks(oldCallbacks);
-                        if (callbacks != null) {
+                        if (callbacks != null && currentScreen >= 0) {
                             callbacks.onPageBoundSynchronously(currentScreen);
                         }
                     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4264,7 +4264,9 @@ public void restoreInstanceStateForChild(int child) {
         if (mSavedStates != null) {
             mRestoredPages.add(child);
             CellLayout cl = (CellLayout) getChildAt(child);
-            cl.restoreInstanceState(mSavedStates);
+            if (cl != null) {
+                cl.restoreInstanceState(mSavedStates);
+            }
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1878,7 +1878,7 @@ public void onDestroy() {
 
         mDragLayer.clearAllResizeFrames();
         ((ViewGroup) mWorkspace.getParent()).removeAllViews();
-        mWorkspace.removeAllViews();
+        mWorkspace.removeAllWorkspaceScreens();
         mWorkspace = null;
         mDragController = null;
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2664,7 +2664,7 @@ public void openFolder(FolderIcon folderIcon) {
     }
 
     public void closeFolder() {
-        Folder folder = mWorkspace.getOpenFolder();
+        Folder folder = mWorkspace != null ? mWorkspace.getOpenFolder() : null;
         if (folder != null) {
             if (folder.isEditingName()) {
                 folder.dismissEditingName();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -690,7 +690,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
             mWorkspaceScreens.put(EXTRA_EMPTY_SCREEN_ID, finalScreen);
             mScreenOrder.add(EXTRA_EMPTY_SCREEN_ID);
 
-            // XXX: Do we need to update LM workspace screens here?
+            // Update the model if we have changed any screens
+            mLauncher.getModel().updateWorkspaceScreenOrder(mLauncher, mScreenOrder);
             Launcher.addDumpLog(TAG, "11683562 -   extra empty screen: " + finalScreenId, true);
         }
     }

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -32,6 +32,7 @@ class FastBitmapDrawable extends Drawable {
     FastBitmapDrawable(Bitmap b) {
         mAlpha = 255;
         mBitmap = b;
+        setBounds(0, 0, b.getWidth(), b.getHeight());
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -459,7 +459,7 @@ protected void onCreate(Bundle savedInstanceState) {
             } else {
                 // We only load the page synchronously if the user rotates (or triggers a
                 // configuration change) while launcher is in the foreground
-                mModel.startLoader(true, mWorkspace.getCurrentPage());
+                mModel.startLoader(true, mWorkspace.getRestorePage());
             }
         }
 
@@ -1801,7 +1801,8 @@ public void onRestoreInstanceState(Bundle state) {
     @Override
     protected void onSaveInstanceState(Bundle outState) {
         if (mWorkspace.getChildCount() > 0) {
-            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN, mWorkspace.getRestorePage());
+            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN,
+                    mWorkspace.getCurrentPageOffsetFromCustomContent());
         }
         super.onSaveInstanceState(outState);
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -571,6 +571,9 @@ void setCurrentPage(int currentPage) {
     void setRestorePage(int restorePage) {
         mRestorePage = restorePage;
     }
+    int getRestorePage() {
+        return mRestorePage;
+    }
 
     protected void notifyPageSwitchListener() {
         if (mPageSwitchListener != null) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3961,7 +3961,7 @@ public CellLayout.CellInfo getDragInfo() {
         return mDragInfo;
     }
 
-    public int getRestorePage() {
+    public int getCurrentPageOffsetFromCustomContent() {
         return getNextPage() - numCustomPages();
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2336,7 +2336,9 @@ void showCustomContentIfNecessary() {
     void hideCustomContentIfNecessary() {
         boolean hide  = mState != Workspace.State.NORMAL;
         if (hide && hasCustomContent()) {
+            disableLayoutTransitions();
             mWorkspaceScreens.get(CUSTOM_CONTENT_SCREEN_ID).setVisibility(INVISIBLE);
+            enableLayoutTransitions();
         }
     }
 

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -294,7 +294,7 @@ else if (exists && !allowDuplicate) {
             // Add the new apps to the model and bind them
             if (!addShortcuts.isEmpty()) {
                 LauncherAppState app = LauncherAppState.getInstance();
-                app.getModel().addAndBindAddedApps(context, addShortcuts, null);
+                app.getModel().addAndBindAddedApps(context, addShortcuts, new ArrayList<AppInfo>());
             }
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -949,7 +949,9 @@ void addInScreen(View child, long container, long screenId, int x, int y, int sp
         }
 
         // Get the canonical child id to uniquely represent this view in this screen
-        int childId = LauncherModel.getCellLayoutChildId(container, screenId, x, y, spanX, spanY);
+        ItemInfo info = (ItemInfo) child.getTag();
+        int childId = mLauncher.getViewIdForItem(info);
+
         boolean markCellsAsOccupied = !(child instanceof Folder);
         if (!layout.addViewToCellLayout(child, insert ? 0 : -1, childId, lp, markCellsAsOccupied)) {
             // TODO: This branch occurs when the workspace is adding views
@@ -2890,8 +2892,6 @@ public void onDrop(final DragObject d) {
                     lp.cellHSpan = item.spanX;
                     lp.cellVSpan = item.spanY;
                     lp.isLockedToGrid = true;
-                    cell.setId(LauncherModel.getCellLayoutChildId(container, mDragInfo.screenId,
-                            mTargetCell[0], mTargetCell[1], mDragInfo.spanX, mDragInfo.spanY));
 
                     if (container != LauncherSettings.Favorites.CONTAINER_HOTSEAT &&
                             cell instanceof LauncherAppWidgetHostView) {

File: src/com/android/launcher3/Folder.java
Patch:
@@ -758,6 +758,8 @@ public void run() {
                 }
                 completeDragExit();
             }
+        } else {
+            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
         }
 
         mDeleteFolderOnDropCompleted = false;

File: src/com/android/launcher3/CropView.java
Patch:
@@ -165,7 +165,8 @@ private void updateMinScale(int w, int h, TileSource source, boolean resetScale)
                 final float imageWidth = imageDims[0];
                 final float imageHeight = imageDims[1];
                 mMinScale = Math.max(w / imageWidth, h / imageHeight);
-                mRenderer.scale = Math.max(mMinScale, mRenderer.scale);
+                mRenderer.scale =
+                        Math.max(mMinScale, resetScale ? Float.MIN_VALUE : mRenderer.scale);
             }
         }
     }

File: src/com/android/launcher3/DragController.java
Patch:
@@ -327,7 +327,7 @@ public void onAppsRemoved(final ArrayList<String> packageNames, ArrayList<AppInf
                 for (AppInfo info : appInfos) {
                     // Added null checks to prevent NPE we've seen in the wild
                     if (dragInfo != null &&
-                        dragInfo.intent != null) {
+                            dragInfo.intent != null && info != null) {
                         ComponentName cn = dragInfo.intent.getComponent();
                         boolean isSameComponent = cn.equals(info.componentName) ||
                                 packageNames.contains(cn.getPackageName());

File: src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -190,7 +190,9 @@ protected void onProgressUpdate(LiveWallpaperTile...infos) {
                     LiveWallpaperListAdapter.this.notifyDataSetChanged();
                     break;
                 }
-                info.mThumbnail.setDither(true);
+                if (info.mThumbnail != null) {
+                    info.mThumbnail.setDither(true);
+                }
                 if (mWallpaperPosition < mWallpapers.size()) {
                     mWallpapers.set(mWallpaperPosition, info);
                 } else {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -869,7 +869,7 @@ protected void onResume() {
         if (mOnResumeState == State.WORKSPACE) {
             showWorkspace(false);
         } else if (mOnResumeState == State.APPS_CUSTOMIZE) {
-            showAllApps(false, AppsCustomizePagedView.ContentType.Applications, false);
+            showAllApps(false, mAppsCustomizeContent.getContentType(), false);
         }
         mOnResumeState = State.NONE;
 
@@ -1770,7 +1770,8 @@ protected void onSaveInstanceState(Bundle outState) {
 
         // Save the current AppsCustomize tab
         if (mAppsCustomizeTabHost != null) {
-            String currentTabTag = mAppsCustomizeTabHost.getCurrentTabTag();
+            AppsCustomizePagedView.ContentType type = mAppsCustomizeContent.getContentType();
+            String currentTabTag = mAppsCustomizeTabHost.getTabTagForContentType(type);
             if (currentTabTag != null) {
                 outState.putString("apps_customize_currentTab", currentTabTag);
             }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1817,7 +1817,9 @@ public void run() {
                                 addView(mDragView, pageUnderPointIndex);
                                 onAddView(mDragView, pageUnderPointIndex);
                                 mSidePageHoverIndex = -1;
-                                mPageIndicator.setActiveMarker(getNextPage());
+                                if (mPageIndicator != null) {
+                                    mPageIndicator.setActiveMarker(getNextPage());
+                                }
                             }
                         };
                         postDelayed(mSidePageHoverRunnable, REORDERING_SIDE_PAGE_HOVER_TIMEOUT);

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -450,7 +450,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return getWorkspacePadding().left;
+            return 2 * getWorkspacePadding().left;
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -741,7 +741,7 @@ public void run() {
                     data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1) : -1;
             final int result;
             final Runnable onComplete;
-            if (appWidgetId < 0) {
+            if (appWidgetId < 0 || resultCode == RESULT_CANCELED) {
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 result = RESULT_CANCELED;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4122,6 +4122,9 @@ private boolean isClingsEnabled() {
         if (grid.isTablet()) {
             return false;
         }
+        if (grid.isLandscape) {
+            return false;
+        }
 
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -675,6 +675,7 @@ private void sendScrollAccessibilityEvent() {
                     AccessibilityEvent.obtain(AccessibilityEvent.TYPE_VIEW_SCROLLED);
             ev.setItemCount(getChildCount());
             ev.setFromIndex(mCurrentPage);
+            ev.setToIndex(getNextPage());
 
             final int action;
             if (getNextPage() >= mCurrentPage) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -671,7 +671,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
         CellLayout finalScreen = mWorkspaceScreens.get(finalScreenId);
 
         // If the final screen is empty, convert it to the extra empty screen
-        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0) {
+        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0 &&
+                !finalScreen.isDropPending()) {
             mWorkspaceScreens.remove(finalScreenId);
             mScreenOrder.remove(finalScreenId);
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1189,7 +1189,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
 
     protected void setWallpaperDimension() {
         String spKey = WallpaperCropActivity.getSharedPreferencesKey();
-        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_PRIVATE);
+        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
         WallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
                 sp, mLauncher.getWindowManager(), mWallpaperManager);
     }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -515,7 +515,7 @@ protected void updateCurrentPageScroll() {
      * re-enable scrolling.
      */
     void stopScrolling() {
-        mCurrentPage = mNextPage;
+        mCurrentPage = getNextPage();
         forceFinishScroller();
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3011,7 +3011,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
 
             dispatchOnLauncherTransitionPrepare(fromView, animated, true);
             dispatchOnLauncherTransitionPrepare(toView, animated, true);
-            mAppsCustomizeContent.pauseScrolling();
+            mAppsCustomizeContent.stopScrolling();
 
             mStateAnimation.addListener(new AnimatorListenerAdapter() {
                 @Override
@@ -3023,7 +3023,6 @@ public void onAnimationEnd(Animator animation) {
                         onCompleteRunnable.run();
                     }
                     mAppsCustomizeContent.updateCurrentPageScroll();
-                    mAppsCustomizeContent.resumeScrolling();
                 }
             });
 

File: src/com/android/photos/BitmapRegionTileSource.java
Patch:
@@ -55,7 +55,7 @@ public class BitmapRegionTileSource implements TiledImageRenderer.TileSource {
     private static final int GL_SIZE_LIMIT = 2048;
     // This must be no larger than half the size of the GL_SIZE_LIMIT
     // due to decodePreview being allowed to be up to 2x the size of the target
-    private static final int MAX_PREVIEW_SIZE = 1024;
+    public static final int MAX_PREVIEW_SIZE = GL_SIZE_LIMIT / 2;
 
     public static abstract class BitmapSource {
         private BitmapRegionDecoder mDecoder;

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1046,7 +1046,6 @@ private int loadFavorites(SQLiteDatabase db, int workspaceResourceId) {
                             // recursively load some more favorites, why not?
                             i += loadFavorites(db, resId);
                             added = false;
-                            mMaxItemId = -1;
                         } else {
                             Log.w(TAG, String.format("Skipping <include workspace=0x%08x>", resId));
                         }

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -108,6 +108,9 @@ private static void addToInstallQueue(
 
     public static void removeFromInstallQueue(SharedPreferences sharedPrefs,
                                               ArrayList<String> packageNames) {
+        if (packageNames.isEmpty()) {
+            return;
+        }
         synchronized(sLock) {
             Set<String> strings = sharedPrefs.getStringSet(APPS_PENDING_INSTALL, null);
             if (DBG) {

File: src/com/android/launcher3/SavedWallpaperImages.java
Patch:
@@ -62,6 +62,7 @@ public void onClick(WallpaperPickerActivity a) {
             File file = new File(a.getFilesDir(), imageFilename);
             CropView v = a.getCropView();
             int rotation = WallpaperCropActivity.getRotationFromExif(file.getAbsolutePath());
+            a.getDefaultWallpaperView().setVisibility(View.INVISIBLE);
             v.setTileSource(
                     new BitmapRegionTileSource(a, file.getAbsolutePath(), 1024, rotation), null);
             v.moveToLeft();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3654,7 +3654,7 @@ public void run() {
                 // the correct final location.
                 setFinalTransitionTransform(cellLayout);
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, view,
-                        exitSpringLoadedRunnable);
+                        exitSpringLoadedRunnable, this);
                 resetTransitionTransform(cellLayout);
             }
         }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1200,7 +1200,7 @@ protected void onPageEndMoving() {
     @Override
     protected void notifyPageSwitchListener() {
         super.notifyPageSwitchListener();
-        Launcher.setScreen(mCurrentPage);
+        Launcher.setScreen(getNextPage());
 
         if (hasCustomContent() && getNextPage() == 0 && !mCustomContentShowing) {
             mCustomContentShowing = true;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1657,7 +1657,7 @@ protected void screenScrolled(int screenCenter) {
                 cl.setOverscrollTransformsDirty(true);
             }
         } else {
-            if (mOverscrollTransformsSet) {
+            if (mOverscrollTransformsSet && getChildCount() > 0) {
                 mOverscrollTransformsSet = false;
                 ((CellLayout) getChildAt(0)).resetOverscrollTransforms();
                 ((CellLayout) getChildAt(getChildCount() - 1)).resetOverscrollTransforms();

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -74,10 +74,10 @@ public DynamicGrid(Context context, Resources resources,
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",
-                575, 904,  5, 5,  72, 14.4f,  7, 60));
+                575, 904,  5, 6,  72, 14.4f,  7, 60));
         // Larger tablet profiles always have system bars on the top & bottom
         deviceProfiles.add(new DeviceProfile("Nexus 10",
-                727, 1207,  5, 5,  80, 14.4f,  7, 64));
+                727, 1207,  5, 6,  76, 14.4f,  7, 64));
         /*
         deviceProfiles.add(new DeviceProfile("Nexus 7",
                 600, 960,  5, 5,  72, 14.4f,  5, 60));

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -2632,9 +2632,9 @@ int[] performReorder(int pixelX, int pixelY, int minSpanX, int minSpanY, int spa
         }
 
         if (mode == MODE_SHOW_REORDER_HINT) {
-            beginOrAdjustReorderPreviewAnimations(finalSolution, dragView, 0,
-                    ReorderPreviewAnimation.MODE_HINT);
             if (finalSolution != null) {
+                beginOrAdjustReorderPreviewAnimations(finalSolution, dragView, 0,
+                        ReorderPreviewAnimation.MODE_HINT);
                 result[0] = finalSolution.dragViewX;
                 result[1] = finalSolution.dragViewY;
                 resultSpan[0] = finalSolution.dragViewSpanX;

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import java.util.ArrayList;
-
 import android.content.ContentValues;
 
+import java.util.ArrayList;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,8 +584,9 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
+            if (modelItem != null &&
+                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import android.content.ContentValues;
-
 import java.util.ArrayList;
 
+import android.content.ContentValues;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,9 +584,8 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem != null &&
-                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
+            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import java.util.ArrayList;
-
 import android.content.ContentValues;
 
+import java.util.ArrayList;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,8 +584,9 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
+            if (modelItem != null &&
+                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/Folder.java
Patch:
@@ -82,7 +82,7 @@ public class Folder extends LinearLayout implements DragSource, View.OnClickList
     private int mState = STATE_NONE;
     private static final int REORDER_ANIMATION_DURATION = 230;
     private static final int REORDER_DELAY = 250;
-    private static final int ON_EXIT_CLOSE_DELAY = 800;
+    private static final int ON_EXIT_CLOSE_DELAY = 400;
     private boolean mRearrangeOnClose = false;
     private FolderIcon mFolderIcon;
     private int mMaxCountX;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1398,7 +1398,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
                 if (finishedScrolling) {
                     mTouchState = TOUCH_STATE_REST;
-                    if (!mScroller.isFinished()) {
+                    if (!mScroller.isFinished() && !mFreeScroll) {
                         setCurrentPage(getNextPage());
                         pageEndMoving();
                     }

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -716,7 +716,8 @@ public void layout(Launcher launcher) {
                 paddingTB = Math.min(paddingTB, (int)((paddingLR + paddingTB) * 0.75f));
                 int maxAllAppsWidth = (allAppsNumCols * (allAppsCellWidthPx + 2 * paddingLR));
                 int gridPaddingLR = (availableWidthPx - maxAllAppsWidth) / 2;
-                if (gridPaddingLR > (allAppsCellWidthPx / 4)) {
+                // Only adjust the side paddings on landscape phones, or tablets
+                if ((isTablet() || isLandscape) && gridPaddingLR > (allAppsCellWidthPx / 4)) {
                     padding.left = padding.right = gridPaddingLR;
                 }
                 // The icons are centered, so we can't just offset by the page indicator height

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1765,7 +1765,7 @@ protected void onNewIntent(Intent intent) {
             }
 
             // Reset the apps customize page
-            if (mAppsCustomizeTabHost != null) {
+            if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
                 mAppsCustomizeTabHost.reset();
             }
 
@@ -2375,7 +2375,7 @@ public void startVoice() {
      * @param v The view that was clicked.
      */
     public void onClickAllAppsButton(View v) {
-        showAllApps(true, AppsCustomizePagedView.ContentType.Applications, true);
+        showAllApps(true, AppsCustomizePagedView.ContentType.Applications, false);
     }
 
     public void onTouchDownAllAppsButton(View v) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2298,7 +2298,7 @@ public void run() {
                 r = new Runnable() {
                     public void run() {
                         Callbacks callbacks = tryGetCallbacks(oldCallbacks);
-                        if (callbacks != null) {
+                        if (callbacks != null && currentScreen >= 0) {
                             callbacks.onPageBoundSynchronously(currentScreen);
                         }
                     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4264,7 +4264,9 @@ public void restoreInstanceStateForChild(int child) {
         if (mSavedStates != null) {
             mRestoredPages.add(child);
             CellLayout cl = (CellLayout) getChildAt(child);
-            cl.restoreInstanceState(mSavedStates);
+            if (cl != null) {
+                cl.restoreInstanceState(mSavedStates);
+            }
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1878,7 +1878,7 @@ public void onDestroy() {
 
         mDragLayer.clearAllResizeFrames();
         ((ViewGroup) mWorkspace.getParent()).removeAllViews();
-        mWorkspace.removeAllViews();
+        mWorkspace.removeAllWorkspaceScreens();
         mWorkspace = null;
         mDragController = null;
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2664,7 +2664,7 @@ public void openFolder(FolderIcon folderIcon) {
     }
 
     public void closeFolder() {
-        Folder folder = mWorkspace.getOpenFolder();
+        Folder folder = mWorkspace != null ? mWorkspace.getOpenFolder() : null;
         if (folder != null) {
             if (folder.isEditingName()) {
                 folder.dismissEditingName();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -690,7 +690,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
             mWorkspaceScreens.put(EXTRA_EMPTY_SCREEN_ID, finalScreen);
             mScreenOrder.add(EXTRA_EMPTY_SCREEN_ID);
 
-            // XXX: Do we need to update LM workspace screens here?
+            // Update the model if we have changed any screens
+            mLauncher.getModel().updateWorkspaceScreenOrder(mLauncher, mScreenOrder);
             Launcher.addDumpLog(TAG, "11683562 -   extra empty screen: " + finalScreenId, true);
         }
     }

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -32,6 +32,7 @@ class FastBitmapDrawable extends Drawable {
     FastBitmapDrawable(Bitmap b) {
         mAlpha = 255;
         mBitmap = b;
+        setBounds(0, 0, b.getWidth(), b.getHeight());
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -459,7 +459,7 @@ protected void onCreate(Bundle savedInstanceState) {
             } else {
                 // We only load the page synchronously if the user rotates (or triggers a
                 // configuration change) while launcher is in the foreground
-                mModel.startLoader(true, mWorkspace.getCurrentPage());
+                mModel.startLoader(true, mWorkspace.getRestorePage());
             }
         }
 
@@ -1801,7 +1801,8 @@ public void onRestoreInstanceState(Bundle state) {
     @Override
     protected void onSaveInstanceState(Bundle outState) {
         if (mWorkspace.getChildCount() > 0) {
-            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN, mWorkspace.getRestorePage());
+            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN,
+                    mWorkspace.getCurrentPageOffsetFromCustomContent());
         }
         super.onSaveInstanceState(outState);
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -571,6 +571,9 @@ void setCurrentPage(int currentPage) {
     void setRestorePage(int restorePage) {
         mRestorePage = restorePage;
     }
+    int getRestorePage() {
+        return mRestorePage;
+    }
 
     protected void notifyPageSwitchListener() {
         if (mPageSwitchListener != null) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3961,7 +3961,7 @@ public CellLayout.CellInfo getDragInfo() {
         return mDragInfo;
     }
 
-    public int getRestorePage() {
+    public int getCurrentPageOffsetFromCustomContent() {
         return getNextPage() - numCustomPages();
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2336,7 +2336,9 @@ void showCustomContentIfNecessary() {
     void hideCustomContentIfNecessary() {
         boolean hide  = mState != Workspace.State.NORMAL;
         if (hide && hasCustomContent()) {
+            disableLayoutTransitions();
             mWorkspaceScreens.get(CUSTOM_CONTENT_SCREEN_ID).setVisibility(INVISIBLE);
+            enableLayoutTransitions();
         }
     }
 

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -294,7 +294,7 @@ else if (exists && !allowDuplicate) {
             // Add the new apps to the model and bind them
             if (!addShortcuts.isEmpty()) {
                 LauncherAppState app = LauncherAppState.getInstance();
-                app.getModel().addAndBindAddedApps(context, addShortcuts, null);
+                app.getModel().addAndBindAddedApps(context, addShortcuts, new ArrayList<AppInfo>());
             }
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -949,7 +949,9 @@ void addInScreen(View child, long container, long screenId, int x, int y, int sp
         }
 
         // Get the canonical child id to uniquely represent this view in this screen
-        int childId = LauncherModel.getCellLayoutChildId(container, screenId, x, y, spanX, spanY);
+        ItemInfo info = (ItemInfo) child.getTag();
+        int childId = mLauncher.getViewIdForItem(info);
+
         boolean markCellsAsOccupied = !(child instanceof Folder);
         if (!layout.addViewToCellLayout(child, insert ? 0 : -1, childId, lp, markCellsAsOccupied)) {
             // TODO: This branch occurs when the workspace is adding views
@@ -2890,8 +2892,6 @@ public void onDrop(final DragObject d) {
                     lp.cellHSpan = item.spanX;
                     lp.cellVSpan = item.spanY;
                     lp.isLockedToGrid = true;
-                    cell.setId(LauncherModel.getCellLayoutChildId(container, mDragInfo.screenId,
-                            mTargetCell[0], mTargetCell[1], mDragInfo.spanX, mDragInfo.spanY));
 
                     if (container != LauncherSettings.Favorites.CONTAINER_HOTSEAT &&
                             cell instanceof LauncherAppWidgetHostView) {

File: src/com/android/launcher3/Folder.java
Patch:
@@ -758,6 +758,8 @@ public void run() {
                 }
                 completeDragExit();
             }
+        } else {
+            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
         }
 
         mDeleteFolderOnDropCompleted = false;

File: src/com/android/launcher3/CropView.java
Patch:
@@ -165,7 +165,8 @@ private void updateMinScale(int w, int h, TileSource source, boolean resetScale)
                 final float imageWidth = imageDims[0];
                 final float imageHeight = imageDims[1];
                 mMinScale = Math.max(w / imageWidth, h / imageHeight);
-                mRenderer.scale = Math.max(mMinScale, mRenderer.scale);
+                mRenderer.scale =
+                        Math.max(mMinScale, resetScale ? Float.MIN_VALUE : mRenderer.scale);
             }
         }
     }

File: src/com/android/launcher3/DragController.java
Patch:
@@ -327,7 +327,7 @@ public void onAppsRemoved(final ArrayList<String> packageNames, ArrayList<AppInf
                 for (AppInfo info : appInfos) {
                     // Added null checks to prevent NPE we've seen in the wild
                     if (dragInfo != null &&
-                        dragInfo.intent != null) {
+                            dragInfo.intent != null && info != null) {
                         ComponentName cn = dragInfo.intent.getComponent();
                         boolean isSameComponent = cn.equals(info.componentName) ||
                                 packageNames.contains(cn.getPackageName());

File: src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -190,7 +190,9 @@ protected void onProgressUpdate(LiveWallpaperTile...infos) {
                     LiveWallpaperListAdapter.this.notifyDataSetChanged();
                     break;
                 }
-                info.mThumbnail.setDither(true);
+                if (info.mThumbnail != null) {
+                    info.mThumbnail.setDither(true);
+                }
                 if (mWallpaperPosition < mWallpapers.size()) {
                     mWallpapers.set(mWallpaperPosition, info);
                 } else {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -869,7 +869,7 @@ protected void onResume() {
         if (mOnResumeState == State.WORKSPACE) {
             showWorkspace(false);
         } else if (mOnResumeState == State.APPS_CUSTOMIZE) {
-            showAllApps(false, AppsCustomizePagedView.ContentType.Applications, false);
+            showAllApps(false, mAppsCustomizeContent.getContentType(), false);
         }
         mOnResumeState = State.NONE;
 
@@ -1770,7 +1770,8 @@ protected void onSaveInstanceState(Bundle outState) {
 
         // Save the current AppsCustomize tab
         if (mAppsCustomizeTabHost != null) {
-            String currentTabTag = mAppsCustomizeTabHost.getCurrentTabTag();
+            AppsCustomizePagedView.ContentType type = mAppsCustomizeContent.getContentType();
+            String currentTabTag = mAppsCustomizeTabHost.getTabTagForContentType(type);
             if (currentTabTag != null) {
                 outState.putString("apps_customize_currentTab", currentTabTag);
             }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1817,7 +1817,9 @@ public void run() {
                                 addView(mDragView, pageUnderPointIndex);
                                 onAddView(mDragView, pageUnderPointIndex);
                                 mSidePageHoverIndex = -1;
-                                mPageIndicator.setActiveMarker(getNextPage());
+                                if (mPageIndicator != null) {
+                                    mPageIndicator.setActiveMarker(getNextPage());
+                                }
                             }
                         };
                         postDelayed(mSidePageHoverRunnable, REORDERING_SIDE_PAGE_HOVER_TIMEOUT);

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -450,7 +450,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return getWorkspacePadding().left;
+            return 2 * getWorkspacePadding().left;
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -741,7 +741,7 @@ public void run() {
                     data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1) : -1;
             final int result;
             final Runnable onComplete;
-            if (appWidgetId < 0) {
+            if (appWidgetId < 0 || resultCode == RESULT_CANCELED) {
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 result = RESULT_CANCELED;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4122,6 +4122,9 @@ private boolean isClingsEnabled() {
         if (grid.isTablet()) {
             return false;
         }
+        if (grid.isLandscape) {
+            return false;
+        }
 
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -675,6 +675,7 @@ private void sendScrollAccessibilityEvent() {
                     AccessibilityEvent.obtain(AccessibilityEvent.TYPE_VIEW_SCROLLED);
             ev.setItemCount(getChildCount());
             ev.setFromIndex(mCurrentPage);
+            ev.setToIndex(getNextPage());
 
             final int action;
             if (getNextPage() >= mCurrentPage) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -671,7 +671,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
         CellLayout finalScreen = mWorkspaceScreens.get(finalScreenId);
 
         // If the final screen is empty, convert it to the extra empty screen
-        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0) {
+        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0 &&
+                !finalScreen.isDropPending()) {
             mWorkspaceScreens.remove(finalScreenId);
             mScreenOrder.remove(finalScreenId);
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1189,7 +1189,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
 
     protected void setWallpaperDimension() {
         String spKey = WallpaperCropActivity.getSharedPreferencesKey();
-        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_PRIVATE);
+        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
         WallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
                 sp, mLauncher.getWindowManager(), mWallpaperManager);
     }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -515,7 +515,7 @@ protected void updateCurrentPageScroll() {
      * re-enable scrolling.
      */
     void stopScrolling() {
-        mCurrentPage = mNextPage;
+        mCurrentPage = getNextPage();
         forceFinishScroller();
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3011,7 +3011,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
 
             dispatchOnLauncherTransitionPrepare(fromView, animated, true);
             dispatchOnLauncherTransitionPrepare(toView, animated, true);
-            mAppsCustomizeContent.pauseScrolling();
+            mAppsCustomizeContent.stopScrolling();
 
             mStateAnimation.addListener(new AnimatorListenerAdapter() {
                 @Override
@@ -3023,7 +3023,6 @@ public void onAnimationEnd(Animator animation) {
                         onCompleteRunnable.run();
                     }
                     mAppsCustomizeContent.updateCurrentPageScroll();
-                    mAppsCustomizeContent.resumeScrolling();
                 }
             });
 

File: src/com/android/photos/BitmapRegionTileSource.java
Patch:
@@ -55,7 +55,7 @@ public class BitmapRegionTileSource implements TiledImageRenderer.TileSource {
     private static final int GL_SIZE_LIMIT = 2048;
     // This must be no larger than half the size of the GL_SIZE_LIMIT
     // due to decodePreview being allowed to be up to 2x the size of the target
-    private static final int MAX_PREVIEW_SIZE = 1024;
+    public static final int MAX_PREVIEW_SIZE = GL_SIZE_LIMIT / 2;
 
     public static abstract class BitmapSource {
         private BitmapRegionDecoder mDecoder;

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1046,7 +1046,6 @@ private int loadFavorites(SQLiteDatabase db, int workspaceResourceId) {
                             // recursively load some more favorites, why not?
                             i += loadFavorites(db, resId);
                             added = false;
-                            mMaxItemId = -1;
                         } else {
                             Log.w(TAG, String.format("Skipping <include workspace=0x%08x>", resId));
                         }

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -108,6 +108,9 @@ private static void addToInstallQueue(
 
     public static void removeFromInstallQueue(SharedPreferences sharedPrefs,
                                               ArrayList<String> packageNames) {
+        if (packageNames.isEmpty()) {
+            return;
+        }
         synchronized(sLock) {
             Set<String> strings = sharedPrefs.getStringSet(APPS_PENDING_INSTALL, null);
             if (DBG) {

File: src/com/android/launcher3/SavedWallpaperImages.java
Patch:
@@ -62,6 +62,7 @@ public void onClick(WallpaperPickerActivity a) {
             File file = new File(a.getFilesDir(), imageFilename);
             CropView v = a.getCropView();
             int rotation = WallpaperCropActivity.getRotationFromExif(file.getAbsolutePath());
+            a.getDefaultWallpaperView().setVisibility(View.INVISIBLE);
             v.setTileSource(
                     new BitmapRegionTileSource(a, file.getAbsolutePath(), 1024, rotation), null);
             v.moveToLeft();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3654,7 +3654,7 @@ public void run() {
                 // the correct final location.
                 setFinalTransitionTransform(cellLayout);
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, view,
-                        exitSpringLoadedRunnable);
+                        exitSpringLoadedRunnable, this);
                 resetTransitionTransform(cellLayout);
             }
         }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1200,7 +1200,7 @@ protected void onPageEndMoving() {
     @Override
     protected void notifyPageSwitchListener() {
         super.notifyPageSwitchListener();
-        Launcher.setScreen(mCurrentPage);
+        Launcher.setScreen(getNextPage());
 
         if (hasCustomContent() && getNextPage() == 0 && !mCustomContentShowing) {
             mCustomContentShowing = true;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1657,7 +1657,7 @@ protected void screenScrolled(int screenCenter) {
                 cl.setOverscrollTransformsDirty(true);
             }
         } else {
-            if (mOverscrollTransformsSet) {
+            if (mOverscrollTransformsSet && getChildCount() > 0) {
                 mOverscrollTransformsSet = false;
                 ((CellLayout) getChildAt(0)).resetOverscrollTransforms();
                 ((CellLayout) getChildAt(getChildCount() - 1)).resetOverscrollTransforms();

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -74,10 +74,10 @@ public DynamicGrid(Context context, Resources resources,
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",
-                575, 904,  5, 5,  72, 14.4f,  7, 60));
+                575, 904,  5, 6,  72, 14.4f,  7, 60));
         // Larger tablet profiles always have system bars on the top & bottom
         deviceProfiles.add(new DeviceProfile("Nexus 10",
-                727, 1207,  5, 5,  80, 14.4f,  7, 64));
+                727, 1207,  5, 6,  76, 14.4f,  7, 64));
         /*
         deviceProfiles.add(new DeviceProfile("Nexus 7",
                 600, 960,  5, 5,  72, 14.4f,  5, 60));

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -2632,9 +2632,9 @@ int[] performReorder(int pixelX, int pixelY, int minSpanX, int minSpanY, int spa
         }
 
         if (mode == MODE_SHOW_REORDER_HINT) {
-            beginOrAdjustReorderPreviewAnimations(finalSolution, dragView, 0,
-                    ReorderPreviewAnimation.MODE_HINT);
             if (finalSolution != null) {
+                beginOrAdjustReorderPreviewAnimations(finalSolution, dragView, 0,
+                        ReorderPreviewAnimation.MODE_HINT);
                 result[0] = finalSolution.dragViewX;
                 result[1] = finalSolution.dragViewY;
                 resultSpan[0] = finalSolution.dragViewSpanX;

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import java.util.ArrayList;
-
 import android.content.ContentValues;
 
+import java.util.ArrayList;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,8 +584,9 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
+            if (modelItem != null &&
+                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import android.content.ContentValues;
-
 import java.util.ArrayList;
 
+import android.content.ContentValues;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,9 +584,8 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem != null &&
-                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
+            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import java.util.ArrayList;
-
 import android.content.ContentValues;
 
+import java.util.ArrayList;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,8 +584,9 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
+            if (modelItem != null &&
+                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/Folder.java
Patch:
@@ -82,7 +82,7 @@ public class Folder extends LinearLayout implements DragSource, View.OnClickList
     private int mState = STATE_NONE;
     private static final int REORDER_ANIMATION_DURATION = 230;
     private static final int REORDER_DELAY = 250;
-    private static final int ON_EXIT_CLOSE_DELAY = 800;
+    private static final int ON_EXIT_CLOSE_DELAY = 400;
     private boolean mRearrangeOnClose = false;
     private FolderIcon mFolderIcon;
     private int mMaxCountX;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1398,7 +1398,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
                 if (finishedScrolling) {
                     mTouchState = TOUCH_STATE_REST;
-                    if (!mScroller.isFinished()) {
+                    if (!mScroller.isFinished() && !mFreeScroll) {
                         setCurrentPage(getNextPage());
                         pageEndMoving();
                     }

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -716,7 +716,8 @@ public void layout(Launcher launcher) {
                 paddingTB = Math.min(paddingTB, (int)((paddingLR + paddingTB) * 0.75f));
                 int maxAllAppsWidth = (allAppsNumCols * (allAppsCellWidthPx + 2 * paddingLR));
                 int gridPaddingLR = (availableWidthPx - maxAllAppsWidth) / 2;
-                if (gridPaddingLR > (allAppsCellWidthPx / 4)) {
+                // Only adjust the side paddings on landscape phones, or tablets
+                if ((isTablet() || isLandscape) && gridPaddingLR > (allAppsCellWidthPx / 4)) {
                     padding.left = padding.right = gridPaddingLR;
                 }
                 // The icons are centered, so we can't just offset by the page indicator height

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1765,7 +1765,7 @@ protected void onNewIntent(Intent intent) {
             }
 
             // Reset the apps customize page
-            if (mAppsCustomizeTabHost != null) {
+            if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
                 mAppsCustomizeTabHost.reset();
             }
 
@@ -2375,7 +2375,7 @@ public void startVoice() {
      * @param v The view that was clicked.
      */
     public void onClickAllAppsButton(View v) {
-        showAllApps(true, AppsCustomizePagedView.ContentType.Applications, true);
+        showAllApps(true, AppsCustomizePagedView.ContentType.Applications, false);
     }
 
     public void onTouchDownAllAppsButton(View v) {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2298,7 +2298,7 @@ public void run() {
                 r = new Runnable() {
                     public void run() {
                         Callbacks callbacks = tryGetCallbacks(oldCallbacks);
-                        if (callbacks != null) {
+                        if (callbacks != null && currentScreen >= 0) {
                             callbacks.onPageBoundSynchronously(currentScreen);
                         }
                     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4264,7 +4264,9 @@ public void restoreInstanceStateForChild(int child) {
         if (mSavedStates != null) {
             mRestoredPages.add(child);
             CellLayout cl = (CellLayout) getChildAt(child);
-            cl.restoreInstanceState(mSavedStates);
+            if (cl != null) {
+                cl.restoreInstanceState(mSavedStates);
+            }
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1878,7 +1878,7 @@ public void onDestroy() {
 
         mDragLayer.clearAllResizeFrames();
         ((ViewGroup) mWorkspace.getParent()).removeAllViews();
-        mWorkspace.removeAllViews();
+        mWorkspace.removeAllWorkspaceScreens();
         mWorkspace = null;
         mDragController = null;
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2664,7 +2664,7 @@ public void openFolder(FolderIcon folderIcon) {
     }
 
     public void closeFolder() {
-        Folder folder = mWorkspace.getOpenFolder();
+        Folder folder = mWorkspace != null ? mWorkspace.getOpenFolder() : null;
         if (folder != null) {
             if (folder.isEditingName()) {
                 folder.dismissEditingName();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -690,7 +690,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
             mWorkspaceScreens.put(EXTRA_EMPTY_SCREEN_ID, finalScreen);
             mScreenOrder.add(EXTRA_EMPTY_SCREEN_ID);
 
-            // XXX: Do we need to update LM workspace screens here?
+            // Update the model if we have changed any screens
+            mLauncher.getModel().updateWorkspaceScreenOrder(mLauncher, mScreenOrder);
             Launcher.addDumpLog(TAG, "11683562 -   extra empty screen: " + finalScreenId, true);
         }
     }

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -32,6 +32,7 @@ class FastBitmapDrawable extends Drawable {
     FastBitmapDrawable(Bitmap b) {
         mAlpha = 255;
         mBitmap = b;
+        setBounds(0, 0, b.getWidth(), b.getHeight());
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -459,7 +459,7 @@ protected void onCreate(Bundle savedInstanceState) {
             } else {
                 // We only load the page synchronously if the user rotates (or triggers a
                 // configuration change) while launcher is in the foreground
-                mModel.startLoader(true, mWorkspace.getCurrentPage());
+                mModel.startLoader(true, mWorkspace.getRestorePage());
             }
         }
 
@@ -1801,7 +1801,8 @@ public void onRestoreInstanceState(Bundle state) {
     @Override
     protected void onSaveInstanceState(Bundle outState) {
         if (mWorkspace.getChildCount() > 0) {
-            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN, mWorkspace.getRestorePage());
+            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN,
+                    mWorkspace.getCurrentPageOffsetFromCustomContent());
         }
         super.onSaveInstanceState(outState);
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -571,6 +571,9 @@ void setCurrentPage(int currentPage) {
     void setRestorePage(int restorePage) {
         mRestorePage = restorePage;
     }
+    int getRestorePage() {
+        return mRestorePage;
+    }
 
     protected void notifyPageSwitchListener() {
         if (mPageSwitchListener != null) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3961,7 +3961,7 @@ public CellLayout.CellInfo getDragInfo() {
         return mDragInfo;
     }
 
-    public int getRestorePage() {
+    public int getCurrentPageOffsetFromCustomContent() {
         return getNextPage() - numCustomPages();
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2336,7 +2336,9 @@ void showCustomContentIfNecessary() {
     void hideCustomContentIfNecessary() {
         boolean hide  = mState != Workspace.State.NORMAL;
         if (hide && hasCustomContent()) {
+            disableLayoutTransitions();
             mWorkspaceScreens.get(CUSTOM_CONTENT_SCREEN_ID).setVisibility(INVISIBLE);
+            enableLayoutTransitions();
         }
     }
 

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -294,7 +294,7 @@ else if (exists && !allowDuplicate) {
             // Add the new apps to the model and bind them
             if (!addShortcuts.isEmpty()) {
                 LauncherAppState app = LauncherAppState.getInstance();
-                app.getModel().addAndBindAddedApps(context, addShortcuts, null);
+                app.getModel().addAndBindAddedApps(context, addShortcuts, new ArrayList<AppInfo>());
             }
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -949,7 +949,9 @@ void addInScreen(View child, long container, long screenId, int x, int y, int sp
         }
 
         // Get the canonical child id to uniquely represent this view in this screen
-        int childId = LauncherModel.getCellLayoutChildId(container, screenId, x, y, spanX, spanY);
+        ItemInfo info = (ItemInfo) child.getTag();
+        int childId = mLauncher.getViewIdForItem(info);
+
         boolean markCellsAsOccupied = !(child instanceof Folder);
         if (!layout.addViewToCellLayout(child, insert ? 0 : -1, childId, lp, markCellsAsOccupied)) {
             // TODO: This branch occurs when the workspace is adding views
@@ -2890,8 +2892,6 @@ public void onDrop(final DragObject d) {
                     lp.cellHSpan = item.spanX;
                     lp.cellVSpan = item.spanY;
                     lp.isLockedToGrid = true;
-                    cell.setId(LauncherModel.getCellLayoutChildId(container, mDragInfo.screenId,
-                            mTargetCell[0], mTargetCell[1], mDragInfo.spanX, mDragInfo.spanY));
 
                     if (container != LauncherSettings.Favorites.CONTAINER_HOTSEAT &&
                             cell instanceof LauncherAppWidgetHostView) {

File: src/com/android/launcher3/Folder.java
Patch:
@@ -758,6 +758,8 @@ public void run() {
                 }
                 completeDragExit();
             }
+        } else {
+            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
         }
 
         mDeleteFolderOnDropCompleted = false;

File: src/com/android/launcher3/CropView.java
Patch:
@@ -165,7 +165,8 @@ private void updateMinScale(int w, int h, TileSource source, boolean resetScale)
                 final float imageWidth = imageDims[0];
                 final float imageHeight = imageDims[1];
                 mMinScale = Math.max(w / imageWidth, h / imageHeight);
-                mRenderer.scale = Math.max(mMinScale, mRenderer.scale);
+                mRenderer.scale =
+                        Math.max(mMinScale, resetScale ? Float.MIN_VALUE : mRenderer.scale);
             }
         }
     }

File: src/com/android/launcher3/DragController.java
Patch:
@@ -327,7 +327,7 @@ public void onAppsRemoved(final ArrayList<String> packageNames, ArrayList<AppInf
                 for (AppInfo info : appInfos) {
                     // Added null checks to prevent NPE we've seen in the wild
                     if (dragInfo != null &&
-                        dragInfo.intent != null) {
+                            dragInfo.intent != null && info != null) {
                         ComponentName cn = dragInfo.intent.getComponent();
                         boolean isSameComponent = cn.equals(info.componentName) ||
                                 packageNames.contains(cn.getPackageName());

File: src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -190,7 +190,9 @@ protected void onProgressUpdate(LiveWallpaperTile...infos) {
                     LiveWallpaperListAdapter.this.notifyDataSetChanged();
                     break;
                 }
-                info.mThumbnail.setDither(true);
+                if (info.mThumbnail != null) {
+                    info.mThumbnail.setDither(true);
+                }
                 if (mWallpaperPosition < mWallpapers.size()) {
                     mWallpapers.set(mWallpaperPosition, info);
                 } else {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -869,7 +869,7 @@ protected void onResume() {
         if (mOnResumeState == State.WORKSPACE) {
             showWorkspace(false);
         } else if (mOnResumeState == State.APPS_CUSTOMIZE) {
-            showAllApps(false, AppsCustomizePagedView.ContentType.Applications, false);
+            showAllApps(false, mAppsCustomizeContent.getContentType(), false);
         }
         mOnResumeState = State.NONE;
 
@@ -1770,7 +1770,8 @@ protected void onSaveInstanceState(Bundle outState) {
 
         // Save the current AppsCustomize tab
         if (mAppsCustomizeTabHost != null) {
-            String currentTabTag = mAppsCustomizeTabHost.getCurrentTabTag();
+            AppsCustomizePagedView.ContentType type = mAppsCustomizeContent.getContentType();
+            String currentTabTag = mAppsCustomizeTabHost.getTabTagForContentType(type);
             if (currentTabTag != null) {
                 outState.putString("apps_customize_currentTab", currentTabTag);
             }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1817,7 +1817,9 @@ public void run() {
                                 addView(mDragView, pageUnderPointIndex);
                                 onAddView(mDragView, pageUnderPointIndex);
                                 mSidePageHoverIndex = -1;
-                                mPageIndicator.setActiveMarker(getNextPage());
+                                if (mPageIndicator != null) {
+                                    mPageIndicator.setActiveMarker(getNextPage());
+                                }
                             }
                         };
                         postDelayed(mSidePageHoverRunnable, REORDERING_SIDE_PAGE_HOVER_TIMEOUT);

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -450,7 +450,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return getWorkspacePadding().left;
+            return 2 * getWorkspacePadding().left;
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -741,7 +741,7 @@ public void run() {
                     data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1) : -1;
             final int result;
             final Runnable onComplete;
-            if (appWidgetId < 0) {
+            if (appWidgetId < 0 || resultCode == RESULT_CANCELED) {
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 result = RESULT_CANCELED;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4122,6 +4122,9 @@ private boolean isClingsEnabled() {
         if (grid.isTablet()) {
             return false;
         }
+        if (grid.isLandscape) {
+            return false;
+        }
 
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -675,6 +675,7 @@ private void sendScrollAccessibilityEvent() {
                     AccessibilityEvent.obtain(AccessibilityEvent.TYPE_VIEW_SCROLLED);
             ev.setItemCount(getChildCount());
             ev.setFromIndex(mCurrentPage);
+            ev.setToIndex(getNextPage());
 
             final int action;
             if (getNextPage() >= mCurrentPage) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -671,7 +671,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
         CellLayout finalScreen = mWorkspaceScreens.get(finalScreenId);
 
         // If the final screen is empty, convert it to the extra empty screen
-        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0) {
+        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0 &&
+                !finalScreen.isDropPending()) {
             mWorkspaceScreens.remove(finalScreenId);
             mScreenOrder.remove(finalScreenId);
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1189,7 +1189,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
 
     protected void setWallpaperDimension() {
         String spKey = WallpaperCropActivity.getSharedPreferencesKey();
-        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_PRIVATE);
+        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
         WallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
                 sp, mLauncher.getWindowManager(), mWallpaperManager);
     }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -515,7 +515,7 @@ protected void updateCurrentPageScroll() {
      * re-enable scrolling.
      */
     void stopScrolling() {
-        mCurrentPage = mNextPage;
+        mCurrentPage = getNextPage();
         forceFinishScroller();
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3011,7 +3011,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
 
             dispatchOnLauncherTransitionPrepare(fromView, animated, true);
             dispatchOnLauncherTransitionPrepare(toView, animated, true);
-            mAppsCustomizeContent.pauseScrolling();
+            mAppsCustomizeContent.stopScrolling();
 
             mStateAnimation.addListener(new AnimatorListenerAdapter() {
                 @Override
@@ -3023,7 +3023,6 @@ public void onAnimationEnd(Animator animation) {
                         onCompleteRunnable.run();
                     }
                     mAppsCustomizeContent.updateCurrentPageScroll();
-                    mAppsCustomizeContent.resumeScrolling();
                 }
             });
 

File: src/com/android/photos/BitmapRegionTileSource.java
Patch:
@@ -55,7 +55,7 @@ public class BitmapRegionTileSource implements TiledImageRenderer.TileSource {
     private static final int GL_SIZE_LIMIT = 2048;
     // This must be no larger than half the size of the GL_SIZE_LIMIT
     // due to decodePreview being allowed to be up to 2x the size of the target
-    private static final int MAX_PREVIEW_SIZE = 1024;
+    public static final int MAX_PREVIEW_SIZE = GL_SIZE_LIMIT / 2;
 
     public static abstract class BitmapSource {
         private BitmapRegionDecoder mDecoder;

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1046,7 +1046,6 @@ private int loadFavorites(SQLiteDatabase db, int workspaceResourceId) {
                             // recursively load some more favorites, why not?
                             i += loadFavorites(db, resId);
                             added = false;
-                            mMaxItemId = -1;
                         } else {
                             Log.w(TAG, String.format("Skipping <include workspace=0x%08x>", resId));
                         }

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -108,6 +108,9 @@ private static void addToInstallQueue(
 
     public static void removeFromInstallQueue(SharedPreferences sharedPrefs,
                                               ArrayList<String> packageNames) {
+        if (packageNames.isEmpty()) {
+            return;
+        }
         synchronized(sLock) {
             Set<String> strings = sharedPrefs.getStringSet(APPS_PENDING_INSTALL, null);
             if (DBG) {

File: src/com/android/launcher3/SavedWallpaperImages.java
Patch:
@@ -62,6 +62,7 @@ public void onClick(WallpaperPickerActivity a) {
             File file = new File(a.getFilesDir(), imageFilename);
             CropView v = a.getCropView();
             int rotation = WallpaperCropActivity.getRotationFromExif(file.getAbsolutePath());
+            a.getDefaultWallpaperView().setVisibility(View.INVISIBLE);
             v.setTileSource(
                     new BitmapRegionTileSource(a, file.getAbsolutePath(), 1024, rotation), null);
             v.moveToLeft();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3654,7 +3654,7 @@ public void run() {
                 // the correct final location.
                 setFinalTransitionTransform(cellLayout);
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, view,
-                        exitSpringLoadedRunnable);
+                        exitSpringLoadedRunnable, this);
                 resetTransitionTransform(cellLayout);
             }
         }

File: src/com/android/launcher3/AllAppsList.java
Patch:
@@ -32,7 +32,7 @@
  */
 class AllAppsList {
     public static final int DEFAULT_APPLICATIONS_NUMBER = 42;
-    
+
     /** The list off all apps. */
     public ArrayList<AppInfo> data =
             new ArrayList<AppInfo>(DEFAULT_APPLICATIONS_NUMBER);
@@ -115,8 +115,7 @@ public void removePackage(String packageName) {
                 data.remove(i);
             }
         }
-        // This is more aggressive than it needs to be.
-        mIconCache.flush();
+        mIconCache.remove(packageName);
     }
 
     /**

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -817,7 +817,7 @@ public void run() {
      */
     private void endDragging(View target, boolean isFlingToDelete, boolean success) {
         if (isFlingToDelete || !success || (target != mLauncher.getWorkspace() &&
-                !(target instanceof DeleteDropTarget))) {
+                !(target instanceof DeleteDropTarget) && !(target instanceof Folder))) {
             // Exit spring loaded mode if we have not successfully dropped or have not handled the
             // drop in Workspace
             mLauncher.getWorkspace().removeExtraEmptyScreen(true, new Runnable() {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -210,6 +210,7 @@ private enum State { NONE, WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOAD
 
     static final int APPWIDGET_HOST_ID = 1024;
     public static final int EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT = 300;
+    public static final int EXIT_SPRINGLOADED_MODE_SHORT_TIMEOUT_FOLDER_CLOSE = 400;
     private static final int ON_ACTIVITY_RESULT_ANIMATION_DELAY = 500;
 
     private static final Object sLock = new Object();

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -193,7 +193,7 @@ public void performBackup(ParcelFileDescriptor oldState, BackupDataOutput data,
             Log.e(TAG, "launcher backup has failed", e);
         }
 
-        out.key = keys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = keys.toArray(new BackupProtos.Key[keys.size()]);
         writeJournal(newState, out);
         Log.v(TAG, "onBackup: wrote " + out.bytes + "b in " + out.rows + " rows.");
     }
@@ -266,7 +266,7 @@ public void writeNewStateDescription(ParcelFileDescriptor newState) {
         // will catch any changes the restore process might have made
         Journal out = new Journal();
         out.t = 0;
-        out.key = mKeys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = mKeys.toArray(new BackupProtos.Key[mKeys.size()]);
         writeJournal(newState, out);
         Log.v(TAG, "onRestore: read " + mKeys.size() + " rows");
         mKeys.clear();

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -193,7 +193,7 @@ public void performBackup(ParcelFileDescriptor oldState, BackupDataOutput data,
             Log.e(TAG, "launcher backup has failed", e);
         }
 
-        out.key = keys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = keys.toArray(new BackupProtos.Key[keys.size()]);
         writeJournal(newState, out);
         Log.v(TAG, "onBackup: wrote " + out.bytes + "b in " + out.rows + " rows.");
     }
@@ -266,7 +266,7 @@ public void writeNewStateDescription(ParcelFileDescriptor newState) {
         // will catch any changes the restore process might have made
         Journal out = new Journal();
         out.t = 0;
-        out.key = mKeys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = mKeys.toArray(new BackupProtos.Key[mKeys.size()]);
         writeJournal(newState, out);
         Log.v(TAG, "onRestore: read " + mKeys.size() + " rows");
         mKeys.clear();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -425,7 +425,7 @@ protected void initWorkspace() {
         setClipChildren(false);
         setClipToPadding(false);
         setChildrenDrawnWithCacheEnabled(true);
-        
+
         setMinScale(mOverviewModeShrinkFactor);
         setupLayoutTransition();
 
@@ -566,7 +566,7 @@ public long insertNewWorkspaceScreen(long screenId, int insertIndex) {
         return screenId;
     }
 
-    public void createCustomContentPage() {
+    public void createCustomContentContainer() {
         CellLayout customScreen = (CellLayout)
                 mLauncher.getLayoutInflater().inflate(R.layout.workspace_screen, null);
         customScreen.disableBackground();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -425,7 +425,7 @@ protected void initWorkspace() {
         setClipChildren(false);
         setClipToPadding(false);
         setChildrenDrawnWithCacheEnabled(true);
-        
+
         setMinScale(mOverviewModeShrinkFactor);
         setupLayoutTransition();
 
@@ -566,7 +566,7 @@ public long insertNewWorkspaceScreen(long screenId, int insertIndex) {
         return screenId;
     }
 
-    public void createCustomContentPage() {
+    public void createCustomContentContainer() {
         CellLayout customScreen = (CellLayout)
                 mLauncher.getLayoutInflater().inflate(R.layout.workspace_screen, null);
         customScreen.disableBackground();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -421,7 +421,7 @@ protected void initWorkspace() {
         setClipChildren(false);
         setClipToPadding(false);
         setChildrenDrawnWithCacheEnabled(true);
-        
+
         setMinScale(mOverviewModeShrinkFactor);
         setupLayoutTransition();
 
@@ -562,7 +562,7 @@ public long insertNewWorkspaceScreen(long screenId, int insertIndex) {
         return screenId;
     }
 
-    public void createCustomContentPage() {
+    public void createCustomContentContainer() {
         CellLayout customScreen = (CellLayout)
                 mLauncher.getLayoutInflater().inflate(R.layout.workspace_screen, null);
         customScreen.disableBackground();

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -196,7 +196,8 @@ public boolean shouldShowFirstRunOrMigrationClings() {
         SharedPreferences sharedPrefs = mLauncher.getSharedPrefs();
         return areClingsEnabled() &&
             !sharedPrefs.getBoolean(FIRST_RUN_CLING_DISMISSED_KEY, false) &&
-            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false);
+            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false) &&
+            LauncherAppState.getLauncherProvider().wasNewDbCreated();
     }
 
     public void removeFirstRunAndMigrationClings() {

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -196,7 +196,8 @@ public boolean shouldShowFirstRunOrMigrationClings() {
         SharedPreferences sharedPrefs = mLauncher.getSharedPrefs();
         return areClingsEnabled() &&
             !sharedPrefs.getBoolean(FIRST_RUN_CLING_DISMISSED_KEY, false) &&
-            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false);
+            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false) &&
+            LauncherAppState.getLauncherProvider().wasNewDbCreated();
     }
 
     public void removeFirstRunAndMigrationClings() {

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -196,7 +196,8 @@ public boolean shouldShowFirstRunOrMigrationClings() {
         SharedPreferences sharedPrefs = mLauncher.getSharedPrefs();
         return areClingsEnabled() &&
             !sharedPrefs.getBoolean(FIRST_RUN_CLING_DISMISSED_KEY, false) &&
-            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false);
+            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false) &&
+            LauncherAppState.getLauncherProvider().wasNewDbCreated();
     }
 
     public void removeFirstRunAndMigrationClings() {

File: WallpaperPicker/src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -276,6 +276,9 @@ private static int getRotationFromExifHelper(
             }
         } catch (IOException e) {
             Log.w(LOGTAG, "Getting exif data failed", e);
+        } catch (NullPointerException e) {
+            // Sometimes the ExifInterface has an internal NPE if Exif data isn't valid
+            Log.w(LOGTAG, "Getting exif data failed", e);
         } finally {
             Utils.closeSilently(bis);
             Utils.closeSilently(is);

File: src/com/android/launcher3/LauncherClings.java
Patch:
@@ -196,7 +196,8 @@ public boolean shouldShowFirstRunOrMigrationClings() {
         SharedPreferences sharedPrefs = mLauncher.getSharedPrefs();
         return areClingsEnabled() &&
             !sharedPrefs.getBoolean(FIRST_RUN_CLING_DISMISSED_KEY, false) &&
-            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false);
+            !sharedPrefs.getBoolean(MIGRATION_CLING_DISMISSED_KEY, false) &&
+            LauncherAppState.getLauncherProvider().wasNewDbCreated();
     }
 
     public void removeFirstRunAndMigrationClings() {

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -557,7 +557,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return 2 * getWorkspacePadding().left;
+            return Math.max(defaultPageSpacingPx, 2 * getWorkspacePadding().left);
         }
     }
 

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -557,7 +557,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return 2 * getWorkspacePadding().left;
+            return Math.max(defaultPageSpacingPx, 2 * getWorkspacePadding().left);
         }
     }
 

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -557,7 +557,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return 2 * getWorkspacePadding().left;
+            return Math.max(defaultPageSpacingPx, 2 * getWorkspacePadding().left);
         }
     }
 

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -557,7 +557,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return 2 * getWorkspacePadding().left;
+            return Math.max(defaultPageSpacingPx, 2 * getWorkspacePadding().left);
         }
     }
 

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -557,7 +557,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return 2 * getWorkspacePadding().left;
+            return Math.max(defaultPageSpacingPx, 2 * getWorkspacePadding().left);
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2869,7 +2869,7 @@ private void setWorkspaceBackground(boolean workspace) {
                 mWorkspaceBackgroundDrawable : null);
     }
 
-    void updateWallpaperVisibility(boolean visible) {
+    protected void changeWallpaperVisiblity(boolean visible) {
         int wpflags = visible ? WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER : 0;
         int curflags = getWindow().getAttributes().flags
                 & WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER;

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -71,6 +71,8 @@ public DynamicGrid(Context context, Resources resources,
                 296, 491.33f,  4, 4,  48, 13, (hasAA ? 5 : 5), 48));
         deviceProfiles.add(new DeviceProfile("Nexus 4",
                 359, 518,  4, 4,  DEFAULT_ICON_SIZE_DP, 13, (hasAA ? 5 : 5), 56));
+        deviceProfiles.add(new DeviceProfile("Large Phone",
+                400, 680,  5, 5,  64, 14.4f,  5, 56));
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -71,6 +71,8 @@ public DynamicGrid(Context context, Resources resources,
                 296, 491.33f,  4, 4,  48, 13, (hasAA ? 5 : 5), 48));
         deviceProfiles.add(new DeviceProfile("Nexus 4",
                 359, 518,  4, 4,  DEFAULT_ICON_SIZE_DP, 13, (hasAA ? 5 : 5), 56));
+        deviceProfiles.add(new DeviceProfile("Large Phone",
+                400, 680,  5, 5,  64, 14.4f,  5, 56));
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -71,6 +71,8 @@ public DynamicGrid(Context context, Resources resources,
                 296, 491.33f,  4, 4,  48, 13, (hasAA ? 5 : 5), 48));
         deviceProfiles.add(new DeviceProfile("Nexus 4",
                 359, 518,  4, 4,  DEFAULT_ICON_SIZE_DP, 13, (hasAA ? 5 : 5), 56));
+        deviceProfiles.add(new DeviceProfile("Large Phone",
+                400, 680,  5, 5,  64, 14.4f,  5, 56));
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -71,6 +71,8 @@ public DynamicGrid(Context context, Resources resources,
                 296, 491.33f,  4, 4,  48, 13, (hasAA ? 5 : 5), 48));
         deviceProfiles.add(new DeviceProfile("Nexus 4",
                 359, 518,  4, 4,  DEFAULT_ICON_SIZE_DP, 13, (hasAA ? 5 : 5), 56));
+        deviceProfiles.add(new DeviceProfile("Large Phone",
+                400, 680,  5, 5,  64, 14.4f,  5, 56));
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2513,7 +2513,8 @@ void startApplicationDetailsActivity(ComponentName componentName) {
         String packageName = componentName.getPackageName();
         Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                 Uri.fromParts("package", packageName, null));
-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK |
+                Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
         startActivitySafely(null, intent, "startApplicationDetailsActivity");
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2709,7 +2709,7 @@ public static ArrayList<Object> getSortedWidgetsAndShortcuts(Context context) {
         return widgetsAndShortcuts;
     }
 
-    private boolean isPackageDisabled(PackageManager pm, String packageName) {
+    private static boolean isPackageDisabled(PackageManager pm, String packageName) {
         try {
             PackageInfo pi = pm.getPackageInfo(packageName, 0);
             return !pi.applicationInfo.enabled;
@@ -2718,7 +2718,8 @@ private boolean isPackageDisabled(PackageManager pm, String packageName) {
         }
         return false;
     }
-    private boolean isValidPackageComponent(PackageManager pm, ComponentName cn) {
+
+    public static boolean isValidPackageComponent(PackageManager pm, ComponentName cn) {
         if (cn == null) {
             return false;
         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2513,7 +2513,8 @@ void startApplicationDetailsActivity(ComponentName componentName) {
         String packageName = componentName.getPackageName();
         Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                 Uri.fromParts("package", packageName, null));
-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK |
+                Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
         startActivitySafely(null, intent, "startApplicationDetailsActivity");
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2513,7 +2513,8 @@ void startApplicationDetailsActivity(ComponentName componentName) {
         String packageName = componentName.getPackageName();
         Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                 Uri.fromParts("package", packageName, null));
-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK |
+                Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
         startActivitySafely(null, intent, "startApplicationDetailsActivity");
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -227,8 +227,8 @@ private static void runOnWorkerThread(Runnable r) {
         }
     }
 
-    boolean canMigrateFromOldLauncherDb() {
-        return mOldContentProviderExists;
+    boolean canMigrateFromOldLauncherDb(Launcher launcher) {
+        return mOldContentProviderExists && !launcher.isLauncherPreinstalled() ;
     }
 
     static boolean findNextAvailableIconSpaceInScreen(ArrayList<ItemInfo> items, int[] xy,

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -227,8 +227,8 @@ private static void runOnWorkerThread(Runnable r) {
         }
     }
 
-    boolean canMigrateFromOldLauncherDb() {
-        return mOldContentProviderExists;
+    boolean canMigrateFromOldLauncherDb(Launcher launcher) {
+        return mOldContentProviderExists && !launcher.isLauncherPreinstalled() ;
     }
 
     static boolean findNextAvailableIconSpaceInScreen(ArrayList<ItemInfo> items, int[] xy,

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -227,8 +227,8 @@ private static void runOnWorkerThread(Runnable r) {
         }
     }
 
-    boolean canMigrateFromOldLauncherDb() {
-        return mOldContentProviderExists;
+    boolean canMigrateFromOldLauncherDb(Launcher launcher) {
+        return mOldContentProviderExists && !launcher.isLauncherPreinstalled() ;
     }
 
     static boolean findNextAvailableIconSpaceInScreen(ArrayList<ItemInfo> items, int[] xy,

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -227,8 +227,8 @@ private static void runOnWorkerThread(Runnable r) {
         }
     }
 
-    boolean canMigrateFromOldLauncherDb() {
-        return mOldContentProviderExists;
+    boolean canMigrateFromOldLauncherDb(Launcher launcher) {
+        return mOldContentProviderExists && !launcher.isLauncherPreinstalled() ;
     }
 
     static boolean findNextAvailableIconSpaceInScreen(ArrayList<ItemInfo> items, int[] xy,

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -665,7 +665,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
         final CellLayout layout = (CellLayout) parent.getParent();
         final Workspace workspace = (Workspace) layout.getParent();
         final ViewGroup launcher = (ViewGroup) workspace.getParent();
-        final ViewGroup tabs = (ViewGroup) launcher.findViewById(R.id.qsb_bar);
+        final ViewGroup tabs = (ViewGroup) launcher.findViewById(R.id.search_drop_target_bar);
         final ViewGroup hotseat = (ViewGroup) launcher.findViewById(R.id.hotseat);
         int pageIndex = workspace.indexOfChild(layout);
         int pageCount = workspace.getChildCount();

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -665,7 +665,7 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
         final CellLayout layout = (CellLayout) parent.getParent();
         final Workspace workspace = (Workspace) layout.getParent();
         final ViewGroup launcher = (ViewGroup) workspace.getParent();
-        final ViewGroup tabs = (ViewGroup) launcher.findViewById(R.id.qsb_bar);
+        final ViewGroup tabs = (ViewGroup) launcher.findViewById(R.id.search_drop_target_bar);
         final ViewGroup hotseat = (ViewGroup) launcher.findViewById(R.id.hotseat);
         int pageIndex = workspace.indexOfChild(layout);
         int pageCount = workspace.getChildCount();

File: src/com/android/launcher3/WallpaperChangedReceiver.java
Patch:
@@ -22,6 +22,7 @@
 
 public class WallpaperChangedReceiver extends BroadcastReceiver {
     public void onReceive(Context context, Intent data) {
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState appState = LauncherAppState.getInstance();
         appState.onWallpaperChanged();
     }

File: src/com/android/launcher3/WallpaperChangedReceiver.java
Patch:
@@ -22,6 +22,7 @@
 
 public class WallpaperChangedReceiver extends BroadcastReceiver {
     public void onReceive(Context context, Intent data) {
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState appState = LauncherAppState.getInstance();
         appState.onWallpaperChanged();
     }

File: src/com/android/launcher3/WallpaperChangedReceiver.java
Patch:
@@ -22,6 +22,7 @@
 
 public class WallpaperChangedReceiver extends BroadcastReceiver {
     public void onReceive(Context context, Intent data) {
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState appState = LauncherAppState.getInstance();
         appState.onWallpaperChanged();
     }

File: src/com/android/launcher3/AppsCustomizeTabHost.java
Patch:
@@ -407,7 +407,7 @@ public void onLauncherTransitionStart(Launcher l, boolean animated, boolean toWo
         }
 
         // Dismiss the workspace cling
-        l.dismissWorkspaceCling(null);
+        l.getLauncherClings().dismissWorkspaceCling(null);
     }
 
     @Override

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -168,7 +168,8 @@ private boolean handleTouchDown(MotionEvent ev, boolean intercept) {
         }
 
         Folder currentFolder = mLauncher.getWorkspace().getOpenFolder();
-        if (currentFolder != null && !mLauncher.isFolderClingVisible() && intercept) {
+        if (currentFolder != null && !mLauncher.getLauncherClings().isFolderClingVisible() &&
+                intercept) {
             if (currentFolder.isEditingName()) {
                 if (!isEventOverFolderTextRegion(currentFolder, ev)) {
                     currentFolder.dismissEditingName();

File: src/com/android/launcher3/Folder.java
Patch:
@@ -238,7 +238,7 @@ public boolean onLongClick(View v) {
                 return false;
             }
 
-            mLauncher.dismissFolderCling(null);
+            mLauncher.getLauncherClings().dismissFolderCling(null);
 
             mLauncher.getWorkspace().onDragStartedWithItem(v);
             mLauncher.getWorkspace().beginDragShared(v, this);
@@ -466,7 +466,7 @@ public void onAnimationStart(Animator animation) {
             public void onAnimationEnd(Animator animation) {
                 mState = STATE_OPEN;
                 setLayerType(LAYER_TYPE_NONE, null);
-                Cling cling = mLauncher.showFirstRunFoldersCling();
+                Cling cling = mLauncher.getLauncherClings().showFoldersCling();
                 if (cling != null) {
                     cling.bringScrimToFront();
                     bringToFront();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -579,7 +579,7 @@ public void createCustomContentPage() {
         mDefaultPage = mOriginalDefaultPage + 1;
 
         // Update the custom content hint
-        mLauncher.updateCustomContentHintVisibility();
+        mLauncher.getLauncherClings().updateCustomContentHintVisibility();
         if (mRestorePage != INVALID_RESTORE_PAGE) {
             mRestorePage = mRestorePage + 1;
         } else {
@@ -608,7 +608,7 @@ public void removeCustomContentPage() {
         mDefaultPage = mOriginalDefaultPage - 1;
 
         // Update the custom content hint
-        mLauncher.updateCustomContentHintVisibility();
+        mLauncher.getLauncherClings().updateCustomContentHintVisibility();
         if (mRestorePage != INVALID_RESTORE_PAGE) {
             mRestorePage = mRestorePage - 1;
         } else {

File: src/com/android/launcher3/AppsCustomizeTabHost.java
Patch:
@@ -407,7 +407,7 @@ public void onLauncherTransitionStart(Launcher l, boolean animated, boolean toWo
         }
 
         // Dismiss the workspace cling
-        l.dismissWorkspaceCling(null);
+        l.getLauncherClings().dismissWorkspaceCling(null);
     }
 
     @Override

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -168,7 +168,8 @@ private boolean handleTouchDown(MotionEvent ev, boolean intercept) {
         }
 
         Folder currentFolder = mLauncher.getWorkspace().getOpenFolder();
-        if (currentFolder != null && !mLauncher.isFolderClingVisible() && intercept) {
+        if (currentFolder != null && !mLauncher.getLauncherClings().isFolderClingVisible() &&
+                intercept) {
             if (currentFolder.isEditingName()) {
                 if (!isEventOverFolderTextRegion(currentFolder, ev)) {
                     currentFolder.dismissEditingName();

File: src/com/android/launcher3/Folder.java
Patch:
@@ -238,7 +238,7 @@ public boolean onLongClick(View v) {
                 return false;
             }
 
-            mLauncher.dismissFolderCling(null);
+            mLauncher.getLauncherClings().dismissFolderCling(null);
 
             mLauncher.getWorkspace().onDragStartedWithItem(v);
             mLauncher.getWorkspace().beginDragShared(v, this);
@@ -466,7 +466,7 @@ public void onAnimationStart(Animator animation) {
             public void onAnimationEnd(Animator animation) {
                 mState = STATE_OPEN;
                 setLayerType(LAYER_TYPE_NONE, null);
-                Cling cling = mLauncher.showFirstRunFoldersCling();
+                Cling cling = mLauncher.getLauncherClings().showFoldersCling();
                 if (cling != null) {
                     cling.bringScrimToFront();
                     bringToFront();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -579,7 +579,7 @@ public void createCustomContentPage() {
         mDefaultPage = mOriginalDefaultPage + 1;
 
         // Update the custom content hint
-        mLauncher.updateCustomContentHintVisibility();
+        mLauncher.getLauncherClings().updateCustomContentHintVisibility();
         if (mRestorePage != INVALID_RESTORE_PAGE) {
             mRestorePage = mRestorePage + 1;
         } else {
@@ -608,7 +608,7 @@ public void removeCustomContentPage() {
         mDefaultPage = mOriginalDefaultPage - 1;
 
         // Update the custom content hint
-        mLauncher.updateCustomContentHintVisibility();
+        mLauncher.getLauncherClings().updateCustomContentHintVisibility();
         if (mRestorePage != INVALID_RESTORE_PAGE) {
             mRestorePage = mRestorePage - 1;
         } else {

File: src/com/android/launcher3/AppsCustomizeTabHost.java
Patch:
@@ -407,7 +407,7 @@ public void onLauncherTransitionStart(Launcher l, boolean animated, boolean toWo
         }
 
         // Dismiss the workspace cling
-        l.dismissWorkspaceCling(null);
+        l.getLauncherClings().dismissWorkspaceCling(null);
     }
 
     @Override

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -168,7 +168,8 @@ private boolean handleTouchDown(MotionEvent ev, boolean intercept) {
         }
 
         Folder currentFolder = mLauncher.getWorkspace().getOpenFolder();
-        if (currentFolder != null && !mLauncher.isFolderClingVisible() && intercept) {
+        if (currentFolder != null && !mLauncher.getLauncherClings().isFolderClingVisible() &&
+                intercept) {
             if (currentFolder.isEditingName()) {
                 if (!isEventOverFolderTextRegion(currentFolder, ev)) {
                     currentFolder.dismissEditingName();

File: src/com/android/launcher3/Folder.java
Patch:
@@ -238,7 +238,7 @@ public boolean onLongClick(View v) {
                 return false;
             }
 
-            mLauncher.dismissFolderCling(null);
+            mLauncher.getLauncherClings().dismissFolderCling(null);
 
             mLauncher.getWorkspace().onDragStartedWithItem(v);
             mLauncher.getWorkspace().beginDragShared(v, this);
@@ -466,7 +466,7 @@ public void onAnimationStart(Animator animation) {
             public void onAnimationEnd(Animator animation) {
                 mState = STATE_OPEN;
                 setLayerType(LAYER_TYPE_NONE, null);
-                Cling cling = mLauncher.showFirstRunFoldersCling();
+                Cling cling = mLauncher.getLauncherClings().showFoldersCling();
                 if (cling != null) {
                     cling.bringScrimToFront();
                     bringToFront();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -579,7 +579,7 @@ public void createCustomContentPage() {
         mDefaultPage = mOriginalDefaultPage + 1;
 
         // Update the custom content hint
-        mLauncher.updateCustomContentHintVisibility();
+        mLauncher.getLauncherClings().updateCustomContentHintVisibility();
         if (mRestorePage != INVALID_RESTORE_PAGE) {
             mRestorePage = mRestorePage + 1;
         } else {
@@ -608,7 +608,7 @@ public void removeCustomContentPage() {
         mDefaultPage = mOriginalDefaultPage - 1;
 
         // Update the custom content hint
-        mLauncher.updateCustomContentHintVisibility();
+        mLauncher.getLauncherClings().updateCustomContentHintVisibility();
         if (mRestorePage != INVALID_RESTORE_PAGE) {
             mRestorePage = mRestorePage - 1;
         } else {

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -297,7 +297,7 @@ private void backupFavorites(Journal in, BackupDataOutput data, Journal out,
                 Key key = getKey(Key.FAVORITE, id);
                 keys.add(key);
                 currentIds.add(keyToBackupKey(key));
-                if (updateTime > in.t) {
+                if (updateTime >= in.t) {
                     byte[] blob = packFavorite(cursor);
                     writeRowToBackup(key, blob, out, data);
                 }
@@ -365,7 +365,7 @@ private void backupScreens(Journal in, BackupDataOutput data, Journal out,
                 Key key = getKey(Key.SCREEN, id);
                 keys.add(key);
                 currentIds.add(keyToBackupKey(key));
-                if (updateTime > in.t) {
+                if (updateTime >= in.t) {
                     byte[] blob = packScreen(cursor);
                     writeRowToBackup(key, blob, out, data);
                 }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1972,9 +1972,7 @@ private void startGlobalSearch(String initialQuery,
     @Override
     public boolean onPrepareOptionsMenu(Menu menu) {
         super.onPrepareOptionsMenu(menu);
-        if (!mWorkspace.isInOverviewMode()) {
-            mWorkspace.enterOverviewMode();
-        }
+        showOverviewMode(true);
         return false;
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1200,7 +1200,7 @@ protected void onPageEndMoving() {
     @Override
     protected void notifyPageSwitchListener() {
         super.notifyPageSwitchListener();
-        Launcher.setScreen(mCurrentPage);
+        Launcher.setScreen(getNextPage());
 
         if (hasCustomContent() && getNextPage() == 0 && !mCustomContentShowing) {
             mCustomContentShowing = true;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1200,7 +1200,7 @@ protected void onPageEndMoving() {
     @Override
     protected void notifyPageSwitchListener() {
         super.notifyPageSwitchListener();
-        Launcher.setScreen(mCurrentPage);
+        Launcher.setScreen(getNextPage());
 
         if (hasCustomContent() && getNextPage() == 0 && !mCustomContentShowing) {
             mCustomContentShowing = true;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1209,7 +1209,7 @@ protected void onPageEndMoving() {
     @Override
     protected void notifyPageSwitchListener() {
         super.notifyPageSwitchListener();
-        Launcher.setScreen(mCurrentPage);
+        Launcher.setScreen(getNextPage());
 
         if (hasCustomContent() && getNextPage() == 0 && !mCustomContentShowing) {
             mCustomContentShowing = true;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1657,7 +1657,7 @@ protected void screenScrolled(int screenCenter) {
                 cl.setOverscrollTransformsDirty(true);
             }
         } else {
-            if (mOverscrollTransformsSet) {
+            if (mOverscrollTransformsSet && getChildCount() > 0) {
                 mOverscrollTransformsSet = false;
                 ((CellLayout) getChildAt(0)).resetOverscrollTransforms();
                 ((CellLayout) getChildAt(getChildCount() - 1)).resetOverscrollTransforms();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1657,7 +1657,7 @@ protected void screenScrolled(int screenCenter) {
                 cl.setOverscrollTransformsDirty(true);
             }
         } else {
-            if (mOverscrollTransformsSet) {
+            if (mOverscrollTransformsSet && getChildCount() > 0) {
                 mOverscrollTransformsSet = false;
                 ((CellLayout) getChildAt(0)).resetOverscrollTransforms();
                 ((CellLayout) getChildAt(getChildCount() - 1)).resetOverscrollTransforms();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1666,7 +1666,7 @@ protected void screenScrolled(int screenCenter) {
                 cl.setOverscrollTransformsDirty(true);
             }
         } else {
-            if (mOverscrollTransformsSet) {
+            if (mOverscrollTransformsSet && getChildCount() > 0) {
                 mOverscrollTransformsSet = false;
                 ((CellLayout) getChildAt(0)).resetOverscrollTransforms();
                 ((CellLayout) getChildAt(getChildCount() - 1)).resetOverscrollTransforms();

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -74,10 +74,10 @@ public DynamicGrid(Context context, Resources resources,
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",
-                575, 904,  5, 5,  72, 14.4f,  7, 60));
+                575, 904,  5, 6,  72, 14.4f,  7, 60));
         // Larger tablet profiles always have system bars on the top & bottom
         deviceProfiles.add(new DeviceProfile("Nexus 10",
-                727, 1207,  5, 5,  80, 14.4f,  7, 64));
+                727, 1207,  5, 6,  76, 14.4f,  7, 64));
         /*
         deviceProfiles.add(new DeviceProfile("Nexus 7",
                 600, 960,  5, 5,  72, 14.4f,  5, 60));

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -2632,9 +2632,9 @@ int[] performReorder(int pixelX, int pixelY, int minSpanX, int minSpanY, int spa
         }
 
         if (mode == MODE_SHOW_REORDER_HINT) {
-            beginOrAdjustReorderPreviewAnimations(finalSolution, dragView, 0,
-                    ReorderPreviewAnimation.MODE_HINT);
             if (finalSolution != null) {
+                beginOrAdjustReorderPreviewAnimations(finalSolution, dragView, 0,
+                        ReorderPreviewAnimation.MODE_HINT);
                 result[0] = finalSolution.dragViewX;
                 result[1] = finalSolution.dragViewY;
                 resultSpan[0] = finalSolution.dragViewSpanX;

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -74,10 +74,10 @@ public DynamicGrid(Context context, Resources resources,
         // The tablet profile is odd in that the landscape orientation
         // also includes the nav bar on the side
         deviceProfiles.add(new DeviceProfile("Nexus 7",
-                575, 904,  5, 5,  72, 14.4f,  7, 60));
+                575, 904,  5, 6,  72, 14.4f,  7, 60));
         // Larger tablet profiles always have system bars on the top & bottom
         deviceProfiles.add(new DeviceProfile("Nexus 10",
-                727, 1207,  5, 5,  80, 14.4f,  7, 64));
+                727, 1207,  5, 6,  76, 14.4f,  7, 64));
         /*
         deviceProfiles.add(new DeviceProfile("Nexus 7",
                 600, 960,  5, 5,  72, 14.4f,  5, 60));

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -188,7 +188,7 @@ public void performBackup(ParcelFileDescriptor oldState, BackupDataOutput data,
             Log.e(TAG, "launcher backup has failed", e);
         }
 
-        out.key = keys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = keys.toArray(BackupProtos.Key.emptyArray());
         writeJournal(newState, out);
         Log.v(TAG, "onBackup: wrote " + out.bytes + "b in " + out.rows + " rows.");
     }
@@ -260,7 +260,7 @@ public void writeNewStateDescription(ParcelFileDescriptor newState) {
         // will catch any changes the restore process might have made
         Journal out = new Journal();
         out.t = 0;
-        out.key = mKeys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = mKeys.toArray(BackupProtos.Key.emptyArray());
         writeJournal(newState, out);
         Log.v(TAG, "onRestore: read " + mKeys.size() + " rows");
         mKeys.clear();

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -188,7 +188,7 @@ public void performBackup(ParcelFileDescriptor oldState, BackupDataOutput data,
             Log.e(TAG, "launcher backup has failed", e);
         }
 
-        out.key = keys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = keys.toArray(BackupProtos.Key.emptyArray());
         writeJournal(newState, out);
         Log.v(TAG, "onBackup: wrote " + out.bytes + "b in " + out.rows + " rows.");
     }
@@ -260,7 +260,7 @@ public void writeNewStateDescription(ParcelFileDescriptor newState) {
         // will catch any changes the restore process might have made
         Journal out = new Journal();
         out.t = 0;
-        out.key = mKeys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = mKeys.toArray(BackupProtos.Key.emptyArray());
         writeJournal(newState, out);
         Log.v(TAG, "onRestore: read " + mKeys.size() + " rows");
         mKeys.clear();

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -188,7 +188,7 @@ public void performBackup(ParcelFileDescriptor oldState, BackupDataOutput data,
             Log.e(TAG, "launcher backup has failed", e);
         }
 
-        out.key = keys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = keys.toArray(BackupProtos.Key.emptyArray());
         writeJournal(newState, out);
         Log.v(TAG, "onBackup: wrote " + out.bytes + "b in " + out.rows + " rows.");
     }
@@ -260,7 +260,7 @@ public void writeNewStateDescription(ParcelFileDescriptor newState) {
         // will catch any changes the restore process might have made
         Journal out = new Journal();
         out.t = 0;
-        out.key = mKeys.toArray(BackupProtos.Key.EMPTY_ARRAY);
+        out.key = mKeys.toArray(BackupProtos.Key.emptyArray());
         writeJournal(newState, out);
         Log.v(TAG, "onRestore: read " + mKeys.size() + " rows");
         mKeys.clear();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -456,7 +456,7 @@ protected void onCreate(Bundle savedInstanceState) {
             if (DISABLE_SYNCHRONOUS_BINDING_CURRENT_PAGE || sPausedFromUserAction) {
                 // If the user leaves launcher, then we should just load items asynchronously when
                 // they return.
-                mModel.startLoader(true, -1);
+                mModel.startLoader(true, PagedView.INVALID_RESTORE_PAGE);
             } else {
                 // We only load the page synchronously if the user rotates (or triggers a
                 // configuration change) while launcher is in the foreground
@@ -914,7 +914,7 @@ protected void onResume() {
         sPausedFromUserAction = false;
         if (mRestoring || mOnResumeNeedsLoad) {
             mWorkspaceLoading = true;
-            mModel.startLoader(true, -1);
+            mModel.startLoader(true, PagedView.INVALID_RESTORE_PAGE);
             mRestoring = false;
             mOnResumeNeedsLoad = false;
         }

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import java.util.ArrayList;
-
 import android.content.ContentValues;
 
+import java.util.ArrayList;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,8 +584,9 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
+            if (modelItem != null &&
+                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import android.content.ContentValues;
-
 import java.util.ArrayList;
 
+import android.content.ContentValues;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,9 +584,8 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem != null &&
-                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
+            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import android.content.ContentValues;
-
 import java.util.ArrayList;
 
+import android.content.ContentValues;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,9 +584,8 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem != null &&
-                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
+            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import android.content.ContentValues;
-
 import java.util.ArrayList;
 
+import android.content.ContentValues;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,9 +584,8 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem != null &&
-                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
+            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import java.util.ArrayList;
-
 import android.content.ContentValues;
 
+import java.util.ArrayList;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,8 +584,9 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
+            if (modelItem != null &&
+                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import java.util.ArrayList;
-
 import android.content.ContentValues;
 
+import java.util.ArrayList;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,8 +584,9 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
+            if (modelItem != null &&
+                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/FolderInfo.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.android.launcher3;
 
-import java.util.ArrayList;
-
 import android.content.ContentValues;
 
+import java.util.ArrayList;
+
 /**
  * Represents a folder containing shortcuts or apps.
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -584,8 +584,9 @@ static void updateItemArrays(ItemInfo item, long itemId, StackTraceElement[] sta
             // as in Workspace.onDrop. Here, we just add/remove them from the list of items
             // that are on the desktop, as appropriate
             ItemInfo modelItem = sBgItemsIdMap.get(itemId);
-            if (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
-                    modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
+            if (modelItem != null &&
+                    (modelItem.container == LauncherSettings.Favorites.CONTAINER_DESKTOP ||
+                     modelItem.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT)) {
                 switch (modelItem.itemType) {
                     case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
                     case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:

File: src/com/android/launcher3/Folder.java
Patch:
@@ -82,7 +82,7 @@ public class Folder extends LinearLayout implements DragSource, View.OnClickList
     private int mState = STATE_NONE;
     private static final int REORDER_ANIMATION_DURATION = 230;
     private static final int REORDER_DELAY = 250;
-    private static final int ON_EXIT_CLOSE_DELAY = 800;
+    private static final int ON_EXIT_CLOSE_DELAY = 400;
     private boolean mRearrangeOnClose = false;
     private FolderIcon mFolderIcon;
     private int mMaxCountX;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1398,7 +1398,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
                 if (finishedScrolling) {
                     mTouchState = TOUCH_STATE_REST;
-                    if (!mScroller.isFinished()) {
+                    if (!mScroller.isFinished() && !mFreeScroll) {
                         setCurrentPage(getNextPage());
                         pageEndMoving();
                     }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1398,7 +1398,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
                 if (finishedScrolling) {
                     mTouchState = TOUCH_STATE_REST;
-                    if (!mScroller.isFinished()) {
+                    if (!mScroller.isFinished() && !mFreeScroll) {
                         setCurrentPage(getNextPage());
                         pageEndMoving();
                     }

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -716,7 +716,8 @@ public void layout(Launcher launcher) {
                 paddingTB = Math.min(paddingTB, (int)((paddingLR + paddingTB) * 0.75f));
                 int maxAllAppsWidth = (allAppsNumCols * (allAppsCellWidthPx + 2 * paddingLR));
                 int gridPaddingLR = (availableWidthPx - maxAllAppsWidth) / 2;
-                if (gridPaddingLR > (allAppsCellWidthPx / 4)) {
+                // Only adjust the side paddings on landscape phones, or tablets
+                if ((isTablet() || isLandscape) && gridPaddingLR > (allAppsCellWidthPx / 4)) {
                     padding.left = padding.right = gridPaddingLR;
                 }
                 // The icons are centered, so we can't just offset by the page indicator height

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1765,7 +1765,7 @@ protected void onNewIntent(Intent intent) {
             }
 
             // Reset the apps customize page
-            if (mAppsCustomizeTabHost != null) {
+            if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
                 mAppsCustomizeTabHost.reset();
             }
 
@@ -2375,7 +2375,7 @@ public void startVoice() {
      * @param v The view that was clicked.
      */
     public void onClickAllAppsButton(View v) {
-        showAllApps(true, AppsCustomizePagedView.ContentType.Applications, true);
+        showAllApps(true, AppsCustomizePagedView.ContentType.Applications, false);
     }
 
     public void onTouchDownAllAppsButton(View v) {

File: src/com/android/launcher3/DeviceProfile.java
Patch:
@@ -703,7 +703,8 @@ public void layout(Launcher launcher) {
                 paddingTB = Math.min(paddingTB, (int)((paddingLR + paddingTB) * 0.75f));
                 int maxAllAppsWidth = (allAppsNumCols * (allAppsCellWidthPx + 2 * paddingLR));
                 int gridPaddingLR = (availableWidthPx - maxAllAppsWidth) / 2;
-                if (gridPaddingLR > (allAppsCellWidthPx / 4)) {
+                // Only adjust the side paddings on landscape phones, or tablets
+                if ((isTablet() || isLandscape) && gridPaddingLR > (allAppsCellWidthPx / 4)) {
                     padding.left = padding.right = gridPaddingLR;
                 }
                 // The icons are centered, so we can't just offset by the page indicator height

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1765,7 +1765,7 @@ protected void onNewIntent(Intent intent) {
             }
 
             // Reset the apps customize page
-            if (mAppsCustomizeTabHost != null) {
+            if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
                 mAppsCustomizeTabHost.reset();
             }
 
@@ -2375,7 +2375,7 @@ public void startVoice() {
      * @param v The view that was clicked.
      */
     public void onClickAllAppsButton(View v) {
-        showAllApps(true, AppsCustomizePagedView.ContentType.Applications, true);
+        showAllApps(true, AppsCustomizePagedView.ContentType.Applications, false);
     }
 
     public void onTouchDownAllAppsButton(View v) {

File: src/com/android/launcher3/LauncherBackupHelper.java
Patch:
@@ -82,6 +82,8 @@ public class LauncherBackupHelper implements BackupHelper {
 
     public static final String LAUNCHER_PREFIX = "L";
 
+    public static final String LAUNCHER_PREFS_PREFIX = "LP";
+
     private static final Bitmap.CompressFormat IMAGE_FORMAT =
             android.graphics.Bitmap.CompressFormat.PNG;
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2298,7 +2298,7 @@ public void run() {
                 r = new Runnable() {
                     public void run() {
                         Callbacks callbacks = tryGetCallbacks(oldCallbacks);
-                        if (callbacks != null) {
+                        if (callbacks != null && currentScreen >= 0) {
                             callbacks.onPageBoundSynchronously(currentScreen);
                         }
                     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4264,7 +4264,9 @@ public void restoreInstanceStateForChild(int child) {
         if (mSavedStates != null) {
             mRestoredPages.add(child);
             CellLayout cl = (CellLayout) getChildAt(child);
-            cl.restoreInstanceState(mSavedStates);
+            if (cl != null) {
+                cl.restoreInstanceState(mSavedStates);
+            }
         }
     }
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2298,7 +2298,7 @@ public void run() {
                 r = new Runnable() {
                     public void run() {
                         Callbacks callbacks = tryGetCallbacks(oldCallbacks);
-                        if (callbacks != null) {
+                        if (callbacks != null && currentScreen >= 0) {
                             callbacks.onPageBoundSynchronously(currentScreen);
                         }
                     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4254,7 +4254,9 @@ public void restoreInstanceStateForChild(int child) {
         if (mSavedStates != null) {
             mRestoredPages.add(child);
             CellLayout cl = (CellLayout) getChildAt(child);
-            cl.restoreInstanceState(mSavedStates);
+            if (cl != null) {
+                cl.restoreInstanceState(mSavedStates);
+            }
         }
     }
 

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -72,7 +72,7 @@ public class LauncherProvider extends ContentProvider {
     static final String AUTHORITY = ProviderConfig.AUTHORITY;
 
     // Should we attempt to load anything from the com.android.launcher2 provider?
-    static final boolean IMPORT_LAUNCHER2_DATABASE = false;
+    static final boolean IMPORT_LAUNCHER2_DATABASE = true;
 
     static final String TABLE_FAVORITES = "favorites";
     static final String TABLE_WORKSPACE_SCREENS = "workspaceScreens";

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1878,7 +1878,7 @@ public void onDestroy() {
 
         mDragLayer.clearAllResizeFrames();
         ((ViewGroup) mWorkspace.getParent()).removeAllViews();
-        mWorkspace.removeAllViews();
+        mWorkspace.removeAllWorkspaceScreens();
         mWorkspace = null;
         mDragController = null;
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1877,7 +1877,7 @@ public void onDestroy() {
 
         mDragLayer.clearAllResizeFrames();
         ((ViewGroup) mWorkspace.getParent()).removeAllViews();
-        mWorkspace.removeAllViews();
+        mWorkspace.removeAllWorkspaceScreens();
         mWorkspace = null;
         mDragController = null;
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2664,7 +2664,7 @@ public void openFolder(FolderIcon folderIcon) {
     }
 
     public void closeFolder() {
-        Folder folder = mWorkspace.getOpenFolder();
+        Folder folder = mWorkspace != null ? mWorkspace.getOpenFolder() : null;
         if (folder != null) {
             if (folder.isEditingName()) {
                 folder.dismissEditingName();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2663,7 +2663,7 @@ public void openFolder(FolderIcon folderIcon) {
     }
 
     public void closeFolder() {
-        Folder folder = mWorkspace.getOpenFolder();
+        Folder folder = mWorkspace != null ? mWorkspace.getOpenFolder() : null;
         if (folder != null) {
             if (folder.isEditingName()) {
                 folder.dismissEditingName();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2663,7 +2663,7 @@ public void openFolder(FolderIcon folderIcon) {
     }
 
     public void closeFolder() {
-        Folder folder = mWorkspace.getOpenFolder();
+        Folder folder = mWorkspace != null ? mWorkspace.getOpenFolder() : null;
         if (folder != null) {
             if (folder.isEditingName()) {
                 folder.dismissEditingName();

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -72,7 +72,7 @@ public class LauncherProvider extends ContentProvider {
     static final String AUTHORITY = ProviderConfig.AUTHORITY;
 
     // Should we attempt to load anything from the com.android.launcher2 provider?
-    static final boolean IMPORT_LAUNCHER2_DATABASE = true;
+    static final boolean IMPORT_LAUNCHER2_DATABASE = false;
 
     static final String TABLE_FAVORITES = "favorites";
     static final String TABLE_WORKSPACE_SCREENS = "workspaceScreens";

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -72,7 +72,7 @@ public class LauncherProvider extends ContentProvider {
     static final String AUTHORITY = ProviderConfig.AUTHORITY;
 
     // Should we attempt to load anything from the com.android.launcher2 provider?
-    static final boolean IMPORT_LAUNCHER2_DATABASE = false;
+    static final boolean IMPORT_LAUNCHER2_DATABASE = true;
 
     static final String TABLE_FAVORITES = "favorites";
     static final String TABLE_WORKSPACE_SCREENS = "workspaceScreens";

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -690,7 +690,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
             mWorkspaceScreens.put(EXTRA_EMPTY_SCREEN_ID, finalScreen);
             mScreenOrder.add(EXTRA_EMPTY_SCREEN_ID);
 
-            // XXX: Do we need to update LM workspace screens here?
+            // Update the model if we have changed any screens
+            mLauncher.getModel().updateWorkspaceScreenOrder(mLauncher, mScreenOrder);
             Launcher.addDumpLog(TAG, "11683562 -   extra empty screen: " + finalScreenId, true);
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -690,7 +690,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
             mWorkspaceScreens.put(EXTRA_EMPTY_SCREEN_ID, finalScreen);
             mScreenOrder.add(EXTRA_EMPTY_SCREEN_ID);
 
-            // XXX: Do we need to update LM workspace screens here?
+            // Update the model if we have changed any screens
+            mLauncher.getModel().updateWorkspaceScreenOrder(mLauncher, mScreenOrder);
             Launcher.addDumpLog(TAG, "11683562 -   extra empty screen: " + finalScreenId, true);
         }
     }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1636,7 +1636,9 @@ private boolean loadWorkspace() {
             LauncherAppState.getLauncherProvider().loadDefaultFavoritesIfNecessary(0);
 
             // Check if we need to do any upgrade-path logic
+            // (Includes having just imported default favorites)
             boolean loadedOldDb = LauncherAppState.getLauncherProvider().justLoadedOldDb();
+
             // Log to disk
             Launcher.addDumpLog(TAG, "11683562 -   loadedOldDb: " + loadedOldDb, true);
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -690,7 +690,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
             mWorkspaceScreens.put(EXTRA_EMPTY_SCREEN_ID, finalScreen);
             mScreenOrder.add(EXTRA_EMPTY_SCREEN_ID);
 
-            // XXX: Do we need to update LM workspace screens here?
+            // Update the model if we have changed any screens
+            mLauncher.getModel().updateWorkspaceScreenOrder(mLauncher, mScreenOrder);
             Launcher.addDumpLog(TAG, "11683562 -   extra empty screen: " + finalScreenId, true);
         }
     }

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -32,6 +32,7 @@ class FastBitmapDrawable extends Drawable {
     FastBitmapDrawable(Bitmap b) {
         mAlpha = 255;
         mBitmap = b;
+        setBounds(0, 0, b.getWidth(), b.getHeight());
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -459,7 +459,7 @@ protected void onCreate(Bundle savedInstanceState) {
             } else {
                 // We only load the page synchronously if the user rotates (or triggers a
                 // configuration change) while launcher is in the foreground
-                mModel.startLoader(true, mWorkspace.getCurrentPage());
+                mModel.startLoader(true, mWorkspace.getRestorePage());
             }
         }
 
@@ -1801,7 +1801,8 @@ public void onRestoreInstanceState(Bundle state) {
     @Override
     protected void onSaveInstanceState(Bundle outState) {
         if (mWorkspace.getChildCount() > 0) {
-            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN, mWorkspace.getRestorePage());
+            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN,
+                    mWorkspace.getCurrentPageOffsetFromCustomContent());
         }
         super.onSaveInstanceState(outState);
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -571,6 +571,9 @@ void setCurrentPage(int currentPage) {
     void setRestorePage(int restorePage) {
         mRestorePage = restorePage;
     }
+    int getRestorePage() {
+        return mRestorePage;
+    }
 
     protected void notifyPageSwitchListener() {
         if (mPageSwitchListener != null) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3961,7 +3961,7 @@ public CellLayout.CellInfo getDragInfo() {
         return mDragInfo;
     }
 
-    public int getRestorePage() {
+    public int getCurrentPageOffsetFromCustomContent() {
         return getNextPage() - numCustomPages();
     }
 

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -32,6 +32,7 @@ class FastBitmapDrawable extends Drawable {
     FastBitmapDrawable(Bitmap b) {
         mAlpha = 255;
         mBitmap = b;
+        setBounds(0, 0, b.getWidth(), b.getHeight());
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -459,7 +459,7 @@ protected void onCreate(Bundle savedInstanceState) {
             } else {
                 // We only load the page synchronously if the user rotates (or triggers a
                 // configuration change) while launcher is in the foreground
-                mModel.startLoader(true, mWorkspace.getCurrentPage());
+                mModel.startLoader(true, mWorkspace.getRestorePage());
             }
         }
 
@@ -1801,7 +1801,8 @@ public void onRestoreInstanceState(Bundle state) {
     @Override
     protected void onSaveInstanceState(Bundle outState) {
         if (mWorkspace.getChildCount() > 0) {
-            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN, mWorkspace.getRestorePage());
+            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN,
+                    mWorkspace.getCurrentPageOffsetFromCustomContent());
         }
         super.onSaveInstanceState(outState);
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -571,6 +571,9 @@ void setCurrentPage(int currentPage) {
     void setRestorePage(int restorePage) {
         mRestorePage = restorePage;
     }
+    int getRestorePage() {
+        return mRestorePage;
+    }
 
     protected void notifyPageSwitchListener() {
         if (mPageSwitchListener != null) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3961,7 +3961,7 @@ public CellLayout.CellInfo getDragInfo() {
         return mDragInfo;
     }
 
-    public int getRestorePage() {
+    public int getCurrentPageOffsetFromCustomContent() {
         return getNextPage() - numCustomPages();
     }
 

File: src/com/android/launcher3/FastBitmapDrawable.java
Patch:
@@ -32,6 +32,7 @@ class FastBitmapDrawable extends Drawable {
     FastBitmapDrawable(Bitmap b) {
         mAlpha = 255;
         mBitmap = b;
+        setBounds(0, 0, b.getWidth(), b.getHeight());
     }
 
     @Override

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2113,7 +2113,6 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay,
             enableFreeScroll();
         }
 
-
         if (state != State.NORMAL) {
             if (stateIsSpringLoaded) {
                 mNewScale = mSpringLoadedShrinkFactor;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -459,7 +459,7 @@ protected void onCreate(Bundle savedInstanceState) {
             } else {
                 // We only load the page synchronously if the user rotates (or triggers a
                 // configuration change) while launcher is in the foreground
-                mModel.startLoader(true, mWorkspace.getCurrentPage());
+                mModel.startLoader(true, mWorkspace.getRestorePage());
             }
         }
 
@@ -1801,7 +1801,8 @@ public void onRestoreInstanceState(Bundle state) {
     @Override
     protected void onSaveInstanceState(Bundle outState) {
         if (mWorkspace.getChildCount() > 0) {
-            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN, mWorkspace.getRestorePage());
+            outState.putInt(RUNTIME_STATE_CURRENT_SCREEN,
+                    mWorkspace.getCurrentPageOffsetFromCustomContent());
         }
         super.onSaveInstanceState(outState);
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -564,6 +564,9 @@ void setCurrentPage(int currentPage) {
     void setRestorePage(int restorePage) {
         mRestorePage = restorePage;
     }
+    int getRestorePage() {
+        return mRestorePage;
+    }
 
     protected void notifyPageSwitchListener() {
         if (mPageSwitchListener != null) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3956,7 +3956,7 @@ public CellLayout.CellInfo getDragInfo() {
         return mDragInfo;
     }
 
-    public int getRestorePage() {
+    public int getCurrentPageOffsetFromCustomContent() {
         return getNextPage() - numCustomPages();
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2336,7 +2336,9 @@ void showCustomContentIfNecessary() {
     void hideCustomContentIfNecessary() {
         boolean hide  = mState != Workspace.State.NORMAL;
         if (hide && hasCustomContent()) {
+            disableLayoutTransitions();
             mWorkspaceScreens.get(CUSTOM_CONTENT_SCREEN_ID).setVisibility(INVISIBLE);
+            enableLayoutTransitions();
         }
     }
 

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -294,7 +294,7 @@ else if (exists && !allowDuplicate) {
             // Add the new apps to the model and bind them
             if (!addShortcuts.isEmpty()) {
                 LauncherAppState app = LauncherAppState.getInstance();
-                app.getModel().addAndBindAddedApps(context, addShortcuts, null);
+                app.getModel().addAndBindAddedApps(context, addShortcuts, new ArrayList<AppInfo>());
             }
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -949,7 +949,9 @@ void addInScreen(View child, long container, long screenId, int x, int y, int sp
         }
 
         // Get the canonical child id to uniquely represent this view in this screen
-        int childId = LauncherModel.getCellLayoutChildId(container, screenId, x, y, spanX, spanY);
+        ItemInfo info = (ItemInfo) child.getTag();
+        int childId = mLauncher.getViewIdForItem(info);
+
         boolean markCellsAsOccupied = !(child instanceof Folder);
         if (!layout.addViewToCellLayout(child, insert ? 0 : -1, childId, lp, markCellsAsOccupied)) {
             // TODO: This branch occurs when the workspace is adding views
@@ -2890,8 +2892,6 @@ public void onDrop(final DragObject d) {
                     lp.cellHSpan = item.spanX;
                     lp.cellVSpan = item.spanY;
                     lp.isLockedToGrid = true;
-                    cell.setId(LauncherModel.getCellLayoutChildId(container, mDragInfo.screenId,
-                            mTargetCell[0], mTargetCell[1], mDragInfo.spanX, mDragInfo.spanY));
 
                     if (container != LauncherSettings.Favorites.CONTAINER_HOTSEAT &&
                             cell instanceof LauncherAppWidgetHostView) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2336,7 +2336,9 @@ void showCustomContentIfNecessary() {
     void hideCustomContentIfNecessary() {
         boolean hide  = mState != Workspace.State.NORMAL;
         if (hide && hasCustomContent()) {
+            disableLayoutTransitions();
             mWorkspaceScreens.get(CUSTOM_CONTENT_SCREEN_ID).setVisibility(INVISIBLE);
+            enableLayoutTransitions();
         }
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2336,7 +2336,9 @@ void showCustomContentIfNecessary() {
     void hideCustomContentIfNecessary() {
         boolean hide  = mState != Workspace.State.NORMAL;
         if (hide && hasCustomContent()) {
+            disableLayoutTransitions();
             mWorkspaceScreens.get(CUSTOM_CONTENT_SCREEN_ID).setVisibility(INVISIBLE);
+            enableLayoutTransitions();
         }
     }
 

File: src/com/android/launcher3/Folder.java
Patch:
@@ -758,6 +758,8 @@ public void run() {
                 }
                 completeDragExit();
             }
+        } else {
+            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
         }
 
         mDeleteFolderOnDropCompleted = false;

File: src/com/android/launcher3/CropView.java
Patch:
@@ -165,7 +165,8 @@ private void updateMinScale(int w, int h, TileSource source, boolean resetScale)
                 final float imageWidth = imageDims[0];
                 final float imageHeight = imageDims[1];
                 mMinScale = Math.max(w / imageWidth, h / imageHeight);
-                mRenderer.scale = Math.max(mMinScale, mRenderer.scale);
+                mRenderer.scale =
+                        Math.max(mMinScale, resetScale ? Float.MIN_VALUE : mRenderer.scale);
             }
         }
     }

File: src/com/android/launcher3/DragController.java
Patch:
@@ -327,7 +327,7 @@ public void onAppsRemoved(final ArrayList<String> packageNames, ArrayList<AppInf
                 for (AppInfo info : appInfos) {
                     // Added null checks to prevent NPE we've seen in the wild
                     if (dragInfo != null &&
-                        dragInfo.intent != null) {
+                            dragInfo.intent != null && info != null) {
                         ComponentName cn = dragInfo.intent.getComponent();
                         boolean isSameComponent = cn.equals(info.componentName) ||
                                 packageNames.contains(cn.getPackageName());

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -294,7 +294,7 @@ else if (exists && !allowDuplicate) {
             // Add the new apps to the model and bind them
             if (!addShortcuts.isEmpty()) {
                 LauncherAppState app = LauncherAppState.getInstance();
-                app.getModel().addAndBindAddedApps(context, addShortcuts, null);
+                app.getModel().addAndBindAddedApps(context, addShortcuts, new ArrayList<AppInfo>());
             }
         }
     }

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -294,7 +294,7 @@ else if (exists && !allowDuplicate) {
             // Add the new apps to the model and bind them
             if (!addShortcuts.isEmpty()) {
                 LauncherAppState app = LauncherAppState.getInstance();
-                app.getModel().addAndBindAddedApps(context, addShortcuts, null);
+                app.getModel().addAndBindAddedApps(context, addShortcuts, new ArrayList<AppInfo>());
             }
         }
     }

File: src/com/android/launcher3/DragController.java
Patch:
@@ -198,7 +198,7 @@ public void startDrag(View v, Bitmap bmp, DragSource source, Object dragInfo, in
      * @param dragRegion Coordinates within the bitmap b for the position of item being dragged.
      *          Makes dragging feel more precise, e.g. you can clip out a transparent border
      */
-    public void startDrag(Bitmap b, int dragLayerX, int dragLayerY,
+    public DragView startDrag(Bitmap b, int dragLayerX, int dragLayerY,
             DragSource source, Object dragInfo, int dragAction, Point dragOffset, Rect dragRegion,
             float initialDragViewScale) {
         if (PROFILE_DRAWING_DURING_DRAG) {
@@ -245,6 +245,7 @@ public void startDrag(Bitmap b, int dragLayerX, int dragLayerY,
         mLauncher.getDragLayer().performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);
         dragView.show(mMotionDownX, mMotionDownY);
         handleMoveEvent(mMotionDownX, mMotionDownY);
+        return dragView;
     }
 
     /**

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -949,7 +949,9 @@ void addInScreen(View child, long container, long screenId, int x, int y, int sp
         }
 
         // Get the canonical child id to uniquely represent this view in this screen
-        int childId = LauncherModel.getCellLayoutChildId(container, screenId, x, y, spanX, spanY);
+        ItemInfo info = (ItemInfo) child.getTag();
+        int childId = mLauncher.getViewIdForItem(info);
+
         boolean markCellsAsOccupied = !(child instanceof Folder);
         if (!layout.addViewToCellLayout(child, insert ? 0 : -1, childId, lp, markCellsAsOccupied)) {
             // TODO: This branch occurs when the workspace is adding views
@@ -2890,8 +2892,6 @@ public void onDrop(final DragObject d) {
                     lp.cellHSpan = item.spanX;
                     lp.cellVSpan = item.spanY;
                     lp.isLockedToGrid = true;
-                    cell.setId(LauncherModel.getCellLayoutChildId(container, mDragInfo.screenId,
-                            mTargetCell[0], mTargetCell[1], mDragInfo.spanX, mDragInfo.spanY));
 
                     if (container != LauncherSettings.Favorites.CONTAINER_HOTSEAT &&
                             cell instanceof LauncherAppWidgetHostView) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -949,7 +949,9 @@ void addInScreen(View child, long container, long screenId, int x, int y, int sp
         }
 
         // Get the canonical child id to uniquely represent this view in this screen
-        int childId = LauncherModel.getCellLayoutChildId(container, screenId, x, y, spanX, spanY);
+        ItemInfo info = (ItemInfo) child.getTag();
+        int childId = mLauncher.getViewIdForItem(info);
+
         boolean markCellsAsOccupied = !(child instanceof Folder);
         if (!layout.addViewToCellLayout(child, insert ? 0 : -1, childId, lp, markCellsAsOccupied)) {
             // TODO: This branch occurs when the workspace is adding views
@@ -2890,8 +2892,6 @@ public void onDrop(final DragObject d) {
                     lp.cellHSpan = item.spanX;
                     lp.cellVSpan = item.spanY;
                     lp.isLockedToGrid = true;
-                    cell.setId(LauncherModel.getCellLayoutChildId(container, mDragInfo.screenId,
-                            mTargetCell[0], mTargetCell[1], mDragInfo.spanX, mDragInfo.spanY));
 
                     if (container != LauncherSettings.Favorites.CONTAINER_HOTSEAT &&
                             cell instanceof LauncherAppWidgetHostView) {

File: src/com/android/launcher3/Folder.java
Patch:
@@ -758,6 +758,8 @@ public void run() {
                 }
                 completeDragExit();
             }
+        } else {
+            mLauncher.getWorkspace().removeExtraEmptyScreen(true, null);
         }
 
         mDeleteFolderOnDropCompleted = false;

File: src/com/android/launcher3/CropView.java
Patch:
@@ -165,7 +165,8 @@ private void updateMinScale(int w, int h, TileSource source, boolean resetScale)
                 final float imageWidth = imageDims[0];
                 final float imageHeight = imageDims[1];
                 mMinScale = Math.max(w / imageWidth, h / imageHeight);
-                mRenderer.scale = Math.max(mMinScale, mRenderer.scale);
+                mRenderer.scale =
+                        Math.max(mMinScale, resetScale ? Float.MIN_VALUE : mRenderer.scale);
             }
         }
     }

File: src/com/android/launcher3/CropView.java
Patch:
@@ -165,7 +165,8 @@ private void updateMinScale(int w, int h, TileSource source, boolean resetScale)
                 final float imageWidth = imageDims[0];
                 final float imageHeight = imageDims[1];
                 mMinScale = Math.max(w / imageWidth, h / imageHeight);
-                mRenderer.scale = Math.max(mMinScale, mRenderer.scale);
+                mRenderer.scale =
+                        Math.max(mMinScale, resetScale ? Float.MIN_VALUE : mRenderer.scale);
             }
         }
     }

File: src/com/android/launcher3/DragController.java
Patch:
@@ -327,7 +327,7 @@ public void onAppsRemoved(final ArrayList<String> packageNames, ArrayList<AppInf
                 for (AppInfo info : appInfos) {
                     // Added null checks to prevent NPE we've seen in the wild
                     if (dragInfo != null &&
-                        dragInfo.intent != null) {
+                            dragInfo.intent != null && info != null) {
                         ComponentName cn = dragInfo.intent.getComponent();
                         boolean isSameComponent = cn.equals(info.componentName) ||
                                 packageNames.contains(cn.getPackageName());

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -496,8 +496,7 @@ static void checkItemInfoLocked(
             if (stackTrace != null) {
                 e.setStackTrace(stackTrace);
             }
-            // TODO: something breaks this in the upgrade path
-            //throw e;
+            throw e;
         }
     }
 

File: src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -190,7 +190,9 @@ protected void onProgressUpdate(LiveWallpaperTile...infos) {
                     LiveWallpaperListAdapter.this.notifyDataSetChanged();
                     break;
                 }
-                info.mThumbnail.setDither(true);
+                if (info.mThumbnail != null) {
+                    info.mThumbnail.setDither(true);
+                }
                 if (mWallpaperPosition < mWallpapers.size()) {
                     mWallpapers.set(mWallpaperPosition, info);
                 } else {

File: src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -190,7 +190,9 @@ protected void onProgressUpdate(LiveWallpaperTile...infos) {
                     LiveWallpaperListAdapter.this.notifyDataSetChanged();
                     break;
                 }
-                info.mThumbnail.setDither(true);
+                if (info.mThumbnail != null) {
+                    info.mThumbnail.setDither(true);
+                }
                 if (mWallpaperPosition < mWallpapers.size()) {
                     mWallpapers.set(mWallpaperPosition, info);
                 } else {

File: src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -190,7 +190,9 @@ protected void onProgressUpdate(LiveWallpaperTile...infos) {
                     LiveWallpaperListAdapter.this.notifyDataSetChanged();
                     break;
                 }
-                info.mThumbnail.setDither(true);
+                if (info.mThumbnail != null) {
+                    info.mThumbnail.setDither(true);
+                }
                 if (mWallpaperPosition < mWallpapers.size()) {
                     mWallpapers.set(mWallpaperPosition, info);
                 } else {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -869,7 +869,7 @@ protected void onResume() {
         if (mOnResumeState == State.WORKSPACE) {
             showWorkspace(false);
         } else if (mOnResumeState == State.APPS_CUSTOMIZE) {
-            showAllApps(false, AppsCustomizePagedView.ContentType.Applications, false);
+            showAllApps(false, mAppsCustomizeContent.getContentType(), false);
         }
         mOnResumeState = State.NONE;
 
@@ -1770,7 +1770,8 @@ protected void onSaveInstanceState(Bundle outState) {
 
         // Save the current AppsCustomize tab
         if (mAppsCustomizeTabHost != null) {
-            String currentTabTag = mAppsCustomizeTabHost.getCurrentTabTag();
+            AppsCustomizePagedView.ContentType type = mAppsCustomizeContent.getContentType();
+            String currentTabTag = mAppsCustomizeTabHost.getTabTagForContentType(type);
             if (currentTabTag != null) {
                 outState.putString("apps_customize_currentTab", currentTabTag);
             }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1817,7 +1817,9 @@ public void run() {
                                 addView(mDragView, pageUnderPointIndex);
                                 onAddView(mDragView, pageUnderPointIndex);
                                 mSidePageHoverIndex = -1;
-                                mPageIndicator.setActiveMarker(getNextPage());
+                                if (mPageIndicator != null) {
+                                    mPageIndicator.setActiveMarker(getNextPage());
+                                }
                             }
                         };
                         postDelayed(mSidePageHoverRunnable, REORDERING_SIDE_PAGE_HOVER_TIMEOUT);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -869,7 +869,7 @@ protected void onResume() {
         if (mOnResumeState == State.WORKSPACE) {
             showWorkspace(false);
         } else if (mOnResumeState == State.APPS_CUSTOMIZE) {
-            showAllApps(false, AppsCustomizePagedView.ContentType.Applications, false);
+            showAllApps(false, mAppsCustomizeContent.getContentType(), false);
         }
         mOnResumeState = State.NONE;
 
@@ -1770,7 +1770,8 @@ protected void onSaveInstanceState(Bundle outState) {
 
         // Save the current AppsCustomize tab
         if (mAppsCustomizeTabHost != null) {
-            String currentTabTag = mAppsCustomizeTabHost.getCurrentTabTag();
+            AppsCustomizePagedView.ContentType type = mAppsCustomizeContent.getContentType();
+            String currentTabTag = mAppsCustomizeTabHost.getTabTagForContentType(type);
             if (currentTabTag != null) {
                 outState.putString("apps_customize_currentTab", currentTabTag);
             }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1817,7 +1817,9 @@ public void run() {
                                 addView(mDragView, pageUnderPointIndex);
                                 onAddView(mDragView, pageUnderPointIndex);
                                 mSidePageHoverIndex = -1;
-                                mPageIndicator.setActiveMarker(getNextPage());
+                                if (mPageIndicator != null) {
+                                    mPageIndicator.setActiveMarker(getNextPage());
+                                }
                             }
                         };
                         postDelayed(mSidePageHoverRunnable, REORDERING_SIDE_PAGE_HOVER_TIMEOUT);

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1817,7 +1817,9 @@ public void run() {
                                 addView(mDragView, pageUnderPointIndex);
                                 onAddView(mDragView, pageUnderPointIndex);
                                 mSidePageHoverIndex = -1;
-                                mPageIndicator.setActiveMarker(getNextPage());
+                                if (mPageIndicator != null) {
+                                    mPageIndicator.setActiveMarker(getNextPage());
+                                }
                             }
                         };
                         postDelayed(mSidePageHoverRunnable, REORDERING_SIDE_PAGE_HOVER_TIMEOUT);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -869,7 +869,7 @@ protected void onResume() {
         if (mOnResumeState == State.WORKSPACE) {
             showWorkspace(false);
         } else if (mOnResumeState == State.APPS_CUSTOMIZE) {
-            showAllApps(false, AppsCustomizePagedView.ContentType.Applications, false);
+            showAllApps(false, mAppsCustomizeContent.getContentType(), false);
         }
         mOnResumeState = State.NONE;
 
@@ -1770,7 +1770,8 @@ protected void onSaveInstanceState(Bundle outState) {
 
         // Save the current AppsCustomize tab
         if (mAppsCustomizeTabHost != null) {
-            String currentTabTag = mAppsCustomizeTabHost.getCurrentTabTag();
+            AppsCustomizePagedView.ContentType type = mAppsCustomizeContent.getContentType();
+            String currentTabTag = mAppsCustomizeTabHost.getTabTagForContentType(type);
             if (currentTabTag != null) {
                 outState.putString("apps_customize_currentTab", currentTabTag);
             }

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -450,7 +450,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return getWorkspacePadding().left;
+            return 2 * getWorkspacePadding().left;
         }
     }
 

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -450,7 +450,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return getWorkspacePadding().left;
+            return 2 * getWorkspacePadding().left;
         }
     }
 

File: src/com/android/photos/BitmapRegionTileSource.java
Patch:
@@ -94,7 +94,6 @@ public Bitmap decodeRegion(Rect wantRegion, BitmapFactory.Options options) {
 }
 
 class DumbBitmapRegionDecoder implements SimpleBitmapRegionDecoder {
-    //byte[] mStreamCopy;
     Bitmap mBuffer;
     Canvas mTempCanvas;
     Paint mTempPaint;

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -450,7 +450,7 @@ int getWorkspacePageSpacing(int orientation) {
             // In portrait, we want the pages spaced such that there is no
             // overhang of the previous / next page into the current page viewport.
             // We assume symmetrical padding in portrait mode.
-            return getWorkspacePadding().left;
+            return 2 * getWorkspacePadding().left;
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -741,7 +741,7 @@ public void run() {
                     data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1) : -1;
             final int result;
             final Runnable onComplete;
-            if (appWidgetId < 0) {
+            if (appWidgetId < 0 || resultCode == RESULT_CANCELED) {
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 result = RESULT_CANCELED;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -741,7 +741,7 @@ public void run() {
                     data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1) : -1;
             final int result;
             final Runnable onComplete;
-            if (appWidgetId < 0) {
+            if (appWidgetId < 0 || resultCode == RESULT_CANCELED) {
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 result = RESULT_CANCELED;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -741,7 +741,7 @@ public void run() {
                     data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1) : -1;
             final int result;
             final Runnable onComplete;
-            if (appWidgetId < 0) {
+            if (appWidgetId < 0 || resultCode == RESULT_CANCELED) {
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 result = RESULT_CANCELED;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -741,7 +741,7 @@ public void run() {
                     data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1) : -1;
             final int result;
             final Runnable onComplete;
-            if (appWidgetId < 0) {
+            if (appWidgetId < 0 || resultCode == RESULT_CANCELED) {
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 result = RESULT_CANCELED;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4122,6 +4122,9 @@ private boolean isClingsEnabled() {
         if (grid.isTablet()) {
             return false;
         }
+        if (grid.isLandscape) {
+            return false;
+        }
 
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4122,6 +4122,9 @@ private boolean isClingsEnabled() {
         if (grid.isTablet()) {
             return false;
         }
+        if (grid.isLandscape) {
+            return false;
+        }
 
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4122,6 +4122,9 @@ private boolean isClingsEnabled() {
         if (grid.isTablet()) {
             return false;
         }
+        if (grid.isLandscape) {
+            return false;
+        }
 
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4118,6 +4118,9 @@ private boolean isClingsEnabled() {
         if (grid.isTablet()) {
             return false;
         }
+        if (grid.isLandscape) {
+            return false;
+        }
 
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -675,6 +675,7 @@ private void sendScrollAccessibilityEvent() {
                     AccessibilityEvent.obtain(AccessibilityEvent.TYPE_VIEW_SCROLLED);
             ev.setItemCount(getChildCount());
             ev.setFromIndex(mCurrentPage);
+            ev.setToIndex(getNextPage());
 
             final int action;
             if (getNextPage() >= mCurrentPage) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -671,7 +671,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
         CellLayout finalScreen = mWorkspaceScreens.get(finalScreenId);
 
         // If the final screen is empty, convert it to the extra empty screen
-        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0) {
+        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0 &&
+                !finalScreen.isDropPending()) {
             mWorkspaceScreens.remove(finalScreenId);
             mScreenOrder.remove(finalScreenId);
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1189,7 +1189,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
 
     protected void setWallpaperDimension() {
         String spKey = WallpaperCropActivity.getSharedPreferencesKey();
-        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_PRIVATE);
+        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
         WallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
                 sp, mLauncher.getWindowManager(), mWallpaperManager);
     }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -675,6 +675,7 @@ private void sendScrollAccessibilityEvent() {
                     AccessibilityEvent.obtain(AccessibilityEvent.TYPE_VIEW_SCROLLED);
             ev.setItemCount(getChildCount());
             ev.setFromIndex(mCurrentPage);
+            ev.setToIndex(getNextPage());
 
             final int action;
             if (getNextPage() >= mCurrentPage) {

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -675,6 +675,7 @@ private void sendScrollAccessibilityEvent() {
                     AccessibilityEvent.obtain(AccessibilityEvent.TYPE_VIEW_SCROLLED);
             ev.setItemCount(getChildCount());
             ev.setFromIndex(mCurrentPage);
+            ev.setToIndex(getNextPage());
 
             final int action;
             if (getNextPage() >= mCurrentPage) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -671,7 +671,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
         CellLayout finalScreen = mWorkspaceScreens.get(finalScreenId);
 
         // If the final screen is empty, convert it to the extra empty screen
-        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0) {
+        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0 &&
+                !finalScreen.isDropPending()) {
             mWorkspaceScreens.remove(finalScreenId);
             mScreenOrder.remove(finalScreenId);
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -671,7 +671,8 @@ private void convertFinalScreenToEmptyScreenIfNecessary() {
         CellLayout finalScreen = mWorkspaceScreens.get(finalScreenId);
 
         // If the final screen is empty, convert it to the extra empty screen
-        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0) {
+        if (finalScreen.getShortcutsAndWidgets().getChildCount() == 0 &&
+                !finalScreen.isDropPending()) {
             mWorkspaceScreens.remove(finalScreenId);
             mScreenOrder.remove(finalScreenId);
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1189,7 +1189,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
 
     protected void setWallpaperDimension() {
         String spKey = WallpaperCropActivity.getSharedPreferencesKey();
-        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_PRIVATE);
+        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
         WallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
                 sp, mLauncher.getWindowManager(), mWallpaperManager);
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1188,7 +1188,7 @@ protected CustomContentCallbacks getCustomContentCallbacks() {
 
     protected void setWallpaperDimension() {
         String spKey = WallpaperCropActivity.getSharedPreferencesKey();
-        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_PRIVATE);
+        SharedPreferences sp = mLauncher.getSharedPreferences(spKey, Context.MODE_MULTI_PROCESS);
         WallpaperPickerActivity.suggestWallpaperDimension(mLauncher.getResources(),
                 sp, mLauncher.getWindowManager(), mWallpaperManager);
     }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -515,7 +515,7 @@ protected void updateCurrentPageScroll() {
      * re-enable scrolling.
      */
     void stopScrolling() {
-        mCurrentPage = mNextPage;
+        mCurrentPage = getNextPage();
         forceFinishScroller();
     }
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -515,7 +515,7 @@ protected void updateCurrentPageScroll() {
      * re-enable scrolling.
      */
     void stopScrolling() {
-        mCurrentPage = mNextPage;
+        mCurrentPage = getNextPage();
         forceFinishScroller();
     }
 

File: src/com/android/launcher3/SavedWallpaperImages.java
Patch:
@@ -62,7 +62,7 @@ public void onClick(WallpaperPickerActivity a) {
             File file = new File(a.getFilesDir(), imageFilename);
             BitmapRegionTileSource.FilePathBitmapSource bitmapSource =
                     new BitmapRegionTileSource.FilePathBitmapSource(file.getAbsolutePath(), 1024);
-            a.setCropViewTileSource(bitmapSource, false, true);
+            a.setCropViewTileSource(bitmapSource, false, true, null);
         }
         @Override
         public void onSave(WallpaperPickerActivity a) {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3011,7 +3011,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
 
             dispatchOnLauncherTransitionPrepare(fromView, animated, true);
             dispatchOnLauncherTransitionPrepare(toView, animated, true);
-            mAppsCustomizeContent.pauseScrolling();
+            mAppsCustomizeContent.stopScrolling();
 
             mStateAnimation.addListener(new AnimatorListenerAdapter() {
                 @Override
@@ -3023,7 +3023,6 @@ public void onAnimationEnd(Animator animation) {
                         onCompleteRunnable.run();
                     }
                     mAppsCustomizeContent.updateCurrentPageScroll();
-                    mAppsCustomizeContent.resumeScrolling();
                 }
             });
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3011,7 +3011,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
 
             dispatchOnLauncherTransitionPrepare(fromView, animated, true);
             dispatchOnLauncherTransitionPrepare(toView, animated, true);
-            mAppsCustomizeContent.pauseScrolling();
+            mAppsCustomizeContent.stopScrolling();
 
             mStateAnimation.addListener(new AnimatorListenerAdapter() {
                 @Override
@@ -3023,7 +3023,6 @@ public void onAnimationEnd(Animator animation) {
                         onCompleteRunnable.run();
                     }
                     mAppsCustomizeContent.updateCurrentPageScroll();
-                    mAppsCustomizeContent.resumeScrolling();
                 }
             });
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3011,7 +3011,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
 
             dispatchOnLauncherTransitionPrepare(fromView, animated, true);
             dispatchOnLauncherTransitionPrepare(toView, animated, true);
-            mAppsCustomizeContent.pauseScrolling();
+            mAppsCustomizeContent.stopScrolling();
 
             mStateAnimation.addListener(new AnimatorListenerAdapter() {
                 @Override
@@ -3023,7 +3023,6 @@ public void onAnimationEnd(Animator animation) {
                         onCompleteRunnable.run();
                     }
                     mAppsCustomizeContent.updateCurrentPageScroll();
-                    mAppsCustomizeContent.resumeScrolling();
                 }
             });
 

File: src/com/android/photos/BitmapRegionTileSource.java
Patch:
@@ -55,7 +55,7 @@ public class BitmapRegionTileSource implements TiledImageRenderer.TileSource {
     private static final int GL_SIZE_LIMIT = 2048;
     // This must be no larger than half the size of the GL_SIZE_LIMIT
     // due to decodePreview being allowed to be up to 2x the size of the target
-    private static final int MAX_PREVIEW_SIZE = 1024;
+    public static final int MAX_PREVIEW_SIZE = GL_SIZE_LIMIT / 2;
 
     public static abstract class BitmapSource {
         private BitmapRegionDecoder mDecoder;

File: src/com/android/photos/BitmapRegionTileSource.java
Patch:
@@ -55,7 +55,7 @@ public class BitmapRegionTileSource implements TiledImageRenderer.TileSource {
     private static final int GL_SIZE_LIMIT = 2048;
     // This must be no larger than half the size of the GL_SIZE_LIMIT
     // due to decodePreview being allowed to be up to 2x the size of the target
-    private static final int MAX_PREVIEW_SIZE = 1024;
+    public static final int MAX_PREVIEW_SIZE = GL_SIZE_LIMIT / 2;
 
     public static abstract class BitmapSource {
         private BitmapRegionDecoder mDecoder;

File: src/com/android/photos/BitmapRegionTileSource.java
Patch:
@@ -55,7 +55,7 @@ public class BitmapRegionTileSource implements TiledImageRenderer.TileSource {
     private static final int GL_SIZE_LIMIT = 2048;
     // This must be no larger than half the size of the GL_SIZE_LIMIT
     // due to decodePreview being allowed to be up to 2x the size of the target
-    private static final int MAX_PREVIEW_SIZE = 1024;
+    public static final int MAX_PREVIEW_SIZE = GL_SIZE_LIMIT / 2;
 
     public static abstract class BitmapSource {
         private BitmapRegionDecoder mDecoder;

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1046,7 +1046,6 @@ private int loadFavorites(SQLiteDatabase db, int workspaceResourceId) {
                             // recursively load some more favorites, why not?
                             i += loadFavorites(db, resId);
                             added = false;
-                            mMaxItemId = -1;
                         } else {
                             Log.w(TAG, String.format("Skipping <include workspace=0x%08x>", resId));
                         }

File: src/com/android/launcher3/SmoothPagedView.java
Patch:
@@ -52,8 +52,6 @@ public void disableSettle() {
         }
 
         public float getInterpolation(float t) {
-            // _o(t) = t * t * ((tension + 1) * t + tension)
-            // o(t) = _o(t - 1) + 1
             t -= 1.0f;
             return t * t * ((mTension + 1) * t + mTension) + 1.0f;
         }

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1046,7 +1046,6 @@ private int loadFavorites(SQLiteDatabase db, int workspaceResourceId) {
                             // recursively load some more favorites, why not?
                             i += loadFavorites(db, resId);
                             added = false;
-                            mMaxItemId = -1;
                         } else {
                             Log.w(TAG, String.format("Skipping <include workspace=0x%08x>", resId));
                         }

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -1046,7 +1046,6 @@ private int loadFavorites(SQLiteDatabase db, int workspaceResourceId) {
                             // recursively load some more favorites, why not?
                             i += loadFavorites(db, resId);
                             added = false;
-                            mMaxItemId = -1;
                         } else {
                             Log.w(TAG, String.format("Skipping <include workspace=0x%08x>", resId));
                         }

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -30,6 +30,7 @@ public class LauncherAnimUtils {
     static HashSet<Animator> sAnimators = new HashSet<Animator>();
     static Animator.AnimatorListener sEndAnimListener = new Animator.AnimatorListener() {
         public void onAnimationStart(Animator animation) {
+            sAnimators.add(animation);
         }
 
         public void onAnimationRepeat(Animator animation) {
@@ -45,7 +46,6 @@ public void onAnimationCancel(Animator animation) {
     };
 
     public static void cancelOnDestroyActivity(Animator a) {
-        sAnimators.add(a);
         a.addListener(sEndAnimListener);
     }
 

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -30,6 +30,7 @@ public class LauncherAnimUtils {
     static HashSet<Animator> sAnimators = new HashSet<Animator>();
     static Animator.AnimatorListener sEndAnimListener = new Animator.AnimatorListener() {
         public void onAnimationStart(Animator animation) {
+            sAnimators.add(animation);
         }
 
         public void onAnimationRepeat(Animator animation) {
@@ -45,7 +46,6 @@ public void onAnimationCancel(Animator animation) {
     };
 
     public static void cancelOnDestroyActivity(Animator a) {
-        sAnimators.add(a);
         a.addListener(sEndAnimListener);
     }
 

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -30,6 +30,7 @@ public class LauncherAnimUtils {
     static HashSet<Animator> sAnimators = new HashSet<Animator>();
     static Animator.AnimatorListener sEndAnimListener = new Animator.AnimatorListener() {
         public void onAnimationStart(Animator animation) {
+            sAnimators.add(animation);
         }
 
         public void onAnimationRepeat(Animator animation) {
@@ -45,7 +46,6 @@ public void onAnimationCancel(Animator animation) {
     };
 
     public static void cancelOnDestroyActivity(Animator a) {
-        sAnimators.add(a);
         a.addListener(sEndAnimListener);
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4085,6 +4085,7 @@ public void restoreInstanceStateForRemainingPages() {
             }
         }
         mRestoredPages.clear();
+        mSavedStates = null;
     }
 
     @Override

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4087,6 +4087,7 @@ public void restoreInstanceStateForRemainingPages() {
             }
         }
         mRestoredPages.clear();
+        mSavedStates = null;
     }
 
     @Override

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4085,6 +4085,7 @@ public void restoreInstanceStateForRemainingPages() {
             }
         }
         mRestoredPages.clear();
+        mSavedStates = null;
     }
 
     @Override

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -4085,6 +4085,7 @@ public void restoreInstanceStateForRemainingPages() {
             }
         }
         mRestoredPages.clear();
+        mSavedStates = null;
     }
 
     @Override

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -30,6 +30,7 @@ public class LauncherAnimUtils {
     static HashSet<Animator> sAnimators = new HashSet<Animator>();
     static Animator.AnimatorListener sEndAnimListener = new Animator.AnimatorListener() {
         public void onAnimationStart(Animator animation) {
+            sAnimators.add(animation);
         }
 
         public void onAnimationRepeat(Animator animation) {
@@ -45,7 +46,6 @@ public void onAnimationCancel(Animator animation) {
     };
 
     public static void cancelOnDestroyActivity(Animator a) {
-        sAnimators.add(a);
         a.addListener(sEndAnimListener);
     }
 

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -30,6 +30,7 @@ public class LauncherAnimUtils {
     static HashSet<Animator> sAnimators = new HashSet<Animator>();
     static Animator.AnimatorListener sEndAnimListener = new Animator.AnimatorListener() {
         public void onAnimationStart(Animator animation) {
+            sAnimators.add(animation);
         }
 
         public void onAnimationRepeat(Animator animation) {
@@ -45,7 +46,6 @@ public void onAnimationCancel(Animator animation) {
     };
 
     public static void cancelOnDestroyActivity(Animator a) {
-        sAnimators.add(a);
         a.addListener(sEndAnimListener);
     }
 

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -30,6 +30,7 @@ public class LauncherAnimUtils {
     static HashSet<Animator> sAnimators = new HashSet<Animator>();
     static Animator.AnimatorListener sEndAnimListener = new Animator.AnimatorListener() {
         public void onAnimationStart(Animator animation) {
+            sAnimators.add(animation);
         }
 
         public void onAnimationRepeat(Animator animation) {
@@ -45,7 +46,6 @@ public void onAnimationCancel(Animator animation) {
     };
 
     public static void cancelOnDestroyActivity(Animator a) {
-        sAnimators.add(a);
         a.addListener(sEndAnimListener);
     }
 

File: src/com/android/launcher3/LauncherAnimUtils.java
Patch:
@@ -30,6 +30,7 @@ public class LauncherAnimUtils {
     static HashSet<Animator> sAnimators = new HashSet<Animator>();
     static Animator.AnimatorListener sEndAnimListener = new Animator.AnimatorListener() {
         public void onAnimationStart(Animator animation) {
+            sAnimators.add(animation);
         }
 
         public void onAnimationRepeat(Animator animation) {
@@ -45,7 +46,6 @@ public void onAnimationCancel(Animator animation) {
     };
 
     public static void cancelOnDestroyActivity(Animator a) {
-        sAnimators.add(a);
         a.addListener(sEndAnimListener);
     }
 

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -108,6 +108,9 @@ private static void addToInstallQueue(
 
     public static void removeFromInstallQueue(SharedPreferences sharedPrefs,
                                               ArrayList<String> packageNames) {
+        if (packageNames.isEmpty()) {
+            return;
+        }
         synchronized(sLock) {
             Set<String> strings = sharedPrefs.getStringSet(APPS_PENDING_INSTALL, null);
             if (DBG) {

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -108,6 +108,9 @@ private static void addToInstallQueue(
 
     public static void removeFromInstallQueue(SharedPreferences sharedPrefs,
                                               ArrayList<String> packageNames) {
+        if (packageNames.isEmpty()) {
+            return;
+        }
         synchronized(sLock) {
             Set<String> strings = sharedPrefs.getStringSet(APPS_PENDING_INSTALL, null);
             if (DBG) {

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -104,6 +104,9 @@ private static void addToInstallQueue(
 
     public static void removeFromInstallQueue(SharedPreferences sharedPrefs,
                                               ArrayList<String> packageNames) {
+        if (packageNames.isEmpty()) {
+            return;
+        }
         synchronized(sLock) {
             Set<String> strings = sharedPrefs.getStringSet(APPS_PENDING_INSTALL, null);
             if (strings != null) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1199,10 +1199,8 @@ private float wallpaperOffsetForCurrentScroll() {
                 // TODO: do different behavior if it's  a live wallpaper?
                 // Sometimes the left parameter of the pages is animated during a layout transition;
                 // this parameter offsets it to keep the wallpaper from animating as well
-                int offsetForLayoutTransitionAnimation = isLayoutRtl() ?
-                        getPageAt(getChildCount() - 1).getLeft() - getFirstChildLeft() : 0;
                 int adjustedScroll =
-                        getScrollX() - firstPageScrollX - offsetForLayoutTransitionAnimation;
+                        getScrollX() - firstPageScrollX - getLayoutTransitionOffsetForPage(0);
                 float offset = Math.min(1, adjustedScroll / (float) scrollRange);
                 offset = Math.max(0, offset);
                 // Don't use up all the wallpaper parallax until you have at least

File: src/com/android/launcher3/SavedWallpaperImages.java
Patch:
@@ -62,6 +62,7 @@ public void onClick(WallpaperPickerActivity a) {
             File file = new File(a.getFilesDir(), imageFilename);
             CropView v = a.getCropView();
             int rotation = WallpaperCropActivity.getRotationFromExif(file.getAbsolutePath());
+            a.getDefaultWallpaperView().setVisibility(View.INVISIBLE);
             v.setTileSource(
                     new BitmapRegionTileSource(a, file.getAbsolutePath(), 1024, rotation), null);
             v.moveToLeft();

File: src/com/android/launcher3/SavedWallpaperImages.java
Patch:
@@ -62,6 +62,7 @@ public void onClick(WallpaperPickerActivity a) {
             File file = new File(a.getFilesDir(), imageFilename);
             CropView v = a.getCropView();
             int rotation = WallpaperCropActivity.getRotationFromExif(file.getAbsolutePath());
+            a.getDefaultWallpaperView().setVisibility(View.INVISIBLE);
             v.setTileSource(
                     new BitmapRegionTileSource(a, file.getAbsolutePath(), 1024, rotation), null);
             v.moveToLeft();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3654,7 +3654,7 @@ public void run() {
                 // the correct final location.
                 setFinalTransitionTransform(cellLayout);
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, view,
-                        exitSpringLoadedRunnable);
+                        exitSpringLoadedRunnable, this);
                 resetTransitionTransform(cellLayout);
             }
         }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3654,7 +3654,7 @@ public void run() {
                 // the correct final location.
                 setFinalTransitionTransform(cellLayout);
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, view,
-                        exitSpringLoadedRunnable);
+                        exitSpringLoadedRunnable, this);
                 resetTransitionTransform(cellLayout);
             }
         }

File: src/com/android/launcher3/SavedWallpaperImages.java
Patch:
@@ -62,6 +62,7 @@ public void onClick(WallpaperPickerActivity a) {
             File file = new File(a.getFilesDir(), imageFilename);
             CropView v = a.getCropView();
             int rotation = WallpaperCropActivity.getRotationFromExif(file.getAbsolutePath());
+            a.getDefaultWallpaperView().setVisibility(View.INVISIBLE);
             v.setTileSource(
                     new BitmapRegionTileSource(a, file.getAbsolutePath(), 1024, rotation), null);
             v.moveToLeft();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -402,6 +402,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 Context.MODE_PRIVATE);
         mModel = app.setLauncher(this);
         mIconCache = app.getIconCache();
+        mIconCache.flushInvalidIcons(grid);
         mDragController = new DragController(this);
         mInflater = getLayoutInflater();
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -402,6 +402,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 Context.MODE_PRIVATE);
         mModel = app.setLauncher(this);
         mIconCache = app.getIconCache();
+        mIconCache.flushInvalidIcons(grid);
         mDragController = new DragController(this);
         mInflater = getLayoutInflater();
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -402,6 +402,7 @@ protected void onCreate(Bundle savedInstanceState) {
                 Context.MODE_PRIVATE);
         mModel = app.setLauncher(this);
         mIconCache = app.getIconCache();
+        mIconCache.flushInvalidIcons(grid);
         mDragController = new DragController(this);
         mInflater = getLayoutInflater();
 

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -109,7 +109,7 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         LauncherAppState app = LauncherAppState.getInstance();
         DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
 
-        setCompoundDrawablesWithIntrinsicBounds(null,
+        setCompoundDrawables(null,
                 Utilities.createIconDrawable(b), null, null);
         setCompoundDrawablePadding((int) ((grid.folderIconSizePx - grid.iconSizePx) / 2f));
         setText(info.title);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -532,7 +532,7 @@ protected boolean findAndSetEmptyCells(ShortcutInfo item) {
     protected boolean createAndAddShortcut(ShortcutInfo item) {
         final BubbleTextView textView =
             (BubbleTextView) mInflater.inflate(R.layout.application, this, false);
-        textView.setCompoundDrawablesWithIntrinsicBounds(null,
+        textView.setCompoundDrawables(null,
                 Utilities.createIconDrawable(item.getIcon(mIconCache)), null, null);
         textView.setText(item.title);
         textView.setTag(item);

File: src/com/android/launcher3/PagedViewIcon.java
Patch:
@@ -69,7 +69,7 @@ public void applyFromApplicationInfo(AppInfo info, boolean scaleUp,
             PagedViewIcon.PressedCallback cb) {
         mIcon = info.iconBitmap;
         mPressedCallback = cb;
-        setCompoundDrawablesWithIntrinsicBounds(null, Utilities.createIconDrawable(mIcon),
+        setCompoundDrawables(null, Utilities.createIconDrawable(mIcon),
                 null, null);
         setText(info.title);
         setTag(info);

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -70,6 +70,7 @@ final class Utilities {
      */
     static Drawable createIconDrawable(Bitmap icon) {
         FastBitmapDrawable d = new FastBitmapDrawable(icon);
+        d.setFilterBitmap(true);
         resizeIconDrawable(d);
         return d;
     }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -109,7 +109,7 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         LauncherAppState app = LauncherAppState.getInstance();
         DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
 
-        setCompoundDrawablesWithIntrinsicBounds(null,
+        setCompoundDrawables(null,
                 Utilities.createIconDrawable(b), null, null);
         setCompoundDrawablePadding((int) ((grid.folderIconSizePx - grid.iconSizePx) / 2f));
         setText(info.title);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -532,7 +532,7 @@ protected boolean findAndSetEmptyCells(ShortcutInfo item) {
     protected boolean createAndAddShortcut(ShortcutInfo item) {
         final BubbleTextView textView =
             (BubbleTextView) mInflater.inflate(R.layout.application, this, false);
-        textView.setCompoundDrawablesWithIntrinsicBounds(null,
+        textView.setCompoundDrawables(null,
                 Utilities.createIconDrawable(item.getIcon(mIconCache)), null, null);
         textView.setText(item.title);
         textView.setTag(item);

File: src/com/android/launcher3/PagedViewIcon.java
Patch:
@@ -69,7 +69,7 @@ public void applyFromApplicationInfo(AppInfo info, boolean scaleUp,
             PagedViewIcon.PressedCallback cb) {
         mIcon = info.iconBitmap;
         mPressedCallback = cb;
-        setCompoundDrawablesWithIntrinsicBounds(null, Utilities.createIconDrawable(mIcon),
+        setCompoundDrawables(null, Utilities.createIconDrawable(mIcon),
                 null, null);
         setText(info.title);
         setTag(info);

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -70,6 +70,7 @@ final class Utilities {
      */
     static Drawable createIconDrawable(Bitmap icon) {
         FastBitmapDrawable d = new FastBitmapDrawable(icon);
+        d.setFilterBitmap(true);
         resizeIconDrawable(d);
         return d;
     }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -109,7 +109,7 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         LauncherAppState app = LauncherAppState.getInstance();
         DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
 
-        setCompoundDrawablesWithIntrinsicBounds(null,
+        setCompoundDrawables(null,
                 Utilities.createIconDrawable(b), null, null);
         setCompoundDrawablePadding((int) ((grid.folderIconSizePx - grid.iconSizePx) / 2f));
         setText(info.title);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -532,7 +532,7 @@ protected boolean findAndSetEmptyCells(ShortcutInfo item) {
     protected boolean createAndAddShortcut(ShortcutInfo item) {
         final BubbleTextView textView =
             (BubbleTextView) mInflater.inflate(R.layout.application, this, false);
-        textView.setCompoundDrawablesWithIntrinsicBounds(null,
+        textView.setCompoundDrawables(null,
                 Utilities.createIconDrawable(item.getIcon(mIconCache)), null, null);
         textView.setText(item.title);
         textView.setTag(item);

File: src/com/android/launcher3/PagedViewIcon.java
Patch:
@@ -69,7 +69,7 @@ public void applyFromApplicationInfo(AppInfo info, boolean scaleUp,
             PagedViewIcon.PressedCallback cb) {
         mIcon = info.iconBitmap;
         mPressedCallback = cb;
-        setCompoundDrawablesWithIntrinsicBounds(null, Utilities.createIconDrawable(mIcon),
+        setCompoundDrawables(null, Utilities.createIconDrawable(mIcon),
                 null, null);
         setText(info.title);
         setTag(info);

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -70,6 +70,7 @@ final class Utilities {
      */
     static Drawable createIconDrawable(Bitmap icon) {
         FastBitmapDrawable d = new FastBitmapDrawable(icon);
+        d.setFilterBitmap(true);
         resizeIconDrawable(d);
         return d;
     }

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -98,6 +98,7 @@ public class FolderIcon extends LinearLayout implements FolderListener {
     private int mPreviewOffsetY;
     private float mMaxPerspectiveShift;
     boolean mAnimating = false;
+    private Rect mOldBounds = new Rect();
 
     private PreviewItemDrawingParams mParams = new PreviewItemDrawingParams(0, 0, 0, 0);
     private PreviewItemDrawingParams mAnimParams = new PreviewItemDrawingParams(0, 0, 0, 0);
@@ -534,13 +535,15 @@ private void drawPreviewItem(Canvas canvas, PreviewItemDrawingParams params) {
         Drawable d = params.drawable;
 
         if (d != null) {
+            mOldBounds.set(d.getBounds());
             d.setBounds(0, 0, mIntrinsicIconSize, mIntrinsicIconSize);
             d.setFilterBitmap(true);
             d.setColorFilter(Color.argb(params.overlayAlpha, 255, 255, 255),
                     PorterDuff.Mode.SRC_ATOP);
             d.draw(canvas);
             d.clearColorFilter();
             d.setFilterBitmap(false);
+            d.setBounds(mOldBounds);
         }
         canvas.restore();
     }

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -98,6 +98,7 @@ public class FolderIcon extends LinearLayout implements FolderListener {
     private int mPreviewOffsetY;
     private float mMaxPerspectiveShift;
     boolean mAnimating = false;
+    private Rect mOldBounds = new Rect();
 
     private PreviewItemDrawingParams mParams = new PreviewItemDrawingParams(0, 0, 0, 0);
     private PreviewItemDrawingParams mAnimParams = new PreviewItemDrawingParams(0, 0, 0, 0);
@@ -534,13 +535,15 @@ private void drawPreviewItem(Canvas canvas, PreviewItemDrawingParams params) {
         Drawable d = params.drawable;
 
         if (d != null) {
+            mOldBounds.set(d.getBounds());
             d.setBounds(0, 0, mIntrinsicIconSize, mIntrinsicIconSize);
             d.setFilterBitmap(true);
             d.setColorFilter(Color.argb(params.overlayAlpha, 255, 255, 255),
                     PorterDuff.Mode.SRC_ATOP);
             d.draw(canvas);
             d.clearColorFilter();
             d.setFilterBitmap(false);
+            d.setBounds(mOldBounds);
         }
         canvas.restore();
     }

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -98,6 +98,7 @@ public class FolderIcon extends LinearLayout implements FolderListener {
     private int mPreviewOffsetY;
     private float mMaxPerspectiveShift;
     boolean mAnimating = false;
+    private Rect mOldBounds = new Rect();
 
     private PreviewItemDrawingParams mParams = new PreviewItemDrawingParams(0, 0, 0, 0);
     private PreviewItemDrawingParams mAnimParams = new PreviewItemDrawingParams(0, 0, 0, 0);
@@ -534,13 +535,15 @@ private void drawPreviewItem(Canvas canvas, PreviewItemDrawingParams params) {
         Drawable d = params.drawable;
 
         if (d != null) {
+            mOldBounds.set(d.getBounds());
             d.setBounds(0, 0, mIntrinsicIconSize, mIntrinsicIconSize);
             d.setFilterBitmap(true);
             d.setColorFilter(Color.argb(params.overlayAlpha, 255, 255, 255),
                     PorterDuff.Mode.SRC_ATOP);
             d.draw(canvas);
             d.clearColorFilter();
             d.setFilterBitmap(false);
+            d.setBounds(mOldBounds);
         }
         canvas.restore();
     }

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -98,6 +98,7 @@ public class FolderIcon extends LinearLayout implements FolderListener {
     private int mPreviewOffsetY;
     private float mMaxPerspectiveShift;
     boolean mAnimating = false;
+    private Rect mOldBounds = new Rect();
 
     private PreviewItemDrawingParams mParams = new PreviewItemDrawingParams(0, 0, 0, 0);
     private PreviewItemDrawingParams mAnimParams = new PreviewItemDrawingParams(0, 0, 0, 0);
@@ -534,13 +535,15 @@ private void drawPreviewItem(Canvas canvas, PreviewItemDrawingParams params) {
         Drawable d = params.drawable;
 
         if (d != null) {
+            mOldBounds.set(d.getBounds());
             d.setBounds(0, 0, mIntrinsicIconSize, mIntrinsicIconSize);
             d.setFilterBitmap(true);
             d.setColorFilter(Color.argb(params.overlayAlpha, 255, 255, 255),
                     PorterDuff.Mode.SRC_ATOP);
             d.draw(canvas);
             d.clearColorFilter();
             d.setFilterBitmap(false);
+            d.setBounds(mOldBounds);
         }
         canvas.restore();
     }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -110,8 +110,7 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
 
         setCompoundDrawablesWithIntrinsicBounds(null,
-                new FastBitmapDrawable(b),
-                null, null);
+                Utilities.createIconDrawable(b), null, null);
         setCompoundDrawablePadding((int) ((grid.folderIconSizePx - grid.iconSizePx) / 2f));
         setText(info.title);
         setTag(info);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -533,7 +533,7 @@ protected boolean createAndAddShortcut(ShortcutInfo item) {
         final BubbleTextView textView =
             (BubbleTextView) mInflater.inflate(R.layout.application, this, false);
         textView.setCompoundDrawablesWithIntrinsicBounds(null,
-                new FastBitmapDrawable(item.getIcon(mIconCache)), null, null);
+                Utilities.createIconDrawable(item.getIcon(mIconCache)), null, null);
         textView.setText(item.title);
         textView.setTag(item);
         textView.setTextColor(getResources().getColor(R.color.folder_items_text_color));

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -150,7 +150,7 @@ void resetLayout() {
             TextView allAppsButton = (TextView)
                     inflater.inflate(R.layout.all_apps_button, mContent, false);
             Drawable d = context.getResources().getDrawable(R.drawable.all_apps_button_icon);
-            d.setBounds(0, 0, Utilities.sIconTextureWidth, Utilities.sIconTextureHeight);
+            Utilities.resizeIconDrawable(d);
             allAppsButton.setCompoundDrawables(null, d, null, null);
 
             allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));

File: src/com/android/launcher3/PagedViewIcon.java
Patch:
@@ -69,7 +69,8 @@ public void applyFromApplicationInfo(AppInfo info, boolean scaleUp,
             PagedViewIcon.PressedCallback cb) {
         mIcon = info.iconBitmap;
         mPressedCallback = cb;
-        setCompoundDrawablesWithIntrinsicBounds(null, new FastBitmapDrawable(mIcon), null, null);
+        setCompoundDrawablesWithIntrinsicBounds(null, Utilities.createIconDrawable(mIcon),
+                null, null);
         setText(info.title);
         setTag(info);
     }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -110,8 +110,7 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
 
         setCompoundDrawablesWithIntrinsicBounds(null,
-                new FastBitmapDrawable(b),
-                null, null);
+                Utilities.createIconDrawable(b), null, null);
         setCompoundDrawablePadding((int) ((grid.folderIconSizePx - grid.iconSizePx) / 2f));
         setText(info.title);
         setTag(info);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -533,7 +533,7 @@ protected boolean createAndAddShortcut(ShortcutInfo item) {
         final BubbleTextView textView =
             (BubbleTextView) mInflater.inflate(R.layout.application, this, false);
         textView.setCompoundDrawablesWithIntrinsicBounds(null,
-                new FastBitmapDrawable(item.getIcon(mIconCache)), null, null);
+                Utilities.createIconDrawable(item.getIcon(mIconCache)), null, null);
         textView.setText(item.title);
         textView.setTag(item);
         textView.setTextColor(getResources().getColor(R.color.folder_items_text_color));

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -150,7 +150,7 @@ void resetLayout() {
             TextView allAppsButton = (TextView)
                     inflater.inflate(R.layout.all_apps_button, mContent, false);
             Drawable d = context.getResources().getDrawable(R.drawable.all_apps_button_icon);
-            d.setBounds(0, 0, Utilities.sIconTextureWidth, Utilities.sIconTextureHeight);
+            Utilities.resizeIconDrawable(d);
             allAppsButton.setCompoundDrawables(null, d, null, null);
 
             allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));

File: src/com/android/launcher3/PagedViewIcon.java
Patch:
@@ -69,7 +69,8 @@ public void applyFromApplicationInfo(AppInfo info, boolean scaleUp,
             PagedViewIcon.PressedCallback cb) {
         mIcon = info.iconBitmap;
         mPressedCallback = cb;
-        setCompoundDrawablesWithIntrinsicBounds(null, new FastBitmapDrawable(mIcon), null, null);
+        setCompoundDrawablesWithIntrinsicBounds(null, Utilities.createIconDrawable(mIcon),
+                null, null);
         setText(info.title);
         setTag(info);
     }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -110,8 +110,7 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
 
         setCompoundDrawablesWithIntrinsicBounds(null,
-                new FastBitmapDrawable(b),
-                null, null);
+                Utilities.createIconDrawable(b), null, null);
         setCompoundDrawablePadding((int) ((grid.folderIconSizePx - grid.iconSizePx) / 2f));
         setText(info.title);
         setTag(info);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -533,7 +533,7 @@ protected boolean createAndAddShortcut(ShortcutInfo item) {
         final BubbleTextView textView =
             (BubbleTextView) mInflater.inflate(R.layout.application, this, false);
         textView.setCompoundDrawablesWithIntrinsicBounds(null,
-                new FastBitmapDrawable(item.getIcon(mIconCache)), null, null);
+                Utilities.createIconDrawable(item.getIcon(mIconCache)), null, null);
         textView.setText(item.title);
         textView.setTag(item);
         textView.setTextColor(getResources().getColor(R.color.folder_items_text_color));

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -150,7 +150,7 @@ void resetLayout() {
             TextView allAppsButton = (TextView)
                     inflater.inflate(R.layout.all_apps_button, mContent, false);
             Drawable d = context.getResources().getDrawable(R.drawable.all_apps_button_icon);
-            d.setBounds(0, 0, Utilities.sIconTextureWidth, Utilities.sIconTextureHeight);
+            Utilities.resizeIconDrawable(d);
             allAppsButton.setCompoundDrawables(null, d, null, null);
 
             allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));

File: src/com/android/launcher3/PagedViewIcon.java
Patch:
@@ -69,7 +69,8 @@ public void applyFromApplicationInfo(AppInfo info, boolean scaleUp,
             PagedViewIcon.PressedCallback cb) {
         mIcon = info.iconBitmap;
         mPressedCallback = cb;
-        setCompoundDrawablesWithIntrinsicBounds(null, new FastBitmapDrawable(mIcon), null, null);
+        setCompoundDrawablesWithIntrinsicBounds(null, Utilities.createIconDrawable(mIcon),
+                null, null);
         setText(info.title);
         setTag(info);
     }

File: src/com/android/launcher3/SearchDropTargetBar.java
Patch:
@@ -138,7 +138,6 @@ public void finishAnimations() {
      * Shows and hides the search bar.
      */
     public void showSearchBar(boolean animated) {
-        if (!mIsSearchBarHidden) return;
         if (animated) {
             prepareStartAnimation(mQSBSearchBar);
             mQSBSearchBarAnim.reverse();
@@ -153,7 +152,6 @@ public void showSearchBar(boolean animated) {
         mIsSearchBarHidden = false;
     }
     public void hideSearchBar(boolean animated) {
-        if (mIsSearchBarHidden) return;
         if (animated) {
             prepareStartAnimation(mQSBSearchBar);
             mQSBSearchBarAnim.start();

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -110,8 +110,7 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
 
         setCompoundDrawablesWithIntrinsicBounds(null,
-                new FastBitmapDrawable(b),
-                null, null);
+                Utilities.createIconDrawable(b), null, null);
         setCompoundDrawablePadding((int) ((grid.folderIconSizePx - grid.iconSizePx) / 2f));
         setText(info.title);
         setTag(info);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -533,7 +533,7 @@ protected boolean createAndAddShortcut(ShortcutInfo item) {
         final BubbleTextView textView =
             (BubbleTextView) mInflater.inflate(R.layout.application, this, false);
         textView.setCompoundDrawablesWithIntrinsicBounds(null,
-                new FastBitmapDrawable(item.getIcon(mIconCache)), null, null);
+                Utilities.createIconDrawable(item.getIcon(mIconCache)), null, null);
         textView.setText(item.title);
         textView.setTag(item);
         textView.setTextColor(getResources().getColor(R.color.folder_items_text_color));

File: src/com/android/launcher3/Hotseat.java
Patch:
@@ -150,7 +150,7 @@ void resetLayout() {
             TextView allAppsButton = (TextView)
                     inflater.inflate(R.layout.all_apps_button, mContent, false);
             Drawable d = context.getResources().getDrawable(R.drawable.all_apps_button_icon);
-            d.setBounds(0, 0, Utilities.sIconTextureWidth, Utilities.sIconTextureHeight);
+            Utilities.resizeIconDrawable(d);
             allAppsButton.setCompoundDrawables(null, d, null, null);
 
             allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));

File: src/com/android/launcher3/PagedViewIcon.java
Patch:
@@ -69,7 +69,8 @@ public void applyFromApplicationInfo(AppInfo info, boolean scaleUp,
             PagedViewIcon.PressedCallback cb) {
         mIcon = info.iconBitmap;
         mPressedCallback = cb;
-        setCompoundDrawablesWithIntrinsicBounds(null, new FastBitmapDrawable(mIcon), null, null);
+        setCompoundDrawablesWithIntrinsicBounds(null, Utilities.createIconDrawable(mIcon),
+                null, null);
         setText(info.title);
         setTag(info);
     }

File: src/com/android/launcher3/SavedWallpaperImages.java
Patch:
@@ -61,7 +61,9 @@ public void onClick(WallpaperPickerActivity a) {
             String imageFilename = a.getSavedImages().getImageFilename(mDbId);
             File file = new File(a.getFilesDir(), imageFilename);
             CropView v = a.getCropView();
-            v.setTileSource(new BitmapRegionTileSource(a, file.getAbsolutePath(), 1024, 0), null);
+            int rotation = WallpaperCropActivity.getRotationFromExif(file.getAbsolutePath());
+            v.setTileSource(
+                    new BitmapRegionTileSource(a, file.getAbsolutePath(), 1024, rotation), null);
             v.moveToLeft();
             v.setTouchEnabled(false);
         }

File: src/com/android/photos/views/TiledImageView.java
Patch:
@@ -63,7 +63,7 @@ protected static class ImageRendererWrapper {
         // Guarded by locks
         public float scale;
         public int centerX, centerY;
-        int rotation;
+        public int rotation;
         public TileSource source;
         Runnable isReadyCallback;
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -736,6 +736,7 @@ protected void onActivityResult(
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 completeTwoStageWidgetDrop(RESULT_CANCELED, appWidgetId);
+                mWorkspace.stripEmptyScreens();
             } else {
                 completeTwoStageWidgetDrop(resultCode, appWidgetId);
             }
@@ -760,6 +761,8 @@ protected void onActivityResult(
             } else {
                 delayExitSpringLoadedMode = completeAdd(args);
             }
+        } else if (resultCode == RESULT_CANCELED) {
+            mWorkspace.stripEmptyScreens();
         }
         mDragLayer.clearAnimatedView();
         // Exit spring loaded mode if necessary after cancelling the configuration of a widget

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -736,6 +736,7 @@ protected void onActivityResult(
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 completeTwoStageWidgetDrop(RESULT_CANCELED, appWidgetId);
+                mWorkspace.stripEmptyScreens();
             } else {
                 completeTwoStageWidgetDrop(resultCode, appWidgetId);
             }
@@ -760,6 +761,8 @@ protected void onActivityResult(
             } else {
                 delayExitSpringLoadedMode = completeAdd(args);
             }
+        } else if (resultCode == RESULT_CANCELED) {
+            mWorkspace.stripEmptyScreens();
         }
         mDragLayer.clearAnimatedView();
         // Exit spring loaded mode if necessary after cancelling the configuration of a widget

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -736,6 +736,7 @@ protected void onActivityResult(
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 completeTwoStageWidgetDrop(RESULT_CANCELED, appWidgetId);
+                mWorkspace.stripEmptyScreens();
             } else {
                 completeTwoStageWidgetDrop(resultCode, appWidgetId);
             }
@@ -760,6 +761,8 @@ protected void onActivityResult(
             } else {
                 delayExitSpringLoadedMode = completeAdd(args);
             }
+        } else if (resultCode == RESULT_CANCELED) {
+            mWorkspace.stripEmptyScreens();
         }
         mDragLayer.clearAnimatedView();
         // Exit spring loaded mode if necessary after cancelling the configuration of a widget

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -736,6 +736,7 @@ protected void onActivityResult(
                 Log.e(TAG, "Error: appWidgetId (EXTRA_APPWIDGET_ID) was not returned from the \\" +
                         "widget configuration activity.");
                 completeTwoStageWidgetDrop(RESULT_CANCELED, appWidgetId);
+                mWorkspace.stripEmptyScreens();
             } else {
                 completeTwoStageWidgetDrop(resultCode, appWidgetId);
             }
@@ -760,6 +761,8 @@ protected void onActivityResult(
             } else {
                 delayExitSpringLoadedMode = completeAdd(args);
             }
+        } else if (resultCode == RESULT_CANCELED) {
+            mWorkspace.stripEmptyScreens();
         }
         mDragLayer.clearAnimatedView();
         // Exit spring loaded mode if necessary after cancelling the configuration of a widget

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -178,7 +178,8 @@ DeviceProfile initDynamicGrid(Context context, int minWidth, int minHeight,
                                   int width, int height,
                                   int availableWidth, int availableHeight) {
         if (mDynamicGrid == null) {
-            mDynamicGrid = new DynamicGrid(context.getResources(),
+            mDynamicGrid = new DynamicGrid(context,
+                    context.getResources(),
                     minWidth, minHeight, width, height,
                     availableWidth, availableHeight);
         }

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -178,7 +178,8 @@ DeviceProfile initDynamicGrid(Context context, int minWidth, int minHeight,
                                   int width, int height,
                                   int availableWidth, int availableHeight) {
         if (mDynamicGrid == null) {
-            mDynamicGrid = new DynamicGrid(context.getResources(),
+            mDynamicGrid = new DynamicGrid(context,
+                    context.getResources(),
                     minWidth, minHeight, width, height,
                     availableWidth, availableHeight);
         }

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -178,7 +178,8 @@ DeviceProfile initDynamicGrid(Context context, int minWidth, int minHeight,
                                   int width, int height,
                                   int availableWidth, int availableHeight) {
         if (mDynamicGrid == null) {
-            mDynamicGrid = new DynamicGrid(context.getResources(),
+            mDynamicGrid = new DynamicGrid(context,
+                    context.getResources(),
                     minWidth, minHeight, width, height,
                     availableWidth, availableHeight);
         }

File: src/com/android/launcher3/Folder.java
Patch:
@@ -888,7 +888,7 @@ private void centerAboutIcon() {
         int centerY = (int) (mTempRect.top + mTempRect.height() * scale / 2);
         int centeredLeft = centerX - width / 2;
         int centeredTop = centerY - height / 2;
-        int currentPage = mLauncher.getWorkspace().getCurrentPage();
+        int currentPage = mLauncher.getWorkspace().getNextPage();
         // In case the workspace is scrolling, we need to use the final scroll to compute
         // the folders bounds.
         mLauncher.getWorkspace().setFinalScrollForPageChange(currentPage);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -888,7 +888,7 @@ private void centerAboutIcon() {
         int centerY = (int) (mTempRect.top + mTempRect.height() * scale / 2);
         int centeredLeft = centerX - width / 2;
         int centeredTop = centerY - height / 2;
-        int currentPage = mLauncher.getWorkspace().getCurrentPage();
+        int currentPage = mLauncher.getWorkspace().getNextPage();
         // In case the workspace is scrolling, we need to use the final scroll to compute
         // the folders bounds.
         mLauncher.getWorkspace().setFinalScrollForPageChange(currentPage);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -888,7 +888,7 @@ private void centerAboutIcon() {
         int centerY = (int) (mTempRect.top + mTempRect.height() * scale / 2);
         int centeredLeft = centerX - width / 2;
         int centeredTop = centerY - height / 2;
-        int currentPage = mLauncher.getWorkspace().getCurrentPage();
+        int currentPage = mLauncher.getWorkspace().getNextPage();
         // In case the workspace is scrolling, we need to use the final scroll to compute
         // the folders bounds.
         mLauncher.getWorkspace().setFinalScrollForPageChange(currentPage);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1387,7 +1387,9 @@ private void updateStateForCustomContent(int screenCenter) {
         float progress = 0;
         if (hasCustomContent()) {
             int index = mScreenOrder.indexOf(CUSTOM_CONTENT_SCREEN_ID);
-            int scrollDelta = getScrollForPage(index + 1) - getScrollX();
+
+            int scrollDelta = getScrollForPage(index + 1) - getScrollX() +
+                    getLayoutTransitionOffsetForPage(index + 1);
             translationX = scrollDelta;
             progress = (1.0f * scrollDelta) /
                     (getScrollForPage(index + 1) - getScrollForPage(index));

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1387,7 +1387,9 @@ private void updateStateForCustomContent(int screenCenter) {
         float progress = 0;
         if (hasCustomContent()) {
             int index = mScreenOrder.indexOf(CUSTOM_CONTENT_SCREEN_ID);
-            int scrollDelta = getScrollForPage(index + 1) - getScrollX();
+
+            int scrollDelta = getScrollForPage(index + 1) - getScrollX() +
+                    getLayoutTransitionOffsetForPage(index + 1);
             translationX = scrollDelta;
             progress = (1.0f * scrollDelta) /
                     (getScrollForPage(index + 1) - getScrollForPage(index));

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1387,7 +1387,9 @@ private void updateStateForCustomContent(int screenCenter) {
         float progress = 0;
         if (hasCustomContent()) {
             int index = mScreenOrder.indexOf(CUSTOM_CONTENT_SCREEN_ID);
-            int scrollDelta = getScrollForPage(index + 1) - getScrollX();
+
+            int scrollDelta = getScrollForPage(index + 1) - getScrollX() +
+                    getLayoutTransitionOffsetForPage(index + 1);
             translationX = scrollDelta;
             progress = (1.0f * scrollDelta) /
                     (getScrollForPage(index + 1) - getScrollForPage(index));

File: src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -616,11 +616,11 @@ private void addTemporaryWallpaperTile(Uri uri) {
             Log.e(TAG, "Error loading thumbnail for uri=" + uri);
         }
         mWallpapersView.addView(pickedImageThumbnail, 0);
-        updateTileIndices();
 
         UriWallpaperInfo info = new UriWallpaperInfo(uri);
         pickedImageThumbnail.setTag(info);
         info.setView(pickedImageThumbnail);
+        updateTileIndices();
         pickedImageThumbnail.setOnClickListener(mThumbnailOnClickListener);
         mThumbnailOnClickListener.onClick(pickedImageThumbnail);
     }

File: src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -616,11 +616,11 @@ private void addTemporaryWallpaperTile(Uri uri) {
             Log.e(TAG, "Error loading thumbnail for uri=" + uri);
         }
         mWallpapersView.addView(pickedImageThumbnail, 0);
-        updateTileIndices();
 
         UriWallpaperInfo info = new UriWallpaperInfo(uri);
         pickedImageThumbnail.setTag(info);
         info.setView(pickedImageThumbnail);
+        updateTileIndices();
         pickedImageThumbnail.setOnClickListener(mThumbnailOnClickListener);
         mThumbnailOnClickListener.onClick(pickedImageThumbnail);
     }

File: src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -616,11 +616,11 @@ private void addTemporaryWallpaperTile(Uri uri) {
             Log.e(TAG, "Error loading thumbnail for uri=" + uri);
         }
         mWallpapersView.addView(pickedImageThumbnail, 0);
-        updateTileIndices();
 
         UriWallpaperInfo info = new UriWallpaperInfo(uri);
         pickedImageThumbnail.setTag(info);
         info.setView(pickedImageThumbnail);
+        updateTileIndices();
         pickedImageThumbnail.setOnClickListener(mThumbnailOnClickListener);
         mThumbnailOnClickListener.onClick(pickedImageThumbnail);
     }

File: src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -616,11 +616,11 @@ private void addTemporaryWallpaperTile(Uri uri) {
             Log.e(TAG, "Error loading thumbnail for uri=" + uri);
         }
         mWallpapersView.addView(pickedImageThumbnail, 0);
-        updateTileIndices();
 
         UriWallpaperInfo info = new UriWallpaperInfo(uri);
         pickedImageThumbnail.setTag(info);
         info.setView(pickedImageThumbnail);
+        updateTileIndices();
         pickedImageThumbnail.setOnClickListener(mThumbnailOnClickListener);
         mThumbnailOnClickListener.onClick(pickedImageThumbnail);
     }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1623,6 +1623,7 @@ private boolean loadWorkspace() {
 
                 final ArrayList<Long> itemsToRemove = new ArrayList<Long>();
                 final Uri contentUri = LauncherSettings.Favorites.CONTENT_URI;
+                if (DEBUG_LOADERS) Log.d(TAG, "loading model from " + contentUri);
                 final Cursor c = contentResolver.query(contentUri, null, null, null, null);
 
                 // +1 for the hotseat (it can be larger than the workspace)

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -49,8 +49,8 @@
 import android.util.Log;
 import android.util.Xml;
 
-import com.android.launcher3.LauncherSettings.BaseLauncherColumns;
 import com.android.launcher3.LauncherSettings.Favorites;
+import com.android.launcher3.config.ProviderConfig;
 
 import org.xmlpull.v1.XmlPullParser;
 import org.xmlpull.v1.XmlPullParserException;
@@ -69,7 +69,7 @@ public class LauncherProvider extends ContentProvider {
     private static final int DATABASE_VERSION = 15;
 
     static final String OLD_AUTHORITY = "com.android.launcher2.settings";
-    static final String AUTHORITY = "com.android.launcher3.settings";
+    static final String AUTHORITY = ProviderConfig.AUTHORITY;
 
     static final String TABLE_FAVORITES = "favorites";
     static final String TABLE_WORKSPACE_SCREENS = "workspaceScreens";

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -546,10 +546,7 @@ protected void dispatchDraw(Canvas canvas) {
         super.dispatchDraw(canvas);
         if (mForegroundAlpha > 0) {
             mOverScrollForegroundDrawable.setBounds(mForegroundRect);
-            Paint p = ((NinePatchDrawable) mOverScrollForegroundDrawable).getPaint();
-            p.setXfermode(sAddBlendMode);
             mOverScrollForegroundDrawable.draw(canvas);
-            p.setXfermode(null);
         }
     }
 

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -546,10 +546,7 @@ protected void dispatchDraw(Canvas canvas) {
         super.dispatchDraw(canvas);
         if (mForegroundAlpha > 0) {
             mOverScrollForegroundDrawable.setBounds(mForegroundRect);
-            Paint p = ((NinePatchDrawable) mOverScrollForegroundDrawable).getPaint();
-            p.setXfermode(sAddBlendMode);
             mOverScrollForegroundDrawable.draw(canvas);
-            p.setXfermode(null);
         }
     }
 

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -546,10 +546,7 @@ protected void dispatchDraw(Canvas canvas) {
         super.dispatchDraw(canvas);
         if (mForegroundAlpha > 0) {
             mOverScrollForegroundDrawable.setBounds(mForegroundRect);
-            Paint p = ((NinePatchDrawable) mOverScrollForegroundDrawable).getPaint();
-            p.setXfermode(sAddBlendMode);
             mOverScrollForegroundDrawable.draw(canvas);
-            p.setXfermode(null);
         }
     }
 

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -547,10 +547,7 @@ protected void dispatchDraw(Canvas canvas) {
         super.dispatchDraw(canvas);
         if (mForegroundAlpha > 0) {
             mOverScrollForegroundDrawable.setBounds(mForegroundRect);
-            Paint p = ((NinePatchDrawable) mOverScrollForegroundDrawable).getPaint();
-            p.setXfermode(sAddBlendMode);
             mOverScrollForegroundDrawable.draw(canvas);
-            p.setXfermode(null);
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3042,7 +3042,7 @@ void showWorkspace(boolean animated, Runnable onCompleteRunnable) {
             // Show the search bar (only animate if we were showing the drop target bar in spring
             // loaded mode)
             if (mSearchDropTargetBar != null) {
-                mSearchDropTargetBar.showSearchBar(wasInSpringLoadedMode);
+                mSearchDropTargetBar.showSearchBar(animated && wasInSpringLoadedMode);
             }
 
             // Set focus to the AppsCustomize button

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3042,7 +3042,7 @@ void showWorkspace(boolean animated, Runnable onCompleteRunnable) {
             // Show the search bar (only animate if we were showing the drop target bar in spring
             // loaded mode)
             if (mSearchDropTargetBar != null) {
-                mSearchDropTargetBar.showSearchBar(wasInSpringLoadedMode);
+                mSearchDropTargetBar.showSearchBar(animated && wasInSpringLoadedMode);
             }
 
             // Set focus to the AppsCustomize button

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3042,7 +3042,7 @@ void showWorkspace(boolean animated, Runnable onCompleteRunnable) {
             // Show the search bar (only animate if we were showing the drop target bar in spring
             // loaded mode)
             if (mSearchDropTargetBar != null) {
-                mSearchDropTargetBar.showSearchBar(wasInSpringLoadedMode);
+                mSearchDropTargetBar.showSearchBar(animated && wasInSpringLoadedMode);
             }
 
             // Set focus to the AppsCustomize button

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3042,7 +3042,7 @@ void showWorkspace(boolean animated, Runnable onCompleteRunnable) {
             // Show the search bar (only animate if we were showing the drop target bar in spring
             // loaded mode)
             if (mSearchDropTargetBar != null) {
-                mSearchDropTargetBar.showSearchBar(wasInSpringLoadedMode);
+                mSearchDropTargetBar.showSearchBar(animated && wasInSpringLoadedMode);
             }
 
             // Set focus to the AppsCustomize button

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3928,8 +3928,7 @@ public void bindAllApplications(final ArrayList<AppInfo> apps) {
                 mIntentsOnWorkspaceFromUpgradePath = null;
             }
         } else {
-            if (!AppsCustomizePagedView.DISABLE_ALL_APPS &&
-                    mAppsCustomizeContent != null) {
+            if (mAppsCustomizeContent != null) {
                 mAppsCustomizeContent.setApps(apps);
             }
         }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -338,7 +338,8 @@ public int[] estimateItemSize(int hSpan, int vSpan,
             ItemInfo itemInfo, boolean springLoaded) {
         int[] size = new int[2];
         if (getChildCount() > 0) {
-            CellLayout cl = (CellLayout) mLauncher.getWorkspace().getChildAt(0);
+            // Use the first non-custom page to estimate the child position
+            CellLayout cl = (CellLayout) getChildAt(numCustomPages());
             Rect r = estimateItemPosition(cl, itemInfo, 0, 0, hSpan, vSpan);
             size[0] = r.width();
             size[1] = r.height();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3928,8 +3928,7 @@ public void bindAllApplications(final ArrayList<AppInfo> apps) {
                 mIntentsOnWorkspaceFromUpgradePath = null;
             }
         } else {
-            if (!AppsCustomizePagedView.DISABLE_ALL_APPS &&
-                    mAppsCustomizeContent != null) {
+            if (mAppsCustomizeContent != null) {
                 mAppsCustomizeContent.setApps(apps);
             }
         }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -338,7 +338,8 @@ public int[] estimateItemSize(int hSpan, int vSpan,
             ItemInfo itemInfo, boolean springLoaded) {
         int[] size = new int[2];
         if (getChildCount() > 0) {
-            CellLayout cl = (CellLayout) mLauncher.getWorkspace().getChildAt(0);
+            // Use the first non-custom page to estimate the child position
+            CellLayout cl = (CellLayout) getChildAt(numCustomPages());
             Rect r = estimateItemPosition(cl, itemInfo, 0, 0, hSpan, vSpan);
             size[0] = r.width();
             size[1] = r.height();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3928,8 +3928,7 @@ public void bindAllApplications(final ArrayList<AppInfo> apps) {
                 mIntentsOnWorkspaceFromUpgradePath = null;
             }
         } else {
-            if (!AppsCustomizePagedView.DISABLE_ALL_APPS &&
-                    mAppsCustomizeContent != null) {
+            if (mAppsCustomizeContent != null) {
                 mAppsCustomizeContent.setApps(apps);
             }
         }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -338,7 +338,8 @@ public int[] estimateItemSize(int hSpan, int vSpan,
             ItemInfo itemInfo, boolean springLoaded) {
         int[] size = new int[2];
         if (getChildCount() > 0) {
-            CellLayout cl = (CellLayout) mLauncher.getWorkspace().getChildAt(0);
+            // Use the first non-custom page to estimate the child position
+            CellLayout cl = (CellLayout) getChildAt(numCustomPages());
             Rect r = estimateItemPosition(cl, itemInfo, 0, 0, hSpan, vSpan);
             size[0] = r.width();
             size[1] = r.height();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3931,8 +3931,7 @@ public void bindAllApplications(final ArrayList<AppInfo> apps) {
                 mIntentsOnWorkspaceFromUpgradePath = null;
             }
         } else {
-            if (!AppsCustomizePagedView.DISABLE_ALL_APPS &&
-                    mAppsCustomizeContent != null) {
+            if (mAppsCustomizeContent != null) {
                 mAppsCustomizeContent.setApps(apps);
             }
         }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -338,7 +338,8 @@ public int[] estimateItemSize(int hSpan, int vSpan,
             ItemInfo itemInfo, boolean springLoaded) {
         int[] size = new int[2];
         if (getChildCount() > 0) {
-            CellLayout cl = (CellLayout) mLauncher.getWorkspace().getChildAt(0);
+            // Use the first non-custom page to estimate the child position
+            CellLayout cl = (CellLayout) getChildAt(numCustomPages());
             Rect r = estimateItemPosition(cl, itemInfo, 0, 0, hSpan, vSpan);
             size[0] = r.width();
             size[1] = r.height();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2074,7 +2074,7 @@ public void onAnimationUpdate(float a, float b) {
                     R.integer.config_appsCustomizeSpringLoadedBgAlpha) / 100f, true);
         } else {
             // Fade the background gradient away
-            animateBackgroundGradient(0f, true);
+            animateBackgroundGradient(0f, animated);
         }
         return anim;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2074,7 +2074,7 @@ public void onAnimationUpdate(float a, float b) {
                     R.integer.config_appsCustomizeSpringLoadedBgAlpha) / 100f, true);
         } else {
             // Fade the background gradient away
-            animateBackgroundGradient(0f, true);
+            animateBackgroundGradient(0f, animated);
         }
         return anim;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2074,7 +2074,7 @@ public void onAnimationUpdate(float a, float b) {
                     R.integer.config_appsCustomizeSpringLoadedBgAlpha) / 100f, true);
         } else {
             // Fade the background gradient away
-            animateBackgroundGradient(0f, true);
+            animateBackgroundGradient(0f, animated);
         }
         return anim;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1949,7 +1949,7 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay,
                 getResources().getInteger(R.integer.config_appsCustomizeWorkspaceShrinkTime);
         for (int i = 0; i < getChildCount(); i++) {
             final CellLayout cl = (CellLayout) getChildAt(i);
-            boolean isCurrentPage = (i == mCurrentPage);
+            boolean isCurrentPage = (i == getNextPage());
             float initialAlpha = cl.getShortcutsAndWidgets().getAlpha();
             float finalAlpha = stateIsSmall ? 0f : 1f;
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1949,7 +1949,7 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay,
                 getResources().getInteger(R.integer.config_appsCustomizeWorkspaceShrinkTime);
         for (int i = 0; i < getChildCount(); i++) {
             final CellLayout cl = (CellLayout) getChildAt(i);
-            boolean isCurrentPage = (i == mCurrentPage);
+            boolean isCurrentPage = (i == getNextPage());
             float initialAlpha = cl.getShortcutsAndWidgets().getAlpha();
             float finalAlpha = stateIsSmall ? 0f : 1f;
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1949,7 +1949,7 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay,
                 getResources().getInteger(R.integer.config_appsCustomizeWorkspaceShrinkTime);
         for (int i = 0; i < getChildCount(); i++) {
             final CellLayout cl = (CellLayout) getChildAt(i);
-            boolean isCurrentPage = (i == mCurrentPage);
+            boolean isCurrentPage = (i == getNextPage());
             float initialAlpha = cl.getShortcutsAndWidgets().getAlpha();
             float finalAlpha = stateIsSmall ? 0f : 1f;
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1909,7 +1909,7 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay,
                 getResources().getInteger(R.integer.config_appsCustomizeWorkspaceShrinkTime);
         for (int i = 0; i < getChildCount(); i++) {
             final CellLayout cl = (CellLayout) getChildAt(i);
-            boolean isCurrentPage = (i == mCurrentPage);
+            boolean isCurrentPage = (i == getNextPage());
             float initialAlpha = cl.getShortcutsAndWidgets().getAlpha();
             float finalAlpha = stateIsSmall ? 0f : 1f;
 

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -460,7 +460,7 @@ public void layout(Launcher launcher) {
                 lp = (FrameLayout.LayoutParams) pageIndicator.getLayoutParams();
                 lp.gravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
                 lp.width = LayoutParams.WRAP_CONTENT;
-                lp.height = pageIndicatorHeightPx;
+                lp.height = LayoutParams.WRAP_CONTENT;
                 lp.bottomMargin = hotseatBarHeightPx;
                 pageIndicator.setLayoutParams(lp);
             }

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -460,7 +460,7 @@ public void layout(Launcher launcher) {
                 lp = (FrameLayout.LayoutParams) pageIndicator.getLayoutParams();
                 lp.gravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
                 lp.width = LayoutParams.WRAP_CONTENT;
-                lp.height = pageIndicatorHeightPx;
+                lp.height = LayoutParams.WRAP_CONTENT;
                 lp.bottomMargin = hotseatBarHeightPx;
                 pageIndicator.setLayoutParams(lp);
             }

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -460,7 +460,7 @@ public void layout(Launcher launcher) {
                 lp = (FrameLayout.LayoutParams) pageIndicator.getLayoutParams();
                 lp.gravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
                 lp.width = LayoutParams.WRAP_CONTENT;
-                lp.height = pageIndicatorHeightPx;
+                lp.height = LayoutParams.WRAP_CONTENT;
                 lp.bottomMargin = hotseatBarHeightPx;
                 pageIndicator.setLayoutParams(lp);
             }

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -460,7 +460,7 @@ public void layout(Launcher launcher) {
                 lp = (FrameLayout.LayoutParams) pageIndicator.getLayoutParams();
                 lp.gravity = Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM;
                 lp.width = LayoutParams.WRAP_CONTENT;
-                lp.height = pageIndicatorHeightPx;
+                lp.height = LayoutParams.WRAP_CONTENT;
                 lp.bottomMargin = hotseatBarHeightPx;
                 pageIndicator.setLayoutParams(lp);
             }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -571,6 +571,7 @@ public void addToCustomContentPage(View customContent, CustomContentCallbacks ca
         if (customContent instanceof Insettable) {
             ((Insettable)customContent).setInsets(mInsets);
         }
+        customScreen.removeAllViews();
         customScreen.addViewToCellLayout(customContent, 0, 0, lp, true);
         mCustomContentDescription = description;
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -571,6 +571,7 @@ public void addToCustomContentPage(View customContent, CustomContentCallbacks ca
         if (customContent instanceof Insettable) {
             ((Insettable)customContent).setInsets(mInsets);
         }
+        customScreen.removeAllViews();
         customScreen.addViewToCellLayout(customContent, 0, 0, lp, true);
         mCustomContentDescription = description;
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -571,6 +571,7 @@ public void addToCustomContentPage(View customContent, CustomContentCallbacks ca
         if (customContent instanceof Insettable) {
             ((Insettable)customContent).setInsets(mInsets);
         }
+        customScreen.removeAllViews();
         customScreen.addViewToCellLayout(customContent, 0, 0, lp, true);
         mCustomContentDescription = description;
 

File: src/com/android/launcher3/LauncherProvider.java
Patch:
@@ -210,7 +210,7 @@ private void sendNotify(Uri uri) {
         }
 
         // always notify the backup agent
-        LauncherBackupAgent.dataChanged(getContext());
+        LauncherBackupAgentHelper.dataChanged(getContext());
     }
 
     private void addModifiedTime(ContentValues values) {

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -103,7 +103,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
         for (int i = 0; i < count; i++) {
             View child = getChildAt(i);
-            measureChild(child);
+            if (child.getVisibility() != GONE) {
+                measureChild(child);
+            }
         }
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -326,7 +326,7 @@ private enum State { NONE, WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOAD
 
     private BubbleTextView mWaitingForResume;
 
-    protected TransparentBars mTransparentBars;
+    protected TranslucentDecor mTransparentDecor;
 
     private HideFromAccessibilityHelper mHideFromAccessibilityHelper
         = new HideFromAccessibilityHelper();
@@ -426,8 +426,8 @@ protected void onCreate(Bundle savedInstanceState) {
         checkForLocaleChange();
         setContentView(R.layout.launcher);
 
-        mTransparentBars = new TransparentBars(findViewById(R.id.launcher));
-        mTransparentBars.requestTransparentBars(true);
+        mTransparentDecor = new TranslucentDecor(findViewById(R.id.launcher));
+        mTransparentDecor.requestTranslucentDecor(true);
 
         setupViews();
         grid.layout(this);

File: src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -102,8 +102,8 @@ public void onClick(View v) {
                         cropImageAndSetWallpaper(imageUri, null, finishActivityWhenDone);
                     }
                 });
-        TransparentBars transparentBars = new TransparentBars(findViewById(R.id.wallpaper_root));
-        transparentBars.requestTransparentBars(true);
+        TranslucentDecor transparentDecor = new TranslucentDecor(findViewById(R.id.wallpaper_root));
+        transparentDecor.requestTranslucentDecor(true);
     }
 
     public boolean enableRotation() {

File: src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -181,8 +181,8 @@ public void setWallpaperStripYOffset(float offset) {
     protected void init() {
         setContentView(R.layout.wallpaper_picker);
         final WallpaperRootView root = (WallpaperRootView) findViewById(R.id.wallpaper_root);
-        TransparentBars transparentBars = new TransparentBars(root);
-        transparentBars.requestTransparentBars(true);
+        TranslucentDecor transparentDecor = new TranslucentDecor(root);
+        transparentDecor.requestTranslucentDecor(true);
 
         mCropView = (CropView) findViewById(R.id.cropView);
         mWallpaperStrip = findViewById(R.id.wallpaper_strip);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3462,7 +3462,7 @@ public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
         text.clear();
         // Populate event with a fake title based on the current state.
         if (mState == State.APPS_CUSTOMIZE) {
-            text.add(getString(R.string.all_apps_button_label));
+            text.add(mAppsCustomizeTabHost.getCurrentTabView().getContentDescription());
         } else {
             text.add(getString(R.string.all_apps_home_button_label));
         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3462,7 +3462,7 @@ public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
         text.clear();
         // Populate event with a fake title based on the current state.
         if (mState == State.APPS_CUSTOMIZE) {
-            text.add(getString(R.string.all_apps_button_label));
+            text.add(mAppsCustomizeTabHost.getCurrentTabView().getContentDescription());
         } else {
             text.add(getString(R.string.all_apps_home_button_label));
         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3462,7 +3462,7 @@ public boolean dispatchPopulateAccessibilityEvent(AccessibilityEvent event) {
         text.clear();
         // Populate event with a fake title based on the current state.
         if (mState == State.APPS_CUSTOMIZE) {
-            text.add(getString(R.string.all_apps_button_label));
+            text.add(mAppsCustomizeTabHost.getCurrentTabView().getContentDescription());
         } else {
             text.add(getString(R.string.all_apps_home_button_label));
         }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3664,6 +3664,9 @@ public void run() {
                     addAnimated.size(), true);
         }
 
+        // Remove the extra empty screen
+        mWorkspace.removeExtraEmptyScreen();
+
         if (!AppsCustomizePagedView.DISABLE_ALL_APPS &&
                 addedApps != null && mAppsCustomizeContent != null) {
             mAppsCustomizeContent.addApps(addedApps);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3664,6 +3664,9 @@ public void run() {
                     addAnimated.size(), true);
         }
 
+        // Remove the extra empty screen
+        mWorkspace.removeExtraEmptyScreen();
+
         if (!AppsCustomizePagedView.DISABLE_ALL_APPS &&
                 addedApps != null && mAppsCustomizeContent != null) {
             mAppsCustomizeContent.addApps(addedApps);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3664,6 +3664,9 @@ public void run() {
                     addAnimated.size(), true);
         }
 
+        // Remove the extra empty screen
+        mWorkspace.removeExtraEmptyScreen();
+
         if (!AppsCustomizePagedView.DISABLE_ALL_APPS &&
                 addedApps != null && mAppsCustomizeContent != null) {
             mAppsCustomizeContent.addApps(addedApps);

File: src/com/android/launcher3/LauncherBackupAgent.java
Patch:
@@ -644,7 +644,7 @@ private Key getKey(int type, String name) {
 
     /** keys need to be strings, serialize and encode. */
     private String keyToBackupKey(Key key) {
-        return Base64.encodeToString(Key.toByteArray(key), Base64.NO_WRAP | Base64.NO_PADDING);
+        return Base64.encodeToString(Key.toByteArray(key), Base64.NO_WRAP);
     }
 
     /** keys need to be strings, decode and parse. */

File: util/com/android/launcher3/DecoderRing.java
Patch:
@@ -100,7 +100,7 @@ public static void main(String[ ] args)
         if (type == Key.class) {
             Key key = new Key();
             try {
-                MessageNano.mergeFrom(key, byteStream.toByteArray());
+                key = Key.parseFrom(byteStream.toByteArray());
             } catch (InvalidProtocolBufferNanoException e) {
                 System.err.println("failed to parse proto: " + e);
                 System.exit(1);

File: src/com/android/launcher3/LauncherBackupAgent.java
Patch:
@@ -567,6 +567,7 @@ private void backupWidgets(Journal in, BackupDataOutput data, Journal out,
                         previewLoader.setPreviewSize(spanX * profile.cellWidthPx,
                                 spanY * profile.cellHeightPx, widgetSpacingLayout);
                         byte[] blob = packWidget(dpi, previewLoader, iconCache, provider);
+                        keys.add(key);
                         writeRowToBackup(key, blob, out, data);
 
                     } else {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3664,6 +3664,9 @@ public void run() {
                     addAnimated.size(), true);
         }
 
+        // Remove the extra empty screen
+        mWorkspace.removeExtraEmptyScreen();
+
         if (!AppsCustomizePagedView.DISABLE_ALL_APPS &&
                 addedApps != null && mAppsCustomizeContent != null) {
             mAppsCustomizeContent.addApps(addedApps);

File: src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -85,7 +85,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
         View view;
 
         if (convertView == null) {
-            view = mInflater.inflate(R.layout.live_wallpaper_picker_item, parent, false);
+            view = mInflater.inflate(R.layout.wallpaper_picker_live_wallpaper_item, parent, false);
         } else {
             view = convertView;
         }

File: src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -295,7 +295,7 @@ public void onChanged() {
         // Add a tile for the Gallery
         LinearLayout masterWallpaperList = (LinearLayout) findViewById(R.id.master_wallpaper_list);
         FrameLayout galleryThumbnail = (FrameLayout) getLayoutInflater().
-                inflate(R.layout.wallpaper_picker_gallery_item, masterWallpaperList, false);
+                inflate(R.layout.wallpaper_picker_image_picker_item, masterWallpaperList, false);
         setWallpaperItemPaddingToZero(galleryThumbnail);
         masterWallpaperList.addView(galleryThumbnail, 0);
 

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -438,6 +438,9 @@ public void onPackagesUpdated(ArrayList<Object> widgetsAndShortcuts) {
         for (Object o : widgetsAndShortcuts) {
             if (o instanceof AppWidgetProviderInfo) {
                 AppWidgetProviderInfo widget = (AppWidgetProviderInfo) o;
+                if (!app.shouldShowAppOrWidgetProvider(widget.provider)) {
+                    continue;
+                }
                 widget.label = widget.label.trim();
                 if (widget.minWidth > 0 && widget.minHeight > 0) {
                     // Ensure that all widgets we show can be added on a workspace of this size

File: src/com/android/launcher3/Cling.java
Patch:
@@ -327,7 +327,7 @@ protected void dispatchDraw(Canvas canvas) {
             }
             if (mDrawIdentifier.equals(FIRST_RUN_PORTRAIT) ||
                     mDrawIdentifier.equals(FIRST_RUN_LANDSCAPE)) {
-                // Draw the white circle
+                // Draw the circle
                 View bubbleContent = findViewById(R.id.bubble_content);
                 Rect bubbleRect = new Rect();
                 bubbleContent.getGlobalVisibleRect(bubbleRect);

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -469,7 +469,7 @@ public Bitmap generateWidgetPreview(ComponentName provider, int previewImage,
                     .getIntrinsicWidth();
             final int previewDrawableHeight = previewDrawable
                     .getIntrinsicHeight();
-            previewWidth = previewDrawableWidth * cellHSpan; // subtract 2 dips
+            previewWidth = previewDrawableWidth * cellHSpan;
             previewHeight = previewDrawableHeight * cellVSpan;
 
             defaultPreview = Bitmap.createBitmap(previewWidth, previewHeight,

File: src/com/android/launcher3/Cling.java
Patch:
@@ -327,7 +327,7 @@ protected void dispatchDraw(Canvas canvas) {
             }
             if (mDrawIdentifier.equals(FIRST_RUN_PORTRAIT) ||
                     mDrawIdentifier.equals(FIRST_RUN_LANDSCAPE)) {
-                // Draw the white circle
+                // Draw the circle
                 View bubbleContent = findViewById(R.id.bubble_content);
                 Rect bubbleRect = new Rect();
                 bubbleContent.getGlobalVisibleRect(bubbleRect);

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -469,7 +469,7 @@ public Bitmap generateWidgetPreview(ComponentName provider, int previewImage,
                     .getIntrinsicWidth();
             final int previewDrawableHeight = previewDrawable
                     .getIntrinsicHeight();
-            previewWidth = previewDrawableWidth * cellHSpan; // subtract 2 dips
+            previewWidth = previewDrawableWidth * cellHSpan;
             previewHeight = previewDrawableHeight * cellVSpan;
 
             defaultPreview = Bitmap.createBitmap(previewWidth, previewHeight,

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1051,7 +1051,7 @@ protected int getChildOffset(int index) {
 
     protected void getOverviewModePages(int[] range) {
         range[0] = 0;
-        range[1] = getChildCount() - 1;
+        range[1] = Math.max(0, getChildCount() - 1);
     }
 
     protected void getVisiblePages(int[] range) {
@@ -1476,7 +1476,7 @@ protected float getScrollProgress(int screenCenter, View v, int page) {
     }
 
     public int getScrollForPage(int index) {
-        if (mPageScrolls == null || index >= mPageScrolls.length) {
+        if (mPageScrolls == null || index >= mPageScrolls.length || index < 0) {
             return 0;
         } else {
             return mPageScrolls[index];

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1051,7 +1051,7 @@ protected int getChildOffset(int index) {
 
     protected void getOverviewModePages(int[] range) {
         range[0] = 0;
-        range[1] = getChildCount() - 1;
+        range[1] = Math.max(0, getChildCount() - 1);
     }
 
     protected void getVisiblePages(int[] range) {
@@ -1476,7 +1476,7 @@ protected float getScrollProgress(int screenCenter, View v, int page) {
     }
 
     public int getScrollForPage(int index) {
-        if (mPageScrolls == null || index >= mPageScrolls.length) {
+        if (mPageScrolls == null || index >= mPageScrolls.length || index < 0) {
             return 0;
         } else {
             return mPageScrolls[index];

File: src/com/android/launcher3/Cling.java
Patch:
@@ -327,7 +327,7 @@ protected void dispatchDraw(Canvas canvas) {
             }
             if (mDrawIdentifier.equals(FIRST_RUN_PORTRAIT) ||
                     mDrawIdentifier.equals(FIRST_RUN_LANDSCAPE)) {
-                // Draw the white circle
+                // Draw the circle
                 View bubbleContent = findViewById(R.id.bubble_content);
                 Rect bubbleRect = new Rect();
                 bubbleContent.getGlobalVisibleRect(bubbleRect);

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -469,7 +469,7 @@ public Bitmap generateWidgetPreview(ComponentName provider, int previewImage,
                     .getIntrinsicWidth();
             final int previewDrawableHeight = previewDrawable
                     .getIntrinsicHeight();
-            previewWidth = previewDrawableWidth * cellHSpan; // subtract 2 dips
+            previewWidth = previewDrawableWidth * cellHSpan;
             previewHeight = previewDrawableHeight * cellVSpan;
 
             defaultPreview = Bitmap.createBitmap(previewWidth, previewHeight,

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1051,7 +1051,7 @@ protected int getChildOffset(int index) {
 
     protected void getOverviewModePages(int[] range) {
         range[0] = 0;
-        range[1] = getChildCount() - 1;
+        range[1] = Math.max(0, getChildCount() - 1);
     }
 
     protected void getVisiblePages(int[] range) {
@@ -1476,7 +1476,7 @@ protected float getScrollProgress(int screenCenter, View v, int page) {
     }
 
     public int getScrollForPage(int index) {
-        if (mPageScrolls == null || index >= mPageScrolls.length) {
+        if (mPageScrolls == null || index >= mPageScrolls.length || index < 0) {
             return 0;
         } else {
             return mPageScrolls[index];

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1050,7 +1050,7 @@ protected int getChildOffset(int index) {
 
     protected void getOverviewModePages(int[] range) {
         range[0] = 0;
-        range[1] = getChildCount() - 1;
+        range[1] = Math.max(0, getChildCount() - 1);
     }
 
     protected void getVisiblePages(int[] range) {
@@ -1475,7 +1475,7 @@ protected float getScrollProgress(int screenCenter, View v, int page) {
     }
 
     public int getScrollForPage(int index) {
-        if (mPageScrolls == null || index >= mPageScrolls.length) {
+        if (mPageScrolls == null || index >= mPageScrolls.length || index < 0) {
             return 0;
         } else {
             return mPageScrolls[index];

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1720,7 +1720,7 @@ protected void showWorkspaceAndExitOverviewMode(boolean animate) {
         }
     }
     protected void showWorkspaceAndExitOverviewMode() {
-        showWorkspaceAndExitOverviewMode(true);
+        showWorkspaceAndExitOverviewMode(false);
     }
 
     @Override

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -911,6 +911,7 @@ protected void onResume() {
         if (DEBUG_RESUME_TIME) {
             Log.d(TAG, "Time spent in onResume: " + (System.currentTimeMillis() - startTime));
         }
+        mWorkspace.updateInteractionForState();
     }
 
     @Override
@@ -3072,7 +3073,6 @@ void showWorkspace(boolean animated, Runnable onCompleteRunnable) {
                 .sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
 
         onWorkspaceShown(animated);
-        onInteractionEnd();
     }
 
     public void onWorkspaceShown(boolean animated) {
@@ -3087,7 +3087,6 @@ void showAllApps(boolean animated,
 
         // Change the state *after* we've called all the transition code
         mState = State.APPS_CUSTOMIZE;
-        onInteractionBegin();
 
         // Pause the auto-advance of widgets until we are out of AllApps
         mUserPresent = false;

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -536,7 +536,8 @@ private void drawPreviewItem(Canvas canvas, PreviewItemDrawingParams params) {
         if (d != null) {
             d.setBounds(0, 0, mIntrinsicIconSize, mIntrinsicIconSize);
             d.setFilterBitmap(true);
-            d.setColorFilter(Color.argb(params.overlayAlpha, 0, 0, 0), PorterDuff.Mode.SRC_ATOP);
+            d.setColorFilter(Color.argb(params.overlayAlpha, 255, 255, 255),
+                    PorterDuff.Mode.SRC_ATOP);
             d.draw(canvas);
             d.clearColorFilter();
             d.setFilterBitmap(false);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -497,7 +497,7 @@ protected void addCustomContentToLeft() {
      * ensure the custom content page is added or removed if necessary.
      */
     protected void invalidateHasCustomContentToLeft() {
-        if (mWorkspace.getScreenOrder().isEmpty()) {
+        if (mWorkspace == null || mWorkspace.getScreenOrder().isEmpty()) {
             // Not bound yet, wait for bindScreens to be called.
             return;
         }

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -95,6 +95,7 @@ public class CellLayout extends ViewGroup {
     private ArrayList<FolderRingAnimator> mFolderOuterRings = new ArrayList<FolderRingAnimator>();
     private int[] mFolderLeaveBehindCell = {-1, -1};
 
+    private float FOREGROUND_ALPHA_DAMPER = 0.65f;
     private int mForegroundAlpha = 0;
     private float mBackgroundAlpha;
     private float mBackgroundAlphaMultiplier = 1.0f;
@@ -349,6 +350,7 @@ void setOverScrollAmount(float r, boolean left) {
             mOverScrollForegroundDrawable = mOverScrollRight;
         }
 
+        r *= FOREGROUND_ALPHA_DAMPER;
         mForegroundAlpha = (int) Math.round((r * 255));
         mOverScrollForegroundDrawable.setAlpha(mForegroundAlpha);
         invalidate();

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -518,6 +518,9 @@ void resumeScrolling() {
     void setCurrentPage(int currentPage) {
         if (!mScroller.isFinished()) {
             mScroller.abortAnimation();
+            // We need to clean up the next page here to avoid computeScrollHelper from
+            // updating current page on the pass.
+            mNextPage = INVALID_PAGE;
         }
         // don't introduce any checks like mCurrentPage == currentPage here-- if we change the
         // the default

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -911,6 +911,7 @@ protected void onResume() {
         if (DEBUG_RESUME_TIME) {
             Log.d(TAG, "Time spent in onResume: " + (System.currentTimeMillis() - startTime));
         }
+        mWorkspace.updateInteractionForState();
     }
 
     @Override
@@ -3072,7 +3073,6 @@ void showWorkspace(boolean animated, Runnable onCompleteRunnable) {
                 .sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
 
         onWorkspaceShown(animated);
-        onInteractionEnd();
     }
 
     public void onWorkspaceShown(boolean animated) {
@@ -3087,7 +3087,6 @@ void showAllApps(boolean animated,
 
         // Change the state *after* we've called all the transition code
         mState = State.APPS_CUSTOMIZE;
-        onInteractionBegin();
 
         // Pause the auto-advance of widgets until we are out of AllApps
         mUserPresent = false;

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -536,7 +536,8 @@ private void drawPreviewItem(Canvas canvas, PreviewItemDrawingParams params) {
         if (d != null) {
             d.setBounds(0, 0, mIntrinsicIconSize, mIntrinsicIconSize);
             d.setFilterBitmap(true);
-            d.setColorFilter(Color.argb(params.overlayAlpha, 0, 0, 0), PorterDuff.Mode.SRC_ATOP);
+            d.setColorFilter(Color.argb(params.overlayAlpha, 255, 255, 255),
+                    PorterDuff.Mode.SRC_ATOP);
             d.draw(canvas);
             d.clearColorFilter();
             d.setFilterBitmap(false);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -497,7 +497,7 @@ protected void addCustomContentToLeft() {
      * ensure the custom content page is added or removed if necessary.
      */
     protected void invalidateHasCustomContentToLeft() {
-        if (mWorkspace.getScreenOrder().isEmpty()) {
+        if (mWorkspace == null || mWorkspace.getScreenOrder().isEmpty()) {
             // Not bound yet, wait for bindScreens to be called.
             return;
         }

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -95,6 +95,7 @@ public class CellLayout extends ViewGroup {
     private ArrayList<FolderRingAnimator> mFolderOuterRings = new ArrayList<FolderRingAnimator>();
     private int[] mFolderLeaveBehindCell = {-1, -1};
 
+    private float FOREGROUND_ALPHA_DAMPER = 0.65f;
     private int mForegroundAlpha = 0;
     private float mBackgroundAlpha;
     private float mBackgroundAlphaMultiplier = 1.0f;
@@ -349,6 +350,7 @@ void setOverScrollAmount(float r, boolean left) {
             mOverScrollForegroundDrawable = mOverScrollRight;
         }
 
+        r *= FOREGROUND_ALPHA_DAMPER;
         mForegroundAlpha = (int) Math.round((r * 255));
         mOverScrollForegroundDrawable.setAlpha(mForegroundAlpha);
         invalidate();

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -518,6 +518,9 @@ void resumeScrolling() {
     void setCurrentPage(int currentPage) {
         if (!mScroller.isFinished()) {
             mScroller.abortAnimation();
+            // We need to clean up the next page here to avoid computeScrollHelper from
+            // updating current page on the pass.
+            mNextPage = INVALID_PAGE;
         }
         // don't introduce any checks like mCurrentPage == currentPage here-- if we change the
         // the default

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -911,6 +911,7 @@ protected void onResume() {
         if (DEBUG_RESUME_TIME) {
             Log.d(TAG, "Time spent in onResume: " + (System.currentTimeMillis() - startTime));
         }
+        mWorkspace.updateInteractionForState();
     }
 
     @Override
@@ -3072,7 +3073,6 @@ void showWorkspace(boolean animated, Runnable onCompleteRunnable) {
                 .sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
 
         onWorkspaceShown(animated);
-        onInteractionEnd();
     }
 
     public void onWorkspaceShown(boolean animated) {
@@ -3087,7 +3087,6 @@ void showAllApps(boolean animated,
 
         // Change the state *after* we've called all the transition code
         mState = State.APPS_CUSTOMIZE;
-        onInteractionBegin();
 
         // Pause the auto-advance of widgets until we are out of AllApps
         mUserPresent = false;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -911,6 +911,7 @@ protected void onResume() {
         if (DEBUG_RESUME_TIME) {
             Log.d(TAG, "Time spent in onResume: " + (System.currentTimeMillis() - startTime));
         }
+        mWorkspace.updateInteractionForState();
     }
 
     @Override
@@ -3072,7 +3073,6 @@ void showWorkspace(boolean animated, Runnable onCompleteRunnable) {
                 .sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
 
         onWorkspaceShown(animated);
-        onInteractionEnd();
     }
 
     public void onWorkspaceShown(boolean animated) {
@@ -3087,7 +3087,6 @@ void showAllApps(boolean animated,
 
         // Change the state *after* we've called all the transition code
         mState = State.APPS_CUSTOMIZE;
-        onInteractionBegin();
 
         // Pause the auto-advance of widgets until we are out of AllApps
         mUserPresent = false;

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -536,7 +536,8 @@ private void drawPreviewItem(Canvas canvas, PreviewItemDrawingParams params) {
         if (d != null) {
             d.setBounds(0, 0, mIntrinsicIconSize, mIntrinsicIconSize);
             d.setFilterBitmap(true);
-            d.setColorFilter(Color.argb(params.overlayAlpha, 0, 0, 0), PorterDuff.Mode.SRC_ATOP);
+            d.setColorFilter(Color.argb(params.overlayAlpha, 255, 255, 255),
+                    PorterDuff.Mode.SRC_ATOP);
             d.draw(canvas);
             d.clearColorFilter();
             d.setFilterBitmap(false);

File: src/com/android/launcher3/FolderIcon.java
Patch:
@@ -536,7 +536,8 @@ private void drawPreviewItem(Canvas canvas, PreviewItemDrawingParams params) {
         if (d != null) {
             d.setBounds(0, 0, mIntrinsicIconSize, mIntrinsicIconSize);
             d.setFilterBitmap(true);
-            d.setColorFilter(Color.argb(params.overlayAlpha, 0, 0, 0), PorterDuff.Mode.SRC_ATOP);
+            d.setColorFilter(Color.argb(params.overlayAlpha, 255, 255, 255),
+                    PorterDuff.Mode.SRC_ATOP);
             d.draw(canvas);
             d.clearColorFilter();
             d.setFilterBitmap(false);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -497,7 +497,7 @@ protected void addCustomContentToLeft() {
      * ensure the custom content page is added or removed if necessary.
      */
     protected void invalidateHasCustomContentToLeft() {
-        if (mWorkspace.getScreenOrder().isEmpty()) {
+        if (mWorkspace == null || mWorkspace.getScreenOrder().isEmpty()) {
             // Not bound yet, wait for bindScreens to be called.
             return;
         }

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -95,6 +95,7 @@ public class CellLayout extends ViewGroup {
     private ArrayList<FolderRingAnimator> mFolderOuterRings = new ArrayList<FolderRingAnimator>();
     private int[] mFolderLeaveBehindCell = {-1, -1};
 
+    private float FOREGROUND_ALPHA_DAMPER = 0.65f;
     private int mForegroundAlpha = 0;
     private float mBackgroundAlpha;
     private float mBackgroundAlphaMultiplier = 1.0f;
@@ -349,6 +350,7 @@ void setOverScrollAmount(float r, boolean left) {
             mOverScrollForegroundDrawable = mOverScrollRight;
         }
 
+        r *= FOREGROUND_ALPHA_DAMPER;
         mForegroundAlpha = (int) Math.round((r * 255));
         mOverScrollForegroundDrawable.setAlpha(mForegroundAlpha);
         invalidate();

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -95,6 +95,7 @@ public class CellLayout extends ViewGroup {
     private ArrayList<FolderRingAnimator> mFolderOuterRings = new ArrayList<FolderRingAnimator>();
     private int[] mFolderLeaveBehindCell = {-1, -1};
 
+    private float FOREGROUND_ALPHA_DAMPER = 0.65f;
     private int mForegroundAlpha = 0;
     private float mBackgroundAlpha;
     private float mBackgroundAlphaMultiplier = 1.0f;
@@ -349,6 +350,7 @@ void setOverScrollAmount(float r, boolean left) {
             mOverScrollForegroundDrawable = mOverScrollRight;
         }
 
+        r *= FOREGROUND_ALPHA_DAMPER;
         mForegroundAlpha = (int) Math.round((r * 255));
         mOverScrollForegroundDrawable.setAlpha(mForegroundAlpha);
         invalidate();

File: src/com/android/launcher3/CropView.java
Patch:
@@ -22,8 +22,8 @@
 import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.ScaleGestureDetector;
-import android.view.ViewConfiguration;
 import android.view.ScaleGestureDetector.OnScaleGestureListener;
+import android.view.ViewConfiguration;
 import android.view.ViewTreeObserver;
 import android.view.ViewTreeObserver.OnGlobalLayoutListener;
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -518,6 +518,9 @@ void resumeScrolling() {
     void setCurrentPage(int currentPage) {
         if (!mScroller.isFinished()) {
             mScroller.abortAnimation();
+            // We need to clean up the next page here to avoid computeScrollHelper from
+            // updating current page on the pass.
+            mNextPage = INVALID_PAGE;
         }
         // don't introduce any checks like mCurrentPage == currentPage here-- if we change the
         // the default

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -518,6 +518,9 @@ void resumeScrolling() {
     void setCurrentPage(int currentPage) {
         if (!mScroller.isFinished()) {
             mScroller.abortAnimation();
+            // We need to clean up the next page here to avoid computeScrollHelper from
+            // updating current page on the pass.
+            mNextPage = INVALID_PAGE;
         }
         // don't introduce any checks like mCurrentPage == currentPage here-- if we change the
         // the default

File: src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -506,7 +506,9 @@ public boolean cropBitmap() {
                             (int) returnRect.height(), Bitmap.Config.ARGB_8888);
                     if (tmp != null) {
                         Canvas c = new Canvas(tmp);
-                        c.drawBitmap(crop, m, new Paint());
+                        Paint p = new Paint();
+                        p.setFilterBitmap(true);
+                        c.drawBitmap(crop, m, p);
                         crop = tmp;
                     }
                 } else if (mRotation > 0) {

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -48,8 +48,8 @@ final class Utilities {
 
     private static int sIconWidth = -1;
     private static int sIconHeight = -1;
-    private static int sIconTextureWidth = -1;
-    private static int sIconTextureHeight = -1;
+    public static int sIconTextureWidth = -1;
+    public static int sIconTextureHeight = -1;
 
     private static final Paint sBlurPaint = new Paint();
     private static final Paint sGlowColorPressedPaint = new Paint();

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -48,8 +48,8 @@ final class Utilities {
 
     private static int sIconWidth = -1;
     private static int sIconHeight = -1;
-    private static int sIconTextureWidth = -1;
-    private static int sIconTextureHeight = -1;
+    public static int sIconTextureWidth = -1;
+    public static int sIconTextureHeight = -1;
 
     private static final Paint sBlurPaint = new Paint();
     private static final Paint sGlowColorPressedPaint = new Paint();

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -48,8 +48,8 @@ final class Utilities {
 
     private static int sIconWidth = -1;
     private static int sIconHeight = -1;
-    private static int sIconTextureWidth = -1;
-    private static int sIconTextureHeight = -1;
+    public static int sIconTextureWidth = -1;
+    public static int sIconTextureHeight = -1;
 
     private static final Paint sBlurPaint = new Paint();
     private static final Paint sGlowColorPressedPaint = new Paint();

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -694,6 +694,7 @@ static void moveItemsInDatabase(Context context, final ArrayList<ItemInfo> items
      */
     static void modifyItemInDatabase(Context context, final ItemInfo item, final long container,
             final long screenId, final int cellX, final int cellY, final int spanX, final int spanY) {
+        item.container = container;
         item.cellX = cellX;
         item.cellY = cellY;
         item.spanX = spanX;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -694,6 +694,7 @@ static void moveItemsInDatabase(Context context, final ArrayList<ItemInfo> items
      */
     static void modifyItemInDatabase(Context context, final ItemInfo item, final long container,
             final long screenId, final int cellX, final int cellY, final int spanX, final int spanY) {
+        item.container = container;
         item.cellX = cellX;
         item.cellY = cellY;
         item.spanX = spanX;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -694,6 +694,7 @@ static void moveItemsInDatabase(Context context, final ArrayList<ItemInfo> items
      */
     static void modifyItemInDatabase(Context context, final ItemInfo item, final long container,
             final long screenId, final int cellX, final int cellY, final int spanX, final int spanY) {
+        item.container = container;
         item.cellX = cellX;
         item.cellY = cellY;
         item.spanX = spanX;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -492,7 +492,7 @@ protected void addCustomContentToLeft() {
      * ensure the custom content page is added or removed if necessary.
      */
     protected void invalidateHasCustomContentToLeft() {
-        if (mWorkspace.getScreenOrder().isEmpty()) {
+        if (mWorkspace == null || mWorkspace.getScreenOrder().isEmpty()) {
             // Not bound yet, wait for bindScreens to be called.
             return;
         }

File: src/com/android/launcher3/DragController.java
Patch:
@@ -50,7 +50,7 @@ public class DragController {
     public static int DRAG_ACTION_COPY = 1;
 
     private static final int SCROLL_DELAY = 500;
-    private static final int RESCROLL_DELAY = 750;
+    private static final int RESCROLL_DELAY = PagedView.PAGE_SNAP_ANIMATION_DURATION + 150;
 
     private static final boolean PROFILE_DRAWING_DURING_DRAG = false;
 

File: src/com/android/launcher3/DragController.java
Patch:
@@ -50,7 +50,7 @@ public class DragController {
     public static int DRAG_ACTION_COPY = 1;
 
     private static final int SCROLL_DELAY = 500;
-    private static final int RESCROLL_DELAY = 750;
+    private static final int RESCROLL_DELAY = PagedView.PAGE_SNAP_ANIMATION_DURATION + 150;
 
     private static final boolean PROFILE_DRAWING_DURING_DRAG = false;
 

File: src/com/android/launcher3/DragController.java
Patch:
@@ -50,7 +50,7 @@ public class DragController {
     public static int DRAG_ACTION_COPY = 1;
 
     private static final int SCROLL_DELAY = 500;
-    private static final int RESCROLL_DELAY = 750;
+    private static final int RESCROLL_DELAY = PagedView.PAGE_SNAP_ANIMATION_DURATION + 150;
 
     private static final boolean PROFILE_DRAWING_DURING_DRAG = false;
 

File: src/com/android/launcher3/DragController.java
Patch:
@@ -502,6 +502,8 @@ private void handleMoveEvent(int x, int y) {
     public void forceTouchMove() {
         int[] dummyCoordinates = mCoordinatesTemp;
         DropTarget dropTarget = findDropTarget(mLastTouch[0], mLastTouch[1], dummyCoordinates);
+        mDragObject.x = dummyCoordinates[0];
+        mDragObject.y = dummyCoordinates[1];
         checkTouchMove(dropTarget);
     }
 

File: src/com/android/launcher3/DragController.java
Patch:
@@ -502,6 +502,8 @@ private void handleMoveEvent(int x, int y) {
     public void forceTouchMove() {
         int[] dummyCoordinates = mCoordinatesTemp;
         DropTarget dropTarget = findDropTarget(mLastTouch[0], mLastTouch[1], dummyCoordinates);
+        mDragObject.x = dummyCoordinates[0];
+        mDragObject.y = dummyCoordinates[1];
         checkTouchMove(dropTarget);
     }
 

File: src/com/android/launcher3/DragController.java
Patch:
@@ -502,6 +502,8 @@ private void handleMoveEvent(int x, int y) {
     public void forceTouchMove() {
         int[] dummyCoordinates = mCoordinatesTemp;
         DropTarget dropTarget = findDropTarget(mLastTouch[0], mLastTouch[1], dummyCoordinates);
+        mDragObject.x = dummyCoordinates[0];
+        mDragObject.y = dummyCoordinates[1];
         checkTouchMove(dropTarget);
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2649,8 +2649,8 @@ public void run() {
                         }
                     }
 
-                    LauncherModel.moveItemInDatabase(mLauncher, info, container, screenId, lp.cellX,
-                            lp.cellY);
+                    LauncherModel.modifyItemInDatabase(mLauncher, info, container, screenId, lp.cellX,
+                            lp.cellY, item.spanX, item.spanY);
                 } else {
                     // If we can't find a drop location, we return the item to its original position
                     CellLayout.LayoutParams lp = (CellLayout.LayoutParams) cell.getLayoutParams();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2649,8 +2649,8 @@ public void run() {
                         }
                     }
 
-                    LauncherModel.moveItemInDatabase(mLauncher, info, container, screenId, lp.cellX,
-                            lp.cellY);
+                    LauncherModel.modifyItemInDatabase(mLauncher, info, container, screenId, lp.cellX,
+                            lp.cellY, item.spanX, item.spanY);
                 } else {
                     // If we can't find a drop location, we return the item to its original position
                     CellLayout.LayoutParams lp = (CellLayout.LayoutParams) cell.getLayoutParams();

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2649,8 +2649,8 @@ public void run() {
                         }
                     }
 
-                    LauncherModel.moveItemInDatabase(mLauncher, info, container, screenId, lp.cellX,
-                            lp.cellY);
+                    LauncherModel.modifyItemInDatabase(mLauncher, info, container, screenId, lp.cellX,
+                            lp.cellY, item.spanX, item.spanY);
                 } else {
                     // If we can't find a drop location, we return the item to its original position
                     CellLayout.LayoutParams lp = (CellLayout.LayoutParams) cell.getLayoutParams();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -915,7 +915,7 @@ protected void onPause() {
     }
 
     protected void onFinishBindingItems() {
-        if (hasCustomContentToLeft() && mWorkspace.hasCustomContent()) {
+        if (mWorkspace != null && hasCustomContentToLeft() && mWorkspace.hasCustomContent()) {
             addCustomContentToLeft();
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -915,7 +915,7 @@ protected void onPause() {
     }
 
     protected void onFinishBindingItems() {
-        if (hasCustomContentToLeft() && mWorkspace.hasCustomContent()) {
+        if (mWorkspace != null && hasCustomContentToLeft() && mWorkspace.hasCustomContent()) {
             addCustomContentToLeft();
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -915,7 +915,7 @@ protected void onPause() {
     }
 
     protected void onFinishBindingItems() {
-        if (hasCustomContentToLeft() && mWorkspace.hasCustomContent()) {
+        if (mWorkspace != null && hasCustomContentToLeft() && mWorkspace.hasCustomContent()) {
             addCustomContentToLeft();
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1922,6 +1922,8 @@ void addAppWidgetImpl(final int appWidgetId, ItemInfo info, AppWidgetHostView bo
     }
 
     protected void moveToCustomContentScreen(boolean animate) {
+        // Close any folders that may be open.
+        closeFolder();
         mWorkspace.moveToCustomContentScreen(animate);
     }
     /**

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -95,13 +95,13 @@ public AppWidgetResizeFrame(Context context,
         mLeftHandle = new ImageView(context);
         mLeftHandle.setImageResource(R.drawable.widget_resize_handle_left);
         lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
-                Gravity.START | Gravity.CENTER_VERTICAL);
+                Gravity.LEFT | Gravity.CENTER_VERTICAL);
         addView(mLeftHandle, lp);
 
         mRightHandle = new ImageView(context);
         mRightHandle.setImageResource(R.drawable.widget_resize_handle_right);
         lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
-                Gravity.END | Gravity.CENTER_VERTICAL);
+                Gravity.RIGHT | Gravity.CENTER_VERTICAL);
         addView(mRightHandle, lp);
 
         mTopHandle = new ImageView(context);

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -95,13 +95,13 @@ public AppWidgetResizeFrame(Context context,
         mLeftHandle = new ImageView(context);
         mLeftHandle.setImageResource(R.drawable.widget_resize_handle_left);
         lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
-                Gravity.START | Gravity.CENTER_VERTICAL);
+                Gravity.LEFT | Gravity.CENTER_VERTICAL);
         addView(mLeftHandle, lp);
 
         mRightHandle = new ImageView(context);
         mRightHandle.setImageResource(R.drawable.widget_resize_handle_right);
         lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
-                Gravity.END | Gravity.CENTER_VERTICAL);
+                Gravity.RIGHT | Gravity.CENTER_VERTICAL);
         addView(mRightHandle, lp);
 
         mTopHandle = new ImageView(context);

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -95,13 +95,13 @@ public AppWidgetResizeFrame(Context context,
         mLeftHandle = new ImageView(context);
         mLeftHandle.setImageResource(R.drawable.widget_resize_handle_left);
         lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
-                Gravity.START | Gravity.CENTER_VERTICAL);
+                Gravity.LEFT | Gravity.CENTER_VERTICAL);
         addView(mLeftHandle, lp);
 
         mRightHandle = new ImageView(context);
         mRightHandle.setImageResource(R.drawable.widget_resize_handle_right);
         lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
-                Gravity.END | Gravity.CENTER_VERTICAL);
+                Gravity.RIGHT | Gravity.CENTER_VERTICAL);
         addView(mRightHandle, lp);
 
         mTopHandle = new ImageView(context);

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -224,6 +224,7 @@ public void onReceive(Context context, Intent data) {
             data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);
 
         // Queue the item up for adding if launcher has not loaded properly yet
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState app = LauncherAppState.getInstance();
         boolean launcherNotLoaded = (app.getDynamicGrid() == null);
 

File: src/com/android/launcher3/UninstallShortcutReceiver.java
Patch:
@@ -78,6 +78,7 @@ private static void processUninstallShortcut(Context context,
             PendingUninstallShortcutInfo pendingInfo) {
         final Intent data = pendingInfo.data;
 
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState app = LauncherAppState.getInstance();
         synchronized (app) { // TODO: make removeShortcut internally threadsafe
             removeShortcut(context, data);

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -224,6 +224,7 @@ public void onReceive(Context context, Intent data) {
             data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);
 
         // Queue the item up for adding if launcher has not loaded properly yet
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState app = LauncherAppState.getInstance();
         boolean launcherNotLoaded = (app.getDynamicGrid() == null);
 

File: src/com/android/launcher3/UninstallShortcutReceiver.java
Patch:
@@ -78,6 +78,7 @@ private static void processUninstallShortcut(Context context,
             PendingUninstallShortcutInfo pendingInfo) {
         final Intent data = pendingInfo.data;
 
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState app = LauncherAppState.getInstance();
         synchronized (app) { // TODO: make removeShortcut internally threadsafe
             removeShortcut(context, data);

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -224,6 +224,7 @@ public void onReceive(Context context, Intent data) {
             data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);
 
         // Queue the item up for adding if launcher has not loaded properly yet
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState app = LauncherAppState.getInstance();
         boolean launcherNotLoaded = (app.getDynamicGrid() == null);
 

File: src/com/android/launcher3/UninstallShortcutReceiver.java
Patch:
@@ -78,6 +78,7 @@ private static void processUninstallShortcut(Context context,
             PendingUninstallShortcutInfo pendingInfo) {
         final Intent data = pendingInfo.data;
 
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState app = LauncherAppState.getInstance();
         synchronized (app) { // TODO: make removeShortcut internally threadsafe
             removeShortcut(context, data);

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -107,7 +107,7 @@ protected boolean fitSystemWindows(Rect insets) {
             final FrameLayout.LayoutParams flp = (FrameLayout.LayoutParams) child.getLayoutParams();
             if (child instanceof Insettable) {
                 ((Insettable)child).setInsets(insets);
-            } else  {
+            } else {
                 flp.topMargin += (insets.top - mInsets.top);
                 flp.leftMargin += (insets.left - mInsets.left);
                 flp.rightMargin += (insets.right - mInsets.right);

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -107,7 +107,7 @@ protected boolean fitSystemWindows(Rect insets) {
             final FrameLayout.LayoutParams flp = (FrameLayout.LayoutParams) child.getLayoutParams();
             if (child instanceof Insettable) {
                 ((Insettable)child).setInsets(insets);
-            } else  {
+            } else {
                 flp.topMargin += (insets.top - mInsets.top);
                 flp.leftMargin += (insets.left - mInsets.left);
                 flp.rightMargin += (insets.right - mInsets.right);

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -107,7 +107,7 @@ protected boolean fitSystemWindows(Rect insets) {
             final FrameLayout.LayoutParams flp = (FrameLayout.LayoutParams) child.getLayoutParams();
             if (child instanceof Insettable) {
                 ((Insettable)child).setInsets(insets);
-            } else  {
+            } else {
                 flp.topMargin += (insets.top - mInsets.top);
                 flp.leftMargin += (insets.left - mInsets.left);
                 flp.rightMargin += (insets.right - mInsets.right);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3263,7 +3263,8 @@ private void invalidatePressedFocusedStates(View container, View button) {
 
     public View getQsbBar() {
         if (mQsbBar == null) {
-            mQsbBar = mInflater.inflate(R.layout.qsb_bar, mSearchDropTargetBar);
+            mQsbBar = mInflater.inflate(R.layout.search_bar, mSearchDropTargetBar, false);
+            mSearchDropTargetBar.addView(mQsbBar);
         }
         return mQsbBar;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1030,12 +1030,14 @@ protected void onPageEndMoving() {
             if (mCustomContentCallbacks != null) {
                 mCustomContentCallbacks.onShow();
                 mCustomContentShowTime = System.currentTimeMillis();
+                mLauncher.setVoiceButtonProxyVisible(false);
             }
         } else if (hasCustomContent() && getNextPage() != 0 && mCustomContentShowing) {
             mCustomContentShowing = false;
             if (mCustomContentCallbacks != null) {
                 mCustomContentCallbacks.onHide();
                 mLauncher.resetQSBScroll();
+                mLauncher.setVoiceButtonProxyVisible(true);
             }
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3263,7 +3263,8 @@ private void invalidatePressedFocusedStates(View container, View button) {
 
     public View getQsbBar() {
         if (mQsbBar == null) {
-            mQsbBar = mInflater.inflate(R.layout.qsb_bar, mSearchDropTargetBar);
+            mQsbBar = mInflater.inflate(R.layout.search_bar, mSearchDropTargetBar, false);
+            mSearchDropTargetBar.addView(mQsbBar);
         }
         return mQsbBar;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1030,12 +1030,14 @@ protected void onPageEndMoving() {
             if (mCustomContentCallbacks != null) {
                 mCustomContentCallbacks.onShow();
                 mCustomContentShowTime = System.currentTimeMillis();
+                mLauncher.setVoiceButtonProxyVisible(false);
             }
         } else if (hasCustomContent() && getNextPage() != 0 && mCustomContentShowing) {
             mCustomContentShowing = false;
             if (mCustomContentCallbacks != null) {
                 mCustomContentCallbacks.onHide();
                 mLauncher.resetQSBScroll();
+                mLauncher.setVoiceButtonProxyVisible(true);
             }
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3263,7 +3263,8 @@ private void invalidatePressedFocusedStates(View container, View button) {
 
     public View getQsbBar() {
         if (mQsbBar == null) {
-            mQsbBar = mInflater.inflate(R.layout.qsb_bar, mSearchDropTargetBar);
+            mQsbBar = mInflater.inflate(R.layout.search_bar, mSearchDropTargetBar, false);
+            mSearchDropTargetBar.addView(mQsbBar);
         }
         return mQsbBar;
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1030,12 +1030,14 @@ protected void onPageEndMoving() {
             if (mCustomContentCallbacks != null) {
                 mCustomContentCallbacks.onShow();
                 mCustomContentShowTime = System.currentTimeMillis();
+                mLauncher.setVoiceButtonProxyVisible(false);
             }
         } else if (hasCustomContent() && getNextPage() != 0 && mCustomContentShowing) {
             mCustomContentShowing = false;
             if (mCustomContentCallbacks != null) {
                 mCustomContentCallbacks.onHide();
                 mLauncher.resetQSBScroll();
+                mLauncher.setVoiceButtonProxyVisible(true);
             }
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4069,7 +4069,7 @@ private Cling initCling(int clingId, int scrimId, boolean animate,
         Cling cling = (Cling) findViewById(clingId);
         View scrim = null;
         if (scrimId > 0) {
-            scrim = findViewById(R.id.scrim);
+            scrim = findViewById(R.id.cling_scrim);
         }
         if (cling != null) {
             cling.init(this, scrim);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -927,6 +927,8 @@ Rect getContentRect(Rect r) {
         return r;
     }
 
+    /** Return a rect that has the cellWidth/cellHeight (left, top), and
+     * widthGap/heightGap (right, bottom) */
     static void getMetrics(Rect metrics, int paddedMeasureWidth,
             int paddedMeasureHeight, int countX, int countY) {
         LauncherAppState app = LauncherAppState.getInstance();

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -290,7 +290,8 @@ public int compare(DeviceProfileQuery a, DeviceProfileQuery b) {
 
     Rect getWorkspacePadding(int orientation) {
         Rect padding = new Rect();
-        if (isVerticalBarLayout()) {
+        if (orientation == CellLayout.LANDSCAPE &&
+                transposeLayoutWithOrientation) {
             // Pad the left and right of the workspace with search/hotseat bar sizes
             padding.set(searchBarSpaceHeightPx, edgeMarginPx,
                     hotseatBarHeightPx, edgeMarginPx);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4069,7 +4069,7 @@ private Cling initCling(int clingId, int scrimId, boolean animate,
         Cling cling = (Cling) findViewById(clingId);
         View scrim = null;
         if (scrimId > 0) {
-            scrim = findViewById(R.id.scrim);
+            scrim = findViewById(R.id.cling_scrim);
         }
         if (cling != null) {
             cling.init(this, scrim);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -4069,7 +4069,7 @@ private Cling initCling(int clingId, int scrimId, boolean animate,
         Cling cling = (Cling) findViewById(clingId);
         View scrim = null;
         if (scrimId > 0) {
-            scrim = findViewById(R.id.scrim);
+            scrim = findViewById(R.id.cling_scrim);
         }
         if (cling != null) {
             cling.init(this, scrim);

File: src/com/android/launcher3/AppWidgetResizeFrame.java
Patch:
@@ -95,13 +95,13 @@ public AppWidgetResizeFrame(Context context,
         mLeftHandle = new ImageView(context);
         mLeftHandle.setImageResource(R.drawable.widget_resize_handle_left);
         lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
-                Gravity.START | Gravity.CENTER_VERTICAL);
+                Gravity.LEFT | Gravity.CENTER_VERTICAL);
         addView(mLeftHandle, lp);
 
         mRightHandle = new ImageView(context);
         mRightHandle.setImageResource(R.drawable.widget_resize_handle_right);
         lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
-                Gravity.END | Gravity.CENTER_VERTICAL);
+                Gravity.RIGHT | Gravity.CENTER_VERTICAL);
         addView(mRightHandle, lp);
 
         mTopHandle = new ImageView(context);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -927,6 +927,8 @@ Rect getContentRect(Rect r) {
         return r;
     }
 
+    /** Return a rect that has the cellWidth/cellHeight (left, top), and
+     * widthGap/heightGap (right, bottom) */
     static void getMetrics(Rect metrics, int paddedMeasureWidth,
             int paddedMeasureHeight, int countX, int countY) {
         LauncherAppState app = LauncherAppState.getInstance();

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -290,7 +290,8 @@ public int compare(DeviceProfileQuery a, DeviceProfileQuery b) {
 
     Rect getWorkspacePadding(int orientation) {
         Rect padding = new Rect();
-        if (isVerticalBarLayout()) {
+        if (orientation == CellLayout.LANDSCAPE &&
+                transposeLayoutWithOrientation) {
             // Pad the left and right of the workspace with search/hotseat bar sizes
             padding.set(searchBarSpaceHeightPx, edgeMarginPx,
                     hotseatBarHeightPx, edgeMarginPx);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -927,6 +927,8 @@ Rect getContentRect(Rect r) {
         return r;
     }
 
+    /** Return a rect that has the cellWidth/cellHeight (left, top), and
+     * widthGap/heightGap (right, bottom) */
     static void getMetrics(Rect metrics, int paddedMeasureWidth,
             int paddedMeasureHeight, int countX, int countY) {
         LauncherAppState app = LauncherAppState.getInstance();

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -290,7 +290,8 @@ public int compare(DeviceProfileQuery a, DeviceProfileQuery b) {
 
     Rect getWorkspacePadding(int orientation) {
         Rect padding = new Rect();
-        if (isVerticalBarLayout()) {
+        if (orientation == CellLayout.LANDSCAPE &&
+                transposeLayoutWithOrientation) {
             // Pad the left and right of the workspace with search/hotseat bar sizes
             padding.set(searchBarSpaceHeightPx, edgeMarginPx,
                     hotseatBarHeightPx, edgeMarginPx);

File: src/com/android/launcher3/CellLayout.java
Patch:
@@ -927,6 +927,8 @@ Rect getContentRect(Rect r) {
         return r;
     }
 
+    /** Return a rect that has the cellWidth/cellHeight (left, top), and
+     * widthGap/heightGap (right, bottom) */
     static void getMetrics(Rect metrics, int paddedMeasureWidth,
             int paddedMeasureHeight, int countX, int countY) {
         LauncherAppState app = LauncherAppState.getInstance();

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -290,7 +290,8 @@ public int compare(DeviceProfileQuery a, DeviceProfileQuery b) {
 
     Rect getWorkspacePadding(int orientation) {
         Rect padding = new Rect();
-        if (isVerticalBarLayout()) {
+        if (orientation == CellLayout.LANDSCAPE &&
+                transposeLayoutWithOrientation) {
             // Pad the left and right of the workspace with search/hotseat bar sizes
             padding.set(searchBarSpaceHeightPx, edgeMarginPx,
                     hotseatBarHeightPx, edgeMarginPx);

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2477,7 +2477,7 @@ public void run() {
                     for (int i=0; i<N; i++) {
                         if (DEBUG_LOADERS) Log.d(TAG, "mAllAppsList.updatePackage " + packages[i]);
                         mBgAllAppsList.updatePackage(context, packages[i]);
-                        WidgetPreviewLoader.removeFromDb(
+                        WidgetPreviewLoader.removePackageFromDb(
                                 mApp.getWidgetPreviewCacheDb(), packages[i]);
                     }
                     break;
@@ -2486,7 +2486,7 @@ public void run() {
                     for (int i=0; i<N; i++) {
                         if (DEBUG_LOADERS) Log.d(TAG, "mAllAppsList.removePackage " + packages[i]);
                         mBgAllAppsList.removePackage(packages[i]);
-                        WidgetPreviewLoader.removeFromDb(
+                        WidgetPreviewLoader.removePackageFromDb(
                                 mApp.getWidgetPreviewCacheDb(), packages[i]);
                     }
                     break;

File: src/com/android/launcher3/PackageChangedReceiver.java
Patch:
@@ -16,6 +16,6 @@ public void onReceive(final Context context, Intent intent) {
         // in rare cases the receiver races with the application to set up LauncherAppState
         LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState app = LauncherAppState.getInstance();
-        WidgetPreviewLoader.removeFromDb(app.getWidgetPreviewCacheDb(), packageName);
+        WidgetPreviewLoader.removePackageFromDb(app.getWidgetPreviewCacheDb(), packageName);
     }
 }

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -500,6 +500,7 @@ public void onClick(View v) {
                 mPressedIcon.lockDrawableState();
             }
             mLauncher.startActivitySafely(v, appInfo.intent, appInfo);
+            mLauncher.getStats().recordLaunch(appInfo.intent);
         } else if (v instanceof PagedViewWidget) {
             // Let the user know that they have to long press to add a widget
             if (mWidgetInstructionToast != null) {

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -37,7 +37,7 @@
 
 public class InstallShortcutReceiver extends BroadcastReceiver {
     public static final String ACTION_INSTALL_SHORTCUT =
-            "com.android.launcher3.action.INSTALL_SHORTCUT";
+            "com.android.launcher.action.INSTALL_SHORTCUT";
 
     public static final String DATA_INTENT_KEY = "intent.data";
     public static final String LAUNCH_INTENT_KEY = "intent.launch";

File: src/com/android/launcher3/UninstallShortcutReceiver.java
Patch:
@@ -30,7 +30,7 @@
 
 public class UninstallShortcutReceiver extends BroadcastReceiver {
     private static final String ACTION_UNINSTALL_SHORTCUT =
-            "com.android.launcher3.action.UNINSTALL_SHORTCUT";
+            "com.android.launcher.action.UNINSTALL_SHORTCUT";
 
     // The set of shortcuts that are pending uninstall
     private static ArrayList<PendingUninstallShortcutInfo> mUninstallQueue =

File: src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -116,6 +116,7 @@ public LiveWallpaperTile(Drawable thumbnail, WallpaperInfo info, Intent intent)
             mThumbnail = thumbnail;
             mInfo = info;
         }
+        @Override
         public void onClick(WallpaperPickerActivity a) {
             Intent preview = new Intent(WallpaperManager.ACTION_CHANGE_LIVE_WALLPAPER);
             preview.putExtra(WallpaperManager.EXTRA_LIVE_WALLPAPER_COMPONENT,

File: src/com/android/launcher3/ThirdPartyWallpaperPickerListAdapter.java
Patch:
@@ -46,6 +46,7 @@ public static class ThirdPartyWallpaperTile extends WallpaperPickerActivity.Wall
         public ThirdPartyWallpaperTile(ResolveInfo resolveInfo) {
             mResolveInfo = resolveInfo;
         }
+        @Override
         public void onClick(WallpaperPickerActivity a) {
             final ComponentName itemComponentName = new ComponentName(
                     mResolveInfo.activityInfo.packageName, mResolveInfo.activityInfo.name);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -26,6 +26,7 @@
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.os.SystemClock;
+import android.support.v4.widget.AutoScrollHelper;
 import android.text.InputType;
 import android.text.Selection;
 import android.text.Spannable;

File: src/com/android/launcher3/FolderAutoScrollHelper.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.launcher3;
 
+import android.support.v4.widget.AutoScrollHelper;
 import android.widget.ScrollView;
 
 /**

File: src/com/android/launcher3/AutoScrollHelper.java
Patch:
@@ -67,7 +67,7 @@
  * The following scrolling properties may be configured:
  * <ul>
  * <li>Acceleration ramp-up duration, see {@link #setRampUpDuration}. Default
- * value is 2500 milliseconds.
+ * value is 500 milliseconds.
  * <li>Acceleration ramp-down duration, see {@link #setRampDownDuration}.
  * Default value is 500 milliseconds.
  * <li>Target velocity relative to view size, see {@link #setRelativeVelocity}.

File: src/com/android/launcher3/FolderAutoScrollHelper.java
Patch:
@@ -36,6 +36,8 @@ public FolderAutoScrollHelper(ScrollView target) {
         setEdgeType(EDGE_TYPE_INSIDE_EXTEND);
         setExclusive(true);
         setMaximumVelocity(MAX_SCROLL_VELOCITY, MAX_SCROLL_VELOCITY);
+        setRampDownDuration(0);
+        setRampUpDuration(0);
     }
 
     @Override

File: src/com/android/launcher3/LiveWallpaperListAdapter.java
Patch:
@@ -116,6 +116,7 @@ public LiveWallpaperTile(Drawable thumbnail, WallpaperInfo info, Intent intent)
             mThumbnail = thumbnail;
             mInfo = info;
         }
+        @Override
         public void onClick(WallpaperPickerActivity a) {
             Intent preview = new Intent(WallpaperManager.ACTION_CHANGE_LIVE_WALLPAPER);
             preview.putExtra(WallpaperManager.EXTRA_LIVE_WALLPAPER_COMPONENT,

File: src/com/android/launcher3/ThirdPartyWallpaperPickerListAdapter.java
Patch:
@@ -46,6 +46,7 @@ public static class ThirdPartyWallpaperTile extends WallpaperPickerActivity.Wall
         public ThirdPartyWallpaperTile(ResolveInfo resolveInfo) {
             mResolveInfo = resolveInfo;
         }
+        @Override
         public void onClick(WallpaperPickerActivity a) {
             final ComponentName itemComponentName = new ComponentName(
                     mResolveInfo.activityInfo.packageName, mResolveInfo.activityInfo.name);

File: src/com/android/launcher3/AppsCustomizeTabHost.java
Patch:
@@ -436,14 +436,15 @@ private void setVisibilityOfSiblingsWithLowerZOrder(int visibility) {
         ViewGroup parent = (ViewGroup) getParent();
         if (parent == null) return;
 
+        View overviewPanel = ((Launcher) getContext()).getOverviewPanel();
         final int count = parent.getChildCount();
         if (!isChildrenDrawingOrderEnabled()) {
             for (int i = 0; i < count; i++) {
                 final View child = parent.getChildAt(i);
                 if (child == this) {
                     break;
                 } else {
-                    if (child.getVisibility() == GONE) {
+                    if (child.getVisibility() == GONE || child == overviewPanel) {
                         continue;
                     }
                     child.setVisibility(visibility);

File: src/com/android/launcher3/AppsCustomizeTabHost.java
Patch:
@@ -439,14 +439,15 @@ private void setVisibilityOfSiblingsWithLowerZOrder(int visibility) {
         ViewGroup parent = (ViewGroup) getParent();
         if (parent == null) return;
 
+        View overviewPanel = ((Launcher) getContext()).getOverviewPanel();
         final int count = parent.getChildCount();
         if (!isChildrenDrawingOrderEnabled()) {
             for (int i = 0; i < count; i++) {
                 final View child = parent.getChildAt(i);
                 if (child == this) {
                     break;
                 } else {
-                    if (child.getVisibility() == GONE) {
+                    if (child.getVisibility() == GONE || child == overviewPanel) {
                         continue;
                     }
                     child.setVisibility(visibility);

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -430,7 +430,7 @@ public void layout(Launcher launcher) {
             lp.gravity = Gravity.BOTTOM;
             lp.width = LayoutParams.MATCH_PARENT;
             lp.height = hotseatBarHeightPx;
-            hotseat.setPadding(2 * edgeMarginPx, 0,
+            hotseat.findViewById(R.id.layout).setPadding(2 * edgeMarginPx, 0,
                     2 * edgeMarginPx, 0);
         }
         hotseat.setLayoutParams(lp);

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -430,7 +430,7 @@ public void layout(Launcher launcher) {
             lp.gravity = Gravity.BOTTOM;
             lp.width = LayoutParams.MATCH_PARENT;
             lp.height = hotseatBarHeightPx;
-            hotseat.setPadding(2 * edgeMarginPx, 0,
+            hotseat.findViewById(R.id.layout).setPadding(2 * edgeMarginPx, 0,
                     2 * edgeMarginPx, 0);
         }
         hotseat.setLayoutParams(lp);

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1075,7 +1075,7 @@ protected void getVisiblePages(int[] range) {
                     }
                 }
 
-                mTmpIntPoint[0] = currPage.getMeasuredWidth();;
+                mTmpIntPoint[0] = currPage.getMeasuredWidth();
                 Utilities.getDescendantCoordRelativeToParent(currPage, this, mTmpIntPoint, false);
                 if (mTmpIntPoint[0] < 0) {
                     if (range[0] == -1) {

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1075,7 +1075,7 @@ protected void getVisiblePages(int[] range) {
                     }
                 }
 
-                mTmpIntPoint[0] = currPage.getMeasuredWidth();;
+                mTmpIntPoint[0] = currPage.getMeasuredWidth();
                 Utilities.getDescendantCoordRelativeToParent(currPage, this, mTmpIntPoint, false);
                 if (mTmpIntPoint[0] < 0) {
                     if (range[0] == -1) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -991,7 +991,6 @@ protected void onPageEndMoving() {
             clearChildrenCache();
         }
 
-
         if (mDragController.isDragging()) {
             if (isSmall()) {
                 // If we are in springloaded mode, then force an event to check if the current touch

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1446,7 +1446,6 @@ public void onReceive(Context context, Intent intent) {
                 // Reset AllApps to its initial state only if we are not in the middle of
                 // processing a multi-step drop
                 if (mAppsCustomizeTabHost != null && mPendingAddInfo.container == ItemInfo.NO_ID) {
-                    mAppsCustomizeTabHost.reset();
                     showWorkspaceAndExitOverviewMode(false);
                 }
             } else if (Intent.ACTION_USER_PRESENT.equals(action)) {
@@ -1665,8 +1664,8 @@ public void run() {
                         imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
                     }
 
-                    // Reset AllApps to its initial state
-                    if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
+                    // Reset the apps customize page
+                    if (mAppsCustomizeTabHost != null) {
                         mAppsCustomizeTabHost.reset();
                     }
                 }

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -102,10 +102,13 @@ private void init() {
 
     public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         Bitmap b = info.getIcon(iconCache);
+        LauncherAppState app = LauncherAppState.getInstance();
+        DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
 
         setCompoundDrawablesWithIntrinsicBounds(null,
                 new FastBitmapDrawable(b),
                 null, null);
+        setCompoundDrawablePadding((int) ((grid.folderIconSizePx - grid.iconSizePx) / 2f));
         setText(info.title);
         setTag(info);
     }

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -207,7 +207,7 @@ class DeviceProfile {
 
         // Folder
         folderCellWidthPx = cellWidthPx + 3 * edgeMarginPx;
-        folderCellHeightPx = cellHeightPx + edgeMarginPx;
+        folderCellHeightPx = cellHeightPx + (int) ((3f/2f) * edgeMarginPx);
         folderBackgroundOffset = -edgeMarginPx;
         folderIconSizePx = iconSizePx + 2 * -folderBackgroundOffset;
     }

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -137,7 +137,8 @@ public void measureChild(View child) {
                 // Otherwise, center the icon
                 int cHeight = mIsHotseatLayout ? grid.hotseatCellHeightPx : Math.min(getMeasuredHeight(), grid.cellHeightPx);
                 int cellPaddingY = (int) Math.max(0, ((lp.height - cHeight) / 2f));
-                child.setPadding(0, cellPaddingY, 0, 0);
+                int cellPaddingX = (int) (grid.edgeMarginPx / 2f);
+                child.setPadding(cellPaddingX, cellPaddingY, cellPaddingX, 0);
             }
         } else {
             lp.x = 0;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -923,12 +923,14 @@ public void setScrollY(int scroll) {
 
             if (mWorkspace.isOnOrMovingToCustomContent()) {
                 mSearchDropTargetBar.setTranslationY(- scrollY);
+                getQsbBar().setTranslationY(-scrollY);
             }
         }
     };
 
     public void resetQSBScroll() {
         mSearchDropTargetBar.animate().translationY(0).start();
+        getQsbBar().animate().translationY(0).start();
     }
 
     public interface CustomContentCallbacks {

File: src/com/android/launcher3/CropView.java
Patch:
@@ -44,6 +44,7 @@ public class CropView extends TiledImageView implements OnScaleGestureListener {
     public interface TouchCallback {
         void onTouchDown();
         void onTap();
+        void onTouchUp();
     }
 
     public CropView(Context context) {
@@ -202,6 +203,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     now < mTouchDownTime + ViewConfiguration.getTapTimeout()) {
                 mTouchCallback.onTap();
             }
+            mTouchCallback.onTouchUp();
         }
 
         if (!mTouchEnabled) {

File: src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -138,12 +138,13 @@ static protected Point getDefaultWallpaperSize(Resources res, WindowManager wind
         windowManager.getDefaultDisplay().getCurrentSizeRange(minDims, maxDims);
 
         int maxDim = Math.max(maxDims.x, maxDims.y);
-        final int minDim = Math.min(minDims.x, minDims.y);
+        int minDim = Math.max(minDims.x, minDims.y);
 
         if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {
             Point realSize = new Point();
             windowManager.getDefaultDisplay().getRealSize(realSize);
             maxDim = Math.max(realSize.x, realSize.y);
+            minDim = Math.min(realSize.x, realSize.y);
         }
 
         // We need to ensure that there is enough extra space in the wallpaper

File: src/com/android/launcher3/CropView.java
Patch:
@@ -44,6 +44,7 @@ public class CropView extends TiledImageView implements OnScaleGestureListener {
     public interface TouchCallback {
         void onTouchDown();
         void onTap();
+        void onTouchUp();
     }
 
     public CropView(Context context) {
@@ -202,6 +203,7 @@ public boolean onTouchEvent(MotionEvent event) {
                     now < mTouchDownTime + ViewConfiguration.getTapTimeout()) {
                 mTouchCallback.onTap();
             }
+            mTouchCallback.onTouchUp();
         }
 
         if (!mTouchEnabled) {

File: src/com/android/launcher3/BubbleTextView.java
Patch:
@@ -102,10 +102,13 @@ private void init() {
 
     public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
         Bitmap b = info.getIcon(iconCache);
+        LauncherAppState app = LauncherAppState.getInstance();
+        DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
 
         setCompoundDrawablesWithIntrinsicBounds(null,
                 new FastBitmapDrawable(b),
                 null, null);
+        setCompoundDrawablePadding((int) ((grid.folderIconSizePx - grid.iconSizePx) / 2f));
         setText(info.title);
         setTag(info);
     }

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -207,7 +207,7 @@ class DeviceProfile {
 
         // Folder
         folderCellWidthPx = cellWidthPx + 3 * edgeMarginPx;
-        folderCellHeightPx = cellHeightPx + edgeMarginPx;
+        folderCellHeightPx = cellHeightPx + (int) ((3f/2f) * edgeMarginPx);
         folderBackgroundOffset = -edgeMarginPx;
         folderIconSizePx = iconSizePx + 2 * -folderBackgroundOffset;
     }

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -137,7 +137,8 @@ public void measureChild(View child) {
                 // Otherwise, center the icon
                 int cHeight = mIsHotseatLayout ? grid.hotseatCellHeightPx : Math.min(getMeasuredHeight(), grid.cellHeightPx);
                 int cellPaddingY = (int) Math.max(0, ((lp.height - cHeight) / 2f));
-                child.setPadding(0, cellPaddingY, 0, 0);
+                int cellPaddingX = (int) (grid.edgeMarginPx / 2f);
+                child.setPadding(cellPaddingX, cellPaddingY, cellPaddingX, 0);
             }
         } else {
             lp.x = 0;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1451,7 +1451,6 @@ public void onReceive(Context context, Intent intent) {
                 // Reset AllApps to its initial state only if we are not in the middle of
                 // processing a multi-step drop
                 if (mAppsCustomizeTabHost != null && mPendingAddInfo.container == ItemInfo.NO_ID) {
-                    mAppsCustomizeTabHost.reset();
                     showWorkspaceAndExitOverviewMode(false);
                 }
             } else if (Intent.ACTION_USER_PRESENT.equals(action)) {
@@ -1670,8 +1669,8 @@ public void run() {
                         imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
                     }
 
-                    // Reset AllApps to its initial state
-                    if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
+                    // Reset the apps customize page
+                    if (mAppsCustomizeTabHost != null) {
                         mAppsCustomizeTabHost.reset();
                     }
                 }

File: src/com/android/launcher3/WallpaperCropActivity.java
Patch:
@@ -138,12 +138,13 @@ static protected Point getDefaultWallpaperSize(Resources res, WindowManager wind
         windowManager.getDefaultDisplay().getCurrentSizeRange(minDims, maxDims);
 
         int maxDim = Math.max(maxDims.x, maxDims.y);
-        final int minDim = Math.min(minDims.x, minDims.y);
+        int minDim = Math.max(minDims.x, minDims.y);
 
         if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1) {
             Point realSize = new Point();
             windowManager.getDefaultDisplay().getRealSize(realSize);
             maxDim = Math.max(realSize.x, realSize.y);
+            minDim = Math.min(realSize.x, realSize.y);
         }
 
         // We need to ensure that there is enough extra space in the wallpaper

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1139,6 +1139,7 @@ public void onClick(View arg0) {
                 startSettings();
             }
         });
+        mOverviewPanel.setAlpha(0f);
 
         // Setup the workspace
         mWorkspace.setHapticFeedbackEnabled(false);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3358,8 +3358,8 @@ protected boolean updateGlobalSearchIcon() {
             // We disable both search and voice search when there is no global search provider
             if (searchButtonContainer != null) searchButtonContainer.setVisibility(View.GONE);
             if (voiceButtonContainer != null) voiceButtonContainer.setVisibility(View.GONE);
-            searchButton.setVisibility(View.GONE);
-            voiceButton.setVisibility(View.GONE);
+            if (searchButton != null) searchButton.setVisibility(View.GONE);
+            if (voiceButton != null) voiceButton.setVisibility(View.GONE);
             setVoiceButtonProxyVisible(false);
             return false;
         }
@@ -3412,7 +3412,7 @@ protected boolean updateVoiceSearchIcon(boolean searchVisible) {
             return true;
         } else {
             if (voiceButtonContainer != null) voiceButtonContainer.setVisibility(View.GONE);
-            voiceButton.setVisibility(View.GONE);
+            if (voiceButton != null) voiceButton.setVisibility(View.GONE);
             setVoiceButtonProxyVisible(false);
             return false;
         }

File: src/com/android/launcher3/LauncherAppWidgetInfo.java
Patch:
@@ -65,6 +65,7 @@ class LauncherAppWidgetInfo extends ItemInfo {
     void onAddToDatabase(ContentValues values) {
         super.onAddToDatabase(values);
         values.put(LauncherSettings.Favorites.APPWIDGET_ID, appWidgetId);
+        values.put(LauncherSettings.Favorites.APPWIDGET_PROVIDER, providerName.flattenToString());
     }
 
     /**

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -530,8 +530,6 @@ public float getInterpolation(float t) {
         Runnable onAnimationEndRunnable = new Runnable() {
             @Override
             public void run() {
-                mSearchDropTargetBar.onDragEnd();
-
                 // If we are dragging from AllApps, then we allow AppsCustomizePagedView to clean up
                 // itself, otherwise, complete the drop to initiate the deletion process
                 if (!isAllApps) {

File: src/com/android/launcher3/SearchDropTargetBar.java
Patch:
@@ -23,13 +23,10 @@
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.animation.AccelerateInterpolator;
 import android.widget.FrameLayout;
 
-import com.android.launcher3.R;
-
 /*
  * Ths bar will manage the transition between the QSB search bar and the delete drop
  * targets so that each of the individual IconDropTargets don't have to.

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -509,8 +509,6 @@ public float getInterpolation(float t) {
         Runnable onAnimationEndRunnable = new Runnable() {
             @Override
             public void run() {
-                mSearchDropTargetBar.onDragEnd();
-
                 // If we are dragging from AllApps, then we allow AppsCustomizePagedView to clean up
                 // itself, otherwise, complete the drop to initiate the deletion process
                 if (!isAllApps) {

File: src/com/android/launcher3/SearchDropTargetBar.java
Patch:
@@ -23,13 +23,10 @@
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.util.AttributeSet;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.view.animation.AccelerateInterpolator;
 import android.widget.FrameLayout;
 
-import com.android.launcher3.R;
-
 /*
  * Ths bar will manage the transition between the QSB search bar and the delete drop
  * targets so that each of the individual IconDropTargets don't have to.

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1068,7 +1068,7 @@ protected void snapToScreenId(long screenId, Runnable r) {
 
     class WallpaperOffsetInterpolator implements Choreographer.FrameCallback {
         float mFinalOffset = 0.0f;
-        float mCurrentOffset = 0.0f;
+        float mCurrentOffset = 0.5f; // to force an initial update
         //long mLastWallpaperOffsetUpdateTime;
         boolean mWaitingForUpdate;
         Choreographer mChoreographer;

File: src/com/android/launcher3/SavedWallpaperImages.java
Patch:
@@ -58,7 +58,7 @@ public void loadThumbnailsAndImageIdList() {
                 null, // args to select query
                 null,
                 null,
-                null,
+                ImageDb.COLUMN_ID + " DESC",
                 null);
 
         while (result.moveToNext()) {

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2718,4 +2718,4 @@ protected String getCurrentPageDescription() {
     public boolean onHoverEvent(android.view.MotionEvent event) {
         return true;
     }
-}
\ No newline at end of file
+}

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -2718,4 +2718,4 @@ protected String getCurrentPageDescription() {
     public boolean onHoverEvent(android.view.MotionEvent event) {
         return true;
     }
-}
\ No newline at end of file
+}

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1114,6 +1114,7 @@ private void setupViews() {
         mHotseat = (Hotseat) findViewById(R.id.hotseat);
         if (mHotseat != null) {
             mHotseat.setup(this);
+            mHotseat.setOnLongClickListener(this);
         }
 
         mOverviewPanel = findViewById(R.id.overview_panel);

File: src/com/android/launcher3/CropView.java
Patch:
@@ -140,12 +140,12 @@ public boolean onScale(ScaleGestureDetector detector) {
     public void onScaleEnd(ScaleGestureDetector detector) {
     }
 
-    public void moveToUpperLeft() {
+    public void moveToLeft() {
         if (getWidth() == 0 || getHeight() == 0) {
             final ViewTreeObserver observer = getViewTreeObserver();
             observer.addOnGlobalLayoutListener(new OnGlobalLayoutListener() {
                     public void onGlobalLayout() {
-                        moveToUpperLeft();
+                        moveToLeft();
                         getViewTreeObserver().removeOnGlobalLayoutListener(this);
                     }
                 });
@@ -154,7 +154,6 @@ public void onGlobalLayout() {
         getEdgesHelper(edges);
         final float scale = mRenderer.scale;
         mRenderer.centerX += Math.ceil(edges.left / scale);
-        mRenderer.centerY += Math.ceil(edges.top / scale);
     }
 
     public void setTouchEnabled(boolean enabled) {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1103,7 +1103,8 @@ private void setupViews() {
         mDragLayer = (DragLayer) findViewById(R.id.drag_layer);
         mWorkspace = (Workspace) mDragLayer.findViewById(R.id.workspace);
 
-        mLauncherView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
+        mLauncherView.setSystemUiVisibility(
+                View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
         mWorkspaceBackgroundDrawable = getResources().getDrawable(R.drawable.workspace_bg);
 
         // Setup the drag layer

File: src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -353,6 +353,8 @@ private void addWallpapers(Resources resources, String packageName, int listResI
                     mImages.add(res);
                     // Log.d(TAG, "add: [" + packageName + "]: " + extra + " (" + res + ")");
                 }
+            } else {
+                Log.e(TAG, "Couldn't find wallpaper " + extra);
             }
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -488,6 +488,7 @@ public long insertNewWorkspaceScreen(long screenId, int insertIndex) {
 
         newScreen.setOnLongClickListener(mLongClickListener);
         newScreen.setOnClickListener(mLauncher);
+        newScreen.setSoundEffectsEnabled(false);
         mWorkspaceScreens.put(screenId, newScreen);
         mScreenOrder.add(insertIndex, screenId);
         addView(newScreen, insertIndex);

File: src/com/android/launcher3/HideFromAccessibilityHelper.java
Patch:
@@ -64,7 +64,8 @@ public void restoreImportantForAccessibility(View v) {
     }
 
     private void restoreImportantForAccessibilityHelper(View v) {
-        v.setImportantForAccessibility(mPreviousValues.get(v));
+        Integer important = mPreviousValues.get(v);
+        v.setImportantForAccessibility(important);
         mPreviousValues.remove(v);
 
         // Call method on children recursively

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -25,7 +25,6 @@
 import android.content.Context;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
-import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
 import android.graphics.Bitmap;

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -225,11 +225,11 @@ static void flushInstallQueue(Context context) {
             String duplicateName = "";
             while (iter.hasNext()) {
                 final PendingInstallShortcutInfo pendingInfo = iter.next();
-                final Intent data = pendingInfo.data;
+                //final Intent data = pendingInfo.data;
                 final Intent intent = pendingInfo.launchIntent;
                 final String name = pendingInfo.name;
                 final boolean exists = LauncherModel.shortcutExists(context, name, intent);
-                final boolean allowDuplicate = data.getBooleanExtra(Launcher.EXTRA_SHORTCUT_DUPLICATE, true);
+                //final boolean allowDuplicate = data.getBooleanExtra(Launcher.EXTRA_SHORTCUT_DUPLICATE, true);
 
                 // TODO-XXX: Disable duplicates for now
                 if (!exists /* && allowDuplicate */) {

File: src/com/android/launcher3/LauncherAppWidgetHostView.java
Patch:
@@ -18,15 +18,12 @@
 
 import android.appwidget.AppWidgetHostView;
 import android.content.Context;
-import android.graphics.Canvas;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.RemoteViews;
 
-import com.android.launcher3.R;
-
 /**
  * {@inheritDoc}
  */

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -2835,7 +2835,6 @@ static ArrayList<ItemInfo> filterItemInfos(Collection<ItemInfo> infos,
     }
 
     private ArrayList<ItemInfo> getItemInfoForPackageName(final String pn) {
-        HashSet<ItemInfo> infos = new HashSet<ItemInfo>();
         ItemInfoFilter filter  = new ItemInfoFilter() {
             @Override
             public boolean filterItem(ItemInfo parent, ItemInfo info, ComponentName cn) {
@@ -2846,7 +2845,6 @@ public boolean filterItem(ItemInfo parent, ItemInfo info, ComponentName cn) {
     }
 
     private ArrayList<ItemInfo> getItemInfoForComponentName(final ComponentName cname) {
-        HashSet<ItemInfo> infos = new HashSet<ItemInfo>();
         ItemInfoFilter filter  = new ItemInfoFilter() {
             @Override
             public boolean filterItem(ItemInfo parent, ItemInfo info, ComponentName cn) {

File: src/com/android/launcher3/PagedViewCellLayout.java
Patch:
@@ -17,7 +17,6 @@
 package com.android.launcher3;
 
 import android.content.Context;
-import android.content.res.Resources;
 import android.util.AttributeSet;
 import android.view.MotionEvent;
 import android.view.View;
@@ -60,7 +59,6 @@ public PagedViewCellLayout(Context context, AttributeSet attrs, int defStyle) {
         // setup default cell parameters
         LauncherAppState app = LauncherAppState.getInstance();
         DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
-        Resources resources = context.getResources();
         mOriginalCellWidth = mCellWidth = grid.cellWidthPx;
         mOriginalCellHeight = mCellHeight = grid.cellHeightPx;
         mCellCountX = (int) grid.numColumns;

File: src/com/android/launcher3/ShortcutAndWidgetContainer.java
Patch:
@@ -161,9 +161,6 @@ public boolean isLayoutRtl() {
 
     @Override
     protected void onLayout(boolean changed, int l, int t, int r, int b) {
-        LauncherAppState app = LauncherAppState.getInstance();
-        DeviceProfile grid = app.getDynamicGrid().getDeviceProfile();
-
         int count = getChildCount();
         for (int i = 0; i < count; i++) {
             final View child = getChildAt(i);

File: src/com/android/launcher3/Utilities.java
Patch:
@@ -44,7 +44,6 @@
  * Various utilities shared amongst the Launcher's classes.
  */
 final class Utilities {
-    @SuppressWarnings("unused")
     private static final String TAG = "Launcher.Utilities";
 
     private static int sIconWidth = -1;
@@ -215,8 +214,6 @@ public static float getDescendantCoordRelativeToParent(View descendant, View roo
         int count = ancestorChain.size();
         for (int i = 0; i < count; i++) {
             View v0 = ancestorChain.get(i);
-            View v1 = i < count -1 ? ancestorChain.get(i + 1) : null;
-
             // For TextViews, scroll has a meaning which relates to the text position
             // which is very strange... ignore the scroll.
             if (v0 != descendant || includeRootScroll) {

File: src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -31,7 +31,6 @@
 import android.graphics.drawable.Drawable;
 import android.graphics.drawable.LevelListDrawable;
 import android.net.Uri;
-import android.os.Bundle;
 import android.util.Log;
 import android.util.Pair;
 import android.view.LayoutInflater;
@@ -41,7 +40,6 @@
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.ViewGroup;
-import android.view.WindowManager;
 import android.view.animation.DecelerateInterpolator;
 import android.widget.BaseAdapter;
 import android.widget.FrameLayout;
@@ -67,7 +65,6 @@ public class WallpaperPickerActivity extends WallpaperCropActivity {
     private Resources mWallpaperResources;
 
     private View mSelectedThumb;
-    private CropView mCropView;
     private boolean mIgnoreNextTap;
     private OnClickListener mThumbnailOnClickListener;
 

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1725,7 +1725,7 @@ private boolean loadWorkspace() {
                                 try {
                                     intent = Intent.parseUri(intentDescription, 0);
                                     ComponentName cn = intent.getComponent();
-                                    if (!isValidPackageComponent(manager, cn)) {
+                                    if (cn != null && !isValidPackageComponent(manager, cn)) {
                                         if (!mAppsCanBeOnRemoveableStorage) {
                                             // Log the invalid package, and remove it from the db
                                             Uri uri = LauncherSettings.Favorites.getContentUri(id,
@@ -2718,7 +2718,7 @@ public ShortcutInfo getShortcutInfo(PackageManager manager, Intent intent, Conte
             Cursor c, int iconIndex, int titleIndex, HashMap<Object, CharSequence> labelCache) {
         ComponentName componentName = intent.getComponent();
         final ShortcutInfo info = new ShortcutInfo();
-        if (!isValidPackageComponent(manager, componentName)) {
+        if (componentName != null && !isValidPackageComponent(manager, componentName)) {
             Log.d(TAG, "Invalid package found in getShortcutInfo: " + componentName);
             return null;
         } else {

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1725,7 +1725,7 @@ private boolean loadWorkspace() {
                                 try {
                                     intent = Intent.parseUri(intentDescription, 0);
                                     ComponentName cn = intent.getComponent();
-                                    if (!isValidPackageComponent(manager, cn)) {
+                                    if (cn != null && !isValidPackageComponent(manager, cn)) {
                                         if (!mAppsCanBeOnRemoveableStorage) {
                                             // Log the invalid package, and remove it from the db
                                             Uri uri = LauncherSettings.Favorites.getContentUri(id,
@@ -2718,7 +2718,7 @@ public ShortcutInfo getShortcutInfo(PackageManager manager, Intent intent, Conte
             Cursor c, int iconIndex, int titleIndex, HashMap<Object, CharSequence> labelCache) {
         ComponentName componentName = intent.getComponent();
         final ShortcutInfo info = new ShortcutInfo();
-        if (!isValidPackageComponent(manager, componentName)) {
+        if (componentName != null && !isValidPackageComponent(manager, componentName)) {
             Log.d(TAG, "Invalid package found in getShortcutInfo: " + componentName);
             return null;
         } else {

File: src/com/android/launcher3/Folder.java
Patch:
@@ -1062,9 +1062,10 @@ public void run() {
                     mLauncher.removeFolder(mInfo);
                 }
                 // We add the child after removing the folder to prevent both from existing at
-                // the same time in the CellLayout.
+                // the same time in the CellLayout.  We need to add the new item with addInScreenFromBind()
+                // to ensure that hotseat items are placed correctly.
                 if (child != null) {
-                    mLauncher.getWorkspace().addInScreen(child, mInfo.container, mInfo.screenId,
+                    mLauncher.getWorkspace().addInScreenFromBind(child, mInfo.container, mInfo.screenId,
                             mInfo.cellX, mInfo.cellY, mInfo.spanX, mInfo.spanY);
                 }
             }

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -192,8 +192,8 @@ public void onReceive(Context context, Intent data) {
             data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);
 
         // Queue the item up for adding if launcher has not loaded properly yet
-        boolean launcherNotLoaded = LauncherModel.getCellCountX() <= 0 ||
-                LauncherModel.getCellCountY() <= 0;
+        LauncherAppState app = LauncherAppState.getInstance();
+        boolean launcherNotLoaded = (app.getDynamicGrid() == null);
 
         PendingInstallShortcutInfo info = new PendingInstallShortcutInfo(data, name, intent);
         info.icon = icon;

File: src/com/android/launcher3/PagedViewCellLayout.java
Patch:
@@ -64,8 +64,8 @@ public PagedViewCellLayout(Context context, AttributeSet attrs, int defStyle) {
         Resources resources = context.getResources();
         mOriginalCellWidth = mCellWidth = grid.cellWidthPx;
         mOriginalCellHeight = mCellHeight = grid.cellHeightPx;
-        mCellCountX = LauncherModel.getCellCountX();
-        mCellCountY = LauncherModel.getCellCountY();
+        mCellCountX = (int) grid.numColumns;
+        mCellCountY = (int) grid.numRows;
         mOriginalWidthGap = mOriginalHeightGap = mWidthGap = mHeightGap = -1;
         mMaxGap = resources.getDimensionPixelSize(R.dimen.apps_customize_max_gap);
 

File: src/com/android/launcher3/WallpaperPickerActivity.java
Patch:
@@ -398,6 +398,7 @@ public void run() {
                 // If we have saved a wallpaper width/height, use that instead
                 int savedWidth = sharedPrefs.getInt(WALLPAPER_WIDTH_KEY, defaultWidth);
                 int savedHeight = sharedPrefs.getInt(WALLPAPER_HEIGHT_KEY, defaultHeight);
+                wallpaperManager.suggestDesiredDimensions(savedWidth, savedHeight);
             }
         }.start();
     }

File: src/com/android/launcher3/Folder.java
Patch:
@@ -1062,9 +1062,10 @@ public void run() {
                     mLauncher.removeFolder(mInfo);
                 }
                 // We add the child after removing the folder to prevent both from existing at
-                // the same time in the CellLayout.
+                // the same time in the CellLayout.  We need to add the new item with addInScreenFromBind()
+                // to ensure that hotseat items are placed correctly.
                 if (child != null) {
-                    mLauncher.getWorkspace().addInScreen(child, mInfo.container, mInfo.screenId,
+                    mLauncher.getWorkspace().addInScreenFromBind(child, mInfo.container, mInfo.screenId,
                             mInfo.cellX, mInfo.cellY, mInfo.spanX, mInfo.spanY);
                 }
             }

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -192,8 +192,8 @@ public void onReceive(Context context, Intent data) {
             data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);
 
         // Queue the item up for adding if launcher has not loaded properly yet
-        boolean launcherNotLoaded = LauncherModel.getCellCountX() <= 0 ||
-                LauncherModel.getCellCountY() <= 0;
+        LauncherAppState app = LauncherAppState.getInstance();
+        boolean launcherNotLoaded = (app.getDynamicGrid() == null);
 
         PendingInstallShortcutInfo info = new PendingInstallShortcutInfo(data, name, intent);
         info.icon = icon;

File: src/com/android/launcher3/PagedViewCellLayout.java
Patch:
@@ -64,8 +64,8 @@ public PagedViewCellLayout(Context context, AttributeSet attrs, int defStyle) {
         Resources resources = context.getResources();
         mOriginalCellWidth = mCellWidth = grid.cellWidthPx;
         mOriginalCellHeight = mCellHeight = grid.cellHeightPx;
-        mCellCountX = LauncherModel.getCellCountX();
-        mCellCountY = LauncherModel.getCellCountY();
+        mCellCountX = (int) grid.numColumns;
+        mCellCountY = (int) grid.numRows;
         mOriginalWidthGap = mOriginalHeightGap = mWidthGap = mHeightGap = -1;
         mMaxGap = resources.getDimensionPixelSize(R.dimen.apps_customize_max_gap);
 

File: src/com/android/launcher3/DynamicGrid.java
Patch:
@@ -321,7 +321,7 @@ public void layout(Launcher launcher) {
         searchBarSpace.setLayoutParams(lp);
 
         // Layout the search bar
-        View searchBar = searchBarSpace.findViewById(R.id.qsb_search_bar);
+        View searchBar = launcher.getQsbBar();
         lp = (FrameLayout.LayoutParams) searchBar.getLayoutParams();
         lp.width = LayoutParams.MATCH_PARENT;
         lp.height = LayoutParams.MATCH_PARENT;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -784,8 +784,8 @@ static ArrayList<ItemInfo> getItemsInLocalCoordinates(Context context) {
                 ItemInfo item = new ItemInfo();
                 item.cellX = c.getInt(cellXIndex);
                 item.cellY = c.getInt(cellYIndex);
-                item.spanX = c.getInt(spanXIndex);
-                item.spanY = c.getInt(spanYIndex);
+                item.spanX = Math.max(1, c.getInt(spanXIndex));
+                item.spanY = Math.max(1, c.getInt(spanYIndex));
                 item.container = c.getInt(containerIndex);
                 item.itemType = c.getInt(itemTypeIndex);
                 item.screenId = c.getInt(screenIndex);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -725,6 +725,7 @@ public void onDragExit(DragObject d) {
     public void onDropCompleted(final View target, final DragObject d,
             final boolean isFlingToDelete, final boolean success) {
         if (mDeferDropAfterUninstall) {
+            Log.d(TAG, "Deferred handling drop because waiting for uninstall.");
             mDeferredAction = new Runnable() {
                     public void run() {
                         onDropCompleted(target, d, isFlingToDelete, success);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -1267,7 +1267,7 @@ static int[] getSpanForWidget(Context context, ComponentName component, int minW
         // to ensure that it gets the full amount of space that it has requested
         int requiredWidth = minWidth + padding.left + padding.right;
         int requiredHeight = minHeight + padding.top + padding.bottom;
-        return CellLayout.rectToCell(context.getResources(), requiredWidth, requiredHeight, null);
+        return CellLayout.rectToCell(requiredWidth, requiredHeight, null);
     }
 
     static int[] getSpanForWidget(Context context, AppWidgetProviderInfo info) {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3562,7 +3562,7 @@ public void bindScreens(ArrayList<Long> orderedScreenIds) {
     public void bindAddScreens(ArrayList<Long> orderedScreenIds) {
         int count = orderedScreenIds.size();
         for (int i = 0; i < count; i++) {
-            Log.d(TAG, "10249126 - bindAddScreens(" + orderedScreenIds.get(i) + ")");
+            Log.w(TAG, "10249126 - bindAddScreens(" + orderedScreenIds.get(i) + ")");
             mWorkspace.insertNewWorkspaceScreenBeforeEmptyScreen(orderedScreenIds.get(i), false);
         }
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -647,6 +647,9 @@ private boolean completeAdd(PendingAddArguments args) {
     @Override
     protected void onActivityResult(
             final int requestCode, final int resultCode, final Intent data) {
+        // Reset the startActivity waiting flag
+        mWaitingForResult = false;
+
         if (requestCode == REQUEST_BIND_APPWIDGET) {
             int appWidgetId = data != null ?
                     data.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1) : -1;
@@ -660,7 +663,6 @@ protected void onActivityResult(
         boolean delayExitSpringLoadedMode = false;
         boolean isWidgetDrop = (requestCode == REQUEST_PICK_APPWIDGET ||
                 requestCode == REQUEST_CREATE_APPWIDGET);
-        mWaitingForResult = false;
 
         // We have special handling for widgets
         if (isWidgetDrop) {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -193,6 +193,7 @@ public class Launcher extends Activity
             "com.android.launcher.toolbar_voice_search_icon";
 
     public static final String SHOW_WEIGHT_WATCHER = "debug.show_mem";
+    public static final boolean SHOW_WEIGHT_WATCHER_DEFAULT = false;
 
     /** The different states that Launcher can be in. */
     private enum State { NONE, WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOADED };
@@ -3569,7 +3570,7 @@ public void bindAddScreens(ArrayList<Long> orderedScreenIds) {
     private boolean shouldShowWeightWatcher() {
         String spKey = LauncherAppState.getSharedPreferencesKey();
         SharedPreferences sp = getSharedPreferences(spKey, Context.MODE_PRIVATE);
-        boolean show = sp.getBoolean(SHOW_WEIGHT_WATCHER, true);
+        boolean show = sp.getBoolean(SHOW_WEIGHT_WATCHER, SHOW_WEIGHT_WATCHER_DEFAULT);
 
         return show;
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -192,6 +192,7 @@ public class Launcher extends Activity
             "com.android.launcher.toolbar_voice_search_icon";
 
     public static final String SHOW_WEIGHT_WATCHER = "debug.show_mem";
+    public static final boolean SHOW_WEIGHT_WATCHER_DEFAULT = false;
 
     /** The different states that Launcher can be in. */
     private enum State { NONE, WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOADED };
@@ -3537,7 +3538,7 @@ public void bindAddScreens(ArrayList<Long> orderedScreenIds) {
     private boolean shouldShowWeightWatcher() {
         String spKey = LauncherAppState.getSharedPreferencesKey();
         SharedPreferences sp = getSharedPreferences(spKey, Context.MODE_PRIVATE);
-        boolean show = sp.getBoolean(SHOW_WEIGHT_WATCHER, true);
+        boolean show = sp.getBoolean(SHOW_WEIGHT_WATCHER, SHOW_WEIGHT_WATCHER_DEFAULT);
 
         return show;
     }

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -779,7 +779,7 @@ protected void dispatchDraw(Canvas canvas) {
 
         if (mInScrollArea && !LauncherAppState.getInstance().isScreenLarge()) {
             Workspace workspace = mLauncher.getWorkspace();
-            int width = workspace.getWidth();
+            int width = getMeasuredWidth();
             Rect childRect = new Rect();
             getDescendantRectRelativeToSelf(workspace.getChildAt(0), childRect);
 

File: src/com/android/launcher3/Folder.java
Patch:
@@ -691,6 +691,8 @@ public void onDragOver(DragObject d) {
             } else {
                 mDragMode = DRAG_MODE_NONE;
             }
+        } else {
+            mReorderAlarm.cancelAlarm();
         }
     }
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -3815,12 +3815,11 @@ public boolean onEnterScrollArea(int x, int y, int direction) {
         }
 
         boolean result = false;
-        if (!isSmall() && !mIsSwitchingState) {
+        if (!isSmall() && !mIsSwitchingState && getOpenFolder() == null) {
             mInScrollArea = true;
 
             final int page = getNextPage() +
                        (direction == DragController.SCROLL_LEFT ? -1 : 1);
-
             // We always want to exit the current layout to ensure parity of enter / exit
             setCurrentDropLayout(null);
 

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1416,6 +1416,7 @@ protected void onAttachedToWindow() {
     }
 
     protected void onDetachedFromWindow() {
+        super.onDetachedFromWindow();
         mWindowToken = null;
     }
 

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3529,6 +3529,7 @@ public void bindScreens(ArrayList<Long> orderedScreenIds) {
     public void bindAddScreens(ArrayList<Long> orderedScreenIds) {
         int count = orderedScreenIds.size();
         for (int i = 0; i < count; i++) {
+            Log.d(TAG, "10249126 - bindAddScreens(" + orderedScreenIds.get(i) + ")");
             mWorkspace.insertNewWorkspaceScreenBeforeEmptyScreen(orderedScreenIds.get(i), false);
         }
     }

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1491,7 +1491,7 @@ private void verifyApplications() {
 
             // Cross reference all the applications in our apps list with items in the workspace
             ArrayList<ItemInfo> tmpInfos;
-            ArrayList<ApplicationInfo> added = new ArrayList<ApplicationInfo>();
+            ArrayList<ItemInfo> added = new ArrayList<ItemInfo>();
             synchronized (sBgLock) {
                 for (ApplicationInfo app : mBgAllAppsList.data) {
                     tmpInfos = getItemInfoForComponentName(app.componentName);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -775,7 +775,7 @@ public void run() {
         if (target != this) {
             if (mOnExitAlarm.alarmPending()) {
                 mOnExitAlarm.cancelAlarm();
-                if (successfulDrop) {
+                if (!successfulDrop) {
                     mSuppressFolderDeletion = true;
                 }
                 completeDragExit();

File: src/com/android/launcher3/Folder.java
Patch:
@@ -775,7 +775,7 @@ public void run() {
         if (target != this) {
             if (mOnExitAlarm.alarmPending()) {
                 mOnExitAlarm.cancelAlarm();
-                if (successfulDrop) {
+                if (!successfulDrop) {
                     mSuppressFolderDeletion = true;
                 }
                 completeDragExit();

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3620,6 +3620,8 @@ public void run() {
                     workspace.addInScreenFromBind(newFolder, item.container, item.screenId, item.cellX,
                             item.cellY, 1, 1);
                     break;
+                default:
+                    throw new RuntimeException("Invalid Item Type");
             }
         }
 
@@ -3759,7 +3761,6 @@ public void run() {
 
         mWorkspaceLoading = false;
         if (upgradePath) {
-            mWorkspace.saveWorkspaceToDb();
             mWorkspace.stripDuplicateApps();
             mIntentsOnWorkspaceFromUpgradePath = mWorkspace.stripDuplicateApps();
         }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -1010,7 +1010,7 @@ protected void getVisiblePages(int[] range) {
 
                 // Check if the right edge of the page is in the viewport
                 mTmpIntPoint[0] = currPage.getMeasuredWidth();
-                DragLayer.getDescendantCoordRelativeToParent(currPage, this, mTmpIntPoint, false);
+                Utilities.getDescendantCoordRelativeToParent(currPage, this, mTmpIntPoint, false);
                 if (mTmpIntPoint[0] < 0) {
                     break;
                 }
@@ -1020,7 +1020,7 @@ protected void getVisiblePages(int[] range) {
 
                 // Check if the left edge of the page is in the viewport
                 mTmpIntPoint[0] = 0;
-                DragLayer.getDescendantCoordRelativeToParent(currPage, this, mTmpIntPoint, false);
+                Utilities.getDescendantCoordRelativeToParent(currPage, this, mTmpIntPoint, false);
                 if (mTmpIntPoint[0] >= viewportWidth) {
                     break;
                 }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3585,6 +3585,8 @@ public void run() {
                     workspace.addInScreenFromBind(newFolder, item.container, item.screenId, item.cellX,
                             item.cellY, 1, 1);
                     break;
+                default:
+                    throw new RuntimeException("Invalid Item Type");
             }
         }
 
@@ -3724,7 +3726,6 @@ public void run() {
 
         mWorkspaceLoading = false;
         if (upgradePath) {
-            mWorkspace.saveWorkspaceToDb();
             mWorkspace.stripDuplicateApps();
             mIntentsOnWorkspaceFromUpgradePath = mWorkspace.stripDuplicateApps();
         }

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -983,7 +983,7 @@ protected void getVisiblePages(int[] range) {
 
                 // Check if the right edge of the page is in the viewport
                 mTmpIntPoint[0] = currPage.getMeasuredWidth();
-                DragLayer.getDescendantCoordRelativeToParent(currPage, this, mTmpIntPoint, false);
+                Utilities.getDescendantCoordRelativeToParent(currPage, this, mTmpIntPoint, false);
                 if (mTmpIntPoint[0] < 0) {
                     break;
                 }
@@ -993,7 +993,7 @@ protected void getVisiblePages(int[] range) {
 
                 // Check if the left edge of the page is in the viewport
                 mTmpIntPoint[0] = 0;
-                DragLayer.getDescendantCoordRelativeToParent(currPage, this, mTmpIntPoint, false);
+                Utilities.getDescendantCoordRelativeToParent(currPage, this, mTmpIntPoint, false);
                 if (mTmpIntPoint[0] >= viewportWidth) {
                     break;
                 }

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -21,6 +21,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewParent;
+import android.widget.ScrollView;
 import android.widget.TabHost;
 import android.widget.TabWidget;
 
@@ -817,7 +818,8 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
     static boolean handleFolderKeyEvent(View v, int keyCode, KeyEvent e) {
         ShortcutAndWidgetContainer parent = (ShortcutAndWidgetContainer) v.getParent();
         final CellLayout layout = (CellLayout) parent.getParent();
-        final Folder folder = (Folder) layout.getParent();
+        final ScrollView scrollView = (ScrollView) layout.getParent();
+        final Folder folder = (Folder) scrollView.getParent();
         View title = folder.mFolderName;
 
         final int action = e.getAction();

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -21,6 +21,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewParent;
+import android.widget.ScrollView;
 import android.widget.TabHost;
 import android.widget.TabWidget;
 
@@ -817,7 +818,8 @@ static boolean handleIconKeyEvent(View v, int keyCode, KeyEvent e) {
     static boolean handleFolderKeyEvent(View v, int keyCode, KeyEvent e) {
         ShortcutAndWidgetContainer parent = (ShortcutAndWidgetContainer) v.getParent();
         final CellLayout layout = (CellLayout) parent.getParent();
-        final Folder folder = (Folder) layout.getParent();
+        final ScrollView scrollView = (ScrollView) layout.getParent();
+        final Folder folder = (Folder) scrollView.getParent();
         View title = folder.mFolderName;
 
         final int action = e.getAction();

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1728,7 +1728,9 @@ private void loadWorkspace() {
                         }
                     }
                 } finally {
-                    c.close();
+                    if (c != null) {
+                        c.close();
+                    }
                 }
 
                 if (itemsToRemove.size() > 0) {

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -990,7 +990,7 @@ private void restoreState(Bundle savedState) {
 
         int currentScreen = savedState.getInt(RUNTIME_STATE_CURRENT_SCREEN, -1);
         if (currentScreen > -1) {
-            mWorkspace.setCurrentPage(currentScreen);
+            mWorkspace.setRestorePage(currentScreen);
         }
 
         final long pendingAddContainer = savedState.getLong(RUNTIME_STATE_PENDING_ADD_CONTAINER, -1);

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -990,7 +990,7 @@ private void restoreState(Bundle savedState) {
 
         int currentScreen = savedState.getInt(RUNTIME_STATE_CURRENT_SCREEN, -1);
         if (currentScreen > -1) {
-            mWorkspace.setCurrentPage(currentScreen);
+            mWorkspace.setRestorePage(currentScreen);
         }
 
         final long pendingAddContainer = savedState.getLong(RUNTIME_STATE_PENDING_ADD_CONTAINER, -1);

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1683,7 +1683,7 @@ Animator getChangeStateAnimation(final State state, boolean animated) {
         return getChangeStateAnimation(state, animated, 0);
     }
 
-    void boundByReorderablePages(boolean isReordering, int[] range) {
+    void getReorderablePages(int[] range) {
         int count = mScreenOrder.size();
 
         int start = -1;

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -1659,7 +1659,7 @@ Animator getChangeStateAnimation(final State state, boolean animated) {
         return getChangeStateAnimation(state, animated, 0);
     }
 
-    void boundByReorderablePages(boolean isReordering, int[] range) {
+    void getReorderablePages(int[] range) {
         int count = mScreenOrder.size();
 
         int start = -1;

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -496,6 +496,7 @@ void setCurrentPage(int currentPage) {
 
         mForceScreenScrolled = true;
         mCurrentPage = Math.max(0, Math.min(currentPage, getPageCount() - 1));
+        updateCurrentPageScroll();
         notifyPageSwitchListener();
         invalidate();
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3779,7 +3779,7 @@ public void bindSearchablesChanged() {
     public void bindAllApplications(final ArrayList<ApplicationInfo> apps) {
         if (mIntentsOnWorkspaceFromUpgradePath != null) {
             getHotseat().addAllAppsFolder(mIconCache, apps,
-                    mIntentsOnWorkspaceFromUpgradePath, Launcher.this);
+                    mIntentsOnWorkspaceFromUpgradePath, Launcher.this, mWorkspace);
             mIntentsOnWorkspaceFromUpgradePath = null;
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2725,9 +2725,7 @@ void mapPointFromSelfToHotseatLayout(Hotseat hotseat, float[] xy) {
        mTempPt[0] = (int) xy[0];
        mTempPt[1] = (int) xy[1];
        mLauncher.getDragLayer().getDescendantCoordRelativeToSelf(this, mTempPt, true);
-
-       mTempPt[0] -= hotseat.getLeft();
-       mTempPt[1] -= hotseat.getTop();
+       mLauncher.getDragLayer().mapCoordInSelfToDescendent(hotseat.getLayout(), mTempPt);
 
        xy[0] = mTempPt[0];
        xy[1] = mTempPt[1];

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -3779,7 +3779,7 @@ public void bindSearchablesChanged() {
     public void bindAllApplications(final ArrayList<ApplicationInfo> apps) {
         if (mIntentsOnWorkspaceFromUpgradePath != null) {
             getHotseat().addAllAppsFolder(mIconCache, apps,
-                    mIntentsOnWorkspaceFromUpgradePath, Launcher.this);
+                    mIntentsOnWorkspaceFromUpgradePath, Launcher.this, mWorkspace);
             mIntentsOnWorkspaceFromUpgradePath = null;
         }
     }

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -2710,9 +2710,7 @@ void mapPointFromSelfToHotseatLayout(Hotseat hotseat, float[] xy) {
        mTempPt[0] = (int) xy[0];
        mTempPt[1] = (int) xy[1];
        mLauncher.getDragLayer().getDescendantCoordRelativeToSelf(this, mTempPt, true);
-
-       mTempPt[0] -= hotseat.getLeft();
-       mTempPt[1] -= hotseat.getTop();
+       mLauncher.getDragLayer().mapCoordInSelfToDescendent(hotseat.getLayout(), mTempPt);
 
        xy[0] = mTempPt[0];
        xy[1] = mTempPt[1];

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -652,7 +652,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
         // We measure the dimensions of the PagedView to be larger than the pages so that when we
         // zoom out (and scale down), the view is still contained in the parent
-        View parent = (View) getParent();
         int widthMode = MeasureSpec.getMode(widthMeasureSpec);
         int widthSize = MeasureSpec.getSize(widthMeasureSpec);
         int heightMode = MeasureSpec.getMode(heightMeasureSpec);
@@ -727,8 +726,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         // ensure that the cache is filled with good values.
         invalidateCachedOffsets();
 
-        if (mChildCountOnLastMeasure != getChildCount() && !mDeferringForDelete) {
-            setCurrentPage(mCurrentPage);
+        if (mScroller.isFinished() && mChildCountOnLastMeasure != getChildCount() &&
+                !mDeferringForDelete) {
+            setCurrentPage(getNextPage());
         }
         mChildCountOnLastMeasure = getChildCount();
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -652,7 +652,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
         // We measure the dimensions of the PagedView to be larger than the pages so that when we
         // zoom out (and scale down), the view is still contained in the parent
-        View parent = (View) getParent();
         int widthMode = MeasureSpec.getMode(widthMeasureSpec);
         int widthSize = MeasureSpec.getSize(widthMeasureSpec);
         int heightMode = MeasureSpec.getMode(heightMeasureSpec);
@@ -727,8 +726,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         // ensure that the cache is filled with good values.
         invalidateCachedOffsets();
 
-        if (mChildCountOnLastMeasure != getChildCount() && !mDeferringForDelete) {
-            setCurrentPage(mCurrentPage);
+        if (mScroller.isFinished() && mChildCountOnLastMeasure != getChildCount() &&
+                !mDeferringForDelete) {
+            setCurrentPage(getNextPage());
         }
         mChildCountOnLastMeasure = getChildCount();
 

File: src/com/android/launcher3/PagedView.java
Patch:
@@ -87,7 +87,7 @@ public abstract class PagedView extends ViewGroup implements ViewGroup.OnHierarc
     // We are disabling touch interaction of the widget region for factory ROM.
     private static final boolean DISABLE_TOUCH_INTERACTION = false;
     private static final boolean DISABLE_TOUCH_SIDE_PAGES = false;
-    private static final boolean DISABLE_FLING_TO_DELETE = false;
+    private static final boolean DISABLE_FLING_TO_DELETE = true;
 
     static final int AUTOMATIC_PAGE_SPACING = -1;
 

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -1696,7 +1696,6 @@ protected int getAssociatedUpperPageBound(int page) {
         return windowMaxIndex;
     }
 
-    @Override
     protected String getCurrentPageDescription() {
         int page = (mNextPage != INVALID_PAGE) ? mNextPage : mCurrentPage;
         int stringId = R.string.default_scroll_format;

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -2435,6 +2435,9 @@ public boolean onLongClick(View v) {
                 // User long pressed on empty space
                 mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
                         HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
+                // Disabling reordering until we sort out some issues.
+                //mWorkspace.startReordering();
+                // TODO: need to have a new way to set wallpaper or start reordering
                 startWallpaper();
             } else {
                 if (!(itemUnderLongClick instanceof Folder)) {

File: src/com/android/launcher3/Workspace.java
Patch:
@@ -499,9 +499,9 @@ public long insertNewWorkspaceScreen(long screenId, boolean updateDb) {
         CellLayout newScreen = (CellLayout)
                 mLauncher.getLayoutInflater().inflate(R.layout.workspace_screen, null);
 
-        addView(newScreen, getChildCount());
         mWorkspaceScreens.put(screenId, newScreen);
         mScreenOrder.add(screenId);
+        addView(newScreen, getChildCount());
         if (updateDb) {
             // On bind we don't need to update the screens in the database.
             mLauncher.getModel().updateWorkspaceScreenOrder(mLauncher, mScreenOrder);
@@ -525,10 +525,10 @@ public void addCustomContentToLeft(View customContent) {
         AppWidgetHostView.getDefaultPaddingForWidget(mLauncher, mLauncher.getComponentName(), p);
         customContent.setPadding(p.left, p.top, p.right, p.bottom);
 
-        addView(customScreen, 0);
-
         mWorkspaceScreens.put(CUSTOM_CONTENT_SCREEN_ID, customScreen);
         mScreenOrder.add(0, CUSTOM_CONTENT_SCREEN_ID);
+        addView(customScreen, 0);
+
 
         // Ensure that the current page and default page are maintained.
         mDefaultPage++;

File: src/com/android/launcher3/PackageChangedReceiver.java
Patch:
@@ -13,6 +13,8 @@ public void onReceive(final Context context, Intent intent) {
             // they sent us a bad intent
             return;
         }
+        // in rare cases the receiver races with the application to set up LauncherAppState
+        LauncherAppState.setApplicationContext(context.getApplicationContext());
         LauncherAppState app = LauncherAppState.getInstance();
         WidgetPreviewLoader.removeFromDb(app.getWidgetPreviewCacheDb(), packageName);
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -348,6 +348,9 @@ protected void onCreate(Bundle savedInstanceState) {
         }
 
         super.onCreate(savedInstanceState);
+
+        // the LauncherApplication should call this, but in case of Instrumentation it might not be present yet
+        LauncherAppState.setApplicationContext(getApplicationContext());
         LauncherAppState app = LauncherAppState.getInstance();
         mSharedPrefs = getSharedPreferences(LauncherAppState.getSharedPreferencesKey(),
                 Context.MODE_PRIVATE);

File: src/com/android/launcher3/LauncherAppState.java
Patch:
@@ -54,7 +54,7 @@ public Context getContext() {
 
     public static void setApplicationContext(Context context) {
         if (sContext != null) {
-            throw new IllegalStateException("setApplicationContext called twice! old=" + sContext + " new=" + context);
+            Log.w(Launcher.TAG, "setApplicationContext called twice! old=" + sContext + " new=" + context);
         }
         sContext = context.getApplicationContext();
     }

File: src/com/android/launcher3/Launcher.java
Patch:
@@ -108,11 +108,10 @@ public class Launcher extends Activity
     static final String TAG = "Launcher";
     static final boolean LOGD = false;
 
-    static final boolean PROFILE_STARTUP = true;
+    static final boolean PROFILE_STARTUP = false;
     static final boolean DEBUG_WIDGETS = false;
     static final boolean DEBUG_STRICT_MODE = false;
-    static final boolean DEBUG_RESUME_TIME = true;
-    static final boolean DEBUG_MEMORY = true;
+    static final boolean DEBUG_RESUME_TIME = false;
 
     private static final int MENU_GROUP_WALLPAPER = 1;
     private static final int MENU_WALLPAPER_SETTINGS = Menu.FIRST + 1;

File: src/com/android/launcher3/LauncherModel.java
Patch:
@@ -1708,11 +1708,11 @@ private void loadWorkspace() {
                 if (DEBUG_LOADERS) {
                     Log.d(TAG, "loaded workspace in " + (SystemClock.uptimeMillis()-t) + "ms");
                     Log.d(TAG, "workspace layout: ");
-                    Iterator<Long> iter = occupied.keySet().iterator();
                     int nScreens = occupied.size();
                     for (int y = 0; y < mCellCountY; y++) {
                         String line = "";
 
+                        Iterator<Long> iter = occupied.keySet().iterator();
                         for (int s = 0; s < nScreens; s++) {
                             long screenId = iter.next();
                             if (s > 0) {

File: src/com/android/launcher3/AppsCustomizePagedView.java
Patch:
@@ -251,7 +251,7 @@ public AppsCustomizePagedView(Context context, AttributeSet attrs) {
         mPackageManager = context.getPackageManager();
         mApps = new ArrayList<ApplicationInfo>();
         mWidgets = new ArrayList<Object>();
-        mIconCache = ((LauncherApplication) context.getApplicationContext()).getIconCache();
+        mIconCache = (LauncherAppState.getInstance()).getIconCache();
         mCanvas = new Canvas();
         mRunningTasks = new ArrayList<AppsCustomizeAsyncTask>();
 
@@ -362,7 +362,7 @@ protected void onDataReady(int width, int height) {
             Configuration.ORIENTATION_LANDSCAPE;
         int maxCellCountX = Integer.MAX_VALUE;
         int maxCellCountY = Integer.MAX_VALUE;
-        if (LauncherApplication.isScreenLarge()) {
+        if (LauncherAppState.isScreenLarge()) {
             maxCellCountX = (isLandscape ? LauncherModel.getCellCountX() :
                 LauncherModel.getCellCountY());
             maxCellCountY = (isLandscape ? LauncherModel.getCellCountY() :

File: src/com/android/launcher3/AppsCustomizeTabHost.java
Patch:
@@ -184,7 +184,7 @@ private void onTabChangedStart() {
     }
 
     private void reloadCurrentPage() {
-        if (!LauncherApplication.isScreenLarge()) {
+        if (!LauncherAppState.isScreenLarge()) {
             mAppsCustomizePane.flashScrollingIndicator(true);
         }
         mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage());
@@ -383,7 +383,7 @@ public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean to
             // transition to prevent slowing down the animation)
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage(), true);
 
-            if (!LauncherApplication.isScreenLarge()) {
+            if (!LauncherAppState.isScreenLarge()) {
                 mAppsCustomizePane.showScrollingIndicator(true);
             }
         }
@@ -423,7 +423,7 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
             // prevent slowing down the animation)
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage());
 
-            if (!LauncherApplication.isScreenLarge()) {
+            if (!LauncherAppState.isScreenLarge()) {
                 mAppsCustomizePane.hideScrollingIndicator(false);
             }
 

File: src/com/android/launcher3/CheckLongPressHelper.java
Patch:
@@ -45,7 +45,7 @@ public void postCheckForLongPress() {
         if (mPendingCheckForLongPress == null) {
             mPendingCheckForLongPress = new CheckForLongPress();
         }
-        mView.postDelayed(mPendingCheckForLongPress, LauncherApplication.getLongPressTimeout());
+        mView.postDelayed(mPendingCheckForLongPress, LauncherAppState.getLongPressTimeout());
     }
 
     public void cancelLongPress() {

File: src/com/android/launcher3/Cling.java
Patch:
@@ -126,7 +126,7 @@ private int[] getPunchThroughPositions() {
         } else if (mDrawIdentifier.equals(WORKSPACE_LANDSCAPE)) {
             return new int[]{getMeasuredWidth() - (mButtonBarHeight / 2), getMeasuredHeight() / 2};
         } else if (mDrawIdentifier.equals(WORKSPACE_LARGE)) {
-            final float scale = LauncherApplication.getScreenDensity();
+            final float scale = LauncherAppState.getScreenDensity();
             final int cornerXOffset = (int) (scale * 15);
             final int cornerYOffset = (int) (scale * 10);
             return new int[]{getMeasuredWidth() - cornerXOffset, cornerYOffset};

File: src/com/android/launcher3/DeleteDropTarget.java
Patch:
@@ -82,7 +82,7 @@ protected void onFinishInflate() {
         // Remove the text in the Phone UI in landscape
         int orientation = getResources().getConfiguration().orientation;
         if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            if (!LauncherApplication.isScreenLarge()) {
+            if (!LauncherAppState.isScreenLarge()) {
                 setText("");
             }
         }

File: src/com/android/launcher3/DragLayer.java
Patch:
@@ -736,7 +736,7 @@ private void updateChildIndices() {
     protected int getChildDrawingOrder(int childCount, int i) {
         // TODO: We have turned off this custom drawing order because it now effects touch
         // dispatch order. We need to sort that issue out and then decide how to go about this.
-        if (true || LauncherApplication.isScreenLandscape(getContext()) ||
+        if (true || LauncherAppState.isScreenLandscape(getContext()) ||
                 mWorkspaceIndex == -1 || mQsbIndex == -1 ||
                 mLauncher.getWorkspace().isDrawingBackgroundGradient()) {
             return i;
@@ -779,7 +779,7 @@ private boolean isLayoutRtl() {
     protected void dispatchDraw(Canvas canvas) {
         super.dispatchDraw(canvas);
 
-        if (mInScrollArea && !LauncherApplication.isScreenLarge()) {
+        if (mInScrollArea && !LauncherAppState.isScreenLarge()) {
             Workspace workspace = mLauncher.getWorkspace();
             int width = workspace.getWidth();
             Rect childRect = new Rect();

File: src/com/android/launcher3/FocusHelper.java
Patch:
@@ -437,7 +437,7 @@ static boolean handleAppsCustomizeKeyEvent(View v, int keyCode, KeyEvent e) {
      * Handles key events in the tab widget.
      */
     static boolean handleTabKeyEvent(AccessibleTabView v, int keyCode, KeyEvent e) {
-        if (!LauncherApplication.isScreenLarge()) return false;
+        if (!LauncherAppState.isScreenLarge()) return false;
 
         final FocusOnlyTabWidget parent = (FocusOnlyTabWidget) v.getParent();
         final TabHost tabHost = findTabHostParent(parent);

File: src/com/android/launcher3/Folder.java
Patch:
@@ -135,7 +135,7 @@ public Folder(Context context, AttributeSet attrs) {
         super(context, attrs);
         setAlwaysDrawnWithCacheEnabled(false);
         mInflater = LayoutInflater.from(context);
-        mIconCache = ((LauncherApplication)context.getApplicationContext()).getIconCache();
+        mIconCache = (LauncherAppState.getInstance()).getIconCache();
 
         Resources res = getResources();
         mMaxCountX = mMaxVisibleX = res.getInteger(R.integer.folder_max_count_x);

File: src/com/android/launcher3/HolographicOutlineHelper.java
Patch:
@@ -44,7 +44,7 @@ public class HolographicOutlineHelper {
     private static final int EXTRA_THICK = 2;
 
     static {
-        final float scale = LauncherApplication.getScreenDensity();
+        final float scale = LauncherAppState.getScreenDensity();
 
         MIN_OUTER_BLUR_RADIUS = (int) (scale * 1.0f);
         MAX_OUTER_BLUR_RADIUS = (int) (scale * 12.0f);

File: src/com/android/launcher3/IconCache.java
Patch:
@@ -45,13 +45,13 @@ private static class CacheEntry {
     }
 
     private final Bitmap mDefaultIcon;
-    private final LauncherApplication mContext;
+    private final Context mContext;
     private final PackageManager mPackageManager;
     private final HashMap<ComponentName, CacheEntry> mCache =
             new HashMap<ComponentName, CacheEntry>(INITIAL_ICON_CACHE_CAPACITY);
     private int mIconDpi;
 
-    public IconCache(LauncherApplication context) {
+    public IconCache(Context context) {
         ActivityManager activityManager =
                 (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
 

File: src/com/android/launcher3/InfoDropTarget.java
Patch:
@@ -58,7 +58,7 @@ protected void onFinishInflate() {
         // Remove the text in the Phone UI in landscape
         int orientation = getResources().getConfiguration().orientation;
         if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
-            if (!LauncherApplication.isScreenLarge()) {
+            if (!LauncherAppState.isScreenLarge()) {
                 setText("");
             }
         }

File: src/com/android/launcher3/PackageChangedReceiver.java
Patch:
@@ -13,7 +13,7 @@ public void onReceive(final Context context, Intent intent) {
             // they sent us a bad intent
             return;
         }
-        LauncherApplication app = (LauncherApplication) context.getApplicationContext();
+        LauncherAppState app = LauncherAppState.getInstance();
         WidgetPreviewLoader.removeFromDb(app.getWidgetPreviewCacheDb(), packageName);
     }
 }

File: src/com/android/launcher3/PagedViewCellLayout.java
Patch:
@@ -472,7 +472,7 @@ public void setup(int cellWidth, int cellHeight, int widthGap, int heightGap,
             height = myCellVSpan * cellHeight + ((myCellVSpan - 1) * heightGap) -
                     topMargin - bottomMargin;
 
-            if (LauncherApplication.isScreenLarge()) {
+            if (LauncherAppState.isScreenLarge()) {
                 x = hStartPadding + myCellX * (cellWidth + widthGap) + leftMargin;
                 y = vStartPadding + myCellY * (cellHeight + heightGap) + topMargin;
             } else {

File: src/com/android/launcher3/PreloadReceiver.java
Patch:
@@ -31,7 +31,7 @@ public class PreloadReceiver extends BroadcastReceiver {
 
     @Override
     public void onReceive(Context context, Intent intent) {
-        final LauncherApplication app = (LauncherApplication) context.getApplicationContext();
+        final LauncherAppState app = LauncherAppState.getInstance();
         final LauncherProvider provider = app.getLauncherProvider();
         if (provider != null) {
             String name = intent.getStringExtra(EXTRA_WORKSPACE_NAME);

File: src/com/android/launcher3/UninstallShortcutReceiver.java
Patch:
@@ -81,12 +81,12 @@ static void disableAndFlushUninstallQueue(Context context) {
 
     private static void processUninstallShortcut(Context context,
             PendingUninstallShortcutInfo pendingInfo) {
-        String spKey = LauncherApplication.getSharedPreferencesKey();
+        String spKey = LauncherAppState.getSharedPreferencesKey();
         SharedPreferences sharedPrefs = context.getSharedPreferences(spKey, Context.MODE_PRIVATE);
 
         final Intent data = pendingInfo.data;
 
-        LauncherApplication app = (LauncherApplication) context.getApplicationContext();
+        LauncherAppState app = LauncherAppState.getInstance();
         synchronized (app) {
             removeShortcut(context, data, sharedPrefs);
         }

File: src/com/android/launcher3/WidgetPreviewLoader.java
Patch:
@@ -143,7 +143,7 @@ public WidgetPreviewLoader(Launcher launcher) {
         mContext = mLauncher = launcher;
         mPackageManager = mContext.getPackageManager();
         mAppIconSize = mContext.getResources().getDimensionPixelSize(R.dimen.app_icon_size);
-        LauncherApplication app = (LauncherApplication) launcher.getApplicationContext();
+        LauncherAppState app = LauncherAppState.getInstance();
         mIconCache = app.getIconCache();
         mDb = app.getWidgetPreviewCacheDb();
         mLoadedPreviews = new HashMap<String, WeakReference<Bitmap>>();

File: src/com/android/launcher3/InstallShortcutReceiver.java
Patch:
@@ -253,8 +253,8 @@ private static void processInstallShortcut(Context context,
             // Try adding to the workspace screens incrementally, starting at the default or center
             // screen and alternating between +1, -1, +2, -2, etc. (using ~ ceil(i/2f)*(-1)^(i-1))
             final int screen = Launcher.DEFAULT_SCREEN;
-            for (int i = 0; i < (2 * Launcher.SCREEN_COUNT) + 1 && !found; ++i) {
-                int si = screen + (int) ((i / 2f) + 0.5f) * ((i % 2 == 1) ? 1 : -1);
+            for (int i = 0; i < Launcher.SCREEN_COUNT; i++) {
+                int si = i;
                 if (0 <= si && si < Launcher.SCREEN_COUNT) {
                     found = installShortcut(context, data, items, name, intent, si, exists, sp,
                             result);

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -402,9 +402,11 @@ private void onDrop(final ShortcutInfo item, DragView animateView, Rect finalRec
                     postAnimationRunnable, DragLayer.ANIMATION_END_DISAPPEAR, null);
             addItem(item);
             mHiddenItems.add(item);
+            mFolder.hideItem(item);
             postDelayed(new Runnable() {
                 public void run() {
                     mHiddenItems.remove(item);
+                    mFolder.showItem(item);
                     invalidate();
                 }
             }, DROP_IN_ANIMATION_DURATION);
@@ -535,7 +537,7 @@ protected void dispatchDraw(Canvas canvas) {
         if (mFolder == null) return;
         if (mFolder.getItemCount() == 0 && !mAnimating) return;
 
-        ArrayList<View> items = mFolder.getItemsInReadingOrder(false);
+        ArrayList<View> items = mFolder.getItemsInReadingOrder();
         Drawable d;
         TextView v;
 

File: src/com/android/launcher2/FastBitmapDrawable.java
Patch:
@@ -45,7 +45,8 @@ class FastBitmapDrawable extends Drawable {
     @Override
     public void draw(Canvas canvas) {
         final Rect r = getBounds();
-        canvas.drawBitmap(mBitmap, r.left, r.top, mPaint);
+        // Draw the bitmap into the bounding rect
+        canvas.drawBitmap(mBitmap, null, r, mPaint);
     }
 
     @Override

File: src/com/android/launcher2/FastBitmapDrawable.java
Patch:
@@ -45,7 +45,8 @@ class FastBitmapDrawable extends Drawable {
     @Override
     public void draw(Canvas canvas) {
         final Rect r = getBounds();
-        canvas.drawBitmap(mBitmap, r.left, r.top, mPaint);
+        // Draw the bitmap into the bounding rect
+        canvas.drawBitmap(mBitmap, null, r, mPaint);
     }
 
     @Override

File: src/com/android/launcher2/FastBitmapDrawable.java
Patch:
@@ -45,7 +45,8 @@ class FastBitmapDrawable extends Drawable {
     @Override
     public void draw(Canvas canvas) {
         final Rect r = getBounds();
-        canvas.drawBitmap(mBitmap, r.left, r.top, mPaint);
+        // Draw the bitmap into the bounding rect
+        canvas.drawBitmap(mBitmap, null, r, mPaint);
     }
 
     @Override

File: src/com/android/launcher2/LauncherAppWidgetHost.java
Patch:
@@ -50,6 +50,6 @@ public void stopListening() {
     protected void onProvidersChanged() {
         // Once we get the message that widget packages are updated, we need to rebind items
         // in AppsCustomize accordingly.
-        mLauncher.bindPackagesUpdated();
+        mLauncher.bindPackagesUpdated(LauncherModel.getSortedWidgetsAndShortcuts(mLauncher));
     }
 }

File: src/com/android/launcher2/LauncherAppWidgetHost.java
Patch:
@@ -50,6 +50,6 @@ public void stopListening() {
     protected void onProvidersChanged() {
         // Once we get the message that widget packages are updated, we need to rebind items
         // in AppsCustomize accordingly.
-        mLauncher.bindPackagesUpdated();
+        mLauncher.bindPackagesUpdated(LauncherModel.getSortedWidgetsAndShortcuts(mLauncher));
     }
 }

File: src/com/android/launcher2/LauncherAppWidgetHost.java
Patch:
@@ -50,6 +50,6 @@ public void stopListening() {
     protected void onProvidersChanged() {
         // Once we get the message that widget packages are updated, we need to rebind items
         // in AppsCustomize accordingly.
-        mLauncher.bindPackagesUpdated();
+        mLauncher.bindPackagesUpdated(LauncherModel.getSortedWidgetsAndShortcuts(mLauncher));
     }
 }

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -203,7 +203,7 @@ public void run() {
                                 final int newAppsScreen = sharedPrefs.getInt(
                                         NEW_APPS_PAGE_KEY, screen);
                                 SharedPreferences.Editor editor = sharedPrefs.edit();
-                                if (newAppsScreen == screen) {
+                                if (newAppsScreen == -1 || newAppsScreen == screen) {
                                     addToStringSet(sharedPrefs,
                                         editor, NEW_APPS_LIST_KEY, intent.toUri(0));
                                 }

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -203,7 +203,7 @@ public void run() {
                                 final int newAppsScreen = sharedPrefs.getInt(
                                         NEW_APPS_PAGE_KEY, screen);
                                 SharedPreferences.Editor editor = sharedPrefs.edit();
-                                if (newAppsScreen == screen) {
+                                if (newAppsScreen == -1 || newAppsScreen == screen) {
                                     addToStringSet(sharedPrefs,
                                         editor, NEW_APPS_LIST_KEY, intent.toUri(0));
                                 }

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -203,7 +203,7 @@ public void run() {
                                 final int newAppsScreen = sharedPrefs.getInt(
                                         NEW_APPS_PAGE_KEY, screen);
                                 SharedPreferences.Editor editor = sharedPrefs.edit();
-                                if (newAppsScreen == screen) {
+                                if (newAppsScreen == -1 || newAppsScreen == screen) {
                                     addToStringSet(sharedPrefs,
                                         editor, NEW_APPS_LIST_KEY, intent.toUri(0));
                                 }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3657,21 +3657,21 @@ void removeItemsByPackageName(final ArrayList<String> packages) {
                 if (tag instanceof ShortcutInfo) {
                     ShortcutInfo info = (ShortcutInfo) tag;
                     ComponentName cn = info.intent.getComponent();
-                    if (packageNames.contains(cn.getPackageName())) {
+                    if ((cn != null) && packageNames.contains(cn.getPackageName())) {
                         cns.add(cn);
                     }
                 } else if (tag instanceof FolderInfo) {
                     FolderInfo info = (FolderInfo) tag;
                     for (ShortcutInfo s : info.contents) {
                         ComponentName cn = s.intent.getComponent();
-                        if (packageNames.contains(cn.getPackageName())) {
+                        if ((cn != null) && packageNames.contains(cn.getPackageName())) {
                             cns.add(cn);
                         }
                     }
                 } else if (tag instanceof LauncherAppWidgetInfo) {
                     LauncherAppWidgetInfo info = (LauncherAppWidgetInfo) tag;
                     ComponentName cn = info.providerName;
-                    if (packageNames.contains(cn.getPackageName())) {
+                    if ((cn != null) && packageNames.contains(cn.getPackageName())) {
                         cns.add(cn);
                     }
                 }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3659,21 +3659,21 @@ void removeItemsByPackageName(final ArrayList<String> packages) {
                 if (tag instanceof ShortcutInfo) {
                     ShortcutInfo info = (ShortcutInfo) tag;
                     ComponentName cn = info.intent.getComponent();
-                    if (packageNames.contains(cn.getPackageName())) {
+                    if ((cn != null) && packageNames.contains(cn.getPackageName())) {
                         cns.add(cn);
                     }
                 } else if (tag instanceof FolderInfo) {
                     FolderInfo info = (FolderInfo) tag;
                     for (ShortcutInfo s : info.contents) {
                         ComponentName cn = s.intent.getComponent();
-                        if (packageNames.contains(cn.getPackageName())) {
+                        if ((cn != null) && packageNames.contains(cn.getPackageName())) {
                             cns.add(cn);
                         }
                     }
                 } else if (tag instanceof LauncherAppWidgetInfo) {
                     LauncherAppWidgetInfo info = (LauncherAppWidgetInfo) tag;
                     ComponentName cn = info.providerName;
-                    if (packageNames.contains(cn.getPackageName())) {
+                    if ((cn != null) && packageNames.contains(cn.getPackageName())) {
                         cns.add(cn);
                     }
                 }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3659,21 +3659,21 @@ void removeItemsByPackageName(final ArrayList<String> packages) {
                 if (tag instanceof ShortcutInfo) {
                     ShortcutInfo info = (ShortcutInfo) tag;
                     ComponentName cn = info.intent.getComponent();
-                    if (packageNames.contains(cn.getPackageName())) {
+                    if ((cn != null) && packageNames.contains(cn.getPackageName())) {
                         cns.add(cn);
                     }
                 } else if (tag instanceof FolderInfo) {
                     FolderInfo info = (FolderInfo) tag;
                     for (ShortcutInfo s : info.contents) {
                         ComponentName cn = s.intent.getComponent();
-                        if (packageNames.contains(cn.getPackageName())) {
+                        if ((cn != null) && packageNames.contains(cn.getPackageName())) {
                             cns.add(cn);
                         }
                     }
                 } else if (tag instanceof LauncherAppWidgetInfo) {
                     LauncherAppWidgetInfo info = (LauncherAppWidgetInfo) tag;
                     ComponentName cn = info.providerName;
-                    if (packageNames.contains(cn.getPackageName())) {
+                    if ((cn != null) && packageNames.contains(cn.getPackageName())) {
                         cns.add(cn);
                     }
                 }

File: src/com/android/launcher2/Folder.java
Patch:
@@ -441,6 +441,9 @@ public void onAnimationEnd(Animator animation) {
                     cling.bringToFront();
                 }
                 setFocusOnFirstChild();
+                setAlpha(1);
+                setScaleX(1);
+                setScaleY(1);
             }
         });
         oa.setDuration(mExpandDuration);

File: src/com/android/launcher2/Folder.java
Patch:
@@ -441,6 +441,9 @@ public void onAnimationEnd(Animator animation) {
                     cling.bringToFront();
                 }
                 setFocusOnFirstChild();
+                setAlpha(1);
+                setScaleX(1);
+                setScaleY(1);
             }
         });
         oa.setDuration(mExpandDuration);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -288,7 +288,6 @@ private enum State { NONE, WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOAD
     private static Drawable.ConstantState[] sAppMarketIcon = new Drawable.ConstantState[2];
 
     private Drawable mWorkspaceBackgroundDrawable;
-    private Drawable mBlackBackgroundDrawable;
 
     private final ArrayList<Integer> mSynchronouslyBoundPages = new ArrayList<Integer>();
 
@@ -959,7 +958,6 @@ private void setupViews() {
 
         mLauncherView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);
         mWorkspaceBackgroundDrawable = getResources().getDrawable(R.drawable.workspace_bg);
-        mBlackBackgroundDrawable = new ColorDrawable(Color.BLACK);
 
         // Setup the drag layer
         mDragLayer.setup(this, dragController);
@@ -2433,7 +2431,7 @@ void disableWallpaperIfInAllApps() {
 
     private void setWorkspaceBackground(boolean workspace) {
         mLauncherView.setBackground(workspace ?
-                mWorkspaceBackgroundDrawable : mBlackBackgroundDrawable);
+                mWorkspaceBackgroundDrawable : null);
     }
 
     void updateWallpaperVisibility(boolean visible) {

File: src/com/android/launcher2/Folder.java
Patch:
@@ -441,6 +441,9 @@ public void onAnimationEnd(Animator animation) {
                     cling.bringToFront();
                 }
                 setFocusOnFirstChild();
+                setAlpha(1);
+                setScaleX(1);
+                setScaleY(1);
             }
         });
         oa.setDuration(mExpandDuration);

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -112,7 +112,6 @@ public void applyFromAppWidgetProviderInfo(AppWidgetProviderInfo info,
         if (maxWidth > -1) {
             image.setMaxWidth(maxWidth);
         }
-        image.setContentDescription(info.label);
         final TextView name = (TextView) findViewById(R.id.widget_name);
         name.setText(info.label);
         final TextView dims = (TextView) findViewById(R.id.widget_dims);
@@ -130,7 +129,6 @@ public void applyFromResolveInfo(
         mInfo = info;
         CharSequence label = info.loadLabel(pm);
         final ImageView image = (ImageView) findViewById(R.id.widget_preview);
-        image.setContentDescription(label);
         final TextView name = (TextView) findViewById(R.id.widget_name);
         name.setText(label);
         final TextView dims = (TextView) findViewById(R.id.widget_dims);

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -448,6 +448,7 @@ public void onPackagesUpdated() {
         Intent shortcutsIntent = new Intent(Intent.ACTION_CREATE_SHORTCUT);
         List<ResolveInfo> shortcuts = mPackageManager.queryIntentActivities(shortcutsIntent, 0);
         for (AppWidgetProviderInfo widget : widgets) {
+            widget.label = widget.label.trim();
             if (widget.minWidth > 0 && widget.minHeight > 0) {
                 // Ensure that all widgets we show can be added on a workspace of this size
                 int[] spanXY = Launcher.getSpanForWidget(mLauncher, widget);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -773,7 +773,7 @@ protected void onPageEndMoving() {
             if (isSmall()) {
                 // If we are in springloaded mode, then force an event to check if the current touch
                 // is under a new page (to scroll to)
-                mDragController.forceMoveEvent();
+                mDragController.forceTouchMove();
             }
         } else {
             // If we are not mid-dragging, hide the page outlines if we are on a large screen

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -773,7 +773,7 @@ protected void onPageEndMoving() {
             if (isSmall()) {
                 // If we are in springloaded mode, then force an event to check if the current touch
                 // is under a new page (to scroll to)
-                mDragController.forceMoveEvent();
+                mDragController.forceTouchMove();
             }
         } else {
             // If we are not mid-dragging, hide the page outlines if we are on a large screen

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -773,7 +773,7 @@ protected void onPageEndMoving() {
             if (isSmall()) {
                 // If we are in springloaded mode, then force an event to check if the current touch
                 // is under a new page (to scroll to)
-                mDragController.forceMoveEvent();
+                mDragController.forceTouchMove();
             }
         } else {
             // If we are not mid-dragging, hide the page outlines if we are on a large screen

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -773,7 +773,7 @@ protected void onPageEndMoving() {
             if (isSmall()) {
                 // If we are in springloaded mode, then force an event to check if the current touch
                 // is under a new page (to scroll to)
-                mDragController.forceMoveEvent();
+                mDragController.forceTouchMove();
             }
         } else {
             // If we are not mid-dragging, hide the page outlines if we are on a large screen

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -444,7 +444,8 @@ public void snapToWidget(boolean animate) {
                     newHeight);
             PropertyValuesHolder x = PropertyValuesHolder.ofInt("x", lp.x, newX);
             PropertyValuesHolder y = PropertyValuesHolder.ofInt("y", lp.y, newY);
-            ObjectAnimator oa = LauncherAnimUtils.ofPropertyValuesHolder(lp, width, height, x, y);
+            ObjectAnimator oa =
+                    LauncherAnimUtils.ofPropertyValuesHolder(lp, this, width, height, x, y);
             ObjectAnimator leftOa = LauncherAnimUtils.ofFloat(mLeftHandle, "alpha", 1.0f);
             ObjectAnimator rightOa = LauncherAnimUtils.ofFloat(mRightHandle, "alpha", 1.0f);
             ObjectAnimator topOa = LauncherAnimUtils.ofFloat(mTopHandle, "alpha", 1.0f);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -241,7 +241,7 @@ public CellLayout(Context context, AttributeSet attrs, int defStyle) {
 
         for (int i = 0; i < mDragOutlineAnims.length; i++) {
             final InterruptibleInOutAnimator anim =
-                new InterruptibleInOutAnimator(duration, fromAlphaValue, toAlphaValue);
+                new InterruptibleInOutAnimator(this, duration, fromAlphaValue, toAlphaValue);
             anim.getAnimator().setInterpolator(mEaseOutInterpolator);
             final int thisIndex = i;
             anim.getAnimator().addUpdateListener(new AnimatorUpdateListener() {
@@ -1128,7 +1128,7 @@ public boolean animateChildToPosition(final View child, int cellX, int cellY, in
                 return true;
             }
 
-            ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1f);
+            ValueAnimator va = LauncherAnimUtils.ofFloat(child, 0f, 1f);
             va.setDuration(duration);
             mReorderAnimators.put(lp, va);
 
@@ -2324,7 +2324,7 @@ void animate() {
             if (finalDeltaX == 0 && finalDeltaY == 0) {
                 return;
             }
-            ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1f);
+            ValueAnimator va = LauncherAnimUtils.ofFloat(child, 0f, 1f);
             a = va;
             va.setRepeatMode(ValueAnimator.REVERSE);
             va.setRepeatCount(ValueAnimator.INFINITE);

File: src/com/android/launcher2/DragView.java
Patch:
@@ -80,7 +80,7 @@ public DragView(Launcher launcher, Bitmap bitmap, int registrationX, int registr
         setScaleY(initialScale);
 
         // Animate the view into the correct position
-        mAnim = LauncherAnimUtils.ofFloat(0.0f, 1.0f);
+        mAnim = LauncherAnimUtils.ofFloat(this, 0f, 1f);
         mAnim.setDuration(150);
         mAnim.addUpdateListener(new AnimatorUpdateListener() {
             @Override
@@ -203,7 +203,7 @@ public void setCrossFadeBitmap(Bitmap crossFadeBitmap) {
     }
 
     public void crossFade(int duration) {
-        ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1f);
+        ValueAnimator va = LauncherAnimUtils.ofFloat(this, 0f, 1f);
         va.setDuration(duration);
         va.setInterpolator(new DecelerateInterpolator(1.5f));
         va.addUpdateListener(new AnimatorUpdateListener() {

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -199,7 +199,7 @@ public void animateToAcceptState() {
             if (mNeutralAnimator != null) {
                 mNeutralAnimator.cancel();
             }
-            mAcceptAnimator = LauncherAnimUtils.ofFloat(0f, 1f);
+            mAcceptAnimator = LauncherAnimUtils.ofFloat(mCellLayout, 0f, 1f);
             mAcceptAnimator.setDuration(CONSUMPTION_ANIMATION_DURATION);
 
             final int previewSize = sPreviewSize;
@@ -228,7 +228,7 @@ public void animateToNaturalState() {
             if (mAcceptAnimator != null) {
                 mAcceptAnimator.cancel();
             }
-            mNeutralAnimator = LauncherAnimUtils.ofFloat(0f, 1f);
+            mNeutralAnimator = LauncherAnimUtils.ofFloat(mCellLayout, 0f, 1f);
             mNeutralAnimator.setDuration(CONSUMPTION_ANIMATION_DURATION);
 
             final int previewSize = sPreviewSize;
@@ -573,7 +573,7 @@ private void animateFirstItem(final Drawable d, int duration, final boolean reve
         final float transY0 = (mAvailableSpaceInPreview - d.getIntrinsicHeight()) / 2;
         mAnimParams.drawable = d;
 
-        ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1.0f);
+        ValueAnimator va = LauncherAnimUtils.ofFloat(this, 0f, 1.0f);
         va.addUpdateListener(new AnimatorUpdateListener(){
             public void onAnimationUpdate(ValueAnimator animation) {
                 float progress = (Float) animation.getAnimatedValue();

File: src/com/android/launcher2/InterruptibleInOutAnimator.java
Patch:
@@ -19,6 +19,7 @@
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.animation.ValueAnimator;
+import android.view.View;
 
 /**
  * A convenience class for two-way animations, e.g. a fadeIn/fadeOut animation.
@@ -44,8 +45,8 @@ public class InterruptibleInOutAnimator {
     // TODO: This isn't really necessary, but is here to help diagnose a bug in the drag viz
     private int mDirection = STOPPED;
 
-    public InterruptibleInOutAnimator(long duration, float fromValue, float toValue) {
-        mAnimator = LauncherAnimUtils.ofFloat(fromValue, toValue).setDuration(duration);
+    public InterruptibleInOutAnimator(View view, long duration, float fromValue, float toValue) {
+        mAnimator = LauncherAnimUtils.ofFloat(view, fromValue, toValue).setDuration(duration);
         mOriginalDuration = duration;
         mOriginalFromValue = fromValue;
         mOriginalToValue = toValue;

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -77,7 +77,6 @@ private void prepareStartAnimation(View v) {
         // Enable the hw layers before the animation starts (will be disabled in the onAnimationEnd
         // callback below)
         v.setLayerType(View.LAYER_TYPE_HARDWARE, null);
-        v.buildLayer();
     }
 
     private void setupAnimation(ObjectAnimator anim, final View v) {

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -444,7 +444,8 @@ public void snapToWidget(boolean animate) {
                     newHeight);
             PropertyValuesHolder x = PropertyValuesHolder.ofInt("x", lp.x, newX);
             PropertyValuesHolder y = PropertyValuesHolder.ofInt("y", lp.y, newY);
-            ObjectAnimator oa = LauncherAnimUtils.ofPropertyValuesHolder(lp, width, height, x, y);
+            ObjectAnimator oa =
+                    LauncherAnimUtils.ofPropertyValuesHolder(lp, this, width, height, x, y);
             ObjectAnimator leftOa = LauncherAnimUtils.ofFloat(mLeftHandle, "alpha", 1.0f);
             ObjectAnimator rightOa = LauncherAnimUtils.ofFloat(mRightHandle, "alpha", 1.0f);
             ObjectAnimator topOa = LauncherAnimUtils.ofFloat(mTopHandle, "alpha", 1.0f);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -241,7 +241,7 @@ public CellLayout(Context context, AttributeSet attrs, int defStyle) {
 
         for (int i = 0; i < mDragOutlineAnims.length; i++) {
             final InterruptibleInOutAnimator anim =
-                new InterruptibleInOutAnimator(duration, fromAlphaValue, toAlphaValue);
+                new InterruptibleInOutAnimator(this, duration, fromAlphaValue, toAlphaValue);
             anim.getAnimator().setInterpolator(mEaseOutInterpolator);
             final int thisIndex = i;
             anim.getAnimator().addUpdateListener(new AnimatorUpdateListener() {
@@ -1128,7 +1128,7 @@ public boolean animateChildToPosition(final View child, int cellX, int cellY, in
                 return true;
             }
 
-            ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1f);
+            ValueAnimator va = LauncherAnimUtils.ofFloat(child, 0f, 1f);
             va.setDuration(duration);
             mReorderAnimators.put(lp, va);
 
@@ -2324,7 +2324,7 @@ void animate() {
             if (finalDeltaX == 0 && finalDeltaY == 0) {
                 return;
             }
-            ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1f);
+            ValueAnimator va = LauncherAnimUtils.ofFloat(child, 0f, 1f);
             a = va;
             va.setRepeatMode(ValueAnimator.REVERSE);
             va.setRepeatCount(ValueAnimator.INFINITE);

File: src/com/android/launcher2/DragView.java
Patch:
@@ -80,7 +80,7 @@ public DragView(Launcher launcher, Bitmap bitmap, int registrationX, int registr
         setScaleY(initialScale);
 
         // Animate the view into the correct position
-        mAnim = LauncherAnimUtils.ofFloat(0.0f, 1.0f);
+        mAnim = LauncherAnimUtils.ofFloat(this, 0f, 1f);
         mAnim.setDuration(150);
         mAnim.addUpdateListener(new AnimatorUpdateListener() {
             @Override
@@ -203,7 +203,7 @@ public void setCrossFadeBitmap(Bitmap crossFadeBitmap) {
     }
 
     public void crossFade(int duration) {
-        ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1f);
+        ValueAnimator va = LauncherAnimUtils.ofFloat(this, 0f, 1f);
         va.setDuration(duration);
         va.setInterpolator(new DecelerateInterpolator(1.5f));
         va.addUpdateListener(new AnimatorUpdateListener() {

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -199,7 +199,7 @@ public void animateToAcceptState() {
             if (mNeutralAnimator != null) {
                 mNeutralAnimator.cancel();
             }
-            mAcceptAnimator = LauncherAnimUtils.ofFloat(0f, 1f);
+            mAcceptAnimator = LauncherAnimUtils.ofFloat(mCellLayout, 0f, 1f);
             mAcceptAnimator.setDuration(CONSUMPTION_ANIMATION_DURATION);
 
             final int previewSize = sPreviewSize;
@@ -228,7 +228,7 @@ public void animateToNaturalState() {
             if (mAcceptAnimator != null) {
                 mAcceptAnimator.cancel();
             }
-            mNeutralAnimator = LauncherAnimUtils.ofFloat(0f, 1f);
+            mNeutralAnimator = LauncherAnimUtils.ofFloat(mCellLayout, 0f, 1f);
             mNeutralAnimator.setDuration(CONSUMPTION_ANIMATION_DURATION);
 
             final int previewSize = sPreviewSize;
@@ -573,7 +573,7 @@ private void animateFirstItem(final Drawable d, int duration, final boolean reve
         final float transY0 = (mAvailableSpaceInPreview - d.getIntrinsicHeight()) / 2;
         mAnimParams.drawable = d;
 
-        ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1.0f);
+        ValueAnimator va = LauncherAnimUtils.ofFloat(this, 0f, 1.0f);
         va.addUpdateListener(new AnimatorUpdateListener(){
             public void onAnimationUpdate(ValueAnimator animation) {
                 float progress = (Float) animation.getAnimatedValue();

File: src/com/android/launcher2/InterruptibleInOutAnimator.java
Patch:
@@ -19,6 +19,7 @@
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.animation.ValueAnimator;
+import android.view.View;
 
 /**
  * A convenience class for two-way animations, e.g. a fadeIn/fadeOut animation.
@@ -44,8 +45,8 @@ public class InterruptibleInOutAnimator {
     // TODO: This isn't really necessary, but is here to help diagnose a bug in the drag viz
     private int mDirection = STOPPED;
 
-    public InterruptibleInOutAnimator(long duration, float fromValue, float toValue) {
-        mAnimator = LauncherAnimUtils.ofFloat(fromValue, toValue).setDuration(duration);
+    public InterruptibleInOutAnimator(View view, long duration, float fromValue, float toValue) {
+        mAnimator = LauncherAnimUtils.ofFloat(view, fromValue, toValue).setDuration(duration);
         mOriginalDuration = duration;
         mOriginalFromValue = fromValue;
         mOriginalToValue = toValue;

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -77,7 +77,6 @@ private void prepareStartAnimation(View v) {
         // Enable the hw layers before the animation starts (will be disabled in the onAnimationEnd
         // callback below)
         v.setLayerType(View.LAYER_TYPE_HARDWARE, null);
-        v.buildLayer();
     }
 
     private void setupAnimation(ObjectAnimator anim, final View v) {

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -444,7 +444,8 @@ public void snapToWidget(boolean animate) {
                     newHeight);
             PropertyValuesHolder x = PropertyValuesHolder.ofInt("x", lp.x, newX);
             PropertyValuesHolder y = PropertyValuesHolder.ofInt("y", lp.y, newY);
-            ObjectAnimator oa = LauncherAnimUtils.ofPropertyValuesHolder(lp, width, height, x, y);
+            ObjectAnimator oa =
+                    LauncherAnimUtils.ofPropertyValuesHolder(lp, this, width, height, x, y);
             ObjectAnimator leftOa = LauncherAnimUtils.ofFloat(mLeftHandle, "alpha", 1.0f);
             ObjectAnimator rightOa = LauncherAnimUtils.ofFloat(mRightHandle, "alpha", 1.0f);
             ObjectAnimator topOa = LauncherAnimUtils.ofFloat(mTopHandle, "alpha", 1.0f);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -241,7 +241,7 @@ public CellLayout(Context context, AttributeSet attrs, int defStyle) {
 
         for (int i = 0; i < mDragOutlineAnims.length; i++) {
             final InterruptibleInOutAnimator anim =
-                new InterruptibleInOutAnimator(duration, fromAlphaValue, toAlphaValue);
+                new InterruptibleInOutAnimator(this, duration, fromAlphaValue, toAlphaValue);
             anim.getAnimator().setInterpolator(mEaseOutInterpolator);
             final int thisIndex = i;
             anim.getAnimator().addUpdateListener(new AnimatorUpdateListener() {
@@ -1128,7 +1128,7 @@ public boolean animateChildToPosition(final View child, int cellX, int cellY, in
                 return true;
             }
 
-            ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1f);
+            ValueAnimator va = LauncherAnimUtils.ofFloat(child, 0f, 1f);
             va.setDuration(duration);
             mReorderAnimators.put(lp, va);
 
@@ -2324,7 +2324,7 @@ void animate() {
             if (finalDeltaX == 0 && finalDeltaY == 0) {
                 return;
             }
-            ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1f);
+            ValueAnimator va = LauncherAnimUtils.ofFloat(child, 0f, 1f);
             a = va;
             va.setRepeatMode(ValueAnimator.REVERSE);
             va.setRepeatCount(ValueAnimator.INFINITE);

File: src/com/android/launcher2/DragView.java
Patch:
@@ -80,7 +80,7 @@ public DragView(Launcher launcher, Bitmap bitmap, int registrationX, int registr
         setScaleY(initialScale);
 
         // Animate the view into the correct position
-        mAnim = LauncherAnimUtils.ofFloat(0.0f, 1.0f);
+        mAnim = LauncherAnimUtils.ofFloat(this, 0f, 1f);
         mAnim.setDuration(150);
         mAnim.addUpdateListener(new AnimatorUpdateListener() {
             @Override
@@ -203,7 +203,7 @@ public void setCrossFadeBitmap(Bitmap crossFadeBitmap) {
     }
 
     public void crossFade(int duration) {
-        ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1f);
+        ValueAnimator va = LauncherAnimUtils.ofFloat(this, 0f, 1f);
         va.setDuration(duration);
         va.setInterpolator(new DecelerateInterpolator(1.5f));
         va.addUpdateListener(new AnimatorUpdateListener() {

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -199,7 +199,7 @@ public void animateToAcceptState() {
             if (mNeutralAnimator != null) {
                 mNeutralAnimator.cancel();
             }
-            mAcceptAnimator = LauncherAnimUtils.ofFloat(0f, 1f);
+            mAcceptAnimator = LauncherAnimUtils.ofFloat(mCellLayout, 0f, 1f);
             mAcceptAnimator.setDuration(CONSUMPTION_ANIMATION_DURATION);
 
             final int previewSize = sPreviewSize;
@@ -228,7 +228,7 @@ public void animateToNaturalState() {
             if (mAcceptAnimator != null) {
                 mAcceptAnimator.cancel();
             }
-            mNeutralAnimator = LauncherAnimUtils.ofFloat(0f, 1f);
+            mNeutralAnimator = LauncherAnimUtils.ofFloat(mCellLayout, 0f, 1f);
             mNeutralAnimator.setDuration(CONSUMPTION_ANIMATION_DURATION);
 
             final int previewSize = sPreviewSize;
@@ -573,7 +573,7 @@ private void animateFirstItem(final Drawable d, int duration, final boolean reve
         final float transY0 = (mAvailableSpaceInPreview - d.getIntrinsicHeight()) / 2;
         mAnimParams.drawable = d;
 
-        ValueAnimator va = LauncherAnimUtils.ofFloat(0f, 1.0f);
+        ValueAnimator va = LauncherAnimUtils.ofFloat(this, 0f, 1.0f);
         va.addUpdateListener(new AnimatorUpdateListener(){
             public void onAnimationUpdate(ValueAnimator animation) {
                 float progress = (Float) animation.getAnimatedValue();

File: src/com/android/launcher2/InterruptibleInOutAnimator.java
Patch:
@@ -19,6 +19,7 @@
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.animation.ValueAnimator;
+import android.view.View;
 
 /**
  * A convenience class for two-way animations, e.g. a fadeIn/fadeOut animation.
@@ -44,8 +45,8 @@ public class InterruptibleInOutAnimator {
     // TODO: This isn't really necessary, but is here to help diagnose a bug in the drag viz
     private int mDirection = STOPPED;
 
-    public InterruptibleInOutAnimator(long duration, float fromValue, float toValue) {
-        mAnimator = LauncherAnimUtils.ofFloat(fromValue, toValue).setDuration(duration);
+    public InterruptibleInOutAnimator(View view, long duration, float fromValue, float toValue) {
+        mAnimator = LauncherAnimUtils.ofFloat(view, fromValue, toValue).setDuration(duration);
         mOriginalDuration = duration;
         mOriginalFromValue = fromValue;
         mOriginalToValue = toValue;

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -77,7 +77,6 @@ private void prepareStartAnimation(View v) {
         // Enable the hw layers before the animation starts (will be disabled in the onAnimationEnd
         // callback below)
         v.setLayerType(View.LAYER_TYPE_HARDWARE, null);
-        v.buildLayer();
     }
 
     private void setupAnimation(ObjectAnimator anim, final View v) {

File: src/com/android/launcher2/PackageChangedReceiver.java
Patch:
@@ -13,6 +13,7 @@ public void onReceive(final Context context, Intent intent) {
             // they sent us a bad intent
             return;
         }
-        WidgetPreviewLoader.removeFromDb(context, packageName);
+        LauncherApplication app = (LauncherApplication) context.getApplicationContext();
+        WidgetPreviewLoader.removeFromDb(app.getWidgetPreviewCacheDb(), packageName);
     }
 }

File: src/com/android/launcher2/PackageChangedReceiver.java
Patch:
@@ -13,6 +13,7 @@ public void onReceive(final Context context, Intent intent) {
             // they sent us a bad intent
             return;
         }
-        WidgetPreviewLoader.removeFromDb(context, packageName);
+        LauncherApplication app = (LauncherApplication) context.getApplicationContext();
+        WidgetPreviewLoader.removeFromDb(app.getWidgetPreviewCacheDb(), packageName);
     }
 }

File: src/com/android/launcher2/PackageChangedReceiver.java
Patch:
@@ -13,6 +13,7 @@ public void onReceive(final Context context, Intent intent) {
             // they sent us a bad intent
             return;
         }
-        WidgetPreviewLoader.removeFromDb(context, packageName);
+        LauncherApplication app = (LauncherApplication) context.getApplicationContext();
+        WidgetPreviewLoader.removeFromDb(app.getWidgetPreviewCacheDb(), packageName);
     }
 }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1700,7 +1700,6 @@ public void onAnimationUpdate(float a, float b) {
                     }
                 }
             }
-            buildPageHardwareLayers();
             anim.setStartDelay(delay);
         }
 
@@ -1720,6 +1719,7 @@ public void onAnimationUpdate(float a, float b) {
     @Override
     public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean toWorkspace) {
         mIsSwitchingState = true;
+        updateChildrenLayersEnabled(false);
         cancelScrollingIndicatorAnimations();
     }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1700,7 +1700,6 @@ public void onAnimationUpdate(float a, float b) {
                     }
                 }
             }
-            buildPageHardwareLayers();
             anim.setStartDelay(delay);
         }
 
@@ -1720,6 +1719,7 @@ public void onAnimationUpdate(float a, float b) {
     @Override
     public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean toWorkspace) {
         mIsSwitchingState = true;
+        updateChildrenLayersEnabled(false);
         cancelScrollingIndicatorAnimations();
     }
 

File: src/com/android/launcher2/WidgetPreviewLoader.java
Patch:
@@ -268,12 +268,12 @@ public WidgetPreviewCacheDb(Context context) {
 
         @Override
         public void onCreate(SQLiteDatabase database) {
-            database.execSQL("CREATE TABLE " + TABLE_NAME + " (" +
+            database.execSQL("CREATE TABLE IF NOT EXISTS " + TABLE_NAME + " (" +
                     COLUMN_NAME + " TEXT NOT NULL, " +
                     COLUMN_SIZE + " TEXT NOT NULL, " +
                     COLUMN_PREVIEW_BITMAP + " BLOB NOT NULL, " +
                     "PRIMARY KEY (" + COLUMN_NAME + ", " + COLUMN_SIZE + ") " +
-                    ") IF NOT EXISTS;");
+                    ");");
         }
 
         @Override

File: src/com/android/launcher2/WidgetPreviewLoader.java
Patch:
@@ -273,7 +273,7 @@ public void onCreate(SQLiteDatabase database) {
                     COLUMN_SIZE + " TEXT NOT NULL, " +
                     COLUMN_PREVIEW_BITMAP + " BLOB NOT NULL, " +
                     "PRIMARY KEY (" + COLUMN_NAME + ", " + COLUMN_SIZE + ") " +
-                    ");");
+                    ") IF NOT EXISTS;");
         }
 
         @Override

File: src/com/android/launcher2/WidgetPreviewLoader.java
Patch:
@@ -274,7 +274,7 @@ public void onCreate(SQLiteDatabase database) {
                     COLUMN_SIZE + " TEXT NOT NULL, " +
                     COLUMN_PREVIEW_BITMAP + " BLOB NOT NULL, " +
                     "PRIMARY KEY (" + COLUMN_NAME + ", " + COLUMN_SIZE + ") " +
-                    ");");
+                    ") IF NOT EXISTS;");
         }
 
         @Override

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -90,7 +90,7 @@ void cleanup(boolean cancelled) {
         if (generatedImages != null) {
             if (cancelled) {
                 for (int i = 0; i < generatedImages.size(); i++) {
-                    widgetPreviewLoader.releaseBitmap(items.get(i), generatedImages.get(i));
+                    widgetPreviewLoader.recycleBitmap(items.get(i), generatedImages.get(i));
                 }
             }
             generatedImages.clear();

File: src/com/android/launcher2/DeleteDropTarget.java
Patch:
@@ -154,9 +154,9 @@ public void onDragStart(DragSource source, Object info, int dragAction) {
         }
 
         if (isUninstall) {
-            setCompoundDrawablesWithIntrinsicBounds(mUninstallDrawable, null, null, null);
+            setCompoundDrawablesRelativeWithIntrinsicBounds(mUninstallDrawable, null, null, null);
         } else {
-            setCompoundDrawablesWithIntrinsicBounds(mRemoveDrawable, null, null, null);
+            setCompoundDrawablesRelativeWithIntrinsicBounds(mRemoveDrawable, null, null, null);
         }
         mCurrentDrawable = (TransitionDrawable) getCurrentDrawable();
 

File: src/com/android/launcher2/DeleteDropTarget.java
Patch:
@@ -154,9 +154,9 @@ public void onDragStart(DragSource source, Object info, int dragAction) {
         }
 
         if (isUninstall) {
-            setCompoundDrawablesWithIntrinsicBounds(mUninstallDrawable, null, null, null);
+            setCompoundDrawablesRelativeWithIntrinsicBounds(mUninstallDrawable, null, null, null);
         } else {
-            setCompoundDrawablesWithIntrinsicBounds(mRemoveDrawable, null, null, null);
+            setCompoundDrawablesRelativeWithIntrinsicBounds(mRemoveDrawable, null, null, null);
         }
         mCurrentDrawable = (TransitionDrawable) getCurrentDrawable();
 

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1242,6 +1242,7 @@ public void run() {
                                 maxPreviewWidth, maxPreviewHeight, mWidgetCountX);
                     }
                 }
+                layout.setOnLayoutListener(null);
             }
         });
     }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1242,6 +1242,7 @@ public void run() {
                                 maxPreviewWidth, maxPreviewHeight, mWidgetCountX);
                     }
                 }
+                layout.setOnLayoutListener(null);
             }
         });
     }

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -96,13 +96,13 @@ public AppWidgetResizeFrame(Context context,
         mLeftHandle = new ImageView(context);
         mLeftHandle.setImageResource(R.drawable.widget_resize_handle_left);
         lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
-                Gravity.LEFT | Gravity.CENTER_VERTICAL);
+                Gravity.START | Gravity.CENTER_VERTICAL);
         addView(mLeftHandle, lp);
 
         mRightHandle = new ImageView(context);
         mRightHandle.setImageResource(R.drawable.widget_resize_handle_right);
         lp = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 
-                Gravity.RIGHT | Gravity.CENTER_VERTICAL);
+                Gravity.END | Gravity.CENTER_VERTICAL);
         addView(mRightHandle, lp);
 
         mTopHandle = new ImageView(context);

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1451,11 +1451,11 @@ public void syncWidgetPageItems(final int page, final boolean immediate) {
             int ix = i % mWidgetCountX;
             int iy = i / mWidgetCountX;
             GridLayout.LayoutParams lp = new GridLayout.LayoutParams(
-                    GridLayout.spec(iy, GridLayout.LEFT),
+                    GridLayout.spec(iy, GridLayout.START),
                     GridLayout.spec(ix, GridLayout.TOP));
             lp.width = cellWidth;
             lp.height = cellHeight;
-            lp.setGravity(Gravity.TOP | Gravity.LEFT);
+            lp.setGravity(Gravity.TOP | Gravity.START);
             if (ix > 0) lp.leftMargin = mWidgetWidthGap;
             if (iy > 0) lp.topMargin = mWidgetHeightGap;
             layout.addView(widget, lp);

File: src/com/android/launcher2/InfoDropTarget.java
Patch:
@@ -51,7 +51,9 @@ protected void onFinishInflate() {
         Resources r = getResources();
         mHoverColor = r.getColor(R.color.info_target_hover_tint);
         mDrawable = (TransitionDrawable) getCurrentDrawable();
-        mDrawable.setCrossFadeEnabled(true);
+        if (null != mDrawable) {
+            mDrawable.setCrossFadeEnabled(true);
+        }
 
         // Remove the text in the Phone UI in landscape
         int orientation = getResources().getConfiguration().orientation;

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -499,9 +499,10 @@ void showAllAppsCling() {
             int[] pos = mWidgetSpacingLayout.estimateCellPosition(mClingFocusedX, mClingFocusedY);
             mLauncher.getDragLayer().getLocationInDragLayer(this, offset);
             // PagedViews are centered horizontally but top aligned
+            // Note we have to shift the items up now that Launcher sits under the status bar
             pos[0] += (getMeasuredWidth() - mWidgetSpacingLayout.getMeasuredWidth()) / 2 +
                     offset[0];
-            pos[1] += offset[1];
+            pos[1] += offset[1] - mLauncher.getDragLayer().getPaddingTop();
             mLauncher.showFirstRunAllAppsCling(pos);
         }
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3739,7 +3739,9 @@ public void run() {
     }
 
     private void dismissCling(final Cling cling, final String flag, int duration) {
-        if (cling != null && cling.getVisibility() == View.VISIBLE) {
+        // To catch cases where siblings of top-level views are made invisible, just check whether
+        // the cling is directly set to GONE before dismissing it.
+        if (cling != null && cling.getVisibility() != View.GONE) {
             ObjectAnimator anim = LauncherAnimUtils.ofFloat(cling, "alpha", 0f);
             anim.setDuration(duration);
             anim.addListener(new AnimatorListenerAdapter() {

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -499,9 +499,10 @@ void showAllAppsCling() {
             int[] pos = mWidgetSpacingLayout.estimateCellPosition(mClingFocusedX, mClingFocusedY);
             mLauncher.getDragLayer().getLocationInDragLayer(this, offset);
             // PagedViews are centered horizontally but top aligned
+            // Note we have to shift the items up now that Launcher sits under the status bar
             pos[0] += (getMeasuredWidth() - mWidgetSpacingLayout.getMeasuredWidth()) / 2 +
                     offset[0];
-            pos[1] += offset[1];
+            pos[1] += offset[1] - mLauncher.getDragLayer().getPaddingTop();
             mLauncher.showFirstRunAllAppsCling(pos);
         }
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3739,7 +3739,9 @@ public void run() {
     }
 
     private void dismissCling(final Cling cling, final String flag, int duration) {
-        if (cling != null && cling.getVisibility() == View.VISIBLE) {
+        // To catch cases where siblings of top-level views are made invisible, just check whether
+        // the cling is directly set to GONE before dismissing it.
+        if (cling != null && cling.getVisibility() != View.GONE) {
             ObjectAnimator anim = LauncherAnimUtils.ofFloat(cling, "alpha", 0f);
             anim.setDuration(duration);
             anim.addListener(new AnimatorListenerAdapter() {

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -499,9 +499,10 @@ void showAllAppsCling() {
             int[] pos = mWidgetSpacingLayout.estimateCellPosition(mClingFocusedX, mClingFocusedY);
             mLauncher.getDragLayer().getLocationInDragLayer(this, offset);
             // PagedViews are centered horizontally but top aligned
+            // Note we have to shift the items up now that Launcher sits under the status bar
             pos[0] += (getMeasuredWidth() - mWidgetSpacingLayout.getMeasuredWidth()) / 2 +
                     offset[0];
-            pos[1] += offset[1];
+            pos[1] += offset[1] - mLauncher.getDragLayer().getPaddingTop();
             mLauncher.showFirstRunAllAppsCling(pos);
         }
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3739,7 +3739,9 @@ public void run() {
     }
 
     private void dismissCling(final Cling cling, final String flag, int duration) {
-        if (cling != null && cling.getVisibility() == View.VISIBLE) {
+        // To catch cases where siblings of top-level views are made invisible, just check whether
+        // the cling is directly set to GONE before dismissing it.
+        if (cling != null && cling.getVisibility() != View.GONE) {
             ObjectAnimator anim = LauncherAnimUtils.ofFloat(cling, "alpha", 0f);
             anim.setDuration(duration);
             anim.addListener(new AnimatorListenerAdapter() {

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -499,9 +499,10 @@ void showAllAppsCling() {
             int[] pos = mWidgetSpacingLayout.estimateCellPosition(mClingFocusedX, mClingFocusedY);
             mLauncher.getDragLayer().getLocationInDragLayer(this, offset);
             // PagedViews are centered horizontally but top aligned
+            // Note we have to shift the items up now that Launcher sits under the status bar
             pos[0] += (getMeasuredWidth() - mWidgetSpacingLayout.getMeasuredWidth()) / 2 +
                     offset[0];
-            pos[1] += offset[1];
+            pos[1] += offset[1] - mLauncher.getDragLayer().getPaddingTop();
             mLauncher.showFirstRunAllAppsCling(pos);
         }
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3739,7 +3739,9 @@ public void run() {
     }
 
     private void dismissCling(final Cling cling, final String flag, int duration) {
-        if (cling != null && cling.getVisibility() == View.VISIBLE) {
+        // To catch cases where siblings of top-level views are made invisible, just check whether
+        // the cling is directly set to GONE before dismissing it.
+        if (cling != null && cling.getVisibility() != View.GONE) {
             ObjectAnimator anim = LauncherAnimUtils.ofFloat(cling, "alpha", 0f);
             anim.setDuration(duration);
             anim.addListener(new AnimatorListenerAdapter() {

File: src/com/android/launcher2/AddAdapter.java
Patch:
@@ -71,7 +71,7 @@ public AddAdapter(Launcher launcher) {
         Resources res = launcher.getResources();
 
         mItems.add(new ListItem(res, R.string.group_wallpapers,
-                R.drawable.ic_launcher_wallpaper, ITEM_WALLPAPER));
+                R.mipmap.ic_launcher_wallpaper, ITEM_WALLPAPER));
     }
 
     public View getView(int position, View convertView, ViewGroup parent) {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2682,6 +2682,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
 
             dispatchOnLauncherTransitionPrepare(fromView, animated, true);
             dispatchOnLauncherTransitionPrepare(toView, animated, true);
+            mAppsCustomizeContent.pauseScrolling();
 
             mStateAnimation.addListener(new AnimatorListenerAdapter() {
                 @Override
@@ -2696,6 +2697,8 @@ public void onAnimationEnd(Animator animation) {
                     if (onCompleteRunnable != null) {
                         onCompleteRunnable.run();
                     }
+                    mAppsCustomizeContent.updateCurrentPageScroll();
+                    mAppsCustomizeContent.resumeScrolling();
                 }
             });
 

File: src/com/android/launcher2/DragLayer.java
Patch:
@@ -167,6 +167,9 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
     @Override
     public boolean onInterceptHoverEvent(MotionEvent ev) {
+        if (mLauncher == null || mLauncher.getWorkspace() == null) {
+            return false;
+        }
         Folder currentFolder = mLauncher.getWorkspace().getOpenFolder();
         if (currentFolder == null) {
             return false;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3482,7 +3482,9 @@ public int compare(View a, View b) {
             anim.addListener(new AnimatorListenerAdapter() {
                 @Override
                 public void onAnimationEnd(Animator animation) {
-                    mWorkspace.postDelayed(mBuildLayersRunnable, 500);
+                    if (mWorkspace != null) {
+                        mWorkspace.postDelayed(mBuildLayersRunnable, 500);
+                    }
                 }
             });
             anim.start();

File: src/com/android/launcher2/DragLayer.java
Patch:
@@ -167,6 +167,9 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
     @Override
     public boolean onInterceptHoverEvent(MotionEvent ev) {
+        if (mLauncher == null || mLauncher.getWorkspace() == null) {
+            return false;
+        }
         Folder currentFolder = mLauncher.getWorkspace().getOpenFolder();
         if (currentFolder == null) {
             return false;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3482,7 +3482,9 @@ public int compare(View a, View b) {
             anim.addListener(new AnimatorListenerAdapter() {
                 @Override
                 public void onAnimationEnd(Animator animation) {
-                    mWorkspace.postDelayed(mBuildLayersRunnable, 500);
+                    if (mWorkspace != null) {
+                        mWorkspace.postDelayed(mBuildLayersRunnable, 500);
+                    }
                 }
             });
             anim.start();

File: src/com/android/launcher2/DragLayer.java
Patch:
@@ -167,6 +167,9 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
     @Override
     public boolean onInterceptHoverEvent(MotionEvent ev) {
+        if (mLauncher == null || mLauncher.getWorkspace() == null) {
+            return false;
+        }
         Folder currentFolder = mLauncher.getWorkspace().getOpenFolder();
         if (currentFolder == null) {
             return false;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3482,7 +3482,9 @@ public int compare(View a, View b) {
             anim.addListener(new AnimatorListenerAdapter() {
                 @Override
                 public void onAnimationEnd(Animator animation) {
-                    mWorkspace.postDelayed(mBuildLayersRunnable, 500);
+                    if (mWorkspace != null) {
+                        mWorkspace.postDelayed(mBuildLayersRunnable, 500);
+                    }
                 }
             });
             anim.start();

File: src/com/android/launcher2/DragLayer.java
Patch:
@@ -167,6 +167,9 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
     @Override
     public boolean onInterceptHoverEvent(MotionEvent ev) {
+        if (mLauncher == null || mLauncher.getWorkspace() == null) {
+            return false;
+        }
         Folder currentFolder = mLauncher.getWorkspace().getOpenFolder();
         if (currentFolder == null) {
             return false;

File: src/com/android/launcher2/DragLayer.java
Patch:
@@ -167,6 +167,9 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
 
     @Override
     public boolean onInterceptHoverEvent(MotionEvent ev) {
+        if (mLauncher == null || mLauncher.getWorkspace() == null) {
+            return false;
+        }
         Folder currentFolder = mLauncher.getWorkspace().getOpenFolder();
         if (currentFolder == null) {
             return false;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3482,7 +3482,9 @@ public int compare(View a, View b) {
             anim.addListener(new AnimatorListenerAdapter() {
                 @Override
                 public void onAnimationEnd(Animator animation) {
-                    mWorkspace.postDelayed(mBuildLayersRunnable, 500);
+                    if (mWorkspace != null) {
+                        mWorkspace.postDelayed(mBuildLayersRunnable, 500);
+                    }
                 }
             });
             anim.start();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -55,7 +55,6 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.AsyncTask;
-import android.os.Build;
 import android.os.Bundle;
 import android.os.Environment;
 import android.os.Handler;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3753,7 +3753,7 @@ public void showFirstRunWorkspaceCling() {
             // with a custom workspace cling (usually specified in an overlay)
             // For now, only do this on tablets
             if (mSharedPrefs.getInt(LauncherProvider.DEFAULT_WORKSPACE_RESOURCE_ID, 0) != 0 &&
-                    LauncherApplication.isScreenLarge()) {
+                    getResources().getBoolean(R.bool.config_useCustomClings)) {
                 // Use a custom cling
                 View cling = findViewById(R.id.workspace_cling);
                 ViewGroup clingParent = (ViewGroup) cling.getParent();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1191,9 +1191,8 @@ public void run() {
 
             launcherInfo.hostView.setTag(launcherInfo);
             launcherInfo.hostView.setVisibility(View.VISIBLE);
-            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                launcherInfo.notifyWidgetSizeChanged(this);
-            }
+            launcherInfo.notifyWidgetSizeChanged(this);
+
             mWorkspace.addInScreen(launcherInfo.hostView, container, screen, cellXY[0], cellXY[1],
                     launcherInfo.spanX, launcherInfo.spanY, isWorkspaceLocked());
 

File: src/com/android/launcher2/LauncherAppWidgetInfo.java
Patch:
@@ -73,8 +73,7 @@ void onAddToDatabase(ContentValues values) {
      * done so already (only really for default workspace widgets).
      */
     void onBindAppWidget(Launcher launcher) {
-        if (!mHasNotifiedInitialWidgetSizeChanged &&
-            Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
+        if (!mHasNotifiedInitialWidgetSizeChanged) {
             notifyWidgetSizeChanged(launcher);
         }
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1191,9 +1191,8 @@ public void run() {
 
             launcherInfo.hostView.setTag(launcherInfo);
             launcherInfo.hostView.setVisibility(View.VISIBLE);
-            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                launcherInfo.notifyWidgetSizeChanged(this);
-            }
+            launcherInfo.notifyWidgetSizeChanged(this);
+
             mWorkspace.addInScreen(launcherInfo.hostView, container, screen, cellXY[0], cellXY[1],
                     launcherInfo.spanX, launcherInfo.spanY, isWorkspaceLocked());
 

File: src/com/android/launcher2/LauncherAppWidgetInfo.java
Patch:
@@ -73,8 +73,7 @@ void onAddToDatabase(ContentValues values) {
      * done so already (only really for default workspace widgets).
      */
     void onBindAppWidget(Launcher launcher) {
-        if (!mHasNotifiedInitialWidgetSizeChanged &&
-            Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
+        if (!mHasNotifiedInitialWidgetSizeChanged) {
             notifyWidgetSizeChanged(launcher);
         }
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1191,9 +1191,8 @@ public void run() {
 
             launcherInfo.hostView.setTag(launcherInfo);
             launcherInfo.hostView.setVisibility(View.VISIBLE);
-            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                launcherInfo.notifyWidgetSizeChanged(this);
-            }
+            launcherInfo.notifyWidgetSizeChanged(this);
+
             mWorkspace.addInScreen(launcherInfo.hostView, container, screen, cellXY[0], cellXY[1],
                     launcherInfo.spanX, launcherInfo.spanY, isWorkspaceLocked());
 

File: src/com/android/launcher2/LauncherAppWidgetInfo.java
Patch:
@@ -73,8 +73,7 @@ void onAddToDatabase(ContentValues values) {
      * done so already (only really for default workspace widgets).
      */
     void onBindAppWidget(Launcher launcher) {
-        if (!mHasNotifiedInitialWidgetSizeChanged &&
-            Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
+        if (!mHasNotifiedInitialWidgetSizeChanged) {
             notifyWidgetSizeChanged(launcher);
         }
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1191,9 +1191,8 @@ public void run() {
 
             launcherInfo.hostView.setTag(launcherInfo);
             launcherInfo.hostView.setVisibility(View.VISIBLE);
-            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-                launcherInfo.notifyWidgetSizeChanged(this);
-            }
+            launcherInfo.notifyWidgetSizeChanged(this);
+
             mWorkspace.addInScreen(launcherInfo.hostView, container, screen, cellXY[0], cellXY[1],
                     launcherInfo.spanX, launcherInfo.spanY, isWorkspaceLocked());
 

File: src/com/android/launcher2/LauncherAppWidgetInfo.java
Patch:
@@ -73,8 +73,7 @@ void onAddToDatabase(ContentValues values) {
      * done so already (only really for default workspace widgets).
      */
     void onBindAppWidget(Launcher launcher) {
-        if (!mHasNotifiedInitialWidgetSizeChanged &&
-            Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
+        if (!mHasNotifiedInitialWidgetSizeChanged) {
             notifyWidgetSizeChanged(launcher);
         }
     }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -628,7 +628,10 @@ Bundle getDefaultOptionsForWidget(Launcher launcher, PendingAddWidgetInfo info)
 
     private void preloadWidget(final PendingAddWidgetInfo info) {
         final AppWidgetProviderInfo pInfo = info.info;
+        final Bundle options = getDefaultOptionsForWidget(mLauncher, info);
+
         if (pInfo.configure != null) {
+            info.bindOptions = options;
             return;
         }
 
@@ -637,8 +640,6 @@ private void preloadWidget(final PendingAddWidgetInfo info) {
             @Override
             public void run() {
                 mWidgetLoadingId = mLauncher.getAppWidgetHost().allocateAppWidgetId();
-
-                Bundle options = getDefaultOptionsForWidget(mLauncher, info);
                 // Options will be null for platforms with JB or lower, so this serves as an
                 // SDK level check.
                 if (options == null) {

File: src/com/android/launcher2/PendingAddItemInfo.java
Patch:
@@ -20,6 +20,7 @@
 import android.appwidget.AppWidgetProviderInfo;
 import android.content.ComponentName;
 import android.content.pm.ActivityInfo;
+import android.os.Bundle;
 import android.os.Parcelable;
 
 /**
@@ -55,6 +56,7 @@ class PendingAddWidgetInfo extends PendingAddItemInfo {
     int icon;
     AppWidgetProviderInfo info;
     AppWidgetHostView boundWidget;
+    Bundle bindOptions = null;
 
     // Any configuration data that we want to pass to a configuration activity when
     // starting up a widget
@@ -95,6 +97,7 @@ public PendingAddWidgetInfo(PendingAddWidgetInfo copy) {
         spanY = copy.spanY;
         minSpanX = copy.minSpanX;
         minSpanY = copy.minSpanY;
+        bindOptions = copy.bindOptions == null ? null : (Bundle) copy.bindOptions.clone();
     }
 
     @Override

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -628,7 +628,10 @@ Bundle getDefaultOptionsForWidget(Launcher launcher, PendingAddWidgetInfo info)
 
     private void preloadWidget(final PendingAddWidgetInfo info) {
         final AppWidgetProviderInfo pInfo = info.info;
+        final Bundle options = getDefaultOptionsForWidget(mLauncher, info);
+
         if (pInfo.configure != null) {
+            info.bindOptions = options;
             return;
         }
 
@@ -637,8 +640,6 @@ private void preloadWidget(final PendingAddWidgetInfo info) {
             @Override
             public void run() {
                 mWidgetLoadingId = mLauncher.getAppWidgetHost().allocateAppWidgetId();
-
-                Bundle options = getDefaultOptionsForWidget(mLauncher, info);
                 // Options will be null for platforms with JB or lower, so this serves as an
                 // SDK level check.
                 if (options == null) {

File: src/com/android/launcher2/PendingAddItemInfo.java
Patch:
@@ -20,6 +20,7 @@
 import android.appwidget.AppWidgetProviderInfo;
 import android.content.ComponentName;
 import android.content.pm.ActivityInfo;
+import android.os.Bundle;
 import android.os.Parcelable;
 
 /**
@@ -55,6 +56,7 @@ class PendingAddWidgetInfo extends PendingAddItemInfo {
     int icon;
     AppWidgetProviderInfo info;
     AppWidgetHostView boundWidget;
+    Bundle bindOptions = null;
 
     // Any configuration data that we want to pass to a configuration activity when
     // starting up a widget
@@ -95,6 +97,7 @@ public PendingAddWidgetInfo(PendingAddWidgetInfo copy) {
         spanY = copy.spanY;
         minSpanX = copy.minSpanX;
         minSpanY = copy.minSpanY;
+        bindOptions = copy.bindOptions == null ? null : (Bundle) copy.bindOptions.clone();
     }
 
     @Override

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -628,7 +628,10 @@ Bundle getDefaultOptionsForWidget(Launcher launcher, PendingAddWidgetInfo info)
 
     private void preloadWidget(final PendingAddWidgetInfo info) {
         final AppWidgetProviderInfo pInfo = info.info;
+        final Bundle options = getDefaultOptionsForWidget(mLauncher, info);
+
         if (pInfo.configure != null) {
+            info.bindOptions = options;
             return;
         }
 
@@ -637,8 +640,6 @@ private void preloadWidget(final PendingAddWidgetInfo info) {
             @Override
             public void run() {
                 mWidgetLoadingId = mLauncher.getAppWidgetHost().allocateAppWidgetId();
-
-                Bundle options = getDefaultOptionsForWidget(mLauncher, info);
                 // Options will be null for platforms with JB or lower, so this serves as an
                 // SDK level check.
                 if (options == null) {

File: src/com/android/launcher2/PendingAddItemInfo.java
Patch:
@@ -20,6 +20,7 @@
 import android.appwidget.AppWidgetProviderInfo;
 import android.content.ComponentName;
 import android.content.pm.ActivityInfo;
+import android.os.Bundle;
 import android.os.Parcelable;
 
 /**
@@ -55,6 +56,7 @@ class PendingAddWidgetInfo extends PendingAddItemInfo {
     int icon;
     AppWidgetProviderInfo info;
     AppWidgetHostView boundWidget;
+    Bundle bindOptions = null;
 
     // Any configuration data that we want to pass to a configuration activity when
     // starting up a widget
@@ -95,6 +97,7 @@ public PendingAddWidgetInfo(PendingAddWidgetInfo copy) {
         spanY = copy.spanY;
         minSpanX = copy.minSpanX;
         minSpanY = copy.minSpanY;
+        bindOptions = copy.bindOptions == null ? null : (Bundle) copy.bindOptions.clone();
     }
 
     @Override

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1715,7 +1715,7 @@ protected View getScrollingIndicator() {
     }
 
     protected boolean isScrollingIndicatorEnabled() {
-        return !LauncherApplication.isScreenLarge();
+        return true;
     }
 
     Runnable hideScrollingIndicatorRunnable = new Runnable() {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1715,7 +1715,7 @@ protected View getScrollingIndicator() {
     }
 
     protected boolean isScrollingIndicatorEnabled() {
-        return !LauncherApplication.isScreenLarge();
+        return true;
     }
 
     Runnable hideScrollingIndicatorRunnable = new Runnable() {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1715,7 +1715,7 @@ protected View getScrollingIndicator() {
     }
 
     protected boolean isScrollingIndicatorEnabled() {
-        return !LauncherApplication.isScreenLarge();
+        return true;
     }
 
     Runnable hideScrollingIndicatorRunnable = new Runnable() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -98,6 +98,7 @@ public class Workspace extends SmoothPagedView
     private float mOverScrollMaxBackgroundAlpha = 0.0f;
 
     private float mWallpaperScrollRatio = 1.0f;
+    private int mOriginalPageSpacing;
 
     private final WallpaperManager mWallpaperManager;
     private IBinder mWindowToken;
@@ -273,6 +274,7 @@ public Workspace(Context context, AttributeSet attrs) {
     public Workspace(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
         mContentIsRefreshable = false;
+        mOriginalPageSpacing = mPageSpacing;
 
         mDragEnforcer = new DropTarget.DragEnforcer(context);
         // With workspace, data is available straight from the get-go
@@ -1594,7 +1596,7 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay)
                 setLayoutScale(finalScaleFactor);
             }
         } else {
-            setPageSpacing(PagedView.AUTOMATIC_PAGE_SPACING);
+            setPageSpacing(mOriginalPageSpacing);
             setLayoutScale(1.0f);
         }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -98,6 +98,7 @@ public class Workspace extends SmoothPagedView
     private float mOverScrollMaxBackgroundAlpha = 0.0f;
 
     private float mWallpaperScrollRatio = 1.0f;
+    private int mOriginalPageSpacing;
 
     private final WallpaperManager mWallpaperManager;
     private IBinder mWindowToken;
@@ -273,6 +274,7 @@ public Workspace(Context context, AttributeSet attrs) {
     public Workspace(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
         mContentIsRefreshable = false;
+        mOriginalPageSpacing = mPageSpacing;
 
         mDragEnforcer = new DropTarget.DragEnforcer(context);
         // With workspace, data is available straight from the get-go
@@ -1594,7 +1596,7 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay)
                 setLayoutScale(finalScaleFactor);
             }
         } else {
-            setPageSpacing(PagedView.AUTOMATIC_PAGE_SPACING);
+            setPageSpacing(mOriginalPageSpacing);
             setLayoutScale(1.0f);
         }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -98,6 +98,7 @@ public class Workspace extends SmoothPagedView
     private float mOverScrollMaxBackgroundAlpha = 0.0f;
 
     private float mWallpaperScrollRatio = 1.0f;
+    private int mOriginalPageSpacing;
 
     private final WallpaperManager mWallpaperManager;
     private IBinder mWindowToken;
@@ -273,6 +274,7 @@ public Workspace(Context context, AttributeSet attrs) {
     public Workspace(Context context, AttributeSet attrs, int defStyle) {
         super(context, attrs, defStyle);
         mContentIsRefreshable = false;
+        mOriginalPageSpacing = mPageSpacing;
 
         mDragEnforcer = new DropTarget.DragEnforcer(context);
         // With workspace, data is available straight from the get-go
@@ -1594,7 +1596,7 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay)
                 setLayoutScale(finalScaleFactor);
             }
         } else {
-            setPageSpacing(PagedView.AUTOMATIC_PAGE_SPACING);
+            setPageSpacing(mOriginalPageSpacing);
             setLayoutScale(1.0f);
         }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2507,7 +2507,7 @@ public void onAnimationEnd(Animator animation) {
                     dispatchOnLauncherTransitionEnd(fromView, animated, false);
                     dispatchOnLauncherTransitionEnd(toView, animated, false);
 
-                    if (!springLoaded && !LauncherApplication.isScreenLarge()) {
+                    if (mWorkspace != null && !springLoaded && !LauncherApplication.isScreenLarge()) {
                         // Hide the workspace scrollbar
                         mWorkspace.hideScrollingIndicator(true);
                         hideDockDivider();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2507,7 +2507,7 @@ public void onAnimationEnd(Animator animation) {
                     dispatchOnLauncherTransitionEnd(fromView, animated, false);
                     dispatchOnLauncherTransitionEnd(toView, animated, false);
 
-                    if (!springLoaded && !LauncherApplication.isScreenLarge()) {
+                    if (mWorkspace != null && !springLoaded && !LauncherApplication.isScreenLarge()) {
                         // Hide the workspace scrollbar
                         mWorkspace.hideScrollingIndicator(true);
                         hideDockDivider();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2507,7 +2507,7 @@ public void onAnimationEnd(Animator animation) {
                     dispatchOnLauncherTransitionEnd(fromView, animated, false);
                     dispatchOnLauncherTransitionEnd(toView, animated, false);
 
-                    if (!springLoaded && !LauncherApplication.isScreenLarge()) {
+                    if (mWorkspace != null && !springLoaded && !LauncherApplication.isScreenLarge()) {
                         // Hide the workspace scrollbar
                         mWorkspace.hideScrollingIndicator(true);
                         hideDockDivider();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1648,7 +1648,6 @@ public boolean onOptionsItemSelected(MenuItem item) {
     public boolean onSearchRequested() {
         startSearch(null, false, null, true);
         // Use a custom animation for launching search
-        overridePendingTransition(R.anim.fade_in_fast, R.anim.fade_out_fast);
         return true;
     }
 
@@ -1961,7 +1960,6 @@ public void onClickVoiceButton(View v) {
                 intent.setPackage(activityName.getPackageName());
             }
             startActivity(null, intent, "onClickVoiceButton");
-            overridePendingTransition(R.anim.fade_in_fast, R.anim.fade_out_fast);
         } catch (ActivityNotFoundException e) {
             Intent intent = new Intent(RecognizerIntent.ACTION_WEB_SEARCH);
             intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1691,7 +1691,7 @@ private void invalidateOnDataChange() {
 
     public void setApps(ArrayList<ApplicationInfo> list) {
         mApps = list;
-        Collections.sort(mApps, LauncherModel.APP_NAME_COMPARATOR);
+        Collections.sort(mApps, LauncherModel.getAppNameComparator());
         updatePageCounts();
         invalidateOnDataChange();
     }
@@ -1700,7 +1700,7 @@ private void addAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
         int count = list.size();
         for (int i = 0; i < count; ++i) {
             ApplicationInfo info = list.get(i);
-            int index = Collections.binarySearch(mApps, info, LauncherModel.APP_NAME_COMPARATOR);
+            int index = Collections.binarySearch(mApps, info, LauncherModel.getAppNameComparator());
             if (index < 0) {
                 mApps.add(-(index + 1), info);
             }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1691,7 +1691,7 @@ private void invalidateOnDataChange() {
 
     public void setApps(ArrayList<ApplicationInfo> list) {
         mApps = list;
-        Collections.sort(mApps, LauncherModel.APP_NAME_COMPARATOR);
+        Collections.sort(mApps, LauncherModel.getAppNameComparator());
         updatePageCounts();
         invalidateOnDataChange();
     }
@@ -1700,7 +1700,7 @@ private void addAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
         int count = list.size();
         for (int i = 0; i < count; ++i) {
             ApplicationInfo info = list.get(i);
-            int index = Collections.binarySearch(mApps, info, LauncherModel.APP_NAME_COMPARATOR);
+            int index = Collections.binarySearch(mApps, info, LauncherModel.getAppNameComparator());
             if (index < 0) {
                 mApps.add(-(index + 1), info);
             }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1691,7 +1691,7 @@ private void invalidateOnDataChange() {
 
     public void setApps(ArrayList<ApplicationInfo> list) {
         mApps = list;
-        Collections.sort(mApps, LauncherModel.APP_NAME_COMPARATOR);
+        Collections.sort(mApps, LauncherModel.getAppNameComparator());
         updatePageCounts();
         invalidateOnDataChange();
     }
@@ -1700,7 +1700,7 @@ private void addAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
         int count = list.size();
         for (int i = 0; i < count; ++i) {
             ApplicationInfo info = list.get(i);
-            int index = Collections.binarySearch(mApps, info, LauncherModel.APP_NAME_COMPARATOR);
+            int index = Collections.binarySearch(mApps, info, LauncherModel.getAppNameComparator());
             if (index < 0) {
                 mApps.add(-(index + 1), info);
             }

File: src/com/android/launcher2/ItemInfo.java
Patch:
@@ -114,6 +114,8 @@ class ItemInfo {
         screen = info.screen;
         itemType = info.itemType;
         container = info.container;
+        // tempdebug:
+        LauncherModel.checkItemInfo(this);
     }
 
     /** Returns the package name that the intent will resolve to, or an empty string if

File: src/com/android/launcher2/ItemInfo.java
Patch:
@@ -114,6 +114,8 @@ class ItemInfo {
         screen = info.screen;
         itemType = info.itemType;
         container = info.container;
+        // tempdebug:
+        LauncherModel.checkItemInfo(this);
     }
 
     /** Returns the package name that the intent will resolve to, or an empty string if

File: src/com/android/launcher2/ItemInfo.java
Patch:
@@ -114,6 +114,8 @@ class ItemInfo {
         screen = info.screen;
         itemType = info.itemType;
         container = info.container;
+        // tempdebug:
+        LauncherModel.checkItemInfo(this);
     }
 
     /** Returns the package name that the intent will resolve to, or an empty string if

File: src/com/android/launcher2/ItemInfo.java
Patch:
@@ -114,6 +114,8 @@ class ItemInfo {
         screen = info.screen;
         itemType = info.itemType;
         container = info.container;
+        // tempdebug:
+        LauncherModel.checkItemInfo(this);
     }
 
     /** Returns the package name that the intent will resolve to, or an empty string if

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2474,6 +2474,9 @@ private void showAppsCustomizeHelper(final boolean animated, final boolean sprin
             alphaAnim.addUpdateListener(new AnimatorUpdateListener() {
                 @Override
                 public void onAnimationUpdate(ValueAnimator animation) {
+                    if (animation == null) {
+                        throw new RuntimeException("animation is null");
+                    }
                     float t = (Float) animation.getAnimatedValue();
                     dispatchOnLauncherTransitionStep(fromView, t);
                     dispatchOnLauncherTransitionStep(toView, t);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1026,7 +1026,7 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {
         super.onSizeChanged(w, h, oldw, oldh);
         mBackgroundRect.set(0, 0, w, h);
         mForegroundRect.set(mForegroundPadding, mForegroundPadding,
-                w - 2 * mForegroundPadding, h - 2 * mForegroundPadding);
+                w - mForegroundPadding, h - mForegroundPadding);
     }
 
     @Override

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2474,6 +2474,9 @@ private void showAppsCustomizeHelper(final boolean animated, final boolean sprin
             alphaAnim.addUpdateListener(new AnimatorUpdateListener() {
                 @Override
                 public void onAnimationUpdate(ValueAnimator animation) {
+                    if (animation == null) {
+                        throw new RuntimeException("animation is null");
+                    }
                     float t = (Float) animation.getAnimatedValue();
                     dispatchOnLauncherTransitionStep(fromView, t);
                     dispatchOnLauncherTransitionStep(toView, t);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1026,7 +1026,7 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {
         super.onSizeChanged(w, h, oldw, oldh);
         mBackgroundRect.set(0, 0, w, h);
         mForegroundRect.set(mForegroundPadding, mForegroundPadding,
-                w - 2 * mForegroundPadding, h - 2 * mForegroundPadding);
+                w - mForegroundPadding, h - mForegroundPadding);
     }
 
     @Override

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2474,6 +2474,9 @@ private void showAppsCustomizeHelper(final boolean animated, final boolean sprin
             alphaAnim.addUpdateListener(new AnimatorUpdateListener() {
                 @Override
                 public void onAnimationUpdate(ValueAnimator animation) {
+                    if (animation == null) {
+                        throw new RuntimeException("animation is null");
+                    }
                     float t = (Float) animation.getAnimatedValue();
                     dispatchOnLauncherTransitionStep(fromView, t);
                     dispatchOnLauncherTransitionStep(toView, t);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2474,6 +2474,9 @@ private void showAppsCustomizeHelper(final boolean animated, final boolean sprin
             alphaAnim.addUpdateListener(new AnimatorUpdateListener() {
                 @Override
                 public void onAnimationUpdate(ValueAnimator animation) {
+                    if (animation == null) {
+                        throw new RuntimeException("animation is null");
+                    }
                     float t = (Float) animation.getAnimatedValue();
                     dispatchOnLauncherTransitionStep(fromView, t);
                     dispatchOnLauncherTransitionStep(toView, t);

File: src/com/android/launcher2/ItemInfo.java
Patch:
@@ -114,6 +114,8 @@ class ItemInfo {
         screen = info.screen;
         itemType = info.itemType;
         container = info.container;
+        // tempdebug:
+        LauncherModel.checkItemInfo(this);
     }
 
     /** Returns the package name that the intent will resolve to, or an empty string if

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1026,7 +1026,7 @@ protected void onSizeChanged(int w, int h, int oldw, int oldh) {
         super.onSizeChanged(w, h, oldw, oldh);
         mBackgroundRect.set(0, 0, w, h);
         mForegroundRect.set(mForegroundPadding, mForegroundPadding,
-                w - 2 * mForegroundPadding, h - 2 * mForegroundPadding);
+                w - mForegroundPadding, h - mForegroundPadding);
     }
 
     @Override

File: src/com/android/launcher2/Folder.java
Patch:
@@ -805,10 +805,10 @@ private void centerAboutIcon() {
                 + mFolderNameHeight;
         DragLayer parent = (DragLayer) mLauncher.findViewById(R.id.drag_layer);
 
-        parent.getDescendantRectRelativeToSelf(mFolderIcon, mTempRect);
+        float scale = parent.getDescendantRectRelativeToSelf(mFolderIcon, mTempRect);
 
-        int centerX = mTempRect.centerX();
-        int centerY = mTempRect.centerY();
+        int centerX = (int) (mTempRect.left + mTempRect.width() * scale / 2);
+        int centerY = (int) (mTempRect.top + mTempRect.height() * scale / 2);
         int centeredLeft = centerX - width / 2;
         int centeredTop = centerY - height / 2;
 

File: src/com/android/launcher2/Hotseat.java
Patch:
@@ -38,7 +38,7 @@ public class Hotseat extends FrameLayout {
     private int mCellCountX;
     private int mCellCountY;
     private int mAllAppsButtonRank;
-    
+
     private boolean mTransposeLayoutWithOrientation;
     private boolean mIsLandscape;
 

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -639,6 +639,9 @@ public void run() {
         mInflateWidgetRunnable = new Runnable() {
             @Override
             public void run() {
+                if (mWidgetCleanupState != WIDGET_BOUND) {
+                    return;
+                }
                 AppWidgetHostView hostView = mLauncher.
                         getAppWidgetHost().createView(getContext(), mWidgetLoadingId, pInfo);
                 info.boundWidget = hostView;

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -639,6 +639,9 @@ public void run() {
         mInflateWidgetRunnable = new Runnable() {
             @Override
             public void run() {
+                if (mWidgetCleanupState != WIDGET_BOUND) {
+                    return;
+                }
                 AppWidgetHostView hostView = mLauncher.
                         getAppWidgetHost().createView(getContext(), mWidgetLoadingId, pInfo);
                 info.boundWidget = hostView;

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -639,6 +639,9 @@ public void run() {
         mInflateWidgetRunnable = new Runnable() {
             @Override
             public void run() {
+                if (mWidgetCleanupState != WIDGET_BOUND) {
+                    return;
+                }
                 AppWidgetHostView hostView = mLauncher.
                         getAppWidgetHost().createView(getContext(), mWidgetLoadingId, pInfo);
                 info.boundWidget = hostView;

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -559,7 +559,7 @@ public void onPackagesUpdated() {
     @Override
     public void onClick(View v) {
         // When we have exited all apps or are in transition, disregard clicks
-        if (!mLauncher.isAllAppsCustomizeOpen() ||
+        if (!mLauncher.isAllAppsVisible() ||
                 mLauncher.getWorkspace().isSwitchingState()) return;
 
         if (v instanceof PagedViewIcon) {

File: src/com/android/launcher2/PagedViewWithDraggableItems.java
Patch:
@@ -105,7 +105,7 @@ public boolean onLongClick(View v) {
         // Return early if we are still animating the pages
         if (mNextPage != INVALID_PAGE) return false;
         // When we have exited all apps or are in transition, disregard long clicks
-        if (!mLauncher.isAllAppsCustomizeOpen() ||
+        if (!mLauncher.isAllAppsVisible() ||
                 mLauncher.getWorkspace().isSwitchingState()) return false;
         // Return if global dragging is not enabled
         if (!mLauncher.isDraggingEnabled()) return false;

File: src/com/android/launcher2/PagedViewWithDraggableItems.java
Patch:
@@ -105,7 +105,7 @@ public boolean onLongClick(View v) {
         // Return early if we are still animating the pages
         if (mNextPage != INVALID_PAGE) return false;
         // When we have exited all apps or are in transition, disregard long clicks
-        if (!mLauncher.isAllAppsCustomizeOpen() ||
+        if (!mLauncher.isAllAppsVisible() ||
                 mLauncher.getWorkspace().isSwitchingState()) return false;
         // Return if global dragging is not enabled
         if (!mLauncher.isDraggingEnabled()) return false;

File: src/com/android/launcher2/PagedViewWithDraggableItems.java
Patch:
@@ -105,7 +105,7 @@ public boolean onLongClick(View v) {
         // Return early if we are still animating the pages
         if (mNextPage != INVALID_PAGE) return false;
         // When we have exited all apps or are in transition, disregard long clicks
-        if (!mLauncher.isAllAppsCustomizeOpen() ||
+        if (!mLauncher.isAllAppsVisible() ||
                 mLauncher.getWorkspace().isSwitchingState()) return false;
         // Return if global dragging is not enabled
         if (!mLauncher.isDraggingEnabled()) return false;

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1736,7 +1736,6 @@ private void removeAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
             ApplicationInfo info = list.get(i);
             int removeIndex = findAppByComponent(mApps, info);
             if (removeIndex > -1) {
-                Log.d(TAG, "Removing app in removeAppsWithoutInvalidate: " + info);
                 mApps.remove(removeIndex);
             }
         }
@@ -1746,8 +1745,6 @@ private void removeAppsWithPackageNameWithoutInvalidate(ArrayList<String> packag
         for (String pn : packageNames) {
             int removeIndex = findAppByPackage(mApps, pn);
             while (removeIndex > -1) {
-                Log.d(TAG, "Removing app in removeAppsWithPackageNameWithoutInvalidate: "
-                        + mApps.get(removeIndex));
                 mApps.remove(removeIndex);
                 removeIndex = findAppByPackage(mApps, pn);
             }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1736,7 +1736,6 @@ private void removeAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
             ApplicationInfo info = list.get(i);
             int removeIndex = findAppByComponent(mApps, info);
             if (removeIndex > -1) {
-                Log.d(TAG, "Removing app in removeAppsWithoutInvalidate: " + info);
                 mApps.remove(removeIndex);
             }
         }
@@ -1746,8 +1745,6 @@ private void removeAppsWithPackageNameWithoutInvalidate(ArrayList<String> packag
         for (String pn : packageNames) {
             int removeIndex = findAppByPackage(mApps, pn);
             while (removeIndex > -1) {
-                Log.d(TAG, "Removing app in removeAppsWithPackageNameWithoutInvalidate: "
-                        + mApps.get(removeIndex));
                 mApps.remove(removeIndex);
                 removeIndex = findAppByPackage(mApps, pn);
             }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2153,7 +2153,7 @@ public void onDrop(final DragObject d) {
         // We want the point to be mapped to the dragTarget.
         if (dropTargetLayout != null) {
             if (mLauncher.isHotseatLayout(dropTargetLayout)) {
-                mapPointFromSelfToSibling(mLauncher.getHotseat(), mDragViewVisualCenter);
+                mapPointFromSelfToHotseatLayout(mLauncher.getHotseat(), mDragViewVisualCenter);
             } else {
                 mapPointFromSelfToChild(dropTargetLayout, mDragViewVisualCenter, null);
             }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2153,7 +2153,7 @@ public void onDrop(final DragObject d) {
         // We want the point to be mapped to the dragTarget.
         if (dropTargetLayout != null) {
             if (mLauncher.isHotseatLayout(dropTargetLayout)) {
-                mapPointFromSelfToSibling(mLauncher.getHotseat(), mDragViewVisualCenter);
+                mapPointFromSelfToHotseatLayout(mLauncher.getHotseat(), mDragViewVisualCenter);
             } else {
                 mapPointFromSelfToChild(dropTargetLayout, mDragViewVisualCenter, null);
             }

File: src/com/android/launcher2/LauncherAnimUtils.java
Patch:
@@ -48,7 +48,8 @@ public static void cancelOnDestroyActivity(Animator a) {
     }
 
     public static void onDestroyActivity() {
-        for (Animator a : sAnimators) {
+        HashSet<Animator> animators = new HashSet<Animator>(sAnimators);
+        for (Animator a : animators) {
             if (a.isRunning()) {
                 a.cancel();
             }

File: src/com/android/launcher2/LauncherAnimUtils.java
Patch:
@@ -48,7 +48,8 @@ public static void cancelOnDestroyActivity(Animator a) {
     }
 
     public static void onDestroyActivity() {
-        for (Animator a : sAnimators) {
+        HashSet<Animator> animators = new HashSet<Animator>(sAnimators);
+        for (Animator a : animators) {
             if (a.isRunning()) {
                 a.cancel();
             }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1736,6 +1736,7 @@ private void removeAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
             ApplicationInfo info = list.get(i);
             int removeIndex = findAppByComponent(mApps, info);
             if (removeIndex > -1) {
+                Log.d(TAG, "Removing app in removeAppsWithoutInvalidate: " + info);
                 mApps.remove(removeIndex);
             }
         }
@@ -1745,6 +1746,8 @@ private void removeAppsWithPackageNameWithoutInvalidate(ArrayList<String> packag
         for (String pn : packageNames) {
             int removeIndex = findAppByPackage(mApps, pn);
             while (removeIndex > -1) {
+                Log.d(TAG, "Removing app in removeAppsWithPackageNameWithoutInvalidate: "
+                        + mApps.get(removeIndex));
                 mApps.remove(removeIndex);
                 removeIndex = findAppByPackage(mApps, pn);
             }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1730,6 +1730,7 @@ private void removeAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
             ApplicationInfo info = list.get(i);
             int removeIndex = findAppByComponent(mApps, info);
             if (removeIndex > -1) {
+                Log.d(TAG, "Removing app in removeAppsWithoutInvalidate: " + info);
                 mApps.remove(removeIndex);
             }
         }
@@ -1739,6 +1740,8 @@ private void removeAppsWithPackageNameWithoutInvalidate(ArrayList<String> packag
         for (String pn : packageNames) {
             int removeIndex = findAppByPackage(mApps, pn);
             while (removeIndex > -1) {
+                Log.d(TAG, "Removing app in removeAppsWithPackageNameWithoutInvalidate: "
+                        + mApps.get(removeIndex));
                 mApps.remove(removeIndex);
                 removeIndex = findAppByPackage(mApps, pn);
             }

File: src/com/android/launcher2/LauncherAnimUtils.java
Patch:
@@ -26,7 +26,7 @@
 
 public class LauncherAnimUtils {
     static HashSet<Animator> sAnimators = new HashSet<Animator>();
-    Animator.AnimatorListener sEndAnimListener = new Animator.AnimatorListener() {
+    static Animator.AnimatorListener sEndAnimListener = new Animator.AnimatorListener() {
         public void onAnimationStart(Animator animation) {
         }
 
@@ -44,6 +44,7 @@ public void onAnimationCancel(Animator animation) {
 
     public static void cancelOnDestroyActivity(Animator a) {
         sAnimators.add(a);
+        a.addListener(sEndAnimListener);
     }
 
     public static void onDestroyActivity() {

File: src/com/android/launcher2/Cling.java
Patch:
@@ -187,9 +187,6 @@ public boolean onTouchEvent(android.view.MotionEvent event) {
                     return false;
                 }
             }
-        } else if (mDrawIdentifier.equals(WORKSPACE_CUSTOM)) {
-            // Let all touch events fall through
-            return false;
         }
         return true;
     };

File: src/com/android/launcher2/Cling.java
Patch:
@@ -194,9 +194,6 @@ public boolean onTouchEvent(android.view.MotionEvent event) {
                     return false;
                 }
             }
-        } else if (mDrawIdentifier.equals(WORKSPACE_CUSTOM)) {
-            // Let all touch events fall through
-            return false;
         }
         return true;
     };

File: src/com/android/launcher2/Cling.java
Patch:
@@ -194,9 +194,6 @@ public boolean onTouchEvent(android.view.MotionEvent event) {
                     return false;
                 }
             }
-        } else if (mDrawIdentifier.equals(WORKSPACE_CUSTOM)) {
-            // Let all touch events fall through
-            return false;
         }
         return true;
     };

File: src/com/android/launcher2/Cling.java
Patch:
@@ -194,9 +194,6 @@ public boolean onTouchEvent(android.view.MotionEvent event) {
                     return false;
                 }
             }
-        } else if (mDrawIdentifier.equals(WORKSPACE_CUSTOM)) {
-            // Let all touch events fall through
-            return false;
         }
         return true;
     };

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -214,7 +214,7 @@ static void checkItemInfo(final ItemInfo item) {
         Runnable r = new Runnable() {
                 public void run() {
                     ItemInfo modelItem = sItemsIdMap.get(itemId);
-                    if (item != modelItem) {
+                    if (modelItem != null && item != modelItem) {
                         // the modelItem needs to match up perfectly with item if our model is to be
                         // consistent with the database-- for now, just require modelItem == item
                         String msg = "item: " + ((item != null) ? item.toString() : "null") +

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -58,6 +58,7 @@
 import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.HashSet;
+import java.util.Iterator;
 import java.util.Set;
 
 /**

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -144,7 +144,7 @@ public void showSearchBar(boolean animated) {
             if (mEnableDropDownDropTargets) {
                 mQSBSearchBar.setTranslationY(0);
             } else {
-                mDropTargetBar.setAlpha(1f);
+                mQSBSearchBar.setAlpha(1f);
             }
         }
         mIsSearchBarHidden = false;
@@ -159,7 +159,7 @@ public void hideSearchBar(boolean animated) {
             if (mEnableDropDownDropTargets) {
                 mQSBSearchBar.setTranslationY(-mBarHeight);
             } else {
-                mDropTargetBar.setAlpha(0f);
+                mQSBSearchBar.setAlpha(0f);
             }
         }
         mIsSearchBarHidden = true;

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -144,7 +144,7 @@ public void showSearchBar(boolean animated) {
             if (mEnableDropDownDropTargets) {
                 mQSBSearchBar.setTranslationY(0);
             } else {
-                mDropTargetBar.setAlpha(1f);
+                mQSBSearchBar.setAlpha(1f);
             }
         }
         mIsSearchBarHidden = false;
@@ -159,7 +159,7 @@ public void hideSearchBar(boolean animated) {
             if (mEnableDropDownDropTargets) {
                 mQSBSearchBar.setTranslationY(-mBarHeight);
             } else {
-                mDropTargetBar.setAlpha(0f);
+                mQSBSearchBar.setAlpha(0f);
             }
         }
         mIsSearchBarHidden = true;

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -144,7 +144,7 @@ public void showSearchBar(boolean animated) {
             if (mEnableDropDownDropTargets) {
                 mQSBSearchBar.setTranslationY(0);
             } else {
-                mDropTargetBar.setAlpha(1f);
+                mQSBSearchBar.setAlpha(1f);
             }
         }
         mIsSearchBarHidden = false;
@@ -159,7 +159,7 @@ public void hideSearchBar(boolean animated) {
             if (mEnableDropDownDropTargets) {
                 mQSBSearchBar.setTranslationY(-mBarHeight);
             } else {
-                mDropTargetBar.setAlpha(0f);
+                mQSBSearchBar.setAlpha(0f);
             }
         }
         mIsSearchBarHidden = true;

File: src/com/android/launcher2/Folder.java
Patch:
@@ -923,7 +923,9 @@ public View getItemAt(int index) {
 
     private void onCloseComplete() {
         DragLayer parent = (DragLayer) getParent();
-        parent.removeView(this);
+        if (parent != null) {
+            parent.removeView(this);
+        }
         mDragController.removeDropTarget((DropTarget) this);
         clearFocus();
         mFolderIcon.requestFocus();

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -168,6 +168,7 @@ private static boolean installShortcut(Context context, Intent data, ArrayList<I
                 if (intent.getAction() == null) {
                     intent.setAction(Intent.ACTION_VIEW);
                 } else if (intent.getAction().equals(Intent.ACTION_MAIN) &&
+                        intent.getCategories() != null &&
                         intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) {
                     intent.addFlags(
                         Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);

File: src/com/android/launcher2/Folder.java
Patch:
@@ -923,7 +923,9 @@ public View getItemAt(int index) {
 
     private void onCloseComplete() {
         DragLayer parent = (DragLayer) getParent();
-        parent.removeView(this);
+        if (parent != null) {
+            parent.removeView(this);
+        }
         mDragController.removeDropTarget((DropTarget) this);
         clearFocus();
         mFolderIcon.requestFocus();

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -169,6 +169,7 @@ private static boolean installShortcut(Context context, Intent data, ArrayList<I
                 if (intent.getAction() == null) {
                     intent.setAction(Intent.ACTION_VIEW);
                 } else if (intent.getAction().equals(Intent.ACTION_MAIN) &&
+                        intent.getCategories() != null &&
                         intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) {
                     intent.addFlags(
                         Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);

File: src/com/android/launcher2/Folder.java
Patch:
@@ -923,7 +923,9 @@ public View getItemAt(int index) {
 
     private void onCloseComplete() {
         DragLayer parent = (DragLayer) getParent();
-        parent.removeView(this);
+        if (parent != null) {
+            parent.removeView(this);
+        }
         mDragController.removeDropTarget((DropTarget) this);
         clearFocus();
         mFolderIcon.requestFocus();

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -169,6 +169,7 @@ private static boolean installShortcut(Context context, Intent data, ArrayList<I
                 if (intent.getAction() == null) {
                     intent.setAction(Intent.ACTION_VIEW);
                 } else if (intent.getAction().equals(Intent.ACTION_MAIN) &&
+                        intent.getCategories() != null &&
                         intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) {
                     intent.addFlags(
                         Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -144,7 +144,7 @@ public void showSearchBar(boolean animated) {
             if (mEnableDropDownDropTargets) {
                 mQSBSearchBar.setTranslationY(0);
             } else {
-                mDropTargetBar.setAlpha(1f);
+                mQSBSearchBar.setAlpha(1f);
             }
         }
         mIsSearchBarHidden = false;
@@ -159,7 +159,7 @@ public void hideSearchBar(boolean animated) {
             if (mEnableDropDownDropTargets) {
                 mQSBSearchBar.setTranslationY(-mBarHeight);
             } else {
-                mDropTargetBar.setAlpha(0f);
+                mQSBSearchBar.setAlpha(0f);
             }
         }
         mIsSearchBarHidden = true;

File: src/com/android/launcher2/Folder.java
Patch:
@@ -923,7 +923,9 @@ public View getItemAt(int index) {
 
     private void onCloseComplete() {
         DragLayer parent = (DragLayer) getParent();
-        parent.removeView(this);
+        if (parent != null) {
+            parent.removeView(this);
+        }
         mDragController.removeDropTarget((DropTarget) this);
         clearFocus();
         mFolderIcon.requestFocus();

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -169,6 +169,7 @@ private static boolean installShortcut(Context context, Intent data, ArrayList<I
                 if (intent.getAction() == null) {
                     intent.setAction(Intent.ACTION_VIEW);
                 } else if (intent.getAction().equals(Intent.ACTION_MAIN) &&
+                        intent.getCategories() != null &&
                         intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) {
                     intent.addFlags(
                         Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -387,7 +387,6 @@ public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean to
 
             // Make sure the current page is loaded (we start loading the side pages after the
             // transition to prevent slowing down the animation)
-            Log.d(LOG_TAG, "6549598 onLauncherTransitionPrepare currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage(), true);
 
             if (!LauncherApplication.isScreenLarge()) {
@@ -430,7 +429,6 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
             mAppsCustomizePane.showAllAppsCling();
             // Make sure adjacent pages are loaded (we wait until after the transition to
             // prevent slowing down the animation)
-            Log.d(LOG_TAG, "6549598 onLauncherTransitionEnd currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage());
 
             if (!LauncherApplication.isScreenLarge()) {

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -393,7 +393,6 @@ public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean to
 
             // Make sure the current page is loaded (we start loading the side pages after the
             // transition to prevent slowing down the animation)
-            Log.d(LOG_TAG, "6549598 onLauncherTransitionPrepare currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage(), true);
 
             if (!LauncherApplication.isScreenLarge()) {
@@ -436,7 +435,6 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
             mAppsCustomizePane.showAllAppsCling();
             // Make sure adjacent pages are loaded (we wait until after the transition to
             // prevent slowing down the animation)
-            Log.d(LOG_TAG, "6549598 onLauncherTransitionEnd currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage());
 
             if (!LauncherApplication.isScreenLarge()) {

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -393,7 +393,6 @@ public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean to
 
             // Make sure the current page is loaded (we start loading the side pages after the
             // transition to prevent slowing down the animation)
-            Log.d(LOG_TAG, "6549598 onLauncherTransitionPrepare currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage(), true);
 
             if (!LauncherApplication.isScreenLarge()) {
@@ -436,7 +435,6 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
             mAppsCustomizePane.showAllAppsCling();
             // Make sure adjacent pages are loaded (we wait until after the transition to
             // prevent slowing down the animation)
-            Log.d(LOG_TAG, "6549598 onLauncherTransitionEnd currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage());
 
             if (!LauncherApplication.isScreenLarge()) {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2502,7 +2502,7 @@ public void run() {
                     setPivotsForZoom(toView, scale);
                     dispatchOnLauncherTransitionStart(fromView, animated, false);
                     dispatchOnLauncherTransitionStart(toView, animated, false);
-                    mWorkspace.post(new Runnable() {
+                    toView.post(new Runnable() {
                         public void run() {
                             // Check that mStateAnimation hasn't changed while
                             // we waited for a layout/draw pass
@@ -2516,7 +2516,7 @@ public void run() {
             if (delayAnim) {
                 final OnGlobalLayoutListener delayedStart = new OnGlobalLayoutListener() {
                     public void onGlobalLayout() {
-                        mWorkspace.post(startAnimRunnable);
+                        toView.post(startAnimRunnable);
                         observer.removeOnGlobalLayoutListener(this);
                     }
                 };

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2488,7 +2488,7 @@ public void run() {
                     setPivotsForZoom(toView, scale);
                     dispatchOnLauncherTransitionStart(fromView, animated, false);
                     dispatchOnLauncherTransitionStart(toView, animated, false);
-                    mWorkspace.post(new Runnable() {
+                    toView.post(new Runnable() {
                         public void run() {
                             // Check that mStateAnimation hasn't changed while
                             // we waited for a layout/draw pass
@@ -2502,7 +2502,7 @@ public void run() {
             if (delayAnim) {
                 final OnGlobalLayoutListener delayedStart = new OnGlobalLayoutListener() {
                     public void onGlobalLayout() {
-                        mWorkspace.post(startAnimRunnable);
+                        toView.post(startAnimRunnable);
                         observer.removeOnGlobalLayoutListener(this);
                     }
                 };

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -145,8 +145,8 @@ public final class Launcher extends Activity
     static final int DEFAULT_SCREEN = 2;
 
     private static final String PREFERENCES = "launcher.preferences";
-    static final String FORCE_ENABLE_ROTATION_PROPERTY = "launcher.force_enable_rotation";
-    static final String DUMP_STATE_PROPERTY = "debug.launcher2.dumpstate";
+    static final String FORCE_ENABLE_ROTATION_PROPERTY = "debug.force_enable_rotation";
+    static final String DUMP_STATE_PROPERTY = "debug.dumpstate";
 
     // The Intent extra that defines whether to ignore the launch animation
     static final String INTENT_EXTRA_IGNORE_LAUNCH_ANIMATION =

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2488,7 +2488,7 @@ public void run() {
                     setPivotsForZoom(toView, scale);
                     dispatchOnLauncherTransitionStart(fromView, animated, false);
                     dispatchOnLauncherTransitionStart(toView, animated, false);
-                    mWorkspace.post(new Runnable() {
+                    toView.post(new Runnable() {
                         public void run() {
                             // Check that mStateAnimation hasn't changed while
                             // we waited for a layout/draw pass
@@ -2502,7 +2502,7 @@ public void run() {
             if (delayAnim) {
                 final OnGlobalLayoutListener delayedStart = new OnGlobalLayoutListener() {
                     public void onGlobalLayout() {
-                        mWorkspace.post(startAnimRunnable);
+                        toView.post(startAnimRunnable);
                         observer.removeOnGlobalLayoutListener(this);
                     }
                 };

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2488,7 +2488,7 @@ public void run() {
                     setPivotsForZoom(toView, scale);
                     dispatchOnLauncherTransitionStart(fromView, animated, false);
                     dispatchOnLauncherTransitionStart(toView, animated, false);
-                    mWorkspace.post(new Runnable() {
+                    toView.post(new Runnable() {
                         public void run() {
                             // Check that mStateAnimation hasn't changed while
                             // we waited for a layout/draw pass
@@ -2502,7 +2502,7 @@ public void run() {
             if (delayAnim) {
                 final OnGlobalLayoutListener delayedStart = new OnGlobalLayoutListener() {
                     public void onGlobalLayout() {
-                        mWorkspace.post(startAnimRunnable);
+                        toView.post(startAnimRunnable);
                         observer.removeOnGlobalLayoutListener(this);
                     }
                 };

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -393,7 +393,6 @@ public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean to
 
             // Make sure the current page is loaded (we start loading the side pages after the
             // transition to prevent slowing down the animation)
-            Log.d(LOG_TAG, "6549598 onLauncherTransitionPrepare currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage(), true);
 
             if (!LauncherApplication.isScreenLarge()) {
@@ -436,7 +435,6 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
             mAppsCustomizePane.showAllAppsCling();
             // Make sure adjacent pages are loaded (we wait until after the transition to
             // prevent slowing down the animation)
-            Log.d(LOG_TAG, "6549598 onLauncherTransitionEnd currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage());
 
             if (!LauncherApplication.isScreenLarge()) {

File: src/com/android/launcher2/HolographicLinearLayout.java
Patch:
@@ -68,6 +68,7 @@ protected void drawableStateChanged() {
 
     void invalidatePressedFocusedStates() {
         mHolographicHelper.invalidatePressedFocusedStates(mImageView);
+        invalidate();
     }
 
     @Override

File: src/com/android/launcher2/HolographicLinearLayout.java
Patch:
@@ -68,6 +68,7 @@ protected void drawableStateChanged() {
 
     void invalidatePressedFocusedStates() {
         mHolographicHelper.invalidatePressedFocusedStates(mImageView);
+        invalidate();
     }
 
     @Override

File: src/com/android/launcher2/HolographicLinearLayout.java
Patch:
@@ -68,6 +68,7 @@ protected void drawableStateChanged() {
 
     void invalidatePressedFocusedStates() {
         mHolographicHelper.invalidatePressedFocusedStates(mImageView);
+        invalidate();
     }
 
     @Override

File: src/com/android/launcher2/HolographicLinearLayout.java
Patch:
@@ -68,6 +68,7 @@ protected void drawableStateChanged() {
 
     void invalidatePressedFocusedStates() {
         mHolographicHelper.invalidatePressedFocusedStates(mImageView);
+        invalidate();
     }
 
     @Override

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -940,7 +940,7 @@ public void onLauncherTransitionStep(Launcher l, float t) {
 
     @Override
     public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWorkspace) {
-        Log.d(TAG, "6549598 onLauncherTransitionEnd");
+        Log.d(TAG, "6549598 onLauncherTransitionEnd mDeferredSyncWidgetPageItems.size(): " + mDeferredSyncWidgetPageItems.size());
         mInTransition = false;
         for (AsyncTaskPageData d : mDeferredSyncWidgetPageItems) {
             onSyncWidgetPageItems(d);
@@ -1108,7 +1108,7 @@ private void setupPage(PagedViewCellLayout layout) {
     }
 
     public void syncAppsPageItems(int page, boolean immediate) {
-        Log.d(TAG, "6549598 syncAppsPageItems page: " + page);
+        Log.d(TAG, "6549598 syncAppsPageItems page: " + page + " mNumAppsPages: " + mNumAppsPages);
         // ensure that we have the right number of items on the pages
         int numCells = mCellCountX * mCellCountY;
         int startIndex = page * numCells;

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -23,6 +23,7 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.util.AttributeSet;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
@@ -392,6 +393,7 @@ public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean to
 
             // Make sure the current page is loaded (we start loading the side pages after the
             // transition to prevent slowing down the animation)
+            Log.d(LOG_TAG, "6549598 onLauncherTransitionPrepare currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage(), true);
 
             if (!LauncherApplication.isScreenLarge()) {
@@ -434,6 +436,7 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
             mAppsCustomizePane.showAllAppsCling();
             // Make sure adjacent pages are loaded (we wait until after the transition to
             // prevent slowing down the animation)
+            Log.d(LOG_TAG, "6549598 onLauncherTransitionEnd currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage());
 
             if (!LauncherApplication.isScreenLarge()) {

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -185,7 +185,9 @@ private static boolean installShortcut(Context context, Intent data, ArrayList<I
                     if (newAppsScreen == screen) {
                         newApps = sharedPrefs.getStringSet(NEW_APPS_LIST_KEY, newApps);
                     }
-                    newApps.add(intent.toUri(0).toString());
+                    synchronized (newApps) {
+                        newApps.add(intent.toUri(0).toString());
+                    }
                     final Set<String> savedNewApps = newApps;
                     new Thread("setNewAppsThread") {
                         public void run() {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -234,6 +234,7 @@ protected void init() {
         mDirtyPageContent.ensureCapacity(32);
         mScroller = new Scroller(getContext(), new ScrollInterpolator());
         mCurrentPage = 0;
+        if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 init() mCurrentPage: " + mCurrentPage);
         mCenterPagesVertically = true;
 
         final ViewConfiguration configuration = ViewConfiguration.get(getContext());
@@ -317,7 +318,9 @@ void setCurrentPage(int currentPage) {
             return;
         }
 
+
         mCurrentPage = Math.max(0, Math.min(currentPage, getPageCount() - 1));
+        if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 setCurrentPage mCurrentPage: " + mCurrentPage);
         updateCurrentPageScroll();
         updateScrollingIndicator();
         notifyPageSwitchListener();

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -940,7 +940,7 @@ public void onLauncherTransitionStep(Launcher l, float t) {
 
     @Override
     public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWorkspace) {
-        Log.d(TAG, "6549598 onLauncherTransitionEnd");
+        Log.d(TAG, "6549598 onLauncherTransitionEnd mDeferredSyncWidgetPageItems.size(): " + mDeferredSyncWidgetPageItems.size());
         mInTransition = false;
         for (AsyncTaskPageData d : mDeferredSyncWidgetPageItems) {
             onSyncWidgetPageItems(d);
@@ -1108,7 +1108,7 @@ private void setupPage(PagedViewCellLayout layout) {
     }
 
     public void syncAppsPageItems(int page, boolean immediate) {
-        Log.d(TAG, "6549598 syncAppsPageItems page: " + page);
+        Log.d(TAG, "6549598 syncAppsPageItems page: " + page + " mNumAppsPages: " + mNumAppsPages);
         // ensure that we have the right number of items on the pages
         int numCells = mCellCountX * mCellCountY;
         int startIndex = page * numCells;

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -23,6 +23,7 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.util.AttributeSet;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
@@ -392,6 +393,7 @@ public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean to
 
             // Make sure the current page is loaded (we start loading the side pages after the
             // transition to prevent slowing down the animation)
+            Log.d(LOG_TAG, "6549598 onLauncherTransitionPrepare currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage(), true);
 
             if (!LauncherApplication.isScreenLarge()) {
@@ -434,6 +436,7 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
             mAppsCustomizePane.showAllAppsCling();
             // Make sure adjacent pages are loaded (we wait until after the transition to
             // prevent slowing down the animation)
+            Log.d(LOG_TAG, "6549598 onLauncherTransitionEnd currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage());
 
             if (!LauncherApplication.isScreenLarge()) {

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -185,7 +185,9 @@ private static boolean installShortcut(Context context, Intent data, ArrayList<I
                     if (newAppsScreen == screen) {
                         newApps = sharedPrefs.getStringSet(NEW_APPS_LIST_KEY, newApps);
                     }
-                    newApps.add(intent.toUri(0).toString());
+                    synchronized (newApps) {
+                        newApps.add(intent.toUri(0).toString());
+                    }
                     final Set<String> savedNewApps = newApps;
                     new Thread("setNewAppsThread") {
                         public void run() {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -234,6 +234,7 @@ protected void init() {
         mDirtyPageContent.ensureCapacity(32);
         mScroller = new Scroller(getContext(), new ScrollInterpolator());
         mCurrentPage = 0;
+        if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 init() mCurrentPage: " + mCurrentPage);
         mCenterPagesVertically = true;
 
         final ViewConfiguration configuration = ViewConfiguration.get(getContext());
@@ -317,7 +318,9 @@ void setCurrentPage(int currentPage) {
             return;
         }
 
+
         mCurrentPage = Math.max(0, Math.min(currentPage, getPageCount() - 1));
+        if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 setCurrentPage mCurrentPage: " + mCurrentPage);
         updateCurrentPageScroll();
         updateScrollingIndicator();
         notifyPageSwitchListener();

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -940,7 +940,7 @@ public void onLauncherTransitionStep(Launcher l, float t) {
 
     @Override
     public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWorkspace) {
-        Log.d(TAG, "6549598 onLauncherTransitionEnd");
+        Log.d(TAG, "6549598 onLauncherTransitionEnd mDeferredSyncWidgetPageItems.size(): " + mDeferredSyncWidgetPageItems.size());
         mInTransition = false;
         for (AsyncTaskPageData d : mDeferredSyncWidgetPageItems) {
             onSyncWidgetPageItems(d);
@@ -1108,7 +1108,7 @@ private void setupPage(PagedViewCellLayout layout) {
     }
 
     public void syncAppsPageItems(int page, boolean immediate) {
-        Log.d(TAG, "6549598 syncAppsPageItems page: " + page);
+        Log.d(TAG, "6549598 syncAppsPageItems page: " + page + " mNumAppsPages: " + mNumAppsPages);
         // ensure that we have the right number of items on the pages
         int numCells = mCellCountX * mCellCountY;
         int startIndex = page * numCells;

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -23,6 +23,7 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.util.AttributeSet;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
@@ -392,6 +393,7 @@ public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean to
 
             // Make sure the current page is loaded (we start loading the side pages after the
             // transition to prevent slowing down the animation)
+            Log.d(LOG_TAG, "6549598 onLauncherTransitionPrepare currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage(), true);
 
             if (!LauncherApplication.isScreenLarge()) {
@@ -434,6 +436,7 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
             mAppsCustomizePane.showAllAppsCling();
             // Make sure adjacent pages are loaded (we wait until after the transition to
             // prevent slowing down the animation)
+            Log.d(LOG_TAG, "6549598 onLauncherTransitionEnd currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage());
 
             if (!LauncherApplication.isScreenLarge()) {

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -185,7 +185,9 @@ private static boolean installShortcut(Context context, Intent data, ArrayList<I
                     if (newAppsScreen == screen) {
                         newApps = sharedPrefs.getStringSet(NEW_APPS_LIST_KEY, newApps);
                     }
-                    newApps.add(intent.toUri(0).toString());
+                    synchronized (newApps) {
+                        newApps.add(intent.toUri(0).toString());
+                    }
                     final Set<String> savedNewApps = newApps;
                     new Thread("setNewAppsThread") {
                         public void run() {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -234,6 +234,7 @@ protected void init() {
         mDirtyPageContent.ensureCapacity(32);
         mScroller = new Scroller(getContext(), new ScrollInterpolator());
         mCurrentPage = 0;
+        if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 init() mCurrentPage: " + mCurrentPage);
         mCenterPagesVertically = true;
 
         final ViewConfiguration configuration = ViewConfiguration.get(getContext());
@@ -317,7 +318,9 @@ void setCurrentPage(int currentPage) {
             return;
         }
 
+
         mCurrentPage = Math.max(0, Math.min(currentPage, getPageCount() - 1));
+        if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 setCurrentPage mCurrentPage: " + mCurrentPage);
         updateCurrentPageScroll();
         updateScrollingIndicator();
         notifyPageSwitchListener();

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -938,7 +938,7 @@ public void onLauncherTransitionStep(Launcher l, float t) {
 
     @Override
     public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWorkspace) {
-        Log.d(TAG, "6549598 onLauncherTransitionEnd");
+        Log.d(TAG, "6549598 onLauncherTransitionEnd mDeferredSyncWidgetPageItems.size(): " + mDeferredSyncWidgetPageItems.size());
         mInTransition = false;
         for (AsyncTaskPageData d : mDeferredSyncWidgetPageItems) {
             onSyncWidgetPageItems(d);
@@ -1101,7 +1101,7 @@ private void setupPage(PagedViewCellLayout layout) {
     }
 
     public void syncAppsPageItems(int page, boolean immediate) {
-        Log.d(TAG, "6549598 syncAppsPageItems page: " + page);
+        Log.d(TAG, "6549598 syncAppsPageItems page: " + page + " mNumAppsPages: " + mNumAppsPages);
         // ensure that we have the right number of items on the pages
         int numCells = mCellCountX * mCellCountY;
         int startIndex = page * numCells;

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -23,6 +23,7 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.util.AttributeSet;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
@@ -392,6 +393,7 @@ public void onLauncherTransitionPrepare(Launcher l, boolean animated, boolean to
 
             // Make sure the current page is loaded (we start loading the side pages after the
             // transition to prevent slowing down the animation)
+            Log.d(LOG_TAG, "6549598 onLauncherTransitionPrepare currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage(), true);
 
             if (!LauncherApplication.isScreenLarge()) {
@@ -434,6 +436,7 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
             mAppsCustomizePane.showAllAppsCling();
             // Make sure adjacent pages are loaded (we wait until after the transition to
             // prevent slowing down the animation)
+            Log.d(LOG_TAG, "6549598 onLauncherTransitionEnd currentPage: " + mAppsCustomizePane.getCurrentPage());
             mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane.getCurrentPage());
 
             if (!LauncherApplication.isScreenLarge()) {

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -185,7 +185,9 @@ private static boolean installShortcut(Context context, Intent data, ArrayList<I
                     if (newAppsScreen == screen) {
                         newApps = sharedPrefs.getStringSet(NEW_APPS_LIST_KEY, newApps);
                     }
-                    newApps.add(intent.toUri(0).toString());
+                    synchronized (newApps) {
+                        newApps.add(intent.toUri(0).toString());
+                    }
                     final Set<String> savedNewApps = newApps;
                     new Thread("setNewAppsThread") {
                         public void run() {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -234,6 +234,7 @@ protected void init() {
         mDirtyPageContent.ensureCapacity(32);
         mScroller = new Scroller(getContext(), new ScrollInterpolator());
         mCurrentPage = 0;
+        if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 init() mCurrentPage: " + mCurrentPage);
         mCenterPagesVertically = true;
 
         final ViewConfiguration configuration = ViewConfiguration.get(getContext());
@@ -317,7 +318,9 @@ void setCurrentPage(int currentPage) {
             return;
         }
 
+
         mCurrentPage = Math.max(0, Math.min(currentPage, getPageCount() - 1));
+        if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 setCurrentPage mCurrentPage: " + mCurrentPage);
         updateCurrentPageScroll();
         updateScrollingIndicator();
         notifyPageSwitchListener();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -704,7 +704,8 @@ void reinflateWidgetsIfNecessary() {
                 AppWidgetProviderInfo pInfo = lahv.getAppWidgetInfo();
 
                 // Remove the current widget which is inflated with the wrong orientation
-                getWorkspace().getParentCellLayoutForView(lahv).removeView(lahv);
+                CellLayout cl = getWorkspace().getParentCellLayoutForView(lahv);
+                if (cl != null) cl.removeView(lahv);
                 // Re-inflate the widget using the correct orientation
                 AppWidgetHostView widget = mAppWidgetHost.createView(this, info.appWidgetId, pInfo);
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -704,7 +704,8 @@ void reinflateWidgetsIfNecessary() {
                 AppWidgetProviderInfo pInfo = lahv.getAppWidgetInfo();
 
                 // Remove the current widget which is inflated with the wrong orientation
-                getWorkspace().getParentCellLayoutForView(lahv).removeView(lahv);
+                CellLayout cl = getWorkspace().getParentCellLayoutForView(lahv);
+                if (cl != null) cl.removeView(lahv);
                 // Re-inflate the widget using the correct orientation
                 AppWidgetHostView widget = mAppWidgetHost.createView(this, info.appWidgetId, pInfo);
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -704,7 +704,8 @@ void reinflateWidgetsIfNecessary() {
                 AppWidgetProviderInfo pInfo = lahv.getAppWidgetInfo();
 
                 // Remove the current widget which is inflated with the wrong orientation
-                getWorkspace().getParentCellLayoutForView(lahv).removeView(lahv);
+                CellLayout cl = getWorkspace().getParentCellLayoutForView(lahv);
+                if (cl != null) cl.removeView(lahv);
                 // Re-inflate the widget using the correct orientation
                 AppWidgetHostView widget = mAppWidgetHost.createView(this, info.appWidgetId, pInfo);
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -704,7 +704,8 @@ void reinflateWidgetsIfNecessary() {
                 AppWidgetProviderInfo pInfo = lahv.getAppWidgetInfo();
 
                 // Remove the current widget which is inflated with the wrong orientation
-                getWorkspace().getParentCellLayoutForView(lahv).removeView(lahv);
+                CellLayout cl = getWorkspace().getParentCellLayoutForView(lahv);
+                if (cl != null) cl.removeView(lahv);
                 // Re-inflate the widget using the correct orientation
                 AppWidgetHostView widget = mAppWidgetHost.createView(this, info.appWidgetId, pInfo);
 

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1673,6 +1673,7 @@ protected void invalidatePageData(int currentPage) {
     }
     protected void invalidatePageData(int currentPage, boolean immediateAndOnly) {
         if (!mIsDataReady) {
+            if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 invalidatePageData page: " + currentPage + " not data ready");
             return;
         }
 
@@ -1704,6 +1705,8 @@ protected void invalidatePageData(int currentPage, boolean immediateAndOnly) {
             // Load any pages that are necessary for the current window of views
             loadAssociatedPages(mCurrentPage, immediateAndOnly);
             requestLayout();
+
+            if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 invalidatePageData page: " + currentPage);
         }
     }
 

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1673,6 +1673,7 @@ protected void invalidatePageData(int currentPage) {
     }
     protected void invalidatePageData(int currentPage, boolean immediateAndOnly) {
         if (!mIsDataReady) {
+            if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 invalidatePageData page: " + currentPage + " not data ready");
             return;
         }
 
@@ -1704,6 +1705,8 @@ protected void invalidatePageData(int currentPage, boolean immediateAndOnly) {
             // Load any pages that are necessary for the current window of views
             loadAssociatedPages(mCurrentPage, immediateAndOnly);
             requestLayout();
+
+            if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 invalidatePageData page: " + currentPage);
         }
     }
 

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1673,6 +1673,7 @@ protected void invalidatePageData(int currentPage) {
     }
     protected void invalidatePageData(int currentPage, boolean immediateAndOnly) {
         if (!mIsDataReady) {
+            if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 invalidatePageData page: " + currentPage + " not data ready");
             return;
         }
 
@@ -1704,6 +1705,8 @@ protected void invalidatePageData(int currentPage, boolean immediateAndOnly) {
             // Load any pages that are necessary for the current window of views
             loadAssociatedPages(mCurrentPage, immediateAndOnly);
             requestLayout();
+
+            if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 invalidatePageData page: " + currentPage);
         }
     }
 

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1673,6 +1673,7 @@ protected void invalidatePageData(int currentPage) {
     }
     protected void invalidatePageData(int currentPage, boolean immediateAndOnly) {
         if (!mIsDataReady) {
+            if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 invalidatePageData page: " + currentPage + " not data ready");
             return;
         }
 
@@ -1704,6 +1705,8 @@ protected void invalidatePageData(int currentPage, boolean immediateAndOnly) {
             // Load any pages that are necessary for the current window of views
             loadAssociatedPages(mCurrentPage, immediateAndOnly);
             requestLayout();
+
+            if (this instanceof AppsCustomizePagedView) Log.d(TAG, "6549598 invalidatePageData page: " + currentPage);
         }
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -817,6 +817,7 @@ private void restoreState(Bundle savedState) {
             mPendingAddInfo.spanX = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_X);
             mPendingAddInfo.spanY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_Y);
             mPendingAddWidgetInfo = savedState.getParcelable(RUNTIME_STATE_PENDING_ADD_WIDGET_INFO);
+            mWaitingForResult = true;
             mRestoring = true;
         }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2839,7 +2839,6 @@ private void manageFolderFeedback(ItemInfo info, CellLayout targetLayout,
 
         if (willAddToFolder && mDragMode == DRAG_MODE_NONE) {
             mDragOverFolderIcon = ((FolderIcon) dragOverView);
-            mAddToExistingFolderOnDrop = true;
             mDragOverFolderIcon.onDragEnter(info);
             if (targetLayout != null) {
                 targetLayout.clearDragOutlines();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -817,6 +817,7 @@ private void restoreState(Bundle savedState) {
             mPendingAddInfo.spanX = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_X);
             mPendingAddInfo.spanY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_Y);
             mPendingAddWidgetInfo = savedState.getParcelable(RUNTIME_STATE_PENDING_ADD_WIDGET_INFO);
+            mWaitingForResult = true;
             mRestoring = true;
         }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2839,7 +2839,6 @@ private void manageFolderFeedback(ItemInfo info, CellLayout targetLayout,
 
         if (willAddToFolder && mDragMode == DRAG_MODE_NONE) {
             mDragOverFolderIcon = ((FolderIcon) dragOverView);
-            mAddToExistingFolderOnDrop = true;
             mDragOverFolderIcon.onDragEnter(info);
             if (targetLayout != null) {
                 targetLayout.clearDragOutlines();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -817,6 +817,7 @@ private void restoreState(Bundle savedState) {
             mPendingAddInfo.spanX = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_X);
             mPendingAddInfo.spanY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_Y);
             mPendingAddWidgetInfo = savedState.getParcelable(RUNTIME_STATE_PENDING_ADD_WIDGET_INFO);
+            mWaitingForResult = true;
             mRestoring = true;
         }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2839,7 +2839,6 @@ private void manageFolderFeedback(ItemInfo info, CellLayout targetLayout,
 
         if (willAddToFolder && mDragMode == DRAG_MODE_NONE) {
             mDragOverFolderIcon = ((FolderIcon) dragOverView);
-            mAddToExistingFolderOnDrop = true;
             mDragOverFolderIcon.onDragEnter(info);
             if (targetLayout != null) {
                 targetLayout.clearDragOutlines();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -817,6 +817,7 @@ private void restoreState(Bundle savedState) {
             mPendingAddInfo.spanX = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_X);
             mPendingAddInfo.spanY = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SPAN_Y);
             mPendingAddWidgetInfo = savedState.getParcelable(RUNTIME_STATE_PENDING_ADD_WIDGET_INFO);
+            mWaitingForResult = true;
             mRestoring = true;
         }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3181,6 +3181,7 @@ public void animateWidgetDrop(ItemInfo info, CellLayout cellLayout, DragView dra
 
         // In the case where we've prebound the widget, we remove it from the DragLayer
         if (finalView instanceof AppWidgetHostView && external) {
+            Log.d(TAG, "6557954 Animate widget drop, final view is appWidgetHostView");
             mLauncher.getDragLayer().removeView(finalView);
         }
         if ((animationType == ANIMATE_INTO_POSITION_AND_RESIZE || external) && finalView != null) {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3181,6 +3181,7 @@ public void animateWidgetDrop(ItemInfo info, CellLayout cellLayout, DragView dra
 
         // In the case where we've prebound the widget, we remove it from the DragLayer
         if (finalView instanceof AppWidgetHostView && external) {
+            Log.d(TAG, "6557954 Animate widget drop, final view is appWidgetHostView");
             mLauncher.getDragLayer().removeView(finalView);
         }
         if ((animationType == ANIMATE_INTO_POSITION_AND_RESIZE || external) && finalView != null) {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3181,6 +3181,7 @@ public void animateWidgetDrop(ItemInfo info, CellLayout cellLayout, DragView dra
 
         // In the case where we've prebound the widget, we remove it from the DragLayer
         if (finalView instanceof AppWidgetHostView && external) {
+            Log.d(TAG, "6557954 Animate widget drop, final view is appWidgetHostView");
             mLauncher.getDragLayer().removeView(finalView);
         }
         if ((animationType == ANIMATE_INTO_POSITION_AND_RESIZE || external) && finalView != null) {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2194,6 +2194,9 @@ public void onDrop(final DragObject d) {
                     resizeOnDrop = true;
                     item.spanX = resultSpan[0];
                     item.spanY = resultSpan[1];
+                    AppWidgetHostView awhv = (AppWidgetHostView) cell;
+                    AppWidgetResizeFrame.updateWidgetSizeRanges(awhv, mLauncher, resultSpan[0],
+                            resultSpan[1]);
                 }
 
                 if (mCurrentPage != screen && !hasMovedIntoHotseat) {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2194,6 +2194,9 @@ public void onDrop(final DragObject d) {
                     resizeOnDrop = true;
                     item.spanX = resultSpan[0];
                     item.spanY = resultSpan[1];
+                    AppWidgetHostView awhv = (AppWidgetHostView) cell;
+                    AppWidgetResizeFrame.updateWidgetSizeRanges(awhv, mLauncher, resultSpan[0],
+                            resultSpan[1]);
                 }
 
                 if (mCurrentPage != screen && !hasMovedIntoHotseat) {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2194,6 +2194,9 @@ public void onDrop(final DragObject d) {
                     resizeOnDrop = true;
                     item.spanX = resultSpan[0];
                     item.spanY = resultSpan[1];
+                    AppWidgetHostView awhv = (AppWidgetHostView) cell;
+                    AppWidgetResizeFrame.updateWidgetSizeRanges(awhv, mLauncher, resultSpan[0],
+                            resultSpan[1]);
                 }
 
                 if (mCurrentPage != screen && !hasMovedIntoHotseat) {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2194,6 +2194,9 @@ public void onDrop(final DragObject d) {
                     resizeOnDrop = true;
                     item.spanX = resultSpan[0];
                     item.spanY = resultSpan[1];
+                    AppWidgetHostView awhv = (AppWidgetHostView) cell;
+                    AppWidgetResizeFrame.updateWidgetSizeRanges(awhv, mLauncher, resultSpan[0],
+                            resultSpan[1]);
                 }
 
                 if (mCurrentPage != screen && !hasMovedIntoHotseat) {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3466,6 +3466,7 @@ private Cling initCling(int clingId, int[] positionData, boolean animate, int de
             cling.init(this, positionData);
             cling.setVisibility(View.VISIBLE);
             cling.setLayerType(View.LAYER_TYPE_HARDWARE, null);
+            cling.requestAccessibilityFocus();
             if (animate) {
                 cling.buildLayer();
                 cling.setAlpha(0f);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1869,6 +1869,7 @@ public void onClickVoiceButton(View v) {
                 intent.setPackage(activityName.getPackageName());
             }
             startActivity(null, intent, "onClickVoiceButton");
+            overridePendingTransition(R.anim.fade_in_fast, R.anim.fade_out_fast);
         } catch (ActivityNotFoundException e) {
             Intent intent = new Intent(RecognizerIntent.ACTION_WEB_SEARCH);
             intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1869,6 +1869,7 @@ public void onClickVoiceButton(View v) {
                 intent.setPackage(activityName.getPackageName());
             }
             startActivity(null, intent, "onClickVoiceButton");
+            overridePendingTransition(R.anim.fade_in_fast, R.anim.fade_out_fast);
         } catch (ActivityNotFoundException e) {
             Intent intent = new Intent(RecognizerIntent.ACTION_WEB_SEARCH);
             intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1869,6 +1869,7 @@ public void onClickVoiceButton(View v) {
                 intent.setPackage(activityName.getPackageName());
             }
             startActivity(null, intent, "onClickVoiceButton");
+            overridePendingTransition(R.anim.fade_in_fast, R.anim.fade_out_fast);
         } catch (ActivityNotFoundException e) {
             Intent intent = new Intent(RecognizerIntent.ACTION_WEB_SEARCH);
             intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1869,6 +1869,7 @@ public void onClickVoiceButton(View v) {
                 intent.setPackage(activityName.getPackageName());
             }
             startActivity(null, intent, "onClickVoiceButton");
+            overridePendingTransition(R.anim.fade_in_fast, R.anim.fade_out_fast);
         } catch (ActivityNotFoundException e) {
             Intent intent = new Intent(RecognizerIntent.ACTION_WEB_SEARCH);
             intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -144,8 +144,8 @@ public void run() {
             if (sShortpressTarget != null) return;
             if (mShortPressListener != null) {
                 mShortPressListener.onShortPress(PagedViewWidget.this);
+                sShortpressTarget = PagedViewWidget.this;
             }
-            sShortpressTarget = PagedViewWidget.this;
             mShortPressTriggered = true;
         }
     }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -713,9 +713,11 @@ private boolean beginDraggingWidget(View v) {
                     mWidgetPreviewIconPaddedDimension, Bitmap.Config.ARGB_8888);
             Drawable d = image.getDrawable();
             mCanvas.setBitmap(preview);
+            mCanvas.save();
             mCanvas.translate((mWidgetPreviewIconPaddedDimension - d.getIntrinsicWidth()) / 2,
                     (mWidgetPreviewIconPaddedDimension - d.getIntrinsicHeight()) / 2);
             d.draw(mCanvas);
+            mCanvas.restore();
             mCanvas.setBitmap(null);
             createItemInfo.spanX = createItemInfo.spanY = 1;
         }

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -141,8 +141,8 @@ interface ShortPressListener {
 
     class CheckForShortPress implements Runnable {
         public void run() {
+            if (sShortpressTarget != null) return;
             if (mShortPressListener != null) {
-                if (sShortpressTarget != null) return;
                 mShortPressListener.onShortPress(PagedViewWidget.this);
             }
             sShortpressTarget = PagedViewWidget.this;

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -144,8 +144,8 @@ public void run() {
             if (sShortpressTarget != null) return;
             if (mShortPressListener != null) {
                 mShortPressListener.onShortPress(PagedViewWidget.this);
+                sShortpressTarget = PagedViewWidget.this;
             }
-            sShortpressTarget = PagedViewWidget.this;
             mShortPressTriggered = true;
         }
     }

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -144,8 +144,8 @@ public void run() {
             if (sShortpressTarget != null) return;
             if (mShortPressListener != null) {
                 mShortPressListener.onShortPress(PagedViewWidget.this);
+                sShortpressTarget = PagedViewWidget.this;
             }
-            sShortpressTarget = PagedViewWidget.this;
             mShortPressTriggered = true;
         }
     }

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -144,8 +144,8 @@ public void run() {
             if (sShortpressTarget != null) return;
             if (mShortPressListener != null) {
                 mShortPressListener.onShortPress(PagedViewWidget.this);
+                sShortpressTarget = PagedViewWidget.this;
             }
-            sShortpressTarget = PagedViewWidget.this;
             mShortPressTriggered = true;
         }
     }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -713,9 +713,11 @@ private boolean beginDraggingWidget(View v) {
                     mWidgetPreviewIconPaddedDimension, Bitmap.Config.ARGB_8888);
             Drawable d = image.getDrawable();
             mCanvas.setBitmap(preview);
+            mCanvas.save();
             mCanvas.translate((mWidgetPreviewIconPaddedDimension - d.getIntrinsicWidth()) / 2,
                     (mWidgetPreviewIconPaddedDimension - d.getIntrinsicHeight()) / 2);
             d.draw(mCanvas);
+            mCanvas.restore();
             mCanvas.setBitmap(null);
             createItemInfo.spanX = createItemInfo.spanY = 1;
         }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -713,9 +713,11 @@ private boolean beginDraggingWidget(View v) {
                     mWidgetPreviewIconPaddedDimension, Bitmap.Config.ARGB_8888);
             Drawable d = image.getDrawable();
             mCanvas.setBitmap(preview);
+            mCanvas.save();
             mCanvas.translate((mWidgetPreviewIconPaddedDimension - d.getIntrinsicWidth()) / 2,
                     (mWidgetPreviewIconPaddedDimension - d.getIntrinsicHeight()) / 2);
             d.draw(mCanvas);
+            mCanvas.restore();
             mCanvas.setBitmap(null);
             createItemInfo.spanX = createItemInfo.spanY = 1;
         }

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -141,8 +141,8 @@ interface ShortPressListener {
 
     class CheckForShortPress implements Runnable {
         public void run() {
+            if (sShortpressTarget != null) return;
             if (mShortPressListener != null) {
-                if (sShortpressTarget != null) return;
                 mShortPressListener.onShortPress(PagedViewWidget.this);
             }
             sShortpressTarget = PagedViewWidget.this;

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -141,8 +141,8 @@ interface ShortPressListener {
 
     class CheckForShortPress implements Runnable {
         public void run() {
+            if (sShortpressTarget != null) return;
             if (mShortPressListener != null) {
-                if (sShortpressTarget != null) return;
                 mShortPressListener.onShortPress(PagedViewWidget.this);
             }
             sShortpressTarget = PagedViewWidget.this;

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -141,8 +141,8 @@ interface ShortPressListener {
 
     class CheckForShortPress implements Runnable {
         public void run() {
+            if (sShortpressTarget != null) return;
             if (mShortPressListener != null) {
-                if (sShortpressTarget != null) return;
                 mShortPressListener.onShortPress(PagedViewWidget.this);
             }
             sShortpressTarget = PagedViewWidget.this;

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -707,9 +707,11 @@ private boolean beginDraggingWidget(View v) {
                     mWidgetPreviewIconPaddedDimension, Bitmap.Config.ARGB_8888);
             Drawable d = image.getDrawable();
             mCanvas.setBitmap(preview);
+            mCanvas.save();
             mCanvas.translate((mWidgetPreviewIconPaddedDimension - d.getIntrinsicWidth()) / 2,
                     (mWidgetPreviewIconPaddedDimension - d.getIntrinsicHeight()) / 2);
             d.draw(mCanvas);
+            mCanvas.restore();
             mCanvas.setBitmap(null);
             createItemInfo.spanX = createItemInfo.spanY = 1;
         }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -811,6 +811,7 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
             onSyncWidgetPageItems(d);
         }
         mDeferredSyncWidgetPageItems.clear();
+        mForceDrawAllChildrenNextFrame = !toWorkspace;
     }
 
     @Override
@@ -1514,7 +1515,7 @@ public int getPageContentWidth() {
     @Override
     protected void onPageEndMoving() {
         super.onPageEndMoving();
-
+        mForceDrawAllChildrenNextFrame = true;
         // We reset the save index when we change pages so that it will be recalculated on next
         // rotation
         mSaveInstanceStateItemIndex = -1;

File: src/com/android/launcher2/DeleteDropTarget.java
Patch:
@@ -25,6 +25,7 @@
 import android.content.res.Resources;
 import android.graphics.PointF;
 import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
 import android.graphics.drawable.TransitionDrawable;
 import android.util.AttributeSet;
 import android.view.View;
@@ -76,7 +77,7 @@ protected void onFinishInflate() {
 
         // The current drawable is set to either the remove drawable or the uninstall drawable 
         // and is initially set to the remove drawable, as set in the layout xml.
-        mCurrentDrawable = (TransitionDrawable) getCompoundDrawables()[0];
+        mCurrentDrawable = (TransitionDrawable) getCurrentDrawable();
 
         // Remove the text in the Phone UI in landscape
         int orientation = getResources().getConfiguration().orientation;
@@ -157,7 +158,7 @@ public void onDragStart(DragSource source, Object info, int dragAction) {
         } else {
             setCompoundDrawablesWithIntrinsicBounds(mRemoveDrawable, null, null, null);
         }
-        mCurrentDrawable = (TransitionDrawable) getCompoundDrawables()[0];
+        mCurrentDrawable = (TransitionDrawable) getCurrentDrawable();
 
         mActive = isVisible;
         resetHoverColor();

File: src/com/android/launcher2/InfoDropTarget.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.android.launcher2;
 
-import android.appwidget.AppWidgetProviderInfo;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.res.ColorStateList;
@@ -51,7 +50,7 @@ protected void onFinishInflate() {
         // Get the hover color
         Resources r = getResources();
         mHoverColor = r.getColor(R.color.info_target_hover_tint);
-        mDrawable = (TransitionDrawable) getCompoundDrawables()[0];
+        mDrawable = (TransitionDrawable) getCurrentDrawable();
         mDrawable.setCrossFadeEnabled(true);
 
         // Remove the text in the Phone UI in landscape

File: src/com/android/launcher2/LauncherProvider.java
Patch:
@@ -203,7 +203,7 @@ public long generateNewId() {
         return mOpenHelper.generateNewId();
     }
 
-    public void loadDefaultFavoritesIfNecessary() {
+    synchronized public void loadDefaultFavoritesIfNecessary() {
         String spKey = LauncherApplication.getSharedPreferencesKey();
         SharedPreferences sp = getContext().getSharedPreferences(spKey, Context.MODE_PRIVATE);
         if (sp.getBoolean(DB_CREATED_BUT_DEFAULT_WORKSPACE_NOT_LOADED, false)) {

File: src/com/android/launcher2/DeleteDropTarget.java
Patch:
@@ -25,6 +25,7 @@
 import android.content.res.Resources;
 import android.graphics.PointF;
 import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
 import android.graphics.drawable.TransitionDrawable;
 import android.util.AttributeSet;
 import android.view.View;
@@ -76,7 +77,7 @@ protected void onFinishInflate() {
 
         // The current drawable is set to either the remove drawable or the uninstall drawable 
         // and is initially set to the remove drawable, as set in the layout xml.
-        mCurrentDrawable = (TransitionDrawable) getCompoundDrawables()[0];
+        mCurrentDrawable = (TransitionDrawable) getCurrentDrawable();
 
         // Remove the text in the Phone UI in landscape
         int orientation = getResources().getConfiguration().orientation;
@@ -157,7 +158,7 @@ public void onDragStart(DragSource source, Object info, int dragAction) {
         } else {
             setCompoundDrawablesWithIntrinsicBounds(mRemoveDrawable, null, null, null);
         }
-        mCurrentDrawable = (TransitionDrawable) getCompoundDrawables()[0];
+        mCurrentDrawable = (TransitionDrawable) getCurrentDrawable();
 
         mActive = isVisible;
         resetHoverColor();

File: src/com/android/launcher2/InfoDropTarget.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.android.launcher2;
 
-import android.appwidget.AppWidgetProviderInfo;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.res.ColorStateList;
@@ -51,7 +50,7 @@ protected void onFinishInflate() {
         // Get the hover color
         Resources r = getResources();
         mHoverColor = r.getColor(R.color.info_target_hover_tint);
-        mDrawable = (TransitionDrawable) getCompoundDrawables()[0];
+        mDrawable = (TransitionDrawable) getCurrentDrawable();
         mDrawable.setCrossFadeEnabled(true);
 
         // Remove the text in the Phone UI in landscape

File: src/com/android/launcher2/LauncherProvider.java
Patch:
@@ -203,7 +203,7 @@ public long generateNewId() {
         return mOpenHelper.generateNewId();
     }
 
-    public void loadDefaultFavoritesIfNecessary() {
+    synchronized public void loadDefaultFavoritesIfNecessary() {
         String spKey = LauncherApplication.getSharedPreferencesKey();
         SharedPreferences sp = getContext().getSharedPreferences(spKey, Context.MODE_PRIVATE);
         if (sp.getBoolean(DB_CREATED_BUT_DEFAULT_WORKSPACE_NOT_LOADED, false)) {

File: src/com/android/launcher2/DeleteDropTarget.java
Patch:
@@ -25,6 +25,7 @@
 import android.content.res.Resources;
 import android.graphics.PointF;
 import android.graphics.Rect;
+import android.graphics.drawable.Drawable;
 import android.graphics.drawable.TransitionDrawable;
 import android.util.AttributeSet;
 import android.view.View;
@@ -76,7 +77,7 @@ protected void onFinishInflate() {
 
         // The current drawable is set to either the remove drawable or the uninstall drawable 
         // and is initially set to the remove drawable, as set in the layout xml.
-        mCurrentDrawable = (TransitionDrawable) getCompoundDrawables()[0];
+        mCurrentDrawable = (TransitionDrawable) getCurrentDrawable();
 
         // Remove the text in the Phone UI in landscape
         int orientation = getResources().getConfiguration().orientation;
@@ -157,7 +158,7 @@ public void onDragStart(DragSource source, Object info, int dragAction) {
         } else {
             setCompoundDrawablesWithIntrinsicBounds(mRemoveDrawable, null, null, null);
         }
-        mCurrentDrawable = (TransitionDrawable) getCompoundDrawables()[0];
+        mCurrentDrawable = (TransitionDrawable) getCurrentDrawable();
 
         mActive = isVisible;
         resetHoverColor();

File: src/com/android/launcher2/InfoDropTarget.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.android.launcher2;
 
-import android.appwidget.AppWidgetProviderInfo;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.res.ColorStateList;
@@ -51,7 +50,7 @@ protected void onFinishInflate() {
         // Get the hover color
         Resources r = getResources();
         mHoverColor = r.getColor(R.color.info_target_hover_tint);
-        mDrawable = (TransitionDrawable) getCompoundDrawables()[0];
+        mDrawable = (TransitionDrawable) getCurrentDrawable();
         mDrawable.setCrossFadeEnabled(true);
 
         // Remove the text in the Phone UI in landscape

File: src/com/android/launcher2/LauncherProvider.java
Patch:
@@ -203,7 +203,7 @@ public long generateNewId() {
         return mOpenHelper.generateNewId();
     }
 
-    public void loadDefaultFavoritesIfNecessary() {
+    synchronized public void loadDefaultFavoritesIfNecessary() {
         String spKey = LauncherApplication.getSharedPreferencesKey();
         SharedPreferences sp = getContext().getSharedPreferences(spKey, Context.MODE_PRIVATE);
         if (sp.getBoolean(DB_CREATED_BUT_DEFAULT_WORKSPACE_NOT_LOADED, false)) {

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -155,6 +155,7 @@ public void showSearchBar(boolean animated) {
         } else {
             mQSBSearchBar.setVisibility(View.VISIBLE);
             mQSBSearchBar.setAlpha(1f);
+            mQSBSearchBar.setTranslationY(0);
         }
         mIsSearchBarHidden = false;
     }
@@ -165,6 +166,7 @@ public void hideSearchBar(boolean animated) {
         } else {
             mQSBSearchBar.setVisibility(View.INVISIBLE);
             mQSBSearchBar.setAlpha(0f);
+            mQSBSearchBar.setTranslationY(0);
         }
         mIsSearchBarHidden = true;
     }

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1089,7 +1089,9 @@ private void loadWorkspace() {
 
                                 // App shortcuts that used to be automatically added to Launcher
                                 // didn't always have the correct intent flags set, so do that here
-                                if (intent.getAction().equals(Intent.ACTION_MAIN) &&
+                                if (intent.getAction() != null &&
+                                        intent.getCategories() != null &&
+                                        intent.getAction().equals(Intent.ACTION_MAIN) &&
                                         intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) {
                                     intent.addFlags(
                                         Intent.FLAG_ACTIVITY_NEW_TASK |

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -702,6 +702,8 @@ private boolean beginDraggingWidget(View v) {
                     mWidgetPreviewIconPaddedDimension, Bitmap.Config.ARGB_8888);
             Drawable d = image.getDrawable();
             mCanvas.setBitmap(preview);
+            mCanvas.translate((mWidgetPreviewIconPaddedDimension - d.getIntrinsicWidth()) / 2,
+                    (mWidgetPreviewIconPaddedDimension - d.getIntrinsicHeight()) / 2);
             d.draw(mCanvas);
             mCanvas.setBitmap(null);
             createItemInfo.spanX = createItemInfo.spanY = 1;

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -155,6 +155,7 @@ public void showSearchBar(boolean animated) {
         } else {
             mQSBSearchBar.setVisibility(View.VISIBLE);
             mQSBSearchBar.setAlpha(1f);
+            mQSBSearchBar.setTranslationY(0);
         }
         mIsSearchBarHidden = false;
     }
@@ -165,6 +166,7 @@ public void hideSearchBar(boolean animated) {
         } else {
             mQSBSearchBar.setVisibility(View.INVISIBLE);
             mQSBSearchBar.setAlpha(0f);
+            mQSBSearchBar.setTranslationY(0);
         }
         mIsSearchBarHidden = true;
     }

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1089,7 +1089,9 @@ private void loadWorkspace() {
 
                                 // App shortcuts that used to be automatically added to Launcher
                                 // didn't always have the correct intent flags set, so do that here
-                                if (intent.getAction().equals(Intent.ACTION_MAIN) &&
+                                if (intent.getAction() != null &&
+                                        intent.getCategories() != null &&
+                                        intent.getAction().equals(Intent.ACTION_MAIN) &&
                                         intent.getCategories().contains(Intent.CATEGORY_LAUNCHER)) {
                                     intent.addFlags(
                                         Intent.FLAG_ACTIVITY_NEW_TASK |

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -155,6 +155,7 @@ public void showSearchBar(boolean animated) {
         } else {
             mQSBSearchBar.setVisibility(View.VISIBLE);
             mQSBSearchBar.setAlpha(1f);
+            mQSBSearchBar.setTranslationY(0);
         }
         mIsSearchBarHidden = false;
     }
@@ -165,6 +166,7 @@ public void hideSearchBar(boolean animated) {
         } else {
             mQSBSearchBar.setVisibility(View.INVISIBLE);
             mQSBSearchBar.setAlpha(0f);
+            mQSBSearchBar.setTranslationY(0);
         }
         mIsSearchBarHidden = true;
     }

File: src/com/android/launcher2/Folder.java
Patch:
@@ -323,7 +323,6 @@ public int compare(ShortcutInfo lhs, ShortcutInfo rhs) {
             int rhIndex = rhs.cellY * mNumCols + rhs.cellX;
             return (lhIndex - rhIndex);
         }
-
     }
 
     private void placeInReadingOrder(ArrayList<ShortcutInfo> items) {
@@ -335,7 +334,8 @@ private void placeInReadingOrder(ArrayList<ShortcutInfo> items) {
                 maxX = item.cellX;
             }
         }
-        GridComparator gridComparator = new GridComparator(maxX);
+
+        GridComparator gridComparator = new GridComparator(maxX + 1);
         Collections.sort(items, gridComparator);
         final int countX = mContent.getCountX();
         for (int i = 0; i < count; i++) {
@@ -383,6 +383,7 @@ void bind(FolderInfo info) {
         } else {
             mFolderName.setText("");
         }
+        updateItemLocationsInDatabase();
     }
 
     /**

File: src/com/android/launcher2/Folder.java
Patch:
@@ -323,7 +323,6 @@ public int compare(ShortcutInfo lhs, ShortcutInfo rhs) {
             int rhIndex = rhs.cellY * mNumCols + rhs.cellX;
             return (lhIndex - rhIndex);
         }
-
     }
 
     private void placeInReadingOrder(ArrayList<ShortcutInfo> items) {
@@ -335,7 +334,8 @@ private void placeInReadingOrder(ArrayList<ShortcutInfo> items) {
                 maxX = item.cellX;
             }
         }
-        GridComparator gridComparator = new GridComparator(maxX);
+
+        GridComparator gridComparator = new GridComparator(maxX + 1);
         Collections.sort(items, gridComparator);
         final int countX = mContent.getCountX();
         for (int i = 0; i < count; i++) {
@@ -383,6 +383,7 @@ void bind(FolderInfo info) {
         } else {
             mFolderName.setText("");
         }
+        updateItemLocationsInDatabase();
     }
 
     /**

File: src/com/android/launcher2/Folder.java
Patch:
@@ -323,7 +323,6 @@ public int compare(ShortcutInfo lhs, ShortcutInfo rhs) {
             int rhIndex = rhs.cellY * mNumCols + rhs.cellX;
             return (lhIndex - rhIndex);
         }
-
     }
 
     private void placeInReadingOrder(ArrayList<ShortcutInfo> items) {
@@ -335,7 +334,8 @@ private void placeInReadingOrder(ArrayList<ShortcutInfo> items) {
                 maxX = item.cellX;
             }
         }
-        GridComparator gridComparator = new GridComparator(maxX);
+
+        GridComparator gridComparator = new GridComparator(maxX + 1);
         Collections.sort(items, gridComparator);
         final int countX = mContent.getCountX();
         for (int i = 0; i < count; i++) {
@@ -383,6 +383,7 @@ void bind(FolderInfo info) {
         } else {
             mFolderName.setText("");
         }
+        updateItemLocationsInDatabase();
     }
 
     /**

File: src/com/android/launcher2/Folder.java
Patch:
@@ -323,7 +323,6 @@ public int compare(ShortcutInfo lhs, ShortcutInfo rhs) {
             int rhIndex = rhs.cellY * mNumCols + rhs.cellX;
             return (lhIndex - rhIndex);
         }
-
     }
 
     private void placeInReadingOrder(ArrayList<ShortcutInfo> items) {
@@ -335,7 +334,8 @@ private void placeInReadingOrder(ArrayList<ShortcutInfo> items) {
                 maxX = item.cellX;
             }
         }
-        GridComparator gridComparator = new GridComparator(maxX);
+
+        GridComparator gridComparator = new GridComparator(maxX + 1);
         Collections.sort(items, gridComparator);
         final int countX = mContent.getCountX();
         for (int i = 0; i < count; i++) {
@@ -383,6 +383,7 @@ void bind(FolderInfo info) {
         } else {
             mFolderName.setText("");
         }
+        updateItemLocationsInDatabase();
     }
 
     /**

File: src/com/android/launcher2/Folder.java
Patch:
@@ -323,7 +323,6 @@ public int compare(ShortcutInfo lhs, ShortcutInfo rhs) {
             int rhIndex = rhs.cellY * mNumCols + rhs.cellX;
             return (lhIndex - rhIndex);
         }
-
     }
 
     private void placeInReadingOrder(ArrayList<ShortcutInfo> items) {
@@ -335,7 +334,8 @@ private void placeInReadingOrder(ArrayList<ShortcutInfo> items) {
                 maxX = item.cellX;
             }
         }
-        GridComparator gridComparator = new GridComparator(maxX);
+
+        GridComparator gridComparator = new GridComparator(maxX + 1);
         Collections.sort(items, gridComparator);
         final int countX = mContent.getCountX();
         for (int i = 0; i < count; i++) {
@@ -383,6 +383,7 @@ void bind(FolderInfo info) {
         } else {
             mFolderName.setText("");
         }
+        updateItemLocationsInDatabase();
     }
 
     /**

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -566,7 +566,7 @@ private void beginDraggingApplication(View v) {
         mLauncher.getWorkspace().beginDragShared(v, this);
     }
 
-    private void loadWidgetInBackground(final PendingAddWidgetInfo info) {
+    private void preloadWidget(final PendingAddWidgetInfo info) {
         final AppWidgetProviderInfo pInfo = info.info;
         if (pInfo.configure != null) {
             return;
@@ -613,7 +613,7 @@ public void onShortPress(View v) {
         // We are anticipating a long press, and we use this time to load bind and instantiate
         // the widget. This will need to be cleaned up if it turns out no long press occurs.
         mCreateWidgetInfo = new PendingAddWidgetInfo((PendingAddWidgetInfo) v.getTag());
-        loadWidgetInBackground(mCreateWidgetInfo);
+        preloadWidget(mCreateWidgetInfo);
     }
 
     private void cleanupWidgetPreloading() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2244,6 +2244,8 @@ public void run() {
                     CellLayout.LayoutParams lp = (CellLayout.LayoutParams) cell.getLayoutParams();
                     mTargetCell[0] = lp.cellX;
                     mTargetCell[1] = lp.cellY;
+                    CellLayout layout = (CellLayout) cell.getParent().getParent();
+                    layout.markCellsAsOccupiedForView(cell);
                 }
             }
 

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -566,7 +566,7 @@ private void beginDraggingApplication(View v) {
         mLauncher.getWorkspace().beginDragShared(v, this);
     }
 
-    private void loadWidgetInBackground(final PendingAddWidgetInfo info) {
+    private void preloadWidget(final PendingAddWidgetInfo info) {
         final AppWidgetProviderInfo pInfo = info.info;
         if (pInfo.configure != null) {
             return;
@@ -613,7 +613,7 @@ public void onShortPress(View v) {
         // We are anticipating a long press, and we use this time to load bind and instantiate
         // the widget. This will need to be cleaned up if it turns out no long press occurs.
         mCreateWidgetInfo = new PendingAddWidgetInfo((PendingAddWidgetInfo) v.getTag());
-        loadWidgetInBackground(mCreateWidgetInfo);
+        preloadWidget(mCreateWidgetInfo);
     }
 
     private void cleanupWidgetPreloading() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2244,6 +2244,8 @@ public void run() {
                     CellLayout.LayoutParams lp = (CellLayout.LayoutParams) cell.getLayoutParams();
                     mTargetCell[0] = lp.cellX;
                     mTargetCell[1] = lp.cellY;
+                    CellLayout layout = (CellLayout) cell.getParent().getParent();
+                    layout.markCellsAsOccupiedForView(cell);
                 }
             }
 

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -566,7 +566,7 @@ private void beginDraggingApplication(View v) {
         mLauncher.getWorkspace().beginDragShared(v, this);
     }
 
-    private void loadWidgetInBackground(final PendingAddWidgetInfo info) {
+    private void preloadWidget(final PendingAddWidgetInfo info) {
         final AppWidgetProviderInfo pInfo = info.info;
         if (pInfo.configure != null) {
             return;
@@ -613,7 +613,7 @@ public void onShortPress(View v) {
         // We are anticipating a long press, and we use this time to load bind and instantiate
         // the widget. This will need to be cleaned up if it turns out no long press occurs.
         mCreateWidgetInfo = new PendingAddWidgetInfo((PendingAddWidgetInfo) v.getTag());
-        loadWidgetInBackground(mCreateWidgetInfo);
+        preloadWidget(mCreateWidgetInfo);
     }
 
     private void cleanupWidgetPreloading() {

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -2010,7 +2010,7 @@ private void completeAnimationImmediately() {
                 ObjectAnimator.ofFloat(child, "scaleX", 1f),
                 ObjectAnimator.ofFloat(child, "scaleY", 1f),
                 ObjectAnimator.ofFloat(child, "translationX", 0f),
-                ObjectAnimator.ofFloat(child, "translationX", 0f)
+                ObjectAnimator.ofFloat(child, "translationY", 0f)
             );
             s.setDuration(REORDER_ANIMATION_DURATION);
             s.setInterpolator(new android.view.animation.DecelerateInterpolator(1.5f));

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2244,6 +2244,8 @@ public void run() {
                     CellLayout.LayoutParams lp = (CellLayout.LayoutParams) cell.getLayoutParams();
                     mTargetCell[0] = lp.cellX;
                     mTargetCell[1] = lp.cellY;
+                    CellLayout layout = (CellLayout) cell.getParent().getParent();
+                    layout.markCellsAsOccupiedForView(cell);
                 }
             }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3125,7 +3125,7 @@ public Bitmap createWidgetBitmap(ItemInfo widgetInfo, View layout) {
     }
 
     private void getFinalPositionForDropAnimation(int[] loc, float[] scaleXY,
-            DragView dragView, CellLayout layout, ItemInfo info, int[] targetCell, View finalView,
+            DragView dragView, CellLayout layout, ItemInfo info, int[] targetCell,
             boolean external) {
         // Now we animate the dragView, (ie. the widget or shortcut preview) into its final
         // location and size on the home screen.
@@ -3161,7 +3161,7 @@ public void animateWidgetDrop(ItemInfo info, CellLayout cellLayout, DragView dra
         int[] finalPos = new int[2];
         float scaleXY[] = new float[2];
         getFinalPositionForDropAnimation(finalPos, scaleXY, dragView, cellLayout, info, mTargetCell,
-                finalView, external);
+                external);
 
         Resources res = mLauncher.getResources();
         int duration = res.getInteger(R.integer.config_dropAnimMaxDuration) - 200;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3125,7 +3125,7 @@ public Bitmap createWidgetBitmap(ItemInfo widgetInfo, View layout) {
     }
 
     private void getFinalPositionForDropAnimation(int[] loc, float[] scaleXY,
-            DragView dragView, CellLayout layout, ItemInfo info, int[] targetCell, View finalView,
+            DragView dragView, CellLayout layout, ItemInfo info, int[] targetCell,
             boolean external) {
         // Now we animate the dragView, (ie. the widget or shortcut preview) into its final
         // location and size on the home screen.
@@ -3161,7 +3161,7 @@ public void animateWidgetDrop(ItemInfo info, CellLayout cellLayout, DragView dra
         int[] finalPos = new int[2];
         float scaleXY[] = new float[2];
         getFinalPositionForDropAnimation(finalPos, scaleXY, dragView, cellLayout, info, mTargetCell,
-                finalView, external);
+                external);
 
         Resources res = mLauncher.getResources();
         int duration = res.getInteger(R.integer.config_dropAnimMaxDuration) - 200;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3125,7 +3125,7 @@ public Bitmap createWidgetBitmap(ItemInfo widgetInfo, View layout) {
     }
 
     private void getFinalPositionForDropAnimation(int[] loc, float[] scaleXY,
-            DragView dragView, CellLayout layout, ItemInfo info, int[] targetCell, View finalView,
+            DragView dragView, CellLayout layout, ItemInfo info, int[] targetCell,
             boolean external) {
         // Now we animate the dragView, (ie. the widget or shortcut preview) into its final
         // location and size on the home screen.
@@ -3161,7 +3161,7 @@ public void animateWidgetDrop(ItemInfo info, CellLayout cellLayout, DragView dra
         int[] finalPos = new int[2];
         float scaleXY[] = new float[2];
         getFinalPositionForDropAnimation(finalPos, scaleXY, dragView, cellLayout, info, mTargetCell,
-                finalView, external);
+                external);
 
         Resources res = mLauncher.getResources();
         int duration = res.getInteger(R.integer.config_dropAnimMaxDuration) - 200;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3125,7 +3125,7 @@ public Bitmap createWidgetBitmap(ItemInfo widgetInfo, View layout) {
     }
 
     private void getFinalPositionForDropAnimation(int[] loc, float[] scaleXY,
-            DragView dragView, CellLayout layout, ItemInfo info, int[] targetCell, View finalView,
+            DragView dragView, CellLayout layout, ItemInfo info, int[] targetCell,
             boolean external) {
         // Now we animate the dragView, (ie. the widget or shortcut preview) into its final
         // location and size on the home screen.
@@ -3161,7 +3161,7 @@ public void animateWidgetDrop(ItemInfo info, CellLayout cellLayout, DragView dra
         int[] finalPos = new int[2];
         float scaleXY[] = new float[2];
         getFinalPositionForDropAnimation(finalPos, scaleXY, dragView, cellLayout, info, mTargetCell,
-                finalView, external);
+                external);
 
         Resources res = mLauncher.getResources();
         int duration = res.getInteger(R.integer.config_dropAnimMaxDuration) - 200;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -649,6 +649,9 @@ public void run() {
     protected void onResume() {
         super.onResume();
 
+        // Process any items that were added while Launcher was away
+        InstallShortcutReceiver.flushInstallQueue(this);
+
         mPaused = false;
         if (mRestoring || mOnResumeNeedsLoad) {
             mWorkspaceLoading = true;

File: src/com/android/launcher2/Folder.java
Patch:
@@ -978,6 +978,7 @@ public void onDrop(DragObject d) {
             if (d.dragView.hasDrawn()) {
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, mCurrentDragView);
             } else {
+                d.deferDragViewCleanupPostAnimation = false;
                 mCurrentDragView.setVisibility(VISIBLE);
             }
             mItemsInvalidated = true;

File: src/com/android/launcher2/ItemInfo.java
Patch:
@@ -115,7 +115,7 @@ class ItemInfo {
     static String getPackageName(Intent intent) {
         if (intent != null) {
             String packageName = intent.getPackage();
-            if (packageName == null) {
+            if (packageName == null && intent.getComponent() != null) {
                 packageName = intent.getComponent().getPackageName();
             }
             if (packageName != null) {

File: src/com/android/launcher2/ItemInfo.java
Patch:
@@ -115,7 +115,7 @@ class ItemInfo {
     static String getPackageName(Intent intent) {
         if (intent != null) {
             String packageName = intent.getPackage();
-            if (packageName == null) {
+            if (packageName == null && intent.getComponent() != null) {
                 packageName = intent.getComponent().getPackageName();
             }
             if (packageName != null) {

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1390,9 +1390,10 @@ public void run() {
                     }
                 }
             });
-            // If we're profiling, this is the last thing in the queue.
+            // Cleanup
             mHandler.post(new Runnable() {
                 public void run() {
+                    // If we're profiling, ensure this is the last thing in the queue.
                     if (DEBUG_LOADERS) {
                         Log.d(TAG, "bound workspace in "
                             + (SystemClock.uptimeMillis()-t) + "ms");

File: src/com/android/launcher2/Folder.java
Patch:
@@ -200,6 +200,9 @@ public void onClick(View v) {
     }
 
     public boolean onLongClick(View v) {
+        // Return if global dragging is not enabled
+        if (!mLauncher.isDraggingEnabled()) return true;
+
         Object tag = v.getTag();
         if (tag instanceof ShortcutInfo) {
             ShortcutInfo item = (ShortcutInfo) tag;

File: src/com/android/launcher2/PagedViewWithDraggableItems.java
Patch:
@@ -107,6 +107,8 @@ public boolean onLongClick(View v) {
         // When we have exited all apps or are in transition, disregard long clicks
         if (!mLauncher.isAllAppsCustomizeOpen() ||
                 mLauncher.getWorkspace().isSwitchingState()) return false;
+        // Return if global dragging is not enabled
+        if (!mLauncher.isDraggingEnabled()) return false;
 
         return beginDragging(v);
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2831,7 +2831,9 @@ private boolean updateGlobalSearchIcon() {
             if (voiceButtonContainer != null) voiceButtonContainer.setVisibility(View.GONE);
             searchButton.setVisibility(View.GONE);
             voiceButton.setVisibility(View.GONE);
-            voiceButtonProxy.setVisibility(View.GONE);
+            if (voiceButtonProxy != null) {
+                voiceButtonProxy.setVisibility(View.GONE);
+            }
             return false;
         }
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -649,6 +649,9 @@ public void run() {
     protected void onResume() {
         super.onResume();
 
+        // Process any items that were added while Launcher was away
+        InstallShortcutReceiver.flushInstallQueue(this);
+
         mPaused = false;
         if (mRestoring || mOnResumeNeedsLoad) {
             mWorkspaceLoading = true;

File: src/com/android/launcher2/Folder.java
Patch:
@@ -978,6 +978,7 @@ public void onDrop(DragObject d) {
             if (d.dragView.hasDrawn()) {
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, mCurrentDragView);
             } else {
+                d.deferDragViewCleanupPostAnimation = false;
                 mCurrentDragView.setVisibility(VISIBLE);
             }
             mItemsInvalidated = true;

File: src/com/android/launcher2/Folder.java
Patch:
@@ -978,6 +978,7 @@ public void onDrop(DragObject d) {
             if (d.dragView.hasDrawn()) {
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, mCurrentDragView);
             } else {
+                d.deferDragViewCleanupPostAnimation = false;
                 mCurrentDragView.setVisibility(VISIBLE);
             }
             mItemsInvalidated = true;

File: src/com/android/launcher2/ItemInfo.java
Patch:
@@ -115,7 +115,7 @@ class ItemInfo {
     static String getPackageName(Intent intent) {
         if (intent != null) {
             String packageName = intent.getPackage();
-            if (packageName == null) {
+            if (packageName == null && intent.getComponent() != null) {
                 packageName = intent.getComponent().getPackageName();
             }
             if (packageName != null) {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -837,15 +837,15 @@ public boolean dispatchUnhandledMove(View focused, int direction) {
     @Override
     public void addFocusables(ArrayList<View> views, int direction, int focusableMode) {
         if (mCurrentPage >= 0 && mCurrentPage < getPageCount()) {
-            getPageAt(mCurrentPage).addFocusables(views, direction);
+            getPageAt(mCurrentPage).addFocusables(views, direction, focusableMode);
         }
         if (direction == View.FOCUS_LEFT) {
             if (mCurrentPage > 0) {
-                getPageAt(mCurrentPage - 1).addFocusables(views, direction);
+                getPageAt(mCurrentPage - 1).addFocusables(views, direction, focusableMode);
             }
         } else if (direction == View.FOCUS_RIGHT){
             if (mCurrentPage < getPageCount() - 1) {
-                getPageAt(mCurrentPage + 1).addFocusables(views, direction);
+                getPageAt(mCurrentPage + 1).addFocusables(views, direction, focusableMode);
             }
         }
     }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -442,6 +442,8 @@ public void onChildViewAdded(View parent, View child) {
         cl.setOnInterceptTouchListener(this);
         cl.setClickable(true);
         cl.enableHardwareLayers();
+        cl.setContentDescription(getContext().getString(
+                R.string.workspace_description_format, getChildCount()));
     }
 
     @Override

File: src/com/android/launcher2/DragController.java
Patch:
@@ -381,8 +381,8 @@ public void onAppsRemoved(ArrayList<ApplicationInfo> apps, Context context) {
                     if (dragInfo != null &&
                         dragInfo.intent != null &&
                         info.intent != null) {
-                        boolean isSamePackage = info.intent.getComponent().getPackageName().equals(
-                                dragInfo.intent.getComponent().getPackageName());
+                        boolean isSamePackage = dragInfo.getPackageName().equals(
+                                info.getPackageName());
                         if (isSamePackage) {
                             cancelDrag();
                             return;

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1684,7 +1684,7 @@ ArrayList<ShortcutInfo> getShortcutInfosForPackage(String packageName) {
         for (ItemInfo i : sWorkspaceItems) {
             if (i instanceof ShortcutInfo) {
                 ShortcutInfo info = (ShortcutInfo) i;
-                if (info.intent.getComponent().getPackageName().equals(packageName)) {
+                if (packageName.equals(info.getPackageName())) {
                     infos.add(info);
                 }
             }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3622,7 +3622,8 @@ public void run() {
                         for (String intentStr : newApps) {
                             try {
                                 Intent intent = Intent.parseUri(intentStr, 0);
-                                if (packageNames.contains(intent.getComponent().getPackageName())) {
+                                String pn = ItemInfo.getPackageName(intent);
+                                if (packageNames.contains(pn)) {
                                     newApps.remove(intentStr);
                                 }
                             } catch (URISyntaxException e) {}

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1390,9 +1390,10 @@ public void run() {
                     }
                 }
             });
-            // If we're profiling, this is the last thing in the queue.
+            // Cleanup
             mHandler.post(new Runnable() {
                 public void run() {
+                    // If we're profiling, ensure this is the last thing in the queue.
                     if (DEBUG_LOADERS) {
                         Log.d(TAG, "bound workspace in "
                             + (SystemClock.uptimeMillis()-t) + "ms");

File: src/com/android/launcher2/Folder.java
Patch:
@@ -200,6 +200,9 @@ public void onClick(View v) {
     }
 
     public boolean onLongClick(View v) {
+        // Return if global dragging is not enabled
+        if (!mLauncher.isDraggingEnabled()) return true;
+
         Object tag = v.getTag();
         if (tag instanceof ShortcutInfo) {
             ShortcutInfo item = (ShortcutInfo) tag;

File: src/com/android/launcher2/PagedViewWithDraggableItems.java
Patch:
@@ -107,6 +107,8 @@ public boolean onLongClick(View v) {
         // When we have exited all apps or are in transition, disregard long clicks
         if (!mLauncher.isAllAppsCustomizeOpen() ||
                 mLauncher.getWorkspace().isSwitchingState()) return false;
+        // Return if global dragging is not enabled
+        if (!mLauncher.isDraggingEnabled()) return false;
 
         return beginDragging(v);
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2831,7 +2831,9 @@ private boolean updateGlobalSearchIcon() {
             if (voiceButtonContainer != null) voiceButtonContainer.setVisibility(View.GONE);
             searchButton.setVisibility(View.GONE);
             voiceButton.setVisibility(View.GONE);
-            voiceButtonProxy.setVisibility(View.GONE);
+            if (voiceButtonProxy != null) {
+                voiceButtonProxy.setVisibility(View.GONE);
+            }
             return false;
         }
     }

File: src/com/android/launcher2/DragController.java
Patch:
@@ -381,8 +381,8 @@ public void onAppsRemoved(ArrayList<ApplicationInfo> apps, Context context) {
                     if (dragInfo != null &&
                         dragInfo.intent != null &&
                         info.intent != null) {
-                        boolean isSamePackage = info.intent.getComponent().getPackageName().equals(
-                                dragInfo.intent.getComponent().getPackageName());
+                        boolean isSamePackage = dragInfo.getPackageName().equals(
+                                info.getPackageName());
                         if (isSamePackage) {
                             cancelDrag();
                             return;

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1684,7 +1684,7 @@ ArrayList<ShortcutInfo> getShortcutInfosForPackage(String packageName) {
         for (ItemInfo i : sWorkspaceItems) {
             if (i instanceof ShortcutInfo) {
                 ShortcutInfo info = (ShortcutInfo) i;
-                if (info.intent.getComponent().getPackageName().equals(packageName)) {
+                if (packageName.equals(info.getPackageName())) {
                     infos.add(info);
                 }
             }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3624,7 +3624,8 @@ public void run() {
                         for (String intentStr : newApps) {
                             try {
                                 Intent intent = Intent.parseUri(intentStr, 0);
-                                if (packageNames.contains(intent.getComponent().getPackageName())) {
+                                String pn = ItemInfo.getPackageName(intent);
+                                if (packageNames.contains(pn)) {
                                     newApps.remove(intentStr);
                                 }
                             } catch (URISyntaxException e) {}

File: src/com/android/launcher2/DragController.java
Patch:
@@ -381,8 +381,8 @@ public void onAppsRemoved(ArrayList<ApplicationInfo> apps, Context context) {
                     if (dragInfo != null &&
                         dragInfo.intent != null &&
                         info.intent != null) {
-                        boolean isSamePackage = info.intent.getComponent().getPackageName().equals(
-                                dragInfo.intent.getComponent().getPackageName());
+                        boolean isSamePackage = dragInfo.getPackageName().equals(
+                                info.getPackageName());
                         if (isSamePackage) {
                             cancelDrag();
                             return;

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1684,7 +1684,7 @@ ArrayList<ShortcutInfo> getShortcutInfosForPackage(String packageName) {
         for (ItemInfo i : sWorkspaceItems) {
             if (i instanceof ShortcutInfo) {
                 ShortcutInfo info = (ShortcutInfo) i;
-                if (info.intent.getComponent().getPackageName().equals(packageName)) {
+                if (packageName.equals(info.getPackageName())) {
                     infos.add(info);
                 }
             }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3622,7 +3622,8 @@ public void run() {
                         for (String intentStr : newApps) {
                             try {
                                 Intent intent = Intent.parseUri(intentStr, 0);
-                                if (packageNames.contains(intent.getComponent().getPackageName())) {
+                                String pn = ItemInfo.getPackageName(intent);
+                                if (packageNames.contains(pn)) {
                                     newApps.remove(intentStr);
                                 }
                             } catch (URISyntaxException e) {}

File: src/com/android/launcher2/DragController.java
Patch:
@@ -381,8 +381,8 @@ public void onAppsRemoved(ArrayList<ApplicationInfo> apps, Context context) {
                     if (dragInfo != null &&
                         dragInfo.intent != null &&
                         info.intent != null) {
-                        boolean isSamePackage = dragInfo.intent.getPackage().equals(
-                                info.intent.getPackage());
+                        boolean isSamePackage = info.intent.getComponent().getPackageName().equals(
+                                dragInfo.intent.getComponent().getPackageName());
                         if (isSamePackage) {
                             cancelDrag();
                             return;

File: src/com/android/launcher2/DragController.java
Patch:
@@ -381,8 +381,8 @@ public void onAppsRemoved(ArrayList<ApplicationInfo> apps, Context context) {
                     if (dragInfo != null &&
                         dragInfo.intent != null &&
                         info.intent != null) {
-                        boolean isSamePackage = dragInfo.intent.getPackage().equals(
-                                info.intent.getPackage());
+                        boolean isSamePackage = info.intent.getComponent().getPackageName().equals(
+                                dragInfo.intent.getComponent().getPackageName());
                         if (isSamePackage) {
                             cancelDrag();
                             return;

File: src/com/android/launcher2/DragController.java
Patch:
@@ -381,8 +381,8 @@ public void onAppsRemoved(ArrayList<ApplicationInfo> apps, Context context) {
                     if (dragInfo != null &&
                         dragInfo.intent != null &&
                         info.intent != null) {
-                        boolean isSamePackage = dragInfo.intent.getPackage().equals(
-                                info.intent.getPackage());
+                        boolean isSamePackage = info.intent.getComponent().getPackageName().equals(
+                                dragInfo.intent.getComponent().getPackageName());
                         if (isSamePackage) {
                             cancelDrag();
                             return;

File: src/com/android/launcher2/Folder.java
Patch:
@@ -200,6 +200,9 @@ public void onClick(View v) {
     }
 
     public boolean onLongClick(View v) {
+        // Return if global dragging is not enabled
+        if (!mLauncher.isDraggingEnabled()) return true;
+
         Object tag = v.getTag();
         if (tag instanceof ShortcutInfo) {
             ShortcutInfo item = (ShortcutInfo) tag;

File: src/com/android/launcher2/PagedViewWithDraggableItems.java
Patch:
@@ -107,6 +107,8 @@ public boolean onLongClick(View v) {
         // When we have exited all apps or are in transition, disregard long clicks
         if (!mLauncher.isAllAppsCustomizeOpen() ||
                 mLauncher.getWorkspace().isSwitchingState()) return false;
+        // Return if global dragging is not enabled
+        if (!mLauncher.isDraggingEnabled()) return false;
 
         return beginDragging(v);
     }

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -627,7 +627,9 @@ protected void screenScrolled(int screenCenter) {
         if (isScrollingIndicatorEnabled()) {
             updateScrollingIndicator();
         }
-        if (mFadeInAdjacentScreens) {
+        boolean isInOverscroll = mOverScrollX < 0 || mOverScrollX > mMaxScrollX;
+
+        if (mFadeInAdjacentScreens && !isInOverscroll) {
             for (int i = 0; i < getChildCount(); i++) {
                 View child = getChildAt(i);
                 if (child != null) {

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1684,7 +1684,7 @@ ArrayList<ShortcutInfo> getShortcutInfosForPackage(String packageName) {
         for (ItemInfo i : sWorkspaceItems) {
             if (i instanceof ShortcutInfo) {
                 ShortcutInfo info = (ShortcutInfo) i;
-                if (info.intent.getPackage().equals(packageName)) {
+                if (info.intent.getComponent().getPackageName().equals(packageName)) {
                     infos.add(info);
                 }
             }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3710,7 +3710,7 @@ public void run() {
                         for (String intentStr : newApps) {
                             try {
                                 Intent intent = Intent.parseUri(intentStr, 0);
-                                if (packageNames.contains(intent.getPackage())) {
+                                if (packageNames.contains(intent.getComponent().getPackageName())) {
                                     newApps.remove(intentStr);
                                 }
                             } catch (URISyntaxException e) {}

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1684,7 +1684,7 @@ ArrayList<ShortcutInfo> getShortcutInfosForPackage(String packageName) {
         for (ItemInfo i : sWorkspaceItems) {
             if (i instanceof ShortcutInfo) {
                 ShortcutInfo info = (ShortcutInfo) i;
-                if (info.intent.getPackage().equals(packageName)) {
+                if (info.intent.getComponent().getPackageName().equals(packageName)) {
                     infos.add(info);
                 }
             }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3708,7 +3708,7 @@ public void run() {
                         for (String intentStr : newApps) {
                             try {
                                 Intent intent = Intent.parseUri(intentStr, 0);
-                                if (packageNames.contains(intent.getPackage())) {
+                                if (packageNames.contains(intent.getComponent().getPackageName())) {
                                     newApps.remove(intentStr);
                                 }
                             } catch (URISyntaxException e) {}

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1684,7 +1684,7 @@ ArrayList<ShortcutInfo> getShortcutInfosForPackage(String packageName) {
         for (ItemInfo i : sWorkspaceItems) {
             if (i instanceof ShortcutInfo) {
                 ShortcutInfo info = (ShortcutInfo) i;
-                if (info.intent.getPackage().equals(packageName)) {
+                if (info.intent.getComponent().getPackageName().equals(packageName)) {
                     infos.add(info);
                 }
             }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3708,7 +3708,7 @@ public void run() {
                         for (String intentStr : newApps) {
                             try {
                                 Intent intent = Intent.parseUri(intentStr, 0);
-                                if (packageNames.contains(intent.getPackage())) {
+                                if (packageNames.contains(intent.getComponent().getPackageName())) {
                                     newApps.remove(intentStr);
                                 }
                             } catch (URISyntaxException e) {}

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3097,6 +3097,9 @@ public void bindAppWidget(LauncherAppWidgetInfo item) {
 
         workspace.requestLayout();
 
+        AppWidgetResizeFrame.updateWidgetSizeRanges(item.hostView,
+                this, item.spanX, item.spanY);
+
         if (DEBUG_WIDGETS) {
             Log.d(TAG, "bound widget id="+item.appWidgetId+" in "
                     + (SystemClock.uptimeMillis()-start) + "ms");

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -432,6 +432,8 @@ public void onChildViewAdded(View parent, View child) {
         cl.setOnInterceptTouchListener(this);
         cl.setClickable(true);
         cl.enableHardwareLayers();
+        cl.setContentDescription(getContext().getString(
+                R.string.workspace_description_format, getChildCount()));
     }
 
     @Override

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3097,6 +3097,9 @@ public void bindAppWidget(LauncherAppWidgetInfo item) {
 
         workspace.requestLayout();
 
+        AppWidgetResizeFrame.updateWidgetSizeRanges(item.hostView,
+                this, item.spanX, item.spanY);
+
         if (DEBUG_WIDGETS) {
             Log.d(TAG, "bound widget id="+item.appWidgetId+" in "
                     + (SystemClock.uptimeMillis()-start) + "ms");

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3097,6 +3097,9 @@ public void bindAppWidget(LauncherAppWidgetInfo item) {
 
         workspace.requestLayout();
 
+        AppWidgetResizeFrame.updateWidgetSizeRanges(item.hostView,
+                this, item.spanX, item.spanY);
+
         if (DEBUG_WIDGETS) {
             Log.d(TAG, "bound widget id="+item.appWidgetId+" in "
                     + (SystemClock.uptimeMillis()-start) + "ms");

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3097,6 +3097,9 @@ public void bindAppWidget(LauncherAppWidgetInfo item) {
 
         workspace.requestLayout();
 
+        AppWidgetResizeFrame.updateWidgetSizeRanges(item.hostView,
+                this, item.spanX, item.spanY);
+
         if (DEBUG_WIDGETS) {
             Log.d(TAG, "bound widget id="+item.appWidgetId+" in "
                     + (SystemClock.uptimeMillis()-start) + "ms");

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -837,15 +837,15 @@ public boolean dispatchUnhandledMove(View focused, int direction) {
     @Override
     public void addFocusables(ArrayList<View> views, int direction, int focusableMode) {
         if (mCurrentPage >= 0 && mCurrentPage < getPageCount()) {
-            getPageAt(mCurrentPage).addFocusables(views, direction);
+            getPageAt(mCurrentPage).addFocusables(views, direction, focusableMode);
         }
         if (direction == View.FOCUS_LEFT) {
             if (mCurrentPage > 0) {
-                getPageAt(mCurrentPage - 1).addFocusables(views, direction);
+                getPageAt(mCurrentPage - 1).addFocusables(views, direction, focusableMode);
             }
         } else if (direction == View.FOCUS_RIGHT){
             if (mCurrentPage < getPageCount() - 1) {
-                getPageAt(mCurrentPage + 1).addFocusables(views, direction);
+                getPageAt(mCurrentPage + 1).addFocusables(views, direction, focusableMode);
             }
         }
     }

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1746,6 +1746,8 @@ private void markCellsForRect(Rect r, boolean[][] occupied, boolean value) {
 
     private boolean rearrangementExists(int cellX, int cellY, int spanX, int spanY, int[] direction,
             View ignoreView, ItemConfiguration solution) {
+        // Return early if get invalid cell positions
+        if (cellX < 0 || cellY < 0) return false;
 
         mIntersectingViews.clear();
         mOccupiedRect.set(cellX, cellY, cellX + spanX, cellY + spanY);

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -92,7 +92,9 @@ public void applyFromAppWidgetProviderInfo(AppWidgetProviderInfo info,
         name.setText(info.label);
         final TextView dims = (TextView) findViewById(R.id.widget_dims);
         if (dims != null) {
-            dims.setText(String.format(mDimensionsFormatString, cellSpan[0], cellSpan[1]));
+            int hSpan = Math.min(cellSpan[0], LauncherModel.getCellCountX());
+            int vSpan = Math.min(cellSpan[1], LauncherModel.getCellCountY());
+            dims.setText(String.format(mDimensionsFormatString, hSpan, vSpan));
         }
     }
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1746,6 +1746,8 @@ private void markCellsForRect(Rect r, boolean[][] occupied, boolean value) {
 
     private boolean rearrangementExists(int cellX, int cellY, int spanX, int spanY, int[] direction,
             View ignoreView, ItemConfiguration solution) {
+        // Return early if get invalid cell positions
+        if (cellX < 0 || cellY < 0) return false;
 
         mIntersectingViews.clear();
         mOccupiedRect.set(cellX, cellY, cellX + spanX, cellY + spanY);

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -92,7 +92,9 @@ public void applyFromAppWidgetProviderInfo(AppWidgetProviderInfo info,
         name.setText(info.label);
         final TextView dims = (TextView) findViewById(R.id.widget_dims);
         if (dims != null) {
-            dims.setText(String.format(mDimensionsFormatString, cellSpan[0], cellSpan[1]));
+            int hSpan = Math.min(cellSpan[0], LauncherModel.getCellCountX());
+            int vSpan = Math.min(cellSpan[1], LauncherModel.getCellCountY());
+            dims.setText(String.format(mDimensionsFormatString, hSpan, vSpan));
         }
     }
 

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -758,7 +758,7 @@ private void endDragging(View target, boolean isFlingToDelete, boolean success)
             // drop in Workspace
             mLauncher.exitSpringLoadedDragMode();
         }
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientation(false);
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -386,7 +386,7 @@ public void onDragStart(DragSource source, Object info, int dragAction) {
     public void onDragEnd() {
         mIsDragOccuring = false;
         updateChildrenLayersEnabled();
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientation(false);
     }
 
     /**

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -758,7 +758,7 @@ private void endDragging(View target, boolean isFlingToDelete, boolean success)
             // drop in Workspace
             mLauncher.exitSpringLoadedDragMode();
         }
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientation(false);
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -386,7 +386,7 @@ public void onDragStart(DragSource source, Object info, int dragAction) {
     public void onDragEnd() {
         mIsDragOccuring = false;
         updateChildrenLayersEnabled();
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientation(false);
     }
 
     /**

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -79,7 +79,7 @@ public AppWidgetResizeFrame(Context context,
         mWorkspace = (Workspace) dragLayer.findViewById(R.id.workspace);
 
         final AppWidgetProviderInfo info = widgetView.getAppWidgetInfo();
-        int[] result = mLauncher.getMinSpanForWidget(info);
+        int[] result = Launcher.getMinSpanForWidget(mLauncher, info);
         mMinHSpan = result[0];
         mMinVSpan = result[1];
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1175,6 +1175,9 @@ private void loadWorkspace() {
                                 appWidgetInfo.cellY = c.getInt(cellYIndex);
                                 appWidgetInfo.spanX = c.getInt(spanXIndex);
                                 appWidgetInfo.spanY = c.getInt(spanYIndex);
+                                int[] minSpan = Launcher.getMinSpanForWidget(context, provider);
+                                appWidgetInfo.minSpanX = minSpan[0];
+                                appWidgetInfo.minSpanY = minSpan[1];
 
                                 container = c.getInt(containerIndex);
                                 if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP &&

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -758,7 +758,7 @@ private void endDragging(View target, boolean isFlingToDelete, boolean success)
             // drop in Workspace
             mLauncher.exitSpringLoadedDragMode();
         }
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientation(false);
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -383,7 +383,7 @@ public void onDragStart(DragSource source, Object info, int dragAction) {
     public void onDragEnd() {
         mIsDragOccuring = false;
         updateChildrenLayersEnabled();
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientation(false);
     }
 
     /**

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -79,7 +79,7 @@ public AppWidgetResizeFrame(Context context,
         mWorkspace = (Workspace) dragLayer.findViewById(R.id.workspace);
 
         final AppWidgetProviderInfo info = widgetView.getAppWidgetInfo();
-        int[] result = mLauncher.getMinSpanForWidget(info);
+        int[] result = Launcher.getMinSpanForWidget(mLauncher, info);
         mMinHSpan = result[0];
         mMinVSpan = result[1];
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1175,6 +1175,9 @@ private void loadWorkspace() {
                                 appWidgetInfo.cellY = c.getInt(cellYIndex);
                                 appWidgetInfo.spanX = c.getInt(spanXIndex);
                                 appWidgetInfo.spanY = c.getInt(spanYIndex);
+                                int[] minSpan = Launcher.getMinSpanForWidget(context, provider);
+                                appWidgetInfo.minSpanX = minSpan[0];
+                                appWidgetInfo.minSpanY = minSpan[1];
 
                                 container = c.getInt(containerIndex);
                                 if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP &&

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -79,7 +79,7 @@ public AppWidgetResizeFrame(Context context,
         mWorkspace = (Workspace) dragLayer.findViewById(R.id.workspace);
 
         final AppWidgetProviderInfo info = widgetView.getAppWidgetInfo();
-        int[] result = mLauncher.getMinSpanForWidget(info);
+        int[] result = Launcher.getMinSpanForWidget(mLauncher, info);
         mMinHSpan = result[0];
         mMinVSpan = result[1];
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1175,6 +1175,9 @@ private void loadWorkspace() {
                                 appWidgetInfo.cellY = c.getInt(cellYIndex);
                                 appWidgetInfo.spanX = c.getInt(spanXIndex);
                                 appWidgetInfo.spanY = c.getInt(spanYIndex);
+                                int[] minSpan = Launcher.getMinSpanForWidget(context, provider);
+                                appWidgetInfo.minSpanX = minSpan[0];
+                                appWidgetInfo.minSpanY = minSpan[1];
 
                                 container = c.getInt(containerIndex);
                                 if (container != LauncherSettings.Favorites.CONTAINER_DESKTOP &&

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1156,7 +1156,6 @@ public void onAttachedToWindow() {
     public void onDetachedFromWindow() {
         super.onDetachedFromWindow();
         mVisible = false;
-        mDragLayer.clearAllResizeFrames();
 
         if (mAttached) {
             unregisterReceiver(mReceiver);
@@ -1397,6 +1396,7 @@ public void onDestroy() {
         getContentResolver().unregisterContentObserver(mWidgetObserver);
         unregisterReceiver(mCloseSystemDialogsReceiver);
 
+        mDragLayer.clearAllResizeFrames();
         ((ViewGroup) mWorkspace.getParent()).removeAllViews();
         mWorkspace.removeAllViews();
         mWorkspace = null;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1156,7 +1156,6 @@ public void onAttachedToWindow() {
     public void onDetachedFromWindow() {
         super.onDetachedFromWindow();
         mVisible = false;
-        mDragLayer.clearAllResizeFrames();
 
         if (mAttached) {
             unregisterReceiver(mReceiver);
@@ -1397,6 +1396,7 @@ public void onDestroy() {
         getContentResolver().unregisterContentObserver(mWidgetObserver);
         unregisterReceiver(mCloseSystemDialogsReceiver);
 
+        mDragLayer.clearAllResizeFrames();
         ((ViewGroup) mWorkspace.getParent()).removeAllViews();
         mWorkspace.removeAllViews();
         mWorkspace = null;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1079,7 +1079,8 @@ public void run() {
         }
 
         // Build Launcher-specific widget info and save to database
-        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId);
+        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId,
+                appWidgetInfo.provider);
         launcherInfo.spanX = spanXY[0];
         launcherInfo.spanY = spanXY[1];
         launcherInfo.minSpanX = mPendingAddInfo.minSpanX;

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1167,7 +1167,8 @@ private void loadWorkspace() {
                                 Launcher.sDumpLogs.add(log);
                                 itemsToRemove.add(id);
                             } else {
-                                appWidgetInfo = new LauncherAppWidgetInfo(appWidgetId);
+                                appWidgetInfo = new LauncherAppWidgetInfo(appWidgetId,
+                                        provider.provider);
                                 appWidgetInfo.id = id;
                                 appWidgetInfo.screen = c.getInt(screenIndex);
                                 appWidgetInfo.cellX = c.getInt(cellXIndex);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1079,7 +1079,8 @@ public void run() {
         }
 
         // Build Launcher-specific widget info and save to database
-        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId);
+        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId,
+                appWidgetInfo.provider);
         launcherInfo.spanX = spanXY[0];
         launcherInfo.spanY = spanXY[1];
         launcherInfo.minSpanX = mPendingAddInfo.minSpanX;

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1167,7 +1167,8 @@ private void loadWorkspace() {
                                 Launcher.sDumpLogs.add(log);
                                 itemsToRemove.add(id);
                             } else {
-                                appWidgetInfo = new LauncherAppWidgetInfo(appWidgetId);
+                                appWidgetInfo = new LauncherAppWidgetInfo(appWidgetId,
+                                        provider.provider);
                                 appWidgetInfo.id = id;
                                 appWidgetInfo.screen = c.getInt(screenIndex);
                                 appWidgetInfo.cellX = c.getInt(cellXIndex);

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -176,8 +176,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
     public boolean onTouchEvent(MotionEvent event) {
         // Allow touch events to fall through to the workspace if we are transitioning there
         if (mInTransition && mTransitioningToWorkspace) {
-                return super.onTouchEvent(event);
-            }
+            return super.onTouchEvent(event);
         }
 
         // Intercept all touch events up to the bottom of the AppsCustomizePane so they do not fall

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -176,8 +176,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
     public boolean onTouchEvent(MotionEvent event) {
         // Allow touch events to fall through to the workspace if we are transitioning there
         if (mInTransition && mTransitioningToWorkspace) {
-                return super.onTouchEvent(event);
-            }
+            return super.onTouchEvent(event);
         }
 
         // Intercept all touch events up to the bottom of the AppsCustomizePane so they do not fall

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1073,7 +1073,8 @@ public void run() {
         }
 
         // Build Launcher-specific widget info and save to database
-        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId);
+        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId,
+                appWidgetInfo.provider);
         launcherInfo.spanX = spanXY[0];
         launcherInfo.spanY = spanXY[1];
         launcherInfo.minSpanX = mPendingAddInfo.minSpanX;

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1158,7 +1158,8 @@ private void loadWorkspace() {
                                 Launcher.sDumpLogs.add(log);
                                 itemsToRemove.add(id);
                             } else {
-                                appWidgetInfo = new LauncherAppWidgetInfo(appWidgetId);
+                                appWidgetInfo = new LauncherAppWidgetInfo(appWidgetId,
+                                        provider.provider);
                                 appWidgetInfo.id = id;
                                 appWidgetInfo.screen = c.getInt(screenIndex);
                                 appWidgetInfo.cellX = c.getInt(cellXIndex);

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -706,7 +706,7 @@ private void beginDraggingWidget(View v) {
 
         // Start the drag
         alphaClipPaint = null;
-        mLauncher.lockScreenOrientationOnLargeUI();
+        mLauncher.lockScreenOrientation();
         mLauncher.getWorkspace().onDragStartedWithItem(createItemInfo, outline, alphaClipPaint);
         mDragController.startDrag(image, preview, this, createItemInfo,
                 DragController.DRAG_ACTION_COPY, null, scale);
@@ -758,7 +758,7 @@ private void endDragging(View target, boolean isFlingToDelete, boolean success)
             // drop in Workspace
             mLauncher.exitSpringLoadedDragMode();
         }
-        mLauncher.unlockScreenOrientationOnLargeUI();
+        mLauncher.unlockScreenOrientation();
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -375,13 +375,13 @@ public void buildPageHardwareLayers() {
     public void onDragStart(DragSource source, Object info, int dragAction) {
         mIsDragOccuring = true;
         updateChildrenLayersEnabled();
-        mLauncher.lockScreenOrientationOnLargeUI();
+        mLauncher.lockScreenOrientation();
     }
 
     public void onDragEnd() {
         mIsDragOccuring = false;
         updateChildrenLayersEnabled();
-        mLauncher.unlockScreenOrientationOnLargeUI();
+        mLauncher.unlockScreenOrientation();
     }
 
     /**

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -706,7 +706,7 @@ private void beginDraggingWidget(View v) {
 
         // Start the drag
         alphaClipPaint = null;
-        mLauncher.lockScreenOrientationOnLargeUI();
+        mLauncher.lockScreenOrientation();
         mLauncher.getWorkspace().onDragStartedWithItem(createItemInfo, outline, alphaClipPaint);
         mDragController.startDrag(image, preview, this, createItemInfo,
                 DragController.DRAG_ACTION_COPY, null, scale);
@@ -758,7 +758,7 @@ private void endDragging(View target, boolean isFlingToDelete, boolean success)
             // drop in Workspace
             mLauncher.exitSpringLoadedDragMode();
         }
-        mLauncher.unlockScreenOrientationOnLargeUI();
+        mLauncher.unlockScreenOrientation();
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -375,13 +375,13 @@ public void buildPageHardwareLayers() {
     public void onDragStart(DragSource source, Object info, int dragAction) {
         mIsDragOccuring = true;
         updateChildrenLayersEnabled();
-        mLauncher.lockScreenOrientationOnLargeUI();
+        mLauncher.lockScreenOrientation();
     }
 
     public void onDragEnd() {
         mIsDragOccuring = false;
         updateChildrenLayersEnabled();
-        mLauncher.unlockScreenOrientationOnLargeUI();
+        mLauncher.unlockScreenOrientation();
     }
 
     /**

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -706,7 +706,7 @@ private void beginDraggingWidget(View v) {
 
         // Start the drag
         alphaClipPaint = null;
-        mLauncher.lockScreenOrientationOnLargeUI();
+        mLauncher.lockScreenOrientation();
         mLauncher.getWorkspace().onDragStartedWithItem(createItemInfo, outline, alphaClipPaint);
         mDragController.startDrag(image, preview, this, createItemInfo,
                 DragController.DRAG_ACTION_COPY, null, scale);
@@ -758,7 +758,7 @@ private void endDragging(View target, boolean isFlingToDelete, boolean success)
             // drop in Workspace
             mLauncher.exitSpringLoadedDragMode();
         }
-        mLauncher.unlockScreenOrientationOnLargeUI();
+        mLauncher.unlockScreenOrientation();
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -375,13 +375,13 @@ public void buildPageHardwareLayers() {
     public void onDragStart(DragSource source, Object info, int dragAction) {
         mIsDragOccuring = true;
         updateChildrenLayersEnabled();
-        mLauncher.lockScreenOrientationOnLargeUI();
+        mLauncher.lockScreenOrientation();
     }
 
     public void onDragEnd() {
         mIsDragOccuring = false;
         updateChildrenLayersEnabled();
-        mLauncher.unlockScreenOrientationOnLargeUI();
+        mLauncher.unlockScreenOrientation();
     }
 
     /**

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2452,7 +2452,9 @@ public void onAnimationEnd(Animator animation) {
                     fromView.setVisibility(View.GONE);
                     dispatchOnLauncherTransitionEnd(fromView, animated, true);
                     dispatchOnLauncherTransitionEnd(toView, animated, true);
-                    mWorkspace.hideScrollingIndicator(false);
+                    if (mWorkspace != null) {
+                        mWorkspace.hideScrollingIndicator(false);
+                    }
                     if (onCompleteRunnable != null) {
                         onCompleteRunnable.run();
                     }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -174,7 +174,7 @@ enum State { NORMAL, SPRING_LOADED, SMALL };
     private final int[] mTempXY = new int[2];
     private float mOverscrollFade = 0;
     private boolean mOverscrollTransformsSet;
-    public static final int DRAG_BITMAP_PADDING = 0;
+    public static final int DRAG_BITMAP_PADDING = 2;
 
     // Camera and Matrix used to determine the final position of a neighboring CellLayout
     private final Matrix mMatrix = new Matrix();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2452,7 +2452,9 @@ public void onAnimationEnd(Animator animation) {
                     fromView.setVisibility(View.GONE);
                     dispatchOnLauncherTransitionEnd(fromView, animated, true);
                     dispatchOnLauncherTransitionEnd(toView, animated, true);
-                    mWorkspace.hideScrollingIndicator(false);
+                    if (mWorkspace != null) {
+                        mWorkspace.hideScrollingIndicator(false);
+                    }
                     if (onCompleteRunnable != null) {
                         onCompleteRunnable.run();
                     }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -174,7 +174,7 @@ enum State { NORMAL, SPRING_LOADED, SMALL };
     private final int[] mTempXY = new int[2];
     private float mOverscrollFade = 0;
     private boolean mOverscrollTransformsSet;
-    public static final int DRAG_BITMAP_PADDING = 0;
+    public static final int DRAG_BITMAP_PADDING = 2;
 
     // Camera and Matrix used to determine the final position of a neighboring CellLayout
     private final Matrix mMatrix = new Matrix();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2452,7 +2452,9 @@ public void onAnimationEnd(Animator animation) {
                     fromView.setVisibility(View.GONE);
                     dispatchOnLauncherTransitionEnd(fromView, animated, true);
                     dispatchOnLauncherTransitionEnd(toView, animated, true);
-                    mWorkspace.hideScrollingIndicator(false);
+                    if (mWorkspace != null) {
+                        mWorkspace.hideScrollingIndicator(false);
+                    }
                     if (onCompleteRunnable != null) {
                         onCompleteRunnable.run();
                     }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -174,7 +174,7 @@ enum State { NORMAL, SPRING_LOADED, SMALL };
     private final int[] mTempXY = new int[2];
     private float mOverscrollFade = 0;
     private boolean mOverscrollTransformsSet;
-    public static final int DRAG_BITMAP_PADDING = 0;
+    public static final int DRAG_BITMAP_PADDING = 2;
 
     // Camera and Matrix used to determine the final position of a neighboring CellLayout
     private final Matrix mMatrix = new Matrix();

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1421,7 +1421,7 @@ protected void screenScrolled(int screenCenter) {
 
                 float alpha;
 
-                if (!LauncherApplication.isScreenLarge() || scrollProgress < 0) {
+                if (scrollProgress < 0) {
                     alpha = scrollProgress < 0 ? mAlphaInterpolator.getInterpolation(
                         1 - Math.abs(scrollProgress)) : 1.0f;
                 } else {

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1421,7 +1421,7 @@ protected void screenScrolled(int screenCenter) {
 
                 float alpha;
 
-                if (!LauncherApplication.isScreenLarge() || scrollProgress < 0) {
+                if (scrollProgress < 0) {
                     alpha = scrollProgress < 0 ? mAlphaInterpolator.getInterpolation(
                         1 - Math.abs(scrollProgress)) : 1.0f;
                 } else {

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1419,7 +1419,7 @@ protected void screenScrolled(int screenCenter) {
 
                 float alpha;
 
-                if (!LauncherApplication.isScreenLarge() || scrollProgress < 0) {
+                if (scrollProgress < 0) {
                     alpha = scrollProgress < 0 ? mAlphaInterpolator.getInterpolation(
                         1 - Math.abs(scrollProgress)) : 1.0f;
                 } else {

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -860,6 +860,7 @@ private void cancelAllTasks() {
             iter.remove();
             mDirtyPageContent.set(task.page, true);
         }
+        mDeferredSyncWidgetPageItems.clear();
     }
 
     public void setContentType(ContentType type) {

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -989,6 +989,9 @@ private void loadWorkspace() {
             final AppWidgetManager widgets = AppWidgetManager.getInstance(context);
             final boolean isSafeMode = manager.isSafeMode();
 
+            // Make sure the default workspace is loaded, if needed
+            mApp.getLauncherProvider().loadDefaultFavoritesIfNecessary();
+
             sWorkspaceItems.clear();
             sAppWidgets.clear();
             sFolders.clear();

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -860,6 +860,7 @@ private void cancelAllTasks() {
             iter.remove();
             mDirtyPageContent.set(task.page, true);
         }
+        mDeferredSyncWidgetPageItems.clear();
     }
 
     public void setContentType(ContentType type) {

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -989,6 +989,9 @@ private void loadWorkspace() {
             final AppWidgetManager widgets = AppWidgetManager.getInstance(context);
             final boolean isSafeMode = manager.isSafeMode();
 
+            // Make sure the default workspace is loaded, if needed
+            mApp.getLauncherProvider().loadDefaultFavoritesIfNecessary();
+
             sWorkspaceItems.clear();
             sAppWidgets.clear();
             sFolders.clear();

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -989,6 +989,9 @@ private void loadWorkspace() {
             final AppWidgetManager widgets = AppWidgetManager.getInstance(context);
             final boolean isSafeMode = manager.isSafeMode();
 
+            // Make sure the default workspace is loaded, if needed
+            mApp.getLauncherProvider().loadDefaultFavoritesIfNecessary();
+
             sWorkspaceItems.clear();
             sAppWidgets.clear();
             sFolders.clear();

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -859,6 +859,7 @@ private void cancelAllTasks() {
             iter.remove();
             mDirtyPageContent.set(task.page, true);
         }
+        mDeferredSyncWidgetPageItems.clear();
     }
 
     public void setContentType(ContentType type) {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1819,7 +1819,7 @@ public void onClickVoiceButton(View v) {
 
         Intent intent = new Intent(RecognizerIntent.ACTION_WEB_SEARCH);
         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
-        startActivitySafely(intent, "onClickVoiceButton");
+        startActivitySafely(null, intent, "onClickVoiceButton");
     }
 
     /**
@@ -1850,7 +1850,7 @@ void startApplicationDetailsActivity(ComponentName componentName) {
         Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS,
                 Uri.fromParts("package", packageName, null));
         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
-        startActivitySafely(intent, "startApplicationDetailsActivity");
+        startActivitySafely(null, intent, "startApplicationDetailsActivity");
     }
 
     void startApplicationUninstallActivity(ApplicationInfo appInfo) {

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -174,8 +174,8 @@ private static boolean findEmptyCell(Context context, ArrayList<ItemInfo> items,
                     cellY = item.cellY;
                     spanX = item.spanX;
                     spanY = item.spanY;
-                    for (int x = cellX; x < cellX + spanX && x < xCount; x++) {
-                        for (int y = cellY; y < cellY + spanY && y < yCount; y++) {
+                    for (int x = cellX; 0 <= x && x < cellX + spanX && x < xCount; x++) {
+                        for (int y = cellY; 0 <= y && y < cellY + spanY && y < yCount; y++) {
                             occupied[x][y] = true;
                         }
                     }

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -97,7 +97,7 @@ public void onReceive(Context context, Intent data) {
         // will provide feedback otherwise
         if (!found) {
             if (result[0] == INSTALL_SHORTCUT_NO_SPACE) {
-                Toast.makeText(context, context.getString(R.string.out_of_space),
+                Toast.makeText(context, context.getString(R.string.completely_out_of_space),
                         Toast.LENGTH_SHORT).show();
             } else if (result[0] == INSTALL_SHORTCUT_IS_DUPLICATE) {
                 Toast.makeText(context, context.getString(R.string.shortcut_duplicate, name),

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -174,8 +174,8 @@ private static boolean findEmptyCell(Context context, ArrayList<ItemInfo> items,
                     cellY = item.cellY;
                     spanX = item.spanX;
                     spanY = item.spanY;
-                    for (int x = cellX; x < cellX + spanX && x < xCount; x++) {
-                        for (int y = cellY; y < cellY + spanY && y < yCount; y++) {
+                    for (int x = cellX; 0 <= x && x < cellX + spanX && x < xCount; x++) {
+                        for (int y = cellY; 0 <= y && y < cellY + spanY && y < yCount; y++) {
                             occupied[x][y] = true;
                         }
                     }

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -97,7 +97,7 @@ public void onReceive(Context context, Intent data) {
         // will provide feedback otherwise
         if (!found) {
             if (result[0] == INSTALL_SHORTCUT_NO_SPACE) {
-                Toast.makeText(context, context.getString(R.string.out_of_space),
+                Toast.makeText(context, context.getString(R.string.completely_out_of_space),
                         Toast.LENGTH_SHORT).show();
             } else if (result[0] == INSTALL_SHORTCUT_IS_DUPLICATE) {
                 Toast.makeText(context, context.getString(R.string.shortcut_duplicate, name),

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -485,8 +485,8 @@ public void updatePackages() {
                 int[] minSpanXY = mLauncher.getMinSpanForWidget(widget);
                 int minSpanX = Math.min(spanXY[0], minSpanXY[0]);
                 int minSpanY = Math.min(spanXY[1], minSpanXY[1]);
-                if (minSpanX < LauncherModel.getCellCountX() &&
-                        minSpanY < LauncherModel.getCellCountY()) {
+                if (minSpanX <= LauncherModel.getCellCountX() &&
+                        minSpanY <= LauncherModel.getCellCountY()) {
                     mWidgets.add(widget);
                 }
             } else {

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -485,8 +485,8 @@ public void updatePackages() {
                 int[] minSpanXY = mLauncher.getMinSpanForWidget(widget);
                 int minSpanX = Math.min(spanXY[0], minSpanXY[0]);
                 int minSpanY = Math.min(spanXY[1], minSpanXY[1]);
-                if (minSpanX < LauncherModel.getCellCountX() &&
-                        minSpanY < LauncherModel.getCellCountY()) {
+                if (minSpanX <= LauncherModel.getCellCountX() &&
+                        minSpanY <= LauncherModel.getCellCountY()) {
                     mWidgets.add(widget);
                 }
             } else {

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -80,7 +80,7 @@ public AppWidgetResizeFrame(Context context, ItemInfo itemInfo,
         mWorkspace = (Workspace) dragLayer.findViewById(R.id.workspace);
 
         final AppWidgetProviderInfo info = widgetView.getAppWidgetInfo();
-        int[] result = mLauncher.getMinSpanForWidget(info, null);
+        int[] result = mLauncher.getMinSpanForWidget(info);
         mMinHSpan = result[0];
         mMinVSpan = result[1];
 

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1214,8 +1214,6 @@ public void syncWidgetPageItems(final int page, final boolean immediate) {
 
                 // Determine the widget spans and min resize spans.
                 int[] spanXY = mLauncher.getSpanForWidget(info);
-                int[] size = mLauncher.getWorkspace().estimateItemSize(spanXY[0],
-                        spanXY[1], createItemInfo, true);
                 createItemInfo.spanX = spanXY[0];
                 createItemInfo.spanY = spanXY[1];
                 int[] minSpanXY = mLauncher.getMinSpanForWidget(info);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -268,7 +268,9 @@ public void onAnimationUpdate(ValueAnimator animation) {
                     // If an animation is started and then stopped very quickly, we can still
                     // get spurious updates we've cleared the tag. Guard against this.
                     if (outline == null) {
-                        if (false) {
+                        @SuppressWarnings("all") // suppress dead code warning
+                        final boolean debug = false;
+                        if (debug) {
                             Object val = animation.getAnimatedValue();
                             Log.d(TAG, "anim " + thisIndex + " update: " + val +
                                      ", isStopped " + anim.isStopped());

File: src/com/android/launcher2/DragController.java
Patch:
@@ -40,7 +40,6 @@
  * Class for initiating a drag within a view or across multiple views.
  */
 public class DragController {
-    @SuppressWarnings({"UnusedDeclaration"})
     private static final String TAG = "Launcher.DragController";
 
     /** Indicates the drag is a move.  */
@@ -347,7 +346,6 @@ Bitmap getViewBitmap(View v) {
      *              || super.dispatchKeyEvent(event);
      * </pre>
      */
-    @SuppressWarnings({"UnusedDeclaration"})
     public boolean dispatchKeyEvent(KeyEvent event) {
         return mDragging;
     }
@@ -457,7 +455,9 @@ void resetLastGestureUpTime() {
      * Call this from a drag source view.
      */
     public boolean onInterceptTouchEvent(MotionEvent ev) {
-        if (false) {
+        @SuppressWarnings("all") // suppress dead code warning
+        final boolean debug = false;
+        if (debug) {
             Log.d(Launcher.TAG, "DragController.onInterceptTouchEvent " + ev + " mDragging="
                     + mDragging);
         }

File: src/com/android/launcher2/DragView.java
Patch:
@@ -167,8 +167,9 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
 
     @Override
     protected void onDraw(Canvas canvas) {
-        if (false) {
-            // for debugging
+        @SuppressWarnings("all") // suppress dead code warning
+        final boolean debug = false;
+        if (debug) {
             Paint p = new Paint();
             p.setStyle(Paint.Style.FILL);
             p.setColor(0x66ffffff);

File: src/com/android/launcher2/FocusHelper.java
Patch:
@@ -626,7 +626,6 @@ private static View getClosestIconOnLine(CellLayout layout, ViewGroup parent, Vi
             int lineDelta) {
         final ArrayList<View> views = getCellLayoutChildrenSortedSpatially(layout, parent);
         final CellLayout.LayoutParams lp = (CellLayout.LayoutParams) v.getLayoutParams();
-        final int cellCountX = layout.getCountX();
         final int cellCountY = layout.getCountY();
         final int row = lp.cellY;
         final int newRow = row + lineDelta;

File: src/com/android/launcher2/Folder.java
Patch:
@@ -44,7 +44,6 @@
 import android.widget.TextView;
 
 import com.android.launcher.R;
-import com.android.launcher2.DropTarget.DragObject;
 import com.android.launcher2.FolderInfo.FolderListener;
 
 import java.util.ArrayList;
@@ -56,6 +55,7 @@ public class Folder extends LinearLayout implements DragSource, View.OnClickList
         View.OnLongClickListener, DropTarget, FolderListener, TextView.OnEditorActionListener,
         View.OnFocusChangeListener {
 
+    @SuppressWarnings("unused")
     private static final String TAG = "Launcher.Folder";
 
     protected DragController mDragController;

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -119,8 +119,9 @@ public boolean isDropEnabled() {
 
     static FolderIcon fromXml(int resId, Launcher launcher, ViewGroup group,
             FolderInfo folderInfo, IconCache iconCache) {
-
-        if (INITIAL_ITEM_ANIMATION_DURATION >= DROP_IN_ANIMATION_DURATION) {
+        @SuppressWarnings("all") // suppress dead code warning
+        final boolean error = INITIAL_ITEM_ANIMATION_DURATION >= DROP_IN_ANIMATION_DURATION;
+        if (error) {
             throw new IllegalStateException("DROP_IN_ANIMATION_DURATION must be greater than " +
                     "INITIAL_ITEM_ANIMATION_DURATION, as sequencing of adding first two items " +
                     "is dependent on this");

File: src/com/android/launcher2/Hotseat.java
Patch:
@@ -28,6 +28,7 @@
 import com.android.launcher.R;
 
 public class Hotseat extends FrameLayout {
+    @SuppressWarnings("unused")
     private static final String TAG = "Hotseat";
 
     private Launcher mLauncher;

File: src/com/android/launcher2/IconCache.java
Patch:
@@ -33,6 +33,7 @@
  * Cache of application icons.  Icons can be made from any thread.
  */
 public class IconCache {
+    @SuppressWarnings("unused")
     private static final String TAG = "Launcher.IconCache";
 
     private static final int INITIAL_ICON_CACHE_CAPACITY = 50;

File: src/com/android/launcher2/LauncherAppWidgetHostView.java
Patch:
@@ -21,7 +21,6 @@
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
 import android.view.View;
-import android.view.ViewConfiguration;
 import android.view.ViewGroup;
 
 import com.android.launcher.R;

File: src/com/android/launcher2/LauncherApplication.java
Patch:
@@ -25,7 +25,6 @@
 import android.content.res.Configuration;
 import android.database.ContentObserver;
 import android.os.Handler;
-import android.view.MotionEvent;
 
 import com.android.launcher.R;
 

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -31,6 +31,7 @@ public static interface PressedCallback {
         void iconPressed(PagedViewIcon icon);
     }
 
+    @SuppressWarnings("unused")
     private static final String TAG = "PagedViewIcon";
     private static final float PRESS_ALPHA = 0.4f;
 

File: src/com/android/launcher2/RocketLauncher.java
Patch:
@@ -332,7 +332,7 @@ public void onTimeUpdate(TimeAnimator animation, long totalTime, long deltaTime)
         protected void onAttachedToWindow() {
             super.onAttachedToWindow();
             setLayerType(View.LAYER_TYPE_HARDWARE, null);
-            setSystemUiVisibility(View.STATUS_BAR_HIDDEN);
+            setSystemUiVisibility(View.SYSTEM_UI_FLAG_LOW_PROFILE);
 
             reset();
             mAnim.start();

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -246,7 +246,7 @@ public void onSearchPackagesChanged(boolean searchVisible, boolean voiceVisible)
                 mQSBSearchBar.setBackgroundResource(0);
             } else if (mPreviousBackground != null && (searchVisible || voiceVisible)) {
                 // Restore the background
-                mQSBSearchBar.setBackgroundDrawable(mPreviousBackground);
+                mQSBSearchBar.setBackground(mPreviousBackground);
             }
         }
     }

File: src/com/android/launcher2/WallpaperChooser.java
Patch:
@@ -24,6 +24,7 @@
 import android.os.Bundle;
 
 public class WallpaperChooser extends Activity {
+    @SuppressWarnings("unused")
     private static final String TAG = "Launcher.WallpaperChooser";
 
     @Override

File: src/com/android/launcher2/WallpaperChooserDialogFragment.java
Patch:
@@ -137,7 +137,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
          */
         if (mEmbedded) {
             View view = inflater.inflate(R.layout.wallpaper_chooser, container, false);
-            view.setBackgroundDrawable(mWallpaperDrawable);
+            view.setBackground(mWallpaperDrawable);
 
             final Gallery gallery = (Gallery) view.findViewById(R.id.gallery);
             gallery.setCallbackDuringFling(false);

File: src/com/android/launcher2/DragController.java
Patch:
@@ -67,7 +67,7 @@ public class DragController {
 
     private Launcher mLauncher;
     private Handler mHandler;
-    private final Vibrator mVibrator = new Vibrator();
+    private final Vibrator mVibrator;
 
     // temporaries to avoid gc thrash
     private Rect mRectTemp = new Rect();
@@ -151,6 +151,7 @@ public DragController(Launcher launcher) {
         mHandler = new Handler();
         mScrollZone = launcher.getResources().getDimensionPixelSize(R.dimen.scroll_zone);
         mVelocityTracker = VelocityTracker.obtain();
+        mVibrator = (Vibrator)launcher.getSystemService(Context.VIBRATOR_SERVICE);
 
         float density = launcher.getResources().getDisplayMetrics().density;
         mFlingToDeleteThresholdVelocity = (int) (FLING_TO_DELETE_THRESHOLD_Y_VELOCITY * density);

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -82,7 +82,7 @@ public AppWidgetResizeFrame(Context context, ItemInfo itemInfo,
         mWorkspace = (Workspace) dragLayer.findViewById(R.id.workspace);
 
         final AppWidgetProviderInfo info = widgetView.getAppWidgetInfo();
-        int[] result = mLauncher.getMinSpanForWidget(info, null);
+        int[] result = mLauncher.getMinSpanForWidget(info);
         mMinHSpan = result[0];
         mMinVSpan = result[1];
 

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -80,7 +80,7 @@ public AppWidgetResizeFrame(Context context, ItemInfo itemInfo,
         mWorkspace = (Workspace) dragLayer.findViewById(R.id.workspace);
 
         final AppWidgetProviderInfo info = widgetView.getAppWidgetInfo();
-        int[] result = mLauncher.getMinSpanForWidget(info, null);
+        int[] result = mLauncher.getMinSpanForWidget(info);
         mMinHSpan = result[0];
         mMinVSpan = result[1];
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -436,6 +436,8 @@ public void onLauncherTransitionEnd(Launcher l, boolean animated, boolean toWork
 
     private void setVisibilityOfSiblingsWithLowerZOrder(int visibility) {
         ViewGroup parent = (ViewGroup) getParent();
+        if (parent == null) return;
+
         final int count = parent.getChildCount();
         if (!isChildrenDrawingOrderEnabled()) {
             for (int i = 0; i < count; i++) {

File: src/com/android/launcher2/DragController.java
Patch:
@@ -111,6 +111,7 @@ public class DragController {
     private InputMethodManager mInputMethodManager;
 
     private int mLastTouch[] = new int[2];
+    private long mLastTouchUpTime = -1;
     private int mDistanceSinceScroll = 0;
 
     private int mTmpPoint[] = new int[2];
@@ -440,7 +441,6 @@ private int[] getClampedDragLayerPos(float x, float y) {
         return mTmpPoint;
     }
 
-    private long mLastTouchUpTime = -1;
     long getLastGestureUpTime() {
         if (mDragging) {
             return System.currentTimeMillis();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3288,7 +3288,7 @@ public void run() {
                     runNewAppsAnimation(false);
                 }
             } else {
-                // If the user has interacted recently, then run the animations immediately if they
+                // If the user has interacted recently, then just add the items in place if they
                 // are on another page (or just normally if they are added to the current page)
                 runNewAppsAnimation(willSnapPage);
             }

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -737,7 +737,6 @@ public void run() {
      * @param target where the item was dragged to (can be null if the item was flung)
      */
     private void endDragging(View target, boolean isFlingToDelete, boolean success) {
-        mLauncher.getWorkspace().onDragStopped(success);
         if (isFlingToDelete || !success || (target != mLauncher.getWorkspace() &&
                 !(target instanceof DeleteDropTarget))) {
             // Exit spring loaded mode if we have not successfully dropped or have not handled the

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2295,7 +2295,8 @@ public void onDrop(final DragObject d) {
 
                         final LauncherAppWidgetHostView hostView = (LauncherAppWidgetHostView) cell;
                         AppWidgetProviderInfo pinfo = hostView.getAppWidgetInfo();
-                        if (pinfo.resizeMode != AppWidgetProviderInfo.RESIZE_NONE) {
+                        if (pinfo != null &&
+                                pinfo.resizeMode != AppWidgetProviderInfo.RESIZE_NONE) {
                             final Runnable addResizeFrame = new Runnable() {
                                 public void run() {
                                     DragLayer dragLayer = mLauncher.getDragLayer();

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -721,20 +721,21 @@ protected int getScaledMeasuredWidth(View child) {
 
     protected void getVisiblePages(int[] range) {
         final int pageCount = getChildCount();
+
         if (pageCount > 0) {
             final int screenWidth = getMeasuredWidth();
             int leftScreen = 0;
             int rightScreen = 0;
             View currPage = getPageAt(leftScreen);
             while (leftScreen < pageCount - 1 &&
-                    currPage.getRight() - currPage.getPaddingRight() < mScrollX) {
+                    currPage.getX() + currPage.getWidth() - currPage.getPaddingRight() < mScrollX) {
                 leftScreen++;
                 currPage = getPageAt(leftScreen);
             }
             rightScreen = leftScreen;
             currPage = getPageAt(rightScreen + 1);
             while (rightScreen < pageCount - 1 &&
-                    currPage.getLeft() + currPage.getPaddingLeft() < mScrollX + screenWidth) {
+                    currPage.getX() - currPage.getPaddingLeft() < mScrollX + screenWidth) {
                 rightScreen++;
                 currPage = getPageAt(rightScreen + 1);
             }

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -255,8 +255,8 @@ public void run() {
                     PagedViewWidget.setDeletePreviewsWhenDetachedFromWindow(true);
                     mAnimationBuffer.setAlpha(1f);
                     mAnimationBuffer.setVisibility(View.VISIBLE);
-                    LayoutParams p = new FrameLayout.LayoutParams(child.getWidth(),
-                            child.getHeight());
+                    LayoutParams p = new FrameLayout.LayoutParams(child.getMeasuredWidth(),
+                            child.getMeasuredHeight());
                     p.setMargins((int) child.getLeft(), (int) child.getTop(), 0, 0);
                     mAnimationBuffer.addView(child, p);
                 }

File: src/com/android/launcher2/DragController.java
Patch:
@@ -652,7 +652,6 @@ private void dropOnFlingToDeleteTarget(float x, float y, PointF vel) {
 
         mDragObject.x = coordinates[0];
         mDragObject.y = coordinates[1];
-        mDragObject.dragComplete = true;
 
         // Clean up dragging on the target if it's not the current fling delete target otherwise,
         // start dragging to it.
@@ -663,6 +662,9 @@ private void dropOnFlingToDeleteTarget(float x, float y, PointF vel) {
         // Drop onto the fling-to-delete target
         boolean accepted = false;
         mFlingToDeleteDropTarget.onDragEnter(mDragObject);
+        // We must set dragComplete to true _only_ after we "enter" the fling-to-delete target for
+        // "drop"
+        mDragObject.dragComplete = true;
         mFlingToDeleteDropTarget.onDragExit(mDragObject);
         if (mFlingToDeleteDropTarget.acceptDrop(mDragObject)) {
             mFlingToDeleteDropTarget.onFlingToDelete(mDragObject, mDragObject.x, mDragObject.y,

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3411,7 +3411,8 @@ public void scrollRight() {
     @Override
     public boolean onEnterScrollArea(int x, int y, int direction) {
         // Ignore the scroll area if we are dragging over the hot seat
-        if (mLauncher.getHotseat() != null) {
+        boolean isPortrait = !LauncherApplication.isScreenLandscape(getContext());
+        if (mLauncher.getHotseat() != null && isPortrait) {
             Rect r = new Rect();
             mLauncher.getHotseat().getHitRect(r);
             if (r.contains(x, y)) {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3409,7 +3409,8 @@ public void scrollRight() {
     @Override
     public boolean onEnterScrollArea(int x, int y, int direction) {
         // Ignore the scroll area if we are dragging over the hot seat
-        if (mLauncher.getHotseat() != null) {
+        boolean isPortrait = !LauncherApplication.isScreenLandscape(getContext());
+        if (mLauncher.getHotseat() != null && isPortrait) {
             Rect r = new Rect();
             mLauncher.getHotseat().getHitRect(r);
             if (r.contains(x, y)) {

File: src/com/android/launcher2/DragController.java
Patch:
@@ -652,7 +652,6 @@ private void dropOnFlingToDeleteTarget(float x, float y, PointF vel) {
 
         mDragObject.x = coordinates[0];
         mDragObject.y = coordinates[1];
-        mDragObject.dragComplete = true;
 
         // Clean up dragging on the target if it's not the current fling delete target otherwise,
         // start dragging to it.
@@ -663,6 +662,9 @@ private void dropOnFlingToDeleteTarget(float x, float y, PointF vel) {
         // Drop onto the fling-to-delete target
         boolean accepted = false;
         mFlingToDeleteDropTarget.onDragEnter(mDragObject);
+        // We must set dragComplete to true _only_ after we "enter" the fling-to-delete target for
+        // "drop"
+        mDragObject.dragComplete = true;
         mFlingToDeleteDropTarget.onDragExit(mDragObject);
         if (mFlingToDeleteDropTarget.acceptDrop(mDragObject)) {
             mFlingToDeleteDropTarget.onFlingToDelete(mDragObject, mDragObject.x, mDragObject.y,

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -677,7 +677,7 @@ protected void determineScrollingStart(MotionEvent ev) {
 
     @Override
     protected boolean isScrollingIndicatorEnabled() {
-        return mState != State.SPRING_LOADED;
+        return super.isScrollingIndicatorEnabled() && (mState != State.SPRING_LOADED);
     }
 
     protected void onPageBeginMoving() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -677,7 +677,7 @@ protected void determineScrollingStart(MotionEvent ev) {
 
     @Override
     protected boolean isScrollingIndicatorEnabled() {
-        return mState != State.SPRING_LOADED;
+        return super.isScrollingIndicatorEnabled() && (mState != State.SPRING_LOADED);
     }
 
     protected void onPageBeginMoving() {

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -326,6 +326,7 @@ public void setGridSize(int x, int y) {
         mCountY = y;
         mOccupied = new boolean[mCountX][mCountY];
         mTmpOccupied = new boolean[mCountX][mCountY];
+        mTempRectStack.clear();
         requestLayout();
     }
 

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1107,6 +1107,8 @@ private Bitmap getWidgetPreview(ComponentName provider, int previewImage, int ic
             bitmapWidth = drawable.getIntrinsicWidth();
             bitmapHeight = drawable.getIntrinsicHeight();
         } else {
+            if (cellHSpan < 1) cellHSpan = 1;
+            if (cellVSpan < 1) cellVSpan = 1;
             // Determine the size of the bitmap for the preview image we will generate
             // TODO: This actually uses the apps customize cell layout params, where as we make want
             // the Workspace params for more accuracy.

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1107,6 +1107,8 @@ private Bitmap getWidgetPreview(ComponentName provider, int previewImage, int ic
             bitmapWidth = drawable.getIntrinsicWidth();
             bitmapHeight = drawable.getIntrinsicHeight();
         } else {
+            if (cellHSpan < 1) cellHSpan = 1;
+            if (cellVSpan < 1) cellVSpan = 1;
             // Determine the size of the bitmap for the preview image we will generate
             // TODO: This actually uses the apps customize cell layout params, where as we make want
             // the Workspace params for more accuracy.

File: src/com/android/launcher2/DragSource.java
Patch:
@@ -25,5 +25,6 @@
  *
  */
 public interface DragSource {
+    boolean supportsFlingToDelete();
     void onDropCompleted(View target, DragObject d, boolean success);
 }

File: src/com/android/launcher2/DragView.java
Patch:
@@ -162,7 +162,7 @@ protected void onDraw(Canvas canvas) {
             // for debugging
             Paint p = new Paint();
             p.setStyle(Paint.Style.FILL);
-            p.setColor(0xaaffffff);
+            p.setColor(0x66ffffff);
             canvas.drawRect(0, 0, getWidth(), getHeight(), p);
         }
 

File: src/com/android/launcher2/FastBitmapDrawable.java
Patch:
@@ -29,7 +29,7 @@ class FastBitmapDrawable extends Drawable {
     private int mAlpha;
     private int mWidth;
     private int mHeight;
-    private final Paint mPaint = new Paint();
+    private final Paint mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
 
     FastBitmapDrawable(Bitmap b) {
 	mAlpha = 255;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2015,6 +2015,7 @@ void closeFolder(Folder folder) {
     }
 
     public boolean onLongClick(View v) {
+
         if (mState != State.WORKSPACE) {
             return false;
         }

File: src/com/android/launcher2/DragView.java
Patch:
@@ -162,7 +162,7 @@ protected void onDraw(Canvas canvas) {
             // for debugging
             Paint p = new Paint();
             p.setStyle(Paint.Style.FILL);
-            p.setColor(0xaaffffff);
+            p.setColor(0x66ffffff);
             canvas.drawRect(0, 0, getWidth(), getHeight(), p);
         }
 

File: src/com/android/launcher2/FastBitmapDrawable.java
Patch:
@@ -29,7 +29,7 @@ class FastBitmapDrawable extends Drawable {
     private int mAlpha;
     private int mWidth;
     private int mHeight;
-    private final Paint mPaint = new Paint();
+    private final Paint mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
 
     FastBitmapDrawable(Bitmap b) {
 	mAlpha = 255;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2015,6 +2015,7 @@ void closeFolder(Folder folder) {
     }
 
     public boolean onLongClick(View v) {
+
         if (mState != State.WORKSPACE) {
             return false;
         }

File: src/com/android/launcher2/CheckLongPressHelper.java
Patch:
@@ -28,6 +28,7 @@ public void run() {
             if ((mView.getParent() != null) && mView.hasWindowFocus()
                     && !mHasPerformedLongPress) {
                 if (mView.performLongClick()) {
+                    mView.setPressed(false);
                     mHasPerformedLongPress = true;
                 }
             }

File: src/com/android/launcher2/DragController.java
Patch:
@@ -351,6 +351,7 @@ public void cancelDrag() {
             if (mLastDropTarget != null) {
                 mLastDropTarget.onDragExit(mDragObject);
             }
+            mDragObject.deferDragViewCleanupPostAnimation = false;
             mDragObject.cancelled = true;
             mDragObject.dragComplete = true;
             mDragObject.dragSource.onDropCompleted(null, mDragObject, false);

File: src/com/android/launcher2/DragController.java
Patch:
@@ -351,6 +351,7 @@ public void cancelDrag() {
             if (mLastDropTarget != null) {
                 mLastDropTarget.onDragExit(mDragObject);
             }
+            mDragObject.deferDragViewCleanupPostAnimation = false;
             mDragObject.cancelled = true;
             mDragObject.dragComplete = true;
             mDragObject.dragSource.onDropCompleted(null, mDragObject, false);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2313,8 +2313,9 @@ public void run() {
                     animateWidgetDrop(info, parent, d.dragView,
                             onCompleteRunnable, animationType, cell, false);
                 } else {
-                    mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, cell,
-                            onCompleteRunnable);
+                    int duration = snapScreen < 0 ? -1 : ADJACENT_SCREEN_DROP_DURATION;
+                    mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, cell, duration,
+                            onCompleteRunnable, this);
                 }
             } else {
                 d.deferDragViewCleanupPostAnimation = false;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2313,8 +2313,9 @@ public void run() {
                     animateWidgetDrop(info, parent, d.dragView,
                             onCompleteRunnable, animationType, cell, false);
                 } else {
-                    mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, cell,
-                            onCompleteRunnable);
+                    int duration = snapScreen < 0 ? -1 : ADJACENT_SCREEN_DROP_DURATION;
+                    mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, cell, duration,
+                            onCompleteRunnable, this);
                 }
             } else {
                 d.deferDragViewCleanupPostAnimation = false;

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -80,7 +80,7 @@ public AppWidgetResizeFrame(Context context, ItemInfo itemInfo,
         mWorkspace = (Workspace) dragLayer.findViewById(R.id.workspace);
 
         final AppWidgetProviderInfo info = widgetView.getAppWidgetInfo();
-        int[] result = mLauncher.getMinResizeSpanForWidget(info, null);
+        int[] result = mLauncher.getMinSpanForWidget(info, null);
         mMinHSpan = result[0];
         mMinVSpan = result[1];
 

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -629,6 +629,9 @@ private void beginDraggingWidget(View v) {
                     spanXY[1], createWidgetInfo, true);
             createItemInfo.spanX = spanXY[0];
             createItemInfo.spanY = spanXY[1];
+            int[] minSpanXY = mLauncher.getMinSpanForWidget(createWidgetInfo, null);
+            createWidgetInfo.minSpanX = minSpanXY[0];
+            createWidgetInfo.minSpanY = minSpanXY[1];
 
             FastBitmapDrawable previewDrawable = (FastBitmapDrawable) image.getDrawable();
             float minScale = 1.25f;

File: src/com/android/launcher2/InstallWidgetReceiver.java
Patch:
@@ -189,7 +189,7 @@ public void onClick(DialogInterface dialog, int which) {
             final PendingAddWidgetInfo createInfo = new PendingAddWidgetInfo(widgetInfo, mMimeType,
                     mClipData);
             mLauncher.addAppWidgetFromDrop(createInfo, LauncherSettings.Favorites.CONTAINER_DESKTOP,
-                    mTargetLayoutScreen, null, mTargetLayoutPos);
+                    mTargetLayoutScreen, null, null, mTargetLayoutPos);
         }
     }
 }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1731,7 +1731,7 @@ public void onClick(View v) {
             return;
         }
 
-        if (mWorkspace.isSwitchingState()) {
+        if (!mWorkspace.isFinishedSwitchingState()) {
             return;
         }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -367,7 +367,7 @@ public void onDragStart(DragSource source, Object info, int dragAction) {
 
         // Fade out the workspace slightly to highlight the currently dragging item
         animate().alpha(mDragFadeOutAlpha)
-                 .setInterpolator(new AccelerateInterpolator())
+                 .setInterpolator(new AccelerateInterpolator(1.5f))
                  .setDuration(mDragFadeOutDuration)
                  .start();
     }
@@ -379,7 +379,7 @@ public void onDragEnd() {
 
         // Fade the workspace back in after we have completed dragging
         animate().alpha(1f)
-                 .setInterpolator(new AccelerateInterpolator())
+                 .setInterpolator(new DecelerateInterpolator(1.5f))
                  .setDuration(mDragFadeOutDuration)
                  .start();
     }
@@ -605,7 +605,7 @@ public boolean isSwitchingState() {
 
     /** This differs from isSwitchingState in that we take into account how far the transition
      *  has completed. */
-    private boolean isFinishedSwitchingState() {
+    public boolean isFinishedSwitchingState() {
         return !mIsSwitchingState || (mTransitionProgress > 0.5f);
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1731,7 +1731,7 @@ public void onClick(View v) {
             return;
         }
 
-        if (mWorkspace.isSwitchingState()) {
+        if (!mWorkspace.isFinishedSwitchingState()) {
             return;
         }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -367,7 +367,7 @@ public void onDragStart(DragSource source, Object info, int dragAction) {
 
         // Fade out the workspace slightly to highlight the currently dragging item
         animate().alpha(mDragFadeOutAlpha)
-                 .setInterpolator(new AccelerateInterpolator())
+                 .setInterpolator(new AccelerateInterpolator(1.5f))
                  .setDuration(mDragFadeOutDuration)
                  .start();
     }
@@ -379,7 +379,7 @@ public void onDragEnd() {
 
         // Fade the workspace back in after we have completed dragging
         animate().alpha(1f)
-                 .setInterpolator(new AccelerateInterpolator())
+                 .setInterpolator(new DecelerateInterpolator(1.5f))
                  .setDuration(mDragFadeOutDuration)
                  .start();
     }
@@ -605,7 +605,7 @@ public boolean isSwitchingState() {
 
     /** This differs from isSwitchingState in that we take into account how far the transition
      *  has completed. */
-    private boolean isFinishedSwitchingState() {
+    public boolean isFinishedSwitchingState() {
         return !mIsSwitchingState || (mTransitionProgress > 0.5f);
     }
 

File: src/com/android/launcher2/DragView.java
Patch:
@@ -163,7 +163,7 @@ protected void onDraw(Canvas canvas) {
             canvas.drawRect(0, 0, getWidth(), getHeight(), p);
         }
         if (mPaint == null) {
-            mPaint = new Paint();
+            mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
         }
 
         mHasDrawn = true;
@@ -214,7 +214,7 @@ public boolean hasDrawn() {
     public void setAlpha(float alpha) {
         super.setAlpha(alpha);
         if (mPaint == null) {
-            mPaint = new Paint();
+            mPaint = new Paint(Paint.FILTER_BITMAP_FLAG);
         }
         mPaint.setAlpha((int) (255 * alpha));
         invalidate();

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -279,9 +279,11 @@ public Workspace(Context context, AttributeSet attrs, int defStyle) {
             // landscape
             TypedArray actionBarSizeTypedArray =
                 context.obtainStyledAttributes(new int[] { android.R.attr.actionBarSize });
+            DisplayMetrics displayMetrics = res.getDisplayMetrics();
             final float actionBarHeight = actionBarSizeTypedArray.getDimension(0, 0f);
             final float systemBarHeight = res.getDimension(R.dimen.status_bar_height);
-            final float smallestScreenDim = res.getConfiguration().smallestScreenWidthDp;
+            final float smallestScreenDim = res.getConfiguration().smallestScreenWidthDp *
+                    displayMetrics.density;
 
             cellCountX = 1;
             while (CellLayout.widthInPortrait(res, cellCountX + 1) <= smallestScreenDim) {

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -570,6 +570,8 @@ public void run() {
                         mLauncher.getAppWidgetHost().createView(mContext, mWidgetLoadingId, pInfo);
                 info.boundWidget = hostView;
                 mWidgetCleanupState = WIDGET_INFLATED;
+                hostView.setVisibility(INVISIBLE);
+                mLauncher.getDragLayer().addView(hostView);
             }
         };
         post(mInflateWidgetRunnable);
@@ -596,6 +598,7 @@ public void cleanUpShortPress(View v) {
             AppWidgetHostView widget = info.boundWidget;
             int widgetId = widget.getAppWidgetId();
             mLauncher.getAppWidgetHost().deleteAppWidgetId(widgetId);
+            mLauncher.getDragLayer().removeView(widget);
         }
         mWidgetCleanupState = WIDGET_NO_CLEANUP_REQUIRED;
         mWidgetLoadingId = -1;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -279,9 +279,11 @@ public Workspace(Context context, AttributeSet attrs, int defStyle) {
             // landscape
             TypedArray actionBarSizeTypedArray =
                 context.obtainStyledAttributes(new int[] { android.R.attr.actionBarSize });
+            DisplayMetrics displayMetrics = res.getDisplayMetrics();
             final float actionBarHeight = actionBarSizeTypedArray.getDimension(0, 0f);
             final float systemBarHeight = res.getDimension(R.dimen.status_bar_height);
-            final float smallestScreenDim = res.getConfiguration().smallestScreenWidthDp;
+            final float smallestScreenDim = res.getConfiguration().smallestScreenWidthDp *
+                    displayMetrics.density;
 
             cellCountX = 1;
             while (CellLayout.widthInPortrait(res, cellCountX + 1) <= smallestScreenDim) {

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -570,6 +570,8 @@ public void run() {
                         mLauncher.getAppWidgetHost().createView(mContext, mWidgetLoadingId, pInfo);
                 info.boundWidget = hostView;
                 mWidgetCleanupState = WIDGET_INFLATED;
+                hostView.setVisibility(INVISIBLE);
+                mLauncher.getDragLayer().addView(hostView);
             }
         };
         post(mInflateWidgetRunnable);
@@ -596,6 +598,7 @@ public void cleanUpShortPress(View v) {
             AppWidgetHostView widget = info.boundWidget;
             int widgetId = widget.getAppWidgetId();
             mLauncher.getAppWidgetHost().deleteAppWidgetId(widgetId);
+            mLauncher.getDragLayer().removeView(widget);
         }
         mWidgetCleanupState = WIDGET_NO_CLEANUP_REQUIRED;
         mWidgetLoadingId = -1;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -279,9 +279,11 @@ public Workspace(Context context, AttributeSet attrs, int defStyle) {
             // landscape
             TypedArray actionBarSizeTypedArray =
                 context.obtainStyledAttributes(new int[] { android.R.attr.actionBarSize });
+            DisplayMetrics displayMetrics = res.getDisplayMetrics();
             final float actionBarHeight = actionBarSizeTypedArray.getDimension(0, 0f);
             final float systemBarHeight = res.getDimension(R.dimen.status_bar_height);
-            final float smallestScreenDim = res.getConfiguration().smallestScreenWidthDp;
+            final float smallestScreenDim = res.getConfiguration().smallestScreenWidthDp *
+                    displayMetrics.density;
 
             cellCountX = 1;
             while (CellLayout.widthInPortrait(res, cellCountX + 1) <= smallestScreenDim) {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1724,7 +1724,7 @@ public void onAnimationUpdate(float a, float b) {
                     invalidate();
                     for (int i = 0; i < getChildCount(); i++) {
                         final CellLayout cl = (CellLayout) getChildAt(i);
-                        cl.fastInvalidate();
+                        cl.invalidate();
                         cl.setFastTranslationX(a * mOldTranslationXs[i] + b * mNewTranslationXs[i]);
                         cl.setFastTranslationY(a * mOldTranslationYs[i] + b * mNewTranslationYs[i]);
                         cl.setFastScaleX(a * mOldScaleXs[i] + b * mNewScaleXs[i]);
@@ -1734,6 +1734,7 @@ public void onAnimationUpdate(float a, float b) {
                         cl.setBackgroundAlphaMultiplier(a * mOldBackgroundAlphaMultipliers[i] +
                                 b * mNewBackgroundAlphaMultipliers[i]);
                         cl.setFastAlpha(a * mOldAlphas[i] + b * mNewAlphas[i]);
+                        cl.invalidate();
                     }
                     syncChildrenLayersEnabledOnVisiblePages();
                 }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2674,8 +2674,7 @@ private boolean isExternalDragWidget(DragObject d) {
 
     public void onDragOver(DragObject d) {
         // Skip drag over events while we are dragging over side pages
-        if (mInScrollArea) return;
-        if (mIsSwitchingState) return;
+        if (mInScrollArea || mIsSwitchingState || mState == State.SMALL) return;
 
         Rect r = new Rect();
         CellLayout layout = null;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2666,8 +2666,7 @@ private boolean isExternalDragWidget(DragObject d) {
 
     public void onDragOver(DragObject d) {
         // Skip drag over events while we are dragging over side pages
-        if (mInScrollArea) return;
-        if (mIsSwitchingState) return;
+        if (mInScrollArea || mIsSwitchingState || mState == State.SMALL) return;
 
         Rect r = new Rect();
         CellLayout layout = null;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -281,9 +281,11 @@ public Workspace(Context context, AttributeSet attrs, int defStyle) {
             // landscape
             TypedArray actionBarSizeTypedArray =
                 context.obtainStyledAttributes(new int[] { android.R.attr.actionBarSize });
+            DisplayMetrics displayMetrics = res.getDisplayMetrics();
             final float actionBarHeight = actionBarSizeTypedArray.getDimension(0, 0f);
             final float systemBarHeight = res.getDimension(R.dimen.status_bar_height);
-            final float smallestScreenDim = res.getConfiguration().smallestScreenWidthDp;
+            final float smallestScreenDim = res.getConfiguration().smallestScreenWidthDp *
+                    displayMetrics.density;
 
             cellCountX = 1;
             while (CellLayout.widthInPortrait(res, cellCountX + 1) <= smallestScreenDim) {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1680,7 +1680,6 @@ protected View getScrollingIndicator() {
         if (mHasScrollIndicator && mScrollIndicator == null) {
             ViewGroup parent = (ViewGroup) getParent();
             mScrollIndicator = (View) (parent.findViewById(R.id.paged_view_indicator));
-            mScrollIndicator.setLayerType(View.LAYER_TYPE_HARDWARE, null);
             mHasScrollIndicator = mScrollIndicator != null;
             if (mHasScrollIndicator) {
                 mScrollIndicator.setVisibility(View.VISIBLE);
@@ -1806,6 +1805,7 @@ private void updateScrollingIndicatorPosition() {
             indicatorPos += indicatorCenterOffset;
         }
         mScrollIndicator.setTranslationX(indicatorPos);
+        mScrollIndicator.invalidate();
     }
 
     public void showScrollIndicatorTrack() {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -582,6 +582,7 @@ public void run() {
         mWorkspace.animateExternalDrop(mWidgetBeingConfigured, cellLayout,
                 (DragView) mDragLayer.getAnimatedView(), onCompleteRunnable,
                 animationType);
+        mWidgetBeingConfigured = null;
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1950,7 +1950,7 @@ void addApplicationShortcut(ShortcutInfo info, CellLayout target, long container
     }
 
     public boolean transitionStateShouldAllowDrop() {
-        return (!isSwitchingState() || mTransitionProgress > 0.5f);
+        return ((!isSwitchingState() || mTransitionProgress > 0.5f) && mState != State.SMALL);
     }
 
     /**

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -582,6 +582,7 @@ public void run() {
         mWorkspace.animateExternalDrop(mWidgetBeingConfigured, cellLayout,
                 (DragView) mDragLayer.getAnimatedView(), onCompleteRunnable,
                 animationType);
+        mWidgetBeingConfigured = null;
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1950,7 +1950,7 @@ void addApplicationShortcut(ShortcutInfo info, CellLayout target, long container
     }
 
     public boolean transitionStateShouldAllowDrop() {
-        return (!isSwitchingState() || mTransitionProgress > 0.5f);
+        return ((!isSwitchingState() || mTransitionProgress > 0.5f) && mState != State.SMALL);
     }
 
     /**

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -582,6 +582,7 @@ public void run() {
         mWorkspace.animateExternalDrop(mWidgetBeingConfigured, cellLayout,
                 (DragView) mDragLayer.getAnimatedView(), onCompleteRunnable,
                 animationType);
+        mWidgetBeingConfigured = null;
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1950,7 +1950,7 @@ void addApplicationShortcut(ShortcutInfo info, CellLayout target, long container
     }
 
     public boolean transitionStateShouldAllowDrop() {
-        return (!isSwitchingState() || mTransitionProgress > 0.5f);
+        return ((!isSwitchingState() || mTransitionProgress > 0.5f) && mState != State.SMALL);
     }
 
     /**

File: src/com/android/launcher2/DragController.java
Patch:
@@ -394,7 +394,9 @@ private void endDrag() {
                 listener.onDragEnd();
             }
             if (mDragObject.dragView != null) {
-                mDragObject.dragView.remove();
+                if (!mDragObject.deferDragViewCleanupPostAnimation) {
+                    mDragObject.dragView.remove();
+                }
                 mDragObject.dragView = null;
             }
         }

File: src/com/android/launcher2/DropTarget.java
Patch:
@@ -55,6 +55,9 @@ class DragObject {
         /** Indicates that the drag operation was cancelled */
         public boolean cancelled = false;
 
+        /** Defers removing the DragView from the DragLayer until after the drop animation. */
+        public boolean deferDragViewCleanupPostAnimation = true;
+
         public DragObject() {
         }
     }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -169,7 +169,6 @@ enum State { NORMAL, SPRING_LOADED, SMALL };
     private Bitmap mDragOutline = null;
     private final Rect mTempRect = new Rect();
     private final int[] mTempXY = new int[2];
-    private int mDragViewMultiplyColor;
     private float mOverscrollFade = 0;
 
     // Paint used to draw external drop outline
@@ -291,7 +290,6 @@ public Workspace(Context context, AttributeSet attrs, int defStyle) {
 
         mSpringLoadedShrinkFactor =
             res.getInteger(R.integer.config_workspaceSpringLoadShrinkPercentage) / 100.0f;
-        mDragViewMultiplyColor = res.getColor(R.color.drag_view_multiply_color);
 
         // if the value is manually specified, use that instead
         cellCountX = a.getInt(R.styleable.Workspace_cellCountX, cellCountX);
@@ -1794,7 +1792,6 @@ public Bitmap createDragBitmap(View v, Canvas canvas, int padding) {
         canvas.setBitmap(b);
         drawDragView(v, canvas, padding, true);
         mOutlineHelper.applyOuterBlur(b, canvas, outlineColor);
-        canvas.drawColor(mDragViewMultiplyColor, PorterDuff.Mode.MULTIPLY);
         canvas.setBitmap(null);
 
         return b;
@@ -2247,6 +2244,7 @@ public void run() {
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, cell, duration,
                         disableHardwareLayersRunnable, this);
             } else {
+                d.deferDragViewCleanupPostAnimation = false;
                 cell.setVisibility(VISIBLE);
             }
             parent.onDropChild(cell);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -505,9 +505,6 @@ private boolean completeAdd(PendingAddArguments args) {
                 // We just wanted the activity result here so we can clear mWaitingForResult
                 break;
         }
-        // In any situation where we have a multi-step drop, we should reset the add info only after
-        // we complete the drop
-        resetAddInfo();
         return result;
     }
 
@@ -998,6 +995,7 @@ public void run() {
 
             addWidgetToAutoAdvanceIfNeeded(launcherInfo.hostView, appWidgetInfo);
         }
+        resetAddInfo();
     }
 
     private final BroadcastReceiver mReceiver = new BroadcastReceiver() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -17,8 +17,6 @@
 package com.android.launcher2;
 
 import android.animation.Animator;
-import android.animation.Animator.AnimatorListener;
-import android.animation.AnimatorListenerAdapter;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
 import android.animation.TimeInterpolator;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -505,9 +505,6 @@ private boolean completeAdd(PendingAddArguments args) {
                 // We just wanted the activity result here so we can clear mWaitingForResult
                 break;
         }
-        // In any situation where we have a multi-step drop, we should reset the add info only after
-        // we complete the drop
-        resetAddInfo();
         return result;
     }
 
@@ -998,6 +995,7 @@ public void run() {
 
             addWidgetToAutoAdvanceIfNeeded(launcherInfo.hostView, appWidgetInfo);
         }
+        resetAddInfo();
     }
 
     private final BroadcastReceiver mReceiver = new BroadcastReceiver() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -17,8 +17,6 @@
 package com.android.launcher2;
 
 import android.animation.Animator;
-import android.animation.Animator.AnimatorListener;
-import android.animation.AnimatorListenerAdapter;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
 import android.animation.TimeInterpolator;

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -766,8 +766,8 @@ protected void dispatchDraw(Canvas canvas) {
                 // View.INVISIBLE, preventing re-drawing of their hardware layer
                 for (int i = getChildCount() - 1; i >= 0; i--) {
                     final View v = getPageAt(i);
-                    if (leftScreen <= i && i <= rightScreen &&
-                            v.getAlpha() > ViewConfiguration.ALPHA_THRESHOLD) {
+
+                    if (leftScreen <= i && i <= rightScreen) {
                         v.setVisibility(VISIBLE);
                         drawChild(canvas, v, drawingTime);
                     } else {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1660,7 +1660,7 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay)
                         rotate.setInterpolator(new DecelerateInterpolator(2.0f));
                         rotate.addUpdateListener(new LauncherAnimatorUpdateListener() {
                                 public void onAnimationUpdate(float a, float b) {
-                                    cl.setRotationY(a * 0f + b * 1f);
+                                    cl.setRotationY(a * mOldRotationYs[i] + b * mNewRotationYs[i]);
                                 }
                             });
                         anim.play(rotate);

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -766,8 +766,8 @@ protected void dispatchDraw(Canvas canvas) {
                 // View.INVISIBLE, preventing re-drawing of their hardware layer
                 for (int i = getChildCount() - 1; i >= 0; i--) {
                     final View v = getPageAt(i);
-                    if (leftScreen <= i && i <= rightScreen &&
-                            v.getAlpha() > ViewConfiguration.ALPHA_THRESHOLD) {
+
+                    if (leftScreen <= i && i <= rightScreen) {
                         v.setVisibility(VISIBLE);
                         drawChild(canvas, v, drawingTime);
                     } else {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1660,7 +1660,7 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay)
                         rotate.setInterpolator(new DecelerateInterpolator(2.0f));
                         rotate.addUpdateListener(new LauncherAnimatorUpdateListener() {
                                 public void onAnimationUpdate(float a, float b) {
-                                    cl.setRotationY(a * 0f + b * 1f);
+                                    cl.setRotationY(a * mOldRotationYs[i] + b * mNewRotationYs[i]);
                                 }
                             });
                         anim.play(rotate);

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -766,8 +766,8 @@ protected void dispatchDraw(Canvas canvas) {
                 // View.INVISIBLE, preventing re-drawing of their hardware layer
                 for (int i = getChildCount() - 1; i >= 0; i--) {
                     final View v = getPageAt(i);
-                    if (leftScreen <= i && i <= rightScreen &&
-                            v.getAlpha() > ViewConfiguration.ALPHA_THRESHOLD) {
+
+                    if (leftScreen <= i && i <= rightScreen) {
                         v.setVisibility(VISIBLE);
                         drawChild(canvas, v, drawingTime);
                     } else {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1660,7 +1660,7 @@ Animator getChangeStateAnimation(final State state, boolean animated, int delay)
                         rotate.setInterpolator(new DecelerateInterpolator(2.0f));
                         rotate.addUpdateListener(new LauncherAnimatorUpdateListener() {
                                 public void onAnimationUpdate(float a, float b) {
-                                    cl.setRotationY(a * 0f + b * 1f);
+                                    cl.setRotationY(a * mOldRotationYs[i] + b * mNewRotationYs[i]);
                                 }
                             });
                         anim.play(rotate);

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -341,12 +341,10 @@ protected boolean isPageMoving() {
 
     // a method that subclasses can override to add behavior
     protected void onPageBeginMoving() {
-        showScrollingIndicator(false);
     }
 
     // a method that subclasses can override to add behavior
     protected void onPageEndMoving() {
-        hideScrollingIndicator(false);
     }
 
     /**

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -341,12 +341,10 @@ protected boolean isPageMoving() {
 
     // a method that subclasses can override to add behavior
     protected void onPageBeginMoving() {
-        showScrollingIndicator(false);
     }
 
     // a method that subclasses can override to add behavior
     protected void onPageEndMoving() {
-        hideScrollingIndicator(false);
     }
 
     /**

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -341,12 +341,10 @@ protected boolean isPageMoving() {
 
     // a method that subclasses can override to add behavior
     protected void onPageBeginMoving() {
-        showScrollingIndicator(false);
     }
 
     // a method that subclasses can override to add behavior
     protected void onPageEndMoving() {
-        hideScrollingIndicator(false);
     }
 
     /**

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -231,7 +231,7 @@ enum WallpaperVerticalOffset { TOP, MIDDLE, BOTTOM };
     private float[] mNewBackgroundAlphaMultipliers;
     private float[] mNewAlphas;
     private float[] mNewRotationYs;
-    private float mTransitionProgress;
+    private float mTransitionProgress = 1f;
 
     /**
      * Used to inflate the Workspace from XML.

File: src/com/android/launcher2/SpringLoadedDragController.java
Patch:
@@ -18,7 +18,7 @@
 
 public class SpringLoadedDragController implements OnAlarmListener {
     // how long the user must hover over a mini-screen before it unshrinks
-    final long ENTER_SPRING_LOAD_HOVER_TIME = 550;
+    final long ENTER_SPRING_LOAD_HOVER_TIME = 500;
     final long ENTER_SPRING_LOAD_CANCEL_HOVER_TIME = 950;
     final long EXIT_SPRING_LOAD_HOVER_TIME = 200;
 

File: src/com/android/launcher2/SpringLoadedDragController.java
Patch:
@@ -18,7 +18,7 @@
 
 public class SpringLoadedDragController implements OnAlarmListener {
     // how long the user must hover over a mini-screen before it unshrinks
-    final long ENTER_SPRING_LOAD_HOVER_TIME = 550;
+    final long ENTER_SPRING_LOAD_HOVER_TIME = 500;
     final long ENTER_SPRING_LOAD_CANCEL_HOVER_TIME = 950;
     final long EXIT_SPRING_LOAD_HOVER_TIME = 200;
 

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1682,6 +1682,7 @@ protected View getScrollingIndicator() {
         if (mHasScrollIndicator && mScrollIndicator == null) {
             ViewGroup parent = (ViewGroup) getParent();
             mScrollIndicator = (View) (parent.findViewById(R.id.paged_view_indicator));
+            mScrollIndicator.setLayerType(View.LAYER_TYPE_HARDWARE, null);
             mHasScrollIndicator = mScrollIndicator != null;
             if (mHasScrollIndicator) {
                 mScrollIndicator.setVisibility(View.VISIBLE);
@@ -1807,7 +1808,6 @@ private void updateScrollingIndicatorPosition() {
             indicatorPos += indicatorCenterOffset;
         }
         mScrollIndicator.setTranslationX(indicatorPos);
-        mScrollIndicator.invalidate();
     }
 
     public void showScrollIndicatorTrack() {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -292,6 +292,7 @@ protected void updateCurrentPageScroll() {
         int newX = getChildOffset(mCurrentPage) - getRelativeChildOffset(mCurrentPage);
         scrollTo(newX, 0);
         mScroller.setFinalX(newX);
+        mScroller.forceFinished(true);
     }
 
     /**
@@ -602,9 +603,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
 
         if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < getChildCount()) {
             setHorizontalScrollBarEnabled(false);
-            int newX = getChildOffset(mCurrentPage) - getRelativeChildOffset(mCurrentPage);
-            scrollTo(newX, 0);
-            mScroller.setFinalX(newX);
+            updateCurrentPageScroll();
             setHorizontalScrollBarEnabled(true);
             mFirstLayout = false;
         }

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -292,6 +292,7 @@ protected void updateCurrentPageScroll() {
         int newX = getChildOffset(mCurrentPage) - getRelativeChildOffset(mCurrentPage);
         scrollTo(newX, 0);
         mScroller.setFinalX(newX);
+        mScroller.forceFinished(true);
     }
 
     /**
@@ -602,9 +603,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
 
         if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < getChildCount()) {
             setHorizontalScrollBarEnabled(false);
-            int newX = getChildOffset(mCurrentPage) - getRelativeChildOffset(mCurrentPage);
-            scrollTo(newX, 0);
-            mScroller.setFinalX(newX);
+            updateCurrentPageScroll();
             setHorizontalScrollBarEnabled(true);
             mFirstLayout = false;
         }

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -292,6 +292,7 @@ protected void updateCurrentPageScroll() {
         int newX = getChildOffset(mCurrentPage) - getRelativeChildOffset(mCurrentPage);
         scrollTo(newX, 0);
         mScroller.setFinalX(newX);
+        mScroller.forceFinished(true);
     }
 
     /**
@@ -602,9 +603,7 @@ protected void onLayout(boolean changed, int left, int top, int right, int botto
 
         if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < getChildCount()) {
             setHorizontalScrollBarEnabled(false);
-            int newX = getChildOffset(mCurrentPage) - getRelativeChildOffset(mCurrentPage);
-            scrollTo(newX, 0);
-            mScroller.setFinalX(newX);
+            updateCurrentPageScroll();
             setHorizontalScrollBarEnabled(true);
             mFirstLayout = false;
         }

File: src/com/android/launcher2/DeleteDropTarget.java
Patch:
@@ -193,7 +193,7 @@ public void run() {
         };
         dragLayer.animateView(d.dragView, from, to, 0.1f, 0.1f,
                 DELETE_ANIMATION_DURATION, new DecelerateInterpolator(2),
-                new DecelerateInterpolator(1.5f), onAnimationEndRunnable, false);
+                new DecelerateInterpolator(1.5f), onAnimationEndRunnable, false, null);
     }
 
     private void completeDrop(DragObject d) {

File: src/com/android/launcher2/Folder.java
Patch:
@@ -375,7 +375,7 @@ public void animateOpen() {
         PropertyValuesHolder scaleX = PropertyValuesHolder.ofFloat("scaleX", 1.0f);
         PropertyValuesHolder scaleY = PropertyValuesHolder.ofFloat("scaleY", 1.0f);
         ObjectAnimator oa = ObjectAnimator.ofPropertyValuesHolder(this, alpha, scaleX, scaleY);
-        
+
         oa.addListener(new AnimatorListenerAdapter() {
             @Override
             public void onAnimationStart(Animator animation) {

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -362,7 +362,7 @@ private void onDrop(final ShortcutInfo item, View animateView, Rect finalRect,
             dragLayer.animateView(animateView, from, to, finalAlpha,
                     scale * scaleRelativeToDragLayer, DROP_IN_ANIMATION_DURATION,
                     new DecelerateInterpolator(2), new AccelerateInterpolator(2),
-                    postAnimationRunnable, false);
+                    postAnimationRunnable, false, null);
             postDelayed(new Runnable() {
                 public void run() {
                     addItem(item);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2287,10 +2287,8 @@ public void run() {
             mAnimatingViewIntoPlace = true;
             if (d.dragView.hasDrawn()) {
                 int duration = snapScreen < 0 ? -1 : ADJACENT_SCREEN_DROP_DURATION;
-                setFinalScrollForPageChange(snapScreen);
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, cell, duration,
-                        disableHardwareLayersRunnable);
-                resetFinalScrollForPageChange(snapScreen);
+                        disableHardwareLayersRunnable, this);
             } else {
                 cell.setVisibility(VISIBLE);
             }

File: src/com/android/launcher2/DeleteDropTarget.java
Patch:
@@ -193,7 +193,7 @@ public void run() {
         };
         dragLayer.animateView(d.dragView, from, to, 0.1f, 0.1f,
                 DELETE_ANIMATION_DURATION, new DecelerateInterpolator(2),
-                new DecelerateInterpolator(1.5f), onAnimationEndRunnable, false);
+                new DecelerateInterpolator(1.5f), onAnimationEndRunnable, false, null);
     }
 
     private void completeDrop(DragObject d) {

File: src/com/android/launcher2/Folder.java
Patch:
@@ -375,7 +375,7 @@ public void animateOpen() {
         PropertyValuesHolder scaleX = PropertyValuesHolder.ofFloat("scaleX", 1.0f);
         PropertyValuesHolder scaleY = PropertyValuesHolder.ofFloat("scaleY", 1.0f);
         ObjectAnimator oa = ObjectAnimator.ofPropertyValuesHolder(this, alpha, scaleX, scaleY);
-        
+
         oa.addListener(new AnimatorListenerAdapter() {
             @Override
             public void onAnimationStart(Animator animation) {

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -362,7 +362,7 @@ private void onDrop(final ShortcutInfo item, View animateView, Rect finalRect,
             dragLayer.animateView(animateView, from, to, finalAlpha,
                     scale * scaleRelativeToDragLayer, DROP_IN_ANIMATION_DURATION,
                     new DecelerateInterpolator(2), new AccelerateInterpolator(2),
-                    postAnimationRunnable, false);
+                    postAnimationRunnable, false, null);
             postDelayed(new Runnable() {
                 public void run() {
                     addItem(item);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2287,10 +2287,8 @@ public void run() {
             mAnimatingViewIntoPlace = true;
             if (d.dragView.hasDrawn()) {
                 int duration = snapScreen < 0 ? -1 : ADJACENT_SCREEN_DROP_DURATION;
-                setFinalScrollForPageChange(snapScreen);
                 mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, cell, duration,
-                        disableHardwareLayersRunnable);
-                resetFinalScrollForPageChange(snapScreen);
+                        disableHardwareLayersRunnable, this);
             } else {
                 cell.setVisibility(VISIBLE);
             }

File: src/com/android/launcher2/RocketLauncher.java
Patch:
@@ -23,14 +23,14 @@
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
 import android.animation.TimeAnimator;
+import android.app.Activity;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.os.Handler;
-import android.support.v13.dreams.BasicDream;
 import android.util.AttributeSet;
 import android.util.DisplayMetrics;
 import android.view.MotionEvent;
@@ -44,7 +44,7 @@
 import java.util.HashMap;
 import java.util.Random;
 
-public class RocketLauncher extends BasicDream {
+public class RocketLauncher extends Activity {
     public static final boolean ROCKET_LAUNCHER = true;
 
     public static class Board extends FrameLayout

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2920,6 +2920,7 @@ public void startBinding() {
             final CellLayout layoutParent = (CellLayout) workspace.getChildAt(i);
             layoutParent.removeAllViewsInLayout();
         }
+        mWidgetsToAdvance.clear();
         if (mHotseat != null) {
             mHotseat.resetLayout();
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2920,6 +2920,7 @@ public void startBinding() {
             final CellLayout layoutParent = (CellLayout) workspace.getChildAt(i);
             layoutParent.removeAllViewsInLayout();
         }
+        mWidgetsToAdvance.clear();
         if (mHotseat != null) {
             mHotseat.resetLayout();
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2920,6 +2920,7 @@ public void startBinding() {
             final CellLayout layoutParent = (CellLayout) workspace.getChildAt(i);
             layoutParent.removeAllViewsInLayout();
         }
+        mWidgetsToAdvance.clear();
         if (mHotseat != null) {
             mHotseat.resetLayout();
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2920,6 +2920,7 @@ public void startBinding() {
             final CellLayout layoutParent = (CellLayout) workspace.getChildAt(i);
             layoutParent.removeAllViewsInLayout();
         }
+        mWidgetsToAdvance.clear();
         if (mHotseat != null) {
             mHotseat.resetLayout();
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2920,6 +2920,7 @@ public void startBinding() {
             final CellLayout layoutParent = (CellLayout) workspace.getChildAt(i);
             layoutParent.removeAllViewsInLayout();
         }
+        mWidgetsToAdvance.clear();
         if (mHotseat != null) {
             mHotseat.resetLayout();
         }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3526,11 +3526,13 @@ void setFadeForOverScroll(float fade) {
         mOverscrollFade = fade;
         float reducedFade = 0.5f + 0.5f * (1 - fade);
         final ViewGroup parent = (ViewGroup) getParent();
+        final ImageView qsbDivider = (ImageView) (parent.findViewById(R.id.qsb_divider));
         final ImageView dockDivider = (ImageView) (parent.findViewById(R.id.dock_divider));
         final ImageView scrollIndicator = getScrollingIndicator();
 
         cancelScrollingIndicatorAnimations();
-        dockDivider.setAlpha(reducedFade);
+        if (qsbDivider != null) qsbDivider.setAlpha(reducedFade);
+        if (dockDivider != null) dockDivider.setAlpha(reducedFade);
         scrollIndicator.setAlpha(1 - fade);
     }
 }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3526,11 +3526,13 @@ void setFadeForOverScroll(float fade) {
         mOverscrollFade = fade;
         float reducedFade = 0.5f + 0.5f * (1 - fade);
         final ViewGroup parent = (ViewGroup) getParent();
+        final ImageView qsbDivider = (ImageView) (parent.findViewById(R.id.qsb_divider));
         final ImageView dockDivider = (ImageView) (parent.findViewById(R.id.dock_divider));
         final ImageView scrollIndicator = getScrollingIndicator();
 
         cancelScrollingIndicatorAnimations();
-        dockDivider.setAlpha(reducedFade);
+        if (qsbDivider != null) qsbDivider.setAlpha(reducedFade);
+        if (dockDivider != null) dockDivider.setAlpha(reducedFade);
         scrollIndicator.setAlpha(1 - fade);
     }
 }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3526,11 +3526,13 @@ void setFadeForOverScroll(float fade) {
         mOverscrollFade = fade;
         float reducedFade = 0.5f + 0.5f * (1 - fade);
         final ViewGroup parent = (ViewGroup) getParent();
+        final ImageView qsbDivider = (ImageView) (parent.findViewById(R.id.qsb_divider));
         final ImageView dockDivider = (ImageView) (parent.findViewById(R.id.dock_divider));
         final ImageView scrollIndicator = getScrollingIndicator();
 
         cancelScrollingIndicatorAnimations();
-        dockDivider.setAlpha(reducedFade);
+        if (qsbDivider != null) qsbDivider.setAlpha(reducedFade);
+        if (dockDivider != null) dockDivider.setAlpha(reducedFade);
         scrollIndicator.setAlpha(1 - fade);
     }
 }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3526,11 +3526,13 @@ void setFadeForOverScroll(float fade) {
         mOverscrollFade = fade;
         float reducedFade = 0.5f + 0.5f * (1 - fade);
         final ViewGroup parent = (ViewGroup) getParent();
+        final ImageView qsbDivider = (ImageView) (parent.findViewById(R.id.qsb_divider));
         final ImageView dockDivider = (ImageView) (parent.findViewById(R.id.dock_divider));
         final ImageView scrollIndicator = getScrollingIndicator();
 
         cancelScrollingIndicatorAnimations();
-        dockDivider.setAlpha(reducedFade);
+        if (qsbDivider != null) qsbDivider.setAlpha(reducedFade);
+        if (dockDivider != null) dockDivider.setAlpha(reducedFade);
         scrollIndicator.setAlpha(1 - fade);
     }
 }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3526,11 +3526,13 @@ void setFadeForOverScroll(float fade) {
         mOverscrollFade = fade;
         float reducedFade = 0.5f + 0.5f * (1 - fade);
         final ViewGroup parent = (ViewGroup) getParent();
+        final ImageView qsbDivider = (ImageView) (parent.findViewById(R.id.qsb_divider));
         final ImageView dockDivider = (ImageView) (parent.findViewById(R.id.dock_divider));
         final ImageView scrollIndicator = getScrollingIndicator();
 
         cancelScrollingIndicatorAnimations();
-        dockDivider.setAlpha(reducedFade);
+        if (qsbDivider != null) qsbDivider.setAlpha(reducedFade);
+        if (dockDivider != null) dockDivider.setAlpha(reducedFade);
         scrollIndicator.setAlpha(1 - fade);
     }
 }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1891,9 +1891,7 @@ private Bitmap createDragOutline(Bitmap orig, Canvas canvas, int padding, int w,
         // center the image
         dst.offset((w - scaledWidth) / 2, (h - scaledHeight) / 2);
 
-        Paint p = new Paint();
-        p.setFilterBitmap(true);
-        canvas.drawBitmap(orig, src, dst, p);
+        canvas.drawBitmap(orig, src, dst, null);
         mOutlineHelper.applyMediumExpensiveOutlineWithBlur(b, canvas, outlineColor, outlineColor,
                 alphaClipPaint);
         canvas.setBitmap(null);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1891,9 +1891,7 @@ private Bitmap createDragOutline(Bitmap orig, Canvas canvas, int padding, int w,
         // center the image
         dst.offset((w - scaledWidth) / 2, (h - scaledHeight) / 2);
 
-        Paint p = new Paint();
-        p.setFilterBitmap(true);
-        canvas.drawBitmap(orig, src, dst, p);
+        canvas.drawBitmap(orig, src, dst, null);
         mOutlineHelper.applyMediumExpensiveOutlineWithBlur(b, canvas, outlineColor, outlineColor,
                 alphaClipPaint);
         canvas.setBitmap(null);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1891,9 +1891,7 @@ private Bitmap createDragOutline(Bitmap orig, Canvas canvas, int padding, int w,
         // center the image
         dst.offset((w - scaledWidth) / 2, (h - scaledHeight) / 2);
 
-        Paint p = new Paint();
-        p.setFilterBitmap(true);
-        canvas.drawBitmap(orig, src, dst, p);
+        canvas.drawBitmap(orig, src, dst, null);
         mOutlineHelper.applyMediumExpensiveOutlineWithBlur(b, canvas, outlineColor, outlineColor,
                 alphaClipPaint);
         canvas.setBitmap(null);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1891,9 +1891,7 @@ private Bitmap createDragOutline(Bitmap orig, Canvas canvas, int padding, int w,
         // center the image
         dst.offset((w - scaledWidth) / 2, (h - scaledHeight) / 2);
 
-        Paint p = new Paint();
-        p.setFilterBitmap(true);
-        canvas.drawBitmap(orig, src, dst, p);
+        canvas.drawBitmap(orig, src, dst, null);
         mOutlineHelper.applyMediumExpensiveOutlineWithBlur(b, canvas, outlineColor, outlineColor,
                 alphaClipPaint);
         canvas.setBitmap(null);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1891,9 +1891,7 @@ private Bitmap createDragOutline(Bitmap orig, Canvas canvas, int padding, int w,
         // center the image
         dst.offset((w - scaledWidth) / 2, (h - scaledHeight) / 2);
 
-        Paint p = new Paint();
-        p.setFilterBitmap(true);
-        canvas.drawBitmap(orig, src, dst, p);
+        canvas.drawBitmap(orig, src, dst, null);
         mOutlineHelper.applyMediumExpensiveOutlineWithBlur(b, canvas, outlineColor, outlineColor,
                 alphaClipPaint);
         canvas.setBitmap(null);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -875,6 +875,9 @@ private void completeAddShortcut(Intent data, long container, int screen, int ce
         boolean foundCellSpan = false;
 
         ShortcutInfo info = mModel.infoFromShortcutIntent(this, data, null);
+        if (info == null) {
+            return;
+        }
         final View view = createShortcut(info);
 
         // First we check if we already know the exact location where we want to add this item.

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2472,7 +2472,9 @@ public boolean onDragEvent(DragEvent event) {
                 if (isShortcut) {
                     final Intent intent = data.getItemAt(index).getIntent();
                     Object info = model.infoFromShortcutIntent(mContext, intent, data.getIcon());
-                    onDropExternal(new int[] { x, y }, info, layout, false);
+                    if (info != null) {
+                        onDropExternal(new int[] { x, y }, info, layout, false);
+                    }
                 } else {
                     if (widgets.size() == 1) {
                         // If there is only one item, then go ahead and add and configure

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -875,6 +875,9 @@ private void completeAddShortcut(Intent data, long container, int screen, int ce
         boolean foundCellSpan = false;
 
         ShortcutInfo info = mModel.infoFromShortcutIntent(this, data, null);
+        if (info == null) {
+            return;
+        }
         final View view = createShortcut(info);
 
         // First we check if we already know the exact location where we want to add this item.

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2472,7 +2472,9 @@ public boolean onDragEvent(DragEvent event) {
                 if (isShortcut) {
                     final Intent intent = data.getItemAt(index).getIntent();
                     Object info = model.infoFromShortcutIntent(mContext, intent, data.getIcon());
-                    onDropExternal(new int[] { x, y }, info, layout, false);
+                    if (info != null) {
+                        onDropExternal(new int[] { x, y }, info, layout, false);
+                    }
                 } else {
                     if (widgets.size() == 1) {
                         // If there is only one item, then go ahead and add and configure

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -875,6 +875,9 @@ private void completeAddShortcut(Intent data, long container, int screen, int ce
         boolean foundCellSpan = false;
 
         ShortcutInfo info = mModel.infoFromShortcutIntent(this, data, null);
+        if (info == null) {
+            return;
+        }
         final View view = createShortcut(info);
 
         // First we check if we already know the exact location where we want to add this item.

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2472,7 +2472,9 @@ public boolean onDragEvent(DragEvent event) {
                 if (isShortcut) {
                     final Intent intent = data.getItemAt(index).getIntent();
                     Object info = model.infoFromShortcutIntent(mContext, intent, data.getIcon());
-                    onDropExternal(new int[] { x, y }, info, layout, false);
+                    if (info != null) {
+                        onDropExternal(new int[] { x, y }, info, layout, false);
+                    }
                 } else {
                     if (widgets.size() == 1) {
                         // If there is only one item, then go ahead and add and configure

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -875,6 +875,9 @@ private void completeAddShortcut(Intent data, long container, int screen, int ce
         boolean foundCellSpan = false;
 
         ShortcutInfo info = mModel.infoFromShortcutIntent(this, data, null);
+        if (info == null) {
+            return;
+        }
         final View view = createShortcut(info);
 
         // First we check if we already know the exact location where we want to add this item.

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2472,7 +2472,9 @@ public boolean onDragEvent(DragEvent event) {
                 if (isShortcut) {
                     final Intent intent = data.getItemAt(index).getIntent();
                     Object info = model.infoFromShortcutIntent(mContext, intent, data.getIcon());
-                    onDropExternal(new int[] { x, y }, info, layout, false);
+                    if (info != null) {
+                        onDropExternal(new int[] { x, y }, info, layout, false);
+                    }
                 } else {
                     if (widgets.size() == 1) {
                         // If there is only one item, then go ahead and add and configure

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -875,6 +875,9 @@ private void completeAddShortcut(Intent data, long container, int screen, int ce
         boolean foundCellSpan = false;
 
         ShortcutInfo info = mModel.infoFromShortcutIntent(this, data, null);
+        if (info == null) {
+            return;
+        }
         final View view = createShortcut(info);
 
         // First we check if we already know the exact location where we want to add this item.

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2472,7 +2472,9 @@ public boolean onDragEvent(DragEvent event) {
                 if (isShortcut) {
                     final Intent intent = data.getItemAt(index).getIntent();
                     Object info = model.infoFromShortcutIntent(mContext, intent, data.getIcon());
-                    onDropExternal(new int[] { x, y }, info, layout, false);
+                    if (info != null) {
+                        onDropExternal(new int[] { x, y }, info, layout, false);
+                    }
                 } else {
                     if (widgets.size() == 1) {
                         // If there is only one item, then go ahead and add and configure

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1891,9 +1891,7 @@ private Bitmap createDragOutline(Bitmap orig, Canvas canvas, int padding, int w,
         // center the image
         dst.offset((w - scaledWidth) / 2, (h - scaledHeight) / 2);
 
-        Paint p = new Paint();
-        p.setFilterBitmap(true);
-        canvas.drawBitmap(orig, src, dst, p);
+        canvas.drawBitmap(orig, src, dst, null);
         mOutlineHelper.applyMediumExpensiveOutlineWithBlur(b, canvas, outlineColor, outlineColor,
                 alphaClipPaint);
         canvas.setBitmap(null);

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -143,7 +143,7 @@ public abstract class PagedView extends ViewGroup {
 
     private PageSwitchListener mPageSwitchListener;
 
-    private ArrayList<Boolean> mDirtyPageContent;
+    protected ArrayList<Boolean> mDirtyPageContent;
 
     // choice modes
     protected static final int CHOICE_MODE_NONE = 0;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -873,6 +873,9 @@ private void completeAddShortcut(Intent data, long container, int screen, int ce
         boolean foundCellSpan = false;
 
         ShortcutInfo info = mModel.infoFromShortcutIntent(this, data, null);
+        if (info == null) {
+            return;
+        }
         final View view = createShortcut(info);
 
         // First we check if we already know the exact location where we want to add this item.

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2455,7 +2455,9 @@ public boolean onDragEvent(DragEvent event) {
                 if (isShortcut) {
                     final Intent intent = data.getItemAt(index).getIntent();
                     Object info = model.infoFromShortcutIntent(mContext, intent, data.getIcon());
-                    onDropExternal(new int[] { x, y }, info, layout, false);
+                    if (info != null) {
+                        onDropExternal(new int[] { x, y }, info, layout, false);
+                    }
                 } else {
                     if (widgets.size() == 1) {
                         // If there is only one item, then go ahead and add and configure

File: src/com/android/launcher2/Folder.java
Patch:
@@ -156,6 +156,7 @@ protected void onFinishInflate() {
         super.onFinishInflate();
         mContent = (CellLayout) findViewById(R.id.folder_content);
         mContent.setGridSize(0, 0);
+        mContent.getChildrenLayout().setMotionEventSplittingEnabled(false);
         mFolderName = (FolderEditText) findViewById(R.id.folder_name);
         mFolderName.setFolder(this);
         mFolderName.setOnFocusChangeListener(this);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2363,6 +2363,7 @@ private void doDragExit(DragObject d) {
             mDragTargetLayout.onDragExit();
         }
         mLastDragOverView = null;
+        mSpringLoadedDragController.cancel();
 
         if (!mIsPageMoving) {
             hideOutlines();

File: src/com/android/launcher2/Folder.java
Patch:
@@ -156,6 +156,7 @@ protected void onFinishInflate() {
         super.onFinishInflate();
         mContent = (CellLayout) findViewById(R.id.folder_content);
         mContent.setGridSize(0, 0);
+        mContent.getChildrenLayout().setMotionEventSplittingEnabled(false);
         mFolderName = (FolderEditText) findViewById(R.id.folder_name);
         mFolderName.setFolder(this);
         mFolderName.setOnFocusChangeListener(this);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2363,6 +2363,7 @@ private void doDragExit(DragObject d) {
             mDragTargetLayout.onDragExit();
         }
         mLastDragOverView = null;
+        mSpringLoadedDragController.cancel();
 
         if (!mIsPageMoving) {
             hideOutlines();

File: src/com/android/launcher2/Folder.java
Patch:
@@ -156,6 +156,7 @@ protected void onFinishInflate() {
         super.onFinishInflate();
         mContent = (CellLayout) findViewById(R.id.folder_content);
         mContent.setGridSize(0, 0);
+        mContent.getChildrenLayout().setMotionEventSplittingEnabled(false);
         mFolderName = (FolderEditText) findViewById(R.id.folder_name);
         mFolderName.setFolder(this);
         mFolderName.setOnFocusChangeListener(this);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2363,6 +2363,7 @@ private void doDragExit(DragObject d) {
             mDragTargetLayout.onDragExit();
         }
         mLastDragOverView = null;
+        mSpringLoadedDragController.cancel();
 
         if (!mIsPageMoving) {
             hideOutlines();

File: src/com/android/launcher2/Folder.java
Patch:
@@ -156,6 +156,7 @@ protected void onFinishInflate() {
         super.onFinishInflate();
         mContent = (CellLayout) findViewById(R.id.folder_content);
         mContent.setGridSize(0, 0);
+        mContent.getChildrenLayout().setMotionEventSplittingEnabled(false);
         mFolderName = (FolderEditText) findViewById(R.id.folder_name);
         mFolderName.setFolder(this);
         mFolderName.setOnFocusChangeListener(this);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2363,6 +2363,7 @@ private void doDragExit(DragObject d) {
             mDragTargetLayout.onDragExit();
         }
         mLastDragOverView = null;
+        mSpringLoadedDragController.cancel();
 
         if (!mIsPageMoving) {
             hideOutlines();

File: src/com/android/launcher2/Folder.java
Patch:
@@ -156,6 +156,7 @@ protected void onFinishInflate() {
         super.onFinishInflate();
         mContent = (CellLayout) findViewById(R.id.folder_content);
         mContent.setGridSize(0, 0);
+        mContent.getChildrenLayout().setMotionEventSplittingEnabled(false);
         mFolderName = (FolderEditText) findViewById(R.id.folder_name);
         mFolderName.setFolder(this);
         mFolderName.setOnFocusChangeListener(this);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2363,6 +2363,7 @@ private void doDragExit(DragObject d) {
             mDragTargetLayout.onDragExit();
         }
         mLastDragOverView = null;
+        mSpringLoadedDragController.cancel();
 
         if (!mIsPageMoving) {
             hideOutlines();

File: src/com/android/launcher2/Folder.java
Patch:
@@ -156,6 +156,7 @@ protected void onFinishInflate() {
         super.onFinishInflate();
         mContent = (CellLayout) findViewById(R.id.folder_content);
         mContent.setGridSize(0, 0);
+        mContent.getChildrenLayout().setMotionEventSplittingEnabled(false);
         mFolderName = (FolderEditText) findViewById(R.id.folder_name);
         mFolderName.setFolder(this);
         mFolderName.setOnFocusChangeListener(this);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3168,8 +3168,6 @@ public void run() {
     /* Cling related */
     private static final String PREFS_KEY = "com.android.launcher2.prefs";
     private boolean isClingsEnabled() {
-        // TEMPORARY: DISABLE CLINGS ON LARGE UI
-        if (LauncherApplication.isScreenLarge()) return false;
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -388,8 +388,9 @@ public void onLauncherTransitionEnd(Launcher l, Animator animation, boolean toWo
         }
 
         if (!toWorkspace) {
-            // Dismiss the cling if necessary
+            // Dismiss the workspace cling and show the all apps cling (if not already shown)
             l.dismissWorkspaceCling(null);
+            mAppsCustomizePane.showAllAppsCling();
 
             if (!LauncherApplication.isScreenLarge()) {
                 mAppsCustomizePane.hideScrollingIndicator(false);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2960,7 +2960,8 @@ public void run() {
                     mLauncher.getDragLayer().getDescendantCoordRelativeToSelf(cellLayout, loc);
             resetTransitionTransform(cellLayout);
 
-            float dragViewScale =  r.width() / d.dragView.getMeasuredWidth();
+            float dragViewScale =  Math.min(r.width() / d.dragView.getMeasuredWidth(),
+                    r.height() / d.dragView.getMeasuredHeight());
             // The animation will scale the dragView about its center, so we need to center about
             // the final location.
             loc[0] -= (d.dragView.getMeasuredWidth() - cellLayoutScale * r.width()) / 2;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3168,8 +3168,6 @@ public void run() {
     /* Cling related */
     private static final String PREFS_KEY = "com.android.launcher2.prefs";
     private boolean isClingsEnabled() {
-        // TEMPORARY: DISABLE CLINGS ON LARGE UI
-        if (LauncherApplication.isScreenLarge()) return false;
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -388,8 +388,9 @@ public void onLauncherTransitionEnd(Launcher l, Animator animation, boolean toWo
         }
 
         if (!toWorkspace) {
-            // Dismiss the cling if necessary
+            // Dismiss the workspace cling and show the all apps cling (if not already shown)
             l.dismissWorkspaceCling(null);
+            mAppsCustomizePane.showAllAppsCling();
 
             if (!LauncherApplication.isScreenLarge()) {
                 mAppsCustomizePane.hideScrollingIndicator(false);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2960,7 +2960,8 @@ public void run() {
                     mLauncher.getDragLayer().getDescendantCoordRelativeToSelf(cellLayout, loc);
             resetTransitionTransform(cellLayout);
 
-            float dragViewScale =  r.width() / d.dragView.getMeasuredWidth();
+            float dragViewScale =  Math.min(r.width() / d.dragView.getMeasuredWidth(),
+                    r.height() / d.dragView.getMeasuredHeight());
             // The animation will scale the dragView about its center, so we need to center about
             // the final location.
             loc[0] -= (d.dragView.getMeasuredWidth() - cellLayoutScale * r.width()) / 2;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2347,6 +2347,7 @@ private void doDragExit(DragObject d) {
             mDragTargetLayout.onDragExit();
         }
         mLastDragOverView = null;
+        mSpringLoadedDragController.cancel();
 
         if (!mIsPageMoving) {
             hideOutlines();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3168,8 +3168,6 @@ public void run() {
     /* Cling related */
     private static final String PREFS_KEY = "com.android.launcher2.prefs";
     private boolean isClingsEnabled() {
-        // TEMPORARY: DISABLE CLINGS ON LARGE UI
-        if (LauncherApplication.isScreenLarge()) return false;
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -388,8 +388,9 @@ public void onLauncherTransitionEnd(Launcher l, Animator animation, boolean toWo
         }
 
         if (!toWorkspace) {
-            // Dismiss the cling if necessary
+            // Dismiss the workspace cling and show the all apps cling (if not already shown)
             l.dismissWorkspaceCling(null);
+            mAppsCustomizePane.showAllAppsCling();
 
             if (!LauncherApplication.isScreenLarge()) {
                 mAppsCustomizePane.hideScrollingIndicator(false);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3168,8 +3168,6 @@ public void run() {
     /* Cling related */
     private static final String PREFS_KEY = "com.android.launcher2.prefs";
     private boolean isClingsEnabled() {
-        // TEMPORARY: DISABLE CLINGS ON LARGE UI
-        if (LauncherApplication.isScreenLarge()) return false;
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -388,8 +388,9 @@ public void onLauncherTransitionEnd(Launcher l, Animator animation, boolean toWo
         }
 
         if (!toWorkspace) {
-            // Dismiss the cling if necessary
+            // Dismiss the workspace cling and show the all apps cling (if not already shown)
             l.dismissWorkspaceCling(null);
+            mAppsCustomizePane.showAllAppsCling();
 
             if (!LauncherApplication.isScreenLarge()) {
                 mAppsCustomizePane.hideScrollingIndicator(false);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3168,8 +3168,6 @@ public void run() {
     /* Cling related */
     private static final String PREFS_KEY = "com.android.launcher2.prefs";
     private boolean isClingsEnabled() {
-        // TEMPORARY: DISABLE CLINGS ON LARGE UI
-        if (LauncherApplication.isScreenLarge()) return false;
         // disable clings when running in a test harness
         if(ActivityManager.isRunningInTestHarness()) return false;
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -388,8 +388,9 @@ public void onLauncherTransitionEnd(Launcher l, Animator animation, boolean toWo
         }
 
         if (!toWorkspace) {
-            // Dismiss the cling if necessary
+            // Dismiss the workspace cling and show the all apps cling (if not already shown)
             l.dismissWorkspaceCling(null);
+            mAppsCustomizePane.showAllAppsCling();
 
             if (!LauncherApplication.isScreenLarge()) {
                 mAppsCustomizePane.hideScrollingIndicator(false);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2960,7 +2960,8 @@ public void run() {
                     mLauncher.getDragLayer().getDescendantCoordRelativeToSelf(cellLayout, loc);
             resetTransitionTransform(cellLayout);
 
-            float dragViewScale =  r.width() / d.dragView.getMeasuredWidth();
+            float dragViewScale =  Math.min(r.width() / d.dragView.getMeasuredWidth(),
+                    r.height() / d.dragView.getMeasuredHeight());
             // The animation will scale the dragView about its center, so we need to center about
             // the final location.
             loc[0] -= (d.dragView.getMeasuredWidth() - cellLayoutScale * r.width()) / 2;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2960,7 +2960,8 @@ public void run() {
                     mLauncher.getDragLayer().getDescendantCoordRelativeToSelf(cellLayout, loc);
             resetTransitionTransform(cellLayout);
 
-            float dragViewScale =  r.width() / d.dragView.getMeasuredWidth();
+            float dragViewScale =  Math.min(r.width() / d.dragView.getMeasuredWidth(),
+                    r.height() / d.dragView.getMeasuredHeight());
             // The animation will scale the dragView about its center, so we need to center about
             // the final location.
             loc[0] -= (d.dragView.getMeasuredWidth() - cellLayoutScale * r.width()) / 2;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2960,7 +2960,8 @@ public void run() {
                     mLauncher.getDragLayer().getDescendantCoordRelativeToSelf(cellLayout, loc);
             resetTransitionTransform(cellLayout);
 
-            float dragViewScale =  r.width() / d.dragView.getMeasuredWidth();
+            float dragViewScale =  Math.min(r.width() / d.dragView.getMeasuredWidth(),
+                    r.height() / d.dragView.getMeasuredHeight());
             // The animation will scale the dragView about its center, so we need to center about
             // the final location.
             loc[0] -= (d.dragView.getMeasuredWidth() - cellLayoutScale * r.width()) / 2;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2960,7 +2960,8 @@ public void run() {
                     mLauncher.getDragLayer().getDescendantCoordRelativeToSelf(cellLayout, loc);
             resetTransitionTransform(cellLayout);
 
-            float dragViewScale =  r.width() / d.dragView.getMeasuredWidth();
+            float dragViewScale =  Math.min(r.width() / d.dragView.getMeasuredWidth(),
+                    r.height() / d.dragView.getMeasuredHeight());
             // The animation will scale the dragView about its center, so we need to center about
             // the final location.
             loc[0] -= (d.dragView.getMeasuredWidth() - cellLayoutScale * r.width()) / 2;

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -388,8 +388,9 @@ public void onLauncherTransitionEnd(Launcher l, Animator animation, boolean toWo
         }
 
         if (!toWorkspace) {
-            // Dismiss the cling if necessary
+            // Dismiss the workspace cling and show the all apps cling (if not already shown)
             l.dismissWorkspaceCling(null);
+            mAppsCustomizePane.showAllAppsCling();
 
             if (!LauncherApplication.isScreenLarge()) {
                 mAppsCustomizePane.hideScrollingIndicator(false);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1138,6 +1138,7 @@ float overScrollBackgroundAlphaInterpolator(float r) {
     }
 
     private void screenScrolledLargeUI(int screenCenter) {
+        if (isSwitchingState()) return;
         boolean isInOverscroll = false;
         for (int i = 0; i < getChildCount(); i++) {
             CellLayout cl = (CellLayout) getChildAt(i);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1138,6 +1138,7 @@ float overScrollBackgroundAlphaInterpolator(float r) {
     }
 
     private void screenScrolledLargeUI(int screenCenter) {
+        if (isSwitchingState()) return;
         boolean isInOverscroll = false;
         for (int i = 0; i < getChildCount(); i++) {
             CellLayout cl = (CellLayout) getChildAt(i);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1138,6 +1138,7 @@ float overScrollBackgroundAlphaInterpolator(float r) {
     }
 
     private void screenScrolledLargeUI(int screenCenter) {
+        if (isSwitchingState()) return;
         boolean isInOverscroll = false;
         for (int i = 0; i < getChildCount(); i++) {
             CellLayout cl = (CellLayout) getChildAt(i);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1138,6 +1138,7 @@ float overScrollBackgroundAlphaInterpolator(float r) {
     }
 
     private void screenScrolledLargeUI(int screenCenter) {
+        if (isSwitchingState()) return;
         boolean isInOverscroll = false;
         for (int i = 0; i < getChildCount(); i++) {
             CellLayout cl = (CellLayout) getChildAt(i);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1138,6 +1138,7 @@ float overScrollBackgroundAlphaInterpolator(float r) {
     }
 
     private void screenScrolledLargeUI(int screenCenter) {
+        if (isSwitchingState()) return;
         boolean isInOverscroll = false;
         for (int i = 0; i < getChildCount(); i++) {
             CellLayout cl = (CellLayout) getChildAt(i);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1139,6 +1139,7 @@ float overScrollBackgroundAlphaInterpolator(float r) {
     }
 
     private void screenScrolledLargeUI(int screenCenter) {
+        if (isSwitchingState()) return;
         boolean isInOverscroll = false;
         for (int i = 0; i < getChildCount(); i++) {
             CellLayout cl = (CellLayout) getChildAt(i);

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1018,6 +1018,7 @@ private Bitmap getWidgetPreview(AppWidgetProviderInfo info,
                 int hoffset = (int) (bitmapWidth / 2 - mAppIconSize * iconScale / 2);
                 int yoffset = (int) (bitmapHeight / 2 - mAppIconSize * iconScale / 2);
                 if (info.icon > 0) icon = mIconCache.getFullResIcon(packageName, info.icon);
+                Resources resources = mLauncher.getResources();
                 if (icon == null) icon = resources.getDrawable(R.drawable.ic_launcher_application);
 
                 renderDrawableToBitmap(icon, preview, hoffset, yoffset,

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1018,6 +1018,7 @@ private Bitmap getWidgetPreview(AppWidgetProviderInfo info,
                 int hoffset = (int) (bitmapWidth / 2 - mAppIconSize * iconScale / 2);
                 int yoffset = (int) (bitmapHeight / 2 - mAppIconSize * iconScale / 2);
                 if (info.icon > 0) icon = mIconCache.getFullResIcon(packageName, info.icon);
+                Resources resources = mLauncher.getResources();
                 if (icon == null) icon = resources.getDrawable(R.drawable.ic_launcher_application);
 
                 renderDrawableToBitmap(icon, preview, hoffset, yoffset,

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1018,6 +1018,7 @@ private Bitmap getWidgetPreview(AppWidgetProviderInfo info,
                 int hoffset = (int) (bitmapWidth / 2 - mAppIconSize * iconScale / 2);
                 int yoffset = (int) (bitmapHeight / 2 - mAppIconSize * iconScale / 2);
                 if (info.icon > 0) icon = mIconCache.getFullResIcon(packageName, info.icon);
+                Resources resources = mLauncher.getResources();
                 if (icon == null) icon = resources.getDrawable(R.drawable.ic_launcher_application);
 
                 renderDrawableToBitmap(icon, preview, hoffset, yoffset,

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1018,6 +1018,7 @@ private Bitmap getWidgetPreview(AppWidgetProviderInfo info,
                 int hoffset = (int) (bitmapWidth / 2 - mAppIconSize * iconScale / 2);
                 int yoffset = (int) (bitmapHeight / 2 - mAppIconSize * iconScale / 2);
                 if (info.icon > 0) icon = mIconCache.getFullResIcon(packageName, info.icon);
+                Resources resources = mLauncher.getResources();
                 if (icon == null) icon = resources.getDrawable(R.drawable.ic_launcher_application);
 
                 renderDrawableToBitmap(icon, preview, hoffset, yoffset,

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1018,6 +1018,7 @@ private Bitmap getWidgetPreview(AppWidgetProviderInfo info,
                 int hoffset = (int) (bitmapWidth / 2 - mAppIconSize * iconScale / 2);
                 int yoffset = (int) (bitmapHeight / 2 - mAppIconSize * iconScale / 2);
                 if (info.icon > 0) icon = mIconCache.getFullResIcon(packageName, info.icon);
+                Resources resources = mLauncher.getResources();
                 if (icon == null) icon = resources.getDrawable(R.drawable.ic_launcher_application);
 
                 renderDrawableToBitmap(icon, preview, hoffset, yoffset,

File: src/com/android/launcher2/Utilities.java
Patch:
@@ -43,8 +43,6 @@
 final class Utilities {
     private static final String TAG = "Launcher.Utilities";
 
-    private static final boolean TEXT_BURN = false;
-
     private static int sIconWidth = -1;
     private static int sIconHeight = -1;
     private static int sIconTextureWidth = -1;

File: src/com/android/launcher2/Utilities.java
Patch:
@@ -43,8 +43,6 @@
 final class Utilities {
     private static final String TAG = "Launcher.Utilities";
 
-    private static final boolean TEXT_BURN = false;
-
     private static int sIconWidth = -1;
     private static int sIconHeight = -1;
     private static int sIconTextureWidth = -1;

File: src/com/android/launcher2/Utilities.java
Patch:
@@ -43,8 +43,6 @@
 final class Utilities {
     private static final String TAG = "Launcher.Utilities";
 
-    private static final boolean TEXT_BURN = false;
-
     private static int sIconWidth = -1;
     private static int sIconHeight = -1;
     private static int sIconTextureWidth = -1;

File: src/com/android/launcher2/Utilities.java
Patch:
@@ -43,8 +43,6 @@
 final class Utilities {
     private static final String TAG = "Launcher.Utilities";
 
-    private static final boolean TEXT_BURN = false;
-
     private static int sIconWidth = -1;
     private static int sIconHeight = -1;
     private static int sIconTextureWidth = -1;

File: src/com/android/launcher2/Utilities.java
Patch:
@@ -43,8 +43,6 @@
 final class Utilities {
     private static final String TAG = "Launcher.Utilities";
 
-    private static final boolean TEXT_BURN = false;
-
     private static int sIconWidth = -1;
     private static int sIconHeight = -1;
     private static int sIconTextureWidth = -1;

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -932,7 +932,7 @@ private Bitmap getShortcutPreview(ResolveInfo info, int cellWidth, int cellHeigh
         Bitmap preview = Bitmap.createBitmap(bitmapSize, bitmapSize, Config.ARGB_8888);
 
         // Render the icon
-        Drawable icon = mIconCache.getFullResIcon(info, mPackageManager);
+        Drawable icon = mIconCache.getFullResIcon(info);
         renderDrawableToBitmap(icon, preview, offset, offset, mAppIconSize, mAppIconSize);
         return preview;
     }
@@ -1014,7 +1014,7 @@ private Bitmap getWidgetPreview(AppWidgetProviderInfo info,
                 Drawable icon = null;
                 int hoffset = (int) (bitmapWidth / 2 - mAppIconSize * iconScale / 2);
                 int yoffset = (int) (bitmapHeight / 2 - mAppIconSize * iconScale / 2);
-                if (info.icon > 0) icon = mPackageManager.getDrawable(packageName, info.icon, null);
+                if (info.icon > 0) icon = mIconCache.getFullResIcon(packageName, info.icon);
                 if (icon == null) icon = resources.getDrawable(R.drawable.ic_launcher_application);
 
                 renderDrawableToBitmap(icon, preview, hoffset, yoffset,

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1494,6 +1494,9 @@ void changeState(final State state, boolean animated) {
     }
 
     void changeState(final State state, boolean animated, int delay) {
+        if (mState == state) {
+            return;
+        }
         if (mFirstLayout) {
             // (mFirstLayout == "first layout has not happened yet")
             // cancel any pending shrinks that were set earlier
@@ -2359,7 +2362,6 @@ public boolean onDragEvent(DragEvent event) {
 
             // Show the current page outlines to indicate that we can accept this drop
             showOutlines();
-            layout.setIsDragOccuring(true);
             layout.onDragEnter();
             layout.visualizeDropLocation(null, mDragOutline, x, y, 1, 1, null, null);
 
@@ -2420,7 +2422,6 @@ public boolean onDragEvent(DragEvent event) {
         }
         case DragEvent.ACTION_DRAG_ENDED:
             // Hide the page outlines after the drop
-            layout.setIsDragOccuring(false);
             layout.onDragExit();
             hideOutlines();
             return true;

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -932,7 +932,7 @@ private Bitmap getShortcutPreview(ResolveInfo info, int cellWidth, int cellHeigh
         Bitmap preview = Bitmap.createBitmap(bitmapSize, bitmapSize, Config.ARGB_8888);
 
         // Render the icon
-        Drawable icon = mIconCache.getFullResIcon(info, mPackageManager);
+        Drawable icon = mIconCache.getFullResIcon(info);
         renderDrawableToBitmap(icon, preview, offset, offset, mAppIconSize, mAppIconSize);
         return preview;
     }
@@ -1014,7 +1014,7 @@ private Bitmap getWidgetPreview(AppWidgetProviderInfo info,
                 Drawable icon = null;
                 int hoffset = (int) (bitmapWidth / 2 - mAppIconSize * iconScale / 2);
                 int yoffset = (int) (bitmapHeight / 2 - mAppIconSize * iconScale / 2);
-                if (info.icon > 0) icon = mPackageManager.getDrawable(packageName, info.icon, null);
+                if (info.icon > 0) icon = mIconCache.getFullResIcon(packageName, info.icon);
                 if (icon == null) icon = resources.getDrawable(R.drawable.ic_launcher_application);
 
                 renderDrawableToBitmap(icon, preview, hoffset, yoffset,

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -932,7 +932,7 @@ private Bitmap getShortcutPreview(ResolveInfo info, int cellWidth, int cellHeigh
         Bitmap preview = Bitmap.createBitmap(bitmapSize, bitmapSize, Config.ARGB_8888);
 
         // Render the icon
-        Drawable icon = mIconCache.getFullResIcon(info, mPackageManager);
+        Drawable icon = mIconCache.getFullResIcon(info);
         renderDrawableToBitmap(icon, preview, offset, offset, mAppIconSize, mAppIconSize);
         return preview;
     }
@@ -1014,7 +1014,7 @@ private Bitmap getWidgetPreview(AppWidgetProviderInfo info,
                 Drawable icon = null;
                 int hoffset = (int) (bitmapWidth / 2 - mAppIconSize * iconScale / 2);
                 int yoffset = (int) (bitmapHeight / 2 - mAppIconSize * iconScale / 2);
-                if (info.icon > 0) icon = mPackageManager.getDrawable(packageName, info.icon, null);
+                if (info.icon > 0) icon = mIconCache.getFullResIcon(packageName, info.icon);
                 if (icon == null) icon = resources.getDrawable(R.drawable.ic_launcher_application);
 
                 renderDrawableToBitmap(icon, preview, hoffset, yoffset,

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1494,6 +1494,9 @@ void changeState(final State state, boolean animated) {
     }
 
     void changeState(final State state, boolean animated, int delay) {
+        if (mState == state) {
+            return;
+        }
         if (mFirstLayout) {
             // (mFirstLayout == "first layout has not happened yet")
             // cancel any pending shrinks that were set earlier
@@ -2359,7 +2362,6 @@ public boolean onDragEvent(DragEvent event) {
 
             // Show the current page outlines to indicate that we can accept this drop
             showOutlines();
-            layout.setIsDragOccuring(true);
             layout.onDragEnter();
             layout.visualizeDropLocation(null, mDragOutline, x, y, 1, 1, null, null);
 
@@ -2420,7 +2422,6 @@ public boolean onDragEvent(DragEvent event) {
         }
         case DragEvent.ACTION_DRAG_ENDED:
             // Hide the page outlines after the drop
-            layout.setIsDragOccuring(false);
             layout.onDragExit();
             hideOutlines();
             return true;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1494,6 +1494,9 @@ void changeState(final State state, boolean animated) {
     }
 
     void changeState(final State state, boolean animated, int delay) {
+        if (mState == state) {
+            return;
+        }
         if (mFirstLayout) {
             // (mFirstLayout == "first layout has not happened yet")
             // cancel any pending shrinks that were set earlier
@@ -2359,7 +2362,6 @@ public boolean onDragEvent(DragEvent event) {
 
             // Show the current page outlines to indicate that we can accept this drop
             showOutlines();
-            layout.setIsDragOccuring(true);
             layout.onDragEnter();
             layout.visualizeDropLocation(null, mDragOutline, x, y, 1, 1, null, null);
 
@@ -2420,7 +2422,6 @@ public boolean onDragEvent(DragEvent event) {
         }
         case DragEvent.ACTION_DRAG_ENDED:
             // Hide the page outlines after the drop
-            layout.setIsDragOccuring(false);
             layout.onDragExit();
             hideOutlines();
             return true;

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -713,7 +713,6 @@ protected void dispatchDraw(Canvas canvas) {
                 rightScreen++;
                 x += getScaledMeasuredWidth(getPageAt(rightScreen)) + mPageSpacing;
             }
-            rightScreen = Math.min(getChildCount() - 1, rightScreen);
 
             final long drawingTime = getDrawingTime();
             // Clip to the bounds

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1525,6 +1525,9 @@ void changeState(final State state, boolean animated) {
     }
 
     void changeState(final State state, boolean animated, int delay) {
+        if (mState == state) {
+            return;
+        }
         if (mFirstLayout) {
             // (mFirstLayout == "first layout has not happened yet")
             // cancel any pending shrinks that were set earlier
@@ -2390,7 +2393,6 @@ public boolean onDragEvent(DragEvent event) {
 
             // Show the current page outlines to indicate that we can accept this drop
             showOutlines();
-            layout.setIsDragOccuring(true);
             layout.onDragEnter();
             layout.visualizeDropLocation(null, mDragOutline, x, y, 1, 1, null, null);
 
@@ -2451,7 +2453,6 @@ public boolean onDragEvent(DragEvent event) {
         }
         case DragEvent.ACTION_DRAG_ENDED:
             // Hide the page outlines after the drop
-            layout.setIsDragOccuring(false);
             layout.onDragExit();
             hideOutlines();
             return true;

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -932,7 +932,7 @@ private Bitmap getShortcutPreview(ResolveInfo info, int cellWidth, int cellHeigh
         Bitmap preview = Bitmap.createBitmap(bitmapSize, bitmapSize, Config.ARGB_8888);
 
         // Render the icon
-        Drawable icon = mIconCache.getFullResIcon(info, mPackageManager);
+        Drawable icon = mIconCache.getFullResIcon(info);
         renderDrawableToBitmap(icon, preview, offset, offset, mAppIconSize, mAppIconSize);
         return preview;
     }
@@ -1014,7 +1014,7 @@ private Bitmap getWidgetPreview(AppWidgetProviderInfo info,
                 Drawable icon = null;
                 int hoffset = (int) (bitmapWidth / 2 - mAppIconSize * iconScale / 2);
                 int yoffset = (int) (bitmapHeight / 2 - mAppIconSize * iconScale / 2);
-                if (info.icon > 0) icon = mPackageManager.getDrawable(packageName, info.icon, null);
+                if (info.icon > 0) icon = mIconCache.getFullResIcon(packageName, info.icon);
                 if (icon == null) icon = resources.getDrawable(R.drawable.ic_launcher_application);
 
                 renderDrawableToBitmap(icon, preview, hoffset, yoffset,

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -713,7 +713,6 @@ protected void dispatchDraw(Canvas canvas) {
                 rightScreen++;
                 x += getScaledMeasuredWidth(getPageAt(rightScreen)) + mPageSpacing;
             }
-            rightScreen = Math.min(getChildCount() - 1, rightScreen);
 
             final long drawingTime = getDrawingTime();
             // Clip to the bounds

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -713,7 +713,6 @@ protected void dispatchDraw(Canvas canvas) {
                 rightScreen++;
                 x += getScaledMeasuredWidth(getPageAt(rightScreen)) + mPageSpacing;
             }
-            rightScreen = Math.min(getChildCount() - 1, rightScreen);
 
             final long drawingTime = getDrawingTime();
             // Clip to the bounds

File: src/com/android/launcher2/PendingAddItemInfo.java
Patch:
@@ -33,6 +33,7 @@ class PendingAddItemInfo extends ItemInfo {
 class PendingAddWidgetInfo extends PendingAddItemInfo {
     int minWidth;
     int minHeight;
+    boolean hasDefaultPreview;
 
     // Any configuration data that we want to pass to a configuration activity when
     // starting up a widget
@@ -44,6 +45,7 @@ public PendingAddWidgetInfo(AppWidgetProviderInfo i, String dataMimeType, Parcel
         componentName = i.provider;
         minWidth = i.minWidth;
         minHeight = i.minHeight;
+        hasDefaultPreview = i.previewImage <= 0;
         if (dataMimeType != null && data != null) {
             mimeType = dataMimeType;
             configurationData = data;

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -271,7 +271,7 @@ public AppsCustomizePagedView(Context context, AttributeSet attrs) {
     @Override
     protected void init() {
         super.init();
-        mCenterPagesVertically = true;
+        mCenterPagesVertically = false;
 
         Context context = getContext();
         Resources r = context.getResources();

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -271,7 +271,7 @@ public AppsCustomizePagedView(Context context, AttributeSet attrs) {
     @Override
     protected void init() {
         super.init();
-        mCenterPagesVertically = true;
+        mCenterPagesVertically = false;
 
         Context context = getContext();
         Resources r = context.getResources();

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -271,7 +271,7 @@ public AppsCustomizePagedView(Context context, AttributeSet attrs) {
     @Override
     protected void init() {
         super.init();
-        mCenterPagesVertically = true;
+        mCenterPagesVertically = false;
 
         Context context = getContext();
         Resources r = context.getResources();

File: src/com/android/launcher2/PendingAddItemInfo.java
Patch:
@@ -33,6 +33,7 @@ class PendingAddItemInfo extends ItemInfo {
 class PendingAddWidgetInfo extends PendingAddItemInfo {
     int minWidth;
     int minHeight;
+    boolean hasDefaultPreview;
 
     // Any configuration data that we want to pass to a configuration activity when
     // starting up a widget
@@ -44,6 +45,7 @@ public PendingAddWidgetInfo(AppWidgetProviderInfo i, String dataMimeType, Parcel
         componentName = i.provider;
         minWidth = i.minWidth;
         minHeight = i.minHeight;
+        hasDefaultPreview = i.previewImage <= 0;
         if (dataMimeType != null && data != null) {
             mimeType = dataMimeType;
             configurationData = data;

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -222,6 +222,7 @@ public void onAnimationEnd(Animator animation) {
                         }
                         mAppsCustomizePane.loadAssociatedPages(
                                 mAppsCustomizePane.getCurrentPage());
+                        mAppsCustomizePane.requestFocus();
                     }
                 });
                 AnimatorSet animSet = new AnimatorSet();

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -156,13 +156,13 @@ protected void onDraw(Canvas canvas) {
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewIconKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyDown(keyCode, event);
     }
 
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewIconKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyUp(keyCode, event);
     }
 

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -167,13 +167,13 @@ public boolean onTouchEvent(MotionEvent event) {
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewGridLayoutWidgetKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyDown(keyCode, event);
     }
 
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewGridLayoutWidgetKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyUp(keyCode, event);
     }
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -222,6 +222,7 @@ public void onAnimationEnd(Animator animation) {
                         }
                         mAppsCustomizePane.loadAssociatedPages(
                                 mAppsCustomizePane.getCurrentPage());
+                        mAppsCustomizePane.requestFocus();
                     }
                 });
                 AnimatorSet animSet = new AnimatorSet();

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -156,13 +156,13 @@ protected void onDraw(Canvas canvas) {
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewIconKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyDown(keyCode, event);
     }
 
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewIconKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyUp(keyCode, event);
     }
 

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -167,13 +167,13 @@ public boolean onTouchEvent(MotionEvent event) {
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewGridLayoutWidgetKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyDown(keyCode, event);
     }
 
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewGridLayoutWidgetKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyUp(keyCode, event);
     }
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -222,6 +222,7 @@ public void onAnimationEnd(Animator animation) {
                         }
                         mAppsCustomizePane.loadAssociatedPages(
                                 mAppsCustomizePane.getCurrentPage());
+                        mAppsCustomizePane.requestFocus();
                     }
                 });
                 AnimatorSet animSet = new AnimatorSet();

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -156,13 +156,13 @@ protected void onDraw(Canvas canvas) {
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewIconKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyDown(keyCode, event);
     }
 
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewIconKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyUp(keyCode, event);
     }
 

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -167,13 +167,13 @@ public boolean onTouchEvent(MotionEvent event) {
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewGridLayoutWidgetKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyDown(keyCode, event);
     }
 
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewGridLayoutWidgetKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyUp(keyCode, event);
     }
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -224,6 +224,7 @@ public void onAnimationEnd(Animator animation) {
                         }
                         mAppsCustomizePane.loadAssociatedPages(
                                 mAppsCustomizePane.getCurrentPage());
+                        mAppsCustomizePane.requestFocus();
                     }
                 });
                 AnimatorSet animSet = new AnimatorSet();

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -156,13 +156,13 @@ protected void onDraw(Canvas canvas) {
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewIconKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyDown(keyCode, event);
     }
 
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewIconKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyUp(keyCode, event);
     }
 

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -167,13 +167,13 @@ public boolean onTouchEvent(MotionEvent event) {
 
     @Override
     public boolean onKeyDown(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewGridLayoutWidgetKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyDown(keyCode, event);
     }
 
     @Override
     public boolean onKeyUp(int keyCode, KeyEvent event) {
-        return FocusHelper.handlePagedViewGridLayoutWidgetKeyEvent(this, keyCode, event)
+        return FocusHelper.handleAppsCustomizeKeyEvent(this, keyCode, event)
                 || super.onKeyUp(keyCode, event);
     }
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -75,8 +75,6 @@ void selectAppsTab() {
     }
     void selectWidgetsTab() {
         setContentTypeImmediate(AppsCustomizePagedView.ContentType.Widgets);
-        mAppsCustomizePane.setCurrentPageToWidgets();
-
         setCurrentTabByTag(WIDGETS_TAB_TAG);
     }
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -75,8 +75,6 @@ void selectAppsTab() {
     }
     void selectWidgetsTab() {
         setContentTypeImmediate(AppsCustomizePagedView.ContentType.Widgets);
-        mAppsCustomizePane.setCurrentPageToWidgets();
-
         setCurrentTabByTag(WIDGETS_TAB_TAG);
     }
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -75,8 +75,6 @@ void selectAppsTab() {
     }
     void selectWidgetsTab() {
         setContentTypeImmediate(AppsCustomizePagedView.ContentType.Widgets);
-        mAppsCustomizePane.setCurrentPageToWidgets();
-
         setCurrentTabByTag(WIDGETS_TAB_TAG);
     }
 

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -75,8 +75,6 @@ void selectAppsTab() {
     }
     void selectWidgetsTab() {
         setContentTypeImmediate(AppsCustomizePagedView.ContentType.Widgets);
-        mAppsCustomizePane.setCurrentPageToWidgets();
-
         setCurrentTabByTag(WIDGETS_TAB_TAG);
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1209,7 +1209,7 @@ protected void onNewIntent(Intent intent) {
             }
 
             // Reset AllApps to its initial state
-            if (mAppsCustomizeTabHost != null) {
+            if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
                 mAppsCustomizeTabHost.reset();
             }
         }
@@ -2188,7 +2188,6 @@ private void cameraZoomOut(State toState, boolean animated, final boolean spring
 
         // Shrink workspaces away if going to AppsCustomize from workspace
         mWorkspace.changeState(Workspace.State.SMALL, animated);
-        //hideHotseat(animated);
 
         if (animated) {
             final ValueAnimator scaleAnim = ValueAnimator.ofFloat(0f, 1f).setDuration(duration);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1421,8 +1421,8 @@ public float getInterpolation(float input) {
      * ZInterpolator compounded with an ease-out.
      */
     static class ZoomOutInterpolator implements TimeInterpolator {
-        private final ZInterpolator zInterpolator = new ZInterpolator(0.2f);
-        private final DecelerateInterpolator decelerate = new DecelerateInterpolator(1.8f);
+        private final DecelerateInterpolator decelerate = new DecelerateInterpolator(0.75f);
+        private final ZInterpolator zInterpolator = new ZInterpolator(0.13f);
 
         public float getInterpolation(float input) {
             return decelerate.getInterpolation(zInterpolator.getInterpolation(input));

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1209,7 +1209,7 @@ protected void onNewIntent(Intent intent) {
             }
 
             // Reset AllApps to its initial state
-            if (mAppsCustomizeTabHost != null) {
+            if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
                 mAppsCustomizeTabHost.reset();
             }
         }
@@ -2188,7 +2188,6 @@ private void cameraZoomOut(State toState, boolean animated, final boolean spring
 
         // Shrink workspaces away if going to AppsCustomize from workspace
         mWorkspace.changeState(Workspace.State.SMALL, animated);
-        //hideHotseat(animated);
 
         if (animated) {
             final ValueAnimator scaleAnim = ValueAnimator.ofFloat(0f, 1f).setDuration(duration);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1421,8 +1421,8 @@ public float getInterpolation(float input) {
      * ZInterpolator compounded with an ease-out.
      */
     static class ZoomOutInterpolator implements TimeInterpolator {
-        private final ZInterpolator zInterpolator = new ZInterpolator(0.2f);
-        private final DecelerateInterpolator decelerate = new DecelerateInterpolator(1.8f);
+        private final DecelerateInterpolator decelerate = new DecelerateInterpolator(0.75f);
+        private final ZInterpolator zInterpolator = new ZInterpolator(0.13f);
 
         public float getInterpolation(float input) {
             return decelerate.getInterpolation(zInterpolator.getInterpolation(input));

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1209,7 +1209,7 @@ protected void onNewIntent(Intent intent) {
             }
 
             // Reset AllApps to its initial state
-            if (mAppsCustomizeTabHost != null) {
+            if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
                 mAppsCustomizeTabHost.reset();
             }
         }
@@ -2187,7 +2187,6 @@ private void cameraZoomOut(State toState, boolean animated, final boolean spring
 
         // Shrink workspaces away if going to AppsCustomize from workspace
         mWorkspace.changeState(Workspace.State.SMALL, animated);
-        //hideHotseat(animated);
 
         if (animated) {
             final ValueAnimator scaleAnim = ValueAnimator.ofFloat(0f, 1f).setDuration(duration);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1421,8 +1421,8 @@ public float getInterpolation(float input) {
      * ZInterpolator compounded with an ease-out.
      */
     static class ZoomOutInterpolator implements TimeInterpolator {
-        private final ZInterpolator zInterpolator = new ZInterpolator(0.2f);
-        private final DecelerateInterpolator decelerate = new DecelerateInterpolator(1.8f);
+        private final DecelerateInterpolator decelerate = new DecelerateInterpolator(0.75f);
+        private final ZInterpolator zInterpolator = new ZInterpolator(0.13f);
 
         public float getInterpolation(float input) {
             return decelerate.getInterpolation(zInterpolator.getInterpolation(input));

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1209,7 +1209,7 @@ protected void onNewIntent(Intent intent) {
             }
 
             // Reset AllApps to its initial state
-            if (mAppsCustomizeTabHost != null) {
+            if (!alreadyOnHome && mAppsCustomizeTabHost != null) {
                 mAppsCustomizeTabHost.reset();
             }
         }
@@ -2187,7 +2187,6 @@ private void cameraZoomOut(State toState, boolean animated, final boolean spring
 
         // Shrink workspaces away if going to AppsCustomize from workspace
         mWorkspace.changeState(Workspace.State.SMALL, animated);
-        //hideHotseat(animated);
 
         if (animated) {
             final ValueAnimator scaleAnim = ValueAnimator.ofFloat(0f, 1f).setDuration(duration);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1421,8 +1421,8 @@ public float getInterpolation(float input) {
      * ZInterpolator compounded with an ease-out.
      */
     static class ZoomOutInterpolator implements TimeInterpolator {
-        private final ZInterpolator zInterpolator = new ZInterpolator(0.2f);
-        private final DecelerateInterpolator decelerate = new DecelerateInterpolator(1.8f);
+        private final DecelerateInterpolator decelerate = new DecelerateInterpolator(0.75f);
+        private final ZInterpolator zInterpolator = new ZInterpolator(0.13f);
 
         public float getInterpolation(float input) {
             return decelerate.getInterpolation(zInterpolator.getInterpolation(input));

File: src/com/android/launcher2/LauncherApplication.java
Patch:
@@ -58,6 +58,7 @@ public void onCreate() {
         filter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE);
         filter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE);
         filter.addAction(Intent.ACTION_LOCALE_CHANGED);
+        filter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
         registerReceiver(mModel, filter);
         filter = new IntentFilter();
         filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1308,11 +1308,12 @@ public void startSearch(String initialQuery, boolean selectInitialQuery,
             appSearchData = new Bundle();
             appSearchData.putString(Search.SOURCE, "launcher-search");
         }
+        Rect sourceBounds = mSearchDropTargetBar.getSearchBarBounds();
 
         final SearchManager searchManager =
                 (SearchManager) getSystemService(Context.SEARCH_SERVICE);
         searchManager.startSearch(initialQuery, selectInitialQuery, getComponentName(),
-            appSearchData, globalSearch);
+            appSearchData, globalSearch, sourceBounds);
     }
 
     @Override

File: src/com/android/launcher2/LauncherProvider.java
Patch:
@@ -602,6 +602,9 @@ private long initializeMaxId(SQLiteDatabase db) {
             if (c != null && c.moveToNext()) {
                 id = c.getLong(maxIdIndex);
             }
+            if (c != null) {
+                c.close();
+            }
 
             if (id == -1) {
                 throw new RuntimeException("Error: could not query max id");

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -559,6 +559,7 @@ protected void onResume() {
         if (!mWorkspaceLoading) {
             mWorkspace.post(mBuildLayersRunnable);
         }
+        clearTypedText();
     }
 
     @Override
@@ -1302,7 +1303,6 @@ public void startSearch(String initialQuery, boolean selectInitialQuery,
         if (initialQuery == null) {
             // Use any text typed in the launcher as the initial query
             initialQuery = getTypedText();
-            clearTypedText();
         }
         if (appSearchData == null) {
             appSearchData = new Bundle();

File: src/com/android/launcher2/PagedViewCellLayout.java
Patch:
@@ -367,7 +367,7 @@ public void calculateCellCount(int width, int height, int maxCellCountX, int max
     }
 
     /**
-     * Estimates the width that the number of vSpan cells will take up.
+     * Estimates the width that the number of hSpan cells will take up.
      */
     public int estimateCellWidth(int hSpan) {
         // TODO: we need to take widthGap into effect

File: src/com/android/launcher2/PagedViewCellLayout.java
Patch:
@@ -367,7 +367,7 @@ public void calculateCellCount(int width, int height, int maxCellCountX, int max
     }
 
     /**
-     * Estimates the width that the number of vSpan cells will take up.
+     * Estimates the width that the number of hSpan cells will take up.
      */
     public int estimateCellWidth(int hSpan) {
         // TODO: we need to take widthGap into effect

File: src/com/android/launcher2/PagedViewCellLayout.java
Patch:
@@ -367,7 +367,7 @@ public void calculateCellCount(int width, int height, int maxCellCountX, int max
     }
 
     /**
-     * Estimates the width that the number of vSpan cells will take up.
+     * Estimates the width that the number of hSpan cells will take up.
      */
     public int estimateCellWidth(int hSpan) {
         // TODO: we need to take widthGap into effect

File: src/com/android/launcher2/Hotseat.java
Patch:
@@ -107,7 +107,7 @@ void resetLayout() {
             @Override
             public void onClick(android.view.View v) {
                 if (mLauncher != null) {
-                    mLauncher.showAllApps(true);
+                    mLauncher.onClickAllAppsButton(v);
                 }
             }
         });

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1679,7 +1679,7 @@ public void onClick(View v) {
             if (mState == State.APPS_CUSTOMIZE) {
                 showWorkspace(true);
             } else {
-                showAllApps(true);
+                onClickAllAppsButton(v);
             }
         }
     }
@@ -1722,6 +1722,8 @@ private void startVoiceSearch() {
      * @param v The view that was clicked.
      */
     public void onClickAllAppsButton(View v) {
+        // Provide the same haptic feedback that the system offers for virtual keys.
+        v.performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
         showAllApps(true);
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3030,13 +3030,15 @@ public void bindAppsRemoved(ArrayList<ApplicationInfo> apps, boolean permanent)
             mAppsCustomizeContent.removeApps(apps);
         }
         updateIconsAffectedByPackageManagerChanges();
+
+        // Notify the drag controller
+        mDragController.onAppsRemoved(apps, this);
     }
 
     /**
      * A number of packages were updated.
      */
     public void bindPackagesUpdated() {
-
         if (mAppsCustomizeContent != null) {
             mAppsCustomizeContent.onPackagesUpdated();
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3030,13 +3030,15 @@ public void bindAppsRemoved(ArrayList<ApplicationInfo> apps, boolean permanent)
             mAppsCustomizeContent.removeApps(apps);
         }
         updateIconsAffectedByPackageManagerChanges();
+
+        // Notify the drag controller
+        mDragController.onAppsRemoved(apps, this);
     }
 
     /**
      * A number of packages were updated.
      */
     public void bindPackagesUpdated() {
-
         if (mAppsCustomizeContent != null) {
             mAppsCustomizeContent.onPackagesUpdated();
         }

File: src/com/android/launcher2/DragScroller.java
Patch:
@@ -30,11 +30,11 @@ public interface DragScroller {
      *
      * @param direction The scroll direction
      */
-    void onEnterScrollArea(int x, int y, int direction);
+    boolean onEnterScrollArea(int x, int y, int direction);
 
     /**
      * The touch point has left the scroll area.
      * NOTE: This may not be called, if a drop occurs inside the scroll area.
      */
-    void onExitScrollArea();
+    boolean onExitScrollArea();
 }

File: src/com/android/launcher2/DragScroller.java
Patch:
@@ -30,11 +30,11 @@ public interface DragScroller {
      *
      * @param direction The scroll direction
      */
-    void onEnterScrollArea(int x, int y, int direction);
+    boolean onEnterScrollArea(int x, int y, int direction);
 
     /**
      * The touch point has left the scroll area.
      * NOTE: This may not be called, if a drop occurs inside the scroll area.
      */
-    void onExitScrollArea();
+    boolean onExitScrollArea();
 }

File: src/com/android/launcher2/DragScroller.java
Patch:
@@ -30,11 +30,11 @@ public interface DragScroller {
      *
      * @param direction The scroll direction
      */
-    void onEnterScrollArea(int x, int y, int direction);
+    boolean onEnterScrollArea(int x, int y, int direction);
 
     /**
      * The touch point has left the scroll area.
      * NOTE: This may not be called, if a drop occurs inside the scroll area.
      */
-    void onExitScrollArea();
+    boolean onExitScrollArea();
 }

File: src/com/android/launcher2/DragController.java
Patch:
@@ -361,6 +361,7 @@ public void cancelDrag() {
             if (mLastDropTarget != null) {
                 mLastDropTarget.onDragExit(mDragObject);
             }
+            mDragObject.cancelled = true;
             mDragObject.dragComplete = true;
             mDragObject.dragSource.onDropCompleted(null, mDragObject, false);
         }

File: src/com/android/launcher2/DropTarget.java
Patch:
@@ -52,6 +52,9 @@ class DragObject {
         /** Post drag animation runnable */
         public Runnable postAnimationRunnable = null;
 
+        /** Indicates that the drag operation was cancelled */
+        public boolean cancelled = false;
+
         public DragObject() {
         }
     }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3051,6 +3051,9 @@ public void onDropCompleted(View target, DragObject d, boolean success) {
             }
             cellLayout.onDropChild(mDragInfo.cell);
         }
+        if (d.cancelled &&  mDragInfo.cell != null) {
+                mDragInfo.cell.setVisibility(VISIBLE);
+        }
         mDragOutline = null;
         mDragInfo = null;
     }

File: src/com/android/launcher2/DragController.java
Patch:
@@ -361,6 +361,7 @@ public void cancelDrag() {
             if (mLastDropTarget != null) {
                 mLastDropTarget.onDragExit(mDragObject);
             }
+            mDragObject.cancelled = true;
             mDragObject.dragComplete = true;
             mDragObject.dragSource.onDropCompleted(null, mDragObject, false);
         }

File: src/com/android/launcher2/DropTarget.java
Patch:
@@ -52,6 +52,9 @@ class DragObject {
         /** Post drag animation runnable */
         public Runnable postAnimationRunnable = null;
 
+        /** Indicates that the drag operation was cancelled */
+        public boolean cancelled = false;
+
         public DragObject() {
         }
     }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -3051,6 +3051,9 @@ public void onDropCompleted(View target, DragObject d, boolean success) {
             }
             cellLayout.onDropChild(mDragInfo.cell);
         }
+        if (d.cancelled &&  mDragInfo.cell != null) {
+                mDragInfo.cell.setVisibility(VISIBLE);
+        }
         mDragOutline = null;
         mDragInfo = null;
     }

File: src/com/android/launcher2/FolderInfo.java
Patch:
@@ -56,6 +56,7 @@ public void add(ShortcutInfo item) {
         for (int i = 0; i < listeners.size(); i++) {
             listeners.get(i).onAdd(item);
         }
+        itemsChanged();
     }
 
     /**
@@ -68,6 +69,7 @@ public void remove(ShortcutInfo item) {
         for (int i = 0; i < listeners.size(); i++) {
             listeners.get(i).onRemove(item);
         }
+        itemsChanged();
     }
 
     public void setTitle(CharSequence title) {

File: src/com/android/launcher2/Hotseat.java
Patch:
@@ -58,7 +58,7 @@ public Hotseat(Context context, AttributeSet attrs, int defStyle) {
 
     public void setup(Launcher launcher) {
         mLauncher = launcher;
-        setOnKeyListener(new HotseatBubbleTextViewKeyEventListener());
+        setOnKeyListener(new HotseatIconKeyEventListener());
     }
 
     CellLayout getLayout() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -469,7 +469,7 @@ void addInScreen(View child, long container, int screen, int x, int y, int spanX
             }
 
             layout = (CellLayout) getChildAt(screen);
-            child.setOnKeyListener(new BubbleTextViewKeyEventListener());
+            child.setOnKeyListener(new IconKeyEventListener());
         }
 
         CellLayout.LayoutParams lp = (CellLayout.LayoutParams) child.getLayoutParams();

File: src/com/android/launcher2/FolderInfo.java
Patch:
@@ -56,6 +56,7 @@ public void add(ShortcutInfo item) {
         for (int i = 0; i < listeners.size(); i++) {
             listeners.get(i).onAdd(item);
         }
+        itemsChanged();
     }
 
     /**
@@ -68,6 +69,7 @@ public void remove(ShortcutInfo item) {
         for (int i = 0; i < listeners.size(); i++) {
             listeners.get(i).onRemove(item);
         }
+        itemsChanged();
     }
 
     public void setTitle(CharSequence title) {

File: src/com/android/launcher2/Hotseat.java
Patch:
@@ -58,7 +58,7 @@ public Hotseat(Context context, AttributeSet attrs, int defStyle) {
 
     public void setup(Launcher launcher) {
         mLauncher = launcher;
-        setOnKeyListener(new HotseatBubbleTextViewKeyEventListener());
+        setOnKeyListener(new HotseatIconKeyEventListener());
     }
 
     CellLayout getLayout() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -469,7 +469,7 @@ void addInScreen(View child, long container, int screen, int x, int y, int spanX
             }
 
             layout = (CellLayout) getChildAt(screen);
-            child.setOnKeyListener(new BubbleTextViewKeyEventListener());
+            child.setOnKeyListener(new IconKeyEventListener());
         }
 
         CellLayout.LayoutParams lp = (CellLayout.LayoutParams) child.getLayoutParams();

File: src/com/android/launcher2/Hotseat.java
Patch:
@@ -100,7 +100,7 @@ void resetLayout() {
         BubbleTextView allAppsButton = (BubbleTextView)
                 inflater.inflate(R.layout.application, mContent, false);
         allAppsButton.setCompoundDrawablesWithIntrinsicBounds(null,
-                context.getResources().getDrawable(R.drawable.ic_allapps), null, null);
+                context.getResources().getDrawable(R.drawable.all_apps_button_icon), null, null);
         // allAppsButton.setText(context.getString(R.string.all_apps_button_label));
         allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));
         allAppsButton.setOnClickListener(new View.OnClickListener() {

File: src/com/android/launcher2/Hotseat.java
Patch:
@@ -100,7 +100,7 @@ void resetLayout() {
         BubbleTextView allAppsButton = (BubbleTextView)
                 inflater.inflate(R.layout.application, mContent, false);
         allAppsButton.setCompoundDrawablesWithIntrinsicBounds(null,
-                context.getResources().getDrawable(R.drawable.ic_allapps), null, null);
+                context.getResources().getDrawable(R.drawable.all_apps_button_icon), null, null);
         // allAppsButton.setText(context.getString(R.string.all_apps_button_label));
         allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));
         allAppsButton.setOnClickListener(new View.OnClickListener() {

File: src/com/android/launcher2/Hotseat.java
Patch:
@@ -100,7 +100,7 @@ void resetLayout() {
         BubbleTextView allAppsButton = (BubbleTextView)
                 inflater.inflate(R.layout.application, mContent, false);
         allAppsButton.setCompoundDrawablesWithIntrinsicBounds(null,
-                context.getResources().getDrawable(R.drawable.ic_allapps), null, null);
+                context.getResources().getDrawable(R.drawable.all_apps_button_icon), null, null);
         // allAppsButton.setText(context.getString(R.string.all_apps_button_label));
         allAppsButton.setContentDescription(context.getString(R.string.all_apps_button_label));
         allAppsButton.setOnClickListener(new View.OnClickListener() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -111,7 +111,7 @@ public class Workspace extends SmoothPagedView
 
     private final WallpaperManager mWallpaperManager;
     private IBinder mWindowToken;
-    private static final float WALLPAPER_SCREENS_SPAN = 1.5f;
+    private static final float WALLPAPER_SCREENS_SPAN = 2f;
 
     private int mDefaultPage;
 
@@ -730,7 +730,7 @@ protected void setWallpaperDimension() {
             mWallpaperWidth = (int) (maxDim * wallpaperTravelToScreenWidthRatio(maxDim, minDim));
             mWallpaperHeight = (int)(maxDim * wallpaperTravelToScreenHeightRatio(maxDim, minDim));
         } else {
-            mWallpaperWidth = (int) (minDim * WALLPAPER_SCREENS_SPAN);
+            mWallpaperWidth = Math.max((int) (minDim * WALLPAPER_SCREENS_SPAN), maxDim);
             mWallpaperHeight = maxDim;
         }
         new Thread("setWallpaperDimension") {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2937,6 +2937,7 @@ private void updateIconsAffectedByPackageManagerChanges() {
     @Override
     public void bindSearchablesChanged() {
         updateGlobalSearchIcon();
+        updateVoiceSearchIcon();
     }
 
     /**

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2937,6 +2937,7 @@ private void updateIconsAffectedByPackageManagerChanges() {
     @Override
     public void bindSearchablesChanged() {
         updateGlobalSearchIcon();
+        updateVoiceSearchIcon();
     }
 
     /**

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2937,6 +2937,7 @@ private void updateIconsAffectedByPackageManagerChanges() {
     @Override
     public void bindSearchablesChanged() {
         updateGlobalSearchIcon();
+        updateVoiceSearchIcon();
     }
 
     /**

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -874,9 +874,7 @@ Padding getPaddingForWidget(ComponentName component) {
             return p;
         }
 
-        // TODO: This should be ICE_CREAM_SANDWICH, but since the unbundled apps
-        // may not have updated their targetSdkVersion yet, we've bumped it down for now.
-        if (appInfo.targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB_MR2) {
+        if (appInfo.targetSdkVersion >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
             Resources r = getResources();
             p.left = r.getDimensionPixelSize(R.dimen.app_widget_padding_left);
             p.right = r.getDimensionPixelSize(R.dimen.app_widget_padding_right);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -874,9 +874,7 @@ Padding getPaddingForWidget(ComponentName component) {
             return p;
         }
 
-        // TODO: This should be ICE_CREAM_SANDWICH, but since the unbundled apps
-        // may not have updated their targetSdkVersion yet, we've bumped it down for now.
-        if (appInfo.targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB_MR2) {
+        if (appInfo.targetSdkVersion >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
             Resources r = getResources();
             p.left = r.getDimensionPixelSize(R.dimen.app_widget_padding_left);
             p.right = r.getDimensionPixelSize(R.dimen.app_widget_padding_right);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -874,9 +874,7 @@ Padding getPaddingForWidget(ComponentName component) {
             return p;
         }
 
-        // TODO: This should be ICE_CREAM_SANDWICH, but since the unbundled apps
-        // may not have updated their targetSdkVersion yet, we've bumped it down for now.
-        if (appInfo.targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB_MR2) {
+        if (appInfo.targetSdkVersion >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
             Resources r = getResources();
             p.left = r.getDimensionPixelSize(R.dimen.app_widget_padding_left);
             p.right = r.getDimensionPixelSize(R.dimen.app_widget_padding_right);

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -524,7 +524,7 @@ private void beginDraggingWidget(View v) {
         }
 
         // Start the drag
-        mLauncher.lockScreenOrientation();
+        mLauncher.lockScreenOrientationOnLargeUI();
         mLauncher.getWorkspace().onDragStartedWithItemSpans(createItemInfo.spanX,
                 createItemInfo.spanY, b);
         mDragController.startDrag(image, b, this, createItemInfo,
@@ -553,7 +553,7 @@ private void endDragging(View target, boolean success) {
             // drop in Workspace
             mLauncher.exitSpringLoadedDragMode();
         }
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientationOnLargeUI();
 
     }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -315,13 +315,13 @@ public Workspace(Context context, AttributeSet attrs, int defStyle) {
     public void onDragStart(DragSource source, Object info, int dragAction) {
         mIsDragOccuring = true;
         updateChildrenLayersEnabled();
-        mLauncher.lockScreenOrientation();
+        mLauncher.lockScreenOrientationOnLargeUI();
     }
 
     public void onDragEnd() {
         mIsDragOccuring = false;
         updateChildrenLayersEnabled();
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientationOnLargeUI();
     }
 
     /**

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -524,7 +524,7 @@ private void beginDraggingWidget(View v) {
         }
 
         // Start the drag
-        mLauncher.lockScreenOrientation();
+        mLauncher.lockScreenOrientationOnLargeUI();
         mLauncher.getWorkspace().onDragStartedWithItemSpans(createItemInfo.spanX,
                 createItemInfo.spanY, b);
         mDragController.startDrag(image, b, this, createItemInfo,
@@ -553,7 +553,7 @@ private void endDragging(View target, boolean success) {
             // drop in Workspace
             mLauncher.exitSpringLoadedDragMode();
         }
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientationOnLargeUI();
 
     }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -315,13 +315,13 @@ public Workspace(Context context, AttributeSet attrs, int defStyle) {
     public void onDragStart(DragSource source, Object info, int dragAction) {
         mIsDragOccuring = true;
         updateChildrenLayersEnabled();
-        mLauncher.lockScreenOrientation();
+        mLauncher.lockScreenOrientationOnLargeUI();
     }
 
     public void onDragEnd() {
         mIsDragOccuring = false;
         updateChildrenLayersEnabled();
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientationOnLargeUI();
     }
 
     /**

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -524,7 +524,7 @@ private void beginDraggingWidget(View v) {
         }
 
         // Start the drag
-        mLauncher.lockScreenOrientation();
+        mLauncher.lockScreenOrientationOnLargeUI();
         mLauncher.getWorkspace().onDragStartedWithItemSpans(createItemInfo.spanX,
                 createItemInfo.spanY, b);
         mDragController.startDrag(image, b, this, createItemInfo,
@@ -553,7 +553,7 @@ private void endDragging(View target, boolean success) {
             // drop in Workspace
             mLauncher.exitSpringLoadedDragMode();
         }
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientationOnLargeUI();
 
     }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -315,13 +315,13 @@ public Workspace(Context context, AttributeSet attrs, int defStyle) {
     public void onDragStart(DragSource source, Object info, int dragAction) {
         mIsDragOccuring = true;
         updateChildrenLayersEnabled();
-        mLauncher.lockScreenOrientation();
+        mLauncher.lockScreenOrientationOnLargeUI();
     }
 
     public void onDragEnd() {
         mIsDragOccuring = false;
         updateChildrenLayersEnabled();
-        mLauncher.unlockScreenOrientation();
+        mLauncher.unlockScreenOrientationOnLargeUI();
     }
 
     /**

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1022,8 +1022,7 @@ private void onSyncWidgetPageItems(AsyncTaskPageData data) {
                 // Fill in the widget information
                 AppWidgetProviderInfo info = (AppWidgetProviderInfo) rawInfo;
                 createItemInfo = new PendingAddWidgetInfo(info, null, null);
-                int[] cellSpans = CellLayout.rectToCell(getResources(),
-                        info.minWidth, info.minHeight, null);
+                int[] cellSpans = mLauncher.getSpanForWidget(info, null);
                 FastBitmapDrawable preview = new FastBitmapDrawable(data.generatedImages.get(i));
                 widget.applyFromAppWidgetProviderInfo(info, preview, -1, cellSpans, 
                         mHolographicOutlineHelper);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2304,6 +2304,8 @@ void enterSpringLoadedDragMode() {
     }
 
     void exitSpringLoadedDragModeDelayed(final boolean successfulDrop, boolean extendedDelay) {
+        if (mState != State.APPS_CUSTOMIZE_SPRING_LOADED) return;
+
         mHandler.postDelayed(new Runnable() {
             @Override
             public void run() {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2304,6 +2304,8 @@ void enterSpringLoadedDragMode() {
     }
 
     void exitSpringLoadedDragModeDelayed(final boolean successfulDrop, boolean extendedDelay) {
+        if (mState != State.APPS_CUSTOMIZE_SPRING_LOADED) return;
+
         mHandler.postDelayed(new Runnable() {
             @Override
             public void run() {

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -138,10 +138,10 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 // Set the width and show the tab bar (if we have a loading graphic, we can switch
                 // it off here)
                 mTabs.getLayoutParams().width = contentWidth;
-                mTabsContainer.setAlpha(1f);
                 post(new Runnable() {
                     public void run() {
                         mTabs.requestLayout();
+                        mTabsContainer.setAlpha(1f);
                     }
                 });
             }

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -138,10 +138,10 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                 // Set the width and show the tab bar (if we have a loading graphic, we can switch
                 // it off here)
                 mTabs.getLayoutParams().width = contentWidth;
-                mTabsContainer.setAlpha(1f);
                 post(new Runnable() {
                     public void run() {
                         mTabs.requestLayout();
+                        mTabsContainer.setAlpha(1f);
                     }
                 });
             }

File: src/com/android/launcher2/AllAppsList.java
Patch:
@@ -91,7 +91,7 @@ public void addPackage(Context context, String packageName) {
 
         if (matches.size() > 0) {
             for (ResolveInfo info : matches) {
-                add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null, "15"));
+                add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null));
             }
         }
     }
@@ -142,7 +142,7 @@ public void updatePackage(Context context, String packageName) {
                         info.activityInfo.applicationInfo.packageName,
                         info.activityInfo.name);
                 if (applicationInfo == null) {
-                    add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null, "16"));
+                    add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null));
                 } else {
                     mIconCache.remove(applicationInfo.componentName);
                     mIconCache.getTitleAndIcon(applicationInfo, info, null);

File: src/com/android/launcher2/FolderInfo.java
Patch:
@@ -42,8 +42,7 @@ class FolderInfo extends ItemInfo {
 
     ArrayList<FolderListener> listeners = new ArrayList<FolderListener>();
 
-    FolderInfo(String whereCreated) {
-        super(whereCreated);
+    FolderInfo() {
         itemType = LauncherSettings.Favorites.ITEM_TYPE_FOLDER;
     }
 

File: src/com/android/launcher2/InstallWidgetReceiver.java
Patch:
@@ -187,7 +187,7 @@ public void onClick(DialogInterface dialog, int which) {
             final AppWidgetProviderInfo widgetInfo = mActivities.get(which).widgetInfo;
 
             final PendingAddWidgetInfo createInfo = new PendingAddWidgetInfo(widgetInfo, mMimeType,
-                    mClipData, "4");
+                    mClipData);
             mLauncher.addAppWidgetFromDrop(createInfo, LauncherSettings.Favorites.CONTAINER_DESKTOP,
                     mTargetLayoutScreen, null, mTargetLayoutPos);
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -177,7 +177,7 @@ private enum State { WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOADED };
     private AppWidgetManager mAppWidgetManager;
     private LauncherAppWidgetHost mAppWidgetHost;
 
-    private ItemInfo mPendingAddInfo = new ItemInfo("1");
+    private ItemInfo mPendingAddInfo = new ItemInfo();
     private int[] mTmpAddItemCellCoordinates = new int[2];
 
     private FolderInfo mFolderInfo;
@@ -946,7 +946,7 @@ public void run() {
         }
 
         // Build Launcher-specific widget info and save to database
-        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId, "2");
+        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId);
         launcherInfo.spanX = spanXY[0];
         launcherInfo.spanY = spanXY[1];
 
@@ -1490,7 +1490,7 @@ void processWallpaper(Intent intent) {
 
     FolderIcon addFolder(CellLayout layout, long container, final int screen, int cellX,
             int cellY) {
-        final FolderInfo folderInfo = new FolderInfo("3");
+        final FolderInfo folderInfo = new FolderInfo();
         folderInfo.title = getText(R.string.folder_name);
 
         // Update the model

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2309,7 +2309,7 @@ public boolean onDragEvent(DragEvent event) {
                         // that widget
                         final AppWidgetProviderInfo widgetInfo = widgets.get(0).widgetInfo;
                         final PendingAddWidgetInfo createInfo =
-                                new PendingAddWidgetInfo(widgetInfo, mimeType, data, "11");
+                                new PendingAddWidgetInfo(widgetInfo, mimeType, data);
                         mLauncher.addAppWidgetFromDrop(createInfo,
                             LauncherSettings.Favorites.CONTAINER_DESKTOP, mCurrentPage, null, pos);
                     } else {
@@ -2825,7 +2825,7 @@ public void run() {
             case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
                 if (info.container == NO_ID && info instanceof ApplicationInfo) {
                     // Came from all apps -- make a copy
-                    info = new ShortcutInfo((ApplicationInfo) info, "12");
+                    info = new ShortcutInfo((ApplicationInfo) info);
                 }
                 view = mLauncher.createShortcut(R.layout.application, cellLayout,
                         (ShortcutInfo) info);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2144,7 +2144,6 @@ public void onAnimationEnd(Animator animation) {
                         // Hide the workspace scrollbar
                         mWorkspace.hideScrollingIndicator(true);
                         mWorkspace.hideDockDivider(true);
-                        mWorkspace.showAllAppsAnimationComplete();
                     }
                     updateWallpaperVisibility(false);
                 }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2144,7 +2144,6 @@ public void onAnimationEnd(Animator animation) {
                         // Hide the workspace scrollbar
                         mWorkspace.hideScrollingIndicator(true);
                         mWorkspace.hideDockDivider(true);
-                        mWorkspace.showAllAppsAnimationComplete();
                     }
                     updateWallpaperVisibility(false);
                 }

File: src/com/android/launcher2/AllAppsList.java
Patch:
@@ -91,7 +91,7 @@ public void addPackage(Context context, String packageName) {
 
         if (matches.size() > 0) {
             for (ResolveInfo info : matches) {
-                add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null));
+                add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null, "15"));
             }
         }
     }
@@ -142,7 +142,7 @@ public void updatePackage(Context context, String packageName) {
                         info.activityInfo.applicationInfo.packageName,
                         info.activityInfo.name);
                 if (applicationInfo == null) {
-                    add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null));
+                    add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null, "16"));
                 } else {
                     mIconCache.remove(applicationInfo.componentName);
                     mIconCache.getTitleAndIcon(applicationInfo, info, null);

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1016,7 +1016,7 @@ private void onSyncWidgetPageItems(AsyncTaskPageData data) {
             if (rawInfo instanceof AppWidgetProviderInfo) {
                 // Fill in the widget information
                 AppWidgetProviderInfo info = (AppWidgetProviderInfo) rawInfo;
-                createItemInfo = new PendingAddWidgetInfo(info, null, null);
+                createItemInfo = new PendingAddWidgetInfo(info, null, null, "13");
                 int[] cellSpans = CellLayout.rectToCell(getResources(),
                         info.minWidth, info.minHeight, null);
                 FastBitmapDrawable preview = new FastBitmapDrawable(data.generatedImages.get(i));
@@ -1026,7 +1026,7 @@ private void onSyncWidgetPageItems(AsyncTaskPageData data) {
             } else if (rawInfo instanceof ResolveInfo) {
                 // Fill in the shortcuts information
                 ResolveInfo info = (ResolveInfo) rawInfo;
-                createItemInfo = new PendingAddItemInfo();
+                createItemInfo = new PendingAddItemInfo("14");
                 createItemInfo.itemType = LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
                 createItemInfo.componentName = new ComponentName(info.activityInfo.packageName,
                         info.activityInfo.name);

File: src/com/android/launcher2/FolderInfo.java
Patch:
@@ -42,7 +42,8 @@ class FolderInfo extends ItemInfo {
 
     ArrayList<FolderListener> listeners = new ArrayList<FolderListener>();
 
-    FolderInfo() {
+    FolderInfo(String whereCreated) {
+        super(whereCreated);
         itemType = LauncherSettings.Favorites.ITEM_TYPE_FOLDER;
     }
 

File: src/com/android/launcher2/InstallWidgetReceiver.java
Patch:
@@ -187,7 +187,7 @@ public void onClick(DialogInterface dialog, int which) {
             final AppWidgetProviderInfo widgetInfo = mActivities.get(which).widgetInfo;
 
             final PendingAddWidgetInfo createInfo = new PendingAddWidgetInfo(widgetInfo, mMimeType,
-                    mClipData);
+                    mClipData, "4");
             mLauncher.addAppWidgetFromDrop(createInfo, LauncherSettings.Favorites.CONTAINER_DESKTOP,
                     mTargetLayoutScreen, null, mTargetLayoutPos);
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -175,7 +175,7 @@ private enum State { WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOADED };
     private AppWidgetManager mAppWidgetManager;
     private LauncherAppWidgetHost mAppWidgetHost;
 
-    private ItemInfo mPendingAddInfo = new ItemInfo();
+    private ItemInfo mPendingAddInfo = new ItemInfo("1");
     private int[] mTmpAddItemCellCoordinates = new int[2];
 
     private FolderInfo mFolderInfo;
@@ -902,7 +902,7 @@ public void run() {
         }
 
         // Build Launcher-specific widget info and save to database
-        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId);
+        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId, "2");
         launcherInfo.spanX = spanXY[0];
         launcherInfo.spanY = spanXY[1];
 
@@ -1446,7 +1446,7 @@ void processWallpaper(Intent intent) {
 
     FolderIcon addFolder(CellLayout layout, long container, final int screen, int cellX,
             int cellY) {
-        final FolderInfo folderInfo = new FolderInfo();
+        final FolderInfo folderInfo = new FolderInfo("3");
         folderInfo.title = getText(R.string.folder_name);
 
         // Update the model

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2575,7 +2575,7 @@ public boolean onDragEvent(DragEvent event) {
                         // that widget
                         final AppWidgetProviderInfo widgetInfo = widgets.get(0).widgetInfo;
                         final PendingAddWidgetInfo createInfo =
-                                new PendingAddWidgetInfo(widgetInfo, mimeType, data);
+                                new PendingAddWidgetInfo(widgetInfo, mimeType, data, "11");
                         mLauncher.addAppWidgetFromDrop(createInfo,
                             LauncherSettings.Favorites.CONTAINER_DESKTOP, mCurrentPage, null, pos);
                     } else {
@@ -3091,7 +3091,7 @@ public void run() {
             case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
                 if (info.container == NO_ID && info instanceof ApplicationInfo) {
                     // Came from all apps -- make a copy
-                    info = new ShortcutInfo((ApplicationInfo) info);
+                    info = new ShortcutInfo((ApplicationInfo) info, "12");
                 }
                 view = mLauncher.createShortcut(R.layout.application, cellLayout,
                         (ShortcutInfo) info);

File: src/com/android/launcher2/AllAppsList.java
Patch:
@@ -91,7 +91,7 @@ public void addPackage(Context context, String packageName) {
 
         if (matches.size() > 0) {
             for (ResolveInfo info : matches) {
-                add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null));
+                add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null, "15"));
             }
         }
     }
@@ -142,7 +142,7 @@ public void updatePackage(Context context, String packageName) {
                         info.activityInfo.applicationInfo.packageName,
                         info.activityInfo.name);
                 if (applicationInfo == null) {
-                    add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null));
+                    add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null, "16"));
                 } else {
                     mIconCache.remove(applicationInfo.componentName);
                     mIconCache.getTitleAndIcon(applicationInfo, info, null);

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -1016,7 +1016,7 @@ private void onSyncWidgetPageItems(AsyncTaskPageData data) {
             if (rawInfo instanceof AppWidgetProviderInfo) {
                 // Fill in the widget information
                 AppWidgetProviderInfo info = (AppWidgetProviderInfo) rawInfo;
-                createItemInfo = new PendingAddWidgetInfo(info, null, null);
+                createItemInfo = new PendingAddWidgetInfo(info, null, null, "13");
                 int[] cellSpans = CellLayout.rectToCell(getResources(),
                         info.minWidth, info.minHeight, null);
                 FastBitmapDrawable preview = new FastBitmapDrawable(data.generatedImages.get(i));
@@ -1026,7 +1026,7 @@ private void onSyncWidgetPageItems(AsyncTaskPageData data) {
             } else if (rawInfo instanceof ResolveInfo) {
                 // Fill in the shortcuts information
                 ResolveInfo info = (ResolveInfo) rawInfo;
-                createItemInfo = new PendingAddItemInfo();
+                createItemInfo = new PendingAddItemInfo("14");
                 createItemInfo.itemType = LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT;
                 createItemInfo.componentName = new ComponentName(info.activityInfo.packageName,
                         info.activityInfo.name);

File: src/com/android/launcher2/FolderInfo.java
Patch:
@@ -42,7 +42,8 @@ class FolderInfo extends ItemInfo {
 
     ArrayList<FolderListener> listeners = new ArrayList<FolderListener>();
 
-    FolderInfo() {
+    FolderInfo(String whereCreated) {
+        super(whereCreated);
         itemType = LauncherSettings.Favorites.ITEM_TYPE_FOLDER;
     }
 

File: src/com/android/launcher2/InstallWidgetReceiver.java
Patch:
@@ -187,7 +187,7 @@ public void onClick(DialogInterface dialog, int which) {
             final AppWidgetProviderInfo widgetInfo = mActivities.get(which).widgetInfo;
 
             final PendingAddWidgetInfo createInfo = new PendingAddWidgetInfo(widgetInfo, mMimeType,
-                    mClipData);
+                    mClipData, "4");
             mLauncher.addAppWidgetFromDrop(createInfo, LauncherSettings.Favorites.CONTAINER_DESKTOP,
                     mTargetLayoutScreen, null, mTargetLayoutPos);
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -176,7 +176,7 @@ private enum State { WORKSPACE, APPS_CUSTOMIZE, APPS_CUSTOMIZE_SPRING_LOADED };
     private AppWidgetManager mAppWidgetManager;
     private LauncherAppWidgetHost mAppWidgetHost;
 
-    private ItemInfo mPendingAddInfo = new ItemInfo();
+    private ItemInfo mPendingAddInfo = new ItemInfo("1");
     private int[] mTmpAddItemCellCoordinates = new int[2];
 
     private FolderInfo mFolderInfo;
@@ -930,7 +930,7 @@ public void run() {
         }
 
         // Build Launcher-specific widget info and save to database
-        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId);
+        LauncherAppWidgetInfo launcherInfo = new LauncherAppWidgetInfo(appWidgetId, "2");
         launcherInfo.spanX = spanXY[0];
         launcherInfo.spanY = spanXY[1];
 
@@ -1474,7 +1474,7 @@ void processWallpaper(Intent intent) {
 
     FolderIcon addFolder(CellLayout layout, long container, final int screen, int cellX,
             int cellY) {
-        final FolderInfo folderInfo = new FolderInfo();
+        final FolderInfo folderInfo = new FolderInfo("3");
         folderInfo.title = getText(R.string.folder_name);
 
         // Update the model

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2575,7 +2575,7 @@ public boolean onDragEvent(DragEvent event) {
                         // that widget
                         final AppWidgetProviderInfo widgetInfo = widgets.get(0).widgetInfo;
                         final PendingAddWidgetInfo createInfo =
-                                new PendingAddWidgetInfo(widgetInfo, mimeType, data);
+                                new PendingAddWidgetInfo(widgetInfo, mimeType, data, "11");
                         mLauncher.addAppWidgetFromDrop(createInfo,
                             LauncherSettings.Favorites.CONTAINER_DESKTOP, mCurrentPage, null, pos);
                     } else {
@@ -3091,7 +3091,7 @@ public void run() {
             case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
                 if (info.container == NO_ID && info instanceof ApplicationInfo) {
                     // Came from all apps -- make a copy
-                    info = new ShortcutInfo((ApplicationInfo) info);
+                    info = new ShortcutInfo((ApplicationInfo) info, "12");
                 }
                 view = mLauncher.createShortcut(R.layout.application, cellLayout,
                         (ShortcutInfo) info);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1061,6 +1061,8 @@ public LauncherModel getModel() {
     void closeSystemDialogs() {
         getWindow().closeAllPanels();
 
+        /**
+         * We should remove this code when we remove all the dialog code.
         try {
             dismissDialog(DIALOG_CREATE_SHORTCUT);
             // Unlock the workspace if the dialog was showing
@@ -1074,6 +1076,7 @@ void closeSystemDialogs() {
         } catch (Exception e) {
             // An exception is thrown if the dialog is not visible, which is fine
         }
+         */
 
         // Whatever we were doing is hereby canceled.
         mWaitingForResult = false;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1060,6 +1060,8 @@ public LauncherModel getModel() {
     void closeSystemDialogs() {
         getWindow().closeAllPanels();
 
+        /**
+         * We should remove this code when we remove all the dialog code.
         try {
             dismissDialog(DIALOG_CREATE_SHORTCUT);
             // Unlock the workspace if the dialog was showing
@@ -1073,6 +1075,7 @@ void closeSystemDialogs() {
         } catch (Exception e) {
             // An exception is thrown if the dialog is not visible, which is fine
         }
+         */
 
         // Whatever we were doing is hereby canceled.
         mWaitingForResult = false;

File: src/com/android/launcher2/Folder.java
Patch:
@@ -243,14 +243,14 @@ public void dismissEditingName() {
 
     public void doneEditingFolderName(boolean commit) {
         mFolderName.setHint(sHintText);
+        // Convert to a string here to ensure that no other state associated with the text field
+        // gets saved.
+        mInfo.setTitle(mFolderName.getText().toString());
         LauncherModel.updateItemInDatabase(mLauncher, mInfo);
         mFolderName.setCursorVisible(false);
         mFolderName.clearFocus();
         Selection.setSelection((Spannable) mFolderName.getText(), 0, 0);
         mIsEditingName = false;
-        // Convert to a string here to ensure that no other state associated with the text field
-        // gets saved.
-        mInfo.setTitle(mFolderName.getText().toString());
     }
 
     public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {

File: src/com/android/launcher2/Folder.java
Patch:
@@ -243,14 +243,14 @@ public void dismissEditingName() {
 
     public void doneEditingFolderName(boolean commit) {
         mFolderName.setHint(sHintText);
+        // Convert to a string here to ensure that no other state associated with the text field
+        // gets saved.
+        mInfo.setTitle(mFolderName.getText().toString());
         LauncherModel.updateItemInDatabase(mLauncher, mInfo);
         mFolderName.setCursorVisible(false);
         mFolderName.clearFocus();
         Selection.setSelection((Spannable) mFolderName.getText(), 0, 0);
         mIsEditingName = false;
-        // Convert to a string here to ensure that no other state associated with the text field
-        // gets saved.
-        mInfo.setTitle(mFolderName.getText().toString());
     }
 
     public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -516,8 +516,8 @@ private void animateFirstItem(final Drawable d, int duration) {
         final PreviewItemDrawingParams finalParams = computePreviewItemDrawingParams(0, null);
 
         final float scale0 = 1.0f;
-        final float transX0 = 0;
-        final float transY0 = 0;
+        final float transX0 = (mAvailableSpaceInPreview - d.getIntrinsicWidth()) / 2;
+        final float transY0 = (mAvailableSpaceInPreview - d.getIntrinsicHeight()) / 2;
         mAnimParams.drawable = d;
 
         ValueAnimator va = ValueAnimator.ofFloat(0f, 1.0f);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1666,7 +1666,8 @@ private void growAndFadeOutFolderIcon(FolderIcon fi) {
         FolderInfo info = (FolderInfo) fi.getTag();
         if (info.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
             CellLayout cl = (CellLayout) fi.getParent().getParent();
-            cl.setFolderLeaveBehindCell(info.cellX, info.cellY);
+            CellLayout.LayoutParams lp = (CellLayout.LayoutParams) fi.getLayoutParams();
+            cl.setFolderLeaveBehindCell(lp.cellX, lp.cellY);
         }
 
         ObjectAnimator oa = ObjectAnimator.ofPropertyValuesHolder(fi, alpha, scaleX, scaleY);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1666,7 +1666,8 @@ private void growAndFadeOutFolderIcon(FolderIcon fi) {
         FolderInfo info = (FolderInfo) fi.getTag();
         if (info.container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
             CellLayout cl = (CellLayout) fi.getParent().getParent();
-            cl.setFolderLeaveBehindCell(info.cellX, info.cellY);
+            CellLayout.LayoutParams lp = (CellLayout.LayoutParams) fi.getLayoutParams();
+            cl.setFolderLeaveBehindCell(lp.cellX, lp.cellY);
         }
 
         ObjectAnimator oa = ObjectAnimator.ofPropertyValuesHolder(fi, alpha, scaleX, scaleY);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -483,8 +483,7 @@ protected void onActivityResult(final int requestCode, int resultCode, final Int
 
         // For example, the user would PICK_SHORTCUT for "Music playlist", and we
         // launch over to the Music app to actually CREATE_SHORTCUT.
-        if (resultCode == RESULT_OK && mPendingAddInfo.container != ItemInfo.NO_ID  &&
-                mPendingAddInfo.screen > -1) {
+        if (resultCode == RESULT_OK && mPendingAddInfo.container != ItemInfo.NO_ID) {
             final PendingAddArguments args = new PendingAddArguments();
             args.requestCode = requestCode;
             args.intent = data;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2819,8 +2819,7 @@ public void onDragOver(DragObject d) {
                 }
             }
             if (layout == null) {
-                layout = findMatchingPageForDragOver(d.dragView, mDragViewVisualCenter[0],
-                    mDragViewVisualCenter[1], true);
+                layout = findMatchingPageForDragOver(d.dragView, d.x, d.y, true);
             }
             if (layout != mDragTargetLayout) {
                 // Cancel all intermediate folder states

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -478,8 +478,7 @@ protected void onActivityResult(final int requestCode, int resultCode, final Int
 
         // For example, the user would PICK_SHORTCUT for "Music playlist", and we
         // launch over to the Music app to actually CREATE_SHORTCUT.
-        if (resultCode == RESULT_OK && mPendingAddInfo.container != ItemInfo.NO_ID  &&
-                mPendingAddInfo.screen > -1) {
+        if (resultCode == RESULT_OK && mPendingAddInfo.container != ItemInfo.NO_ID) {
             final PendingAddArguments args = new PendingAddArguments();
             args.requestCode = requestCode;
             args.intent = data;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2809,8 +2809,7 @@ public void onDragOver(DragObject d) {
                 }
             }
             if (layout == null) {
-                layout = findMatchingPageForDragOver(d.dragView, mDragViewVisualCenter[0],
-                    mDragViewVisualCenter[1], true);
+                layout = findMatchingPageForDragOver(d.dragView, d.x, d.y, true);
             }
             if (layout != mDragTargetLayout) {
                 // Cancel all intermediate folder states

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1213,6 +1213,8 @@ public void startSearch(String initialQuery, boolean selectInitialQuery,
     @Override
     public boolean onSearchRequested() {
         startSearch(null, false, null, true);
+        // Use a custom animation for launching search
+        overridePendingTransition(R.anim.fade_in_fast, R.anim.fade_out_fast);
         return true;
     }
 
@@ -1538,9 +1540,7 @@ public boolean onTouch(View v, MotionEvent event) {
      * @param v The view that was clicked.
      */
     public void onClickSearchButton(View v) {
-        startSearch(null, false, null, true);
-        // Use a custom animation for launching search
-        overridePendingTransition(R.anim.fade_in_fast, R.anim.fade_out_fast);
+        onSearchRequested();
     }
 
     /**

File: src/com/android/launcher2/PagedViewCellLayout.java
Patch:
@@ -46,7 +46,6 @@ public class PagedViewCellLayout extends ViewGroup implements Page {
     private int mWidthGap;
     private int mHeightGap;
     private int mMaxGap;
-    private float mPeekWidth;
     protected PagedViewCellLayoutChildren mChildren;
     private PagedViewCellLayoutChildren mHolographicChildren;
     private boolean mAllowHardwareLayerCreation = false;
@@ -71,7 +70,6 @@ public PagedViewCellLayout(Context context, AttributeSet attrs, int defStyle) {
             resources.getDimensionPixelSize(R.dimen.apps_customize_cell_width);
         mOriginalCellHeight = mCellHeight =
             resources.getDimensionPixelSize(R.dimen.apps_customize_cell_height);
-        mPeekWidth = resources.getDimensionPixelSize(R.dimen.apps_customize_peek_width);
         mCellCountX = LauncherModel.getCellCountX();
         mCellCountY = LauncherModel.getCellCountY();
         mOriginalHeightGap = mOriginalHeightGap = mWidthGap = mHeightGap = -1;
@@ -366,7 +364,7 @@ public int estimateCellHSpan(int width) {
         // The space for a page assuming that we want to show half of a column of the previous and
         // next pages is the width - left padding (current & next page) - right padding (previous &
         // current page) - half cell width (for previous and next pages)
-        int availWidth = (int) (width - (2 * mPaddingLeft + 2 * mPaddingRight) - (2 * mPeekWidth));
+        int availWidth = (int) (width - (2 * mPaddingLeft + 2 * mPaddingRight));
 
         // We know that we have to fit N cells with N-1 width gaps, so we just juggle to solve for N
         int n = Math.max(1, (availWidth + mWidthGap) / (mCellWidth + mWidthGap));

File: src/com/android/launcher2/PagedViewCellLayout.java
Patch:
@@ -46,7 +46,6 @@ public class PagedViewCellLayout extends ViewGroup implements Page {
     private int mWidthGap;
     private int mHeightGap;
     private int mMaxGap;
-    private float mPeekWidth;
     protected PagedViewCellLayoutChildren mChildren;
     private PagedViewCellLayoutChildren mHolographicChildren;
     private boolean mAllowHardwareLayerCreation = false;
@@ -71,7 +70,6 @@ public PagedViewCellLayout(Context context, AttributeSet attrs, int defStyle) {
             resources.getDimensionPixelSize(R.dimen.apps_customize_cell_width);
         mOriginalCellHeight = mCellHeight =
             resources.getDimensionPixelSize(R.dimen.apps_customize_cell_height);
-        mPeekWidth = resources.getDimensionPixelSize(R.dimen.apps_customize_peek_width);
         mCellCountX = LauncherModel.getCellCountX();
         mCellCountY = LauncherModel.getCellCountY();
         mOriginalHeightGap = mOriginalHeightGap = mWidthGap = mHeightGap = -1;
@@ -366,7 +364,7 @@ public int estimateCellHSpan(int width) {
         // The space for a page assuming that we want to show half of a column of the previous and
         // next pages is the width - left padding (current & next page) - right padding (previous &
         // current page) - half cell width (for previous and next pages)
-        int availWidth = (int) (width - (2 * mPaddingLeft + 2 * mPaddingRight) - (2 * mPeekWidth));
+        int availWidth = (int) (width - (2 * mPaddingLeft + 2 * mPaddingRight));
 
         // We know that we have to fit N cells with N-1 width gaps, so we just juggle to solve for N
         int n = Math.max(1, (availWidth + mWidthGap) / (mCellWidth + mWidthGap));

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -245,9 +245,8 @@ protected void init() {
     }
 
     @Override
-    protected void onWallpaperTap(MotionEvent ev) {
-        int action = ev.getAction();
-        if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_DOWN) {
+    protected void onUnhandledTap(MotionEvent ev) {
+        if (LauncherApplication.isScreenLarge()) {
             // Dismiss AppsCustomize if we tap
             mLauncher.showWorkspace(true);
         }

File: src/com/android/launcher2/IconCache.java
Patch:
@@ -44,15 +44,13 @@ private static class CacheEntry {
     private final Bitmap mDefaultIcon;
     private final LauncherApplication mContext;
     private final PackageManager mPackageManager;
-    private final Utilities.BubbleText mBubble;
     private final HashMap<ComponentName, CacheEntry> mCache =
             new HashMap<ComponentName, CacheEntry>(INITIAL_ICON_CACHE_CAPACITY);
     private int mIconDpi;
 
     public IconCache(LauncherApplication context) {
         mContext = context;
         mPackageManager = context.getPackageManager();
-        mBubble = new Utilities.BubbleText(context);
         int density = context.getResources().getDisplayMetrics().densityDpi;
         if (LauncherApplication.isScreenLarge()) {
             if (density == DisplayMetrics.DENSITY_LOW) {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -131,7 +131,7 @@ public abstract class PagedView extends ViewGroup {
     private PageSwitchListener mPageSwitchListener;
 
     private ArrayList<Boolean> mDirtyPageContent;
-    private boolean mDirtyPageAlpha;
+    private boolean mDirtyPageAlpha = true;
 
     // choice modes
     protected static final int CHOICE_MODE_NONE = 0;

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -432,6 +432,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int maxChildHeight = 0;
 
         final int verticalPadding = mPaddingTop + mPaddingBottom;
+        final int horizontalPadding = mPaddingLeft + mPaddingRight;
 
 
         // The children are given the same width and height as the workspace
@@ -458,7 +459,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             }
 
             final int childWidthMeasureSpec =
-                MeasureSpec.makeMeasureSpec(widthSize, childWidthMode);
+                MeasureSpec.makeMeasureSpec(widthSize - horizontalPadding, childWidthMode);
             final int childHeightMeasureSpec =
                 MeasureSpec.makeMeasureSpec(heightSize - verticalPadding, childHeightMode);
 

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -432,6 +432,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
         int maxChildHeight = 0;
 
         final int verticalPadding = mPaddingTop + mPaddingBottom;
+        final int horizontalPadding = mPaddingLeft + mPaddingRight;
 
 
         // The children are given the same width and height as the workspace
@@ -458,7 +459,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             }
 
             final int childWidthMeasureSpec =
-                MeasureSpec.makeMeasureSpec(widthSize, childWidthMode);
+                MeasureSpec.makeMeasureSpec(widthSize - horizontalPadding, childWidthMode);
             final int childHeightMeasureSpec =
                 MeasureSpec.makeMeasureSpec(heightSize - verticalPadding, childHeightMode);
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1528,8 +1528,8 @@ public static int[] rectToCell(Resources resources, int width, int height, int[]
         int smallerSize = Math.min(actualWidth, actualHeight);
 
         // Always round up to next largest cell
-        int spanX = (width + smallerSize) / smallerSize;
-        int spanY = (height + smallerSize) / smallerSize;
+        int spanX = (int) Math.ceil(width / (float) smallerSize);
+        int spanY = (int) Math.ceil(height / (float) smallerSize);
 
         if (result == null) {
             return new int[] { spanX, spanY };

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1528,8 +1528,8 @@ public static int[] rectToCell(Resources resources, int width, int height, int[]
         int smallerSize = Math.min(actualWidth, actualHeight);
 
         // Always round up to next largest cell
-        int spanX = (width + smallerSize) / smallerSize;
-        int spanY = (height + smallerSize) / smallerSize;
+        int spanX = (int) Math.ceil(width / (float) smallerSize);
+        int spanY = (int) Math.ceil(height / (float) smallerSize);
 
         if (result == null) {
             return new int[] { spanX, spanY };

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -382,8 +382,7 @@ static void addItemToDatabase(Context context, final ItemInfo item, final long c
         final ContentResolver cr = context.getContentResolver();
         item.onAddToDatabase(values);
 
-        Launcher l = (Launcher) context;
-        LauncherApplication app = (LauncherApplication) l.getApplication();
+        LauncherApplication app = (LauncherApplication) context.getApplicationContext();
         item.id = app.getLauncherProvider().generateNewId();
         values.put(LauncherSettings.Favorites._ID, item.id);
         item.updateValuesWithCoordinates(values, item.cellX, item.cellY);

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -506,7 +506,7 @@ public void run() {
                     sFolders.remove(info.id);
                     sWorkspaceItems.remove(info);
 
-                    cr.delete(LauncherSettings.Favorites.CONTENT_URI,
+                    cr.delete(LauncherSettings.Favorites.CONTENT_URI_NO_NOTIFICATION,
                             LauncherSettings.Favorites.CONTAINER + "=" + info.id, null);
                     for (ItemInfo childInfo : info.contents) {
                         sItemsIdMap.remove(childInfo.id);

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -506,7 +506,7 @@ public void run() {
                     sFolders.remove(info.id);
                     sWorkspaceItems.remove(info);
 
-                    cr.delete(LauncherSettings.Favorites.CONTENT_URI,
+                    cr.delete(LauncherSettings.Favorites.CONTENT_URI_NO_NOTIFICATION,
                             LauncherSettings.Favorites.CONTAINER + "=" + info.id, null);
                     for (ItemInfo childInfo : info.contents) {
                         sItemsIdMap.remove(childInfo.id);

File: src/com/android/launcher2/Folder.java
Patch:
@@ -243,12 +243,14 @@ public void dismissEditingName() {
 
     public void doneEditingFolderName(boolean commit) {
         mFolderName.setHint(sHintText);
-        mInfo.setTitle(mFolderName.getText());
         LauncherModel.updateItemInDatabase(mLauncher, mInfo);
         mFolderName.setCursorVisible(false);
         mFolderName.clearFocus();
         Selection.setSelection((Spannable) mFolderName.getText(), 0, 0);
         mIsEditingName = false;
+        // Convert to a string here to ensure that no other state associated with the text field
+        // gets saved.
+        mInfo.setTitle(mFolderName.getText().toString());
     }
 
     public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {

File: src/com/android/launcher2/DragController.java
Patch:
@@ -483,14 +483,14 @@ private void handleMoveEvent(int x, int y) {
                 mScrollState = SCROLL_WAITING_IN_ZONE;
                 mScrollRunnable.setDirection(SCROLL_LEFT);
                 mHandler.postDelayed(mScrollRunnable, SCROLL_DELAY);
-                mDragScroller.onEnterScrollArea(SCROLL_LEFT);
+                mDragScroller.onEnterScrollArea(x, y, SCROLL_LEFT);
             }
         } else if (!inDeleteRegion && x > mScrollView.getWidth() - mScrollZone) {
             if (mScrollState == SCROLL_OUTSIDE_ZONE && mDistanceSinceScroll > slop) {
                 mScrollState = SCROLL_WAITING_IN_ZONE;
                 mScrollRunnable.setDirection(SCROLL_RIGHT);
                 mHandler.postDelayed(mScrollRunnable, SCROLL_DELAY);
-                mDragScroller.onEnterScrollArea(SCROLL_RIGHT);
+                mDragScroller.onEnterScrollArea(x, y, SCROLL_RIGHT);
             }
         } else {
             if (mScrollState == SCROLL_WAITING_IN_ZONE) {

File: src/com/android/launcher2/DragScroller.java
Patch:
@@ -30,7 +30,7 @@ public interface DragScroller {
      *
      * @param direction The scroll direction
      */
-    void onEnterScrollArea(int direction);
+    void onEnterScrollArea(int x, int y, int direction);
 
     /**
      * The touch point has left the scroll area.

File: src/com/android/launcher2/CellLayoutChildren.java
Patch:
@@ -150,7 +150,7 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
             final View view = getChildAt(i);
             view.setDrawingCacheEnabled(enabled);
             // Update the drawing caches
-            if (!view.isHardwareAccelerated()) {
+            if (!view.isHardwareAccelerated() && enabled) {
                 view.buildDrawingCache(true);
             }
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1828,8 +1828,6 @@ public boolean onLongClick(View v) {
             } else {
                 if (!(itemUnderLongClick instanceof Folder)) {
                     // User long pressed on an item
-                    mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
-                            HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
                     mWorkspace.startDrag(longClickCellInfo);
                 }
             }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2040,6 +2040,7 @@ private void cameraZoomOut(State toState, boolean animated, final boolean spring
 
         // Shrink workspaces away if going to AppsCustomize from workspace
         mWorkspace.shrink(Workspace.State.SMALL, animated);
+        hideHotseat(animated);
 
         if (animated) {
             final ValueAnimator scaleAnim = ValueAnimator.ofFloat(0f, 1f).setDuration(duration);
@@ -2141,6 +2142,7 @@ private void cameraZoomIn(State fromState, boolean animated, final boolean sprin
         if (!springLoaded) {
             mWorkspace.unshrink(animated);
         }
+        showHotseat(animated);
         if (animated) {
             if (mStateAnimation != null) mStateAnimation.cancel();
             mStateAnimation = new AnimatorSet();
@@ -2297,7 +2299,6 @@ void showAllApps(boolean animated) {
 
         // Hide the search bar and hotseat
         mSearchDeleteBar.hideSearchBar(animated);
-        hideHotseat(animated);
 
         // Change the state *after* we've called all the transition code
         mState = State.APPS_CUSTOMIZE;
@@ -2357,7 +2358,6 @@ void closeAllApps(boolean animated) {
 
             // Show the search bar and hotseat
             mSearchDeleteBar.showSearchBar(animated);
-            showHotseat(animated);
 
             // Set focus to the AppsCustomize button
             if (mAllAppsButton != null) {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -51,6 +51,7 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Environment;
 import android.os.Handler;
@@ -641,7 +642,6 @@ private void restoreState(Bundle savedState) {
         final long pendingAddContainer = savedState.getLong(RUNTIME_STATE_PENDING_ADD_CONTAINER, -1);
         final int pendingAddScreen = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SCREEN, -1);
 
-
         if (pendingAddContainer != ItemInfo.NO_ID && pendingAddScreen > -1) {
             mPendingAddInfo.container = pendingAddContainer;
             mPendingAddInfo.screen = pendingAddScreen;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -51,6 +51,7 @@
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Environment;
 import android.os.Handler;
@@ -657,7 +658,6 @@ private void restoreState(Bundle savedState) {
         final long pendingAddContainer = savedState.getLong(RUNTIME_STATE_PENDING_ADD_CONTAINER, -1);
         final int pendingAddScreen = savedState.getInt(RUNTIME_STATE_PENDING_ADD_SCREEN, -1);
 
-
         if (pendingAddContainer != ItemInfo.NO_ID && pendingAddScreen > -1) {
             mPendingAddInfo.container = pendingAddContainer;
             mPendingAddInfo.screen = pendingAddScreen;

File: src/com/android/launcher2/ButtonDropTarget.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Implements a DropTarget.
  */
-public class ButtonDropTarget extends FrameLayout implements DropTarget, DragController.DragListener {
+public class ButtonDropTarget extends TextView implements DropTarget, DragController.DragListener {
 
     protected final int mTransitionDuration;
 

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -77,8 +77,8 @@ protected void onFinishInflate() {
         // Get the individual components
         mQSBSearchBar = findViewById(R.id.qsb_search_bar);
         mDropTargetBar = findViewById(R.id.drag_target_bar);
-        mInfoDropTarget = (ButtonDropTarget) mDropTargetBar.findViewById(R.id.info_target);
-        mDeleteDropTarget = (ButtonDropTarget) mDropTargetBar.findViewById(R.id.delete_target);
+        mInfoDropTarget = (ButtonDropTarget) mDropTargetBar.findViewById(R.id.info_target_text);
+        mDeleteDropTarget = (ButtonDropTarget) mDropTargetBar.findViewById(R.id.delete_target_text);
         mBarHeight = getResources().getDimensionPixelSize(R.dimen.qsb_bar_height);
 
         mInfoDropTarget.setSearchDropTargetBar(this);

File: src/com/android/launcher2/ButtonDropTarget.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Implements a DropTarget.
  */
-public class ButtonDropTarget extends FrameLayout implements DropTarget, DragController.DragListener {
+public class ButtonDropTarget extends TextView implements DropTarget, DragController.DragListener {
 
     protected final int mTransitionDuration;
 

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -77,8 +77,8 @@ protected void onFinishInflate() {
         // Get the individual components
         mQSBSearchBar = findViewById(R.id.qsb_search_bar);
         mDropTargetBar = findViewById(R.id.drag_target_bar);
-        mInfoDropTarget = (ButtonDropTarget) mDropTargetBar.findViewById(R.id.info_target);
-        mDeleteDropTarget = (ButtonDropTarget) mDropTargetBar.findViewById(R.id.delete_target);
+        mInfoDropTarget = (ButtonDropTarget) mDropTargetBar.findViewById(R.id.info_target_text);
+        mDeleteDropTarget = (ButtonDropTarget) mDropTargetBar.findViewById(R.id.delete_target_text);
         mBarHeight = getResources().getDimensionPixelSize(R.dimen.qsb_bar_height);
 
         mInfoDropTarget.setSearchDropTargetBar(this);

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -116,7 +116,7 @@ static FolderIcon fromXml(int resId, Launcher launcher, ViewGroup group,
 
         FolderIcon icon = (FolderIcon) LayoutInflater.from(launcher).inflate(resId, group, false);
 
-        icon.mFolderName = (BubbleTextView) icon.findViewById(R.id.folder_name);
+        icon.mFolderName = (BubbleTextView) icon.findViewById(R.id.folder_icon_name);
         icon.mFolderName.setText(folderInfo.title);
         icon.mPreviewBackground = (ImageView) icon.findViewById(R.id.preview_background);
         icon.mPreviewBackground.setContentDescription(folderInfo.title);

File: src/com/android/launcher2/LauncherSettings.java
Patch:
@@ -143,7 +143,7 @@ static Uri getContentUri(long id, boolean notify) {
 
         /**
          * The X coordinate of the cell holding the favorite
-         * (if container is CONTAINER_DESKTOP or CONTAINER_DOCK)
+         * (if container is CONTAINER_HOTSEAT or CONTAINER_HOTSEAT)
          * <P>Type: INTEGER</P>
          */
         static final String CELLX = "cellX";

File: src/com/android/launcher2/HolographicPagedViewIcon.java
Patch:
@@ -48,7 +48,7 @@ protected void onDraw(Canvas canvas) {
             int hspace = getWidth() - compoundPaddingRight - compoundPaddingLeft;
             canvas.drawBitmap(overlay,
                     offset + compoundPaddingLeft + (hspace - overlay.getWidth()) / 2,
-                    mPaddingTop,
+                    mOriginalIcon.getPaddingTop(),
                     mPaint);
         }
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1233,11 +1233,11 @@ protected void onNewIntent(Intent intent) {
                         != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
 
             // In all these cases, only animate if we're already on home
-            mWorkspace.unshrink(alreadyOnHome);
             mWorkspace.exitWidgetResizeMode();
             if (alreadyOnHome && mState == State.WORKSPACE && !mWorkspace.isTouchActive()) {
                 mWorkspace.moveToDefaultScreen(true);
             }
+            exitSpringLoadedDragMode();
             showWorkspace(alreadyOnHome);
 
             final View v = getWindow().peekDecorView();

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -453,6 +453,7 @@ void addInScreen(View child, long container, int screen, int x, int y, int spanX
         final CellLayout layout;
         if (container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
             layout = mLauncher.getHotseat().getLayout();
+            child.setOnKeyListener(null);
 
             if (screen < 0) {
                 screen = mLauncher.getHotseat().getOrderInHotseat(x, y);
@@ -464,6 +465,7 @@ void addInScreen(View child, long container, int screen, int x, int y, int spanX
             }
         } else {
             layout = (CellLayout) getChildAt(screen);
+            child.setOnKeyListener(new BubbleTextViewKeyEventListener());
         }
 
         CellLayout.LayoutParams lp = (CellLayout.LayoutParams) child.getLayoutParams();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1950,7 +1950,7 @@ public boolean onLongClick(View v) {
         resetAddInfo();
         CellLayout.CellInfo longClickCellInfo = (CellLayout.CellInfo) v.getTag();
         // This happens when long clicking an item with the dpad/trackball
-        if (longClickCellInfo == null || !longClickCellInfo.valid) {
+        if (longClickCellInfo == null) {
             return true;
         }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -453,6 +453,7 @@ void addInScreen(View child, long container, int screen, int x, int y, int spanX
         final CellLayout layout;
         if (container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
             layout = mLauncher.getHotseat().getLayout();
+            child.setOnKeyListener(null);
 
             if (screen < 0) {
                 screen = mLauncher.getHotseat().getOrderInHotseat(x, y);
@@ -464,6 +465,7 @@ void addInScreen(View child, long container, int screen, int x, int y, int spanX
             }
         } else {
             layout = (CellLayout) getChildAt(screen);
+            child.setOnKeyListener(new BubbleTextViewKeyEventListener());
         }
 
         CellLayout.LayoutParams lp = (CellLayout.LayoutParams) child.getLayoutParams();

File: src/com/android/launcher2/DragLayer.java
Patch:
@@ -215,8 +215,8 @@ public float getDescendantCoordRelativeToSelf(View descendant, int[] coord) {
             pt[1] += view.getTop() - view.getScrollY();
             viewParent = view.getParent();
         }
-        coord[0] = (int) pt[0];
-        coord[1] = (int) pt[1];
+        coord[0] = (int) Math.round(pt[0]);
+        coord[1] = (int) Math.round(pt[1]);
         return scale;
     }
 

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -449,7 +449,8 @@ protected boolean beginDragging(View v) {
     }
     private void endDragging(View target, boolean success) {
         mLauncher.getWorkspace().onDragStopped(success);
-        if (!success || target != mLauncher.getWorkspace()) {
+        if (!success || (target != mLauncher.getWorkspace() &&
+                !(target instanceof DeleteDropTarget))) {
             // Exit spring loaded mode if we have not successfully dropped or have not handled the
             // drop in Workspace
             mLauncher.exitSpringLoadedDragMode();

File: src/com/android/launcher2/InfoDropTarget.java
Patch:
@@ -32,7 +32,6 @@
 
 public class InfoDropTarget extends ButtonDropTarget {
 
-    private TextView mText;
     private ColorStateList mOriginalTextColor;
     private TransitionDrawable mDrawable;
     private int mHoverColor = 0xFF0000FF;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1131,6 +1131,7 @@ public void onReceive(Context context, Intent intent) {
             final String action = intent.getAction();
             if (Intent.ACTION_SCREEN_OFF.equals(action)) {
                 mUserPresent = false;
+                mDragLayer.clearAllResizeFrames();
                 updateRunning();
 
                 // Reset AllApps to it's initial state
@@ -1162,6 +1163,7 @@ public void onAttachedToWindow() {
     public void onDetachedFromWindow() {
         super.onDetachedFromWindow();
         mVisible = false;
+        mDragLayer.clearAllResizeFrames();
 
         if (mAttached) {
             unregisterReceiver(mReceiver);

File: src/com/android/launcher2/InstallWidgetReceiver.java
Patch:
@@ -188,7 +188,7 @@ public void onClick(DialogInterface dialog, int which) {
 
             final PendingAddWidgetInfo createInfo = new PendingAddWidgetInfo(widgetInfo, mMimeType,
                     mClipData);
-            mLauncher.addAppWidgetFromDrop(createInfo, mTargetLayoutScreen, mTargetLayoutPos);
+            mLauncher.addAppWidgetFromDrop(createInfo, mTargetLayoutScreen, null, mTargetLayoutPos);
         }
     }
 }

File: src/com/android/launcher2/PagedViewGridLayout.java
Patch:
@@ -35,7 +35,6 @@ public PagedViewGridLayout(Context context, int cellCountX, int cellCountY) {
         super(context, null, 0);
         mCellCountX = cellCountX;
         mCellCountY = cellCountY;
-        setColumnCount(mCellCountX);
     }
 
     int getCellCountX() {

File: src/com/android/launcher2/InstallWidgetReceiver.java
Patch:
@@ -188,7 +188,7 @@ public void onClick(DialogInterface dialog, int which) {
 
             final PendingAddWidgetInfo createInfo = new PendingAddWidgetInfo(widgetInfo, mMimeType,
                     mClipData);
-            mLauncher.addAppWidgetFromDrop(createInfo, mTargetLayoutScreen, mTargetLayoutPos);
+            mLauncher.addAppWidgetFromDrop(createInfo, mTargetLayoutScreen, null, mTargetLayoutPos);
         }
     }
 }

File: src/com/android/launcher2/PagedViewCellLayout.java
Patch:
@@ -221,8 +221,6 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
             throw new RuntimeException("CellLayout cannot have UNSPECIFIED dimensions");
         }
 
-
-
         int numWidthGaps = mCellCountX - 1;
         int numHeightGaps = mCellCountY - 1;
 

File: src/com/android/launcher2/PagedViewGridLayout.java
Patch:
@@ -35,7 +35,6 @@ public PagedViewGridLayout(Context context, int cellCountX, int cellCountY) {
         super(context, null, 0);
         mCellCountX = cellCountX;
         mCellCountY = cellCountY;
-        setColumnCount(mCellCountX);
     }
 
     int getCellCountX() {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1217,7 +1217,7 @@ public void run() {
     };
 
     void addWidgetToAutoAdvanceIfNeeded(View hostView, AppWidgetProviderInfo appWidgetInfo) {
-        if (appWidgetInfo.autoAdvanceViewId == -1) return;
+        if (appWidgetInfo == null || appWidgetInfo.autoAdvanceViewId == -1) return;
         View v = hostView.findViewById(appWidgetInfo.autoAdvanceViewId);
         if (v instanceof Advanceable) {
             mWidgetsToAdvance.put(hostView, appWidgetInfo);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -288,11 +288,13 @@ public Workspace(Context context, AttributeSet attrs, int defStyle) {
     public void onDragStart(DragSource source, Object info, int dragAction) {
         mIsDragOccuring = true;
         updateChildrenLayersEnabled();
+        mLauncher.lockScreenOrientation();
     }
 
     public void onDragEnd() {
         mIsDragOccuring = false;
         updateChildrenLayersEnabled();
+        mLauncher.unlockScreenOrientation();
     }
 
     /**
@@ -2004,7 +2006,6 @@ public void beginDragShared(View child, DragSource source) {
         mDragController.startDrag(b, dragLayerX, dragLayerY, source, child.getTag(),
                 DragController.DRAG_ACTION_MOVE, dragRect);
         b.recycle();
-        mLauncher.lockScreenOrientation();
     }
 
     void addApplicationShortcut(ShortcutInfo info, int screen, int cellX, int cellY,
@@ -3034,7 +3035,6 @@ public void onDropCompleted(View target, DragObject d, boolean success) {
             doDragExit(null);
             ((CellLayout) getChildAt(mDragInfo.screen)).onDropChild(mDragInfo.cell);
         }
-        mLauncher.unlockScreenOrientation();
         mDragOutline = null;
         mDragInfo = null;
     }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1187,7 +1187,7 @@ public void addFocusables(ArrayList<View> views, int direction, int focusableMod
     }
 
     public boolean isSmall() {
-        return mState == State.SMALL;
+        return mState == State.SMALL || mState == State.SPRING_LOADED;
     }
 
     void enableChildrenCache(int fromPage, int toPage) {
@@ -1631,8 +1631,9 @@ void unshrink(boolean animated, boolean springLoaded) {
             if (springLoaded) {
                 finalScaleFactor = mSpringLoadedShrinkFactor;
                 finalBackgroundAlpha = 1.0f;
+                mState = State.SPRING_LOADED;
             } else {
-                mState = springLoaded ? State.SPRING_LOADED : State.NORMAL;
+                mState = State.NORMAL;
             }
             if (mAnimator != null) {
                 mAnimator.cancel();

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2072,8 +2072,8 @@ boolean willCreateUserFolder(ItemInfo info, CellLayout target, int[] targetCell,
             boolean considerTimeout) {
         View dropOverView = target.getChildAt(targetCell[0], targetCell[1]);
 
-        boolean hasntMoved = mDragInfo != null
-                && (mDragInfo.cellX == targetCell[0] && mDragInfo.cellY == targetCell[1]);
+        boolean hasntMoved = mDragInfo != null && (mDragInfo.cellX == targetCell[0] &&
+                mDragInfo.cellY == targetCell[1]) && mDragInfo.screen == indexOfChild(target);
 
         if (dropOverView == null || hasntMoved || (considerTimeout && !mCreateUserFolderOnDrop)) {
             return false;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1984,7 +1984,8 @@ public void beginDragShared(View child, DragSource source) {
 
         mLauncher.getDragLayer().getLocationInDragLayer(child, mTempXY);
         final int dragLayerX = (int) mTempXY[0] + (child.getWidth() - bmpWidth) / 2;
-        final int dragLayerY = (int) mTempXY[1] + (child.getHeight() - bmpHeight) / 2;
+        int dragLayerY = (int) mTempXY[1] + (child.getHeight() - bmpHeight) / 2;
+        dragLayerY -= (child.getHeight() - b.getHeight()) / 2;
 
         Rect dragRect = null;
         if (child instanceof BubbleTextView) {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -929,6 +929,9 @@ protected void determineScrollingStart(MotionEvent ev, float touchSlopScale) {
          * of the down event.
          */
         final int pointerIndex = ev.findPointerIndex(mActivePointerId);
+        if (pointerIndex == -1) {
+            return;
+        }
         final float x = ev.getX(pointerIndex);
         final float y = ev.getY(pointerIndex);
         final int xDiff = (int) Math.abs(x - mLastMotionX);

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -925,6 +925,9 @@ protected void determineScrollingStart(MotionEvent ev, float touchSlopScale) {
          * of the down event.
          */
         final int pointerIndex = ev.findPointerIndex(mActivePointerId);
+        if (pointerIndex == -1) {
+            return;
+        }
         final float x = ev.getX(pointerIndex);
         final float y = ev.getY(pointerIndex);
         final int xDiff = (int) Math.abs(x - mLastMotionX);

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -56,7 +56,6 @@ public class BubbleTextView extends TextView implements VisibilityChangedBroadca
     private final HolographicOutlineHelper mOutlineHelper = new HolographicOutlineHelper();
     private final Canvas mTempCanvas = new Canvas();
     private final Rect mTempRect = new Rect();
-    private final Paint mTempPaint = new Paint();
     private boolean mDidInvalidateForPressedState;
     private Bitmap mPressedOrFocusedBackground;
     private int mFocusedOutlineColor;

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -127,7 +127,6 @@ static FolderIcon fromXml(int resId, Launcher launcher, ViewGroup group,
 
         Folder folder = Folder.fromXml(launcher);
         folder.setDragController(launcher.getDragController());
-        folder.setLauncher(launcher);
         folder.setFolderIcon(icon);
         folder.bind(folderInfo);
         icon.mFolder = folder;

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -127,7 +127,6 @@ static FolderIcon fromXml(int resId, Launcher launcher, ViewGroup group,
 
         Folder folder = Folder.fromXml(launcher);
         folder.setDragController(launcher.getDragController());
-        folder.setLauncher(launcher);
         folder.setFolderIcon(icon);
         folder.bind(folderInfo);
         icon.mFolder = folder;

File: src/com/android/launcher2/AllAppsList.java
Patch:
@@ -91,7 +91,7 @@ public void addPackage(Context context, String packageName) {
 
         if (matches.size() > 0) {
             for (ResolveInfo info : matches) {
-                add(new ApplicationInfo(context.getPackageManager(), info, mIconCache));
+                add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null));
             }
         }
     }
@@ -142,10 +142,10 @@ public void updatePackage(Context context, String packageName) {
                         info.activityInfo.applicationInfo.packageName,
                         info.activityInfo.name);
                 if (applicationInfo == null) {
-                    add(new ApplicationInfo(context.getPackageManager(), info, mIconCache));
+                    add(new ApplicationInfo(context.getPackageManager(), info, mIconCache, null));
                 } else {
                     mIconCache.remove(applicationInfo.componentName);
-                    mIconCache.getTitleAndIcon(applicationInfo, info);
+                    mIconCache.getTitleAndIcon(applicationInfo, info, null);
                     modified.add(applicationInfo);
                 }
             }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1314,6 +1314,9 @@ protected void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
 
         outState.putInt(RUNTIME_STATE, mState.ordinal());
+        // We close any open folder since it will not be re-opened, and we need to make sure
+        // this state is reflected.
+        closeFolder();
 
         if (mAddScreen > -1 && mWaitingForResult) {
             outState.putInt(RUNTIME_STATE_PENDING_ADD_SCREEN, mAddScreen);

File: src/com/android/launcher2/Folder.java
Patch:
@@ -888,6 +888,7 @@ public void onDrop(DragObject d) {
             si.cellX = lp.cellY = mEmptyCell[1];
             mContent.addViewToCellLayout(mCurrentDragView, -1, (int)item.id, lp, true);
             mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, mCurrentDragView);
+            mItemsInvalidated = true;
             setupContentDimension(getItemCount());
             mSuppressOnAdd = true;
         }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1751,7 +1751,7 @@ public void onAnimationUpdate(float a, float b) {
                             // an optimization, but not required
                             return;
                         }
-                        fastInvalidate();
+                        invalidate();
                         if (enableWallpaperEffects) {
                             setHorizontalWallpaperOffset(a * oldHorizontalWallpaperOffset
                                     + b * newHorizontalWallpaperOffset);
@@ -3110,7 +3110,6 @@ void clearDropTargets() {
 
     void removeItems(final ArrayList<ApplicationInfo> apps) {
         final int screenCount = getChildCount();
-        final PackageManager manager = getContext().getPackageManager();
         final AppWidgetManager widgets = AppWidgetManager.getInstance(getContext());
 
         final HashSet<String> packageNames = new HashSet<String>();

File: src/com/android/launcher2/DropTarget.java
Patch:
@@ -49,6 +49,9 @@ class DragObject {
         /** Where the drag originated */
         public DragSource dragSource = null;
 
+        /** Post drag animation runnable */
+        public Runnable postAnimationRunnable = null;
+
         public DragObject() {
         }
     }

File: src/com/android/launcher2/SearchDropTargetBar.java
Patch:
@@ -62,7 +62,6 @@ public void setup(Launcher launcher, DragController dragController) {
         dragController.addDropTarget(mDeleteDropTarget);
         mInfoDropTarget.setLauncher(launcher);
         mDeleteDropTarget.setLauncher(launcher);
-        mDropTargetBar.setBackgroundColor(0x33000000);
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1777,7 +1777,7 @@ public void onAnimationUpdate(float a, float b) {
                             // an optimization, but not required
                             return;
                         }
-                        fastInvalidate();
+                        invalidate();
                         if (enableWallpaperEffects) {
                             setHorizontalWallpaperOffset(a * oldHorizontalWallpaperOffset
                                     + b * newHorizontalWallpaperOffset);
@@ -3106,7 +3106,6 @@ void clearDropTargets() {
 
     void removeItems(final ArrayList<ApplicationInfo> apps) {
         final int screenCount = getChildCount();
-        final PackageManager manager = getContext().getPackageManager();
         final AppWidgetManager widgets = AppWidgetManager.getInstance(getContext());
 
         final HashSet<String> packageNames = new HashSet<String>();

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1466,7 +1466,7 @@ public void onAnimationUpdate(float a, float b) {
                         // an optimization, and required for correct behavior.
                         return;
                     }
-                    fastInvalidate();
+                    invalidate();
                     if (enableWallpaperEffects) {
                         setHorizontalWallpaperOffset(
                             a * oldHorizontalWallpaperOffset + b * newHorizontalWallpaperOffset);

File: src/com/android/launcher2/Folder.java
Patch:
@@ -888,6 +888,7 @@ public void onDrop(DragObject d) {
             si.cellX = lp.cellY = mEmptyCell[1];
             mContent.addViewToCellLayout(mCurrentDragView, -1, (int)item.id, lp, true);
             mLauncher.getDragLayer().animateViewIntoPosition(d.dragView, mCurrentDragView);
+            mItemsInvalidated = true;
             setupContentDimension(getItemCount());
             mSuppressOnAdd = true;
         }

File: src/com/android/launcher2/CellLayoutChildren.java
Patch:
@@ -83,7 +83,6 @@ public void setupLp(CellLayout.LayoutParams lp) {
         lp.setup(mCellWidth, mCellHeight, mWidthGap, mHeightGap);
     }
 
-
     public void measureChild(View child) {
         final int cellWidth = mCellWidth;
         final int cellHeight = mCellHeight;

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -382,8 +382,6 @@ public void onRemove(ShortcutInfo item) {
     }
 
     public void onTitleChanged(CharSequence title) {
-        mFolderName.setText(title);
-        mFolderName.invalidate();
-        mFolderName.requestLayout();
+        mFolderName.setText(title.toString());
     }
 }

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -382,8 +382,6 @@ public void onRemove(ShortcutInfo item) {
     }
 
     public void onTitleChanged(CharSequence title) {
-        mFolderName.setText(title);
-        mFolderName.invalidate();
-        mFolderName.requestLayout();
+        mFolderName.setText(title.toString());
     }
 }

File: src/com/android/launcher2/Folder.java
Patch:
@@ -615,7 +615,7 @@ private float[] getDragViewVisualCenter(int x, int y, int xOffset, int yOffset,
 
     OnAlarmListener mOnExitAlarmListener = new OnAlarmListener() {
         public void onAlarm(Alarm alarm) {
-            mLauncher.closeFolder(Folder.this);
+            mLauncher.closeFolder();
             mCurrentDragInfo = null;
             mCurrentDragView = null;
             mSuppressOnAdd = false;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1749,7 +1749,6 @@ public void closeFolder() {
         Folder folder = mWorkspace.getOpenFolder();
         if (folder != null) {
             closeFolder(folder);
-            mDragLayer.setCurrentFolder(null);
         }
     }
 
@@ -1763,7 +1762,6 @@ void closeFolder(Folder folder) {
             shrinkAndFadeInFolderIcon(fi);
             mDragController.removeDropTarget((DropTarget)folder);
         }
-
         folder.animateClosed();
     }
 
@@ -1993,7 +1991,6 @@ public void openFolder(FolderIcon folderIcon) {
         info.opened = true;
 
         mWorkspace.addInFullScreen(folder, info.screen);
-        mDragLayer.setCurrentFolder(folder);
         folder.animateOpen();
         folder.onOpen();
     }

File: src/com/android/launcher2/AllAppsTabbed.java
Patch:
@@ -81,7 +81,7 @@ public View createTabContent(String tag) {
         };
 
         // Create the tabs and wire them up properly
-        AllAppsTabKeyEventListener keyListener = new AllAppsTabKeyEventListener();
+        AppsCustomizeTabKeyEventListener keyListener = new AppsCustomizeTabKeyEventListener();
         TextView tabView;
         TabWidget tabWidget = (TabWidget) findViewById(com.android.internal.R.id.tabs);
         tabView = (TextView) mInflater.inflate(R.layout.tab_widget_indicator, tabWidget, false);

File: src/com/android/launcher2/AllAppsTabbed.java
Patch:
@@ -81,7 +81,7 @@ public View createTabContent(String tag) {
         };
 
         // Create the tabs and wire them up properly
-        AllAppsTabKeyEventListener keyListener = new AllAppsTabKeyEventListener();
+        AppsCustomizeTabKeyEventListener keyListener = new AppsCustomizeTabKeyEventListener();
         TextView tabView;
         TabWidget tabWidget = (TabWidget) findViewById(com.android.internal.R.id.tabs);
         tabView = (TextView) mInflater.inflate(R.layout.tab_widget_indicator, tabWidget, false);

File: src/com/android/launcher2/PagedViewIconCache.java
Patch:
@@ -48,11 +48,11 @@ public Key(ResolveInfo info) {
             final ComponentInfo ci = info.activityInfo != null ? info.activityInfo :
                 info.serviceInfo;
             mComponentName = new ComponentName(ci.packageName, ci.name);
-            mType = Type.AppWidgetProviderInfoKey;
+            mType = Type.ResolveInfoKey;
         }
         public Key(AppWidgetProviderInfo info) {
             mComponentName = info.provider;
-            mType = Type.ResolveInfoKey;
+            mType = Type.AppWidgetProviderInfoKey;
         }
 
         private ComponentName getComponentName() {

File: src/com/android/launcher2/PagedViewIconCache.java
Patch:
@@ -48,11 +48,11 @@ public Key(ResolveInfo info) {
             final ComponentInfo ci = info.activityInfo != null ? info.activityInfo :
                 info.serviceInfo;
             mComponentName = new ComponentName(ci.packageName, ci.name);
-            mType = Type.AppWidgetProviderInfoKey;
+            mType = Type.ResolveInfoKey;
         }
         public Key(AppWidgetProviderInfo info) {
             mComponentName = info.provider;
-            mType = Type.ResolveInfoKey;
+            mType = Type.AppWidgetProviderInfoKey;
         }
 
         private ComponentName getComponentName() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -730,8 +730,9 @@ private int getScrollRange() {
 
     protected void setWallpaperDimension() {
         Display display = mLauncher.getWindowManager().getDefaultDisplay();
-        final int maxDim = Math.max(display.getWidth(), display.getHeight());
-        final int minDim = Math.min(display.getWidth(), display.getHeight());
+        int height = display.getHeight() + (int) getResources().getDimension(R.dimen.status_bar_height);
+        final int maxDim = Math.max(display.getWidth(), height);
+        final int minDim = Math.min(display.getWidth(), height);
 
         // We need to ensure that there is enough extra space in the wallpaper for the intended
         // parallax effects

File: src/com/android/launcher2/PagedViewIconCache.java
Patch:
@@ -48,11 +48,11 @@ public Key(ResolveInfo info) {
             final ComponentInfo ci = info.activityInfo != null ? info.activityInfo :
                 info.serviceInfo;
             mComponentName = new ComponentName(ci.packageName, ci.name);
-            mType = Type.AppWidgetProviderInfoKey;
+            mType = Type.ResolveInfoKey;
         }
         public Key(AppWidgetProviderInfo info) {
             mComponentName = info.provider;
-            mType = Type.ResolveInfoKey;
+            mType = Type.AppWidgetProviderInfoKey;
         }
 
         private ComponentName getComponentName() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -730,8 +730,9 @@ private int getScrollRange() {
 
     protected void setWallpaperDimension() {
         Display display = mLauncher.getWindowManager().getDefaultDisplay();
-        final int maxDim = Math.max(display.getWidth(), display.getHeight());
-        final int minDim = Math.min(display.getWidth(), display.getHeight());
+        int height = display.getHeight() + (int) getResources().getDimension(R.dimen.status_bar_height);
+        final int maxDim = Math.max(display.getWidth(), height);
+        final int minDim = Math.min(display.getWidth(), height);
 
         // We need to ensure that there is enough extra space in the wallpaper for the intended
         // parallax effects

File: src/com/android/launcher2/PagedViewIconCache.java
Patch:
@@ -48,11 +48,11 @@ public Key(ResolveInfo info) {
             final ComponentInfo ci = info.activityInfo != null ? info.activityInfo :
                 info.serviceInfo;
             mComponentName = new ComponentName(ci.packageName, ci.name);
-            mType = Type.AppWidgetProviderInfoKey;
+            mType = Type.ResolveInfoKey;
         }
         public Key(AppWidgetProviderInfo info) {
             mComponentName = info.provider;
-            mType = Type.ResolveInfoKey;
+            mType = Type.AppWidgetProviderInfoKey;
         }
 
         private ComponentName getComponentName() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -730,8 +730,9 @@ private int getScrollRange() {
 
     protected void setWallpaperDimension() {
         Display display = mLauncher.getWindowManager().getDefaultDisplay();
-        final int maxDim = Math.max(display.getWidth(), display.getHeight());
-        final int minDim = Math.min(display.getWidth(), display.getHeight());
+        int height = display.getHeight() + (int) getResources().getDimension(R.dimen.status_bar_height);
+        final int maxDim = Math.max(display.getWidth(), height);
+        final int minDim = Math.min(display.getWidth(), height);
 
         // We need to ensure that there is enough extra space in the wallpaper for the intended
         // parallax effects

File: src/com/android/launcher2/PagedViewIconCache.java
Patch:
@@ -48,11 +48,11 @@ public Key(ResolveInfo info) {
             final ComponentInfo ci = info.activityInfo != null ? info.activityInfo :
                 info.serviceInfo;
             mComponentName = new ComponentName(ci.packageName, ci.name);
-            mType = Type.AppWidgetProviderInfoKey;
+            mType = Type.ResolveInfoKey;
         }
         public Key(AppWidgetProviderInfo info) {
             mComponentName = info.provider;
-            mType = Type.ResolveInfoKey;
+            mType = Type.AppWidgetProviderInfoKey;
         }
 
         private ComponentName getComponentName() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -730,8 +730,9 @@ private int getScrollRange() {
 
     protected void setWallpaperDimension() {
         Display display = mLauncher.getWindowManager().getDefaultDisplay();
-        final int maxDim = Math.max(display.getWidth(), display.getHeight());
-        final int minDim = Math.min(display.getWidth(), display.getHeight());
+        int height = display.getHeight() + (int) getResources().getDimension(R.dimen.status_bar_height);
+        final int maxDim = Math.max(display.getWidth(), height);
+        final int minDim = Math.min(display.getWidth(), height);
 
         // We need to ensure that there is enough extra space in the wallpaper for the intended
         // parallax effects

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1306,7 +1306,7 @@ protected void snapToPageWithVelocity(int whichPage, int velocity) {
         // snap duration. This is a function of the actual distance that needs to be traveled;
         // we keep this value close to half screen size in order to reduce the variance in snap
         // duration as a function of the distance the page needs to travel.
-        float distanceRatio = 1.0f * Math.abs(delta) / 2 * halfScreenSize;
+        float distanceRatio = Math.min(1f, 1.0f * Math.abs(delta) / (2 * halfScreenSize));
         float distance = halfScreenSize + halfScreenSize *
                 distanceInfluenceForSnapDuration(distanceRatio);
 
@@ -1315,8 +1315,8 @@ protected void snapToPageWithVelocity(int whichPage, int velocity) {
 
         // we want the page's snap velocity to approximately match the velocity at which the
         // user flings, so we scale the duration by a value near to the derivative of the scroll
-        // interpolator at zero, ie. 5. We use 6 to make it a little slower.
-        duration = 6 * Math.round(1000 * Math.abs(distance / velocity));
+        // interpolator at zero, ie. 5. We use 4 to make it a little slower.
+        duration = 4 * Math.round(1000 * Math.abs(distance / velocity));
 
         snapToPage(whichPage, delta, duration);
     }

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1270,7 +1270,7 @@ protected void snapToPageWithVelocity(int whichPage, int velocity) {
         // snap duration. This is a function of the actual distance that needs to be traveled;
         // we keep this value close to half screen size in order to reduce the variance in snap
         // duration as a function of the distance the page needs to travel.
-        float distanceRatio = 1.0f * Math.abs(delta) / 2 * halfScreenSize;
+        float distanceRatio = Math.min(1f, 1.0f * Math.abs(delta) / (2 * halfScreenSize));
         float distance = halfScreenSize + halfScreenSize *
                 distanceInfluenceForSnapDuration(distanceRatio);
 
@@ -1279,8 +1279,8 @@ protected void snapToPageWithVelocity(int whichPage, int velocity) {
 
         // we want the page's snap velocity to approximately match the velocity at which the
         // user flings, so we scale the duration by a value near to the derivative of the scroll
-        // interpolator at zero, ie. 5. We use 6 to make it a little slower.
-        duration = 6 * Math.round(1000 * Math.abs(distance / velocity));
+        // interpolator at zero, ie. 5. We use 4 to make it a little slower.
+        duration = 4 * Math.round(1000 * Math.abs(distance / velocity));
 
         snapToPage(whichPage, delta, duration);
     }

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1270,7 +1270,7 @@ protected void snapToPageWithVelocity(int whichPage, int velocity) {
         // snap duration. This is a function of the actual distance that needs to be traveled;
         // we keep this value close to half screen size in order to reduce the variance in snap
         // duration as a function of the distance the page needs to travel.
-        float distanceRatio = 1.0f * Math.abs(delta) / 2 * halfScreenSize;
+        float distanceRatio = Math.min(1f, 1.0f * Math.abs(delta) / (2 * halfScreenSize));
         float distance = halfScreenSize + halfScreenSize *
                 distanceInfluenceForSnapDuration(distanceRatio);
 
@@ -1279,8 +1279,8 @@ protected void snapToPageWithVelocity(int whichPage, int velocity) {
 
         // we want the page's snap velocity to approximately match the velocity at which the
         // user flings, so we scale the duration by a value near to the derivative of the scroll
-        // interpolator at zero, ie. 5. We use 6 to make it a little slower.
-        duration = 6 * Math.round(1000 * Math.abs(distance / velocity));
+        // interpolator at zero, ie. 5. We use 4 to make it a little slower.
+        duration = 4 * Math.round(1000 * Math.abs(distance / velocity));
 
         snapToPage(whichPage, delta, duration);
     }

File: src/com/android/launcher2/ApplicationInfoDropTarget.java
Patch:
@@ -16,9 +16,6 @@
 
 package com.android.launcher2;
 
-import com.android.launcher.R;
-import com.android.launcher2.DropTarget.DragObject;
-
 import android.animation.Animator;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
@@ -30,6 +27,8 @@
 import android.util.AttributeSet;
 import android.view.View;
 
+import com.android.launcher.R;
+
 /**
  * Implements a DropTarget which allows applications to be dropped on it,
  * in order to launch the application info for that app.

File: src/com/android/launcher2/DeleteZone.java
Patch:
@@ -33,7 +33,6 @@
 import android.view.animation.AccelerateInterpolator;
 
 import com.android.launcher.R;
-import com.android.launcher2.DropTarget.DragObject;
 
 public class DeleteZone extends IconDropTarget {
     private static final int ORIENTATION_HORIZONTAL = 1;

File: src/com/android/launcher2/DragSource.java
Patch:
@@ -18,6 +18,8 @@
 
 import android.view.View;
 
+import com.android.launcher2.DropTarget.DragObject;
+
 /**
  * Interface defining an object that can originate a drag.
  *
@@ -29,5 +31,5 @@ public interface DragSource {
      */
     void onDragViewVisible();
 
-    void onDropCompleted(View target, Object dragInfo, boolean success);
+    void onDropCompleted(View target, DragObject d, boolean success);
 }

File: src/com/android/launcher2/Folder.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.android.launcher2;
 
-import java.util.ArrayList;
-
 import android.animation.Animator;
 import android.animation.AnimatorListenerAdapter;
 import android.animation.ObjectAnimator;
@@ -43,6 +41,8 @@
 import com.android.launcher.R;
 import com.android.launcher2.FolderInfo.FolderListener;
 
+import java.util.ArrayList;
+
 /**
  * Represents a set of icons chosen by the user or generated by the system.
  */
@@ -448,7 +448,7 @@ public float[] mapPointFromScreenToContent(int x, int y, float[] r) {
         return r;
     }
 
-    public void onDropCompleted(View target, Object dragInfo, boolean success) {
+    public void onDropCompleted(View target, DragObject d, boolean success) {
     }
 
     public boolean isDropEnabled() {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1270,7 +1270,7 @@ protected void snapToPageWithVelocity(int whichPage, int velocity) {
         // snap duration. This is a function of the actual distance that needs to be traveled;
         // we keep this value close to half screen size in order to reduce the variance in snap
         // duration as a function of the distance the page needs to travel.
-        float distanceRatio = 1.0f * Math.abs(delta) / 2 * halfScreenSize;
+        float distanceRatio = Math.min(1f, 1.0f * Math.abs(delta) / (2 * halfScreenSize));
         float distance = halfScreenSize + halfScreenSize *
                 distanceInfluenceForSnapDuration(distanceRatio);
 
@@ -1279,8 +1279,8 @@ protected void snapToPageWithVelocity(int whichPage, int velocity) {
 
         // we want the page's snap velocity to approximately match the velocity at which the
         // user flings, so we scale the duration by a value near to the derivative of the scroll
-        // interpolator at zero, ie. 5. We use 6 to make it a little slower.
-        duration = 6 * Math.round(1000 * Math.abs(distance / velocity));
+        // interpolator at zero, ie. 5. We use 4 to make it a little slower.
+        duration = 4 * Math.round(1000 * Math.abs(distance / velocity));
 
         snapToPage(whichPage, delta, duration);
     }

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -173,7 +173,7 @@ private int determineCellCountY(int availableHeight, PagedViewCellLayout layout)
         availableHeight -= mPageLayoutPaddingTop + mPageLayoutPaddingBottom;
         availableHeight -= cellHeight; // Assume at least one row
         Resources r = getContext().getResources();
-        float scaleFactor = r.getInteger(R.integer.config_allAppsZoomScaleFactor) / 100f;
+        float scaleFactor = r.getInteger(R.integer.config_appsCustomizeZoomScaleFactor) / 100f;
         availableHeight -= screenHeight * scaleFactor;
         if (availableHeight > 0) {
             return Math.min(mMaxCellCountY,

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -173,7 +173,7 @@ private int determineCellCountY(int availableHeight, PagedViewCellLayout layout)
         availableHeight -= mPageLayoutPaddingTop + mPageLayoutPaddingBottom;
         availableHeight -= cellHeight; // Assume at least one row
         Resources r = getContext().getResources();
-        float scaleFactor = r.getInteger(R.integer.config_allAppsZoomScaleFactor) / 100f;
+        float scaleFactor = r.getInteger(R.integer.config_appsCustomizeZoomScaleFactor) / 100f;
         availableHeight -= screenHeight * scaleFactor;
         if (availableHeight > 0) {
             return Math.min(mMaxCellCountY,

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -172,7 +172,9 @@ private int determineCellCountY(int availableHeight, PagedViewCellLayout layout)
 
         availableHeight -= mPageLayoutPaddingTop + mPageLayoutPaddingBottom;
         availableHeight -= cellHeight; // Assume at least one row
-        availableHeight -= screenHeight * 0.16f;
+        Resources r = getContext().getResources();
+        float scaleFactor = r.getInteger(R.integer.config_allAppsZoomScaleFactor) / 100f;
+        availableHeight -= screenHeight * scaleFactor;
         if (availableHeight > 0) {
             return Math.min(mMaxCellCountY,
                     1 + availableHeight / (cellHeight + mPageLayoutHeightGap));

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -174,7 +174,9 @@ private int determineCellCountY(int availableHeight, PagedViewCellLayout layout)
 
         availableHeight -= mPageLayoutPaddingTop + mPageLayoutPaddingBottom;
         availableHeight -= cellHeight; // Assume at least one row
-        availableHeight -= screenHeight * 0.16f;
+        Resources r = getContext().getResources();
+        float scaleFactor = r.getInteger(R.integer.config_allAppsZoomScaleFactor) / 100f;
+        availableHeight -= screenHeight * scaleFactor;
         if (availableHeight > 0) {
             return Math.min(mMaxCellCountY,
                     1 + availableHeight / (cellHeight + mPageLayoutHeightGap));

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -174,7 +174,9 @@ private int determineCellCountY(int availableHeight, PagedViewCellLayout layout)
 
         availableHeight -= mPageLayoutPaddingTop + mPageLayoutPaddingBottom;
         availableHeight -= cellHeight; // Assume at least one row
-        availableHeight -= screenHeight * 0.16f;
+        Resources r = getContext().getResources();
+        float scaleFactor = r.getInteger(R.integer.config_allAppsZoomScaleFactor) / 100f;
+        availableHeight -= screenHeight * scaleFactor;
         if (availableHeight > 0) {
             return Math.min(mMaxCellCountY,
                     1 + availableHeight / (cellHeight + mPageLayoutHeightGap));

File: src/com/android/launcher2/CustomizeTrayTabHost.java
Patch:
@@ -81,7 +81,7 @@ public View createTabContent(String tag) {
                 .setIndicator(tabView).setContent(contentFactory));
         tabView = (TextView) mInflater.inflate(
                 R.layout.customize_tab_widget_indicator, tabWidget, false);
-        tabView.setText(mContext.getString(R.string.applications_tab_label));
+        tabView.setText(mContext.getString(R.string.all_apps_tab_apps));
         addTab(newTabSpec(APPLICATIONS_TAG)
                 .setIndicator(tabView).setContent(contentFactory));
         tabView = (TextView) mInflater.inflate(

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -174,7 +174,9 @@ private int determineCellCountY(int availableHeight, PagedViewCellLayout layout)
 
         availableHeight -= mPageLayoutPaddingTop + mPageLayoutPaddingBottom;
         availableHeight -= cellHeight; // Assume at least one row
-        availableHeight -= screenHeight * 0.16f;
+        Resources r = getContext().getResources();
+        float scaleFactor = r.getInteger(R.integer.config_allAppsZoomScaleFactor) / 100f;
+        availableHeight -= screenHeight * scaleFactor;
         if (availableHeight > 0) {
             return Math.min(mMaxCellCountY,
                     1 + availableHeight / (cellHeight + mPageLayoutHeightGap));

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -174,7 +174,9 @@ private int determineCellCountY(int availableHeight, PagedViewCellLayout layout)
 
         availableHeight -= mPageLayoutPaddingTop + mPageLayoutPaddingBottom;
         availableHeight -= cellHeight; // Assume at least one row
-        availableHeight -= screenHeight * 0.16f;
+        Resources r = getContext().getResources();
+        float scaleFactor = r.getInteger(R.integer.config_allAppsZoomScaleFactor) / 100f;
+        availableHeight -= screenHeight * scaleFactor;
         if (availableHeight > 0) {
             return Math.min(mMaxCellCountY,
                     1 + availableHeight / (cellHeight + mPageLayoutHeightGap));

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -113,8 +113,8 @@ public abstract class PagedView extends ViewGroup {
     protected int mPageLayoutWidthGap;
     protected int mPageLayoutHeightGap;
     protected int mPageLayoutMaxHeight;
-    protected int mCellCountX = -1;
-    protected int mCellCountY = -1;
+    protected int mCellCountX = 0;
+    protected int mCellCountY = 0;
     protected boolean mCenterPagesVertically;
     protected boolean mAllowOverScroll = true;
     protected int mUnboundedScrollX;

File: src/com/android/launcher2/CachedTextView.java
Patch:
@@ -107,7 +107,7 @@ private void buildAndUpdateCache() {
         int width = (int) (textCacheRight - mTextCacheLeft + (2 * xCharWidth));
         int height = (int) (textCacheBottom - mTextCacheTop);
 
-        if (width != 0 && height != 0) {
+        if (width > 0 && height > 0) {
             if (mCache != null) {
                 if (mCache.getWidth() != width || mCache.getHeight() != height) {
                     mCache.recycle();

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -111,8 +111,8 @@ public abstract class PagedView extends ViewGroup {
     protected int mPageLayoutWidthGap;
     protected int mPageLayoutHeightGap;
     protected int mPageLayoutMaxHeight;
-    protected int mCellCountX = -1;
-    protected int mCellCountY = -1;
+    protected int mCellCountX = 0;
+    protected int mCellCountY = 0;
     protected boolean mCenterPagesVertically;
     protected boolean mAllowOverScroll = true;
     protected int mUnboundedScrollX;

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -111,8 +111,8 @@ public abstract class PagedView extends ViewGroup {
     protected int mPageLayoutWidthGap;
     protected int mPageLayoutHeightGap;
     protected int mPageLayoutMaxHeight;
-    protected int mCellCountX = -1;
-    protected int mCellCountY = -1;
+    protected int mCellCountX = 0;
+    protected int mCellCountY = 0;
     protected boolean mCenterPagesVertically;
     protected boolean mAllowOverScroll = true;
     protected int mUnboundedScrollX;

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -111,8 +111,8 @@ public abstract class PagedView extends ViewGroup {
     protected int mPageLayoutWidthGap;
     protected int mPageLayoutHeightGap;
     protected int mPageLayoutMaxHeight;
-    protected int mCellCountX = -1;
-    protected int mCellCountY = -1;
+    protected int mCellCountX = 0;
+    protected int mCellCountY = 0;
     protected boolean mCenterPagesVertically;
     protected boolean mAllowOverScroll = true;
     protected int mUnboundedScrollX;

File: src/com/android/launcher2/AllAppsBackground.java
Patch:
@@ -25,8 +25,8 @@
 import android.view.View;
 
 /**
- * An implementation of PagedView that populates the pages of the workspace
- * with all of the user's applications.
+ * The background for AllApps which moves independently of the AllApps tray (for example, when we
+ * transition between AllApps and the Workspace while in spring-loaded mode).
  */
 public class AllAppsBackground extends View {
     private Drawable mBackground;

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -31,7 +31,6 @@
 import android.os.Message;
 import android.util.AttributeSet;
 import android.view.KeyEvent;
-import android.view.View;
 import android.widget.Checkable;
 
 import com.android.launcher.R;

File: src/com/android/launcher2/AllAppsBackground.java
Patch:
@@ -25,8 +25,8 @@
 import android.view.View;
 
 /**
- * An implementation of PagedView that populates the pages of the workspace
- * with all of the user's applications.
+ * The background for AllApps which moves independently of the AllApps tray (for example, when we
+ * transition between AllApps and the Workspace while in spring-loaded mode).
  */
 public class AllAppsBackground extends View {
     private Drawable mBackground;

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -31,7 +31,6 @@
 import android.os.Message;
 import android.util.AttributeSet;
 import android.view.KeyEvent;
-import android.view.View;
 import android.widget.Checkable;
 
 import com.android.launcher.R;

File: src/com/android/launcher2/Folder.java
Patch:
@@ -219,6 +219,7 @@ void bind(FolderInfo info) {
             ShortcutInfo child = (ShortcutInfo) children.get(i);
             createAndAddShortcut(child);
         }
+        mItemsInvalidated = true;
         mInfo.addListener(this);
     }
 

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -270,7 +270,7 @@ protected void onDraw(Canvas canvas) {
 
         ArrayList<View> items = mFolder.getItemsInReadingOrder();
         int firstItemIndex = Math.max(0, items.size() - NUM_ITEMS_IN_PREVIEW);
-        for (int i = firstItemIndex; i < mFolder.getItemCount(); i++) {
+        for (int i = firstItemIndex; i < items.size(); i++) {
             v = (TextView) items.get(i);
             d = v.getCompoundDrawables()[1];
 

File: src/com/android/launcher2/Folder.java
Patch:
@@ -219,6 +219,7 @@ void bind(FolderInfo info) {
             ShortcutInfo child = (ShortcutInfo) children.get(i);
             createAndAddShortcut(child);
         }
+        mItemsInvalidated = true;
         mInfo.addListener(this);
     }
 

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -270,7 +270,7 @@ protected void onDraw(Canvas canvas) {
 
         ArrayList<View> items = mFolder.getItemsInReadingOrder();
         int firstItemIndex = Math.max(0, items.size() - NUM_ITEMS_IN_PREVIEW);
-        for (int i = firstItemIndex; i < mFolder.getItemCount(); i++) {
+        for (int i = firstItemIndex; i < items.size(); i++) {
             v = (TextView) items.get(i);
             d = v.getCompoundDrawables()[1];
 

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -561,8 +561,7 @@ public void syncAppsPageItems(int page) {
             int index = i - startIndex;
             int x = index % mCellCountX;
             int y = index / mCellCountX;
-            layout.addViewToCellLayout(icon, -1, i, new PagedViewCellLayout.LayoutParams(x,y, 1,1),
-                    isHardwareAccelerated() && (numPages > 1));
+            layout.addViewToCellLayout(icon, -1, i, new PagedViewCellLayout.LayoutParams(x,y, 1,1));
         }
     }
     /*

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -561,8 +561,7 @@ public void syncAppsPageItems(int page) {
             int index = i - startIndex;
             int x = index % mCellCountX;
             int y = index / mCellCountX;
-            layout.addViewToCellLayout(icon, -1, i, new PagedViewCellLayout.LayoutParams(x,y, 1,1),
-                    isHardwareAccelerated() && (numPages > 1));
+            layout.addViewToCellLayout(icon, -1, i, new PagedViewCellLayout.LayoutParams(x,y, 1,1));
         }
     }
     /*

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -556,7 +556,8 @@ public void syncPageItems(int page) {
                 final int index = i - startIndex;
                 final ApplicationInfo info = mFilteredApps.get(i);
                 PagedViewIcon icon = (PagedViewIcon) layout.getChildOnPageAt(index);
-                icon.applyFromApplicationInfo(info, mPageViewIconCache, true, (numPages > 1));
+                icon.applyFromApplicationInfo(
+                        info, mPageViewIconCache, true, isHardwareAccelerated() && (numPages > 1));
 
                 PagedViewCellLayout.LayoutParams params =
                     (PagedViewCellLayout.LayoutParams) icon.getLayoutParams();

File: src/com/android/launcher2/AppsCustomizePagedView.java
Patch:
@@ -503,7 +503,8 @@ public void syncAppsPageItems(int page) {
             ApplicationInfo info = mApps.get(i);
             PagedViewIcon icon = (PagedViewIcon) mLayoutInflater.inflate(
                     R.layout.apps_customize_application, layout, false);
-            icon.applyFromApplicationInfo(info, mPageViewIconCache, true, (numPages > 1));
+            icon.applyFromApplicationInfo(
+                    info, mPageViewIconCache, true, isHardwareAccelerated() && (numPages > 1));
             icon.setOnClickListener(this);
             icon.setOnLongClickListener(this);
             icon.setOnTouchListener(this);

File: src/com/android/launcher2/CellLayoutChildren.java
Patch:
@@ -16,12 +16,9 @@
 
 package com.android.launcher2;
 
-import java.util.ArrayList;
-
 import android.app.WallpaperManager;
 import android.content.Context;
 import android.graphics.Rect;
-import android.view.MotionEvent;
 import android.view.View;
 import android.view.ViewGroup;
 

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -1078,7 +1078,8 @@ private void syncAppPageItems(int page) {
             final ApplicationInfo info = mApps.get(i);
             PagedViewIcon icon = (PagedViewIcon) mInflater.inflate(
                     R.layout.all_apps_paged_view_application, layout, false);
-            icon.applyFromApplicationInfo(info, mPageViewIconCache, true, (numPages > 1));
+            icon.applyFromApplicationInfo(
+                    info, mPageViewIconCache, true, isHardwareAccelerated() && (numPages > 1));
             icon.setOnClickListener(this);
             icon.setOnTouchListener(this);
             icon.setOnLongClickListener(this);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -155,7 +155,6 @@ public class Workspace extends SmoothPagedView
     private int[] mTempCell = new int[2];
     private int[] mTempEstimate = new int[2];
     private float[] mDragViewVisualCenter = new float[2];
-    private float[] mTempOriginXY = new float[2];
     private float[] mTempDragCoordinates = new float[2];
     private float[] mTempTouchCoordinates = new float[2];
     private float[] mTempCellLayoutCenterCoordinates = new float[2];

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -291,8 +291,8 @@ public void run() {
 
     public void snapToWidget(boolean animate) {
         final DragLayer.LayoutParams lp = (DragLayer.LayoutParams) getLayoutParams();
-        int xOffset = mCellLayout.getLeft() - mWorkspace.getScrollX();
-        int yOffset = mCellLayout.getTop() - mWorkspace.getScrollY();
+        int xOffset = mCellLayout.getLeft() + mCellLayout.getLeftPadding() - mWorkspace.getScrollX();
+        int yOffset = mCellLayout.getTop() + mCellLayout.getTopPadding() - mWorkspace.getScrollY();
 
         int newWidth = mWidgetView.getWidth() + 2 * mBackgroundPadding;
         int newHeight = mWidgetView.getHeight() + 2 * mBackgroundPadding;

File: src/com/android/launcher2/AppWidgetResizeFrame.java
Patch:
@@ -291,8 +291,8 @@ public void run() {
 
     public void snapToWidget(boolean animate) {
         final DragLayer.LayoutParams lp = (DragLayer.LayoutParams) getLayoutParams();
-        int xOffset = mCellLayout.getLeft() - mWorkspace.getScrollX();
-        int yOffset = mCellLayout.getTop() - mWorkspace.getScrollY();
+        int xOffset = mCellLayout.getLeft() + mCellLayout.getLeftPadding() - mWorkspace.getScrollX();
+        int yOffset = mCellLayout.getTop() + mCellLayout.getTopPadding() - mWorkspace.getScrollY();
 
         int newWidth = mWidgetView.getWidth() + 2 * mBackgroundPadding;
         int newHeight = mWidgetView.getHeight() + 2 * mBackgroundPadding;

File: src/com/android/launcher2/AppsCustomizeTabHost.java
Patch:
@@ -23,7 +23,6 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.TabHost;
-import android.widget.TabWidget;
 import android.widget.TextView;
 
 import com.android.launcher.R;
@@ -68,11 +67,9 @@ public View createTabContent(String tag) {
         tabView = (TextView) mLayoutInflater.inflate(R.layout.tab_widget_indicator, tabs, false);
         tabView.setText(mContext.getString(R.string.all_apps_button_label));
         addTab(newTabSpec(APPS_TAB_TAG).setIndicator(tabView).setContent(contentFactory));
-        /** TODO-APPS_CUSTOMIZE: Re-enable widgets tab
         tabView = (TextView) mLayoutInflater.inflate(R.layout.tab_widget_indicator, tabs, false);
         tabView.setText(mContext.getString(R.string.widgets_tab_label));
         addTab(newTabSpec(WIDGETS_TAB_TAG).setIndicator(tabView).setContent(contentFactory));
-        */
         setOnTabChangedListener(this);
 
         // Set the width of the tab bar to match the content (for now)

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -180,7 +180,9 @@ public void applyFromAppWidgetProviderInfo(AppWidgetProviderInfo info,
             FastBitmapDrawable preview, int maxWidth, int[] cellSpan,
             PagedViewIconCache cache, boolean createHolographicOutline) {
         final ImageView image = (ImageView) findViewById(R.id.widget_preview);
-        image.setMaxWidth(maxWidth);
+        if (maxWidth > -1) {
+            image.setMaxWidth(maxWidth);
+        }
         image.setImageDrawable(preview);
         mPreviewImageView = image;
         final TextView name = (TextView) findViewById(R.id.widget_name);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -853,7 +853,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
         int count = getChildCount();
         for (int i = 0; i < count; i++) {
             View child = getChildAt(i);
-            child.layout(mLeftPadding, mTopPadding, r - mRightPadding , b - mBottomPadding);
+            child.layout(mLeftPadding, mTopPadding, r - l - mRightPadding , b - t - mBottomPadding);
         }
     }
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -853,7 +853,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
         int count = getChildCount();
         for (int i = 0; i < count; i++) {
             View child = getChildAt(i);
-            child.layout(mLeftPadding, mTopPadding, r - mRightPadding , b - mBottomPadding);
+            child.layout(mLeftPadding, mTopPadding, r - l - mRightPadding , b - t - mBottomPadding);
         }
     }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2179,6 +2179,7 @@ void startDrag(CellLayout.CellInfo cellInfo) {
             dragRect = new Rect(left, top, right, bottom);
         }
 
+        mLauncher.lockScreenOrientation();
         mDragController.startDrag(b, screenX, screenY, this, child.getTag(),
                 DragController.DRAG_ACTION_MOVE, dragRect);
         b.recycle();

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2164,6 +2164,7 @@ void startDrag(CellLayout.CellInfo cellInfo) {
             dragRect = new Rect(left, top, right, bottom);
         }
 
+        mLauncher.lockScreenOrientation();
         mDragController.startDrag(b, screenX, screenY, this, child.getTag(),
                 DragController.DRAG_ACTION_MOVE, dragRect);
         b.recycle();

File: src/com/android/launcher2/CellLayoutChildren.java
Patch:
@@ -66,7 +66,7 @@ public View getChildAt(int x, int y) {
             CellLayout.LayoutParams lp = (CellLayout.LayoutParams) child.getLayoutParams();
 
             if ((lp.cellX <= x) && (x < lp.cellX + lp.cellHSpan) &&
-                    (lp.cellY <= y) && (y < lp.cellY + lp.cellHSpan)) {
+                    (lp.cellY <= y) && (y < lp.cellY + lp.cellVSpan)) {
                 return child;
             }
         }

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -488,8 +488,6 @@ public void onAnimationEnd(Animator animation) {
 
     @Override
     public void onClick(final View v) {
-        // Return early if this is not initiated from a touch
-        if (!v.isInTouchMode()) return;
         // Return early if we are still animating the pages
         if (mNextPage != INVALID_PAGE) return;
 

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1166,7 +1166,7 @@ protected void onWallpaperTap(MotionEvent ev) {
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
         int page = indexOfChild(child);
-        if (page >= 0 && !isInTouchMode()) {
+        if (page >= 0 && page != getCurrentPage() && !isInTouchMode()) {
             snapToPage(page);
         }
     }

File: src/com/android/launcher2/PagedViewExtendedLayout.java
Patch:
@@ -26,7 +26,7 @@
  * The linear layout used strictly for the widget/wallpaper tab of the customization tray
  */
 public class PagedViewExtendedLayout extends LinearLayout implements Page {
-    static final String TAG = "PagedViewWidgetLayout";
+    static final String TAG = "PagedViewExtendedLayout";
 
     public PagedViewExtendedLayout(Context context) {
         this(context, null);

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -488,8 +488,6 @@ public void onAnimationEnd(Animator animation) {
 
     @Override
     public void onClick(final View v) {
-        // Return early if this is not initiated from a touch
-        if (!v.isInTouchMode()) return;
         // Return early if we are still animating the pages
         if (mNextPage != INVALID_PAGE) return;
 

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1166,7 +1166,7 @@ protected void onWallpaperTap(MotionEvent ev) {
     public void requestChildFocus(View child, View focused) {
         super.requestChildFocus(child, focused);
         int page = indexOfChild(child);
-        if (page >= 0 && !isInTouchMode()) {
+        if (page >= 0 && page != getCurrentPage() && !isInTouchMode()) {
             snapToPage(page);
         }
     }

File: src/com/android/launcher2/PagedViewExtendedLayout.java
Patch:
@@ -26,7 +26,7 @@
  * The linear layout used strictly for the widget/wallpaper tab of the customization tray
  */
 public class PagedViewExtendedLayout extends LinearLayout implements Page {
-    static final String TAG = "PagedViewWidgetLayout";
+    static final String TAG = "PagedViewExtendedLayout";
 
     public PagedViewExtendedLayout(Context context) {
         this(context, null);

File: src/com/android/launcher2/PagedViewCellLayout.java
Patch:
@@ -248,10 +248,10 @@ int getContentWidth() {
         // the right edge of the content of the rightmost icon
 
         // icons are centered within cells, find out how much padding that accounts for
-        return getWidthBeforeLayout() - (mCellWidth - Utilities.getIconContentSize());
+        return getWidthBeforeFirstLayout() - (mCellWidth - Utilities.getIconContentSize());
     }
 
-    int getWidthBeforeLayout() {
+    int getWidthBeforeFirstLayout() {
         return mCellCountX * mCellWidth + (mCellCountX - 1) * mWidthGap;
     }
 

File: src/com/android/launcher2/DragView.java
Patch:
@@ -87,8 +87,8 @@ public DragView(Context context, Bitmap bitmap, int registrationX, int registrat
             scale.setScale(scaleFactor, scaleFactor);
         }
 
-        final int offsetX = res.getInteger(R.integer.config_dragViewOffsetX);
-        final int offsetY = res.getInteger(R.integer.config_dragViewOffsetY);
+        final int offsetX = res.getDimensionPixelSize(R.dimen.dragViewOffsetX);
+        final int offsetY = res.getDimensionPixelSize(R.dimen.dragViewOffsetY);
 
         // Animate the view into the correct position
         mAnim = ValueAnimator.ofFloat(0.0f, 1.0f);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2175,8 +2175,8 @@ private void setPositionForDropAnimation(
         // Based on the position of the drag view, find the top left of the original view
         int viewX = dragViewX + (dragView.getWidth() - child.getWidth()) / 2;
         int viewY = dragViewY + (dragView.getHeight() - child.getHeight()) / 2;
-        viewX += getResources().getInteger(R.integer.config_dragViewOffsetX);
-        viewY += getResources().getInteger(R.integer.config_dragViewOffsetY);
+        viewX += getResources().getDimensionPixelSize(R.dimen.dragViewOffsetX);
+        viewY += getResources().getDimensionPixelSize(R.dimen.dragViewOffsetY);
 
         // Set its old pos (in the new parent's coordinates); it will be animated
         // in animateViewIntoPosition after the next layout pass

File: src/com/android/launcher2/AllApps2D.java
Patch:
@@ -143,7 +143,7 @@ protected void onFinishInflate() {
                 homeButton.setOnClickListener(
                     new View.OnClickListener() {
                         public void onClick(View v) {
-                            mLauncher.closeAllApps(true);
+                            mLauncher.showWorkspace(true);
                         }
                     });
             }
@@ -167,7 +167,7 @@ public boolean onKey(View v, int keyCode, KeyEvent event) {
 
         switch (keyCode) {
             case KeyEvent.KEYCODE_BACK:
-                mLauncher.closeAllApps(true);
+                mLauncher.showWorkspace(true);
                 break;
             default:
                 return false;
@@ -190,7 +190,7 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, int position, l
         app = new ApplicationInfo(app);
 
         mDragController.startDrag(view, this, app, DragController.DRAG_ACTION_COPY);
-        mLauncher.closeAllApps(true);
+        mLauncher.showWorkspace(true);
 
         return true;
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3106,7 +3106,7 @@ void closeAllApps(boolean animated) {
                 mAllAppsGrid.zoom(0.0f, animated);
             }
             ((View)mAllAppsGrid).setFocusable(false);
-            mWorkspace.getChildAt(mWorkspace.getCurrentPage()).requestFocus();
+            ((CellLayout) mWorkspace.getChildAt(mWorkspace.getCurrentPage())).getChildrenLayout().requestFocus();
         }
     }
 

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1177,6 +1177,9 @@ protected int getChildIndexForRelativeOffset(int relativeOffset) {
     protected void setMinimumWidthOverride(int minimumWidth) {
         mMinimumWidth = minimumWidth;
     }
+    protected void resetMinimumWidthOverride() {
+        mMinimumWidth = 0;
+    }
 
     protected int getChildWidth(int index) {
         return Math.max(mMinimumWidth, getChildAt(index).getMeasuredWidth());

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -1177,6 +1177,9 @@ protected int getChildIndexForRelativeOffset(int relativeOffset) {
     protected void setMinimumWidthOverride(int minimumWidth) {
         mMinimumWidth = minimumWidth;
     }
+    protected void resetMinimumWidthOverride() {
+        mMinimumWidth = 0;
+    }
 
     protected int getChildWidth(int index) {
         return Math.max(mMinimumWidth, getChildAt(index).getMeasuredWidth());

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1184,8 +1184,9 @@ protected void dispatchDraw(Canvas canvas) {
             final int pageCount = getChildCount();
             final long drawingTime = getDrawingTime();
             for (int i = 0; i < pageCount; i++) {
-                final View page = (View) getChildAt(i);
-                if (page.getVisibility() == VISIBLE && page.getAlpha() != 0f) {
+                final CellLayout page = (CellLayout) getChildAt(i);
+                if (page.getVisibility() == VISIBLE
+                        && (page.getAlpha() != 0f || page.getBackgroundAlpha() != 0f)) {
                     drawChild(canvas, page, drawingTime);
                 }
             }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1184,8 +1184,9 @@ protected void dispatchDraw(Canvas canvas) {
             final int pageCount = getChildCount();
             final long drawingTime = getDrawingTime();
             for (int i = 0; i < pageCount; i++) {
-                final View page = (View) getChildAt(i);
-                if (page.getVisibility() == VISIBLE && page.getAlpha() != 0f) {
+                final CellLayout page = (CellLayout) getChildAt(i);
+                if (page.getVisibility() == VISIBLE
+                        && (page.getAlpha() != 0f || page.getBackgroundAlpha() != 0f)) {
                     drawChild(canvas, page, drawingTime);
                 }
             }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1181,8 +1181,9 @@ protected void dispatchDraw(Canvas canvas) {
             final int pageCount = getChildCount();
             final long drawingTime = getDrawingTime();
             for (int i = 0; i < pageCount; i++) {
-                final View page = (View) getChildAt(i);
-                if (page.getVisibility() == VISIBLE && page.getAlpha() != 0f) {
+                final CellLayout page = (CellLayout) getChildAt(i);
+                if (page.getVisibility() == VISIBLE
+                        && (page.getAlpha() != 0f || page.getBackgroundAlpha() != 0f)) {
                     drawChild(canvas, page, drawingTime);
                 }
             }

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -452,6 +452,7 @@ private void animateDropOntoScreen(
             public void onAnimationEnd(Animator animation) {
                 dragLayer.removeView(view);
                 mLauncher.addExternalItemToScreen(info, layout);
+                info.dropPos = null;
             }
         });
         anim.start();

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -452,6 +452,7 @@ private void animateDropOntoScreen(
             public void onAnimationEnd(Animator animation) {
                 dragLayer.removeView(view);
                 mLauncher.addExternalItemToScreen(info, layout);
+                info.dropPos = null;
             }
         });
         anim.start();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1482,6 +1482,7 @@ protected void onNewIntent(Intent intent) {
                 mWorkspace.unshrink(alreadyOnHome);
             }
 
+            mWorkspace.exitWidgetResizeMode();
             if (alreadyOnHome && mState == State.WORKSPACE && !mWorkspace.isTouchActive()) {
                 mWorkspace.moveToDefaultScreen(true);
             }
@@ -2020,6 +2021,8 @@ public void onBackPressed() {
             dismissPreview(mPreviousView);
             dismissPreview(mNextView);
         } else {
+            mWorkspace.exitWidgetResizeMode();
+
             // Back button is a no-op here, but give at least some feedback for the button press
             mWorkspace.showOutlinesTemporarily();
         }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -114,7 +114,7 @@ public class Workspace extends SmoothPagedView
     private ValueAnimator mBackgroundFadeOutAnimation;
     private Drawable mBackground;
     private Drawable mCustomizeTrayBackground;
-    boolean mDrawBackground;
+    boolean mDrawBackground = true;
     private boolean mDrawCustomizeTrayBackground;
     private float mBackgroundAlpha = 0;
     private float mOverScrollMaxBackgroundAlpha = 0.0f;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -421,9 +421,6 @@ public void onAnimationEnd(Animator animation) {
             if (sGlobalSearchIcon == null || sVoiceSearchIcon == null || sAppMarketIcon == null) {
                 updateIconsAffectedByPackageManagerChanges();
             }
-            updateGlobalSearchIcon(sGlobalSearchIcon);
-            updateVoiceSearchIcon(sVoiceSearchIcon);
-            updateAppMarketIcon(sAppMarketIcon);
         }
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1482,6 +1482,7 @@ protected void onNewIntent(Intent intent) {
                 mWorkspace.unshrink(alreadyOnHome);
             }
 
+            mWorkspace.exitWidgetResizeMode();
             if (alreadyOnHome && mState == State.WORKSPACE && !mWorkspace.isTouchActive()) {
                 mWorkspace.moveToDefaultScreen(true);
             }
@@ -2020,6 +2021,8 @@ public void onBackPressed() {
             dismissPreview(mPreviousView);
             dismissPreview(mNextView);
         } else {
+            mWorkspace.exitWidgetResizeMode();
+
             // Back button is a no-op here, but give at least some feedback for the button press
             mWorkspace.showOutlinesTemporarily();
         }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -114,7 +114,7 @@ public class Workspace extends SmoothPagedView
     private ValueAnimator mBackgroundFadeOutAnimation;
     private Drawable mBackground;
     private Drawable mCustomizeTrayBackground;
-    boolean mDrawBackground;
+    boolean mDrawBackground = true;
     private boolean mDrawCustomizeTrayBackground;
     private float mBackgroundAlpha = 0;
     private float mOverScrollMaxBackgroundAlpha = 0.0f;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -421,9 +421,6 @@ public void onAnimationEnd(Animator animation) {
             if (sGlobalSearchIcon == null || sVoiceSearchIcon == null || sAppMarketIcon == null) {
                 updateIconsAffectedByPackageManagerChanges();
             }
-            updateGlobalSearchIcon(sGlobalSearchIcon);
-            updateVoiceSearchIcon(sVoiceSearchIcon);
-            updateAppMarketIcon(sAppMarketIcon);
         }
     }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -114,7 +114,7 @@ public class Workspace extends SmoothPagedView
     private ValueAnimator mBackgroundFadeOutAnimation;
     private Drawable mBackground;
     private Drawable mCustomizeTrayBackground;
-    boolean mDrawBackground;
+    boolean mDrawBackground = true;
     private boolean mDrawCustomizeTrayBackground;
     private float mBackgroundAlpha = 0;
     private float mOverScrollMaxBackgroundAlpha = 0.0f;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -421,9 +421,6 @@ public void onAnimationEnd(Animator animation) {
             if (sGlobalSearchIcon == null || sVoiceSearchIcon == null || sAppMarketIcon == null) {
                 updateIconsAffectedByPackageManagerChanges();
             }
-            updateGlobalSearchIcon(sGlobalSearchIcon);
-            updateVoiceSearchIcon(sVoiceSearchIcon);
-            updateAppMarketIcon(sAppMarketIcon);
         }
     }
 

File: src/com/android/launcher2/DragScroller.java
Patch:
@@ -26,13 +26,15 @@ public interface DragScroller {
 
     /**
      * The touch point has entered the scroll area; a scroll is imminent.
+     * This event will only occur while a drag is active.
      *
      * @param direction The scroll direction
      */
     void onEnterScrollArea(int direction);
 
     /**
      * The touch point has left the scroll area.
+     * NOTE: This may not be called, if a drop occurs inside the scroll area.
      */
     void onExitScrollArea();
 }

File: src/com/android/launcher2/DragScroller.java
Patch:
@@ -26,15 +26,13 @@ public interface DragScroller {
 
     /**
      * The touch point has entered the scroll area; a scroll is imminent.
-     * This event will only occur while a drag is active.
      *
      * @param direction The scroll direction
      */
     void onEnterScrollArea(int direction);
 
     /**
      * The touch point has left the scroll area.
-     * NOTE: This may not be called, if a drop occurs inside the scroll area.
      */
     void onExitScrollArea();
 }

File: src/com/android/launcher2/DragScroller.java
Patch:
@@ -26,13 +26,15 @@ public interface DragScroller {
 
     /**
      * The touch point has entered the scroll area; a scroll is imminent.
+     * This event will only occur while a drag is active.
      *
      * @param direction The scroll direction
      */
     void onEnterScrollArea(int direction);
 
     /**
      * The touch point has left the scroll area.
+     * NOTE: This may not be called, if a drop occurs inside the scroll area.
      */
     void onExitScrollArea();
 }

File: src/com/android/launcher2/DragScroller.java
Patch:
@@ -26,13 +26,15 @@ public interface DragScroller {
 
     /**
      * The touch point has entered the scroll area; a scroll is imminent.
+     * This event will only occur while a drag is active.
      *
      * @param direction The scroll direction
      */
     void onEnterScrollArea(int direction);
 
     /**
      * The touch point has left the scroll area.
+     * NOTE: This may not be called, if a drop occurs inside the scroll area.
      */
     void onExitScrollArea();
 }

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -171,9 +171,8 @@ protected void drawableStateChanged() {
     }
 
     /**
-     * Draw the View v into the given Canvas.
+     * Draw this BubbleTextView into the given Canvas.
      *
-     * @param v the view to draw
      * @param destCanvas the canvas to draw on
      * @param padding the horizontal and vertical padding to use when drawing
      */

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -171,9 +171,8 @@ protected void drawableStateChanged() {
     }
 
     /**
-     * Draw the View v into the given Canvas.
+     * Draw this BubbleTextView into the given Canvas.
      *
-     * @param v the view to draw
      * @param destCanvas the canvas to draw on
      * @param padding the horizontal and vertical padding to use when drawing
      */

File: src/com/android/launcher2/HolographicOutlineHelper.java
Patch:
@@ -32,6 +32,7 @@ public class HolographicOutlineHelper {
     private final Paint mAlphaClipPaint = new Paint();
 
     public static final int MAX_OUTER_BLUR_RADIUS;
+    public static final int MIN_OUTER_BLUR_RADIUS;
 
     private static final BlurMaskFilter sExtraThickOuterBlurMaskFilter;
     private static final BlurMaskFilter sThickOuterBlurMaskFilter;
@@ -48,6 +49,7 @@ public class HolographicOutlineHelper {
     static {
         final float scale = LauncherApplication.getScreenDensity();
 
+        MIN_OUTER_BLUR_RADIUS = (int) (scale * 1.0f);
         MAX_OUTER_BLUR_RADIUS = (int) (scale * 12.0f);
 
         sExtraThickOuterBlurMaskFilter = new BlurMaskFilter(scale * 12.0f, BlurMaskFilter.Blur.OUTER);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1449,7 +1449,7 @@ protected void onNewIntent(Intent intent) {
                 mWorkspace.unshrink(alreadyOnHome);
             }
 
-            if (alreadyOnHome && mState == State.WORKSPACE && !mWorkspace.isDefaultPageShowing()) {
+            if (alreadyOnHome && mState == State.WORKSPACE && !mWorkspace.isTouchActive()) {
                 mWorkspace.moveToDefaultScreen(true);
             }
             showWorkspace(alreadyOnHome);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -419,8 +419,8 @@ ArrayList<Folder> getOpenFolders() {
         return folders;
     }
 
-    boolean isDefaultPageShowing() {
-        return mCurrentPage == mDefaultPage;
+    boolean isTouchActive() {
+        return mTouchState != TOUCH_STATE_REST;
     }
 
     /**

File: src/com/android/launcher2/AllApps2D.java
Patch:
@@ -211,7 +211,7 @@ public void onDragViewVisible() {
     }
 
     @Override
-    public void onDropCompleted(View target, boolean success) {
+    public void onDropCompleted(View target, Object dragInfo, boolean success) {
     }
 
     /**

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -282,7 +282,7 @@ public void onDragViewVisible() {
     }
 
     @Override
-    public void onDropCompleted(View target, boolean success) {
+    public void onDropCompleted(View target, Object dragInfo, boolean success) {
         // close the choice action mode if we have a proper drop
         if (target != this) {
             endChoiceMode();

File: src/com/android/launcher2/DragSource.java
Patch:
@@ -31,5 +31,5 @@ public interface DragSource {
      */
     void onDragViewVisible();
 
-    void onDropCompleted(View target, boolean success);
+    void onDropCompleted(View target, Object dragInfo, boolean success);
 }

File: src/com/android/launcher2/Folder.java
Patch:
@@ -114,7 +114,7 @@ public void setDragController(DragController dragController) {
     }
 
     @Override
-    public void onDropCompleted(View target, boolean success) {
+    public void onDropCompleted(View target, Object dragInfo, boolean success) {
     }
 
     @Override

File: src/com/android/launcher2/UserFolder.java
Patch:
@@ -64,7 +64,7 @@ public void onDragExit(DragSource source, int x, int y, int xOffset, int yOffset
     }
 
     @Override
-    public void onDropCompleted(View target, boolean success) {
+    public void onDropCompleted(View target, Object dragInfo, boolean success) {
         if (success) {
             ShortcutsAdapter adapter = (ShortcutsAdapter)mContent.getAdapter();
             adapter.remove(mDragItem);

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -515,6 +515,7 @@ public void syncPageItems(int page) {
             layout.addViewToCellLayout(icon, -1, 0,
                     new PagedViewCellLayout.LayoutParams(0, 0, 4, 1));
         }
+        layout.createHardwareLayers();
     }
 
     /*

File: src/com/android/launcher2/PagedViewCellLayout.java
Patch:
@@ -141,6 +141,7 @@ public boolean addViewToCellLayout(View child, int index, int childId,
     public void removeAllViewsOnPage() {
         mChildren.removeAllViews();
         mHolographicChildren.removeAllViews();
+        destroyHardwareLayers();
     }
 
     @Override

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2007,7 +2007,9 @@ void closeFolder(Folder folder) {
      * Re-listen when widgets are reset.
      */
     private void onAppWidgetReset() {
-        mAppWidgetHost.startListening();
+        if (mAppWidgetHost != null) {
+            mAppWidgetHost.startListening();
+        }
     }
 
     /**

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2747,8 +2747,8 @@ private void onDropExternal(int x, int y, Object dragInfo,
             // widgets/shortcuts/folders in a slightly different way
             // Only set touchXY if you are supporting spring loaded adding of items
             int[] touchXY = new int[2];
-            touchXY[0] = x;
-            touchXY[1] = y;
+            touchXY[0] = mSpringLoadedDropX;
+            touchXY[1] = mSpringLoadedDropY;
             switch (info.itemType) {
                 case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
                     mLauncher.addAppWidgetFromDrop((PendingAddWidgetInfo) info, screen, touchXY);

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -544,9 +544,9 @@ protected void updateAdjacentPagesAlpha() {
                         alpha = 1.0f;
                     }
 
-                    if (Float.compare(alpha, layout.getAlpha()) != 0) {
+                    //if (Float.compare(alpha, layout.getAlpha()) != 0) {
                         layout.setAlpha(alpha);
-                    }
+                    //}
                 }
                 mDirtyPageAlpha = false;
             }

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -283,7 +283,7 @@ public void draw(Canvas canvas) {
         super.draw(canvas);
         canvas.save(Canvas.CLIP_SAVE_FLAG);
         canvas.clipRect(mScrollX, mScrollY + getExtendedPaddingTop(), mScrollX + getWidth(),
-                mScrollY + getHeight(), Region.Op.REPLACE);
+                mScrollY + getHeight(), Region.Op.INTERSECT);
         getPaint().setShadowLayer(SHADOW_SMALL_RADIUS, 0.0f, 0.0f, SHADOW_SMALL_COLOUR);
         super.draw(canvas);
         canvas.restore();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1971,7 +1971,9 @@ void closeFolder(Folder folder) {
      * Re-listen when widgets are reset.
      */
     private void onAppWidgetReset() {
-        mAppWidgetHost.startListening();
+        if (mAppWidgetHost != null) {
+            mAppWidgetHost.startListening();
+        }
     }
 
     /**

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2747,8 +2747,8 @@ private void onDropExternal(int x, int y, Object dragInfo,
             // widgets/shortcuts/folders in a slightly different way
             // Only set touchXY if you are supporting spring loaded adding of items
             int[] touchXY = new int[2];
-            touchXY[0] = x;
-            touchXY[1] = y;
+            touchXY[0] = mSpringLoadedDropX;
+            touchXY[1] = mSpringLoadedDropY;
             switch (info.itemType) {
                 case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
                     mLauncher.addAppWidgetFromDrop((PendingAddWidgetInfo) info, screen, touchXY);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2747,8 +2747,8 @@ private void onDropExternal(int x, int y, Object dragInfo,
             // widgets/shortcuts/folders in a slightly different way
             // Only set touchXY if you are supporting spring loaded adding of items
             int[] touchXY = new int[2];
-            touchXY[0] = x;
-            touchXY[1] = y;
+            touchXY[0] = mSpringLoadedDropX;
+            touchXY[1] = mSpringLoadedDropY;
             switch (info.itemType) {
                 case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
                     mLauncher.addAppWidgetFromDrop((PendingAddWidgetInfo) info, screen, touchXY);

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -544,9 +544,9 @@ protected void updateAdjacentPagesAlpha() {
                         alpha = 1.0f;
                     }
 
-                    if (Float.compare(alpha, layout.getAlpha()) != 0) {
+                    //if (Float.compare(alpha, layout.getAlpha()) != 0) {
                         layout.setAlpha(alpha);
-                    }
+                    //}
                 }
                 mDirtyPageAlpha = false;
             }

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -544,9 +544,9 @@ protected void updateAdjacentPagesAlpha() {
                         alpha = 1.0f;
                     }
 
-                    if (Float.compare(alpha, layout.getAlpha()) != 0) {
+                    //if (Float.compare(alpha, layout.getAlpha()) != 0) {
                         layout.setAlpha(alpha);
-                    }
+                    //}
                 }
                 mDirtyPageAlpha = false;
             }

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -283,7 +283,7 @@ public void draw(Canvas canvas) {
         super.draw(canvas);
         canvas.save(Canvas.CLIP_SAVE_FLAG);
         canvas.clipRect(mScrollX, mScrollY + getExtendedPaddingTop(), mScrollX + getWidth(),
-                mScrollY + getHeight(), Region.Op.REPLACE);
+                mScrollY + getHeight(), Region.Op.INTERSECT);
         getPaint().setShadowLayer(SHADOW_SMALL_RADIUS, 0.0f, 0.0f, SHADOW_SMALL_COLOUR);
         super.draw(canvas);
         canvas.restore();

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -283,7 +283,7 @@ public void draw(Canvas canvas) {
         super.draw(canvas);
         canvas.save(Canvas.CLIP_SAVE_FLAG);
         canvas.clipRect(mScrollX, mScrollY + getExtendedPaddingTop(), mScrollX + getWidth(),
-                mScrollY + getHeight(), Region.Op.REPLACE);
+                mScrollY + getHeight(), Region.Op.INTERSECT);
         getPaint().setShadowLayer(SHADOW_SMALL_RADIUS, 0.0f, 0.0f, SHADOW_SMALL_COLOUR);
         super.draw(canvas);
         canvas.restore();

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -283,7 +283,7 @@ public void draw(Canvas canvas) {
         super.draw(canvas);
         canvas.save(Canvas.CLIP_SAVE_FLAG);
         canvas.clipRect(mScrollX, mScrollY + getExtendedPaddingTop(), mScrollX + getWidth(),
-                mScrollY + getHeight(), Region.Op.REPLACE);
+                mScrollY + getHeight(), Region.Op.INTERSECT);
         getPaint().setShadowLayer(SHADOW_SMALL_RADIUS, 0.0f, 0.0f, SHADOW_SMALL_COLOUR);
         super.draw(canvas);
         canvas.restore();

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1580,7 +1580,7 @@ public float getInterpolation(float input) {
      */
     static class ZoomOutInterpolator implements TimeInterpolator {
         private final ZInterpolator zInterpolator = new ZInterpolator(0.2f);
-        private final DecelerateInterpolator decelerate = new DecelerateInterpolator(1.5f);
+        private final DecelerateInterpolator decelerate = new DecelerateInterpolator(1.8f);
 
         public float getInterpolation(float input) {
             return decelerate.getInterpolation(zInterpolator.getInterpolation(input));
@@ -1815,8 +1815,8 @@ void unshrink(boolean animated, boolean springLoaded) {
                 case BOTTOM_VISIBLE:
                     // all apps
                     if (animated) {
-                        mWallpaperOffset.setHorizontalCatchupConstant(isLandscape ? 0.49f : 0.46f);
-                        mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.49f : 0.46f);
+                        mWallpaperOffset.setHorizontalCatchupConstant(isLandscape ? 0.65f : 0.65f);
+                        mWallpaperOffset.setVerticalCatchupConstant(isLandscape ? 0.65f : 0.65f);
                         mWallpaperOffset.setOverrideHorizontalCatchupConstant(true);
                     }
                     break;

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -273,12 +273,12 @@ protected void notifyPageSwitchListener() {
         }
     }
 
-    private void pageBeginMoving() {
+    protected void pageBeginMoving() {
         mIsPageMoving = true;
         onPageBeginMoving();
     }
 
-    private void pageEndMoving() {
+    protected void pageEndMoving() {
         onPageEndMoving();
         mIsPageMoving = false;
     }

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -50,7 +50,7 @@
 
 import java.util.Arrays;
 
-public class CellLayout extends CachedViewGroup {
+public class CellLayout extends ViewGroup {
     static final String TAG = "CellLayout";
 
     private int mCellWidth;

File: src/com/android/launcher2/CellLayoutChildren.java
Patch:
@@ -44,6 +44,7 @@ public class CellLayoutChildren extends ViewGroup {
     public CellLayoutChildren(Context context) {
         super(context);
         mWallpaperManager = WallpaperManager.getInstance(context);
+        setLayerType(LAYER_TYPE_HARDWARE, null);
     }
 
     public void setCellDimensions(int cellWidth, int cellHeight,

File: src/com/android/launcher2/CellLayoutChildren.java
Patch:
@@ -167,5 +167,4 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
     protected void setChildrenDrawnWithCacheEnabled(boolean enabled) {
         super.setChildrenDrawnWithCacheEnabled(enabled);
     }
-}
-}
+}
\ No newline at end of file

File: src/com/android/launcher2/CellLayoutChildren.java
Patch:
@@ -167,5 +167,4 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
     protected void setChildrenDrawnWithCacheEnabled(boolean enabled) {
         super.setChildrenDrawnWithCacheEnabled(enabled);
     }
-}
-}
+}
\ No newline at end of file

File: src/com/android/launcher2/CellLayoutChildren.java
Patch:
@@ -167,5 +167,4 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
     protected void setChildrenDrawnWithCacheEnabled(boolean enabled) {
         super.setChildrenDrawnWithCacheEnabled(enabled);
     }
-}
-}
+}
\ No newline at end of file

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3331,7 +3331,8 @@ public void startBinding() {
         int count = workspace.getChildCount();
         for (int i = 0; i < count; i++) {
             // Use removeAllViewsInLayout() to avoid an extra requestLayout() and invalidate().
-            ((ViewGroup) workspace.getChildAt(i)).removeAllViewsInLayout();
+            final ViewGroup layout = ((CellLayout) workspace.getChildAt(i)).getChildrenLayout();
+            layout.removeAllViewsInLayout();
         }
 
         if (DEBUG_USER_INTERFACE) {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3331,7 +3331,8 @@ public void startBinding() {
         int count = workspace.getChildCount();
         for (int i = 0; i < count; i++) {
             // Use removeAllViewsInLayout() to avoid an extra requestLayout() and invalidate().
-            ((ViewGroup) workspace.getChildAt(i)).removeAllViewsInLayout();
+            final ViewGroup layout = ((CellLayout) workspace.getChildAt(i)).getChildrenLayout();
+            layout.removeAllViewsInLayout();
         }
 
         if (DEBUG_USER_INTERFACE) {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -3331,7 +3331,8 @@ public void startBinding() {
         int count = workspace.getChildCount();
         for (int i = 0; i < count; i++) {
             // Use removeAllViewsInLayout() to avoid an extra requestLayout() and invalidate().
-            ((ViewGroup) workspace.getChildAt(i)).removeAllViewsInLayout();
+            final ViewGroup layout = ((CellLayout) workspace.getChildAt(i)).getChildrenLayout();
+            layout.removeAllViewsInLayout();
         }
 
         if (DEBUG_USER_INTERFACE) {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2737,7 +2737,8 @@ void removeItems(final ArrayList<ApplicationInfo> apps) {
         }
 
         for (int i = 0; i < screenCount; i++) {
-            final CellLayout layout = (CellLayout) getChildAt(i);
+            final CellLayoutChildren layout =
+                (CellLayoutChildren) ((CellLayout) getChildAt(i)).getChildAt(0);
 
             // Avoid ANRs by treating each screen separately
             post(new Runnable() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2737,7 +2737,8 @@ void removeItems(final ArrayList<ApplicationInfo> apps) {
         }
 
         for (int i = 0; i < screenCount; i++) {
-            final CellLayout layout = (CellLayout) getChildAt(i);
+            final CellLayoutChildren layout =
+                (CellLayoutChildren) ((CellLayout) getChildAt(i)).getChildAt(0);
 
             // Avoid ANRs by treating each screen separately
             post(new Runnable() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2737,7 +2737,8 @@ void removeItems(final ArrayList<ApplicationInfo> apps) {
         }
 
         for (int i = 0; i < screenCount; i++) {
-            final CellLayout layout = (CellLayout) getChildAt(i);
+            final CellLayoutChildren layout =
+                (CellLayoutChildren) ((CellLayout) getChildAt(i)).getChildAt(0);
 
             // Avoid ANRs by treating each screen separately
             post(new Runnable() {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -2737,7 +2737,8 @@ void removeItems(final ArrayList<ApplicationInfo> apps) {
         }
 
         for (int i = 0; i < screenCount; i++) {
-            final CellLayout layout = (CellLayout) getChildAt(i);
+            final CellLayoutChildren layout =
+                (CellLayoutChildren) ((CellLayout) getChildAt(i)).getChildAt(0);
 
             // Avoid ANRs by treating each screen separately
             post(new Runnable() {

File: src/com/android/launcher2/WallpaperChooserDialogFragment.java
Patch:
@@ -111,6 +111,8 @@ public void onDismiss(DialogInterface dialog) {
      */
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
+        findWallpapers();
+
         final View v = getActivity().getLayoutInflater().inflate(
                 R.layout.wallpaper_chooser, null, false);
 

File: src/com/android/launcher2/WallpaperChooserDialogFragment.java
Patch:
@@ -111,6 +111,8 @@ public void onDismiss(DialogInterface dialog) {
      */
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
+        findWallpapers();
+
         final View v = getActivity().getLayoutInflater().inflate(
                 R.layout.wallpaper_chooser, null, false);
 

File: src/com/android/launcher2/WallpaperChooserDialogFragment.java
Patch:
@@ -111,6 +111,8 @@ public void onDismiss(DialogInterface dialog) {
      */
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
+        findWallpapers();
+
         final View v = getActivity().getLayoutInflater().inflate(
                 R.layout.wallpaper_chooser, null, false);
 

File: src/com/android/launcher2/WallpaperChooserDialogFragment.java
Patch:
@@ -111,6 +111,8 @@ public void onDismiss(DialogInterface dialog) {
      */
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
+        findWallpapers();
+
         final View v = getActivity().getLayoutInflater().inflate(
                 R.layout.wallpaper_chooser, null, false);
 

File: src/com/android/launcher2/WallpaperChooserDialogFragment.java
Patch:
@@ -111,6 +111,8 @@ public void onDismiss(DialogInterface dialog) {
      */
     @Override
     public Dialog onCreateDialog(Bundle savedInstanceState) {
+        findWallpapers();
+
         final View v = getActivity().getLayoutInflater().inflate(
                 R.layout.wallpaper_chooser, null, false);
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -305,6 +305,9 @@ public void setHoverScale(float scaleFactor) {
         if (scaleFactor != mGlowBackgroundScale) {
             mGlowBackgroundScale = scaleFactor;
             updateGlowRect();
+            if (getParent() != null) {
+                ((View) getParent()).invalidate();
+            }
         }
     }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -125,7 +125,6 @@ public class Workspace extends SmoothPagedView
 
     private int mDefaultPage;
 
-    private boolean mPageMoving = false;
     private boolean mIsDragInProcess = false;
 
     /**
@@ -549,7 +548,6 @@ protected void onPageBeginMoving() {
             enableChildrenCache(mCurrentPage - 1, mCurrentPage + 1);
         }
         showOutlines();
-        mPageMoving = true;
     }
 
     protected void onPageEndMoving() {
@@ -560,7 +558,6 @@ protected void onPageEndMoving() {
         }
         mOverScrollMaxBackgroundAlpha = 0.0f;
         mOverScrollPageIndex = -1;
-        mPageMoving = false;
     }
 
     @Override

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -305,6 +305,9 @@ public void setHoverScale(float scaleFactor) {
         if (scaleFactor != mGlowBackgroundScale) {
             mGlowBackgroundScale = scaleFactor;
             updateGlowRect();
+            if (getParent() != null) {
+                ((View) getParent()).invalidate();
+            }
         }
     }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -125,7 +125,6 @@ public class Workspace extends SmoothPagedView
 
     private int mDefaultPage;
 
-    private boolean mPageMoving = false;
     private boolean mIsDragInProcess = false;
 
     /**
@@ -549,7 +548,6 @@ protected void onPageBeginMoving() {
             enableChildrenCache(mCurrentPage - 1, mCurrentPage + 1);
         }
         showOutlines();
-        mPageMoving = true;
     }
 
     protected void onPageEndMoving() {
@@ -560,7 +558,6 @@ protected void onPageEndMoving() {
         }
         mOverScrollMaxBackgroundAlpha = 0.0f;
         mOverScrollPageIndex = -1;
-        mPageMoving = false;
     }
 
     @Override

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -305,6 +305,9 @@ public void setHoverScale(float scaleFactor) {
         if (scaleFactor != mGlowBackgroundScale) {
             mGlowBackgroundScale = scaleFactor;
             updateGlowRect();
+            if (getParent() != null) {
+                ((View) getParent()).invalidate();
+            }
         }
     }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -125,7 +125,6 @@ public class Workspace extends SmoothPagedView
 
     private int mDefaultPage;
 
-    private boolean mPageMoving = false;
     private boolean mIsDragInProcess = false;
 
     /**
@@ -549,7 +548,6 @@ protected void onPageBeginMoving() {
             enableChildrenCache(mCurrentPage - 1, mCurrentPage + 1);
         }
         showOutlines();
-        mPageMoving = true;
     }
 
     protected void onPageEndMoving() {
@@ -560,7 +558,6 @@ protected void onPageEndMoving() {
         }
         mOverScrollMaxBackgroundAlpha = 0.0f;
         mOverScrollPageIndex = -1;
-        mPageMoving = false;
     }
 
     @Override

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -308,6 +308,9 @@ public void setHoverScale(float scaleFactor) {
         if (scaleFactor != mGlowBackgroundScale) {
             mGlowBackgroundScale = scaleFactor;
             updateGlowRect();
+            if (getParent() != null) {
+                ((View) getParent()).invalidate();
+            }
         }
     }
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -125,7 +125,6 @@ public class Workspace extends SmoothPagedView
 
     private int mDefaultPage;
 
-    private boolean mPageMoving = false;
     private boolean mIsDragInProcess = false;
 
     /**
@@ -549,7 +548,6 @@ protected void onPageBeginMoving() {
             enableChildrenCache(mCurrentPage - 1, mCurrentPage + 1);
         }
         showOutlines();
-        mPageMoving = true;
     }
 
     protected void onPageEndMoving() {
@@ -560,7 +558,6 @@ protected void onPageEndMoving() {
         }
         mOverScrollMaxBackgroundAlpha = 0.0f;
         mOverScrollPageIndex = -1;
-        mPageMoving = false;
     }
 
     @Override

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -288,7 +288,7 @@ public void onDropCompleted(View target, boolean success) {
             endChoiceMode();
         }
         tearDownDragMode();
-        mLauncher.getWorkspace().onDragStopped();
+        mLauncher.getWorkspace().onDragStopped(success);
         mLauncher.unlockScreenOrientation();
     }
 

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -327,7 +327,7 @@ public CustomizationType getCustomizationFilter() {
     @Override
     public void onDropCompleted(View target, boolean success) {
         resetCheckedGrandchildren();
-        mLauncher.getWorkspace().onDragStopped();
+        mLauncher.getWorkspace().onDragStopped(success);
         mLauncher.unlockScreenOrientation();
     }
 

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -288,7 +288,7 @@ public void onDropCompleted(View target, boolean success) {
             endChoiceMode();
         }
         tearDownDragMode();
-        mLauncher.getWorkspace().onDragStopped();
+        mLauncher.getWorkspace().onDragStopped(success);
         mLauncher.unlockScreenOrientation();
     }
 

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -327,7 +327,7 @@ public CustomizationType getCustomizationFilter() {
     @Override
     public void onDropCompleted(View target, boolean success) {
         resetCheckedGrandchildren();
-        mLauncher.getWorkspace().onDragStopped();
+        mLauncher.getWorkspace().onDragStopped(success);
         mLauncher.unlockScreenOrientation();
     }
 

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -288,7 +288,7 @@ public void onDropCompleted(View target, boolean success) {
             endChoiceMode();
         }
         tearDownDragMode();
-        mLauncher.getWorkspace().onDragStopped();
+        mLauncher.getWorkspace().onDragStopped(success);
         mLauncher.unlockScreenOrientation();
     }
 

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -327,7 +327,7 @@ public CustomizationType getCustomizationFilter() {
     @Override
     public void onDropCompleted(View target, boolean success) {
         resetCheckedGrandchildren();
-        mLauncher.getWorkspace().onDragStopped();
+        mLauncher.getWorkspace().onDragStopped(success);
         mLauncher.unlockScreenOrientation();
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2231,7 +2231,9 @@ public boolean onLongClick(View v) {
                 mWorkspace.setAllowLongPress(false);
                 mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
                         HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
-                if (!LauncherApplication.isScreenXLarge()) {
+                if (LauncherApplication.isScreenXLarge()) {
+                    addItems();
+                } else {
                     showAddDialog(longClickCellInfo.cellX, longClickCellInfo.cellY);
                 }
             } else {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2231,7 +2231,9 @@ public boolean onLongClick(View v) {
                 mWorkspace.setAllowLongPress(false);
                 mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
                         HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
-                if (!LauncherApplication.isScreenXLarge()) {
+                if (LauncherApplication.isScreenXLarge()) {
+                    addItems();
+                } else {
                     showAddDialog(longClickCellInfo.cellX, longClickCellInfo.cellY);
                 }
             } else {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2231,7 +2231,9 @@ public boolean onLongClick(View v) {
                 mWorkspace.setAllowLongPress(false);
                 mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
                         HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
-                if (!LauncherApplication.isScreenXLarge()) {
+                if (LauncherApplication.isScreenXLarge()) {
+                    addItems();
+                } else {
                     showAddDialog(longClickCellInfo.cellX, longClickCellInfo.cellY);
                 }
             } else {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2231,7 +2231,9 @@ public boolean onLongClick(View v) {
                 mWorkspace.setAllowLongPress(false);
                 mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
                         HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
-                if (!LauncherApplication.isScreenXLarge()) {
+                if (LauncherApplication.isScreenXLarge()) {
+                    addItems();
+                } else {
                     showAddDialog(longClickCellInfo.cellX, longClickCellInfo.cellY);
                 }
             } else {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1439,6 +1439,7 @@ void unshrink(boolean animated) {
     }
 
     void unshrink(boolean animated, boolean springLoaded) {
+        mWaitingToShrink = false;
         if (mIsSmall) {
             float finalScaleFactor = 1.0f;
             float finalBackgroundAlpha = 0.0f;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2681,7 +2681,6 @@ private void cameraZoomOut(State toState, boolean animated) {
 
         if (toAllApps) {
             mWorkspace.shrink(ShrinkState.BOTTOM_HIDDEN, animated);
-            toView.setAlpha(0f);
         } else {
             mWorkspace.shrink(ShrinkState.TOP, animated);
         }
@@ -2694,6 +2693,7 @@ private void cameraZoomOut(State toState, boolean animated) {
             scaleAnim.setDuration(duration);
 
             if (toAllApps) {
+                toView.setAlpha(0f);
                 ObjectAnimator alphaAnim = ObjectAnimator.ofPropertyValuesHolder(toView,
                         PropertyValuesHolder.ofFloat("alpha", 1.0f));
                 alphaAnim.setInterpolator(new DecelerateInterpolator(1.5f));

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1439,6 +1439,7 @@ void unshrink(boolean animated) {
     }
 
     void unshrink(boolean animated, boolean springLoaded) {
+        mWaitingToShrink = false;
         if (mIsSmall) {
             float finalScaleFactor = 1.0f;
             float finalBackgroundAlpha = 0.0f;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1439,6 +1439,7 @@ void unshrink(boolean animated) {
     }
 
     void unshrink(boolean animated, boolean springLoaded) {
+        mWaitingToShrink = false;
         if (mIsSmall) {
             float finalScaleFactor = 1.0f;
             float finalBackgroundAlpha = 0.0f;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2681,7 +2681,6 @@ private void cameraZoomOut(State toState, boolean animated) {
 
         if (toAllApps) {
             mWorkspace.shrink(ShrinkState.BOTTOM_HIDDEN, animated);
-            toView.setAlpha(0f);
         } else {
             mWorkspace.shrink(ShrinkState.TOP, animated);
         }
@@ -2694,6 +2693,7 @@ private void cameraZoomOut(State toState, boolean animated) {
             scaleAnim.setDuration(duration);
 
             if (toAllApps) {
+                toView.setAlpha(0f);
                 ObjectAnimator alphaAnim = ObjectAnimator.ofPropertyValuesHolder(toView,
                         PropertyValuesHolder.ofFloat("alpha", 1.0f));
                 alphaAnim.setInterpolator(new DecelerateInterpolator(1.5f));

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2681,7 +2681,6 @@ private void cameraZoomOut(State toState, boolean animated) {
 
         if (toAllApps) {
             mWorkspace.shrink(ShrinkState.BOTTOM_HIDDEN, animated);
-            toView.setAlpha(0f);
         } else {
             mWorkspace.shrink(ShrinkState.TOP, animated);
         }
@@ -2694,6 +2693,7 @@ private void cameraZoomOut(State toState, boolean animated) {
             scaleAnim.setDuration(duration);
 
             if (toAllApps) {
+                toView.setAlpha(0f);
                 ObjectAnimator alphaAnim = ObjectAnimator.ofPropertyValuesHolder(toView,
                         PropertyValuesHolder.ofFloat("alpha", 1.0f));
                 alphaAnim.setInterpolator(new DecelerateInterpolator(1.5f));

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1622,10 +1622,8 @@ void startDrag(CellLayout.CellInfo cellInfo) {
         }
 
         mDragInfo = cellInfo;
-        mDragInfo.screen = mCurrentPage;
-
-        CellLayout current = getCurrentDropLayout();
 
+        CellLayout current = (CellLayout) getChildAt(cellInfo.screen);
         current.onDragChild(child);
 
         child.clearFocus();

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -332,6 +332,8 @@ private void addAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
             final int index = Collections.binarySearch(mApps, info, LauncherModel.APP_NAME_COMPARATOR);
             if (index < 0) {
                 mApps.add(-(index + 1), info);
+            } else {
+                mApps.add(index, info);
             }
         }
         mFilteredApps = rebuildFilteredApps(mApps);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1622,10 +1622,8 @@ void startDrag(CellLayout.CellInfo cellInfo) {
         }
 
         mDragInfo = cellInfo;
-        mDragInfo.screen = mCurrentPage;
-
-        CellLayout current = getCurrentDropLayout();
 
+        CellLayout current = (CellLayout) getChildAt(cellInfo.screen);
         current.onDragChild(child);
 
         child.clearFocus();

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1622,10 +1622,8 @@ void startDrag(CellLayout.CellInfo cellInfo) {
         }
 
         mDragInfo = cellInfo;
-        mDragInfo.screen = mCurrentPage;
-
-        CellLayout current = getCurrentDropLayout();
 
+        CellLayout current = (CellLayout) getChildAt(cellInfo.screen);
         current.onDragChild(child);
 
         child.clearFocus();

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1622,10 +1622,8 @@ void startDrag(CellLayout.CellInfo cellInfo) {
         }
 
         mDragInfo = cellInfo;
-        mDragInfo.screen = mCurrentPage;
-
-        CellLayout current = getCurrentDropLayout();
 
+        CellLayout current = (CellLayout) getChildAt(cellInfo.screen);
         current.onDragChild(child);
 
         child.clearFocus();

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -332,6 +332,8 @@ private void addAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
             final int index = Collections.binarySearch(mApps, info, LauncherModel.APP_NAME_COMPARATOR);
             if (index < 0) {
                 mApps.add(-(index + 1), info);
+            } else {
+                mApps.add(index, info);
             }
         }
         mFilteredApps = rebuildFilteredApps(mApps);

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -332,6 +332,8 @@ private void addAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
             final int index = Collections.binarySearch(mApps, info, LauncherModel.APP_NAME_COMPARATOR);
             if (index < 0) {
                 mApps.add(-(index + 1), info);
+            } else {
+                mApps.add(index, info);
             }
         }
         mFilteredApps = rebuildFilteredApps(mApps);

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -332,6 +332,8 @@ private void addAppsWithoutInvalidate(ArrayList<ApplicationInfo> list) {
             final int index = Collections.binarySearch(mApps, info, LauncherModel.APP_NAME_COMPARATOR);
             if (index < 0) {
                 mApps.add(-(index + 1), info);
+            } else {
+                mApps.add(index, info);
             }
         }
         mFilteredApps = rebuildFilteredApps(mApps);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -616,7 +616,7 @@ public void setVerticalWallpaperOffset(WallpaperVerticalOffset offsetPosition) {
         Display display = mLauncher.getWindowManager().getDefaultDisplay();
         int wallpaperTravelHeight = (int) (display.getHeight() *
                 wallpaperTravelToScreenHeightRatio(display.getWidth(), display.getHeight()));
-        float offsetFromCenter = (wallpaperTravelHeight / mWallpaperHeight) / 2f;
+        float offsetFromCenter = (wallpaperTravelHeight / (float) mWallpaperHeight) / 2f;
         switch (offsetPosition) {
             case TOP:
                 offset = 0.5f - offsetFromCenter;

File: src/com/android/launcher2/CacheableTextView.java
Patch:
@@ -21,6 +21,7 @@
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.Bitmap.Config;
+import android.graphics.PorterDuff.Mode;
 import android.text.Layout;
 import android.util.AttributeSet;
 import android.widget.TextView;
@@ -111,7 +112,7 @@ private void buildAndUpdateCache() {
                 mCache = Bitmap.createBitmap(width, height, Config.ARGB_8888);
                 mCacheCanvas.setBitmap(mCache);
             } else {
-                mCacheCanvas.drawColor(0x00000000);
+                mCacheCanvas.drawColor(0, Mode.CLEAR);
             }
 
             mCacheCanvas.save();

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -417,7 +417,7 @@ public void receiveVisibilityChangedMessage(View v) {
     }
 
     public void updateCache() {
-        mCacheCanvas.drawColor(0x00000000, Mode.CLEAR);
+        mCacheCanvas.drawColor(0, Mode.CLEAR);
 
         float alpha = getAlpha();
         setAlpha(1.0f);

File: src/com/android/launcher2/HolographicOutlineHelper.java
Patch:
@@ -184,7 +184,7 @@ void applyExpensiveOutlineWithBlur(Bitmap srcDst, Canvas srcDstCanvas, int color
 
         // draw the inner and outer blur
         srcDstCanvas.setBitmap(srcDst);
-        srcDstCanvas.drawColor(0x00000000, PorterDuff.Mode.CLEAR);
+        srcDstCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
         mHolographicPaint.setColor(color);
         srcDstCanvas.drawBitmap(thickInnerBlur, thickInnerBlurOffset[0], thickInnerBlurOffset[1],
                 mHolographicPaint);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -616,7 +616,7 @@ public void setVerticalWallpaperOffset(WallpaperVerticalOffset offsetPosition) {
         Display display = mLauncher.getWindowManager().getDefaultDisplay();
         int wallpaperTravelHeight = (int) (display.getHeight() *
                 wallpaperTravelToScreenHeightRatio(display.getWidth(), display.getHeight()));
-        float offsetFromCenter = (wallpaperTravelHeight / mWallpaperHeight) / 2f;
+        float offsetFromCenter = (wallpaperTravelHeight / (float) mWallpaperHeight) / 2f;
         switch (offsetPosition) {
             case TOP:
                 offset = 0.5f - offsetFromCenter;

File: src/com/android/launcher2/CacheableTextView.java
Patch:
@@ -21,6 +21,7 @@
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.Bitmap.Config;
+import android.graphics.PorterDuff.Mode;
 import android.text.Layout;
 import android.util.AttributeSet;
 import android.widget.TextView;
@@ -111,7 +112,7 @@ private void buildAndUpdateCache() {
                 mCache = Bitmap.createBitmap(width, height, Config.ARGB_8888);
                 mCacheCanvas.setBitmap(mCache);
             } else {
-                mCacheCanvas.drawColor(0x00000000);
+                mCacheCanvas.drawColor(0, Mode.CLEAR);
             }
 
             mCacheCanvas.save();

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -417,7 +417,7 @@ public void receiveVisibilityChangedMessage(View v) {
     }
 
     public void updateCache() {
-        mCacheCanvas.drawColor(0x00000000, Mode.CLEAR);
+        mCacheCanvas.drawColor(0, Mode.CLEAR);
 
         float alpha = getAlpha();
         setAlpha(1.0f);

File: src/com/android/launcher2/HolographicOutlineHelper.java
Patch:
@@ -184,7 +184,7 @@ void applyExpensiveOutlineWithBlur(Bitmap srcDst, Canvas srcDstCanvas, int color
 
         // draw the inner and outer blur
         srcDstCanvas.setBitmap(srcDst);
-        srcDstCanvas.drawColor(0x00000000, PorterDuff.Mode.CLEAR);
+        srcDstCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
         mHolographicPaint.setColor(color);
         srcDstCanvas.drawBitmap(thickInnerBlur, thickInnerBlurOffset[0], thickInnerBlurOffset[1],
                 mHolographicPaint);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -616,7 +616,7 @@ public void setVerticalWallpaperOffset(WallpaperVerticalOffset offsetPosition) {
         Display display = mLauncher.getWindowManager().getDefaultDisplay();
         int wallpaperTravelHeight = (int) (display.getHeight() *
                 wallpaperTravelToScreenHeightRatio(display.getWidth(), display.getHeight()));
-        float offsetFromCenter = (wallpaperTravelHeight / mWallpaperHeight) / 2f;
+        float offsetFromCenter = (wallpaperTravelHeight / (float) mWallpaperHeight) / 2f;
         switch (offsetPosition) {
             case TOP:
                 offset = 0.5f - offsetFromCenter;

File: src/com/android/launcher2/CacheableTextView.java
Patch:
@@ -21,6 +21,7 @@
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.Bitmap.Config;
+import android.graphics.PorterDuff.Mode;
 import android.text.Layout;
 import android.util.AttributeSet;
 import android.widget.TextView;
@@ -111,7 +112,7 @@ private void buildAndUpdateCache() {
                 mCache = Bitmap.createBitmap(width, height, Config.ARGB_8888);
                 mCacheCanvas.setBitmap(mCache);
             } else {
-                mCacheCanvas.drawColor(0x00000000);
+                mCacheCanvas.drawColor(0, Mode.CLEAR);
             }
 
             mCacheCanvas.save();

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -417,7 +417,7 @@ public void receiveVisibilityChangedMessage(View v) {
     }
 
     public void updateCache() {
-        mCacheCanvas.drawColor(0x00000000, Mode.CLEAR);
+        mCacheCanvas.drawColor(0, Mode.CLEAR);
 
         float alpha = getAlpha();
         setAlpha(1.0f);

File: src/com/android/launcher2/HolographicOutlineHelper.java
Patch:
@@ -184,7 +184,7 @@ void applyExpensiveOutlineWithBlur(Bitmap srcDst, Canvas srcDstCanvas, int color
 
         // draw the inner and outer blur
         srcDstCanvas.setBitmap(srcDst);
-        srcDstCanvas.drawColor(0x00000000, PorterDuff.Mode.CLEAR);
+        srcDstCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
         mHolographicPaint.setColor(color);
         srcDstCanvas.drawBitmap(thickInnerBlur, thickInnerBlurOffset[0], thickInnerBlurOffset[1],
                 mHolographicPaint);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -616,7 +616,7 @@ public void setVerticalWallpaperOffset(WallpaperVerticalOffset offsetPosition) {
         Display display = mLauncher.getWindowManager().getDefaultDisplay();
         int wallpaperTravelHeight = (int) (display.getHeight() *
                 wallpaperTravelToScreenHeightRatio(display.getWidth(), display.getHeight()));
-        float offsetFromCenter = (wallpaperTravelHeight / mWallpaperHeight) / 2f;
+        float offsetFromCenter = (wallpaperTravelHeight / (float) mWallpaperHeight) / 2f;
         switch (offsetPosition) {
             case TOP:
                 offset = 0.5f - offsetFromCenter;

File: src/com/android/launcher2/CacheableTextView.java
Patch:
@@ -21,6 +21,7 @@
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.Bitmap.Config;
+import android.graphics.PorterDuff.Mode;
 import android.text.Layout;
 import android.util.AttributeSet;
 import android.widget.TextView;
@@ -111,7 +112,7 @@ private void buildAndUpdateCache() {
                 mCache = Bitmap.createBitmap(width, height, Config.ARGB_8888);
                 mCacheCanvas.setBitmap(mCache);
             } else {
-                mCacheCanvas.drawColor(0x00000000);
+                mCacheCanvas.drawColor(0, Mode.CLEAR);
             }
 
             mCacheCanvas.save();

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -417,7 +417,7 @@ public void receiveVisibilityChangedMessage(View v) {
     }
 
     public void updateCache() {
-        mCacheCanvas.drawColor(0x00000000, Mode.CLEAR);
+        mCacheCanvas.drawColor(0, Mode.CLEAR);
 
         float alpha = getAlpha();
         setAlpha(1.0f);

File: src/com/android/launcher2/HolographicOutlineHelper.java
Patch:
@@ -184,7 +184,7 @@ void applyExpensiveOutlineWithBlur(Bitmap srcDst, Canvas srcDstCanvas, int color
 
         // draw the inner and outer blur
         srcDstCanvas.setBitmap(srcDst);
-        srcDstCanvas.drawColor(0x00000000, PorterDuff.Mode.CLEAR);
+        srcDstCanvas.drawColor(0, PorterDuff.Mode.CLEAR);
         mHolographicPaint.setColor(color);
         srcDstCanvas.drawBitmap(thickInnerBlur, thickInnerBlurOffset[0], thickInnerBlurOffset[1],
                 mHolographicPaint);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1390,7 +1390,9 @@ void onDropChild(View child, boolean animate) {
             lp.isDragging = false;
             lp.dropped = true;
             lp.animateDrop = animate;
-            child.setVisibility(View.INVISIBLE);
+            if (animate) {
+                child.setVisibility(View.INVISIBLE);
+            }
             child.requestLayout();
         }
     }

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1390,7 +1390,9 @@ void onDropChild(View child, boolean animate) {
             lp.isDragging = false;
             lp.dropped = true;
             lp.animateDrop = animate;
-            child.setVisibility(View.INVISIBLE);
+            if (animate) {
+                child.setVisibility(View.INVISIBLE);
+            }
             child.requestLayout();
         }
     }

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1390,7 +1390,9 @@ void onDropChild(View child, boolean animate) {
             lp.isDragging = false;
             lp.dropped = true;
             lp.animateDrop = animate;
-            child.setVisibility(View.INVISIBLE);
+            if (animate) {
+                child.setVisibility(View.INVISIBLE);
+            }
             child.requestLayout();
         }
     }

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1390,7 +1390,9 @@ void onDropChild(View child, boolean animate) {
             lp.isDragging = false;
             lp.dropped = true;
             lp.animateDrop = animate;
-            child.setVisibility(View.INVISIBLE);
+            if (animate) {
+                child.setVisibility(View.INVISIBLE);
+            }
             child.requestLayout();
         }
     }

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -118,7 +118,6 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
                 new FastBitmapDrawable(b),
                 null, null);
         setText(info.title);
-        buildAndEnableCache();
         setTag(info);
     }
 

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -143,7 +143,6 @@ public void applyFromApplicationInfo(ApplicationInfo info, PagedViewIconCache ca
         mIcon = info.iconBitmap;
         setCompoundDrawablesWithIntrinsicBounds(null, new FastBitmapDrawable(mIcon), null, null);
         setText(info.title);
-        buildAndEnableCache();
         setTag(info);
 
         if (createHolographicOutlines) {
@@ -160,7 +159,6 @@ public void applyFromResolveInfo(ResolveInfo info, PackageManager packageManager
                 modelIconCache.getFullResIcon(info, packageManager), mContext);
         setCompoundDrawablesWithIntrinsicBounds(null, new FastBitmapDrawable(mIcon), null, null);
         setText(info.loadLabel(packageManager));
-        buildAndEnableCache();
         setTag(info);
 
         if (createHolographicOutlines) {

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -118,7 +118,6 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
                 new FastBitmapDrawable(b),
                 null, null);
         setText(info.title);
-        buildAndEnableCache();
         setTag(info);
     }
 

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -143,7 +143,6 @@ public void applyFromApplicationInfo(ApplicationInfo info, PagedViewIconCache ca
         mIcon = info.iconBitmap;
         setCompoundDrawablesWithIntrinsicBounds(null, new FastBitmapDrawable(mIcon), null, null);
         setText(info.title);
-        buildAndEnableCache();
         setTag(info);
 
         if (createHolographicOutlines) {
@@ -160,7 +159,6 @@ public void applyFromResolveInfo(ResolveInfo info, PackageManager packageManager
                 modelIconCache.getFullResIcon(info, packageManager), mContext);
         setCompoundDrawablesWithIntrinsicBounds(null, new FastBitmapDrawable(mIcon), null, null);
         setText(info.loadLabel(packageManager));
-        buildAndEnableCache();
         setTag(info);
 
         if (createHolographicOutlines) {

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -118,7 +118,6 @@ public void applyFromShortcutInfo(ShortcutInfo info, IconCache iconCache) {
                 new FastBitmapDrawable(b),
                 null, null);
         setText(info.title);
-        buildAndEnableCache();
         setTag(info);
     }
 

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -143,7 +143,6 @@ public void applyFromApplicationInfo(ApplicationInfo info, PagedViewIconCache ca
         mIcon = info.iconBitmap;
         setCompoundDrawablesWithIntrinsicBounds(null, new FastBitmapDrawable(mIcon), null, null);
         setText(info.title);
-        buildAndEnableCache();
         setTag(info);
 
         if (createHolographicOutlines) {
@@ -160,7 +159,6 @@ public void applyFromResolveInfo(ResolveInfo info, PackageManager packageManager
                 modelIconCache.getFullResIcon(info, packageManager), mContext);
         setCompoundDrawablesWithIntrinsicBounds(null, new FastBitmapDrawable(mIcon), null, null);
         setText(info.loadLabel(packageManager));
-        buildAndEnableCache();
         setTag(info);
 
         if (createHolographicOutlines) {

File: src/com/android/launcher2/IconCache.java
Patch:
@@ -67,7 +67,7 @@ public IconCache(LauncherApplication context) {
 
     public Drawable getFullResDefaultActivityIcon() {
         return getFullResIcon(Resources.getSystem(),
-                com.android.internal.R.drawable.sym_def_app_icon);
+                com.android.internal.R.mipmap.sym_def_app_icon);
     }
 
     public Drawable getFullResIcon(Resources resources, int iconId) {

File: src/com/android/launcher2/IconCache.java
Patch:
@@ -67,7 +67,7 @@ public IconCache(LauncherApplication context) {
 
     public Drawable getFullResDefaultActivityIcon() {
         return getFullResIcon(Resources.getSystem(),
-                com.android.internal.R.drawable.sym_def_app_icon);
+                com.android.internal.R.mipmap.sym_def_app_icon);
     }
 
     public Drawable getFullResIcon(Resources resources, int iconId) {

File: src/com/android/launcher2/IconCache.java
Patch:
@@ -67,7 +67,7 @@ public IconCache(LauncherApplication context) {
 
     public Drawable getFullResDefaultActivityIcon() {
         return getFullResIcon(Resources.getSystem(),
-                com.android.internal.R.drawable.sym_def_app_icon);
+                com.android.internal.R.mipmap.sym_def_app_icon);
     }
 
     public Drawable getFullResIcon(Resources resources, int iconId) {

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -973,6 +973,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
             }
         }
         prepareCacheBitmap();
+        invalidateCache();
     }
 
     @Override

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -973,6 +973,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
             }
         }
         prepareCacheBitmap();
+        invalidateCache();
     }
 
     @Override

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -625,6 +625,7 @@ public boolean addViewToCellLayout(
             child.setId(childId);
 
             addView(child, index, lp);
+            child.setAlpha(getAlpha());
             if (child instanceof VisibilityChangedBroadcaster) {
                 VisibilityChangedBroadcaster v = (VisibilityChangedBroadcaster) child;
                 v.setVisibilityChangedListener(this);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -625,6 +625,7 @@ public boolean addViewToCellLayout(
             child.setId(childId);
 
             addView(child, index, lp);
+            child.setAlpha(getAlpha());
             if (child instanceof VisibilityChangedBroadcaster) {
                 VisibilityChangedBroadcaster v = (VisibilityChangedBroadcaster) child;
                 v.setVisibilityChangedListener(this);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -625,6 +625,7 @@ public boolean addViewToCellLayout(
             child.setId(childId);
 
             addView(child, index, lp);
+            child.setAlpha(getAlpha());
             if (child instanceof VisibilityChangedBroadcaster) {
                 VisibilityChangedBroadcaster v = (VisibilityChangedBroadcaster) child;
                 v.setVisibilityChangedListener(this);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -488,7 +488,7 @@ protected void onDraw(Canvas canvas) {
                 bg = mini ? mActiveBackgroundMini : mActiveGlowBackground;
             } else if (mIsDragOccuring && mAcceptsDrops) {
                 bg = mini ? mActiveBackgroundMini : mActiveBackground;
-            } else if (mIsDefaultDropTarget) {
+            } else if (mIsDragOccuring && mIsDefaultDropTarget) {
                 bg = mini ? mNormalGlowBackgroundMini : mNormalGlowBackground;
             } else {
                 bg = mini ? mNormalBackgroundMini : mNormalBackground;

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -488,7 +488,7 @@ protected void onDraw(Canvas canvas) {
                 bg = mini ? mActiveBackgroundMini : mActiveGlowBackground;
             } else if (mIsDragOccuring && mAcceptsDrops) {
                 bg = mini ? mActiveBackgroundMini : mActiveBackground;
-            } else if (mIsDefaultDropTarget) {
+            } else if (mIsDragOccuring && mIsDefaultDropTarget) {
                 bg = mini ? mNormalGlowBackgroundMini : mNormalGlowBackground;
             } else {
                 bg = mini ? mNormalBackgroundMini : mNormalBackground;

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -437,8 +437,9 @@ public void dispatchDraw(Canvas canvas) {
             }
         }
 
+        boolean useBitmapCache = mIsCacheEnabled && getScaleX() < mMaxScaleForUsingBitmapCache;
         if (mForceCacheUpdate ||
-                (mIsCacheEnabled && !mDisableCacheUpdates)) {
+                (useBitmapCache && !mDisableCacheUpdates)) {
             // Sometimes we force a cache update-- this is used to make sure the cache will look as
             // up-to-date as possible right when we disable cache updates
             if (mIsCacheDirty) {
@@ -447,7 +448,7 @@ public void dispatchDraw(Canvas canvas) {
             mForceCacheUpdate = false;
         }
 
-        if (mIsCacheEnabled && getScaleX() < mMaxScaleForUsingBitmapCache) {
+        if (useBitmapCache) {
             mCachePaint.setAlpha((int)(255*getAlpha()));
             canvas.drawBitmap(mCache, mCacheRect, mBackgroundRect, mCachePaint);
         } else {

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -437,8 +437,9 @@ public void dispatchDraw(Canvas canvas) {
             }
         }
 
+        boolean useBitmapCache = mIsCacheEnabled && getScaleX() < mMaxScaleForUsingBitmapCache;
         if (mForceCacheUpdate ||
-                (mIsCacheEnabled && !mDisableCacheUpdates)) {
+                (useBitmapCache && !mDisableCacheUpdates)) {
             // Sometimes we force a cache update-- this is used to make sure the cache will look as
             // up-to-date as possible right when we disable cache updates
             if (mIsCacheDirty) {
@@ -447,7 +448,7 @@ public void dispatchDraw(Canvas canvas) {
             mForceCacheUpdate = false;
         }
 
-        if (mIsCacheEnabled && getScaleX() < mMaxScaleForUsingBitmapCache) {
+        if (useBitmapCache) {
             mCachePaint.setAlpha((int)(255*getAlpha()));
             canvas.drawBitmap(mCache, mCacheRect, mBackgroundRect, mCachePaint);
         } else {

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -437,8 +437,9 @@ public void dispatchDraw(Canvas canvas) {
             }
         }
 
+        boolean useBitmapCache = mIsCacheEnabled && getScaleX() < mMaxScaleForUsingBitmapCache;
         if (mForceCacheUpdate ||
-                (mIsCacheEnabled && !mDisableCacheUpdates)) {
+                (useBitmapCache && !mDisableCacheUpdates)) {
             // Sometimes we force a cache update-- this is used to make sure the cache will look as
             // up-to-date as possible right when we disable cache updates
             if (mIsCacheDirty) {
@@ -447,7 +448,7 @@ public void dispatchDraw(Canvas canvas) {
             mForceCacheUpdate = false;
         }
 
-        if (mIsCacheEnabled && getScaleX() < mMaxScaleForUsingBitmapCache) {
+        if (useBitmapCache) {
             mCachePaint.setAlpha((int)(255*getAlpha()));
             canvas.drawBitmap(mCache, mCacheRect, mBackgroundRect, mCachePaint);
         } else {

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -646,11 +646,13 @@ public boolean getAcceptsDrops() {
 
     @Override
     public void removeAllViews() {
+        super.removeAllViews();
         clearOccupiedCells();
     }
 
     @Override
     public void removeAllViewsInLayout() {
+        super.removeAllViewsInLayout();
         clearOccupiedCells();
     }
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -474,7 +474,7 @@ protected void onDraw(Canvas canvas) {
         // When we're small, we are either drawn normally or in the "accepts drops" state (during
         // a drag). However, we also drag the mini hover background *over* one of those two
         // backgrounds
-        if (mBackgroundAlpha > 0.0f) {
+        if (LauncherApplication.isScreenXLarge() && mBackgroundAlpha > 0.0f) {
             Drawable bg;
             boolean mini = getScaleX() < 0.5f;
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -995,9 +995,9 @@ private void setupViews() {
         final View configureButton = findViewById(R.id.configure_button);
 
         if (LauncherApplication.isScreenXLarge()) {
-            mDeleteZone.setOverlappingViews(new View[] { allAppsButton, divider, configureButton });
+            deleteZone.setOverlappingViews(new View[] { allAppsButton, divider, configureButton });
         } else {
-            deleteZone.setOverlappingView(configureButton);
+            deleteZone.setOverlappingView(findViewById(R.id.all_apps_button_cluster));
         }
         dragController.addDragListener(deleteZone);
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -474,7 +474,7 @@ protected void onDraw(Canvas canvas) {
         // When we're small, we are either drawn normally or in the "accepts drops" state (during
         // a drag). However, we also drag the mini hover background *over* one of those two
         // backgrounds
-        if (mBackgroundAlpha > 0.0f) {
+        if (LauncherApplication.isScreenXLarge() && mBackgroundAlpha > 0.0f) {
             Drawable bg;
             boolean mini = getScaleX() < 0.5f;
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -995,9 +995,9 @@ private void setupViews() {
         final View configureButton = findViewById(R.id.configure_button);
 
         if (LauncherApplication.isScreenXLarge()) {
-            mDeleteZone.setOverlappingViews(new View[] { allAppsButton, divider, configureButton });
+            deleteZone.setOverlappingViews(new View[] { allAppsButton, divider, configureButton });
         } else {
-            deleteZone.setOverlappingView(configureButton);
+            deleteZone.setOverlappingView(findViewById(R.id.all_apps_button_cluster));
         }
         dragController.addDragListener(deleteZone);
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -474,7 +474,7 @@ protected void onDraw(Canvas canvas) {
         // When we're small, we are either drawn normally or in the "accepts drops" state (during
         // a drag). However, we also drag the mini hover background *over* one of those two
         // backgrounds
-        if (mBackgroundAlpha > 0.0f) {
+        if (LauncherApplication.isScreenXLarge() && mBackgroundAlpha > 0.0f) {
             Drawable bg;
             boolean mini = getScaleX() < 0.5f;
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -995,9 +995,9 @@ private void setupViews() {
         final View configureButton = findViewById(R.id.configure_button);
 
         if (LauncherApplication.isScreenXLarge()) {
-            mDeleteZone.setOverlappingViews(new View[] { allAppsButton, divider, configureButton });
+            deleteZone.setOverlappingViews(new View[] { allAppsButton, divider, configureButton });
         } else {
-            deleteZone.setOverlappingView(configureButton);
+            deleteZone.setOverlappingView(findViewById(R.id.all_apps_button_cluster));
         }
         dragController.addDragListener(deleteZone);
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -474,7 +474,7 @@ protected void onDraw(Canvas canvas) {
         // When we're small, we are either drawn normally or in the "accepts drops" state (during
         // a drag). However, we also drag the mini hover background *over* one of those two
         // backgrounds
-        if (mBackgroundAlpha > 0.0f) {
+        if (LauncherApplication.isScreenXLarge() && mBackgroundAlpha > 0.0f) {
             Drawable bg;
             boolean mini = getScaleX() < 0.5f;
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -995,9 +995,9 @@ private void setupViews() {
         final View configureButton = findViewById(R.id.configure_button);
 
         if (LauncherApplication.isScreenXLarge()) {
-            mDeleteZone.setOverlappingViews(new View[] { allAppsButton, divider, configureButton });
+            deleteZone.setOverlappingViews(new View[] { allAppsButton, divider, configureButton });
         } else {
-            deleteZone.setOverlappingView(configureButton);
+            deleteZone.setOverlappingView(findViewById(R.id.all_apps_button_cluster));
         }
         dragController.addDragListener(deleteZone);
 

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -312,6 +312,7 @@ public void setDragController(DragController dragger) {
 
     public void setCustomizationFilter(CustomizationType filterType) {
         mCustomizationType = filterType;
+        cancelDragging();
         if (getChildCount() > 0) {
             setCurrentPage(0);
             updateCurrentPageScroll();

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -312,6 +312,7 @@ public void setDragController(DragController dragger) {
 
     public void setCustomizationFilter(CustomizationType filterType) {
         mCustomizationType = filterType;
+        cancelDragging();
         if (getChildCount() > 0) {
             setCurrentPage(0);
             updateCurrentPageScroll();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -383,7 +383,9 @@ public void onAnimationEnd(Animator animation) {
         restoreState(mSavedState);
 
         // Update customization drawer _after_ restoring the states
-        mCustomizePagedView.update();
+        if (mCustomizePagedView != null) {
+            mCustomizePagedView.update();
+        }
 
         if (PROFILE_STARTUP) {
             android.os.Debug.stopMethodTracing();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -383,7 +383,9 @@ public void onAnimationEnd(Animator animation) {
         restoreState(mSavedState);
 
         // Update customization drawer _after_ restoring the states
-        mCustomizePagedView.update();
+        if (mCustomizePagedView != null) {
+            mCustomizePagedView.update();
+        }
 
         if (PROFILE_STARTUP) {
             android.os.Debug.stopMethodTracing();

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -304,13 +304,13 @@ void animateDrop() {
             AnimatorSet bouncer = new AnimatorSet();
             bouncer.play(scaleUp).before(scaleDown);
             bouncer.play(scaleUp).with(alphaFadeOut);
-            bouncer.addListener(new LauncherAnimatorListenerAdapter() {
+            bouncer.addListener(new AnimatorListenerAdapter() {
                 @Override
                 public void onAnimationStart(Animator animation) {
                     setHover(true);
                 }
                 @Override
-                public void onAnimationEndOrCancel(Animator animation) {
+                public void onAnimationEnd(Animator animation) {
                     setHover(false);
                     setHoverScale(1.0f);
                     setHoverAlpha(1.0f);

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -599,8 +599,6 @@ private void renderDrawableToBitmap(Drawable d, Bitmap bitmap, int x, int y, int
      * in the customize drawer.
      */
     private Drawable parseWallpaperPreviewXml(ComponentName component, ResolveInfo ri) {
-        Drawable d = null;
-
         ActivityInfo activityInfo = ri.activityInfo;
         XmlResourceParser parser = null;
         try {

File: src/com/android/launcher2/InterruptibleInOutAnimator.java
Patch:
@@ -52,9 +52,9 @@ public InterruptibleInOutAnimator(long duration, float fromValue, float toValue)
         mOriginalFromValue = fromValue;
         mOriginalToValue = toValue;
 
-        mAnimator.addListener(new LauncherAnimatorListenerAdapter() {
+        mAnimator.addListener(new AnimatorListenerAdapter() {
             @Override
-            public void onAnimationEndOrCancel(Animator animation) {
+            public void onAnimationEnd(Animator animation) {
                 mDirection = STOPPED;
             }
         });

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -304,13 +304,13 @@ void animateDrop() {
             AnimatorSet bouncer = new AnimatorSet();
             bouncer.play(scaleUp).before(scaleDown);
             bouncer.play(scaleUp).with(alphaFadeOut);
-            bouncer.addListener(new LauncherAnimatorListenerAdapter() {
+            bouncer.addListener(new AnimatorListenerAdapter() {
                 @Override
                 public void onAnimationStart(Animator animation) {
                     setHover(true);
                 }
                 @Override
-                public void onAnimationEndOrCancel(Animator animation) {
+                public void onAnimationEnd(Animator animation) {
                     setHover(false);
                     setHoverScale(1.0f);
                     setHoverAlpha(1.0f);

File: src/com/android/launcher2/InterruptibleInOutAnimator.java
Patch:
@@ -52,9 +52,9 @@ public InterruptibleInOutAnimator(long duration, float fromValue, float toValue)
         mOriginalFromValue = fromValue;
         mOriginalToValue = toValue;
 
-        mAnimator.addListener(new LauncherAnimatorListenerAdapter() {
+        mAnimator.addListener(new AnimatorListenerAdapter() {
             @Override
-            public void onAnimationEndOrCancel(Animator animation) {
+            public void onAnimationEnd(Animator animation) {
                 mDirection = STOPPED;
             }
         });

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -599,8 +599,6 @@ private void renderDrawableToBitmap(Drawable d, Bitmap bitmap, int x, int y, int
      * in the customize drawer.
      */
     private Drawable parseWallpaperPreviewXml(ComponentName component, ResolveInfo ri) {
-        Drawable d = null;
-
         ActivityInfo activityInfo = ri.activityInfo;
         XmlResourceParser parser = null;
         try {

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -139,7 +139,6 @@ public CellLayout(Context context, AttributeSet attrs, int defStyle) {
         // A ViewGroup usually does not draw, but CellLayout needs to draw a rectangle to show
         // the user where a dragged item will land when dropped.
         setWillNotDraw(false);
-        setClipChildren(false);
 
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CellLayout, defStyle, 0);
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -974,7 +974,6 @@ private void setupViews() {
         if (allAppsInfoTarget != null) {
             allAppsInfoTarget.setLauncher(this);
             dragController.addDragListener(allAppsInfoTarget);
-            allAppsInfoTarget.setDragColor(getResources().getColor(R.color.app_info_filter));
             allAppsInfoTarget.setDragAndDropEnabled(false);
             View marketButton = findViewById(R.id.market_button);
             if (marketButton != null) {
@@ -986,7 +985,6 @@ private void setupViews() {
         if (infoButton != null) {
             infoButton.setLauncher(this);
             infoButton.setHandle(findViewById(R.id.configure_button));
-            infoButton.setDragColor(getResources().getColor(R.color.app_info_filter));
             dragController.addDragListener(infoButton);
         }
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -139,6 +139,7 @@ public CellLayout(Context context, AttributeSet attrs, int defStyle) {
         // A ViewGroup usually does not draw, but CellLayout needs to draw a rectangle to show
         // the user where a dragged item will land when dropped.
         setWillNotDraw(false);
+        setClipChildren(false);
 
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CellLayout, defStyle, 0);
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -294,7 +294,7 @@ protected void onCreate(Bundle savedInstanceState) {
         checkForLocaleChange();
         setWallpaperDimension();
         setContentView(R.layout.launcher);
-        mHomeCustomizationDrawer = (TabHost) findViewById(com.android.internal.R.id.tabhost);
+        mHomeCustomizationDrawer = (TabHost) findViewById(R.id.customization_drawer);
         if (mHomeCustomizationDrawer != null) {
             mHomeCustomizationDrawer.setup();
 

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -21,12 +21,12 @@
 import java.util.List;
 
 import android.animation.Animator;
+import android.animation.Animator.AnimatorListener;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
 import android.animation.TimeInterpolator;
 import android.animation.ValueAnimator;
-import android.animation.Animator.AnimatorListener;
 import android.animation.ValueAnimator.AnimatorUpdateListener;
 import android.app.AlertDialog;
 import android.app.WallpaperManager;
@@ -44,6 +44,7 @@
 import android.graphics.Bitmap;
 import android.graphics.Camera;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Matrix;
 import android.graphics.Paint;
 import android.graphics.Rect;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -21,12 +21,12 @@
 import java.util.List;
 
 import android.animation.Animator;
+import android.animation.Animator.AnimatorListener;
 import android.animation.AnimatorSet;
 import android.animation.ObjectAnimator;
 import android.animation.PropertyValuesHolder;
 import android.animation.TimeInterpolator;
 import android.animation.ValueAnimator;
-import android.animation.Animator.AnimatorListener;
 import android.animation.ValueAnimator.AnimatorUpdateListener;
 import android.app.AlertDialog;
 import android.app.WallpaperManager;
@@ -44,6 +44,7 @@
 import android.graphics.Bitmap;
 import android.graphics.Camera;
 import android.graphics.Canvas;
+import android.graphics.Color;
 import android.graphics.Matrix;
 import android.graphics.Paint;
 import android.graphics.Rect;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -977,7 +977,6 @@ private void setupViews() {
             allAppsInfoTarget.setDragAndDropEnabled(false);
             View marketButton = findViewById(R.id.market_button);
             if (marketButton != null) {
-                marketButton.setBackgroundColor(Color.RED);
                 allAppsInfoTarget.setHandle(marketButton);
             }
         }

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -122,12 +122,14 @@ public PagedViewIcon(Context context, AttributeSet attrs, int defStyle) {
     }
 
     private void queueHolographicOutlineCreation() {
+        /* Temporarily disabling holographic outline creation.
         // Generate the outline in the background
         if (mHolographicOutline == null) {
             Message m = sWorker.obtainMessage(MESSAGE_CREATE_HOLOGRAPHIC_OUTLINE);
             m.obj = this;
             sWorker.sendMessage(m);
         }
+        */
     }
 
     public void applyFromApplicationInfo(ApplicationInfo info, PagedViewIconCache cache,

File: src/com/android/launcher2/PagedViewWidget.java
Patch:
@@ -120,12 +120,14 @@ public PagedViewWidget(Context context, AttributeSet attrs, int defStyle) {
     }
 
     private void queueHolographicOutlineCreation() {
+        /* Temporarily disabling holographic outline creation.
         // Generate the outline in the background
         if (mHolographicOutline == null) {
             Message m = sWorker.obtainMessage(MESSAGE_CREATE_HOLOGRAPHIC_OUTLINE);
             m.obj = this;
             sWorker.sendMessage(m);
         }
+        */
     }
 
     public void applyFromAppWidgetProviderInfo(AppWidgetProviderInfo info,

File: src/com/android/launcher2/AllApps3D.java
Patch:
@@ -192,6 +192,7 @@ protected void onDetachedFromWindow() {
             destroyRenderScript();
             sRS = null;
             sRollo = null;
+            super.onDetachedFromWindow();
         }
     }
 

File: src/com/android/launcher2/AllApps3D.java
Patch:
@@ -213,6 +213,7 @@ protected void onDetachedFromWindow() {
             destroyRenderScript();
             sRS = null;
             sRollo = null;
+            super.onDetachedFromWindow();
         }
     }
 

File: src/com/android/launcher2/WallpaperChooser.java
Patch:
@@ -169,7 +169,7 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
             AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
             builder.setCancelable(true);
             builder.setNegativeButton(R.string.wallpaper_cancel, null);
-            builder.setTitle(R.string.pick_wallpaper);
+            builder.setTitle(R.string.wallpaper_dialog_title);
             builder.setView(gridView, viewInset, viewInset, viewInset, viewInset);
             return builder.create();
         }

File: src/com/android/launcher2/AllApps3D.java
Patch:
@@ -213,6 +213,7 @@ protected void onDetachedFromWindow() {
             destroyRenderScript();
             sRS = null;
             sRollo = null;
+            super.onDetachedFromWindow();
         }
     }
 

File: src/com/android/launcher2/AllApps3D.java
Patch:
@@ -213,6 +213,7 @@ protected void onDetachedFromWindow() {
             destroyRenderScript();
             sRS = null;
             sRollo = null;
+            super.onDetachedFromWindow();
         }
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1923,6 +1923,8 @@ public boolean onTouch(View v, MotionEvent event) {
      */
     public void onClickSearchButton(View v) {
         startSearch(null, false, null, true);
+        // Use a custom animation for launching search
+        overridePendingTransition(R.anim.fade_in_fast, R.anim.fade_out_fast);
     }
 
     /**

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -306,7 +306,7 @@ public void onClick(View v) {
         // Return early if this is not initiated from a touch
         if (!v.isInTouchMode()) return;
         // Return early if we are still animating the pages
-        if (mNextPage == INVALID_PAGE) return;
+        if (mNextPage != INVALID_PAGE) return;
 
         // On certain pages, we allow single tap to mark items as selected so that they can be
         // dropped onto the mini workspaces
@@ -372,7 +372,7 @@ public boolean onLongClick(View v) {
         // Return early if this is not initiated from a touch
         if (!v.isInTouchMode()) return false;
         // Return early if we are still animating the pages
-        if (mNextPage == INVALID_PAGE) return false;
+        if (mNextPage != INVALID_PAGE) return false;
 
         // End the current choice mode before we start dragging anything
         if (isChoiceMode(CHOICE_MODE_SINGLE)) {

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -57,7 +57,7 @@ public abstract class PagedView extends ViewGroup {
     // The min drag distance to trigger a page shift (regardless of velocity)
     private static final int MIN_LENGTH_FOR_MOVE = 200;
 
-    private static final int PAGE_SNAP_ANIMATION_DURATION = 1000;
+    private static final int PAGE_SNAP_ANIMATION_DURATION = 750;
     protected static final float NANOTIME_DIV = 1000000000.0f;
 
     // the velocity at which a fling gesture will cause us to snap to the next page

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -57,7 +57,7 @@ public abstract class PagedView extends ViewGroup {
     // The min drag distance to trigger a page shift (regardless of velocity)
     private static final int MIN_LENGTH_FOR_MOVE = 200;
 
-    private static final int PAGE_SNAP_ANIMATION_DURATION = 1000;
+    private static final int PAGE_SNAP_ANIMATION_DURATION = 750;
     protected static final float NANOTIME_DIV = 1000000000.0f;
 
     // the velocity at which a fling gesture will cause us to snap to the next page

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -883,8 +883,8 @@ private void shrink(ShrinkPosition shrinkPosition, boolean animated) {
 
     private class ZInterpolator implements TimeInterpolator {
         private final float focalLength = 0.2f;
-        public float getInterpolation(float input) { 
-            return (1.0f - focalLength / (focalLength + input)) / 
+        public float getInterpolation(float input) {
+            return (1.0f - focalLength / (focalLength + input)) /
                     (1.0f - focalLength / (focalLength + 1.0f));
         }
     }

File: src/com/android/launcher2/DragController.java
Patch:
@@ -584,6 +584,8 @@ private boolean drop(float x, float y) {
                 mDragSource.onDropCompleted((View) dropTarget, false);
                 return true;
             }
+        } else {
+            mDragSource.onDropCompleted(null, false);
         }
         return false;
     }

File: src/com/android/launcher2/AllAppsTabbed.java
Patch:
@@ -76,7 +76,8 @@ public View createTabContent(String tag) {
         setOnTabChangedListener(new OnTabChangeListener() {
             public void onTabChanged(String tabId) {
                 // animate the changing of the tab content by fading pages in and out
-                final int duration = 150;
+                final Resources res = getResources();
+                final int duration = res.getInteger(R.integer.config_tabTransitionTime);
                 final float alpha = mAllApps.getAlpha();
                 ValueAnimator alphaAnim = ObjectAnimator.ofFloat(mAllApps, "alpha", alpha, 0.0f).
                         setDuration(duration);

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -289,6 +289,7 @@ public void setDragController(DragController dragger) {
     public void setCustomizationFilter(CustomizationType filterType) {
         mCustomizationType = filterType;
         setCurrentPage(0);
+        updateCurrentPageScroll();
         invalidatePageData();
 
         // End the current choice mode so that we don't carry selections across tabs

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -316,7 +316,8 @@ public View createTabContent(String tag) {
             mHomeCustomizationDrawer.setOnTabChangedListener(new OnTabChangeListener() {
                 public void onTabChanged(String tabId) {
                     // animate the changing of the tab content by fading pages in and out
-                    final int duration = 150;
+                    final Resources res = getResources();
+                    final int duration = res.getInteger(R.integer.config_tabTransitionTime);
                     final float alpha = mCustomizePagedView.getAlpha();
                     ValueAnimator alphaAnim = ObjectAnimator.ofFloat(mCustomizePagedView,
                             "alpha", alpha, 0.0f);

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -639,7 +639,8 @@ private void syncListPageItems(int page, List<ResolveInfo> list) {
 
             PagedViewIcon icon = (PagedViewIcon) mInflater.inflate(
                     R.layout.customize_paged_view_item, layout, false);
-            icon.applyFromResolveInfo(info, mPackageManager, mPageViewIconCache, true);
+            icon.applyFromResolveInfo(info, mPackageManager, mPageViewIconCache,
+                    ((LauncherApplication)mLauncher.getApplication()).getIconCache());
             switch (mCustomizationType) {
             case WallpaperCustomization:
                 icon.setOnClickListener(this);

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -48,14 +48,14 @@ public boolean isDropEnabled() {
     }
 
     static FolderIcon fromXml(int resId, Launcher launcher, ViewGroup group,
-            UserFolderInfo folderInfo) {
+            UserFolderInfo folderInfo, IconCache iconCache) {
 
         FolderIcon icon = (FolderIcon) LayoutInflater.from(launcher).inflate(resId, group, false);
 
         final Resources resources = launcher.getResources();
-        Drawable d = resources.getDrawable(R.drawable.ic_launcher_folder);
+        Drawable d = iconCache.getFullResIcon(resources, R.drawable.ic_launcher_folder);
         icon.mCloseIcon = d;
-        icon.mOpenIcon = resources.getDrawable(R.drawable.ic_launcher_folder_open);
+        icon.mOpenIcon = iconCache.getFullResIcon(resources, R.drawable.ic_launcher_folder_open);
         icon.setCompoundDrawablesWithIntrinsicBounds(null, d, null, null);
         icon.setText(folderInfo.title);
         icon.setTag(folderInfo);

File: src/com/android/launcher2/Utilities.java
Patch:
@@ -237,7 +237,7 @@ private static void initStatics(Context context) {
         final DisplayMetrics metrics = resources.getDisplayMetrics();
         final float density = metrics.density;
 
-        sIconWidth = sIconHeight = (int) resources.getDimension(android.R.dimen.app_icon_size);
+        sIconWidth = sIconHeight = (int) resources.getDimension(R.dimen.app_icon_size);
         sIconTextureWidth = sIconTextureHeight = sIconWidth + 2;
 
         sBlurPaint.setMaskFilter(new BlurMaskFilter(5 * density, BlurMaskFilter.Blur.NORMAL));

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1767,7 +1767,7 @@ private void onDropExternal(int x, int y, Object dragInfo,
             break;
         case LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER:
             view = FolderIcon.fromXml(R.layout.folder_icon, mLauncher,
-                    cellLayout, ((UserFolderInfo) info));
+                    cellLayout, (UserFolderInfo) info, mIconCache);
             break;
         default:
             throw new IllegalStateException("Unknown item type: " + info.itemType);

File: src/com/android/launcher2/HolographicOutlineHelper.java
Patch:
@@ -183,4 +183,4 @@ void applyExpensiveOutlineWithBlur(Bitmap srcDst, Canvas srcDstCanvas, int color
         thickOuterBlur.recycle();
         thickInnerBlur.recycle();
     }
-}
\ No newline at end of file
+}

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -755,7 +755,9 @@ protected void determineScrollingStart(MotionEvent ev) {
                 // by a distant descendant, so use the mAllowLongPress flag to block
                 // everything
                 final View currentPage = getPageAt(mCurrentPage);
-                currentPage.cancelLongPress();
+                if (currentPage != null) {
+                    currentPage.cancelLongPress();
+                }
             }
         }
     }

File: src/com/android/launcher2/LauncherApplication.java
Patch:
@@ -52,6 +52,7 @@ public void onCreate() {
         filter = new IntentFilter();
         filter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE);
         filter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE);
+        filter.addAction(Intent.ACTION_LOCALE_CHANGED);
         registerReceiver(mModel, filter);
 
         // Register for changes to the favorites

File: src/com/android/launcher2/AllAppsTabbed.java
Patch:
@@ -19,7 +19,6 @@
 import com.android.launcher.R;
 
 import android.animation.Animator;
-import android.animation.AnimatorListenerAdapter;
 import android.animation.ObjectAnimator;
 import android.animation.ValueAnimator;
 import android.content.Context;
@@ -81,9 +80,9 @@ public void onTabChanged(String tabId) {
                 final float alpha = mAllApps.getAlpha();
                 ValueAnimator alphaAnim = ObjectAnimator.ofFloat(mAllApps, "alpha", alpha, 0.0f).
                         setDuration(duration);
-                alphaAnim.addListener(new AnimatorListenerAdapter() {
+                alphaAnim.addListener(new LauncherAnimatorListenerAdapter() {
                     @Override
-                    public void onAnimationEnd(Animator animation) {
+                    public void onAnimationEndOrCancel(Animator animation) {
                         String tag = getCurrentTabTag();
                         if (tag == TAG_ALL) {
                             mAllApps.setAppFilter(AllAppsPagedView.ALL_APPS_FLAG);

File: src/com/android/launcher2/InterruptibleInOutAnimator.java
Patch:
@@ -52,8 +52,9 @@ public InterruptibleInOutAnimator(long duration, float fromValue, float toValue)
         mOriginalFromValue = fromValue;
         mOriginalToValue = toValue;
 
-        mAnimator.addListener(new AnimatorListenerAdapter() {
-            public void onAnimationEnd(Animator animation) {
+        mAnimator.addListener(new LauncherAnimatorListenerAdapter() {
+            @Override
+            public void onAnimationEndOrCancel(Animator animation) {
                 mDirection = STOPPED;
             }
         });

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -707,7 +707,7 @@ private void shrink(ShrinkPosition shrinkPosition, boolean animated) {
         mShrunkenState = shrinkPosition;
 
         // Stop any scrolling, move to the current page right away
-        setCurrentPage(mCurrentPage);
+        setCurrentPage((mNextPage != INVALID_PAGE) ? mNextPage : mCurrentPage);
         updateWhichPagesAcceptDrops(mShrunkenState);
 
         // we intercept and reject all touch events when we're small, so be sure to reset the state

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -113,7 +113,9 @@ public PagedViewIcon(Context context, AttributeSet attrs, int defStyle) {
         mHoloOutlineColor = a.getColor(R.styleable.PagedViewIcon_outlineColor, 0);
         mCheckedBlurColor = a.getColor(R.styleable.PagedViewIcon_checkedBlurColor, 0);
         mCheckedOutlineColor = a.getColor(R.styleable.PagedViewIcon_checkedOutlineColor, 0);
-        mScaledIconSize = a.getDimensionPixelSize(R.styleable.PagedViewIcon_scaledIconSize, 64);
+        mScaledIconSize =
+            context.getResources().getDimensionPixelSize(R.dimen.temp_scaled_icon_size);
+
         a.recycle();
 
         if (sHolographicOutlineHelper == null) {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1883,7 +1883,7 @@ private void handleFolderClick(FolderInfo folderInfo) {
     }
 
     /**
-     * Opens the user fodler described by the specified tag. The opening of the folder
+     * Opens the user folder described by the specified tag. The opening of the folder
      * is animated relative to the specified View. If the View is null, no animation
      * is played.
      *

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1696,7 +1696,8 @@ void closeFolder(Folder folder) {
         folder.getInfo().opened = false;
         ViewGroup parent = (ViewGroup) folder.getParent();
         if (parent != null) {
-            parent.removeView(folder);
+            CellLayout cl = (CellLayout) parent;
+            cl.removeViewWithoutMarkingCells(folder);
             if (folder instanceof DropTarget) {
                 // Live folders aren't DropTargets.
                 mDragController.removeDropTarget((DropTarget)folder);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -364,7 +364,8 @@ void addInScreen(View child, int screen, int x, int y, int spanX, int spanY, boo
 
         // Get the canonical child id to uniquely represent this view in this screen
         int childId = LauncherModel.getCellLayoutChildId(-1, screen, x, y, spanX, spanY);
-        if (!group.addViewToCellLayout(child, insert ? 0 : -1, childId, lp)) {
+        boolean markCellsAsOccupied = !(child instanceof Folder);
+        if (!group.addViewToCellLayout(child, insert ? 0 : -1, childId, lp, markCellsAsOccupied)) {
             // TODO: This branch occurs when the workspace is adding views
             // outside of the defined grid
             // maybe we should be deleting these items from the LauncherModel?

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -649,7 +649,7 @@ public boolean onInterceptTouchEvent(MotionEvent ev) {
                  * otherwise don't.  mScroller.isFinished should be false when
                  * being flinged.
                  */
-                final int xDist = (mScroller.getFinalX() - mScroller.getCurrX());
+                final int xDist = Math.abs(mScroller.getFinalX() - mScroller.getCurrX());
                 final boolean finishedScrolling = (mScroller.isFinished() || xDist < mTouchSlop);
                 if (finishedScrolling) {
                     mTouchState = TOUCH_STATE_REST;

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -715,7 +715,7 @@ public void onAnimationEnd(Animation animation) {}
      * Determines if we should change the touch state to start scrolling after the
      * user moves their touch point too far.
      */
-    private void determineScrollingStart(MotionEvent ev) {
+    protected void determineScrollingStart(MotionEvent ev) {
         /*
          * Locally do absolute value. mLastMotionX is set to the y value
          * of the down event.

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -80,7 +80,7 @@ public abstract class PagedView extends ViewGroup {
     protected final static int TOUCH_STATE_SCROLLING = 1;
     protected final static int TOUCH_STATE_PREV_PAGE = 2;
     protected final static int TOUCH_STATE_NEXT_PAGE = 3;
-    protected final static float ALPHA_QUANTIZE_LEVEL = 0.01f;
+    protected final static float ALPHA_QUANTIZE_LEVEL = 0.0001f;
 
     protected int mTouchState = TOUCH_STATE_REST;
 

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -80,7 +80,7 @@ public abstract class PagedView extends ViewGroup {
     protected final static int TOUCH_STATE_SCROLLING = 1;
     protected final static int TOUCH_STATE_PREV_PAGE = 2;
     protected final static int TOUCH_STATE_NEXT_PAGE = 3;
-    protected final static float ALPHA_QUANTIZE_LEVEL = 0.01f;
+    protected final static float ALPHA_QUANTIZE_LEVEL = 0.0001f;
 
     protected int mTouchState = TOUCH_STATE_REST;
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1088,8 +1088,6 @@ void onDragExit() {
             mDragCell[0] = -1;
             mDragCell[1] = -1;
 
-            setHover(false);
-
             // Fade out the drag indicators
             if (mCrosshairsAnimator != null) {
                 mCrosshairsAnimator.animateOut();

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -817,8 +817,7 @@ public boolean onTouchEvent(MotionEvent ev) {
                 } else {
                     awakenScrollBars();
                 }
-            } else if ((mTouchState == TOUCH_STATE_PREV_PAGE) ||
-                    (mTouchState == TOUCH_STATE_NEXT_PAGE)) {
+            } else {
                 determineScrollingStart(ev);
             }
             break;

File: src/com/android/launcher2/AllAppsTabbed.java
Patch:
@@ -127,6 +127,9 @@ public void onAnimationEnd(Animator animation) {
             }
         });
 
+        // TEMP: Working around a bug in tab host where the current tab does not initially have a
+        // highlight on it by selecting something else, then selecting the actual tab we want..
+        setCurrentTab(1);
         setCurrentTab(0);
 
         // It needs to be INVISIBLE so that it will be measured in the layout.

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -350,6 +350,9 @@ public void onAnimationEnd(Animator animation) {
                 }
             });
     
+            // TEMP: Working around a bug in tab host where the current tab does not initially have
+            // a highlight on it by selecting something else, then selecting the actual tab we want..
+            mHomeCustomizationDrawer.setCurrentTab(1);
             mHomeCustomizationDrawer.setCurrentTab(0);
         }
         setupViews();

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -242,7 +242,9 @@ void setCurrentPage(int currentPage) {
         if (getChildCount() == 0) return;
 
         mCurrentPage = Math.max(0, Math.min(currentPage, getPageCount() - 1));
-        scrollTo(getChildOffset(mCurrentPage) - getRelativeChildOffset(mCurrentPage), 0);
+        int newX = getChildOffset(mCurrentPage) - getRelativeChildOffset(mCurrentPage);
+        scrollTo(newX, 0);
+        mScroller.setFinalX(newX);
 
         invalidate();
         notifyPageSwitchListener();

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -340,8 +340,9 @@ public void onReceive(Context context, Intent intent) {
             }
 
         } else if (Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.equals(action)) {
-            String[] packages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);
-            enqueuePackageUpdated(new PackageUpdatedTask(PackageUpdatedTask.OP_ADD, packages));
+            // When everything comes back, just reload everything.  We might not
+            // have the right icons for apps on external storage.
+            startLoader(mApp, false);
 
         } else if (Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.equals(action)) {
             String[] packages = intent.getStringArrayExtra(Intent.EXTRA_CHANGED_PACKAGE_LIST);

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -110,9 +110,9 @@ public void applyFromResolveInfo(ResolveInfo info, PackageManager packageManager
         mIconCacheKey = info;
         mHolographicOutline = mIconCache.getOutline(mIconCacheKey);
 
-        Drawable image = info.loadIcon(packageManager);
-        image.setBounds(0, 0, image.getIntrinsicWidth(), image.getIntrinsicHeight());
-        setCompoundDrawablesWithIntrinsicBounds(null, image, null, null);
+        Bitmap image = Utilities.createIconBitmap(info.loadIcon(packageManager), mContext);
+        setCompoundDrawablesWithIntrinsicBounds(null, 
+                new FastBitmapDrawable(image), null, null);
         setText(info.loadLabel(packageManager));
         setTag(info);
     }

File: src/com/android/launcher2/PagedViewIcon.java
Patch:
@@ -110,9 +110,9 @@ public void applyFromResolveInfo(ResolveInfo info, PackageManager packageManager
         mIconCacheKey = info;
         mHolographicOutline = mIconCache.getOutline(mIconCacheKey);
 
-        Drawable image = info.loadIcon(packageManager);
-        image.setBounds(0, 0, image.getIntrinsicWidth(), image.getIntrinsicHeight());
-        setCompoundDrawablesWithIntrinsicBounds(null, image, null, null);
+        Bitmap image = Utilities.createIconBitmap(info.loadIcon(packageManager), mContext);
+        setCompoundDrawablesWithIntrinsicBounds(null, 
+                new FastBitmapDrawable(image), null, null);
         setText(info.loadLabel(packageManager));
         setTag(info);
     }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -322,7 +322,7 @@ void addInScreen(View child, int screen, int x, int y, int spanX, int spanY, boo
         }
 
         // Get the canonical child id to uniquely represent this view in this screen
-        int childId = LauncherModel.getCellLayoutChildId(child.getId(), screen, x, y, spanX, spanY);
+        int childId = LauncherModel.getCellLayoutChildId(-1, screen, x, y, spanX, spanY);
         if (!group.addViewToCellLayout(child, insert ? 0 : -1, childId, lp)) {
             // TODO: This branch occurs when the workspace is adding views
             // outside of the defined grid
@@ -799,6 +799,8 @@ public void onDrop(DragSource source, int x, int y, int xOffset, int yOffset,
                 cellLayout.onMove(cell, mTargetCell[0], mTargetCell[1]);
                 lp.cellX = mTargetCell[0];
                 lp.cellY = mTargetCell[1];
+                cell.setId(LauncherModel.getCellLayoutChildId(cell.getId(), mDragInfo.screen,
+                        mTargetCell[0], mTargetCell[1], mDragInfo.spanX, mDragInfo.spanY));
 
                 LauncherModel.moveItemInDatabase(mLauncher, info,
                         LauncherSettings.Favorites.CONTAINER_DESKTOP, index,

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -137,7 +137,7 @@ public CellLayout(Context context, AttributeSet attrs, int defStyle) {
         if (LauncherApplication.isScreenXLarge()) {
             final Resources res = getResources();
 
-            mBackground = res.getDrawable(R.drawable.home_screen_bg);
+            mBackground = res.getDrawable(R.drawable.mini_home_screen_bg);
             mBackground.setFilterBitmap(true);
             mBackgroundHover = res.getDrawable(R.drawable.mini_home_screen_bg_hover);
             mBackgroundHover.setFilterBitmap(true);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1085,7 +1085,7 @@ private void onDropExternal(int x, int y, Object dragInfo,
         if (view == null) {
             cellLayout.onDragExit();
         } else {
-            mTargetCell = findNearestVacantArea(x, y, 1, 1, view, cellLayout, mTargetCell);
+            mTargetCell = findNearestVacantArea(x, y, 1, 1, null, cellLayout, mTargetCell);
             addInScreen(view, indexOfChild(cellLayout), mTargetCell[0],
                     mTargetCell[1], info.spanX, info.spanY, insertAtFirst);
             cellLayout.onDropChild(view);

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -417,7 +417,7 @@ public void syncPageItems(int page) {
 
     @Override
     public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
-        mode.setTitle(R.string.cab_selection_text);
+        mode.setTitle(R.string.cab_app_selection_text);
 
         // Until the workspace has a selection mode and the CAB supports drag-and-drop, we
         // take a hybrid approach: grab the views from the workspace and stuff them into the CAB.

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1223,9 +1223,9 @@ void processShortcut(Intent intent) {
 
             Intent pickIntent = new Intent(Intent.ACTION_PICK_ACTIVITY);
             pickIntent.putExtra(Intent.EXTRA_INTENT, mainIntent);
-            startActivityForResult(pickIntent, REQUEST_PICK_APPLICATION);
+            startActivityForResultSafely(pickIntent, REQUEST_PICK_APPLICATION);
         } else {
-            startActivityForResult(intent, REQUEST_CREATE_SHORTCUT);
+            startActivityForResultSafely(intent, REQUEST_CREATE_SHORTCUT);
         }
     }
 
@@ -1237,7 +1237,7 @@ void addLiveFolder(Intent intent) {
         if (folderName != null && folderName.equals(shortcutName)) {
             addFolder();
         } else {
-            startActivityForResult(intent, REQUEST_CREATE_LIVE_FOLDER);
+            startActivityForResultSafely(intent, REQUEST_CREATE_LIVE_FOLDER);
         }
     }
 

File: src/com/android/launcher2/LiveFolderInfo.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.android.launcher2;
 
-import android.content.ComponentName;
 import android.content.ContentValues;
 import android.content.Intent;
 import android.graphics.Bitmap;
@@ -29,8 +28,6 @@ class LiveFolderInfo extends FolderInfo {
      */
     Intent baseIntent;
 
-    ComponentName componentName;
-
     /**
      * The live folder's content uri.
      */

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -334,7 +334,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
     }
 
     @Override
-    public void onLayout(boolean changed, int left, int top, int right, int bottom) {
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
         if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < getChildCount()) {
             setHorizontalScrollBarEnabled(false);
             int newX = getChildOffset(mCurrentPage) - getRelativeChildOffset(mCurrentPage);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -432,7 +432,7 @@ protected void onAttachedToWindow() {
     }
 
     @Override
-    public void onLayout(boolean changed, int left, int top, int right, int bottom) {
+    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
         super.onLayout(changed, left, top, right, bottom);
 
         // if shrinkToBottom() is called on initialization, it has to be deferred

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1478,11 +1478,11 @@ Bitmap getIconFromCursor(Cursor c, int iconIndex) {
     }
 
     ShortcutInfo addShortcut(Context context, Intent data,
-            CellLayout.CellInfo cellInfo, boolean notify) {
+            int screen, int cellX, int cellY, boolean notify) {
 
         final ShortcutInfo info = infoFromShortcutIntent(context, data);
         addItemToDatabase(context, info, LauncherSettings.Favorites.CONTAINER_DESKTOP,
-                cellInfo.screen, cellInfo.cellX, cellInfo.cellY, notify);
+                screen, cellX, cellY, notify);
 
         return info;
     }

File: src/com/android/launcher2/LiveFolderInfo.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.android.launcher2;
 
+import android.content.ComponentName;
 import android.content.ContentValues;
 import android.content.Intent;
 import android.graphics.Bitmap;
@@ -28,6 +29,8 @@ class LiveFolderInfo extends FolderInfo {
      */
     Intent baseIntent;
 
+    ComponentName componentName;
+
     /**
      * The live folder's content uri.
      */

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -334,7 +334,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
     }
 
     @Override
-    protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
+    public void onLayout(boolean changed, int left, int top, int right, int bottom) {
         if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < getChildCount()) {
             setHorizontalScrollBarEnabled(false);
             int newX = getChildOffset(mCurrentPage) - getRelativeChildOffset(mCurrentPage);

File: src/com/android/launcher2/LauncherAppWidgetHost.java
Patch:
@@ -37,7 +37,7 @@ protected AppWidgetHostView onCreateView(Context context, int appWidgetId,
         if (LauncherApplication.isScreenXLarge()) {
             return new DimmableAppWidgetHostView(context);
         } else {
-            return new AppWidgetHostView(context);
+            return new LauncherAppWidgetHostView(context);
         }
     }
 }

File: src/com/android/launcher2/SmoothPagedView.java
Patch:
@@ -96,7 +96,7 @@ protected void init() {
 
     @Override
     protected void snapToDestination() {
-        snapToPageWithVelocity(mCurrentPage, 0);
+        snapToPageWithVelocity(getPageNearestToCenterOfScreen(), 0);
     }
 
     @Override

File: src/com/android/launcher2/SmoothPagedView.java
Patch:
@@ -110,7 +110,7 @@ void snapToPageWithVelocity(int whichPage, int velocity, boolean settle) {
         whichPage = Math.max(0, Math.min(whichPage, getChildCount() - 1));
 
         final int screenDelta = Math.max(1, Math.abs(whichPage - mCurrentPage));
-        final int newX = whichPage * getWidth();
+        final int newX = getChildOffset(whichPage) - getRelativeChildOffset(whichPage);
         final int delta = newX - mScrollX;
         int duration = (screenDelta + 1) * 100;
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1307,7 +1307,7 @@ public void startSearch(String initialQuery, boolean selectInitialQuery,
 
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
-        if (isWorkspaceLocked() || LauncherApplication.isScreenXLarge()) {
+        if (isWorkspaceLocked()) {
             return false;
         }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1307,7 +1307,7 @@ public void startSearch(String initialQuery, boolean selectInitialQuery,
 
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
-        if (isWorkspaceLocked() || LauncherApplication.isScreenXLarge()) {
+        if (isWorkspaceLocked()) {
             return false;
         }
 

File: src/com/android/launcher2/ApplicationInfo.java
Patch:
@@ -100,6 +100,7 @@ public ApplicationInfo(ApplicationInfo info) {
         componentName = info.componentName;
         title = info.title.toString();
         intent = new Intent(info.intent);
+        flags = info.flags;
     }
 
     /**

File: src/com/android/launcher2/DeleteZone.java
Patch:
@@ -34,7 +34,6 @@
 import android.view.animation.AnimationSet;
 import android.view.animation.TranslateAnimation;
 import android.widget.ImageView;
-import android.widget.Toast;
 
 public class DeleteZone extends ImageView implements DropTarget, DragController.DragListener {
     private static final int ORIENTATION_HORIZONTAL = 1;

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1566,7 +1566,7 @@ void updateSavedIcon(Context context, ShortcutInfo info, Cursor c, int iconIndex
         // into the DB.  We do this so when we're loading, if the
         // package manager can't find an icon (for example because
         // the app is on SD) then we can use that instead.
-        if (info.onExternalStorage && !info.customIcon && !info.usingFallbackIcon) {
+        if (!info.customIcon && !info.usingFallbackIcon) {
             boolean needSave;
             byte[] data = c.getBlob(iconIndex);
             try {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1341,7 +1341,6 @@ public boolean onPrepareOptionsMenu(Menu menu) {
     public void prepareAddItemFromHomeCustomizationDrawer() {
         mMenuAddInfo = mWorkspace.updateOccupiedCellsForCurrentScreen(null);
         mAddItemCellInfo = mMenuAddInfo;
-        mAddItemCellInfo = null;
     }
 
     @Override

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1490,7 +1490,7 @@ void updateSavedIcon(Context context, ShortcutInfo info, Cursor c, int iconIndex
         // into the DB.  We do this so when we're loading, if the
         // package manager can't find an icon (for example because
         // the app is on SD) then we can use that instead.
-        if (info.onExternalStorage && !info.customIcon && !info.usingFallbackIcon) {
+        if (!info.customIcon && !info.usingFallbackIcon) {
             boolean needSave;
             byte[] data = c.getBlob(iconIndex);
             try {

File: src/com/android/launcher2/AllAppsPagedView.java
Patch:
@@ -181,7 +181,6 @@ public boolean onLongClick(View v) {
         app = new ApplicationInfo(app);
 
         mDragController.startDrag(v, this, app, DragController.DRAG_ACTION_COPY);
-        mLauncher.closeAllApps(true);
         return true;
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2498,6 +2498,7 @@ public void onReceive(Context context, Intent intent) {
                 }
                 closeAllApps(animate);
                 mWorkspace.unshrink(animate);
+                hideCustomizationDrawer();
             }
         }
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2498,6 +2498,7 @@ public void onReceive(Context context, Intent intent) {
                 }
                 closeAllApps(animate);
                 mWorkspace.unshrink(animate);
+                hideCustomizationDrawer();
             }
         }
     }

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -271,8 +271,9 @@ protected void dispatchDraw(Canvas canvas) {
                     dimAlpha = Math.max(0.0f, Math.min(1.0f, (dimAlpha * dimAlpha)));
                     alpha = 1.0f - dimAlpha;
                 }
-                if (Float.compare(alpha, layout.getAlpha()) != 0)
+                if (Float.compare(alpha, layout.getAlpha()) != 0) {
                     layout.setAlpha(alpha);
+                }
             }
         }
         super.dispatchDraw(canvas);

File: src/com/android/launcher2/PagedViewCellLayout.java
Patch:
@@ -75,9 +75,9 @@ protected boolean onSetAlpha(int alpha) {
 
     @Override
     public void setAlpha(float alpha) {
-        super.setAlpha(alpha);
-        setChildrenAlpha(alpha);
         mHolographicAlpha = 1.0f - alpha;
+        setChildrenAlpha(alpha);
+        super.setAlpha(alpha);
     }
 
     @Override

File: src/com/android/launcher2/PagedView.java
Patch:
@@ -271,8 +271,9 @@ protected void dispatchDraw(Canvas canvas) {
                     dimAlpha = Math.max(0.0f, Math.min(1.0f, (dimAlpha * dimAlpha)));
                     alpha = 1.0f - dimAlpha;
                 }
-                if (Float.compare(alpha, layout.getAlpha()) != 0)
+                if (Float.compare(alpha, layout.getAlpha()) != 0) {
                     layout.setAlpha(alpha);
+                }
             }
         }
         super.dispatchDraw(canvas);

File: src/com/android/launcher2/PagedViewCellLayout.java
Patch:
@@ -75,9 +75,9 @@ protected boolean onSetAlpha(int alpha) {
 
     @Override
     public void setAlpha(float alpha) {
-        super.setAlpha(alpha);
-        setChildrenAlpha(alpha);
         mHolographicAlpha = 1.0f - alpha;
+        setChildrenAlpha(alpha);
+        super.setAlpha(alpha);
     }
 
     @Override

File: src/com/android/launcher2/AllAppsTabbed.java
Patch:
@@ -157,8 +157,6 @@ public void setVisibility(int visibility) {
         super.setVisibility(visibility);
         float zoom = (isVisible ? 1.0f : 0.0f);
         mAllApps.zoom(zoom, false);
-        if (!isVisible)
-            mAllApps.cleanup();
     }
 
     @Override

File: src/com/android/launcher2/CustomizePagedView.java
Patch:
@@ -353,7 +353,7 @@ private Drawable getWidgetIcon(PagedViewCellLayout.LayoutParams params,
                 // if we can't find the icon, then just don't draw it
             }
 
-            drawable = new BitmapDrawable(resources, bitmap);
+            drawable = new FastBitmapDrawable(bitmap);
         }
         drawable.setBounds(0, 0, drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight());
         return drawable;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2268,7 +2268,6 @@ void showAllApps(boolean animated) {
         if (LauncherApplication.isScreenXLarge() && animated) {
             if (isCustomizationDrawerVisible()) {
                 cameraPan(mHomeCustomizationDrawer, (View) mAllAppsGrid);
-                mCustomizePagedView.cleanup();
             } else {
                 cameraZoomOut((View) mAllAppsGrid, true);
             }
@@ -2369,7 +2368,6 @@ void hideCustomizationDrawer(boolean unshrinkWorkspace) {
                 mWorkspace.unshrink();
             }
             cameraZoomIn(mHomeCustomizationDrawer);
-            mCustomizePagedView.cleanup();
         }
     }
 
@@ -2723,7 +2721,8 @@ public void bindAppsRemoved(ArrayList<ApplicationInfo> apps, boolean permanent)
      */
     public void bindPackagesUpdated() {
         // update the customization drawer contents
-        mCustomizePagedView.update();
+        if (mCustomizePagedView != null)
+            mCustomizePagedView.update();
     }
 
     /**

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1171,16 +1171,15 @@ private void unshrink(CellLayout clThatWasClicked) {
 
     public void unshrink() {
         if (mIsSmall) {
-            final int screenWidth = getWidth();
             Sequencer s = new Sequencer();
             final int screenCount = getChildCount();
             for (int i = 0; i < screenCount; i++) {
                 final CellLayout cl = (CellLayout)getChildAt(i);
                 final int duration =
                     getResources().getInteger(R.integer.config_workspaceUnshrinkTime);
                 s.playTogether(
-                        new PropertyAnimator(duration, cl, "x", (float) screenWidth * i),
-                        new PropertyAnimator(duration, cl, "y", 0.0f),
+                        new PropertyAnimator(duration, cl, "translationX", 0.0f),
+                        new PropertyAnimator(duration, cl, "translationY", 0.0f),
                         new PropertyAnimator(duration, cl, "scaleX", 1.0f),
                         new PropertyAnimator(duration, cl, "scaleY", cl.getScaleY(), 1.0f),
                         new PropertyAnimator(duration, cl, "dimmedBitmapAlpha", 0.0f));

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1171,16 +1171,15 @@ private void unshrink(CellLayout clThatWasClicked) {
 
     public void unshrink() {
         if (mIsSmall) {
-            final int screenWidth = getWidth();
             Sequencer s = new Sequencer();
             final int screenCount = getChildCount();
             for (int i = 0; i < screenCount; i++) {
                 final CellLayout cl = (CellLayout)getChildAt(i);
                 final int duration =
                     getResources().getInteger(R.integer.config_workspaceUnshrinkTime);
                 s.playTogether(
-                        new PropertyAnimator(duration, cl, "x", (float) screenWidth * i),
-                        new PropertyAnimator(duration, cl, "y", 0.0f),
+                        new PropertyAnimator(duration, cl, "translationX", 0.0f),
+                        new PropertyAnimator(duration, cl, "translationY", 0.0f),
                         new PropertyAnimator(duration, cl, "scaleX", 1.0f),
                         new PropertyAnimator(duration, cl, "scaleY", cl.getScaleY(), 1.0f),
                         new PropertyAnimator(duration, cl, "dimmedBitmapAlpha", 0.0f));

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -764,7 +764,9 @@ void estimateDropCell(int originX, int originY, int spanX, int spanY, int[] resu
         final int countX = mCountX;
         final int countY = mCountY;
 
-        pointToCellRounded(originX, originY, result);
+        // originX and originY give the top left of the cell, but pointToCellRounded
+        // compares center-to-center, so pass in the middle coordinates
+        pointToCellRounded(originX + (mCellWidth / 2), originY + (mCellHeight / 2), result);
 
         // If the item isn't fully on this screen, snap to the edges
         int rightOverhang = result[0] + spanX - countX;

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -84,8 +84,8 @@ private boolean installShortcut(Context context, Intent data, int screen) {
     }
 
     private static boolean findEmptyCell(Context context, int[] xy, int screen) {
-        final int xCount = Launcher.NUMBER_CELLS_X;
-        final int yCount = Launcher.NUMBER_CELLS_Y;
+        final int xCount = LauncherModel.getCellCountX();
+        final int yCount = LauncherModel.getCellCountY();
         boolean[][] occupied = new boolean[xCount][yCount];
 
         ArrayList<ItemInfo> items = LauncherModel.getItemsInLocalCoordinates(context);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -768,6 +768,7 @@ private void setupViews() {
         View handleView = findViewById(R.id.all_apps_button);
         if (handleView != null && handleView instanceof HandleView) {
             // we don't use handle view in xlarge mode
+            mHandleView = (HandleView)handleView;
             mHandleView.setLauncher(this);
             mHandleView.setOnClickListener(this);
             mHandleView.setOnLongClickListener(this);

File: src/com/android/launcher2/WidgetListAdapter.java
Patch:
@@ -73,7 +73,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
             LayoutInflater inflater =
                 (LayoutInflater)mLauncher.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
             textView = (TextView) inflater.inflate(
-                    R.layout.home_customization_drawer_item, parent, false);
+                    R.layout.home_customization_drawer_widget, parent, false);
         } else {
             textView = (TextView) convertView;
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2032,12 +2032,14 @@ public void zoomed(float zoom) {
     void showAllApps(boolean animated) {
         hideCustomizationDrawer();
 
+        if (LauncherApplication.isScreenXLarge()) {
+            mWorkspace.shrinkToBottom(animated);
+        }
         if (LauncherApplication.isScreenXLarge() && animated) {
             // Not really a zoom -- this just makes the view visible
             mAllAppsGrid.zoom(1.0f, false);
             Animation anim = AnimationUtils.loadAnimation(this, R.anim.all_apps_zoom_in);
             ((View) mAllAppsGrid).startAnimation(anim);
-            mWorkspace.shrinkToBottom();
         } else {
             mAllAppsGrid.zoom(1.0f, animated);
         }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2147,8 +2147,7 @@ public void onAnimationStart(Animation animation) {}
 
     void onWorkspaceUnshrink() {
         if (isAllAppsVisible()) {
-            // TODO: Make a smoother transition here
-            closeAllApps(false);
+            closeAllApps(true);
         }
         if (isCustomizationDrawerVisible()) {
             hideCustomizationDrawer();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -953,7 +953,7 @@ private void completeAddAppWidget(int appWidgetId, CellLayout.CellInfo cellInfo)
 
         // Calculate the grid spans needed to fit this widget
         CellLayout layout = (CellLayout) mWorkspace.getChildAt(cellInfo.screen);
-        int[] spans = layout.rectToCell(appWidgetInfo.minWidth, appWidgetInfo.minHeight);
+        int[] spans = layout.rectToCell(appWidgetInfo.minWidth, appWidgetInfo.minHeight, null);
 
         // Try finding open space on Launcher screen
         final int[] xy = mCellCoordinates;

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -91,7 +91,9 @@ public void onDrop(DragSource source, int x, int y, int xOffset, int yOffset,
 
     public void onDragEnter(DragSource source, int x, int y, int xOffset, int yOffset,
             DragView dragView, Object dragInfo) {
-        setCompoundDrawablesWithIntrinsicBounds(null, mOpenIcon, null, null);
+        if (acceptDrop(source, x, y, xOffset, yOffset, dragView, dragInfo)) {
+            setCompoundDrawablesWithIntrinsicBounds(null, mOpenIcon, null, null);
+        }
     }
 
     public void onDragOver(DragSource source, int x, int y, int xOffset, int yOffset,

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -704,7 +704,7 @@ void estimateDropCell(int originX, int originY, int spanX, int spanY, int[] resu
         final int countX = getCountX();
         final int countY = getCountY();
 
-        pointToCellRounded(originX + (mCellWidth / 2), originY + (mCellHeight / 2), result);
+        pointToCellRounded(originX, originY, result);
 
         // If the item isn't fully on this screen, snap to the edges
         int rightOverhang = result[0] + spanX - countX;

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -1104,7 +1104,9 @@ boolean findCellForSpan(int[] cellXY, int spanX, int spanY, boolean clear) {
 
             boolean found = false;
 
-            if (this.spanX >= spanX && this.spanY >= spanY) {
+            // return the span represented by the CellInfo only there is no view there
+            //   (this.cell == null) and there is enough space
+            if (this.cell == null && this.spanX >= spanX && this.spanY >= spanY) {
                 cellXY[0] = cellX;
                 cellXY[1] = cellY;
                 found = true;

File: src/com/android/launcher2/DragLayer.java
Patch:
@@ -18,13 +18,13 @@
 
 import android.content.Context;
 import android.util.AttributeSet;
-import android.view.MotionEvent;
 import android.view.KeyEvent;
+import android.view.MotionEvent;
 import android.view.View;
 import android.widget.FrameLayout;
 
 /**
- * A ViewGroup that coordinated dragging across its dscendants
+ * A ViewGroup that coordinates dragging across its descendants
  */
 public class DragLayer extends FrameLayout {
     DragController mDragController;
@@ -33,7 +33,7 @@ public class DragLayer extends FrameLayout {
      * Used to create a new DragLayer from XML.
      *
      * @param context The application's context.
-     * @param attrs The attribtues set containing the Workspace's customization values.
+     * @param attrs The attributes set containing the Workspace's customization values.
      */
     public DragLayer(Context context, AttributeSet attrs) {
         super(context, attrs);

File: src/com/android/launcher2/AllApps2D.java
Patch:
@@ -109,7 +109,6 @@ public View getView(int position, View convertView, ViewGroup parent) {
             }
             info.iconBitmap.setDensity(Bitmap.DENSITY_NONE);
             textView.setCompoundDrawablesWithIntrinsicBounds(null, new BitmapDrawable(info.iconBitmap), null, null);
-            textView.setBackgroundColor(Color.BLACK);
             textView.setText(info.title);
 
             return convertView;

File: src/com/android/launcher2/AllApps2D.java
Patch:
@@ -109,7 +109,6 @@ public View getView(int position, View convertView, ViewGroup parent) {
             }
             info.iconBitmap.setDensity(Bitmap.DENSITY_NONE);
             textView.setCompoundDrawablesWithIntrinsicBounds(null, new BitmapDrawable(info.iconBitmap), null, null);
-            textView.setBackgroundColor(Color.BLACK);
             textView.setText(info.title);
 
             return convertView;

File: src/com/android/launcher2/LauncherAppWidgetInfo.java
Patch:
@@ -49,7 +49,7 @@ void onAddToDatabase(ContentValues values) {
 
     @Override
     public String toString() {
-        return Integer.toString(appWidgetId);
+        return "AppWidget(id=" + Integer.toString(appWidgetId) + ")";
     }
 
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -204,7 +204,6 @@ public final class Launcher extends Activity
     private ImageView mNextView;
 
     // Hotseats (quick-launch icons next to AllApps)
-    // TODO: move these intial intents out to Uris in an XML resource
     private static final int NUM_HOTSEATS = 2;
     private String[] mHotseatConfig = null;
     private Intent[] mHotseats = null;
@@ -782,6 +781,8 @@ public void nextScreen(View v) {
 
     @SuppressWarnings({"UnusedDeclaration"})
     public void launchHotSeat(View v) {
+        if (isAllAppsVisible()) return;
+
         int index = -1;
         if (v.getId() == R.id.hotseat_left) {
             index = 0;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1403,7 +1403,7 @@ public void run() {
                             final LauncherAppWidgetInfo info = (LauncherAppWidgetInfo) tag;
                             final AppWidgetProviderInfo provider =
                                     widgets.getAppWidgetInfo(info.appWidgetId);
-                            if (provider == null) {
+                            if (provider != null) {
                                 for (String packageName: packageNames) {
                                     if (packageName.equals(provider.provider.getPackageName())) {
                                         // TODO: This should probably be done on a worker thread

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1403,7 +1403,7 @@ public void run() {
                             final LauncherAppWidgetInfo info = (LauncherAppWidgetInfo) tag;
                             final AppWidgetProviderInfo provider =
                                     widgets.getAppWidgetInfo(info.appWidgetId);
-                            if (provider == null) {
+                            if (provider != null) {
                                 for (String packageName: packageNames) {
                                     if (packageName.equals(provider.provider.getPackageName())) {
                                         // TODO: This should probably be done on a worker thread

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -73,6 +73,7 @@ public class LauncherModel extends BroadcastReceiver {
     private boolean mBeforeFirstLoad = true; // only access this from main thread
     private WeakReference<Callbacks> mCallbacks;
 
+    private final Object mAllAppsListLock = new Object();
     private AllAppsList mAllAppsList;
     private IconCache mIconCache;
 
@@ -306,7 +307,7 @@ public void onReceive(Context context, Intent intent) {
         ArrayList<ApplicationInfo> removed = null;
         ArrayList<ApplicationInfo> modified = null;
 
-        synchronized (mLock) {
+        synchronized (mAllAppsListLock) {
             if (mBeforeFirstLoad) {
                 // If we haven't even loaded yet, don't bother, since we'll just pick
                 // up the changes.
@@ -1047,7 +1048,7 @@ private void loadAndBindAllApps() {
                 int i=0;
                 int batchSize = -1;
                 while (i < N && !mStopped) {
-                    synchronized (mLock) {
+                    synchronized (mAllAppsListLock) {
                         if (i == 0) {
                             // This needs to happen inside the same lock block as when we
                             // prepare the first batch for bindAllApplications.  Otherwise

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -579,7 +579,7 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
             final View view = getChildAt(i);
             view.setDrawingCacheEnabled(enabled);
             // Update the drawing caches
-            view.buildDrawingCache(false);
+            view.buildDrawingCache(true);
         }
     }
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -584,7 +584,7 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
             final View view = getChildAt(i);
             view.setDrawingCacheEnabled(enabled);
             // Update the drawing caches
-            view.buildDrawingCache(false);
+            view.buildDrawingCache(true);
         }
     }
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -584,7 +584,7 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
             final View view = getChildAt(i);
             view.setDrawingCacheEnabled(enabled);
             // Update the drawing caches
-            view.buildDrawingCache(true);
+            view.buildDrawingCache(false);
         }
     }
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -579,7 +579,7 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
             final View view = getChildAt(i);
             view.setDrawingCacheEnabled(enabled);
             // Update the drawing caches
-            view.buildDrawingCache(true);
+            view.buildDrawingCache(false);
         }
     }
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -584,7 +584,7 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
             final View view = getChildAt(i);
             view.setDrawingCacheEnabled(enabled);
             // Update the drawing caches
-            view.buildDrawingCache(true);
+            view.buildDrawingCache(false);
         }
     }
 

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -584,7 +584,7 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
             final View view = getChildAt(i);
             view.setDrawingCacheEnabled(enabled);
             // Update the drawing caches
-            view.buildDrawingCache(true);
+            view.buildDrawingCache(false);
         }
     }
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1096,13 +1096,13 @@ private void loadAndBindAllApps() {
                         }
 
                         final boolean first = i <= batchSize;
+                        final Callbacks callbacks = tryGetCallbacks(oldCallbacks);
                         final ArrayList<ApplicationInfo> added = mAllAppsList.added;
                         mAllAppsList.added = new ArrayList<ApplicationInfo>();
 
                         mHandler.post(new Runnable() {
                             public void run() {
                                 final long t = SystemClock.uptimeMillis();
-                                final Callbacks callbacks = tryGetCallbacks(oldCallbacks);
                                 if (callbacks != null) {
                                     if (first) {
                                         mBeforeFirstLoad = false;

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1096,13 +1096,13 @@ private void loadAndBindAllApps() {
                         }
 
                         final boolean first = i <= batchSize;
+                        final Callbacks callbacks = tryGetCallbacks(oldCallbacks);
                         final ArrayList<ApplicationInfo> added = mAllAppsList.added;
                         mAllAppsList.added = new ArrayList<ApplicationInfo>();
 
                         mHandler.post(new Runnable() {
                             public void run() {
                                 final long t = SystemClock.uptimeMillis();
-                                final Callbacks callbacks = tryGetCallbacks(oldCallbacks);
                                 if (callbacks != null) {
                                     if (first) {
                                         mBeforeFirstLoad = false;

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1096,13 +1096,13 @@ private void loadAndBindAllApps() {
                         }
 
                         final boolean first = i <= batchSize;
+                        final Callbacks callbacks = tryGetCallbacks(oldCallbacks);
                         final ArrayList<ApplicationInfo> added = mAllAppsList.added;
                         mAllAppsList.added = new ArrayList<ApplicationInfo>();
 
                         mHandler.post(new Runnable() {
                             public void run() {
                                 final long t = SystemClock.uptimeMillis();
-                                final Callbacks callbacks = tryGetCallbacks(oldCallbacks);
                                 if (callbacks != null) {
                                     if (first) {
                                         mBeforeFirstLoad = false;

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -41,8 +41,6 @@ public interface Watcher {
 
     public void updateApps(ArrayList<ApplicationInfo> list);
     
-    public int  getAppBatchSize();
-
     public void dumpState();
 
     public void surrender();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2095,7 +2095,7 @@ public void bindAppsRemoved(ArrayList<ApplicationInfo> apps) {
      * Implementation of the method from LauncherModel.Callbacks.
      */
     public int getAppBatchSize() {
-        return mAllAppsGrid.getAppBatchSize();
+        return getResources().getInteger(R.integer.config_allAppsBatchSize);
     }
 
     /**

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1316,7 +1316,7 @@ public void run() {
                             final ProviderInfo providerInfo = manager.resolveContentProvider(
                                     uri.getAuthority(), 0);
 
-                            if (providerInfo == null) {
+                            if (providerInfo != null) {
                                 for (String packageName: packageNames) {
                                     if (packageName.equals(providerInfo.packageName)) {
                                         // TODO: This should probably be done on a worker thread

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -1316,7 +1316,7 @@ public void run() {
                             final ProviderInfo providerInfo = manager.resolveContentProvider(
                                     uri.getAuthority(), 0);
 
-                            if (providerInfo == null) {
+                            if (providerInfo != null) {
                                 for (String packageName: packageNames) {
                                     if (packageName.equals(providerInfo.packageName)) {
                                         // TODO: This should probably be done on a worker thread

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1617,7 +1617,6 @@ private class RenameFolder {
         private EditText mInput;
 
         Dialog createDialog() {
-            mWaitingForResult = true;
             final View layout = View.inflate(Launcher.this, R.layout.rename_folder, null);
             mInput = (EditText) layout.findViewById(R.id.folder_name);
 
@@ -1649,6 +1648,7 @@ public void onClick(DialogInterface dialog, int which) {
             final AlertDialog dialog = builder.create();
             dialog.setOnShowListener(new DialogInterface.OnShowListener() {
                 public void onShow(DialogInterface dialog) {
+                    mWaitingForResult = true;
                     mInput.requestFocus();
                     InputMethodManager inputManager = (InputMethodManager)
                             getSystemService(Context.INPUT_METHOD_SERVICE);

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -40,8 +40,10 @@ public interface Watcher {
     public void removeApps(ArrayList<ApplicationInfo> list);
 
     public void updateApps(ArrayList<ApplicationInfo> list);
+    
+    public int  getAppBatchSize();
 
     public void dumpState();
-    
+
     public void surrender();
 }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1617,7 +1617,6 @@ private class RenameFolder {
         private EditText mInput;
 
         Dialog createDialog() {
-            mWaitingForResult = true;
             final View layout = View.inflate(Launcher.this, R.layout.rename_folder, null);
             mInput = (EditText) layout.findViewById(R.id.folder_name);
 
@@ -1649,6 +1648,7 @@ public void onClick(DialogInterface dialog, int which) {
             final AlertDialog dialog = builder.create();
             dialog.setOnShowListener(new DialogInterface.OnShowListener() {
                 public void onShow(DialogInterface dialog) {
+                    mWaitingForResult = true;
                     mInput.requestFocus();
                     InputMethodManager inputManager = (InputMethodManager)
                             getSystemService(Context.INPUT_METHOD_SERVICE);

File: src/com/android/launcher2/AllApps2D.java
Patch:
@@ -165,7 +165,7 @@ public boolean onKey(View v, int keyCode, KeyEvent event) {
 
     public void onItemClick(AdapterView parent, View v, int position, long id) {
         ApplicationInfo app = (ApplicationInfo) parent.getItemAtPosition(position);
-        mLauncher.startActivitySafely(app.intent);
+        mLauncher.startActivitySafely(app.intent, app);
     }
 
     public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {

File: src/com/android/launcher2/AllApps3D.java
Patch:
@@ -392,7 +392,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {
                     int whichApp = sRollo.mState.selectedIconIndex;
                     if (whichApp >= 0) {
                         ApplicationInfo app = mAllAppsList.get(whichApp);
-                        mLauncher.startActivitySafely(app.intent);
+                        mLauncher.startActivitySafely(app.intent, app);
                         handled = true;
                     }
                 }
@@ -720,7 +720,7 @@ public void onClick(View v) {
                 && mCurrentIconIndex >= 0 && mCurrentIconIndex < mAllAppsList.size()) {
             reallyPlaySoundEffect(SoundEffectConstants.CLICK);
             ApplicationInfo app = mAllAppsList.get(mCurrentIconIndex);
-            mLauncher.startActivitySafely(app.intent);
+            mLauncher.startActivitySafely(app.intent, app);
         }
     }
 

File: src/com/android/launcher2/ApplicationInfo.java
Patch:
@@ -98,7 +98,7 @@ final void setActivity(ComponentName className, int launchFlags) {
 
     @Override
     public String toString() {
-        return title.toString();
+        return "ApplicationInfo(title=" + title.toString() + ")";
     }
 
     public static void dumpApplicationInfoList(String tag, String label,

File: src/com/android/launcher2/Folder.java
Patch:
@@ -81,7 +81,7 @@ public void onItemClick(AdapterView parent, View v, int position, long id) {
         v.getLocationOnScreen(pos);
         app.intent.setSourceBounds(new Rect(pos[0], pos[1],
                 pos[0] + v.getWidth(), pos[1] + v.getHeight()));
-        mLauncher.startActivitySafely(app.intent);
+        mLauncher.startActivitySafely(app.intent, app);
     }
 
     public void onClick(View v) {

File: src/com/android/launcher2/LiveFolder.java
Patch:
@@ -60,10 +60,11 @@ public void onItemClick(AdapterView parent, View v, int position, long id) {
                 Uri uri = baseIntent.getData();
                 uri = uri.buildUpon().appendPath(Long.toString(holder.id)).build();
                 intent.setData(uri);
-                mLauncher.startActivitySafely(intent);
+                mLauncher.startActivitySafely(intent, "(position=" + position + ", id=" + id + ")");
             }
         } else if (holder.intent != null) {
-            mLauncher.startActivitySafely(holder.intent);
+            mLauncher.startActivitySafely(holder.intent,
+                    "(position=" + position + ", id=" + id + ")");
         }
     }
 

File: src/com/android/launcher2/ShortcutInfo.java
Patch:
@@ -151,7 +151,7 @@ void onAddToDatabase(ContentValues values) {
 
     @Override
     public String toString() {
-        return title.toString();
+        return "ShortcutInfo(title=" + title.toString() + ")";
     }
 
     @Override

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1195,14 +1195,14 @@ private ShortcutInfo getShortcutInfo(Cursor c, Context context,
             } else {
                 info.customIcon = true;
             }
-            info.setIcon(icon);
             break;
         default:
-            info.setIcon(getFallbackIcon());
+            icon = getFallbackIcon();
             info.usingFallbackIcon = true;
             info.customIcon = false;
             break;
         }
+        info.setIcon(icon);
         return info;
     }
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1089,7 +1089,7 @@ public void dumpState() {
      * doesn't have a Cursor, but
      */
     public ShortcutInfo getShortcutInfo(PackageManager manager, Intent intent, Context context) {
-        return getShortcutInfo(manager, intent, context);
+        return getShortcutInfo(manager, intent, context, null, -1, -1);
     }
 
     /**

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1202,14 +1202,14 @@ private ShortcutInfo getShortcutInfo(Cursor c, Context context,
             } else {
                 info.customIcon = true;
             }
-            info.setIcon(icon);
             break;
         default:
-            info.setIcon(getFallbackIcon());
+            icon = getFallbackIcon();
             info.usingFallbackIcon = true;
             info.customIcon = false;
             break;
         }
+        info.setIcon(icon);
         return info;
     }
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -1089,7 +1089,7 @@ public void dumpState() {
      * doesn't have a Cursor, but
      */
     public ShortcutInfo getShortcutInfo(PackageManager manager, Intent intent, Context context) {
-        return getShortcutInfo(manager, intent, context);
+        return getShortcutInfo(manager, intent, context, null, -1, -1);
     }
 
     /**

File: src/com/android/launcher2/AllApps2D.java
Patch:
@@ -300,6 +300,9 @@ private static int findAppByComponent(ArrayList<ApplicationInfo> list, Applicati
     public void dumpState() {
         ApplicationInfo.dumpApplicationInfoList(TAG, "mAllAppsList", mAllAppsList);
     }
+    
+    public void surrender() {
+    }
 }
 
 

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -42,4 +42,6 @@ public interface Watcher {
     public void updateApps(ArrayList<ApplicationInfo> list);
 
     public void dumpState();
+    
+    public void surrender();
 }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -424,11 +424,12 @@ protected void onPause() {
     public Object onRetainNonConfigurationInstance() {
         // Flag the loader to stop early before switching
         mModel.stopLoader();
+        mAllAppsGrid.surrender();
 
         if (PROFILE_ROTATE) {
             android.os.Debug.startMethodTracing("/sdcard/launcher-rotate");
         }
-        return null;
+        return Boolean.TRUE;
     }
 
     // We can't hide the IME if it was forced open.  So don't bother

File: src/com/android/launcher2/AddAdapter.java
Patch:
@@ -27,6 +27,8 @@
 
 import java.util.ArrayList;
 
+import com.android.launcher.R;
+
 /**
  * Adapter showing the types of items that can be added to a {@link Workspace}.
  */

File: src/com/android/launcher2/AllApps3D.java
Patch:
@@ -52,6 +52,8 @@
 import java.util.Arrays;
 import java.util.Collections;
 
+import com.android.launcher.R;
+
 public class AllApps3D extends RSSurfaceView
         implements AllAppsView, View.OnClickListener, View.OnLongClickListener, DragSource {
     private static final String TAG = "Launcher.AllApps3D";

File: src/com/android/launcher2/BubbleTextView.java
Patch:
@@ -25,6 +25,8 @@
 import android.graphics.drawable.Drawable;
 import android.text.Layout;
 
+import com.android.launcher.R;
+
 /**
  * TextView that draws a bubble behind the text. We cannot use a LineBackgroundSpan
  * because we want to make the bubble taller than the text and TextView's clip is

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -32,6 +32,8 @@
 
 import java.util.ArrayList;
 
+import com.android.launcher.R;
+
 public class CellLayout extends ViewGroup {
     private boolean mPortrait;
 

File: src/com/android/launcher2/DeleteZone.java
Patch:
@@ -33,6 +33,8 @@
 import android.graphics.RectF;
 import android.graphics.drawable.TransitionDrawable;
 
+import com.android.launcher.R;
+
 public class DeleteZone extends ImageView implements DropTarget, DragController.DragListener {
     private static final int ORIENTATION_HORIZONTAL = 1;
     private static final int TRANSITION_DURATION = 250;

File: src/com/android/launcher2/Folder.java
Patch:
@@ -29,6 +29,8 @@
 import android.widget.AdapterView.OnItemClickListener;
 import android.widget.AdapterView.OnItemLongClickListener;
 
+import com.android.launcher.R;
+
 /**
  * Represents a set of icons chosen by the user or generated by the system.
  */

File: src/com/android/launcher2/FolderIcon.java
Patch:
@@ -24,6 +24,8 @@
 import android.view.LayoutInflater;
 import android.view.ViewGroup;
 
+import com.android.launcher.R;
+
 /**
  * An icon that can appear on in the workspace representing an {@link UserFolder}.
  */

File: src/com/android/launcher2/HandleView.java
Patch:
@@ -25,6 +25,8 @@
 import android.view.KeyEvent;
 import android.view.View;
 
+import com.android.launcher.R;
+
 public class HandleView extends ImageView {
     private static final int ORIENTATION_HORIZONTAL = 1;
 

File: src/com/android/launcher2/InstallShortcutReceiver.java
Patch:
@@ -23,6 +23,8 @@
 import android.database.Cursor;
 import android.widget.Toast;
 
+import com.android.launcher.R;
+
 public class InstallShortcutReceiver extends BroadcastReceiver {
     private static final String ACTION_INSTALL_SHORTCUT =
             "com.android.launcher.action.INSTALL_SHORTCUT";

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -77,6 +77,8 @@
 import java.io.IOException;
 import java.io.DataInputStream;
 
+import com.android.launcher.R;
+
 /**
  * Default launcher application.
  */

File: src/com/android/launcher2/LauncherAppWidgetHostView.java
Patch:
@@ -23,6 +23,8 @@
 import android.view.View;
 import android.view.ViewConfiguration;
 
+import com.android.launcher.R;
+
 /**
  * {@inheritDoc}
  */

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -50,6 +50,8 @@
 import java.util.HashMap;
 import java.util.List;
 
+import com.android.launcher.R;
+
 /**
  * Maintains in-memory state of the Launcher. It is expected that there should be only one
  * LauncherModel object held in a static. Also provide APIs for updating the database state

File: src/com/android/launcher2/LauncherProvider.java
Patch:
@@ -57,6 +57,8 @@
 import com.android.internal.util.XmlUtils;
 import com.android.launcher2.LauncherSettings.Favorites;
 
+import com.android.launcher.R;
+
 public class LauncherProvider extends ContentProvider {
     private static final String TAG = "Launcher.LauncherProvider";
     private static final boolean LOGD = false;

File: src/com/android/launcher2/LiveFolder.java
Patch:
@@ -29,6 +29,8 @@
 
 import java.lang.ref.WeakReference;
 
+import com.android.launcher.R;
+
 public class LiveFolder extends Folder {
     private AsyncTask<LiveFolderInfo,Void,Cursor> mLoadingTask;
 

File: src/com/android/launcher2/LiveFolderAdapter.java
Patch:
@@ -36,6 +36,8 @@
 import java.util.HashMap;
 import java.lang.ref.SoftReference;
 
+import com.android.launcher.R;
+
 class LiveFolderAdapter extends CursorAdapter {
     private boolean mIsList;
     private LayoutInflater mInflater;

File: src/com/android/launcher2/LiveFolderIcon.java
Patch:
@@ -23,6 +23,8 @@
 import android.view.LayoutInflater;
 import android.graphics.Bitmap;
 
+import com.android.launcher.R;
+
 public class LiveFolderIcon extends FolderIcon {
     public LiveFolderIcon(Context context, AttributeSet attrs) {
         super(context, attrs);

File: src/com/android/launcher2/ShortcutsAdapter.java
Patch:
@@ -26,17 +26,17 @@
 
 import java.util.ArrayList;
 
+import com.android.launcher.R;
+
 /**
  * GridView adapter to show the list of applications and shortcuts
  */
 public class ShortcutsAdapter  extends ArrayAdapter<ShortcutInfo> {
     private final LayoutInflater mInflater;
-    private final PackageManager mPackageManager;
     private final IconCache mIconCache;
 
     public ShortcutsAdapter(Context context, ArrayList<ShortcutInfo> apps) {
         super(context, 0, apps);
-        mPackageManager = context.getPackageManager();
         mInflater = LayoutInflater.from(context);
         mIconCache = ((LauncherApplication)context.getApplicationContext()).getIconCache();
     }

File: src/com/android/launcher2/UninstallShortcutReceiver.java
Patch:
@@ -26,6 +26,8 @@
 
 import java.net.URISyntaxException;
 
+import com.android.launcher.R;
+
 public class UninstallShortcutReceiver extends BroadcastReceiver {
     private static final String ACTION_UNINSTALL_SHORTCUT =
             "com.android.launcher.action.UNINSTALL_SHORTCUT";

File: src/com/android/launcher2/UserFolder.java
Patch:
@@ -8,6 +8,8 @@
 import android.view.View;
 import android.widget.ArrayAdapter;
 
+import com.android.launcher.R;
+
 /**
  * Folder which contains applications or shortcuts chosen by the user.
  *

File: src/com/android/launcher2/Utilities.java
Patch:
@@ -38,6 +38,8 @@
 import android.content.res.Resources;
 import android.content.Context;
 
+import com.android.launcher.R;
+
 /**
  * Various utilities shared amongst the Launcher's classes.
  */

File: src/com/android/launcher2/WallpaperChooser.java
Patch:
@@ -38,6 +38,8 @@
 import java.io.IOException;
 import java.util.ArrayList;
 
+import com.android.launcher.R;
+
 public class WallpaperChooser extends Activity implements AdapterView.OnItemSelectedListener,
         OnClickListener {
     private static final String TAG = "Launcher.WallpaperChooser";

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -44,6 +44,8 @@
 
 import java.util.ArrayList;
 
+import com.android.launcher.R;
+
 /**
  * The workspace is a wide area with a wallpaper and a finite number of screens. Each
  * screen contains a number of icons, folders or widgets the user can interact with.

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1258,11 +1258,11 @@ public void onClick(View v) {
         Object tag = v.getTag();
         if (tag instanceof ShortcutInfo) {
             // Open shortcut
-            final Intent intent = ((ShortcutInfo)tag).intent;
+            final Intent intent = ((ShortcutInfo) tag).intent;
             int[] pos = new int[2];
             v.getLocationOnScreen(pos);
-            intent.setSourceBounds(
-                    new Rect(pos[0], pos[1], pos[0]+v.getWidth(), pos[1]+v.getHeight()));
+            intent.setSourceBounds(new Rect(pos[0], pos[1],
+                    pos[0] + v.getWidth(), pos[1] + v.getHeight()));
             startActivitySafely(intent);
         } else if (tag instanceof FolderInfo) {
             handleFolderClick((FolderInfo) tag);

File: src/com/android/launcher2/LauncherProvider.java
Patch:
@@ -521,6 +521,7 @@ private void normalizeIcons(SQLiteDatabase db) {
                         logged = true;
                     }
                 }
+                db.setTransactionSuccessful();
             } catch (SQLException ex) {
                 Log.w(TAG, "Problem while allocating appWidgetIds for existing widgets", ex);
             } finally {

File: src/com/android/launcher2/LauncherProvider.java
Patch:
@@ -480,6 +480,7 @@ private boolean updateContactsShortcuts(SQLiteDatabase db) {
         private void normalizeIcons(SQLiteDatabase db) {
             Log.d(TAG, "normalizing icons");
 
+            db.beginTransaction();
             Cursor c = null;
             try {
                 boolean logged = false;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -256,6 +256,7 @@ void setCurrentScreen(int currentScreen) {
         mPreviousIndicator.setLevel(mCurrentScreen);
         mNextIndicator.setLevel(mCurrentScreen);
         scrollTo(mCurrentScreen * getWidth(), 0);
+        updateWallpaperOffset();
         invalidate();
     }
 
@@ -833,7 +834,7 @@ void snapToScreen(int whichScreen) {
 
         mPreviousIndicator.setLevel(mNextScreen);
         mNextIndicator.setLevel(mNextScreen);
-        
+
         View focusedChild = getFocusedChild();
         if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
             focusedChild.clearFocus();

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -256,6 +256,7 @@ void setCurrentScreen(int currentScreen) {
         mPreviousIndicator.setLevel(mCurrentScreen);
         mNextIndicator.setLevel(mCurrentScreen);
         scrollTo(mCurrentScreen * getWidth(), 0);
+        updateWallpaperOffset();
         invalidate();
     }
 
@@ -833,7 +834,7 @@ void snapToScreen(int whichScreen) {
 
         mPreviousIndicator.setLevel(mNextScreen);
         mNextIndicator.setLevel(mNextScreen);
-        
+
         View focusedChild = getFocusedChild();
         if (focusedChild != null && screenDelta != 0 && focusedChild == getChildAt(mCurrentScreen)) {
             focusedChild.clearFocus();

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -558,6 +558,7 @@ private void setupViews() {
 
         mWorkspace = (Workspace) dragLayer.findViewById(R.id.workspace);
         final Workspace workspace = mWorkspace;
+        workspace.setHapticFeedbackEnabled(false);
 
         DeleteZone deleteZone = (DeleteZone) dragLayer.findViewById(R.id.delete_zone);
         mDeleteZone = deleteZone;
@@ -1385,6 +1386,8 @@ public boolean onLongClick(View v) {
                 if (cellInfo.valid) {
                     // User long pressed on empty space
                     mWorkspace.setAllowLongPress(false);
+                    mWorkspace.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS,
+                            HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
                     showAddDialog(cellInfo);
                 }
             } else {

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -954,7 +954,7 @@ private void onDropExternal(int x, int y, Object dragInfo, CellLayout cellLayout
         case LauncherSettings.Favorites.ITEM_TYPE_SHORTCUT:
             if (info.container == NO_ID) {
                 // Came from all apps -- make a copy
-                info = new ShortcutInfo((ShortcutInfo)info);
+                info = new ShortcutInfo((ApplicationInfo)info);
             }
             view = mLauncher.createShortcut(R.layout.application, cellLayout, (ShortcutInfo)info);
             break;

File: src/com/android/launcher2/LauncherProvider.java
Patch:
@@ -486,7 +486,7 @@ private void normalizeIcons(SQLiteDatabase db) {
                 final ContentValues values = new ContentValues();
                 final ContentResolver cr = mContext.getContentResolver();
                 final SQLiteStatement update = db.compileStatement("UPDATE favorites "
-                        + "WHERE _id=? SET icon=?");
+                        + "SET icon=? WHERE _id=?");
 
                 c = db.rawQuery("SELECT _id, icon FROM favorites WHERE iconType=" +
                         Favorites.ICON_TYPE_BITMAP, null);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.android.launcher2;
 
+import com.android.common.Search;
+
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.app.Dialog;
@@ -963,7 +965,7 @@ public void startSearch(String initialQuery, boolean selectInitialQuery,
         }
         if (appSearchData == null) {
             appSearchData = new Bundle();
-            appSearchData.putString(SearchManager.SOURCE, "launcher-search");
+            appSearchData.putString(Search.SOURCE, "launcher-search");
         }
 
         final SearchManager searchManager =

File: src/com/android/launcher2/Utilities.java
Patch:
@@ -372,7 +372,7 @@ static class BubbleText {
 
             final float paddingLeft = 5.0f * scale;
             final float paddingRight = 5.0f * scale;
-            final float cellWidth = resources.getDimension(R.dimen.workspace_cell_width);
+            final float cellWidth = resources.getDimension(R.dimen.title_texture_width);
             final float bubbleWidth = cellWidth - paddingLeft - paddingRight;
             mBubblePadding = 3.0f * scale;
 
@@ -399,7 +399,7 @@ static class BubbleText {
             mFirstLineY = (int)(leading + ascent + 0.5f);
             mLineHeight = (int)(leading + ascent + descent + 0.5f);
 
-            mBitmapWidth = roundToPow2((int)(mBubbleRect.width() + 0.5f));
+            mBitmapWidth = (int)(mBubbleRect.width() + 0.5f);
             mBitmapHeight = roundToPow2((int)((MAX_LINES * mLineHeight) + leading + 0.5f));
 
             mBubbleRect.offsetTo((mBitmapWidth-mBubbleRect.width())/2, 0);

File: src/com/android/launcher2/Utilities.java
Patch:
@@ -372,7 +372,7 @@ static class BubbleText {
 
             final float paddingLeft = 5.0f * scale;
             final float paddingRight = 5.0f * scale;
-            final float cellWidth = resources.getDimension(R.dimen.workspace_cell_width);
+            final float cellWidth = resources.getDimension(R.dimen.title_texture_width);
             final float bubbleWidth = cellWidth - paddingLeft - paddingRight;
             mBubblePadding = 3.0f * scale;
 
@@ -399,7 +399,7 @@ static class BubbleText {
             mFirstLineY = (int)(leading + ascent + 0.5f);
             mLineHeight = (int)(leading + ascent + descent + 0.5f);
 
-            mBitmapWidth = roundToPow2((int)(mBubbleRect.width() + 0.5f));
+            mBitmapWidth = (int)(mBubbleRect.width() + 0.5f);
             mBitmapHeight = roundToPow2((int)((MAX_LINES * mLineHeight) + leading + 0.5f));
 
             mBubbleRect.offsetTo((mBitmapWidth-mBubbleRect.width())/2, 0);

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -1267,7 +1267,9 @@ private void saveAppsList() {
             if (mInvokeResetWAR != null) {
                 mInvokeResetWAR.execute();
             }
-            mRS.contextBindRootScript(mScript);
+            if (mScript != null) {
+                mRS.contextBindRootScript(mScript);
+            }
         }
 
         void initTouchState() {

File: src/com/android/launcher2/DragView.java
Patch:
@@ -37,7 +37,7 @@
 
 public class DragView extends View implements TweenCallback {
     // Number of pixels to add to the dragged item for scaling.  Should be even for pixel alignment.
-    private static final int DRAG_SCALE = 24;
+    private static final int DRAG_SCALE = 40;
 
     private Bitmap mBitmap;
     private Paint mPaint;

File: src/com/android/launcher2/LauncherAppWidgetInfo.java
Patch:
@@ -25,7 +25,8 @@
 class LauncherAppWidgetInfo extends ItemInfo {
 
     /**
-     * Identifier for this widget when talking with {@link AppWidgetManager} for updates.
+     * Identifier for this widget when talking with
+     * {@link android.appwidget.AppWidgetManager} for updates.
      */
     int appWidgetId;
     

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2094,7 +2094,7 @@ public void bindPackageUpdated(String packageName, ArrayList<ApplicationInfo> ap
      */
     public void bindPackageRemoved(String packageName, ArrayList<ApplicationInfo> apps) {
         removeDialog(DIALOG_CREATE_SHORTCUT);
-        mWorkspace.removeShortcutsForPackage(packageName);
+        mWorkspace.removeItemsForPackage(packageName);
         mAllAppsGrid.removeApps(apps);
     }
 

File: src/com/android/launcher2/LauncherApplication.java
Patch:
@@ -18,7 +18,6 @@
 
 import android.app.Application;
 import android.content.ContentResolver;
-import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.database.ContentObserver;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -556,6 +556,7 @@ private void setupViews() {
         dragController.setDragScoller(workspace);
         dragController.setDragListener(deleteZone);
         dragController.setScrollView(dragLayer);
+        dragController.setMoveTarget(workspace);
 
         // The order here is bottom to top.
         dragController.addDropTarget(workspace);

File: src/com/android/launcher2/CellLayout.java
Patch:
@@ -901,7 +901,7 @@ public LayoutParams(ViewGroup.LayoutParams source) {
         }
         
         public LayoutParams(int cellX, int cellY, int cellHSpan, int cellVSpan) {
-            super(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
+            super(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
             this.cellX = cellX;
             this.cellY = cellY;
             this.cellHSpan = cellHSpan;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -751,15 +751,15 @@ static ApplicationInfo addShortcut(Context context, Intent data,
     private static ApplicationInfo infoFromShortcutIntent(Context context, Intent data) {
         Intent intent = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_INTENT);
         String name = data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME);
-        Bitmap bitmap = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON);
+        Parcelable bitmap = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON);
 
         Drawable icon = null;
         boolean filtered = false;
         boolean customIcon = false;
         ShortcutIconResource iconResource = null;
 
-        if (bitmap != null) {
-            icon = new FastBitmapDrawable(Utilities.createBitmapThumbnail(bitmap, context));
+        if (bitmap != null && bitmap instanceof Bitmap) {
+            icon = new FastBitmapDrawable(Utilities.createBitmapThumbnail((Bitmap) bitmap, context));
             filtered = true;
             customIcon = true;
         } else {

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -804,7 +804,7 @@ public class RolloRS {
         private Canvas mSelectionCanvas;
 
         boolean mHasSurface = false;
-        private boolean mAppsDirty = false;
+        private boolean mAppsDirty = true;
 
         Params mParams;
         State mState;
@@ -1051,7 +1051,7 @@ private void initRs() {
 
         void dirtyCheck() {
             if (mHasSurface) {
-                if (mAppsDirty) {
+                if (mAppsDirty && mAllAppsList != null) {
                     for (int i=0; i < mState.iconCount; i++) {
                         uploadAppIcon(i, mAllAppsList.get(i));
                     }

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -804,7 +804,7 @@ public class RolloRS {
         private Canvas mSelectionCanvas;
 
         boolean mHasSurface = false;
-        private boolean mAppsDirty = false;
+        private boolean mAppsDirty = true;
 
         Params mParams;
         State mState;
@@ -1051,7 +1051,7 @@ private void initRs() {
 
         void dirtyCheck() {
             if (mHasSurface) {
-                if (mAppsDirty) {
+                if (mAppsDirty && mAllAppsList != null) {
                     for (int i=0; i < mState.iconCount; i++) {
                         uploadAppIcon(i, mAllAppsList.get(i));
                     }

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -804,7 +804,7 @@ public class RolloRS {
         private Canvas mSelectionCanvas;
 
         boolean mHasSurface = false;
-        private boolean mAppsDirty = false;
+        private boolean mAppsDirty = true;
 
         Params mParams;
         State mState;
@@ -1051,7 +1051,7 @@ private void initRs() {
 
         void dirtyCheck() {
             if (mHasSurface) {
-                if (mAppsDirty) {
+                if (mAppsDirty && mAllAppsList != null) {
                     for (int i=0; i < mState.iconCount; i++) {
                         uploadAppIcon(i, mAllAppsList.get(i));
                     }

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -804,7 +804,7 @@ public class RolloRS {
         private Canvas mSelectionCanvas;
 
         boolean mHasSurface = false;
-        private boolean mAppsDirty = false;
+        private boolean mAppsDirty = true;
 
         Params mParams;
         State mState;
@@ -1051,7 +1051,7 @@ private void initRs() {
 
         void dirtyCheck() {
             if (mHasSurface) {
-                if (mAppsDirty) {
+                if (mAppsDirty && mAllAppsList != null) {
                     for (int i=0; i < mState.iconCount; i++) {
                         uploadAppIcon(i, mAllAppsList.get(i));
                     }

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -368,8 +368,8 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {
                     } else if (currentTopRow > 0) {
                         newSelection = currentSelection - Defines.COLUMNS_PER_PAGE;
                         mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
-                    } else {
-                        newSelection = Defines.COLUMNS_PER_PAGE * (Defines.ROWS_PER_PAGE-1);
+                    } else if (currentPageRow != 0) {
+                        newSelection = currentTopRow * Defines.ROWS_PER_PAGE;
                     }
                 }
                 handled = true;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -565,7 +565,6 @@ public boolean dispatchTouchEvent(MotionEvent ev) {
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         final boolean workspaceLocked = mLauncher.isWorkspaceLocked();
         final boolean allAppsVisible = mLauncher.isAllAppsVisible();
-        Log.d(TAG, "workspaceLocked=" + workspaceLocked + " allAppsVisible=" + allAppsVisible);
         if (workspaceLocked || allAppsVisible) {
             return false; // We don't want the events.  Let them fall through to the all apps view.
         }

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -1149,7 +1149,7 @@ private void reallocAppsList(int count) {
             int[] labelIds = new int[count];
             mAllocLabelIds = Allocation.createSized(mRS, Element.USER_I32(mRS), count);
 
-            final int oldCount = mIcons.length;
+            final int oldCount = mRollo.mState.iconCount;
 
             System.arraycopy(mIcons, 0, icons, 0, oldCount);
             System.arraycopy(mIconIds, 0, iconIds, 0, oldCount);

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -368,8 +368,8 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {
                     } else if (currentTopRow > 0) {
                         newSelection = currentSelection - Defines.COLUMNS_PER_PAGE;
                         mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
-                    } else {
-                        newSelection = Defines.COLUMNS_PER_PAGE * (Defines.ROWS_PER_PAGE-1);
+                    } else if (currentPageRow != 0) {
+                        newSelection = currentTopRow * Defines.ROWS_PER_PAGE;
                     }
                 }
                 handled = true;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -565,7 +565,6 @@ public boolean dispatchTouchEvent(MotionEvent ev) {
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         final boolean workspaceLocked = mLauncher.isWorkspaceLocked();
         final boolean allAppsVisible = mLauncher.isAllAppsVisible();
-        Log.d(TAG, "workspaceLocked=" + workspaceLocked + " allAppsVisible=" + allAppsVisible);
         if (workspaceLocked || allAppsVisible) {
             return false; // We don't want the events.  Let them fall through to the all apps view.
         }

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -1149,7 +1149,7 @@ private void reallocAppsList(int count) {
             int[] labelIds = new int[count];
             mAllocLabelIds = Allocation.createSized(mRS, Element.USER_I32(mRS), count);
 
-            final int oldCount = mIcons.length;
+            final int oldCount = mRollo.mState.iconCount;
 
             System.arraycopy(mIcons, 0, icons, 0, oldCount);
             System.arraycopy(mIconIds, 0, iconIds, 0, oldCount);

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -368,8 +368,8 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {
                     } else if (currentTopRow > 0) {
                         newSelection = currentSelection - Defines.COLUMNS_PER_PAGE;
                         mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
-                    } else {
-                        newSelection = Defines.COLUMNS_PER_PAGE * (Defines.ROWS_PER_PAGE-1);
+                    } else if (currentPageRow != 0) {
+                        newSelection = currentTopRow * Defines.ROWS_PER_PAGE;
                     }
                 }
                 handled = true;

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -368,8 +368,8 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {
                     } else if (currentTopRow > 0) {
                         newSelection = currentSelection - Defines.COLUMNS_PER_PAGE;
                         mRollo.moveTo(newSelection / Defines.COLUMNS_PER_PAGE);
-                    } else {
-                        newSelection = Defines.COLUMNS_PER_PAGE * (Defines.ROWS_PER_PAGE-1);
+                    } else if (currentPageRow != 0) {
+                        newSelection = currentTopRow * Defines.ROWS_PER_PAGE;
                     }
                 }
                 handled = true;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -565,7 +565,6 @@ public boolean dispatchTouchEvent(MotionEvent ev) {
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         final boolean workspaceLocked = mLauncher.isWorkspaceLocked();
         final boolean allAppsVisible = mLauncher.isAllAppsVisible();
-        Log.d(TAG, "workspaceLocked=" + workspaceLocked + " allAppsVisible=" + allAppsVisible);
         if (workspaceLocked || allAppsVisible) {
             return false; // We don't want the events.  Let them fall through to the all apps view.
         }

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -693,7 +693,6 @@ public boolean dispatchTouchEvent(MotionEvent ev) {
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         final boolean workspaceLocked = mLauncher.isWorkspaceLocked();
         final boolean allAppsVisible = mLauncher.isAllAppsVisible();
-        Log.d(TAG, "workspaceLocked=" + workspaceLocked + " allAppsVisible=" + allAppsVisible);
         if (workspaceLocked || allAppsVisible) {
             return false; // We don't want the events.  Let them fall through to the all apps view.
         }

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -1149,7 +1149,7 @@ private void reallocAppsList(int count) {
             int[] labelIds = new int[count];
             mAllocLabelIds = Allocation.createSized(mRS, Element.USER_I32(mRS), count);
 
-            final int oldCount = mIcons.length;
+            final int oldCount = mRollo.mState.iconCount;
 
             System.arraycopy(mIcons, 0, icons, 0, oldCount);
             System.arraycopy(mIconIds, 0, iconIds, 0, oldCount);

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -1149,7 +1149,7 @@ private void reallocAppsList(int count) {
             int[] labelIds = new int[count];
             mAllocLabelIds = Allocation.createSized(mRS, Element.USER_I32(mRS), count);
 
-            final int oldCount = mIcons.length;
+            final int oldCount = mRollo.mState.iconCount;
 
             System.arraycopy(mIcons, 0, icons, 0, oldCount);
             System.arraycopy(mIconIds, 0, iconIds, 0, oldCount);

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -963,8 +963,8 @@ private void loadAllApps() {
                             // This builds the icon bitmaps.
                             mAllAppsList.add(AppInfoCache.cache(apps.get(i), context, bubble));
                         }
-                        Collections.sort(mAllAppsList.data, sComparator);
-                        Collections.sort(mAllAppsList.added, sComparator);
+                        Collections.sort(mAllAppsList.data, APP_NAME_COMPARATOR);
+                        Collections.sort(mAllAppsList.added, APP_NAME_COMPARATOR);
                         if (DEBUG_LOADERS) {
                             Log.d(TAG, "cached app icons in "
                                     + (SystemClock.uptimeMillis()-t) + "ms");
@@ -1220,7 +1220,7 @@ private static String getLabel(PackageManager manager, ActivityInfo activityInfo
     }
 
     private static final Collator sCollator = Collator.getInstance();
-    private static final Comparator<ApplicationInfo> sComparator
+    public static final Comparator<ApplicationInfo> APP_NAME_COMPARATOR
             = new Comparator<ApplicationInfo>() {
         public final int compare(ApplicationInfo a, ApplicationInfo b) {
             return sCollator.compare(a.title.toString(), b.title.toString());

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -963,8 +963,8 @@ private void loadAllApps() {
                             // This builds the icon bitmaps.
                             mAllAppsList.add(AppInfoCache.cache(apps.get(i), context, bubble));
                         }
-                        Collections.sort(mAllAppsList.data, sComparator);
-                        Collections.sort(mAllAppsList.added, sComparator);
+                        Collections.sort(mAllAppsList.data, APP_NAME_COMPARATOR);
+                        Collections.sort(mAllAppsList.added, APP_NAME_COMPARATOR);
                         if (DEBUG_LOADERS) {
                             Log.d(TAG, "cached app icons in "
                                     + (SystemClock.uptimeMillis()-t) + "ms");
@@ -1220,7 +1220,7 @@ private static String getLabel(PackageManager manager, ActivityInfo activityInfo
     }
 
     private static final Collator sCollator = Collator.getInstance();
-    private static final Comparator<ApplicationInfo> sComparator
+    public static final Comparator<ApplicationInfo> APP_NAME_COMPARATOR
             = new Comparator<ApplicationInfo>() {
         public final int compare(ApplicationInfo a, ApplicationInfo b) {
             return sCollator.compare(a.title.toString(), b.title.toString());

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -963,8 +963,8 @@ private void loadAllApps() {
                             // This builds the icon bitmaps.
                             mAllAppsList.add(AppInfoCache.cache(apps.get(i), context, bubble));
                         }
-                        Collections.sort(mAllAppsList.data, sComparator);
-                        Collections.sort(mAllAppsList.added, sComparator);
+                        Collections.sort(mAllAppsList.data, APP_NAME_COMPARATOR);
+                        Collections.sort(mAllAppsList.added, APP_NAME_COMPARATOR);
                         if (DEBUG_LOADERS) {
                             Log.d(TAG, "cached app icons in "
                                     + (SystemClock.uptimeMillis()-t) + "ms");
@@ -1220,7 +1220,7 @@ private static String getLabel(PackageManager manager, ActivityInfo activityInfo
     }
 
     private static final Collator sCollator = Collator.getInstance();
-    private static final Comparator<ApplicationInfo> sComparator
+    public static final Comparator<ApplicationInfo> APP_NAME_COMPARATOR
             = new Comparator<ApplicationInfo>() {
         public final int compare(ApplicationInfo a, ApplicationInfo b) {
             return sCollator.compare(a.title.toString(), b.title.toString());

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -963,8 +963,8 @@ private void loadAllApps() {
                             // This builds the icon bitmaps.
                             mAllAppsList.add(AppInfoCache.cache(apps.get(i), context, bubble));
                         }
-                        Collections.sort(mAllAppsList.data, sComparator);
-                        Collections.sort(mAllAppsList.added, sComparator);
+                        Collections.sort(mAllAppsList.data, APP_NAME_COMPARATOR);
+                        Collections.sort(mAllAppsList.added, APP_NAME_COMPARATOR);
                         if (DEBUG_LOADERS) {
                             Log.d(TAG, "cached app icons in "
                                     + (SystemClock.uptimeMillis()-t) + "ms");
@@ -1220,7 +1220,7 @@ private static String getLabel(PackageManager manager, ActivityInfo activityInfo
     }
 
     private static final Collator sCollator = Collator.getInstance();
-    private static final Comparator<ApplicationInfo> sComparator
+    public static final Comparator<ApplicationInfo> APP_NAME_COMPARATOR
             = new Comparator<ApplicationInfo>() {
         public final int compare(ApplicationInfo a, ApplicationInfo b) {
             return sCollator.compare(a.title.toString(), b.title.toString());

File: src/com/android/launcher2/AllAppsList.java
Patch:
@@ -152,7 +152,7 @@ public void updatePackage(Context context, String packageName) {
                     data.add(applicationInfo);
                     added.add(applicationInfo);
                 } else {
-                    AppInfoCache.update(info, applicationInfo, context);
+                    AppInfoCache.update(info, applicationInfo, context, bubble);
                     modified.add(applicationInfo);
                 }
             }

File: src/com/android/launcher2/AppInfoCache.java
Patch:
@@ -86,9 +86,10 @@ public static ApplicationInfo cache(ResolveInfo info, Context context,
     /**
      * Update the entry in the in the cache with its new metadata.
      */
-    public static void update(ResolveInfo info, ApplicationInfo applicationInfo, Context context) {
+    public static void update(ResolveInfo info, ApplicationInfo applicationInfo, Context context,
+            Utilities.BubbleText bubble) {
         synchronized (sCache) {
-            updateTitleAndIcon(info, applicationInfo, context, new Utilities.BubbleText(context));
+            updateTitleAndIcon(info, applicationInfo, context, bubble);
 
             ComponentName componentName = new ComponentName(
                     info.activityInfo.applicationInfo.packageName, info.activityInfo.name);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2222,6 +2222,7 @@ public void bindPackageAdded(ArrayList<ApplicationInfo> apps) {
     public void bindPackageUpdated(String packageName, ArrayList<ApplicationInfo> apps) {
         removeDialog(DIALOG_CREATE_SHORTCUT);
         mWorkspace.updateShortcutsForPackage(packageName);
+        mAllAppsGrid.updateApps(packageName, apps);
     }
 
     /**

File: src/com/android/launcher2/AllAppsList.java
Patch:
@@ -152,7 +152,7 @@ public void updatePackage(Context context, String packageName) {
                     data.add(applicationInfo);
                     added.add(applicationInfo);
                 } else {
-                    AppInfoCache.update(info, applicationInfo, context);
+                    AppInfoCache.update(info, applicationInfo, context, bubble);
                     modified.add(applicationInfo);
                 }
             }

File: src/com/android/launcher2/AppInfoCache.java
Patch:
@@ -86,9 +86,10 @@ public static ApplicationInfo cache(ResolveInfo info, Context context,
     /**
      * Update the entry in the in the cache with its new metadata.
      */
-    public static void update(ResolveInfo info, ApplicationInfo applicationInfo, Context context) {
+    public static void update(ResolveInfo info, ApplicationInfo applicationInfo, Context context,
+            Utilities.BubbleText bubble) {
         synchronized (sCache) {
-            updateTitleAndIcon(info, applicationInfo, context, new Utilities.BubbleText(context));
+            updateTitleAndIcon(info, applicationInfo, context, bubble);
 
             ComponentName componentName = new ComponentName(
                     info.activityInfo.applicationInfo.packageName, info.activityInfo.name);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2222,6 +2222,7 @@ public void bindPackageAdded(ArrayList<ApplicationInfo> apps) {
     public void bindPackageUpdated(String packageName, ArrayList<ApplicationInfo> apps) {
         removeDialog(DIALOG_CREATE_SHORTCUT);
         mWorkspace.updateShortcutsForPackage(packageName);
+        mAllAppsGrid.updateApps(packageName, apps);
     }
 
     /**

File: src/com/android/launcher2/AllAppsList.java
Patch:
@@ -152,7 +152,7 @@ public void updatePackage(Context context, String packageName) {
                     data.add(applicationInfo);
                     added.add(applicationInfo);
                 } else {
-                    AppInfoCache.update(info, applicationInfo, context);
+                    AppInfoCache.update(info, applicationInfo, context, bubble);
                     modified.add(applicationInfo);
                 }
             }

File: src/com/android/launcher2/AppInfoCache.java
Patch:
@@ -86,9 +86,10 @@ public static ApplicationInfo cache(ResolveInfo info, Context context,
     /**
      * Update the entry in the in the cache with its new metadata.
      */
-    public static void update(ResolveInfo info, ApplicationInfo applicationInfo, Context context) {
+    public static void update(ResolveInfo info, ApplicationInfo applicationInfo, Context context,
+            Utilities.BubbleText bubble) {
         synchronized (sCache) {
-            updateTitleAndIcon(info, applicationInfo, context, new Utilities.BubbleText(context));
+            updateTitleAndIcon(info, applicationInfo, context, bubble);
 
             ComponentName componentName = new ComponentName(
                     info.activityInfo.applicationInfo.packageName, info.activityInfo.name);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2222,6 +2222,7 @@ public void bindPackageAdded(ArrayList<ApplicationInfo> apps) {
     public void bindPackageUpdated(String packageName, ArrayList<ApplicationInfo> apps) {
         removeDialog(DIALOG_CREATE_SHORTCUT);
         mWorkspace.updateShortcutsForPackage(packageName);
+        mAllAppsGrid.updateApps(packageName, apps);
     }
 
     /**

File: src/com/android/launcher2/AllAppsList.java
Patch:
@@ -152,7 +152,7 @@ public void updatePackage(Context context, String packageName) {
                     data.add(applicationInfo);
                     added.add(applicationInfo);
                 } else {
-                    AppInfoCache.update(info, applicationInfo, context);
+                    AppInfoCache.update(info, applicationInfo, context, bubble);
                     modified.add(applicationInfo);
                 }
             }

File: src/com/android/launcher2/AppInfoCache.java
Patch:
@@ -86,9 +86,10 @@ public static ApplicationInfo cache(ResolveInfo info, Context context,
     /**
      * Update the entry in the in the cache with its new metadata.
      */
-    public static void update(ResolveInfo info, ApplicationInfo applicationInfo, Context context) {
+    public static void update(ResolveInfo info, ApplicationInfo applicationInfo, Context context,
+            Utilities.BubbleText bubble) {
         synchronized (sCache) {
-            updateTitleAndIcon(info, applicationInfo, context, new Utilities.BubbleText(context));
+            updateTitleAndIcon(info, applicationInfo, context, bubble);
 
             ComponentName componentName = new ComponentName(
                     info.activityInfo.applicationInfo.packageName, info.activityInfo.name);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -2222,6 +2222,7 @@ public void bindPackageAdded(ArrayList<ApplicationInfo> apps) {
     public void bindPackageUpdated(String packageName, ArrayList<ApplicationInfo> apps) {
         removeDialog(DIALOG_CREATE_SHORTCUT);
         mWorkspace.updateShortcutsForPackage(packageName);
+        mAllAppsGrid.updateApps(packageName, apps);
     }
 
     /**

File: src/com/android/launcher2/Search.java
Patch:
@@ -253,7 +253,8 @@ public void clearAnimation() {
             if (animation.hasEnded() 
                     && animation.getFillAfter()
                     && animation.willChangeBounds()) {
-                ((View) getParent()).invalidate();
+                View parent = (View) getParent();
+                if (parent != null) parent.invalidate();
             } else {
                 invalidate();
             }

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -980,7 +980,9 @@ private void loadAllApps() {
 
             private void bindAllApps() {
                 synchronized (mLock) {
-                    final ArrayList<ApplicationInfo> results = mAllAppsList.added;
+                    final ArrayList<ApplicationInfo> results
+                            = (ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
+                    // We're adding this now, so clear out this so we don't re-send them.
                     mAllAppsList.added = new ArrayList<ApplicationInfo>();
                     mHandler.post(new Runnable() {
                         public void run() {

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -980,7 +980,9 @@ private void loadAllApps() {
 
             private void bindAllApps() {
                 synchronized (mLock) {
-                    final ArrayList<ApplicationInfo> results = mAllAppsList.added;
+                    final ArrayList<ApplicationInfo> results
+                            = (ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
+                    // We're adding this now, so clear out this so we don't re-send them.
                     mAllAppsList.added = new ArrayList<ApplicationInfo>();
                     mHandler.post(new Runnable() {
                         public void run() {

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -980,7 +980,9 @@ private void loadAllApps() {
 
             private void bindAllApps() {
                 synchronized (mLock) {
-                    final ArrayList<ApplicationInfo> results = mAllAppsList.added;
+                    final ArrayList<ApplicationInfo> results
+                            = (ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
+                    // We're adding this now, so clear out this so we don't re-send them.
                     mAllAppsList.added = new ArrayList<ApplicationInfo>();
                     mHandler.post(new Runnable() {
                         public void run() {

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -980,7 +980,9 @@ private void loadAllApps() {
 
             private void bindAllApps() {
                 synchronized (mLock) {
-                    final ArrayList<ApplicationInfo> results = mAllAppsList.added;
+                    final ArrayList<ApplicationInfo> results
+                            = (ArrayList<ApplicationInfo>)mAllAppsList.data.clone();
+                    // We're adding this now, so clear out this so we don't re-send them.
                     mAllAppsList.added = new ArrayList<ApplicationInfo>();
                     mHandler.post(new Runnable() {
                         public void run() {

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1332,7 +1332,7 @@ public boolean dispatchKeyEvent(KeyEvent event) {
         } else if (event.getAction() == KeyEvent.ACTION_UP) {
             switch (event.getKeyCode()) {
                 case KeyEvent.KEYCODE_BACK:
-                    if (!event.isCanceled()) {
+                    if (event.isTracking() && !event.isCanceled()) {
                         mWorkspace.dispatchKeyEvent(event);
                         if (isAllAppsVisible()) {
                             closeAllApps(true);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1332,7 +1332,7 @@ public boolean dispatchKeyEvent(KeyEvent event) {
         } else if (event.getAction() == KeyEvent.ACTION_UP) {
             switch (event.getKeyCode()) {
                 case KeyEvent.KEYCODE_BACK:
-                    if (!event.isCanceled()) {
+                    if (event.isTracking() && !event.isCanceled()) {
                         mWorkspace.dispatchKeyEvent(event);
                         if (isAllAppsVisible()) {
                             closeAllApps(true);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1332,7 +1332,7 @@ public boolean dispatchKeyEvent(KeyEvent event) {
         } else if (event.getAction() == KeyEvent.ACTION_UP) {
             switch (event.getKeyCode()) {
                 case KeyEvent.KEYCODE_BACK:
-                    if (!event.isCanceled()) {
+                    if (event.isTracking() && !event.isCanceled()) {
                         mWorkspace.dispatchKeyEvent(event);
                         if (isAllAppsVisible()) {
                             closeAllApps(true);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1332,7 +1332,7 @@ public boolean dispatchKeyEvent(KeyEvent event) {
         } else if (event.getAction() == KeyEvent.ACTION_UP) {
             switch (event.getKeyCode()) {
                 case KeyEvent.KEYCODE_BACK:
-                    if (!event.isCanceled()) {
+                    if (event.isTracking() && !event.isCanceled()) {
                         mWorkspace.dispatchKeyEvent(event);
                         if (isAllAppsVisible()) {
                             closeAllApps(true);

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -616,6 +616,7 @@ private void loadWorkspace() {
 
                 mItems.clear();
                 mAppWidgets.clear();
+                mFolders.clear();
 
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -616,6 +616,7 @@ private void loadWorkspace() {
 
                 mItems.clear();
                 mAppWidgets.clear();
+                mFolders.clear();
 
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -616,6 +616,7 @@ private void loadWorkspace() {
 
                 mItems.clear();
                 mAppWidgets.clear();
+                mFolders.clear();
 
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -616,6 +616,7 @@ private void loadWorkspace() {
 
                 mItems.clear();
                 mAppWidgets.clear();
+                mFolders.clear();
 
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -616,6 +616,7 @@ private void loadWorkspace() {
 
                 mItems.clear();
                 mAppWidgets.clear();
+                mFolders.clear();
 
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -483,6 +483,7 @@ public void startFading(boolean dest) {
 
     @Override
     protected void dispatchDraw(Canvas canvas) {
+        /*
         final boolean allAppsOpaque = mLauncher.isAllAppsOpaque();
         if (mFading == allAppsOpaque) {
             invalidate();
@@ -494,6 +495,7 @@ protected void dispatchDraw(Canvas canvas) {
             canvas.drawARGB(0xff, 0, 0, 0);
             return;
         }
+        */
 
         boolean restore = false;
         int restoreCount = 0;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -437,6 +437,7 @@ protected void onPause() {
         super.onPause();
         dismissPreview(mPreviousView);
         dismissPreview(mNextView);
+        mDragController.cancelDrag();
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -483,6 +483,7 @@ public void startFading(boolean dest) {
 
     @Override
     protected void dispatchDraw(Canvas canvas) {
+        /*
         final boolean allAppsOpaque = mLauncher.isAllAppsOpaque();
         if (mFading == allAppsOpaque) {
             invalidate();
@@ -494,6 +495,7 @@ protected void dispatchDraw(Canvas canvas) {
             canvas.drawARGB(0xff, 0, 0, 0);
             return;
         }
+        */
 
         boolean restore = false;
         int restoreCount = 0;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -437,6 +437,7 @@ protected void onPause() {
         super.onPause();
         dismissPreview(mPreviousView);
         dismissPreview(mNextView);
+        mDragController.cancelDrag();
     }
 
     @Override

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -483,6 +483,7 @@ public void startFading(boolean dest) {
 
     @Override
     protected void dispatchDraw(Canvas canvas) {
+        /*
         final boolean allAppsOpaque = mLauncher.isAllAppsOpaque();
         if (mFading == allAppsOpaque) {
             invalidate();
@@ -494,6 +495,7 @@ protected void dispatchDraw(Canvas canvas) {
             canvas.drawARGB(0xff, 0, 0, 0);
             return;
         }
+        */
 
         boolean restore = false;
         int restoreCount = 0;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -483,6 +483,7 @@ public void startFading(boolean dest) {
 
     @Override
     protected void dispatchDraw(Canvas canvas) {
+        /*
         final boolean allAppsOpaque = mLauncher.isAllAppsOpaque();
         if (mFading == allAppsOpaque) {
             invalidate();
@@ -494,6 +495,7 @@ protected void dispatchDraw(Canvas canvas) {
             canvas.drawARGB(0xff, 0, 0, 0);
             return;
         }
+        */
 
         boolean restore = false;
         int restoreCount = 0;

File: src/com/android/launcher2/Workspace.java
Patch:
@@ -483,6 +483,7 @@ public void startFading(boolean dest) {
 
     @Override
     protected void dispatchDraw(Canvas canvas) {
+        /*
         final boolean allAppsOpaque = mLauncher.isAllAppsOpaque();
         if (mFading == allAppsOpaque) {
             invalidate();
@@ -494,6 +495,7 @@ protected void dispatchDraw(Canvas canvas) {
             canvas.drawARGB(0xff, 0, 0, 0);
             return;
         }
+        */
 
         boolean restore = false;
         int restoreCount = 0;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -437,6 +437,7 @@ protected void onPause() {
         super.onPause();
         dismissPreview(mPreviousView);
         dismissPreview(mNextView);
+        mDragController.cancelDrag();
     }
 
     @Override

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -437,6 +437,7 @@ protected void onPause() {
         super.onPause();
         dismissPreview(mPreviousView);
         dismissPreview(mNextView);
+        mDragController.cancelDrag();
     }
 
     @Override

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -437,6 +437,7 @@ protected void onPause() {
         super.onPause();
         dismissPreview(mPreviousView);
         dismissPreview(mNextView);
+        mDragController.cancelDrag();
     }
 
     @Override

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -179,6 +179,8 @@ public void setLauncher(Launcher launcher) {
     public void surfaceDestroyed(SurfaceHolder holder) {
         super.surfaceDestroyed(holder);
         mRollo.mHasSurface = false;
+        // Without this, we leak mMessageCallback which leaks the context.
+        mRS.mMessageCallback = null;
     }
 
     @Override

File: src/com/android/launcher2/HandleView.java
Patch:
@@ -45,6 +45,8 @@ public HandleView(Context context, AttributeSet attrs, int defStyle) {
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.HandleView, defStyle, 0);
         mOrientation = a.getInt(R.styleable.HandleView_direction, ORIENTATION_HORIZONTAL);
         a.recycle();
+
+        setContentDescription(context.getString(R.string.all_apps_button_label));
     }
 
     @Override

File: src/com/android/launcher2/DragController.java
Patch:
@@ -300,7 +300,7 @@ private void endDrag() {
      */
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         if (false) {
-            Log.d(Launcher.LOG_TAG, "DragController.onInterceptTouchEvent " + ev + " mDragging="
+            Log.d(Launcher.TAG, "DragController.onInterceptTouchEvent " + ev + " mDragging="
                     + mDragging);
         }
         final int action = ev.getAction();

File: src/com/android/launcher2/Search.java
Patch:
@@ -51,7 +51,7 @@ public class Search extends LinearLayout
     private static final float WIDGET_TOP_OFFSET = 9;
 
     
-    private final String TAG = "SearchWidget";
+    private final String TAG = "Launcher.SearchWidget";
 
     private Launcher mLauncher;
 

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -179,6 +179,8 @@ public void setLauncher(Launcher launcher) {
     public void surfaceDestroyed(SurfaceHolder holder) {
         super.surfaceDestroyed(holder);
         mRollo.mHasSurface = false;
+        // Without this, we leak mMessageCallback which leaks the context.
+        mRS.mMessageCallback = null;
     }
 
     @Override

File: src/com/android/launcher2/HandleView.java
Patch:
@@ -45,6 +45,8 @@ public HandleView(Context context, AttributeSet attrs, int defStyle) {
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.HandleView, defStyle, 0);
         mOrientation = a.getInt(R.styleable.HandleView_direction, ORIENTATION_HORIZONTAL);
         a.recycle();
+
+        setContentDescription(context.getString(R.string.all_apps_button_label));
     }
 
     @Override

File: src/com/android/launcher2/DragController.java
Patch:
@@ -300,7 +300,7 @@ private void endDrag() {
      */
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         if (false) {
-            Log.d(Launcher.LOG_TAG, "DragController.onInterceptTouchEvent " + ev + " mDragging="
+            Log.d(Launcher.TAG, "DragController.onInterceptTouchEvent " + ev + " mDragging="
                     + mDragging);
         }
         final int action = ev.getAction();

File: src/com/android/launcher2/Search.java
Patch:
@@ -51,7 +51,7 @@ public class Search extends LinearLayout
     private static final float WIDGET_TOP_OFFSET = 9;
 
     
-    private final String TAG = "SearchWidget";
+    private final String TAG = "Launcher.SearchWidget";
 
     private Launcher mLauncher;
 

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -179,6 +179,8 @@ public void setLauncher(Launcher launcher) {
     public void surfaceDestroyed(SurfaceHolder holder) {
         super.surfaceDestroyed(holder);
         mRollo.mHasSurface = false;
+        // Without this, we leak mMessageCallback which leaks the context.
+        mRS.mMessageCallback = null;
     }
 
     @Override

File: src/com/android/launcher2/HandleView.java
Patch:
@@ -45,6 +45,8 @@ public HandleView(Context context, AttributeSet attrs, int defStyle) {
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.HandleView, defStyle, 0);
         mOrientation = a.getInt(R.styleable.HandleView_direction, ORIENTATION_HORIZONTAL);
         a.recycle();
+
+        setContentDescription(context.getString(R.string.all_apps_button_label));
     }
 
     @Override

File: src/com/android/launcher2/DragController.java
Patch:
@@ -300,7 +300,7 @@ private void endDrag() {
      */
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         if (false) {
-            Log.d(Launcher.LOG_TAG, "DragController.onInterceptTouchEvent " + ev + " mDragging="
+            Log.d(Launcher.TAG, "DragController.onInterceptTouchEvent " + ev + " mDragging="
                     + mDragging);
         }
         final int action = ev.getAction();

File: src/com/android/launcher2/Search.java
Patch:
@@ -51,7 +51,7 @@ public class Search extends LinearLayout
     private static final float WIDGET_TOP_OFFSET = 9;
 
     
-    private final String TAG = "SearchWidget";
+    private final String TAG = "Launcher.SearchWidget";
 
     private Launcher mLauncher;
 

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -179,6 +179,8 @@ public void setLauncher(Launcher launcher) {
     public void surfaceDestroyed(SurfaceHolder holder) {
         super.surfaceDestroyed(holder);
         mRollo.mHasSurface = false;
+        // Without this, we leak mMessageCallback which leaks the context.
+        mRS.mMessageCallback = null;
     }
 
     @Override

File: src/com/android/launcher2/HandleView.java
Patch:
@@ -45,6 +45,8 @@ public HandleView(Context context, AttributeSet attrs, int defStyle) {
         TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.HandleView, defStyle, 0);
         mOrientation = a.getInt(R.styleable.HandleView_direction, ORIENTATION_HORIZONTAL);
         a.recycle();
+
+        setContentDescription(context.getString(R.string.all_apps_button_label));
     }
 
     @Override

File: src/com/android/launcher2/DragController.java
Patch:
@@ -300,7 +300,7 @@ private void endDrag() {
      */
     public boolean onInterceptTouchEvent(MotionEvent ev) {
         if (false) {
-            Log.d(Launcher.LOG_TAG, "DragController.onInterceptTouchEvent " + ev + " mDragging="
+            Log.d(Launcher.TAG, "DragController.onInterceptTouchEvent " + ev + " mDragging="
                     + mDragging);
         }
         final int action = ev.getAction();

File: src/com/android/launcher2/Search.java
Patch:
@@ -51,7 +51,7 @@ public class Search extends LinearLayout
     private static final float WIDGET_TOP_OFFSET = 9;
 
     
-    private final String TAG = "SearchWidget";
+    private final String TAG = "Launcher.SearchWidget";
 
     private Launcher mLauncher;
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -607,6 +607,7 @@ private void loadWorkspace() {
                 */
 
                 mItems.clear();
+                mAppWidgets.clear();
 
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1057,6 +1057,7 @@ public boolean isWorkspaceLocked() {
     }
 
     private void addItems() {
+        closeAllApps(true);
         showAddDialog(mMenuAddInfo);
     }
 
@@ -1252,6 +1253,7 @@ private void showNotifications() {
     }
 
     private void startWallpaper() {
+        closeAllApps(true);
         final Intent pickWallpaper = new Intent(Intent.ACTION_SET_WALLPAPER);
         Intent chooser = Intent.createChooser(pickWallpaper,
                 getText(R.string.chooser_wallpaper));

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -607,6 +607,7 @@ private void loadWorkspace() {
                 */
 
                 mItems.clear();
+                mAppWidgets.clear();
 
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1057,6 +1057,7 @@ public boolean isWorkspaceLocked() {
     }
 
     private void addItems() {
+        closeAllApps(true);
         showAddDialog(mMenuAddInfo);
     }
 
@@ -1252,6 +1253,7 @@ private void showNotifications() {
     }
 
     private void startWallpaper() {
+        closeAllApps(true);
         final Intent pickWallpaper = new Intent(Intent.ACTION_SET_WALLPAPER);
         Intent chooser = Intent.createChooser(pickWallpaper,
                 getText(R.string.chooser_wallpaper));

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -607,6 +607,7 @@ private void loadWorkspace() {
                 */
 
                 mItems.clear();
+                mAppWidgets.clear();
 
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1057,6 +1057,7 @@ public boolean isWorkspaceLocked() {
     }
 
     private void addItems() {
+        closeAllApps(true);
         showAddDialog(mMenuAddInfo);
     }
 
@@ -1252,6 +1253,7 @@ private void showNotifications() {
     }
 
     private void startWallpaper() {
+        closeAllApps(true);
         final Intent pickWallpaper = new Intent(Intent.ACTION_SET_WALLPAPER);
         Intent chooser = Intent.createChooser(pickWallpaper,
                 getText(R.string.chooser_wallpaper));

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -607,6 +607,7 @@ private void loadWorkspace() {
                 */
 
                 mItems.clear();
+                mAppWidgets.clear();
 
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1057,6 +1057,7 @@ public boolean isWorkspaceLocked() {
     }
 
     private void addItems() {
+        closeAllApps(true);
         showAddDialog(mMenuAddInfo);
     }
 
@@ -1252,6 +1253,7 @@ private void showNotifications() {
     }
 
     private void startWallpaper() {
+        closeAllApps(true);
         final Intent pickWallpaper = new Intent(Intent.ACTION_SET_WALLPAPER);
         Intent chooser = Intent.createChooser(pickWallpaper,
                 getText(R.string.chooser_wallpaper));

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -66,6 +66,7 @@
 import android.appwidget.AppWidgetProviderInfo;
 
 import java.util.ArrayList;
+import java.util.Map.Entry;
 import java.util.HashMap;
 import java.io.DataOutputStream;
 import java.io.FileNotFoundException;
@@ -1841,7 +1842,8 @@ public void bindItems(ArrayList<ItemInfo> shortcuts, int start, int end) {
     /**
      * Implementation of the method from LauncherModel.Callbacks.
      */
-    void bindFolders(HashMap<Long, FolderInfo> folders) {
+    public void bindFolders(HashMap<Long, FolderInfo> folders) {
+        mFolders.clear();
         mFolders.putAll(folders);
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -66,6 +66,7 @@
 import android.appwidget.AppWidgetProviderInfo;
 
 import java.util.ArrayList;
+import java.util.Map.Entry;
 import java.util.HashMap;
 import java.io.DataOutputStream;
 import java.io.FileNotFoundException;
@@ -1841,7 +1842,8 @@ public void bindItems(ArrayList<ItemInfo> shortcuts, int start, int end) {
     /**
      * Implementation of the method from LauncherModel.Callbacks.
      */
-    void bindFolders(HashMap<Long, FolderInfo> folders) {
+    public void bindFolders(HashMap<Long, FolderInfo> folders) {
+        mFolders.clear();
         mFolders.putAll(folders);
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -66,6 +66,7 @@
 import android.appwidget.AppWidgetProviderInfo;
 
 import java.util.ArrayList;
+import java.util.Map.Entry;
 import java.util.HashMap;
 import java.io.DataOutputStream;
 import java.io.FileNotFoundException;
@@ -1841,7 +1842,8 @@ public void bindItems(ArrayList<ItemInfo> shortcuts, int start, int end) {
     /**
      * Implementation of the method from LauncherModel.Callbacks.
      */
-    void bindFolders(HashMap<Long, FolderInfo> folders) {
+    public void bindFolders(HashMap<Long, FolderInfo> folders) {
+        mFolders.clear();
         mFolders.putAll(folders);
     }
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -66,6 +66,7 @@
 import android.appwidget.AppWidgetProviderInfo;
 
 import java.util.ArrayList;
+import java.util.Map.Entry;
 import java.util.HashMap;
 import java.io.DataOutputStream;
 import java.io.FileNotFoundException;
@@ -1841,7 +1842,8 @@ public void bindItems(ArrayList<ItemInfo> shortcuts, int start, int end) {
     /**
      * Implementation of the method from LauncherModel.Callbacks.
      */
-    void bindFolders(HashMap<Long, FolderInfo> folders) {
+    public void bindFolders(HashMap<Long, FolderInfo> folders) {
+        mFolders.clear();
         mFolders.putAll(folders);
     }
 

File: src/com/android/launcher2/DragView.java
Patch:
@@ -84,9 +84,7 @@ public DragView(Context context, Bitmap bitmap, int registrationX, int registrat
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int widthSize = resolveSize(mBitmap.getWidth(), widthMeasureSpec);
-        int heightSize = resolveSize(mBitmap.getHeight(), heightMeasureSpec);
-        setMeasuredDimension(widthSize, heightSize);
+        setMeasuredDimension(mBitmap.getWidth(), mBitmap.getHeight());
     }
 
     @Override

File: src/com/android/launcher2/DragView.java
Patch:
@@ -84,9 +84,7 @@ public DragView(Context context, Bitmap bitmap, int registrationX, int registrat
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int widthSize = resolveSize(mBitmap.getWidth(), widthMeasureSpec);
-        int heightSize = resolveSize(mBitmap.getHeight(), heightMeasureSpec);
-        setMeasuredDimension(widthSize, heightSize);
+        setMeasuredDimension(mBitmap.getWidth(), mBitmap.getHeight());
     }
 
     @Override

File: src/com/android/launcher2/DragView.java
Patch:
@@ -84,9 +84,7 @@ public DragView(Context context, Bitmap bitmap, int registrationX, int registrat
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int widthSize = resolveSize(mBitmap.getWidth(), widthMeasureSpec);
-        int heightSize = resolveSize(mBitmap.getHeight(), heightMeasureSpec);
-        setMeasuredDimension(widthSize, heightSize);
+        setMeasuredDimension(mBitmap.getWidth(), mBitmap.getHeight());
     }
 
     @Override

File: src/com/android/launcher2/DragView.java
Patch:
@@ -84,9 +84,7 @@ public DragView(Context context, Bitmap bitmap, int registrationX, int registrat
 
     @Override
     protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
-        int widthSize = resolveSize(mBitmap.getWidth(), widthMeasureSpec);
-        int heightSize = resolveSize(mBitmap.getHeight(), heightMeasureSpec);
-        setMeasuredDimension(widthSize, heightSize);
+        setMeasuredDimension(mBitmap.getWidth(), mBitmap.getHeight());
     }
 
     @Override

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -177,10 +177,11 @@ public void surfaceDestroyed(SurfaceHolder holder) {
 
     @Override
     public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
-        super.surfaceChanged(holder, format, w, h);
-
+        Log.d(TAG, "starting surfaceChanged");
         long startTime = SystemClock.uptimeMillis();
 
+        super.surfaceChanged(holder, format, w, h);
+
         if (mRS != null) {
             destroyRenderScript();
             mRS = null;

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -505,7 +505,7 @@ public void run() {
                 // This way we don't start loading all apps until the workspace has settled
                 // down.
                 synchronized (LoaderThread.this) {
-                    mHandler.post(new Runnable() {
+                    mHandler.postIdle(new Runnable() {
                             public void run() {
                                 synchronized (LoaderThread.this) {
                                     mWorkspaceDoneBinding = true;

File: src/com/android/launcher2/Utilities.java
Patch:
@@ -338,9 +338,9 @@ private static void initStatics(Context context) {
         sIconWidth = sIconHeight = (int) resources.getDimension(android.R.dimen.app_icon_size);
         sIconTextureWidth = sIconTextureHeight = roundToPow2(sIconWidth);
 
-        sBlurPaint.setMaskFilter(new BlurMaskFilter(4 * density, BlurMaskFilter.Blur.NORMAL));
+        sBlurPaint.setMaskFilter(new BlurMaskFilter(5 * density, BlurMaskFilter.Blur.NORMAL));
         sGlowColorPaint.setColor(0xffff9000);
-        sGlowColorPaint.setMaskFilter(TableMaskFilter.CreateClipTable(0, 64));
+        sGlowColorPaint.setMaskFilter(TableMaskFilter.CreateClipTable(0, 30));
     }
 
     static class BubbleText {

File: src/com/android/launcher2/AppInfoCache.java
Patch:
@@ -169,7 +169,6 @@ private static void updateTitleAndIcon(ResolveInfo info, ApplicationInfo applica
 
         application.iconBitmap = Utilities.createAllAppsBitmap(
                 info.activityInfo.loadIcon(packageManager), context);
-        application.filtered = true;
 
         application.titleBitmap = bubble.createTextBitmap(application.title.toString());
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1780,6 +1780,7 @@ public void startBinding() {
         final Workspace workspace = mWorkspace;
         int count = workspace.getChildCount();
         for (int i = 0; i < count; i++) {
+            // Use removeAllViewsInLayout() to avoid an extra requestLayout() and invalidate().
             ((ViewGroup) workspace.getChildAt(i)).removeAllViewsInLayout();
         }
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -603,6 +603,8 @@ private void loadWorkspace() {
                 }
                 */
 
+                mItems.clear();
+
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);
 

File: src/com/android/launcher2/AppInfoCache.java
Patch:
@@ -169,7 +169,6 @@ private static void updateTitleAndIcon(ResolveInfo info, ApplicationInfo applica
 
         application.iconBitmap = Utilities.createAllAppsBitmap(
                 info.activityInfo.loadIcon(packageManager), context);
-        application.filtered = true;
 
         application.titleBitmap = bubble.createTextBitmap(application.title.toString());
     }

File: src/com/android/launcher2/AppInfoCache.java
Patch:
@@ -169,7 +169,6 @@ private static void updateTitleAndIcon(ResolveInfo info, ApplicationInfo applica
 
         application.iconBitmap = Utilities.createAllAppsBitmap(
                 info.activityInfo.loadIcon(packageManager), context);
-        application.filtered = true;
 
         application.titleBitmap = bubble.createTextBitmap(application.title.toString());
     }

File: src/com/android/launcher2/AppInfoCache.java
Patch:
@@ -169,7 +169,6 @@ private static void updateTitleAndIcon(ResolveInfo info, ApplicationInfo applica
 
         application.iconBitmap = Utilities.createAllAppsBitmap(
                 info.activityInfo.loadIcon(packageManager), context);
-        application.filtered = true;
 
         application.titleBitmap = bubble.createTextBitmap(application.title.toString());
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1780,6 +1780,7 @@ public void startBinding() {
         final Workspace workspace = mWorkspace;
         int count = workspace.getChildCount();
         for (int i = 0; i < count; i++) {
+            // Use removeAllViewsInLayout() to avoid an extra requestLayout() and invalidate().
             ((ViewGroup) workspace.getChildAt(i)).removeAllViewsInLayout();
         }
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -603,6 +603,8 @@ private void loadWorkspace() {
                 }
                 */
 
+                mItems.clear();
+
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1780,6 +1780,7 @@ public void startBinding() {
         final Workspace workspace = mWorkspace;
         int count = workspace.getChildCount();
         for (int i = 0; i < count; i++) {
+            // Use removeAllViewsInLayout() to avoid an extra requestLayout() and invalidate().
             ((ViewGroup) workspace.getChildAt(i)).removeAllViewsInLayout();
         }
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -603,6 +603,8 @@ private void loadWorkspace() {
                 }
                 */
 
+                mItems.clear();
+
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1780,6 +1780,7 @@ public void startBinding() {
         final Workspace workspace = mWorkspace;
         int count = workspace.getChildCount();
         for (int i = 0; i < count; i++) {
+            // Use removeAllViewsInLayout() to avoid an extra requestLayout() and invalidate().
             ((ViewGroup) workspace.getChildAt(i)).removeAllViewsInLayout();
         }
 

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -603,6 +603,8 @@ private void loadWorkspace() {
                 }
                 */
 
+                mItems.clear();
+
                 final Cursor c = contentResolver.query(
                         LauncherSettings.Favorites.CONTENT_URI, null, null, null, null);
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -202,6 +202,7 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         mModel = ((LauncherApplication)getApplication()).setLauncher(this);
+        mDragController = new DragController(this);
         mInflater = getLayoutInflater();
 
         mAppWidgetManager = AppWidgetManager.getInstance(this);
@@ -523,7 +524,6 @@ private void restoreState(Bundle savedState) {
      * Finds all the views we need and configure them properly.
      */
     private void setupViews() {
-        mDragController = new DragController(this);
         DragController dragController = mDragController;
 
         DragLayer dragLayer = (DragLayer) findViewById(R.id.drag_layer);
@@ -1318,8 +1318,7 @@ void closeFolder(Folder folder) {
         ViewGroup parent = (ViewGroup) folder.getParent();
         if (parent != null) {
             parent.removeView(folder);
-            // TODO: this line crashes.
-            //mDragController.removeDropTarget((DropTarget)folder);
+            mDragController.removeDropTarget((DropTarget)folder);
         }
         folder.onClose();
     }

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -374,6 +374,7 @@ public boolean isVisible() {
         return mRollo.mMessageProc.mZoom > 0.001f;
     }
 
+    /*
     @Override
     public boolean onTrackballEvent(MotionEvent ev)
     {
@@ -386,6 +387,7 @@ public boolean onTrackballEvent(MotionEvent ev)
 
         return true;
     }
+    */
 
     public void setApps(ArrayList<ApplicationInfo> list) {
         mAllAppsList = list;

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -374,6 +374,7 @@ public boolean isVisible() {
         return mRollo.mMessageProc.mZoom > 0.001f;
     }
 
+    /*
     @Override
     public boolean onTrackballEvent(MotionEvent ev)
     {
@@ -386,6 +387,7 @@ public boolean onTrackballEvent(MotionEvent ev)
 
         return true;
     }
+    */
 
     public void setApps(ArrayList<ApplicationInfo> list) {
         mAllAppsList = list;

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -374,6 +374,7 @@ public boolean isVisible() {
         return mRollo.mMessageProc.mZoom > 0.001f;
     }
 
+    /*
     @Override
     public boolean onTrackballEvent(MotionEvent ev)
     {
@@ -386,6 +387,7 @@ public boolean onTrackballEvent(MotionEvent ev)
 
         return true;
     }
+    */
 
     public void setApps(ArrayList<ApplicationInfo> list) {
         mAllAppsList = list;

File: src/com/android/launcher2/AllAppsView.java
Patch:
@@ -374,6 +374,7 @@ public boolean isVisible() {
         return mRollo.mMessageProc.mZoom > 0.001f;
     }
 
+    /*
     @Override
     public boolean onTrackballEvent(MotionEvent ev)
     {
@@ -386,6 +387,7 @@ public boolean onTrackballEvent(MotionEvent ev)
 
         return true;
     }
+    */
 
     public void setApps(ArrayList<ApplicationInfo> list) {
         mAllAppsList = list;

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1923,7 +1923,6 @@ public void finishBindingItems() {
      * Implementation of the method from LauncherModel.Callbacks.
      */
     public void bindAllApplications(ArrayList<ApplicationInfo> apps) {
-        Log.d(LOG_TAG, "got info for " + apps.size() + " apps");
         mAllAppsList = apps;
         mAllAppsGrid.setApps(mAllAppsList);
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1923,7 +1923,6 @@ public void finishBindingItems() {
      * Implementation of the method from LauncherModel.Callbacks.
      */
     public void bindAllApplications(ArrayList<ApplicationInfo> apps) {
-        Log.d(LOG_TAG, "got info for " + apps.size() + " apps");
         mAllAppsList = apps;
         mAllAppsGrid.setApps(mAllAppsList);
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1923,7 +1923,6 @@ public void finishBindingItems() {
      * Implementation of the method from LauncherModel.Callbacks.
      */
     public void bindAllApplications(ArrayList<ApplicationInfo> apps) {
-        Log.d(LOG_TAG, "got info for " + apps.size() + " apps");
         mAllAppsList = apps;
         mAllAppsGrid.setApps(mAllAppsList);
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -1923,7 +1923,6 @@ public void finishBindingItems() {
      * Implementation of the method from LauncherModel.Callbacks.
      */
     public void bindAllApplications(ArrayList<ApplicationInfo> apps) {
-        Log.d(LOG_TAG, "got info for " + apps.size() + " apps");
         mAllAppsList = apps;
         mAllAppsGrid.setApps(mAllAppsList);
     }

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -774,6 +774,9 @@ protected void onNewIntent(Intent intent) {
         if (Intent.ACTION_MAIN.equals(intent.getAction())) {
             getWindow().closeAllPanels();
 
+            // Whatever we were doing is hereby canceled.
+            mWaitingForResult = false;
+
             // Set this flag so that onResume knows to close the search dialog if it's open,
             // because this was a new intent (thus a press of 'home' or some such) rather than
             // for example onResume being called when the user pressed the 'back' button.

File: src/com/android/launcher2/DragController.java
Patch:
@@ -44,6 +44,8 @@
  * Class for initiating a drag within a view or across multiple views.
  */
 public class DragController {
+    private static final String TAG = "Launcher.DragController";
+
     /** Indicates the drag is a move.  */
     public static int DRAG_ACTION_MOVE = 0;
 

File: src/com/android/launcher2/Launcher.java
Patch:
@@ -774,6 +774,9 @@ protected void onNewIntent(Intent intent) {
         if (Intent.ACTION_MAIN.equals(intent.getAction())) {
             getWindow().closeAllPanels();
 
+            // Whatever we were doing is hereby canceled.
+            mWaitingForResult = false;
+
             // Set this flag so that onResume knows to close the search dialog if it's open,
             // because this was a new intent (thus a press of 'home' or some such) rather than
             // for example onResume being called when the user pressed the 'back' button.

File: src/com/android/launcher2/DragController.java
Patch:
@@ -44,6 +44,8 @@
  * Class for initiating a drag within a view or across multiple views.
  */
 public class DragController {
+    private static final String TAG = "Launcher.DragController";
+
     /** Indicates the drag is a move.  */
     public static int DRAG_ACTION_MOVE = 0;
 

File: src/com/android/launcher2/DeferredHandler.java
Patch:
@@ -40,6 +40,9 @@ private class Impl extends Handler implements MessageQueue.IdleHandler {
         public void handleMessage(Message msg) {
             Runnable r;
             synchronized (mQueue) {
+                if (mQueue.size() == 0) {
+                    return;
+                }
                 r = mQueue.removeFirst();
             }
             r.run();

File: src/com/android/launcher2/DeferredHandler.java
Patch:
@@ -40,6 +40,9 @@ private class Impl extends Handler implements MessageQueue.IdleHandler {
         public void handleMessage(Message msg) {
             Runnable r;
             synchronized (mQueue) {
+                if (mQueue.size() == 0) {
+                    return;
+                }
                 r = mQueue.removeFirst();
             }
             r.run();

File: src/com/android/launcher2/Folder.java
Patch:
@@ -64,11 +64,11 @@ public Folder(Context context, AttributeSet attrs) {
     protected void onFinishInflate() {
         super.onFinishInflate();
 
-        mContent = (AbsListView) findViewById(R.id.content);
+        mContent = (AbsListView) findViewById(R.id.folder_content);
         mContent.setOnItemClickListener(this);
         mContent.setOnItemLongClickListener(this);
         
-        mCloseButton = (Button) findViewById(R.id.close);
+        mCloseButton = (Button) findViewById(R.id.folder_close);
         mCloseButton.setOnClickListener(this);
         mCloseButton.setOnLongClickListener(this);
     }

File: src/com/android/launcher2/Folder.java
Patch:
@@ -64,11 +64,11 @@ public Folder(Context context, AttributeSet attrs) {
     protected void onFinishInflate() {
         super.onFinishInflate();
 
-        mContent = (AbsListView) findViewById(R.id.content);
+        mContent = (AbsListView) findViewById(R.id.folder_content);
         mContent.setOnItemClickListener(this);
         mContent.setOnItemLongClickListener(this);
         
-        mCloseButton = (Button) findViewById(R.id.close);
+        mCloseButton = (Button) findViewById(R.id.folder_close);
         mCloseButton.setOnClickListener(this);
         mCloseButton.setOnLongClickListener(this);
     }

File: src/com/android/launcher2/Search.java
Patch:
@@ -320,7 +320,7 @@ public void onDetachedFromWindow() {
     }
 
     /**
-     * If appropriate & available, configure voice search
+     * If appropriate &amp; available, configure voice search
      * 
      * Note:  Because the home screen search widget is always web search, we only check for
      * getVoiceSearchLaunchWebSearch() modes.  We don't support the alternate form of app-specific

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -310,7 +310,7 @@ public void onReceiveIntent(Context context, Intent intent) {
                 mAllAppsList.modified = new ArrayList();
             }
 
-            final Callbacks callbacks = mCallbacks.get();
+            final Callbacks callbacks = mCallbacks != null ? mCallbacks.get() : null;
             if (callbacks == null) {
                 return;
             }

File: src/com/android/launcher2/LauncherModel.java
Patch:
@@ -310,7 +310,7 @@ public void onReceiveIntent(Context context, Intent intent) {
                 mAllAppsList.modified = new ArrayList();
             }
 
-            final Callbacks callbacks = mCallbacks.get();
+            final Callbacks callbacks = mCallbacks != null ? mCallbacks.get() : null;
             if (callbacks == null) {
                 return;
             }

File: src/com/android/launcher2/DeleteZone.java
Patch:
@@ -136,7 +136,7 @@ public void onDragExit(DragSource source, int x, int y, int xOffset, int yOffset
         dragView.setPaint(null);
     }
 
-    public void onDragStart(View v, DragSource source, Object info, int dragAction) {
+    public void onDragStart(DragSource source, Object info, int dragAction) {
         final ItemInfo item = (ItemInfo) info;
         if (item != null) {
             mTrashMode = true;

File: src/com/android/launcher/GesturesActivity.java
Patch:
@@ -81,7 +81,7 @@ protected void onCreate(Bundle savedInstanceState) {
         setListAdapter(new GesturesSettingsAdapter(mAdapter));
         getListView().setOnItemClickListener(this);
 
-        mStore = Launcher.getGestureLibrary();
+        mStore = Launcher.getGestureLibrary(this);
         mTask = (GesturesLoadTask) new GesturesLoadTask().execute();
 
         registerForContextMenu(getListView());

File: src/com/android/launcher/GesturesActivity.java
Patch:
@@ -81,7 +81,7 @@ protected void onCreate(Bundle savedInstanceState) {
         setListAdapter(new GesturesSettingsAdapter(mAdapter));
         getListView().setOnItemClickListener(this);
 
-        mStore = Launcher.getGestureLibrary();
+        mStore = Launcher.getGestureLibrary(this);
         mTask = (GesturesLoadTask) new GesturesLoadTask().execute();
 
         registerForContextMenu(getListView());

File: src/com/android/launcher/GesturesActivity.java
Patch:
@@ -167,7 +167,7 @@ protected Dialog onCreateDialog(int id) {
     @Override
     protected void onPrepareDialog(int id, Dialog dialog) {
         super.onPrepareDialog(id, dialog);
-        if (id == DIALOG_RENAME_GESTURE) {
+        if (id == DIALOG_RENAME_GESTURE && mCurrentRenameInfo != null) {
             mInput.setText(mCurrentRenameInfo.title);
         }
     }

File: src/com/android/launcher/GesturesActivity.java
Patch:
@@ -167,7 +167,7 @@ protected Dialog onCreateDialog(int id) {
     @Override
     protected void onPrepareDialog(int id, Dialog dialog) {
         super.onPrepareDialog(id, dialog);
-        if (id == DIALOG_RENAME_GESTURE) {
+        if (id == DIALOG_RENAME_GESTURE && mCurrentRenameInfo != null) {
             mInput.setText(mCurrentRenameInfo.title);
         }
     }

File: src/com/android/launcher/Launcher.java
Patch:
@@ -1096,7 +1096,7 @@ public void onDestroy() {
 
     @Override
     public void startActivityForResult(Intent intent, int requestCode) {
-        mWaitingForResult = true;
+        if (requestCode >= 0) mWaitingForResult = true;
         super.startActivityForResult(intent, requestCode);
     }
 

File: src/com/android/launcher/CellLayout.java
Patch:
@@ -530,7 +530,7 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
             final View view = getChildAt(i);
             view.setDrawingCacheEnabled(enabled);
             // Update the drawing caches
-            view.buildDrawingCache();
+            view.buildDrawingCache(true);
         }
     }
 

File: src/com/android/launcher/Launcher.java
Patch:
@@ -1096,7 +1096,7 @@ public void onDestroy() {
 
     @Override
     public void startActivityForResult(Intent intent, int requestCode) {
-        mWaitingForResult = true;
+        if (requestCode >= 0) mWaitingForResult = true;
         super.startActivityForResult(intent, requestCode);
     }
 

File: src/com/android/launcher/CellLayout.java
Patch:
@@ -530,7 +530,7 @@ protected void setChildrenDrawingCacheEnabled(boolean enabled) {
             final View view = getChildAt(i);
             view.setDrawingCacheEnabled(enabled);
             // Update the drawing caches
-            view.buildDrawingCache();
+            view.buildDrawingCache(true);
         }
     }
 

File: src/com/android/launcher/ApplicationInfo.java
Patch:
@@ -100,7 +100,7 @@ void onAddToDatabase(ContentValues values) {
         String titleStr = title != null ? title.toString() : null;
         values.put(LauncherSettings.BaseLauncherColumns.TITLE, titleStr);
 
-        String uri = intent != null ? intent.toURI() : null;
+        String uri = intent != null ? intent.toUri(0) : null;
         values.put(LauncherSettings.BaseLauncherColumns.INTENT, uri);
 
         if (customIcon) {

File: src/com/android/launcher/LauncherProvider.java
Patch:
@@ -563,7 +563,7 @@ private boolean addShortcut(SQLiteDatabase db, ContentValues values, TypedArray
                 intent.setComponent(cn);
                 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                         | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
-                values.put(Favorites.INTENT, intent.toURI());
+                values.put(Favorites.INTENT, intent.toUri(0));
                 values.put(Favorites.TITLE, info.loadLabel(packageManager).toString());
                 values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_APPLICATION);
                 values.put(Favorites.SPANX, 1);

File: src/com/android/launcher/LauncherSettings.java
Patch:
@@ -32,7 +32,7 @@ static interface BaseLauncherColumns extends BaseColumns {
 
         /**
          * The Intent URL of the gesture, describing what it points to. This
-         * value is given to {@link android.content.Intent#getIntent} to create
+         * value is given to {@link android.content.Intent#parseUri(String, int)} to create
          * an Intent that can be launched.
          * <P>Type: TEXT</P>
          */

File: src/com/android/launcher/LiveFolderAdapter.java
Patch:
@@ -116,7 +116,7 @@ public void bindView(View view, Context context, Cursor cursor) {
 
         if (holder.intentIndex != -1) {
             try {
-                holder.intent = Intent.getIntent(cursor.getString(holder.intentIndex));
+                holder.intent = Intent.parseUri(cursor.getString(holder.intentIndex), 0);
             } catch (URISyntaxException e) {
                 // Ignore
             }

File: src/com/android/launcher/LiveFolderInfo.java
Patch:
@@ -63,7 +63,7 @@ void onAddToDatabase(ContentValues values) {
         values.put(LauncherSettings.Favorites.TITLE, title.toString());
         values.put(LauncherSettings.Favorites.URI, uri.toString());
         if (baseIntent != null) {
-            values.put(LauncherSettings.Favorites.INTENT, baseIntent.toURI());
+            values.put(LauncherSettings.Favorites.INTENT, baseIntent.toUri(0));
         }
         values.put(LauncherSettings.Favorites.ICON_TYPE, LauncherSettings.Favorites.ICON_TYPE_RESOURCE);
         values.put(LauncherSettings.Favorites.DISPLAY_MODE, displayMode);

File: src/com/android/launcher/UninstallShortcutReceiver.java
Patch:
@@ -53,7 +53,7 @@ public void onReceive(Context context, Intent data) {
             try {
                 while (c.moveToNext()) {
                     try {
-                        if (intent.filterEquals(Intent.getIntent(c.getString(intentIndex)))) {
+                        if (intent.filterEquals(Intent.parseUri(c.getString(intentIndex), 0))) {
                             final long id = c.getLong(idIndex);
                             final Uri uri = LauncherSettings.Favorites.getContentUri(id, false);
                             cr.delete(uri, null, null);

File: src/com/android/launcher/ApplicationInfo.java
Patch:
@@ -100,7 +100,7 @@ void onAddToDatabase(ContentValues values) {
         String titleStr = title != null ? title.toString() : null;
         values.put(LauncherSettings.BaseLauncherColumns.TITLE, titleStr);
 
-        String uri = intent != null ? intent.toURI() : null;
+        String uri = intent != null ? intent.toUri(0) : null;
         values.put(LauncherSettings.BaseLauncherColumns.INTENT, uri);
 
         if (customIcon) {

File: src/com/android/launcher/LauncherProvider.java
Patch:
@@ -563,7 +563,7 @@ private boolean addShortcut(SQLiteDatabase db, ContentValues values, TypedArray
                 intent.setComponent(cn);
                 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                         | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
-                values.put(Favorites.INTENT, intent.toURI());
+                values.put(Favorites.INTENT, intent.toUri(0));
                 values.put(Favorites.TITLE, info.loadLabel(packageManager).toString());
                 values.put(Favorites.ITEM_TYPE, Favorites.ITEM_TYPE_APPLICATION);
                 values.put(Favorites.SPANX, 1);

File: src/com/android/launcher/LauncherSettings.java
Patch:
@@ -32,7 +32,7 @@ static interface BaseLauncherColumns extends BaseColumns {
 
         /**
          * The Intent URL of the gesture, describing what it points to. This
-         * value is given to {@link android.content.Intent#getIntent} to create
+         * value is given to {@link android.content.Intent#parseUri(String, int)} to create
          * an Intent that can be launched.
          * <P>Type: TEXT</P>
          */

File: src/com/android/launcher/LiveFolderAdapter.java
Patch:
@@ -116,7 +116,7 @@ public void bindView(View view, Context context, Cursor cursor) {
 
         if (holder.intentIndex != -1) {
             try {
-                holder.intent = Intent.getIntent(cursor.getString(holder.intentIndex));
+                holder.intent = Intent.parseUri(cursor.getString(holder.intentIndex), 0);
             } catch (URISyntaxException e) {
                 // Ignore
             }

File: src/com/android/launcher/LiveFolderInfo.java
Patch:
@@ -63,7 +63,7 @@ void onAddToDatabase(ContentValues values) {
         values.put(LauncherSettings.Favorites.TITLE, title.toString());
         values.put(LauncherSettings.Favorites.URI, uri.toString());
         if (baseIntent != null) {
-            values.put(LauncherSettings.Favorites.INTENT, baseIntent.toURI());
+            values.put(LauncherSettings.Favorites.INTENT, baseIntent.toUri(0));
         }
         values.put(LauncherSettings.Favorites.ICON_TYPE, LauncherSettings.Favorites.ICON_TYPE_RESOURCE);
         values.put(LauncherSettings.Favorites.DISPLAY_MODE, displayMode);

File: src/com/android/launcher/UninstallShortcutReceiver.java
Patch:
@@ -53,7 +53,7 @@ public void onReceive(Context context, Intent data) {
             try {
                 while (c.moveToNext()) {
                     try {
-                        if (intent.filterEquals(Intent.getIntent(c.getString(intentIndex)))) {
+                        if (intent.filterEquals(Intent.parseUri(c.getString(intentIndex), 0))) {
                             final long id = c.getLong(idIndex);
                             final Uri uri = LauncherSettings.Favorites.getContentUri(id, false);
                             cr.delete(uri, null, null);

File: src/com/android/launcher/LauncherProvider.java
Patch:
@@ -391,6 +391,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
             if (version != DATABASE_VERSION) {
                 Log.w(LOG_TAG, "Destroying all old data.");
                 db.execSQL("DROP TABLE IF EXISTS " + TABLE_FAVORITES);
+                db.execSQL("DROP TABLE IF EXISTS " + TABLE_GESTURES);
                 onCreate(db);
             }
         }

File: src/com/android/launcher/LauncherProvider.java
Patch:
@@ -391,6 +391,7 @@ public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
             if (version != DATABASE_VERSION) {
                 Log.w(LOG_TAG, "Destroying all old data.");
                 db.execSQL("DROP TABLE IF EXISTS " + TABLE_FAVORITES);
+                db.execSQL("DROP TABLE IF EXISTS " + TABLE_GESTURES);
                 onCreate(db);
             }
         }

File: src/com/android/launcher/Launcher.java
Patch:
@@ -869,7 +869,8 @@ protected void onNewIntent(Intent intent) {
             if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) !=
                     Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) {
 
-                if (mGesturesPanel != null && mDragLayer.getWindowVisibility() == View.VISIBLE) {
+                if (mGesturesPanel != null && mDragLayer.getWindowVisibility() == View.VISIBLE &&
+                        mDragLayer.hasWindowFocus()) {
                     SearchManager searchManager =
                             (SearchManager) getSystemService(Context.SEARCH_SERVICE);
                     if (!searchManager.isVisible()) {

File: src/com/android/launcher/Launcher.java
Patch:
@@ -869,7 +869,8 @@ protected void onNewIntent(Intent intent) {
             if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) !=
                     Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) {
 
-                if (mGesturesPanel != null && mDragLayer.getWindowVisibility() == View.VISIBLE) {
+                if (mGesturesPanel != null && mDragLayer.getWindowVisibility() == View.VISIBLE &&
+                        mDragLayer.hasWindowFocus()) {
                     SearchManager searchManager =
                             (SearchManager) getSystemService(Context.SEARCH_SERVICE);
                     if (!searchManager.isVisible()) {

File: src/com/android/launcher/Workspace.java
Patch:
@@ -635,7 +635,7 @@ public boolean dispatchUnhandledMove(View focused, int direction) {
     }
 
     @Override
-    public void addFocusables(ArrayList<View> views, int direction) {
+    public void addFocusables(ArrayList<View> views, int direction, int focusableMode) {
         if (mLauncher.isDrawerDown()) {
             final Folder openFolder = getOpenFolder();
             if (openFolder == null) {

File: src/com/android/launcher/Workspace.java
Patch:
@@ -635,7 +635,7 @@ public boolean dispatchUnhandledMove(View focused, int direction) {
     }
 
     @Override
-    public void addFocusables(ArrayList<View> views, int direction) {
+    public void addFocusables(ArrayList<View> views, int direction, int focusableMode) {
         if (mLauncher.isDrawerDown()) {
             final Folder openFolder = getOpenFolder();
             if (openFolder == null) {

File: src/com/android/launcher/LiveFolderIcon.java
Patch:
@@ -41,8 +41,8 @@ static LiveFolderIcon fromXml(int resId, Launcher launcher, ViewGroup group,
         final Resources resources = launcher.getResources();
         Drawable d = folderInfo.icon;
         if (d == null) {
-            resources.getDrawable(R.drawable.ic_launcher_folder);
-            d = Utilities.createIconThumbnail(d, launcher);
+            d = Utilities.createIconThumbnail(
+                    resources.getDrawable(R.drawable.ic_launcher_folder), launcher);
             folderInfo.filtered = true;
         }
         icon.setCompoundDrawablesWithIntrinsicBounds(null, d, null, null);

File: src/com/android/launcher/WallpaperChooser.java
Patch:
@@ -60,7 +60,7 @@ public class WallpaperChooser extends Activity implements AdapterView.OnItemSele
     };
 
     private static final Integer[] IMAGE_IDS = {
-            com.android.internal.R.drawable.default_wallpaper,
+            R.drawable.wallpaper_lake,
             R.drawable.wallpaper_sunset,
             R.drawable.wallpaper_beach,
             R.drawable.wallpaper_snow_leopard,

File: src/com/android/launcher/WallpaperChooser.java
Patch:
@@ -60,7 +60,7 @@ public class WallpaperChooser extends Activity implements AdapterView.OnItemSele
     };
 
     private static final Integer[] IMAGE_IDS = {
-            com.android.internal.R.drawable.default_wallpaper,
+            R.drawable.wallpaper_lake,
             R.drawable.wallpaper_sunset,
             R.drawable.wallpaper_beach,
             R.drawable.wallpaper_snow_leopard,

File: src/com/android/launcher/WallpaperChooser.java
Patch:
@@ -60,7 +60,7 @@ public class WallpaperChooser extends Activity implements AdapterView.OnItemSele
     };
 
     private static final Integer[] IMAGE_IDS = {
-            com.android.internal.R.drawable.default_wallpaper,
+            R.drawable.wallpaper_lake,
             R.drawable.wallpaper_sunset,
             R.drawable.wallpaper_beach,
             R.drawable.wallpaper_snow_leopard,

File: src/com/android/launcher/Workspace.java
Patch:
@@ -833,6 +833,8 @@ private void snapToDestination() {
     }
 
     void snapToScreen(int whichScreen) {
+        if (!mScroller.isFinished()) return;
+
         enableChildrenCache();
 
         whichScreen = Math.max(0, Math.min(whichScreen, getChildCount() - 1));

File: src/com/android/launcher/Workspace.java
Patch:
@@ -833,6 +833,8 @@ private void snapToDestination() {
     }
 
     void snapToScreen(int whichScreen) {
+        if (!mScroller.isFinished()) return;
+
         enableChildrenCache();
 
         whichScreen = Math.max(0, Math.min(whichScreen, getChildCount() - 1));

File: src/com/android/launcher/CellLayout.java
Patch:
@@ -531,8 +531,8 @@ protected void setChildrenDrawnWithCacheEnabled(boolean enabled) {
      * Find a vacant area that will fit the given bounds nearest the requested
      * cell location. Uses Euclidean distance to score multiple vacant areas.
      * 
-     * @param cellX The X location of the desired location.
-     * @param cellY The Y location of the desired location.
+     * @param pixelX The X location at which you want to search for a vacant area.
+     * @param pixelY The Y location at which you want to search for a vacant area.
      * @param spanX Horizontal span of the object.
      * @param spanY Vertical span of the object.
      * @param vacantCells Pre-computed set of vacant cells to search.

File: src/com/android/launcher/CellLayout.java
Patch:
@@ -531,8 +531,8 @@ protected void setChildrenDrawnWithCacheEnabled(boolean enabled) {
      * Find a vacant area that will fit the given bounds nearest the requested
      * cell location. Uses Euclidean distance to score multiple vacant areas.
      * 
-     * @param cellX The X location of the desired location.
-     * @param cellY The Y location of the desired location.
+     * @param pixelX The X location at which you want to search for a vacant area.
+     * @param pixelY The Y location at which you want to search for a vacant area.
      * @param spanX Horizontal span of the object.
      * @param spanY Vertical span of the object.
      * @param vacantCells Pre-computed set of vacant cells to search.

File: src/com/android/launcher/LauncherModel.java
Patch:
@@ -1243,7 +1243,7 @@ static boolean shortcutExists(Context context, String title, Intent intent) {
     FolderInfo getFolderById(Context context, long id) {
         final ContentResolver cr = context.getContentResolver();
         Cursor c = cr.query(LauncherSettings.Favorites.CONTENT_URI, null,
-                "_id=? and itemType=? or itemType=?",
+                "_id=? and (itemType=? or itemType=?)",
                 new String[] { String.valueOf(id),
                         String.valueOf(LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER),
                         String.valueOf(LauncherSettings.Favorites.ITEM_TYPE_LIVE_FOLDER) }, null);

File: src/com/android/launcher/LauncherModel.java
Patch:
@@ -1243,7 +1243,7 @@ static boolean shortcutExists(Context context, String title, Intent intent) {
     FolderInfo getFolderById(Context context, long id) {
         final ContentResolver cr = context.getContentResolver();
         Cursor c = cr.query(LauncherSettings.Favorites.CONTENT_URI, null,
-                "_id=? and itemType=? or itemType=?",
+                "_id=? and (itemType=? or itemType=?)",
                 new String[] { String.valueOf(id),
                         String.valueOf(LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER),
                         String.valueOf(LauncherSettings.Favorites.ITEM_TYPE_LIVE_FOLDER) }, null);

File: src/com/android/launcher/LauncherModel.java
Patch:
@@ -47,7 +47,7 @@
  * for the Launcher.
  */
 public class LauncherModel {
-    static final boolean DEBUG_LOADERS = false;
+    static final boolean DEBUG_LOADERS = true;
     static final String LOG_TAG = "HomeLoaders";
 
     private static final int UI_NOTIFICATION_RATE = 4;

File: src/com/android/launcher/LauncherModel.java
Patch:
@@ -47,7 +47,7 @@
  * for the Launcher.
  */
 public class LauncherModel {
-    static final boolean DEBUG_LOADERS = false;
+    static final boolean DEBUG_LOADERS = true;
     static final String LOG_TAG = "HomeLoaders";
 
     private static final int UI_NOTIFICATION_RATE = 4;

File: src/com/android/launcher/LauncherModel.java
Patch:
@@ -1243,7 +1243,7 @@ static boolean shortcutExists(Context context, String title, Intent intent) {
     FolderInfo getFolderById(Context context, long id) {
         final ContentResolver cr = context.getContentResolver();
         Cursor c = cr.query(LauncherSettings.Favorites.CONTENT_URI, null,
-                "_id=? and itemType=? or itemType=?",
+                "_id=? and (itemType=? or itemType=?)",
                 new String[] { String.valueOf(id),
                         String.valueOf(LauncherSettings.Favorites.ITEM_TYPE_USER_FOLDER),
                         String.valueOf(LauncherSettings.Favorites.ITEM_TYPE_LIVE_FOLDER) }, null);

