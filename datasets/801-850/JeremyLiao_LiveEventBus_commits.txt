File: branchs/live-event-bus-x/liveeventbus-x/src/main/java/com/jeremyliao/liveeventbus/core/LiveEventBusCore.java
Patch:
@@ -95,6 +95,7 @@ public synchronized <T> Observable<T> with(String key, Class<T> type) {
      * first of all, call config to get the Config instance
      * then, call the method of Config to config LiveEventBus
      * call this method in Application.onCreate
+     * @return Config
      */
     public Config config() {
         return config;

File: branchs/live-event-bus-x/liveeventbus-x/src/main/java/com/jeremyliao/liveeventbus/core/ObservableConfig.java
Patch:
@@ -14,16 +14,16 @@ public class ObservableConfig {
      * true: observer can always receive message
      * false: observer can only receive message when resumed
      *
-     * @param active
-     * @return
+     * @param active boolean
+     * @return ObservableConfig
      */
     public ObservableConfig lifecycleObserverAlwaysActive(boolean active) {
         lifecycleObserverAlwaysActive = active;
         return this;
     }
 
     /**
-     * @param clear
+     * @param clear boolean
      * @return true: clear livedata when no observer observe it
      * false: not clear livedata unless app was killed
      */

File: live-event-bus/liveeventbus/src/main/java/com/jeremyliao/liveeventbus/core/LiveEventBusCore.java
Patch:
@@ -94,6 +94,7 @@ public synchronized <T> Observable<T> with(String key, Class<T> type) {
      * first of all, call config to get the Config instance
      * then, call the method of Config to config LiveEventBus
      * call this method in Application.onCreate
+     * @return Config
      */
     public Config config() {
         return config;

File: live-event-bus/liveeventbus/src/main/java/com/jeremyliao/liveeventbus/core/ObservableConfig.java
Patch:
@@ -14,16 +14,16 @@ public class ObservableConfig {
      * true: observer can always receive message
      * false: observer can only receive message when resumed
      *
-     * @param active
-     * @return
+     * @param active boolean
+     * @return ObservableConfig
      */
     public ObservableConfig lifecycleObserverAlwaysActive(boolean active) {
         lifecycleObserverAlwaysActive = active;
         return this;
     }
 
     /**
-     * @param clear
+     * @param clear boolean
      * @return true: clear livedata when no observer observe it
      * false: not clear livedata unless app was killed
      */

File: branchs/live-event-bus-x/app/src/androidTest/java/com/jeremyliao/lebapp/AppUtilsTest.java
Patch:
@@ -17,6 +17,6 @@ public class AppUtilsTest {
 
     @Test
     public void testGetApplicationContext() throws Exception {
-        Assert.assertNotNull(AppUtils.getApplicationContext());
+        Assert.assertNotNull(AppUtils.getApp());
     }
 }
\ No newline at end of file

File: branchs/live-event-bus-x/app/src/main/java/com/jeremyliao/lebapp/app/DemoApplication.java
Patch:
@@ -14,7 +14,6 @@ public void onCreate() {
         super.onCreate();
         LiveEventBus
                 .config()
-                .supportBroadcast(this)
                 .lifecycleObserverAlwaysActive(true);
     }
 }

File: live-event-bus/app/src/androidTest/java/com/jeremyliao/lebapp/AppUtilsTest.java
Patch:
@@ -16,6 +16,6 @@ public class AppUtilsTest {
 
     @Test
     public void testGetApplicationContext() throws Exception {
-        Assert.assertNotNull(AppUtils.getApplicationContext());
+        Assert.assertNotNull(AppUtils.getApp());
     }
 }
\ No newline at end of file

File: live-event-bus/app/src/main/java/com/jeremyliao/lebapp/app/DemoApplication.java
Patch:
@@ -14,7 +14,6 @@ public void onCreate() {
         super.onCreate();
         LiveEventBus
                 .config()
-                .supportBroadcast(this)
                 .lifecycleObserverAlwaysActive(true);
     }
 }

